unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = this;
  v6 = this[14];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[12], (uint64_t)a2, a4);
    v6 = v5[14];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *((_QWORD *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 8);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = v5[14];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_12:
  v8 = *((_QWORD *)v5 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  v6 = v5[14];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_15:
  v9 = *((_QWORD *)v5 + 3);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v9 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 24);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  v6 = v5[14];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    goto LABEL_21;
  }
LABEL_18:
  v10 = *((_QWORD *)v5 + 4);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v10 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 32);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  if ((v5[14] & 0x20) != 0)
  {
LABEL_21:
    v11 = *((_QWORD *)v5 + 5);
    if (!v11)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v11 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 40);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  int v21;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  int v25;

  LOBYTE(v2) = *((_BYTE *)this + 56);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_45;
  }
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if (v4 >= 0x80)
    {
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      v2 = *((_DWORD *)this + 14);
    }
    else
    {
      v5 = 1;
    }
    v3 = (v5 + 1);
    if ((v2 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 56) & 2) == 0)
      goto LABEL_16;
  }
  v6 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((_QWORD *)this + 1);
  if (!v6)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v6 = *(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                        + 8);
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(v6);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
  else
    v9 = 1;
  v3 = (v3 + v8 + v9 + 1);
  v2 = *((_DWORD *)this + 14);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    v10 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 2);
    if (!v10)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v10 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                                + 16);
    }
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v10);
    v12 = (int)v11;
    if (v11 >= 0x80)
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    else
      v13 = 1;
    v3 = (v3 + v12 + v13 + 1);
    v2 = *((_DWORD *)this + 14);
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_33;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  v14 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 3);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v14 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                              + 24);
  }
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v14);
  v16 = (int)v15;
  if (v15 >= 0x80)
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
  else
    v17 = 1;
  v3 = (v3 + v16 + v17 + 1);
  v2 = *((_DWORD *)this + 14);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_45;
    goto LABEL_39;
  }
LABEL_33:
  v18 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 4);
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v18 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                              + 32);
  }
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v18);
  v20 = (int)v19;
  if (v19 >= 0x80)
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19);
  else
    v21 = 1;
  v3 = (v3 + v20 + v21 + 1);
  if ((*((_DWORD *)this + 14) & 0x20) != 0)
  {
LABEL_39:
    v22 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 5);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v22 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                                + 40);
    }
    v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v22);
    v24 = (int)v23;
    if (v23 >= 0x80)
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
    else
      v25 = 1;
    v3 = (v3 + v24 + v25 + 1);
  }
LABEL_45:
  *((_DWORD *)this + 13) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)this)
  {
    v2 = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v2;
    v3 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    v4 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v4;
    v5 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    v6 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v6;
    v7 = *(_QWORD *)(this + 40);
    *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v7;
    LODWORD(v7) = *(_DWORD *)(this + 56);
    *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v7;
    LODWORD(v7) = *(_DWORD *)(this + 52);
    *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v7;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.BeidouTimeInfo");
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  double result;

  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::GalileoTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *a2)
{
  *(_QWORD *)this = &off_1E25BAD90;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(this, a2);
  return this;
}

void sub_18D150994(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *a2)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *v3;
  double result;
  int v5;
  int v6;
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *v7;
  const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *v8;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v9;
  const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v10;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v11;
  const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v12;
  _BYTE v13[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 40);
  if (!(_BYTE)v5)
    return result;
  if ((*((_BYTE *)a2 + 40) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 40) & 2) == 0)
      goto LABEL_6;
LABEL_10:
    *((_DWORD *)v3 + 10) |= 2u;
    v7 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((_QWORD *)v3 + 1);
    if (!v7)
    {
      this = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)operator new();
      v7 = this;
      *(_QWORD *)this = &off_1E25BA868;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)v3 + 1) = this;
    }
    v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((_QWORD *)a2 + 1);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                                + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergeFrom(v7, v8);
    v5 = *((_DWORD *)a2 + 10);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return result;
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  v6 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 10) |= 1u;
  *((_DWORD *)v3 + 8) = v6;
  v5 = *((_DWORD *)a2 + 10);
  if ((v5 & 2) != 0)
    goto LABEL_10;
LABEL_6:
  if ((v5 & 4) == 0)
    goto LABEL_7;
LABEL_15:
  *((_DWORD *)v3 + 10) |= 4u;
  v9 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)v3 + 2);
  if (!v9)
  {
    this = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)operator new();
    v9 = this;
    *(_QWORD *)this = &off_1E25BC140;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *((_QWORD *)v3 + 2) = this;
  }
  v10 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)a2 + 2);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                                    + 16);
  }
  result = CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v9, v10);
  if ((*((_DWORD *)a2 + 10) & 8) != 0)
  {
LABEL_20:
    *((_DWORD *)v3 + 10) |= 8u;
    v11 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)v3 + 3);
    if (!v11)
    {
      this = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)operator new();
      v11 = this;
      *(_QWORD *)this = &off_1E25BC140;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *((_QWORD *)v3 + 3) = this;
    }
    v12 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)a2 + 3);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      v12 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                                      + 24);
    }
    return CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v11, v12);
  }
  return result;
}

void sub_18D150BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::~GalileoTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  *(_QWORD *)this = &off_1E25BAD90;
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::~GalileoTimeInfo(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  return CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BAD90;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 40);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 32) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::Clear(this);
        v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 8) != 0)
    {
      v4 = *(_QWORD *)(v1 + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 36))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  _BYTE *v10;
  int v11;
  uint64_t result;
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v4 = (unsigned int *)((char *)this + 32);
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v9 = (char *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v10 = (_BYTE *)*((_QWORD *)a2 + 1);
          v8 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v9;
          v10 = v9 + 1;
          *((_QWORD *)a2 + 1) = v10;
        }
        v11 = *((_DWORD *)this + 10) | 1;
        *((_DWORD *)this + 10) = v11;
        if ((unint64_t)v10 < v8 && *v10 == 18)
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_18;
        v11 = *((_DWORD *)this + 10);
LABEL_26:
        *((_DWORD *)this + 10) = v11 | 2;
        v13 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((_QWORD *)this + 1);
        if (!v13)
        {
          v13 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)operator new();
          *(_QWORD *)v13 = &off_1E25BA868;
          *((_QWORD *)v13 + 1) = 0;
          *((_QWORD *)v13 + 2) = 0;
          *((_QWORD *)v13 + 3) = 0;
          *((_QWORD *)this + 1) = v13;
        }
        v34 = 0;
        v14 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v34))return 0;
        }
        else
        {
          v34 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        v15 = *((_DWORD *)a2 + 14);
        v16 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v15 + 1;
        if (v15 >= v16)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergePartialFromCodedStream(v13, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v17 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)a2 + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_40:
        *((_DWORD *)this + 10) |= 4u;
        v21 = *((_QWORD *)this + 2);
        if (!v21)
        {
          v21 = operator new();
          *(_QWORD *)v21 = &off_1E25BC140;
          *(_OWORD *)(v21 + 8) = 0u;
          *(_OWORD *)(v21 + 24) = 0u;
          *((_QWORD *)this + 2) = v21;
        }
        v35 = 0;
        v22 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v35))return 0;
        }
        else
        {
          v35 = *v22;
          *((_QWORD *)a2 + 1) = v22 + 1;
        }
        v23 = *((_DWORD *)a2 + 14);
        v24 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v23 + 1;
        if (v23 >= v24)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)v21, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v25 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v25, 1);
        v26 = v25 - 1;
        if (v26 < 0 == v18)
          *((_DWORD *)a2 + 14) = v26;
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_54:
        *((_DWORD *)this + 10) |= 8u;
        v28 = *((_QWORD *)this + 3);
        if (!v28)
        {
          v28 = operator new();
          *(_QWORD *)v28 = &off_1E25BC140;
          *(_OWORD *)(v28 + 8) = 0u;
          *(_OWORD *)(v28 + 24) = 0u;
          *((_QWORD *)this + 3) = v28;
        }
        v36 = 0;
        v29 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))return 0;
        }
        else
        {
          v36 = *v29;
          *((_QWORD *)a2 + 1) = v29 + 1;
        }
        v30 = *((_DWORD *)a2 + 14);
        v31 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v30 + 1;
        if (v30 >= v31)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)v28, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v32 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v32, 1);
        v33 = v32 - 1;
        if (v33 < 0 == v18)
          *((_DWORD *)a2 + 14) = v33;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_40;
        goto LABEL_18;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_18;
        goto LABEL_54;
      default:
        v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = this[10];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[8], (uint64_t)a2, a4);
    v6 = v5[10];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *((_QWORD *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ + 8);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = v5[10];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    goto LABEL_13;
  }
LABEL_10:
  v8 = *((_QWORD *)v5 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  if ((v5[10] & 8) != 0)
  {
LABEL_13:
    v9 = *((_QWORD *)v5 + 3);
    if (!v9)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v9 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ + 24);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;

  LOBYTE(v2) = *((_BYTE *)this + 40);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_31;
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v4 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 10);
      if ((v2 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 2) == 0)
      goto LABEL_16;
  }
  v5 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((_QWORD *)this + 1);
  if (!v5)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                        + 8);
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(v5);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
  else
    v8 = 1;
  v3 = (v3 + v7 + v8 + 1);
  v2 = *((_DWORD *)this + 10);
LABEL_16:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      goto LABEL_31;
    goto LABEL_25;
  }
  v9 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 2);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v9 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                             + 16);
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v9);
  v11 = (int)v10;
  if (v10 >= 0x80)
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
  else
    v12 = 1;
  v3 = (v3 + v11 + v12 + 1);
  if ((*((_DWORD *)this + 10) & 8) != 0)
  {
LABEL_25:
    v13 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 3);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v13 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                                + 24);
    }
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v13);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    else
      v16 = 1;
    v3 = (v3 + v15 + v16 + 1);
  }
LABEL_31:
  *((_DWORD *)this + 9) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)this)
  {
    v2 = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    v3 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    v4 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v4;
    v5 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GalileoTimeInfo");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::NavicTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E25BA520;
  *((_DWORD *)this + 6) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(this, a2);
  return this;
}

void sub_18D15159C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *a2)
{
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *v3;
  int v4;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v5;
  const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v6;
  int v7;
  _BYTE v8[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 24);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 24) & 1) != 0)
    {
      *((_DWORD *)v3 + 6) |= 1u;
      v5 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)v3 + 1);
      if (!v5)
      {
        this = (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)operator new();
        v5 = this;
        *(_QWORD *)this = &off_1E25BC140;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *((_QWORD *)v3 + 1) = this;
      }
      v6 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)a2 + 1);
      if (!v6)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        v6 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_
                                                                                       + 8);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v5, v6);
      v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      v7 = *((_DWORD *)a2 + 4);
      *((_DWORD *)v3 + 6) |= 2u;
      *((_DWORD *)v3 + 4) = v7;
    }
  }
}

void sub_18D1516B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::~NavicTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E25BA520;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::~NavicTimeInfo(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  uint64_t v2;

  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  return CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E25BA520;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::Clear(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 24))
  {
    if ((*(_BYTE *)(this + 24) & 1) != 0)
    {
      v1 = *(_QWORD *)(this + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 36))
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_QWORD *)(v1 + 16) = 0;
          *(_QWORD *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t result;
  unsigned int v20;

  v4 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v7 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          v9 = (char *)*((_QWORD *)a2 + 1);
          v8 = *((_QWORD *)a2 + 2);
          goto LABEL_30;
        }
      }
      else
      {
        v7 = TagFallback & 7;
      }
LABEL_18:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
    v7 = TagFallback & 7;
    if (v7 != 2)
      goto LABEL_18;
    *((_DWORD *)this + 6) |= 1u;
    v10 = *((_QWORD *)this + 1);
    if (!v10)
    {
      v10 = operator new();
      *(_QWORD *)v10 = &off_1E25BC140;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 24) = 0u;
      *((_QWORD *)this + 1) = v10;
    }
    v20 = 0;
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v20))
        return 0;
    }
    else
    {
      v20 = *v11;
      *((_QWORD *)a2 + 1) = v11 + 1;
    }
    v12 = *((_DWORD *)a2 + 14);
    v13 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v12 + 1;
    if (v12 >= v13)
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)v10, a2)|| !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    v14 = *((_DWORD *)a2 + 14);
    v15 = __OFSUB__(v14, 1);
    v16 = v14 - 1;
    if (v16 < 0 == v15)
      *((_DWORD *)a2 + 14) = v16;
    v17 = (_BYTE *)*((_QWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v17 < v8 && *v17 == 16)
    {
      v9 = v17 + 1;
      *((_QWORD *)a2 + 1) = v9;
LABEL_30:
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!(_DWORD)result)
          return result;
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v4 = *v9;
        v18 = (unsigned __int8 *)(v9 + 1);
        *((_QWORD *)a2 + 1) = v18;
      }
      *((_DWORD *)this + 6) |= 2u;
      if (v18 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  }
  v7 = *(_QWORD *)(this + 8);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_ + 8);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  uint64_t v2;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;

  if (!*((_BYTE *)this + 24))
  {
    v2 = 0;
    goto LABEL_16;
  }
  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v3 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((_QWORD *)this + 1);
  if (!v3)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v3 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_
                                                                             + 8);
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v3);
  v5 = (int)v4;
  if (v4 >= 0x80)
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  else
    v6 = 1;
  v2 = (v5 + v6 + 1);
  if ((*((_DWORD *)this + 6) & 2) != 0)
  {
LABEL_12:
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v7 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    else
      v8 = 2;
    v2 = (v8 + v2);
  }
LABEL_16:
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *))(*(_QWORD *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *a2)
{
  uint64_t v2;

  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.NavicTimeInfo");
}

double CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::TimeConversionInfo(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *a2)
{
  *(_QWORD *)this = &off_1E25BBEE8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(this, a2);
  return this;
}

void sub_18D151D18(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *a2)
{
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *v3;
  int v4;
  CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *v5;
  const CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *v6;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *v7;
  const CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *v8;
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *v9;
  const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *v10;
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *v11;
  const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *v12;
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *v13;
  const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *v14;
  _BYTE v15[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 52);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    *((_DWORD *)v3 + 13) |= 1u;
    v5 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)*((_QWORD *)v3 + 1);
    if (!v5)
    {
      this = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)operator new();
      v5 = this;
      *(_QWORD *)this = &off_1E25BA070;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      *((_QWORD *)v3 + 1) = this;
    }
    v6 = (const CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)*((_QWORD *)a2 + 1);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      v6 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                             + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergeFrom(v5, v6);
    v4 = *((_DWORD *)a2 + 13);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0)
        goto LABEL_7;
LABEL_20:
      *((_DWORD *)v3 + 13) |= 4u;
      v9 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)*((_QWORD *)v3 + 3);
      if (!v9)
      {
        this = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)operator new();
        v9 = this;
        *(_QWORD *)this = &off_1E25BA688;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_DWORD *)this + 14) = 0;
        *((_QWORD *)v3 + 3) = this;
      }
      v10 = (const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)*((_QWORD *)a2 + 3);
      if (!v10)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                                   + 24);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergeFrom(v9, v10);
      v4 = *((_DWORD *)a2 + 13);
      if ((v4 & 8) == 0)
      {
LABEL_8:
        if ((v4 & 0x10) == 0)
          return;
        goto LABEL_30;
      }
      goto LABEL_25;
    }
  }
  else if ((*((_BYTE *)a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  *((_DWORD *)v3 + 13) |= 2u;
  v7 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)*((_QWORD *)v3 + 2);
  if (!v7)
  {
    this = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)operator new();
    v7 = this;
    *(_QWORD *)this = &off_1E25BAE80;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *((_DWORD *)this + 10) = 0;
    *((_QWORD *)v3 + 2) = this;
  }
  v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)*((_QWORD *)a2 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                               + 16);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergeFrom(v7, v8);
  v4 = *((_DWORD *)a2 + 13);
  if ((v4 & 4) != 0)
    goto LABEL_20;
LABEL_7:
  if ((v4 & 8) == 0)
    goto LABEL_8;
LABEL_25:
  *((_DWORD *)v3 + 13) |= 8u;
  v11 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)*((_QWORD *)v3 + 4);
  if (!v11)
  {
    this = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)operator new();
    v11 = this;
    *(_QWORD *)this = &off_1E25BAD90;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *((_DWORD *)this + 10) = 0;
    *((_QWORD *)v3 + 4) = this;
  }
  v12 = (const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)*((_QWORD *)a2 + 4);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    v12 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                                + 32);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(v11, v12);
  if ((*((_DWORD *)a2 + 13) & 0x10) != 0)
  {
LABEL_30:
    *((_DWORD *)v3 + 13) |= 0x10u;
    v13 = (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)*((_QWORD *)v3 + 5);
    if (!v13)
    {
      this = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)operator new();
      v13 = this;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = &off_1E25BA520;
      *((_DWORD *)this + 6) = 0;
      *((_QWORD *)v3 + 5) = this;
    }
    v14 = (const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)*((_QWORD *)a2 + 5);
    if (!v14)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      v14 = *(const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                                + 40);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(v13, v14);
  }
}

void sub_18D152004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::~TimeConversionInfo(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  *(_QWORD *)this = &off_1E25BBEE8;
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::~TimeConversionInfo(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  return CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BBEE8;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 52);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 52) & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::Clear(this);
        v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(v1 + 16);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::Clear(this);
        v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::Clear(this);
        v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::Clear(this);
        v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 40);
      if (this)
        this = CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t result;
  unsigned int v43;

  while (1)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v4 < *((_QWORD *)a2 + 2) && (*v4 & 0x80000000) == 0)
    {
      TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v4 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_21;
        *((_DWORD *)this + 13) |= 1u;
        v7 = *((_QWORD *)this + 1);
        if (!v7)
        {
          v7 = operator new();
          *(_QWORD *)v7 = &off_1E25BA070;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)(v7 + 24) = 0;
          *(_DWORD *)(v7 + 32) = 0;
          *((_QWORD *)this + 1) = v7;
        }
        v43 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0;
        }
        else
        {
          v43 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        v9 = *((_DWORD *)a2 + 14);
        v10 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v9 + 1;
        if (v9 >= v10)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)v7, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v11 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v11, 1);
        v13 = v11 - 1;
        if (v13 < 0 == v12)
          *((_DWORD *)a2 + 14) = v13;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
        goto LABEL_33;
      case 2u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_21;
LABEL_33:
        *((_DWORD *)this + 13) |= 2u;
        v15 = *((_QWORD *)this + 2);
        if (!v15)
        {
          v15 = operator new();
          *(_QWORD *)v15 = &off_1E25BAE80;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_DWORD *)(v15 + 40) = 0;
          *((_QWORD *)this + 2) = v15;
        }
        v43 = 0;
        v16 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0;
        }
        else
        {
          v43 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)a2 + 14);
        v18 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v17 + 1;
        if (v17 >= v18)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)v15, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v19 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v19, 1);
        v20 = v19 - 1;
        if (v20 < 0 == v12)
          *((_DWORD *)a2 + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_47:
        *((_DWORD *)this + 13) |= 4u;
        v22 = *((_QWORD *)this + 3);
        if (!v22)
        {
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E25BA688;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 40) = 0u;
          *(_DWORD *)(v22 + 56) = 0;
          *((_QWORD *)this + 3) = v22;
        }
        v43 = 0;
        v23 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0;
        }
        else
        {
          v43 = *v23;
          *((_QWORD *)a2 + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)a2 + 14);
        v25 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)v22, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v26 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v12)
          *((_DWORD *)a2 + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_61:
        *((_DWORD *)this + 13) |= 8u;
        v29 = *((_QWORD *)this + 4);
        if (!v29)
        {
          v29 = operator new();
          *(_QWORD *)v29 = &off_1E25BAD90;
          *(_OWORD *)(v29 + 8) = 0u;
          *(_OWORD *)(v29 + 24) = 0u;
          *(_DWORD *)(v29 + 40) = 0;
          *((_QWORD *)this + 4) = v29;
        }
        v43 = 0;
        v30 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0;
        }
        else
        {
          v43 = *v30;
          *((_QWORD *)a2 + 1) = v30 + 1;
        }
        v31 = *((_DWORD *)a2 + 14);
        v32 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v31 + 1;
        if (v31 >= v32)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)v29, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v33 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v12)
          *((_DWORD *)a2 + 14) = v34;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 1;
LABEL_75:
        *((_DWORD *)this + 13) |= 0x10u;
        v36 = *((_QWORD *)this + 5);
        if (!v36)
        {
          v36 = operator new();
          *(_QWORD *)(v36 + 8) = 0;
          *(_QWORD *)(v36 + 16) = 0;
          *(_QWORD *)v36 = &off_1E25BA520;
          *(_DWORD *)(v36 + 24) = 0;
          *((_QWORD *)this + 5) = v36;
        }
        v43 = 0;
        v37 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0;
        }
        else
        {
          v43 = *v37;
          *((_QWORD *)a2 + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)a2 + 14);
        v39 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v38 + 1;
        if (v38 >= v39)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)v36, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v40 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v40, 1);
        v41 = v40 - 1;
        if (v41 < 0 == v12)
          *((_DWORD *)a2 + 14) = v41;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_47;
        goto LABEL_21;
      case 4u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_61;
        goto LABEL_21;
      case 5u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_21;
        goto LABEL_75;
      default:
        v6 = TagFallback & 7;
LABEL_21:
        if (v6 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_13:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v9 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    goto LABEL_19;
  }
LABEL_16:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v10 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 32);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0)
  {
LABEL_19:
    v11 = *(_QWORD *)(v5 + 40);
    if (!v11)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v11 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  int v2;
  uint64_t v3;
  CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  int v19;
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;

  LOBYTE(v2) = *((_BYTE *)this + 52);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_40;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)*((_QWORD *)this + 1);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                     + 8);
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::ByteSize(v4);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  v2 = *((_DWORD *)this + 13);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    v8 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)*((_QWORD *)this + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v8 = *(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                           + 16);
    }
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::ByteSize(v8);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    else
      v11 = 1;
    v3 = (v3 + v10 + v11 + 1);
    v2 = *((_DWORD *)this + 13);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    v12 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)*((_QWORD *)this + 3);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v12 = *(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                           + 24);
    }
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::ByteSize(v12);
    v14 = (int)v13;
    if (v13 >= 0x80)
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    else
      v15 = 1;
    v3 = (v3 + v14 + v15 + 1);
    v2 = *((_DWORD *)this + 13);
    if ((v2 & 8) == 0)
    {
LABEL_20:
      if ((v2 & 0x10) == 0)
        goto LABEL_40;
      goto LABEL_34;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  v16 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)*((_QWORD *)this + 4);
  if (!v16)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v16 = *(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                          + 32);
  }
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::ByteSize(v16);
  v18 = (int)v17;
  if (v17 >= 0x80)
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
  else
    v19 = 1;
  v3 = (v3 + v18 + v19 + 1);
  if ((*((_DWORD *)this + 13) & 0x10) != 0)
  {
LABEL_34:
    v20 = (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)*((_QWORD *)this + 5);
    if (!v20)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v20 = *(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                          + 40);
    }
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::ByteSize(v20);
    v22 = (int)v21;
    if (v21 >= 0x80)
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21);
    else
      v23 = 1;
    v3 = (v3 + v22 + v23 + 1);
  }
LABEL_40:
  *((_DWORD *)this + 12) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *))(*(_QWORD *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    v4 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v4;
    v5 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v5;
    v6 = *(_QWORD *)(this + 40);
    *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 52);
    *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.TimeConversionInfo");
}

double CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::KlobucharModelParameters(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *a2)
{
  *(_QWORD *)this = &off_1E25BC9B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(this, a2);
  return this;
}

void sub_18D152CD4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *a2)
{
  float result;
  int v5;
  uint64_t v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  v5 = *((_DWORD *)a2 + 13);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 13) |= 1u;
    *((_QWORD *)this + 1) = v6;
    v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  result = *((float *)a2 + 4);
  *((_DWORD *)this + 13) |= 2u;
  *((float *)this + 4) = result;
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = *((float *)a2 + 5);
  *((_DWORD *)this + 13) |= 4u;
  *((float *)this + 5) = result;
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = *((float *)a2 + 6);
  *((_DWORD *)this + 13) |= 8u;
  *((float *)this + 6) = result;
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_21:
    result = *((float *)a2 + 8);
    *((_DWORD *)this + 13) |= 0x20u;
    *((float *)this + 8) = result;
    v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_20:
  result = *((float *)a2 + 7);
  *((_DWORD *)this + 13) |= 0x10u;
  *((float *)this + 7) = result;
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x20) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_22:
  result = *((float *)a2 + 9);
  *((_DWORD *)this + 13) |= 0x40u;
  *((float *)this + 9) = result;
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    result = *((float *)a2 + 10);
    *((_DWORD *)this + 13) |= 0x80u;
    *((float *)this + 10) = result;
    v5 = *((_DWORD *)a2 + 13);
  }
LABEL_13:
  if ((v5 & 0x100) != 0)
  {
    result = *((float *)a2 + 11);
    *((_DWORD *)this + 13) |= 0x100u;
    *((float *)this + 11) = result;
  }
  return result;
}

void sub_18D152E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::~KlobucharModelParameters(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  *(_QWORD *)this = &off_1E25BC9B0;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::~KlobucharModelParameters(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  return CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::New(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BC9B0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::Clear(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 52);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(this + 40) = 0;
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
    *(_DWORD *)(this + 44) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  unint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;

  v4 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v9 = (char *)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v10 = (_BYTE *)*((_QWORD *)a2 + 1);
          v8 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v9;
          v10 = v9 + 1;
          *((_QWORD *)a2 + 1) = v10;
        }
        *((_DWORD *)this + 13) |= 1u;
        if ((unint64_t)v10 < v8 && *v10 == 21)
        {
          *((_QWORD *)a2 + 1) = v10 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_28;
LABEL_36:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0)
          return 0;
        *((_DWORD *)this + 4) = v19;
        *((_DWORD *)this + 13) |= 2u;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_40:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0)
          return 0;
        *((_DWORD *)this + 5) = v19;
        *((_DWORD *)this + 13) |= 4u;
        v13 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 != 37)
          continue;
        *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_44:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0)
          return 0;
        *((_DWORD *)this + 6) = v19;
        *((_DWORD *)this + 13) |= 8u;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 45)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_48:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0)
          return 0;
        *((_DWORD *)this + 7) = v19;
        *((_DWORD *)this + 13) |= 0x10u;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 53)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_52:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0)
          return 0;
        *((_DWORD *)this + 8) = v19;
        *((_DWORD *)this + 13) |= 0x20u;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 != 61)
          continue;
        *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_56:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0)
          return 0;
        *((_DWORD *)this + 9) = v19;
        *((_DWORD *)this + 13) |= 0x40u;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 69)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_60:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0)
          return 0;
        *((_DWORD *)this + 10) = v19;
        *((_DWORD *)this + 13) |= 0x80u;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 != 77)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_64:
        v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) != 0)
        {
          *((_DWORD *)this + 11) = v19;
          *((_DWORD *)this + 13) |= 0x100u;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_40;
        goto LABEL_28;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_44;
        goto LABEL_28;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_48;
        goto LABEL_28;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_52;
        goto LABEL_28;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_56;
        goto LABEL_28;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_60;
        goto LABEL_28;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_28;
        goto LABEL_64;
      default:
        v7 = TagFallback & 7;
LABEL_28:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(float *)(v5 + 24), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (uint64_t)a2, *(float *)(v5 + 28), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, *(float *)(v5 + 32), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (uint64_t)a2, *(float *)(v5 + 36), a3);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, (uint64_t)a2, *(float *)(v5 + 44), a3);
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (uint64_t)a2, *(float *)(v5 + 40), a3);
  if ((*(_DWORD *)(v5 + 52) & 0x100) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, (uint64_t)a2, *(float *)(v5 + 44), a3);
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;

  v2 = *((_DWORD *)this + 13);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 1))
         + 1;
      v2 = *((_DWORD *)this + 13);
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      v3 += 5;
    if ((v2 & 4) != 0)
      v3 += 5;
    if ((v2 & 8) != 0)
      v3 += 5;
    if ((v2 & 0x10) != 0)
      v3 += 5;
    if ((v2 & 0x20) != 0)
      v3 += 5;
    if ((v2 & 0x40) != 0)
      v3 += 5;
    if ((v2 & 0x80) != 0)
      v3 += 5;
  }
  else
  {
    v3 = 0;
  }
  if ((v2 & 0x100) != 0)
    result = v3 + 5;
  else
    result = v3;
  *((_DWORD *)this + 12) = result;
  return result;
}

float CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *a2)
{
  float result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::Swap(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float result;

  if (a2 != this)
  {
    v2 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v3;
    v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    v5 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v5;
    v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
    v7 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v7;
    v8 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v8;
    v9 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v9;
    result = *((float *)this + 11);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((float *)a2 + 11) = result;
    LODWORD(v2) = *((_DWORD *)this + 13);
    *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v2;
    LODWORD(v2) = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v2;
  }
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.KlobucharModelParameters");
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SfcfXyz(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *a2)
{
  *(_QWORD *)this = &off_1E25BD8B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(this, a2);
  return this;
}

void sub_18D153744(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *a2)
{
  double result;
  int v5;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      result = *((double *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((double *)this + 1) = result;
      v5 = *((_DWORD *)a2 + 9);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *((double *)a2 + 2);
    *((_DWORD *)this + 9) |= 2u;
    *((double *)this + 2) = result;
    if ((*((_DWORD *)a2 + 9) & 4) == 0)
      return result;
LABEL_7:
    result = *((double *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    *((double *)this + 3) = result;
  }
  return result;
}

void sub_18D153828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::~SfcfXyz(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  *(_QWORD *)this = &off_1E25BD8B0;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::~SfcfXyz(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  return CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::New(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BD8B0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 36))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t result;
  unint64_t v11;

  do
  {
    while (1)
    {
      while (1)
      {
        v4 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v4 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_27;
        v11 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
          return 0;
        *((_QWORD *)this + 1) = v11;
        *((_DWORD *)this + 9) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && *v8 == 17)
        {
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_17:
          v11 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
            return 0;
          *((_QWORD *)this + 2) = v11;
          *((_DWORD *)this + 9) |= 2u;
          v9 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v9 < *((_QWORD *)a2 + 2) && *v9 == 25)
          {
            *((_QWORD *)a2 + 1) = v9 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v6 == 2)
      {
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v6 != 3)
      {
        v7 = TagFallback & 7;
        goto LABEL_27;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
        break;
LABEL_27:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
LABEL_21:
    v11 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
      return 0;
    *((_QWORD *)this + 3) = v11;
    *((_DWORD *)this + 9) |= 4u;
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v4 + 24), a3);
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 36);
  if (*((_BYTE *)this + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  int v5;
  int v6;

  if (a2 != this)
  {
    v2 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    result = *((double *)this + 3);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((double *)a2 + 3) = result;
    v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    v6 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v6;
  }
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SfcfXyz");
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::AntennaPhaseCenterSvOffset(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *a2)
{
  *(_QWORD *)this = &off_1E25BCCF8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(this, a2);
  return this;
}

void sub_18D153D18(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *a2)
{
  CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *v3;
  double result;
  int v5;
  CoreNavigation::CLP::LogEntry::PrivateData::SvId *v6;
  const CoreNavigation::CLP::LogEntry::PrivateData::SvId *v7;
  unsigned int v8;
  unsigned int v9;
  CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *v10;
  const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *v11;
  _BYTE v12[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      *((_DWORD *)v3 + 9) |= 1u;
      v6 = (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((_QWORD *)v3 + 1);
      if (!v6)
      {
        this = (CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *)operator new();
        v6 = this;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        *(_QWORD *)this = &off_1E25BD478;
        *((_DWORD *)this + 6) = 0;
        *((_QWORD *)v3 + 1) = this;
      }
      v7 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((_QWORD *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        v7 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_
                                                                        + 8);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergeFrom(v6, v7);
      v5 = *((_DWORD *)a2 + 9);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *((_DWORD *)a2 + 4);
      if (v8 >= 0xD)
        __assert_rtn("set_band", "CoreNavigationCLPGnssMeasApi.pb.h", 13137, "::CoreNavigation::CLP::LogEntry::PrivateData::Band_IsValid(value)");
      *((_DWORD *)v3 + 9) |= 2u;
      *((_DWORD *)v3 + 4) = v8;
      v5 = *((_DWORD *)a2 + 9);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *((_DWORD *)a2 + 5);
      if (v9 >= 4)
        __assert_rtn("set_sv_reference_point", "CoreNavigationCLPGnssMeasApi.pb.h", 13160, "::CoreNavigation::CLP::LogEntry::PrivateData::SvReferencePoint_IsValid(value)");
      *((_DWORD *)v3 + 9) |= 4u;
      *((_DWORD *)v3 + 5) = v9;
      v5 = *((_DWORD *)a2 + 9);
    }
    if ((v5 & 8) != 0)
    {
      *((_DWORD *)v3 + 9) |= 8u;
      v10 = (CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *)*((_QWORD *)v3 + 3);
      if (!v10)
      {
        this = (CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *)operator new();
        v10 = this;
        *(_QWORD *)this = &off_1E25BD8B0;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *((_QWORD *)v3 + 3) = this;
      }
      v11 = (const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *)*((_QWORD *)a2 + 3);
      if (!v11)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        v11 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz **)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_
                                                                            + 24);
      }
      return CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(v10, v11);
    }
  }
  return result;
}

void sub_18D153F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::~AntennaPhaseCenterSvOffset(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  *(_QWORD *)this = &off_1E25BCCF8;
  CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::~AntennaPhaseCenterSvOffset(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  uint64_t v2;
  uint64_t v3;

  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *)CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  return CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::New(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BCCF8;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 36);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 36) & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::SvId::Clear(this);
        v2 = *(_DWORD *)(v1 + 36);
      }
    }
    *(_QWORD *)(v1 + 16) = 0;
    if ((v2 & 8) != 0)
    {
      v3 = *(_QWORD *)(v1 + 24);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  unsigned int v19;
  uint64_t result;
  _BYTE *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;

  while (2)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v4 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_19;
        *((_DWORD *)this + 9) |= 1u;
        v7 = *((_QWORD *)this + 1);
        if (!v7)
        {
          v7 = operator new();
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = &off_1E25BD478;
          *(_DWORD *)(v7 + 24) = 0;
          *((_QWORD *)this + 1) = v7;
        }
        v30 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))return 0;
        }
        else
        {
          v30 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        v13 = *((_DWORD *)a2 + 14);
        v14 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::SvId *)v7, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v15 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)a2 + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v18 >= v9 || *v18 != 16)
          continue;
        v10 = v18 + 1;
        *((_QWORD *)a2 + 1) = v10;
        goto LABEL_31;
      case 2u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
LABEL_31:
        v30 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30);
          if (!(_DWORD)result)
            return result;
          v19 = v30;
        }
        else
        {
          v19 = *v10;
          *((_QWORD *)a2 + 1) = v10 + 1;
        }
        if (v19 <= 0xC)
        {
          *((_DWORD *)this + 9) |= 2u;
          *((_DWORD *)this + 4) = v19;
        }
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v21 >= v11 || *v21 != 24)
          continue;
        v12 = v21 + 1;
        *((_QWORD *)a2 + 1) = v12;
LABEL_41:
        v30 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30);
          if (!(_DWORD)result)
            return result;
          v22 = v30;
        }
        else
        {
          v22 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        if (v22 <= 3)
        {
          *((_DWORD *)this + 9) |= 4u;
          *((_DWORD *)this + 5) = v22;
        }
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v23 + 1;
LABEL_51:
        *((_DWORD *)this + 9) |= 8u;
        v24 = *((_QWORD *)this + 3);
        if (!v24)
        {
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E25BD8B0;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          *((_QWORD *)this + 3) = v24;
        }
        v30 = 0;
        v25 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))return 0;
        }
        else
        {
          v30 = *v25;
          *((_QWORD *)a2 + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)a2 + 14);
        v27 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v26 + 1;
        if (v26 < v27)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *)v24, a2))
          {
            if (*((_BYTE *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v28 = *((_DWORD *)a2 + 14);
              v16 = __OFSUB__(v28, 1);
              v29 = v28 - 1;
              if (v29 < 0 == v16)
                *((_DWORD *)a2 + 14) = v29;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                result = 1;
                *((_BYTE *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_41;
      case 4u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_19;
        goto LABEL_51;
      default:
        v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
LABEL_10:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0)
        return this;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0)
    goto LABEL_10;
LABEL_4:
  if ((v6 & 8) == 0)
    return this;
LABEL_11:
  v8 = *(_QWORD *)(v5 + 24);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_ + 24);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::ByteSize(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  CoreNavigation::CLP::LogEntry::PrivateData::SvId *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 36);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_36;
  }
  if ((*(_BYTE *)(this + 36) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(this + 36) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(this + 8);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_
                                                              + 8);
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SvId::ByteSize(v4);
  v6 = (int)v5;
  if (v5 >= 0x80)
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  else
    this = 1;
  v3 = (v6 + this + 1);
  v2 = *(_DWORD *)(v1 + 36);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    this = *(unsigned int *)(v1 + 16);
    if ((this & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (this >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
      v7 = this + 1;
      v2 = *(_DWORD *)(v1 + 36);
    }
    else
    {
      v7 = 2;
    }
    v3 = (v7 + v3);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    this = *(unsigned int *)(v1 + 20);
    if ((this & 0x80000000) != 0)
    {
      v8 = 11;
    }
    else if (this >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
      v8 = this + 1;
      v2 = *(_DWORD *)(v1 + 36);
    }
    else
    {
      v8 = 2;
    }
    v3 = (v8 + v3);
    if ((v2 & 8) == 0)
      goto LABEL_36;
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_36;
  }
  v9 = *(_QWORD *)(v1 + 24);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v9 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_ + 24);
  }
  v10 = *(unsigned __int8 *)(v9 + 36);
  if (*(_BYTE *)(v9 + 36))
  {
    v11 = (v10 << 31 >> 31) & 9;
    if ((v10 & 2) != 0)
      v11 += 9;
    if ((v10 & 4) != 0)
      v10 = v11 + 9;
    else
      v10 = v11;
  }
  *(_DWORD *)(v9 + 32) = v10;
  v3 = (v3 + v10 + 2);
LABEL_36:
  *(_DWORD *)(v1 + 32) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    v3 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.AntennaPhaseCenterSvOffset");
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::ReceivedTimeStamp(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *a2)
{
  *(_QWORD *)this = &off_1E25BB8D0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(this, a2);
  return this;
}

void sub_18D154844(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *a2)
{
  double result;
  int v5;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      result = *((double *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((double *)this + 1) = result;
      v5 = *((_DWORD *)a2 + 9);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return result;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    result = *((double *)a2 + 2);
    *((_DWORD *)this + 9) |= 2u;
    *((double *)this + 2) = result;
    if ((*((_DWORD *)a2 + 9) & 4) == 0)
      return result;
LABEL_7:
    result = *((double *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    *((double *)this + 3) = result;
  }
  return result;
}

void sub_18D154928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::~ReceivedTimeStamp(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  *(_QWORD *)this = &off_1E25BB8D0;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::~ReceivedTimeStamp(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::New(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BB8D0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 36))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t result;
  unint64_t v11;

  do
  {
    while (1)
    {
      while (1)
      {
        v4 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v4 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_27;
        v11 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
          return 0;
        *((_QWORD *)this + 1) = v11;
        *((_DWORD *)this + 9) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && *v8 == 17)
        {
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_17:
          v11 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
            return 0;
          *((_QWORD *)this + 2) = v11;
          *((_DWORD *)this + 9) |= 2u;
          v9 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v9 < *((_QWORD *)a2 + 2) && *v9 == 25)
          {
            *((_QWORD *)a2 + 1) = v9 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v6 == 2)
      {
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v6 != 3)
      {
        v7 = TagFallback & 7;
        goto LABEL_27;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
        break;
LABEL_27:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
LABEL_21:
    v11 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
      return 0;
    *((_QWORD *)this + 3) = v11;
    *((_DWORD *)this + 9) |= 4u;
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v4 + 24), a3);
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v4 + 16), a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v4 + 24), a3);
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 36);
  if (*((_BYTE *)this + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::Swap(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  int v5;
  int v6;

  if (a2 != this)
  {
    v2 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    result = *((double *)this + 3);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((double *)a2 + 3) = result;
    v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    v6 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v6;
  }
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.ReceivedTimeStamp");
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  double result;

  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MeasurementReportCallbackContents(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2)
{
  *(_QWORD *)this = &off_1E25BD130;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergeFrom(this, a2);
  return this;
}

void sub_18D154E74(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;

  sub_18D09ECA4(v1 + 13);
  sub_18D09ECA4(v3);
  sub_18D09ECA4(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2)
{
  uint64_t v4;
  const CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *v31;
  const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *v32;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *v33;
  const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *v34;
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *v35;
  const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *v36;
  CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *v37;
  const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *v38;
  _BYTE v40[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v40);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 24));
  if (*((int *)a2 + 8) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvInfo **)(*((_QWORD *)a2 + 3) + 8 * v4);
      v6 = *((_DWORD *)this + 9);
      v7 = *((int *)this + 8);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 24));
          v6 = *((_DWORD *)this + 9);
        }
        *((_DWORD *)this + 9) = v6 + 1;
        v9 = operator new();
        *(_QWORD *)v9 = &off_1E25BD6D0;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 144) = 0u;
        *(_OWORD *)(v9 + 160) = 0u;
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_DWORD *)(v9 + 40) = 0;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 108) = 0u;
        v10 = *((_QWORD *)this + 3);
        v11 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
      }
      else
      {
        v8 = *((_QWORD *)this + 3);
        *((_DWORD *)this + 8) = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergeFrom((CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)v9, v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 8));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 48));
  if (*((int *)a2 + 14) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections **)(*((_QWORD *)a2 + 6) + 8 * v12);
      v14 = *((_DWORD *)this + 15);
      v15 = *((int *)this + 14);
      if ((int)v15 >= v14)
      {
        if (v14 == *((_DWORD *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 48));
          v14 = *((_DWORD *)this + 15);
        }
        *((_DWORD *)this + 15) = v14 + 1;
        v17 = operator new();
        *(_QWORD *)v17 = &off_1E25BC8C0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        *(_QWORD *)(v17 + 24) = 0;
        *(_DWORD *)(v17 + 32) = 0;
        v18 = *((_QWORD *)this + 6);
        v19 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v19 + 1;
        *(_QWORD *)(v18 + 8 * v19) = v17;
      }
      else
      {
        v16 = *((_QWORD *)this + 6);
        *((_DWORD *)this + 14) = v15 + 1;
        v17 = *(_QWORD *)(v16 + 8 * v15);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergeFrom((CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *)v17, v13);
      ++v12;
    }
    while (v12 < *((int *)a2 + 14));
  }
  v20 = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 104));
  if (*((int *)a2 + 28) >= 1)
  {
    v22 = 0;
    do
    {
      v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset **)(*((_QWORD *)a2 + 13)
                                                                                             + 8 * v22);
      v24 = *((_DWORD *)this + 29);
      v25 = *((int *)this + 28);
      if ((int)v25 >= v24)
      {
        if (v24 == *((_DWORD *)this + 30))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 104));
          v24 = *((_DWORD *)this + 29);
        }
        *((_DWORD *)this + 29) = v24 + 1;
        v27 = operator new();
        *(_QWORD *)v27 = &off_1E25BCCF8;
        *(_OWORD *)(v27 + 8) = 0u;
        *(_OWORD *)(v27 + 24) = 0u;
        v28 = *((_QWORD *)this + 13);
        v29 = *((int *)this + 28);
        *((_DWORD *)this + 28) = v29 + 1;
        *(_QWORD *)(v28 + 8 * v29) = v27;
      }
      else
      {
        v26 = *((_QWORD *)this + 13);
        *((_DWORD *)this + 28) = v25 + 1;
        v27 = *(_QWORD *)(v26 + 8 * v25);
      }
      v21 = CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom((CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *)v27, v23);
      ++v22;
    }
    while (v22 < *((int *)a2 + 28));
  }
  LOBYTE(v30) = *((_BYTE *)a2 + 132);
  if ((_BYTE)v30)
  {
    if ((*((_BYTE *)a2 + 132) & 1) != 0)
    {
      *((_DWORD *)this + 33) |= 1u;
      v31 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *)*((_QWORD *)this + 1);
      if (!v31)
      {
        v20 = operator new();
        v31 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *)v20;
        *(_QWORD *)v20 = &off_1E25BB8D0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *((_QWORD *)this + 1) = v20;
      }
      v32 = (const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *)*((_QWORD *)a2 + 1);
      if (!v32)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v20);
        v32 = *(const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                      + 8);
      }
      v21 = CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(v31, v32);
      v30 = *((_DWORD *)a2 + 33);
      if ((v30 & 2) == 0)
      {
LABEL_30:
        if ((v30 & 0x10) == 0)
          goto LABEL_31;
        goto LABEL_45;
      }
    }
    else if ((*((_BYTE *)a2 + 132) & 2) == 0)
    {
      goto LABEL_30;
    }
    *((_DWORD *)this + 33) |= 2u;
    v33 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)*((_QWORD *)this + 2);
    if (!v33)
    {
      v20 = operator new();
      v33 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)v20;
      *(_QWORD *)(v20 + 40) = 0;
      *(_QWORD *)v20 = &off_1E25BB6F0;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 24) = 0;
      *(_DWORD *)(v20 + 32) = 0;
      *((_QWORD *)this + 2) = v20;
    }
    v34 = (const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)*((_QWORD *)a2 + 2);
    if (!v34)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v20);
      v34 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                    + 16);
    }
    v21 = CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergeFrom(v33, v34);
    v30 = *((_DWORD *)a2 + 33);
    if ((v30 & 0x10) == 0)
    {
LABEL_31:
      if ((v30 & 0x20) == 0)
        goto LABEL_32;
      goto LABEL_50;
    }
LABEL_45:
    *((_DWORD *)this + 33) |= 0x10u;
    v35 = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)*((_QWORD *)this + 9);
    if (!v35)
    {
      v20 = operator new();
      v35 = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)v20;
      *(_QWORD *)v20 = &off_1E25BBEE8;
      *(_OWORD *)(v20 + 8) = 0u;
      *(_OWORD *)(v20 + 24) = 0u;
      *(_OWORD *)(v20 + 40) = 0u;
      *((_QWORD *)this + 9) = v20;
    }
    v36 = (const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)*((_QWORD *)a2 + 9);
    if (!v36)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v20);
      v36 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                     + 72);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(v35, v36);
    v30 = *((_DWORD *)a2 + 33);
    if ((v30 & 0x20) == 0)
    {
LABEL_32:
      if ((v30 & 0x40) == 0)
        goto LABEL_33;
      goto LABEL_51;
    }
LABEL_50:
    v21 = *((double *)a2 + 10);
    *((_DWORD *)this + 33) |= 0x20u;
    *((double *)this + 10) = v21;
    v30 = *((_DWORD *)a2 + 33);
    if ((v30 & 0x40) == 0)
    {
LABEL_33:
      if ((v30 & 0x80) == 0)
        return *(float *)&v21;
LABEL_52:
      *((_DWORD *)this + 33) |= 0x80u;
      v37 = (CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)*((_QWORD *)this + 12);
      if (!v37)
      {
        v20 = operator new();
        v37 = (CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)v20;
        *(_QWORD *)v20 = &off_1E25BC9B0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *((_QWORD *)this + 12) = v20;
      }
      v38 = (const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)*((_QWORD *)a2 + 12);
      if (!v38)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v20);
        v38 = *(const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                             + 96);
      }
      *(float *)&v21 = CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(v37, v38);
      return *(float *)&v21;
    }
LABEL_51:
    v21 = *((double *)a2 + 11);
    *((_DWORD *)this + 33) |= 0x40u;
    *((double *)this + 11) = v21;
    if ((*((_DWORD *)a2 + 33) & 0x80) == 0)
      return *(float *)&v21;
    goto LABEL_52;
  }
  return *(float *)&v21;
}

void sub_18D1553E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::~MeasurementReportCallbackContents(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  *(_QWORD *)this = &off_1E25BD130;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SharedDtor(this);
  sub_18D09ECA4((uint64_t *)this + 13);
  sub_18D09ECA4((uint64_t *)this + 6);
  sub_18D09ECA4((uint64_t *)this + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::~MeasurementReportCallbackContents(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 9);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 12);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 128) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::New(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BD130;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_DWORD *)(v1 + 120) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 132);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 132) & 1) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        v2 = *(_DWORD *)(this + 132);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::Clear(this);
        v2 = *(_DWORD *)(v1 + 132);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 72);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::Clear(this);
        v2 = *(_DWORD *)(v1 + 132);
      }
    }
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 88) = 0;
    if ((v2 & 0x80) != 0)
    {
      v4 = *(_QWORD *)(v1 + 96);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 52);
        if ((_BYTE)v5)
        {
          *(_DWORD *)(v4 + 40) = 0;
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
        }
        if ((v5 & 0xFF00) != 0)
          *(_DWORD *)(v4 + 44) = 0;
        *(_DWORD *)(v4 + 52) = 0;
      }
    }
  }
  if (*(int *)(v1 + 32) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v6);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(int *)(v1 + 56) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v8);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      ++v8;
    }
    while (v8 < *(int *)(v1 + 56));
  }
  *(_DWORD *)(v1 + 56) = 0;
  if (*(int *)(v1 + 112) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v1 + 104) + 8 * v10);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      ++v10;
    }
    while (v10 < *(int *)(v1 + 112));
  }
  *(_DWORD *)(v1 + 112) = 0;
  *(_DWORD *)(v1 + 132) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _BYTE *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  _BYTE *v77;
  uint64_t result;
  unsigned int v79[2];

  v4 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 24);
  v5 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 48);
  v6 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 104);
  while (1)
  {
LABEL_2:
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 < *((_QWORD *)a2 + 2) && (*v7 & 0x80000000) == 0)
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_30;
        *((_DWORD *)this + 33) |= 1u;
        v10 = *((_QWORD *)this + 1);
        if (!v10)
        {
          v10 = operator new();
          *(_QWORD *)v10 = &off_1E25BB8D0;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *((_QWORD *)this + 1) = v10;
        }
        v79[0] = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79))return 0;
        }
        else
        {
          v79[0] = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        v13 = *((_DWORD *)a2 + 14);
        v14 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *)v10, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v15 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)a2 + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
        goto LABEL_42;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_30;
LABEL_42:
        *((_DWORD *)this + 33) |= 2u;
        v19 = *((_QWORD *)this + 2);
        if (!v19)
        {
          v19 = operator new();
          *(_QWORD *)(v19 + 40) = 0;
          *(_QWORD *)v19 = &off_1E25BB6F0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_DWORD *)(v19 + 32) = 0;
          *((_QWORD *)this + 2) = v19;
        }
        v79[0] = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79))return 0;
        }
        else
        {
          v79[0] = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)v19, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v23 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v23, 1);
        v24 = v23 - 1;
        if (v24 < 0 == v16)
          *((_DWORD *)a2 + 14) = v24;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 != 26)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v25 + 1;
LABEL_56:
          v26 = *((_DWORD *)this + 9);
          v27 = *((int *)this + 8);
          if ((int)v27 >= v26)
          {
            if (v26 == *((_DWORD *)this + 10))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
              v26 = *((_DWORD *)this + 9);
            }
            *((_DWORD *)this + 9) = v26 + 1;
            v29 = operator new();
            *(_QWORD *)v29 = &off_1E25BD6D0;
            *(_OWORD *)(v29 + 128) = 0u;
            *(_OWORD *)(v29 + 144) = 0u;
            *(_OWORD *)(v29 + 160) = 0u;
            *(_OWORD *)(v29 + 8) = 0u;
            *(_OWORD *)(v29 + 24) = 0u;
            *(_DWORD *)(v29 + 40) = 0;
            *(_OWORD *)(v29 + 48) = 0u;
            *(_OWORD *)(v29 + 64) = 0u;
            *(_OWORD *)(v29 + 80) = 0u;
            *(_OWORD *)(v29 + 96) = 0u;
            *(_OWORD *)(v29 + 108) = 0u;
            v30 = *((_QWORD *)this + 3);
            v31 = *((int *)this + 8);
            *((_DWORD *)this + 8) = v31 + 1;
            *(_QWORD *)(v30 + 8 * v31) = v29;
          }
          else
          {
            v28 = *((_QWORD *)this + 3);
            *((_DWORD *)this + 8) = v27 + 1;
            v29 = *(_QWORD *)(v28 + 8 * v27);
          }
          v79[0] = 0;
          v32 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79))return 0;
          }
          else
          {
            v79[0] = *v32;
            *((_QWORD *)a2 + 1) = v32 + 1;
          }
          v33 = *((_DWORD *)a2 + 14);
          v34 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v33 + 1;
          if (v33 >= v34)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)v29, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v35 = *((_DWORD *)a2 + 14);
          v16 = __OFSUB__(v35, 1);
          v36 = v35 - 1;
          if (v36 < 0 == v16)
            *((_DWORD *)a2 + 14) = v36;
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v25 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v37 = *v25;
        }
        while (v37 == 26);
        if (v37 != 34)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v25 + 1;
LABEL_74:
          v38 = *((_DWORD *)this + 15);
          v39 = *((int *)this + 14);
          if ((int)v39 >= v38)
          {
            if (v38 == *((_DWORD *)this + 16))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
              v38 = *((_DWORD *)this + 15);
            }
            *((_DWORD *)this + 15) = v38 + 1;
            v41 = operator new();
            *(_QWORD *)v41 = &off_1E25BC8C0;
            *(_QWORD *)(v41 + 8) = 0;
            *(_QWORD *)(v41 + 16) = 0;
            *(_QWORD *)(v41 + 24) = 0;
            *(_DWORD *)(v41 + 32) = 0;
            v42 = *((_QWORD *)this + 6);
            v43 = *((int *)this + 14);
            *((_DWORD *)this + 14) = v43 + 1;
            *(_QWORD *)(v42 + 8 * v43) = v41;
          }
          else
          {
            v40 = *((_QWORD *)this + 6);
            *((_DWORD *)this + 14) = v39 + 1;
            v41 = *(_QWORD *)(v40 + 8 * v39);
          }
          v79[0] = 0;
          v44 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v44 >= *((_QWORD *)a2 + 2) || *v44 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79))return 0;
          }
          else
          {
            v79[0] = *v44;
            *((_QWORD *)a2 + 1) = v44 + 1;
          }
          v45 = *((_DWORD *)a2 + 14);
          v46 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v45 + 1;
          if (v45 >= v46)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *)v41, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v47 = *((_DWORD *)a2 + 14);
          v16 = __OFSUB__(v47, 1);
          v48 = v47 - 1;
          if (v48 < 0 == v16)
            *((_DWORD *)a2 + 14) = v48;
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v25 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v49 = *v25;
        }
        while (v49 == 34);
        if (v49 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v25 + 1;
LABEL_92:
        *((_DWORD *)this + 33) |= 0x10u;
        v50 = *((_QWORD *)this + 9);
        if (!v50)
        {
          v50 = operator new();
          *(_QWORD *)v50 = &off_1E25BBEE8;
          *(_OWORD *)(v50 + 8) = 0u;
          *(_OWORD *)(v50 + 24) = 0u;
          *(_OWORD *)(v50 + 40) = 0u;
          *((_QWORD *)this + 9) = v50;
        }
        v79[0] = 0;
        v51 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v51 >= *((_QWORD *)a2 + 2) || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79))return 0;
        }
        else
        {
          v79[0] = *v51;
          *((_QWORD *)a2 + 1) = v51 + 1;
        }
        v52 = *((_DWORD *)a2 + 14);
        v53 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v52 + 1;
        if (v52 >= v53)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)v50, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v54 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v54, 1);
        v55 = v54 - 1;
        if (v55 < 0 == v16)
          *((_DWORD *)a2 + 14) = v55;
        v56 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v56 >= *((_QWORD *)a2 + 2) || *v56 != 49)
          continue;
        *((_QWORD *)a2 + 1) = v56 + 1;
LABEL_106:
        *(_QWORD *)v79 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v79) & 1) == 0)return 0;
        *((_QWORD *)this + 10) = *(_QWORD *)v79;
        *((_DWORD *)this + 33) |= 0x20u;
        v57 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v57 >= *((_QWORD *)a2 + 2) || *v57 != 57)
          continue;
        *((_QWORD *)a2 + 1) = v57 + 1;
LABEL_110:
        *(_QWORD *)v79 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v79) & 1) == 0)return 0;
        *((_QWORD *)this + 11) = *(_QWORD *)v79;
        v12 = *((_DWORD *)this + 33) | 0x40;
        *((_DWORD *)this + 33) = v12;
        v58 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v58 >= *((_QWORD *)a2 + 2) || *v58 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v58 + 1;
LABEL_114:
        *((_DWORD *)this + 33) = v12 | 0x80;
        v59 = *((_QWORD *)this + 12);
        if (!v59)
        {
          v59 = operator new();
          *(_QWORD *)v59 = &off_1E25BC9B0;
          *(_OWORD *)(v59 + 8) = 0u;
          *(_OWORD *)(v59 + 24) = 0u;
          *(_OWORD *)(v59 + 40) = 0u;
          *((_QWORD *)this + 12) = v59;
        }
        v79[0] = 0;
        v60 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v60 >= *((_QWORD *)a2 + 2) || *v60 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79))return 0;
        }
        else
        {
          v79[0] = *v60;
          *((_QWORD *)a2 + 1) = v60 + 1;
        }
        v61 = *((_DWORD *)a2 + 14);
        v62 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v61 + 1;
        if (v61 >= v62)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)v59, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v63 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v63, 1);
        v64 = v63 - 1;
        if (v64 < 0 == v16)
          *((_DWORD *)a2 + 14) = v64;
        v65 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v65 < *((_QWORD *)a2 + 2) && *v65 == 74)
        {
          do
          {
            *((_QWORD *)a2 + 1) = v65 + 1;
LABEL_128:
            v66 = *((_DWORD *)this + 29);
            v67 = *((int *)this + 28);
            if ((int)v67 >= v66)
            {
              if (v66 == *((_DWORD *)this + 30))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
                v66 = *((_DWORD *)this + 29);
              }
              *((_DWORD *)this + 29) = v66 + 1;
              v69 = operator new();
              *(_QWORD *)v69 = &off_1E25BCCF8;
              *(_OWORD *)(v69 + 8) = 0u;
              *(_OWORD *)(v69 + 24) = 0u;
              v70 = *((_QWORD *)this + 13);
              v71 = *((int *)this + 28);
              *((_DWORD *)this + 28) = v71 + 1;
              *(_QWORD *)(v70 + 8 * v71) = v69;
            }
            else
            {
              v68 = *((_QWORD *)this + 13);
              *((_DWORD *)this + 28) = v67 + 1;
              v69 = *(_QWORD *)(v68 + 8 * v67);
            }
            v79[0] = 0;
            v72 = (char *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v72 >= *((_QWORD *)a2 + 2) || *v72 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v79))return 0;
            }
            else
            {
              v79[0] = *v72;
              *((_QWORD *)a2 + 1) = v72 + 1;
            }
            v73 = *((_DWORD *)a2 + 14);
            v74 = *((_DWORD *)a2 + 15);
            *((_DWORD *)a2 + 14) = v73 + 1;
            if (v73 >= v74)
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
            if (!CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *)v69, a2)|| !*((_BYTE *)a2 + 36))
            {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
            v75 = *((_DWORD *)a2 + 14);
            v16 = __OFSUB__(v75, 1);
            v76 = v75 - 1;
            if (v76 < 0 == v16)
              *((_DWORD *)a2 + 14) = v76;
            v65 = (_BYTE *)*((_QWORD *)a2 + 1);
            v77 = (_BYTE *)*((_QWORD *)a2 + 2);
          }
          while (v65 < v77 && *v65 == 74);
          if (v65 == v77 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
        }
        break;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_56;
        goto LABEL_30;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_74;
        goto LABEL_30;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_92;
        goto LABEL_30;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_106;
        goto LABEL_30;
      case 7u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_110;
        goto LABEL_30;
      case 8u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_30;
        v12 = *((_DWORD *)this + 33);
        goto LABEL_114;
      case 9u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_30;
        goto LABEL_128;
      default:
        v9 = TagFallback & 7;
LABEL_30:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = this;
  v6 = *(_DWORD *)(this + 132);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                     + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 132);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                     + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    v9 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    v10 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 56));
  }
  v11 = *(_DWORD *)(v5 + 132);
  if ((v11 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v5 + 72);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                      + 72);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v12, a2, a4);
    v11 = *(_DWORD *)(v5 + 132);
    if ((v11 & 0x20) == 0)
    {
LABEL_17:
      if ((v11 & 0x40) == 0)
        goto LABEL_18;
      goto LABEL_24;
    }
  }
  else if ((v11 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, *(double *)(v5 + 80), a3);
  v11 = *(_DWORD *)(v5 + 132);
  if ((v11 & 0x40) == 0)
  {
LABEL_18:
    if ((v11 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (uint64_t)a2, *(double *)(v5 + 88), a3);
  if ((*(_DWORD *)(v5 + 132) & 0x80) == 0)
    goto LABEL_28;
LABEL_25:
  v13 = *(_QWORD *)(v5 + 96);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                    + 96);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v13, a2, a4);
LABEL_28:
  if (*(int *)(v5 + 112) >= 1)
  {
    v14 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_QWORD *)(*(_QWORD *)(v5 + 104) + 8 * v14++), a2, a4);
    while (v14 < *(int *)(v5 + 112));
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  int v16;
  CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  int v37;
  int v38;

  LOBYTE(v2) = *((_BYTE *)this + 132);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_40;
  }
  if ((*((_BYTE *)this + 132) & 1) != 0)
  {
    v5 = *((_QWORD *)this + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      v5 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                     + 8);
    }
    v6 = *(unsigned __int8 *)(v5 + 36);
    if (*(_BYTE *)(v5 + 36))
    {
      v7 = (v6 << 31 >> 31) & 9;
      if ((v6 & 2) != 0)
        v7 += 9;
      if ((v6 & 4) != 0)
        v6 = v7 + 9;
      else
        v6 = v7;
    }
    *(_DWORD *)(v5 + 32) = v6;
    v3 = v6 + 2;
    v2 = *((_DWORD *)this + 33);
    if ((v2 & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 132) & 2) != 0)
  {
LABEL_15:
    v8 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)*((_QWORD *)this + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v8 = *(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                             + 16);
    }
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::ByteSize(v8);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    else
      v11 = 1;
    v3 += v10 + v11 + 1;
    v2 = *((_DWORD *)this + 33);
  }
LABEL_21:
  if ((v2 & 0x10) != 0)
  {
    v12 = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)*((_QWORD *)this + 9);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v12 = *(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                               + 72);
    }
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::ByteSize(v12);
    v14 = (int)v13;
    if (v13 >= 0x80)
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    else
      v15 = 1;
    v3 += v14 + v15 + 1;
    v2 = *((_DWORD *)this + 33);
  }
  v16 = v3 + 9;
  if ((v2 & 0x20) == 0)
    v16 = v3;
  if ((v2 & 0x40) != 0)
    v4 = v16 + 9;
  else
    v4 = v16;
  if ((v2 & 0x80) != 0)
  {
    v17 = (CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)*((_QWORD *)this + 12);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      v17 = *(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                     + 96);
    }
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::ByteSize(v17);
    v19 = (int)v18;
    if (v18 >= 0x80)
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
    else
      v20 = 1;
    v4 += v19 + v20 + 1;
  }
LABEL_40:
  v21 = *((_DWORD *)this + 8);
  v22 = v21 + v4;
  if (v21 >= 1)
  {
    v23 = 0;
    do
    {
      v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::ByteSize(*(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo **)(*((_QWORD *)this + 3) + 8 * v23));
      v25 = (int)v24;
      if (v24 >= 0x80)
        v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
      else
        v26 = 1;
      v22 += v25 + v26;
      ++v23;
    }
    while (v23 < *((int *)this + 8));
  }
  v27 = *((_DWORD *)this + 14);
  v28 = v27 + v22;
  if (v27 >= 1)
  {
    v29 = 0;
    do
    {
      v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::ByteSize(*(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections **)(*((_QWORD *)this + 6) + 8 * v29));
      v31 = (int)v30;
      if (v30 >= 0x80)
        v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30);
      else
        v32 = 1;
      v28 += v31 + v32;
      ++v29;
    }
    while (v29 < *((int *)this + 14));
  }
  v33 = *((_DWORD *)this + 28);
  v34 = (v33 + v28);
  if (v33 >= 1)
  {
    v35 = 0;
    do
    {
      v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::ByteSize(*(_QWORD *)(*((_QWORD *)this + 13) + 8 * v35));
      v37 = (int)v36;
      if (v36 >= 0x80)
        v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36);
      else
        v38 = 1;
      v34 = (v37 + v34 + v38);
      ++v35;
    }
    while (v35 < *((int *)this + 28));
  }
  *((_DWORD *)this + 32) = v34;
  return v34;
}

float CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2)
{
  float result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::Swap(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2)
{
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    v5 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v5;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v6 = *((_QWORD *)v3 + 9);
    *((_QWORD *)v3 + 9) = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = v6;
    v7 = *((_QWORD *)v3 + 10);
    *((_QWORD *)v3 + 10) = *((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 10) = v7;
    v8 = *((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 11) = v8;
    v9 = *((_QWORD *)v3 + 12);
    *((_QWORD *)v3 + 12) = *((_QWORD *)a2 + 12);
    *((_QWORD *)a2 + 12) = v9;
    this = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v10 = *((_DWORD *)v3 + 33);
    *((_DWORD *)v3 + 33) = *((_DWORD *)a2 + 33);
    *((_DWORD *)a2 + 33) = v10;
    v11 = *((_DWORD *)v3 + 32);
    *((_DWORD *)v3 + 32) = *((_DWORD *)a2 + 32);
    *((_DWORD *)a2 + 32) = v11;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.PrivateData.MeasurementReportCallbackContents");
}

uint64_t sub_18D1566D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18D1566DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18D1566E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18D1566EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18D1566F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18D1566FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18D156704(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18D15670C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18D156714(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18D15671C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18D156724(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18D15672C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18D156734(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18D15673C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t sub_18D156744(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18D15674C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18D156754(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18D15675C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_18D156764(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18D15676C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18D156774(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18D15677C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_18D156784(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_18D15678C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18D156794(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_18D15679C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18D1567A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18D1567AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18D1567B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18D1567BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18D1567C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_18D1567CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_18D1567D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sub_18D1567DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18D1567E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18D1567EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_18D1567F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18D1567FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18D156804(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_18D15680C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18D156814(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18D15681C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_18D156824(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18D15682C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18D156834(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_18D15683C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_18D156844(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18D15684C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18D156854(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18D15685C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_ShutdownFile_CoreNavigationCLPInternalToolData_2eproto(CoreNavigation::CLP::LogEntry::InternalToolData *this)
{
  uint64_t result;

  result = CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_;
  if (CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_
                                              + 8))(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_);
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto_impl(CoreNavigation::CLP::LogEntry::InternalToolData *this, uint64_t a2, uint64_t a3, const char *a4)
{
  CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData *v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(void);

  v4 = (CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData *)wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreNavigation/shared/cnprotobuf/CoreNavigationCLPInternalToolData.pb.cc", a4);
  CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::protobuf_AddDesc_CoreNavigationCLPGnssMsmtAnalysisToolData_2eproto(v4);
  v5 = (_QWORD *)operator new();
  v5[2] = 0;
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ = (uint64_t)v5;
  v6 = CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::default_instance_;
  *v5 = &off_1E25BDE50;
  v5[1] = v6;
  return wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_ShutdownFile_CoreNavigationCLPInternalToolData_2eproto, v7);
}

_QWORD *CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::InternalToolDataCapture(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E25BDE50;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E25BDE50;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::default_instance_;
  return this;
}

void CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(CoreNavigation::CLP::LogEntry::InternalToolData *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E0DE8448] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto_impl;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18D156984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::InternalToolDataCapture(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, const CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E25BDE50;
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergeFrom(this, a2);
  return this;
}

void sub_18D1569E8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergeFrom(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, const CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *a2)
{
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *v3;
  CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *v4;
  const CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *v5;
  _BYTE v6[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    *((_DWORD *)v3 + 5) |= 1u;
    v4 = (CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)*((_QWORD *)v3 + 1);
    if (!v4)
    {
      this = (CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)operator new();
      v4 = this;
      *(_QWORD *)this = &off_1E25BE5D0;
      *((_QWORD *)this + 20) = 0;
      *((_QWORD *)this + 21) = 0;
      *((_DWORD *)this + 44) = 0;
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
      *((_DWORD *)this + 50) = 0;
      *((_QWORD *)this + 26) = 0;
      *((_QWORD *)this + 27) = 0;
      *((_DWORD *)this + 56) = 0;
      *((_QWORD *)this + 29) = 0;
      *((_DWORD *)this + 60) = 0;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 52) = 0u;
      *(_OWORD *)((char *)this + 100) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)((char *)this + 72) = 0u;
      *((_DWORD *)this + 38) = 0;
      *(_OWORD *)((char *)this + 136) = 0u;
      *(_OWORD *)((char *)this + 120) = 0u;
      *((_QWORD *)v3 + 1) = this;
    }
    v5 = (const CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)*((_QWORD *)a2 + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(this);
      v5 = *(const CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture **)(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ + 8);
    }
    CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::MergeFrom(v4, v5);
  }
}

void sub_18D156B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::~InternalToolDataCapture(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E25BDE50;
  CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::~InternalToolDataCapture(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SharedDtor(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  uint64_t v2;

  CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(this);
  return CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::New(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E25BDE50;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if ((*(_BYTE *)(this + 20) & 1) != 0)
  {
    this = *(_QWORD *)(this + 8);
    if (this)
      this = CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::Clear(this);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;
  unsigned int v14;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *((_DWORD *)this + 5) |= 1u;
      v6 = *((_QWORD *)this + 1);
      if (!v6)
      {
        v6 = operator new();
        *(_QWORD *)v6 = &off_1E25BE5D0;
        *(_QWORD *)(v6 + 160) = 0;
        *(_QWORD *)(v6 + 168) = 0;
        *(_DWORD *)(v6 + 176) = 0;
        *(_QWORD *)(v6 + 184) = 0;
        *(_QWORD *)(v6 + 192) = 0;
        *(_DWORD *)(v6 + 200) = 0;
        *(_QWORD *)(v6 + 208) = 0;
        *(_QWORD *)(v6 + 216) = 0;
        *(_DWORD *)(v6 + 224) = 0;
        *(_QWORD *)(v6 + 232) = 0;
        *(_DWORD *)(v6 + 240) = 0;
        *(_OWORD *)(v6 + 8) = 0u;
        *(_OWORD *)(v6 + 24) = 0u;
        *(_OWORD *)(v6 + 40) = 0u;
        *(_OWORD *)(v6 + 52) = 0u;
        *(_OWORD *)(v6 + 100) = 0u;
        *(_OWORD *)(v6 + 88) = 0u;
        *(_OWORD *)(v6 + 72) = 0u;
        *(_DWORD *)(v6 + 152) = 0;
        *(_OWORD *)(v6 + 136) = 0u;
        *(_OWORD *)(v6 + 120) = 0u;
        *((_QWORD *)this + 1) = v6;
      }
      v14 = 0;
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v14))
          return 0;
      }
      else
      {
        v14 = *v7;
        *((_QWORD *)a2 + 1) = v7 + 1;
      }
      v8 = *((_DWORD *)a2 + 14);
      v9 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v8 + 1;
      if (v8 >= v9)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)v6, a2)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v10 = *((_DWORD *)a2 + 14);
      v11 = __OFSUB__(v10, 1);
      v12 = v10 - 1;
      if (v12 < 0 == v11)
        *((_DWORD *)a2 + 14) = v12;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(this + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(this + 8);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto((CoreNavigation::CLP::LogEntry::InternalToolData *)this);
      v5 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::ByteSize(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  uint64_t result;
  CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v3 = (CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)*((_QWORD *)this + 1);
    if (!v3)
    {
      CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(0);
      v3 = *(CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture **)(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ + 8);
    }
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::ByteSize(v3);
    v5 = (int)v4;
    if (v4 >= 0x80)
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    else
      v6 = 1;
    result = (v5 + v6 + 1);
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::CopyFrom(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, const CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *))(*(_QWORD *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::IsInitialized(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *a2)
{
  uint64_t v2;

  if (a2 != (CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.InternalToolData.InternalToolDataCapture");
}

uint64_t sub_18D157058(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

double *cnquaternion::CNQuaternion::CNQuaternion(double *this, double a2, double a3, double a4, double a5)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

__n128 cnquaternion::CNQuaternion::CNQuaternion(cnquaternion::CNQuaternion *this, __n128 *a2)
{
  __n128 result;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(__n128 *)this = *a2;
  result = a2[1];
  *((__n128 *)this + 1) = result;
  return result;
}

{
  __n128 result;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(__n128 *)this = *a2;
  result = a2[1];
  *((__n128 *)this + 1) = result;
  return result;
}

__n128 cnquaternion::CNQuaternion::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    result = *(__n128 *)(a2 + 16);
    *(__n128 *)(a1 + 16) = result;
  }
  return result;
}

double cnquaternion::CNQuaternion::q1(cnquaternion::CNQuaternion *this)
{
  return *(double *)this;
}

double cnquaternion::CNQuaternion::q2(cnquaternion::CNQuaternion *this)
{
  return *((double *)this + 1);
}

double cnquaternion::CNQuaternion::q3(cnquaternion::CNQuaternion *this)
{
  return *((double *)this + 2);
}

double cnquaternion::CNQuaternion::q4(cnquaternion::CNQuaternion *this)
{
  return *((double *)this + 3);
}

double *cnquaternion::CNQuaternion::Setq1(double *this, double a2)
{
  *this = a2;
  return this;
}

uint64_t cnquaternion::CNQuaternion::Setq2(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

uint64_t cnquaternion::CNQuaternion::Setq3(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

uint64_t cnquaternion::CNQuaternion::Setq4(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

float64x2_t cnquaternion::CNQuaternion::operator+@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result;
  float64x2_t v4;

  result = vaddq_f64(*a1, *a2);
  v4 = vaddq_f64(a1[1], a2[1]);
  *a3 = result;
  a3[1] = v4;
  return result;
}

float64x2_t cnquaternion::CNQuaternion::operator-@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result;
  float64x2_t v4;

  result = vsubq_f64(*a1, *a2);
  v4 = vsubq_f64(a1[1], a2[1]);
  *a3 = result;
  a3[1] = v4;
  return result;
}

double cnquaternion::CNQuaternion::operator*@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;

  v4 = a1[2];
  v3 = a1[3];
  v5 = a2[1];
  v6 = a1[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = v4 * v5 + v3 * *a2 - v6 * v7 + *a1 * v8;
  v10 = v3 * v5 - v4 * *a2 + *a1 * v7 + v6 * v8;
  v11 = v6 * *a2 - *a1 * v5 + v3 * v7 + v4 * v8;
  v12 = -(v6 * v5) - *a1 * *a2 - v4 * v7;
  *a3 = v9;
  a3[1] = v10;
  result = v12 + v3 * v8;
  a3[2] = v11;
  a3[3] = result;
  return result;
}

void cnrand::RandomNumberGenerator::RandomNumberGenerator(cnrand::RandomNumberGenerator *this)
{
  bzero(this, 0x9C9uLL);
}

{
  bzero(this, 0x9C9uLL);
}

cnrand::RandomNumberGenerator *cnrand::RandomNumberGenerator::RandomNumberGenerator(cnrand::RandomNumberGenerator *this, const cnrand::RandomNumberGenerator *a2)
{
  *(_QWORD *)this = *(_QWORD *)a2;
  memcpy((char *)this + 8, (char *)a2 + 8, 0x9C0uLL);
  *((_BYTE *)this + 2504) = *((_BYTE *)a2 + 2504);
  return this;
}

{
  *(_QWORD *)this = *(_QWORD *)a2;
  memcpy((char *)this + 8, (char *)a2 + 8, 0x9C0uLL);
  *((_BYTE *)this + 2504) = *((_BYTE *)a2 + 2504);
  return this;
}

uint64_t cnrand::RandomNumberGenerator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x9C0uLL);
    *(_BYTE *)(a1 + 2504) = *(_BYTE *)(a2 + 2504);
  }
  return a1;
}

uint64_t cnrand::RandomNumberGenerator::FillGenerator(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  unsigned int v6;

  if (!*(_DWORD *)(this + 4))
  {
    v1 = 0;
    v2 = this + 8;
    do
    {
      if (v1 == 623)
        v3 = 0;
      else
        v3 = v1 + 1;
      v4 = *(_DWORD *)(v2 + 4 * v3);
      if (v1 >= 0xE3)
        v5 = -227;
      else
        v5 = 397;
      v6 = *(_DWORD *)(v2 + 4 * (v5 + (int)v1)) ^ ((v4 & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v1) & 0x80000000) >> 1);
      if ((v4 & 1) != 0)
        v6 ^= 0x9908B0DF;
      *(_DWORD *)(v2 + 4 * v1++) = v6;
    }
    while (v1 != 624);
  }
  return this;
}

uint64_t cnrand::RandomNumberGenerator::Initialize(cnrand::RandomNumberGenerator *this)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  int v6;

  v2 = time(0);
  srand(v2);
  LODWORD(result) = rand();
  *(_DWORD *)this = result;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = result;
  v4 = 1;
  for (i = 3; i != 626; ++i)
  {
    v6 = 1812433253 * (result ^ (result >> 30));
    result = (v6 + v4);
    *((_DWORD *)this + i) = i + v6 - 2;
    ++v4;
  }
  *((_BYTE *)this + 2504) = 1;
  return result;
}

uint64_t cnrand::RandomNumberGenerator::Initialize(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t i;
  int v4;

  *(_DWORD *)this = a2;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a2;
  v2 = 1;
  for (i = 3; i != 626; ++i)
  {
    v4 = 1812433253 * (a2 ^ (a2 >> 30));
    a2 = v4 + v2;
    *(_DWORD *)(this + 4 * i) = i + v4 - 2;
    ++v2;
  }
  *(_BYTE *)(this + 2504) = 1;
  return this;
}

uint64_t cnrand::RandomNumberGenerator::RandomInteger(cnrand::RandomNumberGenerator *this)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t result;

  if (!*((_BYTE *)this + 2504))
    cnrand::RandomNumberGenerator::Initialize(this);
  cnrand::RandomNumberGenerator::FillGenerator((uint64_t)this);
  v2 = *((unsigned int *)this + 1);
  v3 = *((_DWORD *)this + v2 + 2) ^ (*((_DWORD *)this + v2 + 2) >> 11);
  v4 = (((v3 << 7) & 0x9D2C5680 ^ v3) << 15) & 0xEFC60000 ^ (v3 << 7) & 0x9D2C5680 ^ v3;
  result = v4 ^ (v4 >> 18);
  *((_DWORD *)this + 1) = ((int)v2 + 1) % 0x270u;
  return result;
}

double cnrand::RandomNumberGenerator::RandomUniform(cnrand::RandomNumberGenerator *this)
{
  return ((double)cnrand::RandomNumberGenerator::RandomInteger(this) + 0.5) * 2.32830644e-10;
}

double cnrand::RandomNumberGenerator::RandomGaussian(cnrand::RandomNumberGenerator *this)
{
  double v2;
  double v3;
  double v4;
  double v5;

  do
  {
    v2 = ((double)cnrand::RandomNumberGenerator::RandomInteger(this) + 0.5) * 2.32830644e-10 * 2.0 + -1.0;
    v3 = ((double)cnrand::RandomNumberGenerator::RandomInteger(this) + 0.5) * 2.32830644e-10 * 2.0 + -1.0;
    v4 = v3 * v3;
    v5 = v4 + v2 * v2;
  }
  while (v5 >= 1.0);
  return v2 * sqrt(log(v4 + v2 * v2) * -2.0 / v5);
}

FILE *cnrand::RandomNumberGenerator::WriteState(cnrand::RandomNumberGenerator *this, const char *__filename)
{
  FILE *result;
  FILE *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t i;
  int v11;

  if (!*((_BYTE *)this + 2504))
    cnrand::RandomNumberGenerator::Initialize(this);
  result = fopen(__filename, "w");
  if (result)
  {
    v5 = result;
    v6 = fprintf(result, "%u\n", *(_DWORD *)this);
    v7 = fprintf(v5, "%u\n", *((_DWORD *)this + 1));
    if (v6 >= 1)
      v8 = 1;
    else
      v8 = 2;
    if (v7 >= 1)
      v9 = v6 < 1;
    else
      v9 = v8;
    for (i = 8; i != 2504; i += 4)
    {
      if (fprintf(v5, "%u\n", *(_DWORD *)((char *)this + i)) < 1)
        ++v9;
    }
    if (fflush(v5))
      v11 = -1;
    else
      v11 = 0;
    fclose(v5);
    return (FILE *)(v9 == v11);
  }
  return result;
}

uint64_t cnrand::RandomNumberGenerator::LoadState(cnrand::RandomNumberGenerator *this, const char *__filename)
{
  uint64_t result;
  FILE *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t i;

  *((_BYTE *)this + 2504) = 0;
  result = (uint64_t)fopen(__filename, "r");
  if (result)
  {
    v4 = (FILE *)result;
    v5 = fscanf((FILE *)result, "%u\n", this);
    v6 = fscanf(v4, "%u\n", (char *)this + 4);
    if (v5 >= 1)
      v7 = 1;
    else
      v7 = 2;
    if (v6 >= 1)
      v8 = v5 < 1;
    else
      v8 = v7;
    for (i = 8; i != 2504; i += 4)
    {
      if (fscanf(v4, "%u\n", (char *)this + i) < 1)
        ++v8;
    }
    fclose(v4);
    if (v8)
    {
      return 0;
    }
    else
    {
      result = 1;
      *((_BYTE *)this + 2504) = 1;
    }
  }
  return result;
}

_QWORD *cnrotation::CNRotation::CNRotation(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x3FF0000000000000;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x3FF0000000000000;
  return this;
}

uint64_t cnrotation::CNRotation::CNRotation(uint64_t this, const cnquaternion::CNQuaternion *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  *(_OWORD *)this = 0u;
  *(_OWORD *)(this + 16) = 0u;
  v2 = *(double *)a2;
  v3 = *((double *)a2 + 1);
  v4 = *((double *)a2 + 2);
  v5 = *((double *)a2 + 3);
  v6 = sqrt(v3 * v3 + v2 * v2 + v4 * v4 + v5 * v5);
  if (fabs(v6) >= 2.22044605e-16)
  {
    v8 = v2 / v6;
    v9 = v3 / v6;
    v10 = v4 / v6;
    v7 = v5 / v6;
  }
  else
  {
    v7 = 1.0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
  }
  *(double *)this = v8;
  *(double *)(this + 8) = v9;
  *(double *)(this + 16) = v10;
  *(double *)(this + 24) = v7;
  return this;
}

{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  *(_OWORD *)this = 0u;
  *(_OWORD *)(this + 16) = 0u;
  v2 = *(double *)a2;
  v3 = *((double *)a2 + 1);
  v4 = *((double *)a2 + 2);
  v5 = *((double *)a2 + 3);
  v6 = sqrt(v3 * v3 + v2 * v2 + v4 * v4 + v5 * v5);
  if (fabs(v6) >= 2.22044605e-16)
  {
    v8 = v2 / v6;
    v9 = v3 / v6;
    v10 = v4 / v6;
    v7 = v5 / v6;
  }
  else
  {
    v7 = 1.0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
  }
  *(double *)this = v8;
  *(double *)(this + 8) = v9;
  *(double *)(this + 16) = v10;
  *(double *)(this + 24) = v7;
  return this;
}

double *cnrotation::CNRotation::Normalize@<X0>(double *this@<X0>, double *a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = *this;
  v4 = this[1];
  v5 = this[2];
  v6 = this[3];
  v7 = sqrt(v4 * v4 + v3 * v3 + v5 * v5 + v6 * v6);
  if (fabs(v7) >= 2.22044605e-16)
  {
    v9 = v3 / v7;
    v10 = v4 / v7;
    v11 = v5 / v7;
    v8 = v6 / v7;
  }
  else
  {
    v8 = 1.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
  }
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v8;
  return this;
}

cnrotation::CNRotation *cnrotation::CNRotation::CNRotation(cnrotation::CNRotation *this, double a2, double a3, double a4)
{
  __double2 v7;
  __double2 v8;
  __double2 v9;
  __int128 v10;
  _OWORD v12[2];
  void *v13;
  __int128 v14;
  uint64_t v15;
  double *v16;
  double v17[9];

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (fabs(a3) >= 1.57079633)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0x3FF0000000000000;
    __assert_rtn("CNRotation", "cnrotation.cpp", 90, "false && \"Error: attempted to construct CNRotation from invalid YPR.\"");
  }
  v15 = 0x300000003;
  v13 = &unk_1E25C78E0;
  v14 = xmmword_18D30BB60;
  v16 = v17;
  v7 = __sincos_stret(a2);
  v8 = __sincos_stret(a3);
  v9 = __sincos_stret(a4);
  v17[0] = v7.__cosval * v8.__cosval;
  v17[1] = v7.__cosval * v8.__sinval * v9.__sinval - v7.__sinval * v9.__cosval;
  v17[6] = -v8.__sinval;
  v17[7] = v8.__cosval * v9.__sinval;
  v17[2] = v7.__sinval * v9.__sinval + v7.__cosval * v8.__sinval * v9.__cosval;
  v17[3] = v7.__sinval * v8.__cosval;
  v17[4] = v7.__cosval * v9.__cosval + v7.__sinval * v8.__sinval * v9.__sinval;
  v17[5] = v7.__sinval * v8.__sinval * v9.__cosval - v7.__cosval * v9.__sinval;
  v17[8] = v8.__cosval * v9.__cosval;
  sub_18D159244((uint64_t)v12, (uint64_t)&v13);
  if (v12 != (_OWORD *)this)
  {
    v10 = v12[1];
    *(_OWORD *)this = v12[0];
    *((_OWORD *)this + 1) = v10;
  }
  return this;
}

__n128 cnrotation::CNRotation::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    result = *(__n128 *)(a2 + 16);
    *(__n128 *)(a1 + 16) = result;
  }
  return result;
}

uint64_t cnrotation::CNRotation::CNRotation(uint64_t a1, double *a2, double a3, double a4, double a5, int8x16_t a6)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  long double v13;
  double v14;
  double v15;
  double v16;
  double cosval;
  __double2 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v26;
  unint64_t v27;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v8 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  *(double *)a6.i64 = sqrt(v7 * v7 + v8 * v8 + v9 * v9);
  v10 = fabs(*(double *)a6.i64);
  v11 = *(double *)a6.i64;
  if (v10 > 3.14159265)
  {
    v12.f64[0] = NAN;
    v12.f64[1] = NAN;
    v26 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v12), (int8x16_t)0x400921FB54442D18uLL, a6).i64;
    v27 = a6.i64[0];
    v13 = fmod(*(double *)a6.i64 + v26, 6.28318531);
    a6.i64[0] = v27;
    v11 = v13 - v26;
  }
  if (fabs(v11 * 0.5) >= 2.22044605e-16)
  {
    v18 = __sincos_stret(v11 * 0.5);
    cosval = v18.__cosval;
    v14 = -(v8 * (v18.__sinval / v11));
    v15 = -(v7 * (v18.__sinval / v11));
    v16 = -(v9 * (v18.__sinval / v11));
    v19 = v15 * v15 + v14 * v14 + v16 * v16;
  }
  else
  {
    if (v10 >= 2.22044605e-16)
    {
      v14 = -(v8 * (v11 / *(double *)a6.i64)) * 0.5;
      v15 = -(v7 * (v11 / *(double *)a6.i64)) * 0.5;
      v16 = -(v9 * (v11 / *(double *)a6.i64)) * 0.5;
    }
    else
    {
      v14 = v8 * -0.5;
      v15 = v7 * -0.5;
      v16 = v9 * -0.5;
    }
    v19 = v15 * v15 + v14 * v14 + v16 * v16;
    cosval = sqrt(1.0 - v19);
  }
  v20 = sqrt(v19 + cosval * cosval);
  if (fabs(v20) >= 2.22044605e-16)
  {
    v22 = v14 / v20;
    v23 = v15 / v20;
    v24 = v16 / v20;
    v21 = cosval / v20;
  }
  else
  {
    v21 = 1.0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
  }
  *(double *)a1 = v22;
  *(double *)(a1 + 8) = v23;
  *(double *)(a1 + 16) = v24;
  *(double *)(a1 + 24) = v21;
  return a1;
}

double cnrotation::CNRotation::WrapToPi(cnrotation::CNRotation *this, int8x16_t a2, int8x16_t a3)
{
  float64x2_t v3;
  double v5;

  a3.i64[0] = 0x400921FB54442D18;
  if (fabs(*(double *)a2.i64) > 3.14159265)
  {
    v3.f64[0] = NAN;
    v3.f64[1] = NAN;
    v5 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v3), a3, a2).i64;
    *(double *)a2.i64 = fmod(v5 + *(double *)a2.i64, 6.28318531) - v5;
  }
  return *(double *)a2.i64;
}

__n128 cnrotation::CNRotation::CNRotation(__n128 *this, __n128 *a2)
{
  __n128 result;

  result.n128_u64[0] = 0;
  *this = 0u;
  this[1] = 0u;
  if (this != a2)
  {
    *this = *a2;
    result = a2[1];
    this[1] = result;
  }
  return result;
}

{
  __n128 result;

  result.n128_u64[0] = 0;
  *this = 0u;
  this[1] = 0u;
  if (this != a2)
  {
    *this = *a2;
    result = a2[1];
    this[1] = result;
  }
  return result;
}

double cnrotation::CNRotation::CrossProductMatrix@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
  sub_18D04BE88(a2, 0.0);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 16);
  *(double *)(v5 + 16) = -*(double *)(v4 + 8);
  v6 = *(int *)(a2 + 20);
  v7 = v5 + 8 * v6;
  *(double *)v7 = -*(double *)(v4 + 16);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)v4;
  *(_QWORD *)(v5 + 16 * v6) = *(_QWORD *)(v4 + 8);
  result = -*(double *)v4;
  *(double *)(v5 + 8 * (int)((2 * v6) | 1)) = result;
  return result;
}

double cnrotation::CNRotation::RotationMatrix@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
  v2 = *(double *)this;
  v3 = *((double *)this + 1);
  v4 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  v6 = v3 * v3;
  *(double *)(a2 + 40) = -(v3 * v3 - *(double *)this * *(double *)this) - v4 * v4 + v5 * v5;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v7 = v3 * v5;
  *(double *)(a2 + 48) = -(v4 * v5 - v2 * v3) - (v4 * v5 - v2 * v3);
  *(double *)(a2 + 56) = v3 * v5 + v2 * v4 + v3 * v5 + v2 * v4;
  *(double *)(a2 + 64) = v4 * v5 + v2 * v3 + v4 * v5 + v2 * v3;
  *(double *)(a2 + 72) = v3 * v3 - v2 * v2 - v4 * v4 + v5 * v5;
  v8 = v3 * v4;
  *(double *)(a2 + 80) = v8 - v2 * v5 + v8 - v2 * v5;
  *(double *)(a2 + 88) = -(v7 - v2 * v4) - (v7 - v2 * v4);
  v9 = v8 + v2 * v5 + v8 + v2 * v5;
  result = v4 * v4 - (v6 + v2 * v2) + v5 * v5;
  *(double *)(a2 + 96) = v9;
  *(double *)(a2 + 104) = result;
  return result;
}

__n128 cnrotation::CNRotation::RotationQuaternion@<Q0>(cnrotation::CNRotation *this@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)this;
  v3 = *((_OWORD *)this + 1);
  *a2 = *(_OWORD *)this;
  a2[1] = v3;
  return result;
}

void cnrotation::CNRotation::RotationVector(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int8x16_t v9;
  int8x16_t v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;

  *(_QWORD *)(a2 + 24) = 0x100000003;
  *(_QWORD *)a2 = &unk_1E25C7790;
  *(_OWORD *)(a2 + 8) = xmmword_18D313070;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v5 = *(double *)this;
  v4 = *((double *)this + 1);
  v6 = *((double *)this + 2);
  v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 <= 1.0)
    v8 = v7;
  else
    v8 = 1.0;
  *(double *)v9.i64 = asin(v8);
  if (fabs(*(double *)v9.i64) >= 2.22044605e-16)
  {
    v10.i64[0] = *((_QWORD *)this + 3);
    *(double *)v9.i64 = (*(double *)v9.i64 + *(double *)v9.i64) / v8;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    v14.f64[0] = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v14), v9, v10).i64;
    v11 = -(v5 * v14.f64[0]);
    v12 = -(v4 * v14.f64[0]);
    v13 = -(v6 * v14.f64[0]);
  }
  else
  {
    v11 = v5 * -2.0;
    v12 = v4 * -2.0;
    v13 = v6 * -2.0;
  }
  *(double *)(a2 + 40) = v11;
  *(double *)(a2 + 48) = v12;
  *(double *)(a2 + 56) = v13;
}

_QWORD *sub_18D157E04(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t cnrotation::CNRotation::RotationYawPitchRoll(cnrotation::CNRotation *this, long double *a2, long double *a3, double *a4)
{
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t result;
  double v15;
  uint64_t v16;
  int v17;
  double *v18;

  cnrotation::CNRotation::RotationMatrix(this, (uint64_t)&v16);
  v7 = v17;
  v8 = v18;
  v9 = 2 * v17;
  v10 = -v18[2 * v17];
  v11 = (int)v9 | 1;
  v12 = (int)v9 + 2;
  v13 = sqrt(v18[v12] * v18[v12] + v18[v11] * v18[v11]);
  *a3 = atan2(v10, v13);
  if (fabs(v13) >= 2.22044605e-16)
  {
    *a2 = atan2(v8[v7] / v13, *v8 / v13);
    v15 = atan2(v8[v11] / v13, v8[v12] / v13);
  }
  else
  {
    if (fabs(v10) < 2.22044605e-16)
      return 0xFFFFFFFFLL;
    *a2 = atan2(v8[v11] / v10, v8[v9] / v10);
    v15 = 0.0;
  }
  result = 0;
  *a4 = v15;
  return result;
}

void cnrotation::CNRotation::RotationDerivativeQuaternion(cnrotation::CNRotation *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, uint64_t a5@<X8>)
{
  float64x2_t v6;
  __int128 v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD v22[2];
  void *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v27[16];

  v25 = 0x400000004;
  v23 = &unk_1E25C7FA0;
  v24 = xmmword_18D313080;
  v26 = v27;
  v27[0] = 0;
  v27[5] = 0;
  *(double *)&v27[8] = -a3;
  *(double *)&v27[9] = a2;
  *(double *)&v27[1] = -a4;
  *(double *)&v27[2] = a3;
  v27[10] = 0;
  *(double *)&v27[13] = a3;
  *(double *)&v27[14] = a4;
  *(double *)&v27[3] = -a2;
  *(double *)&v27[4] = a4;
  *(double *)&v27[6] = -a2;
  *(double *)&v27[7] = -a3;
  *(double *)&v27[11] = -a4;
  *(double *)&v27[12] = a2;
  v27[15] = 0;
  v20 = 0x100000004;
  v18 = &unk_1E25C7E50;
  v19 = xmmword_18D313090;
  v21 = v22;
  v7 = *((_OWORD *)this + 1);
  v22[0] = *(_OWORD *)this;
  v6.f64[1] = *((float64_t *)v22 + 1);
  v22[1] = v7;
  v10 = 0x400000004;
  v8 = &unk_1E25C7FA0;
  v9 = xmmword_18D313080;
  v11 = &v12;
  v6.f64[0] = 0.5;
  sub_18D064EF4((uint64_t)&v23, (uint64_t)&v8, v6);
  v15 = 0x100000004;
  v13 = &unk_1E25C7E50;
  v14 = xmmword_18D313090;
  v16 = &v17;
  sub_18D053B2C((uint64_t)&v8, (uint64_t)&v18, (uint64_t)&v13);
  sub_18D159D6C(a5, (uint64_t)&v13);
}

_QWORD *sub_18D158068(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D15807C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

double cnrotation::CNRotation::dqddq@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double result;

  v2 = *(double *)this;
  v3 = *((double *)this + 1);
  v4 = *((double *)this + 2);
  v5 = *((_QWORD *)this + 3);
  *(_QWORD *)(a2 + 24) = 0x300000004;
  *(_QWORD *)a2 = &unk_1E25C7F70;
  *(_OWORD *)(a2 + 8) = xmmword_18D3130A0;
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v6 = -v2;
  *(_QWORD *)(a2 + 80) = v5;
  *(double *)(a2 + 88) = v2;
  result = -v3;
  *(double *)(a2 + 48) = v4;
  *(double *)(a2 + 56) = -v3;
  *(double *)(a2 + 112) = v6;
  *(_QWORD *)(a2 + 120) = v5;
  *(double *)(a2 + 64) = v6;
  *(double *)(a2 + 72) = -v4;
  *(double *)(a2 + 96) = -v3;
  *(double *)(a2 + 104) = v3;
  *(double *)(a2 + 128) = -v4;
  return result;
}

_QWORD *sub_18D1580F4(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

double cnrotation::CNRotation::dRdq1@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  v2 = *(double *)this;
  v3 = *((double *)this + 1);
  v4 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  v6 = v3 * v3;
  v7 = v4 * v4;
  v8 = *(double *)this * v3;
  v9 = v8 * v4;
  v10 = 1.0 - v2 * v2;
  v11 = v10 - v2 * v2;
  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  v12 = v10 + v3 * v3;
  *(double *)(a2 + 40) = (v2 + v2) * (v12 + v4 * v4 - v5 * v5);
  *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v13 = v3 + v3;
  v14 = v2 * v4 * v5 * 4.0;
  v15 = v4 + v4;
  v16 = v8 * v5 * 4.0;
  *(double *)(a2 + 48) = v14 + v13 * v11;
  *(double *)(a2 + 56) = -(v16 - v15 * v11);
  v17 = v2 * -2.0;
  *(double *)(a2 + 64) = -(v14 - v13 * v11);
  *(double *)(a2 + 72) = v17 * (v12 - v7 + v5 * v5);
  *(double *)(a2 + 80) = v9 * -4.0 + v5 * -2.0 * v11;
  *(double *)(a2 + 88) = v16 + v15 * v11;
  result = v17 * (v10 - v6 + v7 + v5 * v5);
  *(double *)(a2 + 96) = v9 * -4.0 + (v5 + v5) * v11;
  *(double *)(a2 + 104) = result;
  return result;
}

double cnrotation::CNRotation::dRdq2@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double result;

  v2 = *(double *)this;
  v3 = *((double *)this + 1);
  v4 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  v6 = v2 * v2;
  v7 = *(double *)this * v3;
  v8 = v7 * v4;
  v9 = v7 * v5;
  v10 = 1.0 - v3 * v3;
  v11 = v10 - v3 * v3;
  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
  v12 = v2 * v2 + v10;
  *(double *)(a2 + 40) = v3 * -2.0 * (v5 * v5 + v12 - v4 * v4);
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v13 = v2 + v2;
  v14 = v3 * v4 * v5 * 4.0;
  v15 = v8 * -4.0;
  *(double *)(a2 + 48) = v14 + v13 * v11;
  *(double *)(a2 + 56) = v15 + (v5 + v5) * v11;
  *(double *)(a2 + 64) = -(v14 - v13 * v11);
  *(double *)(a2 + 72) = (v3 + v3) * (v4 * v4 + v12 - v5 * v5);
  *(double *)(a2 + 80) = v9 * 4.0 + (v4 + v4) * v11;
  *(double *)(a2 + 88) = v15 + v5 * -2.0 * v11;
  result = -(v9 * 4.0 - (v4 + v4) * v11);
  *(double *)(a2 + 96) = result;
  *(double *)(a2 + 104) = v3 * -2.0 * (v5 * v5 + v4 * v4 + v10 - v6);
  return result;
}

double cnrotation::CNRotation::dRdq3@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;

  v2 = *(double *)this;
  v3 = *((double *)this + 1);
  v4 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  v6 = v2 * v2;
  v7 = v3 * v3;
  v8 = *(double *)this * v4;
  v9 = v8 * v5;
  v10 = 1.0 - v4 * v4;
  v11 = v10 - v4 * v4;
  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
  v12 = v2 * v2 + v10;
  *(double *)(a2 + 40) = v4 * -2.0 * (v5 * v5 + v12 - v3 * v3);
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v13 = v3 * v8 * -4.0;
  v14 = v2 + v2;
  v15 = v3 * v4 * v5 * 4.0;
  *(double *)(a2 + 48) = v13 + v5 * -2.0 * v11;
  *(double *)(a2 + 56) = -(v15 - v14 * v11);
  *(double *)(a2 + 64) = v13 + (v5 + v5) * v11;
  *(double *)(a2 + 72) = v4 * -2.0 * (v5 * v5 + v3 * v3 + v10 - v6);
  v16 = v3 + v3;
  *(double *)(a2 + 80) = v9 * 4.0 + v16 * v11;
  *(double *)(a2 + 88) = v15 + v14 * v11;
  result = -(v9 * 4.0 - v16 * v11);
  *(double *)(a2 + 96) = result;
  *(double *)(a2 + 104) = (v4 + v4) * (v7 + v12 - v5 * v5);
  return result;
}

double cnrotation::CNRotation::dRdq4@<D0>(float64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v21;
  double v22;
  double result;

  v2 = this[1].f64[0];
  v3 = this[1].f64[1];
  v4 = v2 * v2;
  v5 = 1.0 - v3 * v3;
  v6 = v5 - v3 * v3;
  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
  v7 = v3 + v3;
  v8 = *this;
  v9 = vmulq_f64(v8, v8).f64[0];
  v10 = this->f64[1];
  v11 = vmuld_lane_f64(v10, *this, 1);
  *(double *)(a2 + 40) = (v3 + v3) * (v2 * v2 + v11 + v5 - v9);
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v12 = v2 * -2.0;
  v13 = v2 + v2;
  v14 = vmulq_n_f64(v8, v3);
  v15 = vmulq_n_f64(v14, v2);
  v14.f64[0] = vmuld_lane_f64(v14.f64[0], v8, 1) * -4.0;
  __asm { FMOV            V20.2D, #-4.0 }
  v21 = (int8x16_t)vmulq_f64(v15, _Q20);
  *(double *)(a2 + 48) = v14.f64[0] + v12 * v6;
  *(double *)(a2 + 56) = *(double *)v21.i64 + (v10 + v10) * v6;
  v22 = v9 + v5;
  *(double *)(a2 + 64) = v14.f64[0] + v13 * v6;
  *(double *)(a2 + 72) = v7 * (v4 + v22 - v11);
  __asm { FMOV            V2.2D, #-2.0 }
  *(float64x2_t *)(a2 + 80) = vmlaq_n_f64((float64x2_t)vextq_s8(v21, v21, 8uLL), vmulq_f64(v8, _Q2), v6);
  result = v7 * (v11 + v22 - v4);
  *(double *)(a2 + 96) = *(double *)&v21.i64[1] + (v8.f64[0] + v8.f64[0]) * v6;
  *(double *)(a2 + 104) = result;
  return result;
}

void cnrotation::CNRotation::drdq(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  int v11;
  int v12;
  double v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  uint64_t v19;
  double *v20;
  _BYTE v21[32];
  double *v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  *(_QWORD *)(a2 + 24) = 0x400000003;
  *(_QWORD *)a2 = &unk_1E25C7940;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_OWORD *)(a2 + 8) = xmmword_18D3130B0;
  sub_18D04BE88(a2, 0.0);
  cnrotation::CNRotation::RotationVector(this, (uint64_t)v21);
  v5 = *v22;
  v4 = v22[1];
  v6 = v22[2];
  v35 = 0x100000003;
  v33 = &unk_1E25C7790;
  v34 = xmmword_18D313070;
  v36 = &v37;
  v30 = 0x100000134;
  v28 = &unk_1E25C7640;
  v29 = xmmword_18D3130C0;
  v31 = &v32;
  v25 = 0x100000003;
  v23 = &unk_1E25C7790;
  v24 = xmmword_18D313070;
  v26 = &v27;
  sub_18D159EE0((uint64_t)v21, (uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v23, "2");
  v8 = v7;
  v9 = v7 * 0.5;
  if (fabs(v9) >= 2.22044605e-16)
  {
    v14 = *((double *)this + 3);
    v15 = sin(v9);
    v16 = v8 / v15;
    v17 = v8 / v15 + fabs(v14) * -2.0;
    v18 = v15 + v15;
    v10 = *(double **)(a2 + 32);
    *v10 = -(v16 - v5 / v8 * (v5 / v8) * v17);
    v19 = *(int *)(a2 + 20);
    v10[(int)v19 + 1] = -(v16 - v4 / v8 * (v4 / v8) * v17);
    v20 = &v10[2 * (int)v19];
    v20[2] = -(v16 - v6 / v8 * (v6 / v8) * v17);
    v10[1] = v5 / v8 * (v4 / v8) * v17;
    v10[2] = v5 / v8 * (v6 / v8) * v17;
    v10[(int)v19 + 2] = v4 / v8 * (v6 / v8) * v17;
    v10[v19] = v10[1];
    v10[2 * v19] = v10[2];
    v20[1] = v10[(int)v19 + 2];
    LODWORD(v19) = 3 * v19;
    v10[(int)v19] = -(v5 / v8 * v18);
    v10[(int)v19 + 1] = -(v4 / v8 * v18);
    v12 = v19 + 2;
    v13 = -(v6 / v8 * v18);
  }
  else
  {
    v10 = *(double **)(a2 + 32);
    *v10 = -2.0;
    v11 = *(_DWORD *)(a2 + 20);
    v10[v11 + 1] = -2.0;
    v10[2 * v11 + 2] = -2.0;
    v10[3 * v11] = -v5;
    v10[3 * v11 + 1] = -v4;
    v12 = 3 * v11 + 2;
    v13 = -v6;
  }
  v10[v12] = v13;
}

void sub_18D15872C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D158740(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void cnrotation::CNRotation::dqdr(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  int v11;
  int v12;
  double v13;
  long double v14;
  long double v15;
  long double v16;
  long double v17;
  double *v18;
  uint64_t v19;
  double *v20;
  _BYTE v21[32];
  double *v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  *(_QWORD *)(a2 + 24) = 0x300000004;
  *(_QWORD *)a2 = &unk_1E25C7F70;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_OWORD *)(a2 + 8) = xmmword_18D3130A0;
  sub_18D04BE88(a2, 0.0);
  cnrotation::CNRotation::RotationVector(this, (uint64_t)v21);
  v5 = *v22;
  v4 = v22[1];
  v6 = v22[2];
  v35 = 0x100000003;
  v33 = &unk_1E25C7790;
  v34 = xmmword_18D313070;
  v36 = &v37;
  v30 = 0x100000134;
  v28 = &unk_1E25C7640;
  v29 = xmmword_18D3130C0;
  v31 = &v32;
  v25 = 0x100000003;
  v23 = &unk_1E25C7790;
  v24 = xmmword_18D313070;
  v26 = &v27;
  sub_18D159EE0((uint64_t)v21, (uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v23, "2");
  v8 = v7;
  v9 = v7 * 0.5;
  if (fabs(v9) >= 2.22044605e-16)
  {
    v13 = *((double *)this + 3);
    v14 = sin(v9);
    v15 = v14 / v8;
    v16 = v14 / v8 + fabs(v13) * -0.5;
    v17 = v14 * 0.5;
    v18 = *(double **)(a2 + 32);
    *v18 = -(v15 - v5 / v8 * (v5 / v8) * v16);
    v19 = *(int *)(a2 + 20);
    v18[(int)v19 + 1] = -(v15 - v4 / v8 * (v4 / v8) * v16);
    v18[2 * (int)v19 + 2] = -(v15 - v6 / v8 * (v6 / v8) * v16);
    v18[1] = v5 / v8 * (v4 / v8) * v16;
    v18[2] = v5 / v8 * (v6 / v8) * v16;
    v18[(int)v19 + 2] = v4 / v8 * (v6 / v8) * v16;
    v18[v19] = v18[1];
    v18[2 * v19] = v18[2];
    v20 = &v18[2 * (int)v19];
    v20[1] = v18[(int)v19 + 2];
    v18[3] = -(v5 / v8 * v17);
    v18[(int)v19 + 3] = -(v4 / v8 * v17);
    v20[3] = -(v6 / v8 * v17);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)v10 = 0xBFE0000000000000;
    v11 = *(_DWORD *)(a2 + 20);
    *(_QWORD *)(v10 + 8 * (v11 + 1)) = 0xBFE0000000000000;
    v12 = 2 * v11;
    *(_QWORD *)(v10 + 8 * (v12 + 2)) = 0xBFE0000000000000;
    *(double *)(v10 + 24) = v5 * -0.25;
    *(double *)(v10 + 8 * (v11 + 3)) = v4 * -0.25;
    *(double *)(v10 + 8 * (v12 + 3)) = v6 * -0.25;
  }
}

void sub_18D1589B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double cnrotation::CNRotation::dqaqdqa@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  double v4;
  double v5;

  *(_QWORD *)(a2 + 24) = 0x400000004;
  *(_QWORD *)a2 = &unk_1E25C7FA0;
  *(_OWORD *)(a2 + 8) = xmmword_18D313080;
  v3 = *((double *)this + 2);
  result = *((double *)this + 3);
  *(double *)(a2 + 40) = result;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v4 = *(double *)this;
  v5 = *((double *)this + 1);
  *(double *)(a2 + 48) = v3;
  *(double *)(a2 + 56) = -v5;
  *(double *)(a2 + 64) = -v4;
  *(double *)(a2 + 72) = -v3;
  *(double *)(a2 + 80) = result;
  *(double *)(a2 + 88) = v4;
  *(double *)(a2 + 96) = -v5;
  *(double *)(a2 + 104) = v5;
  *(double *)(a2 + 112) = -v4;
  *(double *)(a2 + 120) = result;
  *(double *)(a2 + 128) = -v3;
  *(double *)(a2 + 136) = v4;
  *(double *)(a2 + 144) = v5;
  *(double *)(a2 + 152) = v3;
  *(double *)(a2 + 160) = result;
  return result;
}

double cnrotation::CNRotation::dqqbdqb@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;
  double v4;
  double v5;

  *(_QWORD *)(a2 + 24) = 0x400000004;
  *(_QWORD *)a2 = &unk_1E25C7FA0;
  *(_OWORD *)(a2 + 8) = xmmword_18D313080;
  v3 = *((double *)this + 2);
  result = *((double *)this + 3);
  *(double *)(a2 + 40) = result;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v4 = *(double *)this;
  v5 = *((double *)this + 1);
  *(double *)(a2 + 48) = -v3;
  *(double *)(a2 + 56) = v5;
  *(double *)(a2 + 64) = -v4;
  *(double *)(a2 + 72) = v3;
  *(double *)(a2 + 80) = result;
  *(double *)(a2 + 88) = -v4;
  *(double *)(a2 + 96) = -v5;
  *(double *)(a2 + 104) = -v5;
  *(double *)(a2 + 112) = v4;
  *(double *)(a2 + 120) = result;
  *(double *)(a2 + 128) = -v3;
  *(double *)(a2 + 136) = v4;
  *(double *)(a2 + 144) = v5;
  *(double *)(a2 + 152) = v3;
  *(double *)(a2 + 160) = result;
  return result;
}

double cnrotation::CNRotation::dRotateVectordq@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;
  void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;

  *(_QWORD *)(a3 + 24) = 0x400000003;
  *(_QWORD *)a3 = &unk_1E25C7940;
  *(_OWORD *)(a3 + 8) = xmmword_18D3130B0;
  v5 = *a1;
  v4 = a1[1];
  v6 = *(double **)(a2 + 32);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = a1[2];
  v11 = a1[3];
  v12 = v4 * v8 + *a1 * *v6 + v10 * v9;
  v13 = v12 + v12;
  *(double *)(a3 + 40) = v13;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  v14 = v11 * v9 - (v5 * v8 - v4 * v7);
  v15 = v14 + v14;
  v16 = v11 * v8;
  v17 = -(v11 * v8 - v10 * v7) - v5 * v9;
  *(double *)(a3 + 48) = v15;
  *(double *)(a3 + 56) = v17 + v17;
  v18 = v5 * v8 - v4 * v7 - v11 * v9;
  *(double *)(a3 + 64) = v18 + v18;
  *(double *)(a3 + 72) = v13;
  v19 = v10 * v8;
  v20 = v19 + v11 * v7 - v4 * v9 + v19 + v11 * v7 - v4 * v9;
  v21 = v16 - v10 * v7 + v5 * v9 + v16 - v10 * v7 + v5 * v9;
  *(double *)(a3 + 80) = v20;
  *(double *)(a3 + 88) = v21;
  *(double *)(a3 + 96) = v4 * v9 - (v19 + v11 * v7) + v4 * v9 - (v19 + v11 * v7);
  *(double *)(a3 + 104) = v13;
  *(double *)(a3 + 112) = v20;
  *(double *)(a3 + 120) = v21;
  *(double *)(a3 + 128) = v15;
  v30 = 0x400000004;
  v28 = &unk_1E25C7FA0;
  v29 = xmmword_18D313080;
  v31 = &v32;
  v32 = 1.0 - v5 * v5;
  v33 = -(v5 * v4);
  v34 = -(v5 * v10);
  v35 = -(v5 * v11);
  v36 = v33;
  v37 = 1.0 - v4 * v4;
  v38 = -(v4 * v10);
  v39 = -(v4 * v11);
  v40 = v34;
  v41 = v38;
  v42 = 1.0 - v10 * v10;
  v43 = -(v10 * v11);
  v44 = v35;
  v45 = v39;
  v46 = v43;
  v47 = 1.0 - v11 * v11;
  v25 = 0x400000003;
  v23 = &unk_1E25C7940;
  v24 = xmmword_18D3130B0;
  v26 = &v27;
  sub_18D053B2C(a3, (uint64_t)&v28, (uint64_t)&v23);
  *(_QWORD *)&result = sub_18D053AA8(a3, (uint64_t)&v23).n128_u64[0];
  return result;
}

void sub_18D158C34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void cnrotation::CNRotation::dRotateVectordr(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v5[136];
  _BYTE v6[136];

  cnrotation::CNRotation::dRotateVectordq(a1, a2, (uint64_t)v6);
  cnrotation::CNRotation::dqdr((cnrotation::CNRotation *)a1, (uint64_t)v5);
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = &unk_1E25C78E0;
  *(_OWORD *)(a3 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C((uint64_t)v6, (uint64_t)v5, a3);
}

void sub_18D158CC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double cnrotation::CNRotation::Q@<D0>(float64x2_t a1@<Q0>, double a2@<D1>, double a3@<D2>, uint64_t a4@<X8>)
{
  double result;
  void *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[16];

  v8 = 0x400000004;
  v6 = &unk_1E25C7FA0;
  v7 = xmmword_18D313080;
  v9 = v10;
  v10[0] = 0;
  v10[5] = 0;
  *(double *)&v10[8] = -a2;
  v10[9] = *(_QWORD *)&a1.f64[0];
  *(double *)&v10[1] = -a3;
  *(double *)&v10[2] = a2;
  v10[10] = 0;
  *(double *)&v10[13] = a2;
  *(double *)&v10[14] = a3;
  *(double *)&v10[3] = -a1.f64[0];
  *(double *)&v10[4] = a3;
  *(double *)&v10[6] = -a1.f64[0];
  *(double *)&v10[7] = -a2;
  *(double *)&v10[11] = -a3;
  v10[12] = *(_QWORD *)&a1.f64[0];
  v10[15] = 0;
  *(_QWORD *)(a4 + 24) = 0x400000004;
  *(_QWORD *)a4 = &unk_1E25C7FA0;
  *(_OWORD *)(a4 + 8) = xmmword_18D313080;
  *(_QWORD *)(a4 + 32) = a4 + 40;
  a1.f64[0] = 0.5;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D064EF4((uint64_t)&v6, a4, a1);
  return result;
}

uint64_t cnrotation::CNRotation::dQdwx@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)a1 = &unk_1E25C7FA0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D313080;
  result = sub_18D04BE88(a1, 0.0);
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 24 * v4) = 0x3FE0000000000000;
  *(_QWORD *)(v5 + 8 * ((2 * v4) | 1)) = 0x3FE0000000000000;
  *(_QWORD *)(v5 + 8 * (v4 + 2)) = 0xBFE0000000000000;
  *(_QWORD *)(v5 + 24) = 0xBFE0000000000000;
  return result;
}

uint64_t cnrotation::CNRotation::dQdwy@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)a1 = &unk_1E25C7FA0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D313080;
  result = sub_18D04BE88(a1, 0.0);
  v4 = *(int *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 16 * v4) = 0xBFE0000000000000;
  *(_QWORD *)(v5 + 8 * (3 * (int)v4 + 1)) = 0x3FE0000000000000;
  *(_QWORD *)(v5 + 16) = 0x3FE0000000000000;
  *(_QWORD *)(v5 + 8 * ((int)v4 + 3)) = 0xBFE0000000000000;
  return result;
}

uint64_t cnrotation::CNRotation::dQdwz@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)a1 = &unk_1E25C7FA0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D313080;
  result = sub_18D04BE88(a1, 0.0);
  v4 = *(int *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 8 * v4) = 0x3FE0000000000000;
  *(_QWORD *)(v5 + 8) = 0xBFE0000000000000;
  *(_QWORD *)(v5 + 8 * (3 * (int)v4 + 2)) = 0x3FE0000000000000;
  *(_QWORD *)(v5 + 8 * (2 * (int)v4 + 3)) = 0xBFE0000000000000;
  return result;
}

double *cnrotation::Cat@<X0>(double *this@<X0>, const cnrotation::CNRotation *a2@<X1>, double *a3@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v4 = this[1];
  v5 = this[2];
  v6 = this[3];
  v7 = *((double *)a2 + 1);
  v8 = *((double *)a2 + 2);
  v9 = *((double *)a2 + 3);
  v10 = v5 * v7 + v6 * *(double *)a2 - v4 * v8 + *this * v9;
  v11 = v6 * v7 - v5 * *(double *)a2 + *this * v8 + v4 * v9;
  v12 = v4 * *(double *)a2 - *this * v7 + v6 * v8 + v5 * v9;
  v13 = -(v4 * v7) - *this * *(double *)a2 - v5 * v8 + v6 * v9;
  v14 = sqrt(v11 * v11 + v10 * v10 + v12 * v12 + v13 * v13);
  if (fabs(v14) >= 2.22044605e-16)
  {
    v16 = v10 / v14;
    v17 = v11 / v14;
    v18 = v12 / v14;
    v15 = v13 / v14;
  }
  else
  {
    v15 = 1.0;
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
  }
  *a3 = v16;
  a3[1] = v17;
  a3[2] = v18;
  a3[3] = v15;
  return this;
}

float64x2_t *cnrotation::Inv@<X0>(float64x2_t *this@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v3;
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  double v8;
  double v9;

  v3 = *this;
  v5 = this[1].f64[0];
  v4 = this[1].f64[1];
  v6 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v3, v3).f64[1]), v3.f64[0], v3.f64[0]) + v5 * v5 + v4 * v4);
  if (fabs(v6) >= 2.22044605e-16)
  {
    v7 = vdivq_f64(vnegq_f64(v3), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v6, 0));
    v9 = -v5 / v6;
    v8 = v4 / v6;
  }
  else
  {
    v7 = 0uLL;
    v8 = 1.0;
    v9 = 0.0;
  }
  *a2 = v7;
  a2[1].f64[0] = v9;
  a2[1].f64[1] = v8;
  return this;
}

uint64_t cnrotation::Slerp(cnrotation *this, const cnrotation::CNRotation *a2, const cnrotation::CNRotation *a3, double a4, cnrotation::CNRotation *a5)
{
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  char v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;

  if (((_DWORD)a5 - 17) < 0xFFFFFFF0)
    return 0xFFFFFFFFLL;
  v6 = (*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v7 = a4 < 0.0 && ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (a4 >= 0.0)
    v6 = 0;
  v8 = (*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v6;
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    v8 = 1;
  v9 = v8 | v7;
  v5 = 4294967294;
  if ((v9 & 1) == 0 && a4 <= 1.0)
  {
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0x3FF0000000000000;
    if (fabs(a4) <= 0.001)
    {
      if (a3 != this)
      {
        *(_OWORD *)a3 = *(_OWORD *)this;
        v42 = *((_QWORD *)this + 2);
        v38 = *((double *)this + 3);
LABEL_29:
        *((_QWORD *)a3 + 2) = v42;
LABEL_33:
        v5 = 0;
        *((double *)a3 + 3) = v38;
        return v5;
      }
    }
    else
    {
      if (vabdd_f64(1.0, a4) > 0.001)
      {
        v10 = 1.0 - a4;
        v11 = *((double *)this + 1);
        v13 = *((double *)this + 2);
        v12 = *((double *)this + 3);
        v14 = *((double *)a2 + 1);
        v16 = *((double *)a2 + 2);
        v15 = *((double *)a2 + 3);
        v17 = v11 * v14 + *(double *)this * *(double *)a2 + v13 * v16 + v12 * v15;
        if (v17 < 0.0)
          v18 = -1.0;
        else
          v18 = 1.0;
        v19 = v18 * v17 + -1.0;
        v20 = ((_DWORD)a5 - 1);
        v21 = dbl_18D3130D0[v20];
        v22 = dbl_18D313150[v20];
        v23 = dbl_18D3131D0[v20];
        v24 = v23 * (-(v22 - v21 * (a4 * a4)) * v19);
        v25 = v23 * (-(v22 - v21 * (v10 * v10)) * v19);
        v26 = v24 + 1.0;
        v27 = v25 + 1.0;
        if ((_DWORD)a5 != 1)
        {
          v28 = v20;
          do
          {
            v29 = dbl_18D3130D0[v28 - 1];
            v30 = dbl_18D313150[v28 - 1];
            v26 = v19 * -(v30 - v29 * (a4 * a4)) * v26 + 1.0;
            v27 = v19 * -(v30 - v29 * (v10 * v10)) * v27 + 1.0;
            --v28;
          }
          while (v28 * 8);
        }
        v31 = v18 * a4 * v26;
        v32 = v10 * v27;
        v33 = *(double *)a2 * v31 + *(double *)this * v32;
        v34 = v14 * v31 + v11 * v32;
        v35 = v16 * v31 + v13 * v32;
        v36 = v15 * v31 + v12 * v32;
        v37 = sqrt(v34 * v34 + v33 * v33 + v35 * v35 + v36 * v36);
        if (fabs(v37) >= 2.22044605e-16)
        {
          v39 = v33 / v37;
          v40 = v34 / v37;
          v41 = v35 / v37;
          v38 = v36 / v37;
        }
        else
        {
          v38 = 1.0;
          v39 = 0.0;
          v40 = 0.0;
          v41 = 0.0;
        }
        *(double *)a3 = v39;
        *((double *)a3 + 1) = v40;
        *((double *)a3 + 2) = v41;
        goto LABEL_33;
      }
      if (a3 != a2)
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        v42 = *((_QWORD *)a2 + 2);
        v38 = *((double *)a2 + 3);
        goto LABEL_29;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t sub_18D159244(uint64_t a1, uint64_t a2)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  double v15;
  double *v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v35;
  double v36;
  double v37;
  double *v38;
  double v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  void *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  _QWORD v69[2];
  int v70;
  int v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE v74[72];
  void *v75;
  __int128 v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE v79[72];
  void *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  double *v88;
  _BYTE v89[72];

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_DWORD *)(a2 + 8) != 3 || *(_DWORD *)(a2 + 12) != 3)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
    __assert_rtn("CNRotation", "cnrotation.h", 85, "false && \"Error: attempted to construct CNRotation from invalid CNMatrix.\"");
  }
  v56 = 0x300000003;
  v54 = &unk_1E25C78E0;
  v55 = xmmword_18D30BB60;
  v57 = &v58;
  sub_18D073454(a2, (uint64_t)&v54);
  v61 = 0x300000003;
  v59 = &unk_1E25C78E0;
  v60 = xmmword_18D30BB60;
  v62 = &v63;
  sub_18D053B2C((uint64_t)&v54, a2, (uint64_t)&v59);
  v51 = 0x300000003;
  v49 = &unk_1E25C78E0;
  v52 = &v53;
  v50 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v49, 0.0);
  v5 = HIDWORD(v50) + 1;
  v6 = v52;
  *v52 = 0x3FF0000000000000;
  v6[v5] = 0x3FF0000000000000;
  v6[2 * v5] = 0x3FF0000000000000;
  v66 = 0x300000003;
  v64 = &unk_1E25C78E0;
  v65 = xmmword_18D30BB60;
  v67 = (double *)&v68;
  sub_18D0540FC((uint64_t)&v59, (uint64_t)&v49, (uint64_t)&v64);
  v72 = 0x300000003;
  v69[0] = &unk_1E25C78E0;
  v7 = (DWORD1(v65) * v65);
  v8 = (double *)v74;
  v73 = v74;
  v69[1] = v65;
  v70 = v7;
  v71 = v65;
  if ((int)v7 >= 1)
  {
    v9 = v67;
    do
    {
      v10 = *v9++;
      *v8++ = fabs(v10);
      --v7;
    }
    while (v7);
  }
  v77 = 0x300000003;
  v75 = &unk_1E25C78E0;
  v76 = xmmword_18D30BB60;
  v78 = v79;
  v87 = 0x300000003;
  v85 = &unk_1E25C7910;
  v86 = xmmword_18D30BB60;
  v88 = (double *)v89;
  sub_18D04C6B8((uint64_t)v69, (uint64_t)&v75, (uint64_t)&v85);
  v87 = 0x300000003;
  v85 = &unk_1E25C78E0;
  v86 = xmmword_18D30BB60;
  v88 = (double *)v89;
  v82 = 0x300000003;
  v80 = &unk_1E25C7910;
  v81 = xmmword_18D30BB60;
  v83 = &v84;
  sub_18D04C6B8((uint64_t)&v75, (uint64_t)&v85, (uint64_t)&v80);
  if (fabs(*v88) > 0.00001)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
    __assert_rtn("CNRotation", "cnrotation.h", 93, "false && \"Error: attempted to construct CNRotation from non-orthogonal CNMatrix.\"");
  }
  v77 = 0x100000003;
  v75 = &unk_1E25C77C0;
  v76 = xmmword_18D313070;
  v78 = v79;
  v87 = 0x300000003;
  v85 = &unk_1E25C78E0;
  v86 = xmmword_18D30BB60;
  v88 = (double *)v89;
  if (fabs(sub_18D159938(a2, (uint64_t)&v75, (uint64_t)&v85) + -1.0) > 0.00001)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
    __assert_rtn("CNRotation", "cnrotation.h", 101, "false && \"Error: attempted to construct CNRotation from non-special-orthogonal CNMatrix.\"");
  }
  sub_18D159B20((uint64_t)&v85, a2);
  v11 = v86;
  if ((int)v86 <= 0)
  {
    v16 = v88;
    v13 = HIDWORD(v86);
    v14 = HIDWORD(v86) + 1;
  }
  else
  {
    v12 = 0;
    v13 = HIDWORD(v86);
    v14 = HIDWORD(v86) + 1;
    v15 = 0.0;
    v16 = v88;
    do
    {
      v15 = v15 + v88[v12];
      v12 += v14;
      --v11;
    }
    while (v11);
    if (v15 > 0.0)
    {
      v17 = v88[v14];
      v18 = &v88[2 * HIDWORD(v86)];
      v19 = sqrt(*v88 + 1.0 + v17 + v18[2]);
      v20 = (v18[1] - v88[HIDWORD(v86) + 2]) / (v19 + v19);
      v21 = (v88[2] - v88[2 * SHIDWORD(v86)]) / (v19 + v19);
      v22 = (v88[SHIDWORD(v86)] - v88[1]) / (v19 + v19);
      v23 = v19 * 0.5;
      goto LABEL_27;
    }
  }
  v24 = v16[v14];
  v25 = *v16;
  v26 = v13;
  v27 = 2 * v13;
  v28 = v27 + 2;
  if (*v16 <= v24 || (v29 = v16[v28], v25 <= v29))
  {
    v33 = v16[v28];
    if (v24 <= v25 || v24 <= v33)
    {
      v35 = sqrt(v33 + 1.0 - v25 - v24);
      v36 = v16[1];
      v41 = v35 + v35;
      v20 = (v16[2] + v16[(int)v27]) / (v35 + v35);
      v37 = *(double *)((char *)v16 + ((8 * (int)v27) | 8));
      v38 = &v16[v26];
      v21 = (v37 + v38[2]) / (v35 + v35);
      v22 = v35 * 0.5;
      v42 = *v38 - v36;
    }
    else
    {
      v39 = sqrt(v24 + 1.0 - v25 - v33);
      v40 = &v16[v26];
      v41 = v39 + v39;
      v20 = (v16[1] + *v40) / (v39 + v39);
      v21 = v39 * 0.5;
      v22 = (*(double *)((char *)v16 + ((8 * (int)v27) | 8)) + v40[2]) / v41;
      v42 = v16[2] - v16[(int)v27];
    }
    v23 = v42 / v41;
  }
  else
  {
    v30 = sqrt(v25 + 1.0 - v24 - v29);
    v20 = v30 * 0.5;
    v31 = &v16[v26];
    v32 = v30 + v30;
    v21 = (v16[1] + *v31) / (v30 + v30);
    v22 = (v16[2] + v16[(int)v27]) / v32;
    v23 = (*(double *)((char *)v16 + ((8 * (int)v27) | 8)) - v31[2]) / v32;
  }
LABEL_27:
  v43 = sqrt(v21 * v21 + v20 * v20 + v22 * v22 + v23 * v23);
  if (fabs(v43) >= 2.22044605e-16)
  {
    v45 = v20 / v43;
    v46 = v21 / v43;
    v47 = v22 / v43;
    v44 = v23 / v43;
  }
  else
  {
    v44 = 1.0;
    v45 = 0.0;
    v46 = 0.0;
    v47 = 0.0;
  }
  *(double *)a1 = v45;
  *(double *)(a1 + 8) = v46;
  *(double *)(a1 + 16) = v47;
  *(double *)(a1 + 24) = v44;
  return a1;
}

_QWORD *sub_18D1597E0(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1597F4(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D159818(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D159824(uint64_t a1)
{
  char v1[9];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

void sub_18D159878(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = (v7 - 1);
        v9 = *(_QWORD *)(a1 + 32);
        v10 = 1;
        do
        {
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = *(_DWORD *)(v9 + 4 * v10);
            v13 = v10;
            do
            {
              v13 = (int)(v13 * (v4 + v2 - v6)) % (int)v8;
              v14 = *(_DWORD *)(v9 + 4 * v13);
              *(_DWORD *)(v9 + 4 * v13) = v12;
              *v11 = 1;
              v11 = &a2[v13];
              v12 = v14;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v8);
      }
    }
  }
}

double sub_18D159938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __CLPK_doublereal *v12;
  __CLPK_integer v13;
  void *v14;
  size_t v15;
  __CLPK_integer *v16;
  __CLPK_integer *v17;
  char v18;
  double *v19;
  double result;
  int v21;
  int v22;
  char v23;
  __CLPK_integer __info;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  sub_18D053AA8(a3, a1);
  v10 = *(unsigned int *)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 12);
  v12 = *(__CLPK_doublereal **)(a3 + 32);
  v13 = *(_DWORD *)(a3 + 20);
  v14 = *(void **)(a2 + 32);
  __n = *(_DWORD *)(a3 + 12);
  __m = v10;
  __lda = v13;
  if ((int)v10 < 1)
  {
    v18 = -1;
  }
  else
  {
    v15 = 4 * v10;
    v16 = (__CLPK_integer *)operator new[](4 * v10, MEMORY[0x1E0DE4E10]);
    if (v16)
    {
      v17 = v16;
      __info = 0;
      dgetrf_(&__m, &__n, v12, &__lda, v16, &__info);
      memcpy(v14, v17, v15);
      MEMORY[0x18D78B5BC](v17, 0x1000C8052888210);
      v18 = __info;
      if ((__info & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
      v18 = -5;
    }
  }
  LOWORD(__m) = 4;
  LOBYTE(__n) = 5;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Det: input argument %d invalid in getrf.", v5, v6, v7, v8, v9, -v18);
LABEL_8:
  v19 = *(double **)(a3 + 32);
  result = *v19;
  if (v11 >= 2)
  {
    v21 = v11 - 1;
    v22 = v11 + 1;
    do
    {
      result = result * v19[v22];
      v22 += v11 + 1;
      --v21;
    }
    while (v21);
  }
  if ((int)v11 >= 1)
  {
    v23 = 0;
    do
      v23 += v11 != *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4 * (v11 - 1));
    while (v11-- > 1);
    if ((v23 & 1) != 0)
      return -result;
  }
  return result;
}

_QWORD *sub_18D159AB4(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

void sub_18D159AC8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D159AEC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D159AF8(uint64_t a1)
{
  char v1[3];

  sub_18D159878(a1, v1);
}

__n128 sub_18D159B20(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x300000003;
  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 4u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D159C3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D159C50(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D159C74(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D159C80(uint64_t a1)
{
  char v1[3];

  sub_18D0894A0(a1, v1);
}

void sub_18D159CA0(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D159CC4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D159CD0(uint64_t a1)
{
  char v1[16];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D159D1C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D159D40(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D159D4C(uint64_t a1)
{
  char v1[4];

  sub_18D0894A0(a1, v1);
}

double sub_18D159D6C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  if (v2 <= v3)
    v4 = *(_DWORD *)(a2 + 12);
  else
    v4 = *(_DWORD *)(a2 + 8);
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5 || v4 != 4)
  {
    *(_OWORD *)a1 = 0uLL;
    *(_OWORD *)(a1 + 16) = 0uLL;
    __assert_rtn("CNQuaternion", "cnquaternion.h", 60, "false && \"Error: attempted to create a CNQuaternion from an invalid CNMatrix.\"");
  }
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 + 16);
  result = *(double *)(v7 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

void sub_18D159DE8(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D159E0C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D159E18(uint64_t a1)
{
  char v1[12];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D159E64(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D159E88(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D159E94(uint64_t a1)
{
  char v1[12];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D159EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  long double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  uint64_t v28;
  double *v29;
  double v30;
  double *v31;
  double v32;
  uint64_t v33;
  double *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  int v39;
  double v40;
  unsigned int v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double *v49;
  double v50;
  uint64_t v51;
  double *v52;
  double v53;
  double v54;
  double *v55;
  double *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  double *v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  double *v64;
  uint64_t v65;
  double *v66;
  double v67;
  uint64_t v68;
  double *v69;
  double v70;
  double v71;
  double *v72;
  double v73;
  uint64_t v74;
  double *v75;
  double v76;
  double v77;
  uint64_t v78;
  double *v79;
  double v80;
  double v81;
  double *v82;
  long double v83;
  uint64_t v84;
  double *v85;
  double v86;
  unsigned __int8 v87;
  __int16 v88;
  long double v89;
  unsigned __int8 v90;
  __int16 v91;

  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
  {
    v11 = *(unsigned int *)(a1 + 8);
    v12 = *(unsigned int *)(a1 + 12);
    v13 = strcmp(__s1, "2");
    if ((_DWORD)v11 == 1 || (_DWORD)v12 == 1)
    {
      if (v13)
      {
        if (!strcmp(__s1, "1"))
        {
          v31 = *(double **)(a1 + 32);
          v32 = fabs(*v31);
          if (v5 >= 2)
          {
            v33 = v5 - 1;
            v34 = v31 + 1;
            do
            {
              v35 = *v34++;
              v32 = v32 + fabs(v35);
              --v33;
            }
            while (v33);
          }
        }
        else if (!strcmp(__s1, "inf"))
        {
          v49 = *(double **)(a1 + 32);
          v50 = fabs(*v49);
          if (v5 >= 2)
          {
            v51 = v5 - 1;
            v52 = v49 + 1;
            do
            {
              v53 = *v52++;
              v54 = fabs(v53);
              if (v54 > v50)
                v50 = v54;
              --v51;
            }
            while (v51);
          }
        }
        else if (!strcmp(__s1, "-inf"))
        {
          v66 = *(double **)(a1 + 32);
          v67 = fabs(*v66);
          if (v5 >= 2)
          {
            v68 = v5 - 1;
            v69 = v66 + 1;
            do
            {
              v70 = *v69++;
              v71 = fabs(v70);
              if (v71 < v67)
                v67 = v71;
              --v68;
            }
            while (v68);
          }
        }
        else
        {
          v89 = 0.0;
          if (sscanf(__s1, "%lg", &v89) == 1)
          {
            v20 = v89;
            if (fabs(v89) >= 2.22044605e-16)
            {
              v82 = *(double **)(a1 + 32);
              v83 = pow(fabs(*v82), v89);
              if (v5 >= 2)
              {
                v84 = v5 - 1;
                v85 = v82 + 1;
                do
                {
                  v86 = *v85++;
                  v83 = v83 + pow(fabs(v86), v20);
                  --v84;
                }
                while (v84);
              }
              pow(v83, 1.0 / v20);
            }
          }
          else
          {
            v88 = 4;
            v87 = 5;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "Error using Norm: invalid %s-norm.", v15, v16, v17, v18, v19, (char)__s1);
          }
        }
      }
      else
      {
        v26 = *(double **)(a1 + 32);
        v27 = *v26 * *v26;
        if (v5 >= 2)
        {
          v28 = v5 - 1;
          v29 = v26 + 1;
          do
          {
            v30 = *v29++;
            v27 = v27 + v30 * v30;
            --v28;
          }
          while (v28);
        }
      }
    }
    else if (v13)
    {
      if (!strcmp(__s1, "1"))
      {
        if ((_DWORD)v12)
        {
          v36 = 0;
          v37 = *(_QWORD *)(a1 + 32);
          v38 = *(double **)(a2 + 32);
          v39 = 1;
          do
          {
            v40 = fabs(*(double *)(v37 + 8 * (v11 * v36)));
            v38[v36] = v40;
            v41 = v39;
            v42 = v11 - 1;
            if (v11 >= 2)
            {
              do
              {
                v40 = v40 + fabs(*(double *)(v37 + 8 * v41));
                v38[v36] = v40;
                ++v41;
                --v42;
              }
              while (v42);
            }
            ++v36;
            v39 += v11;
          }
          while (v36 != v12);
          v44 = *v38;
          v43 = v38 + 1;
          v45 = v44;
          v46 = v12 - 1;
          do
          {
            v47 = *v43++;
            v48 = v47;
            if (v47 > v45)
              v45 = v48;
            --v46;
          }
          while (v46);
        }
      }
      else if (!strcmp(__s1, "inf"))
      {
        if ((_DWORD)v11)
        {
          v55 = *(double **)(a1 + 32);
          v56 = *(double **)(a2 + 32);
          v57 = v11;
          do
          {
            v58 = *v55++;
            *v56++ = fabs(v58);
            --v57;
          }
          while (v57);
        }
        if (v12 <= 1)
        {
          v60 = *(double **)(a2 + 32);
        }
        else
        {
          v59 = *(_QWORD *)(a1 + 32);
          v60 = *(double **)(a2 + 32);
          v61 = 1;
          v62 = v11;
          do
          {
            v63 = v62;
            v64 = v60;
            v65 = v11;
            if ((_DWORD)v11)
            {
              do
              {
                *v64 = fabs(*(double *)(v59 + 8 * v63)) + *v64;
                ++v64;
                ++v63;
                --v65;
              }
              while (v65);
            }
            ++v61;
            v62 += v11;
          }
          while (v61 != (_DWORD)v12);
        }
        v77 = *v60;
        if (v11 >= 2)
        {
          v78 = v11 - 1;
          v79 = v60 + 1;
          do
          {
            v80 = *v79++;
            v81 = v80;
            if (v80 > v77)
              v77 = v81;
            --v78;
          }
          while (v78);
        }
      }
      else if (!strcmp(__s1, "fro"))
      {
        v72 = *(double **)(a1 + 32);
        v73 = *v72 * *v72;
        if (v5 >= 2)
        {
          v74 = v5 - 1;
          v75 = v72 + 1;
          do
          {
            v76 = *v75++;
            v73 = v73 + v76 * v76;
            --v74;
          }
          while (v74);
        }
      }
      else
      {
        v91 = 4;
        v90 = 5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v91, &v90, "Error using Norm: invalid %s-norm.", v21, v22, v23, v24, v25, (char)__s1);
      }
    }
    else
    {
      sub_18D15A3D4(a1, a2, a3, a4);
    }
  }
}

_QWORD *sub_18D15A33C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D15A350(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D15A374(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D15A380(uint64_t a1)
{
  char v1[308];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

double sub_18D15A3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  __CLPK_integer v10;
  __CLPK_integer v11;
  __CLPK_doublereal *v12;
  __CLPK_doublereal *v13;
  __CLPK_doublereal *v14;
  cnprint::CNPrinter *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  int32x4_t v30;
  __CLPK_integer v32;
  __CLPK_integer __lwork;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __jobvt;
  char __jobu;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  sub_18D053AA8(a2, a1);
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 12);
  v12 = *(__CLPK_doublereal **)(a2 + 32);
  v13 = *(__CLPK_doublereal **)(a4 + 32);
  v14 = *(__CLPK_doublereal **)(a3 + 32);
  __jobu = 78;
  __jobvt = 78;
  __n = v11;
  __m = v10;
  __lda = v10;
  __ldvt = 1;
  __ldu = 1;
  v32 = 0;
  __lwork = v9;
  v15 = (cnprint::CNPrinter *)dgesvd_(&__jobu, &__jobvt, &__m, &__n, v12, &__lda, v13, 0, &__ldu, 0, &__ldvt, v14, &__lwork, &v32);
  if (v32)
  {
    LOWORD(__m) = 4;
    if (v32 < 0)
    {
      LOBYTE(__n) = 5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Svd: input argument %d invalid in gesvd.", v16, v17, v18, v19, v20, -(char)v32);
    }
    else
    {
      LOBYTE(__n) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Svd: gesvd failed to converge on %d superdiagonals.", v16, v17, v18, v19, v20, v32);
    }
  }
  v21 = **(double **)(a3 + 32);
  if (v9 < v21 && cnprint::CNPrinter::GetLogLevel(v15) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Svd optimal workspace size %u is greater than provided workspace size %u; performance may suffer.",
      v22,
      v23,
      v24,
      v25,
      v26,
      v21);
  }
  if (v8 >= v7)
    v27 = v7;
  else
    v27 = v8;
  v28 = *(_DWORD *)(a3 + 24);
  v29 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v29;
  *(_DWORD *)(a3 + 16) = v29 * v28;
  *(_DWORD *)(a3 + 20) = v28;
  v30 = vdupq_lane_s32((int32x2_t)(v27 | 0x100000000), 0);
  v30.i32[1] = 1;
  *(int32x4_t *)(a4 + 8) = v30;
  return *(double *)v30.i64;
}

void cnstatistics::NormalPDF(cnstatistics *this, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 > 0.0)
  {
    v14 = v7;
    v15 = v6;
    v16 = v4;
    v17 = v5;
    if (fabs(a2) != INFINITY && fabs(a3) != INFINITY && fabs(a4) != INFINITY)
    {
      sub_18D15A8FC(&v11, a3, a4);
      v13 = v12;
      if (v12 <= 0.0 || (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        v10 = "Scale parameter is %1%, but must be > 0 !";
        goto LABEL_11;
      }
      v13 = v11;
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        v10 = "Location parameter is %1%, but must be finite!";
      }
      else
      {
        v13 = a2;
        if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          exp(-((a2 - v11) * (a2 - v11)) / (v12 * (v12 + v12)));
          return;
        }
        v10 = "Random variate x is %1%, but must be finite!";
      }
LABEL_11:
      sub_18D15A994("boost::math::pdf(const normal_distribution<%1%>&, %1%)", v10);
    }
  }
}

double cnstatistics::NormalCDF(cnstatistics *this, double a2, double a3, double a4)
{
  BOOL v4;
  double result;
  double v6;
  BOOL v7;
  double v8[2];
  double v9;

  v9 = a2;
  if (a4 < 0.0)
    return NAN;
  if (fabs(a2) == INFINITY)
  {
    if (a2 != a3 && fabs(a4) != INFINITY)
    {
      v4 = a2 <= 0.0;
      goto LABEL_18;
    }
    return NAN;
  }
  if (fabs(a3) == INFINITY)
  {
    if (a2 != a3 && fabs(a4) != INFINITY)
    {
      v4 = a2 <= a3;
LABEL_18:
      result = 0.0;
      if (!v4)
        return 1.0;
      return result;
    }
    return NAN;
  }
  v6 = fabs(a4);
  if (v6 >= 2.22044605e-16)
  {
    result = 0.5;
    if (v6 != INFINITY)
    {
      sub_18D15A8FC(v8, a3, a4);
      sub_18D15A7C8(v8, &v9);
    }
  }
  else
  {
    v7 = a2 < a3;
    result = 1.0;
    if (v7)
      return 0.0;
  }
  return result;
}

void sub_18D15A7C8(double *a1, double *a2)
{
  double v2;
  double v3;
  char *v5;
  double v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 <= 0.0 || (*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_6;
  }
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Location parameter is %1%, but must be finite!";
    goto LABEL_6;
  }
  v6 = *a2;
  if (fabs(*a2) == INFINITY)
    return;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Random variate x is %1%, but must be finite!";
LABEL_6:
    sub_18D15A994("boost::math::cdf(const normal_distribution<%1%>&, %1%)", v5);
  }
  if (fabs(sub_18D15B344(1, (v6 - v3) / (v2 * -1.41421356))) > 1.79769313e308)
    sub_18D15B780("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
}

double *sub_18D15A8FC(double *result, double a2, double a3)
{
  *result = a2;
  result[1] = a3;
  if (a3 <= 0.0 || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    sub_18D15A994("boost::math::normal_distribution<%1%>::normal_distribution", "Scale parameter is %1%, but must be > 0 !");
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    sub_18D15A994("boost::math::normal_distribution<%1%>::normal_distribution", "Location parameter is %1%, but must be finite!");
  return result;
}

void sub_18D15A994(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::logic_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  sub_18D0778AC(&v14, v2);
  sub_18D0778AC(&v13, v3);
  sub_18D0778AC(&v12, "Error in function ");
  sub_18D15AB38(&v14, "%1%", "double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  sub_18D15AC7C(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  sub_18D15AB38(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  sub_18D15AD5C(&v9);
}

void sub_18D15AABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::logic_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::logic_error::~logic_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18D15AB38(std::string *a1, char *__s, const char *a3)
{
  std::string::size_type v6;
  size_t v7;
  int v8;
  uint64_t *v9;
  std::string::size_type size;
  uint64_t result;
  int64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  int64_t v15;
  int v16;
  int64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  int v20;

  v6 = strlen(__s);
  v7 = strlen(a3);
  v8 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v8 >= 0)
    v9 = (uint64_t *)a1;
  else
    v9 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  if (v8 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  result = strlen(__s);
  v12 = result;
  v13 = 0;
  while (!v12)
  {
LABEL_18:
    if (v13 != -1)
    {
      v19 = strlen(a3);
      std::string::replace(a1, v13, v6, a3, v19);
      v13 += v7;
      v20 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
      v9 = v20 >= 0 ? (uint64_t *)a1 : (uint64_t *)a1->__r_.__value_.__r.__words[0];
      size = v20 >= 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
      result = strlen(__s);
      v12 = result;
      if (size >= v13)
        continue;
    }
    return result;
  }
  result = (uint64_t)v9 + v13;
  v14 = (std::string::size_type)v9 + size;
  v15 = size - v13;
  if ((uint64_t)(size - v13) >= v12)
  {
    v16 = *__s;
    do
    {
      v17 = v15 - v12;
      if (v17 == -1)
        break;
      result = (uint64_t)memchr((void *)result, v16, v17 + 1);
      if (!result)
        break;
      v18 = result;
      result = memcmp((const void *)result, __s, v12);
      if (!(_DWORD)result)
      {
        if (v18 == v14)
          return result;
        v13 = v18 - (_QWORD)v9;
        goto LABEL_18;
      }
      result = v18 + 1;
      v15 = v14 - (v18 + 1);
    }
    while (v15 >= v12);
  }
  return result;
}

uint64_t sub_18D15AC7C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  sub_18D076238((uint64_t)v4);
  *(_QWORD *)((char *)&v6[1] + *(_QWORD *)(v5 - 24)) = 17;
  std::ostream::operator<<();
  sub_18D076DE8((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5 = v2;
  v6[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D78B550](&v8);
}

void sub_18D15AD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D076980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18D15AD5C(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D15ADAC((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3240, (void (*)(void *))sub_18D15AE08);
}

void sub_18D15AD98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D15ADAC(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E25C1320;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1350;
  *(_QWORD *)(a1 + 24) = &unk_1E25C1378;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_18D15AE08(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

uint64_t sub_18D15AE48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5018] + 16;
  *(_QWORD *)(v2 + 24) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E25C1320;
  *(_QWORD *)(v2 + 8) = &unk_1E25C1350;
  *(_QWORD *)(v2 + 24) = &unk_1E25C1378;
  sub_18D15B224(v2 + 24, a1 + 24);
  return v2;
}

void sub_18D15AF20(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::logic_error *v2;

  std::logic_error::~logic_error(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_18D15AF64(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D15B164((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3240, (void (*)(void *))sub_18D15AE08);
}

void sub_18D15AFA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D15AFB4(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D15B004(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_18D15B03C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D15B090(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_18D15B0C8(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t *sub_18D15B124(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t sub_18D15B164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5018] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E25C1320;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1350;
  *(_QWORD *)(a1 + 24) = &unk_1E25C1378;
  return a1;
}

void sub_18D15B210(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D15B224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_18D15B2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

double sub_18D15B344(int a1, long double a2)
{
  int v3;
  double v4;
  double v6;
  double v7;
  float64x2_t v8;
  long double v9;
  float64x2_t v10;
  float64x2_t v11;
  long double v12;
  float64x2_t v13;
  double v14;
  long double v15;
  int v16;
  long double v17;
  float64x2_t v18;
  double v19;
  long double v20;
  long double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  int v27;
  double v28;
  long double v29;
  long double v30;
  long double v31;
  double v32;
  int __e;
  int v35;
  int v36;
  double v37;
  double v38;

  v3 = a1;
  if (a2 < 0.0)
  {
    if ((a1 & 1) == 0)
      return -sub_18D15B344(0, -a2);
    v4 = -a2;
    if (a2 >= -0.5)
      return sub_18D15B344(0, v4) + 1.0;
    else
      return 2.0 - sub_18D15B344(1, v4);
  }
  if (a2 < 0.5)
  {
    if (a2 >= 1.0e-10)
    {
      v8 = vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D3136C0, (float64x2_t)xmmword_18D3136B0, a2 * a2 * (a2 * a2)), a2 * a2), vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D3136A0, (float64x2_t)xmmword_18D313690, a2 * a2 * (a2 * a2)), a2 * a2 * (a2 * a2)), (float64x2_t)xmmword_18D3136D0));
      v6 = (vdivq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)).f64[0] + 1.04494858) * a2;
    }
    else
    {
      v6 = 0.0;
      if (a2 != 0.0)
        v6 = a2 * 0.0033791671 + a2 * 1.125;
    }
    goto LABEL_25;
  }
  if (a1)
    v7 = 28.0;
  else
    v7 = 5.92999983;
  v3 = a1 ^ 1;
  if (a2 >= v7)
  {
    v6 = 0.0;
    goto LABEL_25;
  }
  if (a2 < 1.5)
  {
    v9 = a2 + -0.5;
    v10.f64[0] = v9 * v9 * 0.0195049001 + 0.191003696;
    v10.f64[1] = v9 * v9 * (v9 * v9 * 0.00000337511472 + 0.123850975) + 1.42628005;
    v11 = vaddq_f64(vaddq_f64(vmulq_n_f64(v10, v9 * v9), (float64x2_t)xmmword_18D313680), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D313660, (float64x2_t)xmmword_18D313650, v9 * v9), v9 * v9), (float64x2_t)xmmword_18D313670), a2 + -0.5));
    v6 = exp(-(a2 * a2)) / a2 * (vdivq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)).f64[0] + 0.405935764);
    goto LABEL_25;
  }
  if (a2 < 2.5)
  {
    v12 = a2 + -1.5;
    v13 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D313620, (float64x2_t)xmmword_18D313610, v12 * v12), v12 * v12), (float64x2_t)xmmword_18D313640), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D313600, (float64x2_t)xmmword_18D3135F0, v12 * v12), v12 * v12), (float64x2_t)xmmword_18D313630), a2 + -1.5));
    v14 = vdivq_f64(v13, (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1)).f64[0] + 0.506728172;
    v15 = frexp(a2, &__e);
    v16 = __e;
LABEL_23:
    v19 = ldexp(v15, 26);
    v20 = ldexp(floor(v19), v16 - 26);
    v21 = a2 - v20;
    v22 = v20 * v20 - a2 * a2 + (v20 + v20) * (a2 - v20);
    v23 = exp(-(a2 * a2));
    v6 = v14 * (v23 * exp(-(v22 + v21 * v21)) / a2);
    goto LABEL_25;
  }
  if (a2 < 4.5)
  {
    v17 = a2 + -3.5;
    v18 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D3135C0, (float64x2_t)xmmword_18D3135B0, v17 * v17), v17 * v17), (float64x2_t)xmmword_18D3135E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D3135A0, (float64x2_t)xmmword_18D313590, v17 * v17), v17 * v17), (float64x2_t)xmmword_18D3135D0), a2 + -3.5));
    v14 = vdivq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1)).f64[0] + 0.540575027;
    v15 = frexp(a2, &v35);
    v16 = v35;
    goto LABEL_23;
  }
  v38 = 1.0 / a2;
  v24 = sub_18D15BD24(dbl_18D3138E0, &v38);
  v37 = 1.0 / a2;
  v25 = v24 / sub_18D15BD24(dbl_18D313918, &v37) + 0.557909012;
  v26 = frexp(a2, &v36);
  v27 = v36;
  v28 = ldexp(v26, 26);
  v29 = ldexp(floor(v28), v27 - 26);
  v30 = a2 - v29;
  v31 = v29 * v29 - a2 * a2 + (v29 + v29) * (a2 - v29);
  v32 = exp(-(a2 * a2));
  v6 = v32 * exp(-(v31 + v30 * v30)) / a2 * v25;
LABEL_25:
  if (v3)
    return 1.0 - v6;
  else
    return v6;
}

void sub_18D15B780(char *a1, const char *a2)
{
  char *v2;
  const char *v3;
  std::string *v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::runtime_error v7;
  std::string v8;
  std::string v9;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown";
  sub_18D0778AC(&v9, v2);
  sub_18D0778AC(&v8, "Error in function ");
  sub_18D15AB38(&v9, "%1%", "double");
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v9;
  else
    v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  std::string::append(&v8, (const std::string::value_type *)v4, size);
  std::string::append(&v8, ": ", 2uLL);
  v6 = strlen(v3);
  std::string::append(&v8, v3, v6);
  std::runtime_error::runtime_error(&v7, &v8);
  v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
  sub_18D15B8A4(&v7);
}

void sub_18D15B85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_18D15B8A4(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D15B8F4((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3288, (void (*)(void *))sub_18D15B950);
}

void sub_18D15B8E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D15B8F4(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E25C1398;
  *(_QWORD *)(a1 + 8) = &unk_1E25C13C8;
  *(_QWORD *)(a1 + 24) = &unk_1E25C13F0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_18D15B950(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_18D15B990(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5030] + 16;
  *(_QWORD *)(v2 + 24) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E25C1398;
  *(_QWORD *)(v2 + 8) = &unk_1E25C13C8;
  *(_QWORD *)(v2 + 24) = &unk_1E25C13F0;
  sub_18D15B224(v2 + 24, a1 + 24);
  return v2;
}

void sub_18D15BA68(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_18D15BAAC(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D15BC64((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3288, (void (*)(void *))sub_18D15B950);
}

void sub_18D15BAE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D15BAFC(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D15BB4C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_18D15BB84(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D15BBD8(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_18D15BC10(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D15BC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5030] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E25C1398;
  *(_QWORD *)(a1 + 8) = &unk_1E25C13C8;
  *(_QWORD *)(a1 + 24) = &unk_1E25C13F0;
  return a1;
}

void sub_18D15BD10(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_18D15BD24(double *a1, double *a2)
{
  double v2;

  v2 = *a2;
  return v2 * v2 * (v2 * v2 * (a1[4] + a1[6] * (v2 * v2)) + a1[2])
       + *a1
       + *a2 * (v2 * v2 * (a1[3] + a1[5] * (v2 * v2)) + a1[1]);
}

double sub_18D15BD68(float64x2_t *a1, double *a2)
{
  float64x2_t v2;

  v2 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64(a1[2], a1[3], *a2 * *a2), *a2 * *a2), a1[1]), *a2 * *a2), *a1);
  return vmuld_lane_f64(*a2, v2, 1) + v2.f64[0];
}

double cnstatistics::GammaPDF(cnstatistics *this, double a2, double a3, double a4)
{
  double result;
  double v6;
  double v7;
  double v9[2];
  double v10;

  v10 = a2;
  result = NAN;
  if (a3 >= 0.0 && a4 > 0.0)
  {
    v6 = fabs(a3);
    v7 = fabs(a4);
    if (v6 < 2.22044605e-16 && v7 == INFINITY)
    {
      result = 0.0;
      if (fabs(a2) != INFINITY)
        return INFINITY;
    }
    else
    {
      result = 0.0;
      if (a2 >= 0.0 && fabs(a2) != INFINITY)
      {
        if (v6 >= 2.22044605e-16)
        {
          if (v6 != INFINITY && v7 != INFINITY)
          {
            sub_18D15C5B0(v9, a3, a4);
            return sub_18D15BE9C(&v10, v9[0], v9[1]);
          }
        }
        else if (a2 >= 0.0 && a2 <= 0.0)
        {
          return INFINITY;
        }
      }
    }
  }
  return result;
}

double sub_18D15BE9C(double *a1, double a2, double a3)
{
  char *v5;
  double v8;
  double v10;
  double v11;
  double v12;

  v12 = a3;
  if (a3 <= 0.0 || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  v12 = a2;
  if (a2 <= 0.0 || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Shape parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  v8 = *a1;
  if (*a1 < 0.0 || (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Random variate is %1% but must be >= 0 !";
LABEL_11:
    sub_18D15A994("boost::math::pdf(const gamma_distribution<%1%>&, %1%)", v5);
  }
  v10 = 0.0;
  if (v8 != 0.0)
  {
    sub_18D15C63C((uint64_t)&v12, a2, v8 / a3);
    if (fabs(v11) > 1.79769313e308)
      sub_18D15B780("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "numeric overflow");
    return v11 / a3;
  }
  return v10;
}

double cnstatistics::GammaCDF(cnstatistics *this, double a2, double a3, double a4)
{
  double result;
  double v6;
  __n128 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14[2];
  double v15;

  v15 = a2;
  result = NAN;
  if (a3 >= 0.0 && a4 > 0.0)
  {
    if (a2 >= 0.0)
    {
      if (fabs(a2) == INFINITY)
      {
        if (fabs(a3) == INFINITY)
          return NAN;
        result = 1.0;
        if (fabs(a4) == INFINITY)
          return NAN;
      }
      else
      {
        v6 = fabs(a3);
        result = 1.0;
        if (v6 >= 2.22044605e-16)
        {
          result = 0.0;
          if (v6 != INFINITY && fabs(a4) != INFINITY)
          {
            sub_18D15C5B0(v14, a3, a4);
            v7.n128_f64[0] = v14[1];
            return sub_18D15C0B8(&v15, v14[0], v7, v8, v9, v10, v11, v12, v13);
          }
        }
      }
    }
    else
    {
      result = 0.0;
      if (fabs(a3) < 2.22044605e-16)
        return 1.0;
    }
  }
  return result;
}

double sub_18D15C0B8(double *a1, double a2, __n128 a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  char *v10;
  double v13;
  double v15;
  unint64_t v16;

  v16 = a3.n128_u64[0];
  if (a3.n128_f64[0] <= 0.0 || (a3.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
  {
    v10 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  v16 = *(_QWORD *)&a2;
  if (a2 <= 0.0 || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v10 = "Shape parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  v13 = *a1;
  if (*a1 < 0.0 || (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v10 = "Random variate is %1% but must be >= 0 !";
LABEL_11:
    sub_18D15A994("boost::math::cdf(const gamma_distribution<%1%>&, %1%)", v10);
  }
  a3.n128_f64[0] = v13 / a3.n128_f64[0];
  v15 = sub_18D15E71C(1, 0, (uint64_t)&v16, 0, a2, a3, v13, a5, a6, a7, a8, a9);
  if (fabs(v15) > 1.79769313e308)
    sub_18D15B780("gamma_p<%1%>(%1%, %1%)", "numeric overflow");
  return v15;
}

void cnstatistics::InverseGamma(cnstatistics *this, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v16;
  double v17;
  long double v18;
  long double v19;
  double v20;
  double v21;
  __n128 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  double v31;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  unsigned __int8 v43;
  long double v44;
  _QWORD v45[21];

  if (a3 >= 0.0)
  {
    v45[1] = v13;
    v45[2] = v12;
    v45[3] = v11;
    v45[4] = v10;
    v45[5] = v9;
    v45[6] = v8;
    v45[7] = v7;
    v45[8] = v6;
    v45[19] = v4;
    v45[20] = v5;
    v16 = fabs(a3);
    if (v16 != INFINITY
      && a4 > 0.0
      && a2 >= 0.0
      && a2 <= 1.0
      && fabs(a2) >= 2.22044605e-16
      && fabs(a2 + -1.0) >= 2.22044605e-16
      && v16 >= 2.22044605e-16
      && fabs(a4) != INFINITY)
    {
      *(double *)v45 = a3;
      if (a3 <= 0.0 || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        sub_18D15A994("boost::math::gamma_distribution<%1%>::gamma_distribution", "Shape parameter is %1%, but must be > 0 !");
      v17 = log(a3);
      v18 = log(a3 + 1.0) - v17;
      v19 = v17 + v18 * -0.5;
      v20 = sqrt(v18 + v18);
      sub_18D04FA08(a2 + a2);
      v22.n128_u64[0] = exp(v19 - v20 * v21);
      v29 = 500;
      v44 = v22.n128_f64[0];
      while (1)
      {
        *(double *)v45 = a3;
        if (a3 <= 0.0)
          sub_18D15A994("boost::math::cdf(const gamma_distribution<%1%>&, %1%)", "Shape parameter is %1%, but must be > 0 !");
        if (v22.n128_f64[0] < 0.0 || (v22.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
          sub_18D15A994("boost::math::cdf(const gamma_distribution<%1%>&, %1%)", "Random variate is %1% but must be >= 0 !");
        v40 = sub_18D15E71C(1, 0, (uint64_t)v45, 0, a3, v22, v23, v24, v25, v26, v27, v28);
        if (fabs(v40) > 1.79769313e308)
          sub_18D15B780("gamma_p<%1%>(%1%, %1%)", "numeric overflow");
        v31 = a2 - v40;
        if (v44 < 0.0 || (*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          sub_18D15A994("boost::math::pdf(const gamma_distribution<%1%>&, %1%)", "Random variate is %1% but must be >= 0 !");
        v41 = 0.0;
        if (v44 != 0.0)
        {
          sub_18D15C63C((uint64_t)v45, a3, v44);
          v41 = v42;
          if (fabs(v42) > 1.79769313e308)
            sub_18D15B780("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "numeric overflow");
        }
        v33 = v31 / fmax(v41, 2.22507386e-308);
        if (fabs(v33) <= 1.8189894e-12)
          break;
        v23 = v44 * 0.1;
        v24 = v44 * 10.0;
        v34 = v33 + v44;
        v25 = v44 * 10.0;
        if (v44 * 10.0 < v34)
          v34 = v44 * 10.0;
        if (v23 > v34)
          v34 = v44 * 0.1;
        v22.n128_f64[0] = v34;
        v44 = v34;
        if (!--v29)
        {
          LOWORD(v45[0]) = 10;
          v43 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v45, &v43, "Error: InverseGamma failed to converge for p=%lg, a=%lg, b=%lg.", v35, v36, v37, v38, v39, SLOBYTE(a2));
          return;
        }
      }
    }
  }
}

double *sub_18D15C5B0(double *result, double a2, double a3)
{
  char *v4;

  *result = a2;
  result[1] = a3;
  if (a3 <= 0.0 || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  if (a2 <= 0.0 || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = "Shape parameter is %1%, but must be > 0 !";
LABEL_11:
    sub_18D15A994("boost::math::gamma_distribution<%1%>::gamma_distribution", v4);
  }
  return result;
}

void sub_18D15C63C(uint64_t a1, double a2, long double a3)
{
  char *v4;
  double v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  char v19;

  if (a2 <= 0.0)
  {
    v4 = "Argument a to the incomplete gamma function must be greater than zero (got a=%1%).";
LABEL_5:
    sub_18D15CBFC("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", v4);
  }
  if (a3 < 0.0)
  {
    v4 = "Argument x to the incomplete gamma function must be >= 0 (got x=%1%).";
    goto LABEL_5;
  }
  if (a3 == 0.0)
  {
    if (a2 >= 1.0)
      return;
LABEL_19:
    sub_18D15CE80("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "Overflow Error");
  }
  v6 = sub_18D15C790(a1, (uint64_t)&v19, a2, a3);
  if (a3 < 1.0 && a3 * 1.79769313e308 < v6)
    goto LABEL_19;
  if (v6 == 0.0)
  {
    v8 = log(a3);
    v9 = -(a3 - a2 * v8);
    v17 = sub_18D15CFA4((uint64_t)&v19, (uint64_t)&v18, 0, a2, v10, v11, v12, v13, v14, v15, v16);
    if (fabs(v17) > 1.79769313e308)
      sub_18D15CE80("boost::math::lgamma<%1%>(%1%)", "numeric overflow");
    exp(v9 - v17 - v8);
  }
}

double sub_18D15C790(uint64_t a1, uint64_t a2, double a3, long double a4)
{
  double result;
  double v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  long double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  long double v51;
  double v52;
  double v53;
  double v54;
  long double v55;
  double v56;
  double v57;
  double v58;
  int v59;
  uint64_t v60;
  double v61;
  double v62[3];

  v62[0] = a3;
  result = 0.0;
  if (a4 < 1.79769313e308)
  {
    if (a3 < 1.0)
    {
      v9 = -a4;
      if (a4 <= -708.0)
      {
        v22 = a3 * log(a4) - a4;
        v30 = v22 - sub_18D15CFA4(a1, a2, 0, a3, v23, v24, v25, v26, v27, v28, v29);
        return exp(v30);
      }
      else
      {
        v10 = pow(a4, a3);
        v11 = v10 * exp(v9);
        sub_18D15D1E0(a3, v12, v13, v14, v15, v16, v17, v18);
        return v11 / v19;
      }
    }
    v20 = a3 + 6.02468004 + -0.5;
    if (a3 > 150.0)
    {
      v21 = (a4 - a3 + -6.02468004 + 0.5) / v20;
      if (fabs(v21 * v21 * a3) <= 100.0)
      {
        v62[1] = (a4 - a3 + -6.02468004 + 0.5) / v20;
        if (v21 < -1.0)
          sub_18D15CBFC((char *)qword_1EE061420, "log1pmx(x) requires x > -1, but got x = %1%.");
        if (v21 == -1.0)
          sub_18D15CE80((char *)qword_1EE061420, "Overflow Error");
        v56 = fabs(v21);
        if (v56 <= 0.949999988)
        {
          v58 = -v21;
          if (v56 >= 2.22044605e-16)
          {
            v57 = 0.0;
            v59 = 2;
            v60 = 1000000;
            do
            {
              v21 = v21 * v58;
              v61 = v21 / (double)v59;
              v57 = v57 + v61;
              if (fabs(v57 * 2.22044605e-16) >= fabs(v61))
                break;
              ++v59;
              --v60;
            }
            while (v60);
            if ((unint64_t)(1000000 - v60) >= 0xF4240)
            {
              v62[2] = (double)(unint64_t)(1000000 - v60);
              sub_18D15E0E8((char *)qword_1EE061420, "Series evaluation exceeded %1% iterations, giving up now.");
            }
          }
          else
          {
            v57 = v21 * v58 * 0.5;
          }
        }
        else
        {
          v57 = log(v21 + 1.0) - v21;
        }
        v52 = a4 * -5.52468004 / v20 + a3 * v57;
        goto LABEL_36;
      }
    }
    v31 = a4 / v20;
    v32 = log(a4 / v20);
    v33 = v32 * a3;
    v34 = a3 - a4;
    if (a3 - a4 >= v32 * a3)
      v35 = v32 * a3;
    else
      v35 = a3 - a4;
    if (v35 <= -708.0 || (v33 >= v34 ? (v36 = v33) : (v36 = a3 - a4), v36 >= 709.0))
    {
      if (v35 * 0.5 <= -708.0 || (v33 >= v34 ? (v46 = v33) : (v46 = a3 - a4), v46 * 0.5 >= 709.0))
      {
        if (v35 * 0.25 <= -708.0 || (v33 >= v34 ? (v49 = v33) : (v49 = a3 - a4), a3 >= a4 || v49 * 0.25 >= 709.0))
        {
          v54 = v34 / a3;
          if (v34 / a3 > -708.0 && v54 < 709.0)
          {
            v55 = exp(v54);
            v53 = pow(v55 * a4 / v20, a3);
            goto LABEL_37;
          }
          v52 = v34 + v33;
LABEL_36:
          v53 = exp(v52);
LABEL_37:
          v45 = v53;
          return v45
               * (sqrt(v20 / 2.71828183)
                / sub_18D15DF10((uint64_t)&unk_18D3145C8, (uint64_t)&unk_18D314630, v62, v20 / 2.71828183, v38, v39, v40, v41, v42, v43, v44));
        }
        v50 = pow(v31, a3 * 0.25);
        v51 = exp(v34 * 0.25);
        v48 = v50 * v51 * (v50 * v51);
      }
      else
      {
        v47 = pow(v31, a3 * 0.5);
        v48 = v47 * exp(v34 * 0.5);
      }
      v45 = v48 * v48;
    }
    else
    {
      v37 = pow(a4 / v20, a3);
      v45 = exp(v34) * v37;
    }
    return v45
         * (sqrt(v20 / 2.71828183)
          / sub_18D15DF10((uint64_t)&unk_18D3145C8, (uint64_t)&unk_18D314630, v62, v20 / 2.71828183, v38, v39, v40, v41, v42, v43, v44));
  }
  return result;
}

double sub_18D15CB9C(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  char v10;
  char v11;

  v8 = sub_18D15CFA4((uint64_t)&v11, (uint64_t)&v10, 0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(v8) > 1.79769313e308)
    sub_18D15CE80("boost::math::lgamma<%1%>(%1%)", "numeric overflow");
  return v8;
}

void sub_18D15CBFC(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::logic_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  sub_18D0778AC(&v14, v2);
  sub_18D0778AC(&v13, v3);
  sub_18D0778AC(&v12, "Error in function ");
  sub_18D15AB38(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  sub_18D15CDA0(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  sub_18D15AB38(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  sub_18D15AD5C(&v9);
}

void sub_18D15CD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::logic_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::logic_error::~logic_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18D15CDA0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  sub_18D076238((uint64_t)v4);
  *(_QWORD *)((char *)&v6[1] + *(_QWORD *)(v5 - 24)) = 17;
  std::ostream::operator<<();
  sub_18D076DE8((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5 = v2;
  v6[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D78B550](&v8);
}

void sub_18D15CE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D076980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18D15CE80(char *a1, const char *a2)
{
  char *v2;
  const char *v3;
  std::string *v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::runtime_error v7;
  std::string v8;
  std::string v9;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown";
  sub_18D0778AC(&v9, v2);
  sub_18D0778AC(&v8, "Error in function ");
  sub_18D15AB38(&v9, "%1%", "long double");
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v9;
  else
    v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  std::string::append(&v8, (const std::string::value_type *)v4, size);
  std::string::append(&v8, ": ", 2uLL);
  v6 = strlen(v3);
  std::string::append(&v8, v3, v6);
  std::runtime_error::runtime_error(&v7, &v8);
  v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
  sub_18D15B8A4(&v7);
}

void sub_18D15CF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

double sub_18D15CFA4(uint64_t a1, uint64_t a2, int *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  char *v15;
  char *v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  double v35;

  v35 = a4;
  if (a4 <= -0.0000000149011612)
  {
    if (floor(a4) == a4)
    {
      v15 = (char *)qword_1EE061410;
      v16 = "Evaluation of lgamma at a negative integer %1%.";
LABEL_7:
      sub_18D15CBFC(v15, v16);
    }
    v18 = sub_18D15D588(a4);
    v19 = -a4;
    if (v18 < 0.0)
      v20 = 1;
    else
      v20 = -1;
    if (v18 >= 0.0)
      v21 = v18;
    else
      v21 = -v18;
    v22 = 1.14472989 - sub_18D15CFA4(a1, a2, 0, v19);
    v23 = v22 - log(v21);
    if (a3)
      goto LABEL_29;
    return v23;
  }
  if (a4 >= 0.0000000149011612)
  {
    if (a4 >= 15.0)
    {
      if (a4 < 3.0 || a4 >= 100.0)
      {
        v23 = (a4 + -0.5) * (log(a4 + 6.02468004 + -0.5) + -1.0);
        if (v23 * 2.22044605e-16 < 20.0)
        {
          v31 = sub_18D15DF10((uint64_t)&unk_18D3145C8, (uint64_t)&unk_18D314630, &v35, v23 * 2.22044605e-16, 20.0, v25, v26, v27, v28, v29, v30);
          v23 = v23 + log(v31);
        }
        goto LABEL_28;
      }
      sub_18D15D1E0(a4, a5, a6, a7, a8, a9, a10, a11);
      v17 = log(v33);
    }
    else
    {
      sub_18D15D628(a4, a4 + -1.0, a4 + -2.0);
    }
    v23 = v17;
    goto LABEL_28;
  }
  if (a4 == 0.0)
  {
    v15 = (char *)qword_1EE061410;
    v16 = "Evaluation of lgamma at %1%.";
    goto LABEL_7;
  }
  v32 = fabs(a4);
  if (v32 * 4.0 >= 2.22044605e-16)
    v23 = log(fabs(1.0 / a4 + -0.577215665));
  else
    v23 = -log(v32);
  if (a4 < 0.0)
  {
    v20 = -1;
    if (!a3)
      return v23;
    goto LABEL_29;
  }
LABEL_28:
  v20 = 1;
  if (a3)
LABEL_29:
    *a3 = v20;
  return v23;
}

void sub_18D15D1E0(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  double v12;
  double v14;
  double v15;
  double v16;
  char *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v8 = a1;
  v22 = a1;
  v9 = 1.0;
  if (a1 <= 0.0)
  {
    if (floor(a1) == a1)
      sub_18D15CBFC((char *)qword_1EE061418, "Evaluation of tgamma at a negative integer %1%.");
    if (a1 <= -20.0)
    {
      v18 = sub_18D15D1E0(-a1);
      v19 = fabs(v18 * sub_18D15D588(v8));
      if (v19 < 1.0 && v19 * 1.79769313e308 < 3.14159265)
        sub_18D15CE80((char *)qword_1EE061418, "Result of tgamma is too large to represent.");
      return;
    }
    if (a1 < 0.0)
    {
      do
      {
        v9 = v9 / v8;
        v8 = v8 + 1.0;
      }
      while (v8 < 0.0);
    }
    v22 = v8;
  }
  v10 = floor(v8);
  if (v8 < 170.0 && v10 == v8)
  {
    if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v23 = v8;
      sub_18D15D8DC("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    v12 = ceil(v8);
    if (v8 < 0.0)
      v10 = v12;
    if (v10 > 2147483650.0 || v10 < -2147483650.0)
    {
      v23 = v8;
      sub_18D15D8DC("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
  }
  else
  {
    if (v8 >= 0.0000000149011612)
    {
      v21 = v9
          * sub_18D15DF10((uint64_t)&unk_18D3144D8, (uint64_t)&unk_18D314540, &v22, 0.0000000149011612, 170.0, a3, a4, a5, a6, a7, a8);
      v14 = v22;
      v15 = v22 + 6.02468004 + -0.5;
      v16 = v14 * log(v15);
      if (v16 <= 709.0)
      {
        pow(v15, v14 + -0.5);
        exp(v15);
        return;
      }
      if (v16 * 0.5 <= 709.0)
      {
        v20 = pow(v15, v14 * 0.5 + -0.25);
        if (1.79769313e308 / v20 >= v21 * (v20 / exp(v15)))
          return;
        v17 = (char *)qword_1EE061418;
      }
      else
      {
        v17 = (char *)qword_1EE061418;
      }
      sub_18D15CE80(v17, "Result of tgamma is too large to represent.");
    }
    if (v8 < COERCE_DOUBLE(0x4000000000000))
      sub_18D15CE80((char *)qword_1EE061418, "Overflow Error");
  }
}

void sub_18D15D570()
{
  JUMPOUT(0x18D15D40CLL);
}

long double sub_18D15D588(double a1)
{
  char v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  if (a1 < 0.0)
    a1 = -a1;
  v1 = vcvtmd_s64_f64(a1);
  v2 = floor(a1);
  v3 = v2 + 1.0;
  if ((v1 & 1) != 0)
    v4 = v2 + 1.0;
  else
    v4 = v2;
  if (v4 < 0.0)
    __assert_rtn("sinpx", "gamma.hpp", 100, "fl >= 0");
  v5 = a1 - v2;
  v6 = v3 - a1;
  if ((v1 & 1) != 0)
  {
    v5 = v6;
    v7 = -a1;
  }
  else
  {
    v7 = a1;
  }
  if (v5 <= 0.5)
    v8 = v5;
  else
    v8 = 1.0 - v5;
  return v7 * sin(v8 * 3.14159265);
}

void sub_18D15D628(long double a1, double a2, double a3)
{
  double v3;
  double v4;

  v3 = a1;
  if (a1 < 2.22044605e-16)
  {
LABEL_9:
    log(a1);
    return;
  }
  if (a2 == 0.0 || a3 == 0.0)
    return;
  if (a1 <= 2.0)
  {
    if (a1 >= 1.0)
      return;
    goto LABEL_9;
  }
  v4 = 0.0;
  if (a1 >= 3.0)
  {
    do
    {
      v3 = v3 + -1.0;
      v4 = v4 + log(v3);
    }
    while (v3 >= 3.0);
  }
}

void sub_18D15D8DC(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::runtime_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  sub_18D0778AC(&v14, v2);
  sub_18D0778AC(&v13, v3);
  sub_18D0778AC(&v12, "Error in function ");
  sub_18D15AB38(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  sub_18D15CDA0(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  sub_18D15AB38(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&off_1E25C1F90;
  sub_18D15DA7C(&v9);
}

void sub_18D15DA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

void sub_18D15DA7C(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D15DAF4((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3168, (void (*)(void *))sub_18D15DB4C);
}

void sub_18D15DAB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D15DAD0(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D15DAF4(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1E25C11B8;
  *(_QWORD *)(a1 + 8) = &unk_1E25C11E8;
  *(_QWORD *)(a1 + 24) = &unk_1E25C1210;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_18D15DB4C(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_18D15DB8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_1E25C1F90;
  *(_QWORD *)(v2 + 24) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E25C11B8;
  *(_QWORD *)(v2 + 8) = &unk_1E25C11E8;
  *(_QWORD *)(v2 + 24) = &unk_1E25C1210;
  sub_18D15B224(v2 + 24, a1 + 24);
  return v2;
}

void sub_18D15DC5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_18D15DCA0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D15DE58((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3168, (void (*)(void *))sub_18D15DB4C);
}

void sub_18D15DCDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D15DCF0(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D15DD40(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_18D15DD78(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D15DDCC(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_18D15DE04(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D15DE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_1E25C1F90;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E25C11B8;
  *(_QWORD *)(a1 + 8) = &unk_1E25C11E8;
  *(_QWORD *)(a1 + 24) = &unk_1E25C1210;
  return a1;
}

void sub_18D15DEFC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_18D15DF10(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v11;
  unint64_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  uint64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  uint64_t v45;
  uint64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;

  v13 = *a3;
  v14.f64[0] = v13 * v13;
  if (*a3 <= 1.0)
  {
    v37 = *(double *)(a1 + 88);
    v38 = *(double *)(a1 + 72) + v37 * v14.f64[0];
    LODWORD(a11) = *(_DWORD *)(a2 + 44);
    LODWORD(v37) = *(_DWORD *)(a2 + 48);
    LODWORD(a10) = *(_DWORD *)(a2 + 40);
    v39 = (double)*(unint64_t *)&a10 + (double)*(unint64_t *)&v37 * v14.f64[0];
    v40 = (double)*(unint64_t *)&a11;
    LODWORD(v11) = *(_DWORD *)(a2 + 32);
    LODWORD(a11) = *(_DWORD *)(a2 + 36);
    v41.f64[0] = v14.f64[0] * (*(double *)(a1 + 80) + *(double *)(a1 + 96) * v14.f64[0]) + *(double *)(a1 + 64);
    v42.f64[0] = v14.f64[0] * v39 + (double)v11;
    v41.f64[1] = v38;
    v43 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v41, v14.f64[0]), *(float64x2_t *)(a1 + 48)), v14.f64[0]), *(float64x2_t *)(a1 + 32)), v14.f64[0]), *(float64x2_t *)(a1 + 16)), v14.f64[0]), *(float64x2_t *)a1);
    v42.f64[1] = (double)*(unint64_t *)&a11 + v40 * v14.f64[0];
    v44 = vmulq_n_f64(v42, v14.f64[0]);
    v45 = *(_QWORD *)(a2 + 16);
    v42.f64[0] = *(float64_t *)(a2 + 24);
    v46.i64[0] = LODWORD(v42.f64[0]);
    v46.i64[1] = HIDWORD(v42.f64[0]);
    v47 = vmulq_n_f64(vaddq_f64(v44, vcvtq_f64_u64(v46)), v14.f64[0]);
    v46.i64[0] = v45;
    v46.i64[1] = HIDWORD(v45);
    v48 = vmulq_n_f64(vaddq_f64(v47, vcvtq_f64_u64(v46)), v14.f64[0]);
    v42.f64[0] = *(float64_t *)(a2 + 8);
    v46.i64[0] = LODWORD(v42.f64[0]);
    v46.i64[1] = HIDWORD(v42.f64[0]);
    v49 = vmulq_n_f64(vaddq_f64(v48, vcvtq_f64_u64(v46)), v14.f64[0]);
    v46.i64[0] = *(_QWORD *)a2;
    v46.i64[1] = HIDWORD(*(_QWORD *)a2);
    v50 = vaddq_f64(v49, vcvtq_f64_u64(v46));
    return (vmuld_lane_f64(v13, v43, 1) + v43.f64[0]) / (vmuld_lane_f64(v13, v50, 1) + v50.f64[0]);
  }
  else
  {
    LODWORD(v12) = *(_DWORD *)(a2 + 48);
    v14.f64[1] = *a3;
    __asm { FMOV            V0.2D, #1.0 }
    v20 = vdivq_f64(_Q0, v14);
    v21.f64[0] = vmlad_n_f64(*(double *)(a1 + 24), *(double *)(a1 + 8), v20.f64[0]);
    v22 = *(_QWORD *)(a2 + 8);
    v23.i64[0] = *(_QWORD *)a2;
    v23.i64[1] = HIDWORD(*(_QWORD *)a2);
    v24 = vcvtq_f64_u64(v23);
    v23.i64[0] = v22;
    v23.i64[1] = HIDWORD(v22);
    v25 = vmulq_n_f64(vmlaq_n_f64(vcvtq_f64_u64(v23), v24, v20.f64[0]), v20.f64[0]);
    v26 = *(_QWORD *)(a2 + 16);
    v27 = *(_QWORD *)(a2 + 24);
    v23.i64[0] = v26;
    v23.i64[1] = HIDWORD(v26);
    v28 = vmulq_n_f64(vaddq_f64(v25, vcvtq_f64_u64(v23)), v20.f64[0]);
    v23.i64[0] = v27;
    v23.i64[1] = HIDWORD(v27);
    v29 = vmulq_n_f64(vaddq_f64(v28, vcvtq_f64_u64(v23)), v20.f64[0]);
    v30 = *(_QWORD *)(a2 + 32);
    v31 = *(_QWORD *)(a2 + 40);
    v23.i64[0] = v30;
    v23.i64[1] = HIDWORD(v30);
    v32 = vmulq_n_f64(vaddq_f64(v29, vcvtq_f64_u64(v23)), v20.f64[0]);
    v23.i64[0] = v31;
    v23.i64[1] = HIDWORD(v31);
    v21.f64[1] = vmlad_n_f64(*(double *)(a1 + 16), *(double *)a1, v20.f64[0]) * v20.f64[0] + *(double *)(a1 + 32);
    v33 = vaddq_f64(v32, vcvtq_f64_u64(v23));
    v34 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v21, v20.f64[0]), *(float64x2_t *)(a1 + 40)), v20.f64[0]), *(float64x2_t *)(a1 + 56)), v20.f64[0]), *(float64x2_t *)(a1 + 72)), v20.f64[0]), *(float64x2_t *)(a1 + 88));
    v35 = vmulq_f64(v20, v33);
    return vaddq_f64(vmulq_laneq_f64(v34, v20, 1), (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)).f64[0]
         / (v35.f64[1] + v35.f64[0] + (double)v12);
  }
}

void sub_18D15E0E8(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::runtime_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  sub_18D0778AC(&v14, v2);
  sub_18D0778AC(&v13, v3);
  sub_18D0778AC(&v12, "Error in function ");
  sub_18D15AB38(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  sub_18D15CDA0(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  sub_18D15AB38(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&off_1E25C1FB8;
  sub_18D15E288(&v9);
}

void sub_18D15E20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

void sub_18D15E288(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D15E300((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B31B0, (void (*)(void *))sub_18D15E358);
}

void sub_18D15E2C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D15E2DC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D15E300(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1E25C1230;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1260;
  *(_QWORD *)(a1 + 24) = &unk_1E25C1288;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_18D15E358(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_18D15E398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_1E25C1FB8;
  *(_QWORD *)(v2 + 24) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E25C1230;
  *(_QWORD *)(v2 + 8) = &unk_1E25C1260;
  *(_QWORD *)(v2 + 24) = &unk_1E25C1288;
  sub_18D15B224(v2 + 24, a1 + 24);
  return v2;
}

void sub_18D15E468(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_18D15E4AC(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D15E664((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B31B0, (void (*)(void *))sub_18D15E358);
}

void sub_18D15E4E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D15E4FC(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D15E54C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_18D15E584(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D15E5D8(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_18D15E610(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D15E664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_1E25C1FB8;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E25C1230;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1260;
  *(_QWORD *)(a1 + 24) = &unk_1E25C1288;
  return a1;
}

void sub_18D15E708(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_18D15E71C(int a1, int a2, uint64_t a3, double *a4, double a5, __n128 a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v12;
  char *v13;
  char *v14;
  int v18;
  double v20;
  BOOL v21;
  double v22;
  long double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v52;
  double v53;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  char v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  char v86;

  v84 = a6.n128_f64[0];
  v85 = a5;
  if (a5 <= 0.0)
  {
    v13 = (char *)qword_1EE061428;
    v14 = "Argument a to the incomplete gamma function must be greater than zero (got a=%1%).";
LABEL_5:
    sub_18D15CBFC(v13, v14);
  }
  v12 = a6.n128_f64[0];
  if (a6.n128_f64[0] < 0.0)
  {
    v13 = (char *)qword_1EE061428;
    v14 = "Argument x to the incomplete gamma function must be >= 0 (got x=%1%).";
    goto LABEL_5;
  }
  v18 = a2;
  v20 = a5;
  if (a5 < 170.0 || (a1 & 1) != 0)
  {
    if (a4 && (a1 & 1) == 0)
      __assert_rtn("gamma_incomplete_imp", "gamma.hpp", 1221, "(p_derivative == 0) || normalised");
    v26 = a6.n128_f64[0] + 1.0;
    v27 = 30.0;
    if (v12 < 709.0 && a5 < 30.0 && v26 >= a5)
    {
      v30 = floor(a5);
      if (v30 == a5)
      {
        v26 = 0.6;
        if (v12 > 0.6)
        {
          v38 = sub_18D15F174(a5, v12, a3, a4);
          if ((a1 & 1) == 0)
          {
            v39 = v38 * sub_18D15F2D8(v20, v31, v32, v33, v34, v35, v36, v37);
            if ((v18 & 1) != 0)
              goto LABEL_159;
            goto LABEL_156;
          }
          goto LABEL_149;
        }
      }
      else
      {
        v26 = vabdd_f64(v30, a5);
        v27 = 0.5;
        if (v12 > 0.2 && v26 == 0.5)
        {
          v38 = sub_18D15F334(a4, a5, v12);
          if ((a1 & 1) == 0)
            v38 = v38 * sub_18D15F2D8(v20, v31, v32, v33, v34, v35, v36, v37);
          if (!a4 || *a4 != 0.0)
          {
            v18 ^= 1u;
            goto LABEL_150;
          }
          v58 = sub_18D15C790(a3, (uint64_t)&v83, v20, v12);
          *a4 = v58;
          v31 = 1.0;
          if ((a1 & (v38 > 1.0)) != 0)
            v39 = 1.0;
          else
            v39 = v38;
          if ((v18 & 1) != 0)
            goto LABEL_161;
          goto LABEL_154;
        }
      }
    }
    if (a5 > 1.0 && v12 < 0.0000000149011612)
    {
      if ((a1 & 1) != 0)
      {
        sub_18D15D1E0(a5 + 1.0, v26, v27, a8, a9, a10, a11, a12);
        if (fabs(v55) > 1.79769313e308)
          sub_18D15CE80("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
        v32 = pow(v12, v20) / v55;
      }
      else
      {
        v32 = pow(v12, a5) / a5;
      }
      v31 = v84;
      v34 = v85 + 1.0;
      v33 = 1.0 - v85 * v84 / (v85 + 1.0);
      v38 = v32 * v33;
      if (a4)
      {
        v58 = sub_18D15C790(a3, (uint64_t)&v86, v85, v84);
        *a4 = v58;
        if ((a1 & (v38 > 1.0)) != 0)
          v39 = 1.0;
        else
          v39 = v38;
        if ((v18 & 1) == 0)
          goto LABEL_161;
        goto LABEL_154;
      }
LABEL_150:
      if ((a1 & (v38 > 1.0)) != 0)
        v39 = 1.0;
      else
        v39 = v38;
      if (!v18)
        goto LABEL_159;
      goto LABEL_154;
    }
    if (v12 > 1000.0 && (a5 < v12 || fabs(a5 + -50.0) / v12 < 1.0))
    {
      if (a1)
        v56 = sub_18D15C790(a3, (uint64_t)&v83, a5, v12);
      else
        sub_18D15F458(a5, v12);
      if (a4)
        *a4 = v56;
      v31 = v84;
      v38 = v56 / v84;
      if (v56 / v84 != 0.0)
      {
        v69 = sub_18D15FCA8(&v85, &v84);
        goto LABEL_102;
      }
      goto LABEL_149;
    }
    if (v12 < 0.5)
    {
      v57 = -0.4 / log(v12);
      goto LABEL_83;
    }
    if (v12 < 1.1)
    {
      v57 = v12 * 0.75;
LABEL_83:
      if (v57 >= v20)
      {
        v83 = 0.0;
        sub_18D15F594(a3, &v83, v18 ^ 1, a4, v20, v12, v27, a8, a9, a10, a11, a12);
        if (a1)
          v68 = v68 / v83;
        goto LABEL_131;
      }
LABEL_84:
      if (a1)
        v67 = sub_18D15C790(a3, (uint64_t)&v83, v20, v12);
      else
        sub_18D15F458(v20, v12);
      v38 = v67;
      if (a4)
        *a4 = v67;
      if (v67 == 0.0)
        goto LABEL_150;
      if ((v18 & 1) != 0)
      {
        if (a1)
        {
          v73 = v85;
          v74 = 1.0 / v38;
        }
        else
        {
          v77 = sub_18D15F2D8(v85, v31, v32, v33, v34, v35, v36, v37);
          v75 = 0.0;
          v73 = v85;
          if (v38 < 1.0 && v38 * 1.79769313e308 <= v77 || (v74 = v77 / v38, v85 >= 1.0) && 1.79769313e308 / v85 <= v74)
          {
            v76 = 0;
            goto LABEL_129;
          }
        }
        v75 = -(v73 * v74);
        v76 = 1;
      }
      else
      {
        v76 = 0;
        v75 = 0.0;
        v73 = v85;
      }
LABEL_129:
      v78 = sub_18D15F0D4(v73, v84, v75);
      v31 = v85;
      v79 = v78 / v85;
      if ((v76 & 1) == 0)
      {
        v38 = v38 * v79;
        goto LABEL_150;
      }
      v68 = -(v38 * v79);
LABEL_131:
      if ((a1 & (v68 > 1.0)) != 0)
        v39 = 1.0;
      else
        v39 = v68;
      goto LABEL_159;
    }
    if (a5 > 20.0 && a1)
    {
      v71 = (v12 - a5) / a5;
      if (v20 > 200.0)
      {
        if (20.0 / v20 <= v71 * v71)
          goto LABEL_111;
        goto LABEL_136;
      }
      if (fabs(v71) < 0.4)
      {
LABEL_136:
        v38 = sub_18D15F72C(v20, v12);
        if (v12 >= v20)
          v18 ^= 1u;
        if (!a4)
          goto LABEL_150;
        v58 = sub_18D15C790(a3, (uint64_t)&v83, v20, v12);
        *a4 = v58;
        v31 = 1.0;
        if (v38 <= 1.0)
          v39 = v38;
        else
          v39 = 1.0;
        if ((v18 & 1) == 0)
          goto LABEL_161;
LABEL_154:
        v80 = 1.0;
        if ((a1 & 1) != 0)
        {
LABEL_158:
          v39 = v80 - v39;
LABEL_159:
          if (!a4)
            return v39;
          v58 = *a4;
LABEL_161:
          v82 = v84;
          if (v84 < 1.0 && v84 * 1.79769313e308 < v58)
          {
            *a4 = 8.98846567e307;
            v58 = 8.98846567e307;
          }
          *a4 = v58 / v82;
          return v39;
        }
        v20 = v85;
LABEL_156:
        sub_18D15D1E0(v20, v31, v32, v33, v34, v35, v36, v37);
        v80 = v81;
        if (fabs(v81) > 1.79769313e308)
          sub_18D15CE80("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
        goto LABEL_158;
      }
    }
LABEL_111:
    if (v12 + -1.0 / (v12 * 3.0) >= v20)
    {
      if (a1)
        v72 = sub_18D15C790(a3, (uint64_t)&v83, v20, v12);
      else
        sub_18D15F458(v20, v12);
      v38 = v72;
      if (a4)
        *a4 = v72;
      if (v72 != 0.0)
      {
        v69 = sub_18D15F024(v85, v84, 2.22044605e-16);
LABEL_102:
        v70 = v38 * v69;
        v31 = 1.0;
        if ((a1 & (v70 > 1.0)) != 0)
          v39 = 1.0;
        else
          v39 = v70;
        if ((v18 & 1) != 0)
          goto LABEL_159;
        goto LABEL_154;
      }
LABEL_149:
      v18 ^= 1u;
      goto LABEL_150;
    }
    goto LABEL_84;
  }
  v21 = a5 * 4.0 >= a6.n128_f64[0] || a2 == 0;
  if (v21)
  {
    if ((a2 & 1) != 0)
    {
      v22 = sub_18D15E71C(1, 1, a3, a4, a5, a6);
      if (v22 == 0.0)
      {
        v23 = log(1.0 / (v20 * 12.0) + 1.0 + 1.0 / (v20 * 288.0 * v20)) - v20;
        v24 = v23 + (v20 + -0.5) * log(v20) + 0.918938533;
        if (a4)
        {
          v25 = log(v12);
          *a4 = exp(-(v12 - v20 * v25));
        }
        goto LABEL_53;
      }
    }
    else if (a6.n128_f64[0] * 4.0 < a5 || (v22 = sub_18D15E71C(1, 0, a3, a4, a5, a6), v22 == 0.0))
    {
      v53 = log(v12);
      v41 = -(v12 - v20 * v53);
      if (a4)
        *a4 = exp(-(v12 - v20 * v53));
      v52 = sub_18D15F0D4(v20, v12, 0.0) / v20;
      goto LABEL_52;
    }
    v59 = log(v22);
    v24 = v59 + sub_18D15CB9C(v20, v60, v61, v62, v63, v64, v65, v66);
    goto LABEL_53;
  }
  v40 = log(a6.n128_f64[0]);
  v41 = -(v12 - v20 * v40);
  if (a4)
    *a4 = exp(-(v12 - v20 * v40));
  v42 = v12 - v20 + 1.0;
  v43 = v42 + 2.0;
  v44 = 3.56011817e-307;
  if (v42 + 2.0 != 0.0)
    v44 = v42 + 2.0;
  v45 = 0.0;
  v46 = 2;
  v47 = v44;
  do
  {
    v43 = v43 + 2.0;
    v48 = (v20 - (double)(int)v46) * (double)(int)v46;
    v49 = v43 + v48 * v45;
    v50 = 1.0 / v49;
    v47 = v43 + v48 / v47;
    if (v47 == 0.0)
      v47 = 3.56011817e-307;
    v21 = v49 == 0.0;
    v45 = 2.80889552e306;
    if (!v21)
      v45 = v50;
    v44 = v44 * (v45 * v47);
  }
  while (fabs(v45 * v47 + -1.0) > 2.22044605e-16 && v46++ != 0);
  v52 = 1.0 / (v42 + (v20 + -1.0) / v44);
LABEL_52:
  v24 = v41 + log(v52);
LABEL_53:
  if (v24 > 709.0)
    sub_18D15CE80((char *)qword_1EE061428, "Overflow Error");
  return exp(v24);
}

double sub_18D15F024(double a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;

  v3 = a2 - a1 + 1.0;
  v4 = fabs(a3);
  v5 = v3 + 2.0;
  v6 = 3.56011817e-307;
  if (v3 + 2.0 != 0.0)
    v6 = v3 + 2.0;
  v7 = 0.0;
  v8 = 2;
  v9 = v6;
  do
  {
    v5 = v5 + 2.0;
    v10 = (a1 - (double)(int)v8) * (double)(int)v8;
    v11 = v5 + v10 * v7;
    v12 = 1.0 / v11;
    v9 = v5 + v10 / v9;
    if (v9 == 0.0)
      v9 = 3.56011817e-307;
    v13 = v11 == 0.0;
    v7 = 2.80889552e306;
    if (!v13)
      v7 = v12;
    v6 = v6 * (v7 * v9);
    v13 = fabs(v7 * v9 + -1.0) <= v4 || v8++ == 0;
  }
  while (!v13);
  return 1.0 / (v3 + (a1 + -1.0) / v6);
}

double sub_18D15F0D4(double a1, double a2, double a3)
{
  double v4;
  uint64_t v5;

  v4 = 1.0;
  v5 = 1000000;
  do
  {
    a3 = v4 + a3;
    if (fabs(a3 * 2.22044605e-16) >= fabs(v4))
      break;
    a1 = a1 + 1.0;
    v4 = v4 * (a2 / a1);
    --v5;
  }
  while (v5);
  if ((unint64_t)(1000000 - v5) >= 0xF4240)
    sub_18D15E0E8("boost::math::detail::lower_gamma_series<%1%>(%1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  return a3;
}

double sub_18D15F174(long double a1, long double a2, uint64_t a3, double *a4)
{
  double v7;
  double v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v17;
  double v18;

  v7 = exp(-a2);
  v8 = 1.0;
  if (a1 <= 1.0 || v7 == 0.0)
  {
    v11 = v7;
    if (!a4)
      return v11;
  }
  else
  {
    v9 = 2;
    v10 = v7;
    v11 = v7;
    do
    {
      v10 = v10 / v8 * a2;
      v11 = v11 + v10;
      v8 = (double)v9++;
    }
    while (v8 < a1);
    if (!a4)
      return v11;
  }
  v12 = v7 * pow(a2, a1);
  v13 = a1 + -1.0;
  v14 = fabs(a1 + -1.0);
  if ((unint64_t)(*(_QWORD *)&v14 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(_QWORD *)&v14 - 1) >= 0xFFFFFFFFFFFFFLL
    && COERCE__INT64(a1 + -1.0) != 0)
  {
    sub_18D15D8DC("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
  }
  v17 = floor(v13);
  v18 = ceil(v13);
  if (v13 < 0.0)
    v17 = v18;
  if (v17 > 2147483650.0 || v17 < -2147483650.0)
    sub_18D15D8DC("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
  *a4 = v12 / dbl_18D313F30[(int)v17];
  return v11;
}

double sub_18D15F2D8(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double result;

  sub_18D15D1E0(a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(result) > 1.79769313e308)
    sub_18D15CE80("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
  return result;
}

double sub_18D15F334(double *a1, double a2, double a3)
{
  double v6;
  double v7;
  long double v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  double v13;
  double v14;

  v6 = sqrt(a3);
  v7 = sub_18D15B344(1, v6);
  if (fabs(v7) > 1.79769313e308)
    sub_18D15CE80("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  if (a2 <= 1.0 || v7 == 0.0)
  {
    if (!a1)
      return v7;
    v14 = v6 * exp(-a3) / 1.77245385;
LABEL_12:
    *a1 = v14;
    return v7;
  }
  v8 = exp(-a3);
  v9 = sqrt(a3 * 3.14159265);
  v10 = v8 / v9 * a3 + v8 / v9 * a3;
  v11 = 2.0;
  if (a2 > 2.0)
  {
    v12 = 3;
    v13 = v10;
    do
    {
      v13 = v13 / (v11 + -0.5) * a3;
      v10 = v10 + v13;
      v11 = (double)v12++;
    }
    while (v11 < a2);
  }
  v7 = v7 + v10;
  v14 = 0.0;
  if (a1)
    goto LABEL_12;
  return v7;
}

void sub_18D15F458(long double a1, long double a2)
{
  double v4;
  double v5;
  double v6;
  long double v7;
  double v8;
  double v9;
  long double v10;

  if (a2 <= 1.79769313e308)
  {
    v4 = log(a2) * a1;
    if (a2 >= 1.0)
    {
      if (a2 < 708.0 && v4 < 709.0)
      {
        v7 = -a2;
        v8 = pow(a2, a1);
        v6 = v8 * exp(v7);
        goto LABEL_13;
      }
      if (a1 >= 1.0)
      {
        v9 = a2 / a1;
LABEL_11:
        v10 = exp(v9);
        v6 = pow(a2 / v10, a1);
        goto LABEL_13;
      }
    }
    else
    {
      if (v4 > -708.0)
      {
        v5 = pow(a2, a1);
        v6 = v5 * exp(-a2);
        goto LABEL_13;
      }
      v9 = a2 / a1;
      if (a2 / a1 < 709.0)
        goto LABEL_11;
    }
    v6 = exp(v4 - a2);
LABEL_13:
    if (fabs(v6) == INFINITY)
      sub_18D15CE80("boost::math::detail::full_igamma_prefix<%1%>(%1%, %1%)", "Result of incomplete gamma function is too large to represent.");
  }
}

void sub_18D15F594(uint64_t a1, double *a2, int a3, long double *a4, double a5, long double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  double v29;

  v17 = a5;
  v18 = sub_18D15FD50(a5, a6, a7, a8, a9, a10, a11, a12);
  if (fabs(v18) > 1.79769313e308)
    sub_18D15CE80("boost::math::tgamma1pm1<%!%>(%1%)", "numeric overflow");
  if (a2)
    *a2 = (v18 + 1.0) / v17;
  v19 = sub_18D15FFC8(a1, a6, v17);
  v20 = v18 - v19;
  v21 = v19 + 1.0;
  if (a4)
  {
    v22 = *a2;
    *a4 = v21 / (exp(a6) * v22);
  }
  v23 = 0.0;
  if (a3)
    v23 = *a2;
  v24 = -a6;
  v25 = v23 - v20 / v17;
  v26 = 2;
  v27 = -a6;
  v28 = 999990;
  v29 = v25 / v21;
  do
  {
    v17 = v17 + 1.0;
    v29 = v27 / v17 + v29;
    if (fabs(v29 * 2.22044605e-16) >= fabs(v27 / v17))
      break;
    v27 = v27 * v24 / (double)v26++;
    --v28;
  }
  while (v28);
  if ((unint64_t)(999990 - v28) >= 0xF4240)
    sub_18D15E0E8("boost::math::tgamma_small_upper_part<%1%>(%1%, %1%)", "Series evaluation exceeded %1% iterations, giving up now.");
}

double sub_18D15F72C(double a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  const double *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v25;
  double v26;
  double v27;
  int v28;
  uint64_t v29;
  double v30;

  v4 = (a2 - a1) / a1;
  if (v4 < -1.0)
    sub_18D15CBFC((char *)qword_1EE061420, "log1pmx(x) requires x > -1, but got x = %1%.");
  if (v4 == -1.0)
    sub_18D15CE80((char *)qword_1EE061420, "Overflow Error");
  v25 = fabs(v4);
  if (v25 <= 0.949999988)
  {
    v27 = -v4;
    if (v25 >= 2.22044605e-16)
    {
      v26 = 0.0;
      v28 = 2;
      v29 = 1000000;
      do
      {
        v4 = v4 * v27;
        v30 = v4 / (double)v28;
        v26 = v26 + v30;
        if (fabs(v26 * 2.22044605e-16) >= fabs(v30))
          break;
        ++v28;
        --v29;
      }
      while (v29);
      if ((unint64_t)(1000000 - v29) >= 0xF4240)
        sub_18D15E0E8((char *)qword_1EE061420, "Series evaluation exceeded %1% iterations, giving up now.");
    }
    else
    {
      v26 = v4 * v27 * 0.5;
    }
  }
  else
  {
    v26 = log(v4 + 1.0) - v4;
  }
  v5 = -(v26 * a1);
  v6 = sub_18D15B344(1, sqrt(v5));
  if (fabs(v6) > 1.79769313e308)
    sub_18D15CE80("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  v7 = sqrt(v26 * -2.0);
  v8 = exp(-v5);
  if (a2 >= a1)
    v9 = v7;
  else
    v9 = -v7;
  v10.f64[0] = v9 * v9 * -0.000109765822 + -0.000334931611;
  v11.f64[0] = v9 * v9 * 0.000281269515 + 0.0000517179091;
  v12.f64[0] = v9 * v9 * (v9 * v9 * -0.00000229148118 + -0.0000135940482) + 0.0000679778048;
  v13.f64[0] = v9 * v9 * (v9 * v9 * 0.00000801847026 + 0.000000141906292) + -0.000199325705;
  v14.f64[0] = v9 * v9 * 0.00000142309007 + 0.0000110826541;
  v15.f64[0] = v9 * v9 * -0.00000567495283 + -0.000000239650511;
  v16.f64[0] = v9 * v9 * 0.0000000119516286 + 0.000000137863345;
  v17.f64[0] = v9 * v9 * -0.000000057525456 + 0.0000000046471278;
  v10.f64[1] = v9 * v9 * (v9 * v9 * -0.0000183291166 + -0.0000815396937) + 0.00027087821;
  v11.f64[1] = v9 * v9 * (v9 * v9 * 0.0000561168275 + 0.000000790235323) + -0.000592166437;
  v18 = (const double *)&unk_18D313CA0;
  *(_QWORD *)&v19.f64[0] = *(_OWORD *)&vld1q_dup_f64(v18);
  v20 = vaddq_f64(vmulq_n_f64(v11, v9), vaddq_f64(vmulq_n_f64(v10, v9 * v9), (float64x2_t)xmmword_18D313DB0));
  v19.f64[1] = 1.0 / a1 * (1.0 / a1);
  v10.f64[0] = v19.f64[1];
  v10.f64[1] = (v9 * -0.000438297099 + 0.000839498721) * v9 + -0.000652623919;
  v12.f64[1] = v9 * v9 * 0.000011375727 + 0.0000664149822;
  v13.f64[1] = v9 * v9 * -0.0000396836505 + -0.00000146384526;
  v14.f64[1] = v9 * v9 * (v9 * v9 * 0.000000142806142 + 0.00000137219573) + -0.0000127606352;
  v15.f64[1] = v9 * v9 * (v9 * v9 * -0.000000629899214 + 0.0000000342357873) + 0.0000529234488;
  v16.f64[1] = v9 * v9 * (v9 * v9 * 9.14769958e-10 + 0.0000000102618098) + -0.000000176659527;
  v17.f64[1] = v9 * v9 * (v9 * v9 * -0.00000000438203602 + 0.00000000670785354) + 0.000000829671134;
  v21 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v15, v9 * v9), (float64x2_t)xmmword_18D313E20), v9 * v9), (float64x2_t)xmmword_18D313E30), v9), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v14, v9 * v9), (float64x2_t)xmmword_18D313DF0), v9 * v9), (float64x2_t)xmmword_18D313E00), v9 * v9), (float64x2_t)xmmword_18D313E10)), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_f64(v20, v19, v10), v19.f64[1]), vaddq_f64(
                    vmulq_n_f64(vaddq_f64(vmulq_n_f64(v13, v9 * v9), (float64x2_t)xmmword_18D313DE0), v9),
                    vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v12, v9 * v9), (float64x2_t)xmmword_18D313DC0), v9 * v9), (float64x2_t)xmmword_18D313DD0))), v19.f64[1])), v19.f64[1]), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v17, v9 * v9), (float64x2_t)xmmword_18D313E90), v9 * v9), (float64x2_t)xmmword_18D313EA0), v9 * v9), (float64x2_t)xmmword_18D313EB0), v9 * v9), (float64x2_t)xmmword_18D313EC0), v9), vaddq_f64(
              vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v16, v9 * v9), (float64x2_t)xmmword_18D313E40), v9 * v9), (float64x2_t)xmmword_18D313E50), v9 * v9), (float64x2_t)xmmword_18D313E60), v9 * v9), (float64x2_t)xmmword_18D313E70), v9 * v9), (float64x2_t)xmmword_18D313E80)));
  v22 = v8 / sqrt(a1 * 6.28318531) * (1.0 / a1 * v21.f64[0] + v21.f64[1]);
  v23 = -v22;
  if (a2 >= a1)
    v23 = v22;
  return v6 * 0.5 + v23;
}

double sub_18D15FCA8(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;

  v2 = *a1;
  v3 = 0.0;
  v4 = 1.0;
  v5 = 1000000;
  do
  {
    v3 = v4 + v3;
    if (fabs(v3 * 2.22044605e-16) >= fabs(v4))
      break;
    v2 = v2 + -1.0;
    v4 = v4 * (v2 / *a2);
    --v5;
  }
  while (v5);
  if ((unint64_t)(1000000 - v5) >= 0xF4240)
    sub_18D15E0E8("boost::math::tgamma<%1%>(%1%,%1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  return v3;
}

double sub_18D15FD50(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;

  if (a1 >= 0.0)
  {
    v9 = a1 + 1.0;
    a2 = 2.0;
    if (a1 >= 2.0)
      goto LABEL_6;
    sub_18D15D628(v9, a1, a1 + -1.0);
  }
  else
  {
    if (a1 < -0.5)
    {
      v9 = a1 + 1.0;
LABEL_6:
      sub_18D15D1E0(v9, a2, a3, a4, a5, a6, a7, a8);
      if (fabs(v11) > 1.79769313e308)
        sub_18D15CE80("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
      return v11 + -1.0;
    }
    if (a1 < -1.0)
      sub_18D15CBFC("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
    if (a1 == -1.0)
      sub_18D15CE80("log1p<%1%>(%1%)", "Overflow Error");
    v15 = log1pl(a1);
    sub_18D15D628(a1 + 2.0, a1 + 1.0, a1);
    v10 = v13 - v15;
  }
  v12 = sub_18D15FEE0(v10);
  if (fabs(v12) > 1.79769313e308)
    sub_18D15CE80("boost::math::expm1<%1%>(%1%)", "numeric overflow");
  return v12;
}

double sub_18D15FEE0(double result)
{
  double v1;
  float64x2_t v2;
  BOOL v3;

  v1 = fabs(result);
  if (v1 <= 0.5)
  {
    if (v1 >= 2.22044605e-16)
    {
      v2 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D313F00, (float64x2_t)xmmword_18D313EF0, result * result), result * result), (float64x2_t)xmmword_18D313F20), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D313EE0, (float64x2_t)xmmword_18D313ED0, result * result), result * result), (float64x2_t)xmmword_18D313F10), result));
      return result * v2.f64[0] / v2.f64[1] + result * 1.02812767;
    }
  }
  else if (v1 >= 709.0)
  {
    v3 = result <= 0.0;
    result = -1.0;
    if (!v3)
      sub_18D15CE80("boost::math::expm1<%1%>(%1%)", "Overflow Error");
  }
  else
  {
    return exp(result) + -1.0;
  }
  return result;
}

double sub_18D15FFC8(uint64_t a1, long double a2, double a3)
{
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  if (a2 <= 0.0)
  {
    if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      sub_18D15D8DC("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    v9 = ceil(a3);
    v10 = floor(a3);
    if (a3 >= 0.0)
      v9 = v10;
    if (v9 != a3)
      sub_18D15CBFC((char *)qword_1EE061430, "For non-integral exponent, expected base > 0 but got %1%");
    v11 = a3 * 0.5;
    if (COERCE__INT64(fabs(a3 * 0.5)) >= 0x7FF0000000000000)
      sub_18D15D8DC("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    if (v11 >= 0.0)
      v12 = floor(v11);
    else
      v12 = ceil(v11);
    if (v12 != v11)
      return pow(a2, a3) + -1.0;
    return sub_18D15FFC8(a1, -a2, a3);
  }
  else
  {
    v5 = fabs((a2 + -1.0) * a3);
    if (fabs(a3) >= 0.2 && v5 >= 0.5)
      return pow(a2, a3) + -1.0;
    v7 = log(a2) * a3;
    if (v7 >= 0.5)
    {
      if (v7 > 709.0)
        sub_18D15CE80((char *)qword_1EE061430, "Overflow Error");
      return pow(a2, a3) + -1.0;
    }
    v8 = sub_18D15FEE0(v7);
    if (fabs(v8) > 1.79769313e308)
      sub_18D15CE80("boost::math::expm1<%1%>(%1%)", "numeric overflow");
  }
  return v8;
}

void cnstatistics::Chi2PDF(cnstatistics *this, double a2, double a3)
{
  double v3;
  char *v4;
  double v5;
  char v6;

  if (a3 < 0.0)
    return;
  if (a2 < 0.0)
    return;
  if (fabs(a2) == INFINITY)
    return;
  v3 = fabs(a3);
  if (v3 < 2.22044605e-16 || v3 == INFINITY)
    return;
  if (a3 <= 0.0 || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    sub_18D15A994("boost::math::chi_squared_distribution<%1%>::chi_squared_distribution", "Degrees of freedom argument is %1%, but must be > 0 !");
  if (a3 <= 0.0 || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = "Degrees of freedom argument is %1%, but must be > 0 !";
    goto LABEL_16;
  }
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v4 = "Chi Square parameter was %1%, but must be > 0 !";
LABEL_16:
    sub_18D15A994("boost::math::pdf(const chi_squared_distribution<%1%>&, %1%)", v4);
  }
  if (a2 == 0.0)
  {
    if (a3 < 2.0)
      sub_18D15B780("boost::math::pdf(const chi_squared_distribution<%1%>&, %1%)", "Overflow Error");
  }
  else
  {
    sub_18D15C63C((uint64_t)&v6, a3 * 0.5, a2 * 0.5);
    if (fabs(v5) > 1.79769313e308)
      sub_18D15B780("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "numeric overflow");
  }
}

double cnstatistics::Chi2CDF(cnstatistics *this, double a2, __n128 a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9;
  double v11;
  BOOL v12;
  double v13;
  double v14;
  char *v15;
  char v17;

  v9 = NAN;
  if (a3.n128_f64[0] >= 0.0)
  {
    if (a2 >= 0.0 || (v9 = 0.0, a3.n128_f64[0] <= 0.0))
    {
      v11 = fabs(a2);
      v12 = v11 == INFINITY;
      if (v11 == INFINITY && a3.n128_f64[0] > 0.0)
      {
        v13 = fabs(a3.n128_f64[0]);
        v9 = 1.0;
        if (v13 != INFINITY)
          return v9;
      }
      else
      {
        v13 = fabs(a3.n128_f64[0]);
        v9 = 1.0;
      }
      if (v13 >= 2.22044605e-16)
      {
        if (fabs(a3.n128_f64[0]) == INFINITY)
        {
          if (v12 && a2 > 0.0)
            return NAN;
          else
            return 0.0;
        }
        if (a3.n128_f64[0] <= 0.0 || (a3.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
          sub_18D15A994("boost::math::chi_squared_distribution<%1%>::chi_squared_distribution", "Degrees of freedom argument is %1%, but must be > 0 !");
        if (a3.n128_f64[0] <= 0.0 || (a3.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          v15 = "Degrees of freedom argument is %1%, but must be > 0 !";
        }
        else
        {
          if (a2 >= 0.0 && (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            v14 = a3.n128_f64[0] * 0.5;
            a3.n128_f64[0] = a2 * 0.5;
            v9 = sub_18D15E71C(1, 0, (uint64_t)&v17, 0, v14, a3, 0.5, a5, a6, a7, a8, a9);
            if (fabs(v9) > 1.79769313e308)
              sub_18D15B780("gamma_p<%1%>(%1%, %1%)", "numeric overflow");
            return v9;
          }
          v15 = "Chi Square parameter was %1%, but must be > 0 !";
        }
        sub_18D15A994("boost::math::cdf(const chi_squared_distribution<%1%>&, %1%)", v15);
      }
    }
  }
  return v9;
}

void cnstatistics::InverseChi2(cnstatistics *this, double a2, double a3)
{
  double v4;

  if (a3 >= 0.0 && a2 >= 0.0 && a2 <= 1.0 && fabs(a2) >= 2.22044605e-16)
  {
    v4 = fabs(a3);
    if (fabs(a2 + -1.0) >= 2.22044605e-16 && v4 != INFINITY && v4 >= 2.22044605e-16)
      cnstatistics::InverseGamma(this, a2, a3 * 0.5, 2.0);
  }
}

uint64_t cntransformation::CNRigidTransformation::CNRigidTransformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v6;
  __int128 v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v10[80];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 32) = &unk_1E25C7790;
  v4 = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0x100000003;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 40) = xmmword_18D313070;
  sub_18D04BE88(a1 + 32, 0.0);
  *(_QWORD *)(a1 + 96) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 120) = 0x300000003;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 104) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 96, 0.0);
  *(_QWORD *)(a1 + 208) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 232) = 0x300000003;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 216) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 208, 0.0);
  *(_QWORD *)(a1 + 344) = 0x300000003;
  *(_QWORD *)(a1 + 320) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_OWORD *)(a1 + 328) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 320, 0.0);
  *(_BYTE *)(a1 + 432) = 0;
  v8 = 0x300000003;
  v6 = &unk_1E25C78E0;
  v9 = v10;
  v7 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v6, 0.0);
  sub_18D053AA8(a1 + 96, (uint64_t)&v6);
  v8 = 0x300000003;
  v6 = &unk_1E25C78E0;
  v9 = v10;
  v7 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v6, 0.0);
  sub_18D053AA8(a1 + 208, (uint64_t)&v6);
  v8 = 0x300000003;
  v6 = &unk_1E25C78E0;
  v9 = v10;
  v7 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v6, 0.0);
  sub_18D053AA8(a1 + 320, (uint64_t)&v6);
  *(_BYTE *)(a1 + 432) = 0;
  if ((cntransformation::CNRigidTransformation::SetTransformationMatrix(a1, a2) & 1) == 0)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
    v8 = 0x100000003;
    v6 = &unk_1E25C7790;
    v9 = v10;
    v7 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v6, 0.0);
    sub_18D053AA8(v4, (uint64_t)&v6);
    __assert_rtn("CNRigidTransformation", "cnrigidtransformation.cpp", 61, "false && \"Error: attempted to construct CNRigidTransformation from invalid transformation matrix.\"");
  }
  return a1;
}

void sub_18D160888(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *v4 = &unk_1E25C5E70;
  *v3 = &unk_1E25C5E70;
  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t cntransformation::CNRigidTransformation::SetTransformationMatrix(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  uint64_t *v25;
  uint64_t v26;

  if (*(_DWORD *)(a2 + 8) == 4 && *(_DWORD *)(a2 + 12) == 4)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_1ECF22DC8);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF22DC8))
    {
      v20 = 0x300000001;
      v18 = &unk_1E25C6C50;
      v21 = &v22;
      v19 = xmmword_18D314670;
      v22 = 0x100000000;
      v23 = 2;
      sub_18D16169C((uint64_t)&v18, (uint64_t)&unk_1ECF22E88);
      __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF22E88, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF22DC8);
    }
    sub_18D161D4C(a2, (uint64_t)&unk_1ECF22E88, (uint64_t)&unk_1ECF22E88, (uint64_t)&v18);
    sub_18D159244((uint64_t)v24, (uint64_t)&v18);
    if (v24 != (_BYTE *)a1)
    {
      v5 = *(_OWORD *)&v24[16];
      *(_OWORD *)a1 = *(_OWORD *)v24;
      *(_OWORD *)(a1 + 16) = v5;
    }
    v6 = dword_1ECF22E98;
    v20 = 0x100000003;
    v18 = &unk_1E25C7790;
    *(_QWORD *)&v19 = dword_1ECF22E98 | 0x100000000;
    DWORD2(v19) = dword_1ECF22E98;
    HIDWORD(v19) = dword_1ECF22E98;
    v21 = &v22;
    if (dword_1ECF22E98)
    {
      v7 = 0;
      v8 = qword_1ECF22EA8;
      v9 = 3 * *(_DWORD *)(a2 + 20);
      v10 = *(_QWORD *)(a2 + 32);
      do
      {
        *(&v22 + v7) = *(_QWORD *)(v10 + 8 * (*(_DWORD *)(v8 + 4 * (int)v7) + v9));
        ++v7;
      }
      while (v6 != (_DWORD)v7);
    }
    sub_18D053AA8(a1 + 32, (uint64_t)&v18);
    *(_QWORD *)&v24[24] = 0x100000003;
    *(_QWORD *)v24 = &unk_1E25C7790;
    *(_OWORD *)&v24[8] = xmmword_18D313070;
    v25 = &v26;
    v20 = 0x100000134;
    v18 = &unk_1E25C7640;
    v19 = xmmword_18D3130C0;
    v21 = &v22;
    v15 = 0x100000003;
    v13 = &unk_1E25C7790;
    v14 = xmmword_18D313070;
    v16 = &v17;
    sub_18D159EE0(a1 + 32, (uint64_t)v24, (uint64_t)&v18, (uint64_t)&v13, "2");
    if ((v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      return 1;
    sub_18D05F140(a1);
  }
  return 0;
}

void sub_18D160B20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF22DC8);
  _Unwind_Resume(a1);
}

uint64_t cntransformation::CNRigidTransformation::CNRigidTransformation(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE v18[2464];
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 32) = &unk_1E25C7790;
  v6 = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0x100000003;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 40) = xmmword_18D313070;
  sub_18D04BE88(a1 + 32, 0.0);
  *(_QWORD *)(a1 + 96) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 120) = 0x300000003;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 104) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 96, 0.0);
  *(_QWORD *)(a1 + 208) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 232) = 0x300000003;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 216) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 208, 0.0);
  *(_QWORD *)(a1 + 344) = 0x300000003;
  *(_QWORD *)(a1 + 320) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_OWORD *)(a1 + 328) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 320, 0.0);
  *(_BYTE *)(a1 + 432) = 0;
  v16 = 0x300000003;
  v14 = &unk_1E25C78E0;
  v17 = v18;
  v15 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  sub_18D053AA8(a1 + 96, (uint64_t)&v14);
  v16 = 0x300000003;
  v14 = &unk_1E25C78E0;
  v17 = v18;
  v15 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  sub_18D053AA8(a1 + 208, (uint64_t)&v14);
  v16 = 0x300000003;
  v14 = &unk_1E25C78E0;
  v17 = v18;
  v15 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  sub_18D053AA8(a1 + 320, (uint64_t)&v14);
  *(_BYTE *)(a1 + 432) = 0;
  v21 = 0x100000003;
  v19 = &unk_1E25C7790;
  v20 = xmmword_18D313070;
  v22 = &v23;
  v16 = 0x100000134;
  v14 = &unk_1E25C7640;
  v15 = xmmword_18D3130C0;
  v17 = v18;
  v11 = 0x100000003;
  v9 = &unk_1E25C7790;
  v10 = xmmword_18D313070;
  v12 = &v13;
  sub_18D159EE0(a3, (uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v9, "2");
  if ((v7 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
    v16 = 0x100000003;
    v14 = &unk_1E25C7790;
    v17 = v18;
    v15 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v14, 0.0);
    sub_18D053AA8(v6, (uint64_t)&v14);
    __assert_rtn("CNRigidTransformation", "cnrigidtransformation.cpp", 95, "false && \"Error: attempted to construct CNRigidTransformation with invalid position vector.\"");
  }
  sub_18D053AA8(v6, a3);
  if ((_OWORD *)a1 != a2)
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

void sub_18D160E48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *v4 = &unk_1E25C5E70;
  *v3 = &unk_1E25C5E70;
  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t cntransformation::CNRigidTransformation::CNRigidTransformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v8;
  __int128 v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v12[80];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 32) = &unk_1E25C7790;
  v6 = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0x100000003;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 40) = xmmword_18D313070;
  sub_18D04BE88(a1 + 32, 0.0);
  *(_QWORD *)(a1 + 96) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 120) = 0x300000003;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 104) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 96, 0.0);
  *(_QWORD *)(a1 + 208) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 232) = 0x300000003;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 216) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 208, 0.0);
  *(_QWORD *)(a1 + 344) = 0x300000003;
  *(_QWORD *)(a1 + 320) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_OWORD *)(a1 + 328) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 320, 0.0);
  *(_BYTE *)(a1 + 432) = 0;
  if (!cntransformation::CNRigidTransformation::SetTransformationMatrix(a1, a2)
    || !cntransformation::CNRigidTransformation::SetCovarianceMatrix(a1, a3))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
    v10 = 0x100000003;
    v8 = &unk_1E25C7790;
    v11 = v12;
    v9 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v8, 0.0);
    sub_18D053AA8(v6, (uint64_t)&v8);
    v10 = 0x300000003;
    v8 = &unk_1E25C78E0;
    v11 = v12;
    v9 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v8, 0.0);
    sub_18D053AA8(a1 + 96, (uint64_t)&v8);
    v10 = 0x300000003;
    v8 = &unk_1E25C78E0;
    v11 = v12;
    v9 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v8, 0.0);
    sub_18D053AA8(a1 + 208, (uint64_t)&v8);
    v10 = 0x300000003;
    v8 = &unk_1E25C78E0;
    v11 = v12;
    v9 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v8, 0.0);
    sub_18D053AA8(a1 + 320, (uint64_t)&v8);
    *(_BYTE *)(a1 + 432) = 0;
    __assert_rtn("CNRigidTransformation", "cnrigidtransformation.cpp", 140, "false && \"Error: attempted to construct CNRigidTransformation from invalid transformation or covariance matrix.\"");
  }
  return a1;
}

void sub_18D1610E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *v4 = &unk_1E25C5E70;
  *v3 = &unk_1E25C5E70;
  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

BOOL cntransformation::CNRigidTransformation::SetCovarianceMatrix(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;

  if (*(_DWORD *)(a2 + 8) != 6 || *(_DWORD *)(a2 + 12) != 6)
    return 0;
  v19 = 0;
  v16 = 0x600000006;
  v14 = &unk_1E25C81B0;
  v15 = xmmword_18D314680;
  v17 = &v18;
  sub_18D05C654(a2, (uint64_t)&v14, &v19);
  v14 = &unk_1E25C5E70;
  v4 = v19;
  if (v19)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_1ECF22DD0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF22DD0))
    {
      v10 = 0x300000001;
      v8 = &unk_1E25C6C50;
      v11 = &v12;
      v9 = xmmword_18D314670;
      v12 = 0x100000000;
      v13 = 2;
      sub_18D16169C((uint64_t)&v8, (uint64_t)&unk_1ECF22EC0);
      __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF22EC0, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF22DD0);
    }
    v6 = atomic_load((unsigned __int8 *)&qword_1ECF22DD8);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF22DD8))
    {
      v10 = 0x300000001;
      v8 = &unk_1E25C6C50;
      v11 = &v12;
      v9 = xmmword_18D314670;
      v12 = 0x400000003;
      v13 = 5;
      sub_18D16169C((uint64_t)&v8, (uint64_t)&unk_1ECF22EF8);
      __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF22EF8, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF22DD8);
    }
    sub_18D161D4C(a2, (uint64_t)&unk_1ECF22EC0, (uint64_t)&unk_1ECF22EC0, (uint64_t)&v8);
    sub_18D053AA8(a1 + 96, (uint64_t)&v8);
    sub_18D161D4C(a2, (uint64_t)&unk_1ECF22EF8, (uint64_t)&unk_1ECF22EF8, (uint64_t)&v8);
    sub_18D053AA8(a1 + 208, (uint64_t)&v8);
    sub_18D161D4C(a2, (uint64_t)&unk_1ECF22EC0, (uint64_t)&unk_1ECF22EF8, (uint64_t)&v8);
    sub_18D053AA8(a1 + 320, (uint64_t)&v8);
    *(_BYTE *)(a1 + 432) = 1;
  }
  return v4;
}

void sub_18D161384(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF22DD8);
  _Unwind_Resume(a1);
}

double cntransformation::CNRigidTransformation::MakeSymmetric(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float64_t *v3;
  float64x2_t v4;
  uint64_t v5;
  double result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(a1 + 20);
  v3 = (float64_t *)(v1 + 8 * v2);
  v4.f64[0] = *v3;
  v5 = 16 * v2;
  v4.f64[1] = *(float64_t *)(v1 + 16 * v2);
  __asm { FMOV            V1.2D, #0.5 }
  *(float64x2_t *)(v1 + 8) = vmulq_f64(vaddq_f64(*(float64x2_t *)(v1 + 8), v4), _Q1);
  LODWORD(v2) = (2 * v2) | 1;
  v3[2] = (v3[2] + *(double *)(v1 + 8 * (int)v2)) * 0.5;
  *v3 = *(float64_t *)(v1 + 8);
  *(_QWORD *)(v1 + v5) = *(_QWORD *)(v1 + 16);
  result = v3[2];
  *(double *)(v1 + 8 * (int)v2) = result;
  return result;
}

uint64_t cntransformation::CNRigidTransformation::TransformationMatrix@<X0>(cntransformation::CNRigidTransformation *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD v18[18];
  void *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  int v23;

  v4 = atomic_load((unsigned __int8 *)&qword_1ECF22DB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF22DB0))
  {
    v10 = 0x300000001;
    v8 = &unk_1E25C6C50;
    v11 = &v12;
    v9 = xmmword_18D314670;
    v12 = 0x100000000;
    v13 = 2;
    sub_18D16169C((uint64_t)&v8, (uint64_t)&unk_1ECF22DE0);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF22DE0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF22DB0);
  }
  *(_QWORD *)(a2 + 24) = 0x400000004;
  *(_QWORD *)a2 = &unk_1E25C7FA0;
  *(_OWORD *)(a2 + 8) = xmmword_18D313080;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  cnrotation::CNRotation::RotationMatrix(this, (uint64_t)&v14);
  sub_18D04F764((uint64_t)&v8, a2, (uint64_t)&unk_1ECF22DE0, (uint64_t)&unk_1ECF22DE0);
  sub_18D16171C((uint64_t)&v8, (uint64_t)&v14);
  v16 = 0x100000001;
  v14 = &unk_1E25C6A70;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v15 = v5;
  v17 = v18;
  v18[0] = 3;
  sub_18D163258((uint64_t)&v8, a2, (uint64_t)&unk_1ECF22DE0, (uint64_t)&v14);
  sub_18D16182C((uint64_t)&v8, (uint64_t)this + 32);
  v16 = 0x300000001;
  v14 = &unk_1E25C6C20;
  v17 = v18;
  v15 = xmmword_18D314670;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  v21 = 0x100000001;
  v19 = &unk_1E25C6A70;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  v20 = v6;
  v22 = &v23;
  v23 = 3;
  sub_18D1633C8((uint64_t)&v8, a2, (uint64_t)&v19, (uint64_t)&unk_1ECF22DE0);
  result = sub_18D16193C((uint64_t)&v8, (uint64_t)&v14);
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * *(int *)(a2 + 20) + 24) = 0x3FF0000000000000;
  return result;
}

void sub_18D161654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF22DB0);
  _Unwind_Resume(a1);
}

uint64_t sub_18D16169C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 24) = 0x100000003;
  *(_QWORD *)a2 = &unk_1E25C77C0;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  return sub_18D163160(a1, a2);
}

void sub_18D1616F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D161708(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D16171C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 112);
        v8 = *(int **)(result + 152);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 208) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D161804(_QWORD *result)
{
  result[22] = &unk_1E25C5EA0;
  result[15] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D16182C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 64);
        v8 = *(int **)(result + 104);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 160) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D161914(_QWORD *result)
{
  result[16] = &unk_1E25C5EA0;
  result[9] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D16193C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 64);
        v8 = *(int **)(result + 104);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 152) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D161A24(_QWORD *result)
{
  result[15] = &unk_1E25C5EA0;
  result[9] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D161A4C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t cntransformation::CNRigidTransformation::CovarianceMatrix@<X0>(cntransformation::CNRigidTransformation *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  void *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;

  v4 = atomic_load((unsigned __int8 *)&qword_1ECF22DB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF22DB8))
  {
    v19 = 0x300000001;
    v17 = &unk_1E25C6C50;
    v20 = &v21;
    v18 = xmmword_18D314670;
    v21 = 0x100000000;
    v22 = 2;
    sub_18D16169C((uint64_t)&v17, (uint64_t)&unk_1ECF22E18);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF22E18, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF22DB8);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ECF22DC0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF22DC0))
  {
    v19 = 0x300000001;
    v17 = &unk_1E25C6C50;
    v20 = &v21;
    v18 = xmmword_18D314670;
    v21 = 0x400000003;
    v22 = 5;
    sub_18D16169C((uint64_t)&v17, (uint64_t)&unk_1ECF22E50);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF22E50, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF22DC0);
  }
  *(_QWORD *)(a2 + 24) = 0x600000006;
  *(_QWORD *)a2 = &unk_1E25C81B0;
  *(_OWORD *)(a2 + 8) = xmmword_18D314680;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_18D04F764((uint64_t)&v17, a2, (uint64_t)&unk_1ECF22E18, (uint64_t)&unk_1ECF22E18);
  sub_18D16171C((uint64_t)&v17, (uint64_t)this + 96);
  v6 = *((_DWORD *)this + 83);
  v7 = *((_DWORD *)this + 82);
  v14 = 0x300000003;
  v9 = &unk_1E25C78E0;
  v10 = v6;
  v11 = v7;
  v12 = v7 * v6;
  v13 = v6;
  v15 = &v16;
  sub_18D073454((uint64_t)this + 320, (uint64_t)&v9);
  sub_18D04F764((uint64_t)&v17, a2, (uint64_t)&unk_1ECF22E50, (uint64_t)&unk_1ECF22E18);
  sub_18D16171C((uint64_t)&v17, (uint64_t)&v9);
  sub_18D04F764((uint64_t)&v17, a2, (uint64_t)&unk_1ECF22E18, (uint64_t)&unk_1ECF22E50);
  sub_18D16171C((uint64_t)&v17, (uint64_t)this + 320);
  sub_18D04F764((uint64_t)&v17, a2, (uint64_t)&unk_1ECF22E50, (uint64_t)&unk_1ECF22E50);
  return sub_18D16171C((uint64_t)&v17, (uint64_t)this + 208);
}

void sub_18D161CD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF22DC0);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D161D38(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D161D4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a4 + 24) = 0x300000003;
  *(_QWORD *)a4 = &unk_1E25C78E0;
  *(_DWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 12) = v5;
  *(_DWORD *)(a4 + 16) = v5 * v4;
  *(_DWORD *)(a4 + 20) = v4;
  v6 = a4 + 40;
  *(_QWORD *)(a4 + 32) = a4 + 40;
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a3 + 32);
    do
    {
      if (v4)
      {
        v11 = 0;
        v12 = *(_DWORD *)(result + 20) * *(_DWORD *)(v10 + 4 * v8);
        v13 = *(_QWORD *)(result + 32);
        do
        {
          *(_QWORD *)(v6 + 8 * (v7 + v11)) = *(_QWORD *)(v13
                                                                       + 8
                                                                       * (*(_DWORD *)(v9 + 4 * v11) + v12));
          ++v11;
        }
        while (v4 != v11);
      }
      ++v8;
      v7 += v4;
    }
    while (v8 != v5);
  }
  return result;
}

BOOL cntransformation::CNRigidTransformation::SetPrr(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t v5;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;

  if (*(_DWORD *)(a2 + 8) != 3 || *(_DWORD *)(a2 + 12) != 3)
    return 0;
  v5 = a1 + 96;
  sub_18D053AA8(a1 + 96, a2);
  cntransformation::CNRigidTransformation::MakeSymmetric(v5);
  v17 = 0;
  v14 = 0x300000003;
  v12 = &unk_1E25C78E0;
  v13 = xmmword_18D30BB60;
  v15 = &v16;
  sub_18D05C654(v5, (uint64_t)&v12, &v17);
  v12 = &unk_1E25C5E70;
  v3 = v17;
  if (v17)
  {
    *(_BYTE *)(a1 + 432) = 1;
  }
  else
  {
    v9 = 0x300000003;
    v7 = &unk_1E25C78E0;
    v10 = &v11;
    v8 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v7, 0.0);
    sub_18D053AA8(v5, (uint64_t)&v7);
  }
  return v3;
}

BOOL cntransformation::CNRigidTransformation::SetPpp(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t v5;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;

  if (*(_DWORD *)(a2 + 8) != 3 || *(_DWORD *)(a2 + 12) != 3)
    return 0;
  v5 = a1 + 208;
  sub_18D053AA8(a1 + 208, a2);
  cntransformation::CNRigidTransformation::MakeSymmetric(v5);
  v17 = 0;
  v14 = 0x300000003;
  v12 = &unk_1E25C78E0;
  v13 = xmmword_18D30BB60;
  v15 = &v16;
  sub_18D05C654(v5, (uint64_t)&v12, &v17);
  v12 = &unk_1E25C5E70;
  v3 = v17;
  if (v17)
  {
    *(_BYTE *)(a1 + 432) = 1;
  }
  else
  {
    v9 = 0x300000003;
    v7 = &unk_1E25C78E0;
    v10 = &v11;
    v8 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v7, 0.0);
    sub_18D053AA8(v5, (uint64_t)&v7);
  }
  return v3;
}

uint64_t cntransformation::CNRigidTransformation::SetPrp(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3;
  v3 = v2;
  if (v2)
  {
    sub_18D053AA8(a1 + 320, a2);
    *(_BYTE *)(a1 + 432) = 1;
  }
  return v3;
}

void cntransformation::Cat(cntransformation *this@<X0>, const cntransformation::CNRigidTransformation *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int i;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v25;
  int v26;
  int v27;
  int j;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t *v34;
  int v35;
  int v36;
  int k;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int m;
  double v47;
  double v48;
  double v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t *v55;
  int v56;
  int v57;
  int n;
  void *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD v66[9];
  void *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD v79[9];
  _BYTE v80[8];
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD v89[9];
  void *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD v117[9];
  _BYTE v118[8];
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  void *v123;
  __int128 v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE v127[96];
  _BYTE v128[32];
  uint64_t *v129;
  uint64_t v130;
  double v131;
  double v132;
  double v133;
  double v134;
  uint64_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  uint64_t v140;
  double v141;
  double v142;
  double v143;
  double v144;
  uint64_t v145;
  void *v146;
  __int128 v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD v150[12];
  void *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  _BYTE v156[152];

  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)a3);
  cnrotation::Cat((double *)this, a2, (double *)v128);
  if (v128 != (_BYTE *)a3)
  {
    v7 = *(_OWORD *)&v128[16];
    *(_OWORD *)a3 = *(_OWORD *)v128;
    *(_OWORD *)(a3 + 16) = v7;
  }
  sub_18D162AB8(this, (uint64_t)a2 + 32, (uint64_t)v156);
  *(_QWORD *)&v128[24] = 0x300000003;
  *(_QWORD *)v128 = &unk_1E25C78E0;
  *(_OWORD *)&v128[8] = xmmword_18D30BB60;
  v129 = &v130;
  sub_18D053FA4((uint64_t)v156, (uint64_t)this + 32, (uint64_t)v128);
  sub_18D1636E4((uint64_t)&v146, (uint64_t)v128);
  sub_18D053AA8(a3 + 32, (uint64_t)&v146);
  if (*((unsigned __int8 *)a2 + 432) | *((unsigned __int8 *)this + 432))
  {
    cnrotation::CNRotation::drdq((cnrotation::CNRotation *)a3, (uint64_t)v156);
    *(_QWORD *)&v128[24] = 0x400000004;
    *(_QWORD *)v128 = &unk_1E25C7FA0;
    *(_OWORD *)&v128[8] = xmmword_18D313080;
    v129 = &v130;
    v8 = *(double *)a2;
    v9 = *((double *)a2 + 1);
    v10 = *((double *)a2 + 2);
    v130 = *((_QWORD *)a2 + 3);
    v131 = v10;
    v132 = -v9;
    v133 = -v8;
    v134 = -v10;
    v135 = v130;
    v136 = v8;
    v137 = -v9;
    v138 = v9;
    v139 = -v8;
    v140 = v130;
    v141 = -v10;
    v142 = v8;
    v143 = v9;
    v144 = v10;
    v145 = v130;
    v148 = 0x400000003;
    v146 = &unk_1E25C7940;
    v147 = xmmword_18D3130B0;
    v149 = v150;
    sub_18D053B2C((uint64_t)v156, (uint64_t)v128, (uint64_t)&v146);
    cnrotation::CNRotation::dqdr(this, (uint64_t)&v123);
    v153 = 0x300000003;
    v151 = &unk_1E25C78E0;
    v152 = xmmword_18D30BB60;
    v154 = &v155;
    sub_18D053B2C((uint64_t)&v146, (uint64_t)&v123, (uint64_t)&v151);
    cnrotation::CNRotation::dRotateVectordr((double *)this, (uint64_t)a2 + 32, (uint64_t)v118);
    v11 = v120;
    v12 = v119;
    v115 = 0x300000003;
    v110 = &unk_1E25C78E0;
    v116 = v117;
    v111 = v120;
    v112 = v119;
    v113 = v119 * v120;
    v114 = v120;
    if (v120)
    {
      v13 = 0;
      v14 = 0;
      v15 = v121;
      v16 = v122;
      do
      {
        v17 = v13;
        v18 = v14;
        for (i = v12; i; --i)
        {
          v117[v18] = *(_QWORD *)(v16 + 8 * v17);
          v18 += v11;
          ++v17;
        }
        ++v14;
        v13 += v15;
      }
      while (v14 != v11);
    }
    v107 = 0x300000003;
    v105 = &unk_1E25C78E0;
    v106 = xmmword_18D30BB60;
    v108 = &v109;
    sub_18D053B2C((uint64_t)this + 96, (uint64_t)&v110, (uint64_t)&v105);
    v102 = 0x300000003;
    v100 = &unk_1E25C78E0;
    v101 = xmmword_18D30BB60;
    v103 = &v104;
    sub_18D053B2C((uint64_t)v118, (uint64_t)this + 320, (uint64_t)&v100);
    *(_QWORD *)&v128[24] = 0x300000003;
    *(_QWORD *)v128 = &unk_1E25C78E0;
    *(_OWORD *)&v128[8] = xmmword_18D30BB60;
    v129 = &v130;
    sub_18D053B2C((uint64_t)&v151, (uint64_t)this + 96, (uint64_t)v128);
    v20 = DWORD1(v152);
    v21 = v152;
    v148 = 0x300000003;
    v146 = &unk_1E25C78E0;
    v149 = v150;
    *(_QWORD *)&v147 = __PAIR64__(v152, DWORD1(v152));
    DWORD2(v147) = v152 * DWORD1(v152);
    HIDWORD(v147) = DWORD1(v152);
    if (DWORD1(v152))
    {
      v22 = 0;
      v23 = 0;
      v24 = HIDWORD(v152);
      v25 = v154;
      do
      {
        v26 = v22;
        v27 = v23;
        for (j = v21; j; --j)
        {
          v150[v27] = v25[v26];
          v27 += v20;
          ++v26;
        }
        ++v23;
        v22 += v24;
      }
      while (v23 != v20);
    }
    v97 = 0x300000003;
    v95 = &unk_1E25C78E0;
    v96 = xmmword_18D30BB60;
    v98 = &v99;
    sub_18D053B2C((uint64_t)v128, (uint64_t)&v146, (uint64_t)&v95);
    v125 = 0x300000003;
    v123 = &unk_1E25C78E0;
    v124 = xmmword_18D30BB60;
    v126 = v127;
    sub_18D053B2C((uint64_t)v118, (uint64_t)&v105, (uint64_t)&v123);
    v148 = 0x300000003;
    v146 = &unk_1E25C78E0;
    v147 = xmmword_18D30BB60;
    v149 = v150;
    sub_18D053FA4((uint64_t)&v123, (uint64_t)&v100, (uint64_t)&v146);
    v29 = DWORD1(v101);
    v30 = v101;
    v87 = 0x300000003;
    v85 = &unk_1E25C78E0;
    v88 = v89;
    *(_QWORD *)&v86 = __PAIR64__(v101, DWORD1(v101));
    DWORD2(v86) = v101 * DWORD1(v101);
    HIDWORD(v86) = DWORD1(v101);
    if (DWORD1(v101))
    {
      v31 = 0;
      v32 = 0;
      v33 = HIDWORD(v101);
      v34 = v103;
      do
      {
        v35 = v31;
        v36 = v32;
        for (k = v30; k; --k)
        {
          v89[v36] = v34[v35];
          v36 += v29;
          ++v35;
        }
        ++v32;
        v31 += v33;
      }
      while (v32 != v29);
    }
    *(_QWORD *)&v128[24] = 0x300000003;
    *(_QWORD *)v128 = &unk_1E25C78E0;
    *(_OWORD *)&v128[8] = xmmword_18D30BB60;
    v129 = &v130;
    sub_18D053FA4((uint64_t)&v146, (uint64_t)&v85, (uint64_t)v128);
    v92 = 0x300000003;
    v90 = &unk_1E25C78E0;
    v91 = xmmword_18D30BB60;
    v93 = &v94;
    sub_18D053FA4((uint64_t)v128, (uint64_t)this + 208, (uint64_t)&v90);
    *(_QWORD *)&v128[24] = 0x300000003;
    *(_QWORD *)v128 = &unk_1E25C78E0;
    *(_OWORD *)&v128[8] = xmmword_18D30BB60;
    v129 = &v130;
    sub_18D053B2C((uint64_t)&v151, (uint64_t)&v105, (uint64_t)v128);
    v148 = 0x300000003;
    v146 = &unk_1E25C78E0;
    v147 = xmmword_18D30BB60;
    v149 = v150;
    sub_18D053B2C((uint64_t)&v151, (uint64_t)this + 320, (uint64_t)&v146);
    v87 = 0x300000003;
    v85 = &unk_1E25C78E0;
    v86 = xmmword_18D30BB60;
    v88 = v89;
    sub_18D053FA4((uint64_t)v128, (uint64_t)&v146, (uint64_t)&v85);
    cnrotation::CNRotation::RotationMatrix(this, (uint64_t)v80);
    v38 = v82;
    v39 = v81;
    v77 = 0x300000003;
    v72 = &unk_1E25C78E0;
    v78 = v79;
    v73 = v82;
    v74 = v81;
    v75 = v81 * v82;
    v76 = v82;
    if (v82)
    {
      v40 = 0;
      v41 = 0;
      v42 = v83;
      v43 = v84;
      do
      {
        v44 = v40;
        v45 = v41;
        for (m = v39; m; --m)
        {
          v79[v45] = *(_QWORD *)(v43 + 8 * v44);
          v45 += v38;
          ++v44;
        }
        ++v41;
        v40 += v42;
      }
      while (v41 != v38);
    }
    *(_QWORD *)&v128[24] = 0x400000004;
    *(_QWORD *)v128 = &unk_1E25C7FA0;
    *(_OWORD *)&v128[8] = xmmword_18D313080;
    v129 = &v130;
    v47 = *(double *)this;
    v48 = *((double *)this + 1);
    v49 = *((double *)this + 2);
    v130 = *((_QWORD *)this + 3);
    v131 = -v49;
    v132 = v48;
    v133 = -v47;
    v134 = v49;
    v135 = v130;
    v136 = -v47;
    v137 = -v48;
    v138 = -v48;
    v139 = v47;
    v140 = v130;
    v141 = -v49;
    v142 = v47;
    v143 = v48;
    v144 = v49;
    v145 = v130;
    v148 = 0x400000003;
    v146 = &unk_1E25C7940;
    v147 = xmmword_18D3130B0;
    v149 = v150;
    sub_18D053B2C((uint64_t)v156, (uint64_t)v128, (uint64_t)&v146);
    cnrotation::CNRotation::dqdr(a2, (uint64_t)&v123);
    v69 = 0x300000003;
    v67 = &unk_1E25C78E0;
    v68 = xmmword_18D30BB60;
    v70 = &v71;
    sub_18D053B2C((uint64_t)&v146, (uint64_t)&v123, (uint64_t)&v67);
    v125 = 0x300000003;
    v123 = &unk_1E25C78E0;
    v124 = xmmword_18D30BB60;
    v126 = v127;
    sub_18D053B2C((uint64_t)&v67, (uint64_t)a2 + 96, (uint64_t)&v123);
    v51 = v68;
    v50 = DWORD1(v68);
    v64 = 0x300000003;
    v59 = &unk_1E25C78E0;
    v65 = v66;
    v60 = DWORD1(v68);
    v61 = v68;
    v62 = v68 * DWORD1(v68);
    v63 = DWORD1(v68);
    if (DWORD1(v68))
    {
      v52 = 0;
      v53 = 0;
      v54 = HIDWORD(v68);
      v55 = v70;
      do
      {
        v56 = v52;
        v57 = v53;
        for (n = v51; n; --n)
        {
          v66[v57] = v55[v56];
          v57 += v50;
          ++v56;
        }
        ++v53;
        v52 += v54;
      }
      while (v53 != v50);
    }
    v148 = 0x300000003;
    v146 = &unk_1E25C78E0;
    v147 = xmmword_18D30BB60;
    v149 = v150;
    sub_18D053B2C((uint64_t)&v123, (uint64_t)&v59, (uint64_t)&v146);
    *(_QWORD *)&v128[24] = 0x300000003;
    *(_QWORD *)v128 = &unk_1E25C78E0;
    *(_OWORD *)&v128[8] = xmmword_18D30BB60;
    v129 = &v130;
    sub_18D053FA4((uint64_t)&v95, (uint64_t)&v146, (uint64_t)v128);
    sub_18D053AA8((uint64_t)&v95, (uint64_t)v128);
    v125 = 0x300000003;
    v123 = &unk_1E25C78E0;
    v124 = xmmword_18D30BB60;
    v126 = v127;
    sub_18D053B2C((uint64_t)v80, (uint64_t)a2 + 208, (uint64_t)&v123);
    v148 = 0x300000003;
    v146 = &unk_1E25C78E0;
    v147 = xmmword_18D30BB60;
    v149 = v150;
    sub_18D053B2C((uint64_t)&v123, (uint64_t)&v72, (uint64_t)&v146);
    *(_QWORD *)&v128[24] = 0x300000003;
    *(_QWORD *)v128 = &unk_1E25C78E0;
    *(_OWORD *)&v128[8] = xmmword_18D30BB60;
    v129 = &v130;
    sub_18D053FA4((uint64_t)&v90, (uint64_t)&v146, (uint64_t)v128);
    sub_18D053AA8((uint64_t)&v90, (uint64_t)v128);
    v125 = 0x300000003;
    v123 = &unk_1E25C78E0;
    v124 = xmmword_18D30BB60;
    v126 = v127;
    sub_18D053B2C((uint64_t)&v67, (uint64_t)a2 + 320, (uint64_t)&v123);
    v148 = 0x300000003;
    v146 = &unk_1E25C78E0;
    v147 = xmmword_18D30BB60;
    v149 = v150;
    sub_18D053B2C((uint64_t)&v123, (uint64_t)&v72, (uint64_t)&v146);
    *(_QWORD *)&v128[24] = 0x300000003;
    *(_QWORD *)v128 = &unk_1E25C78E0;
    *(_OWORD *)&v128[8] = xmmword_18D30BB60;
    v129 = &v130;
    sub_18D053FA4((uint64_t)&v85, (uint64_t)&v146, (uint64_t)v128);
    sub_18D053AA8((uint64_t)&v85, (uint64_t)v128);
    cntransformation::CNRigidTransformation::SetPrr(a3, (uint64_t)&v95);
    cntransformation::CNRigidTransformation::SetPpp(a3, (uint64_t)&v90);
    if ((_QWORD)v86 == 0x300000003)
    {
      sub_18D053AA8(a3 + 320, (uint64_t)&v85);
      *(_BYTE *)(a3 + 432) = 1;
    }
  }
}

void sub_18D162A24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[40] = &unk_1E25C5E70;
  v1[26] = &unk_1E25C5E70;
  v1[12] = &unk_1E25C5E70;
  v1[4] = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D162AB8(cnrotation::CNRotation *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  if (v5 == 3 && v6 == 1)
  {
    cnrotation::CNRotation::RotationMatrix(a1, (uint64_t)&v25);
    v22 = 0x100000003;
    v20 = &unk_1E25C7790;
    v21 = xmmword_18D313070;
    v23 = &v24;
    sub_18D053B2C((uint64_t)&v25, a2, (uint64_t)&v20);
    sub_18D163614(a3, (uint64_t)&v20);
  }
  else
  {
    if (v5 != 1 || v6 != 3)
      __assert_rtn("RotateCoordinateFrame", "cnrotation.h", 275, "false && \"Error: CNRotation::RotateCoordinateFrame called with invalid vector.\"");
    cnrotation::CNRotation::RotationMatrix(a1, (uint64_t)&v20);
    v10 = *(_DWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 12);
    v17 = 0x300000001;
    v12 = &unk_1E25C6C20;
    v13 = v9;
    v14 = v10;
    v15 = v10 * v9;
    v16 = v9;
    v18 = &v19;
    sub_18D073454(a2, (uint64_t)&v12);
    v27 = 0x300000003;
    v25 = &unk_1E25C78E0;
    v26 = xmmword_18D30BB60;
    v28 = &v29;
    sub_18D053B2C((uint64_t)&v20, (uint64_t)&v12, (uint64_t)&v25);
    v11 = v26;
    *(_QWORD *)(a3 + 24) = 0x300000003;
    *(_QWORD *)a3 = &unk_1E25C78E0;
    *(_DWORD *)(a3 + 8) = HIDWORD(v11);
    *(_DWORD *)(a3 + 12) = v11;
    *(_DWORD *)(a3 + 16) = v11 * HIDWORD(v11);
    *(_DWORD *)(a3 + 20) = HIDWORD(v11);
    *(_QWORD *)(a3 + 32) = a3 + 40;
    sub_18D073454((uint64_t)&v25, a3);
  }
}

void sub_18D162C48(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void cntransformation::Inv(float64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int i;
  float64x2_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  int v22;
  int v23;
  int j;
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[9];
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE v57[72];
  void *v58;
  __int128 v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE v62[49];
  void *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  void *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD v85[9];
  _BYTE v86[8];
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  _BYTE v91[112];
  void *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  float64x2_t v97[2];

  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)a2);
  cnrotation::Inv(this, v97);
  if (v97 != (float64x2_t *)a2)
  {
    v5 = v97[1];
    *(float64x2_t *)a2 = v97[0];
    *(float64x2_t *)(a2 + 16) = v5;
  }
  sub_18D162AB8((cnrotation::CNRotation *)v97, (uint64_t)&this[2], (uint64_t)v91);
  v94 = 0x300000003;
  v92 = &unk_1E25C78E0;
  v93 = xmmword_18D30BB60;
  v95 = &v96;
  sub_18D054E78((uint64_t)v91, (uint64_t)&v92);
  sub_18D1636E4((uint64_t)v86, (uint64_t)&v92);
  sub_18D053AA8(a2 + 32, (uint64_t)v86);
  if (LOBYTE(this[27].f64[0]))
  {
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)this, (uint64_t)&v92);
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)a2, (uint64_t)v91);
    cnrotation::CNRotation::dRotateVectordr((double *)a2, (uint64_t)&this[2], (uint64_t)v86);
    v6 = v88;
    v7 = v87;
    v83 = 0x300000003;
    v78 = &unk_1E25C78E0;
    v84 = v85;
    v79 = v88;
    v80 = v87;
    v81 = v87 * v88;
    v82 = v88;
    if (v88)
    {
      v8 = 0;
      v9 = 0;
      v10 = v89;
      v11 = v90;
      do
      {
        v12 = v8;
        v13 = v9;
        for (i = v7; i; --i)
        {
          v85[v13] = *(_QWORD *)(v11 + 8 * v12);
          v13 += v6;
          ++v12;
        }
        ++v9;
        v8 += v10;
      }
      while (v9 != v6);
    }
    v75 = 0x300000003;
    v73 = &unk_1E25C78E0;
    v74 = xmmword_18D30BB60;
    v76 = &v77;
    sub_18D053B2C((uint64_t)&this[6], (uint64_t)&v78, (uint64_t)&v73);
    v70 = 0x300000003;
    v68 = &unk_1E25C78E0;
    v69 = xmmword_18D30BB60;
    v71 = &v72;
    sub_18D053B2C((uint64_t)&this[20], (uint64_t)&v92, (uint64_t)&v68);
    v65 = 0x300000003;
    v63 = &unk_1E25C78E0;
    v64 = xmmword_18D30BB60;
    v66 = &v67;
    sub_18D053B2C((uint64_t)v86, (uint64_t)&v68, (uint64_t)&v63);
    cntransformation::CNRigidTransformation::SetPrr(a2, (uint64_t)&this[6]);
    v45 = 0x300000003;
    v43 = &unk_1E25C78E0;
    v44 = xmmword_18D30BB60;
    v46 = &v47;
    sub_18D053B2C((uint64_t)v86, (uint64_t)&v73, (uint64_t)&v43);
    v15 = this + 13;
    v50 = 0x300000003;
    v48 = &unk_1E25C78E0;
    v49 = xmmword_18D30BB60;
    v51 = &v52;
    sub_18D0540FC((uint64_t)&v43, (uint64_t)&v63, (uint64_t)&v48);
    v16 = DWORD1(v64);
    v17 = v64;
    v40 = 0x300000003;
    v35 = &unk_1E25C78E0;
    v41 = v42;
    v36 = DWORD1(v64);
    v37 = v64;
    v38 = v64 * DWORD1(v64);
    v39 = DWORD1(v64);
    if (DWORD1(v64))
    {
      v18 = 0;
      v19 = 0;
      v20 = HIDWORD(v64);
      v21 = v66;
      do
      {
        v22 = v18;
        v23 = v19;
        for (j = v17; j; --j)
        {
          v42[v23] = v21[v22];
          v23 += v16;
          ++v22;
        }
        ++v19;
        v18 += v20;
      }
      while (v19 != v16);
    }
    v55 = 0x300000003;
    v53 = &unk_1E25C78E0;
    v54 = xmmword_18D30BB60;
    v56 = v57;
    sub_18D0540FC((uint64_t)&v48, (uint64_t)&v35, (uint64_t)&v53);
    v27 = 0x300000003;
    v25 = &unk_1E25C78E0;
    v26 = xmmword_18D30BB60;
    v28 = &v29;
    sub_18D053B2C((uint64_t)v91, (uint64_t)v15, (uint64_t)&v25);
    v32 = 0x300000003;
    v30 = &unk_1E25C78E0;
    v31 = xmmword_18D30BB60;
    v33 = &v34;
    sub_18D053B2C((uint64_t)&v25, (uint64_t)&v92, (uint64_t)&v30);
    v60 = 0x300000003;
    v58 = &unk_1E25C78E0;
    v59 = xmmword_18D30BB60;
    v61 = v62;
    sub_18D053FA4((uint64_t)&v53, (uint64_t)&v30, (uint64_t)&v58);
    cntransformation::CNRigidTransformation::SetPpp(a2, (uint64_t)&v58);
    v55 = 0x300000003;
    v53 = &unk_1E25C78E0;
    v54 = xmmword_18D30BB60;
    v56 = v57;
    sub_18D054E78((uint64_t)&v73, (uint64_t)&v53);
    v60 = 0x300000003;
    v58 = &unk_1E25C78E0;
    v59 = xmmword_18D30BB60;
    v61 = v62;
    sub_18D053FA4((uint64_t)&v53, (uint64_t)&v68, (uint64_t)&v58);
    if ((_QWORD)v59 == 0x300000003)
    {
      sub_18D053AA8(a2 + 320, (uint64_t)&v58);
      *(_BYTE *)(a2 + 432) = 1;
    }
  }
}

void sub_18D1630B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[40] = &unk_1E25C5E70;
  v1[26] = &unk_1E25C5E70;
  v1[12] = &unk_1E25C5E70;
  v1[4] = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D163110(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D163134(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D163140(uint64_t a1)
{
  char v1[3];

  sub_18D159878(a1, v1);
}

uint64_t sub_18D163160(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int i;

  v3 = *(_DWORD *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v3 * v2;
  *(_DWORD *)(a2 + 20) = v2;
  if (v2)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 32);
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v3)
      {
        for (i = 0; i != v3; ++i)
          *(_DWORD *)(v6 + 4 * (v4 + *(_DWORD *)(a2 + 20) * i)) = *(_DWORD *)(v5
                                                                              + 4
                                                                              * (i + v4 * *(_DWORD *)(result + 20)));
      }
      ++v4;
    }
    while (v4 != v2);
  }
  return result;
}

void sub_18D1631BC(_QWORD *a1)
{
  a1[22] = &unk_1E25C5EA0;
  a1[15] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D1631F4(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

void sub_18D163208(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D16322C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D163238(uint64_t a1)
{
  char v1;

  sub_18D159878(a1, &v1);
}

uint64_t sub_18D163258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C4FA0;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 96) = 0x100000003;
  *(_QWORD *)(a1 + 72) = &unk_1E25C77C0;
  *(_OWORD *)(a1 + 80) = xmmword_18D313070;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 152) = 0x100000001;
  *(_QWORD *)(a1 + 128) = &unk_1E25C6A70;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  sub_18D053D7C(a1 + 72, a3);
  sub_18D053D7C(a1 + 128, a4);
  v8 = *(unsigned int *)(a1 + 88);
  v9 = *(unsigned int *)(a1 + 144);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v8)
      {
        v14 = *(int **)(a1 + 104);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v11) * v12;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v10;
        v18 = v8;
        do
        {
          v19 = *v14++;
          *(_QWORD *)(v16 + 8 * v17++) = *(_QWORD *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18D163390(_QWORD *a1)
{
  a1[16] = &unk_1E25C5EA0;
  a1[9] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1633C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0x300000001;
  *(_OWORD *)(a1 + 8) = xmmword_18D314670;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C4D30;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 96) = 0x100000001;
  *(_QWORD *)(a1 + 72) = &unk_1E25C6A70;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = &unk_1E25C77C0;
  *(_QWORD *)(a1 + 144) = 0x100000003;
  *(_OWORD *)(a1 + 128) = xmmword_18D313070;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  sub_18D053D7C(a1 + 72, a3);
  sub_18D053D7C(a1 + 120, a4);
  v8 = *(unsigned int *)(a1 + 88);
  v9 = *(unsigned int *)(a1 + 136);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v8)
      {
        v14 = *(int **)(a1 + 104);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v11) * v12;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v10;
        v18 = v8;
        do
        {
          v19 = *v14++;
          *(_QWORD *)(v16 + 8 * v17++) = *(_QWORD *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18D163510(_QWORD *a1)
{
  a1[15] = &unk_1E25C5EA0;
  a1[9] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D163548(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D163554(uint64_t a1)
{
  char v1[3];

  sub_18D0894A0(a1, v1);
}

void sub_18D163574(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D163598(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1635BC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1635C8(uint64_t a1)
{
  char v1[36];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

double sub_18D163614(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x300000003;
  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 3u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1636D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1636E4(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x100000003;
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1637A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t CNTime::Deserialize(uint64_t a1, _BYTE *a2)
{
  int v4;

  if (!a2[8])
    return 0;
  v4 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1, 8);
  return v4 & (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 8, 8);
}

uint64_t CNTime::Serialize(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (a2[8])
    return 0;
  v4 = a1[1];
  v6 = *a1;
  v5 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v6, 8);
  v6 = v4;
  return v5 & (*(unsigned int (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v6, 8);
}

uint64_t operator<<(uint64_t a1)
{
  std::ostream::operator<<();
  return a1;
}

uint64_t CNTimeSpan::operator-(double *a1, int8x16_t a2, int8x16_t a3)
{
  double v3;
  uint64_t v5[2];

  v3 = *a1;
  if (*(_QWORD *)a1 == 0x8000000000000000)
    return 0;
  *(double *)a2.i64 = -a1[1];
  v5[0] = 0;
  v5[1] = 0;
  CNTimeSpan::SetTimeSpan(v5, -*(_QWORD *)&v3, a2, a3);
  return v5[0];
}

uint64_t *CNTimeSpan::operator+=(uint64_t *a1, _QWORD *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v5;

  *a1 = CNTimeSpan::operator+((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  return a1;
}

uint64_t *CNTimeSpan::operator-=(uint64_t *a1, _QWORD *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v5;

  *a1 = CNTimeSpan::operator-((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  return a1;
}

uint64_t CNTimeSpan::Deserialize(uint64_t a1, uint64_t a2)
{
  int v4;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1, 8);
  return v4 & (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 8, 8);
}

uint64_t CNTimeSpan::Serialize(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v6;

  v6 = *a1;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v6, 8);
  v6 = a1[1];
  return v4 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v6, 8);
}

double raven::RavenMovingStateEstimator::AdjustUserSpeedEvidenceWeight(raven::RavenMovingStateEstimator *this, double a2, double a3)
{
  BOOL v3;
  double result;

  v3 = a3 + a3 >= a2 || a2 <= 5.0;
  result = 0.1;
  if (!v3)
    return 8.0;
  return result;
}

uint64_t raven::RavenMovingStateEstimator::Configure(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __int16 v27;
  unsigned __int8 v28;
  __int16 v29;
  unsigned __int8 v30;
  __int16 v31;

  if (*(_BYTE *)(a1 + 217))
  {
    v31 = 12;
    v30 = 2;
    v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 4160), "RavenMovingStateEstimator::Configure() called more than once");
    if (*(char *)(a1 + 4183) >= 0)
      LOBYTE(v9) = v3;
    else
      v9 = *(_QWORD *)(a1 + 4160);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s", v4, v5, v6, v7, v8, v9);
  }
  else
  {
    v11 = *a2;
    if (*a2)
    {
      if (*(_BYTE *)(v11 + 33))
      {
        result = 0;
        *(_QWORD *)(a1 + 224) = v11;
        *(_BYTE *)(a1 + 217) = 1;
        return result;
      }
      v27 = 12;
      v26 = 4;
      v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 4160), "RavenMovingStateEstimator::Configure() called with uninitialized raven parameters");
      if (*(char *)(a1 + 4183) >= 0)
        LOBYTE(v25) = v19;
      else
        v25 = *(_QWORD *)(a1 + 4160);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v20, v21, v22, v23, v24, v25);
    }
    else
    {
      v29 = 12;
      v28 = 4;
      v12 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 4160), "RavenMovingStateEstimator::Configure() called with null raven parameters");
      if (*(char *)(a1 + 4183) >= 0)
        LOBYTE(v18) = v12;
      else
        v18 = *(_QWORD *)(a1 + 4160);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v13, v14, v15, v16, v17, v18);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenMovingStateEstimator::Initialize(uint64_t a1, uint64_t a2)
{
  double v2;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  cnprint::CNPrinter *v16;
  uint64_t *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float64x2_t v41;
  __n128 v42;
  int8x16_t v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned __int8 v59[8];
  float64x2_t v60;
  _BYTE v61[24];
  uint64_t v62;
  double *v63;
  double v64[3];

  if (*(_BYTE *)(a1 + 216))
  {
    *(_WORD *)v61 = 12;
    v59[0] = 2;
    v5 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 4160), "RavenMovingStateEstimator::Initialize(),estimator being re-initialized");
    if (*(char *)(a1 + 4183) >= 0)
      LOBYTE(v11) = v5;
    else
      v11 = *(_QWORD *)(a1 + 4160);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, v59, "%s", v6, v7, v8, v9, v10, v11);
    *(_BYTE *)(a1 + 216) = 0;
  }
  if (!*(_QWORD *)(a1 + 224))
  {
    *(_WORD *)v61 = 12;
    v59[0] = 4;
    v27 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 4160), "RavenMovingStateEstimator::Initialize(),invalid pointer to RavenParameters");
    goto LABEL_22;
  }
  v12 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  v13 = fabs(v12);
  if ((unint64_t)(*(_QWORD *)&v13 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(_QWORD *)&v13 - 1) >= 0xFFFFFFFFFFFFFLL
    && *(_QWORD *)&v12 != 0)
  {
    *(_WORD *)v61 = 12;
    v59[0] = 4;
    v27 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 4160), "RavenMovingStateEstimator::Initialize(),invalid input time,%.3lf");
LABEL_22:
    if (*(char *)(a1 + 4183) >= 0)
      LOBYTE(v33) = v27;
    else
      v33 = *(_QWORD *)(a1 + 4160);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, v59, "%s", v28, v29, v30, v31, v32, v33);
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 4136) = 0x3DDB7CDFD9D7BDBBLL;
  v56 = 0x100000003;
  v54 = &unk_1E25C7790;
  v57 = &v58;
  v55 = xmmword_18D313070;
  v16 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v54, 0.0);
  v17 = v57;
  v57[2] = 0x3FF0000000000000;
  v18 = *(double *)(a1 + 4136);
  v19 = DWORD1(v55);
  if (DWORD1(v55))
  {
    v20 = 0;
    v21 = v55;
    v22 = v55 - 1;
    v23 = 1;
    do
    {
      v24 = *(double *)&v17[v21 * v20];
      v25 = v23;
      v26 = v22;
      if (v21 >= 2)
      {
        do
        {
          v24 = v24 + *(double *)&v17[v25++];
          --v26;
        }
        while (v26);
      }
      v64[v20++] = v24;
      v23 += v21;
    }
    while (v20 != v19);
    v2 = v64[0];
  }
  v35 = DWORD2(v55);
  if (fabs(v2 + -1.0) > v18 && cnprint::CNPrinter::GetLogLevel(v16) <= 1)
  {
    *(_WORD *)v61 = 2;
    v59[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, v59, "WARNING: HMM initialized with non-normalized probability vector.", v36, v37, v38, v39, v40, v53);
  }
  sub_18D04DA0C((uint64_t)v59, (uint64_t)&v54);
  v41 = (float64x2_t)vdupq_lane_s32((int32x2_t)(v35 | 0x100000000), 0);
  HIDWORD(v41.f64[0]) = 1;
  v60 = v41;
  v62 = 0x100000003;
  *(_QWORD *)v61 = &unk_1E25C7790;
  *(_QWORD *)&v41.f64[1] = 0x300000003;
  *(_OWORD *)&v61[8] = xmmword_18D313070;
  v63 = v64;
  v41.f64[0] = 1.0 / v2;
  sub_18D064EF4((uint64_t)v59, (uint64_t)v61, v41);
  sub_18D053AA8(a1 + 4000, (uint64_t)v61);
  v42 = sub_18D053AA8(a1 + 4064, a1 + 4000);
  *(_DWORD *)(a1 + 4128) = 1;
  v43.i64[0] = 0x3FB999999999999ALL;
  v44 = *(_QWORD *)a2;
  v42.n128_f64[0] = floor(*(double *)(a2 + 8) / 0.1) * 0.1;
  *(_OWORD *)v61 = 0uLL;
  v45 = CNTimeSpan::SetTimeSpan((uint64_t *)v61, v44, (int8x16_t)v42, v43);
  *(_OWORD *)(a1 + 4144) = *(_OWORD *)v61;
  *(_OWORD *)(a1 + 944) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 216) = 1;
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v45))
  {
    *(_WORD *)v61 = 12;
    v59[0] = 0;
    v46 = cnprint::CNLogFormatter::FormatGeneral(a1 + 4160, a2, "RavenMovingStateEstimator::Initialize(),estimator is initialized");
    if (*(char *)(a1 + 4183) >= 0)
      LOBYTE(v52) = v46;
    else
      v52 = *(_QWORD *)(a1 + 4160);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, v59, "%s", v47, v48, v49, v50, v51, v52);
  }
  return 0;
}

uint64_t raven::RavenMovingStateEstimator::HandleEvent(raven::RavenMovingStateEstimator *this, const raven::AccelerometerEvent *a2)
{
  char *v4;
  char *v5;
  double *v6;
  double *v7;
  double *v8;
  char *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  double v17;
  BOOL v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BOOL4 v27;
  double v28;
  char *v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t result;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BOOL4 v48;
  double v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  _BOOL4 v77;
  double v78;
  double v79;
  double v80;
  double v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  _BOOL4 v85;
  int v86;
  int v87;
  double v88;
  double v89;
  double v90;
  double v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  _BOOL4 v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  int v115;
  uint64_t v116;
  double v117;
  uint64_t v118;

  v4 = (char *)this + 232;
  v5 = (char *)this + 520;
  v6 = (double *)((char *)a2 + 104);
  v7 = (double *)((char *)a2 + 112);
  v8 = (double *)((char *)a2 + 120);
  v9 = (char *)this + 232;
  do
  {
    sub_18D1648E4((uint64_t)v9, v6, 1.0);
    sub_18D1648E4((uint64_t)(v9 + 48), v7, 1.0);
    sub_18D1648E4((uint64_t)(v9 + 96), v8, 1.0);
    v9 += 144;
  }
  while (v9 != v5);
  v10 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  v12 = v11;
  v13 = v11;
  v117 = 0.0;
  v118 = 0x3FD0000000000000;
  v16 = CNTimeSpan::operator+((uint64_t)this + 1024, &v117, v14, v15);
  if (v10)
    v18 = 1;
  else
    v18 = (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (v18 && (v16 || (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v10 != v16)
  {
    if (v10 > v16)
      goto LABEL_12;
LABEL_15:
    v27 = 0;
    goto LABEL_20;
  }
  if (v13 <= v17)
    goto LABEL_15;
LABEL_12:
  v19 = (double *)&v4[144 * *((_QWORD *)this + 65)];
  v20 = sqrt(v19[5] + v19[11] + v19[17]);
  v21 = v19[3];
  v22 = v19[9];
  v23 = v19[15];
  v24 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  v26 = *((unsigned __int8 *)this + 1016);
  v27 = *((_BYTE *)this + 1016) != 0;
  if (*((_BYTE *)this + 1016))
    v28 = sqrt((v22 - *((double *)this + 121)) * (v22 - *((double *)this + 121))+ (v21 - *((double *)this + 120)) * (v21 - *((double *)this + 120))+ (v23 - *((double *)this + 122)) * (v23 - *((double *)this + 122)));
  else
    v28 = NAN;
  *((double *)this + 120) = v21;
  *((double *)this + 121) = v22;
  *((double *)this + 122) = v23;
  *((double *)this + 123) = v28;
  *((double *)this + 124) = v20;
  *((_QWORD *)this + 125) = v24;
  *((_QWORD *)this + 126) = v25;
  if (!v26)
    *((_BYTE *)this + 1016) = 1;
  v29 = &v4[144 * *((_QWORD *)this + 65)];
  *v29 = 0;
  *((_OWORD *)v29 + 2) = 0u;
  *(_OWORD *)(v29 + 20) = 0u;
  *(_OWORD *)(v29 + 4) = 0u;
  v30 = ~*((_DWORD *)this + 130);
  v31 = &v4[144 * *((_QWORD *)this + 65)];
  v31[48] = 0;
  *(_OWORD *)(v31 + 100) = 0u;
  *(_OWORD *)(v31 + 116) = 0u;
  *((_OWORD *)v31 + 8) = 0u;
  *(_OWORD *)(v31 + 52) = 0u;
  *(_OWORD *)(v31 + 68) = 0u;
  *(_OWORD *)(v31 + 81) = 0u;
  *((_QWORD *)this + 65) = v30 & 1;
  *((_QWORD *)this + 128) = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)this + 129) = v32;
LABEL_20:
  sub_18D1648E4((uint64_t)this + 736, v6, 1.0);
  sub_18D1648E4((uint64_t)this + 784, v7, 1.0);
  sub_18D1648E4((uint64_t)this + 832, v8, 1.0);
  v33 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  v35 = v34;
  v36 = v34;
  v117 = 0.0;
  v118 = 0x3FB999999999999ALL;
  result = CNTimeSpan::operator+((uint64_t)this + 944, &v117, v37, v38);
  if ((v33 || (*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && (result || (*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && v33 != result)
  {
    if (v33 > result)
      goto LABEL_26;
LABEL_29:
    v48 = 0;
    goto LABEL_34;
  }
  if (v36 <= v40)
    goto LABEL_29;
LABEL_26:
  v41 = sqrt(*((double *)this + 97) + *((double *)this + 103) + *((double *)this + 109));
  v42 = *((double *)this + 95);
  v43 = *((double *)this + 101);
  v44 = *((double *)this + 107);
  v45 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  v47 = *((unsigned __int8 *)this + 936);
  v48 = *((_BYTE *)this + 936) != 0;
  if (*((_BYTE *)this + 936))
    v49 = sqrt((v43 - *((double *)this + 111)) * (v43 - *((double *)this + 111))+ (v42 - *((double *)this + 110)) * (v42 - *((double *)this + 110))+ (v44 - *((double *)this + 112)) * (v44 - *((double *)this + 112)));
  else
    v49 = NAN;
  *((double *)this + 110) = v42;
  *((double *)this + 111) = v43;
  *((double *)this + 112) = v44;
  *((double *)this + 113) = v49;
  *((double *)this + 114) = v41;
  *((_QWORD *)this + 115) = v45;
  *((_QWORD *)this + 116) = v46;
  if (!v47)
    *((_BYTE *)this + 936) = 1;
  *((_BYTE *)this + 736) = 0;
  *((_OWORD *)this + 54) = 0u;
  *(_OWORD *)((char *)this + 836) = 0u;
  *(_OWORD *)((char *)this + 852) = 0u;
  *(_OWORD *)((char *)this + 740) = 0u;
  *(_OWORD *)((char *)this + 756) = 0u;
  *(_OWORD *)((char *)this + 769) = 0u;
  *(_OWORD *)((char *)this + 788) = 0u;
  *(_OWORD *)((char *)this + 804) = 0u;
  *(_OWORD *)((char *)this + 817) = 0u;
  result = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)this + 118) = result;
  *((_QWORD *)this + 119) = v50;
LABEL_34:
  if ((v27 || v48) && *((_BYTE *)this + 1016))
  {
    v51 = (double *)((char *)this + 992);
    if (v27)
    {
      if (*((_BYTE *)this + 3984))
      {
        if (*((double *)this + 363) < sqrt(*((double *)this + 367)))
        {
          v52 = *v51;
          if (*v51 < 1.0)
          {
            if (*((_BYTE *)this + 672))
            {
              v53 = *((_QWORD *)this + 89);
              if (*((_QWORD *)this + 90) != v53 && *((double *)this + 86) > v52 && *((double *)this + 85) <= v52)
              {
                ++*(_DWORD *)(v53 + 4 * (v52 / *((double *)this + 87)));
                ++*((_DWORD *)this + 176);
              }
            }
          }
        }
      }
    }
    v54 = *((unsigned __int8 *)this + 1544);
    if (*((_BYTE *)this + 1544))
      v54 = *((unsigned __int8 *)this + 1504) - 1 < 2;
    if (*((_DWORD *)this + 176))
    {
      v55 = (unsigned int *)*((_QWORD *)this + 89);
      v56 = (unsigned int *)*((_QWORD *)this + 90);
      if (v55 == v56)
      {
        v58 = (unsigned int *)*((_QWORD *)this + 89);
      }
      else
      {
        v57 = v55 + 1;
        v58 = (unsigned int *)*((_QWORD *)this + 89);
        if (v55 + 1 != v56)
        {
          v59 = *v55;
          v58 = (unsigned int *)*((_QWORD *)this + 89);
          v60 = v55 + 1;
          do
          {
            v62 = *v60++;
            v61 = v62;
            v63 = v59 >= v62;
            if (v59 <= v62)
              v59 = v61;
            if (!v63)
              v58 = v57;
            v57 = v60;
          }
          while (v60 != v56);
        }
      }
      v64 = *((double *)this + 124);
      v65 = *((double *)this + 85) + *((double *)this + 87) * ((double)(v58 - v55) + 1.0);
      v66 = v65 + v65;
      if (v66 > 0.5)
        v66 = 0.5;
      if (v64 < v66)
        v54 = 1;
    }
    else
    {
      v64 = *v51;
    }
    if (v64 >= 1.0)
      v54 = 0;
    if (*((_BYTE *)this + 3984))
    {
      if (*((double *)this + 363) >= sqrt(*((double *)this + 367)))
        LOBYTE(v54) = 0;
      if ((v54 & 1) == 0)
        goto LABEL_76;
    }
    else if (!v54)
    {
      goto LABEL_76;
    }
    if (v48)
    {
      if (!*((_BYTE *)this + 936))
        goto LABEL_161;
      v117 = v64 * *((double *)this + 113);
      sub_18D1648E4((uint64_t)this + 528, &v117, 1.0);
    }
    if (v27)
    {
      sub_18D1648E4((uint64_t)this + 624, (double *)this + 124, 1.0);
      sub_18D1648E4((uint64_t)this + 576, (double *)this + 123, 1.0);
    }
LABEL_76:
    result = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
    v67 = result;
    v69 = v68;
    if (!v48 || !*((_BYTE *)this + 1041))
    {
      if (!v27)
        return result;
      if (*((_BYTE *)this + 1040))
      {
        v87 = *((unsigned __int8 *)this + 1544);
        if (*((_BYTE *)this + 1544))
          v87 = *((unsigned __int8 *)this + 1504) - 1 < 2;
        v88 = *((double *)this + 123);
        v89 = 0.0;
        if (*((_BYTE *)this + 576) && (*((_QWORD *)this + 75) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v90 = sqrt(*((double *)this + 77));
          v91 = *((double *)this + 75) + v90 * 3.0;
          v92 = *(uint64_t *)&v90 <= -1
             || ((*(_QWORD *)&v90 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
          v93 = v92 && (unint64_t)(*(_QWORD *)&v90 - 1) >= 0xFFFFFFFFFFFFFLL;
          v94 = !v93 || (*(_QWORD *)&v90 & 0x7FFFFFFFFFFFFFFFLL) == 0;
          v89 = 0.0;
          if (v94)
            v89 = v91;
        }
        v95 = v89 < v88;
        if (*((_BYTE *)this + 3984))
        {
          v95 = v89 < v88;
          if (*((double *)this + 363) > sqrt(*((double *)this + 367)))
            v95 = 1;
        }
        v96 = 0.01;
        v97 = 0.99;
        if (!v95)
          v97 = 0.01;
        v98 = 4.0;
        if ((v95 & v87) == 0)
          v98 = 0.1;
        v99 = 1.0 - v97;
        goto LABEL_158;
      }
      v100 = *((double *)this + 124);
      v101 = 0.0;
      if (*((_BYTE *)this + 624) && (*((_QWORD *)this + 81) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v102 = sqrt(*((double *)this + 83));
        v103 = *((double *)this + 81) + v102 * 3.0;
        v104 = *(uint64_t *)&v102 <= -1
            || ((*(_QWORD *)&v102 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        v105 = v104 && (unint64_t)(*(_QWORD *)&v102 - 1) >= 0xFFFFFFFFFFFFFLL;
        v106 = !v105 || (*(_QWORD *)&v102 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        v101 = 0.0;
        if (v106)
          v101 = v103;
      }
      v86 = v101 < v100;
      if (*((_BYTE *)this + 3984))
      {
        v86 = v101 < v100;
        if (*((double *)this + 363) > sqrt(*((double *)this + 367)))
          v86 = 1;
      }
LABEL_153:
      v99 = 0.01;
      v97 = 0.99;
      if (!v86)
        v97 = 0.01;
      v98 = 4.0;
      if (v86)
        v98 = 0.1;
      v96 = fmin(fmax(1.0 - v97, 0.0), 1.0);
LABEL_158:
      v107 = v98 + -0.1;
      v108 = v107 * v99 + 0.1;
      v109 = v107 * v97 + 0.1;
      v110 = v107 * v96 + 0.1;
      v111 = v110 + v108 + v109;
      v112 = v108 / v111;
      v113 = v109 / v111;
      v114 = v110 / v111;
      result = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
      v115 = *((unsigned __int8 *)this + 64);
      *(_QWORD *)this = sub_18D04DC20;
      *((_QWORD *)this + 1) = v67;
      *((_QWORD *)this + 2) = v69;
      *((double *)this + 3) = v112;
      *((double *)this + 4) = v114;
      *((double *)this + 5) = v113;
      *((_QWORD *)this + 6) = result;
      *((_QWORD *)this + 7) = v116;
      if (!v115)
        *((_BYTE *)this + 64) = 1;
      return result;
    }
    if (*((_BYTE *)this + 936))
    {
      v70 = *((double *)this + 124);
      v71 = 0.0;
      if (*((_BYTE *)this + 624) && (*((_QWORD *)this + 81) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v72 = sqrt(*((double *)this + 83));
        v73 = *((double *)this + 81) + v72 * 3.0;
        v74 = *(uint64_t *)&v72 <= -1 || ((*(_QWORD *)&v72 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        v75 = v74 && (unint64_t)(*(_QWORD *)&v72 - 1) >= 0xFFFFFFFFFFFFFLL;
        v76 = !v75 || (*(_QWORD *)&v72 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        v71 = 0.0;
        if (v76)
          v71 = v73;
      }
      v77 = v71 < v70;
      if (*((_BYTE *)this + 3984))
      {
        v77 = v71 < v70;
        if (*((double *)this + 363) > sqrt(*((double *)this + 367)))
          v77 = 1;
      }
      v78 = *((double *)this + 113) * v70;
      v79 = 0.0;
      if (*((_BYTE *)this + 528) && (*((_QWORD *)this + 69) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v80 = sqrt(*((double *)this + 71));
        v81 = *((double *)this + 69) + v80 * 3.0;
        v82 = *(uint64_t *)&v80 <= -1 || ((*(_QWORD *)&v80 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        v83 = v82 && (unint64_t)(*(_QWORD *)&v80 - 1) >= 0xFFFFFFFFFFFFFLL;
        v84 = !v83 || (*(_QWORD *)&v80 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        v79 = 0.0;
        if (v84)
          v79 = v81;
      }
      v85 = v79 < v78;
      if (*((_BYTE *)this + 3984) && *((double *)this + 363) > sqrt(*((double *)this + 367)))
        v85 = 1;
      v86 = v77 || v85;
      goto LABEL_153;
    }
LABEL_161:
    sub_18D164CA0();
  }
  return result;
}

uint64_t sub_18D1648E4(uint64_t a1, double *a2, double a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 4) = 0u;
    *(_OWORD *)(a1 + 20) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  if (a3 <= 0.0)
    return 0xFFFFFFFFLL;
  v3 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v3 != -1)
  {
    v4 = *(double *)(a1 + 8) + a3;
    v5 = *(double *)(a1 + 16) + a3 * a3;
    *(double *)(a1 + 8) = v4;
    *(double *)(a1 + 16) = v5;
    v6 = *(double *)(a1 + 24);
    v7 = *(double *)(a1 + 32);
    v8 = *a2 - v6;
    v9 = v6 + a3 / v4 * v8;
    *(_DWORD *)(a1 + 4) = v3 + 1;
    *(double *)(a1 + 24) = v9;
    v10 = v7 + v8 * a3 * (*a2 - v9);
    *(double *)(a1 + 32) = v10;
    if (v10 >= 0.0)
    {
      if (!(_DWORD)v3)
      {
LABEL_10:
        v3 = 0;
        *(_BYTE *)a1 = 1;
        return v3;
      }
      v11 = v4 * v4 - v5;
      if (v11 > 0.000000015)
      {
        v12 = v4 / v11;
        if (v12 > 0.000000015)
        {
          *(double *)(a1 + 40) = v12 * v10;
          goto LABEL_10;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v3;
}

__n128 raven::RavenMovingStateEstimator::HandleEvent(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*(_BYTE *)(a1 + 1392))
  {
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)(a2 + 8);
    v2 = *(_OWORD *)(a2 + 24);
    v3 = *(_OWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1304) = v4;
    *(_OWORD *)(a1 + 1288) = v3;
    *(_OWORD *)(a1 + 1272) = v2;
    result = *(__n128 *)(a2 + 88);
    v6 = *(_OWORD *)(a2 + 104);
    v7 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 1384) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 1368) = v7;
    *(_OWORD *)(a1 + 1352) = v6;
    *(__n128 *)(a1 + 1336) = result;
  }
  else
  {
    *(_QWORD *)(a1 + 1248) = &unk_1E25C24A0;
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1304) = v10;
    *(_OWORD *)(a1 + 1288) = v9;
    *(_OWORD *)(a1 + 1272) = v8;
    result = *(__n128 *)(a2 + 88);
    v11 = *(_OWORD *)(a2 + 104);
    v12 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 1384) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 1368) = v12;
    *(_OWORD *)(a1 + 1352) = v11;
    *(__n128 *)(a1 + 1336) = result;
    *(_BYTE *)(a1 + 1392) = 1;
  }
  return result;
}

uint64_t raven::RavenMovingStateEstimator::HandleEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33[3];
  __int128 v34;
  double v35;
  __int128 v36;
  double v37;
  __int128 v38;
  uint64_t v39;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v6 = v5;
  v7 = *(unsigned __int8 *)(a2 + 104) - 1;
  v38 = *(_OWORD *)(a2 + 120);
  v39 = *(_QWORD *)(a2 + 136);
  v8 = *((double *)&v38 + v7);
  if (*(_BYTE *)(a1 + 1040))
  {
    *(_QWORD *)&v36 = *((_QWORD *)&v38 + v7);
    *((double *)&v36 + 1) = v8;
    v37 = 1.0 - v8;
    v34 = xmmword_18D314850;
    v35 = 0.01;
  }
  else
  {
    v36 = xmmword_18D314850;
    v37 = 0.01;
    *(double *)&v34 = v8;
    *((double *)&v34 + 1) = v8;
    v35 = 1.0 - v8;
  }
  v33[0] = 1.0 - v8;
  v33[1] = 1.0 - v8;
  v9 = *((double *)&v36 + v7);
  v10 = *((double *)&v34 + v7);
  v33[2] = v8;
  v11 = v9 * 0.9 + 0.1;
  v12 = v33[v7] * 0.9 + 0.1;
  v13 = v10 * 0.9 + 0.1;
  v14 = v13 + v11 + v12;
  v15 = v11 / v14;
  v16 = v12 / v14;
  v17 = v13 / v14;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v19 = *(unsigned __int8 *)(a1 + 136);
  *(_QWORD *)(a1 + 72) = sub_18D04DC20;
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = v6;
  *(double *)(a1 + 96) = v15;
  *(double *)(a1 + 104) = v17;
  *(double *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 128) = v20;
  if (!v19)
    *(_BYTE *)(a1 + 136) = 1;
  if (*(_BYTE *)(a1 + 1544))
  {
    *(_OWORD *)(a1 + 1408) = *(_OWORD *)(a2 + 8);
    v21 = *(_OWORD *)(a2 + 24);
    v22 = *(_OWORD *)(a2 + 40);
    v23 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1472) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1456) = v23;
    *(_OWORD *)(a1 + 1440) = v22;
    *(_OWORD *)(a1 + 1424) = v21;
    v24 = *(_OWORD *)(a2 + 88);
    v25 = *(_OWORD *)(a2 + 104);
    v26 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 1536) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 1520) = v26;
    *(_OWORD *)(a1 + 1504) = v25;
    *(_OWORD *)(a1 + 1488) = v24;
  }
  else
  {
    *(_QWORD *)(a1 + 1400) = &unk_1E25C26E8;
    *(_OWORD *)(a1 + 1408) = *(_OWORD *)(a2 + 8);
    v27 = *(_OWORD *)(a2 + 24);
    v28 = *(_OWORD *)(a2 + 40);
    v29 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1472) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1456) = v29;
    *(_OWORD *)(a1 + 1440) = v28;
    *(_OWORD *)(a1 + 1424) = v27;
    v30 = *(_OWORD *)(a2 + 88);
    v31 = *(_OWORD *)(a2 + 104);
    v32 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 1536) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 1520) = v32;
    *(_OWORD *)(a1 + 1504) = v31;
    *(_OWORD *)(a1 + 1488) = v30;
    *(_BYTE *)(a1 + 1544) = 1;
  }
  return result;
}

_QWORD *sub_18D164C78(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

_QWORD *sub_18D164C8C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D164CA0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

void *sub_18D164CD4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_18D0788A0();
  return operator new(4 * a2);
}

_QWORD *sub_18D164D08(_QWORD *result)
{
  *result = &unk_1E25C5DB0;
  return result;
}

_QWORD *sub_18D164D1C(_QWORD *result)
{
  *result = &unk_1E25C5DB0;
  return result;
}

_QWORD *sub_18D164D30(_QWORD *result)
{
  *result = off_1E25C5BD0;
  return result;
}

void sub_18D164D40(_QWORD *a1)
{
  *a1 = off_1E25C5BD0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D164D60(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D164D6C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v9, v4);
      if (v4 >= 3)
      {
        v6 = v9;
        v7 = 8;
        v8 = v3 + v1 - v5;
        do
        {
          if (!v6)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v8 % (v4 - 1))) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v7);
            v6 = 1;
          }
          v8 += v3 + v1 - v5;
          v7 += 8;
        }
        while (8 * (v4 - 1) != v7);
      }
    }
  }
}

void sub_18D164E20(_QWORD *a1)
{
  *a1 = &unk_1E25C5DB0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D164E44(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D164E50(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[3];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D164F24(_QWORD *a1)
{
  *a1 = &unk_1E25C5DB0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D164F48(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D164F54(uint64_t a1)
{
  char v1;

  sub_18D164F74(a1, &v1);
}

void sub_18D164F74(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = (v7 - 1);
        v9 = 1;
        do
        {
          v10 = &a2[v9];
          if (!a2[v9])
          {
            v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v2 - v6)) % (int)v8;
              v13 = *(_QWORD *)(a1 + 32);
              v14 = *(_QWORD *)(v13 + 8 * v12);
              *(_QWORD *)(v13 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &a2[v12];
              v11 = v14;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v8);
      }
    }
  }
}

void sub_18D165038(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D16505C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D165068(uint64_t a1)
{
  char v1;

  sub_18D0894A0(a1, &v1);
}

void sub_18D165088(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1650AC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1650B8(uint64_t a1)
{
  char v1;

  sub_18D159878(a1, &v1);
}

__n128 raven::RavenSolutionSelector::HandleEvent(uint64_t a1, uint64_t a2)
{
  _OWORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  if (!*(_BYTE *)(a1 + 168))
    goto LABEL_12;
  if (*(_BYTE *)(a1 + 402) && *(_BYTE *)(a2 + 226) == 0)
  {
    v5 = (_OWORD *)(a2 + 8);
    if (sub_18D03F608((double *)(a2 + 8), (double *)(a1 + 184)))
    {
      v6 = *(unsigned __int8 *)(a1 + 472);
      *(_OWORD *)(a1 + 480) = *v5;
      if (!v6)
        *(_BYTE *)(a1 + 472) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 168))
  {
    v7 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 184) = v7;
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 248) = v10;
    *(_OWORD *)(a1 + 232) = v9;
    *(_OWORD *)(a1 + 216) = v8;
    v11 = *(_OWORD *)(a2 + 104);
    v12 = *(_OWORD *)(a2 + 120);
    v13 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 328) = v13;
    *(_OWORD *)(a1 + 280) = v11;
    *(_OWORD *)(a1 + 296) = v12;
    result = *(__n128 *)(a2 + 168);
    v15 = *(_OWORD *)(a2 + 184);
    v16 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a2 + 212);
    *(_OWORD *)(a1 + 360) = v15;
    *(_OWORD *)(a1 + 376) = v16;
    *(__n128 *)(a1 + 344) = result;
  }
  else
  {
LABEL_12:
    *(_QWORD *)(a1 + 176) = &unk_1E25C38D8;
    result = *(__n128 *)(a2 + 168);
    v17 = *(_OWORD *)(a2 + 184);
    v18 = *(_OWORD *)(a2 + 200);
    v19 = *(_OWORD *)(a2 + 212);
    v20 = *(_OWORD *)(a2 + 104);
    v21 = *(_OWORD *)(a2 + 120);
    v22 = *(_OWORD *)(a2 + 136);
    v23 = *(_OWORD *)(a2 + 152);
    v24 = *(_OWORD *)(a2 + 40);
    v25 = *(_OWORD *)(a2 + 56);
    v26 = *(_OWORD *)(a2 + 72);
    v27 = *(_OWORD *)(a2 + 88);
    v28 = *(_OWORD *)(a2 + 8);
    v29 = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 168) = 1;
    v30 = a1 + 168;
    *(_OWORD *)(v30 + 16) = v28;
    *(_OWORD *)(v30 + 32) = v29;
    *(_OWORD *)(v30 + 80) = v26;
    *(_OWORD *)(v30 + 96) = v27;
    *(_OWORD *)(v30 + 48) = v24;
    *(_OWORD *)(v30 + 64) = v25;
    *(_OWORD *)(v30 + 144) = v22;
    *(_OWORD *)(v30 + 160) = v23;
    *(_OWORD *)(v30 + 112) = v20;
    *(_OWORD *)(v30 + 128) = v21;
    *(_OWORD *)(v30 + 220) = v19;
    *(_OWORD *)(v30 + 192) = v17;
    *(_OWORD *)(v30 + 208) = v18;
    *(__n128 *)(v30 + 176) = result;
  }
  return result;
}

uint64_t sub_18D16522C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x998uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_BYTE *)v8 + 16) = **a3;
  result = sub_18D0409EC((uint64_t)(v8 + 3));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_18D165298(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_18D1652B0(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_18D16538C(a1, prime);
  }
}

void sub_18D16538C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_18D0788A0();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t **sub_18D1654E4(_QWORD *a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t ***v5;
  uint64_t **result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ****)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t **)*result)
  {
    v7 = (unint64_t)result[1];
    if (v7 == a2)
    {
      if (*((unsigned __int8 *)result + 16) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_18D165598(float *a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_18D0788A0();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_18D165974(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::AltitudeChangeChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 + 2512);
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::AltitudeChangeChecker::HandleEvent(raven::AltitudeChangeChecker *this, const raven::AltitudeChangeEvent *a2, raven::AltitudeChangeEvent *a3)
{
  double v5;
  uint64_t result;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  BOOL v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  int v27;
  double v28;
  uint64_t **v29;
  double v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  _BYTE v49[112];
  _BYTE v50[112];
  _QWORD v51[22];
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void (**v67)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[2];
  double v75;
  float64x2_t v76;
  uint64_t *v77;
  float64x2_t v78;
  uint64_t *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v51[0]) = 12;
    LOBYTE(v67) = 4;
    v33 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *, const raven::AltitudeChangeEvent *, raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v47 = v34 + (double)v33;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v51, (unsigned __int8 *)&v67, "t,%.3lf,AltitudeChangeChecker, not configured", v35, v36, v37, v38, v39, SLOBYTE(v47));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 56) == 9)
    return 0xFFFFFFFFLL;
  v5 = *((double *)a2 + 25);
  if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if ((*((_QWORD *)a2 + 26) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 26) <= 0.0)
    return result;
  v51[0] = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v51[1] = v8;
  v11 = CNTimeSpan::operator-((uint64_t)v51, (_QWORD *)a2 + 13, v9, v10);
  v13 = v12 + (double)v11;
  v14 = (unint64_t)(COERCE__INT64(fabs(v13)) - 0x10000000000000) >> 53;
  v15 = v13 < 0.0 || v14 > 0x3FE;
  if (v15 && (unint64_t)(*(_QWORD *)&v13 - 1) > 0xFFFFFFFFFFFFELL)
    return 0xFFFFFFFFLL;
  *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
  v17 = *(_OWORD *)((char *)a2 + 24);
  v18 = *(_OWORD *)((char *)a2 + 40);
  v19 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 56) = v19;
  *(_OWORD *)((char *)a3 + 40) = v18;
  *(_OWORD *)((char *)a3 + 24) = v17;
  v20 = *(_OWORD *)((char *)a2 + 88);
  v21 = *(_OWORD *)((char *)a2 + 104);
  v22 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)a3 + 120) = v22;
  *(_OWORD *)((char *)a3 + 104) = v21;
  *(_OWORD *)((char *)a3 + 88) = v20;
  v23 = *(_OWORD *)((char *)a2 + 152);
  v24 = *(_OWORD *)((char *)a2 + 168);
  v25 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a3 + 200) = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)a3 + 184) = v25;
  *(_OWORD *)((char *)a3 + 168) = v24;
  *(_OWORD *)((char *)a3 + 152) = v23;
  if (!*((_BYTE *)this + 9))
    return 0;
  v26 = *((double *)a2 + 26);
  result = (uint64_t)sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314987);
  if (!result)
    return result;
  if (!*((_BYTE *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314987) + 1544))
    return 0;
  v78 = *((float64x2_t *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314987) + 92);
  v79 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314987)[186];
  v76 = *((float64x2_t *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314987) + 97);
  v77 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314987)[196];
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0.0;
  v68 = 0;
  v71 = 0x300000003;
  v69 = &unk_1E25C78E0;
  v70 = xmmword_18D30BB60;
  v72 = &v73;
  v67 = &off_1E25B9560;
  cnnavigation::ECEFToENU(&v76, 1, 0, &v78, 1, (uint64_t)v74, (uint64_t)&v67, COERCE_DOUBLE(0x300000003));
  if (v27)
    return 0;
  v28 = v75;
  v64 = 0x300000003;
  v62 = &unk_1E25C78E0;
  v63 = xmmword_18D30BB60;
  v65 = &v66;
  v29 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314987);
  if (!sub_18D165E74((uint64_t)(v29 + 146), (uint64_t)&v62))
  {
    LOWORD(v51[0]) = 12;
    LOBYTE(v57) = 2;
    v40 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
    v48 = v41 + (double)v40;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v51, (unsigned __int8 *)&v57, "t,%.3lf,WARNING: Altitude change checker, difference with current solution not checked, can't get velocity covariance", v42, v43, v44, v45, v46, SLOBYTE(v48));
    return 0;
  }
  v59 = 0x300000003;
  v57 = &unk_1E25C78E0;
  v58 = xmmword_18D30BB60;
  v60 = &v61;
  if (v68)
    sub_18D053AA8((uint64_t)&v57, (uint64_t)&v69);
  v54 = 0x300000003;
  v52 = &unk_1E25C78E0;
  v53 = xmmword_18D314670;
  v55 = &v56;
  sub_18D165F0C(":", (uint64_t)&v57, 2, (uint64_t)v51);
  sub_18D053AA8((uint64_t)&v52, (uint64_t)v51);
  sub_18D166008((uint64_t)&v52, (uint64_t)&v62, (uint64_t)v50);
  sub_18D16606C((uint64_t)&v52, (uint64_t)v49);
  sub_18D166008((uint64_t)v50, (uint64_t)v49, (uint64_t)v51);
  v30 = sqrt(*(double *)v51[4]);
  v31 = fabs(vabdd_f64(v5 / v13, v28) / sqrt(v26 / v13 * (v26 / v13) + v30 * v30)) > *((double *)this + 3);
  if (*((_BYTE *)this + 8))
    v32 = v31;
  else
    v32 = 1;
  return (v32 << 31 >> 31);
}

BOOL sub_18D165E74(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(a1 + 376);
  if (*(_BYTE *)(a1 + 376))
  {
    if (*(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3)
    {
      v4 = *(_DWORD *)(a2 + 20);
    }
    else
    {
      *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
      v4 = 3;
    }
    v5 = *(_QWORD **)(a2 + 32);
    *v5 = *(_QWORD *)(a1 + 408);
    v6 = &v5[v4];
    *v6 = *(_QWORD *)(a1 + 416);
    v5[2 * v4] = *(_QWORD *)(a1 + 424);
    v5[1] = *(_QWORD *)(a1 + 416);
    v6[1] = *(_QWORD *)(a1 + 432);
    v7 = &v5[2 * v4];
    v7[1] = *(_QWORD *)(a1 + 440);
    v5[2] = *(_QWORD *)(a1 + 424);
    v6[2] = *(_QWORD *)(a1 + 440);
    v7[2] = *(_QWORD *)(a1 + 448);
  }
  return v2 != 0;
}

uint64_t sub_18D165F0C@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  __int128 v7;
  int v8;
  int i;
  void *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD v18[4];
  void *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  int v23;

  if (strcmp(__s1, ":"))
    __assert_rtn("operator()", "cnmatrix.h", 992, "strcmp(c, \":\") == 0");
  v21 = 0x100000001;
  v19 = &unk_1E25C6A70;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  v20 = v7;
  v22 = &v23;
  v23 = a3;
  v8 = *(_DWORD *)(a2 + 12);
  v16 = 0x100000003;
  v11 = &unk_1E25C77C0;
  v12 = v8;
  v13 = 1;
  v14 = v8;
  v15 = v8;
  v17 = v18;
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      v18[i] = i;
  }
  return sub_18D1633C8(a4, a2, (uint64_t)&v19, (uint64_t)&v11);
}

void sub_18D166008(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = &unk_1E25C78E0;
  *(_OWORD *)(a3 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D166058(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D16606C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  return sub_18D073454(a1, a2);
}

void sub_18D1660C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSignalEnvironmentActiveObject::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v15;
  __int16 *v16;
  char *v17;
  char v18;
  char v19;
  __int16 v20;
  char v21;
  __int16 v22;
  char v23;
  __int16 v24;
  unsigned __int8 v25;
  __int16 v26;

  if (*(_BYTE *)(a1 + 480))
  {
    v26 = 12;
    v25 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "RavenSignalEnvironmentActiveObject::Configure() called more than once", a4, a5, a6, a7, a8, v18);
    *(_BYTE *)(a1 + 480) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(v10 + 33))
    {
      *(_QWORD *)(a1 + 488) = v10;
      v11 = *(_QWORD *)(v10 + 3168);
      if (v11 > -1 && ((v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
        || (unint64_t)(v11 - 1) < 0xFFFFFFFFFFFFFLL)
      {
        return 0;
      }
      v20 = 12;
      v19 = 4;
      v15 = "RavenSignalEnvironmentActiveObject::Configure() invalid event interval";
      v16 = &v20;
      v17 = &v19;
    }
    else
    {
      v22 = 12;
      v21 = 4;
      v15 = "RavenSignalEnvironmentActiveObject::Configure() called with uninitialized parameters";
      v16 = &v22;
      v17 = &v21;
    }
  }
  else
  {
    v24 = 12;
    v23 = 4;
    v15 = "RavenSignalEnvironmentActiveObject::Configure() called with null pointer";
    v16 = &v24;
    v17 = &v23;
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v16, (unsigned __int8 *)v17, v15, a4, a5, a6, a7, a8, v18);
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenSignalEnvironmentActiveObject::IsConfigured(raven::RavenSignalEnvironmentActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void raven::RavenSignalEnvironmentActiveObject::HandleEvent(raven::RavenSignalEnvironmentActiveObject *this, const raven::SignalEnvironmentEvent *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  __n128 v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  unsigned __int8 v43;
  __int16 v44;
  unsigned __int8 v45;
  __int16 v46;

  v4 = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(_QWORD *)a2 + 16))(a2);
  v11 = fabs(v5 + (double)v4);
  if ((unint64_t)(*(_QWORD *)&v11 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(_QWORD *)&v11 - 1) >= 0xFFFFFFFFFFFFFLL
    && COERCE__INT64(v5 + (double)v4) != 0)
  {
    v46 = 12;
    v45 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v45, "Invalid signal environment time", v6, v7, v8, v9, v10, v42);
    return;
  }
  if (!*((_BYTE *)this + 496))
  {
LABEL_27:
    *((_QWORD *)this + 63) = &unk_1E25C2FC8;
    v37 = *(_OWORD *)((char *)a2 + 8);
    v38 = *(_OWORD *)((char *)a2 + 40);
    *((_OWORD *)this + 33) = *(_OWORD *)((char *)a2 + 24);
    *((_OWORD *)this + 34) = v38;
    *((_OWORD *)this + 32) = v37;
    v39 = *(_OWORD *)((char *)a2 + 56);
    v40 = *(_OWORD *)((char *)a2 + 72);
    v41 = *(_OWORD *)((char *)a2 + 88);
    *((_BYTE *)this + 608) = *((_BYTE *)a2 + 104);
    *((_OWORD *)this + 36) = v40;
    *((_OWORD *)this + 37) = v41;
    *((_OWORD *)this + 35) = v39;
    *((_BYTE *)this + 496) = 1;
    return;
  }
  v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 63) + 16))((char *)this + 504);
  v16 = v15;
  v17 = v15;
  v18 = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(_QWORD *)a2 + 16))(a2);
  v20.n128_f64[0] = v19;
  if (v14)
    v21 = 1;
  else
    v21 = (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (!v21
    || (!v18 ? (v22 = (*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v22 = 1),
        !v22 || (v23 = v14 <= v18, v14 == v18)))
  {
    v23 = v17 <= v19;
  }
  if (v23)
  {
    if (*((_BYTE *)this + 496))
    {
      v32 = *(_OWORD *)((char *)a2 + 8);
      v33 = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)this + 33) = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)this + 34) = v33;
      *((_OWORD *)this + 32) = v32;
      v34 = *(_OWORD *)((char *)a2 + 56);
      v35 = *(_OWORD *)((char *)a2 + 72);
      v36 = *(_OWORD *)((char *)a2 + 88);
      *((_BYTE *)this + 608) = *((_BYTE *)a2 + 104);
      *((_OWORD *)this + 36) = v35;
      *((_OWORD *)this + 37) = v36;
      *((_OWORD *)this + 35) = v34;
      return;
    }
    goto LABEL_27;
  }
  v44 = 12;
  v43 = 4;
  if (!*((_BYTE *)this + 496))
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  v24 = (*(uint64_t (**)(char *, __n128))(*((_QWORD *)this + 63) + 16))((char *)this + 504, v20);
  v26 = v25 + (double)v24;
  (*(void (**)(const raven::SignalEnvironmentEvent *))(*(_QWORD *)a2 + 16))(a2);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "Signal environment received out of order,t_curr,%.3lf,t_new,%.3lf", v27, v28, v29, v30, v31, SLOBYTE(v26));
}

void sub_18D166420(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D166584(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D1664F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18D166514(cnframework::ActiveObjectBase *a1)
{
  *(_QWORD *)a1 = &off_1E25C40E0;
  if (*((_BYTE *)a1 + 616))
    *((_BYTE *)a1 + 616) = 0;
  if (*((_BYTE *)a1 + 496))
    *((_BYTE *)a1 + 496) = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

void sub_18D16653C(cnframework::ActiveObjectBase *a1)
{
  *(_QWORD *)a1 = &off_1E25C40E0;
  if (*((_BYTE *)a1 + 616))
    *((_BYTE *)a1 + 616) = 0;
  if (*((_BYTE *)a1 + 496))
    *((_BYTE *)a1 + 496) = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D166584@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D1665DC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D1665C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1665DC(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D166670((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D166614(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18D166628(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D16663C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D166670(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D166788(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D166748(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D166788(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C1AE0;
  *(_QWORD *)(v4 + 8) = &unk_1E25C2FC8;
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v6;
  *(_BYTE *)(v4 + 112) = *(_BYTE *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v5;
  v8 = *a1;
  *a1 = v4;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_18D16682C()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D166840()
{
}

__n128 sub_18D16684C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1AE0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2FC8;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_BYTE *)(v2 + 112) = *(_BYTE *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

uint64_t raven::RavenRayTracingActiveObject::RavenRayTracingActiveObject(uint64_t a1, _BYTE *a2)
{
  int64x2_t *v3;

  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  v3->i64[0] = (uint64_t)&off_1E25C36C8;
  v3[30].i8[0] = 0;
  v3[30].i64[1] = 0;
  raven::RavenNLOSEngine::RavenNLOSEngine(v3 + 31);
  return a1;
}

void sub_18D166900(_Unwind_Exception *a1)
{
  cnframework::ActiveObjectBase *v1;

  cnframework::ActiveObjectBase::~ActiveObjectBase(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenRayTracingActiveObject::Configure(int64x2_t *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  cnprint::CNPrinter *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  unsigned __int8 v39;
  __int16 v40;
  uint64_t v41;
  void *__p[2];
  char v43;

  if (this[30].i8[0])
  {
    LOWORD(v41) = 12;
    LOBYTE(v40) = 3;
    sub_18D0778AC(__p, "RavenRayTracingActiveObject");
    if (v43 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v40, "#ray,Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v43 < 0)
      operator delete(__p[0]);
  }
  this[30].i8[0] = 0;
  v10 = *a2;
  if (*a2 && *(_BYTE *)(v10 + 33))
  {
    this[30].i64[1] = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)this, 0.0);
    v41 = *a2;
    v17 = raven::RavenNLOSEngine::Configure((uint64_t)this[31].i64, &v41, v11, v12, v13, v14, v15, v16);
    if ((_DWORD)v17)
    {
      v18 = v17;
      v40 = 12;
      v39 = 4;
      sub_18D0778AC(__p, "RavenRayTracingActiveObject");
      if (v43 >= 0)
        v24 = __p;
      else
        LOBYTE(v24) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "#ray,%s could not be configured: NLOS engine configuration result %d", v19, v20, v21, v22, v23, (char)v24);
      if (v43 < 0)
        operator delete(__p[0]);
    }
    else
    {
      this[30].i8[0] = 1;
      raven::RavenRayTracingActiveObject::Reset(this);
      if (cnprint::CNPrinter::GetLogLevel(v32) <= 1)
      {
        LOWORD(v41) = 12;
        LOBYTE(v40) = 1;
        sub_18D0778AC(__p, "RavenRayTracingActiveObject");
        if (v43 >= 0)
          v38 = __p;
        else
          LOBYTE(v38) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v40, "#ray,%s configured successfully.", v33, v34, v35, v36, v37, (char)v38);
        if (v43 < 0)
          operator delete(__p[0]);
      }
      return 0;
    }
  }
  else
  {
    LOWORD(v41) = 12;
    LOBYTE(v40) = 4;
    sub_18D0778AC(__p, "RavenRayTracingActiveObject");
    if (v43 >= 0)
      v30 = __p;
    else
      LOBYTE(v30) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v40, "#ray,%s could not be configured: invalid RavenParameters", v25, v26, v27, v28, v29, (char)v30);
    if (v43 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  return v18;
}

void sub_18D166B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenRayTracingActiveObject::IsConfigured(raven::RavenRayTracingActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

_QWORD *raven::RavenRayTracingActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenRayTracingActiveObject");
}

void raven::RavenRayTracingActiveObject::Reset(int64x2_t *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  v11 = 12;
  v10 = 2;
  sub_18D0778AC(__p, "RavenRayTracingActiveObject");
  if (v9 >= 0)
    v7 = __p;
  else
    LOBYTE(v7) = __p[0];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "#ray,resetting %s", v2, v3, v4, v5, v6, (char)v7);
  if (v9 < 0)
    operator delete(__p[0]);
  raven::RavenNLOSEngine::Reset(this + 31);
  cnframework::ActiveObjectBase::ResetCurrentTime((cnframework::ActiveObjectBase *)this);
  cnframework::ActiveObjectBase::ResetEventQueue((cnframework::ActiveObjectBase *)this);
}

void sub_18D166C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::ActivityStateEvent *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  unsigned __int8 v28;
  __int16 v29;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 504))
    {
      if (*((_BYTE *)this + 952))
      {
        v3 = *(_OWORD *)((char *)a2 + 8);
        v4 = *(_OWORD *)((char *)a2 + 24);
        v5 = *(_OWORD *)((char *)a2 + 56);
        *((_OWORD *)this + 50) = *(_OWORD *)((char *)a2 + 40);
        *((_OWORD *)this + 51) = v5;
        *((_OWORD *)this + 48) = v3;
        *((_OWORD *)this + 49) = v4;
        v6 = *(_OWORD *)((char *)a2 + 72);
        v7 = *(_OWORD *)((char *)a2 + 88);
        v8 = *(_OWORD *)((char *)a2 + 120);
        *((_OWORD *)this + 54) = *(_OWORD *)((char *)a2 + 104);
        *((_OWORD *)this + 55) = v8;
        *((_OWORD *)this + 52) = v6;
        *((_OWORD *)this + 53) = v7;
        result = *(__n128 *)((char *)a2 + 136);
        v10 = *(_OWORD *)((char *)a2 + 152);
        v11 = *(_OWORD *)((char *)a2 + 168);
        *((_QWORD *)this + 118) = *((_QWORD *)a2 + 23);
        *((_OWORD *)this + 57) = v10;
        *((_OWORD *)this + 58) = v11;
        *((__n128 *)this + 56) = result;
      }
      else
      {
        *((_QWORD *)this + 95) = &unk_1E25C2AB0;
        v19 = *(_OWORD *)((char *)a2 + 8);
        v20 = *(_OWORD *)((char *)a2 + 24);
        v21 = *(_OWORD *)((char *)a2 + 56);
        *((_OWORD *)this + 50) = *(_OWORD *)((char *)a2 + 40);
        *((_OWORD *)this + 51) = v21;
        *((_OWORD *)this + 48) = v19;
        *((_OWORD *)this + 49) = v20;
        v22 = *(_OWORD *)((char *)a2 + 72);
        v23 = *(_OWORD *)((char *)a2 + 88);
        v24 = *(_OWORD *)((char *)a2 + 120);
        *((_OWORD *)this + 54) = *(_OWORD *)((char *)a2 + 104);
        *((_OWORD *)this + 55) = v24;
        *((_OWORD *)this + 52) = v22;
        *((_OWORD *)this + 53) = v23;
        result = *(__n128 *)((char *)a2 + 136);
        v25 = *(_OWORD *)((char *)a2 + 152);
        v26 = *(_OWORD *)((char *)a2 + 168);
        *((_QWORD *)this + 118) = *((_QWORD *)a2 + 23);
        *((_OWORD *)this + 57) = v25;
        *((_OWORD *)this + 58) = v26;
        *((__n128 *)this + 56) = result;
        *((_BYTE *)this + 952) = 1;
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v29 = 12;
    v28 = 1;
    v12 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v27 = v13 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "#ray,time,%.3lf,not configured", v14, v15, v16, v17, v18, SLOBYTE(v27));
  }
  return result;
}

double raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::GEOMapBuildingDataEvent *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unsigned __int8 v18;
  __int16 v19;

  if (*((_BYTE *)this + 480))
  {
    raven::RavenNLOSEngine::HandleEvent((raven::RavenRayTracingActiveObject *)((char *)this + 496), a2, a3, a4, a5, a6, a7, a8);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v19 = 12;
    v18 = 1;
    v10 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(_QWORD *)a2 + 16))(a2);
    v17 = v11 + (double)v10;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "#ray,time,%.3lf,not configured", v12, v13, v14, v15, v16, SLOBYTE(v17));
  }
  return result;
}

double raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  _QWORD *v4;
  double result;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  void (**v14)(raven::GnssPreprocessedMeasurementsEvent *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  void **v22;

  if (*((_BYTE *)this + 480))
  {
    v14 = off_1E25C3EC8;
    v17 = *(_OWORD *)((char *)a2 + 40);
    v18 = *(_OWORD *)((char *)a2 + 56);
    v19 = *(_OWORD *)((char *)a2 + 72);
    v15 = *(_OWORD *)((char *)a2 + 8);
    v16 = *(_OWORD *)((char *)a2 + 24);
    v4 = (_QWORD *)*((_QWORD *)a2 + 12);
    v20 = *((_QWORD *)a2 + 11);
    memset(v21, 0, sizeof(v21));
    sub_18D16727C((char *)v21, v4, *((_QWORD **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - (_QWORD)v4) >> 4);
    raven::RavenNLOSEngine::HandleEvent((raven::RavenRayTracingActiveObject *)((char *)this + 496), (raven::GnssPreprocessedMeasurementsEvent *)&v14);
    sub_18D166F34((uint64_t)this, (uint64_t)&v14);
    v14 = off_1E25C3EC8;
    v22 = (void **)v21;
    sub_18D07C7AC(&v22);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(v14) = 12;
    LOBYTE(v22) = 1;
    v6 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v13 = v7 + (double)v6;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, (unsigned __int8 *)&v22, "#ray,time,%.3lf,not configured", v8, v9, v10, v11, v12, SLOBYTE(v13));
  }
  return result;
}

void sub_18D166F18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  sub_18D07C7AC((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_18D166F34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D167390(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D16700C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

double raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::RavenSolutionEvent *a2)
{
  double result;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unsigned __int8 v12;
  __int16 v13;

  if (*((_BYTE *)this + 480))
  {
    raven::RavenNLOSEngine::HandleEvent((char *)this + 496, a2);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v13 = 12;
    v12 = 1;
    v4 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v11 = v5 + (double)v4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "#ray,time,%.3lf,not configured", v6, v7, v8, v9, v10, SLOBYTE(v11));
  }
  return result;
}

void raven::RavenRayTracingActiveObject::HandleEvent(int64x2_t *this, const raven::RavenSystemEvent *a2)
{
  if (!*((_DWORD *)a2 + 26))
    raven::RavenRayTracingActiveObject::Reset(this);
}

double raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::RayTracingTileEvent *a2)
{
  double result;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unsigned __int8 v12;
  __int16 v13;

  if (*((_BYTE *)this + 480))
  {
    raven::RavenNLOSEngine::HandleEvent((raven::RavenRayTracingActiveObject *)((char *)this + 496), a2);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v13 = 12;
    v12 = 1;
    v4 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
    v11 = v5 + (double)v4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "#ray,time,%.3lf,not configured", v6, v7, v8, v9, v10, SLOBYTE(v11));
  }
  return result;
}

__n128 raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::SignalEnvironmentEvent *a2)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  unsigned __int8 v20;
  __int16 v21;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 504))
    {
      if (*((_BYTE *)this + 3512))
      {
        v3 = *(_OWORD *)((char *)a2 + 8);
        v4 = *(_OWORD *)((char *)a2 + 24);
        *((_OWORD *)this + 215) = *(_OWORD *)((char *)a2 + 40);
        *((_OWORD *)this + 214) = v4;
        *((_OWORD *)this + 213) = v3;
        result = *(__n128 *)((char *)a2 + 56);
        v6 = *(_OWORD *)((char *)a2 + 72);
        v7 = *(_OWORD *)((char *)a2 + 88);
        *((_BYTE *)this + 3504) = *((_BYTE *)a2 + 104);
        *((_OWORD *)this + 218) = v7;
        *((_OWORD *)this + 217) = v6;
        *((__n128 *)this + 216) = result;
      }
      else
      {
        *((_QWORD *)this + 425) = &unk_1E25C2FC8;
        v15 = *(_OWORD *)((char *)a2 + 8);
        v16 = *(_OWORD *)((char *)a2 + 24);
        *((_OWORD *)this + 215) = *(_OWORD *)((char *)a2 + 40);
        *((_OWORD *)this + 214) = v16;
        *((_OWORD *)this + 213) = v15;
        result = *(__n128 *)((char *)a2 + 56);
        v17 = *(_OWORD *)((char *)a2 + 72);
        v18 = *(_OWORD *)((char *)a2 + 88);
        *((_BYTE *)this + 3504) = *((_BYTE *)a2 + 104);
        *((_OWORD *)this + 218) = v18;
        *((_OWORD *)this + 217) = v17;
        *((__n128 *)this + 216) = result;
        *((_BYTE *)this + 3512) = 1;
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v21 = 12;
    v20 = 1;
    v8 = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(_QWORD *)a2 + 16))(a2);
    v19 = v9 + (double)v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v21, &v20, "#ray,time,%.3lf,not configured", v10, v11, v12, v13, v14, SLOBYTE(v19));
  }
  return result;
}

char *sub_18D16727C(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_18D16731C(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18D167308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_18D07C7AC(&a9);
  _Unwind_Resume(a1);
}

char *sub_18D16731C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_18D07AFE4();
  result = (char *)sub_18D16735C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_18D16735C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_18D0788A0();
  return operator new(16 * a2);
}

_QWORD *sub_18D167390@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D1673E8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D1673D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1673E8(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D167434((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D167420(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D167434(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D16754C(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D16750C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D16754C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_18D16759C(&v6, a2);
  v3 = v6;
  v6 = *a1;
  v4 = v6;
  *a1 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t *sub_18D16759C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  char *v6;
  __int128 v7;
  char *v8;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C1D80;
  *(_QWORD *)(v4 + 8) = off_1E25C3EC8;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  v6 = *(char **)(a2 + 96);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  v8 = *(char **)(a2 + 104);
  *(_QWORD *)(v4 + 104) = 0;
  sub_18D16727C((char *)(v4 + 104), v6, v8, (v8 - v6) >> 4);
  *a1 = v4;
  return a1;
}

void sub_18D167644(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10A1C404D7B42C5);
  _Unwind_Resume(a1);
}

uint64_t sub_18D167668(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 8) = off_1E25C3EC8;
  v3 = (void **)(a1 + 104);
  sub_18D07C7AC(&v3);
  return a1;
}

void *sub_18D1676B0()
{
}

uint64_t sub_18D1676BC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  __int128 v5;
  char *v6;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1D80;
  *(_QWORD *)(v2 + 8) = off_1E25C3EC8;
  v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v3;
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  v4 = *(char **)(a1 + 104);
  *(_QWORD *)(v2 + 96) = *(_QWORD *)(a1 + 96);
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  v6 = *(char **)(a1 + 112);
  *(_QWORD *)(v2 + 104) = 0;
  sub_18D16727C((char *)(v2 + 104), v4, v6, (v6 - v4) >> 4);
  return v2;
}

void sub_18D16774C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10A1C404D7B42C5);
  _Unwind_Resume(a1);
}

uint64_t raven::OdometerChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 + 2512);
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::OdometerChecker::HandleEvent(raven::OdometerChecker *this, const raven::OdometerEvent *a2, raven::OdometerEvent *a3)
{
  double v5;
  uint64_t result;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  uint64_t **v27;
  int v28;
  uint64_t **v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t **v41;
  double v42;
  double v43;
  _BOOL4 v44;
  int v45;
  double v46;
  _QWORD v47[2];
  unsigned __int8 v48;

  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v47[0]) = 12;
    v48 = 4;
    v32 = (*(uint64_t (**)(const raven::OdometerEvent *, const raven::OdometerEvent *, raven::OdometerEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v46 = v33 + (double)v32;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v47, &v48, "t,%.3lf,OdometerChecker, not configured", v34, v35, v36, v37, v38, SLOBYTE(v46));
    return 0xFFFFFFFFLL;
  }
  v5 = *((double *)a2 + 25);
  result = 0xFFFFFFFFLL;
  if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v5 < 0.0
    || (*((_QWORD *)a2 + 26) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a2 + 26) <= 0.0)
  {
    return result;
  }
  v47[0] = (*(uint64_t (**)(const raven::OdometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  v47[1] = v8;
  v11 = CNTimeSpan::operator-((uint64_t)v47, (_QWORD *)a2 + 13, v9, v10);
  v13 = v12 + (double)v11;
  v14 = (unint64_t)(COERCE__INT64(fabs(v13)) - 0x10000000000000) >> 53;
  if ((v13 < 0.0 || v14 > 0x3FE) && (unint64_t)(*(_QWORD *)&v13 - 1) > 0xFFFFFFFFFFFFELL)
    return 0xFFFFFFFFLL;
  *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
  v17 = *(_OWORD *)((char *)a2 + 24);
  v18 = *(_OWORD *)((char *)a2 + 40);
  v19 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 56) = v19;
  *(_OWORD *)((char *)a3 + 40) = v18;
  *(_OWORD *)((char *)a3 + 24) = v17;
  v20 = *(_OWORD *)((char *)a2 + 88);
  v21 = *(_OWORD *)((char *)a2 + 104);
  v22 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)a3 + 120) = v22;
  *(_OWORD *)((char *)a3 + 104) = v21;
  *(_OWORD *)((char *)a3 + 88) = v20;
  v23 = *(_OWORD *)((char *)a2 + 152);
  v24 = *(_OWORD *)((char *)a2 + 168);
  v25 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a3 + 200) = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)a3 + 184) = v25;
  *(_OWORD *)((char *)a3 + 168) = v24;
  *(_OWORD *)((char *)a3 + 152) = v23;
  if (!*((_BYTE *)this + 9))
    return 0;
  result = (uint64_t)sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68);
  if (!result)
    return result;
  v26 = *((double *)a2 + 26);
  v27 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68);
  if (!v27
    || (v28 = *((unsigned __int8 *)v27 + 1368),
        (v29 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68)) == 0))
  {
    sub_18D077838("unordered_map::at: key not found");
  }
  if (!v28)
  {
    if (*((_BYTE *)v29 + 1568))
    {
      v39 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68) + 194);
      v40 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68) + 195);
      v41 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68);
      v30 = sqrt(v40 * v40 + v39 * v39 + *((double *)v41 + 196) * *((double *)v41 + 196));
      v42 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68) + 197);
      v43 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68) + 200);
      v31 = v42
          + v43
          + *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68) + 202);
      goto LABEL_24;
    }
    return 0;
  }
  v30 = *((double *)v29 + 172);
  v31 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D314B68) + 173);
LABEL_24:
  v44 = fabs(vabdd_f64(v5 / v13, v30) / sqrt(v31 + v26 / v13 * (v26 / v13))) > *((double *)this + 3);
  if (*((_BYTE *)this + 8))
    v45 = v44;
  else
    v45 = 1;
  return (v45 << 31 >> 31);
}

_QWORD *raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper::Instance(raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper *this)
{
  _QWORD *result;

  result = (_QWORD *)qword_1EE0618D0;
  if (!qword_1EE0618D0)
  {
    result = (_QWORD *)operator new();
    *result = off_1E25C2E68;
    qword_1EE0618D0 = (uint64_t)result;
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper::GetUncertaintyScaleFactorCore(cnprint::CNPrinter *a1, _DWORD *a2, unsigned __int8 *a3, _BYTE *a4, _BYTE *a5, uint64_t *a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  if ((_DWORD)a8)
  {
    v11 = 0;
    v12 = 0;
    return v12 | v11;
  }
  v31 = v9;
  v32 = v10;
  switch(*a4)
  {
    case 0:
      if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
      {
        v30 = 12;
        v29 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s signal environment unknown", v17, v18, v19, v20, v21, (char)"GetUncertaintyScaleFactorCore");
      }
      goto LABEL_57;
    case 1:
    case 2:
    case 5:
      v14 = (char)*a5;
      if (v14 >= 0xA)
        goto LABEL_57;
      v12 = qword_18D315170[v14];
      goto LABEL_6;
    case 3:
    case 4:
      v15 = *a3;
      if (v15 > 0xA)
        goto LABEL_13;
      if (((1 << v15) & 0x1F6) == 0)
      {
        if (((1 << v15) & 0x601) != 0)
          goto LABEL_29;
        goto LABEL_57;
      }
      if (*a5 != 5 || (*a2 - 2) > 2)
        goto LABEL_57;
      v16 = qword_1ECF22F70;
      if (!qword_1ECF22F70)
      {
        v16 = operator new();
        *(_OWORD *)(v16 + 64) = xmmword_18D314CE8;
        *(_OWORD *)(v16 + 80) = unk_18D314CF8;
        *(_OWORD *)(v16 + 96) = xmmword_18D314D08;
        *(_OWORD *)(v16 + 112) = unk_18D314D18;
        *(_OWORD *)v16 = xmmword_18D314CA8;
        *(_OWORD *)(v16 + 16) = unk_18D314CB8;
        a9 = 6.2544e-36;
        *(_OWORD *)(v16 + 32) = xmmword_18D314CC8;
        *(_OWORD *)(v16 + 48) = unk_18D314CD8;
        *(_DWORD *)(v16 + 128) = 33751812;
        *(_DWORD *)(v16 + 132) = 1045220557;
        qword_1ECF22F70 = v16;
      }
      goto LABEL_52;
    case 6:
      v22 = *a3;
      if (v22 > 0xA)
        goto LABEL_13;
      if (((1 << v22) & 0x1F6) != 0)
      {
        v23 = *a5;
        if ((v23 - 2) >= 2 && v23 != 6)
        {
          if (v23 == 5)
          {
            if (*a2 == 1)
            {
              v16 = qword_1ECF22F98;
              if (!qword_1ECF22F98)
              {
                v16 = operator new();
                *(_OWORD *)(v16 + 64) = xmmword_18D314F90;
                *(_OWORD *)(v16 + 80) = unk_18D314FA0;
                *(_OWORD *)(v16 + 96) = xmmword_18D314FB0;
                *(_OWORD *)(v16 + 112) = unk_18D314FC0;
                *(_OWORD *)v16 = xmmword_18D314F50;
                *(_OWORD *)(v16 + 16) = unk_18D314F60;
                a9 = 1.5636e-36;
                *(_OWORD *)(v16 + 32) = xmmword_18D314F70;
                *(_OWORD *)(v16 + 48) = unk_18D314F80;
                *(_DWORD *)(v16 + 128) = 134875406;
                *(_DWORD *)(v16 + 132) = 1045220557;
                qword_1ECF22F98 = v16;
              }
            }
            else
            {
              v16 = qword_1ECF22FA0;
              if (!qword_1ECF22FA0)
              {
                v16 = operator new();
                *(_OWORD *)(v16 + 64) = xmmword_18D315018;
                *(_OWORD *)(v16 + 80) = unk_18D315028;
                *(_OWORD *)(v16 + 96) = xmmword_18D315038;
                *(_OWORD *)(v16 + 112) = unk_18D315048;
                *(_OWORD *)v16 = xmmword_18D314FD8;
                *(_OWORD *)(v16 + 16) = unk_18D314FE8;
                a9 = 2.5019e-35;
                *(_OWORD *)(v16 + 32) = xmmword_18D314FF8;
                *(_OWORD *)(v16 + 48) = unk_18D315008;
                *(_DWORD *)(v16 + 128) = 67372293;
                *(_DWORD *)(v16 + 132) = 1045220557;
                qword_1ECF22FA0 = v16;
              }
            }
            goto LABEL_52;
          }
LABEL_57:
          v11 = 0x100000000;
          v12 = 1065353216;
          return v12 | v11;
        }
        if (*a2 == 1)
        {
          v16 = qword_1ECF22FA8;
          if (!qword_1ECF22FA8)
          {
            v16 = operator new();
            *(_OWORD *)(v16 + 64) = xmmword_18D3150A0;
            *(_OWORD *)(v16 + 80) = unk_18D3150B0;
            *(_OWORD *)(v16 + 96) = xmmword_18D3150C0;
            *(_OWORD *)(v16 + 112) = unk_18D3150D0;
            *(_OWORD *)v16 = xmmword_18D315060;
            *(_OWORD *)(v16 + 16) = unk_18D315070;
            a9 = 6.2546e-36;
            *(_OWORD *)(v16 + 32) = xmmword_18D315080;
            *(_OWORD *)(v16 + 48) = unk_18D315090;
            *(_DWORD *)(v16 + 128) = 134809865;
            *(_DWORD *)(v16 + 132) = 1045220557;
            qword_1ECF22FA8 = v16;
          }
        }
        else
        {
          v16 = qword_1ECF22FB0;
          if (!qword_1ECF22FB0)
          {
            v16 = operator new();
            *(_OWORD *)(v16 + 64) = xmmword_18D315128;
            *(_OWORD *)(v16 + 80) = unk_18D315138;
            *(_OWORD *)(v16 + 96) = xmmword_18D315148;
            *(_OWORD *)(v16 + 112) = unk_18D315158;
            *(_OWORD *)v16 = xmmword_18D3150E8;
            *(_OWORD *)(v16 + 16) = unk_18D3150F8;
            a9 = 6.2546e-36;
            *(_OWORD *)(v16 + 32) = xmmword_18D315108;
            *(_OWORD *)(v16 + 48) = unk_18D315118;
            *(_DWORD *)(v16 + 128) = 101058054;
            *(_DWORD *)(v16 + 132) = 1045220557;
            qword_1ECF22FB0 = v16;
          }
        }
      }
      else
      {
        if (((1 << v22) & 0x601) != 0)
        {
LABEL_29:
          v30 = 12;
          v29 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s Invalid GNSS band,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (char)"GetUncertaintyScaleFactorCore");
          goto LABEL_57;
        }
        v25 = *a5;
        if ((v25 - 2) < 2 || v25 == 6)
        {
          if (*a2 == 1)
          {
            v16 = qword_1ECF22F88;
            if (!qword_1ECF22F88)
            {
              v16 = operator new();
              *(_OWORD *)(v16 + 64) = xmmword_18D314E80;
              *(_OWORD *)(v16 + 80) = unk_18D314E90;
              *(_OWORD *)(v16 + 96) = xmmword_18D314EA0;
              *(_OWORD *)(v16 + 112) = unk_18D314EB0;
              *(_OWORD *)v16 = xmmword_18D314E40;
              *(_OWORD *)(v16 + 16) = unk_18D314E50;
              a9 = 1.5518e-36;
              *(_OWORD *)(v16 + 32) = xmmword_18D314E60;
              *(_OWORD *)(v16 + 48) = unk_18D314E70;
              *(_DWORD *)(v16 + 128) = 84215816;
              *(_DWORD *)(v16 + 132) = 1045220557;
              qword_1ECF22F88 = v16;
            }
          }
          else
          {
            v16 = qword_1ECF22F90;
            if (!qword_1ECF22F90)
            {
              v16 = operator new();
              *(_OWORD *)(v16 + 64) = xmmword_18D314F08;
              *(_OWORD *)(v16 + 80) = unk_18D314F18;
              *(_OWORD *)(v16 + 96) = xmmword_18D314F28;
              *(_OWORD *)(v16 + 112) = unk_18D314F38;
              *(_OWORD *)v16 = xmmword_18D314EC8;
              *(_OWORD *)(v16 + 16) = unk_18D314ED8;
              a9 = 6.2073e-36;
              *(_OWORD *)(v16 + 32) = xmmword_18D314EE8;
              *(_OWORD *)(v16 + 48) = unk_18D314EF8;
              *(_DWORD *)(v16 + 128) = 100992262;
              *(_DWORD *)(v16 + 132) = 1045220557;
              qword_1ECF22F90 = v16;
            }
          }
        }
        else
        {
          if (v25 != 5)
            goto LABEL_57;
          if (*a2 == 1)
          {
            v16 = qword_1ECF22F78;
            if (!qword_1ECF22F78)
            {
              v16 = operator new();
              *(_OWORD *)(v16 + 64) = xmmword_18D314D70;
              *(_OWORD *)(v16 + 80) = unk_18D314D80;
              *(_OWORD *)(v16 + 96) = xmmword_18D314D90;
              *(_OWORD *)(v16 + 112) = unk_18D314DA0;
              *(_OWORD *)v16 = xmmword_18D314D30;
              *(_OWORD *)(v16 + 16) = unk_18D314D40;
              a9 = 1.5518e-36;
              *(_OWORD *)(v16 + 32) = xmmword_18D314D50;
              *(_OWORD *)(v16 + 48) = unk_18D314D60;
              *(_DWORD *)(v16 + 128) = 100992264;
              *(_DWORD *)(v16 + 132) = 1045220557;
              qword_1ECF22F78 = v16;
            }
          }
          else
          {
            v16 = qword_1ECF22F80;
            if (!qword_1ECF22F80)
            {
              v16 = operator new();
              *(_OWORD *)(v16 + 64) = xmmword_18D314DF8;
              *(_OWORD *)(v16 + 80) = unk_18D314E08;
              *(_OWORD *)(v16 + 96) = xmmword_18D314E18;
              *(_OWORD *)(v16 + 112) = unk_18D314E28;
              *(_OWORD *)v16 = xmmword_18D314DB8;
              *(_OWORD *)(v16 + 16) = unk_18D314DC8;
              a9 = 6.3016e-36;
              *(_OWORD *)(v16 + 32) = xmmword_18D314DD8;
              *(_OWORD *)(v16 + 48) = unk_18D314DE8;
              *(_DWORD *)(v16 + 128) = 50529286;
              *(_DWORD *)(v16 + 132) = 1045220557;
              qword_1ECF22F80 = v16;
            }
          }
        }
      }
LABEL_52:
      v26 = *a6;
      if ((unint64_t)*a6 >= 0xC)
      {
        v30 = 12;
        v29 = 5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Out of range indices.first,%zu", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v26);
        goto LABEL_57;
      }
      v27 = a6[1];
      if (v27 >= 0xB)
      {
        v30 = 12;
        v29 = 5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Out of range indices.second,%zu", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v27);
        goto LABEL_57;
      }
      LOBYTE(a9) = *(_BYTE *)(v16 + 11 * v26 + v27);
      v12 = COERCE_UNSIGNED_INT(*(float *)(v16 + 132) * (float)LODWORD(a9));
LABEL_6:
      v11 = 0x100000000;
      return v12 | v11;
    default:
LABEL_13:
      v30 = 12;
      v29 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "GNSS uncertainty parameters not found,obs_type,%d,band,%d,se,%d,activity,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a2);
      goto LABEL_57;
  }
}

uint64_t raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper::GetScaleFactorTableIndices(float a1, double a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t i;
  unint64_t j;
  BOOL v12;
  uint64_t v13;
  double v14;
  unsigned __int8 v16;
  __int16 v17;

  for (i = 0; i != 11; ++i)
  {
    if (flt_18D314BE8[i] >= a1)
      break;
  }
  for (j = 0; j != 10; ++j)
  {
    if (dbl_18D314C18[j] >= a2)
      break;
  }
  v12 = i >= 0xC || j >= 0xB;
  v13 = !v12;
  if (v12)
  {
    v17 = 12;
    v16 = 5;
    v14 = a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "invalid index found,cn0,%.3f,cn0_bin,%zu,elev,%.3lf,elev_bin,%zu,", a6, a7, a8, a9, a10, SLOBYTE(v14));
  }
  else
  {
    *a4 = i;
    a4[1] = j;
  }
  return v13;
}

void sub_18D1681D4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper::Instance(raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper *this)
{
  _QWORD *result;

  result = (_QWORD *)qword_1EE061D90;
  if (!qword_1EE061D90)
  {
    result = (_QWORD *)operator new();
    *result = off_1E25C2EC8;
    qword_1EE061D90 = (uint64_t)result;
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper::GetUncertaintyScaleFactorCore(uint64_t a1, int *a2, _BYTE *a3, unsigned __int8 *a4, char *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  float v9;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int8 v40;
  __int16 v41;

  if (!(_DWORD)a8)
  {
    v14 = *a4;
    if (v14 > 6)
    {
      v20 = 0;
      v19 = 0;
      v18 = 0;
    }
    else
    {
      v15 = 1 << v14;
      if ((v15 & 0x27) != 0)
      {
        v16 = *a5;
        if (v16 > 6 || ((1 << v16) & 0x4C) == 0)
        {
          v18 = qword_1ECF22FD0;
          if (!qword_1ECF22FD0)
          {
            v18 = operator new();
            *(_OWORD *)(v18 + 64) = xmmword_18D3156E0;
            *(_OWORD *)(v18 + 80) = unk_18D3156F0;
            *(_OWORD *)(v18 + 96) = xmmword_18D315700;
            *(_OWORD *)v18 = xmmword_18D3156A0;
            *(_OWORD *)(v18 + 16) = unk_18D3156B0;
            *(_OWORD *)(v18 + 32) = xmmword_18D3156C0;
            *(_OWORD *)(v18 + 48) = unk_18D3156D0;
            *(_DWORD *)(v18 + 112) = 1008981770;
            qmemcpy((void *)(v18 + 116), "(,,*)(&('&(&$%$$142/-*+,**+,+)+%:=:773265162/44)::98:645433224402//00/-,++--,,+--*(+*+*)&()*)+(,3-*../.-*.,,.2/0", 112);
            *(_DWORD *)(v18 + 228) = 1008981770;
            *(_OWORD *)(v18 + 248) = unk_18D315790;
            *(_OWORD *)(v18 + 232) = xmmword_18D315780;
            *(_OWORD *)(v18 + 312) = xmmword_18D3157D0;
            *(_OWORD *)(v18 + 328) = unk_18D3157E0;
            *(_OWORD *)(v18 + 296) = xmmword_18D3157C0;
            qmemcpy((void *)(v18 + 264), "+*++-)()+-*(\" #\"*)**,)()+**'#\"#&", 32);
            *(_DWORD *)(v18 + 344) = 1008981770;
            qword_1ECF22FD0 = v18;
          }
          v19 = qword_1ECF22FD8;
          if (!qword_1ECF22FD8)
          {
            v19 = operator new();
            *(_OWORD *)(v19 + 64) = xmmword_18D315830;
            *(_OWORD *)(v19 + 80) = unk_18D315840;
            *(_OWORD *)(v19 + 96) = xmmword_18D315850;
            *(_OWORD *)v19 = xmmword_18D3157F0;
            *(_OWORD *)(v19 + 16) = unk_18D315800;
            *(_OWORD *)(v19 + 32) = xmmword_18D315810;
            *(_OWORD *)(v19 + 48) = unk_18D315820;
            *(_DWORD *)(v19 + 112) = 1025758986;
            *(_OWORD *)(v19 + 116) = xmmword_18D315860;
            *(_OWORD *)(v19 + 212) = xmmword_18D3158C0;
            *(_OWORD *)(v19 + 196) = unk_18D3158B0;
            *(_OWORD *)(v19 + 180) = xmmword_18D3158A0;
            *(_DWORD *)(v19 + 228) = 1025758986;
            qmemcpy((void *)(v19 + 248), "U_\\X^ROKFFMG30?8FJIIKCEB?BAB3/;554645/0..1-.(%)*", 48);
            *(_OWORD *)(v19 + 232) = xmmword_18D3158D0;
            *(_OWORD *)(v19 + 312) = xmmword_18D315920;
            *(_OWORD *)(v19 + 328) = unk_18D315930;
            *(_OWORD *)(v19 + 296) = xmmword_18D315910;
            *(_DWORD *)(v19 + 344) = 1025758986;
            qword_1ECF22FD8 = v19;
          }
          v20 = qword_1ECF22FE0;
          if (!qword_1ECF22FE0)
          {
            v20 = operator new();
            *(_OWORD *)(v20 + 64) = xmmword_18D315980;
            *(_OWORD *)(v20 + 80) = unk_18D315990;
            *(_OWORD *)(v20 + 96) = xmmword_18D3159A0;
            *(_OWORD *)v20 = xmmword_18D315940;
            *(_OWORD *)(v20 + 16) = *(_OWORD *)algn_18D315950;
            *(_OWORD *)(v20 + 32) = xmmword_18D315960;
            *(_OWORD *)(v20 + 48) = unk_18D315970;
            *(_DWORD *)(v20 + 112) = 1017370378;
            *(_OWORD *)(v20 + 148) = xmmword_18D3159D0;
            *(_OWORD *)(v20 + 132) = unk_18D3159C0;
            *(_OWORD *)(v20 + 116) = xmmword_18D3159B0;
            *(_OWORD *)(v20 + 212) = xmmword_18D315A10;
            *(_OWORD *)(v20 + 196) = unk_18D315A00;
            *(_OWORD *)(v20 + 180) = xmmword_18D3159F0;
            *(_OWORD *)(v20 + 164) = unk_18D3159E0;
            *(_DWORD *)(v20 + 228) = 1017370378;
            *(_OWORD *)(v20 + 248) = *(_OWORD *)algn_18D315A30;
            *(_OWORD *)(v20 + 232) = xmmword_18D315A20;
            *(_OWORD *)(v20 + 312) = xmmword_18D315A70;
            *(_OWORD *)(v20 + 328) = unk_18D315A80;
            *(_OWORD *)(v20 + 280) = unk_18D315A50;
            *(_OWORD *)(v20 + 296) = xmmword_18D315A60;
            *(_OWORD *)(v20 + 264) = xmmword_18D315A40;
            *(_DWORD *)(v20 + 344) = 1017370378;
            qword_1ECF22FE0 = v20;
          }
        }
        else
        {
          v18 = qword_1ECF22FB8;
          if (!qword_1ECF22FB8)
          {
            v18 = operator new();
            *(_OWORD *)(v18 + 64) = xmmword_18D3152F0;
            *(_OWORD *)(v18 + 80) = unk_18D315300;
            *(_OWORD *)(v18 + 96) = xmmword_18D315310;
            *(_OWORD *)v18 = xmmword_18D3152B0;
            *(_OWORD *)(v18 + 16) = unk_18D3152C0;
            *(_OWORD *)(v18 + 32) = xmmword_18D3152D0;
            *(_OWORD *)(v18 + 48) = unk_18D3152E0;
            *(_DWORD *)(v18 + 112) = 1008981770;
            *(_OWORD *)(v18 + 148) = xmmword_18D315340;
            *(_OWORD *)(v18 + 132) = unk_18D315330;
            *(_OWORD *)(v18 + 116) = xmmword_18D315320;
            qmemcpy((void *)(v18 + 164), "WNZil^F?BE>=D:6CJEJOXF<;:851;545:?@EK964320+03-1B<HHK<<6002/181I", 64);
            *(_DWORD *)(v18 + 228) = 1008981770;
            *(_OWORD *)(v18 + 248) = unk_18D3153A0;
            *(_OWORD *)(v18 + 232) = xmmword_18D315390;
            *(_OWORD *)(v18 + 312) = xmmword_18D3153E0;
            *(_OWORD *)(v18 + 328) = unk_18D3153F0;
            *(_OWORD *)(v18 + 296) = xmmword_18D3153D0;
            qmemcpy((void *)(v18 + 264), "675@P2948<.)(%\"#10.06+.+.0(''&\"$", 32);
            *(_DWORD *)(v18 + 344) = 1008981770;
            qword_1ECF22FB8 = v18;
          }
          v19 = qword_1ECF22FC0;
          if (!qword_1ECF22FC0)
          {
            v19 = operator new();
            qmemcpy((void *)v19, "%+/-,*+*(),)',))./649233,*-)(1.1//66610/('&$#.*+2099720,'(%#\"/(\"<;B<:74..))&%/)\"EBMJFA;5420..4)&iWU\\UNTREE:D:RD>",
              112);
            *(_DWORD *)(v19 + 112) = 1025758986;
              112);
            *(_DWORD *)(v19 + 228) = 1025758986;
            qmemcpy((void *)(v19 + 232), "B<AAI@==95622(A-DBFHSCB=>8340104GHINSDDBA>765389BBDCN>=<95310-22>::>E433/.-+)''06;59>/0-,,+'%#(0L@ACJ;<:757<?602",
              112);
            *(_DWORD *)(v19 + 344) = 1025758986;
            qword_1ECF22FC0 = v19;
          }
          v20 = qword_1ECF22FC8;
          if (!qword_1ECF22FC8)
          {
            v20 = operator new();
            *(_OWORD *)(v20 + 64) = xmmword_18D315590;
            *(_OWORD *)(v20 + 80) = unk_18D3155A0;
            *(_OWORD *)(v20 + 96) = xmmword_18D3155B0;
            *(_OWORD *)v20 = xmmword_18D315550;
            *(_OWORD *)(v20 + 16) = unk_18D315560;
            *(_OWORD *)(v20 + 32) = xmmword_18D315570;
            *(_OWORD *)(v20 + 48) = unk_18D315580;
            *(_DWORD *)(v20 + 112) = 1017370378;
            qmemcpy((void *)(v20 + 116), "8;1455331)*,-%%$<>598941,-*-4*$2>>8>@;83-0.394/81311441/..,-102.1210430-+,++,(+*5334540-+*(',&'&GA?DGB876:..83)C",
              112);
            *(_DWORD *)(v20 + 228) = 1017370378;
            qmemcpy((void *)(v20 + 232), "9:::6?F=8350/,.+<>;=8?H:4480-).3<?:=9<@7665322/0202.-.+,**((+,'&0..-+*)'##$#%%#$-,,/)'(\" !!\"! \"\"?6162.-/-+-*)',,",
              112);
            *(_DWORD *)(v20 + 344) = 1017370378;
            qword_1ECF22FC8 = v20;
          }
        }
      }
      else if ((v15 & 0x18) != 0)
      {
        v21 = *a5;
        if (v21 <= 6 && ((1 << v21) & 0x4C) != 0)
        {
          v18 = qword_1ECF22FE8;
          if (!qword_1ECF22FE8)
          {
            v18 = operator new();
            *(_OWORD *)(v18 + 96) = xmmword_18D315AF0;
            *(_OWORD *)v18 = xmmword_18D315A90;
            *(_OWORD *)(v18 + 16) = unk_18D315AA0;
            *(_DWORD *)(v18 + 112) = 1008981770;
            *(_OWORD *)(v18 + 148) = xmmword_18D315B20;
            *(_OWORD *)(v18 + 132) = unk_18D315B10;
            *(_OWORD *)(v18 + 116) = xmmword_18D315B00;
            *(_OWORD *)(v18 + 212) = xmmword_18D315B60;
            *(_OWORD *)(v18 + 196) = unk_18D315B50;
            *(_OWORD *)(v18 + 180) = xmmword_18D315B40;
            *(_OWORD *)(v18 + 164) = unk_18D315B30;
            *(_DWORD *)(v18 + 228) = 1008981770;
            *(_OWORD *)(v18 + 248) = unk_18D315B80;
            *(_OWORD *)(v18 + 232) = xmmword_18D315B70;
            *(_OWORD *)(v18 + 312) = xmmword_18D315BC0;
            *(_OWORD *)(v18 + 328) = unk_18D315BD0;
            *(_OWORD *)(v18 + 280) = unk_18D315BA0;
            *(_OWORD *)(v18 + 296) = xmmword_18D315BB0;
            *(_OWORD *)(v18 + 264) = xmmword_18D315B90;
            *(_DWORD *)(v18 + 344) = 1008981770;
            qword_1ECF22FE8 = v18;
          }
          v19 = qword_1ECF22FF0;
          if (!qword_1ECF22FF0)
          {
            v19 = operator new();
            qmemcpy((void *)v19, "/50--,+,-+*)***(<:416352743.4-.+22.,./1/431-.,,)2/525,0.2/.,-/)*G7;4<<9143412/-)MGBANKH=E<7?<:3AQZUVWNTJHLXWQdI\\",
              112);
            *(_DWORD *)(v19 + 112) = 1025758986;
            qmemcpy((void *)(v19 + 116), "Q@EHFAF>E=7@;937a:PMRMNKH@7=5642i?NLQPPQPH=D>88=S=ADMDLJMF;>>986L1@<G>FDI@;:9473@E@?H=ECB;;<A=:<^8AOXfWVYYN[^J@I",
              112);
            *(_DWORD *)(v19 + 228) = 1025758986;
            qmemcpy((void *)(v19 + 232), "?>>C@CC<8973/.5(CHELFNMB??<2/+5-@GCRGKMH@@=33-10:?>GE<B>865,*(%(021883:31-,\"!! #", 80);
            *(_OWORD *)(v19 + 312) = xmmword_18D315D10;
            *(_OWORD *)(v19 + 328) = unk_18D315D20;
            *(_DWORD *)(v19 + 344) = 1025758986;
            qword_1ECF22FF0 = v19;
          }
          v20 = qword_1ECF22FF8;
          if (!qword_1ECF22FF8)
          {
            v20 = operator new();
            *(_OWORD *)(v20 + 64) = xmmword_18D315D70;
            qmemcpy((void *)(v20 + 80), ")%).(%#!\"$#$%)%#:130,)'!'%(-'/-,", 32);
            *(_OWORD *)v20 = xmmword_18D315D30;
            *(_OWORD *)(v20 + 16) = unk_18D315D40;
            *(_OWORD *)(v20 + 32) = xmmword_18D315D50;
            *(_OWORD *)(v20 + 48) = unk_18D315D60;
            *(_DWORD *)(v20 + 112) = 1017370378;
            qmemcpy((void *)(v20 + 116), "<JJFIBB=;=7520\"&58OVOJTJ@B657*+/F4STQPNPME=870.15,9:;;=;94211-,/3201484521...+,,77-0054821-,,,..D70/651387/7457.",
              112);
            *(_DWORD *)(v20 + 228) = 1017370378;
            qmemcpy((void *)(v20 + 232), "=;C?E8EB@<60,/82NB>IFAOFEC=5..0,PIAEBFKIEA=4/01)", 48);
            *(_OWORD *)(v20 + 312) = xmmword_18D315E60;
            *(_OWORD *)(v20 + 328) = unk_18D315E70;
            *(_OWORD *)(v20 + 280) = unk_18D315E40;
            *(_OWORD *)(v20 + 296) = xmmword_18D315E50;
            *(_DWORD *)(v20 + 344) = 1017370378;
            qword_1ECF22FF8 = v20;
          }
        }
        else
        {
          v18 = qword_1ECF23000;
          if (!qword_1ECF23000)
          {
            v18 = operator new();
            *(_OWORD *)v18 = xmmword_18D315E80;
            *(_OWORD *)(v18 + 16) = unk_18D315E90;
            qmemcpy((void *)(v18 + 32), "C5XX@C3>ZIFA4$00G0;pH>5>\\OM@1)00/0<e:10GVJMC1*..58B4/1/;:KF8*2..O?l92C2<<BLE1944",
              80);
            *(_DWORD *)(v18 + 112) = 1008981770;
            *(_OWORD *)(v18 + 148) = xmmword_18D315F10;
            *(_OWORD *)(v18 + 132) = unk_18D315F00;
            *(_OWORD *)(v18 + 116) = xmmword_18D315EF0;
            *(_OWORD *)(v18 + 212) = xmmword_18D315F50;
            *(_OWORD *)(v18 + 196) = unk_18D315F40;
            *(_OWORD *)(v18 + 180) = xmmword_18D315F30;
            *(_OWORD *)(v18 + 164) = unk_18D315F20;
            *(_DWORD *)(v18 + 228) = 1008981770;
            *(_OWORD *)(v18 + 248) = unk_18D315F70;
            *(_OWORD *)(v18 + 232) = xmmword_18D315F60;
            *(_OWORD *)(v18 + 312) = xmmword_18D315FB0;
            *(_OWORD *)(v18 + 328) = unk_18D315FC0;
            *(_OWORD *)(v18 + 280) = unk_18D315F90;
            *(_OWORD *)(v18 + 296) = xmmword_18D315FA0;
            *(_OWORD *)(v18 + 264) = xmmword_18D315F80;
            *(_DWORD *)(v18 + 344) = 1008981770;
            qword_1ECF23000 = v18;
          }
          v19 = qword_1ECF23008;
          if (!qword_1ECF23008)
          {
            v19 = operator new();
            *(_OWORD *)(v19 + 64) = xmmword_18D316010;
            *(_OWORD *)(v19 + 80) = unk_18D316020;
            *(_OWORD *)(v19 + 96) = xmmword_18D316030;
            qmemcpy((void *)v19, "P@47GFFF=J3/(/((@0((0:=40:-.&(''", 32);
            *(_OWORD *)(v19 + 32) = xmmword_18D315FF0;
            *(_OWORD *)(v19 + 48) = unk_18D316000;
            *(_DWORD *)(v19 + 112) = 1025758986;
            qmemcpy((void *)(v19 + 148), "kfGGBTSLYN;KB:A4a;732:<<A:.C4522", 32);
            *(_OWORD *)(v19 + 132) = unk_18D316050;
            *(_OWORD *)(v19 + 116) = xmmword_18D316040;
            *(_OWORD *)(v19 + 212) = xmmword_18D3160A0;
            *(_OWORD *)(v19 + 196) = unk_18D316090;
            *(_OWORD *)(v19 + 180) = xmmword_18D316080;
            *(_DWORD *)(v19 + 228) = 1025758986;
            qmemcpy((void *)(v19 + 248), "W)KNseG_U^PHCSII@(9>Z^@MJVI@@EPP*75-=@/24;60.-44", 48);
            *(_OWORD *)(v19 + 232) = xmmword_18D3160B0;
            *(_OWORD *)(v19 + 312) = xmmword_18D316100;
            *(_OWORD *)(v19 + 328) = unk_18D316110;
            *(_OWORD *)(v19 + 296) = xmmword_18D3160F0;
            *(_DWORD *)(v19 + 344) = 1025758986;
            qword_1ECF23008 = v19;
          }
          v20 = qword_1ECF23010;
          if (!qword_1ECF23010)
          {
            v20 = operator new();
            *(_OWORD *)(v20 + 64) = xmmword_18D316160;
            *(_OWORD *)(v20 + 80) = unk_18D316170;
            *(_OWORD *)(v20 + 96) = xmmword_18D316180;
            *(_OWORD *)v20 = xmmword_18D316120;
            *(_OWORD *)(v20 + 16) = *(_OWORD *)algn_18D316130;
            *(_OWORD *)(v20 + 32) = xmmword_18D316140;
            *(_OWORD *)(v20 + 48) = unk_18D316150;
            *(_DWORD *)(v20 + 112) = 1017370378;
            *(_OWORD *)(v20 + 148) = xmmword_18D3161B0;
            *(_OWORD *)(v20 + 132) = unk_18D3161A0;
            *(_OWORD *)(v20 + 116) = xmmword_18D316190;
            *(_OWORD *)(v20 + 212) = xmmword_18D3161F0;
            *(_OWORD *)(v20 + 196) = unk_18D3161E0;
            *(_OWORD *)(v20 + 180) = xmmword_18D3161D0;
            *(_OWORD *)(v20 + 164) = unk_18D3161C0;
            *(_DWORD *)(v20 + 228) = 1017370378;
            *(_OWORD *)(v20 + 248) = *(_OWORD *)algn_18D316210;
            *(_OWORD *)(v20 + 232) = xmmword_18D316200;
            *(_OWORD *)(v20 + 312) = xmmword_18D316250;
            *(_OWORD *)(v20 + 328) = unk_18D316260;
            *(_OWORD *)(v20 + 280) = unk_18D316230;
            *(_OWORD *)(v20 + 296) = xmmword_18D316240;
            *(_OWORD *)(v20 + 264) = xmmword_18D316220;
            *(_DWORD *)(v20 + 344) = 1017370378;
            qword_1ECF23010 = v20;
          }
        }
      }
      else
      {
        v22 = *a5;
        if (v22 <= 6 && ((1 << v22) & 0x4C) != 0)
        {
          v18 = qword_1ECF23018;
          if (!qword_1ECF23018)
          {
            v18 = operator new();
            *(_OWORD *)(v18 + 64) = xmmword_18D3162B0;
            *(_OWORD *)(v18 + 80) = unk_18D3162C0;
            *(_OWORD *)(v18 + 96) = xmmword_18D3162D0;
            *(_OWORD *)v18 = xmmword_18D316270;
            *(_OWORD *)(v18 + 16) = unk_18D316280;
            *(_OWORD *)(v18 + 32) = xmmword_18D316290;
            *(_OWORD *)(v18 + 48) = unk_18D3162A0;
            *(_DWORD *)(v18 + 112) = 1008981770;
            qmemcpy((void *)(v18 + 132), "897:7581..3-'-+%BAA@>>A<88<54441HCE><?B<9:<95552D<:334862264./31C41,*,00,.01+,10@*1/-.3523.40493", 96);
            *(_OWORD *)(v18 + 116) = xmmword_18D3162E0;
            *(_DWORD *)(v18 + 228) = 1008981770;
            *(_OWORD *)(v18 + 248) = unk_18D316360;
            *(_OWORD *)(v18 + 232) = xmmword_18D316350;
            *(_OWORD *)(v18 + 312) = xmmword_18D3163A0;
            *(_OWORD *)(v18 + 328) = unk_18D3163B0;
            *(_OWORD *)(v18 + 296) = xmmword_18D316390;
            qmemcpy((void *)(v18 + 264), "%#$%&'()+,*&%$$#)$%%%%%%&'&%$$##", 32);
            *(_DWORD *)(v18 + 344) = 1008981770;
            qword_1ECF23018 = v18;
          }
          v19 = qword_1ECF23020;
          if (!qword_1ECF23020)
          {
            v19 = operator new();
            *(_OWORD *)(v19 + 64) = xmmword_18D316400;
            *(_OWORD *)(v19 + 80) = unk_18D316410;
            *(_OWORD *)(v19 + 96) = xmmword_18D316420;
            qmemcpy((void *)v19, "$$+),/)+'))4%4.%))/../--+*).*)+\"", 32);
            *(_OWORD *)(v19 + 32) = xmmword_18D3163E0;
            *(_OWORD *)(v19 + 48) = unk_18D3163F0;
            *(_DWORD *)(v19 + 112) = 1025758986;
            qmemcpy((void *)(v19 + 116), "268=97//0.-;1.I,56:@?;32323=71;34;<DC>;7688<:<<=498??986464756261289;5301./0//0/>46;844.0..12/,+THFBC<=8B<@;=A;B",
              112);
            *(_DWORD *)(v19 + 228) = 1025758986;
            qmemcpy((void *)(v19 + 232), "745:5624//8-'$.+758<9<;965;0.',):8<==>??;:;331/564688886543/-+,15/130310-.-)(%$+3-/0..-.++,&$$\")=6999894211296-3",
              112);
            *(_DWORD *)(v19 + 344) = 1025758986;
            qword_1ECF23020 = v19;
          }
          v20 = qword_1ECF23028;
          if (!qword_1ECF23028)
          {
            v20 = operator new();
            *(_OWORD *)(v20 + 64) = xmmword_18D316550;
            *(_OWORD *)(v20 + 80) = unk_18D316560;
            *(_OWORD *)(v20 + 96) = xmmword_18D316570;
            *(_OWORD *)v20 = xmmword_18D316510;
            *(_OWORD *)(v20 + 16) = unk_18D316520;
            *(_OWORD *)(v20 + 32) = xmmword_18D316530;
            *(_OWORD *)(v20 + 48) = unk_18D316540;
            *(_DWORD *)(v20 + 112) = 1017370378;
            *(_OWORD *)(v20 + 148) = xmmword_18D3165A0;
            strcpy((char *)(v20 + 132), "9?<<?9=:10.7/:-");
            strcpy((char *)(v20 + 116), "5:878/231*(9(3!");
            qmemcpy((void *)(v20 + 164), "1201146333/10+*)/.--..0/.-+-,))(/--,.+-*,*(,*(+)5,506/,..++10/2/", 64);
            *(_DWORD *)(v20 + 228) = 1017370378;
            qmemcpy((void *)(v20 + 232), "7385837+-,+'&+5'6277<;:7731),*,05587;98::7301../-/-*+***+*((('$$", 64);
            *(_OWORD *)(v20 + 312) = xmmword_18D316640;
            *(_OWORD *)(v20 + 328) = unk_18D316650;
            *(_OWORD *)(v20 + 296) = xmmword_18D316630;
            *(_DWORD *)(v20 + 344) = 1017370378;
            qword_1ECF23028 = v20;
          }
        }
        else
        {
          v18 = qword_1ECF23030;
          if (!qword_1ECF23030)
          {
            v18 = operator new();
            *(_OWORD *)(v18 + 64) = xmmword_18D3166A0;
            *(_OWORD *)(v18 + 80) = unk_18D3166B0;
            *(_OWORD *)(v18 + 96) = xmmword_18D3166C0;
            *(_OWORD *)v18 = xmmword_18D316660;
            *(_OWORD *)(v18 + 16) = unk_18D316670;
            *(_OWORD *)(v18 + 32) = xmmword_18D316680;
            *(_OWORD *)(v18 + 48) = unk_18D316690;
            *(_DWORD *)(v18 + 112) = 1008981770;
            qmemcpy((void *)(v18 + 132), ";1/-,('&,0(,,%%$M>;9616/886820,1LF:;878156557004K<100/0,.+,,,,+.UK.,,+,)&&(-**,0",
              80);
            *(_OWORD *)(v18 + 116) = xmmword_18D3166D0;
            *(_OWORD *)(v18 + 212) = xmmword_18D316730;
            *(_DWORD *)(v18 + 228) = 1008981770;
            *(_OWORD *)(v18 + 248) = unk_18D316750;
            *(_OWORD *)(v18 + 232) = xmmword_18D316740;
            *(_OWORD *)(v18 + 312) = xmmword_18D316790;
            *(_OWORD *)(v18 + 328) = unk_18D3167A0;
            *(_OWORD *)(v18 + 296) = xmmword_18D316780;
            qmemcpy((void *)(v18 + 264), "')((&&*&&&)#!!%'+%(''&)'$&'\"#\"%#", 32);
            *(_DWORD *)(v18 + 344) = 1008981770;
            qword_1ECF23030 = v18;
          }
          v19 = qword_1ECF23038;
          if (!qword_1ECF23038)
          {
            v19 = operator new();
            *(_OWORD *)(v19 + 80) = unk_18D316800;
            *(_OWORD *)(v19 + 96) = xmmword_18D316810;
            *(_OWORD *)v19 = xmmword_18D3167B0;
            *(_OWORD *)(v19 + 16) = unk_18D3167C0;
            *(_OWORD *)(v19 + 32) = xmmword_18D3167D0;
            qmemcpy((void *)(v19 + 48), "*3/PF:C95,&(65--\"9-;:16..-')*&''", 32);
            *(_DWORD *)(v19 + 112) = 1025758986;
            *(_OWORD *)(v19 + 148) = xmmword_18D316840;
            *(_OWORD *)(v19 + 132) = unk_18D316830;
            *(_OWORD *)(v19 + 116) = xmmword_18D316820;
            qmemcpy((void *)(v19 + 164), "MGQQKGKHDHD<5915I5E?;:>:9::4,-#%C5>?4674026/')$#f*EA52F=585>,0,-", 64);
            *(_DWORD *)(v19 + 228) = 1025758986;
            *(_OWORD *)(v19 + 248) = unk_18D3168A0;
            *(_OWORD *)(v19 + 232) = xmmword_18D316890;
            qmemcpy((void *)(v19 + 264), "\\ltns{prrse]XZXbAHJHKLBFDD>;;8<:899;<:6996.,/-/,1<04752453(*-)*&05/27=:=97.-5,2)",
              80);
            *(_DWORD *)(v19 + 344) = 1025758986;
            qword_1ECF23038 = v19;
          }
          v20 = qword_1ECF23040;
          if (!qword_1ECF23040)
          {
            v20 = operator new();
            *(_OWORD *)(v20 + 64) = xmmword_18D316940;
            *(_OWORD *)(v20 + 80) = unk_18D316950;
            *(_OWORD *)(v20 + 96) = xmmword_18D316960;
            *(_OWORD *)v20 = xmmword_18D316900;
            *(_OWORD *)(v20 + 16) = *(_OWORD *)algn_18D316910;
            *(_OWORD *)(v20 + 32) = xmmword_18D316920;
            *(_OWORD *)(v20 + 48) = unk_18D316930;
            *(_DWORD *)(v20 + 112) = 1017370378;
            *(_OWORD *)(v20 + 148) = xmmword_18D316990;
            *(_OWORD *)(v20 + 132) = unk_18D316980;
            *(_OWORD *)(v20 + 116) = xmmword_18D316970;
            *(_OWORD *)(v20 + 212) = xmmword_18D3169D0;
            *(_OWORD *)(v20 + 196) = unk_18D3169C0;
            *(_OWORD *)(v20 + 180) = xmmword_18D3169B0;
            *(_OWORD *)(v20 + 164) = unk_18D3169A0;
            *(_DWORD *)(v20 + 228) = 1017370378;
            *(_OWORD *)(v20 + 248) = *(_OWORD *)algn_18D3169F0;
            *(_OWORD *)(v20 + 232) = xmmword_18D3169E0;
            *(_OWORD *)(v20 + 312) = xmmword_18D316A30;
            *(_OWORD *)(v20 + 328) = unk_18D316A40;
            *(_OWORD *)(v20 + 280) = unk_18D316A10;
            *(_OWORD *)(v20 + 296) = xmmword_18D316A20;
            *(_OWORD *)(v20 + 264) = xmmword_18D316A00;
            *(_DWORD *)(v20 + 344) = 1017370378;
            qword_1ECF23040 = v20;
          }
        }
      }
    }
    v23 = 0;
    switch(*a3)
    {
      case 0:
      case 4:
      case 9:
        v41 = 12;
        v40 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid GNSS Band type: GNSS uncertainty parameters not found for obs_type,%d,band,%d,se,%d,activity,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a2);
        goto LABEL_55;
      case 1:
        v23 = 2;
        goto LABEL_58;
      case 2:
      case 6:
      case 8:
      case 0xA:
        v9 = 1.0;
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v20) <= 1)
        {
          v41 = 12;
          v40 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid GNSS Band type: GNSS uncertainty parameters not found for obs_type,%d,band,%d,se,%d,activity,%d", v24, v25, v26, v27, v28, *a2);
        }
        goto LABEL_76;
      case 3:
        v23 = 1;
        goto LABEL_58;
      default:
LABEL_58:
        v29 = *a2;
        if ((*a2 - 3) < 2)
        {
          if (!v20)
          {
            v41 = 12;
            v40 = 5;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
            v9 = 2.0;
            goto LABEL_76;
          }
          v33 = v20 + 116 * v23;
          v31 = *(float *)(v33 + 112);
          v34 = *a6;
          v35 = a6[1];
          v36 = *(unsigned __int8 *)(v33 + 16 * *a6 + v35);
          if (v36)
          {
            v32 = (float)v36;
            goto LABEL_75;
          }
          if (!v19)
          {
LABEL_78:
            v8 = 0x100000000;
            v9 = v31 / 0.01;
            return v8 | LODWORD(v9);
          }
          v37 = v19 + 116 * v23;
        }
        else
        {
          if (v29 != 2)
          {
            if (v29 == 1)
            {
              if (v18)
              {
                v30 = a6[1];
                if (*(_BYTE *)(v18 + 116 * v23 + 16 * *a6 + v30))
                {
                  v31 = *(float *)(v18 + 116 * v23 + 112);
                  v32 = (float)*(unsigned __int8 *)(v18 + 116 * v23 + 16 * *a6 + v30);
LABEL_75:
                  v9 = v31 * v32;
                  goto LABEL_76;
                }
              }
              else
              {
                v41 = 12;
                v40 = 5;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid range unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
              }
            }
            else
            {
              v41 = 12;
              v40 = 5;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid obs type - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
            }
LABEL_55:
            v9 = 1.0;
LABEL_76:
            v8 = 0x100000000;
            return v8 | LODWORD(v9);
          }
          if (!v19)
          {
            v41 = 12;
            v40 = 5;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
            v9 = 4.0;
            goto LABEL_76;
          }
          v37 = v19 + 116 * v23;
          v31 = *(float *)(v37 + 112);
          v34 = *a6;
          v35 = a6[1];
        }
        v38 = *(unsigned __int8 *)(v37 + 16 * v34 + v35);
        if (v38)
        {
          v32 = (float)v38;
          goto LABEL_75;
        }
        goto LABEL_78;
    }
  }
  v8 = 0;
  v9 = 0.0;
  return v8 | LODWORD(v9);
}

uint64_t raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper::GetScaleFactorTableIndices(float a1, double a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t i;
  unint64_t j;
  BOOL v12;
  uint64_t v13;
  double v14;
  unsigned __int8 v16;
  __int16 v17;

  for (i = 0; i != 6; ++i)
  {
    if (flt_18D3151D4[i] >= a1)
      break;
  }
  for (j = 0; j != 15; ++j)
  {
    if (dbl_18D3151F0[j] >= a2)
      break;
  }
  v12 = i >= 7 || j >= 0x10;
  v13 = !v12;
  if (v12)
  {
    v17 = 12;
    v16 = 5;
    v14 = a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "invalid index found,cn0,%.3f,cn0_bin,%zu,elev,%.3lf,elev_bin,%zu,", a6, a7, a8, a9, a10, SLOBYTE(v14));
  }
  else
  {
    *a4 = i;
    a4[1] = j;
  }
  return v13;
}

void sub_18D1694A8()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t raven::AccessoryVehicleSpeedChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::AccessoryVehicleSpeedChecker::ScreenWithEstimatorSpeed(uint64_t a1, _QWORD *a2, unsigned __int8 a3, double a4)
{
  uint64_t **v7;
  uint64_t **v8;
  double v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  double v14;
  uint64_t result;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  _QWORD v27[2];
  unsigned __int8 v28;

  v28 = a3;
  v7 = sub_18D041348((_QWORD *)(*(_QWORD *)(a1 + 16) + 16), &v28);
  if (!v7)
    return 0;
  v8 = v7;
  if (*((_BYTE *)v7 + 233) != 2)
    return 0;
  if (!*((_BYTE *)v7 + 1368))
    return 0;
  v9 = *(double *)(a2[30] - 8);
  v27[0] = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  v27[1] = v10;
  v13 = CNTimeSpan::operator-((uint64_t)(v8 + 149), v27, v11, v12);
  if (v14 + (double)v13 >= 2.0)
    return 0;
  result = 0;
  v16 = *((double *)v8 + 172);
  if (v16 >= 0.0)
  {
    v17 = sqrt(*((double *)v8 + 176));
    if (v17 > 0.0)
    {
      if (vabdd_f64(v9, v16) <= v17 * a4)
        return 1;
      ++*(_DWORD *)(a1 + 24);
      if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
      {
        LOWORD(v27[0]) = 12;
        v26 = 1;
        v18 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
        v20 = v19 + (double)v18;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v27, &v26, "t,%.2lf,AccessoryVehicleSpeedChecker,rejected,%d,estimated speed error check failed,speed,%.2lf,estimatedUserSpeed,%.2lf,estimatedUnc,%.2lf,threshold,%.2lf,threshold_scale,%.2lf", v21, v22, v23, v24, v25, SLOBYTE(v20));
      }
      return 0;
    }
  }
  return result;
}

uint64_t raven::AccessoryVehicleSpeedChecker::HandleEvent(raven::AccessoryVehicleSpeedChecker *this, const raven::AccessoryVehicleSpeedEvent *a2, raven::AccessoryVehicleSpeedEvent *a3)
{
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  cnprint::CNPrinter *v20;
  int v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  unsigned __int8 v73;
  __int16 v74;

  if (!*((_BYTE *)this + 8))
  {
    v74 = 12;
    v73 = 4;
    v37 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *, const raven::AccessoryVehicleSpeedEvent *, raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v69 = v38 + (double)v37;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, not configured", v39, v40, v41, v42, v43, SLOBYTE(v69));
    return 0xFFFFFFFFLL;
  }
  v4 = *((unsigned int *)a2 + 51);
  if (v4 != (uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 3
    || v4 != (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3)
  {
    v74 = 12;
    v73 = 4;
    v30 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
    v68 = v31 + (double)v30;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, Assistance rejected due to inconsistent vector size,sampleCount,%u,speedVector,%zu,timeVector,%zu", v32, v33, v34, v35, v36, SLOBYTE(v68));
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
  v7 = *(_OWORD *)((char *)a2 + 24);
  v8 = *(_OWORD *)((char *)a2 + 40);
  v9 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 56) = v9;
  *(_OWORD *)((char *)a3 + 40) = v8;
  *(_OWORD *)((char *)a3 + 24) = v7;
  v10 = *(_OWORD *)((char *)a2 + 88);
  v11 = *(_OWORD *)((char *)a2 + 104);
  v12 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)a3 + 120) = v12;
  *(_OWORD *)((char *)a3 + 104) = v11;
  *(_OWORD *)((char *)a3 + 88) = v10;
  v13 = *(_OWORD *)((char *)a2 + 152);
  v14 = *(_OWORD *)((char *)a2 + 168);
  v15 = *(_OWORD *)((char *)a2 + 184);
  *((_QWORD *)a3 + 25) = *((_QWORD *)a2 + 25);
  *(_OWORD *)((char *)a3 + 184) = v15;
  *(_OWORD *)((char *)a3 + 168) = v14;
  *(_OWORD *)((char *)a3 + 152) = v13;
  if (a3 != a2)
  {
    sub_18D169A40((char *)a3 + 208, *((char **)a2 + 26), *((_QWORD *)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3);
    sub_18D169A40((char *)a3 + 232, *((char **)a2 + 29), *((_QWORD *)a2 + 30), (uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 3);
  }
  *((_WORD *)a3 + 128) = *((_WORD *)a2 + 128);
  v16 = *((unsigned int *)a2 + 51);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 8 * v16;
    do
    {
      v19 = *(double *)(*((_QWORD *)a2 + 29) + v17);
      if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v19 < 0.0)
      {
        v74 = 12;
        v73 = 4;
        v44 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v70 = v45 + (double)v44;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, Assistance rejected due to over max speed, %.3lf", v46, v47, v48, v49, v50, SLOBYTE(v70));
        goto LABEL_27;
      }
      if (v19 >= 40.0)
      {
        v74 = 12;
        v73 = 4;
        v51 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v71 = v52 + (double)v51;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, Assistance not used due to speed,%.3lf,over max speed", v53, v54, v55, v56, v57, SLOBYTE(v71));
        goto LABEL_27;
      }
      if ((*(_QWORD *)(*((_QWORD *)a2 + 26) + v17) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        v74 = 12;
        v73 = 4;
        v58 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v72 = v59 + (double)v58;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, Assistance rejected due to invalid time offset, %.3lf", v60, v61, v62, v63, v64, SLOBYTE(v72));
        goto LABEL_27;
      }
      v17 += 8;
    }
    while (v18 != v17);
    if (raven::AccessoryVehicleSpeedChecker::ScreenWithEstimatorSpeed((uint64_t)this, a2, 4u, 1.5))
    {
      v20 = (cnprint::CNPrinter *)raven::AccessoryVehicleSpeedChecker::ScreenWithEstimatorSpeed((uint64_t)this, a2, 1u, 2.5);
      if ((_DWORD)v20)
      {
        v21 = *((_DWORD *)this + 6);
        if (v21 < 1)
          return 0;
        *((_DWORD *)this + 6) = v21 - (*(double *)(*((_QWORD *)a2 + 30) - 8) > 0.05);
        if (cnprint::CNPrinter::GetLogLevel(v20) <= 1)
        {
          v74 = 12;
          v73 = 1;
          v22 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
          v67 = v23 + (double)v22;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.2lf,AccessoryVehicleSpeedChecker,rejectionCount,%d,speed,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v67));
        }
        if (!*((_DWORD *)this + 6))
          return 0;
      }
    }
  }
LABEL_27:
  v65 = (void *)*((_QWORD *)a3 + 26);
  *((_DWORD *)a3 + 51) = 0;
  if (v65)
  {
    *((_QWORD *)a3 + 27) = v65;
    operator delete(v65);
  }
  v66 = (void *)*((_QWORD *)a3 + 29);
  *((_QWORD *)a3 + 26) = 0;
  *((_QWORD *)a3 + 27) = 0;
  *((_QWORD *)a3 + 28) = 0;
  if (v66)
  {
    *((_QWORD *)a3 + 30) = v66;
    operator delete(v66);
  }
  result = 0;
  *((_QWORD *)a3 + 29) = 0;
  *((_QWORD *)a3 + 30) = 0;
  *((_QWORD *)a3 + 31) = 0;
  return result;
}

uint64_t raven::AccessoryVehicleSpeedChecker::Reset(uint64_t this)
{
  *(_DWORD *)(this + 24) = 0;
  return this;
}

char *sub_18D169A40(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_18D07AFE4();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_18D169B48(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_18D169B48(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_18D07AFE4();
  result = (char *)sub_18D0788C8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupMeanCn0ProbabilityGivenOutdoor(uint64_t a1, uint64_t *a2, _BYTE *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  double v11;
  double *v12;
  unsigned __int8 v13;
  __int16 v14;

  v9 = *a2;
  if ((unint64_t)*a2 < 0x2E)
  {
    switch(*a3)
    {
      case 1:
      case 5:
        result = 0;
        v12 = (double *)&unk_18D316B00;
        break;
      case 2:
        result = 0;
        v12 = (double *)&unk_18D316C70;
        break;
      case 3:
        result = 0;
        v12 = (double *)&unk_18D316DE0;
        break;
      case 4:
        result = 0;
        v12 = (double *)&unk_18D316F50;
        break;
      case 6:
        result = 0;
        v12 = (double *)&unk_18D3170C0;
        break;
      default:
        goto LABEL_3;
    }
    v11 = v12[v9];
  }
  else
  {
    v14 = 12;
    v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "LookupMeanCn0ProbabilityGivenOutdoor(),index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v9);
LABEL_3:
    result = 0xFFFFFFFFLL;
    v11 = -1.0;
  }
  *a4 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupMeanCn0ProbabilityGivenIndoor(raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables *this, const unint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  double v11;
  unsigned __int8 v12;
  __int16 v13;

  v9 = *a2;
  if (*a2 < 0x2E)
  {
    result = 0;
    v11 = dbl_18D317230[v9];
  }
  else
  {
    v13 = 12;
    v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "LookupMeanCn0ProbabilityGivenIndoor(),index out of bound,%lu", a4, a5, a6, a7, a8, v9);
    result = 0xFFFFFFFFLL;
    v11 = -1.0;
  }
  *a3 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupNumSatsProbabilityGivenOutdoor(uint64_t a1, uint64_t *a2, _BYTE *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  double v11;
  double *v12;
  unsigned __int8 v13;
  __int16 v14;

  v9 = *a2;
  if ((unint64_t)*a2 < 0x47)
  {
    switch(*a3)
    {
      case 1:
      case 5:
        result = 0;
        v12 = (double *)&unk_18D3173A0;
        break;
      case 2:
        result = 0;
        v12 = (double *)&unk_18D3175D8;
        break;
      case 3:
        result = 0;
        v12 = (double *)&unk_18D317810;
        break;
      case 4:
        result = 0;
        v12 = (double *)&unk_18D317A48;
        break;
      case 6:
        result = 0;
        v12 = (double *)&unk_18D317C80;
        break;
      default:
        goto LABEL_3;
    }
    v11 = v12[v9];
  }
  else
  {
    v14 = 12;
    v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "LookupNumSatsProbabilityGivenOutdoor(),index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v9);
LABEL_3:
    result = 0xFFFFFFFFLL;
    v11 = -1.0;
  }
  *a4 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupNumSatsProbabilityGivenIndoor(raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables *this, const unint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  double v11;
  unsigned __int8 v12;
  __int16 v13;

  v9 = *a2;
  if (*a2 < 0x47)
  {
    result = 0;
    v11 = dbl_18D317EB8[v9];
  }
  else
  {
    v13 = 12;
    v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "LookupNumSatsProbabilityGivenIndoor(),index out of bound,%lu", a4, a5, a6, a7, a8, v9);
    result = 0xFFFFFFFFLL;
    v11 = -1.0;
  }
  *a3 = v11;
  return result;
}

void raven::RavenSolutionPostprocessor::AdjustRavenSolutionUncertainties(raven::RavenSolutionPostprocessor *this, float64x2_t *a2)
{
  float64x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  _BYTE *v21;
  float64x2_t *v22;
  float64_t v23;
  float64_t v24;
  float64_t v25;
  float64x2_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  double *v31;
  double v32;
  unsigned int v33;
  int v34;
  unsigned int v36;
  _BOOL4 v38;
  int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float64x2_t *v44;
  int v45;
  int8x16_t v46;
  int8x16_t v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double *v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  float64_t v74;
  float64_t v75;
  float64_t v76;
  float64x2_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float64_t v91;
  float64_t v92;
  float64_t v93;
  float64x2_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  float64_t v113;
  float64_t v114;
  float64_t v115;
  float64x2_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  float64x2_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  float64x2_t v132;
  double v133;
  float64x2_t v134;
  double v135;
  char v136;
  float64_t v137;
  float64_t v138;
  float64_t v139;
  float64_t v140;
  float64_t v141;
  unsigned __int8 v142;
  __int16 v143;
  int64x2_t v144;
  uint64_t v145;
  void *v146;
  __int128 v147;
  uint64_t v148;
  double *v149;
  float64_t v150;
  float64_t v151;
  float64_t v152;
  float64_t v153;
  float64_t v154;
  float64_t v155;
  float64_t v156;
  float64x2_t v157;
  _BYTE v158[128];
  _BYTE v159[24];
  uint64_t v160;
  double *v161;
  _BYTE v162[88];

  v4 = (float64x2_t *)((char *)a2 + 1416);
  v5 = *((_QWORD *)this + 1);
  v6 = 3440;
  if (LOBYTE(a2[151].f64[1]) - 3 < 2)
    v6 = 3448;
  v7 = 3456;
  if (LOBYTE(a2[151].f64[1]) - 3 < 2)
    v7 = 3464;
  v8 = 3424;
  if (LOBYTE(a2[151].f64[1]) - 3 < 2)
    v8 = 3432;
  v9 = *(double *)(v5 + v8);
  v10 = *(double *)(v5 + v7);
  v11 = *(double *)(v5 + v6);
  v12 = a2[67].f64[0];
  sub_18D16AF50((uint64_t)v158, a2[79].f64[1], a2[80].f64[0], a2[80].f64[1]);
  v18 = v9 * v9;
  v19 = v18 + v18;
  if (!LOBYTE(a2[91].f64[1]))
  {
    v32 = v10 * v10 + v10 * v10;
LABEL_104:
    v39 = 3;
    goto LABEL_105;
  }
  v20 = 0;
  v148 = 0x300000003;
  v146 = &unk_1E25C78E0;
  v21 = (_BYTE *)&a2[6].f64[1];
  v22 = a2 + 73;
  v147 = xmmword_18D30BB60;
  v149 = &v150;
  v23 = a2[94].f64[0];
  v24 = a2[94].f64[1];
  v150 = a2[93].f64[1];
  v151 = v23;
  v25 = a2[95].f64[0];
  v152 = v24;
  v153 = v23;
  v26 = v4[7];
  v154 = v25;
  v155 = v26.f64[0];
  v156 = v24;
  *(_DWORD *)v159 = 303108111;
  v157 = v26;
  while (1)
  {
    v27 = v159[v20];
    if (*((_DWORD *)a2[33].f64 + v27 + 1) || *((_DWORD *)&a2[16].f64[1] + v27 + 1) || *((_DWORD *)a2[25].f64 + v27))
      break;
    if (++v20 == 4)
    {
      v28 = 0;
      goto LABEL_16;
    }
  }
  if (!*v21)
  {
    v28 = 1;
    goto LABEL_23;
  }
  *(_WORD *)v159 = 12;
  v144.i8[0] = 2;
  v137 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v159, (unsigned __int8 *)&v144, "%.3lf, position uncertainty was floored aggressively", v13, v14, v15, v16, v17, SLOBYTE(v137));
  v28 = 1;
  v22 = a2 + 73;
LABEL_16:
  if (!*v21)
  {
LABEL_23:
    v33 = LOBYTE(a2[151].f64[1]);
    v34 = 1;
    if (v33 <= 6 && ((1 << v33) & 0x59) != 0)
    {
      if (v33 - 3 <= 1)
      {
        v34 = 0;
        v36 = LOBYTE(a2[133].f64[0]);
        v38 = v36 > 9 || v36 == 5;
        goto LABEL_37;
      }
      v34 = 0;
    }
    v38 = 0;
LABEL_37:
    if (v12 <= 0.0 || !(v34 | v38))
    {
      v39 = 3;
      if (!v28)
        goto LABEL_88;
      goto LABEL_87;
    }
    v40 = 8.0;
    if (!v38)
      v40 = v9;
    if (v34)
      v40 = 2.0;
    if (v40 <= a2[67].f64[0])
      v40 = a2[67].f64[0];
    v19 = v40 * v40;
    v39 = 3;
    goto LABEL_86;
  }
  v29 = LODWORD(a2[67].f64[1]);
  if (v29 <= *(_DWORD *)(v5 + 3388))
  {
    v39 = 0;
    v31 = (double *)(v5 + 3392);
  }
  else
  {
    v30 = HIDWORD(a2[67].f64[1]);
    if (v29 - v30 <= *(_DWORD *)(v5 + 3384))
    {
      v31 = (double *)(v5 + 3400);
      v39 = 1;
    }
    else
    {
      if (*(double *)(v5 + 3368) * (double)v29 >= (double)v30)
      {
        v41 = 0.0;
        if (a2[68].f64[0] <= *(double *)(v5 + 3376))
        {
          v39 = 3;
          goto LABEL_53;
        }
        v31 = (double *)(v5 + 3416);
      }
      else
      {
        v31 = (double *)(v5 + 3408);
      }
      v39 = 2;
    }
  }
  v41 = *v31;
LABEL_53:
  v19 = v19 + v41 * v41;
  if (v12 > 0.0 && v19 <= a2[67].f64[0] * a2[67].f64[0])
    v19 = a2[67].f64[0] * a2[67].f64[0];
  v42 = a2[66].f64[1];
  if (v42 > 7.0)
  {
    v43 = v42 * 10.0 * (v42 * 10.0);
    if (v19 <= v43)
      v19 = v43;
  }
  if (*((_BYTE *)this + 424) && *((_BYTE *)this + 344))
  {
    v44 = v22;
    v45 = *((unsigned __int8 *)this + 264);
    if (v45 == 11 || v45 == 4)
    {
      v144 = vdupq_n_s64(0x7FF8000000000000uLL);
      v145 = 0x7FF8000000000000;
    }
    else
    {
      v144 = vdupq_n_s64(0x7FF8000000000000uLL);
      v145 = 0x7FF8000000000000;
      if (v45 != 16)
        goto LABEL_86;
    }
    *(float64x2_t *)v159 = vsubq_f64(a2[92], *((float64x2_t *)this + 22));
    *(double *)&v159[16] = a2[93].f64[0] - *((double *)this + 46);
    if (sub_18D056ECC((uint64_t)v158, (double *)v159, (double *)v144.i64))
    {
      *(double *)v47.i64 = *(double *)&v144.i64[1] * *(double *)&v144.i64[1];
      *(double *)v46.i64 = *(double *)v144.i64 * *(double *)v144.i64 + *(double *)&v144.i64[1] * *(double *)&v144.i64[1];
      v48 = sqrt(*(double *)v46.i64);
    }
    else
    {
      v48 = NAN;
    }
    v49 = CNTimeSpan::operator-((uint64_t)&a2->f64[1], (_QWORD *)this + 9, v46, v47);
    v51 = fabs(v50 + (double)v49);
    v22 = v44;
    if (v51 < 10.0 || v48 < 100.0)
    {
      if (!*((_BYTE *)this + 424))
        sub_18D164CA0();
      if ((*v149 + v149[HIDWORD(v147) + 1] + v149[2 * HIDWORD(v147) + 2]) * 0.666666667 <= v18 + v18)
      {
        v57 = v9 * v9;
      }
      else
      {
        v160 = 0x300000003;
        *(_QWORD *)v159 = &unk_1E25C78E0;
        *(_OWORD *)&v159[8] = xmmword_18D30BB60;
        v161 = (double *)v162;
        if (sub_18D04BB5C((uint64_t)v158, (uint64_t)&v146, (uint64_t)v159))
        {
          v57 = *v161;
          if (v18 > *v161)
            v57 = v9 * v9;
          v58 = &v161[*(int *)&v159[20]];
          v22 = v44;
          if (v18 <= v58[1])
            v18 = v58[1];
        }
        else
        {
          v143 = 12;
          v142 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, &v142, "Solution Postprocessor: Unable to rotate user position covariance from ECEF to ENU frame", v52, v53, v54, v55, v56, v136);
          v57 = v9 * v9;
          v22 = v44;
        }
      }
      v59 = *((double *)this + 37)
          + v57
          + *(double *)v144.i64 * *(double *)v144.i64
          + *((double *)this + 40)
          + v18
          + *(double *)&v144.i64[1] * *(double *)&v144.i64[1];
      if (v19 <= v59)
      {
        if (v48 - sqrt(v19) > 30.0 && v48 * v48 / (v19 + v59) > 0.64)
          v19 = v48 * v48 / 0.64 - v59;
      }
      else
      {
        v19 = v59;
      }
    }
  }
LABEL_86:
  if ((v28 & 1) == 0)
    goto LABEL_88;
LABEL_87:
  if (!raven::RavenSolutionPostprocessor::Update_EHE_Floor_Filter((uint64_t)this, (uint64_t)v22, (uint64_t)&a2[6].f64[1], v19))goto LABEL_90;
LABEL_88:
  if (*((_DWORD *)this + 336))
    v19 = *((double *)this + 167) * *((double *)this + 167);
LABEL_90:
  v160 = 0x300000003;
  *(_QWORD *)v159 = &unk_1E25C78E0;
  *(_OWORD *)&v159[8] = xmmword_18D30BB60;
  v161 = (double *)v162;
  if (!sub_18D04BB5C((uint64_t)v158, (uint64_t)&v146, (uint64_t)v159))
  {
    v144.i16[0] = 12;
    LOBYTE(v143) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, (unsigned __int8 *)&v143, "Solution Postprocessor: Unable to rotate device velocity covariance from ECEF to ENU frame", v60, v61, v62, v63, v64, v136);
    goto LABEL_97;
  }
  v65 = *v161 + v161[*(int *)&v159[20] + 1];
  v66 = fabs(v65);
  if (v65 <= 0.0 || *(_QWORD *)&v66 >= 0x7FF0000000000000)
  {
    v144.i16[0] = 12;
    LOBYTE(v143) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, (unsigned __int8 *)&v143, "Solution Postprocessor: Invalid horizontal variance %.3lf", v60, v61, v62, v63, v64, SLOBYTE(v65));
LABEL_97:
    *(_WORD *)v159 = 12;
    v144.i8[0] = 4;
    v138 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v159, (unsigned __int8 *)&v144, "t,%.3lf,Solution Postprocessor: Couldn't compute the scale factor for device position covariance", v68, v69, v70, v71, v72, SLOBYTE(v138));
    goto LABEL_98;
  }
  v131 = v19 / v65;
  if (v131 > 1.0)
  {
    v132 = vmulq_n_f64(v4[6], v131);
    v4[5] = vmulq_n_f64(v4[5], v131);
    v4[6] = v132;
    v4[7] = vmulq_n_f64(v4[7], v131);
  }
LABEL_98:
  v32 = v10 * v10 + v10 * v10;
  if ((v39 - 1) >= 2)
  {
    if (!v39)
    {
      v39 = 0;
      v32 = fmax(v32, 1110.8889);
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  v73 = a2[84].f64[1] * 3.0 * (a2[84].f64[1] * 3.0);
  if (v32 > v73)
    v73 = v32;
  v32 = v73;
LABEL_105:
  if (!LOBYTE(a2[96].f64[1]))
    goto LABEL_114;
  v148 = 0x300000003;
  v146 = &unk_1E25C78E0;
  v147 = xmmword_18D30BB60;
  v149 = &v150;
  v74 = a2[99].f64[0];
  v75 = a2[99].f64[1];
  v150 = a2[98].f64[1];
  v151 = v74;
  v76 = a2[100].f64[0];
  v152 = v75;
  v153 = v74;
  v77 = v4[12];
  v154 = v76;
  v155 = v77.f64[0];
  v156 = v75;
  v157 = v77;
  v160 = 0x300000003;
  *(_QWORD *)v159 = &unk_1E25C78E0;
  *(_OWORD *)&v159[8] = xmmword_18D30BB60;
  v161 = (double *)v162;
  if (!sub_18D04BB5C((uint64_t)v158, (uint64_t)&v146, (uint64_t)v159))
  {
    v144.i16[0] = 12;
    LOBYTE(v143) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, (unsigned __int8 *)&v143, "Solution Postprocessor: Unable to rotate device velocity covariance from ECEF to ENU frame", v78, v79, v80, v81, v82, v136);
    goto LABEL_113;
  }
  v83 = *v161 + v161[*(int *)&v159[20] + 1];
  v84 = fabs(v83);
  if (v83 <= 0.0 || *(_QWORD *)&v84 >= 0x7FF0000000000000)
  {
    v144.i16[0] = 12;
    LOBYTE(v143) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, (unsigned __int8 *)&v143, "Solution Postprocessor: Invalid horizontal variance %.3lf", v78, v79, v80, v81, v82, SLOBYTE(v83));
LABEL_113:
    *(_WORD *)v159 = 12;
    v144.i8[0] = 4;
    v139 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v159, (unsigned __int8 *)&v144, "t,%.3lf,Solution Postprocessor: Couldn't compute the scale factor for device velocity covariance", v86, v87, v88, v89, v90, SLOBYTE(v139));
    goto LABEL_114;
  }
  v133 = v32 / v83;
  if (v133 > 1.0)
  {
    v134 = vmulq_n_f64(v4[11], v133);
    v4[10] = vmulq_n_f64(v4[10], v133);
    v4[11] = v134;
    v4[12] = vmulq_n_f64(v4[12], v133);
  }
LABEL_114:
  if (!LOBYTE(a2[79].f64[0]))
    goto LABEL_123;
  v148 = 0x300000003;
  v146 = &unk_1E25C78E0;
  v147 = xmmword_18D30BB60;
  v149 = &v150;
  v91 = a2[81].f64[1];
  v92 = a2[82].f64[0];
  v150 = a2[81].f64[0];
  v151 = v91;
  v93 = a2[82].f64[1];
  v152 = v92;
  v153 = v91;
  v94 = a2[83];
  v154 = v93;
  v155 = v94.f64[0];
  v156 = v92;
  v157 = v94;
  v160 = 0x300000003;
  *(_QWORD *)v159 = &unk_1E25C78E0;
  *(_OWORD *)&v159[8] = xmmword_18D30BB60;
  v161 = (double *)v162;
  if (!sub_18D04BB5C((uint64_t)v158, (uint64_t)&v146, (uint64_t)v159))
  {
    v144.i16[0] = 12;
    LOBYTE(v143) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, (unsigned __int8 *)&v143, "Solution Postprocessor: Unable to rotate device velocity covariance from ECEF to ENU frame", v95, v96, v97, v98, v99, v136);
    goto LABEL_122;
  }
  v100 = *v161 + v161[*(int *)&v159[20] + 1];
  v101 = fabs(v100);
  if (v100 <= 0.0 || *(_QWORD *)&v101 >= 0x7FF0000000000000)
  {
    v144.i16[0] = 12;
    LOBYTE(v143) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, (unsigned __int8 *)&v143, "Solution Postprocessor: Invalid horizontal variance %.3lf", v95, v96, v97, v98, v99, SLOBYTE(v100));
LABEL_122:
    *(_WORD *)v159 = 12;
    v144.i8[0] = 4;
    v140 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v159, (unsigned __int8 *)&v144, "t,%.3lf,Solution Postprocessor: Couldn't compute the scale factor for user position covariance", v103, v104, v105, v106, v107, SLOBYTE(v140));
    goto LABEL_123;
  }
  v135 = v19 / v100;
  if (v135 > 1.0)
  {
    a2[81] = vmulq_n_f64(a2[81], v135);
    a2[82] = vmulq_n_f64(a2[82], v135);
    a2[83] = vmulq_n_f64(a2[83], v135);
  }
LABEL_123:
  v108 = v11 * 0.0174532925 * (v11 * 0.0174532925);
  if (LOBYTE(a2[84].f64[0]))
  {
    v109 = a2[86].f64[1];
    if (v109 <= v32)
      v109 = v32;
    a2[86].f64[1] = v109;
    v110 = 39.4784176;
    if (v39 == 3)
    {
      v111 = a2[84].f64[1];
      if (v111 > 0.0)
      {
        v112 = v109 / (v111 * v111);
        if (v108 <= v112)
          v108 = v112;
        v110 = fmin(v108, 39.4784176);
      }
    }
  }
  else
  {
    v110 = v11 * 0.0174532925 * (v11 * 0.0174532925);
  }
  if (BYTE1(a2[84].f64[0]))
  {
    v148 = 0x300000003;
    v146 = &unk_1E25C78E0;
    v147 = xmmword_18D30BB60;
    v149 = &v150;
    v113 = a2[89].f64[0];
    v114 = a2[89].f64[1];
    v150 = a2[88].f64[1];
    v151 = v113;
    v115 = a2[90].f64[0];
    v152 = v114;
    v153 = v113;
    v116 = v4[2];
    v154 = v115;
    v155 = v116.f64[0];
    v156 = v114;
    v157 = v116;
    v160 = 0x300000003;
    *(_QWORD *)v159 = &unk_1E25C78E0;
    *(_OWORD *)&v159[8] = xmmword_18D30BB60;
    v161 = (double *)v162;
    if (sub_18D04BB5C((uint64_t)v158, (uint64_t)&v146, (uint64_t)v159))
    {
      v122 = v161[*(int *)&v159[20] + 1];
      v123 = *v161 + v122;
      if (v123 > 0.0 && COERCE_UNSIGNED_INT64(fabs(*v161 + v122)) < 0x7FF0000000000000)
      {
        v124 = (v110 + v110) / v123;
        if (v124 > 1.0)
        {
          v125 = vmulq_n_f64(v4[1], v124);
          *v4 = vmulq_n_f64(*v4, v124);
          v4[1] = v125;
          v4[2] = vmulq_n_f64(v4[2], v124);
        }
        return;
      }
      v144.i16[0] = 12;
      LOBYTE(v143) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, (unsigned __int8 *)&v143, "Solution Postprocessor: Invalid horizontal variance %.3lf", v117, v118, v119, v120, v121, SLOBYTE(v123));
    }
    else
    {
      v144.i16[0] = 12;
      LOBYTE(v143) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, (unsigned __int8 *)&v143, "Solution Postprocessor: Unable to rotate device velocity covariance from ECEF to ENU frame", v117, v118, v119, v120, v121, v136);
    }
    *(_WORD *)v159 = 12;
    v144.i8[0] = 4;
    v141 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v159, (unsigned __int8 *)&v144, "t,%.3lf,Solution Postprocessor: Couldn't compute the scale factor for DOT covariance", v126, v127, v128, v129, v130, SLOBYTE(v141));
  }
}

BOOL raven::RavenSolutionPostprocessor::Update_EHE_Floor_Filter(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _OWORD *v8;
  double v9;
  float64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  _BOOL8 result;
  uint64_t v18;
  unsigned int v19;
  double v20;
  double v21;
  BOOL v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unsigned int v28;
  double v29;
  char v30;
  unsigned __int8 v31;
  __int16 v32;
  double v33;
  double v34;
  _BYTE v35[128];
  double v36;
  float64x2_t v37;

  v8 = (_OWORD *)(a1 + 1352);
  v9 = *(double *)(a2 + 104);
  v36 = v9 - *(double *)(a1 + 1352);
  v10 = *(float64x2_t *)(a2 + 112);
  v37 = vsubq_f64(v10, *(float64x2_t *)(a1 + 1360));
  sub_18D16AF50((uint64_t)v35, v9, v10.f64[0], v10.f64[1]);
  if (sub_18D056ECC((uint64_t)v35, &v36, &v33))
  {
    v16 = sqrt(v33 * v33 + v34 * v34);
    if (fabs(*(double *)(a3 + 1040) + -1.0) >= 2.22044605e-16)
    {
      v18 = *(_QWORD *)(a2 + 120);
      *v8 = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 1368) = v18;
      v19 = *(_DWORD *)(a1 + 1344);
      v20 = sqrt(a4);
      if (v19)
      {
        v21 = *(double *)(a1 + 1336);
        v23 = v20 >= 100.0 && v19 >= 5 && v21 < 40.0;
        if (!v23)
        {
          v24 = v16 + -6.0;
          v25 = v24 * 0.0714285714;
          v23 = v24 < 0.0;
          v26 = 0.0;
          if (!v23)
            v26 = v25;
          v27 = v26 * ((double)v19 + -1.0) + 1.0;
          if (v19 + 1 < 0x14)
            v28 = v19 + 1;
          else
            v28 = 20;
          v29 = v27 / (double)v28;
          if (v29 > 1.0)
            v29 = 1.0;
          *(double *)(a1 + 1336) = v21 + v29 * (v20 - v21);
          *(_DWORD *)(a1 + 1344) = vcvtad_u64_f64(1.0 / v29);
        }
        return 1;
      }
      else if (v20 <= 100.0)
      {
        result = 1;
        *(_DWORD *)(a1 + 1344) = 1;
        *(double *)(a1 + 1336) = v20;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return *(_DWORD *)(a1 + 1344) != 0;
    }
  }
  else
  {
    v32 = 12;
    v31 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "Update_EHE_Floor_Filter: Failed to rotate delta_ECEF vector from last RavenSolution.", v11, v12, v13, v14, v15, v30);
    result = 0;
    *(_QWORD *)(a1 + 1336) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 1344) = 0;
    *v8 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_QWORD *)(a1 + 1368) = 0x7FF8000000000000;
  }
  return result;
}

uint64_t raven::RavenSolutionPostprocessor::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v12;
  unsigned __int8 v13;
  __int16 v14;
  unsigned __int8 v15;
  __int16 v16;
  unsigned __int8 v17;
  __int16 v18;

  if (*(_BYTE *)(a1 + 1))
  {
    v18 = 12;
    v17 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "Warning: Solution Postprocessor: configured more than once", a4, a5, a6, a7, a8, v12);
  }
  *(_BYTE *)(a1 + 1) = 0;
  v10 = *a2;
  if (*a2 && *(_BYTE *)(v10 + 33))
  {
    *(_QWORD *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 1) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "Solution Postprocessor: configured successfully", a4, a5, a6, a7, a8, v12);
    return 0;
  }
  else
  {
    v16 = 12;
    v15 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "Solution Postprocessor: could not be configured. Failed to create or initialize RavenParameters.", a4, a5, a6, a7, a8, v12);
    return 0xFFFFFFFFLL;
  }
}

uint64_t raven::RavenSolutionPostprocessor::IsConfigured(raven::RavenSolutionPostprocessor *this)
{
  return *((unsigned __int8 *)this + 1);
}

uint64_t raven::RavenSolutionPostprocessor::HandleEvent(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)(a2 + 104);
  return 0;
}

uint64_t raven::RavenSolutionPostprocessor::HandleEvent(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 424))
  {
    memcpy((void *)(a1 + 72), (const void *)(a2 + 8), 0x160uLL);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = &unk_1E25C21B8;
    memcpy((void *)(a1 + 72), (const void *)(a2 + 8), 0x160uLL);
    *(_BYTE *)(a1 + 424) = 1;
  }
  return 0;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(_BYTE *)(a1 + 1376))
  {
    v2 = *(_OWORD *)(a2 + 8);
    v3 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 1408) = v3;
    *(_OWORD *)(a1 + 1392) = v2;
    v4 = *(_OWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 1488) = *(_BYTE *)(a2 + 104);
    *(_OWORD *)(a1 + 1472) = v6;
    *(_OWORD *)(a1 + 1456) = v5;
    *(_OWORD *)(a1 + 1440) = v4;
  }
  else
  {
    *(_QWORD *)(a1 + 1384) = &unk_1E25C2FC8;
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 1408) = v8;
    *(_OWORD *)(a1 + 1392) = v7;
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_OWORD *)(a2 + 72);
    v11 = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 1488) = *(_BYTE *)(a2 + 104);
    *(_OWORD *)(a1 + 1472) = v11;
    *(_OWORD *)(a1 + 1456) = v10;
    *(_OWORD *)(a1 + 1440) = v9;
    *(_BYTE *)(a1 + 1376) = 1;
  }
  return 0;
}

uint64_t sub_18D16AF50(uint64_t a1, float64_t a2, float64_t a3, double a4)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0x300000003;
  *(_QWORD *)(a1 + 16) = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 24) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)a1 = &off_1E25B9560;
  sub_18D04DE7C((_BYTE *)a1, a2, a3, a4);
  return a1;
}

void sub_18D16AFB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E25B9B80;
  v1[2] = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t **sub_18D16AFD8(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;

  if (a2)
  {
    v2 = *result;
    v3 = a2 - 0x7B425ED097B425EDLL * (((uint64_t)result[1] - **result) >> 5);
    if (v3 < 1)
    {
      v7 = 15 - v3;
      v8 = &v2[-(v7 >> 4)];
      *result = v8;
      v5 = *v8;
      v6 = ~(_DWORD)v7 & 0xF;
    }
    else
    {
      v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      *result = v4;
      v5 = *v4;
      v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 864 * v6);
  }
  return result;
}

_QWORD *sub_18D16B054(_QWORD *result, char *a2, char *a3, _QWORD *a4, char *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = a4;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = 0x84BDA12F684BDA13 * ((uint64_t)&a5[-v10] >> 5);
      if ((uint64_t)(0x84BDA12F684BDA13 * ((v11 - a2) >> 5)) < v12)
        v12 = 0x84BDA12F684BDA13 * ((v11 - a2) >> 5);
      v11 -= 864 * v12;
      a5 -= 864 * v12;
      if (v12)
        result = memmove(a5, v11, 864 * v12);
      if (v11 == a2)
        break;
      v13 = *--v6;
      v10 = v13;
      a5 = (char *)(v13 + 13824);
    }
    if ((char *)(*v6 + 13824) == a5)
    {
      v14 = (char *)v6[1];
      ++v6;
      a5 = v14;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

_QWORD *sub_18D16B144(_QWORD *result, _BYTE *__src, _BYTE *a3, void **a4, char *__dst)
{
  void **v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  char *v13;

  v6 = a4;
  v7 = __src;
  v8 = result;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x84BDA12F684BDA13 * ((v10 - __dst + 13824) >> 5);
      v12 = (uint64_t)(0x84BDA12F684BDA13 * ((v9 - v7) >> 5)) >= v11 ? v11 : 0x84BDA12F684BDA13 * ((v9 - v7) >> 5);
      if (v12)
        result = memmove(__dst, v7, 864 * v12);
      v7 += 864 * v12;
      if (v7 == v9)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 864 * v12;
    if ((char *)*(v6 - 1) + 13824 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

uint64_t raven::RavenIMUPreprocessorActiveObject::RavenIMUPreprocessorActiveObject(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;

  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(_QWORD *)v3 = &off_1E25C3DB0;
  *(_BYTE *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_QWORD *)(v3 + 504) = 0;
  *(_DWORD *)(v3 + 512) = 0;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 552) = 0u;
  *(_OWORD *)(v3 + 568) = 0u;
  *(_OWORD *)(v3 + 584) = 0u;
  *(_OWORD *)(v3 + 600) = 0u;
  *(_OWORD *)(v3 + 616) = 0u;
  *(_DWORD *)(v3 + 632) = 0;
  *(_OWORD *)(v3 + 640) = 0u;
  *(_OWORD *)(v3 + 656) = 0u;
  *(_OWORD *)(v3 + 672) = 0u;
  *(_OWORD *)(v3 + 688) = 0u;
  *(_OWORD *)(v3 + 704) = 0u;
  *(_OWORD *)(v3 + 720) = 0u;
  raven::RavenIMUPreprocessorActiveObject::Reset((raven::RavenIMUPreprocessorActiveObject *)v3);
  return a1;
}

void sub_18D16B2C0(_Unwind_Exception *a1)
{
  cnframework::ActiveObjectBase *v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_18D16C7E0((_QWORD *)v1 + 86);
  sub_18D07BD60(v3);
  sub_18D16C7E0((_QWORD *)v1 + 71);
  sub_18D07BD60(v2);
  cnframework::ActiveObjectBase::~ActiveObjectBase(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIMUPreprocessorActiveObject::Configure(_BYTE *a1, uint64_t *a2, __n128 a3, int8x16_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  int v26;
  int v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  double **v44;
  uint64_t v45;
  double *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  double *v52;
  __n128 v53;
  void **v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  double v60;
  int v61;
  int v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v78;
  unint64_t v79;
  double **v80;
  uint64_t v81;
  double *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  double *v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  void *__p[2];
  char v99;
  unsigned __int8 v100;
  __int16 v101;

  if (a1[480])
  {
    v101 = 12;
    v100 = 3;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v99 >= 0)
      v11 = __p;
    else
      LOBYTE(v11) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "Warning: %s configured more than once", v6, v7, v8, v9, v10, (char)v11);
    if (v99 < 0)
      operator delete(__p[0]);
  }
  a1[480] = 0;
  v12 = *a2;
  if (!*a2 || !*(_BYTE *)(v12 + 33))
  {
    v101 = 12;
    v100 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v99 >= 0)
      v22 = __p;
    else
      LOBYTE(v22) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; invalid pointer",
      v17,
      v18,
      v19,
      v20,
      v21,
      (char)v22);
    goto LABEL_68;
  }
  *((_QWORD *)a1 + 62) = 0;
  *((_QWORD *)a1 + 63) = 0;
  *((_QWORD *)a1 + 61) = v12;
  *((_DWORD *)a1 + 128) = 0;
  v13 = (void **)*((_QWORD *)a1 + 66);
  v14 = *((_QWORD *)a1 + 67);
  *((_QWORD *)a1 + 70) = 0;
  v15 = v14 - (_QWORD)v13;
  if (v15 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v13 = (void **)(*((_QWORD *)a1 + 66) + 8);
      *((_QWORD *)a1 + 66) = v13;
      v15 = *((_QWORD *)a1 + 67) - (_QWORD)v13;
    }
    while (v15 > 0x10);
  }
  if (v15 >> 3 == 1)
  {
    v16 = 256;
  }
  else
  {
    if (v15 >> 3 != 2)
      goto LABEL_20;
    v16 = 512;
  }
  *((_QWORD *)a1 + 69) = v16;
LABEL_20:
  v23 = *((_QWORD *)a1 + 61);
  v24 = *(_DWORD *)(v23 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(v23 + 1304);
  *((_DWORD *)a1 + 128) = v24;
  if ((v24 & 0x80000000) != 0)
  {
    v28 = 0.0;
  }
  else
  {
    v25 = (double)v24 / a3.n128_f64[0] * ((double)v24 / a3.n128_f64[0]);
    v26 = -v24;
    v27 = (2 * v24) | 1;
    v28 = 0.0;
    do
    {
      __p[0] = COERCE_VOID_(exp((double)v26 * -0.5 * (double)v26 / v25));
      v28 = v28 + *(double *)__p;
      a3.n128_f64[0] = sub_18D077D00((_QWORD *)a1 + 65, (double *)__p);
      ++v26;
      --v27;
    }
    while (v27);
  }
  v29 = *((_QWORD *)a1 + 70);
  if (v29 != ((2 * v24) | 1))
  {
    v101 = 12;
    v100 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *, __n128))(*(_QWORD *)a1 + 16))(__p, a1, a3);
    if (v99 >= 0)
      v41 = __p;
    else
      LOBYTE(v41) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; invalid gyro kernel,size,%lu,half_width,%u",
      v36,
      v37,
      v38,
      v39,
      v40,
      (char)v41);
    goto LABEL_68;
  }
  if (fabs(v28) < 2.22044605e-16)
  {
    v101 = 12;
    v100 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v99 >= 0)
      v35 = __p;
    else
      LOBYTE(v35) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; null gyro kernel",
      v30,
      v31,
      v32,
      v33,
      v34,
      (char)v35);
LABEL_68:
    if (v99 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  v42 = *((_QWORD *)a1 + 66);
  v43 = *((_QWORD *)a1 + 69);
  v44 = (double **)(v42 + 8 * (v43 >> 9));
  v45 = *((_QWORD *)a1 + 67);
  if (v45 == v42)
    v46 = 0;
  else
    v46 = &(*v44)[*((_QWORD *)a1 + 69) & 0x1FFLL];
  v47 = v43 + v29;
  v48 = v47 >> 9;
  v49 = v47 & 0x1FF;
LABEL_39:
  v50 = v46 - 512;
  while (1)
  {
    v51 = v45 == v42 ? 0 : *(_QWORD *)(v42 + 8 * v48) + 8 * v49;
    if (v46 == (double *)v51)
      break;
    *v46 = *v46 / v28;
    ++v46;
    if (*v44 == ++v50)
    {
      v52 = v44[1];
      ++v44;
      v46 = v52;
      goto LABEL_39;
    }
  }
  *((_DWORD *)a1 + 158) = 0;
  v53.n128_u64[1] = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  v54 = (void **)*((_QWORD *)a1 + 81);
  v55 = *((_QWORD *)a1 + 82);
  *((_QWORD *)a1 + 85) = 0;
  v56 = v55 - (_QWORD)v54;
  if (v56 >= 0x11)
  {
    do
    {
      operator delete(*v54);
      v54 = (void **)(*((_QWORD *)a1 + 81) + 8);
      *((_QWORD *)a1 + 81) = v54;
      v56 = *((_QWORD *)a1 + 82) - (_QWORD)v54;
    }
    while (v56 > 0x10);
  }
  if (v56 >> 3 == 1)
  {
    v57 = 256;
  }
  else
  {
    if (v56 >> 3 != 2)
      goto LABEL_53;
    v57 = 512;
  }
  *((_QWORD *)a1 + 84) = v57;
LABEL_53:
  v58 = *((_QWORD *)a1 + 61);
  v59 = *(_DWORD *)(v58 + 1280);
  v53.n128_u64[0] = *(_QWORD *)(v58 + 1288);
  *((_DWORD *)a1 + 158) = v59;
  if ((v59 & 0x80000000) != 0)
  {
    v63 = 0.0;
  }
  else
  {
    v60 = (double)v59 / v53.n128_f64[0] * ((double)v59 / v53.n128_f64[0]);
    v61 = -v59;
    v62 = (2 * v59) | 1;
    v63 = 0.0;
    do
    {
      __p[0] = COERCE_VOID_(exp((double)v61 * -0.5 * (double)v61 / v60));
      v63 = v63 + *(double *)__p;
      v53.n128_f64[0] = sub_18D077D00((_QWORD *)a1 + 80, (double *)__p);
      ++v61;
      --v62;
    }
    while (v62);
  }
  v64 = *((_QWORD *)a1 + 85);
  if (v64 != ((2 * v59) | 1))
  {
    v101 = 12;
    v100 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *, __n128))(*(_QWORD *)a1 + 16))(__p, a1, v53);
    if (v99 >= 0)
      v76 = __p;
    else
      LOBYTE(v76) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; invalid accel kernel,size,%lu,half_width,%u",
      v71,
      v72,
      v73,
      v74,
      v75,
      (char)v76);
    goto LABEL_68;
  }
  a4.i64[0] = 0x3CB0000000000000;
  if (fabs(v63) < 2.22044605e-16)
  {
    v101 = 12;
    v100 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v99 >= 0)
      v70 = __p;
    else
      LOBYTE(v70) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; null accel kernel",
      v65,
      v66,
      v67,
      v68,
      v69,
      (char)v70);
    goto LABEL_68;
  }
  v78 = *((_QWORD *)a1 + 81);
  v79 = *((_QWORD *)a1 + 84);
  v80 = (double **)(v78 + 8 * (v79 >> 9));
  v81 = *((_QWORD *)a1 + 82);
  if (v81 == v78)
    v82 = 0;
  else
    v82 = &(*v80)[*((_QWORD *)a1 + 84) & 0x1FFLL];
  v83 = v79 + v64;
  v84 = v83 >> 9;
  v85 = v83 & 0x1FF;
LABEL_75:
  v86 = v82 - 512;
  while (1)
  {
    v87 = v81 == v78 ? 0 : *(_QWORD *)(v78 + 8 * v84) + 8 * v85;
    if (v82 == (double *)v87)
      break;
    *v82 = *v82 / v63;
    ++v82;
    if (*v80 == ++v86)
    {
      v88 = v80[1];
      ++v80;
      v82 = v88;
      goto LABEL_75;
    }
  }
  v89 = *((_QWORD *)a1 + 61);
  v53.n128_u64[0] = *(_QWORD *)(v89 + 976);
  __p[0] = 0;
  __p[1] = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, (int8x16_t)v53, a4);
  v90.i64[1] = (uint64_t)__p[1];
  *((_OWORD *)a1 + 31) = *(_OWORD *)__p;
  v90.i64[0] = *(_QWORD *)(v89 + 968);
  __p[0] = 0;
  __p[1] = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v90, v91);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)__p;
  cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, 0.0);
  a1[480] = 1;
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  v101 = 12;
  v100 = 3;
  (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
  if (v99 >= 0)
    v97 = __p;
  else
    LOBYTE(v97) = __p[0];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s configured successfully", v92, v93, v94, v95, v96, (char)v97);
  if (v99 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_18D16B974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenIMUPreprocessorActiveObject::IsConfigured(raven::RavenIMUPreprocessorActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void raven::RavenIMUPreprocessorActiveObject::HandleEvent(raven::RavenIMUPreprocessorActiveObject *this, const raven::AccelerometerEvent *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  double v10;
  __n128 v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  void (***v25)(void);
  void (**v26)(void);
  void (***v27)(void);
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  double *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double *v57;
  unint64_t v58;
  void (***v59)(_QWORD, unint64_t, __n128, __n128);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *__p;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __n128 v67;
  __int128 v68;
  __int128 v69;
  __n128 v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  __int16 v74;
  unsigned __int8 v75;
  _QWORD v76[2];
  double v77[2];

  if (!*((_BYTE *)this + 480))
    return;
  if (!*((_QWORD *)this + 91))
    goto LABEL_25;
  __p = (void *)(*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v64 = v4;
  v5 = *(_QWORD *)(*((_QWORD *)this + 87) + 8 * (*((_QWORD *)this + 90) / 0x1AuLL))
     + 152 * (*((_QWORD *)this + 90) % 0x1AuLL);
  v76[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
  v76[1] = v6;
  v9 = CNTimeSpan::operator-((uint64_t)&__p, v76, v7, v8);
  *(_QWORD *)&v77[0] = v9;
  v77[1] = v10;
  if (v9)
  {
    if (v9 < 0)
      goto LABEL_8;
LABEL_7:
    if (!sub_18D069E98(v77, (double *)this + 77))
      goto LABEL_25;
    goto LABEL_8;
  }
  v11.n128_f64[0] = v10;
  if (v10 >= 0.0)
    goto LABEL_7;
LABEL_8:
  LOWORD(v76[0]) = 12;
  v75 = 3;
  v12 = (*(uint64_t (**)(const raven::AccelerometerEvent *, __n128))(*(_QWORD *)a2 + 16))(a2, v11);
  v14 = v13 + (double)v12;
  (*(void (**)(void **__return_ptr, raven::RavenIMUPreprocessorActiveObject *))(*(_QWORD *)this + 16))(&__p, this);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v76, &v75, "Warning: time,%.3lf,%s emptying history,accelerometer,dt,%.3lf", v15, v16, v17, v18, v19, SLOBYTE(v14));
  if (SHIBYTE(v64) < 0)
    operator delete(__p);
  v20 = (void **)*((_QWORD *)this + 87);
  v21 = (void **)*((_QWORD *)this + 88);
  if (v21 == v20)
  {
    v21 = (void **)*((_QWORD *)this + 87);
  }
  else
  {
    v22 = *((_QWORD *)this + 90);
    v23 = &v20[v22 / 0x1A];
    v24 = (unint64_t)v20[(*((_QWORD *)this + 91) + v22) / 0x1A] + 152 * ((*((_QWORD *)this + 91) + v22) % 0x1A);
    if ((char *)*v23 + 152 * (v22 % 0x1A) != (void *)v24)
    {
      v25 = (void (***)(void))((char *)*v23 + 152 * (v22 % 0x1A));
      do
      {
        v26 = *v25;
        v25 += 19;
        (*v26)();
        if ((char *)v25 - (_BYTE *)*v23 == 3952)
        {
          v27 = (void (***)(void))v23[1];
          ++v23;
          v25 = v27;
        }
      }
      while (v25 != (void (***)(void))v24);
      v21 = (void **)*((_QWORD *)this + 88);
      v20 = (void **)*((_QWORD *)this + 87);
    }
  }
  *((_QWORD *)this + 91) = 0;
  v28 = (char *)v21 - (char *)v20;
  if (v28 >= 0x11)
  {
    do
    {
      operator delete(*v20);
      v20 = (void **)(*((_QWORD *)this + 87) + 8);
      *((_QWORD *)this + 87) = v20;
      v28 = *((_QWORD *)this + 88) - (_QWORD)v20;
    }
    while (v28 > 0x10);
  }
  if (v28 >> 3 == 1)
  {
    v29 = 13;
  }
  else
  {
    if (v28 >> 3 != 2)
      goto LABEL_25;
    v29 = 26;
  }
  *((_QWORD *)this + 90) = v29;
LABEL_25:
  sub_18D16BEE8((uint64_t)this + 688, (uint64_t)a2);
  v30 = *((_QWORD *)this + 91);
  if (v30 == *((_QWORD *)this + 85))
  {
    __p = &unk_1E25C2A50;
    v72 = 0;
    v73 = 0x7FF8000000000000;
    v74 = 0;
    v31 = *((unsigned int *)this + 158);
    if (v30 <= v31)
      sub_18D077838("deque");
    v32 = *((_QWORD *)this + 90);
    v33 = v32 + v31;
    v34 = *((_QWORD *)this + 87);
    v35 = *(_QWORD *)(v34 + 8 * (v33 / 0x1A)) + 152 * (v33 % 0x1A);
    v36 = *(_OWORD *)(v35 + 8);
    v65 = *(_OWORD *)(v35 + 24);
    v64 = v36;
    v37 = *(_OWORD *)(v35 + 40);
    v38 = *(__n128 *)(v35 + 56);
    v39 = *(_OWORD *)(v35 + 72);
    v69 = *(_OWORD *)(v35 + 88);
    v68 = v39;
    v67 = v38;
    v66 = v37;
    v71 = 0;
    v70 = 0uLL;
    v40 = *((_QWORD *)this + 81);
    v41 = *((_QWORD *)this + 84);
    v42 = (_QWORD *)(v40 + 8 * (v41 >> 9));
    v43 = *((_QWORD *)this + 82);
    if (v43 == v40)
      v44 = 0;
    else
      v44 = (double *)(*v42 + 8 * (*((_QWORD *)this + 84) & 0x1FFLL));
    v45 = (_QWORD *)(v34 + 8 * (v32 / 0x1A));
    v46 = *((_QWORD *)this + 88);
    if (v46 == v34)
      v47 = 0;
    else
      v47 = *v45 + 152 * (v32 % 0x1A);
    v48 = (v32 + v30) % 0x1A;
    v49 = v41 + v30;
    v50 = (v41 + v30) >> 9;
    v51 = v49 & 0x1FF;
    v52 = 0uLL;
    v38.n128_u64[0] = 0;
LABEL_34:
    v53 = v47 - 3952;
    while (1)
    {
      v54 = v43 == v40 ? 0 : *(_QWORD *)(v40 + 8 * v50) + 8 * v51;
      if (v44 == (double *)v54)
        break;
      v55 = v46 == v34 ? 0 : *(_QWORD *)(v34 + 8 * ((v32 + v30) / 0x1A)) + 152 * v48;
      if (v47 == v55)
        break;
      v56 = *v44++;
      v52 = (__n128)vmlaq_n_f64((float64x2_t)v52, *(float64x2_t *)(v47 + 104), v56);
      v70 = v52;
      v38.n128_f64[0] = v38.n128_f64[0] + v56 * *(double *)(v47 + 120);
      v71 = v38.n128_u64[0];
      if ((double *)((char *)v44 - *v42) == (double *)4096)
      {
        v57 = (double *)v42[1];
        ++v42;
        v44 = v57;
      }
      v53 += 152;
      v47 += 152;
      if (*v45 == v53)
      {
        v58 = v45[1];
        ++v45;
        v47 = v58;
        goto LABEL_34;
      }
    }
    v59 = (void (***)(_QWORD, unint64_t, __n128, __n128))(*(_QWORD *)(v34
                                                                                      + 8 * ((v30 + v32 - 1) / 0x1A))
                                                                          + 152 * ((v30 + v32 - 1) % 0x1A));
    (**v59)(v59, v48, v52, v38);
    v60 = *((_QWORD *)this + 88);
    v61 = 26 * ((v60 - *((_QWORD *)this + 87)) >> 3) - 1;
    v62 = *((_QWORD *)this + 91);
    if (v60 == *((_QWORD *)this + 87))
      v61 = 0;
    *((_QWORD *)this + 91) = v62 - 1;
    if ((unint64_t)(v61 - (v62 + *((_QWORD *)this + 90)) - 51) <= 0xFFFFFFFFFFFFFFCBLL)
    {
      operator delete(*(void **)(v60 - 8));
      *((_QWORD *)this + 88) -= 8;
    }
    sub_18D16BFC8((uint64_t)this, (uint64_t)&__p);
  }
}

void sub_18D16BEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int64x2_t sub_18D16BEE8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_18D16C920((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x1A));
  v7 = *v6 + 152 * (v4 % 0x1A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 3952;
  *(_QWORD *)(v7 - 152) = &unk_1E25C2A50;
  *(_OWORD *)(v7 - 144) = *(_OWORD *)(a2 + 8);
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 40);
  v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v7 - 80) = v10;
  *(_OWORD *)(v7 - 128) = v8;
  *(_OWORD *)(v7 - 112) = v9;
  v11 = *(_OWORD *)(a2 + 88);
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v7 - 22) = *(_OWORD *)(a2 + 130);
  *(_OWORD *)(v7 - 48) = v12;
  *(_OWORD *)(v7 - 32) = v13;
  *(_OWORD *)(v7 - 64) = v11;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_18D318280);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_18D16BFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D16CC38(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D16C0A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void raven::RavenIMUPreprocessorActiveObject::HandleEvent(raven::RavenIMUPreprocessorActiveObject *this, const raven::RateGyroEvent *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  double v10;
  __n128 v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  void (***v25)(void);
  void (**v26)(void);
  void (***v27)(void);
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  double *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double *v57;
  unint64_t v58;
  void (***v59)(_QWORD, unint64_t, __n128, __n128);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *__p;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __n128 v67;
  __int128 v68;
  __int128 v69;
  __n128 v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  __int16 v74;
  unsigned __int8 v75;
  _QWORD v76[2];
  double v77[2];

  if (!*((_BYTE *)this + 480))
    return;
  if (!*((_QWORD *)this + 76))
    goto LABEL_25;
  __p = (void *)(*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v64 = v4;
  v5 = *(_QWORD *)(*((_QWORD *)this + 72) + 8 * (*((_QWORD *)this + 75) / 0x1AuLL))
     + 152 * (*((_QWORD *)this + 75) % 0x1AuLL);
  v76[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
  v76[1] = v6;
  v9 = CNTimeSpan::operator-((uint64_t)&__p, v76, v7, v8);
  *(_QWORD *)&v77[0] = v9;
  v77[1] = v10;
  if (v9)
  {
    if (v9 < 0)
      goto LABEL_8;
LABEL_7:
    if (!sub_18D069E98(v77, (double *)this + 62))
      goto LABEL_25;
    goto LABEL_8;
  }
  v11.n128_f64[0] = v10;
  if (v10 >= 0.0)
    goto LABEL_7;
LABEL_8:
  LOWORD(v76[0]) = 12;
  v75 = 3;
  v12 = (*(uint64_t (**)(const raven::RateGyroEvent *, __n128))(*(_QWORD *)a2 + 16))(a2, v11);
  v14 = v13 + (double)v12;
  (*(void (**)(void **__return_ptr, raven::RavenIMUPreprocessorActiveObject *))(*(_QWORD *)this + 16))(&__p, this);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v76, &v75, "Warning: time,%.3lf,%s emptying history,gyro,dt,%.3lf", v15, v16, v17, v18, v19, SLOBYTE(v14));
  if (SHIBYTE(v64) < 0)
    operator delete(__p);
  v20 = (void **)*((_QWORD *)this + 72);
  v21 = (void **)*((_QWORD *)this + 73);
  if (v21 == v20)
  {
    v21 = (void **)*((_QWORD *)this + 72);
  }
  else
  {
    v22 = *((_QWORD *)this + 75);
    v23 = &v20[v22 / 0x1A];
    v24 = (unint64_t)v20[(*((_QWORD *)this + 76) + v22) / 0x1A] + 152 * ((*((_QWORD *)this + 76) + v22) % 0x1A);
    if ((char *)*v23 + 152 * (v22 % 0x1A) != (void *)v24)
    {
      v25 = (void (***)(void))((char *)*v23 + 152 * (v22 % 0x1A));
      do
      {
        v26 = *v25;
        v25 += 19;
        (*v26)();
        if ((char *)v25 - (_BYTE *)*v23 == 3952)
        {
          v27 = (void (***)(void))v23[1];
          ++v23;
          v25 = v27;
        }
      }
      while (v25 != (void (***)(void))v24);
      v21 = (void **)*((_QWORD *)this + 73);
      v20 = (void **)*((_QWORD *)this + 72);
    }
  }
  *((_QWORD *)this + 76) = 0;
  v28 = (char *)v21 - (char *)v20;
  if (v28 >= 0x11)
  {
    do
    {
      operator delete(*v20);
      v20 = (void **)(*((_QWORD *)this + 72) + 8);
      *((_QWORD *)this + 72) = v20;
      v28 = *((_QWORD *)this + 73) - (_QWORD)v20;
    }
    while (v28 > 0x10);
  }
  if (v28 >> 3 == 1)
  {
    v29 = 13;
  }
  else
  {
    if (v28 >> 3 != 2)
      goto LABEL_25;
    v29 = 26;
  }
  *((_QWORD *)this + 75) = v29;
LABEL_25:
  sub_18D16C5F4((uint64_t)this + 568, (uint64_t)a2);
  v30 = *((_QWORD *)this + 76);
  if (v30 == *((_QWORD *)this + 70))
  {
    __p = &unk_1E25C21E8;
    v72 = 0;
    v73 = 0x7FF8000000000000;
    v74 = 0;
    v31 = *((unsigned int *)this + 128);
    if (v30 <= v31)
      sub_18D077838("deque");
    v32 = *((_QWORD *)this + 75);
    v33 = v32 + v31;
    v34 = *((_QWORD *)this + 72);
    v35 = *(_QWORD *)(v34 + 8 * (v33 / 0x1A)) + 152 * (v33 % 0x1A);
    v36 = *(_OWORD *)(v35 + 8);
    v65 = *(_OWORD *)(v35 + 24);
    v64 = v36;
    v37 = *(_OWORD *)(v35 + 40);
    v38 = *(__n128 *)(v35 + 56);
    v39 = *(_OWORD *)(v35 + 72);
    v69 = *(_OWORD *)(v35 + 88);
    v68 = v39;
    v67 = v38;
    v66 = v37;
    v71 = 0;
    v70 = 0uLL;
    v40 = *((_QWORD *)this + 66);
    v41 = *((_QWORD *)this + 69);
    v42 = (_QWORD *)(v40 + 8 * (v41 >> 9));
    v43 = *((_QWORD *)this + 67);
    if (v43 == v40)
      v44 = 0;
    else
      v44 = (double *)(*v42 + 8 * (*((_QWORD *)this + 69) & 0x1FFLL));
    v45 = (_QWORD *)(v34 + 8 * (v32 / 0x1A));
    v46 = *((_QWORD *)this + 73);
    if (v46 == v34)
      v47 = 0;
    else
      v47 = *v45 + 152 * (v32 % 0x1A);
    v48 = (v32 + v30) % 0x1A;
    v49 = v41 + v30;
    v50 = (v41 + v30) >> 9;
    v51 = v49 & 0x1FF;
    v52 = 0uLL;
    v38.n128_u64[0] = 0;
LABEL_34:
    v53 = v47 - 3952;
    while (1)
    {
      v54 = v43 == v40 ? 0 : *(_QWORD *)(v40 + 8 * v50) + 8 * v51;
      if (v44 == (double *)v54)
        break;
      v55 = v46 == v34 ? 0 : *(_QWORD *)(v34 + 8 * ((v32 + v30) / 0x1A)) + 152 * v48;
      if (v47 == v55)
        break;
      v56 = *v44++;
      v52 = (__n128)vmlaq_n_f64((float64x2_t)v52, *(float64x2_t *)(v47 + 104), v56);
      v70 = v52;
      v38.n128_f64[0] = v38.n128_f64[0] + v56 * *(double *)(v47 + 120);
      v71 = v38.n128_u64[0];
      if ((double *)((char *)v44 - *v42) == (double *)4096)
      {
        v57 = (double *)v42[1];
        ++v42;
        v44 = v57;
      }
      v53 += 152;
      v47 += 152;
      if (*v45 == v53)
      {
        v58 = v45[1];
        ++v45;
        v47 = v58;
        goto LABEL_34;
      }
    }
    v59 = (void (***)(_QWORD, unint64_t, __n128, __n128))(*(_QWORD *)(v34
                                                                                      + 8 * ((v30 + v32 - 1) / 0x1A))
                                                                          + 152 * ((v30 + v32 - 1) % 0x1A));
    (**v59)(v59, v48, v52, v38);
    v60 = *((_QWORD *)this + 73);
    v61 = 26 * ((v60 - *((_QWORD *)this + 72)) >> 3) - 1;
    v62 = *((_QWORD *)this + 76);
    if (v60 == *((_QWORD *)this + 72))
      v61 = 0;
    *((_QWORD *)this + 76) = v62 - 1;
    if ((unint64_t)(v61 - (v62 + *((_QWORD *)this + 75)) - 51) <= 0xFFFFFFFFFFFFFFCBLL)
    {
      operator delete(*(void **)(v60 - 8));
      *((_QWORD *)this + 73) -= 8;
    }
    sub_18D16C6D4((uint64_t)this, (uint64_t)&__p);
  }
}

void sub_18D16C5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int64x2_t sub_18D16C5F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_18D16CF3C((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x1A));
  v7 = *v6 + 152 * (v4 % 0x1A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 3952;
  *(_QWORD *)(v7 - 152) = &unk_1E25C21E8;
  *(_OWORD *)(v7 - 144) = *(_OWORD *)(a2 + 8);
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 40);
  v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v7 - 80) = v10;
  *(_OWORD *)(v7 - 128) = v8;
  *(_OWORD *)(v7 - 112) = v9;
  v11 = *(_OWORD *)(a2 + 88);
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v7 - 22) = *(_OWORD *)(a2 + 130);
  *(_OWORD *)(v7 - 48) = v12;
  *(_OWORD *)(v7 - 32) = v13;
  *(_OWORD *)(v7 - 64) = v11;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_18D318280);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_18D16C6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D16D254(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D16C7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIMUPreprocessorActiveObject::HandleEvent(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 104))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t sub_18D16C7E0(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x1A];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x1A] + 152 * ((a1[5] + v5) % 0x1A);
    if ((char *)*v6 + 152 * (v5 % 0x1A) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 152 * (v5 % 0x1A));
      do
      {
        v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 3952)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 13;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 26;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_18D03CA50((uint64_t)a1);
}

void sub_18D16C920(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 26 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x1A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_18D0788C8(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xF70uLL);
      sub_18D078674(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_18D0788C8((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 13;
      else
        v40 = (uint64_t)a1[4] + 26;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xF70uLL);
        sub_18D078444(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xF70uLL);
      }
      sub_18D078558((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 13;
      else
        v35 = (uint64_t)a1[4] + 26;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 26;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_18D078558((uint64_t)a1, &__p);
  }
}

void sub_18D16CBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D16CC38@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D16CC90(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D16CC7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D16CC90(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D16CCDC((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D16CCC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D16CCDC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D16CDF4(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D16CDB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D16CDF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C1840;
  *(_QWORD *)(v4 + 8) = &unk_1E25C2A50;
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 128) = v6;
  *(_OWORD *)(v4 + 138) = *(_OWORD *)(a2 + 130);
  v7 = *(_OWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v8;
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v5;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  v9 = *a1;
  *a1 = v4;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_18D16CEA4()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D16CEB8()
{
}

__n128 sub_18D16CEC4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1840;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2A50;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v3;
  *(_OWORD *)(v2 + 138) = *(_OWORD *)(a1 + 138);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v4;
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v5;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

void sub_18D16CF3C(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 26 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x1A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_18D0788C8(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xF70uLL);
      sub_18D078674(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_18D0788C8((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 13;
      else
        v40 = (uint64_t)a1[4] + 26;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xF70uLL);
        sub_18D078444(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xF70uLL);
      }
      sub_18D078558((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 13;
      else
        v35 = (uint64_t)a1[4] + 26;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 26;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_18D078558((uint64_t)a1, &__p);
  }
}

void sub_18D16D208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D16D254@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D16D2AC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D16D298(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D16D2AC(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D16D2F8((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D16D2E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D16D2F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D16D410(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D16D3D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D16D410(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C15D0;
  *(_QWORD *)(v4 + 8) = &unk_1E25C21E8;
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 128) = v6;
  *(_OWORD *)(v4 + 138) = *(_OWORD *)(a2 + 130);
  v7 = *(_OWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v8;
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v5;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  v9 = *a1;
  *a1 = v4;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_18D16D4C0()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D16D4D4()
{
}

__n128 sub_18D16D4E0(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C15D0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C21E8;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v3;
  *(_OWORD *)(v2 + 138) = *(_OWORD *)(a1 + 138);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v4;
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v5;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

void raven::RavenParameters::PrintLoadErrors(raven::RavenParameters *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;

  v8 = (uint64_t *)*((_QWORD *)this + 5);
  for (i = (uint64_t *)*((_QWORD *)this + 6); v8 != i; v8 += 3)
  {
    v12 = 12;
    v11 = 4;
    LOBYTE(v10) = (_BYTE)v8;
    if (*((char *)v8 + 23) < 0)
      v10 = *v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "Error: failed to load configuration with message \"%s\"", a4, a5, a6, a7, a8, v10);
  }
}

BOOL raven::RavenParameters::ParseGnssInnovationThresholds(uint64_t a1, _OWORD *a2, const char *a3)
{
  int v4;
  __int128 v5;
  _OWORD v7[2];

  v4 = sub_18D16D628(a1, (uint64_t)v7, 4, a3);
  if (v4 == 4)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
  }
  return v4 == 4;
}

uint64_t sub_18D16D628(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string::value_type *v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  unsigned __int8 v36;
  std::string __dst;
  __int128 __p;
  uint64_t v39;
  uint64_t v40;
  char v41;
  std::string::value_type *v42;
  std::string::value_type *v43;
  char v44;
  void *v45;
  char v46;
  void *v47[2];
  char v48;
  void *v49;
  char v50;
  std::string::value_type *v51;
  std::string::value_type *v52;
  char v53;
  std::string v54;
  std::string::value_type *v55;
  std::string::value_type *v56;
  std::string v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  std::string v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void *v67[2];
  unsigned __int8 v68;
  std::string v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char __s[1024];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v34 = (char)a4;
  if (!sub_18D178524(a1, __s, a4))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      LOWORD(v47[0]) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v47, (unsigned __int8 *)&__dst, "ConfigLoader: \"%s\" could not be parsed", v6, v7, v8, v9, v10, v34);
    }
    return 0xFFFFFFFFLL;
  }
  sub_18D0778AC(v67, __s);
  memset(&v62, 0, sizeof(v62));
  sub_18D0778AC(&v63, " ,;");
  v11 = v68;
  v12 = (std::string::value_type *)v67;
  if ((v68 & 0x80u) != 0)
    v12 = (std::string::value_type *)v67[0];
  LOWORD(v65) = 0;
  HIDWORD(v65) = 0;
  v66 = 0;
  if ((v68 & 0x80u) != 0)
    v11 = (unint64_t)v67[1];
  v55 = v12;
  v56 = &v12[v11];
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    sub_18D077798(&v57, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v57 = v62;
  if (SHIBYTE(v64) < 0)
  {
    sub_18D077798(&v58, (void *)v63, *((unint64_t *)&v63 + 1));
  }
  else
  {
    v58 = v63;
    v59 = v64;
  }
  v60 = v65;
  v61 = v66;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    sub_18D077798(&__dst, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  else
    __dst = v57;
  if (SHIBYTE(v59) < 0)
  {
    sub_18D077798(&__p, (void *)v58, *((unint64_t *)&v58 + 1));
  }
  else
  {
    __p = v58;
    v39 = v59;
  }
  v40 = v60;
  v41 = v61;
  sub_18D178B60((char *)v47, (__int128 *)&__dst, v55, v56);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v13 = 0;
  for (i = a3 & ~(a3 >> 31); ; --i)
  {
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      sub_18D077798(&v69, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    else
      v69 = v57;
    if (SHIBYTE(v59) < 0)
    {
      sub_18D077798(&v70, (void *)v58, *((unint64_t *)&v58 + 1));
    }
    else
    {
      v70 = v58;
      v71 = v59;
    }
    v72 = v60;
    v73 = v61;
    sub_18D178B60((char *)&__dst, (__int128 *)&v69, v56, v56);
    if (SHIBYTE(v71) < 0)
      operator delete((void *)v70);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (v44 && v53)
    {
      if (v42 != v51)
      {
        v20 = 0;
        goto LABEL_44;
      }
      v21 = v43 == v52;
    }
    else
    {
      v21 = v44 == v53;
    }
    v20 = v21;
LABEL_44:
    if (v46 < 0)
      operator delete(v45);
    if (SHIBYTE(v39) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v20)
      goto LABEL_67;
    if (!i)
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      v69.__r_.__value_.__s.__data_[0] = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__dst, (unsigned __int8 *)&v69, "ConfigLoader: Too many entries for \"%s\"", v15, v16, v17, v18, v19, v34);
      goto LABEL_66;
    }
    if (!v53)
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    v22 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v54
        : (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((sub_18D1789E8((_QWORD *)a2, (char *)v22) & 1) == 0)
      break;
    if (*(_BYTE *)(a1 + 32))
    {
      LOWORD(v69.__r_.__value_.__l.__data_) = 0;
      v36 = 2;
      std::to_string(&__dst, *(double *)(a2 + 8));
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, &v36, "ConfigLoader: \"%s\" loaded value #%d \"%s\"", v28, v29, v30, v31, v32, v34);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (!v53)
      __assert_rtn("increment", "token_iterator.hpp", 54, "valid_");
    v53 = sub_18D178C74((uint64_t)v47, &v51, v52, &v54);
    v13 = (v13 + 1);
    a2 += 8;
  }
  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
  v69.__r_.__value_.__s.__data_[0] = 4;
  if (!v53)
    __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__dst, (unsigned __int8 *)&v69, "ConfigLoader: \"%s\" could not cast value #%d from \"%s\"", v23, v24, v25, v26, v27, v34);
LABEL_66:
  v13 = 0xFFFFFFFFLL;
LABEL_67:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v59) < 0)
    operator delete((void *)v58);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if ((char)v68 < 0)
    operator delete(v67[0]);
  return v13;
}

void sub_18D16DBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  sub_18D178998((uint64_t)&a34);
  sub_18D178AE0((uint64_t)&a48);
  sub_18D178B20((uint64_t)&a58);
  if (a71 < 0)
    operator delete(*(void **)(v71 + 256));
  _Unwind_Resume(a1);
}

uint64_t raven::RavenParameters::ParseAndValidateLowerLimitsOfLowPLOSBins(uint64_t *a1, _OWORD *a2, const char *a3)
{
  uint64_t v6;
  double v7;
  __int128 v8;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  void *__p[2];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  _OWORD v41[2];
  _QWORD v42[4];
  uint64_t *v43;

  if (sub_18D16D628((uint64_t)a1, (uint64_t)v41, 4, a3) == 4)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(double *)((char *)v41 + v6);
      if (v7 < 0.0)
      {
        sub_18D099F88((uint64_t)&v37);
        v10 = strlen(a3);
        v11 = sub_18D076A18(&v37, (uint64_t)a3, v10);
        sub_18D076A18(v11, (uint64_t)" - value (", 10);
        v12 = (_QWORD *)std::ostream::operator<<();
        v13 = sub_18D076A18(v12, (uint64_t)") must be greater than or equal to", 34);
        sub_18D076A18(v13, (uint64_t)"0", 1);
        sub_18D076DE8((uint64_t)v38, __p);
        v14 = a1[7];
        v15 = a1[6];
        if (v15 < v14)
        {
LABEL_17:
          v26 = *(_OWORD *)__p;
          *(_QWORD *)(v15 + 16) = v36;
          *(_OWORD *)v15 = v26;
          a1[6] = v15 + 24;
          goto LABEL_30;
        }
        v16 = a1[5];
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v16) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        v43 = a1 + 7;
        if (v20)
          goto LABEL_25;
        v30 = 0;
        goto LABEL_28;
      }
      if (v7 > 1.0)
        break;
      v6 += 8;
      if (v6 == 32)
      {
        v8 = v41[1];
        *a2 = v41[0];
        a2[1] = v8;
        return 1;
      }
    }
    sub_18D099F88((uint64_t)&v37);
    v21 = strlen(a3);
    v22 = sub_18D076A18(&v37, (uint64_t)a3, v21);
    sub_18D076A18(v22, (uint64_t)" - value (", 10);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = sub_18D076A18(v23, (uint64_t)") must be less than or equal to", 31);
    sub_18D076A18(v24, (uint64_t)"1", 1);
    sub_18D076DE8((uint64_t)v38, __p);
    v25 = a1[7];
    v15 = a1[6];
    if (v15 < v25)
      goto LABEL_17;
    v27 = a1[5];
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v27) >> 3);
    v28 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_18D07AFE4();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v27) >> 3);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v28;
    v43 = a1 + 7;
    if (v20)
    {
LABEL_25:
      v30 = (char *)sub_18D1782B8((uint64_t)(a1 + 7), v20);
      goto LABEL_28;
    }
    v30 = 0;
LABEL_28:
    v31 = &v30[24 * v17];
    v42[0] = v30;
    v42[1] = v31;
    v42[3] = &v30[24 * v20];
    v32 = *(_OWORD *)__p;
    *((_QWORD *)v31 + 2) = v36;
    *(_OWORD *)v31 = v32;
    __p[1] = 0;
    v36 = 0;
    __p[0] = 0;
    v42[2] = v31 + 24;
    sub_18D178244(a1 + 5, v42);
    v33 = a1[6];
    sub_18D178410((uint64_t)v42);
    v34 = SHIBYTE(v36);
    a1[6] = v33;
    if (v34 < 0)
      operator delete(__p[0]);
LABEL_30:
    v37 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v38[-1] + *(_QWORD *)(v37 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v38[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v39 < 0)
      operator delete((void *)v38[8]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D78B550](&v40);
  }
  return 0;
}

void sub_18D16E074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_18D178410(v16 - 88);
  if (a15 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_18D16E0C4(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_18D07AFE4();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)sub_18D1782B8(result, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[24 * v13];
    v16 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17[2] = v15 + 24;
    sub_18D178244(a1, v17);
    v9 = a1[1];
    result = sub_18D178410((uint64_t)v17);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_18D16E1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D178410((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenParameters::ParseAndValidateLowPLOSPsrTargetSigmaScaleFactors(uint64_t *a1, _OWORD *a2, const char *a3)
{
  uint64_t v6;
  double v7;
  __int128 v8;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  void *__p[2];
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[10];
  char v38;
  uint64_t v39;
  _OWORD v40[2];
  _QWORD v41[4];
  uint64_t *v42;

  if (sub_18D16D628((uint64_t)a1, (uint64_t)v40, 4, a3) == 4)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(double *)((char *)v40 + v6);
      if (v7 > 1.0)
      {
        sub_18D099F88((uint64_t)&v36);
        v10 = strlen(a3);
        v11 = sub_18D076A18(&v36, (uint64_t)a3, v10);
        sub_18D076A18(v11, (uint64_t)" - value (", 10);
        v12 = (_QWORD *)std::ostream::operator<<();
        sub_18D076A18(v12, (uint64_t)") must be less than or equal to", 31);
        std::ostream::operator<<();
        sub_18D076DE8((uint64_t)v37, __p);
        v13 = a1[7];
        v14 = a1[6];
        if (v14 < v13)
        {
LABEL_17:
          v25 = *(_OWORD *)__p;
          *(_QWORD *)(v14 + 16) = v35;
          *(_OWORD *)v14 = v25;
          a1[6] = v14 + 24;
          goto LABEL_30;
        }
        v15 = a1[5];
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v15) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v15) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x555555555555555)
          v19 = 0xAAAAAAAAAAAAAAALL;
        else
          v19 = v17;
        v42 = a1 + 7;
        if (v19)
          goto LABEL_25;
        v29 = 0;
        goto LABEL_28;
      }
      if (v7 <= 0.0)
        break;
      v6 += 8;
      if (v6 == 32)
      {
        v8 = v40[1];
        *a2 = v40[0];
        a2[1] = v8;
        return 1;
      }
    }
    sub_18D099F88((uint64_t)&v36);
    v20 = strlen(a3);
    v21 = sub_18D076A18(&v36, (uint64_t)a3, v20);
    sub_18D076A18(v21, (uint64_t)" - value (", 10);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = sub_18D076A18(v22, (uint64_t)") must be greater than ", 23);
    sub_18D076A18(v23, (uint64_t)"0", 1);
    sub_18D076DE8((uint64_t)v37, __p);
    v24 = a1[7];
    v14 = a1[6];
    if (v14 < v24)
      goto LABEL_17;
    v26 = a1[5];
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v26) >> 3);
    v27 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_18D07AFE4();
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v26) >> 3);
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v27;
    v42 = a1 + 7;
    if (v19)
    {
LABEL_25:
      v29 = (char *)sub_18D1782B8((uint64_t)(a1 + 7), v19);
      goto LABEL_28;
    }
    v29 = 0;
LABEL_28:
    v30 = &v29[24 * v16];
    v41[0] = v29;
    v41[1] = v30;
    v41[3] = &v29[24 * v19];
    v31 = *(_OWORD *)__p;
    *((_QWORD *)v30 + 2) = v35;
    *(_OWORD *)v30 = v31;
    __p[1] = 0;
    v35 = 0;
    __p[0] = 0;
    v41[2] = v30 + 24;
    sub_18D178244(a1 + 5, v41);
    v32 = a1[6];
    sub_18D178410((uint64_t)v41);
    v33 = SHIBYTE(v35);
    a1[6] = v32;
    if (v33 < 0)
      operator delete(__p[0]);
LABEL_30:
    v36 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v37[-1] + *(_QWORD *)(v36 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v37[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v38 < 0)
      operator delete((void *)v37[8]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D78B550](&v39);
  }
  return 0;
}

void sub_18D16E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_18D178410(v16 - 88);
  if (a15 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenParameters::ParseConfigurationFile(raven::RavenParameters *this)
{
  char v2;
  char v3;
  char v4;
  char v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  std::string::size_type size;
  std::string *v13;
  BOOL v14;
  BOOL v15;
  int data;
  int v18;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  std::string::size_type *v41;
  std::string::size_type v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  int v49;
  int v50;
  int v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v55;
  std::string::size_type v56;
  char v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  std::string::size_type v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  std::string::size_type *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  int v86;
  std::string *v87;
  std::string *v88;
  int v90;
  int v91;
  std::string *v93;
  std::string::size_type v94;
  int v95;
  std::string *v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  std::string::size_type v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  std::string::size_type *v117;
  std::string::size_type v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  double v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  __int128 v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  std::string::size_type v140;
  __int128 v141;
  uint64_t v142;
  int v143;
  char v144;
  double v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  std::string::size_type v157;
  __int128 v158;
  uint64_t v159;
  int v160;
  char v161;
  char v162;
  char v163;
  int v164;
  __int128 v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  __int128 v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  std::string::size_type v179;
  __int128 v180;
  uint64_t v181;
  int v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  int v211;
  unint64_t v212;
  unint64_t v213;
  __int128 v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  std::string::size_type v221;
  __int128 v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  int v227;
  char v228;
  BOOL v229;
  std::string::size_type v230;
  std::string *v231;
  BOOL v232;
  int v233;
  int v234;
  BOOL v235;
  std::string *v236;
  std::string *v237;
  __int128 v238;
  std::string *v239;
  std::string::size_type v240;
  std::string *v241;
  __int128 v242;
  std::string *v243;
  std::string::size_type v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  char v250;
  char v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  char *v257;
  std::string::size_type *v258;
  std::string::size_type v259;
  int v260;
  void **v261;
  char v262;
  std::string *v263;
  __int128 v264;
  int v265;
  const std::string::value_type *v266;
  std::string::size_type v267;
  std::string *v268;
  std::string::size_type v269;
  char v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  std::string::size_type *v280;
  char v281;
  std::string *v282;
  int v283;
  std::string *v284;
  std::string::size_type v285;
  std::string *v286;
  std::string::size_type v287;
  uint64_t v288;
  char v290;
  char v291;
  std::string *v292;
  std::string::size_type v293;
  uint64_t v294;
  std::string *v296;
  std::string *v297;
  __int128 v298;
  std::string *v299;
  std::string::size_type v300;
  std::string *v301;
  __int128 v302;
  std::string *v303;
  std::string::size_type v304;
  char v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  char *v315;
  std::string::size_type *v316;
  std::string::size_type v317;
  int v318;
  void **v319;
  char v320;
  std::string *v321;
  __int128 v322;
  int v323;
  const std::string::value_type *v324;
  std::string::size_type v325;
  std::string *v326;
  std::string::size_type v327;
  char v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  std::string::size_type *v338;
  int v339;
  int v340;
  void **v341;
  char v342;
  std::string *v343;
  __int128 v344;
  int v345;
  const std::string::value_type *v346;
  std::string::size_type v347;
  std::string *v348;
  std::string::size_type v349;
  char v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  char *v359;
  std::string::size_type *v360;
  int v361;
  int v362;
  int v363;
  int v364;
  char v365;
  int v366;
  void **v367;
  std::string *v368;
  __int128 v369;
  int v370;
  const std::string::value_type *v371;
  std::string::size_type v372;
  std::string *v373;
  std::string::size_type v374;
  char v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  char *v384;
  std::string::size_type *v385;
  std::string::size_type v386;
  std::string *v387;
  BOOL v388;
  BOOL v389;
  BOOL v390;
  char v391;
  char v392;
  std::string *v393;
  BOOL v394;
  BOOL v395;
  std::string *v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char v412;
  void **v413;
  std::string *v415;
  std::string::size_type v416;
  std::string *v417;
  __int128 v418;
  char v419;
  char v420;
  char v421;
  char v422;
  char v423;
  char v424;
  char v425;
  char v426;
  char v427;
  char v428;
  char v429;
  char v430;
  char v431;
  char v432;
  char v433;
  char v434;
  char v435;
  char v436;
  char v437;
  char v438;
  char v439;
  char v440;
  char v441;
  char v442;
  char v443;
  char v444;
  char v445;
  char v446;
  char v447;
  char v448;
  char v449;
  char v450;
  char v451;
  char v452;
  char v453;
  char v454;
  char v455;
  char v456;
  char v457;
  char v458;
  char v459;
  char v460;
  char v461;
  char v462;
  char v463;
  char v464;
  char v465;
  char v466;
  char v467;
  char v468;
  char v469;
  char v470;
  char v471;
  char v472;
  char v473;
  char v474;
  char v475;
  char v476;
  char v477;
  char v478;
  char v479;
  char v480;
  char v481;
  char v482;
  char v483;
  char v484;
  char v485;
  char v486;
  char v487;
  char v488;
  char v489;
  char v490;
  char v491;
  char v492;
  char v493;
  char v494;
  char v495;
  char v496;
  char v497;
  char v498;
  char v499;
  char v500;
  char v501;
  char v502;
  char v503;
  char v504;
  char v505;
  char v506;
  char v507;
  char v508;
  char v509;
  char v510;
  char v511;
  char v512;
  char v513;
  char v514;
  char v515;
  char v516;
  char v517;
  char v518;
  char v519;
  char v520;
  char v521;
  char v522;
  char v523;
  char v524;
  char v525;
  char v526;
  char v527;
  char v528;
  char v529;
  char v530;
  char v531;
  char v532;
  char v533;
  char v534;
  char v535;
  char v536;
  char v537;
  int v538;
  char v539;
  int v540;
  char v541;
  int v542;
  char v543;
  int v544;
  char v545;
  int v546;
  char v547;
  int v548;
  char v549;
  int v550;
  char v551;
  int v552;
  char v553;
  int v554;
  char v555;
  int v556;
  char v557;
  int v558;
  char v559;
  int v560;
  char v561;
  int v562;
  char v563;
  int v564;
  char v565;
  int v566;
  char v567;
  int v568;
  char v569;
  int v570;
  char v571;
  int v572;
  char v573;
  int v574;
  char v575;
  int v576;
  char v577;
  int v578;
  char v579;
  int v580;
  char v581;
  int v582;
  char v583;
  char v584;
  int v585;
  char v586;
  char v587;
  int v588;
  char v589;
  char v590;
  int v591;
  char v592;
  char v593;
  int v594;
  char v595;
  char v596;
  int v597;
  char v598;
  char v599;
  int v600;
  char v601;
  char v602;
  int v603;
  char v604;
  char v605;
  int v606;
  char v607;
  char v608;
  int v609;
  char v610;
  char v611;
  int v612;
  char v613;
  char v614;
  int v615;
  char v616;
  char v617;
  char v618;
  int v619;
  char v620;
  char v621;
  char v622;
  int v623;
  char v624;
  char v625;
  char v626;
  int v627;
  char v628;
  char v629;
  char v630;
  int v631;
  char v632;
  char v633;
  int v634;
  int v635;
  char v636;
  char v637;
  int v638;
  int v639;
  char v640;
  char v641;
  int v642;
  int v643;
  char v644;
  char v645;
  int v646;
  int v647;
  char v648;
  char v649;
  int v650;
  int v651;
  char v652;
  char v653;
  char v654;
  int v655;
  int v656;
  char v657;
  char v658;
  char v659;
  int v660;
  int v661;
  char v662;
  char v663;
  char v664;
  int v665;
  int v666;
  char v667;
  char v668;
  char v669;
  int v670;
  int v671;
  char v672;
  char v673;
  char v674;
  int v675;
  int v676;
  char v677;
  char v678;
  char v679;
  int v680;
  int v681;
  char v682;
  char v683;
  char v684;
  int v685;
  int v686;
  char v687;
  char v688;
  char v689;
  int v690;
  int v691;
  char v692;
  char v693;
  char v694;
  int v695;
  BOOL v696;
  int v697;
  char v698;
  char v699;
  char v700;
  int v701;
  int v702;
  char v703;
  char v704;
  char v705;
  int v706;
  int v707;
  char v708;
  char v709;
  char v710;
  int v711;
  int v712;
  char v713;
  char v714;
  char v715;
  int v716;
  int v717;
  char v718;
  char v719;
  char v720;
  int v721;
  int v722;
  char v723;
  char v724;
  char v725;
  int v726;
  int v727;
  char v728;
  char v729;
  char v730;
  int v731;
  int v732;
  char v733;
  char v734;
  char v735;
  int v736;
  int v737;
  char v738;
  char v739;
  char v740;
  int v741;
  int v742;
  char v743;
  char v744;
  char v745;
  int v746;
  int v747;
  char v748;
  char v749;
  char v750;
  int v751;
  int v752;
  char v753;
  char v754;
  char v755;
  int v756;
  int v757;
  char v758;
  char v759;
  char v760;
  int v761;
  int v762;
  char v763;
  char v764;
  char v765;
  int v766;
  int v767;
  int v768;
  char v769;
  char v770;
  int v771;
  int v772;
  int v773;
  char v774;
  char v775;
  int v776;
  int v777;
  int v778;
  char v779;
  char v780;
  int v781;
  int v782;
  int v783;
  int v784;
  int v785;
  int v786;
  int v787;
  unsigned int v788;
  std::string v789;
  std::string v790;
  void *__p[2];
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  char v796;
  _BYTE v797[160];
  std::string v798;
  char *v799;
  char *v800;
  std::string v801;
  _QWORD v802[5];

  v802[2] = *MEMORY[0x1E0C80C00];
  memset(&v789, 0, sizeof(v789));
  v788 = 0;
  v763 = sub_18D175410((uint64_t *)this, (double *)this + 9, "user_typical_device_distance", 0.0);
  v758 = sub_18D1756A0((uint64_t *)this, (double *)this + 10, "user_typical_height_above_ground", 0.0);
  v753 = sub_18D175410((uint64_t *)this, (double *)this + 15, "frozen_user_eastnorth_velocity_noise_intensity", 0.0);
  v748 = sub_18D175410((uint64_t *)this, (double *)this + 16, "frozen_user_up_velocity_noise_intensity", 0.0);
  v743 = sub_18D175410((uint64_t *)this, (double *)this + 17, "frozen_user_eastnorth_velocity_decorrelation", 0.0);
  v738 = sub_18D175410((uint64_t *)this, (double *)this + 18, "frozen_user_up_velocity_decorrelation", 0.0);
  v733 = sub_18D175410((uint64_t *)this, (double *)this + 19, "moving_user_eastnorth_velocity_noise_intensity", 0.0);
  v728 = sub_18D175410((uint64_t *)this, (double *)this + 20, "moving_user_up_velocity_noise_intensity", 0.0);
  v723 = sub_18D175410((uint64_t *)this, (double *)this + 21, "moving_user_eastnorth_velocity_decorrelation", 0.0);
  v718 = sub_18D175410((uint64_t *)this, (double *)this + 22, "moving_user_up_velocity_decorrelation", 0.0);
  v713 = sub_18D175410((uint64_t *)this, (double *)this + 23, "notmoving_user_eastnorth_velocity_noise_intensity", 0.0);
  v708 = sub_18D175410((uint64_t *)this, (double *)this + 24, "notmoving_user_up_velocity_noise_intensity", 0.0);
  v703 = sub_18D175410((uint64_t *)this, (double *)this + 25, "notmoving_user_eastnorth_velocity_decorrelation", 0.0);
  v698 = sub_18D175410((uint64_t *)this, (double *)this + 26, "notmoving_user_up_velocity_decorrelation", 0.0);
  v783 = sub_18D175410((uint64_t *)this, (double *)this + 27, "default_user_eastnorth_velocity_noise_intensity", 0.0);
  if (v783)
    *((_QWORD *)this + 11) = *((_QWORD *)this + 27);
  v778 = sub_18D175410((uint64_t *)this, (double *)this + 28, "default_user_up_velocity_noise_intensity", 0.0);
  if (v778)
    *((_QWORD *)this + 12) = *((_QWORD *)this + 28);
  v773 = sub_18D175410((uint64_t *)this, (double *)this + 29, "default_user_eastnorth_velocity_decorrelation", 0.0);
  if (v773)
    *((_QWORD *)this + 13) = *((_QWORD *)this + 29);
  v768 = sub_18D175410((uint64_t *)this, (double *)this + 30, "default_user_up_velocity_decorrelation", 0.0);
  if (v768)
    *((_QWORD *)this + 14) = *((_QWORD *)this + 30);
  v692 = sub_18D175930((uint64_t *)this, (double *)this + 31, "minimum_moving_state_probability_for_zupt_or_zaru", 0.0, 1.0);
  v687 = sub_18D175410((uint64_t *)this, (double *)this + 32, "frozen_zupt_velocity_noise_var", 0.0);
  v682 = sub_18D175410((uint64_t *)this, (double *)this + 33, "notmoving_zupt_velocity_noise_var", 0.0);
  v677 = sub_18D175410((uint64_t *)this, (double *)this + 34, "minimum_zupt_update_interval", 0.0);
  v672 = sub_18D175410((uint64_t *)this, (double *)this + 35, "minimum_zaru_update_interval", 0.0);
  v667 = sub_18D175410((uint64_t *)this, (double *)this + 36, "zaru_measurement_std_dev_deg", 0.0);
  v662 = sub_18D175410((uint64_t *)this, (double *)this + 37, "nhc_velocity_standard_deviation", 0.0);
  v657 = sub_18D175410((uint64_t *)this, (double *)this + 38, "user_comfortable_acceleration_rms", 0.0);
  v652 = sub_18D175410((uint64_t *)this, (double *)this + 39, "user_comfortable_acceleration_rms_high_acceleration", 0.0);
  v648 = sub_18D175410((uint64_t *)this, (double *)this + 40, "user_comfortable_acceleration_rms_vehicle_fixed", 0.0);
  v644 = sub_18D175410((uint64_t *)this, (double *)this + 41, "user_maximum_comfortable_rotation_rate_rms", 0.0);
  v640 = sub_18D175410((uint64_t *)this, (double *)this + 42, "user_maximum_comfortable_rotation_rate_rms_high_acceleration", 0.0);
  v636 = sub_18D175410((uint64_t *)this, (double *)this + 43, "user_mount_linear_rw_mprs", 0.0);
  v632 = sub_18D175410((uint64_t *)this, (double *)this + 44, "user_mount_angular_rw_rprs", 0.0);
  v628 = sub_18D175410((uint64_t *)this, (double *)this + 45, "user_mount_velocity_rms_mps", 0.0);
  v624 = sub_18D175410((uint64_t *)this, (double *)this + 46, "user_mount_velocity_rms_mpspmps", 0.0);
  v620 = sub_18D175410((uint64_t *)this, (double *)this + 47, "user_mount_velocity_rms_floor_mps", 0.0);
  v616 = sub_18D175410((uint64_t *)this, (double *)this + 48, "user_periodicity_window_duration", 0.0);
  v2 = sub_18D175410((uint64_t *)this, (double *)this + 49, "user_minimum_frequency_of_interest", 0.0);
  v3 = sub_18D175410((uint64_t *)this, (double *)this + 50, "user_maximum_frequency_of_interest", *((double *)this + 50));
  v4 = sub_18D175410((uint64_t *)this, (double *)this + 51, "user_periodicity_fpprobability_window", 0.0);
  v5 = sub_18D175930((uint64_t *)this, (double *)this + 52, "user_periodicity_fpprobability", 0.0, 1.0);
  v6 = sub_18D175BE8((uint64_t)this, &v789, "user_periodicity_feature", "Maximum");
  v7 = sub_18D1756A0((uint64_t *)this, (double *)this + 65, "user_speed_process_noise_multiplier_for_fieldsports_in_pnt", 1.0);
  v8 = sub_18D1756A0((uint64_t *)this, (double *)this + 66, "user_course_process_noise_multiplier_for_fieldsports_in_pnt", 1.0);
  v9 = sub_18D1756A0((uint64_t *)this, (double *)this + 63, "user_speed_process_noise_multiplier_for_downhillsnowsports_in_pnt", 1.0);
  v10 = sub_18D1756A0((uint64_t *)this, (double *)this + 64, "user_course_process_noise_multiplier_for_downhillsnowsports_in_pnt", 1.0);
  v11 = sub_18D1756A0((uint64_t *)this, (double *)this + 67, "user_process_noise_multiplier_for_fieldsports_in_convergence", 1.0);
  if (!v6)
  {
    v779 = v768 | v773 | v778 | v783 | v10 | v11 | v763 | v758 | v753 | v748 | v743 | v738 | v733 | v728 | v723 | v718 | v713 | v708 | v703 | v698 | v692 | v687 | v682 | v677 | v672 | v667 | v662 | v657 | v652 | v648 | v644 | v640 | v636 | v632 | v628 | v624 | v620 | v616 | v2 | v3 | v4 | v5 | v7 | v8 | v9;
    goto LABEL_60;
  }
  size = HIBYTE(v789.__r_.__value_.__r.__words[2]);
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v789.__r_.__value_.__l.__size_;
  if (size != 7)
    goto LABEL_31;
  v13 = &v789;
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v789.__r_.__value_.__r.__words[0];
  v14 = LODWORD(v13->__r_.__value_.__l.__data_) == 1769496909
     && *(_DWORD *)((char *)v13->__r_.__value_.__r.__words + 3) == 1836412265;
  if (v14
    || (LODWORD(v13->__r_.__value_.__l.__data_) == 1769496941
      ? (v15 = *(_DWORD *)((char *)v13->__r_.__value_.__r.__words + 3) == 1836412265)
      : (v15 = 0),
        v15))
  {
    v779 = 1;
    v34 = 2;
  }
  else
  {
    if (LODWORD(v13->__r_.__value_.__l.__data_) != 1768843597
      || *(_DWORD *)((char *)v13->__r_.__value_.__r.__words + 3) != 1836412265)
    {
      data = (int)v13->__r_.__value_.__l.__data_;
      v18 = *(_DWORD *)((char *)v13->__r_.__value_.__r.__words + 3);
      if (data != 1768843629 || v18 != 1836412265)
      {
LABEL_31:
        v20 = (std::string *)sub_18D0778AC(&v801, "user_periodicity_feature");
        v21 = std::string::append(v20, " - invalid entry: \"", 0x13uLL);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v790.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v790.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v789;
        else
          v23 = (std::string *)v789.__r_.__value_.__r.__words[0];
        if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
        else
          v24 = v789.__r_.__value_.__l.__size_;
        v25 = std::string::append(&v790, (const std::string::value_type *)v23, v24);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v798.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v27 = std::string::append(&v798, "\"", 1uLL);
        v28 = v27->__r_.__value_.__r.__words[0];
        v802[0] = v27->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v802 + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
        v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v30 = *((_QWORD *)this + 7);
        v31 = *((_QWORD *)this + 6);
        if (v31 >= v30)
        {
          v35 = *((_QWORD *)this + 5);
          v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v35) >> 3);
          v37 = v36 + 1;
          if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_18D07AFE4();
          v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v35) >> 3);
          if (2 * v38 > v37)
            v37 = 2 * v38;
          if (v38 >= 0x555555555555555)
            v39 = 0xAAAAAAAAAAAAAAALL;
          else
            v39 = v37;
          *(_QWORD *)&v793 = (char *)this + 56;
          if (v39)
            v40 = (char *)sub_18D1782B8((uint64_t)this + 56, v39);
          else
            v40 = 0;
          v41 = (std::string::size_type *)&v40[24 * v36];
          __p[0] = v40;
          __p[1] = v41;
          *((_QWORD *)&v792 + 1) = &v40[24 * v39];
          v42 = v802[0];
          *v41 = v28;
          v41[1] = v42;
          *(std::string::size_type *)((char *)v41 + 15) = *(_QWORD *)((char *)v802 + 7);
          *((_BYTE *)v41 + 23) = v29;
          v802[0] = 0;
          *(_QWORD *)((char *)v802 + 7) = 0;
          *(_QWORD *)&v792 = v41 + 3;
          sub_18D178244((uint64_t *)this + 5, __p);
          v33 = *((_QWORD *)this + 6);
          sub_18D178410((uint64_t)__p);
        }
        else
        {
          v32 = v802[0];
          *(_QWORD *)v31 = v28;
          *(_QWORD *)(v31 + 8) = v32;
          *(_QWORD *)(v31 + 15) = *(_QWORD *)((char *)v802 + 7);
          *(_BYTE *)(v31 + 23) = v29;
          v33 = v31 + 24;
          *((_QWORD *)this + 6) = v31 + 24;
        }
        *((_QWORD *)this + 6) = v33;
        if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v798.__r_.__value_.__l.__data_);
        if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v790.__r_.__value_.__l.__data_);
        if (SHIBYTE(v801.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v801.__r_.__value_.__l.__data_);
        v34 = 0;
        v779 = 0;
        goto LABEL_59;
      }
    }
    v34 = 1;
    v779 = 1;
  }
LABEL_59:
  *((_DWORD *)this + 106) = v34;
LABEL_60:
  v774 = sub_18D175410((uint64_t *)this, (double *)this + 54, "user_default_speed_rms", 0.0);
  v769 = sub_18D175410((uint64_t *)this, (double *)this + 55, "user_default_walk_speed", 0.0);
  v764 = sub_18D175410((uint64_t *)this, (double *)this + 56, "user_default_run_speed", 0.0);
  v759 = sub_18D175410((uint64_t *)this, (double *)this + 57, "user_default_walk_speed_rms", 0.0);
  v754 = sub_18D175410((uint64_t *)this, (double *)this + 58, "user_default_run_speed_rms", 0.0);
  v749 = sub_18D175410((uint64_t *)this, (double *)this + 59, "user_default_walk_step_frequency", 0.0);
  v744 = sub_18D175410((uint64_t *)this, (double *)this + 60, "user_default_run_step_frequency", 0.0);
  v739 = sub_18D175410((uint64_t *)this, (double *)this + 61, "user_default_walk_step_frequency_rms", 0.0);
  v734 = sub_18D175410((uint64_t *)this, (double *)this + 62, "user_default_run_step_frequency_rms", 0.0);
  LOBYTE(__p[0]) = 0;
  v784 = sub_18D179AD0((uint64_t)this, (char *)__p, "hardware_supports_L1_L5_frequencies");
  if (v784)
    *((_BYTE *)this + 641) = __p[0];
  v729 = sub_18D175410((uint64_t *)this, (double *)this + 81, "hardware_accelerometer_sample_period", 0.0);
  v724 = sub_18D175410((uint64_t *)this, (double *)this + 82, "hardware_rategyro_sample_period", 0.0);
  v719 = sub_18D175410((uint64_t *)this, (double *)this + 83, "hardware_accelerometer_bias_decorrelation", 0.0);
  v714 = sub_18D175410((uint64_t *)this, (double *)this + 84, "hardware_rategyro_bias_decorrelation", 0.0);
  v709 = sub_18D175410((uint64_t *)this, (double *)this + 85, "hardware_rategyro_bias_decorrelation_high_acceleration", 0.0);
  v704 = sub_18D175410((uint64_t *)this, (double *)this + 86, "hardware_accelerometer_scale_decorrelation", 0.0);
  v699 = sub_18D175410((uint64_t *)this, (double *)this + 87, "hardware_accelerometer_scale_decorrelation_high_acceleration", 0.0);
  v693 = sub_18D175410((uint64_t *)this, (double *)this + 88, "hardware_sigma_accelerometer_rms", 0.0);
  v688 = sub_18D175410((uint64_t *)this, (double *)this + 89, "hardware_sigma_rategyro_rms", 0.0);
  v683 = sub_18D175410((uint64_t *)this, (double *)this + 90, "hardware_sigma_barometer_rms", 0.0);
  v678 = sub_18D175410((uint64_t *)this, (double *)this + 91, "hardware_sigma_accelerometer_bias_turn_on", 0.0);
  v673 = sub_18D175410((uint64_t *)this, (double *)this + 92, "hardware_sigma_accelerometer_bias", 0.0);
  v668 = sub_18D175410((uint64_t *)this, (double *)this + 93, "hardware_sigma_rategyro_bias_turn_on", 0.0);
  v663 = sub_18D175410((uint64_t *)this, (double *)this + 94, "hardware_sigma_rategyro_bias_turn_on_high_acceleration", 0.0);
  v658 = sub_18D175410((uint64_t *)this, (double *)this + 95, "hardware_sigma_rategyro_bias", 0.0);
  v653 = sub_18D175410((uint64_t *)this, (double *)this + 96, "hardware_sigma_accelerometer_scale_turn_on", 0.0);
  v43 = sub_18D175410((uint64_t *)this, (double *)this + 97, "hardware_sigma_accelerometer_scale_turn_on_high_acceleration", 0.0);
  v44 = sub_18D175410((uint64_t *)this, (double *)this + 98, "hardware_sigma_accelerometer_scale", 0.0);
  v45 = sub_18D175410((uint64_t *)this, (double *)this + 99, "hardware_expected_gnss_rate", 0.0);
  v46 = sub_18D175410((uint64_t *)this, (double *)this + 100, "hardware_xo_adaptive_model_validity_duration", 0.0);
  v47 = sub_18D175410((uint64_t *)this, (double *)this + 101, "hardware_xo_alpha", 0.0);
  v48 = sub_18D175410((uint64_t *)this, (double *)this + 102, "hardware_xo_gamma", 0.0);
  LOBYTE(__p[0]) = 0;
  v49 = sub_18D179AD0((uint64_t)this, (char *)__p, "enable_local_ionosphere_model_estimation");
  if (v49)
    *((_BYTE *)this + 2560) = __p[0];
  LOBYTE(__p[0]) = 0;
  v50 = sub_18D179AD0((uint64_t)this, (char *)__p, "use_local_ionosphere_model_delays");
  if (v50)
    *((_BYTE *)this + 2561) = __p[0];
  LOBYTE(__p[0]) = 0;
  v51 = sub_18D179AD0((uint64_t)this, (char *)__p, "use_locally_estimated_dcb_corrections");
  if (v51)
    *((_BYTE *)this + 2562) = __p[0];
  if (!sub_18D175BE8((uint64_t)this, &v789, "estimator_state_machine_mode", ""))
  {
    v58 = v784 | v44 | v45 | v46 | v47 | v48 | v49 | v50 | v51 | v779 | v774 | v769 | v764 | v759 | v754 | v749 | v744 | v739 | v734 | v729 | v724 | v719 | v714 | v709 | v704 | v699 | v693 | v688 | v683 | v678 | v673 | v668 | v663 | v658 | v653 | v43;
LABEL_86:
    v780 = v58;
    goto LABEL_115;
  }
  v52 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = v789.__r_.__value_.__l.__size_;
  if (v52 == 8)
  {
    v59 = &v789;
    if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v59 = (std::string *)v789.__r_.__value_.__r.__words[0];
    if (v59->__r_.__value_.__r.__words[0] == 0x544E506E65766152)
    {
      *((_DWORD *)this + 206) = 2;
LABEL_171:
      v58 = 1;
      goto LABEL_86;
    }
  }
  else if (v52 == 16)
  {
    v53 = &v789;
    if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = (std::string *)v789.__r_.__value_.__r.__words[0];
    if (v53->__r_.__value_.__r.__words[0] != 0x7361506E65766152
      || v53->__r_.__value_.__l.__size_ != 0x6867756F72685473)
    {
      v56 = v53->__r_.__value_.__r.__words[0];
      v55 = v53->__r_.__value_.__l.__size_;
      if (v56 == 0x6E6F436E65766152 && v55 == 0x65636E6567726576)
      {
        v780 = 1;
        *((_DWORD *)this + 206) = 1;
        goto LABEL_115;
      }
      goto LABEL_90;
    }
    *((_DWORD *)this + 206) = 0;
    goto LABEL_171;
  }
LABEL_90:
  v60 = (std::string *)sub_18D0778AC(&v801, "estimator_state_machine_mode");
  v61 = std::string::append(v60, " - invalid entry: \"", 0x13uLL);
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v790.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v790.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = &v789;
  else
    v63 = (std::string *)v789.__r_.__value_.__r.__words[0];
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
  else
    v64 = v789.__r_.__value_.__l.__size_;
  v65 = std::string::append(&v790, (const std::string::value_type *)v63, v64);
  v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v798.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&v798, "\"", 1uLL);
  v68 = v67->__r_.__value_.__r.__words[0];
  v802[0] = v67->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v802 + 7) = *(std::string::size_type *)((char *)&v67->__r_.__value_.__r.__words[1] + 7);
  v69 = HIBYTE(v67->__r_.__value_.__r.__words[2]);
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  v70 = *((_QWORD *)this + 7);
  v71 = *((_QWORD *)this + 6);
  if (v71 >= v70)
  {
    v74 = *((_QWORD *)this + 5);
    v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 3);
    v76 = v75 + 1;
    if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_18D07AFE4();
    v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v74) >> 3);
    if (2 * v77 > v76)
      v76 = 2 * v77;
    if (v77 >= 0x555555555555555)
      v78 = 0xAAAAAAAAAAAAAAALL;
    else
      v78 = v76;
    *(_QWORD *)&v793 = (char *)this + 56;
    if (v78)
      v79 = (char *)sub_18D1782B8((uint64_t)this + 56, v78);
    else
      v79 = 0;
    v80 = (std::string::size_type *)&v79[24 * v75];
    __p[0] = v79;
    __p[1] = v80;
    *((_QWORD *)&v792 + 1) = &v79[24 * v78];
    v81 = v802[0];
    *v80 = v68;
    v80[1] = v81;
    *(std::string::size_type *)((char *)v80 + 15) = *(_QWORD *)((char *)v802 + 7);
    *((_BYTE *)v80 + 23) = v69;
    v802[0] = 0;
    *(_QWORD *)((char *)v802 + 7) = 0;
    *(_QWORD *)&v792 = v80 + 3;
    sub_18D178244((uint64_t *)this + 5, __p);
    v73 = *((_QWORD *)this + 6);
    sub_18D178410((uint64_t)__p);
  }
  else
  {
    v72 = v802[0];
    *(_QWORD *)v71 = v68;
    *(_QWORD *)(v71 + 8) = v72;
    *(_QWORD *)(v71 + 15) = *(_QWORD *)((char *)v802 + 7);
    *(_BYTE *)(v71 + 23) = v69;
    v73 = v71 + 24;
    *((_QWORD *)this + 6) = v71 + 24;
  }
  *((_QWORD *)this + 6) = v73;
  if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v798.__r_.__value_.__l.__data_);
  if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v790.__r_.__value_.__l.__data_);
  if (SHIBYTE(v801.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v801.__r_.__value_.__l.__data_);
  v780 = 0;
LABEL_115:
  v775 = sub_18D1756A0((uint64_t *)this, (double *)this + 104, "estimator_time_delay", 0.0);
  v770 = sub_18D1756A0((uint64_t *)this, (double *)this + 106, "estimator_time_to_use_high_acceleration_model_after_pnt_initialization", 0.0);
  v765 = sub_18D1756A0((uint64_t *)this, (double *)this + 107, "tolerable_accelerometer_event_age", 0.0);
  v760 = sub_18D1756A0((uint64_t *)this, (double *)this + 108, "tolerable_rategyro_event_age", 0.0);
  v755 = sub_18D175410((uint64_t *)this, (double *)this + 109, "estimator_processing_duration", 0.0);
  v750 = sub_18D175410((uint64_t *)this, (double *)this + 110, "estimator_processing_duration_backoff", 0.0);
  v745 = sub_18D175410((uint64_t *)this, (double *)this + 111, "estimator_maximum_solution_period", 0.0);
  v740 = sub_18D175410((uint64_t *)this, (double *)this + 112, "estimator_maximum_solution_age_for_reinitialization", 0.0);
  v735 = sub_18D175410((uint64_t *)this, (double *)this + 113, "estimator_maximum_component_dissonance_for_initialization", 0.0);
  v730 = sub_18D175930((uint64_t *)this, (double *)this + 114, "estimator_hypothesis_test_probability_threshold", 0.0, 1.0);
  v725 = sub_18D175410((uint64_t *)this, (double *)this + 115, "estimator_matrix_condition_threshold", 0.0);
  v720 = sub_18D175D68((uint64_t *)this, (double *)this + 116, "estimator_nonstationary_fpprobability", 0.0, 1.0);
  v715 = sub_18D175D68((uint64_t *)this, (double *)this + 117, "estimator_nonstationary_fpprobability_aggressive", 0.0, 1.0);
  v710 = sub_18D175410((uint64_t *)this, (double *)this + 118, "estimator_default_pqq", 0.0);
  v705 = sub_18D175410((uint64_t *)this, (double *)this + 119, "estimator_acceleration_stabilization_memory", 0.0);
  v700 = sub_18D175930((uint64_t *)this, (double *)this + 154, "estimator_acceleration_direction_of_travel_energy_fraction_threshold", 0.0, 1.0);
  v694 = sub_18D175410((uint64_t *)this, (double *)this + 155, "estimator_acceleration_direction_of_travel_sigma", 0.0);
  v689 = sub_18D175410((uint64_t *)this, (double *)this + 120, "estimator_maximum_rotation_integration_stepsize", 0.0);
  v684 = sub_18D175410((uint64_t *)this, (double *)this + 121, "estimator_maximum_applicable_acceleration_age", 0.0);
  v679 = sub_18D175410((uint64_t *)this, (double *)this + 122, "estimator_maximum_applicable_rotation_age", 0.0);
  v674 = sub_18D1760B8((uint64_t *)this, (unsigned int *)this + 246, "estimator_acceleration_buffer_depth", 0);
  v669 = sub_18D175410((uint64_t *)this, (double *)this + 124, "estimator_attitude_determination_minimum_mean_acceleration_for_pca", 0.0);
  v664 = sub_18D1756A0((uint64_t *)this, (double *)this + 125, "estimator_attitude_determination_minimum_stddev_acceleration_for_pca", 0.0);
  v659 = sub_18D175D68((uint64_t *)this, (double *)this + 126, "estimator_attitude_determination_minimum_energy_fraction_for_pca", 0.0, 1.0);
  v654 = sub_18D175D68((uint64_t *)this, (double *)this + 127, "estimator_attitude_determination_probability_gnss_speeds_are_different_when_driving", 0.0, 1.0);
  v649 = sub_18D175410((uint64_t *)this, (double *)this + 128, "device_motion_attitude_period_sec", 0.0);
  v82 = &v789;
  v785 = sub_18D176020((uint64_t)this, &v789, "device_motion_minimum_mag_calibration_level");
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = (std::string *)((char *)&v789 + HIBYTE(v789.__r_.__value_.__r.__words[2]));
  else
    v83 = (std::string *)(v789.__r_.__value_.__r.__words[0] + v789.__r_.__value_.__l.__size_);
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v82 = (std::string *)v789.__r_.__value_.__r.__words[0];
  while (v82 != v83)
  {
    v82->__r_.__value_.__s.__data_[0] = __tolower(v82->__r_.__value_.__s.__data_[0]);
    v82 = (std::string *)((char *)v82 + 1);
  }
  if (v785)
  {
    v84 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
    if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v84 = v789.__r_.__value_.__l.__size_;
    switch(v84)
    {
      case 2uLL:
        v85 = &v789;
        if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v85 = (std::string *)v789.__r_.__value_.__r.__words[0];
        if (LOWORD(v85->__r_.__value_.__l.__data_) != 25651)
          goto LABEL_153;
        v86 = 4;
        goto LABEL_182;
      case 6uLL:
        v88 = &v789;
        if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v88 = (std::string *)v789.__r_.__value_.__r.__words[0];
        if (LODWORD(v88->__r_.__value_.__l.__data_) == 1702323250 && WORD2(v88->__r_.__value_.__r.__words[0]) == 27489)
        {
          v86 = 1;
          goto LABEL_182;
        }
        v90 = (int)v88->__r_.__value_.__l.__data_;
        v91 = WORD2(v88->__r_.__value_.__r.__words[0]);
        if (v90 == 1702323251 && v91 == 27489)
        {
          v86 = 3;
          goto LABEL_182;
        }
        goto LABEL_153;
      case 8uLL:
        v87 = &v789;
        if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v87 = (std::string *)v789.__r_.__value_.__r.__words[0];
        if (v87->__r_.__value_.__r.__words[0] == 0x676E6F7274736432)
        {
          v86 = 2;
          goto LABEL_182;
        }
        if (v87->__r_.__value_.__r.__words[0] == 0x676E6F7274736433)
        {
          v86 = 5;
LABEL_182:
          *((_DWORD *)this + 258) = v86;
          break;
        }
LABEL_153:
        *((_DWORD *)this + 258) = -1;
        v97 = (std::string *)sub_18D0778AC(&v801, "device_motion_minimum_mag_calibration_level");
        v98 = std::string::append(v97, " - invalid entry: \"", 0x13uLL);
        v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        v790.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v790.__r_.__value_.__l.__data_ = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v100 = &v789;
        else
          v100 = (std::string *)v789.__r_.__value_.__r.__words[0];
        if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
        else
          v101 = v789.__r_.__value_.__l.__size_;
        v102 = std::string::append(&v790, (const std::string::value_type *)v100, v101);
        v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v798.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        v104 = std::string::append(&v798, "\"", 1uLL);
        v105 = v104->__r_.__value_.__r.__words[0];
        v802[0] = v104->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v802 + 7) = *(std::string::size_type *)((char *)&v104->__r_.__value_.__r.__words[1] + 7);
        v106 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        v107 = *((_QWORD *)this + 7);
        v108 = *((_QWORD *)this + 6);
        if (v108 >= v107)
        {
          v111 = *((_QWORD *)this + 5);
          v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - v111) >> 3);
          v113 = v112 + 1;
          if (v112 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_18D07AFE4();
          v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v111) >> 3);
          if (2 * v114 > v113)
            v113 = 2 * v114;
          if (v114 >= 0x555555555555555)
            v115 = 0xAAAAAAAAAAAAAAALL;
          else
            v115 = v113;
          *(_QWORD *)&v793 = (char *)this + 56;
          if (v115)
            v116 = (char *)sub_18D1782B8((uint64_t)this + 56, v115);
          else
            v116 = 0;
          v117 = (std::string::size_type *)&v116[24 * v112];
          __p[0] = v116;
          __p[1] = v117;
          *((_QWORD *)&v792 + 1) = &v116[24 * v115];
          v118 = v802[0];
          *v117 = v105;
          v117[1] = v118;
          *(std::string::size_type *)((char *)v117 + 15) = *(_QWORD *)((char *)v802 + 7);
          *((_BYTE *)v117 + 23) = v106;
          v802[0] = 0;
          *(_QWORD *)((char *)v802 + 7) = 0;
          *(_QWORD *)&v792 = v117 + 3;
          sub_18D178244((uint64_t *)this + 5, __p);
          v110 = *((_QWORD *)this + 6);
          sub_18D178410((uint64_t)__p);
        }
        else
        {
          v109 = v802[0];
          *(_QWORD *)v108 = v105;
          *(_QWORD *)(v108 + 8) = v109;
          *(_QWORD *)(v108 + 15) = *(_QWORD *)((char *)v802 + 7);
          *(_BYTE *)(v108 + 23) = v106;
          v110 = v108 + 24;
          *((_QWORD *)this + 6) = v108 + 24;
        }
        *((_QWORD *)this + 6) = v110;
        if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v798.__r_.__value_.__l.__data_);
        if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v790.__r_.__value_.__l.__data_);
        if (SHIBYTE(v801.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v801.__r_.__value_.__l.__data_);
        break;
      case 0xAuLL:
        v93 = &v789;
        if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v93 = (std::string *)v789.__r_.__value_.__r.__words[0];
        v94 = v93->__r_.__value_.__r.__words[0];
        v95 = LOWORD(v93->__r_.__value_.__r.__words[1]);
        if (v94 != 0x6261696C65726E75 || v95 != 25964)
          goto LABEL_153;
        *((_DWORD *)this + 258) = 0;
        break;
      default:
        goto LABEL_153;
    }
  }
  v645 = sub_18D175410((uint64_t *)this, (double *)this + 131, "estimator_attitude_determination_maneuver_analysis_duration", 0.0);
  v641 = sub_18D175410((uint64_t *)this, (double *)this + 132, "estimator_attitude_determination_minimum_gnss_delta_speed", 1.0);
  v637 = sub_18D175410((uint64_t *)this, (double *)this + 133, "estimator_attitude_determination_minimum_linear_acceleration", 0.0);
  v633 = sub_18D175410((uint64_t *)this, (double *)this + 134, "estimator_attitude_determination_minimum_rotation_rate", 0.0);
  v629 = sub_18D175410((uint64_t *)this, (double *)this + 135, "estimator_attitude_determination_minimum_speed", 0.0);
  v625 = sub_18D175410((uint64_t *)this, (double *)this + 136, "estimator_attitude_event_raise_minimum_interval", 0.0);
  v621 = sub_18D175410((uint64_t *)this, (double *)this + 130, "estimator_attitude_linear_acceleration_checking_interval", 0.0);
  v617 = sub_18D175410((uint64_t *)this, (double *)this + 142, "estimator_attitude_rotation_checking_interval", 0.0);
  v613 = sub_18D175410((uint64_t *)this, (double *)this + 143, "estimator_attitude_sensor_downsample_duration", 0.01);
  v610 = sub_18D175410((uint64_t *)this, (double *)this + 144, "estimator_attitude_stationary_checking_interval", 0.0);
  v607 = sub_18D175410((uint64_t *)this, (double *)this + 137, "estimator_attitude_linear_movement_gyro_mean_threshold", 0.0);
  v604 = sub_18D175410((uint64_t *)this, (double *)this + 138, "estimator_attitude_linear_movement_gyro_variance_threshold", 0.0);
  v601 = sub_18D175410((uint64_t *)this, (double *)this + 139, "estimator_attitude_determination_dual_direction_smoothing_cutoff_frequency", 0.0);
  v598 = sub_18D175410((uint64_t *)this, (double *)this + 140, "estimator_attitude_determination_turn_maneuver_duration", 0.0);
  v595 = sub_18D175410((uint64_t *)this, (double *)this + 141, "estimator_attitude_determination_minimum_gnss_interval_for_turn_direction", 0.0);
  v592 = sub_18D175410((uint64_t *)this, (double *)this + 145, "estimator_attitude_determination_vehicle_tilt_uncertainty", 0.0);
  v589 = sub_18D175410((uint64_t *)this, (double *)this + 146, "estimator_attitude_determination_mount_wobbling_arw_noise", 0.0);
  v586 = sub_18D175410((uint64_t *)this, (double *)this + 147, "estimator_attitude_determination_max_velocity_direction_error", 0.0);
  v583 = sub_18D175410((uint64_t *)this, (double *)this + 148, "estimator_attitude_determination_innovation_range_ratio", 0.0);
  v119 = sub_18D1760B8((uint64_t *)this, (unsigned int *)this + 298, "estimator_attitude_determination_max_number_out_range_reset_filter", 2u);
  v120 = sub_18D175410((uint64_t *)this, (double *)this + 150, "estimator_gravity_sigma", 0.0);
  v121 = sub_18D175410((uint64_t *)this, (double *)this + 151, "estimator_velocity_sigma", 0.0);
  v122 = sub_18D175410((uint64_t *)this, (double *)this + 152, "estimator_acceleration_stabilization_frequency", 0.0);
  v123 = sub_18D175410((uint64_t *)this, (double *)this + 153, "estimator_acceleration_stabilization_sigma", 0.0);
  v124 = sub_18D175410((uint64_t *)this, (double *)this + 156, "estimator_maximum_fullstatedynamics_integration_stepsize", 0.0);
  v125 = sub_18D175410((uint64_t *)this, (double *)this + 159, "estimator_initial_velocity_sigma", 0.0);
  v126 = sub_18D175410((uint64_t *)this, (double *)this + 157, "estimator_initial_clockbias_sigma", 0.0);
  v127 = sub_18D175410((uint64_t *)this, (double *)this + 158, "estimator_initial_clockdrift_sigma", 0.0);
  v128 = fmax(ceil((*((double *)this + 156) + *((double *)this + 156)) / *((double *)this + 81)), 1.0);
  if (sub_18D1760B8((uint64_t *)this, &v788, "estimator_accelerometer_preprocessor_kernel_halfwidth", 0))
  {
    if (v788 <= v128)
    {
      *((_DWORD *)this + 320) = v788;
      v133 = 1;
    }
    else
    {
      sub_18D099F88((uint64_t)__p);
      sub_18D076A18(__p, (uint64_t)"estimator_accelerometer_preprocessor_kernel_halfwidth - exceeds max value (", 75);
      v129 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v129, (uint64_t)")", 1);
      sub_18D076DE8((uint64_t)&__p[1], &v790);
      v130 = *((_QWORD *)this + 7);
      v131 = *((_QWORD *)this + 6);
      if (v131 >= v130)
      {
        v134 = *((_QWORD *)this + 5);
        v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131 - v134) >> 3);
        v136 = v135 + 1;
        if (v135 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130 - v134) >> 3);
        if (2 * v137 > v136)
          v136 = 2 * v137;
        if (v137 >= 0x555555555555555)
          v138 = 0xAAAAAAAAAAAAAAALL;
        else
          v138 = v136;
        v800 = (char *)this + 56;
        if (v138)
          v139 = (char *)sub_18D1782B8((uint64_t)this + 56, v138);
        else
          v139 = 0;
        v140 = (std::string::size_type)&v139[24 * v135];
        v798.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
        v798.__r_.__value_.__l.__size_ = v140;
        v799 = &v139[24 * v138];
        v141 = *(_OWORD *)&v790.__r_.__value_.__l.__data_;
        *(_QWORD *)(v140 + 16) = *((_QWORD *)&v790.__r_.__value_.__l + 2);
        *(_OWORD *)v140 = v141;
        memset(&v790, 0, sizeof(v790));
        v798.__r_.__value_.__r.__words[2] = v140 + 24;
        sub_18D178244((uint64_t *)this + 5, &v798);
        v142 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)&v798);
        v143 = SHIBYTE(v790.__r_.__value_.__r.__words[2]);
        *((_QWORD *)this + 6) = v142;
        if (v143 < 0)
          operator delete(v790.__r_.__value_.__l.__data_);
      }
      else
      {
        v132 = *(_OWORD *)&v790.__r_.__value_.__l.__data_;
        *(_QWORD *)(v131 + 16) = *((_QWORD *)&v790.__r_.__value_.__l + 2);
        *(_OWORD *)v131 = v132;
        *((_QWORD *)this + 6) = v131 + 24;
      }
      __p[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (v796 < 0)
        operator delete(*((void **)&v795 + 1));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](v797);
      v133 = 0;
    }
  }
  else
  {
    v133 = v785 | v123 | v124 | v125 | v126 | v127 | v780 | v775 | v770 | v765 | v760 | v755 | v750 | v745 | v740 | v735 | v730 | v725 | v720 | v715 | v710 | v705 | v700 | v694 | v689 | v684 | v679 | v674 | v669 | v664 | v659 | v654 | v649 | v645 | v641 | v637 | v633 | v629 | v625 | v621 | v617 | v613 | v610 | v607 | v604 | v601 | v598 | v595 | v592 | v589 | v586 | v583 | v119 | v120 | v121 | v122;
  }
  v144 = sub_18D175410((uint64_t *)this, (double *)this + 161, "estimator_accelerometer_preprocessor_kernel_halfwidth_sigma", 0.0);
  v145 = fmax(ceil((*((double *)this + 156) + *((double *)this + 156)) / *((double *)this + 82)), 1.0);
  if (sub_18D1760B8((uint64_t *)this, &v788, "estimator_rategyro_preprocessor_kernel_halfwidth", 0))
  {
    if (v788 <= v145)
    {
      *((_DWORD *)this + 324) = v788;
      v150 = 1;
    }
    else
    {
      sub_18D099F88((uint64_t)__p);
      sub_18D076A18(__p, (uint64_t)"estimator_rategyro_preprocessor_kernel_halfwidth - exceeds max value (", 70);
      v146 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v146, (uint64_t)")", 1);
      sub_18D076DE8((uint64_t)&__p[1], &v790);
      v147 = *((_QWORD *)this + 7);
      v148 = *((_QWORD *)this + 6);
      if (v148 >= v147)
      {
        v151 = *((_QWORD *)this + 5);
        v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - v151) >> 3);
        v153 = v152 + 1;
        if (v152 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v154 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - v151) >> 3);
        if (2 * v154 > v153)
          v153 = 2 * v154;
        if (v154 >= 0x555555555555555)
          v155 = 0xAAAAAAAAAAAAAAALL;
        else
          v155 = v153;
        v800 = (char *)this + 56;
        if (v155)
          v156 = (char *)sub_18D1782B8((uint64_t)this + 56, v155);
        else
          v156 = 0;
        v157 = (std::string::size_type)&v156[24 * v152];
        v798.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
        v798.__r_.__value_.__l.__size_ = v157;
        v799 = &v156[24 * v155];
        v158 = *(_OWORD *)&v790.__r_.__value_.__l.__data_;
        *(_QWORD *)(v157 + 16) = *((_QWORD *)&v790.__r_.__value_.__l + 2);
        *(_OWORD *)v157 = v158;
        memset(&v790, 0, sizeof(v790));
        v798.__r_.__value_.__r.__words[2] = v157 + 24;
        sub_18D178244((uint64_t *)this + 5, &v798);
        v159 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)&v798);
        v160 = SHIBYTE(v790.__r_.__value_.__r.__words[2]);
        *((_QWORD *)this + 6) = v159;
        if (v160 < 0)
          operator delete(v790.__r_.__value_.__l.__data_);
      }
      else
      {
        v149 = *(_OWORD *)&v790.__r_.__value_.__l.__data_;
        *(_QWORD *)(v148 + 16) = *((_QWORD *)&v790.__r_.__value_.__l + 2);
        *(_OWORD *)v148 = v149;
        *((_QWORD *)this + 6) = v148 + 24;
      }
      __p[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (v796 < 0)
        operator delete(*((void **)&v795 + 1));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](v797);
      v150 = 0;
    }
  }
  else
  {
    v150 = v133 | v144;
  }
  v161 = sub_18D175410((uint64_t *)this, (double *)this + 163, "estimator_rategyro_preprocessor_kernel_halfwidth_sigma", 0.0);
  v630 = sub_18D1760B8((uint64_t *)this, (unsigned int *)this + 328, "estimator_barometer_preprocessor_kernel_halfwidth", 0);
  v626 = sub_18D175410((uint64_t *)this, (double *)this + 165, "estimator_barometer_preprocessor_kernel_halfwidth_sigma", 0.0);
  v162 = sub_18D175410((uint64_t *)this, (double *)this + 166, "estimator_barometer_maximum_applicable_pressure_age", 0.0);
  v163 = sub_18D175410((uint64_t *)this, (double *)this + 167, "delta_altitude_longest_gap_allowed_for_determination", 0.0);
  v622 = sub_18D175410((uint64_t *)this, (double *)this + 168, "delta_altitude_shortest_gap_allowed_for_determination", 0.0);
  v618 = sub_18D175410((uint64_t *)this, (double *)this + 169, "delta_altitude_eligible_noise_level_for_determination", 0.0);
  v614 = sub_18D175410((uint64_t *)this, (double *)this + 170, "estimator_sanity_maximum_user_device_distance", 0.0);
  v611 = sub_18D175410((uint64_t *)this, (double *)this + 171, "estimator_sanity_maximum_user_device_distance_vehicle_fixed", 0.0);
  v608 = sub_18D175410((uint64_t *)this, (double *)this + 172, "estimator_sanity_maximum_speed", 0.0);
  v605 = sub_18D175410((uint64_t *)this, (double *)this + 173, "estimator_sanity_maximum_acceleration", 0.0);
  v602 = sub_18D175410((uint64_t *)this, (double *)this + 174, "estimator_sanity_maximum_accelerometer_bias_multiplier", 0.0);
  v599 = sub_18D175410((uint64_t *)this, (double *)this + 175, "estimator_sanity_maximum_accelerometer_scale_multiplier", 0.0);
  v596 = sub_18D175410((uint64_t *)this, (double *)this + 176, "estimator_sanity_maximum_rategyro_bias_multiplier", 0.0);
  v593 = sub_18D175410((uint64_t *)this, (double *)this + 177, "estimator_sanity_minimum_historical_solution_age", 0.0);
  v590 = sub_18D175410((uint64_t *)this, (double *)this + 178, "estimator_er_attitude_unc_inflation", 1.0);
  v587 = sub_18D175410((uint64_t *)this, (double *)this + 179, "estimator_er_ins_unc_inflation", 1.0);
  v584 = sub_18D175410((uint64_t *)this, (double *)this + 180, "estimator_er_position_unc_inflation", 1.0);
  v581 = sub_18D175410((uint64_t *)this, (double *)this + 181, "estimator_er_velocity_unc_inflation", 1.0);
  v579 = sub_18D175410((uint64_t *)this, (double *)this + 182, "estimator_er_xo_unc_inflation", 1.0);
  v577 = sub_18D175930((uint64_t *)this, (double *)this + 183, "failuredetector_minimum_probability_for_failure", 0.0, 1.0);
  v575 = sub_18D1760B8((uint64_t *)this, (unsigned int *)this + 368, "batch_size_for_failuredetector_probability_update", 0);
  v573 = sub_18D175410((uint64_t *)this, (double *)this + 185, "failuredetector_transition_time", 0.0);
  v571 = sub_18D175930((uint64_t *)this, (double *)this + 186, "failuredetector_probability_stillfailed", 0.0, 1.0);
  v569 = sub_18D175930((uint64_t *)this, (double *)this + 187, "failuredetector_probability_stillgood", 0.0, 1.0);
  v567 = sub_18D175410((uint64_t *)this, (double *)this + 188, "failuredetector_maxsigma", 0.0);
  v565 = sub_18D175D68((uint64_t *)this, (double *)this + 189, "failuredetector_minor_error_recovery_threshold", 0.0, 1.0);
  v563 = sub_18D175D68((uint64_t *)this, (double *)this + 190, "failuredetector_major_error_recovery_threshold", 0.0, 1.0);
  v561 = sub_18D175410((uint64_t *)this, (double *)this + 191, "failuredetector_minor_error_recovery_std_dev_inflation_factor", 0.0);
  v559 = sub_18D175410((uint64_t *)this, (double *)this + 192, "failuredetector_major_error_recovery_std_dev_inflation_factor", 0.0);
  v557 = sub_18D175D68((uint64_t *)this, (double *)this + 193, "integrity_estimator_allowable_fraction_of_sensor_cache_for_back_propagation", 0.0, 1.0);
  v555 = sub_18D175410((uint64_t *)this, (double *)this + 194, "integrity_estimator_direction_of_travel_difference_from_convergence_tolerance_deg", 0.0);
  v553 = sub_18D175410((uint64_t *)this, (double *)this + 195, "integrity_estimator_direction_of_travel_difference_from_passthrough_tolerance_deg", 0.0);
  v551 = sub_18D175410((uint64_t *)this, (double *)this + 196, "integrity_estimator_gnss_max_non_adr_signal_dwell_time_sec", 0.0);
  v549 = sub_18D175410((uint64_t *)this, (double *)this + 197, "integrity_estimator_minimum_estimator_age_to_issue_recovery_event", 0.0);
  v547 = sub_18D175930((uint64_t *)this, (double *)this + 198, "integrity_estimator_normalized_difference_probability_threshold", 0.0, 1.0);
  v545 = sub_18D175410((uint64_t *)this, (double *)this + 199, "integrity_estimator_position_difference_from_convergence_tolerance_m", 0.0);
  v543 = sub_18D175410((uint64_t *)this, (double *)this + 200, "integrity_estimator_position_difference_from_passthrough_tolerance_m", 0.0);
  v541 = sub_18D175410((uint64_t *)this, (double *)this + 201, "integrity_estimator_speed_difference_from_convergence_tolerance_mps", 0.0);
  v539 = sub_18D175410((uint64_t *)this, (double *)this + 202, "integrity_estimator_speed_difference_from_passthrough_tolerance_mps", 0.0);
  v537 = sub_18D175410((uint64_t *)this, (double *)this + 203, "integrity_estimator_time_difference_from_solution_to_check_against_tolerance", 0.0);
  v535 = sub_18D175410((uint64_t *)this, (double *)this + 204, "integrity_estimator_time_difference_from_current_time_tolerance", 0.0);
  v533 = sub_18D175410((uint64_t *)this, (double *)this + 205, "innovation_test_target_sigma_count_for_reweighted_gnss_measurements", 0.0);
  v531 = sub_18D175410((uint64_t *)this, (double *)this + 206, "innovation_test_minimum_reweighted_pseudorange_innovation_m_to_ignore_doppler", 0.0);
  v164 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_default");
  if (v164 == 4)
  {
    v165 = v792;
    *(_OWORD *)((char *)this + 1656) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1672) = v165;
  }
  v801.__r_.__value_.__r.__words[0] = 0;
  if (sub_18D179964((uint64_t)this, &v801, "low_plos_doppler_target_sigma_count_scale_factor"))
  {
    if ((v801.__r_.__value_.__r.__words[0] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
      || *(double *)&v801.__r_.__value_.__l.__data_ <= 0.0
      || *(double *)&v801.__r_.__value_.__l.__data_ > 1.0)
    {
      sub_18D099F88((uint64_t)__p);
      v166 = sub_18D076A18(__p, (uint64_t)"low_plos_doppler_target_sigma_count_scale_factor", 48);
      sub_18D076A18(v166, (uint64_t)" - value (", 10);
      v167 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v167, (uint64_t)") must be greater than ", 23);
      v168 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v168, (uint64_t)" and less than or equal to", 26);
      std::ostream::operator<<();
      sub_18D076DE8((uint64_t)&__p[1], &v790);
      v169 = v164;
      v170 = *((_QWORD *)this + 7);
      v171 = *((_QWORD *)this + 6);
      if (v171 >= v170)
      {
        v173 = *((_QWORD *)this + 5);
        v174 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - v173) >> 3);
        v175 = v174 + 1;
        if (v174 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170 - v173) >> 3);
        if (2 * v176 > v175)
          v175 = 2 * v176;
        if (v176 >= 0x555555555555555)
          v177 = 0xAAAAAAAAAAAAAAALL;
        else
          v177 = v175;
        v800 = (char *)this + 56;
        if (v177)
          v178 = (char *)sub_18D1782B8((uint64_t)this + 56, v177);
        else
          v178 = 0;
        v179 = (std::string::size_type)&v178[24 * v174];
        v798.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
        v798.__r_.__value_.__l.__size_ = v179;
        v799 = &v178[24 * v177];
        v180 = *(_OWORD *)&v790.__r_.__value_.__l.__data_;
        *(_QWORD *)(v179 + 16) = *((_QWORD *)&v790.__r_.__value_.__l + 2);
        *(_OWORD *)v179 = v180;
        memset(&v790, 0, sizeof(v790));
        v798.__r_.__value_.__r.__words[2] = v179 + 24;
        sub_18D178244((uint64_t *)this + 5, &v798);
        v181 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)&v798);
        v182 = SHIBYTE(v790.__r_.__value_.__r.__words[2]);
        *((_QWORD *)this + 6) = v181;
        if (v182 < 0)
          operator delete(v790.__r_.__value_.__l.__data_);
      }
      else
      {
        v172 = *(_OWORD *)&v790.__r_.__value_.__l.__data_;
        *(_QWORD *)(v171 + 16) = *((_QWORD *)&v790.__r_.__value_.__l + 2);
        *(_OWORD *)v171 = v172;
        *((_QWORD *)this + 6) = v171 + 24;
      }
      __p[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (v796 < 0)
        operator delete(*((void **)&v795 + 1));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](v797);
      v529 = 0;
      v164 = v169;
    }
    else
    {
      *((_QWORD *)this + 294) = v801.__r_.__value_.__r.__words[0];
      v529 = 1;
    }
  }
  else
  {
    v529 = 0;
  }
  LOBYTE(__p[0]) = 0;
  v690 = sub_18D179AD0((uint64_t)this, (char *)__p, "low_plos_enable_gnss_measurements");
  if (v690)
    *((_BYTE *)this + 2392) = __p[0];
  LOBYTE(__p[0]) = 0;
  v685 = sub_18D179AD0((uint64_t)this, (char *)__p, "low_plos_enable_doppler_measurements");
  if (v685)
    *((_BYTE *)this + 2393) = __p[0];
  LOBYTE(__p[0]) = 0;
  v680 = sub_18D179AD0((uint64_t)this, (char *)__p, "low_plos_enable_psr_measurements");
  if (v680)
    *((_BYTE *)this + 2394) = __p[0];
  v527 = raven::RavenParameters::ParseAndValidateLowerLimitsOfLowPLOSBins((uint64_t *)this, (raven::RavenParameters *)((char *)this + 2360), "low_plos_lower_limits_of_low_plos_bins");
  v525 = raven::RavenParameters::ParseAndValidateLowPLOSPsrTargetSigmaScaleFactors((uint64_t *)this, (_OWORD *)this + 150, "low_plos_psr_target_sigma_scale_factors");
  v523 = sub_18D1756A0((uint64_t *)this, (double *)this + 304, "low_plos_maximum_doppler_innovation_magnitude_for_usage_mps", 0.0);
  v522 = sub_18D1756A0((uint64_t *)this, (double *)this + 305, "low_plos_maximum_psr_innovation_magnitude_for_usage_m", 0.0);
  v521 = sub_18D1756A0((uint64_t *)this, (double *)this + 306, "low_plos_minimum_median_of_high_plos_unsigned_psr_innovations_for_usage_m", 0.0);
  v520 = sub_18D1756A0((uint64_t *)this, (double *)this + 308, "low_plos_minimum_std_psr_m", 0.0);
  v519 = sub_18D1756A0((uint64_t *)this, (double *)this + 307, "low_plos_minimum_std_doppler_mps", 0.0);
  v518 = sub_18D175D68((uint64_t *)this, (double *)this + 309, "low_plos_minimum_satellite_elevation_for_usage_deg", 0.0, 90.0);
  v786 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_default");
  if (v786 == 4)
  {
    v183 = v792;
    *(_OWORD *)((char *)this + 1688) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1704) = v183;
  }
  v781 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_benign_driving");
  if (v781 == 4)
  {
    v184 = v792;
    *(_OWORD *)((char *)this + 1720) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1736) = v184;
  }
  v776 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_benign_driving");
  if (v776 == 4)
  {
    v185 = v792;
    *(_OWORD *)((char *)this + 1752) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1768) = v185;
  }
  v771 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_benign_periodic_motion");
  if (v771 == 4)
  {
    v186 = v792;
    *(_OWORD *)((char *)this + 1784) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1800) = v186;
  }
  v766 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_benign_periodic_motion");
  if (v766 == 4)
  {
    v187 = v792;
    *(_OWORD *)((char *)this + 1816) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1832) = v187;
  }
  v761 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_dense_urban_driving");
  if (v761 == 4)
  {
    v188 = v792;
    *(_OWORD *)((char *)this + 1848) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1864) = v188;
  }
  v756 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_dense_urban_driving");
  if (v756 == 4)
  {
    v189 = v792;
    *(_OWORD *)((char *)this + 1880) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1896) = v189;
  }
  v751 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_dense_urban_periodic_motion");
  if (v751 == 4)
  {
    v190 = v792;
    *(_OWORD *)((char *)this + 1912) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1928) = v190;
  }
  v746 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_dense_urban_periodic_motion");
  if (v746 == 4)
  {
    v191 = v792;
    *(_OWORD *)((char *)this + 1944) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1960) = v191;
  }
  v741 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_foliage_driving");
  if (v741 == 4)
  {
    v192 = v792;
    *(_OWORD *)((char *)this + 1976) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1992) = v192;
  }
  v736 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_foliage_driving");
  if (v736 == 4)
  {
    v193 = v792;
    *(_OWORD *)((char *)this + 2008) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2024) = v193;
  }
  v731 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_foliage_periodic_motion");
  if (v731 == 4)
  {
    v194 = v792;
    *(_OWORD *)((char *)this + 2040) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2056) = v194;
  }
  v726 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_foliage_periodic_motion");
  if (v726 == 4)
  {
    v195 = v792;
    *(_OWORD *)((char *)this + 2072) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2088) = v195;
  }
  LOBYTE(__p[0]) = 0;
  v675 = sub_18D179AD0((uint64_t)this, (char *)__p, "innovation_test_gnss_reassess_reweighted_measurements_after_other_measurements");
  if (v675)
    *((_BYTE *)this + 2104) = __p[0];
  v517 = sub_18D175410((uint64_t *)this, (double *)this + 264, "innovation_gnss_l1_vs_l5_difference_outlier_threshold_pseudorange_m", 0.0);
  v516 = sub_18D175410((uint64_t *)this, (double *)this + 265, "innovation_gnss_l1_vs_l5_difference_outlier_threshold_doppler_mps", 0.0);
  v515 = sub_18D175D68((uint64_t *)this, (double *)this + 266, "innovation_gnss_l1_vs_l5_difference_inlier_threshold_fraction", 0.0, 1.0);
  v514 = sub_18D175410((uint64_t *)this, (double *)this + 267, "innovation_test_position_measurements_sigma_reweight_threshold", 0.0);
  v513 = sub_18D175410((uint64_t *)this, (double *)this + 268, "innovation_test_position_measurements_sigma_reject_threshold", 0.0);
  v512 = sub_18D175D68((uint64_t *)this, (double *)this + 269, "position_measurement_horizontal_dof_test_probability_threshold", 0.0, 1.0);
  v511 = sub_18D175410((uint64_t *)this, (double *)this + 270, "innovation_test_target_sigma_value_for_reweighted_horizontal_position_measurements", 0.0);
  v510 = sub_18D175410((uint64_t *)this, (double *)this + 271, "innovation_test_target_sigma_value_for_reweighted_vertical_position_measurements", 0.0);
  v509 = sub_18D1756A0((uint64_t *)this, (double *)this + 272, "l1_or_l5_measurement_ignore_if_unc_worse_by_factor_default", 1.0);
  v508 = sub_18D1756A0((uint64_t *)this, (double *)this + 273, "l1_or_l5_measurement_ignore_if_unc_worse_by_factor_periodic_motion", 1.0);
  LOBYTE(__p[0]) = 0;
  v670 = sub_18D179AD0((uint64_t)this, (char *)__p, "los_estimator_enable_use_of_cn0_evidence");
  if (v670)
    *((_BYTE *)this + 2192) = __p[0];
  LOBYTE(__p[0]) = 0;
  v665 = sub_18D179AD0((uint64_t)this, (char *)__p, "los_estimator_enable_use_of_mpf_evidence");
  if (v665)
    *((_BYTE *)this + 2193) = __p[0];
  v507 = sub_18D175410((uint64_t *)this, (double *)this + 275, "los_estimator_maximum_age_before_deletion_sec", 0.0);
  v506 = sub_18D17646C((uint64_t *)this, (float *)this + 552, "los_estimator_minimum_cn0_dbhz_to_allow_L5_band_multipath_indicator_evidence");
  v505 = sub_18D175410((uint64_t *)this, (double *)this + 277, "los_estimator_maximum_duration_since_wifi_cross_check_to_use_other_evidence_sec", 0.0);
  v504 = sub_18D175410((uint64_t *)this, (double *)this + 278, "los_estimator_maximum_distance_to_apply_gnss_wifi_crosschecks_m", 0.0);
  v503 = sub_18D1756A0((uint64_t *)this, (double *)this + 279, "los_estimator_minimum_expected_nlos_path_delay_m", 0.0);
  v502 = sub_18D175D68((uint64_t *)this, (double *)this + 280, "los_estimator_minimum_probability_los_for_high_plos_satellite", 0.0, 1.0);
  v501 = sub_18D175410((uint64_t *)this, (double *)this + 281, "los_estimator_time_interval_for_transition_probabilities_sec", 0.0);
  v500 = sub_18D175D68((uint64_t *)this, (double *)this + 282, "los_estimator_transition_probability_los_given_los", 0.0, 1.0);
  v499 = sub_18D175D68((uint64_t *)this, (double *)this + 283, "los_estimator_transition_probability_nlos_given_nlos", 0.0, 1.0);
  v498 = sub_18D175D68((uint64_t *)this, (double *)this + 284, "los_estimator_reliability_minimum_best_probability_los", 0.0, 1.0);
  v497 = sub_18D176704((uint64_t *)this, (_DWORD *)this + 570, "los_estimator_reliability_minimum_satellites_to_accept");
  v496 = sub_18D1756A0((uint64_t *)this, (double *)this + 286, "los_estimator_maximum_duration_to_apply_gnss_wifi_crosschecks_non_pedestrian_sec", 0.0);
  v495 = sub_18D1756A0((uint64_t *)this, (double *)this + 287, "los_estimator_maximum_duration_to_apply_gnss_wifi_crosschecks_pedestrian_sec", 0.0);
  v494 = sub_18D175D68((uint64_t *)this, (double *)this + 310, "position_context_estimator_initial_probability_indoor", 0.0, 1.0);
  v493 = sub_18D175D68((uint64_t *)this, (double *)this + 311, "position_context_estimator_initial_probability_outdoor", 0.0, 1.0);
  v492 = sub_18D175D68((uint64_t *)this, (double *)this + 312, "position_context_estimator_transition_probability_indoor_given_indoor", 0.0, 1.0);
  v491 = sub_18D175D68((uint64_t *)this, (double *)this + 313, "position_context_estimator_transition_probability_outdoor_given_outdoor", 0.0, 1.0);
  v490 = sub_18D175410((uint64_t *)this, (double *)this + 314, "estimator_sigma_tolerance", 0.0);
  v489 = sub_18D175410((uint64_t *)this, (double *)this + 315, "estimator_information_dither", 0.0);
  v488 = sub_18D175410((uint64_t *)this, (double *)this + 316, "estimator_map_vector_number_of_cross_track_position_standard_deviations_in_road_width", 0.0);
  v487 = sub_18D175410((uint64_t *)this, (double *)this + 317, "estimator_map_vector_cross_track_velocity_uncertainty", 0.0);
  v486 = sub_18D175410((uint64_t *)this, (double *)this + 321, "ionosphere_estimator_processing_duration", 0.0);
  v721 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_initial_states_vec");
  if (v721 == 10)
  {
    v196 = v794;
    *((_OWORD *)this + 163) = v793;
    *((_OWORD *)this + 164) = v196;
    *((_OWORD *)this + 165) = v795;
    v197 = v792;
    *((_OWORD *)this + 161) = *(_OWORD *)__p;
    *((_OWORD *)this + 162) = v197;
  }
  v716 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_initial_state_sigmas_vec");
  if (v716 == 10)
  {
    v198 = v794;
    *((_OWORD *)this + 168) = v793;
    *((_OWORD *)this + 169) = v198;
    *((_OWORD *)this + 170) = v795;
    v199 = v792;
    *((_OWORD *)this + 166) = *(_OWORD *)__p;
    *((_OWORD *)this + 167) = v199;
  }
  LOBYTE(__p[0]) = 0;
  v660 = sub_18D179AD0((uint64_t)this, (char *)__p, "ionosphere_estimator_constrain_initial_b1_b2a_state_sigma");
  if (v660)
    *((_BYTE *)this + 2736) = __p[0];
  v711 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_sigma_ss_vec");
  if (v711 == 10)
  {
    v200 = v794;
    *(_OWORD *)((char *)this + 2776) = v793;
    *(_OWORD *)((char *)this + 2792) = v200;
    *(_OWORD *)((char *)this + 2808) = v795;
    v201 = v792;
    *(_OWORD *)((char *)this + 2744) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2760) = v201;
  }
  v706 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_tau_vec");
  if (v706 == 10)
  {
    v202 = v794;
    *(_OWORD *)((char *)this + 2856) = v793;
    *(_OWORD *)((char *)this + 2872) = v202;
    *(_OWORD *)((char *)this + 2888) = v795;
    v203 = v792;
    *(_OWORD *)((char *)this + 2824) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2840) = v203;
  }
  v701 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_mean_reverting_constant_vec");
  if (v701 == 10)
  {
    v204 = v794;
    *(_OWORD *)((char *)this + 2936) = v793;
    *(_OWORD *)((char *)this + 2952) = v204;
    *(_OWORD *)((char *)this + 2968) = v795;
    v205 = v792;
    *(_OWORD *)((char *)this + 2904) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2920) = v205;
  }
  v695 = sub_18D16D628((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_state_convergence_threshold_sigmas_vec");
  if (v695 == 10)
  {
    v206 = v794;
    *(_OWORD *)((char *)this + 3016) = v793;
    *(_OWORD *)((char *)this + 3032) = v206;
    *(_OWORD *)((char *)this + 3048) = v795;
    v207 = v792;
    *(_OWORD *)((char *)this + 2984) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 3000) = v207;
  }
  v485 = sub_18D175D68((uint64_t *)this, (double *)this + 383, "ionosphere_estimator_failuredetector_minimum_probability_for_failure", 0.0, 1.0);
  v484 = sub_18D175410((uint64_t *)this, (double *)this + 384, "ionosphere_estimator_failuredetector_transition_time", 0.0);
  v483 = sub_18D175D68((uint64_t *)this, (double *)this + 385, "ionosphere_estimator_failuredetector_probability_stillfailed", 0.0, 1.0);
  v482 = sub_18D175D68((uint64_t *)this, (double *)this + 386, "ionosphere_estimator_failuredetector_probability_stillgood", 0.0, 1.0);
  v481 = sub_18D175410((uint64_t *)this, (double *)this + 387, "ionosphere_estimator_failuredetector_maxsigma", 0.0);
  v480 = sub_18D175D68((uint64_t *)this, (double *)this + 388, "ionosphere_estimator_satellite_elevation_mask_deg", -10.0, 90.0);
  v479 = sub_18D1756A0((uint64_t *)this, (double *)this + 389, "ionosphere_estimator_thin_shell_minimum_height", 0.0);
  v478 = sub_18D1756A0((uint64_t *)this, (double *)this + 390, "ionosphere_estimator_thin_shell_maximum_height", 0.0);
  v477 = sub_18D175D68((uint64_t *)this, (double *)this + 391, "minimum_satellite_elevation_to_use_local_ionosphere_model_deg", -10.0, 90.0);
  v476 = sub_18D1756A0((uint64_t *)this, (double *)this + 392, "minimum_time_between_ionosphere_estimator_parameter_updates_s", 0.0);
  v475 = sub_18D175410((uint64_t *)this, (double *)this + 393, "map_vector_event_expiration_age", 0.0);
  v474 = sub_18D175410((uint64_t *)this, (double *)this + 394, "map_vector_event_raise_minimum_interval", 0.0);
  v473 = sub_18D175410((uint64_t *)this, (double *)this + 395, "map_vector_event_device_rotation_threshold", 0.0);
  v472 = sub_18D175410((uint64_t *)this, (double *)this + 396, "signal_environment_minimum_event_raise_interval", 0.0);
  v471 = sub_18D1756A0((uint64_t *)this, (double *)this + 401, "turn_state_detector_minimum_threshold_to_trigger_turning_high_confidence_dps", 0.0);
  v470 = sub_18D1756A0((uint64_t *)this, (double *)this + 402, "turn_state_detector_maximum_threshold_to_trigger_not_turning_low_confidence_dps", 0.0);
  v469 = sub_18D1756A0((uint64_t *)this, (double *)this + 403, "turn_state_detector_maximum_threshold_to_trigger_not_turning_high_confidence_dps", 0.0);
  v468 = sub_18D175410((uint64_t *)this, (double *)this + 404, "turn_state_detector_rotation_rate_buffer_interval_sec", 0.0);
  v467 = sub_18D175410((uint64_t *)this, (double *)this + 405, "estimator_delta_heading_rate_constraint_not_turning_with_low_confidence_dps", 0.0);
  v466 = sub_18D175410((uint64_t *)this, (double *)this + 406, "estimator_delta_heading_rate_constraint_not_turning_with_high_confidence_dps", 0.0);
  v465 = sub_18D175410((uint64_t *)this, (double *)this + 407, "estimator_delta_heading_rate_constraint_turning_with_low_confidence_dps", 0.0);
  v464 = sub_18D175410((uint64_t *)this, (double *)this + 408, "estimator_delta_heading_rate_constraint_turning_with_high_confidence_dps", 0.0);
  v463 = sub_18D1756A0((uint64_t *)this, (double *)this + 409, "estimator_turn_state_based_delta_heading_rate_constraint_speed_threshold", 0.0);
  v462 = sub_18D175410((uint64_t *)this, (double *)this + 410, "user_speed_assistance_uncertainty_multiplier", 0.01);
  v461 = sub_18D175410((uint64_t *)this, (double *)this + 411, "user_speed_assistance_max_dot_covariance_trace", 0.0);
  v460 = sub_18D175410((uint64_t *)this, (double *)this + 412, "user_speed_assistance_max_dot_covariance_trace_dense_urban", 0.0);
  v459 = sub_18D175410((uint64_t *)this, (double *)this + 413, "solution_selector_backoff_from_raven_solution_maximum_prediction_duration_for_oldest_solution", 0.0);
  v458 = sub_18D175410((uint64_t *)this, (double *)this + 414, "solution_selector_max_duration_since_gnss_to_yield_convergence", 0.0);
  v457 = sub_18D175410((uint64_t *)this, (double *)this + 415, "solution_selector_max_duration_since_gnss_to_yield_pnt", 0.0);
  v456 = sub_18D175410((uint64_t *)this, (double *)this + 416, "solution_selector_max_estimator_pos_unc_to_yield_nonpassthrough", 0.0);
  v455 = sub_18D175410((uint64_t *)this, (double *)this + 417, "solution_selector_min_estimator_age_to_yield_nonpassthrough", 0.0);
  v454 = sub_18D175930((uint64_t *)this, (double *)this + 418, "solution_selector_min_estimator_probability_valid_to_yield_nonpassthrough", 0.0, 1.0);
  LOBYTE(__p[0]) = 0;
  v655 = sub_18D179AD0((uint64_t)this, (char *)__p, "solution_selector_delay_raven_estimators_following_gnss_content_starvation");
  if (v655)
    *((_BYTE *)this + 3352) = __p[0];
  v453 = sub_18D175410((uint64_t *)this, (double *)this + 428, "minimum_estimated_position_sigma_non_DU_SE_m", 0.0);
  v452 = sub_18D175410((uint64_t *)this, (double *)this + 432, "minimum_estimated_velocity_sigma_non_DU_SE_mps", 0.0);
  v451 = sub_18D175410((uint64_t *)this, (double *)this + 430, "minimum_estimated_dot_sigma_non_DU_SE_deg", 0.0);
  v450 = sub_18D175410((uint64_t *)this, (double *)this + 429, "minimum_estimated_position_sigma_DU_SE_m", 0.0);
  v449 = sub_18D175410((uint64_t *)this, (double *)this + 433, "minimum_estimated_velocity_sigma_DU_SE_mps", 0.0);
  v448 = sub_18D175410((uint64_t *)this, (double *)this + 431, "minimum_estimated_dot_sigma_DU_SE_deg", 0.0);
  v447 = sub_18D1756A0((uint64_t *)this, (double *)this + 424, "minimum_estimated_position_sigma_increment_due_to_low_accepted_psr_count_m", 0.0);
  v446 = sub_18D1756A0((uint64_t *)this, (double *)this + 425, "minimum_estimated_position_sigma_increment_due_to_low_psr_accept_minus_reject_count_m", 0.0);
  v445 = sub_18D1756A0((uint64_t *)this, (double *)this + 426, "minimum_estimated_position_sigma_increment_due_to_high_psr_reject_to_accept_ratio_m", 0.0);
  v444 = sub_18D1756A0((uint64_t *)this, (double *)this + 427, "minimum_estimated_position_sigma_increment_due_to_high_psr_reweight_to_accept_ratio_m", 0.0);
  v443 = sub_18D1756A0((uint64_t *)this, (double *)this + 420, "maximum_estimator_age_for_aggressive_indoor_context_sec", 0.0);
  v442 = sub_18D1756A0((uint64_t *)this, (double *)this + 421, "maximum_reject_to_accept_ratio_for_minimum_estimated_position_sigma_increment", 0.0);
  v441 = sub_18D1756A0((uint64_t *)this, (double *)this + 422, "maximum_reweight_to_accept_ratio_for_minimum_estimated_position_sigma_increment", 0.0);
  v440 = sub_18D176704((uint64_t *)this, (_DWORD *)this + 846, "maximum_psr_accept_minus_reject_count_for_position_sigma_increment");
  v439 = sub_18D176704((uint64_t *)this, (_DWORD *)this + 847, "maximum_acceptable_psr_count_for_position_sigma_increment");
  v438 = sub_18D1756A0((uint64_t *)this, (double *)this + 434, "raven_solution_maximum_prediction_duration", 0.0);
  v437 = sub_18D175410((uint64_t *)this, (double *)this + 435, "wifi_2d_minimum_altitude_assistance_uncertainty_m", 0.0);
  v436 = sub_18D1756A0((uint64_t *)this, (double *)this + 436, "wifi_2d_maximum_age_of_altitude_assistance_to_use_sec", 0.0);
  LOBYTE(__p[0]) = 0;
  v650 = sub_18D179AD0((uint64_t)this, (char *)__p, "enable_gnss_ray_tracing");
  if (v650)
    *((_BYTE *)this + 3496) = __p[0];
  v435 = sub_18D175410((uint64_t *)this, (double *)this + 438, "gnss_ray_tracing_building_data_query_radius_m", 0.0);
  v434 = sub_18D1756A0((uint64_t *)this, (double *)this + 439, "gnss_ray_tracing_distance_beyond_query_radius_to_keep_tiles_m", 0.0);
  LOBYTE(__p[0]) = 0;
  v646 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_ray_tracing_limited_to_dense_urban_areas");
  if (v646)
    *((_BYTE *)this + 3520) = __p[0];
  LOBYTE(__p[0]) = 0;
  v642 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_ray_tracing_limited_to_pedestrian_activities");
  if (v642)
    *((_BYTE *)this + 3521) = __p[0];
  v433 = sub_18D175410((uint64_t *)this, (double *)this + 442, "gnss_ray_tracing_max_allowable_matrix_condition_number", 0.0);
  v801.__r_.__value_.__r.__words[0] = 0;
  if (sub_18D17A618((uint64_t)this, (uint64_t *)&v801, "gnss_ray_tracing_max_reflections"))
  {
    if (v801.__r_.__value_.__r.__words[0] < 6)
    {
      *((_QWORD *)this + 443) = v801.__r_.__value_.__r.__words[0];
      v432 = 1;
    }
    else
    {
      sub_18D099F88((uint64_t)__p);
      v208 = sub_18D076A18(__p, (uint64_t)"gnss_ray_tracing_max_reflections", 32);
      sub_18D076A18(v208, (uint64_t)" - value (", 10);
      v209 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v209, (uint64_t)") must be greater or equal to ", 30);
      v210 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v210, (uint64_t)" and less or equal to ", 22);
      std::ostream::operator<<();
      sub_18D076DE8((uint64_t)&__p[1], &v790);
      v211 = v164;
      v212 = *((_QWORD *)this + 7);
      v213 = *((_QWORD *)this + 6);
      if (v213 >= v212)
      {
        v215 = *((_QWORD *)this + 5);
        v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v213 - v215) >> 3);
        v217 = v216 + 1;
        if (v216 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v218 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v212 - v215) >> 3);
        if (2 * v218 > v217)
          v217 = 2 * v218;
        if (v218 >= 0x555555555555555)
          v219 = 0xAAAAAAAAAAAAAAALL;
        else
          v219 = v217;
        v800 = (char *)this + 56;
        if (v219)
          v220 = (char *)sub_18D1782B8((uint64_t)this + 56, v219);
        else
          v220 = 0;
        v221 = (std::string::size_type)&v220[24 * v216];
        v798.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
        v798.__r_.__value_.__l.__size_ = v221;
        v799 = &v220[24 * v219];
        v222 = *(_OWORD *)&v790.__r_.__value_.__l.__data_;
        *(_QWORD *)(v221 + 16) = *((_QWORD *)&v790.__r_.__value_.__l + 2);
        *(_OWORD *)v221 = v222;
        memset(&v790, 0, sizeof(v790));
        v798.__r_.__value_.__r.__words[2] = v221 + 24;
        sub_18D178244((uint64_t *)this + 5, &v798);
        v223 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)&v798);
        v224 = SHIBYTE(v790.__r_.__value_.__r.__words[2]);
        *((_QWORD *)this + 6) = v223;
        if (v224 < 0)
          operator delete(v790.__r_.__value_.__l.__data_);
      }
      else
      {
        v214 = *(_OWORD *)&v790.__r_.__value_.__l.__data_;
        *(_QWORD *)(v213 + 16) = *((_QWORD *)&v790.__r_.__value_.__l + 2);
        *(_OWORD *)v213 = v214;
        *((_QWORD *)this + 6) = v213 + 24;
      }
      __p[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (v796 < 0)
        operator delete(*((void **)&v795 + 1));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](v797);
      v432 = 0;
      v164 = v211;
    }
  }
  else
  {
    v432 = 0;
  }
  v431 = sub_18D175410((uint64_t *)this, (double *)this + 441, "gnss_ray_tracing_max_allowable_distance_of_facet_from_point_m", 0.0);
  LOBYTE(__p[0]) = 0;
  v225 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_ray_tracing_stop_candidate_path_search_if_los_path_exists");
  if (v225)
    *((_BYTE *)this + 3552) = __p[0];
  v430 = sub_18D175D68((uint64_t *)this, (double *)this + 445, "gnss_ray_tracing_azimuth_resolution_for_approximate_signal_path_search_deg", 0.0, 180.0);
  v429 = sub_18D175410((uint64_t *)this, (double *)this + 446, "gnss_ray_tracing_max_reflection_point_shift_for_refined_path_convergence_m", 0.0);
  v428 = sub_18D1760B8((uint64_t *)this, (unsigned int *)this + 894, "gnss_ray_tracing_max_iterations_to_converge_refined_path", 0);
  LOBYTE(__p[0]) = 0;
  v638 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_ray_tracing_fix_user_height_to_typical_height_above_ground");
  if (v638)
    *((_BYTE *)this + 3580) = __p[0];
  v427 = sub_18D1756A0((uint64_t *)this, (double *)this + 448, "gnss_ray_tracing_min_radius_for_candidate_point_search_m", 0.0);
  v426 = sub_18D1756A0((uint64_t *)this, (double *)this + 449, "gnss_ray_tracing_error_ellipse_scale_factor_for_candidate_point_search", 1.0);
  v425 = sub_18D175410((uint64_t *)this, (double *)this + 450, "gnss_ray_tracing_candidate_point_search_step_m", 0.0);
  __p[0] = 0;
  v634 = sub_18D17A618((uint64_t)this, (uint64_t *)__p, "gnss_ray_tracing_max_candidate_points_to_allow_ray_tracing");
  if (v634)
    *((void **)this + 451) = __p[0];
  v424 = sub_18D175D68((uint64_t *)this, (double *)this + 452, "gnss_ray_tracing_max_probability_line_of_sight", 0.0, 1.0);
  v423 = sub_18D175D68((uint64_t *)this, (double *)this + 453, "gnss_ray_tracing_max_satellite_elevation_deg", 0.0, 90.0);
  v422 = sub_18D175D68((uint64_t *)this, (double *)this + 454, "gnss_ray_tracing_min_occurrence_rate_of_most_common_sequence", 0.0, 1.0);
  __p[0] = 0;
  v226 = sub_18D17A618((uint64_t)this, (uint64_t *)__p, "gnss_ray_tracing_max_satellites_to_trace_per_epoch");
  if (v226)
    *((void **)this + 455) = __p[0];
  LOBYTE(__p[0]) = 0;
  v227 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_ray_tracing_ignore_tile_data");
  if (v227)
    *((_BYTE *)this + 3648) = __p[0];
  v421 = sub_18D175410((uint64_t *)this, (double *)this + 397, "vio_estimate_sample_period", 0.0);
  v420 = sub_18D175930((uint64_t *)this, (double *)this + 398, "raven_vio_delta_measurement_sample_period", *((double *)this + 397), 6.0);
  v419 = sub_18D175D68((uint64_t *)this, (double *)this + 399, "raven_vl_confidence_minimum_threshold", 0.0, 1.0);
  v228 = sub_18D175410((uint64_t *)this, (double *)this + 400, "raven_vl_position_uncertainty_scale_factor", 0.0);
  v696 = v695 == 10;
  v229 = v164 == 4;
  if (sub_18D176020((uint64_t)this, &v789, "gravity_model_type"))
  {
    v230 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
    if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v230 = v789.__r_.__value_.__l.__size_;
    if (v230 != 5)
      goto LABEL_351;
    v231 = &v789;
    if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v231 = (std::string *)v789.__r_.__value_.__r.__words[0];
    v232 = LODWORD(v231->__r_.__value_.__l.__data_) == 961365829 && v231->__r_.__value_.__s.__data_[4] == 54;
    if (v232
      || ((v233 = (int)v231->__r_.__value_.__l.__data_,
           v234 = v231->__r_.__value_.__s.__data_[4],
           v233 == 963471205)
        ? (v235 = v234 == 54)
        : (v235 = 0),
          v235))
    {
      *((_DWORD *)this + 913) = 0;
      v251 = 1;
    }
    else
    {
LABEL_351:
      v236 = (std::string *)sub_18D0778AC(&v801, "gravity_model_type");
      v237 = std::string::append(v236, " - invalid entry: \"", 0x13uLL);
      v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
      v790.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v790.__r_.__value_.__l.__data_ = v238;
      v237->__r_.__value_.__l.__size_ = 0;
      v237->__r_.__value_.__r.__words[2] = 0;
      v237->__r_.__value_.__r.__words[0] = 0;
      if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v239 = &v789;
      else
        v239 = (std::string *)v789.__r_.__value_.__r.__words[0];
      if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v240 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
      else
        v240 = v789.__r_.__value_.__l.__size_;
      v241 = std::string::append(&v790, (const std::string::value_type *)v239, v240);
      v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
      v798.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v242;
      v241->__r_.__value_.__l.__size_ = 0;
      v241->__r_.__value_.__r.__words[2] = 0;
      v241->__r_.__value_.__r.__words[0] = 0;
      v243 = std::string::append(&v798, "\"", 1uLL);
      v244 = v243->__r_.__value_.__r.__words[0];
      v802[0] = v243->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v802 + 7) = *(std::string::size_type *)((char *)&v243->__r_.__value_.__r.__words[1] + 7);
      v245 = HIBYTE(v243->__r_.__value_.__r.__words[2]);
      v243->__r_.__value_.__l.__size_ = 0;
      v243->__r_.__value_.__r.__words[2] = 0;
      v243->__r_.__value_.__r.__words[0] = 0;
      v246 = *((_QWORD *)this + 7);
      v247 = *((_QWORD *)this + 6);
      if (v247 >= v246)
      {
        v252 = *((_QWORD *)this + 5);
        v253 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v247 - v252) >> 3);
        v254 = v253 + 1;
        if (v253 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v255 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v246 - v252) >> 3);
        if (2 * v255 > v254)
          v254 = 2 * v255;
        if (v255 >= 0x555555555555555)
          v256 = 0xAAAAAAAAAAAAAAALL;
        else
          v256 = v254;
        *(_QWORD *)&v793 = (char *)this + 56;
        if (v256)
          v257 = (char *)sub_18D1782B8((uint64_t)this + 56, v256);
        else
          v257 = 0;
        v258 = (std::string::size_type *)&v257[24 * v253];
        __p[0] = v257;
        __p[1] = v258;
        *((_QWORD *)&v792 + 1) = &v257[24 * v256];
        v259 = v802[0];
        *v258 = v244;
        v258[1] = v259;
        *(std::string::size_type *)((char *)v258 + 15) = *(_QWORD *)((char *)v802 + 7);
        *((_BYTE *)v258 + 23) = v245;
        v802[0] = 0;
        *(_QWORD *)((char *)v802 + 7) = 0;
        *(_QWORD *)&v792 = v258 + 3;
        sub_18D178244((uint64_t *)this + 5, __p);
        v249 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)__p);
      }
      else
      {
        v248 = v802[0];
        *(_QWORD *)v247 = v244;
        *(_QWORD *)(v247 + 8) = v248;
        *(_QWORD *)(v247 + 15) = *(_QWORD *)((char *)v802 + 7);
        *(_BYTE *)(v247 + 23) = v245;
        v249 = v247 + 24;
        *((_QWORD *)this + 6) = v247 + 24;
      }
      *((_QWORD *)this + 6) = v249;
      if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v798.__r_.__value_.__l.__data_);
      if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v790.__r_.__value_.__l.__data_);
      if (SHIBYTE(v801.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v801.__r_.__value_.__l.__data_);
      v251 = 0;
    }
  }
  else
  {
    v250 = v150 | v161 | v630 | v626 | v162 | v163 | v622 | v618 | v614 | v611 | v608 | v605 | v602 | v599 | v596 | v593 | v590 | v587 | v584 | v581 | v579 | v577 | v575 | v573 | v571 | v569 | v567 | v565 | v563 | v561 | v559 | v557 | v555 | v553 | v551 | v549 | v547 | v545 | v543 | v541 | v539 | v537 | v535 | v533 | v531 | v529 | v527 | v525 | v523 | v522 | v521 | v520 | v519 | v518 | v517 | v516 | v515 | v514 | v513 | v512 | v511 | v510 | v509 | v508 | v507 | v506 | v505 | v504 | v503 | v502 | v501 | v500 | v499 | v498 | v497 | v496 | v495 | v494 | v493 | v492 | v491 | v490 | v489 | v488 | v487 | v486 | v485 | v484 | v483 | v482 | v481 | v480 | v479 | v478 | v477 | v476 | v475 | v474 | v473 | v472 | v471 | v470 | v469 | v468 | v467 | v466 | v465 | v464 | v463 | v462 | v461 | v460 | v459 | v458 | v457 | v456 | v455 | v454 | v453 | v452 | v451 | v450 | v449 | v448;
    v251 = v227 | v226 | v634 | v638 | v225 | v642 | v646 | v650 | v655 | v696 | (v701 == 10) | (v706 == 10) | (v711 == 10) | v660 | (v716 == 10) | (v721 == 10) | v665 | v670 | v675 | (v726 == 4 || v731 == 4 || v736 == 4 || v741 == 4 || v746 == 4 || v751 == 4) | (v756 == 4) | (v761 == 4) | (v766 == 4) | (v771 == 4) | (v776 == 4) | (v781 == 4) | (v786 == 4) | v680 | v685 | v690 | v229 | v427 | v426 | v425 | v424 | v423 | v422 | v421 | v420 | v419 | v228 | v250 | v447 | v446 | v445 | v444 | v443 | v442 | v441 | v440 | v439 | v438 | v437 | v436 | v435 | v434 | v433 | v432 | v431 | v430 | v429 | v428;
  }
  LOBYTE(__p[0]) = 0;
  v260 = sub_18D179AD0((uint64_t)this, (char *)__p, "gravity_model_load_from_file");
  if (v260)
    *((_BYTE *)this + 3656) = __p[0];
  v261 = (void **)((char *)this + 3664);
  if (sub_18D175BE8((uint64_t)this, (std::string *)((char *)this + 3664), "gravity_model_parameters", ""))
  {
    if (!*((_BYTE *)this + 3656))
      goto LABEL_392;
    cnconsole::filesystem::absolute((void **)this + 458, (std::string *)__p);
    if (BYTE8(v792))
    {
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v798.__r_.__value_.__r.__words[2] = v792;
      *(_QWORD *)&v792 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      sub_18D0778AC(&v798, "");
    }
    if (*((char *)this + 3687) < 0)
      operator delete(*v261);
    *(_OWORD *)v261 = *(_OWORD *)&v798.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 460) = *((_QWORD *)&v798.__r_.__value_.__l + 2);
    *((_BYTE *)&v798.__r_.__value_.__s + 23) = 0;
    v798.__r_.__value_.__s.__data_[0] = 0;
    if (BYTE8(v792) && SBYTE7(v792) < 0)
      operator delete(__p[0]);
    if (!cnconsole::filesystem::isFileReadable())
    {
      sub_18D0778AC(&v790, "gravity_model_parameters");
      v263 = std::string::append(&v790, " - failed to open file for reading: ", 0x24uLL);
      v264 = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
      v798.__r_.__value_.__r.__words[2] = v263->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v264;
      v263->__r_.__value_.__l.__size_ = 0;
      v263->__r_.__value_.__r.__words[2] = 0;
      v263->__r_.__value_.__r.__words[0] = 0;
      v265 = *((char *)this + 3687);
      if (v265 >= 0)
        v266 = (char *)this + 3664;
      else
        v266 = (const std::string::value_type *)*((_QWORD *)this + 458);
      if (v265 >= 0)
        v267 = *((unsigned __int8 *)this + 3687);
      else
        v267 = *((_QWORD *)this + 459);
      v268 = std::string::append(&v798, v266, v267);
      v269 = v268->__r_.__value_.__r.__words[0];
      v801.__r_.__value_.__r.__words[0] = v268->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v268->__r_.__value_.__r.__words[1] + 7);
      v270 = HIBYTE(v268->__r_.__value_.__r.__words[2]);
      v268->__r_.__value_.__l.__size_ = 0;
      v268->__r_.__value_.__r.__words[2] = 0;
      v268->__r_.__value_.__r.__words[0] = 0;
      v271 = *((_QWORD *)this + 7);
      v272 = *((_QWORD *)this + 6);
      if (v272 >= v271)
      {
        v274 = *((_QWORD *)this + 5);
        v275 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v272 - v274) >> 3);
        v276 = v275 + 1;
        if (v275 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v277 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271 - v274) >> 3);
        if (2 * v277 > v276)
          v276 = 2 * v277;
        if (v277 >= 0x555555555555555)
          v278 = 0xAAAAAAAAAAAAAAALL;
        else
          v278 = v276;
        *(_QWORD *)&v793 = (char *)this + 56;
        if (v278)
          v279 = (char *)sub_18D1782B8((uint64_t)this + 56, v278);
        else
          v279 = 0;
        v280 = (std::string::size_type *)&v279[24 * v275];
        __p[0] = v279;
        __p[1] = v280;
        *((_QWORD *)&v792 + 1) = &v279[24 * v278];
        *v280 = v269;
        v280[1] = v801.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v280 + 15) = *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words
                                                                                   + 7);
        *((_BYTE *)v280 + 23) = v270;
        *(_QWORD *)&v792 = v280 + 3;
        sub_18D178244((uint64_t *)this + 5, __p);
        v273 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)__p);
      }
      else
      {
        *(_QWORD *)v272 = v269;
        *(_QWORD *)(v272 + 8) = v801.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v272 + 15) = *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v272 + 23) = v270;
        v273 = v272 + 24;
        *((_QWORD *)this + 6) = v272 + 24;
      }
      *((_QWORD *)this + 6) = v273;
      if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v798.__r_.__value_.__l.__data_);
      if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v790.__r_.__value_.__l.__data_);
      sub_18D0778AC(__p, "");
      if (*((char *)this + 3687) < 0)
        operator delete(*v261);
      v262 = 0;
      *(_OWORD *)v261 = *(_OWORD *)__p;
      *((_QWORD *)this + 460) = v792;
    }
    else
    {
LABEL_392:
      v262 = 1;
    }
  }
  else
  {
    v262 = v251 | v260;
  }
  v281 = sub_18D1760B8((uint64_t *)this, (unsigned int *)this + 922, "gravity_model_truncation_degree", 0);
  v282 = &v789;
  v283 = sub_18D176020((uint64_t)this, &v789, "raven_threading_model");
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v284 = (std::string *)((char *)&v789 + HIBYTE(v789.__r_.__value_.__r.__words[2]));
  else
    v284 = (std::string *)(v789.__r_.__value_.__r.__words[0] + v789.__r_.__value_.__l.__size_);
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v282 = (std::string *)v789.__r_.__value_.__r.__words[0];
  while (v282 != v284)
  {
    v282->__r_.__value_.__s.__data_[0] = __tolower(v282->__r_.__value_.__s.__data_[0]);
    v282 = (std::string *)((char *)v282 + 1);
  }
  if (!v283)
  {
    v290 = 0;
    v291 = v262 | v281;
    goto LABEL_473;
  }
  v285 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v285 = v789.__r_.__value_.__l.__size_;
  if (v285 == 13)
  {
    v292 = &v789;
    if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v292 = (std::string *)v789.__r_.__value_.__r.__words[0];
    v293 = v292->__r_.__value_.__r.__words[0];
    v294 = *(std::string::size_type *)((char *)v292->__r_.__value_.__r.__words + 5);
    if (v293 != 0x72687469746C756DLL || v294 != 0x6465646165726874)
      goto LABEL_446;
    v290 = 1;
LABEL_472:
    v291 = 1;
    goto LABEL_473;
  }
  if (v285 == 14)
  {
    v286 = &v789;
    if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v286 = (std::string *)v789.__r_.__value_.__r.__words[0];
    v287 = v286->__r_.__value_.__r.__words[0];
    v288 = *(std::string::size_type *)((char *)v286->__r_.__value_.__r.__words + 6);
    if (v287 == 0x6874656C676E6973 && v288 == 0x6465646165726874)
    {
      v290 = 0;
      goto LABEL_472;
    }
  }
LABEL_446:
  v296 = (std::string *)sub_18D0778AC(&v801, "raven_threading_model");
  v297 = std::string::append(v296, " - invalid entry: \"", 0x13uLL);
  v298 = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
  v790.__r_.__value_.__r.__words[2] = v297->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v790.__r_.__value_.__l.__data_ = v298;
  v297->__r_.__value_.__l.__size_ = 0;
  v297->__r_.__value_.__r.__words[2] = 0;
  v297->__r_.__value_.__r.__words[0] = 0;
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v299 = &v789;
  else
    v299 = (std::string *)v789.__r_.__value_.__r.__words[0];
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v300 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
  else
    v300 = v789.__r_.__value_.__l.__size_;
  v301 = std::string::append(&v790, (const std::string::value_type *)v299, v300);
  v302 = *(_OWORD *)&v301->__r_.__value_.__l.__data_;
  v798.__r_.__value_.__r.__words[2] = v301->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v302;
  v301->__r_.__value_.__l.__size_ = 0;
  v301->__r_.__value_.__r.__words[2] = 0;
  v301->__r_.__value_.__r.__words[0] = 0;
  v303 = std::string::append(&v798, "\"", 1uLL);
  v304 = v303->__r_.__value_.__r.__words[0];
  v802[0] = v303->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v802 + 7) = *(std::string::size_type *)((char *)&v303->__r_.__value_.__r.__words[1] + 7);
  v305 = HIBYTE(v303->__r_.__value_.__r.__words[2]);
  v303->__r_.__value_.__l.__size_ = 0;
  v303->__r_.__value_.__r.__words[2] = 0;
  v303->__r_.__value_.__r.__words[0] = 0;
  v306 = *((_QWORD *)this + 7);
  v307 = *((_QWORD *)this + 6);
  if (v307 >= v306)
  {
    v310 = *((_QWORD *)this + 5);
    v311 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v307 - v310) >> 3);
    v312 = v311 + 1;
    if (v311 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_18D07AFE4();
    v313 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v306 - v310) >> 3);
    if (2 * v313 > v312)
      v312 = 2 * v313;
    if (v313 >= 0x555555555555555)
      v314 = 0xAAAAAAAAAAAAAAALL;
    else
      v314 = v312;
    *(_QWORD *)&v793 = (char *)this + 56;
    if (v314)
      v315 = (char *)sub_18D1782B8((uint64_t)this + 56, v314);
    else
      v315 = 0;
    v316 = (std::string::size_type *)&v315[24 * v311];
    __p[0] = v315;
    __p[1] = v316;
    *((_QWORD *)&v792 + 1) = &v315[24 * v314];
    v317 = v802[0];
    *v316 = v304;
    v316[1] = v317;
    *(std::string::size_type *)((char *)v316 + 15) = *(_QWORD *)((char *)v802 + 7);
    *((_BYTE *)v316 + 23) = v305;
    v802[0] = 0;
    *(_QWORD *)((char *)v802 + 7) = 0;
    *(_QWORD *)&v792 = v316 + 3;
    sub_18D178244((uint64_t *)this + 5, __p);
    v309 = *((_QWORD *)this + 6);
    sub_18D178410((uint64_t)__p);
  }
  else
  {
    v308 = v802[0];
    *(_QWORD *)v307 = v304;
    *(_QWORD *)(v307 + 8) = v308;
    *(_QWORD *)(v307 + 15) = *(_QWORD *)((char *)v802 + 7);
    *(_BYTE *)(v307 + 23) = v305;
    v309 = v307 + 24;
    *((_QWORD *)this + 6) = v307 + 24;
  }
  *((_QWORD *)this + 6) = v309;
  if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v798.__r_.__value_.__l.__data_);
  if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v790.__r_.__value_.__l.__data_);
  if (SHIBYTE(v801.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v801.__r_.__value_.__l.__data_);
  v290 = 0;
  v291 = 0;
LABEL_473:
  *((_BYTE *)this + 3692) = v290;
  LOBYTE(__p[0]) = 0;
  v318 = sub_18D179AD0((uint64_t)this, (char *)__p, "raven_output_enabled");
  if (v318)
    *((_BYTE *)this + 3693) = __p[0];
  v319 = (void **)((char *)this + 3696);
  if (sub_18D175BE8((uint64_t)this, (std::string *)this + 154, "raven_output_file", ""))
  {
    if (!*((_BYTE *)this + 3693))
      goto LABEL_487;
    cnconsole::filesystem::absolute((void **)this + 462, (std::string *)__p);
    if (BYTE8(v792))
    {
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v798.__r_.__value_.__r.__words[2] = v792;
      *(_QWORD *)&v792 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      sub_18D0778AC(&v798, "");
    }
    if (*((char *)this + 3719) < 0)
      operator delete(*v319);
    *(_OWORD *)v319 = *(_OWORD *)&v798.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 464) = *((_QWORD *)&v798.__r_.__value_.__l + 2);
    *((_BYTE *)&v798.__r_.__value_.__s + 23) = 0;
    v798.__r_.__value_.__s.__data_[0] = 0;
    if (BYTE8(v792) && SBYTE7(v792) < 0)
      operator delete(__p[0]);
    if (!cnconsole::filesystem::isFileWriteable((uint64_t)this + 3696))
    {
      sub_18D0778AC(&v790, "raven_output_file_");
      v321 = std::string::append(&v790, " - failed to open file for writing: ", 0x24uLL);
      v322 = *(_OWORD *)&v321->__r_.__value_.__l.__data_;
      v798.__r_.__value_.__r.__words[2] = v321->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v322;
      v321->__r_.__value_.__l.__size_ = 0;
      v321->__r_.__value_.__r.__words[2] = 0;
      v321->__r_.__value_.__r.__words[0] = 0;
      v323 = *((char *)this + 3719);
      if (v323 >= 0)
        v324 = (char *)this + 3696;
      else
        v324 = (const std::string::value_type *)*((_QWORD *)this + 462);
      if (v323 >= 0)
        v325 = *((unsigned __int8 *)this + 3719);
      else
        v325 = *((_QWORD *)this + 463);
      v326 = std::string::append(&v798, v324, v325);
      v327 = v326->__r_.__value_.__r.__words[0];
      v801.__r_.__value_.__r.__words[0] = v326->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v326->__r_.__value_.__r.__words[1] + 7);
      v328 = HIBYTE(v326->__r_.__value_.__r.__words[2]);
      v326->__r_.__value_.__l.__size_ = 0;
      v326->__r_.__value_.__r.__words[2] = 0;
      v326->__r_.__value_.__r.__words[0] = 0;
      v329 = *((_QWORD *)this + 7);
      v330 = *((_QWORD *)this + 6);
      if (v330 >= v329)
      {
        v332 = *((_QWORD *)this + 5);
        v333 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v330 - v332) >> 3);
        v334 = v333 + 1;
        if (v333 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v335 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v329 - v332) >> 3);
        if (2 * v335 > v334)
          v334 = 2 * v335;
        if (v335 >= 0x555555555555555)
          v336 = 0xAAAAAAAAAAAAAAALL;
        else
          v336 = v334;
        *(_QWORD *)&v793 = (char *)this + 56;
        if (v336)
          v337 = (char *)sub_18D1782B8((uint64_t)this + 56, v336);
        else
          v337 = 0;
        v338 = (std::string::size_type *)&v337[24 * v333];
        __p[0] = v337;
        __p[1] = v338;
        *((_QWORD *)&v792 + 1) = &v337[24 * v336];
        *v338 = v327;
        v338[1] = v801.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v338 + 15) = *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words
                                                                                   + 7);
        *((_BYTE *)v338 + 23) = v328;
        *(_QWORD *)&v792 = v338 + 3;
        sub_18D178244((uint64_t *)this + 5, __p);
        v331 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)__p);
      }
      else
      {
        *(_QWORD *)v330 = v327;
        *(_QWORD *)(v330 + 8) = v801.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v330 + 15) = *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v330 + 23) = v328;
        v331 = v330 + 24;
        *((_QWORD *)this + 6) = v330 + 24;
      }
      *((_QWORD *)this + 6) = v331;
      if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v798.__r_.__value_.__l.__data_);
      if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v790.__r_.__value_.__l.__data_);
      sub_18D0778AC(__p, "");
      if (*((char *)this + 3719) < 0)
        operator delete(*v319);
      v320 = 0;
      *(_OWORD *)v319 = *(_OWORD *)__p;
      *((_QWORD *)this + 464) = v792;
    }
    else
    {
LABEL_487:
      v320 = 1;
    }
  }
  else
  {
    v320 = v291 | v318;
  }
  LOBYTE(__p[0]) = 0;
  v339 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_system_log_stream_enabled");
  if (v339)
    *((_BYTE *)this + 3721) = __p[0];
  LOBYTE(__p[0]) = 0;
  v340 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_file_log_stream_enabled");
  if (v340)
    *((_BYTE *)this + 3722) = __p[0];
  v341 = (void **)((char *)this + 3728);
  if (sub_18D175BE8((uint64_t)this, (std::string *)((char *)this + 3728), "debug_file_log_stream_name", "raven_debug.txt"))
  {
    if (!*((_BYTE *)this + 3722))
      goto LABEL_529;
    cnconsole::filesystem::absolute((void **)this + 466, (std::string *)__p);
    if (BYTE8(v792))
    {
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v798.__r_.__value_.__r.__words[2] = v792;
      *(_QWORD *)&v792 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      sub_18D0778AC(&v798, "");
    }
    if (*((char *)this + 3751) < 0)
      operator delete(*v341);
    *(_OWORD *)v341 = *(_OWORD *)&v798.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 468) = *((_QWORD *)&v798.__r_.__value_.__l + 2);
    *((_BYTE *)&v798.__r_.__value_.__s + 23) = 0;
    v798.__r_.__value_.__s.__data_[0] = 0;
    if (BYTE8(v792) && SBYTE7(v792) < 0)
      operator delete(__p[0]);
    if (!cnconsole::filesystem::isFileWriteable((uint64_t)this + 3728))
    {
      sub_18D0778AC(&v790, "debug_file_log_stream_name_");
      v343 = std::string::append(&v790, " - failed to open file for writing: ", 0x24uLL);
      v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
      v798.__r_.__value_.__r.__words[2] = v343->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v344;
      v343->__r_.__value_.__l.__size_ = 0;
      v343->__r_.__value_.__r.__words[2] = 0;
      v343->__r_.__value_.__r.__words[0] = 0;
      v345 = *((char *)this + 3751);
      if (v345 >= 0)
        v346 = (char *)this + 3728;
      else
        v346 = (const std::string::value_type *)*((_QWORD *)this + 466);
      if (v345 >= 0)
        v347 = *((unsigned __int8 *)this + 3751);
      else
        v347 = *((_QWORD *)this + 467);
      v348 = std::string::append(&v798, v346, v347);
      v349 = v348->__r_.__value_.__r.__words[0];
      v801.__r_.__value_.__r.__words[0] = v348->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v348->__r_.__value_.__r.__words[1] + 7);
      v350 = HIBYTE(v348->__r_.__value_.__r.__words[2]);
      v348->__r_.__value_.__l.__size_ = 0;
      v348->__r_.__value_.__r.__words[2] = 0;
      v348->__r_.__value_.__r.__words[0] = 0;
      v351 = *((_QWORD *)this + 7);
      v352 = *((_QWORD *)this + 6);
      if (v352 >= v351)
      {
        v354 = *((_QWORD *)this + 5);
        v355 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v352 - v354) >> 3);
        v356 = v355 + 1;
        if (v355 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v357 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v351 - v354) >> 3);
        if (2 * v357 > v356)
          v356 = 2 * v357;
        if (v357 >= 0x555555555555555)
          v358 = 0xAAAAAAAAAAAAAAALL;
        else
          v358 = v356;
        *(_QWORD *)&v793 = (char *)this + 56;
        if (v358)
          v359 = (char *)sub_18D1782B8((uint64_t)this + 56, v358);
        else
          v359 = 0;
        v360 = (std::string::size_type *)&v359[24 * v355];
        __p[0] = v359;
        __p[1] = v360;
        *((_QWORD *)&v792 + 1) = &v359[24 * v358];
        *v360 = v349;
        v360[1] = v801.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v360 + 15) = *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words
                                                                                   + 7);
        *((_BYTE *)v360 + 23) = v350;
        *(_QWORD *)&v792 = v360 + 3;
        sub_18D178244((uint64_t *)this + 5, __p);
        v353 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)__p);
      }
      else
      {
        *(_QWORD *)v352 = v349;
        *(_QWORD *)(v352 + 8) = v801.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v352 + 15) = *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v352 + 23) = v350;
        v353 = v352 + 24;
        *((_QWORD *)this + 6) = v352 + 24;
      }
      *((_QWORD *)this + 6) = v353;
      if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v798.__r_.__value_.__l.__data_);
      if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v790.__r_.__value_.__l.__data_);
      sub_18D0778AC(__p, "");
      if (*((char *)this + 3751) < 0)
        operator delete(*v341);
      v342 = 0;
      *(_OWORD *)v341 = *(_OWORD *)__p;
      *((_QWORD *)this + 468) = v792;
    }
    else
    {
LABEL_529:
      v342 = 1;
    }
  }
  else
  {
    v342 = v320 | v339 | v340;
  }
  LOBYTE(__p[0]) = 0;
  v361 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_stdout_log_stream_enabled");
  if (v361)
    *((_BYTE *)this + 3752) = __p[0];
  LOBYTE(__p[0]) = 0;
  v362 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_msr_logging_enabled");
  if (v362)
    *((_BYTE *)this + 3753) = __p[0];
  LOBYTE(__p[0]) = 0;
  v363 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_msr_logging_extra_enabled");
  if (v363)
    *((_BYTE *)this + 3754) = __p[0];
  v364 = sub_18D175BE8((uint64_t)this, &v789, "debug_msr_logging_base_filename", "");
  v365 = v342 | v361 | v362 | v363 | v364;
  if (*((_BYTE *)this + 3753))
    v366 = v364;
  else
    v366 = 0;
  if (v366 == 1)
  {
    cnconsole::filesystem::absolute((void **)&v789.__r_.__value_.__l.__data_, (std::string *)__p);
    if (BYTE8(v792))
    {
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v798.__r_.__value_.__r.__words[2] = v792;
      *(_QWORD *)&v792 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      sub_18D0778AC(&v798, "");
    }
    v367 = (void **)((char *)this + 3760);
    if (*((char *)this + 3783) < 0)
      operator delete(*v367);
    *(_OWORD *)v367 = *(_OWORD *)&v798.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 472) = *((_QWORD *)&v798.__r_.__value_.__l + 2);
    *((_BYTE *)&v798.__r_.__value_.__s + 23) = 0;
    v798.__r_.__value_.__s.__data_[0] = 0;
    if (BYTE8(v792) && SBYTE7(v792) < 0)
      operator delete(__p[0]);
    if (!cnconsole::filesystem::isFileWriteable((uint64_t)this + 3760))
    {
      sub_18D0778AC(&v790, "debug_msr_logging_base_filename_");
      v368 = std::string::append(&v790, " - failed to open file for writing: ", 0x24uLL);
      v369 = *(_OWORD *)&v368->__r_.__value_.__l.__data_;
      v798.__r_.__value_.__r.__words[2] = v368->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v369;
      v368->__r_.__value_.__l.__size_ = 0;
      v368->__r_.__value_.__r.__words[2] = 0;
      v368->__r_.__value_.__r.__words[0] = 0;
      v370 = *((char *)this + 3783);
      if (v370 >= 0)
        v371 = (char *)this + 3760;
      else
        v371 = (const std::string::value_type *)*((_QWORD *)this + 470);
      if (v370 >= 0)
        v372 = *((unsigned __int8 *)this + 3783);
      else
        v372 = *((_QWORD *)this + 471);
      v373 = std::string::append(&v798, v371, v372);
      v374 = v373->__r_.__value_.__r.__words[0];
      v801.__r_.__value_.__r.__words[0] = v373->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v373->__r_.__value_.__r.__words[1] + 7);
      v375 = HIBYTE(v373->__r_.__value_.__r.__words[2]);
      v373->__r_.__value_.__l.__size_ = 0;
      v373->__r_.__value_.__r.__words[2] = 0;
      v373->__r_.__value_.__r.__words[0] = 0;
      v376 = *((_QWORD *)this + 7);
      v377 = *((_QWORD *)this + 6);
      if (v377 >= v376)
      {
        v379 = *((_QWORD *)this + 5);
        v380 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v377 - v379) >> 3);
        v381 = v380 + 1;
        if (v380 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v382 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v376 - v379) >> 3);
        if (2 * v382 > v381)
          v381 = 2 * v382;
        if (v382 >= 0x555555555555555)
          v383 = 0xAAAAAAAAAAAAAAALL;
        else
          v383 = v381;
        *(_QWORD *)&v793 = (char *)this + 56;
        if (v383)
          v384 = (char *)sub_18D1782B8((uint64_t)this + 56, v383);
        else
          v384 = 0;
        v385 = (std::string::size_type *)&v384[24 * v380];
        __p[0] = v384;
        __p[1] = v385;
        *((_QWORD *)&v792 + 1) = &v384[24 * v383];
        *v385 = v374;
        v385[1] = v801.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)v385 + 15) = *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words
                                                                                   + 7);
        *((_BYTE *)v385 + 23) = v375;
        *(_QWORD *)&v792 = v385 + 3;
        sub_18D178244((uint64_t *)this + 5, __p);
        v378 = *((_QWORD *)this + 6);
        sub_18D178410((uint64_t)__p);
      }
      else
      {
        *(_QWORD *)v377 = v374;
        *(_QWORD *)(v377 + 8) = v801.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v377 + 15) = *(std::string::size_type *)((char *)v801.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v377 + 23) = v375;
        v378 = v377 + 24;
        *((_QWORD *)this + 6) = v377 + 24;
      }
      *((_QWORD *)this + 6) = v378;
      if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v798.__r_.__value_.__l.__data_);
      if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v790.__r_.__value_.__l.__data_);
      sub_18D0778AC(__p, "");
      if (*((char *)this + 3783) < 0)
        operator delete(*v367);
      v365 = 0;
      *(_OWORD *)v367 = *(_OWORD *)__p;
      *((_QWORD *)this + 472) = v792;
    }
  }
  if (!sub_18D175BE8((uint64_t)this, &v789, "debug_logging_level", ""))
  {
    v392 = v365;
LABEL_651:
    v536 = v392;
    goto LABEL_652;
  }
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v386 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
  else
    v386 = v789.__r_.__value_.__l.__size_;
  switch(v386)
  {
    case 4uLL:
      v396 = &v789;
      if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v396 = (std::string *)v789.__r_.__value_.__r.__words[0];
      if (LODWORD(v396->__r_.__value_.__l.__data_) == 1868983881
        || LODWORD(v396->__r_.__value_.__l.__data_) == 1868983913)
      {
        v391 = 2;
        goto LABEL_649;
      }
      break;
    case 5uLL:
      if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v393 = &v789;
      else
        v393 = (std::string *)v789.__r_.__value_.__r.__words[0];
      v394 = LODWORD(v393->__r_.__value_.__l.__data_) == 1969382724 && v393->__r_.__value_.__s.__data_[4] == 103;
      if (v394
        || (LODWORD(v393->__r_.__value_.__l.__data_) == 1969382756
          ? (v395 = v393->__r_.__value_.__s.__data_[4] == 103)
          : (v395 = 0),
            v395))
      {
        v536 = 1;
        *((_BYTE *)this + 3784) = 1;
        goto LABEL_652;
      }
      if (!memcmp(v393, "Error", 5uLL))
        goto LABEL_643;
      break;
    case 7uLL:
      if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v387 = &v789;
      else
        v387 = (std::string *)v789.__r_.__value_.__r.__words[0];
      v388 = LODWORD(v387->__r_.__value_.__l.__data_) == 1651664214
          && *(_DWORD *)((char *)v387->__r_.__value_.__r.__words + 3) == 1702063970;
      if (v388
        || (LODWORD(v387->__r_.__value_.__l.__data_) == 1651664246
          ? (v389 = *(_DWORD *)((char *)v387->__r_.__value_.__r.__words + 3) == 1702063970)
          : (v389 = 0),
            v389))
      {
        *((_BYTE *)this + 3784) = 0;
        goto LABEL_650;
      }
      if (!memcmp(v387, "Default", 7uLL)
        || (LODWORD(v387->__r_.__value_.__l.__data_) == 1634100580
          ? (v390 = *(_DWORD *)((char *)v387->__r_.__value_.__r.__words + 3) == 1953264993)
          : (v390 = 0),
            v390))
      {
        v391 = 3;
LABEL_649:
        *((_BYTE *)this + 3784) = v391;
LABEL_650:
        v392 = 1;
        goto LABEL_651;
      }
      break;
  }
  if (sub_18D099368((const void **)&v789.__r_.__value_.__l.__data_, "error"))
  {
LABEL_643:
    v391 = 4;
    goto LABEL_649;
  }
  if (sub_18D099368((const void **)&v789.__r_.__value_.__l.__data_, "Fault")
    || sub_18D099368((const void **)&v789.__r_.__value_.__l.__data_, "fault"))
  {
    v391 = 5;
    goto LABEL_649;
  }
  *((_BYTE *)this + 3784) = -1;
  sub_18D0778AC(&v801, "debug_logging_level");
  sub_18D175D0C(&v790, &v801, " - invalid entry: \"");
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v415 = &v789;
  else
    v415 = (std::string *)v789.__r_.__value_.__r.__words[0];
  if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v416 = HIBYTE(v789.__r_.__value_.__r.__words[2]);
  else
    v416 = v789.__r_.__value_.__l.__size_;
  v417 = std::string::append(&v790, (const std::string::value_type *)v415, v416);
  v418 = *(_OWORD *)&v417->__r_.__value_.__l.__data_;
  v798.__r_.__value_.__r.__words[2] = v417->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v798.__r_.__value_.__l.__data_ = v418;
  v417->__r_.__value_.__l.__size_ = 0;
  v417->__r_.__value_.__r.__words[2] = 0;
  v417->__r_.__value_.__r.__words[0] = 0;
  sub_18D175D0C((std::string *)__p, &v798, "\"");
  sub_18D16E0C4((uint64_t *)this + 5, (__int128 *)__p);
  if (SBYTE7(v792) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v798.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v798.__r_.__value_.__l.__data_);
  if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v790.__r_.__value_.__l.__data_);
  if (SHIBYTE(v801.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v801.__r_.__value_.__l.__data_);
  v536 = 0;
LABEL_652:
  LOBYTE(__p[0]) = 0;
  v787 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_predict_output_to_present");
  if (v787)
    *((_BYTE *)this + 3720) = __p[0];
  LOBYTE(__p[0]) = 0;
  v782 = sub_18D179AD0((uint64_t)this, (char *)__p, "enable_rof_ionosphere_model");
  if (v782)
    *((_BYTE *)this + 2544) = __p[0];
  v534 = sub_18D175410((uint64_t *)this, (double *)this + 319, "rof_ionosphere_staleness_threshold_sec", 0.0);
  LOBYTE(__p[0]) = 0;
  v777 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_average_doppler_averaged_over_data_interval");
  if (v777)
    *((_BYTE *)this + 544) = __p[0];
  LOBYTE(__p[0]) = 0;
  v772 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_only_scales_vendor_reported_measurement_uncertainty");
  if (v772)
    *((_BYTE *)this + 545) = __p[0];
  LOBYTE(__p[0]) = 0;
  v767 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_require_average_doppler_and_doppler_cross_checking");
  if (v767)
    *((_BYTE *)this + 546) = __p[0];
  LOBYTE(__p[0]) = 0;
  v762 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_rx_band_corrections_are_additive");
  if (v762)
    *((_BYTE *)this + 547) = __p[0];
  LOBYTE(__p[0]) = 0;
  v757 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_rx_band_corrections_include_inter_constellation_clock_offset");
  if (v757)
    *((_BYTE *)this + 548) = __p[0];
  LOBYTE(__p[0]) = 0;
  v752 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_use_vendor_supplied_measurement_variances");
  if (v752)
    *((_BYTE *)this + 549) = __p[0];
  __p[0] = 0;
  v747 = sub_18D179964((uint64_t)this, __p, "gnss_preprocessor_rf_time_bias_variance_scale_factor");
  if (v747)
    *((void **)this + 70) = __p[0];
  LOBYTE(__p[0]) = 0;
  v742 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_scale_filtered_receiver_band_cor_uncertainty");
  if (v742)
    *((_BYTE *)this + 550) = __p[0];
  LOBYTE(__p[0]) = 0;
  v737 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_enable_rx_band_correction_filter");
  if (v737)
    *((_BYTE *)this + 551) = __p[0];
  v532 = sub_18D175D68((uint64_t *)this, (double *)this + 71, "gnss_preprocessor_receiver_band_correction_lpf_alpha", 2.22507386e-308, 1.0);
  LOBYTE(__p[0]) = 0;
  v732 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_apply_minnesota_rf_model");
  if (v732)
    *((_BYTE *)this + 576) = __p[0];
  LOBYTE(__p[0]) = 0;
  v727 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_form_averaged_doppler_from_carrier_phase");
  if (v727)
    *((_BYTE *)this + 577) = __p[0];
  LOBYTE(__p[0]) = 0;
  v722 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_use_instantaneous_doppler_unc_for_averaged");
  if (v722)
    *((_BYTE *)this + 578) = __p[0];
  LOBYTE(__p[0]) = 0;
  v717 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_resolve_millisecond_pseudorange_errors");
  if (v717)
    *((_BYTE *)this + 579) = __p[0];
  LOBYTE(__p[0]) = 0;
  v712 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_raise_multiple_doppler_variants");
  if (v712)
    *((_BYTE *)this + 580) = __p[0];
  v530 = sub_18D17646C((uint64_t *)this, (float *)this + 146, "gnss_preprocessor_minimum_cn0_dbhz_to_allow_L5_multipath_indicator");
  LOBYTE(__p[0]) = 0;
  v707 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_merge_L1_L5_svinfo_for_galileo");
  if (v707)
    *((_BYTE *)this + 588) = __p[0];
  LOBYTE(__p[0]) = 0;
  v702 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_need_to_add_ephemeris_unc_to_range_unc");
  if (v702)
    *((_BYTE *)this + 589) = __p[0];
  LOBYTE(__p[0]) = 0;
  v697 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_preprocessor_need_to_add_rx_band_corr_unc_to_range_unc");
  if (v697)
    *((_BYTE *)this + 590) = __p[0];
  LOBYTE(__p[0]) = 0;
  v691 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_beidou_measurements");
  if (v691)
    *((_BYTE *)this + 592) = __p[0];
  LOBYTE(__p[0]) = 0;
  v686 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_galileo_measurements");
  if (v686)
    *((_BYTE *)this + 593) = __p[0];
  LOBYTE(__p[0]) = 0;
  v681 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_glonass_measurements");
  if (v681)
    *((_BYTE *)this + 594) = __p[0];
  LOBYTE(__p[0]) = 0;
  v676 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_gps_measurements");
  if (v676)
    *((_BYTE *)this + 595) = __p[0];
  LOBYTE(__p[0]) = 0;
  v671 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_qzss_measurements");
  if (v671)
    *((_BYTE *)this + 596) = __p[0];
  LOBYTE(__p[0]) = 0;
  v666 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_navic_measurements");
  if (v666)
    *((_BYTE *)this + 597) = __p[0];
  LOBYTE(__p[0]) = 0;
  v661 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_beidou_b1_measurements");
  if (v661)
    *((_BYTE *)this + 598) = __p[0];
  LOBYTE(__p[0]) = 0;
  v656 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_beidou_b2a_measurements");
  if (v656)
    *((_BYTE *)this + 599) = __p[0];
  LOBYTE(__p[0]) = 0;
  v651 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_galileo_e1_measurements");
  if (v651)
    *((_BYTE *)this + 600) = __p[0];
  LOBYTE(__p[0]) = 0;
  v647 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_galileo_e5a_measurements");
  if (v647)
    *((_BYTE *)this + 601) = __p[0];
  LOBYTE(__p[0]) = 0;
  v643 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_gps_l1_measurements");
  if (v643)
    *((_BYTE *)this + 602) = __p[0];
  LOBYTE(__p[0]) = 0;
  v639 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_gps_l5_measurements");
  if (v639)
    *((_BYTE *)this + 603) = __p[0];
  LOBYTE(__p[0]) = 0;
  v635 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_qzss_l1_measurements");
  if (v635)
    *((_BYTE *)this + 604) = __p[0];
  LOBYTE(__p[0]) = 0;
  v631 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_qzss_l5_measurements");
  if (v631)
    *((_BYTE *)this + 605) = __p[0];
  LOBYTE(__p[0]) = 0;
  v627 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_doppler_measurements");
  if (v627)
    *((_BYTE *)this + 606) = __p[0];
  LOBYTE(__p[0]) = 0;
  v623 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_use_psr_measurements");
  if (v623)
    *((_BYTE *)this + 607) = __p[0];
  LOBYTE(__p[0]) = 0;
  v619 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_process_averaged_doppler_from_phase_tracking");
  if (v619)
    *((_BYTE *)this + 608) = __p[0];
  LOBYTE(__p[0]) = 0;
  v615 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_process_averaged_doppler");
  if (v615)
    *((_BYTE *)this + 609) = __p[0];
  LOBYTE(__p[0]) = 0;
  v612 = sub_18D179AD0((uint64_t)this, (char *)__p, "gnss_process_instantaneous_doppler");
  if (v612)
    *((_BYTE *)this + 610) = __p[0];
  LODWORD(__p[0]) = 0;
  v609 = sub_18D17A044((uint64_t)this, (float *)__p, "gnss_minimum_tolerable_carrier_to_noise_ratio");
  if (v609)
    *((_DWORD *)this + 153) = __p[0];
  v528 = sub_18D175D68((uint64_t *)this, (double *)this + 77, "gnss_minimum_elevation_deg", -90.0, 90.0);
  v526 = sub_18D175410((uint64_t *)this, (double *)this + 78, "gnss_min_interval_for_adr_differences", 0.0);
  v524 = sub_18D175410((uint64_t *)this, (double *)this + 79, "gnss_max_interval_for_adr_differences", *((double *)this + 78));
  LOBYTE(__p[0]) = 0;
  v606 = sub_18D179AD0((uint64_t)this, (char *)__p, "propagate_gnss_measurements");
  if (v606)
    *((_BYTE *)this + 840) = __p[0];
  LOBYTE(__p[0]) = 0;
  v603 = sub_18D179AD0((uint64_t)this, (char *)__p, "use_latest_dwell_end_time_for_measurement_propagation");
  if (v603)
    *((_BYTE *)this + 841) = __p[0];
  LOBYTE(__p[0]) = 0;
  v600 = sub_18D179AD0((uint64_t)this, (char *)__p, "reduce_gnss_measurement_processing_order_priority_for_beidou_B1c");
  if (v600)
    *((_BYTE *)this + 640) = __p[0];
  LOBYTE(__p[0]) = 0;
  v597 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_accessory_vehicle_speed_assistance");
  if (v597)
    *((_BYTE *)this + 3785) = __p[0];
  LOBYTE(__p[0]) = 0;
  v594 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_activity_state_assistance");
  if (v594)
    *((_BYTE *)this + 3786) = __p[0];
  LOBYTE(__p[0]) = 0;
  v591 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_altitude_assistance");
  if (v591)
    *((_BYTE *)this + 3787) = __p[0];
  LOBYTE(__p[0]) = 0;
  v588 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_altitude_change_assistance");
  if (v588)
    *((_BYTE *)this + 3788) = __p[0];
  LOBYTE(__p[0]) = 0;
  v585 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_attitude_change_assistance");
  if (v585)
    *((_BYTE *)this + 3789) = __p[0];
  LOBYTE(__p[0]) = 0;
  v582 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_device_motion_attitude_event");
  if (v582)
    *((_BYTE *)this + 3790) = __p[0];
  LOBYTE(__p[0]) = 0;
  v580 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_fitness_session_assistance");
  if (v580)
    *((_BYTE *)this + 3791) = __p[0];
  LOBYTE(__p[0]) = 0;
  v578 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_l5_measurements_regardless_of_multipath_flag");
  if (v578)
    *((_BYTE *)this + 3792) = __p[0];
  LOBYTE(__p[0]) = 0;
  v576 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_l1_vs_l5_innovation_difference_edits");
  if (v576)
    *((_BYTE *)this + 3793) = __p[0];
  LOBYTE(__p[0]) = 0;
  v574 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_l1_or_l5_measurement_ignore_if_much_worse");
  if (v574)
    *((_BYTE *)this + 3794) = __p[0];
  LOBYTE(__p[0]) = 0;
  v572 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_maps_route_hints_assistance");
  if (v572)
    *((_BYTE *)this + 3795) = __p[0];
  LOBYTE(__p[0]) = 0;
  v570 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_map_vector_assistance");
  if (v570)
    *((_BYTE *)this + 3796) = __p[0];
  LOBYTE(__p[0]) = 0;
  v568 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_mount_state_assistance");
  if (v568)
    *((_BYTE *)this + 3797) = __p[0];
  LOBYTE(__p[0]) = 0;
  v566 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_moving_state_assistance");
  if (v566)
    *((_BYTE *)this + 3798) = __p[0];
  LOBYTE(__p[0]) = 0;
  v564 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_nonholonomic_assistance");
  if (v564)
    *((_BYTE *)this + 3799) = __p[0];
  LOBYTE(__p[0]) = 0;
  v562 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_odometer_assistance");
  if (v562)
    *((_BYTE *)this + 3800) = __p[0];
  LOBYTE(__p[0]) = 0;
  v560 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_pca_based_horizontal_dot_assistance");
  if (v560)
    *((_BYTE *)this + 3801) = __p[0];
  LOBYTE(__p[0]) = 0;
  v558 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_pedometer_assistance");
  if (v558)
    *((_BYTE *)this + 3802) = __p[0];
  LOBYTE(__p[0]) = 0;
  v556 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_position_assistance");
  if (v556)
    *((_BYTE *)this + 3803) = __p[0];
  LOBYTE(__p[0]) = 0;
  v554 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_position_change_assistance");
  if (v554)
    *((_BYTE *)this + 3804) = __p[0];
  LOBYTE(__p[0]) = 0;
  v552 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_position_clamping");
  if (v552)
    *((_BYTE *)this + 3805) = __p[0];
  LOBYTE(__p[0]) = 0;
  v550 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_tunnel_bridge_assistance");
  if (v550)
    *((_BYTE *)this + 3806) = __p[0];
  LOBYTE(__p[0]) = 0;
  v548 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_tunnel_end_point_assistance");
  if (v548)
    *((_BYTE *)this + 3807) = __p[0];
  LOBYTE(__p[0]) = 0;
  v546 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_velocity_assistance");
  if (v546)
    *((_BYTE *)this + 3808) = __p[0];
  LOBYTE(__p[0]) = 0;
  v544 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_vio_assistance");
  if (v544)
    *((_BYTE *)this + 3809) = __p[0];
  LOBYTE(__p[0]) = 0;
  v542 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_vlf_assistance");
  if (v542)
    *((_BYTE *)this + 3810) = __p[0];
  LOBYTE(__p[0]) = 0;
  v540 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_enable_gnss_msr_processing");
  if (v540)
    *((_BYTE *)this + 3811) = __p[0];
  LOBYTE(__p[0]) = 0;
  v538 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_enable_gnss_msr_processing_test_mode");
  if (v538)
    *((_BYTE *)this + 3812) = __p[0];
  LOBYTE(__p[0]) = 0;
  v397 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_enable_vl_position_msr_processing");
  if (v397)
    *((_BYTE *)this + 3813) = __p[0];
  LOBYTE(__p[0]) = 0;
  v398 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_enable_wifi_2d_to_3d_with_altitude_assistance");
  if (v398)
    *((_BYTE *)this + 3814) = __p[0];
  LOBYTE(__p[0]) = 0;
  v399 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_enable_wifi_msr_processing");
  if (v399)
    *((_BYTE *)this + 3815) = __p[0];
  LOBYTE(__p[0]) = 0;
  v400 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_enable_satellite_los_estimator");
  if (v400)
    *((_BYTE *)this + 3816) = __p[0];
  LOBYTE(__p[0]) = 0;
  v401 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_enable_satellite_los_estimator_wifi_crosschecks");
  if (v401)
    *((_BYTE *)this + 3817) = __p[0];
  LOBYTE(__p[0]) = 0;
  v402 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_enable_satellite_los_estimator_test_mode");
  if (v402)
    *((_BYTE *)this + 3818) = __p[0];
  LOBYTE(__p[0]) = 0;
  v403 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_select_use_raw_sensor_events");
  if (v403)
    *((_BYTE *)this + 3819) = __p[0];
  LOBYTE(__p[0]) = 0;
  v404 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_allow_vehicle_fixed_parameterization");
  if (v404)
    *((_BYTE *)this + 3820) = __p[0];
  LODWORD(__p[0]) = 0;
  v405 = sub_18D17A480((uint64_t)this, (int *)__p, "debug_artificial_gnss_time_offset_ms");
  if (v405)
    *((_DWORD *)this + 956) = __p[0];
  LOBYTE(__p[0]) = 0;
  v406 = sub_18D179AD0((uint64_t)this, (char *)__p, "debug_gnss_preprocessor_ignore_non_tracking_uncertainty");
  if (v406)
    *((_BYTE *)this + 3828) = __p[0];
  v412 = v609 | v612 | v615 | v619 | v606 | v603 | v600 | v597 | v594 | v591 | v588 | v585 | v582 | v623 | v627 | v631 | v635 | v639 | v643 | v647 | v651 | v656 | v661 | v666 | v671 | v676 | v681 | v686 | v691 | v697 | v702 | v707 | v712 | v717 | v722 | v727 | v732 | v737 | v742 | v747 | v752 | v757 | v762 | v767 | v772 | v777 | v782 | v787 | v532 | v530 | v528 | v526 | v524 | v536 | v534 | v580 | v578 | v576 | v574 | v572 | v570 | v568 | v566 | v564 | v562 | v560 | v558 | v556 | v554 | v552 | v550 | v548 | v546 | v544 | v542 | v540 | v538 | v397 | v398 | v399 | v400 | v401 | v402 | v403 | v404 | v405 | v406;
  if ((v412 & 1) == 0)
  {
    *((_BYTE *)this + 33) = 0;
    LOWORD(v798.__r_.__value_.__l.__data_) = 12;
    v790.__r_.__value_.__s.__data_[0] = 4;
    if (*((char *)this + 31) < 0)
    {
      sub_18D077798(__p, *((void **)this + 1), *((_QWORD *)this + 2));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)((char *)this + 8);
      *(_QWORD *)&v792 = *((_QWORD *)this + 3);
    }
    v413 = __p;
    if (SBYTE7(v792) < 0)
      LOBYTE(v413) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v798, (unsigned __int8 *)&v790, "Error: Invalid configuration option: %s", v407, v408, v409, v410, v411, (char)v413);
    if (SBYTE7(v792) < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v789.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v789.__r_.__value_.__l.__data_);
  return v412 & 1;
}

void sub_18D1750DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (*(char *)(v2 - 185) < 0)
    operator delete(*(void **)(v1 + 272));
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (*(char *)(v2 - 137) < 0)
    operator delete(*(void **)(v2 - 160));
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  _Unwind_Resume(a1);
}

uint64_t sub_18D175410(uint64_t *a1, double *a2, const char *a3, double a4)
{
  uint64_t result;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[10];
  char v30;
  uint64_t v31;
  double v32;
  _QWORD v33[5];

  v32 = 0.0;
  result = sub_18D179964((uint64_t)a1, &v32, a3);
  if ((_DWORD)result)
  {
    if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v32 > a4)
    {
      *a2 = v32;
      return 1;
    }
    else
    {
      sub_18D099F88((uint64_t)&v28);
      v10 = strlen(a3);
      v11 = sub_18D076A18(&v28, (uint64_t)a3, v10);
      sub_18D076A18(v11, (uint64_t)" - value (", 10);
      v12 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v12, (uint64_t)") must be greater than ", 23);
      std::ostream::operator<<();
      sub_18D076DE8((uint64_t)v29, __p);
      v13 = a1[7];
      v14 = a1[6];
      if (v14 >= v13)
      {
        v16 = a1[5];
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        v33[4] = a1 + 7;
        if (v20)
          v21 = (char *)sub_18D1782B8((uint64_t)(a1 + 7), v20);
        else
          v21 = 0;
        v22 = &v21[24 * v17];
        v33[0] = v21;
        v33[1] = v22;
        v33[3] = &v21[24 * v20];
        v23 = *(_OWORD *)__p;
        *((_QWORD *)v22 + 2) = v27;
        *(_OWORD *)v22 = v23;
        __p[1] = 0;
        v27 = 0;
        __p[0] = 0;
        v33[2] = v22 + 24;
        sub_18D178244(a1 + 5, v33);
        v24 = a1[6];
        sub_18D178410((uint64_t)v33);
        v25 = SHIBYTE(v27);
        a1[6] = v24;
        if (v25 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v15 = *(_OWORD *)__p;
        *(_QWORD *)(v14 + 16) = v27;
        *(_OWORD *)v14 = v15;
        a1[6] = v14 + 24;
      }
      v28 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v29[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v30 < 0)
        operator delete((void *)v29[8]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](&v31);
      return 0;
    }
  }
  return result;
}

void sub_18D175660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_18D178410(v15 - 104);
  if (a14 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1756A0(uint64_t *a1, double *a2, const char *a3, double a4)
{
  uint64_t result;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[10];
  char v30;
  uint64_t v31;
  double v32;
  _QWORD v33[5];

  v32 = 0.0;
  result = sub_18D179964((uint64_t)a1, &v32, a3);
  if ((_DWORD)result)
  {
    if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v32 < a4)
    {
      sub_18D099F88((uint64_t)&v28);
      v10 = strlen(a3);
      v11 = sub_18D076A18(&v28, (uint64_t)a3, v10);
      sub_18D076A18(v11, (uint64_t)" - value (", 10);
      v12 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v12, (uint64_t)") must be greater or equal to ", 30);
      std::ostream::operator<<();
      sub_18D076DE8((uint64_t)v29, __p);
      v13 = a1[7];
      v14 = a1[6];
      if (v14 >= v13)
      {
        v16 = a1[5];
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        v33[4] = a1 + 7;
        if (v20)
          v21 = (char *)sub_18D1782B8((uint64_t)(a1 + 7), v20);
        else
          v21 = 0;
        v22 = &v21[24 * v17];
        v33[0] = v21;
        v33[1] = v22;
        v33[3] = &v21[24 * v20];
        v23 = *(_OWORD *)__p;
        *((_QWORD *)v22 + 2) = v27;
        *(_OWORD *)v22 = v23;
        __p[1] = 0;
        v27 = 0;
        __p[0] = 0;
        v33[2] = v22 + 24;
        sub_18D178244(a1 + 5, v33);
        v24 = a1[6];
        sub_18D178410((uint64_t)v33);
        v25 = SHIBYTE(v27);
        a1[6] = v24;
        if (v25 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v15 = *(_OWORD *)__p;
        *(_QWORD *)(v14 + 16) = v27;
        *(_OWORD *)v14 = v15;
        a1[6] = v14 + 24;
      }
      v28 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v29[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v30 < 0)
        operator delete((void *)v29[8]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](&v31);
      return 0;
    }
    else
    {
      *a2 = v32;
      return 1;
    }
  }
  return result;
}

void sub_18D1758F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_18D178410(v15 - 104);
  if (a14 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18D175930(uint64_t *a1, double *a2, const char *a3, double a4, double a5)
{
  uint64_t result;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  void *__p[2];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;
  double v36;
  _QWORD v37[5];

  v36 = 0.0;
  result = sub_18D179964((uint64_t)a1, &v36, a3);
  if ((_DWORD)result)
  {
    if ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v36 > a4 && v36 < a5)
    {
      *a2 = v36;
      return 1;
    }
    else
    {
      sub_18D099F88((uint64_t)&v32);
      v13 = strlen(a3);
      v14 = sub_18D076A18(&v32, (uint64_t)a3, v13);
      sub_18D076A18(v14, (uint64_t)" - value (", 10);
      v15 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v15, (uint64_t)") must be greater than ", 23);
      v16 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v16, (uint64_t)" and less than ", 15);
      std::ostream::operator<<();
      sub_18D076DE8((uint64_t)v33, __p);
      v17 = a1[7];
      v18 = a1[6];
      if (v18 >= v17)
      {
        v20 = a1[5];
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v22;
        v37[4] = a1 + 7;
        if (v24)
          v25 = (char *)sub_18D1782B8((uint64_t)(a1 + 7), v24);
        else
          v25 = 0;
        v26 = &v25[24 * v21];
        v37[0] = v25;
        v37[1] = v26;
        v37[3] = &v25[24 * v24];
        v27 = *(_OWORD *)__p;
        *((_QWORD *)v26 + 2) = v31;
        *(_OWORD *)v26 = v27;
        __p[1] = 0;
        v31 = 0;
        __p[0] = 0;
        v37[2] = v26 + 24;
        sub_18D178244(a1 + 5, v37);
        v28 = a1[6];
        sub_18D178410((uint64_t)v37);
        v29 = SHIBYTE(v31);
        a1[6] = v28;
        if (v29 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v19 = *(_OWORD *)__p;
        *(_QWORD *)(v18 + 16) = v31;
        *(_OWORD *)v18 = v19;
        a1[6] = v18 + 24;
      }
      v32 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)&v33[-1] + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v33[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v34 < 0)
        operator delete((void *)v33[8]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](&v35);
      return 0;
    }
  }
  return result;
}

void sub_18D175BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_18D178410(v15 - 120);
  if (a14 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18D175BE8(uint64_t a1, std::string *a2, const char *a3, char *__s)
{
  uint64_t v7;
  std::string __p;
  std::string __str;
  std::string v11;

  sub_18D0778AC(&__p, __s);
  memset(&v11, 0, sizeof(v11));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_18D077798(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __str = __p;
  v7 = sub_18D1799CC(a1, (uint64_t)&v11, a3);
  if ((v7 & 1) == 0)
    std::string::operator=(&v11, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v7 & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  if ((v7 & 1) != 0)
LABEL_10:
    std::string::operator=(a2, &v11);
LABEL_11:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_18D175CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

__n128 sub_18D175D0C(std::string *a1, std::string *a2, char *__s)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_18D175D68(uint64_t *a1, double *a2, const char *a3, double a4, double a5)
{
  uint64_t result;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  void *__p[2];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;
  double v36;
  _QWORD v37[5];

  v36 = 0.0;
  result = sub_18D179964((uint64_t)a1, &v36, a3);
  if ((_DWORD)result)
  {
    if ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v36 >= a4 && v36 <= a5)
    {
      *a2 = v36;
      return 1;
    }
    else
    {
      sub_18D099F88((uint64_t)&v32);
      v13 = strlen(a3);
      v14 = sub_18D076A18(&v32, (uint64_t)a3, v13);
      sub_18D076A18(v14, (uint64_t)" - value (", 10);
      v15 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v15, (uint64_t)") must be greater or equal to ", 30);
      v16 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v16, (uint64_t)" and less or equal to ", 22);
      std::ostream::operator<<();
      sub_18D076DE8((uint64_t)v33, __p);
      v17 = a1[7];
      v18 = a1[6];
      if (v18 >= v17)
      {
        v20 = a1[5];
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v22;
        v37[4] = a1 + 7;
        if (v24)
          v25 = (char *)sub_18D1782B8((uint64_t)(a1 + 7), v24);
        else
          v25 = 0;
        v26 = &v25[24 * v21];
        v37[0] = v25;
        v37[1] = v26;
        v37[3] = &v25[24 * v24];
        v27 = *(_OWORD *)__p;
        *((_QWORD *)v26 + 2) = v31;
        *(_OWORD *)v26 = v27;
        __p[1] = 0;
        v31 = 0;
        __p[0] = 0;
        v37[2] = v26 + 24;
        sub_18D178244(a1 + 5, v37);
        v28 = a1[6];
        sub_18D178410((uint64_t)v37);
        v29 = SHIBYTE(v31);
        a1[6] = v28;
        if (v29 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v19 = *(_OWORD *)__p;
        *(_QWORD *)(v18 + 16) = v31;
        *(_OWORD *)v18 = v19;
        a1[6] = v18 + 24;
      }
      v32 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)&v33[-1] + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v33[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v34 < 0)
        operator delete((void *)v33[8]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](&v35);
      return 0;
    }
  }
  return result;
}

void sub_18D175FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_18D178410(v15 - 120);
  if (a14 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18D176020(uint64_t a1, std::string *a2, const char *a3)
{
  uint64_t v6;
  std::string __str;

  sub_18D0778AC(&__str, "");
  v6 = sub_18D1799CC(a1, (uint64_t)a2, a3);
  if ((v6 & 1) == 0)
    std::string::operator=(a2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

void sub_18D17609C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1760B8(uint64_t *a1, unsigned int *a2, const char *a3, unsigned int a4)
{
  size_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned int v12;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::bad_cast_vtbl *v25;
  std::bad_cast_vtbl *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  std::bad_cast v30;
  int *v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  void *__p[2];
  const char *(__cdecl *v36)(const std::bad_cast *__hidden);
  int v37;
  char __s[8];
  _QWORD v39[10];
  char v40;
  _QWORD v41[115];

  v41[114] = *MEMORY[0x1E0C80C00];
  if (sub_18D178524((uint64_t)a1, __s, a3))
  {
    v37 = 0;
    v8 = strlen(__s);
    if (!v8)
      goto LABEL_30;
    v9 = __s[0];
    v10 = __s;
    if (__s[0] == 45 || __s[0] == 43)
      v10 = &__s[1];
    LOBYTE(v30.__vftable) = 0;
    HIDWORD(v30.__vftable) = 1;
    v31 = &v37;
    v32 = v10;
    v33 = &__s[v8];
    v11 = sub_18D179D10((uint64_t)&v30);
    if (v9 == 45)
    {
      v12 = -v37;
      v37 = -v37;
      if ((v11 & 1) == 0)
      {
LABEL_30:
        std::bad_cast::bad_cast(&v30);
        v30.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1460;
        v31 = (int *)MEMORY[0x1E0DE4E50];
        v32 = (char *)MEMORY[0x1E0DE4EF8];
        sub_18D1794C8((uint64_t)&v30);
      }
    }
    else
    {
      if (!v11)
        goto LABEL_30;
      v12 = v37;
    }
    if (v12 > a4)
    {
      *a2 = v12;
      return 1;
    }
    sub_18D099F88((uint64_t)__s);
    v14 = strlen(a3);
    v15 = sub_18D076A18(__s, (uint64_t)a3, v14);
    sub_18D076A18(v15, (uint64_t)" - value (", 10);
    v16 = (_QWORD *)std::ostream::operator<<();
    sub_18D076A18(v16, (uint64_t)") must be greater than ", 23);
    std::ostream::operator<<();
    sub_18D076DE8((uint64_t)v39, __p);
    v17 = a1[7];
    v18 = a1[6];
    if (v18 >= v17)
    {
      v20 = a1[5];
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_18D07AFE4();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v34 = a1 + 7;
      if (v24)
        v25 = (std::bad_cast_vtbl *)sub_18D1782B8((uint64_t)(a1 + 7), v24);
      else
        v25 = 0;
      v26 = v25 + v21;
      v30.__vftable = v25;
      v31 = (int *)v26;
      v33 = (char *)&v25[v24];
      v27 = *(_OWORD *)__p;
      v26->what = v36;
      *(_OWORD *)&v26->~bad_cast = v27;
      __p[1] = 0;
      v36 = 0;
      __p[0] = 0;
      v32 = (char *)&v26[1];
      sub_18D178244(a1 + 5, &v30);
      v28 = a1[6];
      sub_18D178410((uint64_t)&v30);
      v29 = SHIBYTE(v36);
      a1[6] = v28;
      if (v29 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v19 = *(_OWORD *)__p;
      *(_QWORD *)(v18 + 16) = v36;
      *(_OWORD *)v18 = v19;
      a1[6] = v18 + 24;
    }
    *(_QWORD *)__s = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)&__s[*(_QWORD *)(*(_QWORD *)__s - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v39[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v40 < 0)
      operator delete((void *)v39[8]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D78B550](v41);
  }
  return 0;
}

void sub_18D1763C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21)
{
  sub_18D178410((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_18D17646C(uint64_t *a1, float *a2, const char *a3)
{
  int v6;
  uint64_t result;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  void *__p[2];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;
  float v30;
  _QWORD v31[5];

  v30 = 0.0;
  v6 = sub_18D17A044((uint64_t)a1, &v30, a3);
  result = 0;
  if (v6)
  {
    if ((LODWORD(v30) & 0x7FFFFFFFu) > 0x7F7FFFFF || v30 < 0.0)
    {
      sub_18D099F88((uint64_t)&v26);
      v8 = strlen(a3);
      v9 = sub_18D076A18(&v26, (uint64_t)a3, v8);
      sub_18D076A18(v9, (uint64_t)" - value (", 10);
      v10 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v10, (uint64_t)") must be greater or equal to ", 30);
      std::ostream::operator<<();
      sub_18D076DE8((uint64_t)v27, __p);
      v11 = a1[7];
      v12 = a1[6];
      if (v12 >= v11)
      {
        v14 = a1[5];
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v31[4] = a1 + 7;
        if (v18)
          v19 = (char *)sub_18D1782B8((uint64_t)(a1 + 7), v18);
        else
          v19 = 0;
        v20 = &v19[24 * v15];
        v31[0] = v19;
        v31[1] = v20;
        v31[3] = &v19[24 * v18];
        v21 = *(_OWORD *)__p;
        *((_QWORD *)v20 + 2) = v25;
        *(_OWORD *)v20 = v21;
        __p[1] = 0;
        v25 = 0;
        __p[0] = 0;
        v31[2] = v20 + 24;
        sub_18D178244(a1 + 5, v31);
        v22 = a1[6];
        sub_18D178410((uint64_t)v31);
        v23 = SHIBYTE(v25);
        a1[6] = v22;
        if (v23 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v13 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v25;
        *(_OWORD *)v12 = v13;
        a1[6] = v12 + 24;
      }
      v26 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v27[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v28 < 0)
        operator delete((void *)v27[8]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](&v29);
      return 0;
    }
    else
    {
      *a2 = v30;
      return 1;
    }
  }
  return result;
}

void sub_18D1766C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_18D178410(v15 - 104);
  if (a14 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18D176704(uint64_t *a1, _DWORD *a2, const char *a3)
{
  int v6;
  uint64_t result;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  void *__p[2];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;
  int v30;
  _QWORD v31[5];

  v30 = 0;
  v6 = sub_18D17A480((uint64_t)a1, &v30, a3);
  result = 0;
  if (v6)
  {
    if (v30 < 0)
    {
      sub_18D099F88((uint64_t)&v26);
      v8 = strlen(a3);
      v9 = sub_18D076A18(&v26, (uint64_t)a3, v8);
      sub_18D076A18(v9, (uint64_t)" - value (", 10);
      v10 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v10, (uint64_t)") must be greater or equal to ", 30);
      std::ostream::operator<<();
      sub_18D076DE8((uint64_t)v27, __p);
      v11 = a1[7];
      v12 = a1[6];
      if (v12 >= v11)
      {
        v14 = a1[5];
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v31[4] = a1 + 7;
        if (v18)
          v19 = (char *)sub_18D1782B8((uint64_t)(a1 + 7), v18);
        else
          v19 = 0;
        v20 = &v19[24 * v15];
        v31[0] = v19;
        v31[1] = v20;
        v31[3] = &v19[24 * v18];
        v21 = *(_OWORD *)__p;
        *((_QWORD *)v20 + 2) = v25;
        *(_OWORD *)v20 = v21;
        __p[1] = 0;
        v25 = 0;
        __p[0] = 0;
        v31[2] = v20 + 24;
        sub_18D178244(a1 + 5, v31);
        v22 = a1[6];
        sub_18D178410((uint64_t)v31);
        v23 = SHIBYTE(v25);
        a1[6] = v22;
        if (v23 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v13 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v25;
        *(_OWORD *)v12 = v13;
        a1[6] = v12 + 24;
      }
      v26 = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v27[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v28 < 0)
        operator delete((void *)v27[8]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D78B550](&v29);
      return 0;
    }
    else
    {
      *a2 = v30;
      return 1;
    }
  }
  return result;
}

void sub_18D17693C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_18D178410(v15 - 88);
  if (a14 < 0)
    operator delete(__p);
  sub_18D09A074((uint64_t)&a15);
  _Unwind_Resume(a1);
}

raven::RavenParameters *raven::RavenParameters::RavenParameters(raven::RavenParameters *this, const raven::RavenPlatformInfo *a2)
{
  char *v4;
  cnprint::CNPrinter *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int GnssChipset;
  float v21;
  cnprint::CNPrinter *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  double v37;
  float v38;
  int v39;
  double v40;
  BOOL v41;
  int v42;
  double v43;
  float v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char v49;
  _OWORD v50[3];
  unsigned __int8 v51;

  v4 = (char *)this + 547;
  *(_QWORD *)this = &unk_1E25C4B70;
  sub_18D0778AC((_QWORD *)this + 1, "");
  *(_QWORD *)this = &off_1E25C2540;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_BYTE *)this + 33) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = xmmword_18D318690;
  *(_OWORD *)((char *)this + 88) = xmmword_18D3186A0;
  *(_OWORD *)((char *)this + 104) = xmmword_18D3186B0;
  *(int64x2_t *)((char *)this + 120) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_OWORD *)((char *)this + 136) = xmmword_18D3186B0;
  *(_OWORD *)((char *)this + 152) = xmmword_18D3186A0;
  *(_OWORD *)((char *)this + 168) = xmmword_18D3186B0;
  *(int64x2_t *)((char *)this + 184) = vdupq_n_s64(0x3F9B573EAB367A10uLL);
  *(_OWORD *)((char *)this + 200) = xmmword_18D3186B0;
  *(_OWORD *)((char *)this + 216) = xmmword_18D3186A0;
  *(_OWORD *)((char *)this + 232) = xmmword_18D3186B0;
  *(_OWORD *)((char *)this + 248) = xmmword_18D3186C0;
  *((_QWORD *)this + 33) = 0x3FF0000000000000;
  __asm { FMOV            V2.2D, #1.0 }
  *((_OWORD *)this + 17) = _Q2;
  *((_OWORD *)this + 18) = xmmword_18D3186D0;
  *((_OWORD *)this + 19) = xmmword_18D3186E0;
  *((_OWORD *)this + 20) = xmmword_18D3186F0;
  *((_OWORD *)this + 21) = xmmword_18D318700;
  *((_OWORD *)this + 22) = xmmword_18D318710;
  *((_OWORD *)this + 23) = xmmword_18D318720;
  *((_OWORD *)this + 24) = xmmword_18D318730;
  *((_OWORD *)this + 25) = xmmword_18D318740;
  *((_QWORD *)this + 52) = 0x3F847AE147AE147BLL;
  *((_DWORD *)this + 106) = 2;
  *((_OWORD *)this + 27) = xmmword_18D318750;
  *((_OWORD *)this + 28) = xmmword_18D318760;
  *((_OWORD *)this + 29) = xmmword_18D318770;
  *((_OWORD *)this + 30) = xmmword_18D318780;
  *((_OWORD *)this + 31) = xmmword_18D318790;
  *((_OWORD *)this + 32) = xmmword_18D3187A0;
  *((_OWORD *)this + 33) = xmmword_18D3187B0;
  *((_WORD *)this + 272) = 257;
  *((_BYTE *)this + 546) = 1;
  *(_DWORD *)v4 = 0;
  *((_BYTE *)this + 551) = 1;
  *((_DWORD *)this + 138) = 0;
  *((_OWORD *)this + 35) = xmmword_18D3187C0;
  *((_DWORD *)this + 144) = 0x1000000;
  *((_BYTE *)this + 580) = 0;
  *((_DWORD *)this + 146) = 0;
  *((_WORD *)this + 294) = 256;
  *((_BYTE *)this + 590) = 1;
  *((_DWORD *)this + 148) = 16843009;
  *((_WORD *)this + 298) = 1;
  *(_QWORD *)((char *)this + 598) = 0x101010101010101;
  *(_QWORD *)((char *)this + 603) = 0x101010101010101;
  *((_DWORD *)this + 153) = 1096810496;
  *((_QWORD *)this + 77) = 0x3FE0000000000000;
  *((_OWORD *)this + 39) = xmmword_18D3187D0;
  *((_WORD *)this + 320) = 0;
  *((_QWORD *)this + 81) = 0x3F847AE147AE147BLL;
  *((_OWORD *)this + 41) = xmmword_18D3187E0;
  *((_OWORD *)this + 42) = xmmword_18D3187F0;
  *((_OWORD *)this + 43) = xmmword_18D318800;
  *((_OWORD *)this + 44) = xmmword_18D318810;
  *((_OWORD *)this + 45) = xmmword_18D318820;
  *((_OWORD *)this + 46) = xmmword_18D318830;
  *((_OWORD *)this + 47) = xmmword_18D318840;
  *((_OWORD *)this + 48) = xmmword_18D318850;
  *((_OWORD *)this + 49) = xmmword_18D318860;
  *((_OWORD *)this + 50) = xmmword_18D318870;
  *((_QWORD *)this + 102) = 0x3DB5FD7FE1796495;
  *((_DWORD *)this + 206) = 2;
  *((_QWORD *)this + 104) = 0x3FE0000000000000;
  *((_WORD *)this + 420) = 256;
  *((_OWORD *)this + 53) = xmmword_18D318880;
  *((_OWORD *)this + 54) = xmmword_18D318890;
  *((_OWORD *)this + 55) = xmmword_18D3188A0;
  *((_OWORD *)this + 56) = xmmword_18D3188B0;
  *((_OWORD *)this + 57) = xmmword_18D3188C0;
  *((_OWORD *)this + 58) = xmmword_18D3188D0;
  *((_OWORD *)this + 59) = xmmword_18D3188E0;
  *((_OWORD *)this + 60) = xmmword_18D3188F0;
  *((_QWORD *)this + 122) = 0x3FF0000000000000;
  *((_DWORD *)this + 246) = 350;
  *((_OWORD *)this + 62) = xmmword_18D318900;
  *((_OWORD *)this + 63) = xmmword_18D318910;
  *((_QWORD *)this + 128) = 0x3FF0000000000000;
  *((_DWORD *)this + 258) = 3;
  *((_OWORD *)this + 65) = xmmword_18D318920;
  *((_OWORD *)this + 66) = xmmword_18D318930;
  *((_OWORD *)this + 67) = xmmword_18D318940;
  *((_OWORD *)this + 68) = _Q2;
  *((_OWORD *)this + 69) = xmmword_18D318950;
  *((_OWORD *)this + 70) = xmmword_18D318960;
  *((_OWORD *)this + 71) = xmmword_18D318970;
  *((_OWORD *)this + 72) = xmmword_18D318980;
  *((_OWORD *)this + 73) = xmmword_18D318990;
  *((_QWORD *)this + 148) = 0x4018000000000000;
  *((_DWORD *)this + 298) = 3;
  *((_OWORD *)this + 75) = xmmword_18D3189A0;
  *((_OWORD *)this + 76) = xmmword_18D3189B0;
  *((_OWORD *)this + 77) = xmmword_18D3189C0;
  *((_OWORD *)this + 78) = xmmword_18D3189D0;
  *((_OWORD *)this + 79) = xmmword_18D3189A0;
  *((_DWORD *)this + 320) = 6;
  *((_QWORD *)this + 161) = 0x4000000000000000;
  *((_DWORD *)this + 324) = 6;
  *((_QWORD *)this + 163) = 0x4000000000000000;
  *((_DWORD *)this + 328) = 2;
  *((_QWORD *)this + 165) = 0x4000000000000000;
  *((_OWORD *)this + 83) = xmmword_18D3189E0;
  *((_OWORD *)this + 84) = xmmword_18D3189F0;
  *((_OWORD *)this + 85) = xmmword_18D318A00;
  *((_OWORD *)this + 86) = xmmword_18D318A10;
  __asm { FMOV            V2.2D, #6.0 }
  *((_OWORD *)this + 87) = _Q2;
  *((_OWORD *)this + 88) = xmmword_18D318A20;
  __asm { FMOV            V2.2D, #3.0 }
  *((_OWORD *)this + 89) = _Q2;
  *((_OWORD *)this + 90) = _Q2;
  *((_OWORD *)this + 91) = xmmword_18D318A30;
  *((_DWORD *)this + 368) = 2;
  *((_QWORD *)this + 185) = 0x4024000000000000;
  *((int64x2_t *)this + 93) = vdupq_n_s64(0x3FE0CCCCCCCCCCCDuLL);
  *((_OWORD *)this + 94) = xmmword_18D318A40;
  *((_OWORD *)this + 95) = xmmword_18D318A50;
  *((_OWORD *)this + 96) = xmmword_18D318A60;
  *((int64x2_t *)this + 97) = vdupq_n_s64(0x4066800000000000uLL);
  *((_OWORD *)this + 98) = xmmword_18D318A70;
  *((_OWORD *)this + 99) = xmmword_18D318A80;
  *((_OWORD *)this + 100) = xmmword_18D318A90;
  *((_OWORD *)this + 101) = xmmword_18D318AA0;
  *((_OWORD *)this + 102) = xmmword_18D318AB0;
  *((_QWORD *)this + 206) = 0;
  *(_OWORD *)((char *)this + 1656) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 1672) = unk_18D318378;
  *(_OWORD *)((char *)this + 1688) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 1704) = unk_18D318378;
  *(_OWORD *)((char *)this + 1720) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 1736) = unk_18D318378;
  *(_OWORD *)((char *)this + 1752) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 1768) = unk_18D318378;
  *(_OWORD *)((char *)this + 1784) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 1800) = unk_18D318378;
  *(_OWORD *)((char *)this + 1816) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 1832) = unk_18D318378;
  *(_OWORD *)((char *)this + 1848) = xmmword_18D318328;
  *(_OWORD *)((char *)this + 1864) = unk_18D318338;
  *(_OWORD *)((char *)this + 1880) = xmmword_18D318308;
  *(_OWORD *)((char *)this + 1896) = unk_18D318318;
  *(_OWORD *)((char *)this + 1912) = xmmword_18D318328;
  *(_OWORD *)((char *)this + 1928) = unk_18D318338;
  *(_OWORD *)((char *)this + 1944) = xmmword_18D318348;
  *(_OWORD *)((char *)this + 1960) = unk_18D318358;
  *(_OWORD *)((char *)this + 1976) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 1992) = unk_18D318378;
  *(_OWORD *)((char *)this + 2008) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 2024) = unk_18D318378;
  *(_OWORD *)((char *)this + 2040) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 2056) = unk_18D318378;
  *(_OWORD *)((char *)this + 2072) = xmmword_18D318368;
  *(_OWORD *)((char *)this + 2088) = unk_18D318378;
  *((_BYTE *)this + 2104) = 0;
  *((_OWORD *)this + 132) = xmmword_18D318AC0;
  *((_OWORD *)this + 133) = xmmword_18D318AD0;
  *((_OWORD *)this + 134) = xmmword_18D318A30;
  *((_OWORD *)this + 135) = xmmword_18D318AE0;
  *((_OWORD *)this + 136) = xmmword_18D318AF0;
  *((_WORD *)this + 1096) = 0;
  *((_QWORD *)this + 275) = 0x4034000000000000;
  *((_DWORD *)this + 552) = 0;
  *((_QWORD *)this + 277) = 0x404E000000000000;
  *((_OWORD *)this + 139) = xmmword_18D318B00;
  *((_OWORD *)this + 140) = xmmword_18D318B10;
  *((_OWORD *)this + 141) = xmmword_18D318B20;
  *((_QWORD *)this + 284) = 0x3FE3333333333333;
  *((_DWORD *)this + 570) = 1;
  *((int64x2_t *)this + 143) = vdupq_n_s64(0x3FE3333333333333uLL);
  *((_WORD *)this + 1152) = 0;
  *((_QWORD *)this + 293) = 0;
  *(_OWORD *)((char *)this + 2328) = 0u;
  *(_OWORD *)((char *)this + 2312) = 0u;
  *((_QWORD *)this + 294) = 0x3FD51EB851EB851FLL;
  *(_OWORD *)((char *)this + 2360) = xmmword_18D318388;
  *(_OWORD *)((char *)this + 2376) = unk_18D318398;
  *((_WORD *)this + 1196) = 257;
  *((_BYTE *)this + 2394) = 1;
  *((_OWORD *)this + 150) = xmmword_18D3183A8;
  *((_OWORD *)this + 151) = unk_18D3183B8;
  *((_OWORD *)this + 152) = xmmword_18D318B30;
  *((_OWORD *)this + 153) = xmmword_18D318B40;
  *((_OWORD *)this + 154) = xmmword_18D318B50;
  __asm { FMOV            V1.2D, #0.5 }
  *((_OWORD *)this + 155) = _Q1;
  *((int64x2_t *)this + 156) = vdupq_n_s64(0x3FEE666666666666uLL);
  *((_OWORD *)this + 157) = xmmword_18D318B60;
  *((_OWORD *)this + 158) = xmmword_18D318B70;
  *((_BYTE *)this + 2544) = 1;
  *((_QWORD *)this + 319) = 0x40BC200000000000;
  *((_WORD *)this + 1280) = 1;
  *((_BYTE *)this + 2562) = 0;
  *((_QWORD *)this + 321) = 0x3FF0000000000000;
  *((_OWORD *)this + 161) = xmmword_18D3184B8;
  *((_OWORD *)this + 165) = xmmword_18D3184F8;
  *((_OWORD *)this + 166) = xmmword_18D3183C8;
  *((_OWORD *)this + 170) = xmmword_18D318408;
  *((_OWORD *)this + 169) = unk_18D3183F8;
  *((_OWORD *)this + 164) = unk_18D3184E8;
  *((_OWORD *)this + 163) = xmmword_18D3184D8;
  *((_OWORD *)this + 162) = unk_18D3184C8;
  *((_OWORD *)this + 168) = xmmword_18D3183E8;
  *((_OWORD *)this + 167) = unk_18D3183D8;
  *((_BYTE *)this + 2736) = 0;
  *(_OWORD *)((char *)this + 2808) = xmmword_18D318458;
  *(_OWORD *)((char *)this + 2776) = xmmword_18D318438;
  *(_OWORD *)((char *)this + 2792) = unk_18D318448;
  *(_OWORD *)((char *)this + 2744) = xmmword_18D318418;
  *(_OWORD *)((char *)this + 2760) = unk_18D318428;
  *(_OWORD *)((char *)this + 2888) = xmmword_18D3184A8;
  *(_OWORD *)((char *)this + 2856) = xmmword_18D318488;
  *(_OWORD *)((char *)this + 2872) = unk_18D318498;
  *(_OWORD *)((char *)this + 2824) = xmmword_18D318468;
  *(_OWORD *)((char *)this + 2840) = unk_18D318478;
  *(_OWORD *)((char *)this + 2952) = unk_18D3184E8;
  *(_OWORD *)((char *)this + 2968) = xmmword_18D3184F8;
  *(_OWORD *)((char *)this + 2920) = unk_18D3184C8;
  *(_OWORD *)((char *)this + 2936) = xmmword_18D3184D8;
  *(_OWORD *)((char *)this + 2904) = xmmword_18D3184B8;
  *(_OWORD *)((char *)this + 3032) = unk_18D318538;
  *(_OWORD *)((char *)this + 3048) = xmmword_18D318548;
  *(_OWORD *)((char *)this + 3000) = unk_18D318518;
  *(_OWORD *)((char *)this + 3016) = xmmword_18D318528;
  *(_OWORD *)((char *)this + 2984) = xmmword_18D318508;
  *((_QWORD *)this + 383) = 0x3FEE666666666666;
  *((_OWORD *)this + 192) = xmmword_18D318B80;
  *((_OWORD *)this + 193) = xmmword_18D318B90;
  *((_OWORD *)this + 194) = xmmword_18D318BA0;
  *((_OWORD *)this + 195) = xmmword_18D318BB0;
  *((_OWORD *)this + 196) = xmmword_18D318BC0;
  *((_OWORD *)this + 197) = xmmword_18D318BD0;
  *((_OWORD *)this + 198) = xmmword_18D318BE0;
  *((_OWORD *)this + 199) = xmmword_18D318BF0;
  *((_OWORD *)this + 200) = xmmword_18D318C00;
  *((_OWORD *)this + 201) = xmmword_18D318C10;
  *((_OWORD *)this + 202) = xmmword_18D318790;
  *((_OWORD *)this + 203) = xmmword_18D318C20;
  *((_OWORD *)this + 204) = xmmword_18D318C30;
  *((_OWORD *)this + 205) = xmmword_18D318C40;
  *((_OWORD *)this + 206) = xmmword_18D318C50;
  __asm { FMOV            V0.2D, #5.0 }
  *((_OWORD *)this + 207) = _Q0;
  *((_OWORD *)this + 208) = xmmword_18D318C60;
  *((_QWORD *)this + 418) = 0x3FE999999999999ALL;
  *((_BYTE *)this + 3352) = 1;
  *((_OWORD *)this + 210) = xmmword_18D318C70;
  *((_QWORD *)this + 422) = 0x3FE0000000000000;
  *((_QWORD *)this + 423) = 0x400000005;
  *((_OWORD *)this + 212) = xmmword_18D318C80;
  *((_OWORD *)this + 213) = xmmword_18D318C90;
  *((_OWORD *)this + 214) = xmmword_18D318CA0;
  *((int64x2_t *)this + 215) = vdupq_n_s64(0x4014880F19EA2B99uLL);
  *((_OWORD *)this + 216) = xmmword_18D318CB0;
  *((_OWORD *)this + 217) = xmmword_18D318CC0;
  *((_QWORD *)this + 436) = 0x4022000000000000;
  *((_BYTE *)this + 3496) = 0;
  *((_OWORD *)this + 219) = xmmword_18D318CD0;
  *((_WORD *)this + 1760) = 257;
  *((_QWORD *)this + 441) = 0x4072C00000000000;
  *((_QWORD *)this + 442) = 0x412E848000000000;
  *((_QWORD *)this + 443) = 2;
  *((_BYTE *)this + 3552) = 1;
  *((_QWORD *)this + 445) = 0x4014000000000000;
  *((_QWORD *)this + 446) = 0x3F847AE147AE147BLL;
  *((_DWORD *)this + 894) = 5;
  *((_BYTE *)this + 3580) = 1;
  *((_OWORD *)this + 224) = xmmword_18D318CE0;
  *((_QWORD *)this + 450) = 0x4014000000000000;
  *((_QWORD *)this + 451) = 100;
  *((_OWORD *)this + 226) = xmmword_18D318CF0;
  *((_QWORD *)this + 454) = 0x3FD3333333333333;
  *((_QWORD *)this + 455) = 3;
  *((_BYTE *)this + 3648) = 0;
  *((_DWORD *)this + 913) = 0;
  *((_BYTE *)this + 3656) = 0;
  sub_18D0778AC((_QWORD *)this + 458, "");
  *((_DWORD *)this + 922) = 10;
  *((_WORD *)this + 1846) = 0;
  sub_18D0778AC((_QWORD *)this + 462, "raven_output.bin");
  *((_WORD *)this + 1860) = 256;
  *((_BYTE *)this + 3722) = 0;
  sub_18D0778AC((_QWORD *)this + 466, "raven_debug.txt");
  *((_WORD *)this + 1876) = 0;
  *((_BYTE *)this + 3754) = 0;
  v14 = (cnprint::CNPrinter *)sub_18D0778AC((_QWORD *)this + 470, "raven_msr.txt");
  *((_BYTE *)this + 3788) = 1;
  *((_DWORD *)this + 946) = 16843009;
  *(_WORD *)((char *)this + 3789) = 0;
  *(_QWORD *)(v4 + 3244) = 0x101010101010101;
  *((_BYTE *)this + 3799) = 0;
  *((_DWORD *)this + 950) = 16843009;
  *((_BYTE *)this + 3804) = 0;
  *((_DWORD *)this + 952) = 16843009;
  *(_DWORD *)((char *)this + 3805) = 16843009;
  *((_BYTE *)this + 3812) = 0;
  *((_BYTE *)this + 3817) = 1;
  *(_DWORD *)((char *)this + 3813) = 16843009;
  *((_WORD *)this + 1909) = 256;
  *((_BYTE *)this + 3820) = 1;
  *((_DWORD *)this + 956) = 0;
  *((_BYTE *)this + 3828) = 0;
  if (cnprint::CNPrinter::GetLogLevel(v14) <= 1)
  {
    LOWORD(v50[0]) = 12;
    v51 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v51, "Hardware platform %hu received", v15, v16, v17, v18, v19, *(_WORD *)a2);
  }
  if (!*(_WORD *)a2)
  {
    LOWORD(v50[0]) = 12;
    v51 = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v51, "Error: Unsupported hardware type %hu detected", v15, v16, v17, v18, v19, 0);
    v29 = 0;
    goto LABEL_42;
  }
  *((_BYTE *)this + 641) = *((_DWORD *)a2 + 15) == 2;
  *((_BYTE *)this + 592) = 1;
  GnssChipset = CNPlatformInfo::GetGnssChipset(a2);
  v21 = 10.0;
  if ((GnssChipset - 3) >= 6)
  {
    v21 = 9.0;
    if ((GnssChipset - 9) >= 3)
    {
      v21 = 14.0;
      if (GnssChipset == 12)
        v21 = 10.0;
    }
  }
  *((float *)this + 153) = v21;
  *((_BYTE *)this + 544) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 0xFFFFFFFA;
  *((_BYTE *)this + 546) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 0xFFFFFFFA;
  *((_BYTE *)this + 545) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 0xFFFFFFFE;
  *((_BYTE *)this + 547) = CNPlatformInfo::GetGnssChipset(a2) - 1 < 2;
  *((_BYTE *)this + 548) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  v22 = (cnprint::CNPrinter *)CNPlatformInfo::GetGnssChipset(a2);
  if (((_DWORD)v22 - 1) <= 1)
  {
    v28 = 1;
    goto LABEL_21;
  }
  if (((_DWORD)v22 - 3) <= 5)
  {
    v28 = 2;
    goto LABEL_21;
  }
  if (((_DWORD)v22 - 9) <= 2)
  {
    if ((_DWORD)v22 == 10 || (v22 & 0xFFFFFFFE) != 0xA)
      goto LABEL_20;
    v30 = *((_DWORD *)a2 + 14);
    if (v30 == 3)
    {
      v28 = 5;
      goto LABEL_21;
    }
    if (v30 == 1)
      v28 = 4;
    else
LABEL_20:
      v28 = 3;
LABEL_21:
    *((_DWORD *)this + 138) = v28;
    goto LABEL_22;
  }
  *((_DWORD *)this + 138) = 0;
  LOWORD(v50[0]) = 12;
  v51 = 3;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v51, "WARNING: Invalid HW type", v23, v24, v25, v26, v27, v49);
LABEL_22:
  if (cnprint::CNPrinter::GetLogLevel(v22) <= 1)
  {
    LOWORD(v50[0]) = 12;
    v51 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v51, "GNSS Measurement Uncertainty Model Type: %d", v31, v32, v33, v34, v35, *((_DWORD *)this + 138));
  }
  *((_BYTE *)this + 840) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  v36 = CNPlatformInfo::GetGnssChipset(a2);
  v37 = 4.0;
  if ((v36 - 3) < 6)
    v37 = 2.5;
  *((double *)this + 196) = v37;
  *((_BYTE *)this + 550) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  *((_BYTE *)this + 576) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  *((_BYTE *)this + 577) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 3;
  *((_BYTE *)this + 578) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 3;
  if (CNPlatformInfo::GetGnssChipset(a2) - 3 >= 6)
    v38 = 0.0;
  else
    v38 = 17.0;
  *((float *)this + 146) = v38;
  *((_BYTE *)this + 588) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  v39 = CNPlatformInfo::GetGnssChipset(a2);
  v40 = 1.0;
  if ((v39 - 3) < 6)
    v40 = 0.5;
  *((double *)this + 205) = v40;
  *((_BYTE *)this + 3496) = 0;
  *((_BYTE *)this + 2736) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  v41 = CNPlatformInfo::GetGnssChipset(a2) - 4 < 8;
  *((_BYTE *)this + 2192) = v41;
  *((_BYTE *)this + 2193) = v41;
  v42 = CNPlatformInfo::GetGnssChipset(a2);
  v43 = 0.6;
  if ((v42 - 4) < 8)
    v43 = 25.0;
  *((double *)this + 287) = v43;
  if (CNPlatformInfo::GetGnssChipset(a2) - 3 >= 6)
    v44 = 0.0;
  else
    v44 = 17.0;
  *((float *)this + 552) = v44;
  *((_BYTE *)this + 640) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 3;
  *((_QWORD *)this + 412) = qword_18D318D00[CNPlatformInfo::GetGnssChipset(a2) - 4 < 5];
  LOWORD(v50[0]) = 0;
  *(_OWORD *)((char *)v50 + 8) = 0u;
  memset((char *)&v50[1] + 8, 0, 24);
  raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::Initialize((raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor *)v50, a2);
  *((_OWORD *)this + 144) = v50[0];
  sub_18D07CBBC((uint64_t)this + 2320, &v50[1]);
  *((_OWORD *)this + 146) = v50[2];
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v50[1] + 1);
  if (*((_QWORD *)&v50[1] + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v50[1] + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  *((_BYTE *)this + 589) = CNPlatformInfo::GetGnssChipset(a2) - 12 < 0xFFFFFFFD;
  *((_BYTE *)this + 590) = CNPlatformInfo::GetGnssChipset(a2) - 12 < 0xFFFFFFFD;
  v29 = 1;
LABEL_42:
  *((_BYTE *)this + 33) = v29;
  return this;
}

void sub_18D17786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 3783) < 0)
    operator delete(*v9);
  if (*(char *)(v4 + 3751) < 0)
    operator delete(*v8);
  if (*(char *)(v4 + 3719) < 0)
    operator delete(*v6);
  if (*(char *)(v4 + 3687) < 0)
    operator delete(*v7);
  sub_18D07C868(v4 + 2320);
  sub_18D178498((void ***)va);
  *(_QWORD *)v4 = v5 + 16;
  if (*(char *)(v4 + 31) < 0)
    operator delete(*a4);
  _Unwind_Resume(a1);
}

void raven::RavenParameters::GetDebugMsrLoggingFilenameForEstimator(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  std::string *v5;
  __int128 v6;
  void **v7;
  void **v8;
  const void **v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int v13;
  void **v14;
  std::string::size_type v15;
  std::string v16;
  void *__p[2];
  int64_t v18;

  sub_18D0778AC(&v16, off_1E25CD1E8[*a2]);
  v5 = std::string::insert(&v16, 0, ".", 1uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v18 >= 0)
    v7 = (void **)((char *)__p + HIBYTE(v18));
  else
    v7 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (v18 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  while (v8 != v7)
  {
    *(_BYTE *)v8 = __tolower(*(char *)v8);
    v8 = (void **)((char *)v8 + 1);
  }
  v9 = (const void **)(a1 + 3760);
  if (*(char *)(a1 + 3783) < 0)
  {
    v10 = *(_QWORD *)(a1 + 3760);
    v11 = *(_QWORD *)(a1 + 3768);
  }
  else
  {
    v10 = a1 + 3760;
    v11 = *(unsigned __int8 *)(a1 + 3783);
  }
  v12 = v10 - 1;
  do
  {
    if (!v11)
      goto LABEL_20;
    v13 = *(unsigned __int8 *)(v12 + v11--);
  }
  while (v13 != 46);
  if (v11 == -1)
  {
LABEL_20:
    sub_18D099A1C(v9, (const void **)__p, (uint64_t)a3);
    goto LABEL_29;
  }
  if ((*(_BYTE *)(a1 + 3783) & 0x80) != 0)
  {
    sub_18D077798(a3, *(void **)(a1 + 3760), *(_QWORD *)(a1 + 3768));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 3776);
  }
  if (v18 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v18 >= 0)
    v15 = HIBYTE(v18);
  else
    v15 = (std::string::size_type)__p[1];
  std::string::insert(a3, v11, (const std::string::value_type *)v14, v15);
LABEL_29:
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_18D177AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenParameters::IsInitialized(raven::RavenParameters *this)
{
  return *((unsigned __int8 *)this + 33);
}

uint64_t raven::RavenParameters::LoadConfigurationFile(raven::RavenParameters *this, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string::value_type *v11;
  std::string::value_type *v12;
  std::string::value_type v13;
  uint64_t v14;
  std::string *v15;
  char v17;
  std::string v18;
  unsigned __int8 v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[20];

  v22[19] = *MEMORY[0x1E0C80C00];
  sub_18D07768C(v20);
  v8 = (char *)v20 + *(_QWORD *)(v20[0] - 24);
  if ((v8[32] & 5) != 0)
  {
    LOWORD(v18.__r_.__value_.__l.__data_) = 12;
    v19 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v19, "Error: Could not open configuration file", v3, v4, v5, v6, v7, v17);
    v9 = 0;
  }
  else
  {
    v10 = (_QWORD *)*((_QWORD *)v8 + 5);
    memset(&v18, 0, sizeof(v18));
    if (v10)
    {
      while (1)
      {
        v11 = (std::string::value_type *)v10[3];
        v12 = (std::string::value_type *)v10[4];
        if (v11 == v12)
        {
          if ((*(unsigned int (**)(_QWORD *))(*v10 + 72))(v10) == -1)
          {
            if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v15 = &v18;
            else
              v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
            goto LABEL_17;
          }
          v11 = (std::string::value_type *)v10[3];
          v12 = (std::string::value_type *)v10[4];
        }
        if (v11 == v12)
          v13 = (*(uint64_t (**)(_QWORD *))(*v10 + 72))(v10);
        else
          v13 = *v11;
        std::string::push_back(&v18, v13);
        v14 = v10[3];
        if (v14 == v10[4])
          (*(void (**)(_QWORD *))(*v10 + 80))(v10);
        else
          v10[3] = v14 + 1;
      }
    }
    v15 = &v18;
LABEL_17:
    v9 = (*(uint64_t (**)(raven::RavenParameters *, std::string *, _QWORD))(*(_QWORD *)this + 24))(this, v15, 0);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  v20[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x18D78B25C](&v21);
  std::istream::~istream();
  MEMORY[0x18D78B550](v22);
  return v9;
}

void sub_18D177CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  sub_18D177D44(&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D177D44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x18D78B25C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x18D78B550](a1 + 53);
  return a1;
}

uint64_t raven::RavenParameters::LoadConfigurationString(raven::RavenParameters *this, char *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v18;
  int v19;
  std::locale::id *v20;
  const std::locale::facet *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  int64_t v32;
  std::string *p_str;
  _BYTE *v34;
  std::string *v35;
  _BYTE *v36;
  std::string *v37;
  char v39;
  std::string v41;
  std::string __str;
  _QWORD v43[2];
  uint64_t v44;
  _QWORD v45[6];
  std::string __p;
  char *v47;
  int v48;
  uint64_t v49[19];
  char v50[9];

  sub_18D0778AC(&__str, a2);
  v4 = MEMORY[0x1E0DE4FD8];
  v5 = MEMORY[0x1E0DE4FD8] + 64;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F58];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  v49[0] = MEMORY[0x1E0DE4FD8] + 64;
  v43[0] = v7;
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v7 - 24)) = v8;
  v43[1] = 0;
  v9 = (std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24));
  std::ios_base::init(v9, &v44);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v43[0] = v4 + 24;
  v49[0] = v5;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  p_p = &__p;
  __p = __str;
  v48 = 8;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v18 = v43[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    p_p = (std::string *)__str.__r_.__value_.__r.__words[0];
    size = __p.__r_.__value_.__l.__size_;
  }
  v47 = (char *)p_p + size;
  v44 = MEMORY[0x1E0DE4FB8] + 16;
  v45[0] = p_p;
  v45[1] = p_p;
  v45[2] = (char *)p_p + size;
  if ((*((_BYTE *)v45 + *(_QWORD *)(v43[0] - 24)) & 5) != 0)
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 12;
    v41.__r_.__value_.__s.__data_[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__str, (unsigned __int8 *)&v41, "Error: Could not initialize input string stream", v10, v11, v12, v13, v14, v39);
    LOBYTE(v19) = 0;
    goto LABEL_35;
  }
  memset(&__str, 0, sizeof(__str));
  v19 = 1;
  v20 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(v18 - 24)));
    v21 = std::locale::use_facet((const std::locale *)&v41, v20);
    v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale((std::locale *)&v41);
    v23 = sub_18D17ADE8(v43, (uint64_t)&__str, v22);
    if ((*((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 32) & 5) != 0)
      break;
    LODWORD(v31) = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v32 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v32 >= 1)
    {
      v34 = (char *)p_str + v32;
      v35 = p_str;
      do
      {
        v36 = memchr(v35, 35, v32);
        if (!v36)
          break;
        if (*v36 == 35)
        {
          if (v36 != v34 && v36 - (_BYTE *)p_str != -1)
          {
            std::string::basic_string(&v41, &__str, 0, v36 - (_BYTE *)p_str, (std::allocator<char> *)v50);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str = v41;
            v31 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          break;
        }
        v35 = (std::string *)(v36 + 1);
        v32 = v34 - (_BYTE *)v35;
      }
      while (v34 - (_BYTE *)v35 >= 1);
    }
    if ((v31 & 0x80) != 0)
    {
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_30;
      v37 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!(_DWORD)v31)
        goto LABEL_30;
      v37 = &__str;
    }
    *((_BYTE *)this + 32) = a3;
    sub_18D099E08((std::string *)((char *)this + 8), (char *)v37);
    v19 &= (*(uint64_t (**)(raven::RavenParameters *))(*(_QWORD *)this + 32))(this);
LABEL_30:
    v18 = v43[0];
  }
  if ((v19 & 1) == 0)
    raven::RavenParameters::PrintLoadErrors(this, v24, v25, v26, v27, v28, v29, v30);
  v6 = (_QWORD *)MEMORY[0x1E0DE4F58];
  v15 = MEMORY[0x1E0DE4FB8];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_35:
  v43[0] = *v6;
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = v6[3];
  v44 = v15 + 16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x18D78B550](v49);
  return v19 & 1;
}

void sub_18D1780E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
    operator delete(__p);
  sub_18D178198((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_18D178164(uint64_t a1, char *a2, char a3)
{
  *(_BYTE *)(a1 + 32) = a3;
  sub_18D099E08((std::string *)(a1 + 8), a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_18D178198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x18D78B550](a1 + 120);
  return a1;
}

void sub_18D178220(uint64_t a1)
{
  sub_18D04BAB0(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D178244(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_18D1782FC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_18D1782B8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_18D0788A0();
  return operator new(24 * a2);
}

uint64_t sub_18D1782FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_18D178398((uint64_t)v12);
  return a6;
}

uint64_t sub_18D178398(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18D1783CC(a1);
  return a1;
}

void sub_18D1783CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_18D178410(uint64_t a1)
{
  sub_18D178444(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18D178444(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_18D178498(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18D1784D8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_18D1784D8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t sub_18D178524(uint64_t a1, _BYTE *a2, const char *a3)
{
  std::string::size_type v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  std::string *v19;
  int64_t size;
  std::string *v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  char *v25;
  int v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  std::string *v32;
  int64_t v33;
  char v34;
  char *v35;
  int v36;
  void *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  std::string::size_type v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *__s;
  unsigned __int8 v64;
  __int16 v65;
  std::string v66;

  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 31))
      goto LABEL_99;
LABEL_5:
    sub_18D0778AC(&v66, "\n");
    v6 = strlen(a3);
    v7 = std::string::append(&v66, a3, v6);
    v8 = std::string::append(v7, ":", 1uLL);
    v14 = (uint64_t *)(a1 + 8);
    v15 = *(char *)(a1 + 31);
    __s = (char *)a3;
    if (v15 < 0)
    {
      v17 = *(char **)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v16 = *(unsigned __int8 *)(a1 + 31);
      v17 = (char *)(a1 + 8);
    }
    v18 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
    if (v18 >= 0)
      v19 = v8;
    else
      v19 = (std::string *)v8->__r_.__value_.__r.__words[0];
    if (v18 >= 0)
      size = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    else
      size = v8->__r_.__value_.__l.__size_;
    if (size)
    {
      if (v16 >= size)
      {
        v25 = &v17[v16];
        v26 = v19->__r_.__value_.__s.__data_[0];
        v27 = v17;
        do
        {
          v28 = v16 - size;
          if (v28 == -1)
            break;
          v29 = (char *)memchr(v27, v26, v28 + 1);
          if (!v29)
            break;
          v30 = v29;
          if (!memcmp(v29, v19, size))
          {
            if (v30 != v25)
            {
              v24 = v30 - v17;
              if (v30 - v17 != -1)
                goto LABEL_48;
            }
            break;
          }
          v27 = v30 + 1;
          v16 = v25 - (v30 + 1);
        }
        while (v16 >= size);
      }
      sub_18D099E08(&v66, __s);
      v21 = std::string::append(&v66, ":", 1uLL);
      v15 = *(char *)(a1 + 31);
      if (v15 < 0)
      {
        v23 = *(char **)(a1 + 8);
        v22 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v22 = *(unsigned __int8 *)(a1 + 31);
        v23 = (char *)(a1 + 8);
      }
      v31 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
      if (v31 >= 0)
        v32 = v21;
      else
        v32 = (std::string *)v21->__r_.__value_.__r.__words[0];
      if (v31 >= 0)
        v33 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      else
        v33 = v21->__r_.__value_.__l.__size_;
      if (v33)
      {
        if (v22 >= v33)
        {
          v35 = &v23[v22];
          v36 = v32->__r_.__value_.__s.__data_[0];
          v37 = v23;
          do
          {
            v38 = v22 - v33;
            if (v38 == -1)
              break;
            v39 = (char *)memchr(v37, v36, v38 + 1);
            if (!v39)
              break;
            v40 = v39;
            if (!memcmp(v39, v32, v33))
            {
              v34 = 1;
              if (v40 == v35)
                goto LABEL_35;
              LOBYTE(a3) = (_BYTE)__s;
              if (v40 != v23)
                goto LABEL_97;
              goto LABEL_47;
            }
            v37 = v40 + 1;
            v22 = v35 - (v40 + 1);
          }
          while (v22 >= v33);
        }
        v34 = 1;
LABEL_35:
        LOBYTE(a3) = (_BYTE)__s;
LABEL_97:
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v66.__r_.__value_.__l.__data_);
          if ((v34 & 1) != 0)
            goto LABEL_99;
        }
        else if ((v34 & 1) != 0)
        {
          goto LABEL_99;
        }
        return 1;
      }
LABEL_47:
      v24 = 0;
    }
    else
    {
      v24 = 0;
    }
LABEL_48:
    v41 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = v66.__r_.__value_.__l.__size_;
    v42 = v41 + v24;
    if ((v15 & 0x80) != 0)
      goto LABEL_53;
LABEL_51:
    v43 = v15;
    if (v42 < v15)
    {
      while (v43 > v42)
      {
        v44 = a1 + 8;
        if ((v15 & 0x80) != 0)
          v44 = *v14;
        if (*(_BYTE *)(v44 + v42) != 58)
        {
          v45 = v15;
          if ((v15 & 0x80) != 0)
            v45 = *(_QWORD *)(a1 + 16);
          if (v45 <= v42)
            break;
          v46 = a1 + 8;
          if ((v15 & 0x80) != 0)
            v46 = *v14;
          if (*(_BYTE *)(v46 + v42) != 32)
          {
            v47 = v15;
            if ((v15 & 0x80) != 0)
              v47 = *(_QWORD *)(a1 + 16);
            if (v47 <= v42)
              break;
            v48 = a1 + 8;
            if ((v15 & 0x80) != 0)
              v48 = *v14;
            if (*(_BYTE *)(v48 + v42) != 9)
              goto LABEL_72;
          }
        }
        ++v42;
        if ((v15 & 0x80) == 0)
          goto LABEL_51;
LABEL_53:
        v43 = *(_QWORD *)(a1 + 16);
        if (v42 >= v43)
          goto LABEL_72;
      }
      sub_18D077824();
    }
LABEL_72:
    v49 = 0;
    LOBYTE(a3) = (_BYTE)__s;
    do
    {
      v50 = v42 + v49;
      v51 = *(unsigned __int8 *)(a1 + 31);
      if (*(char *)(a1 + 31) < 0)
      {
        if (v50 >= *(_QWORD *)(a1 + 16))
          break;
      }
      else if (v50 >= v51)
      {
        break;
      }
      v52 = a1 + 8;
      if ((v51 & 0x80) != 0)
        v52 = *v14;
      if (*(_BYTE *)(v52 + v49 + v42) == 10)
        break;
      if ((v51 & 0x80) != 0)
        v53 = *(_QWORD *)(a1 + 16);
      else
        v53 = *(unsigned __int8 *)(a1 + 31);
      if (v53 <= v50)
LABEL_105:
        sub_18D077824();
      v54 = a1 + 8;
      if ((v51 & 0x80) != 0)
        v54 = *v14;
      if (*(_BYTE *)(v54 + v49 + v42) == 13)
        break;
      if ((v51 & 0x80) != 0)
        v55 = *(_QWORD *)(a1 + 16);
      else
        v55 = *(unsigned __int8 *)(a1 + 31);
      if (v55 <= v50)
        goto LABEL_105;
      v56 = a1 + 8;
      if ((v51 & 0x80) != 0)
        v56 = *v14;
      a2[v49] = *(_BYTE *)(v56 + v49 + v42);
      ++v49;
    }
    while (v49 != 1023);
    a2[v49] = 0;
    if (*(_BYTE *)(a1 + 32))
    {
      v65 = 0;
      v64 = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, &v64, "ConfigLoader: \"%s\" loaded value \"%s\"", v9, v10, v11, v12, v13, (char)__s);
    }
    v34 = 0;
    goto LABEL_97;
  }
  if (*(_QWORD *)(a1 + 16))
    goto LABEL_5;
LABEL_99:
  bzero(a2, 0x400uLL);
  if (*(_BYTE *)(a1 + 32))
  {
    LOWORD(v66.__r_.__value_.__l.__data_) = 0;
    LOBYTE(v65) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v65, "ConfigLoader: \"%s\" using default value \"%s\"", v57, v58, v59, v60, v61, (char)a3);
  }
  return 0;
}

void sub_18D178970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D178998(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18D1789E8(_QWORD *a1, char *__s)
{
  uint64_t v4;
  unsigned __int8 *v5[2];
  std::bad_cast v6;
  uint64_t v7;
  uint64_t v8;

  v4 = 0;
  v5[0] = (unsigned __int8 *)__s;
  v5[1] = (unsigned __int8 *)&__s[strlen(__s)];
  if ((sub_18D179018(v5, (double *)&v4) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v6);
    v6.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1460;
    v7 = MEMORY[0x1E0DE4E50];
    v8 = MEMORY[0x1E0DE4ED0];
    sub_18D1794C8((uint64_t)&v6);
  }
  *a1 = v4;
  return 1;
}

void sub_18D178A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12, __int128 a13)
{
  char *exception_ptr;

  std::exception::~exception(&a12);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a12.__vftable = (std::exception_vtbl *)&unk_1E25C1460;
    a13 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::exception::~exception(&a12);
    __cxa_end_catch();
    JUMPOUT(0x18D178A30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18D178AE0(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D178B20(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_18D178B60(char *__dst, __int128 *a2, std::string::value_type *a3, std::string::value_type *a4)
{
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_18D077798(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v8;
  }
  v9 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_18D077798(v9, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v9 = v10;
  }
  v11 = *((_QWORD *)a2 + 6);
  v12 = *((_BYTE *)a2 + 56);
  *((_QWORD *)__dst + 8) = a3;
  __dst[56] = v12;
  *((_QWORD *)__dst + 6) = v11;
  *((_QWORD *)__dst + 9) = a4;
  __dst[80] = 0;
  *((_QWORD *)__dst + 11) = 0;
  *((_QWORD *)__dst + 12) = 0;
  *((_QWORD *)__dst + 13) = 0;
  if (a3 == a4)
    v13 = 0;
  else
    v13 = sub_18D178C74((uint64_t)__dst, (std::string::value_type **)__dst + 8, a4, (std::string *)(__dst + 88));
  __dst[80] = v13;
  return __dst;
}

void sub_18D178C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D178C74(uint64_t a1, std::string::value_type **a2, std::string::value_type *a3, std::string *this)
{
  std::string::value_type *v8;
  _BOOL4 v9;
  BOOL v10;
  std::string::value_type *v11;
  uint64_t v12;
  _BOOL4 v13;
  std::string::value_type *v14;

  v8 = *a2;
  if (*(_DWORD *)(a1 + 52))
    goto LABEL_2;
  if (v8 == a3)
    return 0;
  while (1)
  {
    v9 = sub_18D178E54(a1, *v8);
    v8 = *a2;
    if (!v9)
      break;
    *a2 = ++v8;
    if (v8 == a3)
    {
      v8 = a3;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
LABEL_2:
    if (v8 != a3)
    {
      if (sub_18D178ED0(a1, *v8))
      {
        if (*(_BYTE *)(a1 + 56))
        {
          ++*a2;
          *(_BYTE *)(a1 + 56) = 0;
LABEL_25:
          sub_18D178F48(this, v8, *a2, *a2 - v8);
          return 1;
        }
      }
      else if (*(_BYTE *)(a1 + 56) || !sub_18D178E54(a1, **a2))
      {
        v13 = sub_18D178E54(a1, **a2);
        v14 = *a2;
        if (v13)
        {
          *a2 = ++v14;
          v8 = v14;
        }
        while (v14 != a3 && !sub_18D178E54(a1, *v14) && !sub_18D178ED0(a1, **a2))
        {
          v14 = *a2 + 1;
          *a2 = v14;
        }
      }
      *(_BYTE *)(a1 + 56) = 1;
      goto LABEL_25;
    }
    if (!*(_BYTE *)(a1 + 56))
    {
      v12 = 1;
      *(_BYTE *)(a1 + 56) = 1;
      sub_18D178F48(this, a3, a3, 0);
      return v12;
    }
  }
  else if (v8 != a3)
  {
    v10 = sub_18D178ED0(a1, *v8);
    v11 = *a2;
    if (v10)
    {
      *a2 = v11 + 1;
    }
    else
    {
      while (v11 != a3 && !sub_18D178E54(a1, *v11) && !sub_18D178ED0(a1, **a2))
      {
        v11 = *a2 + 1;
        *a2 = v11;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

BOOL sub_18D178E54(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  int v3;

  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_3:
    v2 = std::string::find((const std::string *)(a1 + 24), a2, 0) == -1;
    return !v2;
  }
  if (!*(_BYTE *)(a1 + 49))
    return 0;
  if ((a2 & 0x80000000) != 0)
    v3 = __maskrune(a2, 0x4000uLL);
  else
    v3 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60) & 0x4000;
  v2 = v3 == 0;
  return !v2;
}

BOOL sub_18D178ED0(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  int v3;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
LABEL_3:
    v2 = std::string::find((const std::string *)a1, a2, 0) == -1;
    return !v2;
  }
  if (!*(_BYTE *)(a1 + 48))
    return 0;
  if ((a2 & 0x80000000) != 0)
    v3 = __maskrune(a2, 0x2000uLL);
  else
    v3 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60) & 0x2000;
  v2 = v3 == 0;
  return !v2;
}

void sub_18D178F48(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

uint64_t sub_18D179018(unsigned __int8 **a1, double *a2)
{
  uint64_t result;
  unsigned int v5;

  if ((sub_18D17908C(*a1, a1[1], a2) & 1) != 0)
    return 1;
  result = sub_18D179224((uint64_t *)a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    v5 = *(a1[1] - 1) - 43;
    if (v5 <= 0x3A)
    {
      if (((0x400000004000005uLL >> v5) & 1) != 0)
        return 0;
      else
        return result;
    }
  }
  return result;
}

uint64_t sub_18D17908C(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v8;
  BOOL v9;
  int v10;
  unsigned __int8 *v11;
  BOOL v12;
  double v13;
  double v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  int v19;

  if (a1 == a2)
    return 0;
  v3 = *a1;
  v4 = v3 == 45 || v3 == 43;
  v5 = (uint64_t)(v4 ? a1 + 1 : a1);
  v6 = &a2[-v5];
  if ((uint64_t)&a2[-v5] < 3)
    return 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(unsigned __int8 *)(v5 + v8);
    if (v10 != aNan_0[v8] && v10 != aNan[v8])
      break;
    v9 = v8++ > 1;
  }
  while (v8 != 3);
  if (!v9)
  {
    if (v6 == (unsigned __int8 *)3)
    {
      v18 = 0;
      v16 = 0;
      do
      {
        v19 = *(unsigned __int8 *)(v5 + v18);
        if (v19 != aInfinity_0[v18] && v19 != aInfinity[v18])
          break;
        v16 = v18++ > 1;
      }
      while (v18 != 3);
    }
    else
    {
      if (v6 != (unsigned __int8 *)8)
        return 0;
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *(unsigned __int8 *)(v5 + v15);
        if (v17 != aInfinity_0[v15] && v17 != aInfinity[v15])
          break;
        v16 = v15++ > 6;
      }
      while (v15 != 8);
    }
    if (v16)
    {
      v12 = v3 == 45;
      v13 = INFINITY;
      v14 = -INFINITY;
      goto LABEL_33;
    }
    return 0;
  }
  v11 = (unsigned __int8 *)(v5 + 3);
  if (v11 != a2 && (a2 - v11 < 2 || *v11 != 40 || *(a2 - 1) != 41))
    return 0;
  v12 = v3 == 45;
  v13 = NAN;
  v14 = NAN;
LABEL_33:
  if (v12)
    v13 = v14;
  *a3 = v13;
  return 1;
}

BOOL sub_18D179224(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  _QWORD v11[2];
  std::ios_base v12;
  uint64_t v13;
  int v14;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf();
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &unk_1E25C1FE0;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x1E0DE4F98] + 64);
  v11[0] = MEMORY[0x1E0DE4F98] + 24;
  std::ios_base::init(&v12, __sb);
  v13 = 0;
  v14 = -1;
  v6 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) &= ~0x1000u;
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v7 - 24)) = 17;
  v8 = (_QWORD *)MEMORY[0x18D78B298](v11, a2);
  v9 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_18D17934C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

_QWORD *sub_18D179398(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

void sub_18D1793AC()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1793D0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  if ((a4 & 0x10) != 0)
  {
    v7 = -1;
    goto LABEL_19;
  }
  v5 = a1[2];
  v6 = a1[4] - v5;
  if (!a3)
  {
    v7 = -1;
    if (a2 < 0 || v6 < a2)
      goto LABEL_19;
    v9 = v5 + a2;
LABEL_15:
    v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    v7 = -1;
    v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6)
      goto LABEL_19;
    v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    v9 = a1[3];
    goto LABEL_18;
  }
  v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    v8 = a1[4];
    v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    v7 = v9 - v5;
  }
LABEL_19:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v7;
  return result;
}

double sub_18D179480@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if ((a3 & 0x10) == 0)
  {
    v4 = a1[2];
    v5 = *(_QWORD *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      v6 = v4 + v5;
      v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = -1;
  return result;
}

void sub_18D1794C8(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_18D179518(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B30D8, (void (*)(void *))sub_18D179568);
}

void sub_18D179504(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_18D179518(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&unk_1E25C1488;
  a1->n128_u64[1] = (unint64_t)&unk_1E25C1460;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_1E25C10C8;
  a1->n128_u64[1] = (unint64_t)&unk_1E25C10F8;
  a1[2].n128_u64[0] = (unint64_t)&unk_1E25C1120;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t sub_18D179568(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t sub_18D1795A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  *(_QWORD *)(v2 + 8) = &unk_1E25C1460;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &unk_1E25C10C8;
  *(_QWORD *)(v2 + 8) = &unk_1E25C10F8;
  *(_QWORD *)(v2 + 32) = &unk_1E25C1120;
  sub_18D15B224(v2 + 32, a1 + 32);
  return v2;
}

void sub_18D17967C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C405FFD4875);
  _Unwind_Resume(a1);
}

void sub_18D1796C0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_18D1798A8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B30D8, (void (*)(void *))sub_18D179568);
}

void sub_18D1796FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D179710(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D179760(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

void sub_18D179798(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x18D78B5D4);
}

const char *sub_18D1797EC()
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void sub_18D1797F8(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

void sub_18D179830(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D179884(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1798A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1460;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_1E25C10C8;
  *(_QWORD *)(a1 + 8) = &unk_1E25C10F8;
  *(_QWORD *)(a1 + 32) = &unk_1E25C1120;
  return a1;
}

void sub_18D179950(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D179964(uint64_t a1, _QWORD *a2, const char *a3)
{
  uint64_t result;
  char __s[1024];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  result = sub_18D178524(a1, __s, a3);
  if ((_DWORD)result)
    return sub_18D1789E8(a2, __s);
  return result;
}

uint64_t sub_18D1799CC(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  std::string v5;
  char __s[1024];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  result = sub_18D178524(a1, __s, a3);
  if ((_DWORD)result)
  {
    memset(&v5, 0, sizeof(v5));
    sub_18D099E08(&v5, __s);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v5;
    return 1;
  }
  return result;
}

void sub_18D179A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, __int128 a10)
{
  char *exception_ptr;

  if (SHIBYTE(a10) < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
    __p = &unk_1E25C1460;
    a10 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(exception_object);
    std::exception::~exception((std::exception *)&__p);
    __cxa_end_catch();
    JUMPOUT(0x18D179A38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D179AD0(uint64_t a1, char *a2, const char *a3)
{
  char *v4;
  unsigned __int8 v5;
  void **v6;
  char *v7;
  void **v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v16;
  void **v17;
  uint64_t v18;
  unsigned __int8 v19;
  char __s[1024];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!sub_18D178524(a1, __s, a3))
    return 0;
  if (!__s[0])
  {
    v11 = 0;
    *a2 = 0;
    return v11;
  }
  v4 = (char *)&v17;
  sub_18D0778AC(&v17, __s);
  v5 = v19;
  v6 = v17;
  if ((v19 & 0x80u) == 0)
    v7 = (char *)&v17 + v19;
  else
    v7 = (char *)v17 + v18;
  if ((v19 & 0x80u) != 0)
    v4 = (char *)v17;
  if (v4 != v7)
  {
    do
    {
      *v4 = __tolower(*v4);
      ++v4;
    }
    while (v4 != v7);
    v5 = v19;
    v6 = v17;
  }
  if ((v5 & 0x80u) == 0)
    v8 = (void **)&v17;
  else
    v8 = v6;
  v9 = *(unsigned __int8 *)v8;
  if (v9 == 49)
    goto LABEL_15;
  if ((v5 & 0x80u) == 0)
    v12 = v5;
  else
    v12 = v18;
  if (v12 == 1)
  {
    if (v9 == 48)
      goto LABEL_34;
    if (v9 == 121)
    {
LABEL_15:
      v10 = 1;
LABEL_35:
      v11 = 1;
      goto LABEL_36;
    }
    v16 = memcmp(v8, "n", 1uLL);
    v10 = 0;
    v11 = 0;
    if (!v16)
      goto LABEL_35;
  }
  else
  {
    if (v12 == 3)
    {
      if (*(_WORD *)v8 == 25977 && *((_BYTE *)v8 + 2) == 115)
        goto LABEL_15;
    }
    else if (v12 == 4 && *(_DWORD *)v8 == 1702195828)
    {
      goto LABEL_15;
    }
    if (v9 == 48)
    {
LABEL_34:
      v10 = 0;
      goto LABEL_35;
    }
    if (v12 == 2)
    {
      v10 = 0;
      v11 = 0;
      if (*(_WORD *)v8 == 28526)
        goto LABEL_35;
    }
    else
    {
      if (v12 == 5)
      {
        v10 = 0;
        v11 = 0;
        if (*(_DWORD *)v8 != 1936482662 || *((_BYTE *)v8 + 4) != 101)
          goto LABEL_36;
        goto LABEL_35;
      }
      v10 = 0;
      v11 = 0;
    }
  }
LABEL_36:
  *a2 = v10;
  if ((v5 & 0x80) != 0)
    operator delete(v6);
  return v11;
}

void sub_18D179CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D179D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  const std::locale *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  char *p_p;
  char v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  char v15;
  unsigned int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  int v24;
  _BYTE *v25;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  std::locale v30;

  v1 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2 - 1;
  v3 = *(_DWORD **)(a1 + 8);
  *v3 = 0;
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)(v2 - 1))
  {
    v4 = *(unsigned __int8 *)(v2 - 1);
    if ((v4 - 58) < 0xFFFFFFF6)
      return 0;
    *v3 = v4 - 48;
    *(_QWORD *)(a1 + 24) = v2 - 2;
    MEMORY[0x18D78B4E4](&v30);
    v6 = std::locale::classic();
    if (std::locale::operator==(&v30, v6))
    {
      v1 = sub_18D179F88(a1);
LABEL_45:
      std::locale::~locale(&v30);
      return v1;
    }
    v7 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4CC0]);
    ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
    if ((char)v29 < 0)
    {
      v8 = v28;
      if (!v28)
        goto LABEL_42;
      p_p = (char *)__p;
    }
    else
    {
      v8 = v29;
      if (!v29)
        goto LABEL_42;
      p_p = (char *)&__p;
    }
    if (*p_p >= 1)
    {
      v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
      v11 = *(_BYTE **)(a1 + 16);
      v12 = *(_BYTE **)(a1 + 24);
      if (v12 >= v11)
      {
        v13 = 0;
        v14 = __p;
        if ((v29 & 0x80u) == 0)
          v14 = &__p;
        v15 = *v14 - 1;
        do
        {
          if (v15)
          {
            v16 = *(_DWORD *)(a1 + 4);
            if (*(_BYTE *)a1)
              v17 = 1;
            else
              v17 = v16 > 0x19999999;
            v18 = v17;
            *(_BYTE *)a1 = v18;
            v19 = 10 * v16;
            *(_DWORD *)(a1 + 4) = 10 * v16;
            v20 = (char)*v12;
            if ((*v12 - 58) < 0xF6u)
              goto LABEL_47;
            v21 = v20 - 48;
            v22 = (v20 - 48) * v19;
            if (v21)
            {
              if ((v18 & 1) != 0)
                goto LABEL_47;
              if (((v21 * (unint64_t)v19) & 0xFFFFFFFF00000000) != 0)
                goto LABEL_47;
              v23 = *(_DWORD **)(a1 + 8);
              v24 = *v23;
              if (__CFADD__(v22, *v23))
                goto LABEL_47;
            }
            else
            {
              v23 = *(_DWORD **)(a1 + 8);
              v24 = *v23;
            }
            *v23 = v24 + v22;
            --v15;
          }
          else
          {
            if (*v12 != v10)
              goto LABEL_42;
            if (v12 == v11)
            {
LABEL_47:
              v1 = 0;
              goto LABEL_43;
            }
            if (v8 - 1 > (unint64_t)v13)
              ++v13;
            if ((v29 & 0x80u) == 0)
              v25 = &__p;
            else
              v25 = __p;
            v15 = v25[v13];
          }
          *(_QWORD *)(a1 + 24) = --v12;
        }
        while (v12 >= v11);
      }
      v1 = 1;
      goto LABEL_43;
    }
LABEL_42:
    v1 = sub_18D179F88(a1);
LABEL_43:
    if ((char)v29 < 0)
      operator delete(__p);
    goto LABEL_45;
  }
  return v1;
}

void sub_18D179F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18D179F88(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v2;
  char v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE **)(a1 + 24);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v5 = *(_DWORD *)(a1 + 4);
    v4 |= v5 > 0x19999999;
    *(_BYTE *)a1 = v4 & 1;
    v6 = 10 * v5;
    *(_DWORD *)(a1 + 4) = 10 * v5;
    v7 = (char)*v2;
    if ((*v2 - 58) < 0xF6u)
      break;
    v8 = v7 - 48;
    v9 = (v7 - 48) * v6;
    if (v8)
    {
      if ((v4 & 1) != 0)
        return 0;
      if (((v8 * (unint64_t)v6) & 0xFFFFFFFF00000000) != 0)
        return 0;
      v10 = *(_DWORD **)(a1 + 8);
      v11 = *v10;
      if (__CFADD__(v9, *v10))
        return 0;
    }
    else
    {
      v10 = *(_DWORD **)(a1 + 8);
      v11 = *v10;
    }
    *v10 = v11 + v9;
    *(_QWORD *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

uint64_t sub_18D17A044(uint64_t a1, float *a2, const char *a3)
{
  uint64_t result;
  size_t v5;
  _BYTE *v6;
  BOOL v7;
  _BYTE *v8;
  uint64_t v9;
  std::ios_base *v10;
  std::bad_cast_vtbl *v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  float v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  _BYTE *v19;
  BOOL v20;
  float v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  unint64_t v25;
  int v26;
  float v27;
  std::bad_cast v28;
  _QWORD v29[19];
  int v30;
  _QWORD __sb[8];
  char __s;
  _BYTE v33[1031];

  *(_QWORD *)&v33[1023] = *MEMORY[0x1E0C80C00];
  result = sub_18D178524(a1, &__s, a3);
  if ((_DWORD)result)
  {
    v27 = 0.0;
    v5 = strlen(&__s);
    v6 = &v33[v5 - 1];
    if (!v5)
      goto LABEL_10;
    v7 = __s == 45 || __s == 43;
    v8 = v7 ? v33 : &__s;
    v9 = v6 - v8;
    if (v6 - v8 < 3)
      goto LABEL_10;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = v8[v16];
      if (v18 != aNan_0[v16] && v18 != aNan[v16])
        break;
      v17 = v16++ > 1;
    }
    while (v16 != 3);
    if (v17)
    {
      v19 = v8 + 3;
      if (v19 != v6 && (v6 - v19 < 2 || *v19 != 40 || *(v6 - 1) != 41))
        goto LABEL_10;
      v20 = __s == 45;
      v15 = NAN;
      v21 = NAN;
    }
    else
    {
      if (v9 == 3)
      {
        v25 = 0;
        v23 = 0;
        do
        {
          v26 = v8[v25];
          if (v26 != aInfinity_0[v25] && v26 != aInfinity[v25])
            break;
          v23 = v25++ > 1;
        }
        while (v25 != 3);
      }
      else
      {
        if (v9 != 8)
          goto LABEL_10;
        v22 = 0;
        v23 = 0;
        do
        {
          v24 = v8[v22];
          if (v24 != aInfinity_0[v22] && v24 != aInfinity[v22])
            break;
          v23 = v22++ > 6;
        }
        while (v22 != 8);
      }
      if (!v23)
      {
LABEL_10:
        std::streambuf::basic_streambuf();
        __sb[0] = &unk_1E25C1FE0;
        __sb[2] = &__s;
        __sb[3] = &__s;
        __sb[4] = v6;
        v29[0] = 0;
        v29[1] = MEMORY[0x1E0DE4F98] + 64;
        v28.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x1E0DE4F98] + 24);
        std::ios_base::init((std::ios_base *)&v29[1], __sb);
        v29[18] = 0;
        v30 = -1;
        v10 = (std::ios_base *)((char *)&v28 + (unint64_t)v28.__vftable[-1].~bad_cast);
        v10->__exceptions_ = 1;
        std::ios_base::clear(v10, v10->__rdstate_);
        v11 = v28.__vftable;
        *(_DWORD *)((char *)&v28 + (unint64_t)v28.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
        *(_QWORD *)((char *)&v29[1] + (unint64_t)v11[-1].~bad_cast) = 9;
        v12 = (_QWORD *)MEMORY[0x18D78B2A4](&v28, &v27);
        if ((*((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) != 0)
        {
          std::istream::~istream();
          std::streambuf::~streambuf();
        }
        else
        {
          v13 = std::istream::get();
          std::istream::~istream();
          std::streambuf::~streambuf();
          if (v13 == -1)
          {
            v14 = *(v6 - 1) - 43;
            if (v14 > 0x3A || ((1 << v14) & 0x400000004000005) == 0)
            {
              v15 = v27;
LABEL_15:
              *a2 = v15;
              return 1;
            }
          }
        }
        std::bad_cast::bad_cast(&v28);
        v28.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1460;
        v29[0] = MEMORY[0x1E0DE4E50];
        v29[1] = MEMORY[0x1E0DE4EE0];
        sub_18D1794C8((uint64_t)&v28);
      }
      v20 = __s == 45;
      v15 = INFINITY;
      v21 = -INFINITY;
    }
    if (v20)
      v15 = v21;
    goto LABEL_15;
  }
  return result;
}

void sub_18D17A420(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  std::exception::~exception(&a11);
  JUMPOUT(0x18D17A430);
}

uint64_t sub_18D17A480(uint64_t a1, int *a2, const char *a3)
{
  uint64_t result;
  size_t v5;
  int v6;
  char *p_s;
  char v8;
  int v9;
  char v10;
  char v11;
  std::bad_cast v12;
  int *v13;
  char *v14;
  _BYTE *v15;
  int v16;
  char __s;
  _BYTE v18[1031];

  *(_QWORD *)&v18[1023] = *MEMORY[0x1E0C80C00];
  result = sub_18D178524(a1, &__s, a3);
  if ((_DWORD)result)
  {
    v5 = strlen(&__s);
    if (v5)
    {
      v16 = 0;
      v6 = __s;
      p_s = &__s;
      if (__s == 45 || __s == 43)
        p_s = v18;
      LOBYTE(v12.__vftable) = 0;
      HIDWORD(v12.__vftable) = 1;
      v13 = &v16;
      v14 = p_s;
      v15 = &v18[v5 - 1];
      v8 = sub_18D179D10((uint64_t)&v12);
      v9 = v16;
      if (v6 == 45)
      {
        if (v16 < 0x80000001)
          v10 = v8;
        else
          v10 = 0;
        if ((v10 & 1) != 0)
        {
          v9 = -v16;
LABEL_16:
          *a2 = v9;
          return 1;
        }
      }
      else
      {
        if (v16 >= 0)
          v11 = v8;
        else
          v11 = 0;
        if ((v11 & 1) != 0)
          goto LABEL_16;
      }
    }
    std::bad_cast::bad_cast(&v12);
    v12.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1460;
    v13 = (int *)MEMORY[0x1E0DE4E50];
    v14 = (char *)MEMORY[0x1E0DE4EF0];
    sub_18D1794C8((uint64_t)&v12);
  }
  return result;
}

void sub_18D17A5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, __int128 a11, std::exception a12)
{
  char *exception_ptr;

  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
    a10.__vftable = (std::exception_vtbl *)&unk_1E25C1460;
    a11 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(exception_object);
    std::exception::~exception(&a10);
    __cxa_end_catch();
    JUMPOUT(0x18D17A540);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D17A618(uint64_t a1, uint64_t *a2, const char *a3)
{
  uint64_t result;
  size_t v5;
  _BYTE *v6;
  int v7;
  char *p_s;
  int v9;
  int v10;
  char *v11;
  const std::locale *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  char *p_p;
  char v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  _BYTE *v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  std::locale v31;
  uint64_t v32;
  std::bad_cast v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  void *__p;
  uint64_t v39;
  unsigned __int8 v40;
  char __s;
  _BYTE v42[1031];

  *(_QWORD *)&v42[1023] = *MEMORY[0x1E0C80C00];
  result = sub_18D178524(a1, &__s, a3);
  if ((_DWORD)result)
  {
    v32 = 0;
    v5 = strlen(&__s);
    if (!v5)
      goto LABEL_57;
    v6 = &v42[v5 - 1];
    v7 = __s;
    p_s = &__s;
    if (__s == 45 || __s == 43)
      p_s = v42;
    v9 = 0;
    LOBYTE(v33.__vftable) = 0;
    v34 = 1;
    v35 = &v32;
    v36 = p_s;
    v32 = 0;
    if (p_s <= v6 - 1)
    {
      v10 = *(v6 - 1);
      if ((v10 - 58) >= 0xFFFFFFF6)
      {
        v32 = (v10 - 48);
        v11 = v6 - 2;
        v37 = v6 - 2;
        MEMORY[0x18D78B4E4](&v31);
        v12 = std::locale::classic();
        if (std::locale::operator==(&v31, v12))
        {
          v9 = sub_18D17A9B8((uint64_t)&v33);
        }
        else
        {
          v13 = std::locale::use_facet(&v31, MEMORY[0x1E0DE4CC0]);
          ((void (*)(void **__return_ptr))v13->__vftable[1].__on_zero_shared)(&__p);
          if ((char)v40 < 0)
          {
            v14 = v39;
            if (!v39)
              goto LABEL_46;
            p_p = (char *)__p;
          }
          else
          {
            v14 = v40;
            if (!v40)
              goto LABEL_46;
            p_p = (char *)&__p;
          }
          if (*p_p < 1)
          {
LABEL_46:
            v9 = sub_18D17A9B8((uint64_t)&v33);
            v17 = v40;
          }
          else
          {
            v16 = ((uint64_t (*)(const std::locale::facet *))v13->__vftable[1].~facet_0)(v13);
            v17 = v40;
            if (v11 >= p_s)
            {
              v18 = 0;
              v19 = 0;
              v20 = __p;
              if ((v40 & 0x80u) == 0)
                v20 = &__p;
              v21 = *v20 - 1;
              v22 = v32;
              v23 = 1;
              do
              {
                if (v21)
                {
                  if (v18)
                    v24 = 1;
                  else
                    v24 = v23 > 0x1999999999999999;
                  v18 = v24;
                  v25 = *v11;
                  if ((v25 - 58) < 0xF6u
                    || (v23 *= 10, v26 = v25 - 48, v27 = v23 * (v25 - 48), (_DWORD)v26)
                    && ((v18 & 1) != 0
                     || ((v28 = (v26 * (unsigned __int128)v23) >> 64 != 0, !__CFADD__(v27, v22)) ? (v29 = 0) : (v29 = 1),
                         v28 || (v29 & 1) != 0)))
                  {
LABEL_44:
                    v9 = 0;
                    goto LABEL_47;
                  }
                  v22 += v27;
                  v32 = v22;
                  --v21;
                }
                else
                {
                  if (*v11 != v16)
                  {
                    LOBYTE(v33.__vftable) = v18;
                    v34 = v23;
                    v37 = v11;
                    goto LABEL_46;
                  }
                  if (v11 == p_s)
                    goto LABEL_44;
                  if (v14 - 1 > (unint64_t)v19)
                    ++v19;
                  v21 = v20[v19];
                }
                --v11;
              }
              while (v11 >= p_s);
            }
            v9 = 1;
          }
LABEL_47:
          if ((v17 & 0x80) != 0)
            operator delete(__p);
        }
        std::locale::~locale(&v31);
      }
      else
      {
        v9 = 0;
      }
    }
    if (v7 == 45)
    {
      v30 = -v32;
      v32 = -v32;
      if ((v9 & 1) == 0)
      {
LABEL_57:
        std::bad_cast::bad_cast(&v33);
        v33.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1460;
        v34 = MEMORY[0x1E0DE4E50];
        v35 = (uint64_t *)MEMORY[0x1E0DE4F30];
        sub_18D1794C8((uint64_t)&v33);
      }
    }
    else
    {
      if (!v9)
        goto LABEL_57;
      v30 = v32;
    }
    *a2 = v30;
    return 1;
  }
  return result;
}

void sub_18D17A920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, __int128 a11, uint64_t a12, std::exception a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  char *exception_ptr;

  if (a23 < 0)
    operator delete(__p);
  std::locale::~locale(&a10);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a10.__locale_ = (std::locale::__imp *)&unk_1E25C1460;
    a11 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::exception::~exception((std::exception *)&a10);
    __cxa_end_catch();
    JUMPOUT(0x18D17A8B0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18D17A9B8(uint64_t a1)
{
  unint64_t v1;
  char *v2;
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v4 |= v5 > 0x1999999999999999;
    *(_BYTE *)a1 = v4 & 1;
    v6 = 10 * v5;
    *(_QWORD *)(a1 + 8) = 10 * v5;
    v7 = *v2;
    if ((v7 - 58) < 0xF6u)
      break;
    v8 = v7 - 48;
    v9 = v6 * (v7 - 48);
    if ((_DWORD)v8)
    {
      if ((v4 & 1) != 0)
        return 0;
      if (!is_mul_ok(v8, v6))
        return 0;
      v10 = *(_QWORD **)(a1 + 16);
      v11 = *v10;
      if (__CFADD__(v9, *v10))
        return 0;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 16);
      v11 = *v10;
    }
    *v10 = v11 + v9;
    *(_QWORD *)(a1 + 32) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

uint64_t sub_18D17AA7C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  _BYTE *v11;
  std::locale::id *v12;
  const std::locale::facet *v13;
  unsigned __int8 v14;
  _QWORD *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type size;
  int64_t v19;
  std::string *p_str;
  _BYTE *v21;
  std::string *v22;
  _BYTE *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  std::string v32;
  std::string __str;
  char v34;
  _QWORD v35[2];
  _BYTE v36[408];
  _QWORD v37[21];

  v3 = a1;
  v37[19] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 32) = a3;
  sub_18D07768C(v35);
  v9 = v35[0];
  if ((v36[*(_QWORD *)(v35[0] - 24) + 16] & 5) != 0)
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    v32.__r_.__value_.__s.__data_[0] = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__str, (unsigned __int8 *)&v32, "ConfigLoader: could not open config file, using default values", v4, v5, v6, v7, v8, v30);
  }
  else
  {
    v10 = (std::string *)(v3 + 8);
    v31 = v3;
    if (*(char *)(v3 + 31) < 0)
    {
      *(_QWORD *)(v3 + 16) = 0;
      v11 = *(_BYTE **)(v3 + 8);
    }
    else
    {
      *(_BYTE *)(v3 + 31) = 0;
      v11 = (_BYTE *)(v3 + 8);
    }
    *v11 = 0;
    memset(&__str, 0, sizeof(__str));
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(v9 - 24)));
      v13 = std::locale::use_facet((const std::locale *)&v32, v12);
      v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale((std::locale *)&v32);
      v15 = sub_18D17ADE8(v35, (uint64_t)&__str, v14);
      v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      LOBYTE(v17) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
      if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
        break;
      size = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v19 = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v19 >= 1)
      {
        v21 = (char *)p_str + v19;
        v22 = p_str;
        do
        {
          v23 = memchr(v22, 35, v19);
          if (!v23)
            break;
          if (*v23 == 35)
          {
            if (v23 != v21 && v23 - (_BYTE *)p_str != -1)
            {
              std::string::basic_string(&v32, &__str, 0, v23 - (_BYTE *)p_str, (std::allocator<char> *)&v34);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v32;
              v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
              size = v32.__r_.__value_.__l.__size_;
              v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            }
            break;
          }
          v22 = (std::string *)(v23 + 1);
          v19 = v21 - (_BYTE *)v22;
        }
        while (v21 - (_BYTE *)v22 >= 1);
      }
      if ((v17 & 0x80u) != 0)
        v16 = size;
      sub_18D099E3C((uint64_t)&v32, v16 + 1);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v32;
      else
        v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if (v16)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &__str;
        else
          v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v24, v25, v16);
      }
      *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v16) = 10;
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v32;
      else
        v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      else
        v27 = v32.__r_.__value_.__l.__size_;
      std::string::append(v10, (const std::string::value_type *)v26, v27);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      v9 = v35[0];
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v3 = v31;
  }
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v35[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x18D78B25C](v36);
  std::istream::~istream();
  MEMORY[0x18D78B550](v37);
  return v28;
}

void sub_18D17AD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  sub_18D177D44(&a23);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D17ADE8(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x18D78B274](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_18D17AF14(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x18D17AEE0);
  }
  __cxa_rethrow();
}

void sub_18D17AF58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double raven::BuildingSectionFacetID::Get_DistanceFromBuildingCentroid_Squared_m2(uint64_t *a1, double *a2, double *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v3 = *a1;
  v4 = (double)*a1 * 0.000001;
  v5 = v4 + -360.0;
  if (v4 <= 180.0)
    v5 = (double)*a1 * 0.000001;
  v6 = *a3;
  v7 = a3[1];
  v9 = *a2;
  v8 = a2[1];
  v10 = v5 - v8;
  if (vabdd_f64(v5, v8) > 180.0)
  {
    v11 = dbl_18D318D20[v10 >= 0.0];
    v10 = fmod(v10 + v11, 360.0) - v11;
  }
  v12 = v6 * ((double)HIDWORD(v3) * 0.000001 + -90.0 - v9);
  return v12 * v12 + v7 * v10 * (v7 * v10);
}

BOOL raven::BuildingSectionFacetID::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
}

BOOL raven::BuildingSectionFacetID::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
      || *(unsigned __int16 *)(a1 + 10) != *(unsigned __int16 *)(a2 + 10);
}

BOOL raven::BuildingSectionFacetID::operator>(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = *(_QWORD *)a1 > *(_QWORD *)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return __PAIR64__(*(unsigned __int16 *)(a1 + 10), *(unsigned __int16 *)(a1 + 8)) > __PAIR64__(*(unsigned __int16 *)(a2 + 10), *(unsigned __int16 *)(a2 + 8));
  return v2;
}

BOOL raven::BuildingSectionFacetID::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  _BOOL4 v7;
  _BOOL4 v8;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
  {
    v7 = *(_QWORD *)a1 > *(_QWORD *)a2;
    return !v7;
  }
  v2 = *(unsigned __int16 *)(a1 + 8);
  v3 = *(unsigned __int16 *)(a2 + 8);
  v4 = *(unsigned __int16 *)(a1 + 10);
  v5 = *(unsigned __int16 *)(a2 + 10);
  v6 = v2 == v3 && v4 == v5;
  if (!v6)
  {
    v7 = v2 > v3;
    v6 = v4 == v5;
    v8 = v4 > v5;
    if (!v6)
      v7 = v8;
    return !v7;
  }
  return 0;
}

uint64_t raven::PointToFacetVisibilityHierarchy::PointToFacetVisibilityHierarchy(uint64_t result, double *a2)
{
  double v2;
  BOOL v3;
  uint64_t v4;
  double v5;
  void *v6;
  unint64_t v7;

  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_DWORD *)(result + 40) = 1065353216;
  v2 = a2[1] * 57.2957795;
  v3 = COERCE__INT64(fabs(v2)) > 0x7FEFFFFFFFFFFFFFLL;
  v4 = -1;
  if (v2 > -180.0 && v2 < 360.0 && !v3)
  {
    v5 = *a2 * 57.2957795;
    v4 = -1;
    if (COERCE_UNSIGNED_INT64(fabs(v5)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v6 = &unk_18D30B000;
      if (fabs(v5) <= 90.0)
      {
        if (v2 < 0.0)
          v2 = v2 + 360.0;
        v7 = (unint64_t)&unk_18D30B000;
        LODWORD(v7) = vcvtad_u64_f64(v2 * 1000000.0);
        LODWORD(v6) = vcvtad_u64_f64((v5 + 90.0) * 1000000.0);
        v4 = v7 | ((_QWORD)v6 << 32);
      }
    }
  }
  *(_QWORD *)result = v4;
  return result;
}

uint64_t raven::RavenFacetVisibilityData::ConstructFacetToFacetVisibilityHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *a4, char a5, uint64_t a6, double *a7)
{
  double v7;
  double v8;
  unsigned __int8 v15;
  uint64_t LogLevel;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  cnprint::CNPrinter *v44;
  double v45;
  double v46;
  double v47;
  unint64_t TileAndFacetIntervisibilityIndex;
  char v49;
  int v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  BOOL v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t i;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  int64x2_t v111;
  unint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  int64x2_t v118;
  unint64_t v119;
  char v121;
  float *v122;
  uint64_t v123;
  uint64_t v124;
  double *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129[2];
  unsigned __int8 v130;
  uint64_t v131;
  int64x2_t v132;
  unint64_t v133;
  uint64_t v134;

  v15 = a5 + 1;
  LogLevel = operator new();
  v17 = LogLevel;
  *(_QWORD *)LogLevel = &off_1E25C0D08;
  *(_QWORD *)(LogLevel + 8) = &unk_1E25C0DA0;
  *(_QWORD *)(LogLevel + 16) = a2;
  *(_OWORD *)(LogLevel + 24) = 0u;
  v18 = (float *)(LogLevel + 24);
  *(_OWORD *)(LogLevel + 40) = 0u;
  *(_DWORD *)(LogLevel + 56) = 1065353216;
  v128 = v15;
  if (v15 >= *(unsigned __int8 *)(a1 + 104))
  {
    v26 = *(uint64_t **)(a1 + 24);
    v27 = *(uint64_t **)(a1 + 32);
    v28 = v26;
    if (v26 != v27)
    {
      while (*(_QWORD *)(*v28 + 16) != a2)
      {
        if (++v28 == v27)
          goto LABEL_12;
      }
    }
    if (v28 != v27)
    {
      v29 = *v28;
      if (*v28)
        goto LABEL_84;
    }
LABEL_12:
    v30 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v27 >= v30)
    {
      v83 = v27 - v26;
      if ((unint64_t)(v83 + 1) >> 61)
        sub_18D07AFE4();
      v84 = v30 - (_QWORD)v26;
      v85 = v84 >> 2;
      if (v84 >> 2 <= (unint64_t)(v83 + 1))
        v85 = v83 + 1;
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v85;
      v134 = a1 + 40;
      if (v86)
        v86 = (unint64_t)sub_18D07BF3C(v86);
      else
        v87 = 0;
      v106 = (uint64_t *)(v86 + 8 * v83);
      v107 = v86 + 8 * v87;
      v133 = v107;
      *v106 = v17;
      v31 = v106 + 1;
      v132.i64[1] = (uint64_t)(v106 + 1);
      v109 = *(_QWORD **)(a1 + 24);
      v108 = *(_QWORD **)(a1 + 32);
      if (v108 == v109)
      {
        v111 = vdupq_n_s64((unint64_t)v108);
      }
      else
      {
        do
        {
          v110 = *--v108;
          *v108 = 0;
          *--v106 = v110;
        }
        while (v108 != v109);
        v111 = *(int64x2_t *)(a1 + 24);
        v31 = (_QWORD *)v132.i64[1];
        v107 = v133;
      }
      *(_QWORD *)(a1 + 24) = v106;
      *(_QWORD *)(a1 + 32) = v31;
      v132 = v111;
      v112 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v107;
      v133 = v112;
      v131 = v111.i64[0];
      sub_18D17CE04((uint64_t)&v131);
    }
    else
    {
      *v27 = LogLevel;
      v31 = v27 + 1;
    }
    *(_QWORD *)(a1 + 32) = v31;
    return *(v31 - 1);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 184);
    if (v19)
    {
      if (!*(_BYTE *)(v19 + 24) || !*(_QWORD *)(v19 + 184))
      {
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel))
        {
          LOWORD(v131) = 12;
          LOBYTE(v129[0]) = 0;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)v129, "#FacetVisInfo,failed to convert sample point to ENU, LL %.7f, %.7f", v32, v33, v34, v35, v36, *(_QWORD *)a7);
        }
        v29 = 0;
LABEL_84:
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        return v29;
      }
      v20 = *a7;
      v21 = a7[1];
      v22 = *(double *)v19;
      v23 = *(double *)(v19 + 168);
      v123 = LogLevel;
      v24 = sub_18D17CE64(*(_QWORD *)(a1 + 184), v21);
      v25 = (*(double (**)(_QWORD, double, double))(**(_QWORD **)(v19 + 184) + 16))(*(_QWORD *)(v19 + 184), v20, v21);
      v127 = v19;
      v122 = v18;
      v124 = a6;
      v125 = a7;
      v7 = -(v22 - v20 * 0.0174532925) * v23;
      v8 = v25 + 0.0;
    }
    else
    {
      v127 = 0;
      v122 = (float *)(LogLevel + 24);
      v123 = LogLevel;
      v124 = a6;
      v125 = a7;
      v24 = 0.0;
    }
    v37 = *(int *)(a3 + 8);
    if ((_DWORD)v37)
    {
      v38 = *(int **)a3;
      v39 = *(_QWORD *)a3 + 4 * v37;
      v126 = (_QWORD *)(a1 + 8);
      do
      {
        v40 = *v38;
        v129[0] = raven::RavenFacetVisibilityData::GetBuildingSectionFacetID((raven::RavenFacetVisibilityData *)LogLevel, *v38, a4);
        v129[1] = v41;
        v42 = sub_18D17D41C(a1 + 160, v129);
        if ((uint64_t *)(a1 + 168) == v42 || (v43 = v42[6]) == 0)
        {
          LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v42);
          if (!(_DWORD)LogLevel)
          {
            LOWORD(v131) = 12;
            v130 = 0;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, &v130, "#FacetVisInfo,FIV Facet,depth,%hhu,{%llu,%hu,%hu},exists in RTTile NOT found in CompositeBldgData", v63, v64, v65, v66, v67, v128);
          }
        }
        else if (v127
               && (v45 = (*(double (**)(uint64_t))(*(_QWORD *)v43 + 48))(v42[6]),
                   (v7 - v46) * (v7 - v46) + (v24 - v45) * (v24 - v45) + (v8 - v47) * (v8 - v47) > *(double *)(a1 + 96)))
        {
          LogLevel = cnprint::CNPrinter::GetLogLevel(v44);
          if (!(_DWORD)LogLevel)
          {
            LOWORD(v131) = 12;
            v130 = 0;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, &v130, "#FacetVisInfo,Facet,depth,%hhu,{%llu,%hu,%hu},facet in RTTile is too far from point %.2f > %.2f", v68, v69, v70, v71, v72, v128);
          }
        }
        else
        {
          TileAndFacetIntervisibilityIndex = raven::RavenFacetVisibilityData::GetTileAndFacetIntervisibilityIndex((raven::RavenFacetVisibilityData *)a1, v40, v43, a4);
          if (v49)
          {
            v50 = TileAndFacetIntervisibilityIndex;
            v51 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + ((TileAndFacetIntervisibilityIndex >> 29) & 0x7FFFFFFF8));
            v52 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
            if (v52 >= (*(double (**)(unint64_t))(*(_QWORD *)v43 + 64))(v43))
            {
              v58 = (_QWORD *)*v126;
              if (!*v126)
                goto LABEL_37;
              v59 = (_QWORD *)(a1 + 8);
              do
              {
                v60 = v58[4];
                v61 = v60 >= v43;
                if (v60 >= v43)
                  v62 = v58;
                else
                  v62 = v58 + 1;
                if (v61)
                  v59 = v58;
                v58 = (_QWORD *)*v62;
              }
              while (*v62);
              if (v59 != v126 && v43 >= v59[4])
              {
                v78 = *(unint64_t **)(a1 + 24);
                v79 = *(unint64_t **)(a1 + 32);
                if (v78 != v79)
                {
                  while (*(_QWORD *)(*v78 + 16) != v43)
                  {
                    if (++v78 == v79)
                      goto LABEL_54;
                  }
                }
                if (v78 == v79 || !*v78)
                {
LABEL_54:
                  LOWORD(v131) = 12;
                  v130 = 4;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, &v130, "#FacetVisInfo,depth,Facet with vis info decoded was not found in all_connected_building_facets", v53, v54, v55, v56, v57, v121);
                }
                else
                {
                  sub_18D17D97C(v122, *v78, *v78);
                }
              }
              else
              {
LABEL_37:
                if (*(_DWORD *)(v51 + 96) <= v50)
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v131);
                }
                LogLevel = raven::RavenFacetVisibilityData::ConstructFacetToFacetVisibilityHierarchy(a1, v43, *(_QWORD *)(*(_QWORD *)(v51 + 88) + 8 * v50) + 16, v51, v128, v124, v125);
                if (LogLevel)
                  sub_18D17D97C(v122, LogLevel, LogLevel);
              }
            }
          }
          else
          {
            LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileAndFacetIntervisibilityIndex);
            if (!(_DWORD)LogLevel)
            {
              LOWORD(v131) = 12;
              v130 = 0;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, &v130, "#FacetVisInfo,Facet,depth,%hhu,couldn't find FIV index,%u", v73, v74, v75, v76, v77, v128);
            }
          }
        }
        ++v38;
      }
      while (v38 != (int *)v39);
    }
    v80 = *(uint64_t **)(a1 + 24);
    v81 = *(uint64_t **)(a1 + 32);
    v82 = v80;
    if (v80 == v81)
    {
      v17 = v123;
    }
    else
    {
      v17 = v123;
      while (*(_QWORD *)(*v82 + 16) != a2)
      {
        if (++v82 == v81)
          goto LABEL_85;
      }
    }
    if (v82 != v81)
    {
      v88 = *v82;
      if (*v82)
      {
        v29 = v17;
        if (v88 != v17)
        {
          *(_DWORD *)(v88 + 56) = *(_DWORD *)(v17 + 56);
          v89 = *(_QWORD **)(v17 + 40);
          v90 = *(_QWORD *)(v88 + 32);
          if (!v90)
            goto LABEL_79;
          for (i = 0; i != v90; ++i)
            *(_QWORD *)(*(_QWORD *)(v88 + 24) + 8 * i) = 0;
          v92 = *(_QWORD **)(v88 + 40);
          *(_QWORD *)(v88 + 40) = 0;
          *(_QWORD *)(v88 + 48) = 0;
          if (v92)
          {
            while (v89)
            {
              v92[2] = v89[2];
              v93 = (_QWORD *)*v92;
              sub_18D17D4D8(v88 + 24, v92);
              v89 = (_QWORD *)*v89;
              v92 = v93;
              if (!v93)
                goto LABEL_79;
            }
            do
            {
              v98 = (_QWORD *)*v92;
              operator delete(v92);
              v92 = v98;
            }
            while (v98);
          }
          else
          {
LABEL_79:
            while (v89)
            {
              v94 = v89[2];
              v95 = operator new(0x18uLL);
              v96 = 0x9DDFEA08EB382D69 * (((8 * v94) + 8) ^ HIDWORD(v94));
              v97 = 0x9DDFEA08EB382D69 * (HIDWORD(v94) ^ (v96 >> 47) ^ v96);
              *v95 = 0;
              v95[1] = 0x9DDFEA08EB382D69 * (v97 ^ (v97 >> 47));
              v95[2] = v94;
              sub_18D17D4D8(v88 + 24, v95);
              v89 = (_QWORD *)*v89;
            }
          }
          v29 = v88;
        }
        goto LABEL_84;
      }
    }
LABEL_85:
    v99 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v81 >= v99)
    {
      v101 = v81 - v80;
      if ((unint64_t)(v101 + 1) >> 61)
        sub_18D07AFE4();
      v102 = v99 - (_QWORD)v80;
      v103 = v102 >> 2;
      if (v102 >> 2 <= (unint64_t)(v101 + 1))
        v103 = v101 + 1;
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
        v104 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v104 = v103;
      v134 = a1 + 40;
      if (v104)
        v104 = (unint64_t)sub_18D07BF3C(v104);
      else
        v105 = 0;
      v113 = (uint64_t *)(v104 + 8 * v101);
      v114 = v104 + 8 * v105;
      v133 = v114;
      *v113 = v17;
      v100 = v113 + 1;
      v132.i64[1] = (uint64_t)(v113 + 1);
      v116 = *(_QWORD **)(a1 + 24);
      v115 = *(_QWORD **)(a1 + 32);
      if (v115 == v116)
      {
        v118 = vdupq_n_s64((unint64_t)v115);
      }
      else
      {
        do
        {
          v117 = *--v115;
          *v115 = 0;
          *--v113 = v117;
        }
        while (v115 != v116);
        v118 = *(int64x2_t *)(a1 + 24);
        v100 = (_QWORD *)v132.i64[1];
        v114 = v133;
      }
      *(_QWORD *)(a1 + 24) = v113;
      *(_QWORD *)(a1 + 32) = v100;
      v132 = v118;
      v119 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v114;
      v133 = v119;
      v131 = v118.i64[0];
      sub_18D17CE04((uint64_t)&v131);
    }
    else
    {
      *v81 = v17;
      v100 = v81 + 1;
    }
    *(_QWORD *)(a1 + 32) = v100;
    return *(v100 - 1);
  }
}

void sub_18D17B9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&a26);
  JUMPOUT(0x18D17BA80);
}

void sub_18D17BA10(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_18D17BA34()
{
  __cxa_end_catch();
  JUMPOUT(0x18D17BA80);
}

void sub_18D17BA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  sub_18D17BA7C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, v16);
}

void sub_18D17BA54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  operator delete(v17);
  JUMPOUT(0x18D17BA80);
}

void sub_18D17BA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenFacetVisibilityData::GetCBFPointerForABuildingFacet(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v2 != v3)
  {
    while (*(_QWORD *)(*(_QWORD *)v2 + 16) != a2)
    {
      v2 += 8;
      if (v2 == v3)
        return 0;
    }
  }
  if (v2 == v3)
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t raven::RavenFacetVisibilityData::GetBuildingSectionFacetID(raven::RavenFacetVisibilityData *this, int a2, const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *a3)
{
  int v5;
  uint64_t v6;
  signed int v7;
  signed int v8;
  _BYTE v10[48];

  if (*((_DWORD *)a3 + 18) <= a2)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  v5 = *(_DWORD *)(*((_QWORD *)a3 + 8) + 4 * a2);
  v6 = *((_QWORD *)a3 + 1);
  if (!v6)
  {
    CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(this);
    v6 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_ + 8);
  }
  v7 = (0xFFFFFFFF >> *(_DWORD *)(v6 + 64)) & v5;
  if (*((_DWORD *)a3 + 12) <= v7)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  v8 = (0xFFFFFFFF >> *(_DWORD *)(v6 + 60)) & *(_DWORD *)(*((_QWORD *)a3 + 5) + 4 * v7);
  if (*((_DWORD *)a3 + 6) <= v8)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  return *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * v8);
}

void sub_18D17BC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

unint64_t raven::RavenFacetVisibilityData::GetTileAndFacetIntervisibilityIndex(raven::RavenFacetVisibilityData *a1, int a2, uint64_t a3, CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *a4)
{
  uint64_t v5;
  uint64_t BuildingSectionFacetID;
  int v9;
  int v10;
  uint64_t v11;
  cnprint::CNPrinter *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unint64_t TileIndexInRayTracingTileDataBase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t i;
  unsigned __int16 v36;
  unsigned __int16 v37;
  CoreNavigation::CLP::LogEntry::RayTracingTileData *LogLevel;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v47;
  __int16 v48;
  double v49[2];

  if (a3)
  {
    v5 = *((_QWORD *)a1 + 23);
    if (v5)
    {
      BuildingSectionFacetID = raven::RavenFacetVisibilityData::GetBuildingSectionFacetID(a1, a2, a4);
      v10 = v9;
      v11 = *((_QWORD *)a1 + 23);
      v12 = (cnprint::CNPrinter *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      if (*(_BYTE *)(v11 + 24))
      {
        v15 = *(double *)(v11 + 176);
        v16 = v14 / *(double *)(v11 + 168);
        v17 = v13 / v15;
        if (v15 <= 0.0)
          v17 = 0.0;
        v18 = v16 + *(double *)v11;
        v19 = v17 + *(double *)(v11 + 8);
        v49[0] = v18 * 57.2957795;
        v49[1] = v19 * 57.2957795;
        TileIndexInRayTracingTileDataBase = raven::RavenFacetVisibilityData::GetTileIndexInRayTracingTileDataBase(a1, v49, v19, v18);
        if (HIDWORD(TileIndexInRayTracingTileDataBase))
        {
          v32 = TileIndexInRayTracingTileDataBase;
          v33 = *(_QWORD *)(*((_QWORD *)a1 + 16) + 8 * TileIndexInRayTracingTileDataBase);
          v34 = *(_DWORD *)(v33 + 96);
          if (v34 < 1)
          {
            LODWORD(i) = 0;
          }
          else
          {
            for (i = 0; i < v34; ++i)
            {
              TileIndexInRayTracingTileDataBase = raven::RavenFacetVisibilityData::GetBuildingSectionFacetID((raven::RavenFacetVisibilityData *)TileIndexInRayTracingTileDataBase, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 88) + 8 * i) + 8), (const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *)v33);
              v34 = *(_DWORD *)(v33 + 96);
              if (BuildingSectionFacetID == TileIndexInRayTracingTileDataBase
                && (unsigned __int16)v10 == v36
                && HIWORD(v10) == v37)
              {
                break;
              }
            }
          }
          if ((_DWORD)i != v34)
          {
            LOBYTE(v5) = i;
            v26 = i & 0x7FFFFF00 | ((unint64_t)v32 << 32);
            return v26 & 0xFFFFFFFFFFFFFF00 | v5;
          }
          LogLevel = (CoreNavigation::CLP::LogEntry::RayTracingTileData *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileIndexInRayTracingTileDataBase);
          if (!(_DWORD)LogLevel)
          {
            v48 = 12;
            v47 = 0;
            if (!*((_QWORD *)a4 + 1))
              CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(LogLevel);
            if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 16) + 8 * v32) + 8))
              CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(LogLevel);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "#FacetVisInfo,Missing facet info for bldg_facet_section {%llu,%hu,%hu},ref_tile %llu,loc_tile,%llu, facet_ap LL, %12.7f, %12.7f", v41, v42, v43, v44, v45, BuildingSectionFacetID);
          }
        }
        else if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileIndexInRayTracingTileDataBase))
        {
          v48 = 12;
          v47 = 0;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "#FacetVisInfo,Facet not found in any tile bldg_facet_section {%llu,%hu,%hu}, facet_ap LL, %12.7f, %12.7f", v21, v22, v23, v24, v25, BuildingSectionFacetID);
        }
      }
      else if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
      {
        LOWORD(v49[0]) = 12;
        LOBYTE(v48) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v49, (unsigned __int8 *)&v48, "#FacetVisInfo,Failed to convert facet vertex lat/long to ENU, bldg_facet_section {%llu,%hu,%hu}", v27, v28, v29, v30, v31, BuildingSectionFacetID);
      }
      LOBYTE(v5) = 0;
    }
    v26 = 0;
  }
  else
  {
    LOBYTE(v5) = 0;
    v26 = 0;
  }
  return v26 & 0xFFFFFFFFFFFFFF00 | v5;
}

BOOL raven::RavenFacetVisibilityData::ConstructPointToFacetVisibilityHierarchy(_QWORD **a1, float64x2_t *a2, uint64_t a3, _OWORD *a4)
{
  float64x2_t v6;
  unint64_t TileIndexInRayTracingTileDataBase;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t *v24;
  int *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v42;
  unint64_t LogLevel;
  uint64_t v44;
  int *v45;
  int *v46;
  uint64_t **v47;
  int v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t **v58;
  unint64_t v59;
  BOOL v60;
  uint64_t **v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  unint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  _BOOL8 v78;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t *v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  int64x2_t v95;
  char *v96;
  char v97;
  char v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  float64x2_t v104;
  uint64_t v105;
  unint64_t v106[2];
  unint64_t v107;
  double v108[2];
  float64x2_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  int64x2_t v112;
  char *v113;
  _QWORD **v114;

  *((_OWORD *)a1 + 7) = *a4;
  v6 = (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL);
  v104 = vmulq_f64(*a2, v6);
  v109 = v104;
  TileIndexInRayTracingTileDataBase = raven::RavenFacetVisibilityData::GetTileIndexInRayTracingTileDataBase((CoreNavigation::CLP::LogEntry::RayTracingTileData *)a1, v109.f64, v104.f64[0], v6.f64[0]);
  if (!HIDWORD(TileIndexInRayTracingTileDataBase))
  {
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileIndexInRayTracingTileDataBase))
    {
      LOWORD(v111) = 12;
      LOBYTE(v108[0]) = 0;
      v98 = LOBYTE(v104.f64[0]);
      v15 = "#FacetVisInfo,Unable to locate (home) tile that contains candidate point, %12.7f, %12.7f";
LABEL_77:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)v108, v15, v10, v11, v12, v13, v14, v98);
      return 0;
    }
    return 0;
  }
  v16 = a1[16][TileIndexInRayTracingTileDataBase];
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)TileIndexInRayTracingTileDataBase);
    v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_ + 8);
  }
  LODWORD(v9) = *(_DWORD *)(v17 + 8);
  LODWORD(v8) = *(_DWORD *)(v17 + 12);
  v103 = (double)v8 * 0.000001 + -90.0;
  v18 = (double)v9 * 0.000001;
  v19 = v18 + -360.0;
  if (v18 <= 180.0)
    v19 = v18;
  v20 = *(_QWORD *)(v16 + 160);
  v21 = *(int *)(v16 + 168);
  v22 = v104.f64[1] - v19;
  v102 = v19;
  if (vabdd_f64(v104.f64[1], v19) > 180.0)
  {
    v23 = dbl_18D318D20[v22 >= 0.0];
    v22 = fmod(v22 + v23, 360.0) - v23;
  }
  if (v104.f64[0] >= v103)
  {
    if (v22 >= 0.0)
    {
      v26 = v20 + 8 * v21;
      goto LABEL_18;
    }
    v24 = (uint64_t *)(v16 + 184);
    v25 = (int *)(v16 + 192);
  }
  else if (v22 >= 0.0)
  {
    v24 = (uint64_t *)(v16 + 136);
    v25 = (int *)(v16 + 144);
  }
  else
  {
    v24 = (uint64_t *)(v16 + 112);
    v25 = (int *)(v16 + 120);
  }
  v20 = *v24;
  v26 = *v24 + 8 * *v25;
LABEL_18:
  if (v20 == v26)
    goto LABEL_102;
  v27 = *((double *)a1 + 19);
  v28 = v27 * 0.5;
  v29 = v27 * v27;
  v100 = *((double *)a1 + 15);
  v101 = *((double *)a1 + 14);
  v99 = v27 * v27;
  v30 = v26;
  while (1)
  {
    v31 = *(_DWORD *)(*(_QWORD *)v20 + 8);
    v32 = v102 + (double)(__int16)v31 * 0.000001;
    if (fabs(v32) > 180.0)
    {
      v33 = dbl_18D318D20[v32 >= 0.0];
      v32 = fmod(v32 + v33, 360.0) - v33;
    }
    v34 = v32 - v104.f64[1];
    if (vabdd_f64(v32, v104.f64[1]) > 180.0)
    {
      v35 = dbl_18D318D20[v34 >= 0.0];
      v34 = fmod(v34 + v35, 360.0) - v35;
    }
    v36 = v103 + (double)(v31 >> 16) * 0.000001;
    v37 = v101 * (v36 - v104.f64[0]);
    v38 = v100 * v34;
    v39 = v37 * v37 + v38 * v38;
    v40 = fabs(v38);
    if (fabs(v37) <= v28 && v40 <= v28)
      break;
    if (v39 <= v29)
    {
      v30 = v20;
      v29 = v39;
    }
    v20 += 8;
    if (v20 == v26)
      goto LABEL_32;
  }
  v30 = v20;
  v29 = v39;
LABEL_32:
  if (v30 == v26 || v29 >= v99)
  {
LABEL_102:
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileIndexInRayTracingTileDataBase))
    {
      LOWORD(v111) = 12;
      LOBYTE(v108[0]) = 0;
      v98 = LOBYTE(v104.f64[0]);
      v15 = "#FacetVisInfo,PointID for lat_lon{%.6lf,%.6lf} not found in the tile,Hashid,%llu";
      goto LABEL_77;
    }
    return 0;
  }
  v108[0] = v36 * 0.0174532925;
  v108[1] = v32 * 0.0174532925;
  v42 = operator new();
  LogLevel = raven::PointToFacetVisibilityHierarchy::PointToFacetVisibilityHierarchy(v42, v108);
  v107 = LogLevel;
  v44 = *(int *)(*(_QWORD *)v30 + 24);
  if ((_DWORD)v44)
  {
    v105 = a3;
    v45 = *(int **)(*(_QWORD *)v30 + 16);
    v46 = &v45[v44];
    v47 = a1 + 1;
    do
    {
      v48 = *v45;
      v106[0] = raven::RavenFacetVisibilityData::GetBuildingSectionFacetID((raven::RavenFacetVisibilityData *)LogLevel, *v45, (const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *)v16);
      v106[1] = v49;
      v50 = sub_18D17D41C((uint64_t)(a1 + 20), v106);
      if (a1 + 21 == (_QWORD **)v50 || (v56 = v50[6]) == 0)
      {
        LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v50);
        if (!(_DWORD)LogLevel)
        {
          LOWORD(v111) = 12;
          v110 = 0;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, &v110, "#FacetVisInfo,PFV Facet,{%llu,%hu,%hu},exists in RTTile NOT found in CompositeBldgData", v71, v72, v73, v74, v75, v106[0]);
        }
      }
      else
      {
        v57 = *v47;
        if (!*v47)
          goto LABEL_49;
        v58 = a1 + 1;
        do
        {
          v59 = v57[4];
          v60 = v59 >= v56;
          if (v59 >= v56)
            v61 = (uint64_t **)v57;
          else
            v61 = (uint64_t **)(v57 + 1);
          if (v60)
            v58 = (uint64_t **)v57;
          v57 = *v61;
        }
        while (*v61);
        if (v58 != v47 && v56 >= (unint64_t)v58[4])
        {
          v76 = a1[3];
          v77 = a1[4];
          if (v76 != v77)
          {
            while (*(_QWORD *)(*v76 + 16) != v56)
            {
              if (++v76 == v77)
                goto LABEL_74;
            }
          }
          if (v76 == v77 || !*v76)
          {
LABEL_74:
            LOWORD(v111) = 12;
            v110 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, &v110, "#FacetVisInfo,expected ConnectedBuildingFacet missing from the NLOSEngine Storage", v51, v52, v53, v54, v55, v97);
          }
          else
          {
            sub_18D17D97C((float *)(v107 + 8), *v76, *v76);
          }
        }
        else
        {
LABEL_49:
          LogLevel = raven::RavenFacetVisibilityData::GetTileAndFacetIntervisibilityIndex((raven::RavenFacetVisibilityData *)a1, v48, v56, (CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *)v16);
          if (v62)
          {
            v63 = LogLevel;
            v64 = *(_QWORD *)((char *)a1[16] + ((LogLevel >> 29) & 0x7FFFFFFF8));
            if (*(_DWORD *)(v64 + 96) <= (int)LogLevel)
            {
              wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
              wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
              wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
              wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v111);
            }
            LogLevel = raven::RavenFacetVisibilityData::ConstructFacetToFacetVisibilityHierarchy((uint64_t)a1, v56, *(_QWORD *)(*(_QWORD *)(v64 + 88) + 8 * v63) + 16, (const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *)v64, 0, v105, v109.f64);
            if (LogLevel)
            {
              sub_18D17D97C((float *)(v107 + 8), LogLevel, LogLevel);
              v65 = *v47;
              v66 = a1 + 1;
              v67 = a1 + 1;
              if (*v47)
              {
                while (1)
                {
                  while (1)
                  {
                    v67 = (uint64_t **)v65;
                    v68 = v65[4];
                    if (v68 <= v56)
                      break;
                    v65 = *v67;
                    v66 = v67;
                    if (!*v67)
                      goto LABEL_60;
                  }
                  if (v68 >= v56)
                    break;
                  v65 = v67[1];
                  if (!v65)
                  {
                    v66 = v67 + 1;
                    goto LABEL_60;
                  }
                }
              }
              else
              {
LABEL_60:
                v69 = (uint64_t *)operator new(0x28uLL);
                v69[4] = v56;
                *v69 = 0;
                v69[1] = 0;
                v69[2] = (uint64_t)v67;
                *v66 = v69;
                v70 = (_QWORD *)**a1;
                if (v70)
                {
                  *a1 = v70;
                  v69 = *v66;
                }
                LogLevel = (unint64_t)sub_18D083D78(a1[1], v69);
                a1[2] = (_QWORD *)((char *)a1[2] + 1);
              }
            }
          }
        }
      }
      ++v45;
    }
    while (v45 != v46);
    v42 = v107;
  }
  v80 = *(_QWORD *)(v42 + 32);
  v78 = v80 != 0;
  if (!v80)
  {
    v107 = 0;
    goto LABEL_98;
  }
  v81 = a1[8];
  v82 = a1[7];
  if (v82 < v81)
  {
    *v82 = v42;
    a1[7] = v82 + 1;
    return v78;
  }
  v83 = (char *)a1[6];
  v84 = ((char *)v82 - v83) >> 3;
  v85 = v84 + 1;
  if ((unint64_t)(v84 + 1) >> 61)
    sub_18D07AFE4();
  v86 = (char *)v81 - v83;
  if (v86 >> 2 > v85)
    v85 = v86 >> 2;
  if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
    v87 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v87 = v85;
  v114 = a1 + 8;
  if (v87)
    v88 = (char *)sub_18D0788C8((uint64_t)(a1 + 8), v87);
  else
    v88 = 0;
  v89 = (uint64_t *)&v88[8 * v84];
  v90 = &v88[8 * v87];
  v113 = v90;
  v107 = 0;
  *v89 = v42;
  v91 = v89 + 1;
  v112.i64[1] = (uint64_t)(v89 + 1);
  v93 = a1[6];
  v92 = a1[7];
  if (v92 == v93)
  {
    v42 = 0;
    v95 = vdupq_n_s64((unint64_t)v92);
  }
  else
  {
    do
    {
      v94 = *--v92;
      *v92 = 0;
      *--v89 = v94;
    }
    while (v92 != v93);
    v95 = *((int64x2_t *)a1 + 3);
    v91 = (_QWORD *)v112.i64[1];
    v90 = v113;
    v42 = v107;
  }
  a1[6] = v89;
  a1[7] = v91;
  v112 = v95;
  v96 = (char *)a1[8];
  a1[8] = v90;
  v113 = v96;
  v111 = v95.i64[0];
  sub_18D17CEE8((uint64_t)&v111);
  a1[7] = v91;
  v107 = 0;
  if (v42)
  {
LABEL_98:
    sub_18D04344C(v42 + 8);
    MEMORY[0x18D78B5D4](v42, 0x10A0C4002E6F8ADLL);
  }
  return v78;
}

void sub_18D17C688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_18D17D930((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenFacetVisibilityData::GetTileIndexInRayTracingTileDataBase(CoreNavigation::CLP::LogEntry::RayTracingTileData *a1, double *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v22;

  v4 = *((_QWORD *)a1 + 16);
  if (*((_QWORD *)a1 + 17) == v4)
  {
LABEL_22:
    v22 = 0;
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0.5;
    HIDWORD(v10) = 1081507840;
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 8 * v7) + 8);
      if (!v11)
      {
        CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(a1);
        v11 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_ + 8);
      }
      LODWORD(a4) = *(_DWORD *)(v11 + 8);
      LODWORD(v10) = *(_DWORD *)(v11 + 12);
      v12 = (double)*(unint64_t *)&v10 * 0.000001 + -90.0;
      v13 = (double)*(unint64_t *)&a4 * 0.000001;
      v14 = v13 <= 180.0 ? v13 : v13 + -360.0;
      a4 = *(float *)(v11 + 20) * v9;
      v15 = v12 - a4;
      v10 = a4 + v12;
      if (*a2 >= v15 && *a2 <= v10)
      {
        v17 = *(float *)(v11 + 24) * v9;
        v18 = v14 + v17;
        if (fabs(v14 + v17) > 180.0)
        {
          v19 = dbl_18D318D20[v18 >= 0.0];
          v18 = fmod(v18 + v19, 360.0) - v19;
          v9 = 0.5;
        }
        v10 = v14 - v17;
        if (vabdd_f64(v14, v17) > 180.0)
        {
          v20 = dbl_18D318D20[v10 >= 0.0];
          v10 = fmod(v10 + v20, 360.0) - v20;
        }
        a4 = a2[1];
        if (a4 >= v10 && a4 <= v18)
          break;
      }
      v4 = *((_QWORD *)a1 + 16);
      v7 = ++v8;
      if (v8 >= (unint64_t)((*((_QWORD *)a1 + 17) - v4) >> 3))
        goto LABEL_22;
    }
    v22 = 0x100000000;
  }
  return v22 | v8;
}

uint64_t raven::RavenFacetVisibilityData::SetBuildingCoordinateTransformInstance(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 184) = a2;
  return result;
}

raven::RavenFacetVisibilityData *raven::RavenFacetVisibilityData::RavenFacetVisibilityData(raven::RavenFacetVisibilityData *this)
{
  _QWORD *v2;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v2 = (_QWORD *)((char *)this + 24);
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0x40E3880000000000;
  *((_BYTE *)this + 104) = 3;
  *((int64x2_t *)this + 7) = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0x4010000000000000;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 20) = (char *)this + 168;
  *((_QWORD *)this + 23) = 0;
  sub_18D17C9C0((char **)this + 16, 0x19uLL);
  sub_18D17CA78(v2, 0x2BCuLL);
  return this;
}

void sub_18D17C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_18D03D9B4(v12, *(_QWORD **)(v10 + 168));
  sub_18D17CF38(&a10);
  sub_18D03D9B4(v11, *(_QWORD **)(v10 + 80));
  a10 = (void **)(v10 + 48);
  sub_18D17CFB4(&a10);
  sub_18D17CF38(&a10);
  sub_18D03D9B4(v10, *(_QWORD **)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_18D17C9C0(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      sub_18D07AFE4();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)sub_18D0788C8(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return sub_18D17CE04((uint64_t)&v14);
  }
  return result;
}

_QWORD *sub_18D17CA78(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      sub_18D07AFE4();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)sub_18D07BF3C(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[8 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)sub_18D17CE04((uint64_t)&v12);
  }
  return result;
}

void raven::RavenFacetVisibilityData::Reset(int64x2_t *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)this[8].i64[0];
  v3 = (_QWORD *)this[8].i64[1];
  while (v3 != v2)
  {
    v5 = *--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  this[8].i64[1] = (uint64_t)v2;
  sub_18D03D9B4((uint64_t)&this[4].i64[1], (_QWORD *)this[5].i64[0]);
  this[4].i64[1] = (uint64_t)this[5].i64;
  this[5].i64[1] = 0;
  this[5].i64[0] = 0;
  this[7] = vdupq_n_s64(0x7FF8000000000000uLL);
  sub_18D03D9B4((uint64_t)this[10].i64, (_QWORD *)this[10].i64[1]);
  this[10].i64[0] = (uint64_t)&this[10].i64[1];
  this[11].i64[0] = 0;
  this[10].i64[1] = 0;
  raven::RavenFacetVisibilityData::ResetFacetVisibilityContainers((raven::RavenFacetVisibilityData *)this);
}

void raven::RavenFacetVisibilityData::ResetFacetVisibilityContainers(raven::RavenFacetVisibilityData *this)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;

  v3 = (_QWORD *)*((_QWORD *)this + 3);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v2 = (char *)this + 24;
  while (v4 != v3)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *((_QWORD *)this + 4) = v3;
  sub_18D17CC78((uint64_t)v2);
  v8 = (uint64_t *)*((_QWORD *)this + 6);
  for (i = (uint64_t *)*((_QWORD *)this + 7); i != v8; sub_18D17D930(i, 0))
    --i;
  *((_QWORD *)this + 7) = v8;
  sub_18D17CD40((uint64_t)this + 48);
  sub_18D03D9B4((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
}

uint64_t sub_18D17CC78(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[5];

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD **)(result + 8);
  v3 = ((uint64_t)v2 - *(_QWORD *)result) >> 3;
  if (v3 < (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 3)
  {
    v4 = (_QWORD *)result;
    v14[4] = result + 16;
    if (v2 == v1)
    {
      v9 = 0;
      v7 = 8 * v3;
    }
    else
    {
      v5 = (char *)sub_18D07BF3C(v3);
      v6 = (_QWORD *)*v4;
      v1 = (_QWORD *)v4[1];
      v7 = (uint64_t)&v5[8 * v3];
      v9 = &v5[8 * v8];
      if (v1 != (_QWORD *)*v4)
      {
        v10 = &v5[8 * v3];
        do
        {
          v11 = *--v1;
          *v1 = 0;
          *((_QWORD *)v10 - 1) = v11;
          v10 -= 8;
        }
        while (v1 != v6);
        v12 = (_QWORD *)*v4;
        v1 = (_QWORD *)v4[1];
        goto LABEL_9;
      }
    }
    v12 = v1;
    v10 = (char *)v7;
LABEL_9:
    *v4 = v10;
    v4[1] = v7;
    v13 = v4[2];
    v4[2] = v9;
    v14[2] = v1;
    v14[3] = v13;
    v14[0] = v12;
    v14[1] = v12;
    return sub_18D17CE04((uint64_t)v14);
  }
  return result;
}

void sub_18D17CD30(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18D17CD20);
}

uint64_t sub_18D17CD40(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[5];

  v3 = *(_QWORD *)(a1 + 16);
  result = a1 + 16;
  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = ((uint64_t)v5 - *(_QWORD *)a1) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    v16[4] = result;
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_18D0788C8(result, v6);
      v8 = *(_QWORD **)a1;
      v4 = *(_QWORD **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v4 != *(_QWORD **)a1)
      {
        v12 = &v7[8 * v6];
        do
        {
          v13 = *--v4;
          *v4 = 0;
          *((_QWORD *)v12 - 1) = v13;
          v12 -= 8;
        }
        while (v4 != v8);
        v14 = *(_QWORD **)a1;
        v4 = *(_QWORD **)(a1 + 8);
        goto LABEL_9;
      }
    }
    v14 = v4;
    v12 = (char *)v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v11;
    v16[2] = v4;
    v16[3] = v15;
    v16[0] = v14;
    v16[1] = v14;
    return sub_18D17CEE8((uint64_t)v16);
  }
  return result;
}

void sub_18D17CDF4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18D17CDE4);
}

uint64_t sub_18D17CE04(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_18D17CE64(uint64_t a1, double a2)
{
  double v3;
  double v4;

  if (!*(_BYTE *)(a1 + 24))
    sub_18D164CA0();
  v3 = -(*(double *)(a1 + 8) - a2 * 0.0174532925);
  if (fabs(v3) > 3.14159265)
  {
    v4 = dbl_18D318D30[v3 >= 0.0];
    v3 = fmod(v3 + v4, 6.28318531) - v4;
  }
  return v3 * *(double *)(a1 + 176);
}

uint64_t sub_18D17CEE8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_18D17D930((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18D17CF38(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18D17CFB4(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_18D17D930(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_18D17D028(_QWORD *a1)
{
  *a1 = &off_1E25C0D08;
  a1[1] = &unk_1E25C0DA0;
  sub_18D04344C((uint64_t)(a1 + 3));
  return a1;
}

void sub_18D17D05C(_QWORD *a1)
{
  *a1 = &off_1E25C0D08;
  a1[1] = &unk_1E25C0DA0;
  sub_18D04344C((uint64_t)(a1 + 3));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D17D0A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D0B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D0C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D0D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D0E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D0F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D100(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D110(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D120(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D130(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D140(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D150(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_18D17D160(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
}

double sub_18D17D170(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v4 = *a2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v6 = a2[1] - v5;
  v8 = a2[2] - v7;
  v9 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v11 = v10;
  v13 = v12;
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v17 = v11 * v15 + v9 * v14 + v13 * v16;
  return 1.0 / (1.0 - v17 * v17) * (v6 * (v11 - v15 * v17) + v4 * (v9 - v14 * v17) + v8 * (v13 - v16 * v17));
}

void sub_18D17D264(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v3 = a1 + 24;
  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCF68;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E25C0CC8;
  v4[1].__shared_owners_ = v3;
  v4[1].__shared_weak_owners_ = 0;
  *a2 = v4 + 1;
  a2[1] = v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t sub_18D17D310(_QWORD *a1)
{
  *(a1 - 1) = &off_1E25C0D08;
  *a1 = &unk_1E25C0DA0;
  return sub_18D04344C((uint64_t)(a1 + 2));
}

void sub_18D17D328(_QWORD *a1)
{
  *(a1 - 1) = &off_1E25C0D08;
  *a1 = &unk_1E25C0DA0;
  sub_18D04344C((uint64_t)(a1 + 2));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D17D370(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18D17D264(a1 - 8, a2);
}

void sub_18D17D37C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D17D38C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D17D3BC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_18D17D3CC()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D17D3E0(uint64_t result)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(*(_QWORD *)(result + 8) + 16);
  return result;
}

uint64_t sub_18D17D3F0(uint64_t result)
{
  *(_QWORD *)(result + 16) = **(_QWORD **)(result + 16);
  return result;
}

BOOL sub_18D17D400(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 0;
}

uint64_t sub_18D17D410(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
}

uint64_t *sub_18D17D41C(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unint64_t v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = v2;
  v8 = *((unsigned __int16 *)a2 + 5);
  do
  {
    v9 = v3[4];
    if (v9 == v5)
    {
      v10 = *((unsigned __int16 *)v3 + 20);
      v11 = *((unsigned __int16 *)v3 + 21);
      v12 = v10 == v6 && v11 == v8;
      if (v12)
      {
        v7 = v3;
        goto LABEL_16;
      }
      v13 = v10 > v6;
      v12 = v11 == v8;
      v14 = v11 > v8;
      if (v12)
        v14 = v13;
    }
    else
    {
      v14 = v9 > v5;
    }
    if (v14)
      v7 = v3;
    else
      ++v3;
LABEL_16:
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v15 = v7[4];
  v16 = v5 > v15;
  if (v5 != v15)
    goto LABEL_23;
  v17 = *((unsigned __int16 *)v7 + 20);
  v18 = *((unsigned __int16 *)v7 + 21);
  if (v6 != v17 || v8 != v18)
  {
    v16 = v8 > v18;
    if (v8 == v18)
      v16 = v6 > v17;
LABEL_23:
    if (!v16)
      return v2;
  }
  return v7;
}

void sub_18D17D4D8(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t prime;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *i;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;

  v4 = a2[2];
  v5 = HIDWORD(v4);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    v11 = 1;
    if (v8 >= 3)
      v11 = (v8 & (v8 - 1)) != 0;
    v12 = v11 | (2 * v8);
    v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13)
      prime = (int8x8_t)v13;
    else
      prime = (int8x8_t)v12;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_92;
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_43;
    v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v21);
    }
    else
    {
      v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2)
        v21 = v23;
    }
    if (*(_QWORD *)&prime <= v21)
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(_QWORD *)&prime >> 61)
        sub_18D0788A0();
      v15 = operator new(8 * *(_QWORD *)&prime);
      v16 = *(void **)a1;
      *(_QWORD *)a1 = v15;
      if (v16)
        operator delete(v16);
      v17 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17++) = 0;
      while (*(_QWORD *)&prime != v17);
      v18 = *(_QWORD **)(a1 + 16);
      if (v18)
      {
        v19 = v18[1];
        v20 = (uint8x8_t)vcnt_s8(prime);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (v19 >= *(_QWORD *)&prime)
            v19 %= *(_QWORD *)&prime;
        }
        else
        {
          v19 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = a1 + 16;
        for (i = (_QWORD *)*v18; *v18; i = (_QWORD *)*v18)
        {
          v25 = i[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v25 >= *(_QWORD *)&prime)
              v25 %= *(_QWORD *)&prime;
          }
          else
          {
            v25 &= *(_QWORD *)&prime - 1;
          }
          if (v25 == v19)
          {
            v18 = i;
          }
          else
          {
            v26 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v25))
            {
              do
              {
                v27 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26 && i[2] == v26[2]);
              *v18 = v26;
              *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v25);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v25) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v18;
              v18 = i;
              v19 = v25;
            }
          }
        }
      }
      v8 = (unint64_t)prime;
    }
    else
    {
      v39 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v39)
        operator delete(v39);
      v8 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = v7;
    if (v8 <= v7)
      v29 = v7 % v8;
  }
  else
  {
    v29 = (v8 - 1) & v7;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
  if (v30)
  {
    v31 = 0;
    do
    {
      v32 = v30;
      v30 = (_QWORD *)*v30;
      if (!v30)
        break;
      v33 = v30[1];
      if (v28.u32[0] > 1uLL)
      {
        v34 = v30[1];
        if (v33 >= v8)
          v34 = v33 % v8;
      }
      else
      {
        v34 = v33 & (v8 - 1);
      }
      if (v34 != v29)
        break;
      v35 = v33 == v7 && v30[2] == a2[2];
      v36 = v31 & !v35;
      v31 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    v32 = 0;
  }
  v37 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v37 >= v8)
      v37 %= v8;
  }
  else
  {
    v37 &= v8 - 1;
  }
  if (!v32)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = a1 + 16;
    if (!*a2)
      goto LABEL_79;
    v38 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8)
        v38 %= v8;
    }
    else
    {
      v38 &= v8 - 1;
    }
LABEL_78:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a2;
    goto LABEL_79;
  }
  *a2 = *v32;
  *v32 = a2;
  if (*a2)
  {
    v38 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8)
        v38 %= v8;
    }
    else
    {
      v38 &= v8 - 1;
    }
    if (v38 != v37)
      goto LABEL_78;
  }
LABEL_79:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t *sub_18D17D930(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_18D04344C(v2 + 8);
    JUMPOUT(0x18D78B5D4);
  }
  return result;
}

void sub_18D17D97C(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_18D0788A0();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_18D17DD7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void raven::RavenUserSpeedActiveObject::RavenUserSpeedActiveObject(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(_QWORD *)v2 = &off_1E25C3500;
  *(_BYTE *)(v2 + 480) = 0;
  *(_QWORD *)(v2 + 488) = 0;
  *(_BYTE *)(v2 + 496) = 0;
  *(_BYTE *)(v2 + 688) = 0;
  *(_BYTE *)(v2 + 696) = 0;
  *(_BYTE *)(v2 + 904) = 0;
  *(_BYTE *)(v2 + 912) = 0;
  *(_BYTE *)(v2 + 1056) = 0;
  *(_BYTE *)(v2 + 1064) = 0;
  *(_BYTE *)(v2 + 1224) = 0;
  *(_BYTE *)(v2 + 1232) = 0;
  *(_BYTE *)(v2 + 1352) = 0;
}

{
  uint64_t v2;

  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(_QWORD *)v2 = &off_1E25C3500;
  *(_BYTE *)(v2 + 480) = 0;
  *(_QWORD *)(v2 + 488) = 0;
  *(_BYTE *)(v2 + 496) = 0;
  *(_BYTE *)(v2 + 688) = 0;
  *(_BYTE *)(v2 + 696) = 0;
  *(_BYTE *)(v2 + 904) = 0;
  *(_BYTE *)(v2 + 912) = 0;
  *(_BYTE *)(v2 + 1056) = 0;
  *(_BYTE *)(v2 + 1064) = 0;
  *(_BYTE *)(v2 + 1224) = 0;
  *(_BYTE *)(v2 + 1232) = 0;
  *(_BYTE *)(v2 + 1352) = 0;
}

uint64_t raven::RavenUserSpeedActiveObject::Configure(cnframework::ActiveObjectBase *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *__p[2];
  char v26;
  unsigned __int8 v27;
  __int16 v28;

  if (*((_BYTE *)this + 480) && cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v28 = 12;
    v27 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v26 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  *((_BYTE *)this + 480) = 0;
  v10 = *a2;
  if (*a2 && *(_BYTE *)(v10 + 33))
  {
    *((_QWORD *)this + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay(this, 0.0);
    *((_BYTE *)this + 480) = 1;
    v11 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)this + 48))(this);
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      v28 = 12;
      v27 = 1;
      (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
      if (v26 >= 0)
        v17 = __p;
      else
        LOBYTE(v17) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s configured successfully.", v12, v13, v14, v15, v16, (char)v17);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  else
  {
    v28 = 12;
    v27 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v26 >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Error: %s could not be configured.", v19, v20, v21, v22, v23, (char)v24);
    if (v26 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D17DFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenUserSpeedActiveObject::IsConfigured(raven::RavenUserSpeedActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

uint64_t raven::RavenUserSpeedActiveObject::HandleEvent(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(result + 688))
  {
    v2 = *(_OWORD *)(a2 + 8);
    v3 = *(_OWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(result + 552) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 536) = v4;
    *(_OWORD *)(result + 520) = v3;
    *(_OWORD *)(result + 504) = v2;
    v5 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 88);
    v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(result + 616) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(result + 600) = v7;
    *(_OWORD *)(result + 584) = v6;
    *(_OWORD *)(result + 568) = v5;
    v8 = *(_OWORD *)(a2 + 136);
    v9 = *(_OWORD *)(a2 + 152);
    v10 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(result + 680) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(result + 664) = v10;
    *(_OWORD *)(result + 648) = v9;
    *(_OWORD *)(result + 632) = v8;
  }
  else
  {
    *(_QWORD *)(result + 496) = &unk_1E25C2AB0;
    v11 = *(_OWORD *)(a2 + 8);
    v12 = *(_OWORD *)(a2 + 24);
    v13 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(result + 552) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 536) = v13;
    *(_OWORD *)(result + 520) = v12;
    *(_OWORD *)(result + 504) = v11;
    v14 = *(_OWORD *)(a2 + 72);
    v15 = *(_OWORD *)(a2 + 88);
    v16 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(result + 616) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(result + 600) = v16;
    *(_OWORD *)(result + 584) = v15;
    *(_OWORD *)(result + 568) = v14;
    v17 = *(_OWORD *)(a2 + 136);
    v18 = *(_OWORD *)(a2 + 152);
    v19 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(result + 680) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(result + 664) = v19;
    *(_OWORD *)(result + 648) = v18;
    *(_OWORD *)(result + 632) = v17;
    *(_BYTE *)(result + 688) = 1;
  }
  if ((*(_BYTE *)(a2 + 104) & 0xFE) != 2)
  {
    if (*(_BYTE *)(result + 1352))
      *(_BYTE *)(result + 1352) = 0;
  }
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*(_BYTE *)(result + 1056))
  {
    *(_OWORD *)(result + 920) = *(_OWORD *)(a2 + 8);
    v2 = *(_OWORD *)(a2 + 24);
    v3 = *(_OWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 984) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(result + 968) = v4;
    *(_OWORD *)(result + 952) = v3;
    *(_OWORD *)(result + 936) = v2;
    v5 = *(_OWORD *)(a2 + 88);
    v6 = *(_OWORD *)(a2 + 104);
    v7 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(result + 1048) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(result + 1032) = v7;
    *(_OWORD *)(result + 1016) = v6;
    *(_OWORD *)(result + 1000) = v5;
  }
  else
  {
    *(_QWORD *)(result + 912) = &unk_1E25C26E8;
    *(_OWORD *)(result + 920) = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 984) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(result + 968) = v10;
    *(_OWORD *)(result + 952) = v9;
    *(_OWORD *)(result + 936) = v8;
    v11 = *(_OWORD *)(a2 + 88);
    v12 = *(_OWORD *)(a2 + 104);
    v13 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(result + 1048) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(result + 1032) = v13;
    *(_OWORD *)(result + 1016) = v12;
    *(_OWORD *)(result + 1000) = v11;
    *(_BYTE *)(result + 1056) = 1;
  }
  if (*(_BYTE *)(a2 + 104) != 3)
  {
    if (*(_BYTE *)(result + 1352))
      *(_BYTE *)(result + 1352) = 0;
  }
  return result;
}

void raven::RavenUserSpeedActiveObject::HandleEvent(raven::RavenUserSpeedActiveObject *this, const raven::FitnessSessionEvent *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unsigned __int8 v31;
  __int16 v32;

  if (*((_BYTE *)this + 904))
  {
    *((_OWORD *)this + 44) = *(_OWORD *)((char *)a2 + 8);
    v4 = *(_OWORD *)((char *)a2 + 24);
    v5 = *(_OWORD *)((char *)a2 + 40);
    v6 = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 47) = *(_OWORD *)((char *)a2 + 56);
    *((_OWORD *)this + 48) = v6;
    *((_OWORD *)this + 45) = v4;
    *((_OWORD *)this + 46) = v5;
    v7 = *(_OWORD *)((char *)a2 + 88);
    v8 = *(_OWORD *)((char *)a2 + 104);
    v9 = *(_OWORD *)((char *)a2 + 136);
    *((_OWORD *)this + 51) = *(_OWORD *)((char *)a2 + 120);
    *((_OWORD *)this + 52) = v9;
    *((_OWORD *)this + 49) = v7;
    *((_OWORD *)this + 50) = v8;
    v10 = *(_OWORD *)((char *)a2 + 152);
    v11 = *(_OWORD *)((char *)a2 + 168);
    v12 = *(_OWORD *)((char *)a2 + 184);
    *((_QWORD *)this + 112) = *((_QWORD *)a2 + 25);
    *((_OWORD *)this + 54) = v11;
    *((_OWORD *)this + 55) = v12;
    *((_OWORD *)this + 53) = v10;
  }
  else
  {
    *((_QWORD *)this + 87) = &unk_1E25C2BD8;
    *((_OWORD *)this + 44) = *(_OWORD *)((char *)a2 + 8);
    v13 = *(_OWORD *)((char *)a2 + 24);
    v14 = *(_OWORD *)((char *)a2 + 40);
    v15 = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 47) = *(_OWORD *)((char *)a2 + 56);
    *((_OWORD *)this + 48) = v15;
    *((_OWORD *)this + 45) = v13;
    *((_OWORD *)this + 46) = v14;
    v16 = *(_OWORD *)((char *)a2 + 88);
    v17 = *(_OWORD *)((char *)a2 + 104);
    v18 = *(_OWORD *)((char *)a2 + 136);
    *((_OWORD *)this + 51) = *(_OWORD *)((char *)a2 + 120);
    *((_OWORD *)this + 52) = v18;
    *((_OWORD *)this + 49) = v16;
    *((_OWORD *)this + 50) = v17;
    v19 = *(_OWORD *)((char *)a2 + 152);
    v20 = *(_OWORD *)((char *)a2 + 168);
    v21 = *(_OWORD *)((char *)a2 + 184);
    *((_QWORD *)this + 112) = *((_QWORD *)a2 + 25);
    *((_OWORD *)this + 54) = v20;
    *((_OWORD *)this + 55) = v21;
    *((_OWORD *)this + 53) = v19;
    *((_BYTE *)this + 904) = 1;
  }
  v22 = *((unsigned __int8 *)a2 + 104);
  if (v22 <= 9 && ((1 << v22) & 0x370) != 0)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      v32 = 12;
      v31 = 0;
      v23 = (*(uint64_t (**)(const raven::FitnessSessionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v30 = v24 + (double)v23;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "t,%.3lf,UserSpeedAO: Received fitness session does not expect steps,disabling user speed events,type,%d", v25, v26, v27, v28, v29, SLOBYTE(v30));
    }
    if (*((_BYTE *)this + 1352))
      *((_BYTE *)this + 1352) = 0;
  }
}

void raven::RavenUserSpeedActiveObject::HandleEvent(raven::RavenUserSpeedActiveObject *this, const raven::StepCountEvent *a2)
{
  unsigned int v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  __int128 v63;
  int8x16_t v64;
  _OWORD *v65;
  uint64_t v66;
  double v67;
  int8x16_t v68;
  int8x16_t v69;
  uint64_t v70;
  _OWORD *v71;
  double v72;
  double v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  double v81;
  double v82;
  int8x16_t v83;
  int8x16_t v84;
  uint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  _QWORD v116[2];
  _BYTE v117[23];
  _BYTE v118[24];
  _QWORD v119[17];
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 1056) || *((_BYTE *)this + 1016) != 3)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v119[0]) = 12;
      v118[0] = 0;
      v12 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
      v110 = v13 + (double)v12;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, v118, "t,%.3lf,UserSpeedAO: Not Moving", v14, v15, v16, v17, v18, SLOBYTE(v110));
    }
    goto LABEL_51;
  }
  if (!*((_BYTE *)this + 688))
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v119[0]) = 12;
      v118[0] = 0;
      v19 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
      v111 = v20 + (double)v19;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, v118, "t,%.3lf,UserSpeedAO: Activity state unavailable,Ignoring user speed event", v21, v22, v23, v24, v25, SLOBYTE(v111));
    }
    goto LABEL_51;
  }
  if ((*((_BYTE *)this + 600) & 0xFE) != 2)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v119[0]) = 12;
      v118[0] = 0;
      v26 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
      v112 = v27 + (double)v26;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, v118, "t,%.3lf,UserSpeedAO: Activity,%u,Not Pedestrian,Ignoring user speed event,Steps,%u", v28, v29, v30, v31, v32, SLOBYTE(v112));
    }
    goto LABEL_51;
  }
  if (*((_BYTE *)this + 904))
  {
    v4 = *((unsigned __int8 *)this + 800);
    if (v4 <= 9 && ((1 << v4) & 0x370) != 0)
    {
      if (!cnprint::CNPrinter::GetLogLevel(this))
      {
        LOWORD(v119[0]) = 12;
        v118[0] = 0;
        v5 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
        v109 = v6 + (double)v5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, v118, "t,%.3lf,UserSpeedAO: Received step counts when fitness session does not expect steps; ignoring user speed event,type,%d",
          v7,
          v8,
          v9,
          v10,
          v11,
          SLOBYTE(v109));
      }
      goto LABEL_51;
    }
  }
  if ((*((_QWORD *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    v33 = 0.0;
  else
    v33 = *((double *)a2 + 14);
  if (v33 > 11.4822547)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v119[0]) = 12;
      v118[0] = 0;
      v34 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
      v113 = v35 + (double)v34;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, v118, "t,%10.3lf,UserSpeedAO: Rejected %lf > %lf max", v36, v37, v38, v39, v40, SLOBYTE(v113));
    }
    goto LABEL_51;
  }
  if (v33 < 0.1)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v119[0]) = 12;
      v118[0] = 0;
      v41 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
      v114 = v42 + (double)v41;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, v118, "t,%.3lf,UserSpeedAO: Rejected %lf < %lf min", v43, v44, v45, v46, v47, SLOBYTE(v114));
    }
    goto LABEL_51;
  }
  v48 = *((double *)a2 + 15);
  v49 = *((double *)a2 + 16);
  if (v33 < v48
    || (*((_QWORD *)a2 + 15) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v33 > v49)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v119[0]) = 12;
      v118[0] = 0;
      v53 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
      v115 = v54 + (double)v53;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, v118, "t,%.3lf,UserSpeedAO: Rejected %lf < %lf OR > %lf", v55, v56, v57, v58, v59, SLOBYTE(v115));
    }
    goto LABEL_51;
  }
  v60 = fmax(v33 - v48, 0.1);
  v61 = fmax(v49 - v33, 0.1);
  if (!*((_BYTE *)this + 1224))
  {
    *((_QWORD *)this + 133) = &unk_1E25C23D8;
    v95 = *(_OWORD *)((char *)a2 + 8);
    *((_OWORD *)this + 68) = *(_OWORD *)((char *)a2 + 24);
    *((_OWORD *)this + 67) = v95;
    v96 = *(_OWORD *)((char *)a2 + 40);
    v97 = *(_OWORD *)((char *)a2 + 56);
    v98 = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 72) = *(_OWORD *)((char *)a2 + 88);
    *((_OWORD *)this + 71) = v98;
    *((_OWORD *)this + 70) = v97;
    *((_OWORD *)this + 69) = v96;
    v99 = *(_OWORD *)((char *)a2 + 104);
    v100 = *(_OWORD *)((char *)a2 + 120);
    v101 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 152) = *((_QWORD *)a2 + 19);
    *((_OWORD *)this + 75) = v101;
    *((_OWORD *)this + 74) = v100;
    *((_OWORD *)this + 73) = v99;
    *((_BYTE *)this + 1224) = 1;
    goto LABEL_51;
  }
  v62 = *(double *)(*((_QWORD *)this + 61) + 3280);
  v119[0] = &unk_1E25C23D8;
  *(_OWORD *)&v119[13] = *((_OWORD *)this + 73);
  *(_OWORD *)&v119[15] = *((_OWORD *)this + 74);
  v120 = *((_OWORD *)this + 75);
  v121 = *((_QWORD *)this + 152);
  v63 = *((_OWORD *)this + 70);
  *(_OWORD *)&v119[5] = *((_OWORD *)this + 69);
  *(_OWORD *)&v119[7] = v63;
  *(_OWORD *)&v119[9] = *((_OWORD *)this + 71);
  *(_OWORD *)&v119[11] = *((_OWORD *)this + 72);
  v64 = *((int8x16_t *)this + 68);
  v65 = (_OWORD *)((char *)a2 + 8);
  *(_OWORD *)&v119[1] = *((_OWORD *)this + 67);
  *(int8x16_t *)&v119[3] = v64;
  v66 = CNTimeSpan::operator-((uint64_t)a2 + 8, &v119[1], v64, *(int8x16_t *)&v119[1]);
  *(_QWORD *)v118 = v66;
  *(double *)&v118[8] = v67;
  if (v66 < 0 || (*(double *)v68.i64 = v67, v67 < 0.0))
  {
    v66 = CNTimeSpan::operator-((double *)v118, v68, v69);
    v68.i64[0] = v70;
  }
  v71 = (_OWORD *)((char *)this + 1072);
  v72 = *(double *)v68.i64 + (double)v66;
  if (v72 <= 1.0 || v72 >= 10.0)
  {
    v102 = *(_OWORD *)((char *)a2 + 24);
    *v71 = *v65;
    *((_OWORD *)this + 68) = v102;
    v103 = *(_OWORD *)((char *)a2 + 40);
    v104 = *(_OWORD *)((char *)a2 + 56);
    v105 = *(_OWORD *)((char *)a2 + 88);
    *((_OWORD *)this + 71) = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 72) = v105;
    *((_OWORD *)this + 69) = v103;
    *((_OWORD *)this + 70) = v104;
    v106 = *(_OWORD *)((char *)a2 + 104);
    v107 = *(_OWORD *)((char *)a2 + 120);
    v108 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 152) = *((_QWORD *)a2 + 19);
    *((_OWORD *)this + 74) = v107;
    *((_OWORD *)this + 75) = v108;
    *((_OWORD *)this + 73) = v106;
LABEL_51:
    if (*((_BYTE *)this + 1352))
      *((_BYTE *)this + 1352) = 0;
    return;
  }
  v73 = (*((double *)a2 + 18) - *((double *)&v120 + 1)) / v72;
  v74 = *(_OWORD *)((char *)a2 + 24);
  *v71 = *v65;
  *((_OWORD *)this + 68) = v74;
  v75 = *(_OWORD *)((char *)a2 + 40);
  v76 = *(_OWORD *)((char *)a2 + 56);
  v77 = *(_OWORD *)((char *)a2 + 88);
  *((_OWORD *)this + 71) = *(_OWORD *)((char *)a2 + 72);
  *((_OWORD *)this + 72) = v77;
  *((_OWORD *)this + 69) = v75;
  *((_OWORD *)this + 70) = v76;
  v78 = *(_OWORD *)((char *)a2 + 104);
  v79 = *(_OWORD *)((char *)a2 + 120);
  v80 = *(_OWORD *)((char *)a2 + 136);
  *((_QWORD *)this + 152) = *((_QWORD *)a2 + 19);
  *((_OWORD *)this + 74) = v79;
  *((_OWORD *)this + 75) = v80;
  *((_OWORD *)this + 73) = v78;
  if (v73 <= 0.0)
    goto LABEL_51;
  v81 = sqrt(v61 * (v61 * (v60 / (v60 + v61))) + v60 * (v61 / (v60 + v61)) * v60) * v62;
  v82 = vabdd_f64(v73, v33) / v81;
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v66))
  {
    LOWORD(v119[0]) = 12;
    v118[0] = 0;
    v85 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
    v87 = v86 + (double)v85;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, v118, "t,%.3lf,UserSpeedAO: raw_spd,%.2lf,pedSpeedMps,%.2lf,pedSpeedSigmaMps,%.2lf,spd_diff,%.2lf,spd_diff_ratio,%.2lf,foot_step_count_,%u,step_count_event_id_,%d,raw_distance_from_accel,%.2lf,last_activity,%u", v88, v89, v90, v91, v92, SLOBYTE(v87));
  }
  v83.i64[0] = 2.5;
  if (v82 < 2.5)
  {
    memset((char *)v119 + 7, 0, 17);
    memset(&v118[7], 0, 17);
    *(_QWORD *)&v117[7] = 0;
    *(_QWORD *)&v117[15] = 0;
    v116[0] = 2;
    v116[1] = 0x3FE1EB851EB851ECLL;
    v93 = CNTimeSpan::operator+((uint64_t)a2 + 8, v116, v83, v84);
    if (*((_BYTE *)this + 1352))
    {
      *((_QWORD *)this + 155) = v93;
      *((_QWORD *)this + 156) = v94;
      *((_BYTE *)this + 1256) = 0;
      *(_OWORD *)((char *)this + 1257) = *(_OWORD *)v119;
      *(_QWORD *)((char *)this + 1273) = v119[2];
      *(_OWORD *)((char *)this + 1281) = *(_OWORD *)v118;
      *(_QWORD *)((char *)this + 1297) = *(_QWORD *)&v118[16];
      *((_QWORD *)this + 165) = *(_QWORD *)&v117[15];
      *(_OWORD *)((char *)this + 1305) = *(_OWORD *)v117;
    }
    else
    {
      *((_QWORD *)this + 154) = &unk_1E25C2438;
      *((_QWORD *)this + 155) = v93;
      *((_QWORD *)this + 156) = v94;
      *((_BYTE *)this + 1256) = 0;
      *(_OWORD *)((char *)this + 1257) = *(_OWORD *)v119;
      *(_QWORD *)((char *)this + 1273) = v119[2];
      *(_OWORD *)((char *)this + 1281) = *(_OWORD *)v118;
      *(_QWORD *)((char *)this + 1297) = *(_QWORD *)&v118[16];
      *((_QWORD *)this + 165) = *(_QWORD *)&v117[15];
      *(_OWORD *)((char *)this + 1305) = *(_OWORD *)v117;
      *((_BYTE *)this + 1352) = 1;
    }
    *((_QWORD *)this + 166) = 0x7FF8000000000000;
    *((double *)this + 167) = v33;
    *((double *)this + 168) = v81;
  }
}

void sub_18D17EA80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D17EB74(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D17EB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D17EB74@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D17EBCC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D17EBB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D17EBCC(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D17EC18((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D17EC04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D17EC18(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D17ED30(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D17ECF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D17ED30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C1750;
  *(_QWORD *)(v4 + 8) = &unk_1E25C2438;
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v6;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v5;
  v8 = *a1;
  *a1 = v4;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_18D17EDD4()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D17EDE8()
{
}

__n128 sub_18D17EDF4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1750;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2438;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

void raven::RavenSolutionActiveObject::WriteReceiverDifferentialCodeBiasesToProtobuf(cnlogging::ProtobufOutputStream **this, const raven::ReceiverDifferentialCodeBiasesEvent *a2)
{
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[40];
  uint64_t v9;
  int v10;

  if (*((_BYTE *)this[74] + 3693) && this[1382])
  {
    CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v8);
    v10 |= 2u;
    v5 = v9;
    if (!v9)
    {
      v5 = operator new();
      *(_QWORD *)v5 = &off_1E25BBD08;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_OWORD *)(v5 + 248) = 0u;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 264) = 0u;
      *(_OWORD *)(v5 + 280) = 0u;
      *(_OWORD *)(v5 + 296) = 0u;
      *(_OWORD *)(v5 + 308) = 0u;
      v9 = v5;
    }
    *(_DWORD *)(v5 + 320) |= 2u;
    v6 = *(_QWORD *)(v5 + 272);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      *(_DWORD *)(v6 + 28) |= 1u;
      if (v7)
      {
LABEL_10:
        raven::ConvertReceiverDifferentialCodeBiasesEventToProtobuf(a2, (const raven::ReceiverDifferentialCodeBiasesEvent *)v7, v4);
        cnlogging::ProtobufOutputStream::append(this[1382], (const wireless_diagnostics::google::protobuf::MessageLite *)v8);
        cnlogging::ProtobufOutputStream::flush(this[1382]);
        CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v8);
        return;
      }
    }
    else
    {
      v6 = operator new();
      *(_QWORD *)v6 = &off_1E25BFF20;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v5 + 272) = v6;
      *(_DWORD *)(v6 + 28) |= 1u;
    }
    v7 = operator new();
    *(_QWORD *)v7 = &off_1E25BF6B0;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v6 + 8) = v7;
    goto LABEL_10;
  }
}

void sub_18D17F020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

void raven::RavenSolutionActiveObject::WriteThinShellIonosphereParametersToProtobuf(raven::RavenSolutionActiveObject *this, const raven::ThinShellIonosphereParametersEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[40];
  uint64_t v18;
  int v19;

  if (*(_BYTE *)(*((_QWORD *)this + 74) + 3693) && *((_QWORD *)this + 1382))
  {
    CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v17);
    v19 |= 2u;
    v4 = v18;
    if (!v18)
    {
      v4 = operator new();
      *(_QWORD *)v4 = &off_1E25BBD08;
      *(_OWORD *)(v4 + 24) = 0u;
      *(_OWORD *)(v4 + 40) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_OWORD *)(v4 + 248) = 0u;
      *(_OWORD *)(v4 + 8) = 0u;
      *(_OWORD *)(v4 + 264) = 0u;
      *(_OWORD *)(v4 + 280) = 0u;
      *(_OWORD *)(v4 + 296) = 0u;
      *(_OWORD *)(v4 + 308) = 0u;
      v18 = v4;
    }
    *(_DWORD *)(v4 + 320) |= 2u;
    v5 = *(_QWORD *)(v4 + 272);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 28) |= 1u;
      if (v6)
      {
LABEL_10:
        v7 = *((_OWORD *)this + 34);
        v13 = *((_OWORD *)this + 33);
        v14 = v7;
        v8 = *((_OWORD *)this + 36);
        v15 = *((_OWORD *)this + 35);
        v16 = v8;
        v9 = *((_OWORD *)this + 32);
        v11 = *((_OWORD *)this + 31);
        v10 = &unk_1E25C2218;
        v12 = v9;
        raven::ConvertThinShellIonosphereParametersEventToProtobuf((uint64_t)a2, v6, (uint64_t)&v10);
        cnlogging::ProtobufOutputStream::append(*((cnlogging::ProtobufOutputStream **)this + 1382), (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        cnlogging::ProtobufOutputStream::flush(*((cnlogging::ProtobufOutputStream **)this + 1382));
        CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v17);
        return;
      }
    }
    else
    {
      v5 = operator new();
      *(_QWORD *)v5 = &off_1E25BFF20;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v4 + 272) = v5;
      *(_DWORD *)(v5 + 28) |= 1u;
    }
    v6 = operator new();
    *(_QWORD *)v6 = &off_1E25BF6B0;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v5 + 8) = v6;
    goto LABEL_10;
  }
}

void sub_18D17F228(_Unwind_Exception *a1)
{
  uint64_t v1;

  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSolutionActiveObject::Configure(void ***a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *p_p;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  cnprint::CNPrinter *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  void *v45[2];
  char v46;
  unsigned __int8 v47;
  __int16 v48;
  std::string __p;

  if (*((_BYTE *)a1 + 480))
  {
    LOWORD(v45[0]) = 12;
    LOBYTE(v48) = 2;
    ((void (*)(std::string *__return_ptr, void ***))(*a1)[2])(&__p, a1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v45, (unsigned __int8 *)&v48, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)a1 + 480) = 0;
  if (a1[1382])
    sub_18D17F614(a1 + 1382, 0);
  v10 = *a2;
  if (!*a2 || !*(_BYTE *)(v10 + 33))
  {
    LOWORD(v45[0]) = 12;
    LOBYTE(v48) = 4;
    ((void (*)(std::string *__return_ptr, void ***))(*a1)[2])(&__p, a1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__p;
    else
      LOBYTE(v16) = __p.__r_.__value_.__s.__data_[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v45, (unsigned __int8 *)&v48, "Error: %s could not be configured. Failed to create or initialize RavenParameters.", v11, v12, v13, v14, v15, (char)v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0xFFFFFFFFLL;
  }
  a1[74] = (void **)v10;
  if (*(_BYTE *)(v10 + 3693))
  {
    if (*(char *)(v10 + 3719) < 0)
      sub_18D077798(&__p, *(void **)(v10 + 3696), *(_QWORD *)(v10 + 3704));
    else
      __p = *(std::string *)(v10 + 3696);
    LODWORD(v45[0]) = 0;
    v17 = (void **)operator new();
    cnlogging::ProtobufOutputStream::ProtobufOutputStream((uint64_t)v17, &__p, v45);
    sub_18D17F614(a1 + 1382, v17);
    v18 = a1[1382];
    if (!v18)
    {
      v48 = 12;
      v47 = 4;
      ((void (*)(void **__return_ptr, void ***))(*a1)[2])(v45, a1);
      if (v46 >= 0)
        v24 = v45;
      else
        LOBYTE(v24) = v45[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "Error: %s could not be configured. Failed to create protobuf output stream.", v19, v20, v21, v22, v23, (char)v24);
      if (v46 < 0)
        operator delete(v45[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v18)
        return 0xFFFFFFFFLL;
    }
    else if (!v18)
    {
      return 0xFFFFFFFFLL;
    }
  }
  std::mutex::lock((std::mutex *)(a1 + 1391));
  if (raven::RavenPredictor::Configure((uint64_t)(a1 + 380), a2 + 1, v25, v26, v27, v28, v29, v30))
  {
    LOWORD(v45[0]) = 12;
    LOBYTE(v48) = 4;
    ((void (*)(std::string *__return_ptr, void ***))(*a1)[2])(&__p, a1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &__p;
    else
      LOBYTE(v36) = __p.__r_.__value_.__s.__data_[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v45, (unsigned __int8 *)&v48, "Error: %s could not be configured. Failed to configure RavenPredictor.", v31, v32, v33, v34, v35, (char)v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::mutex::unlock((std::mutex *)(a1 + 1391));
    return 0xFFFFFFFFLL;
  }
  std::mutex::unlock((std::mutex *)(a1 + 1391));
  cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, 0.0);
  *((_BYTE *)a1 + 480) = 1;
  if (cnprint::CNPrinter::GetLogLevel(v38) <= 1)
  {
    LOWORD(v45[0]) = 12;
    LOBYTE(v48) = 1;
    ((void (*)(std::string *__return_ptr, void ***))(*a1)[2])(&__p, a1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &__p;
    else
      LOBYTE(v44) = __p.__r_.__value_.__s.__data_[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v45, (unsigned __int8 *)&v48, "%s configured successfully.", v39, v40, v41, v42, v43, (char)v44);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_18D17F57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSolutionActiveObject::IsConfigured(raven::RavenSolutionActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void **sub_18D17F614(void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    cnlogging::ProtobufOutputStream::~ProtobufOutputStream(result);
    JUMPOUT(0x18D78B5D4);
  }
  return result;
}

uint64_t raven::RavenSolutionActiveObject::GetRavenSolution(raven::RavenSolutionActiveObject *this, raven::RavenSolutionEvent *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 11128);
  std::mutex::lock((std::mutex *)((char *)this + 11128));
  memcpy((char *)a2 + 8, (char *)this + 616, 0x971uLL);
  std::mutex::unlock(v4);
  return 0;
}

uint64_t raven::RavenSolutionActiveObject::GetRavenSolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  double v5;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;

  v4 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  v5 = fabs(v4);
  if ((unint64_t)(*(_QWORD *)&v5 - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(_QWORD *)&v5 - 1) < 0xFFFFFFFFFFFFFLL
    || *(_QWORD *)&v4 == 0)
  {
    v10 = (std::mutex *)(a1 + 11128);
    std::mutex::lock((std::mutex *)(a1 + 11128));
    if (raven::RavenPredictor::Predict(a1 + 3040, a2, a3, v11, v12, v13, v14, v15, v16, v17))
    {
      memcpy((void *)(a3 + 8), (const void *)(a1 + 616), 0x971uLL);
      v18 = 0xFFFFFFFFLL;
    }
    else
    {
      raven::RavenSolutionActiveObject::WriteRavenSolutionToProtobuf((cnlogging::ProtobufOutputStream **)a1, (const raven::RavenSolutionEvent *)a3);
      v18 = 0;
    }
    std::mutex::unlock(v10);
  }
  else
  {
    sub_18D040C34(a3);
    return 0xFFFFFFFFLL;
  }
  return v18;
}

void sub_18D17F770(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSolutionActiveObject::HandleEvent(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 104))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_18D17F7A4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25C33F0;
  std::mutex::~mutex((std::mutex *)(a1 + 11128));
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::~RavenOutput((CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)(a1 + 11064));
  sub_18D17F614((void ***)(a1 + 11056), 0);
  *(_QWORD *)(a1 + 5792) = &unk_1E25B9B60;
  *(_QWORD *)(a1 + 8360) = &unk_1E25B9250;
  *(_QWORD *)(a1 + 5784) = &unk_1E25B9250;
  *(_QWORD *)(a1 + 3056) = &unk_1E25B9B60;
  *(_QWORD *)(a1 + 5624) = &unk_1E25B9250;
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

void sub_18D17F824(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25C33F0;
  std::mutex::~mutex((std::mutex *)(a1 + 11128));
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::~RavenOutput((CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)(a1 + 11064));
  sub_18D17F614((void ***)(a1 + 11056), 0);
  *(_QWORD *)(a1 + 5792) = &unk_1E25B9B60;
  *(_QWORD *)(a1 + 8360) = &unk_1E25B9250;
  *(_QWORD *)(a1 + 5784) = &unk_1E25B9250;
  *(_QWORD *)(a1 + 3056) = &unk_1E25B9B60;
  *(_QWORD *)(a1 + 5624) = &unk_1E25B9250;
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D17F8B8(_QWORD *result)
{
  *result = &unk_1E25B9B60;
  result[321] = &unk_1E25B9250;
  return result;
}

void sub_18D17F8DC(_QWORD *a1)
{
  *a1 = &unk_1E25B9B60;
  a1[321] = &unk_1E25B9250;
  JUMPOUT(0x18D78B5D4);
}

uint64_t raven::GnssSvDatabase::Configure(uint64_t this, const raven::RavenParameters *a2)
{
  if (a2)
  {
    *(_BYTE *)(this + 72) = *((_BYTE *)a2 + 588);
    *(_BYTE *)(this + 73) = *((_BYTE *)a2 + 597);
  }
  return this;
}

BOOL raven::GnssSvDatabase::IsRelevantToMultiFreqMerging(_BYTE *a1)
{
  return *(_DWORD *)a1 == 8 && raven::GnssSvDatabase::AggregateHealthL5(a1) != 0;
}

uint64_t raven::GnssSvDatabase::AggregateHealthL5(_BYTE *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[5];

  v1 = 0;
  v3[0] = a1[221];
  v3[1] = a1[213];
  v3[2] = a1[215];
  v3[3] = a1[217];
  v3[4] = a1[219];
  while (1)
  {
    result = v3[v1];
    if ((result - 1) < 2)
      break;
    if (++v1 == 5)
      return 0;
  }
  return result;
}

void raven::GnssSvDatabase::MergeMultiFreqInfoSplitBetweenTwoIndications(_BYTE *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  const void *v14;
  uint64_t v15;
  cnprint::CNPrinter *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  double *v24;
  unsigned int v25;
  unsigned __int8 *i;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  void *__p[2];
  char v43;
  unsigned __int8 v44;
  __int16 v45;

  v6 = raven::GnssSvDatabase::AggregateHealthL1(a1);
  v7 = raven::GnssSvDatabase::AggregateHealthL5(a1);
  v8 = raven::GnssSvDatabase::AggregateHealthL1(a2);
  v9 = raven::GnssSvDatabase::AggregateHealthL5(a2);
  if (!v6 || v7 || v8 || !v9)
  {
    if (v6 || !v7 || !v8 || (v10 = a2, a2 = a1, v9))
    {
      *a3 = 0;
      return;
    }
  }
  else
  {
    v10 = a1;
  }
  v11 = operator new();
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_BYTE *)(v11 + 16) = v10[16];
  sub_18D185398(v11 + 24, (uint64_t)(v10 + 24));
  *(_OWORD *)(v11 + 120) = *(_OWORD *)(v10 + 120);
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(v10 + 136);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 152);
  *(_QWORD *)(v11 + 168) = *((_QWORD *)v10 + 21);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 56);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 72);
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(v10 + 88);
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 104);
  v12 = *((_OWORD *)v10 + 11);
  v13 = *((_OWORD *)v10 + 12);
  *(_QWORD *)(v11 + 224) = 0;
  *(_OWORD *)(v11 + 206) = *(_OWORD *)(v10 + 206);
  *(_OWORD *)(v11 + 176) = v12;
  *(_OWORD *)(v11 + 192) = v13;
  v14 = (const void *)*((_QWORD *)v10 + 28);
  v15 = *((_QWORD *)v10 + 29);
  *(_QWORD *)(v11 + 232) = 0;
  *(_QWORD *)(v11 + 240) = 0;
  v16 = (cnprint::CNPrinter *)sub_18D184D74((_QWORD *)(v11 + 224), v14, v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - (uint64_t)v14) >> 3));
  *(_DWORD *)(v11 + 248) = *((_DWORD *)v10 + 62);
  *(_BYTE *)(v11 + 213) = a2[213];
  *(_BYTE *)(v11 + 215) = a2[215];
  *(_BYTE *)(v11 + 217) = a2[217];
  *(_BYTE *)(v11 + 219) = a2[219];
  *(_BYTE *)(v11 + 221) = a2[221];
  v23 = *(unsigned __int8 **)(v11 + 224);
  v22 = *(unsigned __int8 **)(v11 + 232);
  if (v23 != v22)
  {
    v24 = (double *)(v10 + 176);
    while (1)
    {
      v25 = *v23;
      if (v25 > 9 || ((1 << v25) & 0x2BB) == 0)
        break;
LABEL_16:
      v23 += 40;
      if (v23 == v22)
        goto LABEL_42;
    }
    for (i = (unsigned __int8 *)*((_QWORD *)a2 + 28); ; i += 40)
    {
      if (i == *((unsigned __int8 **)a2 + 29))
        goto LABEL_16;
      if (*i == v25)
        break;
    }
    v28 = *((_QWORD *)v23 + 3) & 0x7FFFFFFFFFFFFFFFLL;
    v29 = (unint64_t)(v28 - 0x10000000000000) >> 53;
    v30 = v28 - 1;
    v31 = v29 >= 0x3FF && v30 >= 0xFFFFFFFFFFFFFLL;
    v32 = *((_QWORD *)i + 3);
    if (!v31
      || (((v32 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
        ? (v33 = (v32 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL)
        : (v33 = 0),
          !v33))
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v45) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v45, "#svdb,MergeSplitInfo,unexpected tx_group_delay_nanoseconds_,refCorr,%.3f,mergedCorr,%.3f", v17, v18, v19, v20, v21, v32);
      goto LABEL_32;
    }
    v34 = *((double *)a2 + 22);
    v35 = v34 - *v24;
    if (vabdd_f64(v34, *v24) > 300.0)
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v45) = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v45, "#svdb,MergeSplitInfo,unreasonable clock diff,%.3f", v17, v18, v19, v20, v21, SLOBYTE(v35));
LABEL_32:
      *a3 = 0;
      sub_18D185430(v11);
    }
    *((double *)v23 + 3) = -v35;
    if (cnprint::CNPrinter::GetLogLevel(v16) <= 1)
    {
      v45 = 12;
      v44 = 1;
      sub_18D17FE1C((uint64_t)a1, __p);
      if (v43 >= 0)
        v41 = __p;
      else
        LOBYTE(v41) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, &v44, "#svdb,MergeSplitInfo,%s,RefTime,%.1f,aAggregateHealth,%d,%d,bAggregateHealth,%d,%d,band,%d,tx_group_delay_ns,%.3f", v36, v37, v38, v39, v40, (char)v41);
      if (v43 < 0)
        operator delete(__p[0]);
    }
  }
LABEL_42:
  *a3 = v11;
}

void sub_18D17FD48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  sub_18D185430(v22);
}

void sub_18D17FD78()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t raven::GnssSvDatabase::AggregateHealthL1(_BYTE *a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[5];

  v1 = 0;
  v3[0] = a1[220];
  v3[1] = a1[212];
  v3[2] = a1[214];
  v3[3] = a1[216];
  v3[4] = a1[218];
  while (1)
  {
    result = v3[v1];
    if ((result - 1) < 2)
      break;
    if (++v1 == 5)
      return 0;
  }
  return result;
}

uint64_t sub_18D17FE1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  char v6;
  __int16 v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *__p[2];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[10];
  char v25;
  uint64_t v26;

  sub_18D099F88((uint64_t)&v23);
  v4 = 0;
  v5 = *(_DWORD *)a1;
  __p[1] = 0;
  v22 = 0;
  __p[0] = 0;
  if (v5 > 15)
  {
    switch(v5)
    {
      case 16:
        v4 = 3;
        HIBYTE(v22) = 3;
        v7 = 23121;
LABEL_13:
        LOWORD(__p[0]) = v7;
        v6 = 83;
        break;
      case 32:
        v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 21825;
        v6 = 71;
        break;
      case 64:
        v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 22094;
        v6 = 67;
        break;
      default:
        goto LABEL_16;
    }
LABEL_15:
    BYTE2(__p[0]) = v6;
  }
  else
  {
    switch(v5)
    {
      case 0:
        v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 20053;
        v6 = 75;
        goto LABEL_15;
      case 1:
        v4 = 3;
        HIBYTE(v22) = 3;
        v7 = 20551;
        goto LABEL_13;
      case 2:
        v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 19527;
        v6 = 79;
        goto LABEL_15;
      case 4:
        v4 = 3;
        HIBYTE(v22) = 3;
        v7 = 17474;
        goto LABEL_13;
      case 8:
        v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 16711;
        v6 = 76;
        goto LABEL_15;
      default:
        break;
    }
  }
LABEL_16:
  sub_18D076A18(&v23, (uint64_t)__p, v4);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  v8 = *(_DWORD *)a1;
  if (*(int *)a1 > 15)
  {
    if (v8 != 16)
    {
      if (v8 == 32)
      {
        v16 = sub_18D076A18(&v23, (uint64_t)"[", 1);
        *(_QWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 24) = 6;
        v17 = (_QWORD *)std::ostream::operator<<();
        sub_18D076A18(v17, (uint64_t)"]", 1);
      }
      else if (v8 != 64)
      {
        goto LABEL_32;
      }
    }
LABEL_30:
    v18 = sub_18D076A18(&v23, (uint64_t)"[", 1);
    *(_QWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 24) = 6;
    v19 = (_QWORD *)std::ostream::operator<<();
    sub_18D076A18(v19, (uint64_t)"]", 1);
    goto LABEL_32;
  }
  switch(v8)
  {
    case 0:
      v9 = sub_18D076A18(&v23, (uint64_t)"[", 1);
      *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 24) = 6;
      v10 = sub_18D076A18(v9, (uint64_t)" ", 1);
      sub_18D076A18(v10, (uint64_t)"]", 1);
      break;
    case 1:
    case 4:
    case 8:
      goto LABEL_30;
    case 2:
      v11 = sub_18D076A18(&v23, (uint64_t)"[", 1);
      v12 = *v11;
      *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) |= 0x800u;
      *(uint64_t *)((char *)v11 + *(_QWORD *)(v12 - 24) + 24) = 2;
      v13 = (_QWORD *)std::ostream::operator<<();
      *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) &= ~0x800u;
      v14 = *(unsigned __int8 *)(a1 + 4) - 1;
      *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v23 - 24)) = 4;
      if (v14 > 0x17)
        v15 = sub_18D076A18(&v23, (uint64_t)" ", 1);
      else
        v15 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v15, (uint64_t)"]", 1);
      break;
    default:
      break;
  }
LABEL_32:
  sub_18D076DE8((uint64_t)v24, a2);
  v23 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v24[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D78B550](&v26);
}

void sub_18D1802D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_18D09A074((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssSvDatabase::UpdateSvInfo(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  int v44;
  int v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  void *v66;
  int v67;
  BOOL v68;
  cnprint::CNPrinter *v69;
  uint64_t *v70;
  uint64_t *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  BOOL v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  uint64_t *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t *v113;
  int v114;
  BOOL v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  BOOL v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void **v128;
  char v130;
  double v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t **v134;
  void *__p[2];
  char v137;
  unsigned __int8 v138;
  __int16 v139;
  void *v140[2];
  uint64_t v141;
  void *v142[2];
  char v143;
  unsigned __int8 v144;
  int v145;

  *a3 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
    goto LABEL_128;
  v11 = a1 + 8;
  v132 = a1 + 48;
  v133 = (_QWORD *)(a1 + 56);
  v134 = (uint64_t **)(a1 + 24);
  v12 = (uint64_t **)(a1 + 32);
  do
  {
    sub_18D0778AC(v142, "");
    v144 = 0;
    v145 = -1;
    if ((sub_18D180DAC((int *)v9, (uint64_t)v142) & 1) == 0)
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v139) = 4;
      sub_18D17FE1C(v9, v140);
      v65 = v140;
      if (v141 < 0)
        LOBYTE(v65) = v140[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v139, "#svdb,Could not form id,SV,%s", v60, v61, v62, v63, v64, (char)v65);
LABEL_55:
      if ((SHIBYTE(v141) & 0x80000000) == 0)
        goto LABEL_95;
      v66 = v140[0];
      goto LABEL_57;
    }
    if (*(_DWORD *)v9 != 2)
      goto LABEL_43;
    v13 = sub_18D185488(a1, (uint64_t)v142);
    v14 = v13;
    if (v11 == v13)
      goto LABEL_32;
    if (*(unsigned __int8 *)(v13 + 69) == *(unsigned __int8 *)(v9 + 5))
      goto LABEL_31;
    v139 = 12;
    v138 = 2;
    sub_18D17FE1C(v9, v140);
    v15 = SHIBYTE(v141);
    v16 = (char)v140[0];
    sub_18D17FE1C(v14 + 64, __p);
    v22 = v140;
    if (v15 < 0)
      LOBYTE(v22) = v16;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v139, &v138, "#svdb,changing fcn,new,%s,old,%s,", v17, v18, v19, v20, v21, (char)v22);
    if (v137 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v141) < 0)
      operator delete(v140[0]);
    v28 = *(char *)(v14 + 69);
    v29 = *v12;
    if (!*v12)
      goto LABEL_20;
    v30 = (uint64_t *)(a1 + 32);
    while (1)
    {
      v31 = *((_DWORD *)v29 + 7);
      if (v31 <= v28)
        break;
      v30 = v29;
LABEL_19:
      v29 = (uint64_t *)*v29;
      if (!v29)
        goto LABEL_20;
    }
    if (v31 < v28)
    {
      ++v29;
      goto LABEL_19;
    }
    v112 = *v29;
    v113 = v29;
    if (*v29)
    {
      v113 = v29;
      do
      {
        v114 = *(_DWORD *)(v112 + 28);
        v115 = v114 < v28;
        if (v114 >= v28)
          v116 = (uint64_t *)v112;
        else
          v116 = (uint64_t *)(v112 + 8);
        if (!v115)
          v113 = (uint64_t *)v112;
        v112 = *v116;
      }
      while (*v116);
    }
    v117 = v29[1];
    if (v117)
    {
      do
      {
        v118 = *(_DWORD *)(v117 + 28);
        v119 = v118 <= v28;
        if (v118 <= v28)
          v120 = (uint64_t *)(v117 + 8);
        else
          v120 = (uint64_t *)v117;
        if (!v119)
          v30 = (uint64_t *)v117;
        v117 = *v120;
      }
      while (*v120);
    }
    if (v113 != v30)
    {
      while (*((_DWORD *)v113 + 8) != *(unsigned __int8 *)(v14 + 68))
      {
        v121 = (uint64_t *)v113[1];
        if (v121)
        {
          do
          {
            v122 = v121;
            v121 = (uint64_t *)*v121;
          }
          while (v121);
        }
        else
        {
          do
          {
            v122 = (uint64_t *)v113[2];
            v68 = *v122 == (_QWORD)v113;
            v113 = v122;
          }
          while (!v68);
        }
        v113 = v122;
        if (v122 == v30)
          goto LABEL_20;
      }
      LOWORD(v140[0]) = 12;
      LOBYTE(__p[0]) = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)__p, "#svdb,removing frequency-to-slot mapping,freq,%i,slot,%i", v23, v24, v25, v26, v27, *((_DWORD *)v113 + 7));
      sub_18D185510(v134, v113);
      operator delete(v113);
    }
LABEL_20:
    v32 = *v133;
    if (*v133)
    {
      v33 = v133;
      do
      {
        v34 = *(_DWORD *)(v32 + 28);
        v35 = v34 < v28;
        if (v34 >= v28)
          v36 = (uint64_t *)v32;
        else
          v36 = (uint64_t *)(v32 + 8);
        if (!v35)
          v33 = (_QWORD *)v32;
        v32 = *v36;
      }
      while (*v36);
      if (v33 != v133)
      {
        v37 = *((_DWORD *)v33 + 7);
        if (v37 <= v28)
        {
          LOWORD(v140[0]) = 12;
          LOBYTE(__p[0]) = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)__p, "#svdb,removing active frequency-to-slot mapping,freq,%i,slot,%i", v23, v24, v25, v26, v27, v37);
          sub_18D1858E8(v132, v28);
        }
      }
    }
LABEL_31:
    if (*(unsigned __int8 *)(v14 + 69) != *(unsigned __int8 *)(v9 + 5))
    {
LABEL_32:
      LOWORD(__p[0]) = 12;
      LOBYTE(v139) = 2;
      sub_18D17FE1C(v9, v140);
      v43 = v140;
      if (v141 < 0)
        LOBYTE(v43) = v140[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v139, "#svdb,New SV added to frequency-to-slot mapping,%s", v38, v39, v40, v41, v42, (char)v43);
      if (SHIBYTE(v141) < 0)
        operator delete(v140[0]);
      v44 = *(char *)(v9 + 5);
      v45 = *(unsigned __int8 *)(v9 + 4);
      v46 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v46 + 7) = v44;
      *((_DWORD *)v46 + 8) = v45;
      v47 = (uint64_t **)(a1 + 32);
      v48 = (uint64_t **)(a1 + 32);
      v49 = *v12;
      if (*v12)
      {
        do
        {
          while (1)
          {
            v47 = (uint64_t **)v49;
            if (*((_DWORD *)v49 + 7) <= v44)
              break;
            v49 = (uint64_t *)*v49;
            v48 = v47;
            if (!*v47)
              goto LABEL_42;
          }
          v49 = (uint64_t *)v49[1];
        }
        while (v49);
        v48 = v47 + 1;
      }
LABEL_42:
      sub_18D185958(v134, (uint64_t)v47, v48, v46);
      *a3 = 1;
    }
LABEL_43:
    v50 = sub_18D185488(a1, (uint64_t)v142);
    v51 = v50;
    if (v11 == v50)
      goto LABEL_69;
    v52 = *(double *)(v9 + 8);
    v53 = v52 - *(double *)(v50 + 72);
    if (v53 < -6.0e10)
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v139) = 4;
      sub_18D17FE1C(v9, v140);
      v131 = v52 * 0.000000001;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v139, "#svdb,Incoming t0,%.3f,is less than stored by threshold %.3f,Stored,%.3f,SV,%s", v54, v55, v56, v57, v58, SLOBYTE(v131));
      if (SHIBYTE(v141) < 0)
        operator delete(v140[0]);
    }
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_69;
    if (*(_DWORD *)(v51 + 64) == 8 && raven::GnssSvDatabase::AggregateHealthL5((_BYTE *)(v51 + 64)))
    {
      if (fabs(v53) < 1000000.0)
      {
        v59 = 0;
        goto LABEL_64;
      }
      goto LABEL_69;
    }
    if (*(_DWORD *)v9 == 8)
    {
      v67 = raven::GnssSvDatabase::AggregateHealthL5((_BYTE *)v9);
      v68 = fabs(v53) >= 1000000.0 || v67 == 0;
      if (!v68)
      {
        v59 = 1;
LABEL_64:
        raven::GnssSvDatabase::MergeMultiFreqInfoSplitBetweenTwoIndications((_BYTE *)(v51 + 64), (_BYTE *)v9, (uint64_t *)v140);
        v70 = (uint64_t *)v140[0];
        if (v140[0])
        {
          v71 = sub_18D1859AC((uint64_t **)a1, v144, v145, (uint64_t)v142);
          v72 = *(_OWORD *)v70;
          *((_BYTE *)v71 + 80) = *((_BYTE *)v70 + 16);
          *((_OWORD *)v71 + 4) = v72;
          sub_18D18494C((char **)v71 + 11, (const void **)v70 + 3);
          v73 = *(_OWORD *)(v70 + 7);
          v74 = *(_OWORD *)(v70 + 9);
          v75 = *(_OWORD *)(v70 + 11);
          *(_OWORD *)(v71 + 21) = *(_OWORD *)(v70 + 13);
          *(_OWORD *)(v71 + 19) = v75;
          *(_OWORD *)(v71 + 17) = v74;
          *(_OWORD *)(v71 + 15) = v73;
          v76 = *(_OWORD *)(v70 + 15);
          v77 = *(_OWORD *)(v70 + 17);
          v78 = *(_OWORD *)(v70 + 19);
          *((_BYTE *)v71 + 232) = *((_BYTE *)v70 + 168);
          *(_OWORD *)(v71 + 27) = v78;
          *(_OWORD *)(v71 + 25) = v77;
          *(_OWORD *)(v71 + 23) = v76;
          v79 = *((_OWORD *)v70 + 11);
          v80 = *((_OWORD *)v70 + 12);
          *(_OWORD *)((char *)v71 + 270) = *(_OWORD *)((char *)v70 + 206);
          *((_OWORD *)v71 + 15) = v79;
          *((_OWORD *)v71 + 16) = v80;
          if (v71 + 8 != v70)
            sub_18D184BA0((char *)v71 + 288, (char *)v70[28], v70[29], 0xCCCCCCCCCCCCCCCDLL * ((v70[29] - v70[28]) >> 3));
          *((_DWORD *)v71 + 78) = *((_DWORD *)v70 + 62);
          sub_18D185430((uint64_t)v70);
        }
        if (!v59)
        {
          if (cnprint::CNPrinter::GetLogLevel(v69) > 1)
            goto LABEL_95;
          LOWORD(__p[0]) = 12;
          LOBYTE(v139) = 1;
          sub_18D17FE1C(v9, v140);
          v128 = v140;
          if (v141 < 0)
            LOBYTE(v128) = v140[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v139, "#svdb,MergeSplitInfo,Ignored incoming ephemeris which could not be merged,SV,%s,t0,%.3f", v123, v124, v125, v126, v127, (char)v128);
          goto LABEL_55;
        }
      }
    }
LABEL_69:
    v81 = *(_QWORD *)(v9 + 224);
    if (v81 == *(_QWORD *)(v9 + 232)
      || !*(_BYTE *)v81
      || (*(_QWORD *)(v81 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      if (v11 == v51)
        goto LABEL_92;
    }
    else
    {
      v82 = (*(_QWORD *)(v81 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v11 == v51 || v82)
      {
LABEL_92:
        v102 = sub_18D1859AC((uint64_t **)a1, v144, v145, (uint64_t)v142);
        v103 = *(_OWORD *)v9;
        *((_BYTE *)v102 + 80) = *(_BYTE *)(v9 + 16);
        *((_OWORD *)v102 + 4) = v103;
        sub_18D18494C((char **)v102 + 11, (const void **)(v9 + 24));
        v104 = *(_OWORD *)(v9 + 56);
        v105 = *(_OWORD *)(v9 + 72);
        v106 = *(_OWORD *)(v9 + 88);
        *(_OWORD *)(v102 + 21) = *(_OWORD *)(v9 + 104);
        *(_OWORD *)(v102 + 19) = v106;
        *(_OWORD *)(v102 + 17) = v105;
        *(_OWORD *)(v102 + 15) = v104;
        v107 = *(_OWORD *)(v9 + 120);
        v108 = *(_OWORD *)(v9 + 136);
        v109 = *(_OWORD *)(v9 + 152);
        *((_BYTE *)v102 + 232) = *(_BYTE *)(v9 + 168);
        *(_OWORD *)(v102 + 27) = v109;
        *(_OWORD *)(v102 + 25) = v108;
        *(_OWORD *)(v102 + 23) = v107;
        v110 = *(_OWORD *)(v9 + 176);
        v111 = *(_OWORD *)(v9 + 192);
        *(_OWORD *)((char *)v102 + 270) = *(_OWORD *)(v9 + 206);
        *((_OWORD *)v102 + 15) = v110;
        *((_OWORD *)v102 + 16) = v111;
        if (v102 + 8 != (uint64_t *)v9)
          sub_18D184BA0((char *)v102 + 288, *(char **)(v9 + 224), *(_QWORD *)(v9 + 232), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v9 + 232) - *(_QWORD *)(v9 + 224)) >> 3));
        *((_DWORD *)v102 + 78) = *(_DWORD *)(v9 + 248);
        goto LABEL_95;
      }
    }
    v83 = *(_QWORD **)(v51 + 288);
    v84 = *(_QWORD *)(v51 + 296);
    if (v83 == (_QWORD *)v84
      || !*(_BYTE *)v83
      || (v83[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (v83[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || *(int *)(v51 + 312) > 179)
    {
      goto LABEL_92;
    }
    v140[0] = 0;
    v140[1] = 0;
    v141 = 0;
    sub_18D184D74(v140, v83, v84, 0xCCCCCCCCCCCCCCCDLL * ((v84 - (uint64_t)v83) >> 3));
    v85 = *(_DWORD *)(v51 + 312);
    v86 = *(_BYTE *)(v9 + 16);
    *(_OWORD *)(v51 + 64) = *(_OWORD *)v9;
    *(_BYTE *)(v51 + 80) = v86;
    sub_18D18494C((char **)(v51 + 88), (const void **)(v9 + 24));
    v87 = *(_OWORD *)(v9 + 56);
    v88 = *(_OWORD *)(v9 + 72);
    v89 = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v51 + 168) = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(v51 + 152) = v89;
    *(_OWORD *)(v51 + 136) = v88;
    *(_OWORD *)(v51 + 120) = v87;
    v90 = *(_OWORD *)(v9 + 120);
    v91 = *(_OWORD *)(v9 + 136);
    v92 = *(_OWORD *)(v9 + 152);
    *(_BYTE *)(v51 + 232) = *(_BYTE *)(v9 + 168);
    *(_OWORD *)(v51 + 216) = v92;
    *(_OWORD *)(v51 + 200) = v91;
    *(_OWORD *)(v51 + 184) = v90;
    v93 = *(_OWORD *)(v9 + 176);
    v94 = *(_OWORD *)(v9 + 192);
    *(_OWORD *)(v51 + 270) = *(_OWORD *)(v9 + 206);
    *(_OWORD *)(v51 + 240) = v93;
    *(_OWORD *)(v51 + 256) = v94;
    if (v51 + 64 != v9)
      sub_18D184BA0((char *)(v51 + 288), *(char **)(v9 + 224), *(_QWORD *)(v9 + 232), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v9 + 232) - *(_QWORD *)(v9 + 224)) >> 3));
    *(_DWORD *)(v51 + 312) = *(_DWORD *)(v9 + 248);
    v95 = *(void **)(v51 + 288);
    if (v95)
    {
      *(_QWORD *)(v51 + 296) = v95;
      operator delete(v95);
      *(_QWORD *)(v51 + 288) = 0;
      *(_QWORD *)(v51 + 296) = 0;
      *(_QWORD *)(v51 + 304) = 0;
    }
    *(_OWORD *)(v51 + 288) = *(_OWORD *)v140;
    *(_QWORD *)(v51 + 304) = v141;
    v140[1] = 0;
    v141 = 0;
    v140[0] = 0;
    *(_DWORD *)(v51 + 312) = v85 + 1;
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v95))
    {
      v139 = 12;
      v138 = 0;
      sub_18D17FE1C(v9, __p);
      v101 = __p;
      if (v137 < 0)
        LOBYTE(v101) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v139, &v138, "#svdb,Filled SvBandCorr gap,SV,%s,age,%d", v96, v97, v98, v99, v100, (char)v101);
      if (v137 < 0)
        operator delete(__p[0]);
    }
    v66 = v140[0];
    if (v140[0])
    {
      v140[1] = v140[0];
LABEL_57:
      operator delete(v66);
    }
LABEL_95:
    if (v143 < 0)
      operator delete(v142[0]);
    v9 += 256;
  }
  while (v9 != v10);
LABEL_128:
  if (!*(_QWORD *)(a1 + 16))
  {
    LOWORD(v142[0]) = 12;
    LOBYTE(v140[0]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v142, (unsigned __int8 *)v140, "#svdb,No SV data is currently available", a4, a5, a6, a7, a8, v130);
  }
  return 1;
}

void sub_18D180CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a22 < 0)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D180DAC(int *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  char v4;
  int v5;

  v2 = *a1;
  switch(*a1)
  {
    case 1:
      v3 = 1;
      *(_BYTE *)(a2 + 24) = 1;
      *(_DWORD *)(a2 + 28) = 0;
      *(_DWORD *)(a2 + 28) = *((unsigned __int8 *)a1 + 4);
      return v3;
    case 2:
      v3 = 0;
      *(_BYTE *)(a2 + 24) = 2;
      *(_DWORD *)(a2 + 28) = 0;
      v5 = *((unsigned __int8 *)a1 + 4);
      if ((v5 - 1) <= 0x17)
      {
        *(_DWORD *)(a2 + 28) = v5;
        return 1;
      }
      return v3;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_6;
    case 4:
      v4 = 4;
      goto LABEL_12;
    case 8:
      v4 = 3;
      goto LABEL_12;
    default:
      if (v2 == 16)
      {
        v4 = 5;
      }
      else
      {
        if (v2 != 64)
        {
LABEL_6:
          v3 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 28) = 0;
          return v3;
        }
        v4 = 6;
      }
LABEL_12:
      *(_BYTE *)(a2 + 24) = v4;
      *(_DWORD *)(a2 + 28) = 0;
      *(_DWORD *)(a2 + 28) = *((unsigned __int8 *)a1 + 4);
      return 1;
  }
}

uint64_t raven::GnssSvDatabase::UpdateTimeConversionInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v40;
  unsigned __int8 v41;
  __int16 v42;
  unsigned __int8 v43;
  __int16 v44;
  unsigned __int8 v45;
  __int16 v46;

  if (!sub_18D18130C(a2))
    goto LABEL_26;
  v4 = *a2;
  if (sub_18D184F20(*a2) && *(__int16 *)(v4 + 8) != -32768)
  {
    v5 = *(unsigned __int8 *)(v4 + 10);
    if (*(_QWORD *)(v4 + 16))
    {
      if ((v5 != 2) == (*(__int16 *)(v4 + 24) != -32768))
        goto LABEL_15;
    }
    else if (v5 == 2)
    {
      goto LABEL_15;
    }
    v6 = *a2;
    if (*(__int16 *)(*a2 + 8) != -32768)
    {
      v7 = *(unsigned __int8 *)(v6 + 10);
      if (*(_QWORD *)(v6 + 16))
      {
        if ((v7 != 2) == (*(__int16 *)(v6 + 24) != -32768))
          goto LABEL_15;
LABEL_13:
        v8 = *(unsigned __int8 *)(a1 + 144);
        v9 = *(_QWORD *)(*a2 + 24);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(*a2 + 8);
        *(_QWORD *)(a1 + 136) = v9;
        if (!v8)
          *(_BYTE *)(a1 + 144) = 1;
        goto LABEL_15;
      }
      if (v7 != 2)
        goto LABEL_13;
    }
  }
LABEL_15:
  v10 = (_QWORD *)*a2;
  if (sub_18D184F20(*a2))
  {
    if (v10[4])
    {
      if ((v10[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v10[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v10[7] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v11 = (_QWORD *)*a2;
        if (*(_QWORD *)(*a2 + 32))
        {
          if ((v11[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v11[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v11[7] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v12 = *(unsigned __int8 *)(a1 + 112);
            v13 = *(_OWORD *)(*a2 + 48);
            *(_OWORD *)(a1 + 80) = *(_OWORD *)(*a2 + 32);
            *(_OWORD *)(a1 + 96) = v13;
            if (!v12)
              *(_BYTE *)(a1 + 112) = 1;
          }
        }
      }
    }
  }
LABEL_26:
  if (!sub_18D181348(a2))
    goto LABEL_37;
  v14 = a2[1];
  if (*(_WORD *)v14 && *(unsigned __int16 *)(v14 + 2) < 0x5B5u)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_37;
    v15 = *(_QWORD *)(v14 + 16);
    if ((v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_37;
  }
  else
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_37;
    v15 = *(_QWORD *)(v14 + 16);
    if ((v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_37;
  }
  if ((v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v16 = *(unsigned __int8 *)(a1 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v14 + 8);
    if (!v16)
      *(_BYTE *)(a1 + 168) = 1;
  }
LABEL_37:
  if (!sub_18D1813B4(a2))
    goto LABEL_48;
  v17 = a2[3];
  v18 = v17 + 8;
  v19 = *(_QWORD *)(v17 + 8);
  if (*(_WORD *)v17)
  {
    if (!v19)
      goto LABEL_48;
    v20 = *(_QWORD *)(v17 + 16);
  }
  else
  {
    if (!v19)
      goto LABEL_48;
    v20 = *(_QWORD *)(v17 + 16);
    if ((v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)(v17 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      goto LABEL_48;
    }
  }
  if ((v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)(v17 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v21 = *(unsigned __int8 *)(a1 + 224);
    v22 = *(_QWORD *)(v18 + 16);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v18;
    *(_QWORD *)(a1 + 216) = v22;
    if (!v21)
      *(_BYTE *)(a1 + 224) = 1;
  }
LABEL_48:
  if (!sub_18D181428(a2))
    goto LABEL_59;
  v23 = a2[2];
  v24 = v23 + 8;
  v25 = *(_QWORD *)(v23 + 8);
  if (*(_WORD *)v23)
  {
    if (!v25)
      goto LABEL_59;
    v26 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    if (!v25)
      goto LABEL_59;
    v26 = *(_QWORD *)(v23 + 16);
    if ((v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)(v23 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      goto LABEL_59;
    }
  }
  if ((v26 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)(v23 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v27 = *(unsigned __int8 *)(a1 + 256);
    v28 = *(_QWORD *)(v24 + 16);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v24;
    *(_QWORD *)(a1 + 248) = v28;
    if (!v27)
      *(_BYTE *)(a1 + 256) = 1;
  }
LABEL_59:
  if (!sub_18D18149C(a2))
    goto LABEL_70;
  v34 = a2[4];
  v35 = *(_QWORD *)(v34 + 8);
  if (*(_WORD *)v34)
  {
    if (!v35)
      goto LABEL_70;
    v36 = *(_QWORD *)(v34 + 16);
  }
  else
  {
    if (!v35)
      goto LABEL_70;
    v36 = *(_QWORD *)(v34 + 16);
    if ((v36 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)(v34 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      goto LABEL_70;
    }
  }
  if ((v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)(v34 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v37 = *(unsigned __int8 *)(a1 + 288);
    v38 = *(_QWORD *)(v34 + 24);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(v34 + 8);
    *(_QWORD *)(a1 + 280) = v38;
    if (!v37)
      *(_BYTE *)(a1 + 288) = 1;
  }
LABEL_70:
  if (!*(_BYTE *)(a1 + 144))
  {
    v46 = 12;
    v45 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v45, "#svdb,No GPS leap second information present", v29, v30, v31, v32, v33, v40);
  }
  if (!*(_BYTE *)(a1 + 112))
  {
    v44 = 12;
    v43 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "#svdb,No GPS to UTC conversion information present", v29, v30, v31, v32, v33, v40);
  }
  if (!*(_BYTE *)(a1 + 168))
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "#svdb,No GLONASS to GPS time conversion information present", v29, v30, v31, v32, v33, v40);
  return 1;
}

BOOL sub_18D18130C(uint64_t *a1)
{
  return sub_18D184DEC(a1) && *a1 && sub_18D184F20(*a1);
}

BOOL sub_18D181348(uint64_t *a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = sub_18D184DEC(a1);
  if (result)
  {
    v3 = a1[1];
    if (!v3)
      return 0;
    if (*(_WORD *)v3 && *(unsigned __int16 *)(v3 + 2) < 0x5B5u)
      return 1;
    return *(_QWORD *)(v3 + 8) && (*(_QWORD *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return result;
}

BOOL sub_18D1813B4(uint64_t *a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = sub_18D184DEC(a1);
  if (result)
  {
    v3 = a1[3];
    if (!v3)
      return 0;
    if (*(_WORD *)v3)
      return 1;
    return *(_QWORD *)(v3 + 8)
        && (*(_QWORD *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)(v3 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return result;
}

BOOL sub_18D181428(uint64_t *a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = sub_18D184DEC(a1);
  if (result)
  {
    v3 = a1[2];
    if (!v3)
      return 0;
    if (*(_WORD *)v3)
      return 1;
    return *(_QWORD *)(v3 + 8)
        && (*(_QWORD *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)(v3 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return result;
}

BOOL sub_18D18149C(uint64_t *a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = sub_18D184DEC(a1);
  if (result)
  {
    v3 = a1[4];
    if (!v3)
      return 0;
    if (*(_WORD *)v3)
      return 1;
    return *(_QWORD *)(v3 + 8)
        && (*(_QWORD *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)(v3 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::RecomputeActiveGlonassSlots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  _QWORD *v12;
  cnprint::CNPrinter *v13;
  cnprint::CNPrinter *LogLevel;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  int v23;
  cnprint::CNPrinter *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  int v32;
  BOOL v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  cnprint::CNPrinter *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t **v93;
  uint64_t *v94;
  int v95;
  BOOL v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t **v105;
  unsigned int v106;
  uint64_t **v107;
  _QWORD *v109;
  unsigned __int8 v110;
  __int16 v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _BYTE v118[24];
  void *__p[2];
  char v120;
  char v121;
  int v122;
  _WORD v123[48];
  __int128 v124;
  uint64_t v125;
  double v126[6];

  v126[3] = *(double *)MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 280))
  {
    v123[0] = 12;
    LOBYTE(v111) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,RecomputeActiveGlonassSlots,No valid position available", a4, a5, a6, a7, a8, v103);
    return 0;
  }
  v8 = *(double *)(a2 + 232) + *(double *)(a2 + 256);
  if (v8 > 2500000000.0)
  {
    v123[0] = 12;
    LOBYTE(v111) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,RecomputeActiveGlonassSlots,Position uncertainty is too large,var,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v8));
    return 0;
  }
  v124 = *(_OWORD *)(a2 + 288);
  v125 = *(_QWORD *)(a2 + 304);
  v12 = (_QWORD *)(a1 + 56);
  v107 = (uint64_t **)(a1 + 56);
  v105 = (uint64_t **)(a1 + 48);
  sub_18D03D9B4(a1 + 48, *(_QWORD **)(a1 + 56));
  *(v12 - 1) = v12;
  *v12 = 0;
  v12[1] = 0;
  LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v13);
  if (LogLevel <= 1)
  {
    v123[0] = 12;
    LOBYTE(v111) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Clearing active freq-to-slot", v15, v16, v17, v18, v19, v103);
  }
  v20 = *(_QWORD **)(a1 + 24);
  v106 = 1;
  v109 = (_QWORD *)(a1 + 32);
  if (v20 != (_QWORD *)(a1 + 32))
  {
    v21 = 0;
    v22 = 0;
    v23 = -8;
    while (1)
    {
      v24 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
      if (v24 <= 1)
      {
        v123[0] = 12;
        LOBYTE(v111) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Considering frequency and slot for active status,freq,%i,slot,%i", v25, v26, v27, v28, v29, *((_DWORD *)v20 + 7));
      }
      if (*((_DWORD *)v20 + 7) != v23)
      {
        if (((v23 != -8) & v21) != 1)
          goto LABEL_24;
        v30 = v107;
        v31 = *v107;
        if (!*v107)
          goto LABEL_24;
        do
        {
          v32 = *((_DWORD *)v31 + 7);
          v33 = v32 < v23;
          if (v32 >= v23)
            v34 = v31;
          else
            v34 = v31 + 1;
          if (!v33)
            v30 = (uint64_t **)v31;
          v31 = (uint64_t *)*v34;
        }
        while (*v34);
        if (v30 != v107 && v23 >= *((_DWORD *)v30 + 7))
        {
          if (cnprint::CNPrinter::GetLogLevel(v24) <= 1)
          {
            v123[0] = 12;
            LOBYTE(v111) = 1;
            sub_18D181C0C(*v107, v23);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Removing from active list,freq,%i,slot,%i", v83, v84, v85, v86, v87, v23);
          }
          sub_18D1858E8((uint64_t)v105, v23);
          v22 = 0;
          v21 = 0;
          v23 = *((_DWORD *)v20 + 7);
        }
        else
        {
LABEL_24:
          v22 = 0;
          v21 = 0;
          v23 = *((_DWORD *)v20 + 7);
        }
      }
      v35 = *((_DWORD *)v20 + 8);
      sub_18D0778AC(__p, "");
      v121 = 2;
      v122 = v35;
      v36 = sub_18D185488(a3, (uint64_t)__p);
      if (a3 + 8 == v36)
        break;
      v37 = *(_QWORD *)(v36 + 64);
      if (!v37)
      {
        v123[0] = 12;
        LOBYTE(v111) = 5;
        v51 = sub_18D181C54((uint64_t)__p);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Null sat data,SV,%s", v52, v53, v54, v55, v56, v51);
        goto LABEL_33;
      }
      v111 = 0;
      v112 = 0u;
      v113 = 0u;
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v117 = 0;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, __int16 *, _BYTE *, _WORD *, double *))(*(_QWORD *)(v37 + 32) + 56))(v37 + 32, a4, &v111, v118, v123, v126))
      {
        v57 = (cnprint::CNPrinter *)cnnavigation::SatElAz((uint64_t)&v124, (uint64_t)v118, 0, (uint64_t)v126, 0, (uint64_t)v123);
        if (!(_DWORD)v57)
        {
          v72 = LOBYTE(v126[0]);
          if (v126[0] <= -0.0872664626)
          {
            v104 = v22;
          }
          else
          {
            if ((_DWORD)v22)
            {
              v123[0] = 12;
              v110 = 3;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, &v110, "#svdb,Two active slots at frequency found,freq,%i,slot0,%i,slot1,%i,elevation1,%lf", v58, v59, v60, v61, v62, v23);
              v21 = 1;
            }
            v57 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v57);
            if (v57 <= 1)
            {
              v123[0] = 12;
              v110 = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, &v110, "#svdb,Adding to active list,elevation,%.3lf,freq,%i,slot,%i", v73, v74, v75, v76, v77, v72);
            }
            v104 = *((unsigned int *)v20 + 8);
            v78 = (uint64_t)v107;
            while (1)
            {
              v79 = *(_QWORD *)v78;
              v80 = (uint64_t **)v78;
              if (!*(_QWORD *)v78)
                break;
              while (1)
              {
                v78 = v79;
                v81 = *(_DWORD *)(v79 + 28);
                if (v81 > v23)
                  break;
                if (v81 >= v23)
                  goto LABEL_57;
                v79 = *(_QWORD *)(v78 + 8);
                if (!v79)
                {
                  v80 = (uint64_t **)(v78 + 8);
                  goto LABEL_56;
                }
              }
            }
LABEL_56:
            v82 = (uint64_t *)operator new(0x28uLL);
            *((_DWORD *)v82 + 7) = v23;
            *((_DWORD *)v82 + 8) = 0;
            v57 = (cnprint::CNPrinter *)sub_18D185958(v105, v78, v80, v82);
            v78 = (uint64_t)v82;
LABEL_57:
            *(_DWORD *)(v78 + 32) = v104;
          }
          LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v57);
          if (LogLevel > 1)
          {
            v44 = 0;
            v22 = v104;
          }
          else
          {
            v123[0] = 12;
            v110 = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, &v110, "#svdb,elevation,%.3lf,freq,%i,slot,%i", v88, v89, v90, v91, v92, SLOBYTE(v126[0]));
            v22 = v104;
            v44 = 0;
          }
          goto LABEL_34;
        }
        v123[0] = 12;
        v110 = 4;
        v63 = sub_18D181C54(v37);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, &v110, "#svdb,Could not compute elevation,SV,%s", v64, v65, v66, v67, v68, v63);
        goto LABEL_33;
      }
      v123[0] = 12;
      LOBYTE(v126[0]) = 3;
      v38 = sub_18D181C54(v37);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)v126, "#svdb,Cannot compute SV position while determining active GLONASS slot,SV,%s,slot,%i,freq,%i,t_eph,%lf,t_eval,%lf", v39, v40, v41, v42, v43, v38);
      v44 = 3;
LABEL_34:
      if (v120 < 0)
        operator delete(__p[0]);
      if (v44 != 3 && v44)
        return 0;
      v69 = (_QWORD *)v20[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (_QWORD *)v20[2];
          v71 = *v70 == (_QWORD)v20;
          v20 = v70;
        }
        while (!v71);
      }
      v20 = v70;
      if (v70 == v109)
      {
        if (((v23 != -8) & v21) == 1)
        {
          v93 = v107;
          v94 = *v107;
          if (*v107)
          {
            do
            {
              v95 = *((_DWORD *)v94 + 7);
              v96 = v95 < v23;
              if (v95 >= v23)
                v97 = v94;
              else
                v97 = v94 + 1;
              if (!v96)
                v93 = (uint64_t **)v94;
              v94 = (uint64_t *)*v97;
            }
            while (*v97);
            if (v93 != v107 && v23 >= *((_DWORD *)v93 + 7))
            {
              if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
              {
                v123[0] = 12;
                LOBYTE(v111) = 1;
                sub_18D181C0C(*v107, v23);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Removing from active list,freq,%i,slot,%i", v98, v99, v100, v101, v102, v23);
              }
              sub_18D1858E8((uint64_t)v105, v23);
            }
          }
        }
        return 1;
      }
    }
    v123[0] = 12;
    LOBYTE(v111) = 3;
    v45 = sub_18D181C54((uint64_t)__p);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,In freq-to-slot map but not sat data,SV,%s", v46, v47, v48, v49, v50, v45);
LABEL_33:
    v44 = 1;
    goto LABEL_34;
  }
  return v106;
}

void sub_18D181BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D181C0C(uint64_t *a1, int a2)
{
  int v2;

  if (!a1)
LABEL_8:
    sub_18D077838("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = *((_DWORD *)a1 + 7);
      if (v2 <= a2)
        break;
      a1 = (uint64_t *)*a1;
      if (!a1)
        goto LABEL_8;
    }
    if (v2 >= a2)
      return a1 + 4;
    a1 = (uint64_t *)a1[1];
    if (!a1)
      goto LABEL_8;
  }
}

const char *sub_18D181C54(uint64_t a1)
{
  void **v1;
  unsigned int v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  void *v8;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 24))
    return "InvalidID";
  v1 = (void **)a1;
  if (*(_DWORD *)(a1 + 28) == -1)
    return "InvalidID";
  sub_18D076238((uint64_t)v9);
  v2 = *((unsigned __int8 *)v1 + 24) - 1;
  if (v2 >= 6)
  {
    v3 = "Unknown,";
    v4 = 8;
  }
  else
  {
    v3 = off_1E25CD218[(char)v2];
    v4 = qword_18D319150[(char)v2];
  }
  sub_18D076A18(&v10, (uint64_t)v3, v4);
  std::ostream::operator<<();
  sub_18D076DE8((uint64_t)v11, &v7);
  if (*((char *)v1 + 23) < 0)
    operator delete(*v1);
  *(_OWORD *)v1 = v7;
  v1[2] = v8;
  if (*((char *)v1 + 23) < 0)
    v1 = (void **)*v1;
  v9[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10 = v5;
  v11[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D78B550](&v13);
  return (const char *)v1;
}

void sub_18D181DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18D076980((uint64_t)va);
  _Unwind_Resume(a1);
}

void raven::GnssSvDatabase::FitAnchorPointsToPoly(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE v22[128];
  void *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v27[4];
  void *v28;
  __int128 v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE v32[128];
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v5 = 0;
  v25 = 0x100000004;
  v23 = &unk_1E25C7E50;
  v24 = xmmword_18D313090;
  v26 = v27;
  v20 = 0x400000004;
  v18 = &unk_1E25C7FA0;
  v19 = xmmword_18D313080;
  v6 = v22;
  v21 = v22;
  v7 = *a3;
  v8 = *a2;
  do
  {
    v9 = 0;
    v27[v5] = *(_QWORD *)(v7 + 8 * v5);
    v10 = 1.0;
    do
    {
      *(double *)&v6[v9] = v10;
      v10 = v10 * *(double *)(v8 + 8 * v5);
      v9 += 32;
    }
    while (v9 != 128);
    ++v5;
    v6 += 8;
  }
  while (v5 != 4);
  v15 = 0x400000004;
  v13 = &unk_1E25C7FA0;
  v14 = xmmword_18D313080;
  v16 = &v17;
  v35 = 0x100000004;
  v33 = &unk_1E25C7E80;
  v34 = xmmword_18D313090;
  v36 = &v37;
  v30 = 0x100000010;
  v28 = &unk_1E25C6350;
  v29 = xmmword_18D319180;
  v31 = v32;
  sub_18D04F504((uint64_t)&v18, (uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v13);
  v30 = 0x100000004;
  v28 = &unk_1E25C7E50;
  v29 = xmmword_18D313090;
  v31 = v32;
  sub_18D053B2C((uint64_t)&v13, (uint64_t)&v23, (uint64_t)&v28);
  v11 = 0;
  v12 = v31;
  do
  {
    *(_QWORD *)(a4 + v11) = *(_QWORD *)&v12[v11];
    v11 += 8;
  }
  while (v11 != 32);
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int v16;
  unint64_t v17;
  int v18;
  __int128 v20;
  unsigned __int8 v21;

  v10 = *((_BYTE *)this + 112);
  if (v10 && *((_BYTE *)this + 144))
  {
    *((_WORD *)a2 + 33) = 0;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_WORD *)a2 = 257;
    *(double *)&v13 = (double)*((unint64_t *)this + 10) / 1000000000.0;
    v20 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v20, 0, (int8x16_t)v13, a4);
    *(_OWORD *)((char *)a2 + 24) = v20;
    v14 = *(int8x16_t *)((char *)this + 88);
    v15 = (int8x16_t)vdivq_f64((float64x2_t)v14, (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
    *(int8x16_t *)((char *)a2 + 8) = v15;
    v16 = *((__int16 *)this + 60);
    *((_DWORD *)a2 + 10) = v16;
    if (v16 == -32768
      || (v17 = *((_QWORD *)this + 16)) == 0
      || *((_BYTE *)this + 122) != 2
      || (v18 = *((unsigned __int16 *)this + 68), v18 == 0x8000))
    {
      *((_DWORD *)a2 + 16) = v16;
    }
    else
    {
      *((_DWORD *)a2 + 16) = (__int16)v18;
      *(double *)v15.i64 = (double)v17 / 1000000000.0;
      v20 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v20, 0, v15, v14);
      *((_OWORD *)a2 + 3) = v20;
    }
    return 1;
  }
  else
  {
    LOWORD(v20) = 12;
    v21 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v21, "#svdb,Could not populate GPS to UTC conversion parameters,subsecond,%i,leapsecond,%i", a6, a7, a8, a9, a10, v10);
    return 0;
  }
}

BOOL raven::GnssSvDatabase::ConvertGpsWholeSecondTimeToGlonassTime(uint64_t a1, _OWORD *a2, long double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  _BOOL8 v11;
  int v13;
  unint64_t v14;
  int v15;
  long double v16;
  int8x16_t v17;
  int8x16_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  double v28;
  __int128 v29;
  unsigned __int8 v30;
  __int128 v31;
  __int16 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;

  v9 = *(unsigned __int8 *)(a1 + 144);
  if (a3 < 0.0 || v9 == 0)
  {
    v32 = 12;
    LOBYTE(v39) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, (unsigned __int8 *)&v39, "#svdb,Could not converge GPS whole second time to Glonass time,leapsecond,%i,gps-time,%.3lf", a5, a6, a7, a8, a9, v9);
    return 0;
  }
  else
  {
    v13 = *(unsigned __int16 *)(a1 + 120);
    if (v13 != 0x8000)
    {
      v14 = *(_QWORD *)(a1 + 128);
      if (v14)
      {
        if (*(_BYTE *)(a1 + 122) == 2 && *(unsigned __int16 *)(a1 + 136) != 0x8000 && (double)v14 / 1000000000.0 <= a3)
          LOWORD(v13) = *(_WORD *)(a1 + 136);
      }
    }
    v33 = 0u;
    v34 = 0u;
    v36 = 0;
    v37 = 0;
    v32 = 513;
    v35 = (__int16)v13 - 10;
    v38 = v35;
    v15 = (int)(a3 / 604800.0);
    v16 = fmod(a3, 604800.0);
    v17.i64[0] = 0xC1212319A1CAC083;
    *(double *)v18.i64 = v16 + -561548.816;
    v39 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v39, 604800 * (v15 - 1042), v18, v17);
    v31 = v39;
    LODWORD(v39) = 1;
    *((_QWORD *)&v39 + 1) = 0;
    v19 = cnnavigation::TAITime::ToGLONASSTime((uint64_t)&v31, (cnnavigation::GNSSUTCParameters *)&v32, (uint64_t)&v39);
    v11 = v19 == 0;
    if (v19)
    {
      LOWORD(v29) = 12;
      v30 = 4;
      v28 = *((double *)&v31 + 1) + (double)(uint64_t)v31;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v30, "#svdb,ConvertGpsWholeSecondTimeToGlonassTime,Failed to convert TAI time to GLONASS time,tai-time,%.3lf", v20, v21, v22, v23, v24, SLOBYTE(v28));
    }
    else
    {
      v26.i64[0] = *((_QWORD *)&v39 + 1);
      *(double *)v25.i64 = *((double *)&v39 + 1) + (double)((int)v39 - 1) * 86400.0;
      v29 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v29, 0, v25, v26);
      *a2 = v29;
    }
  }
  return v11;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t result;
  double v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  char v27;
  __int128 v28;
  unsigned __int8 v29;

  if (!*((_BYTE *)this + 144))
  {
    LOWORD(v28) = 12;
    v29 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v29, "#svdb,Failed to populate Glonass to UTC conversion parameters due to no leap second info", a4, a5, a6, a7, a8, v27);
    return 0;
  }
  v12 = *((_BYTE *)this + 112);
  if (v12 && *((_BYTE *)this + 168))
  {
    *(_WORD *)a2 = 512;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *((_WORD *)a2 + 33) = 0;
    v19 = raven::GnssSvDatabase::ConvertGpsWholeSecondTimeToGlonassTime((uint64_t)this, (cnnavigation::GNSSUTCParameters *)((char *)a2 + 24), (double)*((unint64_t *)this + 10) / 1000000000.0, a3, a4, a5, a6, a7, a8);
    result = 0;
    if (!v19)
      return result;
    *((double *)a2 + 1) = (*((double *)this + 11) + *((double *)this + 20)) / 1000000000.0;
    v21 = *((double *)this + 12) / 1000000000.0;
  }
  else
  {
    if (!*((_BYTE *)this + 192))
    {
      LOWORD(v28) = 12;
      v29 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v29, "#svdb,Failed to populate Glonass to UTC conversion parameters,gps-to-utc,%i,glonass-to-gps,%i,glonass-to-utc,%i", a4, a5, a6, a7, a8, v12);
      result = 0;
      goto LABEL_19;
    }
    *(_WORD *)a2 = 512;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *((_WORD *)a2 + 33) = 0;
    *(double *)&v22 = (double)*((unint64_t *)this + 22) / 1000000000.0;
    v28 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v28, 0, (int8x16_t)v22, a10);
    *(_OWORD *)((char *)a2 + 24) = v28;
    *((double *)a2 + 1) = *((double *)this + 23) / 1000000000.0;
    v21 = 0.0;
  }
  *((double *)a2 + 2) = v21;
  v23 = *((__int16 *)this + 60);
  v24 = v23 - 10;
  *((_DWORD *)a2 + 10) = v23 - 10;
  if (v23 != -32768)
  {
    v25 = *((_QWORD *)this + 16);
    if (v25)
    {
      if (*((_BYTE *)this + 122) == 2)
      {
        v26 = *((unsigned __int16 *)this + 68);
        if (v26 != 0x8000)
        {
          *((_DWORD *)a2 + 16) = (__int16)v26 - 10;
          if (raven::GnssSvDatabase::ConvertGpsWholeSecondTimeToGlonassTime((uint64_t)this, (_OWORD *)a2 + 3, (double)v25 / 1000000000.0, v13, v14, v15, v16, v17, v18))
          {
            goto LABEL_17;
          }
          return 0;
        }
      }
    }
  }
  *((_DWORD *)a2 + 16) = v24;
LABEL_17:
  result = 1;
LABEL_19:
  *(_BYTE *)a2 = result;
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithGalileo(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  double v11;
  int v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  int v24;
  unint64_t v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int v29;
  double v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t result;
  int v34;
  double v35;
  __int128 v36;
  _QWORD v37[2];
  _OWORD v38[3];
  __int128 v39;
  uint64_t v40;

  v9 = *((_BYTE *)this + 144);
  if (v9 && *((_BYTE *)this + 112) && *((_BYTE *)this + 224))
  {
    *(_WORD *)a2 = 768;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *((_WORD *)a2 + 33) = 0;
    v11 = (double)*((unint64_t *)this + 25) / 1000000000.0;
    LODWORD(v36) = vcvtmd_s64_f64(v11 / 604800.0);
    *((double *)&v36 + 1) = v11 + (double)(int)v36 * -604800.0;
    v40 = 0;
    v39 = 0u;
    memset(v38, 0, sizeof(v38));
    cnnavigation::TAITime::TAITime(v37, (double *)&v36, (cnnavigation::GNSSUTCParameters *)v38);
    LOWORD(v38[0]) = 0;
    memset((char *)v38 + 8, 0, 36);
    v39 = 0uLL;
    LODWORD(v40) = 0;
    v12 = cnnavigation::TAITime::ToGalileoTime((cnnavigation::TAITime *)v37, (const cnnavigation::GNSSUTCParameters *)v38);
    *(double *)v14.i64 = (double)(uint64_t)floor(v13);
    *(double *)v15.i64 = v13 - *(double *)v14.i64;
    v38[0] = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)v38, vcvtmd_s64_f64(v13) + 604800 * v12, v15, v14);
    *(_OWORD *)((char *)a2 + 24) = v38[0];
    v23 = *((double *)this + 12);
    *((double *)a2 + 1) = (*((double *)this + 26) + *((double *)this + 11) + v23 * 0.0) / 1000000000.0;
    *((double *)a2 + 2) = (v23 + *((double *)this + 27)) / 1000000000.0;
    v24 = *((__int16 *)this + 60);
    *((_DWORD *)a2 + 10) = v24;
    if (v24 == -32768
      || (v25 = *((_QWORD *)this + 16)) == 0
      || *((_BYTE *)this + 122) != 2
      || (v26 = *((unsigned __int16 *)this + 68), v26 == 0x8000))
    {
      *((_DWORD *)a2 + 16) = v24;
    }
    else
    {
      *((_DWORD *)a2 + 16) = (__int16)v26;
      sub_18D184FBC((uint64_t)&v34, (double)v25 / 1000000000.0, v16, v17, v18, v19, v20, v21, v22);
      v27.i64[0] = 0xC1212319A1CAC083;
      *(double *)v28.i64 = v35 + -561548.816;
      v38[0] = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v38, 604800 * (v34 - 1042), v28, v27);
      v36 = v38[0];
      LOWORD(v38[0]) = 0;
      memset((char *)v38 + 8, 0, 36);
      v39 = 0uLL;
      LODWORD(v40) = 0;
      v29 = cnnavigation::TAITime::ToGalileoTime((cnnavigation::TAITime *)&v36, (const cnnavigation::GNSSUTCParameters *)v38);
      *(double *)v31.i64 = (double)(uint64_t)floor(v30);
      *(double *)v32.i64 = v30 - *(double *)v31.i64;
      v38[0] = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v38, vcvtmd_s64_f64(v30) + 604800 * v29, v32, v31);
      *((_OWORD *)a2 + 3) = v38[0];
    }
    result = 1;
    *(_BYTE *)a2 = 1;
  }
  else
  {
    LOWORD(v38[0]) = 12;
    LOBYTE(v37[0]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v38, (unsigned __int8 *)v37, "#svdb,Failed to populate Galileo to UTC conversion parameters,gps-leap-second,%i,gps-to-utc,%i,galileo-to-gps,%i", a4, a5, a6, a7, a8, v9);
    return 0;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithBeiDou(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10;
  int8x16_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int v29;
  double v30;
  int8x16_t v31;
  int8x16_t v32;
  float64x2_t v33;
  int v34;
  double v35;
  __int128 v36;
  _BYTE v37[40];
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;

  v10 = *((_BYTE *)this + 144);
  if (v10 && *((_BYTE *)this + 112))
  {
    v13 = 0uLL;
    if (*((_BYTE *)this + 256))
    {
      a4 = *((int8x16_t *)this + 15);
      v33 = (float64x2_t)a4;
      *(double *)a4.i64 = (double)*((unint64_t *)this + 29);
    }
    else
    {
      a4.i64[0] = 0;
      v33 = 0u;
    }
    *(_WORD *)a2 = 1024;
    *(_OWORD *)((char *)a2 + 2) = 0uLL;
    *(_OWORD *)((char *)a2 + 18) = 0uLL;
    *(_OWORD *)((char *)a2 + 34) = 0uLL;
    *(_OWORD *)((char *)a2 + 50) = 0uLL;
    *((_WORD *)a2 + 33) = 0;
    v15 = vcvtmd_s64_f64(*(double *)a4.i64 / 1000000000.0 / 604800.0);
    *(double *)v13.i64 = *(double *)a4.i64 / 1000000000.0 + (double)v15 * -604800.0;
    v16 = vcvtmd_s64_f64(*(double *)v13.i64) + 604800 * v15;
    *(double *)a4.i64 = (double)(uint64_t)floor(*(double *)v13.i64);
    *(double *)v13.i64 = *(double *)v13.i64 - *(double *)a4.i64;
    *(_OWORD *)v37 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)v37, v16, v13, a4);
    *(_OWORD *)((char *)a2 + 24) = *(_OWORD *)v37;
    *(float64x2_t *)((char *)a2 + 8) = vdivq_f64(vaddq_f64(v33, *(float64x2_t *)((char *)this + 88)), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
    v24 = *((__int16 *)this + 60);
    *((_DWORD *)a2 + 10) = v24;
    if (v24 == -32768
      || (v25 = *((_QWORD *)this + 16)) == 0
      || *((_BYTE *)this + 122) != 2
      || (v26 = *((unsigned __int16 *)this + 68), v26 == 0x8000))
    {
      *((_DWORD *)a2 + 16) = v24;
    }
    else
    {
      *((_DWORD *)a2 + 16) = (__int16)v26;
      sub_18D184FBC((uint64_t)&v34, (double)v25 / 1000000000.0, v17, v18, v19, v20, v21, v22, v23);
      v27.i64[0] = 0xC1212319A1CAC083;
      *(double *)v28.i64 = v35 + -561548.816;
      *(_OWORD *)v37 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v37, 604800 * (v34 - 1042), v28, v27);
      v36 = *(_OWORD *)v37;
      *(_WORD *)v37 = 0;
      memset(&v37[8], 0, 32);
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v29 = cnnavigation::TAITime::ToBeiDouTime((cnnavigation::TAITime *)&v36, (const cnnavigation::GNSSUTCParameters *)v37);
      *(double *)v31.i64 = (double)(uint64_t)floor(v30);
      *(double *)v32.i64 = v30 - *(double *)v31.i64;
      *(_OWORD *)v37 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v37, vcvtmd_s64_f64(v30) + 604800 * v29, v32, v31);
      *((_OWORD *)a2 + 3) = *(_OWORD *)v37;
    }
    result = 1;
    *(_BYTE *)a2 = 1;
  }
  else
  {
    *(_WORD *)v37 = 12;
    LOBYTE(v36) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v37, (unsigned __int8 *)&v36, "#svdb,Failed to populate BeiDou-to-UTC conversion parameters,gps-leap-second,%i,gps-to-utc,%i", a6, a7, a8, a9, a10, v10);
    return 0;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithNavic(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  double v11;
  int v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  int v24;
  unint64_t v25;
  int v26;
  int8x16_t v27;
  int8x16_t v28;
  int v29;
  double v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t result;
  int v34;
  double v35;
  __int128 v36;
  unsigned __int8 v37[16];
  _OWORD v38[3];
  __int128 v39;
  uint64_t v40;

  v8 = *((_BYTE *)this + 144);
  if (v8 && *((_BYTE *)this + 112) && *((_BYTE *)this + 288))
  {
    *(_WORD *)a2 = 1536;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *((_WORD *)a2 + 33) = 0;
    v11 = (double)*((unint64_t *)this + 33) / 1000000000.0;
    LODWORD(v36) = vcvtmd_s64_f64(v11 / 604800.0);
    *((double *)&v36 + 1) = v11 + (double)(int)v36 * -604800.0;
    v40 = 0;
    v39 = 0u;
    memset(v38, 0, sizeof(v38));
    cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)v37, (const cnnavigation::NavicTime *)&v36, (const cnnavigation::GNSSUTCParameters *)v38);
    LOWORD(v38[0]) = 0;
    memset((char *)v38 + 8, 0, 36);
    v39 = 0uLL;
    LODWORD(v40) = 0;
    v12 = cnnavigation::TAITime::ToNavicTime((cnnavigation::TAITime *)v37, (const cnnavigation::GNSSUTCParameters *)v38);
    *(double *)v14.i64 = (double)(uint64_t)floor(v13);
    *(double *)v15.i64 = v13 - *(double *)v14.i64;
    v38[0] = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)v38, vcvtmd_s64_f64(v13) + 604800 * v12, v15, v14);
    *(_OWORD *)((char *)a2 + 24) = v38[0];
    v23 = *((double *)this + 12);
    *((double *)a2 + 1) = (*((double *)this + 34) + *((double *)this + 11) + v23 * 0.0) / 1000000000.0;
    *((double *)a2 + 2) = (v23 + *((double *)this + 35)) / 1000000000.0;
    v24 = *((__int16 *)this + 60);
    *((_DWORD *)a2 + 10) = v24;
    if (v24 == -32768
      || (v25 = *((_QWORD *)this + 16)) == 0
      || *((_BYTE *)this + 122) != 2
      || (v26 = *((unsigned __int16 *)this + 68), v26 == 0x8000))
    {
      *((_DWORD *)a2 + 16) = v24;
    }
    else
    {
      *((_DWORD *)a2 + 16) = (__int16)v26;
      sub_18D184FBC((uint64_t)&v34, (double)v25 / 1000000000.0, v16, v17, v18, v19, v20, v21, v22);
      v27.i64[0] = 0xC1212319A1CAC083;
      *(double *)v28.i64 = v35 + -561548.816;
      v38[0] = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v38, 604800 * (v34 - 1042), v28, v27);
      v36 = v38[0];
      LOWORD(v38[0]) = 0;
      memset((char *)v38 + 8, 0, 36);
      v39 = 0uLL;
      LODWORD(v40) = 0;
      v29 = cnnavigation::TAITime::ToNavicTime((cnnavigation::TAITime *)&v36, (const cnnavigation::GNSSUTCParameters *)v38);
      *(double *)v31.i64 = (double)(uint64_t)floor(v30);
      *(double *)v32.i64 = v30 - *(double *)v31.i64;
      v38[0] = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v38, vcvtmd_s64_f64(v30) + 604800 * v29, v32, v31);
      *((_OWORD *)a2 + 3) = v38[0];
    }
    result = 1;
    *(_BYTE *)a2 = 1;
  }
  else
  {
    LOWORD(v38[0]) = 12;
    v37[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v38, v37, "#svdb,Failed to populate Navic-to-UTC conversion parameters,gps-leap-second,%i,gps-to-utc,%i", a4, a5, a6, a7, a8, v8);
    return 0;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI(cnnavigation::GNSSUTCParameters *this, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  double v12;
  double v13;
  int v14;
  double v15;
  uint64_t result;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __int128 v31;

  v8 = *((_BYTE *)this + 1);
  switch(v8)
  {
    case 1:
    case 5:
      v12 = *(double *)(a2 + 8);
      v13 = (double)*(uint64_t *)a2;
      if (COERCE__INT64(fabs(v12 + v13)) > 0x7FEFFFFFFFFFFFFFLL || v12 + v13 < 0.0)
      {
        LOWORD(v31) = 5;
        LOBYTE(v29) = 4;
        v28 = v12 + v13;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, (unsigned __int8 *)&v29, "Invalid GPS time %.3lf constructed from CNTime", a4, a5, a6, a7, a8, SLOBYTE(v28));
        v12 = *(double *)(a2 + 8);
        v13 = (double)*(uint64_t *)a2;
      }
      v14 = (int)(v13 / 604800.0);
      LODWORD(v29) = v14;
      v15 = v12 + v13 + (double)v14 * -604800.0;
      v30 = v15;
      if (v15 < 0.0)
      {
        LODWORD(v29) = v14 - 1;
        v30 = v15 + 604800.0;
      }
      cnnavigation::TAITime::TAITime(&v31, &v29, this);
      goto LABEL_21;
    case 2:
      v17 = *(_QWORD *)a2 / 86400;
      v18 = *(double *)(a2 + 8) + (double)(*(_QWORD *)a2 - 86400 * (int)v17);
      v30 = v18;
      LODWORD(v29) = v17 + 1;
      if (v18 < 0.0)
      {
        LODWORD(v29) = v17;
        v30 = v18 + 86400.0;
      }
      cnnavigation::TAITime::TAITime(&v31, (int *)&v29, this);
      goto LABEL_21;
    case 3:
      v19 = *(_QWORD *)a2;
      v20 = *(_QWORD *)a2 / 604800;
      LODWORD(v29) = v20;
      v21 = *(double *)(a2 + 8) + (double)(v19 - 604800 * (int)v20);
      v30 = v21;
      if (v21 < 0.0)
      {
        LODWORD(v29) = v20 - 1;
        v30 = v21 + 604800.0;
      }
      cnnavigation::TAITime::TAITime(&v31, &v29, this);
      goto LABEL_21;
    case 4:
      v25 = *(_QWORD *)a2;
      v26 = *(_QWORD *)a2 / 604800;
      LODWORD(v29) = v26;
      v27 = *(double *)(a2 + 8) + (double)(v25 - 604800 * (int)v26);
      v30 = v27;
      if (v27 < 0.0)
      {
        LODWORD(v29) = v26 - 1;
        v30 = v27 + 604800.0;
      }
      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v31, (const cnnavigation::BeiDouTime *)&v29, this);
      goto LABEL_21;
    case 6:
      v22 = *(_QWORD *)a2;
      v23 = *(_QWORD *)a2 / 604800;
      LODWORD(v29) = v23;
      v24 = *(double *)(a2 + 8) + (double)(v22 - 604800 * (int)v23);
      v30 = v24;
      if (v24 < 0.0)
      {
        LODWORD(v29) = v23 - 1;
        v30 = v24 + 604800.0;
      }
      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v31, (const cnnavigation::NavicTime *)&v29, this);
LABEL_21:
      *a3 = v31;
      result = 1;
      break;
    default:
      LOWORD(v31) = 12;
      LOBYTE(v29) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, (unsigned __int8 *)&v29, "#svdb,Unexpected constellation requested for Gnss to TAI conversion,%i", a4, a5, a6, a7, a8, v8);
      result = 0;
      break;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateEphemFromPolynomial(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int8x16_t v29;
  int8x16_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  cnprint::CNPrinter *v37;
  float64x2_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  char v69;
  void *__p[2];
  char v71;
  unsigned __int8 v72;
  __int128 v73;

  if ((sub_18D1831A0(a2) & 1) == 0)
  {
    LOWORD(__p[0]) = 12;
    LOBYTE(v73) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v73, "#svdb,PopulateEphemFromPolynomial,Malformed sv_info", v7, v8, v9, v10, v11, v69);
  }
  if (!*(_BYTE *)(a2 + 168))
  {
    LOWORD(v73) = 12;
    v72 = 4;
    sub_18D17FE1C(a2, __p);
    if (v71 >= 0)
      v61 = __p;
    else
      LOBYTE(v61) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v72, "#svdb,missing poly,SV,%s", v56, v57, v58, v59, v60, (char)v61);
    goto LABEL_18;
  }
  *(double *)v12.i64 = *(double *)(a2 + 56) * 0.000000001;
  v73 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, v12, v13);
  *(_OWORD *)__p = v73;
  v19 = raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)__p, (_OWORD *)(a4 + 72), v14, v15, v16, v17, v18);
  v20 = v19 ^ 1;
  *(double *)v21.i64 = *(double *)(a2 + 64) * 0.000000001;
  v73 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, v21, v22);
  *(_OWORD *)__p = v73;
  v28 = raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)__p, (_OWORD *)(a4 + 88), v23, v24, v25, v26, v27);
  if (v19)
    v31 = 1;
  else
    v31 = 2;
  if (!v28)
    v20 = v31;
  *(double *)v29.i64 = *(double *)(a2 + 8) * 0.000000001;
  v73 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, v29, v30);
  *(_OWORD *)__p = v73;
  v37 = (cnprint::CNPrinter *)raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)__p, (_OWORD *)(a4 + 104), v32, v33, v34, v35, v36);
  v38 = (float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL);
  v39 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a4 + 136) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a4 + 120) = v39;
  v40 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a4 + 168) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a4 + 152) = v40;
  v41 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a4 + 200) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a4 + 184) = v41;
  v42 = vmulq_f64(*(float64x2_t *)(a2 + 176), v38);
  v43 = vmulq_f64(*(float64x2_t *)(a2 + 192), v38);
  __asm { FMOV            V2.2D, #0.5 }
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vmulq_f64(v43, _Q2);
  __asm { FMOV            V3.2D, #6.0 }
  _Q2.f64[1] = vdivq_f64(v43, _Q3).f64[1];
  *(float64x2_t *)(a4 + 216) = v42;
  *(float64x2_t *)(a4 + 232) = _Q2;
  *(double *)(a4 + 216) = v42.f64[0] + a3[1];
  *(double *)(a4 + 224) = v42.f64[1] + a3[2];
  if (v20 + (v37 ^ 1))
  {
    LOWORD(v73) = 12;
    v72 = 4;
    sub_18D17FE1C(a2, __p);
    if (v71 >= 0)
      v55 = __p;
    else
      LOBYTE(v55) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v72, "#svdb,Failed to convert poly GNSS time to TAI,%s,%d", v50, v51, v52, v53, v54, (char)v55);
LABEL_18:
    if (v71 < 0)
      operator delete(__p[0]);
    return 0;
  }
  if (!cnprint::CNPrinter::GetLogLevel(v37))
  {
    LOWORD(v73) = 12;
    v72 = 0;
    sub_18D17FE1C(a2, __p);
    if (v71 >= 0)
      v68 = __p;
    else
      LOBYTE(v68) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v72, "#svdb,poly ephem,SV,%s,interval,%.3f,%.3f,%.3f,clockpoly,%f,%f,%f,%f", v63, v64, v65, v66, v67, (char)v68);
    if (v71 < 0)
      operator delete(__p[0]);
  }
  return 1;
}

void sub_18D18317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1831A0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD v11[2];

  if (!sub_18D185074((_DWORD *)a1)
    || (*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || !*(_BYTE *)(a1 + 16)
    || (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_DWORD *)(a1 + 208) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v3 = *(_QWORD **)(a1 + 32);
    if (v2 != v3)
    {
      while ((*v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (v2[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (v2[2] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (v2[3] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        v2 += 4;
        if (v2 == v3)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (!*(_BYTE *)(a1 + 168))
  {
    return 0;
  }
LABEL_18:
  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  v4 = *(unsigned __int8 **)(a1 + 224);
  v5 = *(unsigned __int8 **)(a1 + 232);
  if (v4 == v5)
  {
    v9 = 0;
    v6 = 1;
    goto LABEL_42;
  }
  while (2)
  {
    v6 = 0;
    switch(*v4)
    {
      case 0u:
        goto LABEL_40;
      case 1u:
      case 2u:
        if (*(_DWORD *)a1 == 1 || *(_DWORD *)a1 == 16)
          goto LABEL_34;
        goto LABEL_39;
      case 3u:
        if (*(_DWORD *)a1 != 2)
          goto LABEL_39;
        goto LABEL_34;
      case 4u:
      case 5u:
      case 6u:
        if (*(_DWORD *)a1 != 4)
          goto LABEL_39;
        goto LABEL_34;
      case 7u:
      case 8u:
        if (*(_DWORD *)a1 != 8)
          goto LABEL_39;
        goto LABEL_34;
      case 9u:
        if (*(_DWORD *)a1 != 32)
          goto LABEL_39;
        goto LABEL_34;
      case 0xAu:
        if (*(_DWORD *)a1 == 64)
          goto LABEL_34;
        goto LABEL_39;
      default:
LABEL_34:
        if ((sub_18D185138(&v10, *v4, *v4) & 1) != 0)
        {
          v4 += 40;
          if (v4 == v5)
          {
            v6 = 1;
            goto LABEL_40;
          }
          continue;
        }
LABEL_39:
        v6 = 0;
LABEL_40:
        v9 = (_QWORD *)v11[0];
LABEL_42:
        sub_18D05B5E4(v9);
        return v6;
    }
  }
}

void sub_18D1833B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  sub_18D05B5E4(a11);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssSvDatabase::PopulateEphemFromAnchorPoints(uint64_t a1, uint64_t a2, double *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  uint64_t i;
  double v17;
  _OWORD *v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  void *v34;
  void *v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  double v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  double v45;
  int8x16_t v46;
  int8x16_t v47;
  uint64_t v48;
  double v49;
  double v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  double v54;
  double v55;
  int8x16_t v56;
  int8x16_t v57;
  uint64_t v58;
  double v59;
  double v60;
  double *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  _QWORD *v68;
  double *v69;
  uint64_t v70;
  double v71;
  char *v72;
  double *v73;
  uint64_t v74;
  double v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  float64x2_t v88;
  float64x2_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  char v122;
  double v123;
  uint64_t v124;
  unsigned __int8 v125;
  __int16 v126;
  __int128 v127;
  void *v128;
  void *v129;
  _QWORD *v130;
  __int128 v131;
  double *v132;
  _BYTE __p[24];
  double v134;
  _QWORD v135[2];

  v135[0] = *MEMORY[0x1E0C80C00];
  if ((sub_18D1831A0(a2) & 1) == 0)
  {
    *(_WORD *)__p = 12;
    LOBYTE(v131) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v131, "#svdb,PopulateEphemFromAnchorPoints,Malformed sv_info", v7, v8, v9, v10, v11, v122);
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOWORD(v131) = 12;
    LOBYTE(v128) = 4;
    sub_18D17FE1C(a2, __p);
    if (__p[23] >= 0)
      v96 = __p;
    else
      LOBYTE(v96) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)&v128, "#svdb,missing anchor points,SV,%s", v91, v92, v93, v94, v95, (char)v96);
    goto LABEL_25;
  }
  v12 = *(double **)(a2 + 24);
  if (*(_QWORD *)(a2 + 32) - (_QWORD)v12 != 128)
  {
    LOWORD(v131) = 12;
    LOBYTE(v128) = 4;
    sub_18D17FE1C(a2, __p);
    if (__p[23] >= 0)
      v102 = __p;
    else
      LOBYTE(v102) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)&v128, "#svdb,Unexpected number of anchor points,SV,%s,N,%zu", v97, v98, v99, v100, v101, (char)v102);
LABEL_25:
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  v14 = *v12;
  v13 = v12 + 4;
  v15 = v14;
  for (i = 1; i != 4; ++i)
  {
    v17 = v15;
    v15 = *v13;
    if (fabs(*v13 - v17 + -1.0e10) > 2000000000.0)
    {
      LOWORD(v131) = 12;
      LOBYTE(v128) = 4;
      sub_18D17FE1C(a2, __p);
      if (__p[23] >= 0)
        v108 = __p;
      else
        LOBYTE(v108) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)&v128, "#svdb,Anchor points are not spaced correctly,SV,%s,diff,%lf,anchors,%zu,%zu", v103, v104, v105, v106, v107, (char)v108);
      goto LABEL_25;
    }
    v13 += 4;
  }
  v18 = operator new(0x40uLL);
  v20 = 0;
  v21 = 0;
  v22.i64[1] = 0;
  *v18 = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  v23 = v18;
  while (1)
  {
    *(double *)v22.i64 = *(double *)(*(_QWORD *)(a2 + 24) + v20) / 1000000000.0;
    v131 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v131, 0, v22, v19);
    *(_OWORD *)__p = v131;
    if ((raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)__p, v23, v24, v25, v26, v27, v28) & 1) == 0)break;
    ++v21;
    ++v23;
    v20 += 32;
    if (v21 == 4)
    {
      *(_QWORD *)__p = 1;
      *(_QWORD *)&__p[8] = 0x3FE0000000000000;
      v29 = CNTimeSpan::operator-((uint64_t)v18, __p, v22, v19);
      v31 = v30;
      a4[9] = v29;
      a4[10] = v30;
      *(_QWORD *)__p = 1;
      *(_QWORD *)&__p[8] = 0x3FE0000000000000;
      v34 = (void *)CNTimeSpan::operator+((uint64_t)(v18 + 3), __p, v32, v33);
      a4[11] = v34;
      a4[12] = v35;
      *(_QWORD *)&v131 = v29;
      *((_QWORD *)&v131 + 1) = v31;
      v128 = v34;
      v129 = v35;
      v38 = CNTimeSpan::operator+((uint64_t)&v131, &v128, v36, v37);
      v40.i64[0] = 0.5;
      *(double *)v41.i64 = (v39 + (double)v38) * 0.5;
      *(_QWORD *)__p = 0;
      *(_QWORD *)&__p[8] = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v41, v40);
      v42 = *(int8x16_t *)__p;
      *(_OWORD *)(a4 + 13) = *(_OWORD *)__p;
      v44 = CNTimeSpan::operator-((uint64_t)v18, a4 + 13, v42, v43);
      v123 = v45;
      v124 = v44;
      v48 = CNTimeSpan::operator-((uint64_t)(v18 + 1), a4 + 13, v46, v47);
      v50 = v49;
      v53 = CNTimeSpan::operator-((uint64_t)(v18 + 2), a4 + 13, v51, v52);
      v55 = v54;
      v58 = CNTimeSpan::operator-((uint64_t)(v18 + 3), a4 + 13, v56, v57);
      v60 = v59;
      v61 = (double *)operator new(0x20uLL);
      *((_QWORD *)&v131 + 1) = v61 + 4;
      v132 = v61 + 4;
      *v61 = v123 + (double)v124;
      v61[1] = v50 + (double)v48;
      v61[2] = v55 + (double)v53;
      v61[3] = v60 + (double)v58;
      *(_QWORD *)&v131 = v61;
      v62 = *(_QWORD **)(a2 + 24);
      v63 = v62[1];
      v64 = v62[5];
      v65 = v62[9];
      v66 = v62[13];
      v67 = v61;
      v68 = operator new(0x20uLL);
      v129 = v68 + 4;
      v130 = v68 + 4;
      *v68 = v63;
      v68[1] = v64;
      v68[2] = v65;
      v68[3] = v66;
      v128 = v68;
      raven::GnssSvDatabase::FitAnchorPointsToPoly((uint64_t)v68, (uint64_t *)&v131, (uint64_t *)&v128, (uint64_t)(a4 + 15));
      v69 = *(double **)(a2 + 24);
      v70 = *((_QWORD *)v69 + 6);
      *(double *)__p = v69[2];
      *(_QWORD *)&__p[8] = v70;
      v71 = v69[14];
      *(double *)&__p[16] = v69[10];
      v134 = v71;
      v72 = sub_18D1851FC((char *)&v128, __p, (uint64_t)v135);
      raven::GnssSvDatabase::FitAnchorPointsToPoly((uint64_t)v72, (uint64_t *)&v131, (uint64_t *)&v128, (uint64_t)(a4 + 19));
      v73 = *(double **)(a2 + 24);
      v74 = *((_QWORD *)v73 + 7);
      *(double *)__p = v73[3];
      *(_QWORD *)&__p[8] = v74;
      v75 = v73[15];
      *(double *)&__p[16] = v73[11];
      v134 = v75;
      v76 = sub_18D1851FC((char *)&v128, __p, (uint64_t)v135);
      raven::GnssSvDatabase::FitAnchorPointsToPoly((uint64_t)v76, (uint64_t *)&v131, (uint64_t *)&v128, (uint64_t)(a4 + 23));
      v82 = raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)(a3 + 3), &v127, v77, v78, v79, v80, v81);
      if ((v82 & 1) != 0)
      {
        v83 = *(_QWORD *)v67;
        v84 = v67[3] - *v67;
        v85 = a3[2] + *(double *)(a2 + 184) * 0.000000001;
        v86 = *(double *)(a2 + 192) * 0.000000001 * 0.5;
        v87 = *(double *)(a2 + 200) * 0.000000001 / 6.0;
        *(double *)__p = a3[1] + *(double *)(a2 + 176) * 0.000000001;
        v88 = vsubq_f64(*(float64x2_t *)(v67 + 1), (float64x2_t)vdupq_lane_s64(v83, 0));
        v89 = vmulq_f64(v88, v88);
        *(float64x2_t *)&__p[8] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)__p, 0), v88, v85), v89, v86), vmulq_f64(v88, v89), v87);
        v134 = *(double *)__p + v85 * v84 + v86 * (v84 * v84) + v87 * (v84 * (v84 * v84));
        v90 = sub_18D1851FC((char *)&v128, __p, (uint64_t)v135);
        raven::GnssSvDatabase::FitAnchorPointsToPoly((uint64_t)v90, (uint64_t *)&v131, (uint64_t *)&v128, (uint64_t)(a4 + 27));
      }
      else
      {
        v126 = 12;
        v125 = 4;
        sub_18D17FE1C(a2, __p);
        if (__p[23] >= 0)
          v121 = __p;
        else
          LOBYTE(v121) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v126, &v125, "#svdb,Unsuccessful conversion of utc applicability time to TAI time,skipping,SV,%s", v116, v117, v118, v119, v120, (char)v121);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (v128)
      {
        v129 = v128;
        operator delete(v128);
      }
      operator delete(v67);
      goto LABEL_43;
    }
  }
  LOWORD(v131) = 12;
  LOBYTE(v128) = 4;
  sub_18D17FE1C(a2, __p);
  if (__p[23] >= 0)
    v115 = __p;
  else
    LOBYTE(v115) = __p[0];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)&v128, "#svdb,Unsuccessful conversion of anchor point to TAI time,SV,%s,anchors,%zu,%zu", v110, v111, v112, v113, v114, (char)v115);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v82 = 0;
LABEL_43:
  operator delete(v18);
  return v82;
}

void sub_18D1839F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;

  if (a30 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  operator delete(v31);
  operator delete(v30);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssSvDatabase::AggregateHealthFromOrderedHealthArray(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  while (1)
  {
    v2 = *(unsigned __int8 *)(a1 + v1);
    if ((v2 - 1) < 2)
      break;
    if (++v1 == 5)
      return 0;
  }
  return v2;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUtcParameters(raven::GnssSvDatabase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v8;
  __int128 v9;
  int v10;
  cnnavigation::GNSSUTCParameters *v11;
  __int128 v12;
  __int128 v13;
  cnnavigation::GNSSUTCParameters *v14;
  uint64_t v15;
  char v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  _DWORD v48[59];
  __int128 v49;
  _QWORD v50[6];

  memset(v50, 0, 46);
  memset(&v48[47], 0, 46);
  memset(&v48[32], 0, 42);
  memset(&v48[16], 0, 42);
  memset(v48, 0, 42);
  v49 = 0uLL;
  *(_WORD *)a2 = 0;
  v8 = *(_OWORD *)((char *)v50 + 4);
  v9 = *(_OWORD *)((char *)&v50[2] + 4);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)((char *)&v50[3] + 6);
  *(_OWORD *)(a2 + 18) = v9;
  *(_OWORD *)(a2 + 2) = v8;
  *(_DWORD *)(a2 + 44) = 0;
  v10 = v50[0];
  *(_OWORD *)(a2 + 48) = v49;
  *(_DWORD *)(a2 + 64) = v10;
  *(_DWORD *)(a2 + 68) = 0;
  *(_WORD *)(a2 + 72) = 0;
  v11 = (cnnavigation::GNSSUTCParameters *)(a2 + 72);
  v12 = *(_OWORD *)&v48[48];
  v13 = *(_OWORD *)&v48[52];
  *(_OWORD *)(a2 + 100) = *(_OWORD *)((char *)&v48[54] + 2);
  *(_OWORD *)(a2 + 90) = v13;
  *(_OWORD *)(a2 + 74) = v12;
  *(_DWORD *)(a2 + 116) = 0;
  *(_OWORD *)(a2 + 120) = 0uLL;
  *(_QWORD *)(a2 + 136) = LOBYTE(v48[47]);
  *(_WORD *)(a2 + 144) = 0;
  v14 = (cnnavigation::GNSSUTCParameters *)(a2 + 144);
  *(_OWORD *)(a2 + 172) = *(_OWORD *)((char *)&v48[38] + 2);
  *(_OWORD *)(a2 + 162) = *(_OWORD *)&v48[36];
  *(_OWORD *)(a2 + 146) = *(_OWORD *)&v48[32];
  *(_DWORD *)(a2 + 188) = 0;
  *(_DWORD *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0uLL;
  *(_WORD *)(a2 + 216) = 0;
  v15 = a2 + 216;
  *(_DWORD *)(a2 + 212) = 0;
  *(_OWORD *)(a2 + 244) = *(_OWORD *)((char *)&v48[22] + 2);
  *(_OWORD *)(a2 + 234) = *(_OWORD *)&v48[20];
  *(_OWORD *)(a2 + 218) = *(_OWORD *)&v48[16];
  *(_DWORD *)(a2 + 260) = 0;
  *(_OWORD *)(a2 + 264) = 0uLL;
  *(_DWORD *)(a2 + 280) = 0;
  *(_DWORD *)(a2 + 284) = 0;
  *(_WORD *)(a2 + 288) = 0;
  *(_OWORD *)(a2 + 316) = *(_OWORD *)((char *)&v48[6] + 2);
  *(_OWORD *)(a2 + 306) = *(_OWORD *)&v48[4];
  *(_OWORD *)(a2 + 290) = *(_OWORD *)v48;
  *(_DWORD *)(a2 + 332) = 0;
  *(_OWORD *)(a2 + 336) = 0uLL;
  *(_DWORD *)(a2 + 352) = 0;
  *(_DWORD *)(a2 + 356) = 0;
  v16 = *((_BYTE *)a1 + 112);
  if (v16 && *((_BYTE *)a1 + 144))
  {
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps(a1, (cnnavigation::GNSSUTCParameters *)a2, 0.0, *(int8x16_t *)&v48[4], a3, a4, a5, a6, a7, a8);
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass(a1, v11, v19, v20, v21, v22, v23, v24, v25, v26);
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithGalileo(a1, v14, v27, v28, v29, v30, v31, v32);
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithBeiDou(a1, (cnnavigation::GNSSUTCParameters *)v15, v39, v40, v33, v34, v35, v36, v37, v38);
    if (*((_BYTE *)a1 + 73))
      raven::GnssSvDatabase::PopulateGnssUTCParametersWithNavic(a1, (cnnavigation::GNSSUTCParameters *)(v15 + 72), v41, v42, v43, v44, v45, v46);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    result = 1;
    *(_QWORD *)(a2 + 304) = 0;
  }
  else
  {
    WORD2(v50[0]) = 12;
    LOBYTE(v48[48]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)((char *)v50 + 4), (unsigned __int8 *)&v48[48], "#svdb,Cannot populate Sv Data,no time conversion from GPS to UTC,Subsecond,%i,Leapsecond,%i", a4, a5, a6, a7, a8, v16);
    return 0;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateGnssSvDataForOneSv(uint64_t a1, uint64_t a2, cnnavigation::GNSSUTCParameters *a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL8 IsValid;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void *__p[2];
  char v53;
  unsigned __int8 v54;
  __int16 v55;

  if ((sub_18D180DAC((int *)a2, a4) & 1) != 0)
  {
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)a4);
    v7 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 64) = v7;
    *(double *)(a4 + 248) = *(float *)(a2 + 208);
    *(_BYTE *)(a4 + 256) = *(_BYTE *)(a2 + 16);
    switch((char)v7)
    {
      case 1:
      case 5:
        IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid)
          goto LABEL_35;
        v55 = 12;
        v54 = 3;
        sub_18D17FE1C(a2, __p);
        if (v53 >= 0)
          v14 = __p;
        else
          LOBYTE(v14) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,GPS/QZSS Conversion to UTC not available,SV,%s", v9, v10, v11, v12, v13, (char)v14);
        break;
      case 2:
        a3 = (cnnavigation::GNSSUTCParameters *)((char *)a3 + 72);
        IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid)
          goto LABEL_35;
        v55 = 12;
        v54 = 3;
        sub_18D17FE1C(a2, __p);
        if (v53 >= 0)
          v33 = __p;
        else
          LOBYTE(v33) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,GLONASS Conversion to UTC not available,SV,%s", v28, v29, v30, v31, v32, (char)v33);
        break;
      case 3:
        a3 = (cnnavigation::GNSSUTCParameters *)((char *)a3 + 144);
        IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid)
          goto LABEL_35;
        v55 = 12;
        v54 = 3;
        sub_18D17FE1C(a2, __p);
        if (v53 >= 0)
          v39 = __p;
        else
          LOBYTE(v39) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,Galileo Conversion to UTC not available,SV,%s", v34, v35, v36, v37, v38, (char)v39);
        break;
      case 4:
        a3 = (cnnavigation::GNSSUTCParameters *)((char *)a3 + 216);
        IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid)
          goto LABEL_35;
        v55 = 12;
        v54 = 3;
        sub_18D17FE1C(a2, __p);
        if (v53 >= 0)
          v51 = __p;
        else
          LOBYTE(v51) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,BDS Conversion to UTC not available,SV,%s", v46, v47, v48, v49, v50, (char)v51);
        break;
      case 6:
        a3 = (cnnavigation::GNSSUTCParameters *)((char *)a3 + 288);
        IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid)
        {
LABEL_35:
          if (*(_BYTE *)(a2 + 48))
            return raven::GnssSvDatabase::PopulateEphemFromAnchorPoints(IsValid, a2, (double *)a3, (_QWORD *)a4);
          else
            return raven::GnssSvDatabase::PopulateEphemFromPolynomial(IsValid, a2, (double *)a3, a4);
        }
        v55 = 12;
        v54 = 3;
        sub_18D17FE1C(a2, __p);
        if (v53 >= 0)
          v45 = __p;
        else
          LOBYTE(v45) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,Navic Conversion to UTC not available,SV,%s", v40, v41, v42, v43, v44, (char)v45);
        break;
      default:
        v55 = 12;
        v54 = 4;
        sub_18D17FE1C(a2, __p);
        if (v53 >= 0)
          v27 = __p;
        else
          LOBYTE(v27) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,Unhandled SV type,SV,%s", v22, v23, v24, v25, v26, (char)v27);
        break;
    }
  }
  else
  {
    v55 = 12;
    v54 = 4;
    sub_18D17FE1C(a2, __p);
    if (v53 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,Unexpected inability to convert to CNSatId,SV,%s", v15, v16, v17, v18, v19, (char)v20);
  }
  if (v53 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_18D18405C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::GnssSvDatabase::PopulateGnssSvData(raven::GnssSvDatabase *a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v12;
  __int128 v13;
  uint64_t i;
  char *v15;
  int *v16;
  int *v17;
  int *v18;
  uint64_t *v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  _BOOL4 v23;
  BOOL v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  int v32;
  char *v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  char *v53;
  int *v54;
  int *v55;
  unsigned int v57;
  _BYTE v58[48];
  __int128 v59;
  int v60;
  __int16 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  __int16 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int16 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  char v90;
  unsigned __int8 v91;
  __int16 v92;
  void *v93;
  int64x2_t v94;
  char *v95;
  _QWORD *v96;

  *(_WORD *)v58 = 0;
  v61 = 0;
  v68 = 0;
  v75 = 0;
  v82 = 0;
  memset(&v58[8], 0, 36);
  v59 = 0uLL;
  v60 = 0;
  v62 = 0u;
  v63 = 0u;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v78 = 0;
  v77 = 0u;
  v76 = 0u;
  v81 = 0;
  v79 = 0;
  v80 = 0;
  v83 = 0u;
  v84 = 0u;
  v85 = 0;
  v88 = 0;
  v86 = 0;
  v87 = 0;
  v57 = raven::GnssSvDatabase::PopulateGnssUtcParameters(a1, (uint64_t)v58, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v57)
    return v57;
  *(_DWORD *)(a4 + 64) = v60;
  v12 = v59;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v58[32];
  *(_OWORD *)(a4 + 48) = v12;
  v13 = *(_OWORD *)&v58[16];
  *(_OWORD *)a4 = *(_OWORD *)v58;
  *(_OWORD *)(a4 + 16) = v13;
  v15 = *a3;
  for (i = (uint64_t)a3[1]; (char *)i != v15; i = sub_18D07C868(i - 16))
    ;
  a3[1] = v15;
  v18 = *(int **)a1;
  v16 = (int *)((char *)a1 + 8);
  v17 = v18;
  if (v18 == v16)
    return v57;
  do
  {
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_27;
    sub_18D0778AC(&v93, "");
    LOBYTE(v95) = 0;
    HIDWORD(v95) = -1;
    if ((sub_18D180DAC(v17 + 16, (uint64_t)&v93) & 1) == 0)
    {
      v92 = 12;
      v91 = 4;
      sub_18D17FE1C((uint64_t)(v17 + 16), &v89);
      v31 = &v89;
      if (v90 < 0)
        LOBYTE(v31) = v89;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v92, &v91, "#svdb,Unexpected failure to convert to CN id,%s", v26, v27, v28, v29, v30, (char)v31);
      if (v90 < 0)
        operator delete((void *)v89);
LABEL_22:
      v32 = 0;
      goto LABEL_23;
    }
    v19 = *(uint64_t **)(a2 + 8);
    if (!v19)
      goto LABEL_22;
    while (1)
    {
      v20 = *((unsigned __int8 *)v19 + 56);
      v21 = v20 < v95;
      v22 = *((_DWORD *)v19 + 15);
      if (v95 == v20)
        v21 = v22 < SHIDWORD(v95);
      if (v21)
        goto LABEL_16;
      v23 = SHIDWORD(v95) < v22;
      v24 = v95 == v20;
      v25 = v95 < v20;
      if (v24)
        v25 = v23;
      if (!v25)
        break;
      ++v19;
LABEL_16:
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_22;
    }
    v32 = 1;
LABEL_23:
    if (v94.i8[15] < 0)
    {
      operator delete(v93);
      if (!v32)
        goto LABEL_49;
    }
    else if (!v32)
    {
      goto LABEL_49;
    }
LABEL_27:
    v33 = (char *)operator new(0x178uLL);
    *((_QWORD *)v33 + 1) = 0;
    *((_QWORD *)v33 + 2) = 0;
    *(_QWORD *)v33 = &off_1E25CCFD8;
    *(_OWORD *)(v33 + 24) = 0u;
    *(_OWORD *)(v33 + 40) = 0u;
    *(_OWORD *)(v33 + 56) = 0u;
    *(_OWORD *)(v33 + 72) = 0u;
    *(_OWORD *)(v33 + 88) = 0u;
    *(_OWORD *)(v33 + 104) = 0u;
    *(_OWORD *)(v33 + 120) = 0u;
    *(_OWORD *)(v33 + 136) = 0u;
    *(_OWORD *)(v33 + 152) = 0u;
    *(_OWORD *)(v33 + 168) = 0u;
    *(_OWORD *)(v33 + 184) = 0u;
    *(_OWORD *)(v33 + 200) = 0u;
    *(_OWORD *)(v33 + 216) = 0u;
    *(_OWORD *)(v33 + 232) = 0u;
    *(_OWORD *)(v33 + 248) = 0u;
    *(_OWORD *)(v33 + 264) = 0u;
    *(_OWORD *)(v33 + 280) = 0u;
    *(_OWORD *)(v33 + 296) = 0u;
    *(_OWORD *)(v33 + 312) = 0u;
    *(_OWORD *)(v33 + 328) = 0u;
    *(_OWORD *)(v33 + 344) = 0u;
    *(_OWORD *)(v33 + 360) = 0u;
    sub_18D0778AC((_QWORD *)v33 + 3, "");
    v33[48] = 0;
    *((_DWORD *)v33 + 13) = -1;
    *((_QWORD *)v33 + 7) = &unk_1E25B9850;
    v34 = sub_18D0778AC((_QWORD *)v33 + 8, "");
    v33[88] = 0;
    *((_DWORD *)v33 + 23) = -1;
    v33[312] = 0;
    v33[320] = 0;
    v33[328] = 0;
    *((_OWORD *)v33 + 21) = 0u;
    *((_OWORD *)v33 + 22) = 0u;
    *((_QWORD *)v33 + 46) = 0;
    *((_OWORD *)v33 + 6) = 0u;
    *((_OWORD *)v33 + 7) = 0u;
    *((_OWORD *)v33 + 8) = 0u;
    *((_OWORD *)v33 + 9) = 0u;
    *((_OWORD *)v33 + 10) = 0u;
    *((_OWORD *)v33 + 11) = 0u;
    *((_OWORD *)v33 + 12) = 0u;
    *((_OWORD *)v33 + 13) = 0u;
    *((_OWORD *)v33 + 14) = 0u;
    *((_OWORD *)v33 + 15) = 0u;
    *((_OWORD *)v33 + 16) = 0u;
    *((_OWORD *)v33 + 17) = 0u;
    *((_OWORD *)v33 + 18) = 0u;
    v33[304] = 0;
    *(_QWORD *)&v89 = v33 + 24;
    *((_QWORD *)&v89 + 1) = v33;
    if (raven::GnssSvDatabase::PopulateGnssSvDataForOneSv((uint64_t)v34, (uint64_t)(v17 + 16), (cnnavigation::GNSSUTCParameters *)v58, (uint64_t)(v33 + 24)))
    {
      v36 = a3[1];
      v35 = (unint64_t)a3[2];
      if ((unint64_t)v36 >= v35)
      {
        v41 = (v36 - *a3) >> 4;
        if ((unint64_t)(v41 + 1) >> 60)
          sub_18D07AFE4();
        v42 = v35 - (_QWORD)*a3;
        v43 = v42 >> 3;
        if (v42 >> 3 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
          v44 = 0xFFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        v96 = a3 + 2;
        v45 = (char *)sub_18D16735C((uint64_t)(a3 + 2), v44);
        v47 = &v45[16 * v41];
        *(_OWORD *)v47 = v89;
        v89 = 0uLL;
        v49 = *a3;
        v48 = a3[1];
        if (v48 == *a3)
        {
          v52 = vdupq_n_s64((unint64_t)v48);
          v50 = &v45[16 * v41];
        }
        else
        {
          v50 = &v45[16 * v41];
          do
          {
            v51 = *((_OWORD *)v48 - 1);
            v48 -= 16;
            *((_OWORD *)v50 - 1) = v51;
            v50 -= 16;
            *(_QWORD *)v48 = 0;
            *((_QWORD *)v48 + 1) = 0;
          }
          while (v48 != v49);
          v52 = *(int64x2_t *)a3;
        }
        v37 = v47 + 16;
        *a3 = v50;
        a3[1] = v47 + 16;
        v94 = v52;
        v53 = a3[2];
        a3[2] = &v45[16 * v46];
        v95 = v53;
        v93 = (void *)v52.i64[0];
        sub_18D1852F0((uint64_t)&v93);
      }
      else
      {
        *(_OWORD *)v36 = v89;
        v37 = v36 + 16;
      }
      a3[1] = v37;
    }
    else
    {
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
LABEL_49:
    v54 = (int *)*((_QWORD *)v17 + 1);
    if (v54)
    {
      do
      {
        v55 = v54;
        v54 = *(int **)v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        v55 = (int *)*((_QWORD *)v17 + 2);
        v24 = *(_QWORD *)v55 == (_QWORD)v17;
        v17 = v55;
      }
      while (!v24);
    }
    v17 = v55;
  }
  while (v55 != v16);
  return v57;
}

void sub_18D184534(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssSvDatabase::FetchSvBandCorrection(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  cnprint::CNPrinter *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  int v10;
  cnprint::CNPrinter *v11;
  unsigned int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  __int128 v21;
  __int128 v22;
  double v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  unsigned __int8 v42;
  __int16 v43;

  v6 = *(_QWORD *)(a1 + 8);
  v4 = (cnprint::CNPrinter *)(a1 + 8);
  v5 = v6;
  if (!v6)
    return 0;
  v9 = *(unsigned __int8 *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v11 = v4;
  do
  {
    v12 = *(unsigned __int8 *)(v5 + 56);
    v14 = v12 == v9;
    v13 = v12 > v9;
    if (v14)
      v13 = *(_DWORD *)(v5 + 60) > v10;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v5 + 8);
    else
      v15 = (uint64_t *)v5;
    if (v14)
      v11 = (cnprint::CNPrinter *)v5;
    v5 = *v15;
  }
  while (*v15);
  if (v11 == v4)
    return 0;
  v16 = *((unsigned __int8 *)v11 + 56);
  v17 = *((_DWORD *)v11 + 15) < v10;
  v14 = v16 == v9;
  v18 = v16 < v9;
  if (v14)
    v18 = v17;
  if (v18)
    return 0;
  v20 = (unsigned __int8 *)*((_QWORD *)v11 + 36);
  v19 = (unsigned __int8 *)*((_QWORD *)v11 + 37);
  if (v20 != v19)
  {
    while (*v20 != *a3)
    {
      v20 += 40;
      if (v20 == v19)
        goto LABEL_21;
    }
    v21 = *(_OWORD *)v20;
    v22 = *((_OWORD *)v20 + 1);
    a4[32] = v20[32];
    *(_OWORD *)a4 = v21;
    *((_OWORD *)a4 + 1) = v22;
  }
LABEL_21:
  if (!*a4
    || (*((_QWORD *)a4 + 2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a4 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a4 + 3) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  v23 = fabs(*((double *)a4 + 1));
  if (fabs(*((double *)a4 + 2)) < 2.22044605e-16 || v23 < 2.22044605e-16)
  {
    LOWORD(v40[0]) = 12;
    LOBYTE(__p[0]) = 4;
    v25 = sub_18D181C54(a2);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v40, (unsigned __int8 *)__p, "#svdb,SV band corr failed check,missing iono/tropo,%s", v26, v27, v28, v29, v30, v25);
    return 0;
  }
  if (a4[32] && !cnprint::CNPrinter::GetLogLevel(v4))
  {
    v43 = 12;
    v42 = 0;
    v32 = sub_18D181C54(a2);
    sub_18D18482C(*a4, (uint64_t)v40);
    sub_18D0778AC(__p, off_1E25CD248[(char)a4[32]]);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, &v42, "#svdb,SV band corr has ionospheric source,svid,%s,band,%s,source,%s,delay,%.2f,nsec", v33, v34, v35, v36, v37, v32);
    if (v39 < 0)
      operator delete(__p[0]);
    if (v41 < 0)
      operator delete(v40[0]);
  }
  return 1;
}

void sub_18D1847F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D18482C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  switch((int)result)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 543911509;
      goto LABEL_12;
    case 1:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 1094922572;
      goto LABEL_12;
    case 2:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 538981708;
      goto LABEL_12;
    case 3:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 543568204;
      goto LABEL_12;
    case 4:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 541667650;
      goto LABEL_12;
    case 5:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 541274434;
      goto LABEL_12;
    case 6:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 543240770;
      goto LABEL_12;
    case 7:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 538980677;
      goto LABEL_12;
    case 8:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 543241541;
      goto LABEL_12;
    case 9:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 1112748364;
LABEL_12:
      *(_DWORD *)a2 = v2;
      break;
    case 10:
      *(_BYTE *)(a2 + 23) = 3;
      *(_WORD *)a2 = 19534;
      *(_BYTE *)(a2 + 2) = 53;
      break;
    default:
      return result;
  }
  return result;
}

void sub_18D18494C(char **a1, const void **a2)
{
  char *v3;
  char *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  void *v17;
  char *v18;

  if (*((unsigned __int8 *)a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (a1 != (char **)a2 && *((_BYTE *)a1 + 24))
    {
      v3 = (char *)*a2;
      v4 = (char *)a2[1];
      v5 = v4 - (_BYTE *)*a2;
      v6 = v5 >> 5;
      v7 = (uint64_t)a1[2];
      v8 = *a1;
      if (v5 >> 5 <= (unint64_t)((v7 - (uint64_t)*a1) >> 5))
      {
        v11 = (void **)(a1 + 1);
        v14 = a1[1];
        v15 = (v14 - v8) >> 5;
        if (v15 < v6)
        {
          v16 = &v3[32 * v15];
          if (v14 != v8)
          {
            memmove(v8, *a2, v14 - v8);
            v8 = (char *)*v11;
          }
          v5 = v4 - v16;
          if (v4 == v16)
            goto LABEL_27;
          v17 = v8;
          v18 = v16;
          goto LABEL_26;
        }
      }
      else
      {
        if (v8)
        {
          a1[1] = v8;
          operator delete(v8);
          v7 = 0;
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
        }
        if (v5 < 0)
          sub_18D07AFE4();
        v9 = v7 >> 4;
        if (v7 >> 4 <= v6)
          v9 = v5 >> 5;
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
          v10 = 0x7FFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        sub_18D184AB4(a1, v10);
        v12 = a1[1];
        v11 = (void **)(a1 + 1);
        v8 = v12;
      }
      if (v4 == v3)
      {
LABEL_27:
        *v11 = &v8[v5];
        return;
      }
      v17 = v8;
      v18 = v3;
LABEL_26:
      memmove(v17, v18, v5);
      goto LABEL_27;
    }
  }
  else if (*((_BYTE *)a1 + 24))
  {
    v13 = *a1;
    if (*a1)
    {
      a1[1] = v13;
      operator delete(v13);
    }
    *((_BYTE *)a1 + 24) = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_18D184B28(a1, *a2, (uint64_t)a2[1], ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
    *((_BYTE *)a1 + 24) = 1;
  }
}

char *sub_18D184AB4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_18D07AFE4();
  result = (char *)sub_18D184AF4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_18D184AF4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_18D0788A0();
  return operator new(32 * a2);
}

_QWORD *sub_18D184B28(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_18D184AB4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18D184B84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_18D184BA0(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666)
      sub_18D07AFE4();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    result = sub_18D184CE0(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 7;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 7);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 7;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_18D184CE0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    sub_18D07AFE4();
  result = (char *)sub_18D184D30((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *sub_18D184D30(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_18D0788A0();
  return operator new(40 * a2);
}

_QWORD *sub_18D184D74(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_18D184CE0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 7);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18D184DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_18D184DEC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (v2 && sub_18D184F20(v2))
    return 1;
  v3 = a1[1];
  if (v3)
  {
    if (*(_WORD *)v3 && *(unsigned __int16 *)(v3 + 2) < 0x5B5u
      || *(_QWORD *)(v3 + 8) && (*(_QWORD *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      return 1;
    }
  }
  v4 = a1[2];
  if (v4)
  {
    if (*(_WORD *)v4
      || *(_QWORD *)(v4 + 8)
      && (*(_QWORD *)(v4 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(v4 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      return 1;
    }
  }
  v5 = a1[3];
  if (v5)
  {
    if (*(_WORD *)v5
      || *(_QWORD *)(v5 + 8)
      && (*(_QWORD *)(v5 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(v5 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      return 1;
    }
  }
  v6 = a1[4];
  if (!v6)
    return 0;
  if (*(_WORD *)v6)
    return 1;
  return *(_QWORD *)(v6 + 8)
      && (*(_QWORD *)(v6 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(v6 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

BOOL sub_18D184F20(uint64_t a1)
{
  int v2;

  if (*(_WORD *)a1)
    return 1;
  if (*(__int16 *)(a1 + 8) != -32768)
  {
    v2 = *(unsigned __int8 *)(a1 + 10);
    if (*(_QWORD *)(a1 + 16))
    {
      if ((v2 != 2) == (*(__int16 *)(a1 + 24) != -32768))
        return *(_QWORD *)(a1 + 32)
            && (*(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      return 1;
    }
    if (v2 != 2)
      return 1;
  }
  return *(_QWORD *)(a1 + 32)
      && (*(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

uint64_t sub_18D184FBC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v14;
  unsigned __int8 v16;
  __int16 v17;

  if ((*(uint64_t *)&a2 <= -1 || ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&a2 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v17 = 5;
    v16 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "Invalid GPS time %.3lf constructed from double", a5, a6, a7, a8, a9, SLOBYTE(a2));
  }
  v14 = vcvtmd_s64_f64(a2 / 604800.0);
  *(_DWORD *)a1 = v14;
  *(double *)(a1 + 8) = a2 + (double)v14 * -604800.0;
  return a1;
}

BOOL sub_18D185074(_DWORD *a1)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  unsigned int v4;
  char v5;

  v1 = 0;
  v2 = *a1;
  if ((int)*a1 > 15)
  {
    switch(v2)
    {
      case 16:
        v3 = a1 + 1;
        v4 = 10;
        v5 = 63;
        break;
      case 32:
        v3 = a1 + 1;
        v4 = 22;
        v5 = -120;
        break;
      case 64:
        v3 = a1 + 1;
        v4 = 14;
LABEL_11:
        v5 = -1;
        break;
      default:
        return v1;
    }
    return v4 > (*v3 + v5);
  }
  switch(v2)
  {
    case 1:
      v3 = a1 + 1;
      v4 = 32;
      goto LABEL_11;
    case 2:
      v3 = (char *)a1 + 5;
      v4 = 14;
      v5 = 7;
      return v4 > (*v3 + v5);
    case 4:
      v3 = a1 + 1;
      v4 = 63;
      goto LABEL_11;
    case 8:
      v3 = a1 + 1;
      v4 = 36;
      goto LABEL_11;
    default:
      return v1;
  }
  return v1;
}

uint64_t sub_18D185138(uint64_t **a1, unsigned __int8 a2, char a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((unsigned __int8 *)v5 + 25);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[25] = a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    sub_18D083D78(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

char *sub_18D1851FC(char *result, char *__src, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  char *v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  size_t v15;
  void *v16;
  char *v17;

  v5 = result;
  v6 = *((_QWORD *)result + 2);
  v7 = *(char **)result;
  if ((unint64_t)(v6 - *(_QWORD *)result) < 0x20)
  {
    if (v7)
    {
      *((_QWORD *)result + 1) = v7;
      operator delete(v7);
      v6 = 0;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    v8 = v6 >> 2;
    if ((unint64_t)(v6 >> 2) <= 4)
      v8 = 4;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = sub_18D169B48(v5, v9);
    v11 = (char *)v5[1];
    v10 = (void **)(v5 + 1);
    v7 = v11;
LABEL_15:
    v15 = a3 - (_QWORD)__src;
    if (v15)
    {
      v16 = v7;
      v17 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v10 = (void **)(result + 8);
  v12 = (_BYTE *)*((_QWORD *)result + 1);
  v13 = v12 - v7;
  if ((unint64_t)(v12 - v7) > 0x1F)
    goto LABEL_15;
  v14 = &__src[v13];
  if (v12 != v7)
  {
    result = (char *)memmove(*(void **)result, __src, v13);
    v7 = (char *)*v10;
  }
  v15 = a3 - (_QWORD)v14;
  if (v15)
  {
    v16 = v7;
    v17 = v14;
LABEL_17:
    result = (char *)memmove(v16, v17, v15);
  }
LABEL_18:
  *v10 = &v7[v15];
  return result;
}

uint64_t sub_18D1852F0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_18D07C868(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18D18533C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_18D185398(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_18D1853E8((_QWORD *)a1, a2);
  return a1;
}

void sub_18D1853C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D1853E8(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = sub_18D184B28(result, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

void sub_18D185430(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      operator delete(v3);
    }
  }
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D185488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t *v11;
  unsigned int v12;
  _BOOL4 v13;
  int v14;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *(unsigned __int8 *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = v2;
  do
  {
    v8 = *(unsigned __int8 *)(v3 + 56);
    if (v8 == v5)
      v9 = v6 < *(_DWORD *)(v3 + 60);
    else
      v9 = v5 < v8;
    v10 = !v9;
    if (v9)
      v11 = (uint64_t *)(v3 + 8);
    else
      v11 = (uint64_t *)v3;
    if (v10)
      v7 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = *(unsigned __int8 *)(v7 + 56);
  v13 = *(_DWORD *)(v7 + 60) < v6;
  v14 = v5 == v12 ? v13 : v12 < v5;
  if (v14 == 1)
    return v2;
  return v7;
}

uint64_t *sub_18D185510(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_18D185564(v6, a2);
}

uint64_t *sub_18D185564(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_18D1858E8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = a1 + 8;
    do
    {
      v4 = *(_DWORD *)(v2 + 28);
      v5 = v4 < a2;
      if (v4 >= a2)
        v6 = (uint64_t *)v2;
      else
        v6 = (uint64_t *)(v2 + 8);
      if (!v5)
        v3 = v2;
      v2 = *v6;
    }
    while (*v6);
    if (v3 != a1 + 8 && *(_DWORD *)(v3 + 28) <= a2)
    {
      sub_18D185510((uint64_t **)a1, (uint64_t *)v3);
      operator delete((void *)v3);
    }
  }
}

uint64_t *sub_18D185958(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_18D083D78(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_18D1859AC(uint64_t **a1, unsigned __int8 a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t **v7;
  char **v8;
  uint64_t *v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  BOOL v14;
  _BOOL4 v15;
  char *v16;
  _BYTE *v17;
  int64x2_t v18;
  uint64_t *v19;
  _QWORD v21[2];
  char v22;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = (char **)(a1 + 1);
  v9 = (uint64_t *)(a1 + 1);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = v6;
        v10 = *((unsigned __int8 *)v6 + 56);
        v11 = *((_DWORD *)v9 + 15);
        v12 = v11 < a3;
        if (v10 != a2)
          v12 = v10 < a2;
        if (!v12)
          break;
        v6 = (uint64_t *)*v9;
        v8 = (char **)v9;
        if (!*v9)
          goto LABEL_12;
      }
      v13 = v11 > a3;
      v14 = v10 == a2;
      v15 = v10 > a2;
      if (v14)
        v15 = v13;
      if (!v15)
        break;
      v6 = (uint64_t *)v9[1];
      if (!v6)
      {
        v8 = (char **)(v9 + 1);
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v16 = (char *)operator new(0x140uLL);
    v21[0] = v16;
    v21[1] = v7;
    v22 = 0;
    v17 = v16 + 32;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_18D077798(v17, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)a4;
      *((_QWORD *)v16 + 6) = *(_QWORD *)(a4 + 16);
    }
    *((_QWORD *)v16 + 7) = *(_QWORD *)(a4 + 24);
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    *((_OWORD *)v16 + 9) = 0u;
    *((_OWORD *)v16 + 10) = 0u;
    *((_OWORD *)v16 + 11) = 0u;
    *((_OWORD *)v16 + 12) = 0u;
    *((_OWORD *)v16 + 13) = 0u;
    *((_OWORD *)v16 + 18) = 0u;
    *((_OWORD *)v16 + 19) = 0u;
    v16[69] = 127;
    *((_QWORD *)v16 + 9) = 0x7FF8000000000000;
    v18 = vdupq_n_s64(0x7FF8000000000000uLL);
    *((_OWORD *)v16 + 14) = 0u;
    *((int64x2_t *)v16 + 15) = v18;
    *((int64x2_t *)v16 + 16) = v18;
    *((_OWORD *)v16 + 17) = 0u;
    *((_DWORD *)v16 + 68) = 2143289344;
    *((_WORD *)v16 + 142) = 0;
    *(_QWORD *)(v16 + 276) = 0;
    *((_QWORD *)v16 + 36) = 0;
    *((_QWORD *)v16 + 37) = 0;
    *((_DWORD *)v16 + 78) = 0;
    *((_QWORD *)v16 + 38) = 0;
    v22 = 1;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = v9;
    *v8 = v16;
    v19 = (uint64_t *)**a1;
    if (v19)
    {
      *a1 = v19;
      v16 = *v8;
    }
    sub_18D083D78(a1[1], (uint64_t *)v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = (uint64_t *)v21[0];
    v21[0] = 0;
    sub_18D185B60((uint64_t)v21);
  }
  return v9;
}

void sub_18D185B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D185B60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18D185B60(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_18D18533C((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_QWORD *sub_18D185BA4(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D185BB8(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

void sub_18D185BCC(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D185BF0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D185BFC(uint64_t a1)
{
  char v1[4];

  sub_18D159878(a1, v1);
}

void sub_18D185C1C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D185C40(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D185C4C(uint64_t a1)
{
  char v1[16];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D185C98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D185CA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D185CD8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B9850;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  *(_QWORD *)a1 = off_1E25B93B0;
  return a1;
}

void sub_18D185D28(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B9850;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  *(_QWORD *)a1 = off_1E25B93B0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D185D88(uint64_t a1, double *a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  BOOL v46;

  if (*(_BYTE *)(a1 + 32))
  {
    if (!sub_18D03FE4C(a2, (double *)(a1 + 40)) && !sub_18D03F608(a2, (double *)(a1 + 56)))
    {
      v13 = CNTimeSpan::operator-((uint64_t)a2, (_QWORD *)(a1 + 72), v11, v12);
      v15 = v14 + (double)v13;
      if (fabs(v15) <= 2592000.0)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *a4 = 0.0;
        *a5 = 0.0;
        v20 = a1 + 88;
        v21 = a1 + 120;
        *a6 = 0.0;
        v22 = 0.0;
        v23 = 1.0;
        v24 = 0.0;
        do
        {
          v25 = v22;
          v22 = v23;
          *a4 = *a4 + *(double *)(v20 + v17) * v23;
          *a5 = *a5 + *(double *)(v20 + v17) * (double)v18 * v25;
          *a6 = *a6 + *(double *)(v20 + v17) * (double)(v19 * v18) * v24;
          v23 = v15 * v23;
          v19 = v18++;
          v17 += 8;
          v24 = v25;
        }
        while (v17 != 32);
        v26 = 0;
        v27 = 0;
        v28 = 0;
        a4[1] = 0.0;
        a5[1] = 0.0;
        v29 = a1 + 152;
        v30 = 0.0;
        a6[1] = 0.0;
        v31 = 1.0;
        v32 = 0.0;
        do
        {
          v33 = v30;
          v30 = v31;
          a4[1] = a4[1] + *(double *)(v21 + v26) * v31;
          a5[1] = a5[1] + *(double *)(v21 + v26) * (double)v27 * v33;
          a6[1] = a6[1] + *(double *)(v21 + v26) * (double)(v28 * v27) * v32;
          v31 = v15 * v31;
          v28 = v27++;
          v26 += 8;
          v32 = v33;
        }
        while (v26 != 32);
        v34 = 0;
        v35 = 0;
        v36 = 0;
        a4[2] = 0.0;
        a5[2] = 0.0;
        v37 = 0.0;
        v38 = 1.0;
        a6[2] = 0.0;
        v39 = 0.0;
        do
        {
          v40 = v37;
          v37 = v38;
          a4[2] = a4[2] + *(double *)(v29 + v34) * v38;
          a5[2] = a5[2] + *(double *)(v29 + v34) * (double)v35 * v40;
          a6[2] = a6[2] + *(double *)(v29 + v34) * (double)(v36 * v35) * v39;
          v38 = v15 * v38;
          v36 = v35++;
          v34 += 8;
          v39 = v40;
        }
        while (v34 != 32);
        v41 = 0;
        v42 = 0.0;
        while ((*(_QWORD *)&a4[v41] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v42 = v42 + a4[v41] * a4[v41];
          if (++v41 == 3)
          {
            if (sqrt(v42) >= 6341752.3)
            {
              v43 = 0;
              while ((*(_QWORD *)&a5[v43] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
              {
                if (++v43 == 3)
                {
                  v44 = 0;
                  do
                  {
                    v45 = (*(_QWORD *)&a6[v44] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                    v46 = (*(_QWORD *)&a6[v44] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v44 == 2;
                    ++v44;
                  }
                  while (!v46);
                  return (v45 - 1);
                }
              }
            }
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D186068(uint64_t a1, double *a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;

  if (!*(_BYTE *)(a1 + 32))
    return 0xFFFFFFFFLL;
  if (sub_18D03FE4C(a2, (double *)(a1 + 40)))
    return 0xFFFFFFFFLL;
  if (sub_18D03F608(a2, (double *)(a1 + 56)))
    return 0xFFFFFFFFLL;
  v12 = CNTimeSpan::operator-((uint64_t)a2, (_QWORD *)(a1 + 72), v10, v11);
  v14 = v13 + (double)v12;
  if (fabs(v14) > 2592000.0)
    return 0xFFFFFFFFLL;
  v15 = 0;
  v16 = 0;
  *a4 = 0.0;
  v17 = a1 + 184;
  v18 = 1.0;
  v19 = 0.0;
  *a6 = 0.0;
  a6[1] = 0.0;
  do
  {
    *a4 = *a4 + *(double *)(v17 + v16) * v18;
    v20 = *a6 + *(double *)(v17 + v16) * (double)v15 * v19;
    *a6 = v20;
    v19 = v18;
    v18 = v14 * v18;
    v16 += 8;
    ++v15;
  }
  while (v16 != 32);
  if ((*(_QWORD *)a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D186178(uint64_t a1, double *a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;

  if (!*(_BYTE *)(a1 + 32))
    return 0xFFFFFFFFLL;
  if (sub_18D03FE4C(a2, (double *)(a1 + 40)))
    return 0xFFFFFFFFLL;
  if (sub_18D03F608(a2, (double *)(a1 + 56)))
    return 0xFFFFFFFFLL;
  v12 = CNTimeSpan::operator-((uint64_t)a2, (_QWORD *)(a1 + 72), v10, v11);
  v14 = v13 + (double)v12;
  if (fabs(v14) > 2592000.0)
    return 0xFFFFFFFFLL;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  *a4 = 0.0;
  v18 = a1 + 184;
  v19 = 1.0;
  *a6 = 0.0;
  a6[1] = 0.0;
  v20 = 0.0;
  v21 = 0.0;
  do
  {
    *a4 = *a4 + *(double *)(v18 + v16) * (double)v15 * v21;
    v22 = *a6 + *(double *)(v18 + v16) * (double)(v15 * v17) * v20;
    *a6 = v22;
    v16 += 8;
    v20 = v21;
    v21 = v19;
    v19 = v14 * v19;
    v17 = v15++;
  }
  while (v16 != 32);
  if ((*(_QWORD *)a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  return 0xFFFFFFFFLL;
}

uint64_t raven::VelocityChecker::Configure(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = a3;
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 920);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*a2 + 2512);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = raven::GNSSMeasurementSelectionParameters::AllMeasurementsExcluded((raven::GNSSMeasurementSelectionParameters *)(v4 + 592)) ^ 1;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::VelocityChecker::HandleEvent(raven::VelocityChecker *this, const raven::VelocityEvent *a2, raven::VelocityEvent *a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  uint64_t result;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t **v16;
  double *v17;
  double v18;
  uint64_t **v19;
  uint64_t v20;
  double *v21;
  double v22;
  uint64_t **v23;
  double *v24;
  double v25;
  uint64_t **v26;
  double *v27;
  double v28;
  uint64_t **v29;
  int v30;
  double *v31;
  double v32;
  uint64_t **v33;
  double *v34;
  double v35;
  uint64_t **v36;
  double *v37;
  double v38;
  uint64_t **v39;
  int v40;
  double *v41;
  double v42;
  uint64_t **v43;
  _BOOL4 v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  _BYTE v57[64];
  _BYTE v58[64];
  _BYTE v59[32];
  double *v60;
  unsigned __int8 v61[112];
  double v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  double *v66;
  double v67[3];
  void *v68;
  __int128 v69;
  uint64_t v70;
  double *v71;
  uint64_t v72;

  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v68) = 12;
    v61[0] = 4;
    v46 = (*(uint64_t (**)(const raven::VelocityEvent *, const raven::VelocityEvent *, raven::VelocityEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v53 = v47 + (double)v46;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, v61, "t,%.3lf,VelocityChecker, not configured", v48, v49, v50, v51, v52, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  v4 = *((unsigned __int8 *)a2 + 200);
  v5 = v4 > 0xD;
  v6 = (1 << v4) & 0x3808;
  v7 = v5 || v6 == 0;
  if (!v7
    || (*((_QWORD *)a2 + 36) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a2 + 37) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a2 + 38) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0xFFFFFFFFLL;
  }
  result = 0xFFFFFFFFLL;
  if ((*((_QWORD *)a2 + 39) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a2 + 39) <= 0.0
    || (*((_QWORD *)a2 + 42) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a2 + 42) <= 0.0
    || (*((_QWORD *)a2 + 44) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a2 + 44) <= 0.0
    || (*((_QWORD *)a2 + 40) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a2 + 41) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a2 + 43) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return result;
  }
  v55 = *((double *)a2 + 37);
  v56 = *((double *)a2 + 38);
  v54 = *((double *)a2 + 36);
  v70 = 0x300000003;
  v68 = &unk_1E25C78E0;
  v69 = xmmword_18D30BB60;
  v71 = (double *)&v72;
  if (!sub_18D186824((uint64_t)a2, (uint64_t)&v68)
    || sub_18D1868AC((uint64_t)&v68, v11) > *((double *)this + 4)
    || (*((unsigned __int8 *)a2 + 200) | 8) == 9 && *((_BYTE *)this + 40))
  {
    return 0xFFFFFFFFLL;
  }
  memcpy((char *)a3 + 8, (char *)a2 + 8, 0x160uLL);
  if (!*((_BYTE *)this + 9))
    return 0;
  result = (uint64_t)sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  if (!result)
    return result;
  if (!*((_BYTE *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0) + 1544))
    return 0;
  v12 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0) + 194);
  v13 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0) + 195);
  v14 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0) + 196);
  v15 = *v71;
  v16 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v17 = v71;
  *v71 = v15 + *((double *)v16 + 197);
  v18 = v17[SHIDWORD(v69)];
  v19 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v20 = SHIDWORD(v69);
  v21 = v71;
  v71[SHIDWORD(v69)] = v18 + *((double *)v19 + 198);
  v22 = v21[2 * v20];
  v23 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v24 = v71;
  v71[2 * SHIDWORD(v69)] = v22 + *((double *)v23 + 199);
  v25 = v24[1];
  v26 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v27 = v71;
  v71[1] = v25 + *((double *)v26 + 198);
  v28 = v27[SHIDWORD(v69) + 1];
  v29 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v30 = HIDWORD(v69);
  v31 = v71;
  v71[HIDWORD(v69) + 1] = v28 + *((double *)v29 + 200);
  v32 = v31[(2 * v30) | 1];
  v33 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v34 = v71;
  v71[2 * SHIDWORD(v69) + 1] = v32 + *((double *)v33 + 201);
  v35 = v34[2];
  v36 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v37 = v71;
  v71[2] = v35 + *((double *)v36 + 199);
  v38 = v37[SHIDWORD(v69) + 2];
  v39 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v40 = HIDWORD(v69);
  v41 = v71;
  v71[HIDWORD(v69) + 2] = v38 + *((double *)v39 + 201);
  v42 = v41[2 * v40 + 2];
  v43 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3191C0);
  v71[2 * SHIDWORD(v69) + 2] = v42 + *((double *)v43 + 202);
  v65 = 0x100000003;
  v63 = &unk_1E25C7790;
  v64 = xmmword_18D313070;
  v66 = v67;
  v67[0] = v54 - v12;
  v67[1] = v55 - v13;
  v67[2] = v56 - v14;
  v62 = INFINITY;
  sub_18D1869D8((uint64_t)&v68, &v62, (uint64_t)v61);
  if ((*(_QWORD *)&v62 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v62 > *((double *)this + 4))
    return 0xFFFFFFFFLL;
  sub_18D186BA8((uint64_t)&v63, (uint64_t)v57);
  sub_18D186B40((uint64_t)v57, (uint64_t)v61, (uint64_t)v58);
  sub_18D186AE0((uint64_t)v58, (uint64_t)&v63, (uint64_t)v59);
  v44 = fabs(sqrt(*v60)) > *((double *)this + 3);
  if (*((_BYTE *)this + 8))
    v45 = v44;
  else
    v45 = 1;
  return (v45 << 31 >> 31);
}

uint64_t sub_18D186824(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (*(_BYTE *)(a1 + 280))
    v2 = *(_DWORD *)(a2 + 8) == 3;
  else
    v2 = 0;
  v3 = v2 && *(_DWORD *)(a2 + 12) == 3;
  v4 = v3;
  if (v3)
  {
    v5 = *(_QWORD **)(a2 + 32);
    *v5 = *(_QWORD *)(a1 + 312);
    v6 = *(int *)(a2 + 20);
    v5[v6] = *(_QWORD *)(a1 + 320);
    v5[2 * v6] = *(_QWORD *)(a1 + 328);
    v5[1] = *(_QWORD *)(a1 + 320);
    v5[(int)v6 + 1] = *(_QWORD *)(a1 + 336);
    v7 = &v5[2 * (int)v6];
    v7[1] = *(_QWORD *)(a1 + 344);
    v5[2] = *(_QWORD *)(a1 + 328);
    v5[(int)v6 + 2] = *(_QWORD *)(a1 + 344);
    v7[2] = *(_QWORD *)(a1 + 352);
  }
  return v4;
}

double sub_18D1868AC(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  void *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v2 = (_DWORD *)MEMORY[0x1E0C80A78](a1, a2);
  v26 = 0x300000003;
  v24 = &unk_1E25C78E0;
  v25 = xmmword_18D30BB60;
  v27 = &v28;
  v21 = 0x300000003;
  v19 = &unk_1E25C78E0;
  v20 = xmmword_18D30BB60;
  v22 = &v23;
  v16 = 0x100000003;
  v14 = &unk_1E25C77C0;
  v15 = xmmword_18D313070;
  v17 = &v18;
  v11 = 0x1000001E6;
  v9 = &unk_1E25C7C10;
  v10 = xmmword_18D319190;
  v12 = &v13;
  v6 = 0x100000003;
  v4 = &unk_1E25C7790;
  v5 = xmmword_18D313070;
  v7 = &v8;
  return sub_18D186C18(v2, (uint64_t)&v24, (uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v9, (uint64_t)&v4, "2");
}

void sub_18D1869D8(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = &unk_1E25C78E0;
  *(_OWORD *)(a3 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  v15 = 0x100000003;
  v13 = &unk_1E25C77C0;
  v14 = xmmword_18D313070;
  v16 = &v17;
  v10 = 0x100000003;
  v8 = &unk_1E25C77C0;
  v9 = xmmword_18D313070;
  v11 = &v12;
  v5 = 0x10000000CLL;
  v3 = &unk_1E25C6200;
  v4 = xmmword_18D3191A0;
  v6 = &v7;
  *a2 = sub_18D054568(a1, (uint64_t)&v13, (uint64_t)&v8, (uint64_t)&v3, a3);
}

void sub_18D186ACC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D186AE0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)(a3 + 24) = 0x100000001;
  *(_QWORD *)a3 = &unk_1E25C6A40;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  *(_OWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
  return result;
}

void sub_18D186B2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D186B40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x300000001;
  *(_QWORD *)a3 = &unk_1E25C6C20;
  *(_OWORD *)(a3 + 8) = xmmword_18D314670;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D186B94(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D186BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 24) = 0x300000001;
  *(_QWORD *)a2 = &unk_1E25C6C20;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  return sub_18D073454(a1, a2);
}

void sub_18D186C00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D186C18(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *__s1)
{
  double v7;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  unsigned int v31;
  double v32;
  unsigned __int8 v34;
  __int16 v35;
  unsigned __int8 v36;
  __int16 v37;

  v7 = 0.0;
  if (a1[4])
  {
    v15 = a1[2];
    v16 = a1[3];
    if (strcmp(__s1, "1") && strcmp(__s1, "2") && strcmp(__s1, "inf") && strcmp(__s1, "fro"))
    {
      v37 = 4;
      v36 = 5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "Error using Cond: condition number based on invalid %s-norm was requested.", v17, v18, v19, v20, v21, (char)__s1);
    }
    if (!strcmp(__s1, "2"))
    {
      sub_18D15A3D4((uint64_t)a1, a2, a5, a6);
      v30 = *(double **)(a6 + 32);
      if (v15 >= v16)
        v31 = v16;
      else
        v31 = v15;
      v32 = v30[v31 - 1];
      if (v32 <= 0.0)
        return INFINITY;
      else
        return *v30 / v32;
    }
    else if (v15 == v16)
    {
      sub_18D159EE0((uint64_t)a1, a2, a5, a6, __s1);
      v28 = v27;
      sub_18D04F504((uint64_t)a1, a4, a5, a3);
      sub_18D159EE0(a3, a2, a5, a6, __s1);
      return v28 * v29;
    }
    else
    {
      v35 = 4;
      v34 = 5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Error using Cond: condition numbers for non-square matrices cannot be computed based on the %s-norm.", v22, v23, v24, v25, v26, (char)__s1);
    }
  }
  return v7;
}

_QWORD *sub_18D186DE4(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D186DF8(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D186E1C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D186E28(uint64_t a1)
{
  char v1[486];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

_QWORD *sub_18D186E7C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D186E90(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D186EB4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D186EC0(uint64_t a1)
{
  char v1[12];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

double raven::RavenEstimator::RavenEstimator(uint64_t a1, char a2)
{
  double result;

  *(_QWORD *)a1 = &unk_1E25C2308;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = a2;
  *(_WORD *)(a1 + 57) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = &unk_1E25C2218;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 284) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1624) = 0;
  *(_BYTE *)(a1 + 1776) = 0;
  *(_BYTE *)(a1 + 1928) = 0;
  *(_BYTE *)(a1 + 2064) = 0;
  *(_BYTE *)(a1 + 2216) = 0;
  *(_QWORD *)(a1 + 2352) = 0;
  *(_QWORD *)(a1 + 2360) = 0;
  *(_OWORD *)(a1 + 1193) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 2344) = a1 + 2352;
  *(_BYTE *)(a1 + 2368) = 0;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  return result;
}

uint64_t raven::RavenEstimator::IsConfigured(raven::RavenEstimator *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t raven::RavenEstimator::IsInitialized(raven::RavenEstimator *this)
{
  return *((unsigned __int8 *)this + 58);
}

uint64_t raven::RavenEstimator::GetCurrentEstimatorTime(raven::RavenEstimator *this)
{
  return *((_QWORD *)this + 10);
}

BOOL raven::RavenEstimator::ShouldInflatePositionStateUncertaintyForVL(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 result;
  int32x4_t v27;
  int32x4_t v28;
  __int128 v30;
  double v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  __int128 v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE v59[96];
  void *v60;
  __int128 v61;
  uint64_t v62;
  double *v63;
  _BYTE v64[16];

  *a6 = 1.0;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 12);
  if (v7 <= v8)
    v9 = *(_DWORD *)(a2 + 12);
  else
    v9 = *(_DWORD *)(a2 + 8);
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  v11 = !v10 && v9 == 3;
  if (!v11
    || ((v12 = *(_DWORD *)(a4 + 8), v13 = *(_DWORD *)(a4 + 12), v12 <= v13)
      ? (v14 = *(_DWORD *)(a4 + 12))
      : (v14 = *(_DWORD *)(a4 + 8)),
        v12 ? (v15 = v13 == 0) : (v15 = 1),
        !v15 ? (v16 = v14 == 3) : (v16 = 0),
        !v16))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v55) = 12;
      LOBYTE(v45) = 1;
      v17 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 2488), "ShouldInflatePositionStateUncertaintyForVL, Wrong position vector dimension");
LABEL_24:
      if (a1[2511] >= 0)
        LOBYTE(v23) = v17;
      else
        v23 = *((_QWORD *)a1 + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, (unsigned __int8 *)&v45, "%s", v18, v19, v20, v21, v22, v23);
      return 0;
    }
    return 0;
  }
  v27.i64[0] = *(_QWORD *)(a3 + 8);
  v27.i64[1] = *(_QWORD *)(a5 + 8);
  v28.i64[0] = 0x300000003;
  v28.i64[1] = 0x300000003;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v27, v28)))) & 1) != 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v55) = 12;
      LOBYTE(v45) = 1;
      v17 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 2488), "ShouldInflatePositionStateUncertaintyForVL, Wrong position covariance matrix dimensions");
      goto LABEL_24;
    }
    return 0;
  }
  v52 = 0x100000003;
  v50 = &unk_1E25C7790;
  v51 = xmmword_18D313070;
  v53 = &v54;
  sub_18D0540FC(a2, a4, (uint64_t)&v50);
  v47 = 0x300000003;
  v45 = &unk_1E25C78E0;
  v46 = xmmword_18D30BB60;
  v48 = &v49;
  sub_18D053FA4(a3, a5, (uint64_t)&v45);
  v42 = 0x300000001;
  v37 = &unk_1E25C6C20;
  v38 = DWORD1(v51);
  v39 = v51;
  v40 = v51 * DWORD1(v51);
  v41 = DWORD1(v51);
  v43 = &v44;
  sub_18D073454((uint64_t)&v50, (uint64_t)&v37);
  v34 = 0x300000003;
  v32 = &unk_1E25C78E0;
  v33 = xmmword_18D30BB60;
  v35 = &v36;
  v62 = 0x100000003;
  v60 = &unk_1E25C77C0;
  v61 = xmmword_18D313070;
  v63 = (double *)v64;
  v57 = 0x10000000CLL;
  v55 = &unk_1E25C6200;
  v56 = xmmword_18D3191A0;
  v58 = v59;
  sub_18D04F504((uint64_t)&v45, (uint64_t)&v60, (uint64_t)&v55, (uint64_t)&v32);
  v57 = 0x300000001;
  v55 = &unk_1E25C6C20;
  v56 = xmmword_18D314670;
  v58 = v59;
  sub_18D053B2C((uint64_t)&v37, (uint64_t)&v32, (uint64_t)&v55);
  v62 = 0x100000001;
  v60 = &unk_1E25C6A40;
  *(_QWORD *)&v30 = 0x100000001;
  *((_QWORD *)&v30 + 1) = 0x100000001;
  v61 = v30;
  v63 = (double *)v64;
  sub_18D053B2C((uint64_t)&v55, (uint64_t)&v50, (uint64_t)&v60);
  v31 = *v63 / 3.0;
  result = v31 > 2.6;
  if (v31 > 2.6)
    *a6 = sqrt(v31);
  return result;
}

double sub_18D187338@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)(a3 + 24) = 0x100000003;
  *(_QWORD *)a3 = &unk_1E25C7790;
  *(_OWORD *)(a3 + 8) = xmmword_18D313070;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D0540FC(a1, a2, a3);
  return result;
}

void sub_18D18738C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1873A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v9 = 0x100000003;
  v7 = &unk_1E25C77C0;
  v8 = xmmword_18D313070;
  v10 = &v11;
  v4 = 0x10000000CLL;
  v2 = &unk_1E25C6200;
  v3 = xmmword_18D3191A0;
  v5 = &v6;
  sub_18D04F504(a1, (uint64_t)&v7, (uint64_t)&v2, a2);
}

void sub_18D187468(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t raven::RavenEstimator::Configure(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 57))
  {
    puts("Warning: RavenEstimator::Configure() called more than once.");
    return 0xFFFFFFFFLL;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 1168) = *a2;
    *(_BYTE *)(a1 + 57) = 1;
  }
  return result;
}

uint64_t raven::RavenEstimator::GetActiveTime(raven::RavenEstimator *this, int8x16_t a2, int8x16_t a3)
{
  return CNTimeSpan::operator-((uint64_t)this + 80, (_QWORD *)this + 8, a2, a3);
}

uint64_t raven::RavenEstimator::GetEstimatorType(raven::RavenEstimator *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t raven::RavenEstimator::GetLastUpdateTime(raven::RavenEstimator *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t raven::RavenEstimator::GetLastErrorRecoveryTime(raven::RavenEstimator *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t raven::RavenEstimator::GetAcceptedMeasurementCount(raven::RavenEstimator *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t raven::RavenEstimator::GetRejectedMeasurementCount(raven::RavenEstimator *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t raven::RavenEstimator::GetUnusedMeasurementCount(raven::RavenEstimator *this)
{
  return *((_QWORD *)this + 34);
}

double raven::RavenEstimator::UpdatePriorInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    result = 1.0 / (result * result);
    *((double *)this + 140) = result;
  }
  return result;
}

double raven::RavenEstimator::AddCellInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    result = 1.0 / (result * result) + *((double *)this + 143);
    *((double *)this + 143) = result;
  }
  return result;
}

double raven::RavenEstimator::AddGNSSInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    result = 1.0 / (result * result) + *((double *)this + 141);
    *((double *)this + 141) = result;
  }
  return result;
}

double raven::RavenEstimator::AddWiFiInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    result = 1.0 / (result * result) + *((double *)this + 142);
    *((double *)this + 142) = result;
  }
  return result;
}

double raven::RavenEstimator::AddIndoorInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    result = 1.0 / (result * result) + *((double *)this + 144);
    *((double *)this + 144) = result;
  }
  return result;
}

double raven::RavenEstimator::AddAccessoryInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    result = 1.0 / (result * result) + *((double *)this + 145);
    *((double *)this + 145) = result;
  }
  return result;
}

double raven::RavenEstimator::GetTotalInformation(raven::RavenEstimator *this)
{
  return *((double *)this + 140)
       + *((double *)this + 141)
       + *((double *)this + 142)
       + *((double *)this + 143)
       + *((double *)this + 144)
       + *((double *)this + 145);
}

__n128 raven::RavenEstimator::HandleFitnessSessionEvent(raven::RavenEstimator *this, const raven::FitnessSessionEvent *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  unsigned __int8 v27;
  __int16 v28;

  if (*((_BYTE *)this + 57))
  {
    if (*((_BYTE *)this + 1408))
    {
      *((_OWORD *)this + 89) = *(_OWORD *)((char *)a2 + 8);
      v2 = *(_OWORD *)((char *)a2 + 24);
      v3 = *(_OWORD *)((char *)a2 + 40);
      v4 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 93) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 92) = v4;
      *((_OWORD *)this + 91) = v3;
      *((_OWORD *)this + 90) = v2;
      v5 = *(_OWORD *)((char *)a2 + 88);
      v6 = *(_OWORD *)((char *)a2 + 104);
      v7 = *(_OWORD *)((char *)a2 + 120);
      *((_OWORD *)this + 97) = *(_OWORD *)((char *)a2 + 136);
      *((_OWORD *)this + 96) = v7;
      *((_OWORD *)this + 95) = v6;
      *((_OWORD *)this + 94) = v5;
      result = *(__n128 *)((char *)a2 + 152);
      v9 = *(_OWORD *)((char *)a2 + 168);
      v10 = *(_OWORD *)((char *)a2 + 184);
      *((_QWORD *)this + 202) = *((_QWORD *)a2 + 25);
      *((_OWORD *)this + 100) = v10;
      *((_OWORD *)this + 99) = v9;
      *((__n128 *)this + 98) = result;
    }
    else
    {
      *((_QWORD *)this + 177) = &unk_1E25C2BD8;
      *((_OWORD *)this + 89) = *(_OWORD *)((char *)a2 + 8);
      v18 = *(_OWORD *)((char *)a2 + 24);
      v19 = *(_OWORD *)((char *)a2 + 40);
      v20 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 93) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 92) = v20;
      *((_OWORD *)this + 91) = v19;
      *((_OWORD *)this + 90) = v18;
      v21 = *(_OWORD *)((char *)a2 + 88);
      v22 = *(_OWORD *)((char *)a2 + 104);
      v23 = *(_OWORD *)((char *)a2 + 120);
      *((_OWORD *)this + 97) = *(_OWORD *)((char *)a2 + 136);
      *((_OWORD *)this + 96) = v23;
      *((_OWORD *)this + 95) = v22;
      *((_OWORD *)this + 94) = v21;
      result = *(__n128 *)((char *)a2 + 152);
      v24 = *(_OWORD *)((char *)a2 + 168);
      v25 = *(_OWORD *)((char *)a2 + 184);
      *((_QWORD *)this + 202) = *((_QWORD *)a2 + 25);
      *((_OWORD *)this + 100) = v25;
      *((_OWORD *)this + 99) = v24;
      *((__n128 *)this + 98) = result;
      *((_BYTE *)this + 1408) = 1;
    }
  }
  else
  {
    v28 = 12;
    v27 = 4;
    v11 = (*(uint64_t (**)(const raven::FitnessSessionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v26 = v12 + (double)v11;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "t,%.3lf, ERROR: Estimator not configured, failed to handle FitnesSessionEvent.", v13, v14, v15, v16, v17, SLOBYTE(v26));
  }
  return result;
}

__n128 raven::RavenEstimator::HandlePositionContextStateEvent(raven::RavenEstimator *this, const raven::PositionContextStateEvent *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];
  unsigned __int8 v29;
  __int16 v30;

  if (*((_BYTE *)this + 57))
  {
    if (*((_BYTE *)this + 1928))
    {
      v4 = *(_OWORD *)((char *)a2 + 8);
      v5 = *(_OWORD *)((char *)a2 + 24);
      v6 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1976) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 1992) = v6;
      *(_OWORD *)((char *)this + 1944) = v4;
      *(_OWORD *)((char *)this + 1960) = v5;
      result = *(__n128 *)((char *)a2 + 72);
      v8 = *(_OWORD *)((char *)a2 + 88);
      v9 = *(_OWORD *)((char *)a2 + 104);
      *((_QWORD *)this + 257) = *((_QWORD *)a2 + 15);
      *(_OWORD *)((char *)this + 2024) = v8;
      *(_OWORD *)((char *)this + 2040) = v9;
      *(__n128 *)((char *)this + 2008) = result;
    }
    else
    {
      *((_QWORD *)this + 242) = &unk_1E25C3130;
      v22 = *(_OWORD *)((char *)a2 + 8);
      v23 = *(_OWORD *)((char *)a2 + 24);
      v24 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1976) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 1992) = v24;
      *(_OWORD *)((char *)this + 1944) = v22;
      *(_OWORD *)((char *)this + 1960) = v23;
      result = *(__n128 *)((char *)a2 + 72);
      v25 = *(_OWORD *)((char *)a2 + 88);
      v26 = *(_OWORD *)((char *)a2 + 104);
      *((_QWORD *)this + 257) = *((_QWORD *)a2 + 15);
      *(_OWORD *)((char *)this + 2024) = v25;
      *(_OWORD *)((char *)this + 2040) = v26;
      *(__n128 *)((char *)this + 2008) = result;
      *((_BYTE *)this + 1928) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v30 = 12;
    v29 = 1;
    v28[0] = (*(uint64_t (**)(const raven::PositionContextStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v28[1] = v10;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v28, "Estimator not configured, failed to handle PositionContextStateEvent.", v11, v12, v13, v14, v15, v27);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v21) = (_BYTE)this - 72;
    else
      v21 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v16, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t raven::RavenEstimator::HandleGnssPreprocessedMeasurementsEvent(raven::RavenEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  unsigned __int8 v19;
  __int16 v20;

  if (*((_BYTE *)this + 57))
  {
    sub_18D189160((char *)this + 2216, (uint64_t)a2);
    return 0;
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v20 = 12;
      v19 = 1;
      v18[0] = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
      v18[1] = v5;
      cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v18, "Estimator not configured, failed to handle GnssPreprocessedMeasurementsEvent.", v6, v7, v8, v9, v10, v17);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v16) = (_BYTE)this - 72;
      else
        v16 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v11, v12, v13, v14, v15, v16);
    }
    return 0xFFFFFFFFLL;
  }
}

BOOL raven::RavenEstimator::AreGnssMeasurementsAtSameTime(uint64_t a1, _QWORD *a2, _OWORD *a3, int8x16_t a4, int8x16_t a5)
{
  double v6;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  double *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v38;
  __int16 v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  __int128 v43;
  int8x16_t v44;
  int8x16_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v6 = *(double *)a4.i64;
  LOBYTE(v49) = 0;
  *((_QWORD *)&v49 + 1) = 0;
  *(_QWORD *)&v50 = 0;
  BYTE8(v50) = 0;
  v51 = 0uLL;
  LOBYTE(v52) = 0;
  *((_QWORD *)&v52 + 1) = 0;
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = 0x7FF8000000000000;
  *(_QWORD *)&v48 = 0;
  *((_QWORD *)&v48 + 1) = 0x7FF0000000000000;
  LOBYTE(v43) = 0;
  *((_QWORD *)&v43 + 1) = 0;
  v44.i64[0] = 0;
  v44.i8[8] = 0;
  v45 = 0uLL;
  LOBYTE(v46) = 0;
  *((_QWORD *)&v46 + 1) = 0;
  *(_QWORD *)&v47 = 0;
  *((_QWORD *)&v47 + 1) = 0x7FF8000000000000;
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = 0xFFF0000000000000;
  v9 = (uint64_t *)a2[12];
  v10 = (uint64_t *)a2[13];
  while (v9 != v10)
  {
    v11 = *v9;
    if (*v9)
    {
      v12 = *(double **)(v11 + 328);
      v13 = *(__int128 **)(v11 + 336);
      while (v12 != (double *)v13)
      {
        if (sub_18D03FE4C(v12, (double *)&v48))
        {
          v14 = *(_OWORD *)v12;
          v49 = *((_OWORD *)v12 + 1);
          v48 = v14;
          v15 = *((_OWORD *)v12 + 2);
          v16 = *((_OWORD *)v12 + 3);
          v17 = *((_OWORD *)v12 + 5);
          v52 = *((_OWORD *)v12 + 4);
          v53 = v17;
          v50 = v15;
          v51 = v16;
        }
        if (sub_18D03F608(v12, (double *)&v42))
        {
          v18 = *((_OWORD *)v12 + 1);
          v42 = *(_OWORD *)v12;
          v43 = v18;
          a4 = *(int8x16_t *)(v12 + 4);
          a5 = *(int8x16_t *)(v12 + 6);
          v19 = *((_OWORD *)v12 + 5);
          v46 = *((_OWORD *)v12 + 4);
          v47 = v19;
          v44 = a4;
          v45 = a5;
        }
        v12 += 26;
      }
    }
    v9 += 2;
  }
  v20 = CNTimeSpan::operator-((uint64_t)&v42, &v48, a4, a5);
  v40 = v20;
  v41 = v21;
  if (v20 < 0 || (*(double *)v22.i64 = v21, v21 < 0.0))
  {
    v20 = CNTimeSpan::operator-((double *)&v40, v22, v23);
    v22.i64[0] = v24;
  }
  v25 = fabs(*(double *)v22.i64 + (double)v20);
  if (v25 > v6)
  {
    v39 = 12;
    v38 = 4;
    v40 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
    v41 = v30;
    cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v40, "GNSS measurements do not share a common time,min_time,%.3lf,max_time,%.3lf", *((double *)&v48 + 1) + (double)(uint64_t)v48, *((double *)&v42 + 1) + (double)(uint64_t)v42);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v36) = a1 - 72;
    else
      v36 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "%s", v31, v32, v33, v34, v35, v36);
  }
  else
  {
    v26 = v51;
    v27 = v52;
    v28 = v49;
    a3[2] = v50;
    a3[3] = v26;
    v29 = v53;
    a3[4] = v27;
    a3[5] = v29;
    *a3 = v48;
    a3[1] = v28;
  }
  return v25 <= v6;
}

__n128 raven::RavenEstimator::HandleSignalEnvironmentEvent(raven::RavenEstimator *this, const raven::SignalEnvironmentEvent *a2)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  if (*((_BYTE *)this + 57))
  {
    if (*((_BYTE *)this + 2368))
    {
      v4 = *(_OWORD *)((char *)a2 + 8);
      v5 = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)this + 151) = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)this + 150) = v5;
      *((_OWORD *)this + 149) = v4;
      result = *(__n128 *)((char *)a2 + 56);
      v7 = *(_OWORD *)((char *)a2 + 72);
      v8 = *(_OWORD *)((char *)a2 + 88);
      *((_BYTE *)this + 2480) = *((_BYTE *)a2 + 104);
      *((_OWORD *)this + 154) = v8;
      *((_OWORD *)this + 153) = v7;
      *((__n128 *)this + 152) = result;
    }
    else
    {
      *((_QWORD *)this + 297) = &unk_1E25C2FC8;
      v21 = *(_OWORD *)((char *)a2 + 8);
      v22 = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)this + 151) = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)this + 150) = v22;
      *((_OWORD *)this + 149) = v21;
      result = *(__n128 *)((char *)a2 + 56);
      v23 = *(_OWORD *)((char *)a2 + 72);
      v24 = *(_OWORD *)((char *)a2 + 88);
      *((_BYTE *)this + 2480) = *((_BYTE *)a2 + 104);
      *((_OWORD *)this + 154) = v24;
      *((_OWORD *)this + 153) = v23;
      *((__n128 *)this + 152) = result;
      *((_BYTE *)this + 2368) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(_QWORD *)a2 + 16))(a2);
    v26[1] = v9;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v26, "Estimator not configured, failed to handle SignalEnvironmentEvent", v10, v11, v12, v13, v14, v25);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v20) = (_BYTE)this - 72;
    else
      v20 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v15, v16, v17, v18, v19, v20);
  }
  return result;
}

__n128 raven::RavenEstimator::HandleTurnStateEvent(raven::RavenEstimator *this, const raven::TurnStateEvent *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];
  unsigned __int8 v29;
  __int16 v30;

  if (*((_BYTE *)this + 57))
  {
    if (*((_BYTE *)this + 2064))
    {
      *((_OWORD *)this + 130) = *(_OWORD *)((char *)a2 + 8);
      v4 = *(_OWORD *)((char *)a2 + 24);
      v5 = *(_OWORD *)((char *)a2 + 40);
      v6 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 134) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 133) = v6;
      *((_OWORD *)this + 132) = v5;
      *((_OWORD *)this + 131) = v4;
      result = *(__n128 *)((char *)a2 + 88);
      v8 = *(_OWORD *)((char *)a2 + 104);
      v9 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 276) = *((_QWORD *)a2 + 17);
      *((_OWORD *)this + 137) = v9;
      *((_OWORD *)this + 136) = v8;
      *((__n128 *)this + 135) = result;
    }
    else
    {
      *((_QWORD *)this + 259) = &unk_1E25C2408;
      *((_OWORD *)this + 130) = *(_OWORD *)((char *)a2 + 8);
      v22 = *(_OWORD *)((char *)a2 + 24);
      v23 = *(_OWORD *)((char *)a2 + 40);
      v24 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 134) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 133) = v24;
      *((_OWORD *)this + 132) = v23;
      *((_OWORD *)this + 131) = v22;
      result = *(__n128 *)((char *)a2 + 88);
      v25 = *(_OWORD *)((char *)a2 + 104);
      v26 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 276) = *((_QWORD *)a2 + 17);
      *((_OWORD *)this + 137) = v26;
      *((_OWORD *)this + 136) = v25;
      *((__n128 *)this + 135) = result;
      *((_BYTE *)this + 2064) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v30 = 12;
    v29 = 1;
    v28[0] = (*(uint64_t (**)(const raven::TurnStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v28[1] = v10;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v28, "Estimator not configured, failed to handle TurnStateEvent.", v11, v12, v13, v14, v15, v27);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v21) = (_BYTE)this - 72;
    else
      v21 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v16, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t raven::RavenEstimator::IsSane(raven::RavenEstimator *this)
{
  return 1;
}

BOOL raven::RavenEstimator::IsContextIndoorsFromIndoorProbability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a3 + 120) >= dbl_18D319290[*(double *)(a2 + 8) + (double)*(uint64_t *)a2 <= *(double *)(*(_QWORD *)(a1 + 1168) + 3360)]
      && *(_BYTE *)a3 != 0;
}

uint64_t raven::RavenEstimator::SetAccelerometerCache(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 1184) = a2;
  return result;
}

uint64_t raven::RavenEstimator::SetGravityModel(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 1176) = a2;
  return result;
}

uint64_t raven::RavenEstimator::SetMagneticModel(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 1200) = a2;
  return result;
}

uint64_t raven::RavenEstimator::SetRateGyroCache(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 1192) = a2;
  return result;
}

uint64_t raven::RavenEstimator::SetRavenParameters(uint64_t this, raven::RavenParameters *a2)
{
  *(_QWORD *)(this + 1168) = a2;
  return this;
}

double raven::RavenEstimator::ResetMeasurementCounts(raven::RavenEstimator *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 708) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  return result;
}

void raven::RavenEstimator::UpdateMeasurementTypeCount(cnprint::CNPrinter *a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v11;
  std::string::size_type *LogLevel;
  uint64_t i;
  unsigned int v14;
  char *v15;
  std::string::size_type size;
  std::string *v17;
  std::string *p_dst;
  const std::string::value_type *p_p;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  char v28;
  std::string *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  uint64_t j;
  unsigned int v39;
  char *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string *v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  char v53;
  std::string *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  cnprint::CNPrinter *v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  void *__p;
  std::string::size_type v68;
  unsigned __int8 v69;
  std::string __dst;
  _QWORD v71[5];

  v71[2] = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      ++*(_DWORD *)(a4 + 4 * *v5);
      v11 = *v5;
      v5 += 8;
      ++*(_DWORD *)(a5 + 4 * v11);
    }
    while (v5 != v6);
    LogLevel = (std::string::size_type *)cnprint::CNPrinter::GetLogLevel(a1);
    if (!(_DWORD)LogLevel)
    {
      v62 = a1;
      if (*(char *)(a2 + 23) < 0)
        LogLevel = (std::string::size_type *)sub_18D077798(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      else
        __dst = *(std::string *)a2;
      for (i = 0; i != 33; ++i)
      {
        v14 = *(_DWORD *)(a4 + 4 * i);
        if (v14)
        {
          v15 = "UnknownMeas";
          if (i <= 0x20u)
            v15 = off_1E25CD260[i];
          sub_18D0778AC(&__p, v15);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          sub_18D099E3C((uint64_t)&v64, size + 1);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v64;
          else
            v17 = (std::string *)v64.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            memmove(v17, p_dst, size);
          }
          *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + size) = 44;
          if ((v69 & 0x80u) == 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if ((v69 & 0x80u) == 0)
            v20 = v69;
          else
            v20 = v68;
          v21 = std::string::append(&v64, p_p, v20);
          v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          v23 = std::string::append(&v65, ",", 1uLL);
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v63, v14);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v63;
          else
            v25 = (std::string *)v63.__r_.__value_.__r.__words[0];
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          else
            v26 = v63.__r_.__value_.__l.__size_;
          LogLevel = (std::string::size_type *)std::string::append(&v66, (const std::string::value_type *)v25, v26);
          v27 = *LogLevel;
          v71[0] = LogLevel[1];
          *(_QWORD *)((char *)v71 + 7) = *(std::string::size_type *)((char *)LogLevel + 15);
          v28 = *((_BYTE *)LogLevel + 23);
          LogLevel[1] = 0;
          LogLevel[2] = 0;
          *LogLevel = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst.__r_.__value_.__r.__words[0] = v27;
          __dst.__r_.__value_.__l.__size_ = v71[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v71 + 7);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          if ((char)v69 < 0)
            operator delete(__p);
        }
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel))
      {
        LOWORD(__p) = 12;
        v66.__r_.__value_.__s.__data_[0] = 0;
        v29 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v30 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v62 + 2488, (uint64_t)v62 + 80, "count_per_update,%s", (const char *)v29);
        if (*((char *)v62 + 2511) >= 0)
          LOBYTE(v36) = v30;
        else
          v36 = *((_QWORD *)v62 + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "%s", v31, v32, v33, v34, v35, v36);
      }
      v37 = std::string::operator=(&__dst, (const std::string *)a2);
      for (j = 0; j != 33; ++j)
      {
        v39 = *(_DWORD *)(a5 + 4 * j);
        if (v39)
        {
          v40 = "UnknownMeas";
          if (j <= 0x20u)
            v40 = off_1E25CD260[j];
          sub_18D0778AC(&__p, v40);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v41 = __dst.__r_.__value_.__l.__size_;
          sub_18D099E3C((uint64_t)&v64, v41 + 1);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = &v64;
          else
            v42 = (std::string *)v64.__r_.__value_.__r.__words[0];
          if (v41)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = &__dst;
            else
              v43 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            memmove(v42, v43, v41);
          }
          *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 44;
          if ((v69 & 0x80u) == 0)
            v44 = (const std::string::value_type *)&__p;
          else
            v44 = (const std::string::value_type *)__p;
          if ((v69 & 0x80u) == 0)
            v45 = v69;
          else
            v45 = v68;
          v46 = std::string::append(&v64, v44, v45);
          v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v48 = std::string::append(&v65, ",", 1uLL);
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v63, v39);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = &v63;
          else
            v50 = (std::string *)v63.__r_.__value_.__r.__words[0];
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          else
            v51 = v63.__r_.__value_.__l.__size_;
          v37 = std::string::append(&v66, (const std::string::value_type *)v50, v51);
          v52 = v37->__r_.__value_.__r.__words[0];
          v71[0] = v37->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
          v53 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst.__r_.__value_.__r.__words[0] = v52;
          __dst.__r_.__value_.__l.__size_ = v71[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v71 + 7);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v53;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          if ((char)v69 < 0)
            operator delete(__p);
        }
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v37))
      {
        LOWORD(__p) = 12;
        v66.__r_.__value_.__s.__data_[0] = 0;
        v54 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v54 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v55 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v62 + 2488, (uint64_t)v62 + 80, "count_cumulative,%s", (const char *)v54);
        if (*((char *)v62 + 2511) >= 0)
          LOBYTE(v61) = v55;
        else
          v61 = *((_QWORD *)v62 + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "%s", v56, v57, v58, v59, v60, v61);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
}

void sub_18D1885EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  _Unwind_Resume(exception_object);
}

void raven::RavenEstimator::AddToAcceptedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  void *__p[2];
  char v5;

  sub_18D0778AC(__p, "Accepted");
  raven::RavenEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 328, (uint64_t)a1 + 724);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18D18870C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenEstimator::AddToRejectedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  void *__p[2];
  char v5;

  sub_18D0778AC(__p, "Rejected");
  raven::RavenEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 460, (uint64_t)a1 + 856);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18D188788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenEstimator::AddToUnusedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  void *__p[2];
  char v5;

  sub_18D0778AC(__p, "Unused");
  raven::RavenEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 592, (uint64_t)a1 + 988);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18D188804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL raven::RavenEstimator::IsPositionMeasurementUsable(_BYTE *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a2 + 200);
  result = 0;
  if (v2 != 16)
  {
    if (v2 != 4)
      return 1;
    if (!a1[1208])
      return 1;
    if (!a1[2368])
      return 1;
    v3 = a1[1320];
    if (v3 < 0xA && ((0x323u >> v3) & 1) != 0)
      return 1;
    if (a1[2480] - 3 <= 1)
      return 1;
  }
  return result;
}

uint64_t raven::RavenEstimator::ShouldMapVectorConstraintBeApplied(_BYTE *a1, float64x2_t *a2, float64x2_t *a3)
{
  unsigned int v4;
  double v5;
  uint64_t result;
  int v7;
  int v8;
  __double2 v9;
  double v10[3];
  float64x2_t v11;
  uint64_t v12;
  void (**v13)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  if (!a1[1208])
    return 0;
  v4 = a1[1320];
  v5 = 0.45;
  if (v4 > 9)
    goto LABEL_13;
  if (((1 << v4) & 0x9E) != 0)
  {
    v5 = 0.8;
    if (!a1[2368] || a1[2480] - 3 >= 2)
      goto LABEL_13;
    return 4294967294;
  }
  if (((1 << v4) & 0x240) != 0)
    return 4294967294;
  if (v4 == 5 && a1[2368] && a1[2480] - 3 < 2)
    return 0;
LABEL_13:
  v12 = 0;
  v11 = vmulq_f64(a3[6], (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  v14 = 0;
  v17 = 0x300000003;
  v15 = &unk_1E25C78E0;
  v16 = xmmword_18D30BB60;
  v18 = &v19;
  v13 = &off_1E25B9560;
  cnnavigation::ECEFToENU(a2, 1, 1, &v11, 0, (uint64_t)v10, (uint64_t)&v13, COERCE_DOUBLE(0x300000003));
  v8 = v7;
  result = 0;
  if (!v8)
  {
    v9 = __sincos_stret(a3[9].f64[1] * 0.0174532925);
    if (fabs(v9.__sinval * v10[1] - v9.__cosval * v10[0]) > v5 * a3[8].f64[1])
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL raven::RavenEstimator::IsTimeForZUPT(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  int v4;
  _BYTE *v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  double v10;

  v4 = *(unsigned __int8 *)(a1 + 232);
  v3 = (_BYTE *)(a1 + 232);
  if (!v4)
    return 1;
  v6 = sub_18D188A5C(v3);
  v9 = CNTimeSpan::operator-(a2, v6, v7, v8);
  return v10 + (double)v9 >= *(double *)(*(_QWORD *)(a1 + 1168) + 272);
}

_BYTE *sub_18D188A5C(_BYTE *a1)
{
  std::logic_error v2;

  if (!*a1)
  {
    std::logic_error::logic_error(&v2, "Attempted to access the value of an uninitialized optional object.");
    v2.__vftable = (std::logic_error_vtbl *)&unk_1E25C14B8;
    sub_18D189460(&v2);
  }
  return a1 + 8;
}

void sub_18D188AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

BOOL raven::RavenEstimator::IsZUPTAppropriate(raven::RavenEstimator *this, const raven::AccessoryVehicleSpeedEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  _QWORD v15[2];
  unsigned __int8 v16;

  v2 = *((_QWORD *)this + 146);
  if (v2 && *(_BYTE *)(v2 + 33))
  {
    v3 = *((_QWORD *)a2 + 30);
    if (v3 != *((_QWORD *)a2 + 29) && *(double *)(v3 - 8) <= 0.01)
    {
      v15[0] = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
      v15[1] = v5;
      return raven::RavenEstimator::IsTimeForZUPT((uint64_t)this, (uint64_t)v15);
    }
  }
  else
  {
    LOWORD(v15[0]) = 12;
    v16 = 4;
    v7 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
    v14 = v8 + (double)v7;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v15, &v16, "t,%.3lf,AccessoryVehicleSpeed,nozupt,Raven parameters not configured.", v9, v10, v11, v12, v13, SLOBYTE(v14));
  }
  return 0;
}

double raven::RavenEstimator::FillZUPTEvent(raven::RavenEstimator *this, const raven::MovingStateEvent *a2, raven::VelocityEvent *a3)
{
  uint64_t v3;
  int v4;
  double *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  unsigned __int8 v31;
  __int16 v32;
  unsigned __int8 v33;
  __int16 v34;

  v3 = *((_QWORD *)this + 146);
  if (!v3 || !*(_BYTE *)(v3 + 33))
  {
    v34 = 12;
    v33 = 4;
    v6 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v29 = v7 + (double)v6;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf, Raven parameters not configured.", v8, v9, v10, v11, v12, SLOBYTE(v29));
    return result;
  }
  v4 = *((unsigned __int8 *)a2 + 104);
  if (v4 == 2)
  {
    v5 = (double *)(v3 + 264);
    goto LABEL_8;
  }
  if (v4 == 1)
  {
    v5 = (double *)(v3 + 256);
LABEL_8:
    result = *v5;
    v14 = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)a3 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 8) = v14;
    v15 = *(_OWORD *)((char *)a2 + 40);
    v16 = *(_OWORD *)((char *)a2 + 56);
    v17 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)a3 + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 72) = v17;
    *(_OWORD *)((char *)a3 + 56) = v16;
    *(_OWORD *)((char *)a3 + 40) = v15;
    v18 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)a3 + 120) = v18;
    v19 = *(_OWORD *)((char *)a2 + 40);
    v20 = *(_OWORD *)((char *)a2 + 56);
    v21 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)a3 + 184) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 168) = v21;
    *(_OWORD *)((char *)a3 + 152) = v20;
    *(_OWORD *)((char *)a3 + 136) = v19;
    *((_QWORD *)a3 + 37) = 0;
    *((_QWORD *)a3 + 38) = 0;
    *((_QWORD *)a3 + 36) = 0;
    *((double *)a3 + 39) = result;
    *((_QWORD *)a3 + 40) = 0;
    *((_QWORD *)a3 + 41) = 0;
    *((double *)a3 + 42) = result;
    *((_QWORD *)a3 + 43) = 0;
    *((double *)a3 + 44) = result;
    *((_BYTE *)a3 + 280) = 1;
    return result;
  }
  v32 = 12;
  v31 = 4;
  v22 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
  v30 = v23 + (double)v22;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "t,%.3lf, ZUPT not filled, moving state is not frozen or not moving.", v24, v25, v26, v27, v28, SLOBYTE(v30));
  return result;
}

uint64_t raven::RavenEstimator::UpdateAggressiveFlooringOfOutputUncertaintyData(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t v9;
  double v10;
  double v11;
  unsigned int v12;
  double v14;
  unint64_t v15;
  unsigned int v16;
  double v17;
  unsigned int v18;

  v9 = result;
  if (a4 <= 4 && *(_BYTE *)(result + 280))
  {
LABEL_3:
    result = CNTimeSpan::operator-(v9 + 80, (_QWORD *)(v9 + 296), a5, a6);
    v11 = v10 + (double)result;
    if (v11 >= 10.0)
    {
      *(_QWORD *)(v9 + 296) = 0;
      *(_QWORD *)(v9 + 304) = 0;
    }
    *(_BYTE *)(v9 + 280) = v11 >= 10.0;
    return result;
  }
  if (*(_BYTE *)(result + 1408) && *(unsigned __int8 *)(result + 1520) - 2 <= 7)
    goto LABEL_28;
  if (*(_BYTE *)(result + 1208))
  {
    v12 = *(unsigned __int8 *)(result + 1320);
    if (v12 > 9 || v12 == 5)
      goto LABEL_28;
  }
  v14 = 1.1;
  if (*(_BYTE *)(result + 2368))
  {
    v15 = *(char *)(result + 2480);
    if (v15 > 6)
      v16 = 22;
    else
      v16 = dword_18D319308[v15];
    if (v15 > 6 || ((1 << v15) & 0x59) == 0)
      v14 = 0.8;
  }
  else
  {
    v16 = 17;
  }
  result = (**(uint64_t (***)(uint64_t))result)(result);
  if (v16 <= a4 || v17 <= v14)
  {
LABEL_28:
    v18 = *(_DWORD *)(v9 + 284) + 1;
    *(_DWORD *)(v9 + 284) = v18;
    if (v18 > *(_DWORD *)(v9 + 288))
      *(_DWORD *)(v9 + 288) = v18;
    *(_BYTE *)(v9 + 280) = 0;
    *(_OWORD *)(v9 + 296) = *(_OWORD *)(v9 + 80);
  }
  else
  {
    if (*(_DWORD *)(v9 + 288) >= 5u && (a4 > 0xB || v17 <= 1.5))
    {
      *(_BYTE *)(v9 + 280) = 0;
      return result;
    }
    *(_DWORD *)(v9 + 284) = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 160))(v9, a2, a3);
    if ((_DWORD)result)
      goto LABEL_3;
  }
  return result;
}

uint64_t sub_18D188EA8(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 8;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 16;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18D03CA50((uint64_t)a1);
}

void sub_18D188F3C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_18D07BF3C(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_18D189050(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_18D07BF3C(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

char *sub_18D189160(char *result, uint64_t a2)
{
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = result;
  if (*result)
  {
    v3 = *(_OWORD *)(a2 + 24);
    *((_OWORD *)result + 1) = *(_OWORD *)(a2 + 8);
    *((_OWORD *)result + 2) = v3;
    v4 = *(_OWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 72);
    *((_QWORD *)result + 12) = *(_QWORD *)(a2 + 88);
    *((_OWORD *)result + 4) = v5;
    *((_OWORD *)result + 5) = v6;
    *((_OWORD *)result + 3) = v4;
    if (result + 8 != (char *)a2)
      return (char *)sub_18D189238((uint64_t)(result + 104), *(uint64_t **)(a2 + 96), *(uint64_t **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4);
  }
  else
  {
    *((_QWORD *)result + 1) = off_1E25C3EC8;
    v7 = *(_OWORD *)(a2 + 24);
    *((_OWORD *)result + 1) = *(_OWORD *)(a2 + 8);
    *((_OWORD *)result + 2) = v7;
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_OWORD *)(a2 + 72);
    *((_QWORD *)result + 12) = *(_QWORD *)(a2 + 88);
    *((_OWORD *)result + 4) = v9;
    *((_OWORD *)result + 5) = v10;
    *((_OWORD *)result + 3) = v8;
    *((_QWORD *)result + 14) = 0;
    *((_QWORD *)result + 15) = 0;
    *((_QWORD *)result + 13) = 0;
    result = sub_18D16727C(result + 104, *(_QWORD **)(a2 + 96), *(_QWORD **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4);
    *v2 = 1;
  }
  return result;
}

uint64_t sub_18D189238(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_18D05E0CC((void **)a1);
    if (a4 >> 60)
      sub_18D07AFE4();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)sub_18D16731C((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)sub_18D1893E8(v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      sub_18D1893E8(v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = sub_18D07C868(result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

_QWORD *sub_18D1893E8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_18D189460(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D1894B4((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3120, (void (*)(void *))sub_18D189510);
}

void sub_18D18949C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1894B4(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E25C1140;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1170;
  *(_QWORD *)(a1 + 24) = &unk_1E25C1198;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_18D189510(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

uint64_t sub_18D189550(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &unk_1E25C14B8;
  *(_QWORD *)(v2 + 24) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E25C1140;
  *(_QWORD *)(v2 + 8) = &unk_1E25C1170;
  *(_QWORD *)(v2 + 24) = &unk_1E25C1198;
  sub_18D15B224(v2 + 24, a1 + 24);
  return v2;
}

void sub_18D189628(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::logic_error *v2;

  std::logic_error::~logic_error(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_18D18966C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D189848((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3120, (void (*)(void *))sub_18D189510);
}

void sub_18D1896A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D1896BC(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D18970C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_18D189744(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D189798(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_18D1897D0(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D189824(std::logic_error *a1)
{
  std::logic_error::~logic_error(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D189848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E25C14B8;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E25C1140;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1170;
  *(_QWORD *)(a1 + 24) = &unk_1E25C1198;
  return a1;
}

void sub_18D1898F4(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPositionContextEstimator::Configure(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __int16 v27;
  unsigned __int8 v28;
  __int16 v29;
  unsigned __int8 v30;
  __int16 v31;

  if (*(_BYTE *)(a1 + 1))
  {
    v31 = 12;
    v30 = 2;
    v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 424), "RavenPositionContextEstimator::Configure() called more than once");
    if (*(char *)(a1 + 447) >= 0)
      LOBYTE(v9) = v3;
    else
      v9 = *(_QWORD *)(a1 + 424);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s", v4, v5, v6, v7, v8, v9);
  }
  else
  {
    v11 = *a2;
    if (*a2)
    {
      if (*(_BYTE *)(v11 + 33))
      {
        result = 0;
        *(_QWORD *)(a1 + 8) = v11;
        *(_BYTE *)(a1 + 1) = 1;
        return result;
      }
      v27 = 12;
      v26 = 4;
      v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::Configure() called with uninitialized raven parameters");
      if (*(char *)(a1 + 447) >= 0)
        LOBYTE(v25) = v19;
      else
        v25 = *(_QWORD *)(a1 + 424);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v20, v21, v22, v23, v24, v25);
    }
    else
    {
      v29 = 12;
      v28 = 4;
      v12 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::Configure() called with null raven parameters");
      if (*(char *)(a1 + 447) >= 0)
        LOBYTE(v18) = v12;
      else
        v18 = *(_QWORD *)(a1 + 424);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v13, v14, v15, v16, v17, v18);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenPositionContextEstimator::Initialize(raven::RavenPositionContextEstimator *this, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  BOOL v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  uint64_t v22;
  double v24;
  BOOL v25;
  double v26;
  BOOL v27;
  double v28;
  cnprint::CNPrinter *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  __int16 v39;

  if (*(_BYTE *)this)
  {
    v39 = 12;
    v38 = 2;
    v4 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "WARNING: RavenPositionContextEstimator::Initialize(),estimator being re-initialized");
    if (*((char *)this + 447) >= 0)
      LOBYTE(v10) = v4;
    else
      v10 = *((_QWORD *)this + 53);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "%s", v5, v6, v7, v8, v9, v10);
    *(_BYTE *)this = 0;
  }
  v11 = (double *)*((_QWORD *)this + 1);
  if (!v11)
  {
    v39 = 12;
    v38 = 4;
    v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid pointer to RavenParameters", v37);
    goto LABEL_20;
  }
  v12 = v11[310];
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v12 >= 0.0 ? (v13 = v12 <= 1.0) : (v13 = 0), !v13))
  {
    v39 = 12;
    v38 = 4;
    v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid P(indoor),%.3lf");
LABEL_20:
    if (*((char *)this + 447) >= 0)
      LOBYTE(v22) = v14;
    else
      v22 = *((_QWORD *)this + 53);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "%s", v15, v16, v17, v18, v19, v22);
    return 0xFFFFFFFFLL;
  }
  v20 = v11[311];
  if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v20 >= 0.0 ? (v21 = v20 <= 1.0) : (v21 = 0), !v21))
  {
    v39 = 12;
    v38 = 4;
    v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid P(outdoor),%.3lf");
    goto LABEL_20;
  }
  if (fabs(v12 + v20 + -1.0) > 1.0e-10)
  {
    v39 = 12;
    v38 = 4;
    v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),sum of initial probabilities does not add up to one,P(indoor),%.3lf,P(outdoor),%.3lf");
    goto LABEL_20;
  }
  v24 = v11[312];
  if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v24 >= 0.0 ? (v25 = v24 <= 1.0) : (v25 = 0), !v25))
  {
    v39 = 12;
    v38 = 4;
    v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid P(indoor|indoor),%.3lf");
    goto LABEL_20;
  }
  v26 = v11[313];
  if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v26 >= 0.0 ? (v27 = v26 <= 1.0) : (v27 = 0), !v27))
  {
    v39 = 12;
    v38 = 4;
    v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid P(outdoor|outdoor),%.3lf");
    goto LABEL_20;
  }
  v28 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  if (COERCE__INT64(fabs(v28)) > 0x7FEFFFFFFFFFFFFFLL || v28 < 0.0)
  {
    v39 = 12;
    v38 = 4;
    v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid input time,%.3lf");
    goto LABEL_20;
  }
  v29 = (cnprint::CNPrinter *)raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel(this);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)a2;
  *(_BYTE *)this = 1;
  if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
  {
    v39 = 12;
    v38 = 1;
    v30 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 424, a2, "RavenPositionContextEstimator::Initialize(),estimator is initialized");
    if (*((char *)this + 447) >= 0)
      LOBYTE(v36) = v30;
    else
      v36 = *((_QWORD *)this + 53);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "%s", v31, v32, v33, v34, v35, v36);
  }
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel(raven::RavenPositionContextEstimator *this)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  __int128 v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  double *v16;
  double v17[2];
  unsigned __int8 v18[8];
  __int128 v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  *((_QWORD *)this + 18) = 0x3DDB7CDFD9D7BDBBLL;
  v15 = 0x100000002;
  v13 = &unk_1E25C7520;
  v12 = xmmword_18D319330;
  v14 = xmmword_18D319330;
  v16 = v17;
  v2 = *((_QWORD *)this + 1);
  v3 = *(double *)(v2 + 2488);
  v17[0] = *(double *)(v2 + 2480);
  v17[1] = v3;
  v4 = v17[0] + v3;
  if (fabs(v17[0] + v3 + -1.0) > 1.0e-10 && cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(v20) = 2;
    v18[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, v18, "WARNING: HMM initialized with non-normalized probability vector.", v5, v6, v7, v8, v9, 2);
  }
  sub_18D064724((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v10.f64[1] = 0x200000002;
  v19 = v12;
  v22 = 0x100000002;
  v20 = &unk_1E25C7520;
  v21 = v12;
  v23 = &v24;
  v10.f64[0] = 1.0 / v4;
  sub_18D064EF4((uint64_t)v18, (uint64_t)&v20, v10);
  sub_18D053AA8((uint64_t)this + 24, (uint64_t)&v20);
  sub_18D053AA8((uint64_t)this + 80, (uint64_t)this + 24);
  *((_DWORD *)this + 34) = 1;
  return 0;
}

_QWORD *sub_18D189E74(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

__n128 raven::RavenPositionContextEstimator::ResetPositionContextStateEvent(raven::RavenPositionContextEstimator *this)
{
  __n128 result;

  *((_BYTE *)this + 400) = 0;
  result = *(__n128 *)(*((_QWORD *)this + 1) + 2480);
  *(__n128 *)((char *)this + 408) = result;
  return result;
}

void raven::RavenPositionContextEstimator::HandleEvidence(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6;
  double v7;
  __n128 v8;
  int8x16_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  __int16 v20;
  double v21[2];

  v6 = CNTimeSpan::operator-(a2 + 8, (_QWORD *)(a1 + 152), a3, a4);
  *(_QWORD *)&v21[0] = v6;
  v21[1] = v7;
  if (v6 < 0 || (v8.n128_f64[0] = v7, v7 < 0.0))
  {
    v6 = CNTimeSpan::operator-(v21, (int8x16_t)v8, v9);
    v8.n128_u64[0] = v10;
  }
  if (v6 == 10)
    goto LABEL_7;
  if (!v6)
  {
    if ((v8.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
      goto LABEL_16;
LABEL_7:
    if (v8.n128_f64[0] <= 0.0)
      goto LABEL_16;
    goto LABEL_10;
  }
  if (v6 < 11)
    goto LABEL_16;
LABEL_10:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
  {
    v20 = 12;
    v19 = 1;
    v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::HandleEvidence(GnssEvidence),last estimate is too old, re-initialize the HMM");
    if (*(char *)(a1 + 447) >= 0)
      LOBYTE(v17) = v11;
    else
      v17 = *(_QWORD *)(a1 + 424);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v12, v13, v14, v15, v16, v17);
  }
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 2480);
  raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel((raven::RavenPositionContextEstimator *)a1);
LABEL_16:
  raven::RavenPositionContextEstimator::HmmPredictAndUpdate(a1, a2, v8);
  if (!v18)
    raven::RavenPositionContextEstimator::UpdatePositionContextStateEvent((raven::RavenPositionContextEstimator *)a1);
}

__n128 raven::RavenPositionContextEstimator::HmmPredictAndUpdate(uint64_t a1, uint64_t a2, __n128 result)
{
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __int128 v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD v48[7];
  unsigned __int8 v49;
  double v50;
  char v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  double v56;
  double v57;
  void *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t (**v63)();
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD v67[2];
  _OWORD v68[2];

  if (!*(_BYTE *)(a1 + 1) || !*(_BYTE *)a1)
    return result;
  v5 = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 2496);
  v68[0] = *(_OWORD *)(a2 + 8);
  v68[1] = v5;
  v6 = sub_18D063BF8(a1 + 16, (uint64_t)v68);
  if (!v6)
  {
    v17 = (__n128 *)(a2 + 8);
    v65 = 0x100000002;
    v63 = &off_1E25C7430;
    v64 = xmmword_18D319330;
    v66 = v67;
    v67[0] = sub_18D064858;
    v67[1] = sub_18D064858;
    v60 = 0x100000002;
    v58 = &unk_1E25C74C0;
    v59 = xmmword_18D319330;
    v61 = &v62;
    __asm { FMOV            V0.2D, #-1.0 }
    v23 = *(_OWORD *)(a2 + 8);
    v54 = _Q0;
    v55 = v23;
    v53 = v23;
    v24 = *(float *)a2;
    if (*(float *)a2 < 0.0)
      v24 = 0.0;
    v52 = (unint64_t)v24;
    v51 = *(_BYTE *)(a1 + 288);
    v50 = -1.0;
    if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupMeanCn0ProbabilityGivenOutdoor(a1 + 472, (uint64_t *)&v52, &v51, &v50, v7, v8, v9, v10))
    {
      v49 = 4;
      v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupMeanCn0ProbabilityGivenOutdoor failed for signal environment,%hhu");
    }
    else if (v50 < 0.0 || v50 > 1.0 || (*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v48[0]) = 12;
      v49 = 4;
      v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupMeanCn0ProbabilityGivenOutdoor returned invalid probability", v47, v48[0]);
    }
    else
    {
      v57 = v50;
      v50 = -1.0;
      if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupMeanCn0ProbabilityGivenIndoor((raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables *)(a1 + 472), &v52, &v50, v25, v26, v27, v28, v29))
      {
        LOWORD(v48[0]) = 12;
        v49 = 4;
        v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupMeanCn0ProbabilityGivenIndoor failed", v47, v48[0]);
      }
      else if (v50 < 0.0 || v50 > 1.0 || (*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        LOWORD(v48[0]) = 12;
        v49 = 4;
        v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupMeanCn0ProbabilityGivenIndoor returned invalid probability", v47, v48[0]);
      }
      else
      {
        v56 = v50;
        *v61 = (uint64_t)&v55;
        v52 = *(unsigned int *)(a2 + 4);
        v50 = -1.0;
        if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupNumSatsProbabilityGivenOutdoor(a1 + 472, (uint64_t *)&v52, &v51, &v50, v36, v37, v38, v39))
        {
          v49 = 4;
          v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupNumSatsProbabilityGivenOutdoor failed for signal environment,%hhu");
        }
        else if (v50 < 0.0 || v50 > 1.0 || (*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          LOWORD(v48[0]) = 12;
          v49 = 4;
          v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupNumSatsProbabilityGivenOutdoor returned invalid probability", v47, v48[0]);
        }
        else
        {
          *((double *)&v54 + 1) = v50;
          v50 = -1.0;
          if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupNumSatsProbabilityGivenIndoor((raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables *)(a1 + 472), &v52, &v50, v41, v42, v43, v44, v45))
          {
            LOWORD(v48[0]) = 12;
            v49 = 4;
            v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupNumSatsProbabilityGivenIndoor failed", v47, v48[0]);
          }
          else
          {
            if (v50 >= 0.0 && v50 <= 1.0 && (*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            {
              *(double *)&v54 = v50;
              v61[1] = (uint64_t)&v53;
              sub_18D061314(a1 + 16, (uint64_t)v48);
              v46 = sub_18D064284(a1 + 16, (uint64_t)v48, 2, (uint64_t)&v63, (uint64_t)&v58);
              if (!v46)
              {
                result = *v17;
                *(__n128 *)(a1 + 152) = *v17;
                return result;
              }
              LOWORD(v48[0]) = 12;
              v49 = 4;
              cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to update,code,%d", v46);
              if (*(char *)(a1 + 447) >= 0)
                LOBYTE(v40) = a1 - 88;
              else
                v40 = *(_QWORD *)(a1 + 424);
              goto LABEL_21;
            }
            LOWORD(v48[0]) = 12;
            v49 = 4;
            v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupNumSatsProbabilityGivenIndoor returned invalid probability", v47, v48[0]);
          }
        }
      }
    }
    if (*(char *)(a1 + 447) >= 0)
      LOBYTE(v40) = v30;
    else
      v40 = *(_QWORD *)(a1 + 424);
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, &v49, "%s", v31, v32, v33, v34, v35, v40);
    return result;
  }
  LOWORD(v63) = 12;
  LOBYTE(v58) = 4;
  cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to predict,code,%d", v6);
  if (*(char *)(a1 + 447) >= 0)
    LOBYTE(v16) = a1 - 88;
  else
    v16 = *(_QWORD *)(a1 + 424);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v58, "%s", v11, v12, v13, v14, v15, v16);
  return result;
}

_QWORD *sub_18D18A440(_QWORD *result)
{
  *result = &unk_1E25C5DB0;
  return result;
}

_QWORD *sub_18D18A454(_QWORD *result)
{
  *result = &unk_1E25C5BA0;
  return result;
}

_QWORD *sub_18D18A468(_QWORD *result)
{
  *result = &unk_1E25C5BA0;
  return result;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  raven::RavenPositionContextEstimator *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  cnprint::CNPrinter *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  unsigned int v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  __int16 v40;
  _BYTE v41[4];
  __int128 v42;
  _DWORD v43[7];

  if (!*(_BYTE *)this)
    return 0xFFFFFFFFLL;
  v3 = this;
  v41[0] = 0;
  v42 = 0u;
  memset(v43, 0, sizeof(v43));
  v5 = (uint64_t *)*((_QWORD *)a2 + 12);
  v4 = (uint64_t *)*((_QWORD *)a2 + 13);
  if (v5 != v4)
  {
    v35 = 0;
    while (1)
    {
      v6 = *v5;
      if (*v5)
      {
        if (!*(_BYTE *)(v6 + 24))
        {
          v40 = 12;
          v39 = 2;
          v36 = COERCE_DOUBLE((*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2));
          v37 = v13;
          cnprint::CNLogFormatter::FormatGeneral((uint64_t)v3 + 424, (uint64_t)&v36, "Warning: RavenPositionContextEstimator::HandleEvent(GnssPreprocessedMeasurementsEvent),unknown constellation");
          goto LABEL_10;
        }
        if (*(double *)(v6 + 264) >= *(double *)(*((_QWORD *)v3 + 1) + 616) * 0.0174532925)
        {
          v16 = *(_QWORD *)(v6 + 328);
          v15 = *(_QWORD *)(v6 + 336);
          if (v15 == v16)
            goto LABEL_30;
          while (2)
          {
            if (*(_DWORD *)(v16 + 96) == 1)
            {
              v27 = *(unsigned __int8 *)(v16 + 100);
              v28 = v27 > 0xA;
              v29 = (1 << v27) & 0x545;
              if (v28 || v29 == 0)
              {
                v17 = *(double *)(v6 + 264);
                v36 = *(float *)(v16 + 112);
                v18 = (cnprint::CNPrinter *)sub_18D1648E4((uint64_t)v41, &v36, v17);
                if ((_DWORD)v18)
                {
                  v40 = 12;
                  v39 = 4;
                  v36 = COERCE_DOUBLE((*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2));
                  v37 = v19;
                  cnprint::CNLogFormatter::FormatGeneral((uint64_t)v3 + 424, (uint64_t)&v36, "RavenPositionContextEstimator::HandleEvent(GnssPreprocessedMeasurementsEvent),failed to add cno %.3f to OnlineStatisticsEstimator");
                }
                else
                {
                  ++v35;
                  this = (raven::RavenPositionContextEstimator *)cnprint::CNPrinter::GetLogLevel(v18);
                  if ((_DWORD)this)
                    goto LABEL_29;
                  v40 = 12;
                  v39 = 0;
                  v36 = COERCE_DOUBLE((*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2));
                  v37 = v26;
                  sub_18D181C54(v6);
                  cnprint::CNLogFormatter::FormatGeneral((uint64_t)v3 + 424, (uint64_t)&v36, "RavenPositionContextEstimator::HandleEvent(GnssPreprocessedMeasurementsEvent),satID,%s,obs,%s,cno,%.2f");
                }
                if (*((char *)v3 + 447) >= 0)
                  LOBYTE(v25) = (_BYTE)v3 - 88;
                else
                  v25 = *((_QWORD *)v3 + 53);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "%s", v20, v21, v22, v23, v24, v25);
              }
            }
LABEL_29:
            v16 += 208;
            if (v16 == v15)
              goto LABEL_30;
            continue;
          }
        }
        this = (raven::RavenPositionContextEstimator *)cnprint::CNPrinter::GetLogLevel(this);
        if (this <= 1)
        {
          v40 = 12;
          v39 = 1;
          v36 = COERCE_DOUBLE((*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2));
          v37 = v7;
          sub_18D181C54(v6);
          cnprint::CNLogFormatter::FormatGeneral((uint64_t)v3 + 424, (uint64_t)&v36, "%s,RavenPositionContextEstimator::HandleEvent(GnssPreprocessedMeasurementsEvent),satellite excluded,low elevation,%.2f deg");
LABEL_10:
          if (*((char *)v3 + 447) >= 0)
            LOBYTE(v14) = (_BYTE)v3 - 88;
          else
            v14 = *((_QWORD *)v3 + 53);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "%s", v8, v9, v10, v11, v12, v14);
        }
      }
LABEL_30:
      v5 += 2;
      if (v5 == v4)
        goto LABEL_34;
    }
  }
  v35 = 0;
LABEL_34:
  v37 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
  v38 = v32;
  v33.i32[1] = v43[2];
  *(float *)v33.i32 = *(double *)&v43[1];
  v36 = COERCE_DOUBLE(__PAIR64__(v35, v33.u32[0]));
  raven::RavenPositionContextEstimator::HandleEvidence((uint64_t)v3, (uint64_t)&v36, v33, v34);
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::RavenSolutionEvent *a2)
{
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 169);
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 1344);
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 224) = v3;
  *(_OWORD *)(a1 + 192) = v2;
  v4 = *(_OWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 256) = v5;
  *(_OWORD *)(a1 + 272) = v6;
  *(_OWORD *)(a1 + 240) = v4;
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::PopulateEvent(raven::RavenPositionContextEstimator *this, raven::PositionContextStateEvent *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __int16 v27;
  unsigned __int8 v28;
  __int16 v29;
  unsigned __int8 v30;
  __int16 v31;

  if (!*((_BYTE *)this + 1))
  {
    v31 = 12;
    v30 = 2;
    v12 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPositionContextEstimator *)((char *)this + 424), "RavenPositionContextEstimator::PopulateEvent(),estimator is not configured");
    if (*((char *)this + 447) >= 0)
      LOBYTE(v18) = v12;
    else
      v18 = *((_QWORD *)this + 53);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s", v13, v14, v15, v16, v17, v18);
    return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)this)
  {
    v29 = 12;
    v28 = 2;
    v19 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPositionContextEstimator *)((char *)this + 424), "RavenPositionContextEstimator::PopulateEvent(),estimator is not initialized");
    if (*((char *)this + 447) >= 0)
      LOBYTE(v25) = v19;
    else
      v25 = *((_QWORD *)this + 53);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v20, v21, v22, v23, v24, v25);
    return 0xFFFFFFFFLL;
  }
  *((_BYTE *)a2 + 104) = *((_BYTE *)this + 400);
  *((_OWORD *)a2 + 7) = *(_OWORD *)((char *)this + 408);
  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v27 = 12;
    v26 = 1;
    v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 424, (uint64_t)a2 + 8, "RavenPositionContextEstimator::PopulateEvent(),estimated_state,%u,prob_indoor,%.3lf,prob_outdoor,%.3lf", *((unsigned __int8 *)a2 + 104), *((double *)a2 + 14), *((double *)a2 + 15));
    if (*((char *)this + 447) >= 0)
      LOBYTE(v10) = v4;
    else
      v10 = *((_QWORD *)this + 53);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v5, v6, v7, v8, v9, v10);
  }
  return 0;
}

double raven::RavenPositionContextEstimator::Reset(raven::RavenPositionContextEstimator *this)
{
  double result;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 288) = 0;
  result = NAN;
  *((_OWORD *)this + 10) = xmmword_18D319350;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 400) = 0;
  *((_QWORD *)this + 51) = 0x3FE0000000000000;
  *((_QWORD *)this + 52) = 0x3FE0000000000000;
  return result;
}

void sub_18D18A96C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D18A990(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D18A99C(uint64_t a1)
{
  char v1[2];

  sub_18D0894A0(a1, v1);
}

_QWORD *sub_18D18A9BC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D18A9D0(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D18A9F4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D18AA00(uint64_t a1)
{
  char v1[4];

  sub_18D0894A0(a1, v1);
}

void sub_18D18AA20(_QWORD *a1)
{
  *a1 = &unk_1E25C5BA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D18AA44(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D18AA50(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[2];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D18AB24(_QWORD *a1)
{
  *a1 = &unk_1E25C5DB0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D18AB48(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D18AB54(uint64_t a1)
{
  char v1[2];

  sub_18D164F74(a1, v1);
}

void sub_18D18AB74(_QWORD *a1)
{
  *a1 = &unk_1E25C5BA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D18AB98(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D18ABA4(uint64_t a1)
{
  char v1;

  sub_18D164F74(a1, &v1);
}

raven::RavenPNTEstimator *raven::RavenPNTEstimator::RavenPNTEstimator(raven::RavenPNTEstimator *this)
{
  uint64_t v2;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;
  cnprint::CNPrinter *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v27;
  __int16 v28[5];

  raven::RavenEstimator::RavenEstimator((uint64_t)this, 3);
  *(_QWORD *)v2 = off_1E25C2820;
  *(_BYTE *)(v2 + 2536) = 0;
  *(_OWORD *)(v2 + 2544) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v2 + 2560) = _Q0;
  *(_OWORD *)(v2 + 2576) = 0u;
  *(_OWORD *)(v2 + 2592) = 0u;
  *(_OWORD *)(v2 + 2608) = 0u;
  *(_OWORD *)(v2 + 2624) = 0u;
  *(_OWORD *)(v2 + 2640) = 0u;
  *(_OWORD *)(v2 + 2656) = 0u;
  *(_QWORD *)(v2 + 2688) = 0x3FF0000000000000;
  v8 = v2 + 2696;
  *(_OWORD *)(v2 + 2672) = _Q0;
  sub_18D1BFBB8(v2 + 2696);
  *((_BYTE *)this + 3152) = 0;
  *((_QWORD *)this + 337) = &unk_1E25C3648;
  *(_OWORD *)(v8 + 5920) = 0u;
  *(_OWORD *)(v8 + 5936) = 0u;
  sub_18D1BFBB8((uint64_t)this + 8648);
  *((_BYTE *)this + 9104) = 0;
  *((_QWORD *)this + 1081) = &unk_1E25C3648;
  *(_OWORD *)((char *)this + 14568) = 0u;
  *(_OWORD *)((char *)this + 14584) = 0u;
  *(_OWORD *)((char *)this + 14600) = 0u;
  *((_QWORD *)this + 1830) = 0x10000001CLL;
  *((_QWORD *)this + 1827) = &unk_1E25C72B0;
  *((_OWORD *)this + 914) = xmmword_18D319780;
  *((_QWORD *)this + 1831) = (char *)this + 14656;
  sub_18D04A5F4((uint64_t)this + 14880);
  *((_QWORD *)this + 1866) = 0x100000000;
  *((_DWORD *)this + 3734) = 0x7FFFFFFF;
  *((int64x2_t *)this + 934) = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  *((_WORD *)this + 7480) = 0;
  *((_QWORD *)this + 1871) = 0x3FEE666666666666;
  *((_QWORD *)this + 1873) = 0;
  *((_QWORD *)this + 1872) = 0;
  *((_QWORD *)this + 1874) = 0x4197D78400000000;
  *((_QWORD *)this + 1876) = 0;
  *((_QWORD *)this + 1875) = 0;
  *((_WORD *)this + 7508) = 1;
  *((_QWORD *)this + 1878) = 0;
  *((_QWORD *)this + 1879) = &unk_1E25B8F40;
  *(_OWORD *)((char *)this + 15048) = xmmword_18D319790;
  *((_QWORD *)this + 1883) = 0x10000001ALL;
  *((_QWORD *)this + 1884) = (char *)this + 15080;
  *((_QWORD *)this + 1880) = &unk_1E25C70A0;
  sub_18D1C99C8((uint64_t)this + 15288);
  *((_QWORD *)this + 1920) = 0x10000001ALL;
  *((_QWORD *)this + 1917) = &unk_1E25C70A0;
  *((_OWORD *)this + 959) = xmmword_18D319790;
  *((_QWORD *)this + 1921) = (char *)this + 15376;
  *((_QWORD *)this + 1951) = 0x10000001ALL;
  *((_QWORD *)this + 1948) = &unk_1E25C70A0;
  *((_QWORD *)this + 1952) = (char *)this + 15624;
  *(_OWORD *)((char *)this + 15592) = xmmword_18D319790;
  sub_18D1C99C8((uint64_t)this + 15832);
  *((_QWORD *)this + 1988) = 0x10000001ALL;
  *((_QWORD *)this + 1985) = &unk_1E25C70A0;
  *((_QWORD *)this + 1989) = (char *)this + 15920;
  *((int64x2_t *)this + 1010) = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  *((_WORD *)this + 8088) = 0;
  *((_QWORD *)this + 2023) = 0x3FEE666666666666;
  *((_QWORD *)this + 2025) = 0;
  *((_QWORD *)this + 2024) = 0;
  *((_QWORD *)this + 2026) = 0x4197D78400000000;
  *((_QWORD *)this + 2016) = 0;
  *((_BYTE *)this + 16136) = 0;
  *((_QWORD *)this + 1881) = 0;
  *((_QWORD *)this + 1882) = 0;
  *((_QWORD *)this + 1913) = 0;
  *((_QWORD *)this + 1912) = 0;
  *((_QWORD *)this + 1918) = 0;
  *((_QWORD *)this + 1919) = 0;
  *((_QWORD *)this + 1949) = 0;
  *((_QWORD *)this + 1950) = 0;
  *((_QWORD *)this + 1981) = 0;
  *((_QWORD *)this + 1980) = 0;
  *((_QWORD *)this + 1987) = 0;
  *((_QWORD *)this + 1986) = 0;
  *((_QWORD *)this + 2043) = 0;
  *(_OWORD *)((char *)this + 16328) = 0u;
  *(_OWORD *)((char *)this + 16312) = 0u;
  *(_OWORD *)((char *)this + 16296) = 0u;
  *(_OWORD *)((char *)this + 16280) = 0u;
  *(_OWORD *)((char *)this + 16264) = 0u;
  *(_OWORD *)((char *)this + 16248) = 0u;
  *(_OWORD *)((char *)this + 16232) = 0u;
  *(_OWORD *)((char *)this + 16216) = 0u;
  *(_OWORD *)((char *)this + 16140) = xmmword_18D3197A0;
  *((_QWORD *)this + 1879) = &unk_1E25B9190;
  sub_18D1C5BB0((uint64_t)this + 16352);
  *((_QWORD *)this + 2053) = 0x100000017;
  *((_QWORD *)this + 2050) = &off_1E25C6F20;
  *(_OWORD *)((char *)this + 16408) = xmmword_18D3197B0;
  *((_QWORD *)this + 2054) = (char *)this + 16440;
  sub_18D1D77AC((uint64_t)this + 16624);
  *((_QWORD *)this + 2084) = 0x100000000;
  *((_DWORD *)this + 4170) = 0x7FFFFFFF;
  *((int64x2_t *)this + 1043) = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  *((_WORD *)this + 8352) = 0;
  *((_QWORD *)this + 2089) = 0x3FEE666666666666;
  *((_QWORD *)this + 2091) = 0;
  *((_QWORD *)this + 2090) = 0;
  *((_QWORD *)this + 2092) = 0x4197D78400000000;
  *((_QWORD *)this + 2094) = 0;
  *((_QWORD *)this + 2093) = 0;
  *((_WORD *)this + 8380) = 1;
  *((_QWORD *)this + 2096) = 0;
  *((_QWORD *)this + 2046) = 0;
  *((_QWORD *)this + 2045) = 0;
  *((_QWORD *)this + 2051) = 0;
  *((_QWORD *)this + 2052) = 0;
  *((_QWORD *)this + 2079) = 0;
  *((_QWORD *)this + 2080) = 0;
  *((_QWORD *)this + 2099) = 0;
  *((_QWORD *)this + 2098) = 0;
  *((_QWORD *)this + 2097) = (char *)this + 16784;
  sub_18D1C3264((uint64_t)this + 16800);
  *((_QWORD *)this + 2407) = 0x100000000;
  *((_DWORD *)this + 4816) = 0x7FFFFFFF;
  *((_QWORD *)this + 2409) = 0x3E45798EE2308C3ALL;
  *((_QWORD *)this + 2410) = 0x3E45798EE2308C3ALL;
  *((_WORD *)this + 9644) = 0;
  *((_QWORD *)this + 2412) = 0x3FEE666666666666;
  *((_QWORD *)this + 2414) = 0;
  *((_QWORD *)this + 2413) = 0;
  *((_QWORD *)this + 2415) = 0x4197D78400000000;
  *((_QWORD *)this + 2417) = 0;
  *((_QWORD *)this + 2416) = 0;
  *((_WORD *)this + 9672) = 1;
  *((_QWORD *)this + 2419) = 0;
  *((_QWORD *)this + 2421) = 0x3FE0000000000000;
  *((_QWORD *)this + 2422) = 0x3FE0000000000000;
  *((_DWORD *)this + 4846) = 0;
  *((_QWORD *)this + 2420) = &unk_1E25B90A0;
  __asm { FMOV            V0.2D, #0.5 }
  *((_OWORD *)this + 1212) = _Q0;
  *((_OWORD *)this + 1213) = xmmword_18D3197C0;
  *((_QWORD *)this + 2428) = 0x3FE0000000000000;
  *((_BYTE *)this + 19432) = 0;
  *((_BYTE *)this + 19664) = 0;
  *((_BYTE *)this + 22104) = 0;
  *((_QWORD *)this + 2766) = &unk_1E25B9B60;
  *((_QWORD *)this + 3087) = &off_1E25B98F0;
  *((_OWORD *)this + 1544) = 0u;
  *((_OWORD *)this + 1545) = 0u;
  *((_OWORD *)this + 1546) = 0u;
  *((_OWORD *)this + 1547) = 0u;
  *((_OWORD *)this + 1548) = 0u;
  *((_OWORD *)this + 1549) = 0u;
  *((_OWORD *)this + 1550) = 0u;
  *((_OWORD *)this + 1551) = 0u;
  *(_OWORD *)((char *)this + 24825) = 0u;
  *((_BYTE *)this + 22136) = 0;
  *((_OWORD *)this + 1384) = xmmword_18D3197D0;
  *((_QWORD *)this + 2770) = 0x40C3880000000000;
  *((_DWORD *)this + 6172) = 0;
  *((_DWORD *)this + 6212) = 10;
  *((_QWORD *)this + 3107) = &unk_1E25B9AB8;
  *((_QWORD *)this + 3108) = &unk_1E25B9B60;
  *((_QWORD *)this + 3429) = &off_1E25B98F0;
  *((_OWORD *)this + 1715) = 0u;
  *((_OWORD *)this + 1716) = 0u;
  *((_OWORD *)this + 1717) = 0u;
  *((_OWORD *)this + 1718) = 0u;
  *((_OWORD *)this + 1719) = 0u;
  *((_OWORD *)this + 1720) = 0u;
  *((_OWORD *)this + 1721) = 0u;
  *((_OWORD *)this + 1722) = 0u;
  *(_OWORD *)((char *)this + 27561) = 0u;
  *((_BYTE *)this + 24872) = 0;
  *((_OWORD *)this + 1555) = xmmword_18D3197D0;
  *((_QWORD *)this + 3112) = 0x40C3880000000000;
  *((_DWORD *)this + 6896) = 10;
  *((_QWORD *)this + 3449) = &unk_1E25B9050;
  v10 = (char *)this + 44440;
  v11 = 27640;
  *((_DWORD *)this + 6856) = 0;
  do
  {
    v12 = (_QWORD *)((char *)this + v11);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &unk_1E25C3050;
    v13 = (char *)this + v11 + 48;
    v11 += 48;
  }
  while (v13 != v10);
  *((_DWORD *)this + 6900) = 0;
  *(_OWORD *)((char *)this + 27608) = 0u;
  *(_OWORD *)((char *)this + 27624) = 0u;
  *(_QWORD *)v10 = &unk_1E25B9000;
  v14 = 44488;
  v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  do
  {
    v16 = (char *)this + v14;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &unk_1E25C2C38;
    *(int64x2_t *)(v16 + 24) = v15;
    *((_QWORD *)v16 + 5) = 0x7FF8000000000000;
    v14 += 48;
  }
  while (v16 + 48 != (char *)this + 61288);
  *((_DWORD *)this + 11112) = 0;
  *(_OWORD *)((char *)this + 44456) = 0u;
  *(_OWORD *)((char *)this + 44472) = 0u;
  *((_WORD *)this + 30644) = 0;
  *((_OWORD *)this + 3831) = 0u;
  *((_OWORD *)this + 3832) = 0u;
  *((int64x2_t *)this + 3833) = vdupq_n_s64((unint64_t)this + 61328);
  *((_QWORD *)this + 7668) = 0;
  sub_18D1C6D74((uint64_t)this + 61352);
  *((_QWORD *)this + 8025) = 0x1000000AELL;
  *((_QWORD *)this + 8022) = &unk_1E25C6500;
  *(_OWORD *)((char *)this + 64184) = xmmword_18D3197E0;
  *((_QWORD *)this + 8026) = (char *)this + 64216;
  *((_QWORD *)this + 8117) = 0x1000000AELL;
  *((_QWORD *)this + 8114) = &unk_1E25C64D0;
  *(_OWORD *)((char *)this + 64920) = xmmword_18D3197E0;
  *((_QWORD *)this + 8118) = (char *)this + 64952;
  v17 = sub_18D1C6E44((uint64_t)this + 66344);
  *(_QWORD *)(v17 + 72) = 0x1000000AELL;
  *(_QWORD *)(v17 + 48) = &unk_1E25C6500;
  *(_OWORD *)(v17 + 56) = xmmword_18D3197E0;
  *(_QWORD *)(v17 + 80) = (char *)this + 66432;
  sub_18D1C6E44((uint64_t)this + 67128);
  sub_18D1C6ED4((uint64_t)this + 67176);
  *((_DWORD *)this + 16806) = 0;
  *((_QWORD *)this + 8407) = 0x1000000AELL;
  *((_QWORD *)this + 8404) = &off_1E25C6440;
  *(_OWORD *)((char *)this + 67240) = xmmword_18D3197E0;
  *((_QWORD *)this + 8408) = (char *)this + 67272;
  *((_QWORD *)this + 8586) = 0x1000000AELL;
  *((_QWORD *)this + 8583) = &unk_1E25C64A0;
  *((_OWORD *)this + 4292) = xmmword_18D3197E0;
  *((_QWORD *)this + 8587) = (char *)this + 68704;
  sub_18D1C6F64((uint64_t)this + 70096);
  *((_QWORD *)this + 8944) = 0x100000057;
  *((_QWORD *)this + 8941) = &unk_1E25C83F0;
  *((_OWORD *)this + 4471) = xmmword_18D3197F0;
  *((_QWORD *)this + 8945) = (char *)this + 71568;
  *((_QWORD *)this + 8993) = 0x100000057;
  *((_QWORD *)this + 8990) = &unk_1E25C83C0;
  *(_OWORD *)((char *)this + 71928) = xmmword_18D3197F0;
  *((_QWORD *)this + 8994) = (char *)this + 71960;
  sub_18D1C7034((uint64_t)this + 72656);
  *((_QWORD *)this + 9091) = 0x100000057;
  *((_QWORD *)this + 9088) = &unk_1E25C83F0;
  *(_OWORD *)((char *)this + 72712) = xmmword_18D3197F0;
  *((_QWORD *)this + 9092) = (char *)this + 72744;
  sub_18D1C7034((uint64_t)this + 73096);
  sub_18D1C70C4((uint64_t)this + 73144);
  *((_DWORD *)this + 18298) = 0;
  *((_QWORD *)this + 9153) = 0x100000057;
  *((_QWORD *)this + 9150) = &off_1E25C8330;
  *(_OWORD *)((char *)this + 73208) = xmmword_18D3197F0;
  *((_QWORD *)this + 9154) = (char *)this + 73240;
  *((_QWORD *)this + 9245) = 0x100000057;
  *((_QWORD *)this + 9242) = &unk_1E25C8390;
  *(_OWORD *)((char *)this + 73944) = xmmword_18D3197F0;
  *((_QWORD *)this + 9246) = (char *)this + 73976;
  sub_18D04AE0C((uint64_t)this + 61288);
  if (cnprint::CNPrinter::GetLogLevel(v18) <= 1)
  {
    v28[0] = 12;
    v27 = 1;
    v19 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Resetting from constructor");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v25) = v19;
    else
      v25 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v28, &v27, "%s", v20, v21, v22, v23, v24, v25);
  }
  raven::RavenPNTEstimator::Reset(this);
  *((_QWORD *)this + 148) = (char *)this + 27592;
  *((_QWORD *)this + 147) = (char *)this + 24856;
  *((_QWORD *)this + 150) = 0;
  *((_QWORD *)this + 149) = v10;
  return this;
}

void sub_18D18B51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD **a15, _QWORD *a16, _BYTE *a17, _BYTE *a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_18D18B988(v23);
  *v24 = &unk_1E25B9000;
  v28 = -16800;
  do
  {
    *v26 = &unk_1E25B8DB8;
    v26 -= 6;
    v28 += 48;
  }
  while (v28);
  *v24 = &unk_1E25B90C0;
  v22[3449] = &unk_1E25B9050;
  v29 = -16800;
  do
  {
    *v25 = &unk_1E25B8DE8;
    v25 -= 6;
    v29 += 48;
  }
  while (v29);
  v22[3449] = &unk_1E25B9108;
  v22[3108] = &unk_1E25B9B60;
  v22[3429] = &unk_1E25B9250;
  v22[3107] = &unk_1E25B9250;
  v22[2766] = &unk_1E25B9B60;
  v22[3087] = &unk_1E25B9250;
  if (*a17)
    *a17 = 0;
  if (*a18)
    *a18 = 0;
  if (*(_BYTE *)(a19 + 144))
    *(_BYTE *)(a19 + 144) = 0;
  v22[2420] = &unk_1E25B90A0;
  sub_18D04AF7C(a14);
  sub_18D04A584((uint64_t)(v22 + 2097), *a15);
  sub_18D075A20(a16);
  v22[1860] = &unk_1E25C7370;
  v30 = v22[1865];
  v22[1865] = 0;
  if (v30)
    MEMORY[0x18D78B5BC](v30, 0x1000C8000313F17);
  *a20 = &unk_1E25C5E70;
  v22[1827] = &unk_1E25C5E70;
  sub_18D18BC1C(a21);
  sub_18D18BC1C(a22);
  sub_18D04A18C((uint64_t)v22);
  _Unwind_Resume(a1);
}

uint64_t *sub_18D18B988(uint64_t *a1)
{
  a1[1581] = (uint64_t)&unk_1E25C5DE0;
  a1[1489] = (uint64_t)&unk_1E25C5CC0;
  a1[1482] = (uint64_t)&unk_1E25C82D0;
  sub_18D1C3A48(a1 + 1487);
  a1[1482] = (uint64_t)&unk_1E25C5A50;
  a1[1476] = (uint64_t)&unk_1E25C82A0;
  sub_18D1C3D98(a1 + 1481);
  a1[1476] = (uint64_t)&unk_1E25C5A20;
  a1[1427] = (uint64_t)&unk_1E25C5EA0;
  a1[1421] = (uint64_t)&unk_1E25C82A0;
  sub_18D1C3D98(a1 + 1426);
  a1[1421] = (uint64_t)&unk_1E25C5A20;
  a1[1329] = (uint64_t)&unk_1E25C5E70;
  a1[1280] = (uint64_t)&unk_1E25C5EA0;
  a1[1101] = (uint64_t)&unk_1E25C58D0;
  a1[922] = (uint64_t)&unk_1E25C5DE0;
  a1[743] = (uint64_t)&unk_1E25C5CC0;
  a1[736] = (uint64_t)&unk_1E25C6410;
  sub_18D1C3A48(a1 + 741);
  a1[736] = (uint64_t)&unk_1E25C5A50;
  a1[730] = (uint64_t)&unk_1E25C63E0;
  sub_18D1C3D98(a1 + 735);
  a1[730] = (uint64_t)&unk_1E25C5A20;
  a1[638] = (uint64_t)&unk_1E25C5EA0;
  a1[632] = (uint64_t)&unk_1E25C63E0;
  sub_18D1C3D98(a1 + 637);
  a1[632] = (uint64_t)&unk_1E25C5A20;
  a1[453] = (uint64_t)&unk_1E25C5E70;
  a1[361] = (uint64_t)&unk_1E25C5EA0;
  a1[8] = (uint64_t)&unk_1E25C58D0;
  sub_18D05DB90(a1 + 5);
  return a1;
}

_QWORD *sub_18D18BB0C(_QWORD *result)
{
  uint64_t v1;

  v1 = 2100;
  do
  {
    result[v1] = &unk_1E25B8DB8;
    v1 -= 6;
  }
  while (v1 * 8);
  *result = &unk_1E25B90C0;
  return result;
}

_QWORD *sub_18D18BB3C(_QWORD *result)
{
  uint64_t v1;

  v1 = 2100;
  do
  {
    result[v1] = &unk_1E25B8DE8;
    v1 -= 6;
  }
  while (v1 * 8);
  *result = &unk_1E25B9108;
  return result;
}

_QWORD *sub_18D18BB6C(_QWORD *result)
{
  result[322] = &unk_1E25B9250;
  *result = &unk_1E25B9250;
  result[1] = &unk_1E25B9B60;
  return result;
}

_QWORD *sub_18D18BB90(_QWORD *result)
{
  *result = &unk_1E25B90A0;
  return result;
}

_QWORD *sub_18D18BBA8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C7370;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D18BC08(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D18BC1C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E25C3648;
  v3 = (void **)(a1 + 5920);
  sub_18D1C4ED8(&v3);
  *(_QWORD *)a1 = &unk_1E25B9BA8;
  *(_QWORD *)(a1 + 3600) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 672) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 480) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 256) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 64) = &unk_1E25C5E70;
  return a1;
}

uint64_t raven::RavenPNTEstimator::AddDeviceVelocityMeasurement(raven::RavenPNTEstimator *this, const raven::VelocityEvent *a2)
{
  uint64_t v4;
  double v5;
  char *v6;
  cnprint::CNPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  __n128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v56;
  double v57;
  double v58;
  double v59;
  _QWORD v60[4];
  char v61;
  __int128 v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  __int128 *v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned __int8 v87;
  void (*v88[5])(uint64_t);

  v88[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 280))
    return 0xFFFFFFFFLL;
  v76 = 0x100000003;
  v74 = &unk_1E25C7790;
  v75 = xmmword_18D313070;
  v77 = &v78;
  v78 = *((_OWORD *)a2 + 18);
  v79 = *((_QWORD *)a2 + 38);
  v71 = 0x300000003;
  v69 = &unk_1E25C78E0;
  v70 = xmmword_18D30BB60;
  v72 = &v73;
  if (!sub_18D186824((uint64_t)a2, (uint64_t)&v69))
    return 0xFFFFFFFFLL;
  v4 = *((_QWORD *)a2 + 13);
  v5 = *((double *)a2 + 14);
  *(_QWORD *)&v68 = v4;
  *((double *)&v68 + 1) = v5;
  sub_18D1C7988(v60, 12);
  v60[0] = off_1E25C3960;
  v62 = v68;
  v63 = (char *)this + 2696;
  v64 = (char *)this + 14600;
  v65 = (char *)this + 14616;
  v66 = (char *)this + 2536;
  v67 = (char *)this + 2576;
  if ((v70 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v84 = 0x100000003;
  v6 = (char *)this + 61288;
  v80 = &unk_1E25C7790;
  v85 = &v86;
  v81 = v70 | 0x100000000;
  v82 = v70;
  v83 = v70;
  v7 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v80, 0.0);
  if (*((_BYTE *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v88[0]) = 2;
      v87 = 2;
      v56 = v5 + (double)v4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v8, v9, v10, v11, v12, SLOBYTE(v56));
    }
    else if (*((_BYTE *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
      {
        LOWORD(v88[0]) = 2;
        v87 = 1;
        v58 = v5 + (double)v4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v58));
      }
    }
    else
    {
      v24 = sub_18D03FE4C((double *)&v68, (double *)this + 7662);
      if (v24)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v24) <= 1)
        {
          LOWORD(v88[0]) = 2;
          v87 = 1;
          v59 = *((double *)&v68 + 1) + (double)(uint64_t)v68;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v25, v26, v27, v28, v29, SLOBYTE(v59));
        }
      }
      else
      {
        v88[0] = 0;
        v88[1] = 0;
        sub_18D1C7BD8((void (**)(int))v88, (uint64_t)v60);
        v30 = sub_18D1C7B34((uint64_t *)this + 7666, v88);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v88);
        v31 = *((int *)this + 16806);
        v32 = (v31 + 1);
        if (*((_QWORD *)this + 7668) == v32)
        {
          *((_DWORD *)this + 16806) = v32;
          *((_DWORD *)this + 15340) = v32;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v32;
          *((_DWORD *)this + 15343) = v32;
          *((_DWORD *)this + 16046) = v32;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v32;
          *((_DWORD *)this + 16049) = v32;
          *((_DWORD *)this + 16230) = v32;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v32;
          *((_DWORD *)this + 16233) = v32;
          *((_DWORD *)this + 16588) = v32;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v32;
          *((_DWORD *)this + 16591) = v32;
          *((_DWORD *)this + 16600) = v32;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v32;
          *((_DWORD *)this + 16603) = v32;
          *((_DWORD *)this + 16784) = v32;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v32;
          *((_DWORD *)this + 16787) = v32;
          *((_DWORD *)this + 16796) = v32;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v32;
          *((_DWORD *)this + 16799) = v32;
          *((_DWORD *)this + 16810) = v32;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v32;
          *((_DWORD *)this + 16813) = v32;
          *((_DWORD *)this + 17168) = v32;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v32;
          *((_DWORD *)this + 17171) = v32;
          *(_OWORD *)(*((_QWORD *)this + 7673) + 16 * v31) = v68;
          if (v75 <= DWORD1(v75))
            v33 = DWORD1(v75);
          else
            v33 = v75;
          if (DWORD1(v75))
            v34 = (_DWORD)v75 == 0;
          else
            v34 = 1;
          if (v34)
            v35 = 0;
          else
            v35 = v33;
          *(_DWORD *)(*((_QWORD *)this + 8026) + 4 * v31) = v35;
          sub_18D053AA8(*((_QWORD *)this + 8297) + (v31 << 6), (uint64_t)&v74);
          if (v81 <= HIDWORD(v81))
            v36 = HIDWORD(v81);
          else
            v36 = v81;
          if (HIDWORD(v81))
            v37 = (_DWORD)v81 == 0;
          else
            v37 = 1;
          if (v37)
            v38 = 0;
          else
            v38 = v36;
          *(_DWORD *)(*((_QWORD *)this + 8303) + 4 * v31) = v38;
          sub_18D053AA8(*((_QWORD *)this + 8395) + (v31 << 6), (uint64_t)&v80);
          v39 = sub_18D053AA8(*((_QWORD *)this + 8401) + 112 * (int)v31, (uint64_t)&v69);
          *(_QWORD *)(*((_QWORD *)this + 8408) + 8 * v31) = sub_18D18C258;
          if (*v30)
            v40 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v30)(3, v30, 0, &unk_1E25B4440, &std::__any_imp::__unique_typeinfo<raven::h_DeviceVelocityArgs_RavenPNT<double>>::__id, v39);
          else
            v40 = 0;
          v13 = 0;
          *(_QWORD *)(*((_QWORD *)v6 + 926) + 8 * v31) = v40;
          goto LABEL_42;
        }
        LOWORD(v88[0]) = 2;
        v87 = 4;
        v41 = (*(uint64_t (**)(uint64_t))(v60[0] + 16))((uint64_t)v60);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v42, v43, v44, v45, v46, v41);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
  {
    LOWORD(v88[0]) = 2;
    v87 = 1;
    v57 = v5 + (double)v4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v14, v15, v16, v17, v18, SLOBYTE(v57));
  }
  LOWORD(v88[0]) = 12;
  v87 = 4;
  v80 = (void *)(*(uint64_t (**)(const raven::VelocityEvent *))(*(_QWORD *)a2 + 16))(a2);
  v81 = v47;
  v48 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v80, "Could not add measurement - device velocity");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v54) = v48;
  else
    v54 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "%s", v49, v50, v51, v52, v53, v54);
  v13 = 0xFFFFFFFFLL;
LABEL_42:
  v60[0] = &unk_1E25B8EE0;
  if (v61 < 0)
    operator delete((void *)v60[2]);
  return v13;
}

void sub_18D18C200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D18C258(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double *v25;
  double *v26;
  double *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  _BYTE v37[624];
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  double *v77;
  uint64_t v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  double *v82;
  uint64_t v83;
  char v84[32];
  uint64_t v85;
  __int128 v86;
  __int128 v87;

  if (!lpsrc
    || (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4440, 0)) == 0)
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    v23 = MEMORY[0x30] + (double)MEMORY[0x28];
    goto LABEL_20;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 3))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  if (!*((_QWORD *)v13 + 7))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  v87 = *(_OWORD *)(v13 + 40);
  v21 = *((_QWORD *)v13 + 9);
  v86 = *(_OWORD *)*((_QWORD *)v13 + 8);
  sub_18D1D6E1C((uint64_t)v84, v21);
  v22 = *((_QWORD *)v14 + 7);
  v81 = 0x10000001CLL;
  v79 = &unk_1E25C72B0;
  v80 = xmmword_18D319780;
  v82 = (double *)&v83;
  if (sub_18D1C7470((uint64_t)&v87, (uint64_t)&v86, v85, v22, *((_QWORD *)v14 + 11), (uint64_t)&v79))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    v23 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, (unsigned __int8 *)&v38, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  v80 = xmmword_18D319780;
  v76 = 0x10000001CLL;
  v74 = &unk_1E25C72B0;
  v75 = xmmword_18D319780;
  v77 = (double *)&v78;
  v38 = vdupq_n_s64(0x7FF8000000000000uLL);
  v39 = v38;
  v40 = v38;
  v41 = v38;
  v42 = v38;
  v43 = v38;
  v44 = v38;
  v45 = v38;
  v46 = v38;
  v47 = v38;
  v48 = v38;
  v49 = v38;
  v50 = v38;
  v51 = v38;
  v52 = v38;
  v53 = v38;
  v54 = v38;
  v55 = v38;
  v56 = v38;
  v57 = v38;
  v58 = v38;
  v59 = v38;
  v60 = v38;
  v61 = v38;
  v62 = v38;
  v63 = v38;
  v64 = v38;
  v65 = v38;
  v66 = v38;
  v67 = v38;
  v68 = v38;
  v69 = v38;
  v70 = v38;
  v71 = v38;
  v72 = v38;
  v73 = 0x7FF8000000000000;
  sub_18D1C75E8(v82, *(double **)(a1 + 32), (uint64_t)&v74, (uint64_t)&v38);
  *(_OWORD *)(a4 + 8) = xmmword_18D313070;
  v25 = v77;
  v26 = *(double **)(a2 + 32);
  v27 = *(double **)(a4 + 32);
  *v27 = v77[3] + *v26;
  v27[1] = v25[4] + v26[1];
  v27[2] = v25[5] + v26[2];
  v35 = 0x1A00000003;
  v33 = &off_1E25C7850;
  v36 = v37;
  v34 = xmmword_18D319800;
  sub_18D04BE88((uint64_t)&v33, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v33);
  v28 = *(_DWORD *)(a5 + 20);
  v29 = *(_QWORD *)(a5 + 32);
  v30 = v40.i64[0];
  *(_QWORD *)(v29 + 24 * v28) = v39.i64[1];
  *(_QWORD *)(v29 + 8 * ((4 * v28) | 1)) = v30;
  *(_QWORD *)(v29 + 8 * (5 * v28 + 2)) = v40.i64[1];
  v35 = 0x300000003;
  v33 = (uint64_t (**)())&unk_1E25C78E0;
  v36 = v37;
  v34 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v33, 0.0);
  v31 = HIDWORD(v34) + 1;
  v32 = v36;
  *v36 = 0x3FF0000000000000;
  v32[v31] = 0x3FF0000000000000;
  v32[2 * v31] = 0x3FF0000000000000;
  sub_18D053AA8(a6, (uint64_t)&v33);
  return 0;
}

uint64_t sub_18D18C65C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::AddUserVelocityMeasurement(raven::RavenPNTEstimator *this, const raven::VelocityEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  double v10;
  char *v11;
  cnprint::CNPrinter *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  __n128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v61;
  double v62;
  double v63;
  double v64;
  _QWORD v65[4];
  char v66;
  __int128 v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD v78[7];
  __int128 v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  __int128 *v83;
  __int128 v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned __int8 v93;
  void (*v94[5])(uint64_t);

  v94[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 280))
    return 0xFFFFFFFFLL;
  v82 = 0x100000003;
  v80 = &unk_1E25C7790;
  v81 = xmmword_18D313070;
  v83 = &v84;
  v84 = *((_OWORD *)a2 + 18);
  v4 = *((_QWORD *)a2 + 39);
  v85 = *((_QWORD *)a2 + 38);
  v76 = 0x300000003;
  v74 = &unk_1E25C78E0;
  v75 = xmmword_18D30BB60;
  v77 = v78;
  v5 = *((_QWORD *)a2 + 40);
  v6 = *((_QWORD *)a2 + 41);
  v78[0] = v4;
  v78[1] = v5;
  v7 = *((_QWORD *)a2 + 42);
  v78[2] = v6;
  v78[3] = v5;
  v8 = *(_OWORD *)((char *)a2 + 344);
  v78[4] = v7;
  v78[5] = v8;
  v78[6] = v6;
  v79 = v8;
  v9 = *((_QWORD *)a2 + 13);
  v10 = *((double *)a2 + 14);
  *(_QWORD *)&v73 = v9;
  *((double *)&v73 + 1) = v10;
  sub_18D1C7988(v65, 27);
  v65[0] = off_1E25C3760;
  v67 = v73;
  v68 = (char *)this + 2696;
  v69 = (char *)this + 14600;
  v70 = (char *)this + 14616;
  v71 = (char *)this + 2536;
  v72 = (char *)this + 2576;
  if ((v75 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v90 = 0x100000003;
  v11 = (char *)this + 61288;
  v86 = &unk_1E25C7790;
  v91 = &v92;
  v87 = v75 | 0x100000000;
  v88 = v75;
  v89 = v75;
  v12 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v86, 0.0);
  if (*((_BYTE *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v94[0]) = 2;
      v93 = 2;
      v61 = v10 + (double)v9;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v13, v14, v15, v16, v17, SLOBYTE(v61));
    }
    else if (*((_BYTE *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
      {
        LOWORD(v94[0]) = 2;
        v93 = 1;
        v63 = v10 + (double)v9;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v63));
      }
    }
    else
    {
      v29 = sub_18D03FE4C((double *)&v73, (double *)this + 7662);
      if (v29)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
        {
          LOWORD(v94[0]) = 2;
          v93 = 1;
          v64 = *((double *)&v73 + 1) + (double)(uint64_t)v73;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v64));
        }
      }
      else
      {
        v94[0] = 0;
        v94[1] = 0;
        sub_18D1C886C((void (**)(int))v94, (uint64_t)v65);
        v35 = sub_18D1C7B34((uint64_t *)this + 7666, v94);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v94);
        v36 = *((int *)this + 16806);
        v37 = (v36 + 1);
        if (*((_QWORD *)this + 7668) == v37)
        {
          *((_DWORD *)this + 16806) = v37;
          *((_DWORD *)this + 15340) = v37;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v37;
          *((_DWORD *)this + 15343) = v37;
          *((_DWORD *)this + 16046) = v37;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v37;
          *((_DWORD *)this + 16049) = v37;
          *((_DWORD *)this + 16230) = v37;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v37;
          *((_DWORD *)this + 16233) = v37;
          *((_DWORD *)this + 16588) = v37;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v37;
          *((_DWORD *)this + 16591) = v37;
          *((_DWORD *)this + 16600) = v37;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v37;
          *((_DWORD *)this + 16603) = v37;
          *((_DWORD *)this + 16784) = v37;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v37;
          *((_DWORD *)this + 16787) = v37;
          *((_DWORD *)this + 16796) = v37;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v37;
          *((_DWORD *)this + 16799) = v37;
          *((_DWORD *)this + 16810) = v37;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v37;
          *((_DWORD *)this + 16813) = v37;
          *((_DWORD *)this + 17168) = v37;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v37;
          *((_DWORD *)this + 17171) = v37;
          *(_OWORD *)(*((_QWORD *)this + 7673) + 16 * v36) = v73;
          if (v81 <= DWORD1(v81))
            v38 = DWORD1(v81);
          else
            v38 = v81;
          if (DWORD1(v81))
            v39 = (_DWORD)v81 == 0;
          else
            v39 = 1;
          if (v39)
            v40 = 0;
          else
            v40 = v38;
          *(_DWORD *)(*((_QWORD *)this + 8026) + 4 * v36) = v40;
          sub_18D053AA8(*((_QWORD *)this + 8297) + (v36 << 6), (uint64_t)&v80);
          if (v87 <= HIDWORD(v87))
            v41 = HIDWORD(v87);
          else
            v41 = v87;
          if (HIDWORD(v87))
            v42 = (_DWORD)v87 == 0;
          else
            v42 = 1;
          if (v42)
            v43 = 0;
          else
            v43 = v41;
          *(_DWORD *)(*((_QWORD *)this + 8303) + 4 * v36) = v43;
          sub_18D053AA8(*((_QWORD *)this + 8395) + (v36 << 6), (uint64_t)&v86);
          v44 = sub_18D053AA8(*((_QWORD *)this + 8401) + 112 * (int)v36, (uint64_t)&v74);
          *(_QWORD *)(*((_QWORD *)this + 8408) + 8 * v36) = sub_18D18CC70;
          if (*v35)
            v45 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v35)(3, v35, 0, &unk_1E25B4328, &std::__any_imp::__unique_typeinfo<raven::h_UserVelocityArgs_RavenPNT<double>>::__id, v44);
          else
            v45 = 0;
          v18 = 0;
          *(_QWORD *)(*((_QWORD *)v11 + 926) + 8 * v36) = v45;
          goto LABEL_41;
        }
        LOWORD(v94[0]) = 2;
        v93 = 4;
        v46 = (*(uint64_t (**)(uint64_t))(v65[0] + 16))((uint64_t)v65);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v47, v48, v49, v50, v51, v46);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
  {
    LOWORD(v94[0]) = 2;
    v93 = 1;
    v62 = v10 + (double)v9;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v62));
  }
  LOWORD(v94[0]) = 12;
  v93 = 4;
  v86 = (void *)(*(uint64_t (**)(const raven::VelocityEvent *))(*(_QWORD *)a2 + 16))(a2);
  v87 = v52;
  v53 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v86, "Could not add measurement - user velocity");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v59) = v53;
  else
    v59 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "%s", v54, v55, v56, v57, v58, v59);
  v18 = 0xFFFFFFFFLL;
LABEL_41:
  v65[0] = &unk_1E25B8EE0;
  if (v66 < 0)
    operator delete((void *)v65[2]);
  return v18;
}

void sub_18D18CC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D18CC70(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  double v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double *v40;
  double *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  double v52;
  double v53;
  uint64_t (**v54)();
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  _BYTE v58[624];
  _BYTE v59[32];
  _OWORD v60[23];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  double v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  void *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _BYTE v82[264];
  __int128 v83;
  __int128 v84;
  unsigned __int8 v85;

  if (!lpsrc
    || (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4328, 0)) == 0)
  {
    LOWORD(v54) = 12;
    v59[0] = 4;
    v23 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, v59, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  if (!*((_QWORD *)v13 + 7))
  {
    LOWORD(v54) = 12;
    v59[0] = 4;
    v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_23;
  }
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 3))
  {
    LOWORD(v54) = 12;
    v59[0] = 4;
    v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_23;
  }
  v84 = *(_OWORD *)(v13 + 40);
  v21 = *((_QWORD *)v13 + 9);
  v83 = *(_OWORD *)*((_QWORD *)v13 + 8);
  sub_18D1D6E1C((uint64_t)v82, v21);
  v22 = **((unsigned __int8 **)v14 + 10);
  v79 = 0x10000001CLL;
  v77 = &unk_1E25C72B0;
  v78 = xmmword_18D319780;
  v80 = &v81;
  if (v22)
  {
    if (v22 != 1)
    {
      if (v22 == 2)
        __assert_rtn("h_UserVelocity_RavenPNT", "ravenmeasurementfunctions.h", 7073, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      goto LABEL_32;
    }
    if (!sub_18D1D0D6C((uint64_t)&v84, &v83, (uint64_t)v82, *((_QWORD *)v14 + 7), *((_QWORD *)v14 + 11), 1, 1, 1, (uint64_t)&v77))goto LABEL_32;
    LOWORD(v54) = 12;
    v59[0] = 4;
    v23 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    goto LABEL_23;
  }
  *(_QWORD *)&v59[24] = 0x100000007;
  *(_QWORD *)v59 = &unk_1E25C81E0;
  *(_OWORD *)&v59[8] = xmmword_18D319810;
  *(_QWORD *)&v60[0] = (char *)v60 + 8;
  if (sub_18D1C7D64((uint64_t)&v84, &v83, (uint64_t)v82, 0, (uint64_t)v59))
  {
    LOWORD(v54) = 12;
    LOBYTE(v72) = 4;
    v52 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v72, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v52));
    return 0xFFFFFFFFLL;
  }
  v56 = 0x700000001;
  v54 = &off_1E25C6DA0;
  v57 = v58;
  v55 = xmmword_18D319820;
  for (i = 10; i != 17; ++i)
    *((_DWORD *)&v54 + i) = i + 11;
  sub_18D1BA028((uint64_t)&v72, (uint64_t)&v54);
  sub_18D1C8640((uint64_t)&v54, (uint64_t)&v77, (uint64_t)&v72);
  sub_18D1C8130((uint64_t)&v54, *(int *)&v59[16], *(double **)&v60[0]);
LABEL_32:
  v74 = 0x100000007;
  v72 = &unk_1E25C81E0;
  v73 = xmmword_18D319810;
  v75 = (double *)&v76;
  *(int64x2_t *)v59 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v59[16] = *(_OWORD *)v59;
  v60[0] = *(_OWORD *)v59;
  v60[1] = *(_OWORD *)v59;
  v60[2] = *(_OWORD *)v59;
  v60[3] = *(_OWORD *)v59;
  v60[4] = *(_OWORD *)v59;
  v60[5] = *(_OWORD *)v59;
  v60[6] = *(_OWORD *)v59;
  v60[7] = *(_OWORD *)v59;
  v60[8] = *(_OWORD *)v59;
  v60[9] = *(_OWORD *)v59;
  v60[10] = *(_OWORD *)v59;
  v60[11] = *(_OWORD *)v59;
  v60[12] = *(_OWORD *)v59;
  v60[13] = *(_OWORD *)v59;
  v60[14] = *(_OWORD *)v59;
  v60[15] = *(_OWORD *)v59;
  v60[16] = *(_OWORD *)v59;
  v60[17] = *(_OWORD *)v59;
  v60[18] = *(_OWORD *)v59;
  v60[19] = *(_OWORD *)v59;
  v60[20] = *(_OWORD *)v59;
  v60[21] = *(_OWORD *)v59;
  v60[22] = *(_OWORD *)v59;
  v61 = *(_OWORD *)v59;
  v62 = *(_OWORD *)v59;
  v63 = *(_OWORD *)v59;
  v64 = *(_OWORD *)v59;
  v65 = *(_OWORD *)v59;
  v66 = *(_OWORD *)v59;
  v67 = *(_OWORD *)v59;
  v68 = *(_OWORD *)v59;
  v69 = *(_OWORD *)v59;
  v70 = *(_OWORD *)v59;
  v71 = NAN;
  LOBYTE(v54) = 0;
  if (sub_18D1C9FFC((uint64_t)&v77, a1, v22, (uint64_t)&v72, (uint64_t)v59, (BOOL *)&v54, 0.000000015))
  {
    LOWORD(v54) = 12;
    v85 = 4;
    v53 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v85, "time,%.3lf,h-function failure on line %d: %s() %s", v31, v32, v33, v34, v35, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)(a4 + 8) = xmmword_18D313070;
  v36 = v75[3];
  v37 = v75[4];
  v39 = v75[5];
  v38 = v75[6];
  v40 = *(double **)(a2 + 32);
  v41 = *(double **)(a4 + 32);
  *v41 = *v40 + v36 * v37;
  v41[1] = v40[1] + v36 * v39;
  v41[2] = v40[2] + v36 * v38;
  v56 = 0x1A00000003;
  v54 = &off_1E25C7850;
  v57 = v58;
  v55 = xmmword_18D319800;
  sub_18D04BE88((uint64_t)&v54, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v54);
  v42 = *(int *)(a5 + 20);
  v43 = 3 * v42;
  v44 = 6 * v42;
  v45 = *(_QWORD *)(a5 + 32);
  *(double *)(v45 + 48 * (_DWORD)v42) = v36 * *((double *)&v62 + 1);
  v46 = 8 * v42;
  v47 = 7 * v42;
  *(double *)(v45 + 8 * v47) = v36 * *(double *)&v63;
  *(double *)(v45 + (v42 << 6)) = v36 * *((double *)&v63 + 1);
  v48 = 23 * v42;
  *(double *)(v45 + 8 * v48) = v36 * *(double *)&v64 + v37 * *(double *)&v61;
  *(double *)(v45 + 192 * (_DWORD)v42) = v36 * *((double *)&v64 + 1) + v37 * *((double *)&v61 + 1);
  LODWORD(v42) = 25 * v42;
  *(double *)(v45 + 8 * (int)v42) = v36 * *(double *)&v65 + v37 * *(double *)&v62;
  *(double *)(v45 + 8 * ((2 * v43) | 1)) = v36 * *((double *)&v65 + 1);
  *(double *)(v45 + 8 * (v47 + 1)) = v36 * *(double *)&v66;
  v49 = v45 + 8 * v46;
  *(double *)(v49 + 8) = v36 * *((double *)&v66 + 1);
  *(double *)(v45 + 8 * (v48 + 1)) = v36 * *(double *)&v67 + v39 * *(double *)&v61;
  *(double *)(v45 + 8 * ((8 * v43) | 1)) = v36 * *((double *)&v67 + 1) + v39 * *((double *)&v61 + 1);
  *(double *)(v45 + 8 * ((int)v42 + 1)) = v36 * *(double *)&v68 + v39 * *(double *)&v62;
  *(double *)(v45 + 8 * (v44 + 2)) = v36 * *((double *)&v68 + 1);
  *(double *)(v45 + 8 * (v47 + 2)) = v36 * *(double *)&v69;
  *(double *)(v49 + 16) = v36 * *((double *)&v69 + 1);
  *(double *)(v45 + 8 * (v48 + 2)) = v36 * *(double *)&v70 + v38 * *(double *)&v61;
  *(double *)(v45 + 8 * ((8 * v43) | 2)) = v36 * *((double *)&v70 + 1) + v38 * *((double *)&v61 + 1);
  *(double *)(v45 + 8 * ((int)v42 + 2)) = v36 * v71 + v38 * *(double *)&v62;
  v56 = 0x300000003;
  v54 = (uint64_t (**)())&unk_1E25C78E0;
  v57 = v58;
  v55 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v54, 0.0);
  v50 = HIDWORD(v55) + 1;
  v51 = v57;
  *v57 = 0x3FF0000000000000;
  v51[v50] = 0x3FF0000000000000;
  v51[2 * v50] = 0x3FF0000000000000;
  sub_18D053AA8(a6, (uint64_t)&v54);
  return 0;
}

uint64_t sub_18D18D3A0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::AdjustClockOffset(uint64_t a1, uint64_t a2, double a3)
{
  double v4;
  uint64_t v5;
  double v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int16 v23;
  unsigned __int8 v24;
  __int16 v25;

  if (!*(_BYTE *)(a1 + 58))
    return 1;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v4 = a3 * 1000000.0;
    v5 = *(_QWORD *)(a1 + 14648);
    v6 = v4 + *(double *)(v5 + 152);
    *(double *)(v5 + 152) = v6;
    v23 = 12;
    v22 = 2;
    v7 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "adjusted clock offset by %.3lf us to %.3lf us", v4, v6);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v13) = v7;
    else
      v13 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v23, &v22, "%s", v8, v9, v10, v11, v12, v13);
    return 1;
  }
  v25 = 12;
  v24 = 4;
  v15 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "invalid clock correction %.3lf s", a3);
  if (*(char *)(a1 + 2511) >= 0)
    LOBYTE(v21) = v15;
  else
    v21 = *(_QWORD *)(a1 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, &v24, "%s", v16, v17, v18, v19, v20, v21);
  return 0;
}

uint64_t raven::RavenPNTEstimator::Configure(raven::RavenPNTEstimator *this, uint64_t *a2, int8x16_t a3, int8x16_t a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  double v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned int v35;
  int32x4_t v36;
  __n128 v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  cnstatistics *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  char *v50;
  int v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  void *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned __int8 v61;
  std::string __p;
  uint64_t v63;
  double v64;
  _QWORD v65[6];
  _QWORD v66[24];
  _BYTE v67[160];
  double v68;

  if (*((_BYTE *)this + 57))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 2;
    v5 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPNTEstimator *)((char *)this + 2488), "Configure() called more than once");
    goto LABEL_16;
  }
  v12 = *a2;
  if (!*a2)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    v5 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() called with null raven parameters");
    goto LABEL_16;
  }
  if (!*(_BYTE *)(v12 + 33))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    v5 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() called with uninitialized raven parameters");
LABEL_16:
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v29) = v5;
    else
      v29 = *((_QWORD *)this + 311);
LABEL_19:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v56, "%s", v6, v7, v8, v9, v10, v29);
    return 0xFFFFFFFFLL;
  }
  v13 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a3, a4);
  *((_QWORD *)this + 323) = (char *)this + 27592;
  *((_QWORD *)this + 322) = (char *)this + 44440;
  *((_QWORD *)this + 324) = (char *)this + 24856;
  *((_QWORD *)this + 326) = *(_QWORD *)(v12 + 664);
  v14 = 672;
  if (v13)
    v14 = 680;
  *((_QWORD *)this + 325) = *(_QWORD *)(v12 + v14);
  v15 = 688;
  if (v13)
    v15 = 696;
  *((_QWORD *)this + 327) = *(_QWORD *)(v12 + v15);
  *((_OWORD *)this + 166) = 0u;
  *((_OWORD *)this + 165) = 0u;
  *((_OWORD *)this + 164) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 167) = _Q0;
  *((_QWORD *)this + 336) = 0x3FF0000000000000;
  v65[4] = 0x100000013;
  v65[2] = 0;
  v65[3] = 0;
  v65[1] = &unk_1E25C66B0;
  v66[22] = 0x100000013;
  v65[5] = v66;
  v66[19] = &unk_1E25C66B0;
  v66[21] = 0;
  v66[20] = 0;
  v66[23] = v67;
  v67[152] = 1;
  __p.__r_.__value_.__r.__words[0] = 0xF00000013;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_18D18DF8C;
  v21 = *(double *)(v12 + 1248);
  __p.__r_.__value_.__r.__words[2] = 0x400000004;
  v63 = *(_QWORD *)&v21;
  v64 = v21;
  LOBYTE(v65[0]) = 0;
  v68 = v21 * 0.5;
  if (sub_18D18FCC0((uint64_t)this + 2696, (uint64_t)&__p))
  {
    LOWORD(v56) = 12;
    v61 = 4;
    v22 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() failed to initialize full state dynamics integrator");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v28) = v22;
    else
      v28 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, &v61, "%s", v23, v24, v25, v26, v27, v28);
    return 0xFFFFFFFFLL;
  }
  *((_WORD *)this + 7508) = 1;
  *((_QWORD *)this + 1866) = 0x100000000;
  *((_WORD *)this + 7480) = 257;
  *((_QWORD *)this + 1871) = *(_QWORD *)(v12 + 912);
  *((_QWORD *)this + 1874) = *(_QWORD *)(v12 + 920);
  *((_OWORD *)this + 1047) = *((_OWORD *)this + 938);
  *((_OWORD *)this + 1043) = *((_OWORD *)this + 934);
  *((_OWORD *)this + 1042) = *((_OWORD *)this + 933);
  *((_QWORD *)this + 2096) = *((_QWORD *)this + 1878);
  v31 = *((_OWORD *)this + 936);
  *((_OWORD *)this + 1045) = v31;
  v32 = *((_OWORD *)this + 935);
  *((_OWORD *)this + 1044) = v32;
  v33 = *((_OWORD *)this + 937);
  *((_OWORD *)this + 1046) = v33;
  *((_QWORD *)this + 2028) = *((_QWORD *)this + 1876);
  *((_OWORD *)this + 1013) = v33;
  *((_OWORD *)this + 1012) = v31;
  *((_OWORD *)this + 1011) = v32;
  v34 = *((_OWORD *)this + 933);
  *((_OWORD *)this + 1010) = *((_OWORD *)this + 934);
  *((_OWORD *)this + 1009) = v34;
  *((_BYTE *)this + 16136) = 0;
  v58 = 0x10000001ALL;
  v56 = &unk_1E25C70A0;
  v59 = &v60;
  v57 = xmmword_18D319790;
  sub_18D04BE88((uint64_t)&v56, 0.0);
  v35 = DWORD2(v57);
  sub_18D1D6A24((uint64_t)&__p, (uint64_t)&v56);
  v36 = vdupq_lane_s32((int32x2_t)(v35 | 0x100000000), 0);
  v36.i32[1] = 1;
  *(int32x4_t *)&__p.__r_.__value_.__r.__words[1] = v36;
  sub_18D053AA8((uint64_t)this + 15040, (uint64_t)&__p);
  sub_18D1C96FC((uint64_t)&__p, v35, v35);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = v35;
  HIDWORD(__p.__r_.__value_.__r.__words[1]) = v35;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v35 * v35;
  HIDWORD(__p.__r_.__value_.__r.__words[2]) = v35;
  sub_18D04BE88((uint64_t)&__p, 0.0);
  v37 = sub_18D053AA8((uint64_t)this + 15288, (uint64_t)&__p);
  v38 = v65[0];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C7160;
  v65[0] = 0;
  if (v38)
    MEMORY[0x18D78B5BC](v38, 0x1000C8000313F17, v37);
  v63 = 0x10000001ALL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C70A0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319790;
  v64 = COERCE_DOUBLE(v65);
  sub_18D053B2C((uint64_t)this + 15288, (uint64_t)this + 15040, (uint64_t)&__p);
  sub_18D053AA8((uint64_t)this + 15336, (uint64_t)&__p);
  sub_18D053AA8((uint64_t)this + 15584, (uint64_t)this + 15040);
  sub_18D053AA8((uint64_t)this + 15832, (uint64_t)this + 15288);
  sub_18D053AA8((uint64_t)this + 15880, (uint64_t)this + 15336);
  *((_QWORD *)this + 2016) = 0x3FF0000000000000;
  *((_BYTE *)this + 16136) = 0;
  *((_DWORD *)this + 4035) = 1;
  if (*((char *)this + 2535) < 0)
    sub_18D077798(&__p, *((void **)this + 314), *((_QWORD *)this + 315));
  else
    __p = *(std::string *)((char *)this + 2512);
  v39 = raven::RavenSequentialGNSSMeasurementSelector::Configure((uint64_t)this + 16800, v12, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v39 & 1) == 0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() failed to configure sequential GNSS measurement selector");
    goto LABEL_39;
  }
  if (*(_BYTE *)(v12 + 3753))
  {
    LOBYTE(v56) = *((_BYTE *)this + 56);
    raven::RavenParameters::GetDebugMsrLoggingFilenameForEstimator(v12, (char *)&v56, &__p);
    raven::RavenSequentialGNSSMeasurementSelector::EnableLoggingToFile((uint64_t)this + 16800, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v40 = *((_DWORD *)this + 3734);
  v41 = *((_QWORD *)this + 1871);
  v42 = *((_QWORD *)this + 1874);
  v43 = *((_WORD *)this + 7508);
  *((_QWORD *)this + 2407) = *((_QWORD *)this + 1866);
  *((_DWORD *)this + 4816) = v40;
  *(_OWORD *)((char *)this + 19272) = *((_OWORD *)this + 934);
  *((_QWORD *)this + 2412) = v41;
  *((_QWORD *)this + 2414) = 0;
  *((_QWORD *)this + 2413) = 0;
  *((_QWORD *)this + 2415) = v42;
  *((_QWORD *)this + 2417) = 0;
  *((_QWORD *)this + 2416) = 0;
  *((_WORD *)this + 9672) = v43;
  *((_QWORD *)this + 2419) = 0;
  *((_WORD *)this + 9644) = 0;
  __p.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  v44 = (cnstatistics *)sub_18D04AD78((uint64_t)this + 19368, (double *)&__p);
  v45 = *(double *)(v12 + 1488);
  if (v45 < 0.0
    || v45 > 1.0
    || (v46 = *(double *)(v12 + 1496), v46 < 0.0)
    || v46 > 1.0
    || (v47 = *(double *)(v12 + 1480), v47 < 0.0))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() failed to set consistency monitor prediction parameters");
    goto LABEL_39;
  }
  *((double *)this + 2426) = v47;
  *((_QWORD *)this + 2424) = *(_QWORD *)(v12 + 1488);
  *((_QWORD *)this + 2425) = *(_QWORD *)(v12 + 1496);
  v48 = 1.0
      - fabs(cnstatistics::InverseNormal(v44, (1.0 - *(double *)(v12 + 912)) * 0.5, 0.0, 1.0)) / *(double *)(v12 + 1504);
  if (v48 < 0.0 || v48 > 1.0 || (v49 = 1.0 - *(double *)(v12 + 912), v49 < 0.0) || v49 > 1.0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() failed to set consistency monitor update parameters");
    goto LABEL_39;
  }
  *((double *)this + 2427) = v48;
  *((double *)this + 2428) = v49;
  if (*(_BYTE *)(v12 + 3656))
  {
    v50 = (char *)(v12 + 3664);
    if (*(char *)(v12 + 3687) < 0)
      v50 = *(char **)v50;
    if (sub_18D18FD1C((uint64_t)this + 22128, v50))
      goto LABEL_50;
  }
  else
  {
    if (*(_DWORD *)(v12 + 3652))
    {
LABEL_55:
      LOWORD(__p.__r_.__value_.__l.__data_) = 12;
      LOBYTE(v56) = 4;
      cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() received invalid type of gravity model");
      goto LABEL_39;
    }
    if (sub_18D18FDF4((uint64_t)this + 22128, (uint64_t)&unk_18D319CF0, (uint64_t)&unk_18D319DEC, (uint64_t)&unk_18D319EE8, (uint64_t)&unk_18D31A0E0, (uint64_t)&unk_18D31A2D8, (uint64_t)&unk_18D31A4D0))
    {
LABEL_50:
      LOWORD(__p.__r_.__value_.__l.__data_) = 12;
      LOBYTE(v56) = 4;
      cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() failed to load gravity parameters");
      goto LABEL_39;
    }
  }
  *((_DWORD *)this + 6172) = 1;
  if (*(_DWORD *)(v12 + 3652))
    goto LABEL_55;
  *((_OWORD *)this + 1384) = xmmword_18D3197D0;
  *((_QWORD *)this + 2770) = 0x40E86A0000000000;
  v51 = *(_DWORD *)(v12 + 3688);
  if ((v51 - 11) <= 0xFFFFFFF6)
    __assert_rtn("SetTruncationDegree", "sphericalharmonicsgravitymodel.h", 471, "trunc >= 2 && trunc <= max_degree");
  *((_DWORD *)this + 6212) = v51;
  if (!*((_BYTE *)this + 22136))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() gravity parameters are invalid");
    goto LABEL_39;
  }
  sub_18D1C978C((uint64_t)this + 24864, (uint64_t)this + 22128);
  *(double *)v52.i64 = *(double *)(v12 + 648) * ((double)(*(_DWORD *)(v12 + 1280) + 1) * 2.9999);
  v53.i64[0] = *(_QWORD *)(v12 + 968);
  if (*(double *)v52.i64 <= *(double *)v53.i64)
    v52.i64[0] = *(_QWORD *)(v12 + 968);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&__p, 0, v52, v53);
  if (__p.__r_.__value_.__r.__words[0])
  {
    if ((__p.__r_.__value_.__r.__words[0] & 0x8000000000000000) == 0)
      goto LABEL_62;
LABEL_70:
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() failed to configure accelerometer cache");
    goto LABEL_39;
  }
  if (*(double *)&__p.__r_.__value_.__l.__size_ < 0.0)
    goto LABEL_70;
LABEL_62:
  v55.i64[1] = __p.__r_.__value_.__l.__size_;
  *(_OWORD *)((char *)this + 27608) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(double *)v55.i64 = *(double *)(v12 + 656) * ((double)(*(_DWORD *)(v12 + 1296) + 1) * 2.9999);
  v54.i64[0] = *(_QWORD *)(v12 + 976);
  if (*(double *)v55.i64 <= *(double *)v54.i64)
    v55.i64[0] = *(_QWORD *)(v12 + 976);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&__p, 0, v55, v54);
  if (__p.__r_.__value_.__r.__words[0])
  {
    if ((__p.__r_.__value_.__r.__words[0] & 0x8000000000000000) == 0)
      goto LABEL_66;
LABEL_72:
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() failed to configure gyro cache");
    goto LABEL_39;
  }
  if (*(double *)&__p.__r_.__value_.__l.__size_ < 0.0)
    goto LABEL_72;
LABEL_66:
  *(_OWORD *)((char *)this + 44456) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (*((_BYTE *)this + 57))
  {
    puts("Warning: RavenEstimator::Configure() called more than once.");
    return 0xFFFFFFFFLL;
  }
  *((_QWORD *)this + 146) = *a2;
  *((_BYTE *)this + 57) = 1;
  if ((*(_QWORD *)(v12 + 280) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v12 + 280) <= 0.0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() invalid ZARU interval, %.3lf");
    goto LABEL_39;
  }
  if ((*(_QWORD *)(v12 + 288) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v12 + 288) <= 0.0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v56) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() invalid ZARU std dev, %.3lf");
LABEL_39:
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v29) = (_BYTE)this - 72;
    else
      v29 = *((_QWORD *)this + 311);
    goto LABEL_19;
  }
  return 0;
}

void sub_18D18DE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL raven::RavenPNTEstimator::UseHighAccelerationParameters(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  uint64_t v3;
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  double v8;
  double v9;
  unsigned int v10;
  int v11;
  uint64_t v14;
  double v15;

  v3 = *((_QWORD *)this + 146);
  if (!v3)
    return 1;
  a2.i64[0] = *(_QWORD *)(v3 + 848);
  v14 = 0;
  v15 = 0.0;
  CNTimeSpan::SetTimeSpan(&v14, 0, a2, a3);
  v7 = CNTimeSpan::operator-((uint64_t)this + 80, (_QWORD *)this + 8, v5, v6);
  if (!v7 && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    goto LABEL_7;
  if (!v14)
  {
    v9 = v15;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_8:
      if (v9 >= v8)
        return 1;
      goto LABEL_11;
    }
  }
  if (v7 == v14)
  {
LABEL_7:
    v9 = v15;
    goto LABEL_8;
  }
  if (v7 < v14)
    return 1;
LABEL_11:
  if (!*((_BYTE *)this + 1208))
    return 1;
  v10 = *((unsigned __int8 *)this + 1320);
  if (v10 < 8 && ((0xDFu >> v10) & 1) != 0)
    return 1;
  if (!*((_BYTE *)this + 1624))
    return 1;
  v11 = *((unsigned __int8 *)this + 1736);
  return v11 == 3 || v11 == 0;
}

uint64_t sub_18D18DF8C(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _BOOL4 v11;
  int32x4_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  cnprint::CNPrinter *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  cnprint::CNPrinter *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t *v60;
  float64x2_t v61;
  uint64_t *v62;
  __int128 v63;
  double v64;
  double v65;
  double v66;
  int v67;
  _OWORD *v68;
  uint64_t *v69;
  uint64_t *v70;
  double *v71;
  int v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  int v86;
  double *v87;
  double v88;
  double v89;
  double v90;
  int64x2_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  void *v129;
  __int128 v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE v133[216];
  void *v134;
  __int128 v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE v138[128];
  void *v139;
  __int128 v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE v143[128];
  void *v144;
  __int128 v145;
  uint64_t v146;
  _BYTE *v147;
  _BYTE v148[49];
  _BYTE v149[168];
  void *v150;
  __int128 v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  _BYTE v155[72];
  _BYTE v156[72];
  void *v157;
  __int128 v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE v161[248];
  char v162[32];
  float64_t *v163;
  char v164[32];
  float64_t *v165;
  char v166[32];
  float64_t *v167;
  char v168[32];
  float64_t *v169;
  _BYTE v170[112];
  _BYTE v171[112];
  _BYTE v172[112];
  _BYTE v173[112];
  _BYTE v174[168];
  void *v175;
  __int128 v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  void *v180;
  __int128 v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  _BYTE v185[33];
  _BYTE v186[20];
  int v187;
  double *v188;
  void *v189;
  __int128 v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  _BYTE v194[112];
  _BYTE v195[112];
  _BYTE v196[112];
  _BYTE v197[112];
  void *v198;
  __int128 v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  void *v203;
  __int128 v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  void *v208;
  __int128 v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD v212[9];
  void *v213;
  __int128 v214;
  uint64_t v215;
  _BYTE *v216;
  _BYTE v217[2280];
  uint64_t (**v218)();
  __int128 v219;
  uint64_t v220;
  _OWORD *v221;
  _OWORD v222[180];
  _OWORD v223[2];
  void *v224;
  __int128 v225;
  uint64_t v226;
  double *v227;
  uint64_t v228;
  void *v229;
  __int128 v230;
  uint64_t v231;
  double *v232;
  double v233[3];
  void *v234;
  __int128 v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  void *v239;
  __int128 v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD v243[3];
  void *v244;
  __int128 v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD v248[3];
  void *v249;
  __int128 v250;
  uint64_t v251;
  __int128 *v252;
  __int128 v253;
  uint64_t v254;
  void *v255;
  __int128 v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD v259[3];
  void *v260;
  __int128 v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  _BYTE v265[56];
  _BYTE v266[56];
  _BYTE v267[56];
  _BYTE v268[56];
  _BYTE v269[56];
  _BYTE v270[56];
  _BYTE v271[56];
  _BYTE v272[56];
  _BYTE v273[56];
  _BYTE v274[56];
  _BYTE v275[56];
  _BYTE v276[112];
  _BYTE v277[112];
  void *v278;
  __int128 v279;
  uint64_t v280;
  double *v281;
  double v282[4];
  float64x2_t v283;
  double v284;
  double v285;
  _QWORD v286[9];
  _QWORD v287[3];
  double v288;
  double v289;
  double v290;
  _QWORD v291[3];
  int64x2_t v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  _QWORD v296[6];

  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v296[3] = *MEMORY[0x1E0C80C00];
  v10 = fabs(*v2);
  v11 = fabs(v10 + -1.0) < 2.22044605e-16;
  if (v10 < 2.22044605e-16)
    v11 = 1;
  v12.i64[0] = *(_QWORD *)(v3 + 8);
  v12.i64[1] = *(_QWORD *)(v4 + 8);
  result = 0xFFFFFFFFLL;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v12, (int32x4_t)xmmword_18D319830)))) & 1) == 0
    && v11)
  {
    v14 = v8;
    v15 = v7;
    v16 = v6;
    v17 = v5;
    v18 = v4;
    v19 = v3;
    v20 = v2;
    v291[0] = &unk_1E25C2C38;
    v291[1] = 0;
    v292 = vdupq_n_s64(0x7FF8000000000000uLL);
    v291[2] = 0;
    *(double *)&v293 = NAN;
    v21 = (cnprint::CNPrinter *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)v5 + 48))(*(_QWORD *)v5, v9, v291);
    if ((_DWORD)v21)
    {
      if (cnprint::CNPrinter::GetLogLevel(v21) <= 1)
      {
        LOWORD(v218) = 12;
        LOBYTE(v213) = 1;
        v88 = *(double *)(v9 + 8) + (double)*(uint64_t *)v9;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v218, (unsigned __int8 *)&v213, "dyn_SixDOF, Could not get rategyro measurement at t, %.3lf", v22, v23, v24, v25, v26, SLOBYTE(v88));
      }
      return 0xFFFFFFFFLL;
    }
    v287[2] = 0;
    v287[0] = &unk_1E25C3050;
    v287[1] = 0;
    v27 = (cnprint::CNPrinter *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(**((_QWORD **)v17 + 1) + 48))(*((_QWORD *)v17 + 1), v9, v287);
    if ((_DWORD)v27)
    {
      if (cnprint::CNPrinter::GetLogLevel(v27) <= 1)
      {
        LOWORD(v218) = 12;
        LOBYTE(v213) = 1;
        v89 = *(double *)(v9 + 8) + (double)*(uint64_t *)v9;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v218, (unsigned __int8 *)&v213, "dyn_SixDOF, Could not get accelerometer measurement at t, %.3lf", v28, v29, v30, v31, v32, SLOBYTE(v89));
      }
      return 0xFFFFFFFFLL;
    }
    v33 = v17[3];
    if (v33 <= 0.0)
      return 0xFFFFFFFFLL;
    if (v17[4] <= 0.0)
      return 0xFFFFFFFFLL;
    v34 = v17[5];
    if (v34 <= 0.0)
      return 0xFFFFFFFFLL;
    if (((_QWORD)v17[6] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    if (((_QWORD)v17[7] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    if (((_QWORD)v17[8] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    if (((_QWORD)v17[9] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    if (((_QWORD)v17[10] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    if (((_QWORD)v17[11] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    if (((_QWORD)v17[12] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    v127 = v17[11];
    v128 = v17[12];
    v125 = v17[9];
    v126 = v17[10];
    v123 = v17[7];
    v124 = v17[8];
    v121 = v17[4];
    v122 = v17[6];
    v35 = v17[13];
    if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    v120 = v17[14];
    if ((*(_QWORD *)&v120 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0xFFFFFFFFLL;
    v36 = *(double **)(v19 + 32);
    v38 = v36[6];
    v37 = v36[7];
    v40 = v36[8];
    v39 = v36[9];
    v41 = sqrt(v37 * v37 + v38 * v38 + v40 * v40 + v39 * v39);
    if (fabs(v41) <= 0.000000015)
      return 0xFFFFFFFFLL;
    v42 = *((_QWORD *)v17 + 2);
    v43 = *((_QWORD *)v36 + 1);
    v44 = *((_QWORD *)v36 + 2);
    v109 = *((_QWORD *)v36 + 4);
    v110 = *((_QWORD *)v36 + 3);
    v107 = *v36;
    v108 = *((_QWORD *)v36 + 5);
    v111 = v36[10];
    v112 = v36[11];
    v113 = v36[12];
    v114 = v36[13];
    v115 = v36[14];
    v116 = v36[15];
    v117 = v36[16];
    v118 = v36[17];
    v119 = v36[18];
    *(double *)v296 = *v36;
    v296[1] = v43;
    v105 = v44;
    v106 = v43;
    v296[2] = v44;
    if ((*(unsigned int (**)(uint64_t, _QWORD *, __int128 *, _QWORD *))(*(_QWORD *)v42 + 48))(v42, v296, &v294, v286))
    {
      return 0xFFFFFFFFLL;
    }
    v45 = v38 / v41;
    v46 = v37 / v41;
    v47 = v40 / v41;
    v48 = v39 / v41;
    v49 = sqrt(v46 * v46 + v45 * v45 + v47 * v47 + v48 * v48);
    if (fabs(v49) >= 2.22044605e-16)
    {
      v51 = v45 / v49;
      v52 = v46 / v49;
      v53 = v47 / v49;
      v50 = v48 / v49;
    }
    else
    {
      v50 = 1.0;
      v51 = 0.0;
      v52 = 0.0;
      v53 = 0.0;
    }
    v283.f64[0] = v51;
    v283.f64[1] = v52;
    v284 = v53;
    v285 = v50;
    v280 = 0x100000004;
    v278 = &unk_1E25C7E50;
    v279 = xmmword_18D313090;
    v281 = v282;
    v282[0] = v38 / v41;
    v282[1] = v37 / v41;
    v282[2] = v40 / v41;
    v282[3] = v39 / v41;
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v283, (uint64_t)v277);
    sub_18D16606C((uint64_t)v277, (uint64_t)v276);
    v54 = *(double **)(v18 + 32);
    v101 = *v54;
    v102 = v54[1];
    v93 = v54[3];
    v94 = v54[4];
    v55 = v54[6];
    v56 = v54[7];
    v103 = v54[2];
    v104 = v54[8];
    v95 = v54[9];
    v96 = v54[5];
    v97 = v54[10];
    v98 = v54[11];
    v99 = v54[12];
    v100 = v54[13];
    v92 = v54[14];
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0x100000000;
    DWORD2(v222[0]) = 2;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v275);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0x400000003;
    DWORD2(v222[0]) = 5;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v274);
    v220 = 0x400000001;
    v218 = &off_1E25C6D10;
    v221 = v222;
    v219 = xmmword_18D319840;
    v222[0] = xmmword_18D319850;
    sub_18D1C89F8((uint64_t)v273, (uint64_t)&v218);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0xB0000000ALL;
    DWORD2(v222[0]) = 12;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v272);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0xE0000000DLL;
    DWORD2(v222[0]) = 15;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v271);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0x1100000010;
    DWORD2(v222[0]) = 18;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v270);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0x100000000;
    DWORD2(v222[0]) = 2;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v269);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0x400000003;
    DWORD2(v222[0]) = 5;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v268);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0x700000006;
    DWORD2(v222[0]) = 8;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v267);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0xA00000009;
    DWORD2(v222[0]) = 11;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v266);
    v220 = 0x300000001;
    v218 = (uint64_t (**)())&unk_1E25C6C50;
    v221 = v222;
    v219 = xmmword_18D314670;
    *(_QWORD *)&v222[0] = 0xD0000000CLL;
    DWORD2(v222[0]) = 14;
    sub_18D16169C((uint64_t)&v218, (uint64_t)v265);
    v91 = v292;
    v57 = -(v114 - v117 * v288) - v55;
    v90 = *(double *)&v293;
    v58 = -(v115 - v118 * v289) - v56;
    v59 = -(v116 - v119 * v290) - v104;
    v262 = 0x100000013;
    v260 = &unk_1E25C66B0;
    v263 = &v264;
    v261 = xmmword_18D319860;
    sub_18D04BE88((uint64_t)&v260, 0.0);
    v60 = v263;
    *v263 = v110;
    v60[1] = v109;
    v60[2] = v108;
    v257 = 0x100000003;
    v255 = &unk_1E25C7790;
    v256 = xmmword_18D313070;
    v258 = v259;
    *(double *)v259 = v57;
    *(double *)&v259[1] = v58;
    *(double *)&v259[2] = v59;
    v251 = 0x100000003;
    v249 = &unk_1E25C7790;
    v250 = xmmword_18D313070;
    v252 = &v253;
    v253 = v294;
    v254 = v295;
    v246 = 0x100000003;
    v244 = &unk_1E25C7790;
    v245 = xmmword_18D313070;
    v247 = v248;
    *(double *)v248 = v107;
    v248[1] = v106;
    v248[2] = v105;
    v241 = 0x100000003;
    v239 = &unk_1E25C7790;
    v240 = xmmword_18D313070;
    v242 = v243;
    v243[0] = v110;
    v243[1] = v109;
    v243[2] = v108;
    v236 = 0x100000003;
    v234 = &unk_1E25C7790;
    v237 = &v238;
    v235 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v234, 0.0);
    v237[2] = 0x3F131DA7D7CB8D5BLL;
    sub_18D192C7C((uint64_t)v276, (uint64_t)&v255, (uint64_t)v185);
    sub_18D1B2810((uint64_t)&v129, (uint64_t)v185, (uint64_t)&v249);
    v177 = 0x100000003;
    v175 = &unk_1E25C7790;
    v176 = xmmword_18D313070;
    v178 = &v179;
    sub_18D1CB7D0((uint64_t)&v234, (uint64_t)&v244, (uint64_t)&v175);
    v182 = 0x100000003;
    v180 = &unk_1E25C7790;
    v181 = xmmword_18D313070;
    v183 = &v184;
    sub_18D1CB7D0((uint64_t)&v234, (uint64_t)&v175, (uint64_t)&v180);
    v159 = 0x100000003;
    v157 = &unk_1E25C7790;
    v158 = xmmword_18D313070;
    v160 = v161;
    sub_18D0540FC((uint64_t)&v129, (uint64_t)&v180, (uint64_t)&v157);
    v152 = 0x100000003;
    v150 = &unk_1E25C7790;
    v151 = xmmword_18D313070;
    v153 = &v154;
    sub_18D1CB7D0((uint64_t)&v234, (uint64_t)&v239, (uint64_t)&v150);
    v61.f64[0] = 2.0;
    sub_18D1B27A8((uint64_t)&v150, (uint64_t)v174, v61);
    v215 = 0x100000003;
    v213 = &unk_1E25C7790;
    v214 = xmmword_18D313070;
    v216 = v217;
    sub_18D0540FC((uint64_t)&v157, (uint64_t)v174, (uint64_t)&v213);
    sub_18D1C9120((uint64_t)&v218, (uint64_t)&v260, (uint64_t)v274);
    sub_18D1BE7FC((uint64_t)&v218, (uint64_t)&v213);
    v231 = 0x100000003;
    v229 = &unk_1E25C7790;
    v230 = xmmword_18D313070;
    v232 = v233;
    v233[0] = *(double *)v91.i64 - v111 - v101;
    v233[1] = *(double *)&v91.i64[1] - v112 - v102;
    v233[2] = v90 - v113 - v103;
    sub_18D192C7C((uint64_t)v277, (uint64_t)&v234, (uint64_t)&v218);
    v226 = 0x100000003;
    v224 = &unk_1E25C7790;
    v225 = xmmword_18D313070;
    v227 = (double *)&v228;
    sub_18D0540FC((uint64_t)&v229, (uint64_t)&v218, (uint64_t)&v224);
    cnrotation::CNRotation::RotationDerivativeQuaternion((cnrotation::CNRotation *)&v283, *v227, v227[1], v227[2], (uint64_t)v223);
    v62 = v263;
    v63 = v223[1];
    *((_OWORD *)v263 + 3) = v223[0];
    *((_OWORD *)v62 + 4) = v63;
    *(double *)&v63 = -*v20;
    v64 = *(double *)&v63 / v33;
    v65 = *(double *)&v63 / v121;
    *((double *)v62 + 10) = v93 + v64 * (v111 - v122);
    *((double *)v62 + 11) = v94 + v64 * (v112 - v123);
    *((double *)v62 + 12) = v96 + v64 * (v113 - v124);
    *((double *)v62 + 13) = v95 + *(double *)&v63 / v121 * (v114 - v125);
    *((double *)v62 + 14) = v97 + *(double *)&v63 / v121 * (v115 - v126);
    *((double *)v62 + 15) = v98 + *(double *)&v63 / v121 * (v116 - v127);
    v66 = *(double *)&v63 / v34;
    *((double *)v62 + 16) = v99 + v66 * (v117 - v128);
    *((double *)v62 + 17) = v100 + v66 * (v118 - v35);
    *((double *)v62 + 18) = v92 + v66 * (v119 - v120);
    sub_18D053AA8(v16, (uint64_t)&v260);
    v220 = 0x1300000013;
    v218 = (uint64_t (**)())&unk_1E25C6680;
    v221 = v222;
    v219 = xmmword_18D319870;
    sub_18D04BE88((uint64_t)&v218, 0.0);
    v215 = 0xF00000013;
    v213 = &unk_1E25C6620;
    v216 = v217;
    v214 = xmmword_18D319880;
    sub_18D04BE88((uint64_t)&v213, 0.0);
    v67 = HIDWORD(v219);
    v68 = v221;
    *((_QWORD *)v221 + 3 * HIDWORD(v219)) = 0x3FF0000000000000;
    *((_QWORD *)v68 + ((4 * v67) | 1)) = 0x3FF0000000000000;
    *((_QWORD *)v68 + 5 * v67 + 2) = 0x3FF0000000000000;
    v210 = 0x300000003;
    v208 = &unk_1E25C78E0;
    v212[0] = v286[0];
    v212[1] = v286[3];
    v212[6] = v286[2];
    v212[7] = v286[5];
    v212[3] = v286[1];
    v212[2] = v286[6];
    v209 = xmmword_18D30BB60;
    v211 = v212;
    v212[4] = v286[4];
    v212[5] = v286[7];
    v212[8] = v286[8];
    v205 = 0x300000003;
    v203 = &unk_1E25C78E0;
    v206 = &v207;
    v204 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v203, 0.0);
    v69 = v206;
    *v206 = 0xBE36D6A597D265B0;
    v69[SHIDWORD(v204) + 1] = 0xBE36D6A597D265B0;
    v131 = 0x300000003;
    v129 = &unk_1E25C78E0;
    v130 = xmmword_18D30BB60;
    v132 = v133;
    sub_18D0540FC((uint64_t)&v208, (uint64_t)&v203, (uint64_t)&v129);
    sub_18D04F764((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, (uint64_t)v275);
    sub_18D16171C((uint64_t)&v157, (uint64_t)&v129);
    v200 = 0x300000003;
    v198 = &unk_1E25C78E0;
    v201 = &v202;
    v199 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v198, 0.0);
    v70 = v201;
    v201[SHIDWORD(v199)] = 0xBF231DA7D7CB8D5BLL;
    v70[1] = 0x3F231DA7D7CB8D5BLL;
    v131 = 0x300000003;
    v129 = &unk_1E25C78E0;
    v130 = xmmword_18D30BB60;
    v132 = v133;
    sub_18D054E78((uint64_t)&v198, (uint64_t)&v129);
    sub_18D04F764((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, (uint64_t)v274);
    sub_18D16171C((uint64_t)&v157, (uint64_t)&v129);
    cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v283, (uint64_t)&v157);
    sub_18D16606C((uint64_t)&v157, (uint64_t)v197);
    cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v283, (uint64_t)&v157);
    sub_18D16606C((uint64_t)&v157, (uint64_t)v196);
    cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v283, (uint64_t)&v157);
    sub_18D16606C((uint64_t)&v157, (uint64_t)v195);
    cnrotation::CNRotation::dRdq4(&v283, (uint64_t)&v157);
    sub_18D16606C((uint64_t)&v157, (uint64_t)v194);
    sub_18D192C7C((uint64_t)v197, (uint64_t)&v255, (uint64_t)&v129);
    sub_18D1BE8F8((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, 6);
    sub_18D16182C((uint64_t)&v157, (uint64_t)&v129);
    sub_18D192C7C((uint64_t)v196, (uint64_t)&v255, (uint64_t)&v129);
    sub_18D1BE8F8((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, 7);
    sub_18D16182C((uint64_t)&v157, (uint64_t)&v129);
    sub_18D192C7C((uint64_t)v195, (uint64_t)&v255, (uint64_t)&v129);
    sub_18D1BE8F8((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, 8);
    sub_18D16182C((uint64_t)&v157, (uint64_t)&v129);
    sub_18D192C7C((uint64_t)v194, (uint64_t)&v255, (uint64_t)&v129);
    sub_18D1BE8F8((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, 9);
    sub_18D16182C((uint64_t)&v157, (uint64_t)&v129);
    sub_18D1BE948(3u, 3u, (uint64_t)&v157);
    v191 = 0x300000003;
    v189 = &unk_1E25C78E0;
    v190 = xmmword_18D30BB60;
    v192 = &v193;
    sub_18D054E78((uint64_t)&v157, (uint64_t)&v189);
    sub_18D166008((uint64_t)v276, (uint64_t)&v189, (uint64_t)&v129);
    sub_18D04F764((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, (uint64_t)v271);
    sub_18D16171C((uint64_t)&v157, (uint64_t)&v129);
    sub_18D1BE948(3u, 3u, (uint64_t)v186);
    v71 = v188;
    *v188 = v288;
    v72 = v187;
    v71[v187 + 1] = v289;
    v71[2 * v72 + 2] = v290;
    sub_18D166008((uint64_t)v276, (uint64_t)v186, (uint64_t)&v129);
    sub_18D04F764((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, (uint64_t)v270);
    sub_18D16171C((uint64_t)&v157, (uint64_t)&v129);
    v73.f64[0] = *v227;
    cnrotation::CNRotation::Q(v73, v227[1], v227[2], (uint64_t)v185);
    cnrotation::CNRotation::dQdwx((uint64_t)&v180);
    cnrotation::CNRotation::dQdwy((uint64_t)&v175);
    cnrotation::CNRotation::dQdwz((uint64_t)v174);
    sub_18D16606C((uint64_t)v197, (uint64_t)v173);
    sub_18D16606C((uint64_t)v196, (uint64_t)v172);
    sub_18D16606C((uint64_t)v195, (uint64_t)v171);
    sub_18D16606C((uint64_t)v194, (uint64_t)v170);
    v159 = 0x300000003;
    v157 = &unk_1E25C78E0;
    v158 = xmmword_18D30BB60;
    v160 = v161;
    sub_18D054E78((uint64_t)v173, (uint64_t)&v157);
    sub_18D192C7C((uint64_t)&v157, (uint64_t)&v234, (uint64_t)v168);
    v159 = 0x300000003;
    v157 = &unk_1E25C78E0;
    v158 = xmmword_18D30BB60;
    v160 = v161;
    sub_18D054E78((uint64_t)v172, (uint64_t)&v157);
    sub_18D192C7C((uint64_t)&v157, (uint64_t)&v234, (uint64_t)v166);
    v159 = 0x300000003;
    v157 = &unk_1E25C78E0;
    v158 = xmmword_18D30BB60;
    v160 = v161;
    sub_18D054E78((uint64_t)v171, (uint64_t)&v157);
    sub_18D192C7C((uint64_t)&v157, (uint64_t)&v234, (uint64_t)v164);
    v159 = 0x300000003;
    v157 = &unk_1E25C78E0;
    v158 = xmmword_18D30BB60;
    v160 = v161;
    sub_18D054E78((uint64_t)v170, (uint64_t)&v157);
    sub_18D192C7C((uint64_t)&v157, (uint64_t)&v234, (uint64_t)v162);
    sub_18D1C920C((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, (uint64_t)v273);
    sub_18D1C8A7C((uint64_t)&v157, (uint64_t)v185);
    sub_18D1C8BFC((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, 6);
    v74.f64[0] = *v169;
    v146 = 0x400000004;
    v144 = &unk_1E25C7FA0;
    v145 = xmmword_18D313080;
    v147 = v148;
    v75 = sub_18D1C94E0((uint64_t)&v180, (uint64_t)&v144, v74);
    v75.f64[0] = v169[1];
    v141 = 0x400000004;
    v139 = &unk_1E25C7FA0;
    v140 = xmmword_18D313080;
    v142 = v143;
    sub_18D1C94E0((uint64_t)&v175, (uint64_t)&v139, v75);
    sub_18D1C8CB4((uint64_t)v149, (uint64_t)&v144, (uint64_t)&v139);
    v76.f64[0] = v169[2];
    v136 = 0x400000004;
    v134 = &unk_1E25C7FA0;
    v135 = xmmword_18D313080;
    v137 = v138;
    sub_18D1C94E0((uint64_t)v174, (uint64_t)&v134, v76);
    sub_18D1C8CB4((uint64_t)&v150, (uint64_t)v149, (uint64_t)&v134);
    sub_18D1C8C4C((uint64_t)&v150, (uint64_t)&v278, (uint64_t)v155);
    sub_18D1C8B8C((uint64_t)v156, (uint64_t)&v157, (uint64_t)v155);
    sub_18D1C8BFC((uint64_t)&v129, (uint64_t)&v218, (uint64_t)v273, 6);
    sub_18D1C8D20((uint64_t)&v129, (uint64_t)v156);
    sub_18D1C8BFC((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, 7);
    v77.f64[0] = *v167;
    v146 = 0x400000004;
    v144 = &unk_1E25C7FA0;
    v145 = xmmword_18D313080;
    v147 = v148;
    v78 = sub_18D1C94E0((uint64_t)&v180, (uint64_t)&v144, v77);
    v78.f64[0] = v167[1];
    v141 = 0x400000004;
    v139 = &unk_1E25C7FA0;
    v140 = xmmword_18D313080;
    v142 = v143;
    sub_18D1C94E0((uint64_t)&v175, (uint64_t)&v139, v78);
    sub_18D1C8CB4((uint64_t)v149, (uint64_t)&v144, (uint64_t)&v139);
    v79.f64[0] = v167[2];
    v136 = 0x400000004;
    v134 = &unk_1E25C7FA0;
    v135 = xmmword_18D313080;
    v137 = v138;
    sub_18D1C94E0((uint64_t)v174, (uint64_t)&v134, v79);
    sub_18D1C8CB4((uint64_t)&v150, (uint64_t)v149, (uint64_t)&v134);
    sub_18D1C8C4C((uint64_t)&v150, (uint64_t)&v278, (uint64_t)v155);
    sub_18D1C8B8C((uint64_t)v156, (uint64_t)&v157, (uint64_t)v155);
    sub_18D1C8BFC((uint64_t)&v129, (uint64_t)&v218, (uint64_t)v273, 7);
    sub_18D1C8D20((uint64_t)&v129, (uint64_t)v156);
    sub_18D1C8BFC((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, 8);
    v80.f64[0] = *v165;
    v146 = 0x400000004;
    v144 = &unk_1E25C7FA0;
    v145 = xmmword_18D313080;
    v147 = v148;
    v81 = sub_18D1C94E0((uint64_t)&v180, (uint64_t)&v144, v80);
    v81.f64[0] = v165[1];
    v141 = 0x400000004;
    v139 = &unk_1E25C7FA0;
    v140 = xmmword_18D313080;
    v142 = v143;
    sub_18D1C94E0((uint64_t)&v175, (uint64_t)&v139, v81);
    sub_18D1C8CB4((uint64_t)v149, (uint64_t)&v144, (uint64_t)&v139);
    v82.f64[0] = v165[2];
    v136 = 0x400000004;
    v134 = &unk_1E25C7FA0;
    v135 = xmmword_18D313080;
    v137 = v138;
    sub_18D1C94E0((uint64_t)v174, (uint64_t)&v134, v82);
    sub_18D1C8CB4((uint64_t)&v150, (uint64_t)v149, (uint64_t)&v134);
    sub_18D1C8C4C((uint64_t)&v150, (uint64_t)&v278, (uint64_t)v155);
    sub_18D1C8B8C((uint64_t)v156, (uint64_t)&v157, (uint64_t)v155);
    sub_18D1C8BFC((uint64_t)&v129, (uint64_t)&v218, (uint64_t)v273, 8);
    sub_18D1C8D20((uint64_t)&v129, (uint64_t)v156);
    sub_18D1C8BFC((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, 9);
    v83.f64[0] = *v163;
    v146 = 0x400000004;
    v144 = &unk_1E25C7FA0;
    v145 = xmmword_18D313080;
    v147 = v148;
    v84 = sub_18D1C94E0((uint64_t)&v180, (uint64_t)&v144, v83);
    v84.f64[0] = v163[1];
    v141 = 0x400000004;
    v139 = &unk_1E25C7FA0;
    v140 = xmmword_18D313080;
    v142 = v143;
    sub_18D1C94E0((uint64_t)&v175, (uint64_t)&v139, v84);
    sub_18D1C8CB4((uint64_t)v149, (uint64_t)&v144, (uint64_t)&v139);
    v85.f64[0] = v163[2];
    v136 = 0x400000004;
    v134 = &unk_1E25C7FA0;
    v135 = xmmword_18D313080;
    v137 = v138;
    sub_18D1C94E0((uint64_t)v174, (uint64_t)&v134, v85);
    sub_18D1C8CB4((uint64_t)&v150, (uint64_t)v149, (uint64_t)&v134);
    sub_18D1C8C4C((uint64_t)&v150, (uint64_t)&v278, (uint64_t)v155);
    sub_18D1C8B8C((uint64_t)v156, (uint64_t)&v157, (uint64_t)v155);
    sub_18D1C8BFC((uint64_t)&v129, (uint64_t)&v218, (uint64_t)v273, 9);
    sub_18D1C8D20((uint64_t)&v129, (uint64_t)v156);
    v131 = 0x400000004;
    v129 = &unk_1E25C7FA0;
    v130 = xmmword_18D313080;
    v132 = v133;
    sub_18D054E78((uint64_t)&v180, (uint64_t)&v129);
    sub_18D1C8C4C((uint64_t)&v129, (uint64_t)&v278, (uint64_t)&v150);
    sub_18D1C8BFC((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, 10);
    sub_18D1C8D20((uint64_t)&v157, (uint64_t)&v150);
    v131 = 0x400000004;
    v129 = &unk_1E25C7FA0;
    v130 = xmmword_18D313080;
    v132 = v133;
    sub_18D054E78((uint64_t)&v175, (uint64_t)&v129);
    sub_18D1C8C4C((uint64_t)&v129, (uint64_t)&v278, (uint64_t)&v150);
    sub_18D1C8BFC((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, 11);
    sub_18D1C8D20((uint64_t)&v157, (uint64_t)&v150);
    v131 = 0x400000004;
    v129 = &unk_1E25C7FA0;
    v130 = xmmword_18D313080;
    v132 = v133;
    sub_18D054E78((uint64_t)v174, (uint64_t)&v129);
    sub_18D1C8C4C((uint64_t)&v129, (uint64_t)&v278, (uint64_t)&v150);
    sub_18D1C8BFC((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, 12);
    sub_18D1C8D20((uint64_t)&v157, (uint64_t)&v150);
    v86 = HIDWORD(v219);
    v87 = (double *)v221;
    *(double *)&v221[5 * HIDWORD(v219) + 5] = v64;
    v87[11 * v86 + 11] = v64;
    v87[12 * v86 + 12] = v64;
    v87[13 * v86 + 13] = v65;
    v87[14 * v86 + 14] = v65;
    v87[15 * v86 + 15] = v65;
    v87[16 * v86 + 16] = v66;
    v87[17 * v86 + 17] = v66;
    v87[18 * v86 + 18] = v66;
    sub_18D053AA8(v15, (uint64_t)&v218);
    sub_18D1C9578((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v273, (uint64_t)v272);
    sub_18D1C9578((uint64_t)&v129, (uint64_t)&v213, (uint64_t)v273, (uint64_t)v269);
    sub_18D1C8E30((uint64_t)&v129, (uint64_t)&v157);
    sub_18D1BE948(3u, 3u, (uint64_t)&v129);
    sub_18D04F764((uint64_t)&v157, (uint64_t)&v213, (uint64_t)v272, (uint64_t)v268);
    sub_18D16171C((uint64_t)&v157, (uint64_t)&v129);
    sub_18D04F764((uint64_t)&v157, (uint64_t)&v218, (uint64_t)v274, (uint64_t)v271);
    sub_18D04F764((uint64_t)&v129, (uint64_t)&v213, (uint64_t)v274, (uint64_t)v267);
    sub_18D1C8F40((uint64_t)&v129, (uint64_t)&v157);
    sub_18D1BE948(3u, 3u, (uint64_t)&v129);
    sub_18D04F764((uint64_t)&v157, (uint64_t)&v213, (uint64_t)v271, (uint64_t)v266);
    sub_18D16171C((uint64_t)&v157, (uint64_t)&v129);
    sub_18D1BE948(3u, 3u, (uint64_t)&v129);
    sub_18D04F764((uint64_t)&v157, (uint64_t)&v213, (uint64_t)v270, (uint64_t)v265);
    sub_18D16171C((uint64_t)&v157, (uint64_t)&v129);
    sub_18D053AA8(v14, (uint64_t)&v213);
    return 0;
  }
  return result;
}

uint64_t sub_18D18FCC0(uint64_t a1, uint64_t a2)
{
  double v2;
  BOOL v3;
  BOOL v4;

  v2 = *(double *)(a2 + 440);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && v2 >= 0.0
    && ((*(double *)(a1 + 5944) = v2, *(_DWORD *)(a2 + 16) == 4) ? (v3 = *(_DWORD *)(a2 + 20) == 4) : (v3 = 0),
        v3 ? (v4 = *(_BYTE *)(a2 + 40) == 0) : (v4 = 0),
        v4))
  {
    return sub_18D1C1A28(a1, (int *)a2);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

_QWORD *sub_18D18FD08(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D18FD1C(uint64_t a1, char *__filename)
{
  FILE *v3;
  FILE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 8) = 0;
  v3 = fopen(__filename, "r");
  if (!v3)
    return 0xFFFFFFFFLL;
  v4 = v3;
  *(_BYTE *)(a1 + 8) = 1;
  v5 = -504;
  v6 = 40;
  while (fscanf(v4, "%u %u %lg %lg %lg %lg\n", a1 + v6, a1 + v6 + 252, a1 + v5 + 1048, a1 + v5 + 1552, a1 + v5 + 2056, a1 + v5 + 2560) == 6)
  {
    v6 += 4;
    v5 += 8;
    if (!v5)
    {
      v7 = 0;
      goto LABEL_8;
    }
  }
  *(_BYTE *)(a1 + 8) = 0;
  v7 = 0xFFFFFFFFLL;
LABEL_8:
  fclose(v4);
  return v7;
}

uint64_t sub_18D18FDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v7 = 0;
  v8 = 2;
  v9 = 3;
  while (2)
  {
    v10 = 0;
    v11 = v7;
    if (v7 >= 0x3F)
      v12 = 63;
    else
      v12 = v7;
    v13 = -v12;
    v14 = (_QWORD *)(a1 + 1048 + 8 * v7);
    v15 = v13 + 63;
    v16 = a1 + 8 * v7;
    v17 = (_DWORD *)(a1 + 292 + 4 * v7);
    v18 = a7 + 8 * v7;
    v19 = a6 + 8 * v7;
    v20 = a5 + 8 * v7;
    v21 = a4 + 8 * v7;
    v22 = a3 + 4 * v7;
    v23 = a2 + 4 * v7;
    do
    {
      if (v15 == (_DWORD)v10)
        return 0xFFFFFFFFLL;
      if (*(_DWORD *)(v23 + 4 * v10) != v8)
        return 0xFFFFFFFFLL;
      if ((_DWORD)v10 != *(_DWORD *)(v22 + 4 * v10))
        return 0xFFFFFFFFLL;
      v24 = *(_QWORD *)(v21 + 8 * v10);
      if ((v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)(v20 + 8 * v10) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)(v19 + 8 * v10) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        return 0xFFFFFFFFLL;
      }
      v25 = 0xFFFFFFFFLL;
      if ((*(_QWORD *)(v18 + 8 * v10) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || *(double *)(v19 + 8 * v10) < 0.0
        || *(double *)(v18 + 8 * v10) < 0.0)
      {
        return v25;
      }
      *(v17 - 63) = v8;
      *(_QWORD *)(v16 + 8 * v10 + 544) = v24;
      v26 = *(_DWORD *)(v22 + 4 * v10);
      *v14 = *(_QWORD *)(v20 + 8 * v10);
      v14[63] = *(_QWORD *)(v19 + 8 * v10);
      v27 = *(_QWORD *)(v18 + 8 * v10);
      *v17++ = v26;
      v14[126] = v27;
      ++v10;
      ++v14;
    }
    while (v9 != (_DWORD)v10);
    v7 = v11 + v10;
    ++v8;
    if (++v9 != 12)
      continue;
    break;
  }
  v25 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return v25;
}

__n128 sub_18D18FF64(uint64_t a1, double *a2)
{
  __n128 result;
  double v5[2];

  v5[0] = 0.0;
  v5[1] = 0.0;
  if (!sub_18D03FE4C(a2, v5))
  {
    result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  }
  return result;
}

__n128 sub_18D18FFB4(uint64_t a1, double *a2)
{
  __n128 result;
  double v5[2];

  v5[0] = 0.0;
  v5[1] = 0.0;
  if (!sub_18D03FE4C(a2, v5))
  {
    result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  }
  return result;
}

double raven::RavenPNTEstimator::GetHDOP(raven::RavenPNTEstimator *this)
{
  return *((double *)this + 2406);
}

double raven::RavenPNTEstimator::GetPSRPostFitResidualsBasedHorizontalPositionMisclosure(raven::RavenPNTEstimator *this)
{
  return *((double *)this + 2404);
}

double raven::RavenPNTEstimator::GetFailureProbability(raven::RavenPNTEstimator *this)
{
  uint64_t v1;

  v1 = 16;
  if (!*((_DWORD *)this + 4846))
    v1 = 8;
  return *(double *)((char *)this + v1 + 19360);
}

uint64_t sub_18D190038(uint64_t a1, double *a2, uint64_t a3, double a4, int8x16_t a5)
{
  int v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  double v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int8x16_t v32;
  uint64_t v33;
  double v34;
  double v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  __n128 v39;
  int8x16_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _BOOL4 v46;
  double v47;
  _BOOL4 v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  double v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  unsigned int v64;
  double v65;
  double v66;
  uint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint64_t v70;
  double v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  _OWORD *v79;
  uint64_t v80;
  int8x16_t v81;
  uint64_t v82;
  unsigned int v83;
  double v84;
  double v85;
  uint64_t v86;
  int8x16_t v87;
  int8x16_t v88;
  uint64_t v89;
  double v90;
  int8x16_t v91;
  uint64_t v92;
  double v93;
  unint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  _OWORD *v97;
  uint64_t v98;
  int8x16_t v99;
  double v100;
  int8x16_t v101;
  int8x16_t v102;
  double v103;
  int8x16_t v104;
  int8x16_t v105;
  double v106;
  double *v107;
  double *v108;
  double *v109;
  int8x16_t v110;
  int8x16_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  int8x16_t v122;
  int8x16_t v123;
  void *v124;
  int8x16_t v125;
  int8x16_t v126;
  uint64_t v127;
  _BYTE v128[24];
  int8x16_t v129;
  uint64_t v130;
  int8x16_t v131;
  double v132[4];

  v5 = *(_DWORD *)(a1 + 8);
  if (!v5)
    return 0xFFFFFFFFLL;
  if (v5 == 1)
  {
    v9 = a1 + 48 * *(unsigned int *)(a1 + 40);
    v10 = *(void **)(v9 + 56);
    v11 = *(_QWORD *)(v9 + 64);
    *(_OWORD *)v128 = *(_OWORD *)(v9 + 72);
    *(_QWORD *)&v128[16] = *(_QWORD *)(v9 + 88);
    v124 = v10;
    v125.i64[0] = v11;
    v12 = CNTimeSpan::operator-((uint64_t)&v124, a2, *(int8x16_t *)v128, a5);
    v131.i64[0] = v12;
    *(double *)&v131.i64[1] = v13;
    if (v12 < 0 || (*(double *)v14.i64 = v13, v13 < 0.0))
      v12 = CNTimeSpan::operator-((double *)v131.i64, v14, v15);
    *(_QWORD *)&v132[0] = v12;
    v132[1] = v13;
    if (!sub_18D03F608(v132, (double *)(a1 + 16)))
    {
      result = 0;
      *(_QWORD *)(a3 + 8) = v10;
      *(_QWORD *)(a3 + 16) = v11;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)v128;
      *(_QWORD *)(a3 + 40) = *(_QWORD *)&v128[16];
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  v17 = a1 + 48 + 48 * *(unsigned int *)(a1 + 40);
  *(_QWORD *)v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  *(_QWORD *)&v128[8] = v18;
  v21 = CNTimeSpan::operator-((uint64_t)a2, v128, v19, v20);
  v23 = llround(*(double *)(a1 + 32) * (v22 + (double)v21));
  v24 = v23 & ~(v23 >> 31);
  v25 = *(_DWORD *)(a1 + 8);
  v26 = v25 - 1;
  if (v24 < v25 - 1)
    v26 = v24;
  v27 = *(_DWORD *)(a1 + 40);
  v28 = (v26 + v27) % 0x15E;
  *(_QWORD *)v128 = &unk_1E25C2C38;
  v29 = a1 + 48 + 48 * v28;
  *(_OWORD *)&v128[8] = *(_OWORD *)(v29 + 8);
  v129 = *(int8x16_t *)(v29 + 24);
  v130 = *(_QWORD *)(v29 + 40);
  v124 = &unk_1E25C2C38;
  v115 = a3;
  if (v28 == v27)
  {
    v30 = (v27 + 1) % v25;
    goto LABEL_20;
  }
  if (v28 == *(_DWORD *)(a1 + 44))
  {
    if (v28)
      v25 = (v26 + v27) % 0x15E;
LABEL_19:
    v30 = v25 - 1;
    goto LABEL_20;
  }
  *(_OWORD *)v132 = *(_OWORD *)&v128[8];
  if (sub_18D03F608(v132, a2) || v28 == *(_DWORD *)(a1 + 44))
  {
    v25 = v28;
    if (!v28)
      v25 = *(_DWORD *)(a1 + 8);
    goto LABEL_19;
  }
  v30 = (v28 + 1) % *(_DWORD *)(a1 + 8);
LABEL_20:
  v114 = v30;
  v31 = a1 + 48 * v30;
  v32 = *(int8x16_t *)(v31 + 72);
  v125 = *(int8x16_t *)(v31 + 56);
  v126 = v32;
  v127 = *(_QWORD *)(v31 + 88);
  v131 = v125;
  *(_OWORD *)v132 = *(_OWORD *)&v128[8];
  v33 = CNTimeSpan::operator-((uint64_t)a2, v132, v125, v32);
  v35 = v34;
  v123.i64[0] = v33;
  *(double *)&v123.i64[1] = v34;
  v38 = CNTimeSpan::operator-((uint64_t)a2, &v131, v36, v37);
  v42 = v41;
  v122.i64[0] = v38;
  *(double *)&v122.i64[1] = v41;
  v43 = v35;
  v44 = v41;
  v46 = v35 < 0.0 || v33 < 0;
  v116 = v33;
  if (v46)
  {
    v116 = CNTimeSpan::operator-((double *)v123.i64, (int8x16_t)v39, v40);
    v35 = v47;
  }
  v117 = (uint64_t)a2;
  v49 = v44 < 0.0 || v38 < 0;
  v118 = v38;
  if (v49)
  {
    v118 = CNTimeSpan::operator-((double *)v122.i64, (int8x16_t)v39, v40);
    v42 = v50;
  }
  v51 = v33;
  if (v46)
  {
    v51 = CNTimeSpan::operator-((double *)v123.i64, (int8x16_t)v39, v40);
    v43 = v52;
  }
  v53 = v38;
  if (v49)
  {
    v53 = CNTimeSpan::operator-((double *)v122.i64, (int8x16_t)v39, v40);
    v44 = v54;
  }
  if (!v51 && (*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || !v53 && (*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (v55 = v51 <= v53, v51 == v53))
  {
    v55 = v43 <= v44;
  }
  v57 = v116;
  v56 = v117;
  if (!v55)
  {
    v125 = *(int8x16_t *)&v128[8];
    v126 = v129;
    v127 = v130;
    v58 = *(int8x16_t *)(v31 + 72);
    *(_OWORD *)&v128[8] = *(_OWORD *)(v31 + 56);
    v129 = v58;
    v130 = *(_QWORD *)(v31 + 88);
    v131 = v125;
    *(_OWORD *)v132 = *(_OWORD *)&v128[8];
    v59 = v122;
    v39 = (__n128)v123;
    v121 = (__n128)v123;
    v122 = v123;
    v123 = v59;
    v33 = v59.i64[0];
    if (v59.i64[0] < 0 || (v39.n128_u64[0] = v123.u64[1], *(double *)&v123.i64[1] < 0.0))
    {
      v57 = CNTimeSpan::operator-((double *)v123.i64, (int8x16_t)v39, v59);
      v35 = v60;
    }
    else
    {
      v35 = *(double *)&v123.i64[1];
      v57 = v59.i64[0];
    }
    v38 = v122.i64[0];
    if (v122.i64[0] < 0 || (v39.n128_u64[0] = v122.u64[1], *(double *)&v122.i64[1] < 0.0))
    {
      v118 = CNTimeSpan::operator-((double *)v122.i64, (int8x16_t)v39, v59);
      v42 = v61;
    }
    else
    {
      v42 = *(double *)&v122.i64[1];
      v118 = v122.i64[0];
    }
    v28 = v114;
  }
  v62 = v35;
  v63 = v42;
  if (v28 == *(_DWORD *)(a1 + 44))
    goto LABEL_57;
  if (v33)
  {
    if (v33 < 1)
      goto LABEL_57;
  }
  else
  {
    v39.n128_u64[0] = v123.u64[1];
    if (*(double *)&v123.i64[1] <= 0.0)
      goto LABEL_57;
  }
  if (v38)
  {
    if (v38 < 1)
      goto LABEL_57;
    goto LABEL_73;
  }
  v39.n128_u64[0] = v122.u64[1];
  if (*(double *)&v122.i64[1] > 0.0)
  {
LABEL_73:
    v64 = (v28 + 1) % 0x15E;
    v66 = v132[1];
    v65 = v132[0];
    while (1)
    {
      v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48 * v64 + 48) + 16))(a1 + 48 * v64 + 48);
      v120 = v67;
      v70 = CNTimeSpan::operator-(v117, &v119, v68, v69);
      v74 = v70;
      v121.n128_u64[0] = v70;
      v121.n128_f64[1] = v71;
      v75 = v71;
      if (v70 < 0 || (*(double *)v72.i64 = v71, v71 < 0.0))
      {
        v70 = CNTimeSpan::operator-(v121.n128_f64, v72, v73);
        v72.i64[0] = v76;
      }
      if (v70 || (v72.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if ((v57 || (*(_QWORD *)&v62 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v70 != v57)
        {
          if (v70 < v57)
            goto LABEL_93;
        }
        else if (v62 > *(double *)v72.i64)
        {
          goto LABEL_93;
        }
        if ((v70 || (v72.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (v118 || (*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && v70 != v118)
        {
          if (v70 >= v118)
            goto LABEL_95;
          goto LABEL_99;
        }
      }
      else if (v62 > *(double *)v72.i64)
      {
LABEL_93:
        v125 = *(int8x16_t *)&v128[8];
        v126 = v129;
        v127 = v130;
        v77 = a1 + 48 * v64;
        v78 = *(int8x16_t *)(v77 + 72);
        *(_OWORD *)&v128[8] = *(_OWORD *)(v77 + 56);
        v129 = v78;
        v130 = *(_QWORD *)(v77 + 88);
        v65 = *(double *)&v128[8];
        v66 = *(double *)&v128[16];
        v79 = &v123;
        v122 = v123;
        v118 = v57;
        v63 = v62;
        v57 = v70;
        v62 = *(double *)v72.i64;
        goto LABEL_100;
      }
      if (v63 <= *(double *)v72.i64)
      {
LABEL_95:
        if (v74)
        {
          if ((v74 & 0x8000000000000000) == 0)
            goto LABEL_104;
        }
        else if (v75 >= 0.0)
        {
          goto LABEL_104;
        }
      }
LABEL_99:
      v80 = a1 + 48 * v64;
      v81 = *(int8x16_t *)(v80 + 72);
      v125 = *(int8x16_t *)(v80 + 56);
      v126 = v81;
      v127 = *(_QWORD *)(v80 + 88);
      v79 = &v122;
      v118 = v70;
      v63 = *(double *)v72.i64;
LABEL_100:
      *v79 = v121;
      if (v74)
      {
        if (v74 < 0)
          goto LABEL_108;
      }
      else if (v75 < 0.0)
      {
        goto LABEL_108;
      }
LABEL_104:
      if (v64 == 349)
        v64 = 0;
      else
        ++v64;
      if (v64 == *(_DWORD *)(a1 + 44))
      {
LABEL_108:
        v132[0] = v65;
        v132[1] = v66;
        goto LABEL_149;
      }
    }
  }
LABEL_57:
  if (v28 == *(_DWORD *)(a1 + 40))
    goto LABEL_149;
  if (v33)
  {
    if ((v33 & 0x8000000000000000) == 0)
      goto LABEL_150;
  }
  else
  {
    v39.n128_u64[0] = v123.u64[1];
    if (*(double *)&v123.i64[1] >= 0.0)
      goto LABEL_149;
  }
  if (v38)
  {
    if ((v38 & 0x8000000000000000) == 0)
      goto LABEL_149;
  }
  else
  {
    v39.n128_u64[0] = v122.u64[1];
    if (*(double *)&v122.i64[1] >= 0.0)
      goto LABEL_149;
  }
  v82 = v57;
  if (v28)
    v83 = v28 - 1;
  else
    v83 = 349;
  v84 = v132[1];
  v85 = v132[0];
  do
  {
    v119 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)(a1 + 48 * v83 + 48) + 16))(a1 + 48 * v83 + 48, v39);
    v120 = v86;
    v89 = CNTimeSpan::operator-(v117, &v119, v87, v88);
    v92 = v89;
    v121.n128_u64[0] = v89;
    v121.n128_f64[1] = v90;
    v93 = v90;
    if (v89 < 0 || (v39.n128_f64[0] = v90, v90 < 0.0))
    {
      v89 = CNTimeSpan::operator-(v121.n128_f64, (int8x16_t)v39, v91);
      v39.n128_u64[0] = v94;
    }
    if (v89 || (v39.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
    {
      if ((v82 || (*(_QWORD *)&v62 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v89 != v82)
      {
        if (v89 < v82)
          goto LABEL_133;
      }
      else if (v62 > v39.n128_f64[0])
      {
        goto LABEL_133;
      }
      if ((v89 || (v39.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
        && (v118 || (*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        && v89 != v118)
      {
        if (v89 >= v118)
          goto LABEL_135;
        goto LABEL_139;
      }
    }
    else if (v62 > v39.n128_f64[0])
    {
LABEL_133:
      v125 = *(int8x16_t *)&v128[8];
      v126 = v129;
      v127 = v130;
      v95 = a1 + 48 * v83;
      v96 = *(int8x16_t *)(v95 + 72);
      *(_OWORD *)&v128[8] = *(_OWORD *)(v95 + 56);
      v129 = v96;
      v130 = *(_QWORD *)(v95 + 88);
      v85 = *(double *)&v128[8];
      v84 = *(double *)&v128[16];
      v97 = &v123;
      v122 = v123;
      v118 = v82;
      v63 = v62;
      v82 = v89;
      v62 = v39.n128_f64[0];
      goto LABEL_140;
    }
    if (v63 <= v39.n128_f64[0])
    {
LABEL_135:
      if (v92)
      {
        if (v92 < 1)
          goto LABEL_144;
      }
      else if (v93 <= 0.0)
      {
        goto LABEL_143;
      }
    }
LABEL_139:
    v98 = a1 + 48 * v83;
    v99 = *(int8x16_t *)(v98 + 72);
    v125 = *(int8x16_t *)(v98 + 56);
    v126 = v99;
    v127 = *(_QWORD *)(v98 + 88);
    v97 = &v122;
    v118 = v89;
    v63 = v39.n128_f64[0];
LABEL_140:
    v39 = v121;
    *v97 = v121;
    if (v92)
    {
      if (v92 > 0)
        break;
      goto LABEL_144;
    }
LABEL_143:
    if (v93 > 0.0)
      break;
LABEL_144:
    if (v83)
      --v83;
    else
      v83 = 349;
  }
  while (v83 != *(_DWORD *)(a1 + 44));
  v132[0] = v85;
  v132[1] = v84;
  v56 = v117;
LABEL_149:
  v33 = v123.i64[0];
LABEL_150:
  v100 = *(double *)&v123.i64[1];
  if (fabs(*(double *)&v123.i64[1] + (double)v33) < 2.22044605e-16)
  {
    v101 = *(int8x16_t *)&v128[8];
    v102 = v129;
    *(_OWORD *)(v115 + 8) = *(_OWORD *)&v128[8];
    *(int8x16_t *)(v115 + 24) = v102;
    *(_QWORD *)(v115 + 40) = v130;
    if (v33 < 0 || v100 < 0.0)
      v33 = CNTimeSpan::operator-((double *)v123.i64, v101, v102);
    else
      v103 = v100;
    v121.n128_u64[0] = v33;
    v121.n128_f64[1] = v103;
    v107 = (double *)(a1 + 16);
    v108 = (double *)&v121;
    goto LABEL_160;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, void **))(*(_QWORD *)v115 + 24))(v115, v56, v128, &v124))
  {
    if (v33 < 0 || v100 < 0.0)
      v33 = CNTimeSpan::operator-((double *)v123.i64, v104, v105);
    else
      v106 = v100;
    v121.n128_u64[0] = v33;
    v121.n128_f64[1] = v106;
    v109 = (double *)(a1 + 16);
    if (!sub_18D03F608(v121.n128_f64, v109))
    {
      v112 = v122.i64[0];
      if (v122.i64[0] < 0 || (v110.i64[0] = v122.i64[1], *(double *)&v122.i64[1] < 0.0))
        v112 = CNTimeSpan::operator-((double *)v122.i64, v110, v111);
      else
        v113 = v122.i64[1];
      v119 = v112;
      v120 = v113;
      v108 = (double *)&v119;
      v107 = v109;
LABEL_160:
      if (!sub_18D03F608(v108, v107))
        return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18D190970(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 144) = v2;
  *(_QWORD *)(v3 - 136) = v1;
  _Unwind_Resume(a1);
}

void sub_18D190978(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 144) = v1;
  *(_QWORD *)(v3 - 136) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_18D190980(uint64_t a1, double *a2, uint64_t a3, double a4, int8x16_t a5)
{
  int v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  double v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int8x16_t v32;
  uint64_t v33;
  double v34;
  double v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  __n128 v39;
  int8x16_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _BOOL4 v46;
  double v47;
  _BOOL4 v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  double v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  unsigned int v64;
  double v65;
  double v66;
  uint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint64_t v70;
  double v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  _OWORD *v79;
  uint64_t v80;
  int8x16_t v81;
  uint64_t v82;
  unsigned int v83;
  double v84;
  double v85;
  uint64_t v86;
  int8x16_t v87;
  int8x16_t v88;
  uint64_t v89;
  double v90;
  int8x16_t v91;
  uint64_t v92;
  double v93;
  unint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  _OWORD *v97;
  uint64_t v98;
  int8x16_t v99;
  double v100;
  int8x16_t v101;
  int8x16_t v102;
  double v103;
  int8x16_t v104;
  int8x16_t v105;
  double v106;
  double *v107;
  double *v108;
  double *v109;
  int8x16_t v110;
  int8x16_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  int8x16_t v122;
  int8x16_t v123;
  void *v124;
  int8x16_t v125;
  int8x16_t v126;
  uint64_t v127;
  _BYTE v128[24];
  int8x16_t v129;
  uint64_t v130;
  int8x16_t v131;
  double v132[4];

  v5 = *(_DWORD *)(a1 + 8);
  if (!v5)
    return 0xFFFFFFFFLL;
  if (v5 == 1)
  {
    v9 = a1 + 48 * *(unsigned int *)(a1 + 40);
    v10 = *(void **)(v9 + 56);
    v11 = *(_QWORD *)(v9 + 64);
    *(_OWORD *)v128 = *(_OWORD *)(v9 + 72);
    *(_QWORD *)&v128[16] = *(_QWORD *)(v9 + 88);
    v124 = v10;
    v125.i64[0] = v11;
    v12 = CNTimeSpan::operator-((uint64_t)&v124, a2, *(int8x16_t *)v128, a5);
    v131.i64[0] = v12;
    *(double *)&v131.i64[1] = v13;
    if (v12 < 0 || (*(double *)v14.i64 = v13, v13 < 0.0))
      v12 = CNTimeSpan::operator-((double *)v131.i64, v14, v15);
    *(_QWORD *)&v132[0] = v12;
    v132[1] = v13;
    if (!sub_18D03F608(v132, (double *)(a1 + 16)))
    {
      result = 0;
      *(_QWORD *)(a3 + 8) = v10;
      *(_QWORD *)(a3 + 16) = v11;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)v128;
      *(_QWORD *)(a3 + 40) = *(_QWORD *)&v128[16];
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  v17 = a1 + 48 + 48 * *(unsigned int *)(a1 + 40);
  *(_QWORD *)v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  *(_QWORD *)&v128[8] = v18;
  v21 = CNTimeSpan::operator-((uint64_t)a2, v128, v19, v20);
  v23 = llround(*(double *)(a1 + 32) * (v22 + (double)v21));
  v24 = v23 & ~(v23 >> 31);
  v25 = *(_DWORD *)(a1 + 8);
  v26 = v25 - 1;
  if (v24 < v25 - 1)
    v26 = v24;
  v27 = *(_DWORD *)(a1 + 40);
  v28 = (v26 + v27) % 0x15E;
  *(_QWORD *)v128 = &unk_1E25C3050;
  v29 = a1 + 48 + 48 * v28;
  *(_OWORD *)&v128[8] = *(_OWORD *)(v29 + 8);
  v129 = *(int8x16_t *)(v29 + 24);
  v130 = *(_QWORD *)(v29 + 40);
  v124 = &unk_1E25C3050;
  v115 = a3;
  if (v28 == v27)
  {
    v30 = (v27 + 1) % v25;
    goto LABEL_20;
  }
  if (v28 == *(_DWORD *)(a1 + 44))
  {
    if (v28)
      v25 = (v26 + v27) % 0x15E;
LABEL_19:
    v30 = v25 - 1;
    goto LABEL_20;
  }
  *(_OWORD *)v132 = *(_OWORD *)&v128[8];
  if (sub_18D03F608(v132, a2) || v28 == *(_DWORD *)(a1 + 44))
  {
    v25 = v28;
    if (!v28)
      v25 = *(_DWORD *)(a1 + 8);
    goto LABEL_19;
  }
  v30 = (v28 + 1) % *(_DWORD *)(a1 + 8);
LABEL_20:
  v114 = v30;
  v31 = a1 + 48 * v30;
  v32 = *(int8x16_t *)(v31 + 72);
  v125 = *(int8x16_t *)(v31 + 56);
  v126 = v32;
  v127 = *(_QWORD *)(v31 + 88);
  v131 = v125;
  *(_OWORD *)v132 = *(_OWORD *)&v128[8];
  v33 = CNTimeSpan::operator-((uint64_t)a2, v132, v125, v32);
  v35 = v34;
  v123.i64[0] = v33;
  *(double *)&v123.i64[1] = v34;
  v38 = CNTimeSpan::operator-((uint64_t)a2, &v131, v36, v37);
  v42 = v41;
  v122.i64[0] = v38;
  *(double *)&v122.i64[1] = v41;
  v43 = v35;
  v44 = v41;
  v46 = v35 < 0.0 || v33 < 0;
  v116 = v33;
  if (v46)
  {
    v116 = CNTimeSpan::operator-((double *)v123.i64, (int8x16_t)v39, v40);
    v35 = v47;
  }
  v117 = (uint64_t)a2;
  v49 = v44 < 0.0 || v38 < 0;
  v118 = v38;
  if (v49)
  {
    v118 = CNTimeSpan::operator-((double *)v122.i64, (int8x16_t)v39, v40);
    v42 = v50;
  }
  v51 = v33;
  if (v46)
  {
    v51 = CNTimeSpan::operator-((double *)v123.i64, (int8x16_t)v39, v40);
    v43 = v52;
  }
  v53 = v38;
  if (v49)
  {
    v53 = CNTimeSpan::operator-((double *)v122.i64, (int8x16_t)v39, v40);
    v44 = v54;
  }
  if (!v51 && (*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || !v53 && (*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (v55 = v51 <= v53, v51 == v53))
  {
    v55 = v43 <= v44;
  }
  v57 = v116;
  v56 = v117;
  if (!v55)
  {
    v125 = *(int8x16_t *)&v128[8];
    v126 = v129;
    v127 = v130;
    v58 = *(int8x16_t *)(v31 + 72);
    *(_OWORD *)&v128[8] = *(_OWORD *)(v31 + 56);
    v129 = v58;
    v130 = *(_QWORD *)(v31 + 88);
    v131 = v125;
    *(_OWORD *)v132 = *(_OWORD *)&v128[8];
    v59 = v122;
    v39 = (__n128)v123;
    v121 = (__n128)v123;
    v122 = v123;
    v123 = v59;
    v33 = v59.i64[0];
    if (v59.i64[0] < 0 || (v39.n128_u64[0] = v123.u64[1], *(double *)&v123.i64[1] < 0.0))
    {
      v57 = CNTimeSpan::operator-((double *)v123.i64, (int8x16_t)v39, v59);
      v35 = v60;
    }
    else
    {
      v35 = *(double *)&v123.i64[1];
      v57 = v59.i64[0];
    }
    v38 = v122.i64[0];
    if (v122.i64[0] < 0 || (v39.n128_u64[0] = v122.u64[1], *(double *)&v122.i64[1] < 0.0))
    {
      v118 = CNTimeSpan::operator-((double *)v122.i64, (int8x16_t)v39, v59);
      v42 = v61;
    }
    else
    {
      v42 = *(double *)&v122.i64[1];
      v118 = v122.i64[0];
    }
    v28 = v114;
  }
  v62 = v35;
  v63 = v42;
  if (v28 == *(_DWORD *)(a1 + 44))
    goto LABEL_57;
  if (v33)
  {
    if (v33 < 1)
      goto LABEL_57;
  }
  else
  {
    v39.n128_u64[0] = v123.u64[1];
    if (*(double *)&v123.i64[1] <= 0.0)
      goto LABEL_57;
  }
  if (v38)
  {
    if (v38 < 1)
      goto LABEL_57;
    goto LABEL_73;
  }
  v39.n128_u64[0] = v122.u64[1];
  if (*(double *)&v122.i64[1] > 0.0)
  {
LABEL_73:
    v64 = (v28 + 1) % 0x15E;
    v66 = v132[1];
    v65 = v132[0];
    while (1)
    {
      v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48 * v64 + 48) + 16))(a1 + 48 * v64 + 48);
      v120 = v67;
      v70 = CNTimeSpan::operator-(v117, &v119, v68, v69);
      v74 = v70;
      v121.n128_u64[0] = v70;
      v121.n128_f64[1] = v71;
      v75 = v71;
      if (v70 < 0 || (*(double *)v72.i64 = v71, v71 < 0.0))
      {
        v70 = CNTimeSpan::operator-(v121.n128_f64, v72, v73);
        v72.i64[0] = v76;
      }
      if (v70 || (v72.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if ((v57 || (*(_QWORD *)&v62 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v70 != v57)
        {
          if (v70 < v57)
            goto LABEL_93;
        }
        else if (v62 > *(double *)v72.i64)
        {
          goto LABEL_93;
        }
        if ((v70 || (v72.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (v118 || (*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && v70 != v118)
        {
          if (v70 >= v118)
            goto LABEL_95;
          goto LABEL_99;
        }
      }
      else if (v62 > *(double *)v72.i64)
      {
LABEL_93:
        v125 = *(int8x16_t *)&v128[8];
        v126 = v129;
        v127 = v130;
        v77 = a1 + 48 * v64;
        v78 = *(int8x16_t *)(v77 + 72);
        *(_OWORD *)&v128[8] = *(_OWORD *)(v77 + 56);
        v129 = v78;
        v130 = *(_QWORD *)(v77 + 88);
        v65 = *(double *)&v128[8];
        v66 = *(double *)&v128[16];
        v79 = &v123;
        v122 = v123;
        v118 = v57;
        v63 = v62;
        v57 = v70;
        v62 = *(double *)v72.i64;
        goto LABEL_100;
      }
      if (v63 <= *(double *)v72.i64)
      {
LABEL_95:
        if (v74)
        {
          if ((v74 & 0x8000000000000000) == 0)
            goto LABEL_104;
        }
        else if (v75 >= 0.0)
        {
          goto LABEL_104;
        }
      }
LABEL_99:
      v80 = a1 + 48 * v64;
      v81 = *(int8x16_t *)(v80 + 72);
      v125 = *(int8x16_t *)(v80 + 56);
      v126 = v81;
      v127 = *(_QWORD *)(v80 + 88);
      v79 = &v122;
      v118 = v70;
      v63 = *(double *)v72.i64;
LABEL_100:
      *v79 = v121;
      if (v74)
      {
        if (v74 < 0)
          goto LABEL_108;
      }
      else if (v75 < 0.0)
      {
        goto LABEL_108;
      }
LABEL_104:
      if (v64 == 349)
        v64 = 0;
      else
        ++v64;
      if (v64 == *(_DWORD *)(a1 + 44))
      {
LABEL_108:
        v132[0] = v65;
        v132[1] = v66;
        goto LABEL_149;
      }
    }
  }
LABEL_57:
  if (v28 == *(_DWORD *)(a1 + 40))
    goto LABEL_149;
  if (v33)
  {
    if ((v33 & 0x8000000000000000) == 0)
      goto LABEL_150;
  }
  else
  {
    v39.n128_u64[0] = v123.u64[1];
    if (*(double *)&v123.i64[1] >= 0.0)
      goto LABEL_149;
  }
  if (v38)
  {
    if ((v38 & 0x8000000000000000) == 0)
      goto LABEL_149;
  }
  else
  {
    v39.n128_u64[0] = v122.u64[1];
    if (*(double *)&v122.i64[1] >= 0.0)
      goto LABEL_149;
  }
  v82 = v57;
  if (v28)
    v83 = v28 - 1;
  else
    v83 = 349;
  v84 = v132[1];
  v85 = v132[0];
  do
  {
    v119 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)(a1 + 48 * v83 + 48) + 16))(a1 + 48 * v83 + 48, v39);
    v120 = v86;
    v89 = CNTimeSpan::operator-(v117, &v119, v87, v88);
    v92 = v89;
    v121.n128_u64[0] = v89;
    v121.n128_f64[1] = v90;
    v93 = v90;
    if (v89 < 0 || (v39.n128_f64[0] = v90, v90 < 0.0))
    {
      v89 = CNTimeSpan::operator-(v121.n128_f64, (int8x16_t)v39, v91);
      v39.n128_u64[0] = v94;
    }
    if (v89 || (v39.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
    {
      if ((v82 || (*(_QWORD *)&v62 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v89 != v82)
      {
        if (v89 < v82)
          goto LABEL_133;
      }
      else if (v62 > v39.n128_f64[0])
      {
        goto LABEL_133;
      }
      if ((v89 || (v39.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
        && (v118 || (*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        && v89 != v118)
      {
        if (v89 >= v118)
          goto LABEL_135;
        goto LABEL_139;
      }
    }
    else if (v62 > v39.n128_f64[0])
    {
LABEL_133:
      v125 = *(int8x16_t *)&v128[8];
      v126 = v129;
      v127 = v130;
      v95 = a1 + 48 * v83;
      v96 = *(int8x16_t *)(v95 + 72);
      *(_OWORD *)&v128[8] = *(_OWORD *)(v95 + 56);
      v129 = v96;
      v130 = *(_QWORD *)(v95 + 88);
      v85 = *(double *)&v128[8];
      v84 = *(double *)&v128[16];
      v97 = &v123;
      v122 = v123;
      v118 = v82;
      v63 = v62;
      v82 = v89;
      v62 = v39.n128_f64[0];
      goto LABEL_140;
    }
    if (v63 <= v39.n128_f64[0])
    {
LABEL_135:
      if (v92)
      {
        if (v92 < 1)
          goto LABEL_144;
      }
      else if (v93 <= 0.0)
      {
        goto LABEL_143;
      }
    }
LABEL_139:
    v98 = a1 + 48 * v83;
    v99 = *(int8x16_t *)(v98 + 72);
    v125 = *(int8x16_t *)(v98 + 56);
    v126 = v99;
    v127 = *(_QWORD *)(v98 + 88);
    v97 = &v122;
    v118 = v89;
    v63 = v39.n128_f64[0];
LABEL_140:
    v39 = v121;
    *v97 = v121;
    if (v92)
    {
      if (v92 > 0)
        break;
      goto LABEL_144;
    }
LABEL_143:
    if (v93 > 0.0)
      break;
LABEL_144:
    if (v83)
      --v83;
    else
      v83 = 349;
  }
  while (v83 != *(_DWORD *)(a1 + 44));
  v132[0] = v85;
  v132[1] = v84;
  v56 = v117;
LABEL_149:
  v33 = v123.i64[0];
LABEL_150:
  v100 = *(double *)&v123.i64[1];
  if (fabs(*(double *)&v123.i64[1] + (double)v33) < 2.22044605e-16)
  {
    v101 = *(int8x16_t *)&v128[8];
    v102 = v129;
    *(_OWORD *)(v115 + 8) = *(_OWORD *)&v128[8];
    *(int8x16_t *)(v115 + 24) = v102;
    *(_QWORD *)(v115 + 40) = v130;
    if (v33 < 0 || v100 < 0.0)
      v33 = CNTimeSpan::operator-((double *)v123.i64, v101, v102);
    else
      v103 = v100;
    v121.n128_u64[0] = v33;
    v121.n128_f64[1] = v103;
    v107 = (double *)(a1 + 16);
    v108 = (double *)&v121;
    goto LABEL_160;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, void **))(*(_QWORD *)v115 + 24))(v115, v56, v128, &v124))
  {
    if (v33 < 0 || v100 < 0.0)
      v33 = CNTimeSpan::operator-((double *)v123.i64, v104, v105);
    else
      v106 = v100;
    v121.n128_u64[0] = v33;
    v121.n128_f64[1] = v106;
    v109 = (double *)(a1 + 16);
    if (!sub_18D03F608(v121.n128_f64, v109))
    {
      v112 = v122.i64[0];
      if (v122.i64[0] < 0 || (v110.i64[0] = v122.i64[1], *(double *)&v122.i64[1] < 0.0))
        v112 = CNTimeSpan::operator-((double *)v122.i64, v110, v111);
      else
        v113 = v122.i64[1];
      v119 = v112;
      v120 = v113;
      v108 = (double *)&v119;
      v107 = v109;
LABEL_160:
      if (!sub_18D03F608(v108, v107))
        return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18D1912B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 144) = v2;
  *(_QWORD *)(v3 - 136) = v1;
  _Unwind_Resume(a1);
}

void sub_18D1912C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 144) = v1;
  *(_QWORD *)(v3 - 136) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1912C8(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_18D1C96FC(a1, 26, 26);
  *(_OWORD *)(v1 + 8) = xmmword_18D319890;
  return sub_18D04BE88(v1, 0.0);
}

int64x2_t *sub_18D1912F4(int64x2_t *a1)
{
  int64x2_t v2;

  a1->i64[0] = 0;
  a1->i64[1] = 0;
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[1] = v2;
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v2;
  a1[5] = v2;
  a1[6] = v2;
  a1[7] = v2;
  a1[8] = v2;
  a1[9] = v2;
  a1[10] = v2;
  a1[11] = v2;
  a1[12] = v2;
  a1[13] = v2;
  a1[14] = v2;
  sub_18D1C99C8((uint64_t)a1[15].i64);
  a1[18].i8[0] = 0;
  return a1;
}

uint64_t sub_18D191348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 24) = 0x400000003;
  *(_QWORD *)a2 = &unk_1E25C7940;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  return sub_18D073454(a1, a2);
}

void sub_18D1913A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1913B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = &unk_1E25C78E0;
  *(_OWORD *)(a3 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D191404(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D191418(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x400000003;
  *(_QWORD *)a3 = &unk_1E25C7940;
  *(_OWORD *)(a3 + 8) = xmmword_18D3130B0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D19146C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D191480(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x300000004;
  *(_QWORD *)a1 = &unk_1E25C7F70;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D073454(a2, a1);
}

void sub_18D1914DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1914F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v5[5];
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = 0x10000001ALL;
  v7 = &unk_1E25C70A0;
  v8 = xmmword_18D319790;
  v10 = &v11;
  sub_18D1C99C8((uint64_t)v5);
  sub_18D1C99C8(a1);
  sub_18D05C770(a2, (uint64_t)&v7, (uint64_t)v5, a1);
  result = v6;
  v5[0] = &unk_1E25C7160;
  v6 = 0;
  if (result)
    return MEMORY[0x18D78B5BC](result, 0x1000C8000313F17);
  return result;
}

void sub_18D1915A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD *v15;
  uint64_t v17;

  *v15 = &unk_1E25C7160;
  v17 = v15[5];
  v15[5] = 0;
  if (v17)
    MEMORY[0x18D78B5BC](v17, 0x1000C8000313F17);
  *v15 = &unk_1E25C5E70;
  if (a15)
    MEMORY[0x18D78B5BC](a15, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D19162C(uint64_t a1, uint64_t a2)
{
  sub_18D1C96FC(a1, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 8));
  return sub_18D073454(a2, a1);
}

void sub_18D191664(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E25C7160;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1916B0(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  sub_18D1C99C8(a1);
  v11 = 0x10000001ALL;
  v9 = &unk_1E25C70D0;
  v10 = xmmword_18D319790;
  v12 = &v13;
  v6 = 0x100000068;
  v4 = &unk_1E25C5F90;
  v5 = xmmword_18D3198A0;
  v7 = &v8;
  sub_18D04F504(a2, (uint64_t)&v9, (uint64_t)&v4, a1);
}

void sub_18D191760(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E25C7160;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1917AC(uint64_t a1, uint64_t a2)
{
  BOOL v4;

  sub_18D1C99C8(a1);
  v4 = 0;
  sub_18D05C654(a2, a1, &v4);
}

void sub_18D1917EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E25C7160;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D191838(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C7160;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D191898(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = *(unsigned __int8 *)(a1 + 296);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = *(_OWORD *)(a2 + 160);
  v11 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v10;
  v12 = *(_OWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 176);
  v13 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 192) = v13;
  v15 = a1 + 240;
  v16 = a2 + 240;
  if (v4)
  {
    sub_18D053AA8(v15, v16);
    v17 = *(_BYTE *)(a2 + 288);
  }
  else
  {
    sub_18D1C9844(v15, v16);
    v17 = *(_BYTE *)(a2 + 288);
    *(_BYTE *)(a1 + 296) = 1;
  }
  *(_BYTE *)(a1 + 288) = v17;
  return a1;
}

std::string *raven::RavenPNTEstimator::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 2512), a2);
  return std::string::operator=((std::string *)(a1 + 16328), a2);
}

BOOL raven::RavenPNTEstimator::GetEstimatorPredictAndUpdateArguments(int8x16_t *a1, uint64_t a2, int8x16_t *a3, uint64_t a4, double a5, int8x16_t a6)
{
  int8x16_t v10;
  cnprint::CNPrinter *v11;
  int8x16_t v12;
  double v13;
  int8x16_t v14;
  double v15;
  _BOOL4 v16;
  int8x16_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  double v31;
  double ComfortableAcceleration;
  double v33;
  double v34;
  int8x16_t v35;
  int8x16_t v36;
  double v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  int8x16_t v49;
  uint64_t v50;
  double v51;
  _BOOL4 v52;
  double v53;
  double v54;
  double v55;
  unsigned int v56;
  double v57;
  double *v59;
  double *v60;
  int8x16_t v61;
  _QWORD v62[2];
  _QWORD v63[2];

  v10 = *a3;
  *(int8x16_t *)a4 = *a3;
  v11 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)a3, (_QWORD *)a2, v10, a6);
  *(double *)v14.i64 = v13;
  v15 = v13 + (double)(uint64_t)v11;
  *(double *)(a4 + 16) = v15;
  if (v15 >= 0.0)
  {
    *(double *)v12.i64 = (double)(uint64_t)v11;
    v16 = raven::RavenPNTEstimator::UseHighAccelerationParameters((raven::RavenPNTEstimator *)a1, v14, v12);
    v18 = a1[73].i64[0];
    *(_QWORD *)(a4 + 56) = *(_QWORD *)(v18 + 712);
    if (v16)
    {
      *(_QWORD *)(a4 + 64) = *(_QWORD *)(v18 + 752);
      *(_QWORD *)(a4 + 72) = *(_QWORD *)(v18 + 704);
      *(_QWORD *)(a4 + 80) = *(_QWORD *)(v18 + 728);
      v19 = (_QWORD *)(v18 + 776);
      v20 = (uint64_t *)(v18 + 680);
      v21 = (_QWORD *)(v18 + 696);
    }
    else
    {
      *(_QWORD *)(a4 + 64) = *(_QWORD *)(v18 + 760);
      *(_QWORD *)(a4 + 72) = *(_QWORD *)(v18 + 704);
      *(_QWORD *)(a4 + 80) = *(_QWORD *)(v18 + 736);
      v19 = (_QWORD *)(v18 + 784);
      v20 = (uint64_t *)(v18 + 672);
      v21 = (_QWORD *)(v18 + 688);
    }
    *(_QWORD *)(a4 + 88) = *v19;
    v29 = *(_QWORD *)(v18 + 664);
    v17.i64[0] = *v20;
    *(_QWORD *)(a4 + 96) = *v20;
    *(_QWORD *)(a4 + 104) = v29;
    *(_QWORD *)(a4 + 112) = *v21;
    *(_QWORD *)(a4 + 120) = *(_QWORD *)(v18 + 656);
    *(_QWORD *)(a4 + 128) = *(_QWORD *)(v18 + 648);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v18 + 792);
    v30 = *(int8x16_t *)(v18 + 808);
    *(int8x16_t *)(a4 + 40) = v30;
    v31 = *(double *)(v18 + 344);
    ComfortableAcceleration = raven::RavenPNTEstimator::GetComfortableAcceleration((raven::RavenPNTEstimator *)a1, v30, v17);
    v33 = *(double *)(a1[73].i64[0] + 872);
    v34 = ComfortableAcceleration * v33;
    *(double *)v35.i64 = fabs(*(double *)(a1[915].i64[1] + 192));
    v36.i64[0] = v35.i64[0];
    v37 = fmax(*(double *)v35.i64, 0.000000015);
    *(double *)v38.i64 = raven::RavenPNTEstimator::GetMaximumComfortableTurningRate((raven::RavenPNTEstimator *)a1, v36, v35);
    *(double *)v39.i64 = ComfortableAcceleration / v37;
    if (ComfortableAcceleration / v37 < *(double *)v38.i64)
      *(double *)v38.i64 = ComfortableAcceleration / v37;
    v40 = a1[73].i64[0];
    v41 = *(double *)(v40 + 872);
    v42 = *(double *)v38.i64 * v41;
    if (a1[75].i8[8] && a1[82].i8[8] == 5)
    {
      v43 = fmax(v37, 0.1) / 5.0 * v41;
      *(double *)v39.i64 = v43;
      if (v43 >= v42)
        v43 = v42;
      v42 = v43;
      v38.i64[0] = *(_QWORD *)(v40 + 3272);
      if (v37 <= *(double *)v38.i64)
      {
        *(double *)v38.i64 = raven::RavenPNTEstimator::GetTurnStateBasedDeltaHeadingRateConstraint((raven::RavenPNTEstimator *)a1, v38, v39);
        v40 = a1[73].i64[0];
        v41 = *(double *)(v40 + 872);
        *(double *)v38.i64 = *(double *)v38.i64 * v41;
        if (v42 >= *(double *)v38.i64)
          v42 = *(double *)v38.i64;
      }
    }
    v44 = v31 * v31;
    v45 = a1[5].i64[0];
    v46 = a1[5].i64[1];
    v63[0] = v45;
    v63[1] = v46;
    v47 = CNTimeSpan::operator-((uint64_t)v63, (int8x16_t *)a1[159].i64, v38, v39);
    if (v47 != 30)
    {
      if (v47)
      {
        v49.i64[0] = 10.0;
        if (v47 < 30)
          goto LABEL_33;
        goto LABEL_26;
      }
      if ((*(_QWORD *)&v48 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v49.i64[0] = 10.0;
        goto LABEL_33;
      }
    }
    v49.i64[0] = 10.0;
    if (v48 <= 0.0)
      goto LABEL_33;
LABEL_26:
    v62[0] = v45;
    v62[1] = v46;
    v61 = a1[7];
    v50 = CNTimeSpan::operator-((uint64_t)v62, &v61, v61, v49);
    if (v50 == 30 || !v50 && (*(_QWORD *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      v52 = v51 <= 0.0;
    else
      v52 = v50 < 30;
    v49.i64[0] = 10.0;
    if (!v52)
      *(double *)v49.i64 = 1.0;
LABEL_33:
    v53 = v34 * v34 / v33;
    v54 = *(double *)v49.i64 * (*(double *)(v40 + 352) * *(double *)(v40 + 352));
    *(double *)(a4 + 136) = v44;
    v55 = 1.0;
    if (!a1[88].i8[0] || (v56 = a1[95].u8[0], v56 < 7))
    {
      v57 = 1.0;
LABEL_36:
      *(double *)(a4 + 144) = v53 * v55;
      *(double *)(a4 + 152) = v42 * v42 / v41 * v57;
      *(double *)(a4 + 160) = v53;
      *(double *)(a4 + 168) = v54;
      *(double *)(a4 + 176) = v53 + v53 * 2.0;
      return v15 >= 0.0;
    }
    if (v56 == 8)
    {
      v59 = (double *)(v40 + 504);
      v60 = (double *)(v40 + 512);
    }
    else
    {
      v57 = 1.0;
      if (v56 == 9)
        goto LABEL_36;
      v59 = (double *)(v40 + 520);
      v60 = (double *)(v40 + 528);
    }
    v55 = *v59;
    v57 = *v60;
    goto LABEL_36;
  }
  if (!cnprint::CNPrinter::GetLogLevel(v11))
  {
    LOWORD(v63[0]) = 12;
    LOBYTE(v62[0]) = 0;
    v22 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&a1[155].i64[1], (uint64_t)a3, "Prediction time is negative,dt,%.2lf,current_estimator_time,%.1lf", *(double *)(a4 + 16), *(double *)(a2 + 8) + (double)*(uint64_t *)a2);
    if (a1[156].i8[15] >= 0)
      LOBYTE(v28) = v22;
    else
      v28 = a1[155].i64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v63, (unsigned __int8 *)v62, "%s", v23, v24, v25, v26, v27, v28);
  }
  return v15 >= 0.0;
}

double raven::RavenPNTEstimator::GetComfortableAcceleration(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int16 v14;

  v4 = *((_QWORD *)this + 146);
  if (v4 && *(_BYTE *)(v4 + 33))
  {
    if (raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a2, a3))
    {
      return *(double *)(v4 + 312);
    }
    else if (*((_BYTE *)this + 2536) == 1)
    {
      return *(double *)(v4 + 320);
    }
    else
    {
      return *(double *)(v4 + 304);
    }
  }
  else
  {
    v14 = 12;
    v13 = 2;
    v6 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPNTEstimator *)((char *)this + 2488), "GetComfortableAcceleration() called before parameters were initialized");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
    return 0.0;
  }
}

double raven::RavenPNTEstimator::GetMaximumComfortableTurningRate(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;

  v4 = *((_QWORD *)this + 146);
  if (v4 && *(_BYTE *)(v4 + 33))
  {
    v5 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a2, a3);
    v6 = 328;
    if (v5)
      v6 = 336;
    return *(double *)(v4 + v6) * 0.0174532925;
  }
  else
  {
    v16 = 12;
    v15 = 2;
    v8 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPNTEstimator *)((char *)this + 2488), "GetMaximumComfortableTurningRate() called before parameters were initialized");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v14) = v8;
    else
      v14 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "%s", v9, v10, v11, v12, v13, v14);
    return 0.0;
  }
}

double raven::RavenPNTEstimator::GetTurnStateBasedDeltaHeadingRateConstraint(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  double *v4;
  double v5;
  uint64_t LogLevel;
  double v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  double v23;
  double v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v34;
  __int16 v35;
  int8x16_t v36;

  v4 = (double *)*((_QWORD *)this + 146);
  v5 = v4[408];
  if (!*((_BYTE *)this + 2064))
  {
    LogLevel = cnprint::CNPrinter::GetLogLevel(this);
    if (LogLevel > 1)
      goto LABEL_27;
    v35 = 12;
    v34 = 1;
    v36 = *((int8x16_t *)this + 5);
    v21 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v36, "GetTurnStateBasedDeltaHeadingRateConstraint,last_turn_state_event,unavailable,assuming high turn rate,turning_rate_dps,%.2lf", v5);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v20) = v21;
    else
      v20 = *((_QWORD *)this + 311);
    goto LABEL_15;
  }
  LogLevel = CNTimeSpan::operator-((uint64_t)this + 2080, (_QWORD *)this + 10, a2, a3);
  v36.i64[0] = LogLevel;
  *(double *)&v36.i64[1] = v7;
  if (LogLevel < 0 || (*(double *)v8.i64 = v7, v7 < 0.0))
  {
    LogLevel = CNTimeSpan::operator-((double *)v36.i64, v8, v9);
    v8.i64[0] = v10;
  }
  if (*(double *)v8.i64 + (double)LogLevel > 1.0)
  {
    LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel);
    if (LogLevel > 1)
      goto LABEL_27;
    v35 = 12;
    v34 = 1;
    v12 = *((int8x16_t *)this + 5);
    v36 = v12;
    if (!*((_BYTE *)this + 2064))
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    v13 = CNTimeSpan::operator-((uint64_t)this + 80, (_QWORD *)this + 260, v12, v11);
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v36, "GetTurnStateBasedDeltaHeadingRateConstraint,last_turn_state_event,too stale,age,%.2lf,assuming high turn rate,turning_rate_dps,%.2lf", v14 + (double)v13, v5);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v20) = (_BYTE)this - 72;
    else
      v20 = *((_QWORD *)this + 311);
LABEL_15:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v15, v16, v17, v18, v19, v20);
    goto LABEL_27;
  }
  v22 = *((unsigned __int8 *)this + 2176);
  if (v22 == 2)
  {
    v24 = *((double *)this + 275);
    if (v24 <= 0.9 && v24 > 0.5)
      v5 = v4[407];
  }
  else if (v22 == 1)
  {
    v23 = *((double *)this + 274);
    if (v23 <= 0.9)
    {
      if (v23 > 0.5)
        v5 = v4[405];
    }
    else
    {
      v5 = v4[406];
    }
  }
LABEL_27:
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel))
  {
    v35 = 12;
    v34 = 0;
    v36 = *((int8x16_t *)this + 5);
    v26 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v36, "GetTurnStateBasedDeltaHeadingRateConstraint,turning_rate_dps,%.2lf", v5);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v32) = v26;
    else
      v32 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v27, v28, v29, v30, v31, v32);
  }
  return v5 * 0.0174532925;
}

BOOL raven::RavenPNTEstimator::GetSimplifiedEightStateEstimatorPredictArgs(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, double a5, int8x16_t a6)
{
  int8x16_t v10;
  cnprint::CNPrinter *v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v27;
  __int16 v28;

  v10 = *a3;
  *(int8x16_t *)a4 = *a3;
  v11 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)a3, (_QWORD *)a2, v10, a6);
  v13 = v12 + (double)(uint64_t)v11;
  *(double *)(a4 + 16) = v13;
  if (v13 < 0.0)
  {
    if (!cnprint::CNPrinter::GetLogLevel(v11))
    {
      v28 = 12;
      v27 = 0;
      v19 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)a3, "Prediction time is negative,dt,%.2lf,current_estimator_time,%.1lf", *(double *)(a4 + 16), *(double *)(a2 + 8) + (double)*(uint64_t *)a2);
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v25) = v19;
      else
        v25 = *(_QWORD *)(a1 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v20, v21, v22, v23, v24, v25);
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 1168);
    v15 = *(double *)(v14 + 216);
    v16 = *(double *)(v14 + 224);
    v17 = *(double *)(v14 + 232);
    v18 = *(double *)(v14 + 240);
    *(double *)(a4 + 56) = v15;
    *(double *)(a4 + 64) = v15;
    *(double *)(a4 + 72) = v16;
    *(double *)(a4 + 80) = v17;
    *(double *)(a4 + 88) = v17;
    *(double *)(a4 + 96) = v18;
    *(double *)(a4 + 104) = v16 + v15 * 2.0;
    *(double *)(a4 + 112) = v18 + v17 * 2.0;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v14 + 792);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v14 + 808);
  }
  return v13 >= 0.0;
}

void raven::RavenPNTEstimator::FillZUPTEvent(raven::RavenPNTEstimator *this, const raven::MovingStateEvent *a2, raven::VelocityEvent *a3)
{
  int v5;

  raven::RavenEstimator::FillZUPTEvent(this, a2, a3);
  if (!v5 && *((_BYTE *)this + 2536) == 1)
  {
    *((double *)a3 + 39) = fmax(*((double *)a3 + 39), 0.25);
    *((double *)a3 + 42) = fmax(*((double *)a3 + 42), 0.25);
    *((double *)a3 + 44) = fmax(*((double *)a3 + 44), 0.25);
  }
}

BOOL raven::RavenPNTEstimator::IsObservable(raven::RavenPNTEstimator *this)
{
  return *((_BYTE *)this + 58) && sub_18D1B8600((uint64_t)this + 15032);
}

double sub_18D1922C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  double result;

  v4 = sub_18D1E8E50(a1);
  *(_OWORD *)(v4 + 8) = xmmword_18D3198B0;
  sub_18D04BE88(v4, 0.0);
  v5 = *(_QWORD **)(a1 + 32);
  *v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a1 + 20);
  v5[v6 + 1] = *(_QWORD *)(a2 + 8);
  v5[2 * v6 + 2] = *(_QWORD *)(a2 + 16);
  v5[3 * v6 + 3] = *(_QWORD *)(a2 + 24);
  v5[4 * v6 + 4] = *(_QWORD *)(a2 + 32);
  v5[5 * v6 + 5] = *(_QWORD *)(a2 + 40);
  v7 = 6 * v6;
  v5[6 * v6 + 6] = *(_QWORD *)(a2 + 48);
  v8 = 8 * v6;
  v9 = 7 * v6;
  v5[v9 + 6] = *(_QWORD *)(a2 + 56);
  v5[(8 * v6) | 6] = *(_QWORD *)(a2 + 64);
  v5[6 * v6 + 7] = *(_QWORD *)(a2 + 72);
  v5[v9 + 7] = *(_QWORD *)(a2 + 80);
  v5[(8 * v6) | 7] = *(_QWORD *)(a2 + 88);
  v5[6 * v6 + 8] = *(_QWORD *)(a2 + 96);
  v5[v9 + 8] = *(_QWORD *)(a2 + 104);
  v5[8 * v6 + 8] = *(_QWORD *)(a2 + 112);
  v5[6 * v6 + 9] = *(_QWORD *)(a2 + 120);
  v5[v9 + 9] = *(_QWORD *)(a2 + 128);
  v5[8 * v6 + 9] = *(_QWORD *)(a2 + 136);
  v5[9 * v6 + 10] = *(_QWORD *)(a2 + 144);
  v5[10 * v6 + 11] = *(_QWORD *)(a2 + 152);
  v5[11 * v6 + 12] = *(_QWORD *)(a2 + 160);
  v5[12 * v6 + 13] = *(_QWORD *)(a2 + 168);
  v5[13 * v6 + 14] = *(_QWORD *)(a2 + 176);
  v5[14 * v6 + 15] = *(_QWORD *)(a2 + 184);
  v5[15 * v6 + 16] = *(_QWORD *)(a2 + 192);
  v5[16 * v6 + 17] = *(_QWORD *)(a2 + 200);
  v5[17 * v6 + 18] = *(_QWORD *)(a2 + 208);
  v5[18 * v6 + 19] = *(_QWORD *)(a2 + 216);
  v5[19 * v6 + 20] = *(_QWORD *)(a2 + 224);
  v5[21] = *(_QWORD *)(a2 + 232);
  v5[6 * v6 + 21] = *(_QWORD *)(a2 + 240);
  v5[v9 + 21] = *(_QWORD *)(a2 + 248);
  v5[8 * v6 + 21] = *(_QWORD *)(a2 + 256);
  v5[20 * v6 + 21] = *(_QWORD *)(a2 + 264);
  v10 = 21 * v6;
  v5[v10 + 21] = *(_QWORD *)(a2 + 272);
  v11 = 22 * v6;
  v5[v11 + 21] = *(_QWORD *)(a2 + 280);
  v5[v6 + 22] = *(_QWORD *)(a2 + 288);
  v5[6 * v6 + 22] = *(_QWORD *)(a2 + 296);
  v5[v9 + 22] = *(_QWORD *)(a2 + 304);
  v5[8 * v6 + 22] = *(_QWORD *)(a2 + 312);
  v5[20 * v6 + 22] = *(_QWORD *)(a2 + 320);
  v5[v10 + 22] = *(_QWORD *)(a2 + 328);
  v5[22 * v6 + 22] = *(_QWORD *)(a2 + 336);
  v5[2 * v6 + 23] = *(_QWORD *)(a2 + 344);
  v5[6 * v6 + 23] = *(_QWORD *)(a2 + 352);
  v5[v9 + 23] = *(_QWORD *)(a2 + 360);
  v5[8 * v6 + 23] = *(_QWORD *)(a2 + 368);
  v5[20 * v6 + 23] = *(_QWORD *)(a2 + 376);
  v5[v10 + 23] = *(_QWORD *)(a2 + 384);
  v5[v11 + 23] = *(_QWORD *)(a2 + 392);
  v12 = 23 * v6;
  v5[v12 + 24] = *(_QWORD *)(a2 + 400);
  v13 = 24 * v6;
  v5[v13 + 24] = *(_QWORD *)(a2 + 408);
  v6 *= 25;
  v5[v6 + 24] = *(_QWORD *)(a2 + 416);
  v5[v7 + 25] = *(_QWORD *)(a2 + 424);
  v5[v9 + 25] = *(_QWORD *)(a2 + 432);
  v5[v8 + 25] = *(_QWORD *)(a2 + 440);
  v5[v12 + 25] = *(_QWORD *)(a2 + 448);
  v5[v13 + 25] = *(_QWORD *)(a2 + 456);
  v5[v6 + 25] = *(_QWORD *)(a2 + 464);
  v5[v7 + 26] = *(_QWORD *)(a2 + 472);
  v5[v9 + 26] = *(_QWORD *)(a2 + 480);
  v5[v8 + 26] = *(_QWORD *)(a2 + 488);
  v5[v12 + 26] = *(_QWORD *)(a2 + 496);
  v5[v13 + 26] = *(_QWORD *)(a2 + 504);
  v5[v6 + 26] = *(_QWORD *)(a2 + 512);
  v5[v7 + 27] = *(_QWORD *)(a2 + 520);
  v5[v9 + 27] = *(_QWORD *)(a2 + 528);
  v5[v8 + 27] = *(_QWORD *)(a2 + 536);
  v5[v12 + 27] = *(_QWORD *)(a2 + 544);
  v5[v13 + 27] = *(_QWORD *)(a2 + 552);
  result = *(double *)(a2 + 560);
  *(double *)&v5[v6 + 27] = result;
  return result;
}

void sub_18D1926E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18D04A5F4(a1);
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D192720(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E25C7370;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D19276C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18D1CB528(a1);
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1927AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &off_1E25C7340;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1927F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  unsigned int i;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[5];
  uint64_t v19;
  void *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v30[104];
  void *v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE v35[104];

  sub_18D1C99C8((uint64_t)&v20);
  if (*(_DWORD *)(a1 + 1108))
  {
    sub_18D1C99C8((uint64_t)v18);
    v33 = 0x10000001ALL;
    v31 = &unk_1E25C70D0;
    v32 = xmmword_18D319790;
    v34 = v35;
    v28 = 0x100000068;
    v26 = &unk_1E25C5F90;
    v27 = xmmword_18D3198A0;
    v29 = v30;
    sub_18D04F504(a1 + 800, (uint64_t)&v31, (uint64_t)&v26, (uint64_t)v18);
  }
  else
  {
    sub_18D1C99C8((uint64_t)v18);
    v33 = 0x10000001ALL;
    v31 = &unk_1E25C70D0;
    v32 = xmmword_18D319790;
    v34 = v35;
    v28 = 0x100000068;
    v26 = &unk_1E25C5F90;
    v27 = xmmword_18D3198A0;
    v29 = v30;
    sub_18D04F504(a1 + 256, (uint64_t)&v31, (uint64_t)&v26, (uint64_t)v18);
  }
  v4 = sub_18D053AA8((uint64_t)&v20, (uint64_t)v18);
  v5 = v19;
  v18[0] = &unk_1E25C7160;
  v19 = 0;
  if (v5)
    MEMORY[0x18D78B5BC](v5, 0x1000C8000313F17, v4);
  sub_18D1C96FC((uint64_t)&v26, v22, v21);
  v7 = v21;
  v6 = v22;
  *(_QWORD *)&v27 = __PAIR64__(v21, v22);
  DWORD2(v27) = v21 * v22;
  HIDWORD(v27) = v22;
  if (v22)
  {
    v8 = 0;
    v9 = 0;
    v10 = v23;
    v11 = v24;
    v12 = v29;
    do
    {
      v13 = v8;
      v14 = v9;
      for (i = v7; i; --i)
      {
        v12[v14] = *(_QWORD *)(v11 + 8 * v13);
        v14 += v6;
        ++v13;
      }
      ++v9;
      v8 += v10;
    }
    while (v9 != v6);
  }
  sub_18D1C99C8(a2);
  sub_18D053B2C((uint64_t)&v20, (uint64_t)&v26, a2);
  v16 = v30[0];
  v26 = &unk_1E25C7160;
  v30[0] = 0;
  if (v16)
    MEMORY[0x18D78B5BC](v16, 0x1000C8000313F17);
  result = v25;
  v20 = &unk_1E25C7160;
  v25 = 0;
  if (result)
    return MEMORY[0x18D78B5BC](result, 0x1000C8000313F17);
  return result;
}

void sub_18D192A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a15)
    MEMORY[0x18D78B5BC](a15, 0x1000C8000313F17);
  if (a21)
    MEMORY[0x18D78B5BC](a21, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D192B44(uint64_t a1, uint64_t a2)
{
  sub_18D1CB5B8(a1, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 8));
  return sub_18D073454(a2, a1);
}

void sub_18D192B7C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &off_1E25C7190;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D192BC4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7190;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D192C20(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7340;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D192C7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x100000003;
  *(_QWORD *)a3 = &unk_1E25C7790;
  *(_OWORD *)(a3 + 8) = xmmword_18D313070;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D192CD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D192CE4(uint64_t a1)
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v13 = 0x100000003;
  v11 = &unk_1E25C7790;
  v12 = xmmword_18D313070;
  v14 = &v15;
  v8 = 0x100000134;
  v6 = &unk_1E25C7640;
  v7 = xmmword_18D3130C0;
  v9 = &v10;
  v3 = 0x100000003;
  v1 = &unk_1E25C7790;
  v2 = xmmword_18D313070;
  v4 = &v5;
  sub_18D159EE0(a1, (uint64_t)&v11, (uint64_t)&v6, (uint64_t)&v1, "2");
}

uint64_t raven::RavenPNTEstimator::IsSane(raven::RavenPNTEstimator *this)
{
  int v2;
  cnprint::CNPrinter *v3;
  int8x16_t v4;
  int8x16_t v5;
  uint64_t result;
  float64_t v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BOOL8 v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  double v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unsigned __int8 v60;
  _OWORD v61[35];
  uint64_t v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  void *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _WORD v73[36];
  double v74[2];
  double v75;
  float64x2_t v76;
  double v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 58))
    return 0;
  v70 = 0x10000001ALL;
  v68 = &unk_1E25C70A0;
  v71 = &v72;
  v69 = xmmword_18D319790;
  sub_18D04BE88((uint64_t)&v68, 0.0);
  v65 = 0x10000001CLL;
  v63 = &unk_1E25C72B0;
  v64 = xmmword_18D319780;
  v66 = (double *)&v67;
  v61[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  v61[1] = v61[0];
  v61[2] = v61[0];
  v61[3] = v61[0];
  v61[4] = v61[0];
  v61[5] = v61[0];
  v61[6] = v61[0];
  v61[7] = v61[0];
  v61[8] = v61[0];
  v61[9] = v61[0];
  v61[10] = v61[0];
  v61[11] = v61[0];
  v61[12] = v61[0];
  v61[13] = v61[0];
  v61[14] = v61[0];
  v61[15] = v61[0];
  v61[16] = v61[0];
  v61[17] = v61[0];
  v61[18] = v61[0];
  v61[19] = v61[0];
  v61[20] = v61[0];
  v61[21] = v61[0];
  v61[22] = v61[0];
  v61[23] = v61[0];
  v61[24] = v61[0];
  v61[25] = v61[0];
  v61[26] = v61[0];
  v61[27] = v61[0];
  v61[28] = v61[0];
  v61[29] = v61[0];
  v61[30] = v61[0];
  v61[31] = v61[0];
  v61[32] = v61[0];
  v61[33] = v61[0];
  v61[34] = v61[0];
  v62 = 0x7FF8000000000000;
  v2 = *((unsigned __int8 *)this + 2536);
  LOBYTE(v73[0]) = 0;
  v3 = (cnprint::CNPrinter *)sub_18D1C9BF4((uint64_t)this + 14616, (uint64_t)&v68, v2, 1, 1, (uint64_t)&v63, (uint64_t)v61, (BOOL *)v73, 0.000000015);
  if ((_DWORD)v3)
    return 0;
  v7 = *v66;
  v8 = v66[1];
  v9 = v66[2];
  v10 = sqrt((v8 - v66[22]) * (v8 - v66[22]) + (*v66 - v66[21]) * (*v66 - v66[21]) + (v9 - v66[23]) * (v9 - v66[23]));
  v11 = (double *)*((_QWORD *)this + 146);
  v12 = 170;
  if (*((_BYTE *)this + 2536) == 1)
    v12 = 171;
  v13 = v11[v12];
  if (v10 > v13)
  {
    if (cnprint::CNPrinter::GetLogLevel(v3) <= 1)
    {
      v73[0] = 12;
      LOBYTE(v76.f64[0]) = 1;
      v38 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,user-device dist,%.1lf > %.1lf", v10, v13);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v37) = (_BYTE)v38;
      else
        v37 = *v38;
      goto LABEL_37;
    }
    return 0;
  }
  v52 = v66[4];
  v53 = v66[5];
  v54 = v66[3];
  v14 = v66[13];
  v58 = v66[15];
  v59 = v66[14];
  v5.i64[0] = (uint64_t)v66[16];
  v56 = v66[17];
  v57 = *(double *)v5.i64;
  v4.i64[0] = (uint64_t)v66[18];
  v55 = *(double *)v4.i64;
  v15 = v66[11];
  v16 = v66[12];
  v17 = v66[10];
  v18 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, v4, v5);
  v19 = 93;
  if (v18)
    v19 = 94;
  v20 = v11[176] * v11[v19];
  v21 = fabs(v17);
  v22 = fabs(v15);
  v23 = fabs(v16);
  if (v21 > v20 || v22 > v20 || v23 > v20)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      v73[0] = 12;
      LOBYTE(v76.f64[0]) = 1;
      v39 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,gyro bias,x_dps,%.2lf,y_dps,%.2lf,z_dps,%.2lf,max_dps,%.1lf)", v21 * 57.2957795, v22 * 57.2957795, v23 * 57.2957795, v20 * 57.2957795);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v37) = (_BYTE)v39;
      else
        v37 = *v39;
      goto LABEL_37;
    }
    return 0;
  }
  v24 = v11[174] * v11[91];
  v25 = fabs(v14);
  v26 = fabs(v59);
  v27 = fabs(v58);
  if (v25 > v24 || v26 > v24 || v27 > v24)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      v73[0] = 12;
      LOBYTE(v76.f64[0]) = 1;
      v40 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,accel bias,x_mg,%.2lf,y_mg,%.2lf,z_mg,%.2lf,max_mg,%.1lf)", v25 * 101.971621, v26 * 101.971621, v27 * 101.971621, v24 * 101.971621);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v37) = (_BYTE)v40;
      else
        v37 = *v40;
      goto LABEL_37;
    }
    return 0;
  }
  v28 = 96;
  if (v18)
    v28 = 97;
  v29 = v11[175] * v11[v28];
  v30 = fabs(v57 + -1.0);
  if (v30 > v29 || fabs(v56 + -1.0) > v29 || fabs(v55 + -1.0) > v29)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      v73[0] = 12;
      LOBYTE(v76.f64[0]) = 1;
      v31 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,accel scale,x_ppm,%.2lf,y_ppm,%.2lf,z_ppm,%.2lf,max_ppm,%.1lf)", v30 * 1000000.0, fabs(v56 + -1.0) * 1000000.0, fabs(v55 + -1.0) * 1000000.0, v29 * 1000000.0);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v37) = (_BYTE)v31;
      else
        v37 = *v31;
LABEL_37:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v73, (unsigned __int8 *)&v76, "%s", v32, v33, v34, v35, v36, v37);
      return 0;
    }
    return 0;
  }
  v76.f64[0] = v7;
  v76.f64[1] = v8;
  v77 = v9;
  v41 = cnnavigation::ECEFToLLA(&v76, 1, v74, 0, (uint64_t)v73);
  result = 0;
  if (!v41)
  {
    v42 = v75;
    if (v75 <= 18000.0)
    {
      v50 = sqrt(v52 * v52 + v54 * v54 + v53 * v53);
      if (v50 <= 600.0)
        return 1;
      if (cnprint::CNPrinter::GetLogLevel(0) > 1)
        return 0;
      v73[0] = 12;
      v60 = 1;
      v51 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,speed,%.1lf > %.1lf", v50, 600.0);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v49) = (_BYTE)v51;
      else
        v49 = *v51;
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(0) > 1)
        return 0;
      v73[0] = 12;
      v60 = 1;
      v43 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,altitude,%.1lf > %.1lf", v42, 18000.0);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v49) = (_BYTE)v43;
      else
        v49 = *v43;
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v73, &v60, "%s", v44, v45, v46, v47, v48, v49);
    return 0;
  }
  return result;
}

BOOL raven::RavenPNTEstimator::IsConsistent(raven::RavenPNTEstimator *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 58))
    return 1;
  v1 = 16;
  if (!*((_DWORD *)this + 4846))
    v1 = 8;
  return *(double *)((char *)this + v1 + 19360) < *(double *)(*((_QWORD *)this + 146) + 1464);
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AccelerometerEvent *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  unsigned __int8 v14;
  __int16 v15;
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;

  if (*((_BYTE *)this + 57))
  {
    v16[0] = &unk_1E25C3050;
    v16[1] = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
    v16[2] = v4;
    v17 = *(_OWORD *)((char *)a2 + 104);
    v18 = *((_QWORD *)a2 + 15);
    result = sub_18D1934F4((uint64_t)this + 27592, (uint64_t)v16);
    if (!(_DWORD)result)
      return result;
    v15 = 12;
    v14 = 4;
    v13[0] = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
    v13[1] = v6;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v13, "Could not add measurement - accelerations");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v12) = (_BYTE)this - 72;
    else
      v12 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "%s", v7, v8, v9, v10, v11, v12);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D1934F4(uint64_t a1, uint64_t a2)
{
  int v4;
  double v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
  {
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    v20 = *(_OWORD *)(a2 + 8);
    v21 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 72) = v21;
    *(_OWORD *)(a1 + 56) = v20;
    goto LABEL_34;
  }
  if (v4 == 350 && sub_18D1CB820(a1))
    return 0xFFFFFFFFLL;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v8 = v6;
  v9 = *(_DWORD *)(a1 + 44);
  if (v7)
    v10 = 1;
  else
    v10 = (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  v11 = v10;
  while (1)
  {
    v12 = v9;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48 * v9 + 48) + 16))(a1 + 48 * v9 + 48);
    if ((v11 & 1) != 0)
    {
      v15 = v13 || (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v15 && v7 != v13)
        break;
    }
    if (v8 >= v14)
      goto LABEL_28;
LABEL_21:
    v16 = a1 + 48 + 48 * ((v12 + 1) % 0x15E);
    v17 = a1 + 48 + 48 * v12;
    v18 = *(_OWORD *)(v17 + 8);
    v19 = *(_OWORD *)(v17 + 24);
    *(_QWORD *)(v16 + 40) = *(_QWORD *)(v17 + 40);
    *(_OWORD *)(v16 + 24) = v19;
    *(_OWORD *)(v16 + 8) = v18;
    if (v12 == *(_DWORD *)(a1 + 40))
    {
      v22 = v17 + 8;
      goto LABEL_29;
    }
    v9 = v12 - 1;
    if (!v12)
      v9 = 349;
    if (v9 == *(_DWORD *)(a1 + 44))
      goto LABEL_30;
  }
  if (v7 < v13)
    goto LABEL_21;
LABEL_28:
  v22 = a1 + 48 * ((v12 + 1) % 0x15E) + 56;
LABEL_29:
  v23 = *(_OWORD *)(a2 + 8);
  v24 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)v22 = v23;
  *(_OWORD *)(v22 + 16) = v24;
  v9 = *(_DWORD *)(a1 + 44);
LABEL_30:
  ++*(_DWORD *)(a1 + 8);
  if (v9 == 349)
    v25 = 0;
  else
    v25 = v9 + 1;
  *(_DWORD *)(a1 + 44) = v25;
LABEL_34:
  sub_18D1CB864(a1);
  return 0;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AccessoryVehicleSpeedEvent *a2)
{
  __int128 v4;
  __int128 v5;
  int8x16_t v6;
  cnprint::CNPrinter *v7;
  int8x16_t v8;
  unsigned int v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  cnprint::CNPrinter *v35;
  uint64_t v36;
  char v37;
  cnprint::CNPrinter *v38;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  __int16 v53;
  void *v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t v65;
  double v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t v82;
  char v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  uint64_t v88;
  int8x16_t v89;
  int8x16_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (*((_BYTE *)this + 58))
  {
    v4 = *(_OWORD *)((char *)a2 + 56);
    v91 = *(_OWORD *)((char *)a2 + 40);
    v92 = v4;
    v5 = *(_OWORD *)((char *)a2 + 88);
    v93 = *(_OWORD *)((char *)a2 + 72);
    v94 = v5;
    v6 = *(int8x16_t *)((char *)a2 + 24);
    v89 = *(int8x16_t *)((char *)a2 + 8);
    v90 = v6;
    v7 = (cnprint::CNPrinter *)raven::PopulateAllTimeFields((uint64_t)&v89, (uint64_t)this + 136, v89, v6);
    if (!*((_DWORD *)a2 + 51) || *((_QWORD *)a2 + 30) == *((_QWORD *)a2 + 29))
    {
      if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
      {
        LOWORD(v50) = 12;
        LOBYTE(v53) = 1;
        v54 = (void *)(*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v55 = v20;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v54, "AccessoryVehicleSpeed,rejected,0 speed samples,iOSTime,%.2lf", *(double *)&v91 + (double)v90.i64[1]);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v26) = (_BYTE)this - 72;
        else
          v26 = *((_QWORD *)this + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, (unsigned __int8 *)&v53, "%s", v21, v22, v23, v24, v25, v26);
      }
    }
    else if (*((_BYTE *)this + 1624)
           && ((v9 = *((unsigned __int8 *)this + 1736), v9 > 3) || v9 == 1)
           && *((_BYTE *)this + 1208)
           && ((*((_BYTE *)this + 1320) - 4) & 0xFA) == 0
           && raven::RavenEstimator::IsZUPTAppropriate(this, a2))
    {
      v55 = 0uLL;
      v54 = &unk_1E25C2278;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v66 = 0.0;
      v65 = (int8x16_t)0x7FF8000000000000uLL;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v76 = 0x7FF8000000000000;
      v77 = 0;
      v78 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
      v79 = v78;
      v80 = v78;
      v81 = v78;
      v82 = 0x7FF8000000000000;
      v83 = 0;
      v84 = v78;
      v85 = v78;
      v86 = v78;
      v87 = v78;
      v88 = 0x7FF8000000000000;
      v35 = (cnprint::CNPrinter *)sub_18D193BFC((uint64_t)a2, (uint64_t)&v54, v78, v8);
      if ((_DWORD)v35)
      {
        if (cnprint::CNPrinter::GetLogLevel(v35) > 1)
          return 0xFFFFFFFFLL;
        v53 = 12;
        v52 = 1;
        v50 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v51 = v36;
        v37 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v50, "AccessoryVehicleSpeed,rejected,unable to add ZUPT 2,iOSTime,%.2lf", *(double *)&v91 + (double)v90.i64[1]);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v18) = v37;
        else
          v18 = *((_QWORD *)this + 311);
        goto LABEL_13;
      }
      v38 = (cnprint::CNPrinter *)raven::RavenPNTEstimator::AddUserVelocityMeasurement(this, (const raven::VelocityEvent *)&v54);
      if ((_DWORD)v38)
      {
        if (cnprint::CNPrinter::GetLogLevel(v38) > 1)
          return 0xFFFFFFFFLL;
        v53 = 12;
        v52 = 1;
        v50 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v51 = v39;
        v40 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v50, "AccessoryVehicleSpeed,rejected,unable to add ZUPT 1,iOSTime,%.2lf", *(double *)&v91 + (double)v90.i64[1]);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v18) = v40;
        else
          v18 = *((_QWORD *)this + 311);
        goto LABEL_13;
      }
      v41 = *((unsigned __int8 *)this + 232);
      *((_OWORD *)this + 15) = v55;
      if (!v41)
        *((_BYTE *)this + 232) = 1;
      if (cnprint::CNPrinter::GetLogLevel(v38) <= 1)
      {
        v53 = 12;
        v52 = 1;
        v50 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v51 = v42;
        v43 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v50, "AccessoryVehicleSpeed,accepted,ZUPT,iOSTime,%.2lf,speed,%.2lf", *(double *)&v91 + (double)v90.i64[1], *(double *)(*((_QWORD *)a2 + 30) - 8));
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v49) = v43;
        else
          v49 = *((_QWORD *)this + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v53, &v52, "%s", v44, v45, v46, v47, v48, v49);
      }
    }
    else
    {
      v55 = 0uLL;
      v54 = &unk_1E25C2438;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
      v66 = NAN;
      v10 = (cnprint::CNPrinter *)sub_18D193D60((uint64_t)a2, (uint64_t)&v54, v65, v8);
      if ((_DWORD)v10)
      {
        if (cnprint::CNPrinter::GetLogLevel(v10) > 1)
          return 0xFFFFFFFFLL;
        v53 = 12;
        v52 = 1;
        v50 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v51 = v11;
        v12 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v50, "AccessoryVehicleSpeed,rejected,unable to add USPD,iOSTime,%.2lf", *(double *)&v91 + (double)v90.i64[1]);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v18) = v12;
        else
          v18 = *((_QWORD *)this + 311);
LABEL_13:
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v53, &v52, "%s", v13, v14, v15, v16, v17, v18);
        return 0xFFFFFFFFLL;
      }
      if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
      {
        v53 = 12;
        v52 = 1;
        v50 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v51 = v27;
        v28 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v50, "AccessoryVehicleSpeed,accepted,USPD,iOSTime,%.2lf,speed,%.2lf,speedUnc,%.2lf", *(double *)&v91 + (double)v90.i64[1], *(double *)&v65.i64[1], v66);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v34) = v28;
        else
          v34 = *((_QWORD *)this + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v53, &v52, "%s", v29, v30, v31, v32, v33, v34);
      }
      raven::RavenPNTEstimator::HandleEvent(this, (const raven::UserSpeedEvent *)&v54);
    }
  }
  return 0;
}

uint64_t sub_18D193BFC(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v5;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20[2];
  unsigned __int8 v21;

  if (!*(_DWORD *)(a1 + 204) || (v5 = *(_QWORD *)(a1 + 240), v5 == *(_QWORD *)(a1 + 232)))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v20[0]) = 12;
      v21 = 1;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v19 = v13 + (double)v12;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v20, &v21, "t,%.2lf,AccessoryVehicleSpeed,rejected,0 speed samples", v14, v15, v16, v17, v18, SLOBYTE(v19));
    }
  }
  else
  {
    a4.i64[0] = 0x3F847AE147AE147BLL;
    if (*(double *)(v5 - 8) <= 0.01)
    {
      a3.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 216) - 8);
      v20[0] = 0;
      v20[1] = 0;
      CNTimeSpan::SetTimeSpan(v20, 0, a3, a4);
      v9 = CNTimeSpan::operator+(a1 + 104, v20, v7, v8);
      result = 0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_QWORD *)(a2 + 8) = v9;
      *(_QWORD *)(a2 + 16) = v11;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0x7FF8000000000000;
      *(_OWORD *)(a2 + 136) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a2 + 168) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + 120) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 288) = 0;
      *(_QWORD *)(a2 + 296) = 0;
      *(_QWORD *)(a2 + 304) = 0;
      *(_QWORD *)(a2 + 312) = 0x3F1A36E2EB1C432DLL;
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
      *(_OWORD *)(a2 + 336) = xmmword_18D3198C0;
      *(_QWORD *)(a2 + 352) = 0x3F1A36E2EB1C432DLL;
      *(_BYTE *)(a2 + 280) = 1;
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D193D60(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t __y[2];
  unsigned __int8 v32;

  if (!*(_DWORD *)(a1 + 204) || *(_QWORD *)(a1 + 240) == *(_QWORD *)(a1 + 232))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(__y[0]) = 12;
      v32 = 1;
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v30 = v23 + (double)v22;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__y, &v32, "t,%.2lf,AccessoryVehicleSpeed,rejected,0 speed samples", v24, v25, v26, v27, v28, SLOBYTE(v30));
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    a3.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 216) - 8);
    __y[0] = 0;
    __y[1] = 0;
    CNTimeSpan::SetTimeSpan(__y, 0, a3, a4);
    v8 = CNTimeSpan::operator+(a1 + 104, __y, v6, v7);
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0x7FF8000000000000;
    v10 = *(double *)(*(_QWORD *)(a1 + 240) - 8);
    v11 = v10 * 0.1;
    if (v10 * 0.1 <= 0.5)
      v11 = 0.5;
    v12 = fmin(v11, 10.0);
    *(double *)(a2 + 104) = v10;
    *(double *)(a2 + 112) = v12;
    if (v10 <= 0.01)
      return 0;
    v13 = modf(v10, (long double *)__y);
    result = 0;
    if (v12 < 1.0 && v13 >= 0.0 && v13 <= 0.0)
    {
      *(double *)(a2 + 112) = v12 + 1.0;
      if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
      {
        LOWORD(__y[0]) = 12;
        v32 = 1;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        v29 = v16 + (double)v15;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__y, &v32, "t,%.2lf,AccessoryVehicleSpeed,accepted, speed unc increased", v17, v18, v19, v20, v21, SLOBYTE(v29));
      }
      return 0;
    }
  }
  return result;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::UserSpeedEvent *a2)
{
  double v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  unsigned __int8 v17;
  __int16 v18;
  _QWORD v19[4];
  char v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  double *v31;
  double v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  if (!*((_BYTE *)this + 57) || !*((_BYTE *)this + 58))
    return 0xFFFFFFFFLL;
  v35 = 0x100000003;
  v33 = &unk_1E25C7790;
  v4 = *((double *)a2 + 14);
  v37 = *((_QWORD *)a2 + 13);
  v30 = 0x300000003;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v34 = v5;
  v36 = &v37;
  v28 = &unk_1E25C78E0;
  v29 = v5;
  v31 = &v32;
  v32 = v4 * v4;
  v27 = *(_OWORD *)((char *)a2 + 8);
  sub_18D1C7988(v19, 26);
  v19[0] = off_1E25C3108;
  v21 = v27;
  v22 = (char *)this + 2696;
  v23 = (char *)this + 14600;
  v24 = (char *)this + 14616;
  v25 = (char *)this + 2536;
  v26 = (char *)this + 2576;
  if (sub_18D1AEE1C((uint64_t)this + 61288, (double *)&v27, (uint64_t)&v33, (uint64_t)&v28, (uint64_t)sub_18D1AE8AC, (uint64_t)v19))
  {
    v18 = 12;
    v17 = 4;
    v16[0] = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
    v16[1] = v6;
    v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v16, "Could not add measurement - user speed");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v13) = v7;
    else
      v13 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "%s", v8, v9, v10, v11, v12, v13);
    v14 = 0xFFFFFFFFLL;
  }
  else
  {
    v14 = 0;
  }
  v19[0] = &unk_1E25B8EE0;
  if (v20 < 0)
    operator delete((void *)v19[2]);
  return v14;
}

void sub_18D1940D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenPNTEstimator::SetStateParameterization(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  float64_t v72;
  float64_t v73;
  float64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64_t v93;
  float64_t v94;
  float64_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  double v134;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  int v157;
  int64x2_t v158[35];
  uint64_t v159;
  _BYTE v160[64];
  void *v161;
  __int128 v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE v165[24];
  void *v166;
  __int128 v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  void *v171;
  __int128 v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE v175[24];
  void *v176;
  __int128 v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  void *v181;
  __int128 v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE v185[24];
  void *v186;
  __int128 v187;
  uint64_t v188;
  _BYTE *v189;
  _BYTE v190[24];
  void *v191;
  __int128 v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE v195[72];
  void *v196;
  __int128 v197;
  uint64_t v198;
  _BYTE *v199;
  _BYTE v200[72];
  void *v201;
  __int128 v202;
  uint64_t v203;
  _BYTE *v204;
  _BYTE v205[72];
  void *v206;
  __int128 v207;
  uint64_t v208;
  _BYTE *v209;
  _BYTE v210[72];
  double v211;
  __int128 v212;
  uint64_t v213;
  _BYTE *v214;
  _BYTE v215[72];
  void *__p;
  __int128 v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD v220[9];
  _QWORD v221[5];
  uint64_t v222;
  _QWORD v223[5];
  uint64_t v224;
  unsigned __int8 v225[40];
  uint64_t v226;
  _QWORD v227[5];
  uint64_t v228;
  unsigned __int8 v229[40];
  uint64_t v230;
  unsigned __int8 v231[40];
  uint64_t v232;
  void *v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE v237[248];
  unsigned __int8 v238[264];
  int64x2_t v239[2];
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  uint64_t v273;
  void *v274;
  __int128 v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  void *v279;
  __int128 v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  void *v284;
  __int128 v285;
  uint64_t v286;
  _QWORD *v287;
  _QWORD v288[3];
  void *v289;
  __int128 v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD v293[3];
  _QWORD v294[2];
  int v295;
  int v296;
  uint64_t v297;
  _BYTE *v298;
  _BYTE v299[24];
  _QWORD v300[2];
  int v301;
  int v302;
  uint64_t v303;
  _BYTE *v304;
  _BYTE v305[24];
  _QWORD v306[2];
  int v307;
  int v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE v311[24];
  _QWORD v312[2];
  int v313;
  int v314;
  uint64_t v315;
  _BYTE *v316;
  _BYTE v317[24];
  float64x2_t v318;
  double v319;
  double v320;
  float64x2_t v321;
  double v322;
  double v323;
  void *v324;
  __int128 v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  int v329;
  void *v330;
  __int128 v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  int v335;
  void *v336;
  __int128 v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  int v341;
  void *v342;
  __int128 v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  int v347;
  void *v348;
  __int128 v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  int v353;
  void *v354;
  __int128 v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  int v359;
  void *v360;
  __int128 v361;
  uint64_t v362;
  double *v363;
  uint64_t v364;
  _BYTE v365[32];
  double *v366;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = *v3;
  if (*(_BYTE *)(*(_QWORD *)(v2 + 1168) + 3820))
    _ZF = 0;
  else
    _ZF = v4 == 1;
  if (_ZF)
    return 0;
  v6 = v3;
  v7 = v2;
  v239[0].i16[0] = 12;
  v158[0].i8[0] = 2;
  v8 = v2 + 2488;
  v9 = v2 + 80;
  cnprint::CNLogFormatter::FormatGeneral(v2 + 2488, v2 + 80, "SetStateParameterization() attempting to update state parameterization from %hu to %hu.", *(unsigned __int8 *)(v2 + 2536), v4);
  if (*(char *)(v7 + 2511) >= 0)
    LOBYTE(v15) = v8;
  else
    v15 = *(_QWORD *)(v7 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v239, (unsigned __int8 *)v158, "%s", v10, v11, v12, v13, v14, v15);
  if (*(unsigned __int8 *)(v7 + 2536) == *v6)
    return 0;
  if (!*(_BYTE *)(v7 + 58))
  {
    v239[0].i16[0] = 12;
    v158[0].i8[0] = 4;
    cnprint::CNLogFormatter::FormatGeneral(v8, v9, "SetStateParameterization() failed; estimator not initialized.");
    if (*(char *)(v7 + 2511) >= 0)
      LOBYTE(v65) = v8;
    else
      v65 = *(_QWORD *)(v7 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v239, (unsigned __int8 *)v158, "%s", v60, v61, v62, v63, v64, v65);
    return 0xFFFFFFFFLL;
  }
  v151 = v7 + 14616;
  sub_18D1D8C14((uint64_t)v365, v7 + 14616);
  v362 = 0x10000001ALL;
  v360 = &unk_1E25C70A0;
  v361 = xmmword_18D319790;
  v363 = (double *)&v364;
  if (*(_DWORD *)(v7 + 16140))
    v17 = v7 + 15584;
  else
    v17 = v7 + 15040;
  sub_18D053AA8((uint64_t)&v360, v17);
  v356 = 0x100000003;
  v354 = &unk_1E25C77C0;
  v355 = xmmword_18D313070;
  v359 = 2;
  v357 = &v358;
  v358 = 0x100000000;
  v350 = 0x100000003;
  v348 = &unk_1E25C77C0;
  v349 = xmmword_18D313070;
  v353 = 23;
  v351 = &v352;
  v352 = 0x1600000015;
  v344 = 0x100000003;
  v342 = &unk_1E25C77C0;
  v343 = xmmword_18D313070;
  v347 = 27;
  v345 = &v346;
  v346 = 0x1A00000019;
  v338 = 0x100000003;
  v336 = &unk_1E25C77C0;
  v337 = xmmword_18D313070;
  v341 = 2;
  v339 = &v340;
  v340 = 0x100000000;
  v332 = 0x100000003;
  v330 = &unk_1E25C77C0;
  v331 = xmmword_18D313070;
  v335 = 22;
  v333 = &v334;
  v334 = 0x1500000014;
  v240.i64[1] = 0x1800000017;
  v326 = 0x100000003;
  v324 = &unk_1E25C77C0;
  v325 = xmmword_18D313070;
  v329 = 25;
  v327 = &v328;
  v328 = 0x1800000017;
  v18 = v366;
  v19 = v366[6];
  v20 = v366[7];
  v21 = v366[8];
  v22 = v366[9];
  v23 = sqrt(v20 * v20 + v19 * v19 + v21 * v21 + v22 * v22);
  v24 = 1.0;
  v25 = 0.0;
  v26 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  v29 = 1.0;
  if (fabs(v23) >= 2.22044605e-16)
  {
    v26 = v19 / v23;
    v27 = v20 / v23;
    v28 = v21 / v23;
    v29 = v22 / v23;
  }
  v321.f64[0] = v26;
  v321.f64[1] = v27;
  v322 = v28;
  v323 = v29;
  v30 = sqrt(v27 * v27 + v26 * v26 + v28 * v28 + v29 * v29);
  v31 = 0.0;
  v32 = 0.0;
  if (fabs(v30) >= 2.22044605e-16)
  {
    v25 = -v26 / v30;
    v31 = -v27 / v30;
    v32 = -v28 / v30;
    v24 = v29 / v30;
  }
  v318.f64[0] = v25;
  v318.f64[1] = v31;
  v319 = v32;
  v320 = v24;
  v33 = (DWORD1(v355) * v355);
  v315 = 0x100000003;
  v312[0] = &unk_1E25C7790;
  v312[1] = v355;
  v313 = v33;
  v314 = v355;
  v34 = v317;
  v316 = v317;
  if ((_DWORD)v33)
  {
    v35 = v357;
    do
    {
      v36 = *(int *)v35;
      v35 = (uint64_t *)((char *)v35 + 4);
      *v34++ = *(_QWORD *)&v18[v36];
      --v33;
    }
    while (v33);
  }
  v37 = (DWORD1(v349) * v349);
  v309 = 0x100000003;
  v306[0] = &unk_1E25C7790;
  v306[1] = v349;
  v307 = v37;
  v308 = v349;
  v38 = v311;
  v310 = v311;
  if ((_DWORD)v37)
  {
    v39 = v351;
    do
    {
      v40 = *(int *)v39;
      v39 = (uint64_t *)((char *)v39 + 4);
      *v38++ = *(_QWORD *)&v18[v40];
      --v37;
    }
    while (v37);
  }
  v41 = (DWORD1(v343) * v343);
  v303 = 0x100000003;
  v300[0] = &unk_1E25C7790;
  v300[1] = v343;
  v301 = v41;
  v302 = v343;
  v42 = v305;
  v304 = v305;
  if ((_DWORD)v41)
  {
    v43 = v345;
    do
    {
      v44 = *(int *)v43;
      v43 = (uint64_t *)((char *)v43 + 4);
      *v42++ = *(_QWORD *)&v18[v44];
      --v41;
    }
    while (v41);
  }
  v150 = v7 + 15032;
  v45 = (DWORD1(v337) * v337);
  v297 = 0x100000003;
  v294[0] = &unk_1E25C7790;
  v294[1] = v337;
  v295 = v45;
  v296 = v337;
  v46 = v299;
  v298 = v299;
  if ((_DWORD)v45)
  {
    v47 = v339;
    v48 = v363;
    do
    {
      v49 = *(int *)v47;
      v47 = (uint64_t *)((char *)v47 + 4);
      *v46++ = *(_QWORD *)&v48[v49];
      --v45;
    }
    while (v45);
  }
  v50 = 0;
  v291 = 0x100000003;
  v289 = &unk_1E25C7790;
  v290 = xmmword_18D313070;
  v292 = v293;
  v51 = v363;
  do
  {
    v293[v50] = *(_QWORD *)&v51[*((int *)&v334 + v50)];
    ++v50;
  }
  while (v50 != 3);
  v52 = 0;
  v286 = 0x100000003;
  v284 = &unk_1E25C7790;
  v285 = xmmword_18D313070;
  v287 = v288;
  v53 = v363;
  do
  {
    v288[v52] = *(_QWORD *)&v53[*((int *)&v328 + v52)];
    ++v52;
  }
  while (v52 != 3);
  v281 = 0x10000001ALL;
  v279 = &unk_1E25C70A0;
  v282 = &v283;
  v280 = xmmword_18D319790;
  sub_18D04BE88((uint64_t)&v279, 0.0);
  v276 = 0x10000001CLL;
  v274 = &unk_1E25C72B0;
  v275 = xmmword_18D319780;
  v277 = &v278;
  v239[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  v239[1] = v239[0];
  v240 = v239[0];
  v241 = v239[0];
  v242 = v239[0];
  v243 = v239[0];
  v244 = v239[0];
  v245 = v239[0];
  v246 = v239[0];
  v247 = v239[0];
  v248 = v239[0];
  v249 = v239[0];
  v250 = v239[0];
  v251 = v239[0];
  v252 = v239[0];
  v253 = v239[0];
  v254 = v239[0];
  v255 = v239[0];
  v256 = v239[0];
  v257 = v239[0];
  v258 = v239[0];
  v259 = v239[0];
  v260 = v239[0];
  v261 = v239[0];
  v262 = v239[0];
  v263 = v239[0];
  v264 = v239[0];
  v265 = v239[0];
  v266 = v239[0];
  v267 = v239[0];
  v268 = v239[0];
  v269 = v239[0];
  v270 = v239[0];
  v271 = v239[0];
  v272 = v239[0];
  v273 = 0x7FF8000000000000;
  v158[0].i8[0] = 0;
  if (sub_18D1C9BF4((uint64_t)v365, (uint64_t)&v279, 0, 1, 1, (uint64_t)&v274, (uint64_t)v239, (BOOL *)v158[0].i8, 0.000000015))
  {
    v158[0].i16[0] = 12;
    v238[0] = 4;
    cnprint::CNLogFormatter::FormatGeneral(v8, v9, "SetStateParameterization() failed; pre-transformation GetFullStateEstimate() failed.");
    if (*(char *)(v7 + 2511) >= 0)
      LOBYTE(v59) = v8;
    else
      v59 = *(_QWORD *)(v7 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v158, v238, "%s", v54, v55, v56, v57, v58, v59);
    return 0xFFFFFFFFLL;
  }
  sub_18D1D8C14((uint64_t)v238, v151);
  sub_18D1D6A24((uint64_t)v237, (uint64_t)&v360);
  v67 = 26;
  sub_18D1C96FC((uint64_t)&v233, 26, 26);
  v234 = xmmword_18D319890;
  sub_18D04BE88((uint64_t)&v233, 0.0);
  v68 = 0;
  v69 = HIDWORD(v234) + 1;
  v70 = v235;
  do
  {
    *(_QWORD *)(v70 + 8 * v68) = 0x3FF0000000000000;
    v68 += v69;
    --v67;
  }
  while (v67);
  v71 = *v6;
  if (*v6)
  {
    if (v71 == 1)
    {
      cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v321, (uint64_t)&v152);
      v73 = v363[6];
      v72 = v363[7];
      v74 = v363[8];
      v188 = 0x100000003;
      v186 = &unk_1E25C7790;
      v187 = xmmword_18D313070;
      v189 = v190;
      sub_18D0540FC((uint64_t)v306, (uint64_t)v312, (uint64_t)&v186);
      v183 = 0x100000003;
      v181 = &unk_1E25C7790;
      v182 = xmmword_18D313070;
      v184 = v185;
      sub_18D0540FC((uint64_t)&v289, (uint64_t)v294, (uint64_t)&v181);
      sub_18D192C7C((uint64_t)&v152, (uint64_t)&v186, (uint64_t)v231);
      sub_18D1C9120((uint64_t)v158, (uint64_t)v238, (uint64_t)&v348);
      sub_18D1BE7FC((uint64_t)v158, (uint64_t)v231);
      sub_18D192C7C((uint64_t)&v152, (uint64_t)v300, (uint64_t)v231);
      sub_18D1C9120((uint64_t)v158, (uint64_t)v238, (uint64_t)&v342);
      sub_18D1BE7FC((uint64_t)v158, (uint64_t)v231);
      cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v321, (uint64_t)v231);
      cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v321, (uint64_t)v229);
      cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v321, (uint64_t)v227);
      cnrotation::CNRotation::dRdq4(&v321, (uint64_t)v225);
      *(_QWORD *)&v75.f64[0] = v241.i64[0];
      v218 = 0x300000003;
      __p = &unk_1E25C78E0;
      v217 = xmmword_18D30BB60;
      v219 = v220;
      v76 = sub_18D1C94E0((uint64_t)v231, (uint64_t)&__p, v75);
      *(_QWORD *)&v76.f64[0] = v242.i64[1];
      v213 = 0x300000003;
      v211 = COERCE_DOUBLE(&unk_1E25C78E0);
      v212 = xmmword_18D30BB60;
      v214 = v215;
      sub_18D1C94E0((uint64_t)v229, (uint64_t)&v211, v76);
      sub_18D1BE894((uint64_t)&__p, (uint64_t)&v211, (uint64_t)v221);
      *(_QWORD *)&v77.f64[0] = v244.i64[0];
      v208 = 0x300000003;
      v206 = &unk_1E25C78E0;
      v207 = xmmword_18D30BB60;
      v209 = v210;
      sub_18D1C94E0((uint64_t)v227, (uint64_t)&v206, v77);
      sub_18D1BE894((uint64_t)v221, (uint64_t)&v206, (uint64_t)v158);
      *(_QWORD *)&v78.f64[0] = v245.i64[1];
      v203 = 0x300000003;
      v201 = &unk_1E25C78E0;
      v202 = xmmword_18D30BB60;
      v204 = v205;
      sub_18D1C94E0((uint64_t)v225, (uint64_t)&v201, v78);
      sub_18D1BE894((uint64_t)v158, (uint64_t)&v201, (uint64_t)v223);
      *(_QWORD *)&v79.f64[0] = v241.i64[1];
      v213 = 0x300000003;
      v211 = COERCE_DOUBLE(&unk_1E25C78E0);
      v212 = xmmword_18D30BB60;
      v214 = v215;
      v80 = sub_18D1C94E0((uint64_t)v231, (uint64_t)&v211, v79);
      *(_QWORD *)&v80.f64[0] = v243.i64[0];
      v208 = 0x300000003;
      v206 = &unk_1E25C78E0;
      v207 = xmmword_18D30BB60;
      v209 = v210;
      sub_18D1C94E0((uint64_t)v229, (uint64_t)&v206, v80);
      sub_18D1BE894((uint64_t)&v211, (uint64_t)&v206, (uint64_t)&__p);
      *(_QWORD *)&v81.f64[0] = v244.i64[1];
      v203 = 0x300000003;
      v201 = &unk_1E25C78E0;
      v202 = xmmword_18D30BB60;
      v204 = v205;
      sub_18D1C94E0((uint64_t)v227, (uint64_t)&v201, v81);
      sub_18D1BE894((uint64_t)&__p, (uint64_t)&v201, (uint64_t)v158);
      *(_QWORD *)&v82.f64[0] = v246.i64[0];
      v198 = 0x300000003;
      v196 = &unk_1E25C78E0;
      v197 = xmmword_18D30BB60;
      v199 = v200;
      sub_18D1C94E0((uint64_t)v225, (uint64_t)&v196, v82);
      sub_18D1BE894((uint64_t)v158, (uint64_t)&v196, (uint64_t)v221);
      *(_QWORD *)&v83.f64[0] = v242.i64[0];
      v208 = 0x300000003;
      v206 = &unk_1E25C78E0;
      v207 = xmmword_18D30BB60;
      v209 = v210;
      v84 = sub_18D1C94E0((uint64_t)v231, (uint64_t)&v206, v83);
      *(_QWORD *)&v84.f64[0] = v243.i64[1];
      v203 = 0x300000003;
      v201 = &unk_1E25C78E0;
      v202 = xmmword_18D30BB60;
      v204 = v205;
      sub_18D1C94E0((uint64_t)v229, (uint64_t)&v201, v84);
      sub_18D1BE894((uint64_t)&v206, (uint64_t)&v201, (uint64_t)&v211);
      *(_QWORD *)&v85.f64[0] = v245.i64[0];
      v198 = 0x300000003;
      v196 = &unk_1E25C78E0;
      v197 = xmmword_18D30BB60;
      v199 = v200;
      sub_18D1C94E0((uint64_t)v227, (uint64_t)&v196, v85);
      sub_18D1BE894((uint64_t)&v211, (uint64_t)&v196, (uint64_t)v158);
      *(_QWORD *)&v86.f64[0] = v246.i64[1];
      v193 = 0x300000003;
      v191 = &unk_1E25C78E0;
      v192 = xmmword_18D30BB60;
      v194 = v195;
      sub_18D1C94E0((uint64_t)v225, (uint64_t)&v191, v86);
      sub_18D1BE894((uint64_t)v158, (uint64_t)&v191, (uint64_t)&__p);
      sub_18D192C7C((uint64_t)&v152, (uint64_t)&v181, (uint64_t)&v196);
      sub_18D192C7C((uint64_t)v223, (uint64_t)&v186, (uint64_t)&v176);
      v193 = 0x100000003;
      v191 = &unk_1E25C7790;
      *(_QWORD *)&v87.f64[1] = 0x300000003;
      v192 = xmmword_18D313070;
      v194 = v195;
      v87.f64[0] = v73;
      sub_18D1C94E0((uint64_t)&v176, (uint64_t)&v191, v87);
      sub_18D1B2810((uint64_t)&v201, (uint64_t)&v196, (uint64_t)&v191);
      sub_18D192C7C((uint64_t)v221, (uint64_t)&v186, (uint64_t)&v166);
      v173 = 0x100000003;
      v171 = &unk_1E25C7790;
      *(_QWORD *)&v88.f64[1] = 0x300000003;
      v172 = xmmword_18D313070;
      v174 = v175;
      v88.f64[0] = v72;
      sub_18D1C94E0((uint64_t)&v166, (uint64_t)&v171, v88);
      sub_18D1B2810((uint64_t)&v206, (uint64_t)&v201, (uint64_t)&v171);
      sub_18D192C7C((uint64_t)&__p, (uint64_t)&v186, (uint64_t)v160);
      v163 = 0x100000003;
      v161 = &unk_1E25C7790;
      *(_QWORD *)&v89.f64[1] = 0x300000003;
      v162 = xmmword_18D313070;
      v164 = v165;
      v89.f64[0] = v74;
      sub_18D1C94E0((uint64_t)v160, (uint64_t)&v161, v89);
      sub_18D1B2810((uint64_t)&v211, (uint64_t)&v206, (uint64_t)&v161);
      sub_18D1C9120((uint64_t)v158, (uint64_t)v237, (uint64_t)&v330);
      sub_18D1BE7FC((uint64_t)v158, (uint64_t)&v211);
      sub_18D192C7C((uint64_t)&v152, (uint64_t)&v284, (uint64_t)&v196);
      sub_18D192C7C((uint64_t)v223, (uint64_t)v300, (uint64_t)&v176);
      v193 = 0x100000003;
      v191 = &unk_1E25C7790;
      *(_QWORD *)&v90.f64[1] = 0x300000003;
      v192 = xmmword_18D313070;
      v194 = v195;
      v90.f64[0] = v73;
      sub_18D1C94E0((uint64_t)&v176, (uint64_t)&v191, v90);
      sub_18D1B2810((uint64_t)&v201, (uint64_t)&v196, (uint64_t)&v191);
      sub_18D192C7C((uint64_t)v221, (uint64_t)v300, (uint64_t)&v166);
      v173 = 0x100000003;
      v171 = &unk_1E25C7790;
      *(_QWORD *)&v91.f64[1] = 0x300000003;
      v172 = xmmword_18D313070;
      v174 = v175;
      v91.f64[0] = v72;
      sub_18D1C94E0((uint64_t)&v166, (uint64_t)&v171, v91);
      sub_18D1B2810((uint64_t)&v206, (uint64_t)&v201, (uint64_t)&v171);
      sub_18D192C7C((uint64_t)&__p, (uint64_t)v300, (uint64_t)v160);
      v163 = 0x100000003;
      v161 = &unk_1E25C7790;
      *(_QWORD *)&v92.f64[1] = 0x300000003;
      v162 = xmmword_18D313070;
      v164 = v165;
      v92.f64[0] = v74;
      sub_18D1C94E0((uint64_t)v160, (uint64_t)&v161, v92);
      sub_18D1B2810((uint64_t)&v211, (uint64_t)&v206, (uint64_t)&v161);
      sub_18D1C9120((uint64_t)v158, (uint64_t)v237, (uint64_t)&v324);
      sub_18D1BE7FC((uint64_t)v158, (uint64_t)&v211);
      sub_18D192C7C((uint64_t)v223, (uint64_t)&v186, (uint64_t)&v211);
      sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, 6);
      sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
      sub_18D192C7C((uint64_t)v221, (uint64_t)&v186, (uint64_t)&v211);
      sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, 7);
      sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
      sub_18D192C7C((uint64_t)&__p, (uint64_t)&v186, (uint64_t)&v211);
      sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, 8);
      sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
      v213 = 0x300000003;
      v211 = COERCE_DOUBLE(&unk_1E25C78E0);
      v212 = xmmword_18D30BB60;
      v214 = v215;
      sub_18D054E78((uint64_t)&v152, (uint64_t)&v211);
      sub_18D04F764((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, (uint64_t)&v336);
      sub_18D16171C((uint64_t)v158, (uint64_t)&v211);
      sub_18D04F764((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, (uint64_t)&v330);
      sub_18D16171C((uint64_t)v158, (uint64_t)&v152);
      sub_18D192C7C((uint64_t)v223, (uint64_t)v300, (uint64_t)&v211);
      sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v324, 6);
      sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
      sub_18D192C7C((uint64_t)v221, (uint64_t)v300, (uint64_t)&v211);
      sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v324, 7);
      sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
      sub_18D192C7C((uint64_t)&__p, (uint64_t)v300, (uint64_t)&v211);
      sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v324, 8);
      sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
      sub_18D04F764((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v324, (uint64_t)&v324);
      sub_18D16171C((uint64_t)v158, (uint64_t)&v152);
    }
    else if (v71 == 2)
    {
      __assert_rtn("SetStateParameterization", "ravenpntestimator.cpp", 6472, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
    }
  }
  else
  {
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v318, (uint64_t)&v152);
    v94 = v363[6];
    v93 = v363[7];
    v95 = v363[8];
    sub_18D192C7C((uint64_t)&v152, (uint64_t)v306, (uint64_t)v229);
    sub_18D1B2810((uint64_t)v231, (uint64_t)v312, (uint64_t)v229);
    sub_18D1C9120((uint64_t)v158, (uint64_t)v238, (uint64_t)&v348);
    sub_18D1BE7FC((uint64_t)v158, (uint64_t)v231);
    sub_18D192C7C((uint64_t)&v152, (uint64_t)v300, (uint64_t)v231);
    sub_18D1C9120((uint64_t)v158, (uint64_t)v238, (uint64_t)&v342);
    sub_18D1BE7FC((uint64_t)v158, (uint64_t)v231);
    cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v318, (uint64_t)v231);
    cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v318, (uint64_t)v229);
    cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v318, (uint64_t)v227);
    cnrotation::CNRotation::dRdq4(&v318, (uint64_t)v225);
    *(_QWORD *)&v96.f64[0] = v241.i64[0];
    v218 = 0x300000003;
    __p = &unk_1E25C78E0;
    v217 = xmmword_18D30BB60;
    v219 = v220;
    v97 = sub_18D1C94E0((uint64_t)v231, (uint64_t)&__p, v96);
    *(_QWORD *)&v97.f64[0] = v242.i64[1];
    v213 = 0x300000003;
    v211 = COERCE_DOUBLE(&unk_1E25C78E0);
    v212 = xmmword_18D30BB60;
    v214 = v215;
    sub_18D1C94E0((uint64_t)v229, (uint64_t)&v211, v97);
    sub_18D1BE894((uint64_t)&__p, (uint64_t)&v211, (uint64_t)v221);
    *(_QWORD *)&v98.f64[0] = v244.i64[0];
    v208 = 0x300000003;
    v206 = &unk_1E25C78E0;
    v207 = xmmword_18D30BB60;
    v209 = v210;
    sub_18D1C94E0((uint64_t)v227, (uint64_t)&v206, v98);
    sub_18D1BE894((uint64_t)v221, (uint64_t)&v206, (uint64_t)v158);
    *(_QWORD *)&v99.f64[0] = v245.i64[1];
    v203 = 0x300000003;
    v201 = &unk_1E25C78E0;
    v202 = xmmword_18D30BB60;
    v204 = v205;
    sub_18D1C94E0((uint64_t)v225, (uint64_t)&v201, v99);
    sub_18D1BE894((uint64_t)v158, (uint64_t)&v201, (uint64_t)v223);
    *(_QWORD *)&v100.f64[0] = v241.i64[1];
    v213 = 0x300000003;
    v211 = COERCE_DOUBLE(&unk_1E25C78E0);
    v212 = xmmword_18D30BB60;
    v214 = v215;
    v101 = sub_18D1C94E0((uint64_t)v231, (uint64_t)&v211, v100);
    *(_QWORD *)&v101.f64[0] = v243.i64[0];
    v208 = 0x300000003;
    v206 = &unk_1E25C78E0;
    v207 = xmmword_18D30BB60;
    v209 = v210;
    sub_18D1C94E0((uint64_t)v229, (uint64_t)&v206, v101);
    sub_18D1BE894((uint64_t)&v211, (uint64_t)&v206, (uint64_t)&__p);
    *(_QWORD *)&v102.f64[0] = v244.i64[1];
    v203 = 0x300000003;
    v201 = &unk_1E25C78E0;
    v202 = xmmword_18D30BB60;
    v204 = v205;
    sub_18D1C94E0((uint64_t)v227, (uint64_t)&v201, v102);
    sub_18D1BE894((uint64_t)&__p, (uint64_t)&v201, (uint64_t)v158);
    *(_QWORD *)&v103.f64[0] = v246.i64[0];
    v198 = 0x300000003;
    v196 = &unk_1E25C78E0;
    v197 = xmmword_18D30BB60;
    v199 = v200;
    sub_18D1C94E0((uint64_t)v225, (uint64_t)&v196, v103);
    sub_18D1BE894((uint64_t)v158, (uint64_t)&v196, (uint64_t)v221);
    *(_QWORD *)&v104.f64[0] = v242.i64[0];
    v208 = 0x300000003;
    v206 = &unk_1E25C78E0;
    v207 = xmmword_18D30BB60;
    v209 = v210;
    v105 = sub_18D1C94E0((uint64_t)v231, (uint64_t)&v206, v104);
    *(_QWORD *)&v105.f64[0] = v243.i64[1];
    v203 = 0x300000003;
    v201 = &unk_1E25C78E0;
    v202 = xmmword_18D30BB60;
    v204 = v205;
    sub_18D1C94E0((uint64_t)v229, (uint64_t)&v201, v105);
    sub_18D1BE894((uint64_t)&v206, (uint64_t)&v201, (uint64_t)&v211);
    *(_QWORD *)&v106.f64[0] = v245.i64[0];
    v198 = 0x300000003;
    v196 = &unk_1E25C78E0;
    v197 = xmmword_18D30BB60;
    v199 = v200;
    sub_18D1C94E0((uint64_t)v227, (uint64_t)&v196, v106);
    sub_18D1BE894((uint64_t)&v211, (uint64_t)&v196, (uint64_t)v158);
    *(_QWORD *)&v107.f64[0] = v246.i64[1];
    v193 = 0x300000003;
    v191 = &unk_1E25C78E0;
    v192 = xmmword_18D30BB60;
    v194 = v195;
    sub_18D1C94E0((uint64_t)v225, (uint64_t)&v191, v107);
    sub_18D1BE894((uint64_t)v158, (uint64_t)&v191, (uint64_t)&__p);
    sub_18D192C7C((uint64_t)&v152, (uint64_t)&v289, (uint64_t)&v191);
    sub_18D1B2810((uint64_t)&v196, (uint64_t)v294, (uint64_t)&v191);
    sub_18D192C7C((uint64_t)v223, (uint64_t)v306, (uint64_t)&v181);
    v188 = 0x100000003;
    v186 = &unk_1E25C7790;
    *(_QWORD *)&v108.f64[1] = 0x300000003;
    v187 = xmmword_18D313070;
    v189 = v190;
    v108.f64[0] = v94;
    sub_18D1C94E0((uint64_t)&v181, (uint64_t)&v186, v108);
    sub_18D1B2810((uint64_t)&v201, (uint64_t)&v196, (uint64_t)&v186);
    sub_18D192C7C((uint64_t)v221, (uint64_t)v306, (uint64_t)&v171);
    v178 = 0x100000003;
    v176 = &unk_1E25C7790;
    *(_QWORD *)&v109.f64[1] = 0x300000003;
    v177 = xmmword_18D313070;
    v179 = &v180;
    v109.f64[0] = v93;
    sub_18D1C94E0((uint64_t)&v171, (uint64_t)&v176, v109);
    sub_18D1B2810((uint64_t)&v206, (uint64_t)&v201, (uint64_t)&v176);
    sub_18D192C7C((uint64_t)&__p, (uint64_t)v306, (uint64_t)&v161);
    v168 = 0x100000003;
    v166 = &unk_1E25C7790;
    *(_QWORD *)&v110.f64[1] = 0x300000003;
    v167 = xmmword_18D313070;
    v169 = &v170;
    v110.f64[0] = v95;
    sub_18D1C94E0((uint64_t)&v161, (uint64_t)&v166, v110);
    sub_18D1B2810((uint64_t)&v211, (uint64_t)&v206, (uint64_t)&v166);
    sub_18D1C9120((uint64_t)v158, (uint64_t)v237, (uint64_t)&v330);
    sub_18D1BE7FC((uint64_t)v158, (uint64_t)&v211);
    sub_18D192C7C((uint64_t)&v152, (uint64_t)&v284, (uint64_t)&v196);
    sub_18D192C7C((uint64_t)v223, (uint64_t)v300, (uint64_t)&v186);
    v193 = 0x100000003;
    v191 = &unk_1E25C7790;
    *(_QWORD *)&v111.f64[1] = 0x300000003;
    v192 = xmmword_18D313070;
    v194 = v195;
    v111.f64[0] = v94;
    sub_18D1C94E0((uint64_t)&v186, (uint64_t)&v191, v111);
    sub_18D1B2810((uint64_t)&v201, (uint64_t)&v196, (uint64_t)&v191);
    sub_18D192C7C((uint64_t)v221, (uint64_t)v300, (uint64_t)&v176);
    v183 = 0x100000003;
    v181 = &unk_1E25C7790;
    *(_QWORD *)&v112.f64[1] = 0x300000003;
    v182 = xmmword_18D313070;
    v184 = v185;
    v112.f64[0] = v93;
    sub_18D1C94E0((uint64_t)&v176, (uint64_t)&v181, v112);
    sub_18D1B2810((uint64_t)&v206, (uint64_t)&v201, (uint64_t)&v181);
    sub_18D192C7C((uint64_t)&__p, (uint64_t)v300, (uint64_t)&v166);
    v173 = 0x100000003;
    v171 = &unk_1E25C7790;
    *(_QWORD *)&v113.f64[1] = 0x300000003;
    v172 = xmmword_18D313070;
    v174 = v175;
    v113.f64[0] = v95;
    sub_18D1C94E0((uint64_t)&v166, (uint64_t)&v171, v113);
    sub_18D1B2810((uint64_t)&v211, (uint64_t)&v206, (uint64_t)&v171);
    sub_18D1C9120((uint64_t)v158, (uint64_t)v237, (uint64_t)&v324);
    sub_18D1BE7FC((uint64_t)v158, (uint64_t)&v211);
    sub_18D192C7C((uint64_t)v223, (uint64_t)v306, (uint64_t)&v211);
    sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, 6);
    sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
    sub_18D192C7C((uint64_t)v221, (uint64_t)v306, (uint64_t)&v211);
    sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, 7);
    sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
    sub_18D192C7C((uint64_t)&__p, (uint64_t)v306, (uint64_t)&v211);
    sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, 8);
    sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
    sub_18D1BE948(3u, 3u, (uint64_t)&v211);
    sub_18D04F764((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, (uint64_t)&v336);
    sub_18D16171C((uint64_t)v158, (uint64_t)&v211);
    sub_18D04F764((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v330, (uint64_t)&v330);
    sub_18D16171C((uint64_t)v158, (uint64_t)&v152);
    sub_18D192C7C((uint64_t)v223, (uint64_t)v300, (uint64_t)&v211);
    sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v324, 6);
    sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
    sub_18D192C7C((uint64_t)v221, (uint64_t)v300, (uint64_t)&v211);
    sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v324, 7);
    sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
    sub_18D192C7C((uint64_t)&__p, (uint64_t)v300, (uint64_t)&v211);
    sub_18D1BE8F8((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v324, 8);
    sub_18D16182C((uint64_t)v158, (uint64_t)&v211);
    sub_18D04F764((uint64_t)v158, (uint64_t)&v233, (uint64_t)&v324, (uint64_t)&v324);
    sub_18D16171C((uint64_t)v158, (uint64_t)&v152);
  }
  v158[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  v158[1] = v158[0];
  v158[2] = v158[0];
  v158[3] = v158[0];
  v158[4] = v158[0];
  v158[5] = v158[0];
  v158[6] = v158[0];
  v158[7] = v158[0];
  v158[8] = v158[0];
  v158[9] = v158[0];
  v158[10] = v158[0];
  v158[11] = v158[0];
  v158[12] = v158[0];
  v158[13] = v158[0];
  v158[14] = v158[0];
  v158[15] = v158[0];
  v158[16] = v158[0];
  v158[17] = v158[0];
  v158[18] = v158[0];
  v158[19] = v158[0];
  v158[20] = v158[0];
  v158[21] = v158[0];
  v158[22] = v158[0];
  v158[23] = v158[0];
  v158[24] = v158[0];
  v158[25] = v158[0];
  v158[26] = v158[0];
  v158[27] = v158[0];
  v158[28] = v158[0];
  v158[29] = v158[0];
  v158[30] = v158[0];
  v158[31] = v158[0];
  v158[32] = v158[0];
  v158[33] = v158[0];
  v158[34] = v158[0];
  v159 = 0x7FF8000000000000;
  LOBYTE(v152) = 0;
  if (sub_18D1C9BF4((uint64_t)v238, (uint64_t)&v279, 0, 1, 1, (uint64_t)&v274, (uint64_t)v158, (BOOL *)&v152, 0.000000015))
  {
    LOWORD(v152) = 12;
    v231[0] = 4;
    cnprint::CNLogFormatter::FormatGeneral(v8, v9, "SetStateParameterization() failed; post-transformation GetFullStateEstimate() failed.");
    if (*(char *)(v7 + 2511) >= 0)
      LOBYTE(v119) = v8;
    else
      v119 = *(_QWORD *)(v7 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v152, v231, "%s", v114, v115, v116, v117, v118, v119);
    v16 = 0xFFFFFFFFLL;
  }
  else
  {
    v211 = INFINITY;
    sub_18D1BEA24((uint64_t)v231, (uint64_t)&v233, &v211);
    if ((*(_QWORD *)&v211 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v211 <= *(double *)(v7 + 16736))
    {
      sub_18D1BD9E4(v150, (uint64_t)v229);
      sub_18D1BEB4C((uint64_t)&v152, (uint64_t)v229, (uint64_t)v231);
      sub_18D1914F0((uint64_t)v227, (uint64_t)&v152);
      v128 = v156;
      v152 = &unk_1E25C7160;
      v156 = 0;
      if (v128)
        MEMORY[0x18D78B5BC](v128, 0x1000C8000313F17);
      sub_18D1B857C((uint64_t)&v152, (uint64_t)v227, (uint64_t)v237);
      sub_18D1B8490(v150, (uint64_t)v237, (uint64_t)v227, (uint64_t)&v152);
      if (sub_18D1B8600(v150))
      {
        sub_18D053AA8(v151, (uint64_t)v238);
        sub_18D1922C0((uint64_t)v225, (uint64_t)v158);
        sub_18D1BD9E4(v150, (uint64_t)&v152);
        sub_18D1916B0((uint64_t)v223, (uint64_t)&v152);
        v129 = v156;
        v152 = &unk_1E25C7160;
        v156 = 0;
        if (v129)
          MEMORY[0x18D78B5BC](v129, 0x1000C8000313F17);
        sub_18D19276C((uint64_t)v221, (uint64_t)v225, (uint64_t)v223);
        sub_18D192B44((uint64_t)&__p, (uint64_t)v221);
        sub_18D1926E0((uint64_t)&v152, (uint64_t)v221, (uint64_t)&__p);
        v130 = sub_18D053AA8(v7 + 14880, (uint64_t)&v152);
        v131 = v156;
        v152 = &unk_1E25C7370;
        v156 = 0;
        if (v131)
          MEMORY[0x18D78B5BC](v131, 0x1000C8000313F17, v130);
        v152 = &unk_1E25C5E70;
        v132 = v220[0];
        __p = &off_1E25C7190;
        v220[0] = 0;
        if (v132)
          MEMORY[0x18D78B5BC](v132, 0x1000C8000313F17, v130);
        *(_BYTE *)(v7 + 2536) = *v6;
        *(_OWORD *)(v7 + 2544) = *(_OWORD *)(v7 + 80);
        if (*v6 == 1)
        {
          v133 = atomic_load((unsigned __int8 *)&qword_1ECF230F0);
          if ((v133 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230F0))
          {
            v154 = 0x300000001;
            v152 = &unk_1E25C6C50;
            v155 = &v156;
            v153 = xmmword_18D314670;
            v156 = 0x1500000014;
            v157 = 22;
            sub_18D16169C((uint64_t)&v152, (uint64_t)&unk_1ECF233F8);
            __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF233F8, &dword_18D038000);
            __cxa_guard_release(&qword_1ECF230F0);
          }
          sub_18D1D63C0((uint64_t)&v152, (uint64_t)&unk_1ECF233F8);
          v134 = *(double *)(*(_QWORD *)(v7 + 1168) + 1440);
          sub_18D0778AC(&__p, "InflateUserUncertainty");
          raven::RavenPNTEstimator::InflateUncertainties(v7, (uint64_t)&v152, (uint64_t)&__p, 1, v134);
          if (SHIBYTE(v217) < 0)
            operator delete(__p);
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v7 + 2560) = _Q0;
        }
        v139 = v222;
        v221[0] = &off_1E25C7340;
        v222 = 0;
        if (v139)
          MEMORY[0x18D78B5BC](v139, 0x1000C8000313F17);
        v140 = v224;
        v223[0] = &unk_1E25C7160;
        v224 = 0;
        if (v140)
          MEMORY[0x18D78B5BC](v140, 0x1000C8000313F17);
        v141 = v226;
        *(_QWORD *)v225 = &off_1E25C7340;
        v226 = 0;
        if (v141)
          MEMORY[0x18D78B5BC](v141, 0x1000C8000313F17);
        v16 = 0;
      }
      else
      {
        LOWORD(v152) = 12;
        v225[0] = 2;
        cnprint::CNLogFormatter::FormatGeneral(v8, v9, "aborting SetStateParameterization(); post-transform state unobservable.");
        if (*(char *)(v7 + 2511) >= 0)
          LOBYTE(v147) = v8;
        else
          v147 = *(_QWORD *)(v7 + 2488);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v152, v225, "%s", v142, v143, v144, v145, v146, v147);
        sub_18D1B857C((uint64_t)&v152, (uint64_t)v229, (uint64_t)&v360);
        sub_18D1B8490(v150, (uint64_t)&v360, (uint64_t)v229, (uint64_t)&v152);
        v16 = 0xFFFFFFFFLL;
      }
      v148 = v228;
      v227[0] = &unk_1E25C7160;
      v228 = 0;
      if (v148)
        MEMORY[0x18D78B5BC](v148, 0x1000C8000313F17);
      v149 = v230;
      *(_QWORD *)v229 = &unk_1E25C7160;
      v230 = 0;
      if (v149)
        MEMORY[0x18D78B5BC](v149, 0x1000C8000313F17);
    }
    else
    {
      LOWORD(v152) = 12;
      v229[0] = 4;
      cnprint::CNLogFormatter::FormatGeneral(v8, v9, "SetStateParameterization() failed; Jacobian cond %g.", v211);
      if (*(char *)(v7 + 2511) >= 0)
        LOBYTE(v125) = v8;
      else
        v125 = *(_QWORD *)(v7 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v152, v229, "%s", v120, v121, v122, v123, v124, v125);
      v16 = 0xFFFFFFFFLL;
    }
    v126 = v232;
    *(_QWORD *)v231 = &unk_1E25C7160;
    v232 = 0;
    if (v126)
      MEMORY[0x18D78B5BC](v126, 0x1000C8000313F17);
  }
  v127 = v236;
  v233 = &unk_1E25C7160;
  v236 = 0;
  if (v127)
    MEMORY[0x18D78B5BC](v127, 0x1000C8000313F17);
  return v16;
}

void sub_18D195F18(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  __cxa_guard_abort(&qword_1ECF230F0);
  v3 = STACK[0x808];
  STACK[0x7E0] = (unint64_t)&off_1E25C7340;
  STACK[0x808] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  v4 = STACK[0x878];
  STACK[0x850] = v1 + 16;
  STACK[0x878] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  v5 = STACK[0x8E8];
  STACK[0x8C0] = (unint64_t)&off_1E25C7340;
  STACK[0x8E8] = 0;
  if (v5)
    MEMORY[0x18D78B5BC](v5, 0x1000C8000313F17);
  v6 = STACK[0x958];
  STACK[0x930] = v1 + 16;
  STACK[0x958] = 0;
  if (v6)
    MEMORY[0x18D78B5BC](v6, 0x1000C8000313F17);
  v7 = STACK[0x9C8];
  STACK[0x9A0] = (unint64_t)&unk_1E25C7160;
  STACK[0x9C8] = 0;
  if (v7)
    MEMORY[0x18D78B5BC](v7, 0x1000C8000313F17);
  v8 = STACK[0xA38];
  STACK[0xA10] = (unint64_t)&unk_1E25C7160;
  STACK[0xA38] = 0;
  if (v8)
    MEMORY[0x18D78B5BC](v8, 0x1000C8000313F17);
  v9 = STACK[0xAA8];
  STACK[0xA80] = (unint64_t)&unk_1E25C7160;
  STACK[0xAA8] = 0;
  if (v9)
    MEMORY[0x18D78B5BC](v9, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AltitudeChangeEvent *a2)
{
  double v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  char *v14;
  double v15;
  cnprint::CNPrinter *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  __n128 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v65;
  double v66;
  double v67;
  double v68;
  __int128 v69;
  _QWORD v70[4];
  char v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  double v77;
  void *v78;
  __int128 v79;
  uint64_t v80;
  double *v81;
  double v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned __int8 v95;
  void (*v96[5])(uint64_t);

  v96[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v85 = 0x100000003;
  v83 = &unk_1E25C7790;
  v4 = *((double *)a2 + 26);
  v87 = *((_QWORD *)a2 + 25);
  v80 = 0x300000003;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v84 = v5;
  v86 = &v87;
  v78 = &unk_1E25C78E0;
  v79 = v5;
  v81 = &v82;
  v82 = v4 * v4;
  sub_18D1C7988(v70, 4);
  v76 = 0;
  v74 = 0u;
  v75 = 0u;
  v70[0] = off_1E25C4380;
  v72 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v73 = v6;
  v88 = (void *)(*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v89 = v7;
  v10 = CNTimeSpan::operator-((uint64_t)&v88, (_QWORD *)a2 + 13, v8, v9);
  v77 = v11 + (double)v10;
  *(_QWORD *)&v74 = (char *)this + 2696;
  *((_QWORD *)&v74 + 1) = (char *)this + 14600;
  *(_QWORD *)&v75 = (char *)this + 14616;
  *((_QWORD *)&v75 + 1) = (char *)this + 2536;
  v76 = (char *)this + 2576;
  v13 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v69 = v13;
  *((double *)&v69 + 1) = v12;
  if ((v79 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v92 = 0x100000003;
  v14 = (char *)this + 61288;
  v88 = &unk_1E25C7790;
  v93 = &v94;
  v15 = v12;
  v89 = v79 | 0x100000000;
  v90 = v79;
  v91 = v79;
  v16 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v88, 0.0);
  if (*((_BYTE *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v96[0]) = 2;
      v95 = 2;
      v65 = v15 + (double)v13;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v65));
    }
    else if (*((_BYTE *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v16) <= 1)
      {
        LOWORD(v96[0]) = 2;
        v95 = 1;
        v67 = v15 + (double)v13;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v67));
      }
    }
    else
    {
      v33 = sub_18D03FE4C((double *)&v69, (double *)this + 7662);
      if (v33)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v33) <= 1)
        {
          LOWORD(v96[0]) = 2;
          v95 = 1;
          v68 = *((double *)&v69 + 1) + (double)(uint64_t)v69;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v34, v35, v36, v37, v38, SLOBYTE(v68));
        }
      }
      else
      {
        v96[0] = 0;
        v96[1] = 0;
        sub_18D1CC47C((void (**)(int))v96, (uint64_t)v70);
        v39 = sub_18D1C7B34((uint64_t *)this + 7666, v96);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v96);
        v40 = *((int *)this + 16806);
        v41 = (v40 + 1);
        if (*((_QWORD *)this + 7668) == v41)
        {
          *((_DWORD *)this + 16806) = v41;
          *((_DWORD *)this + 15340) = v41;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v41;
          *((_DWORD *)this + 15343) = v41;
          *((_DWORD *)this + 16046) = v41;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v41;
          *((_DWORD *)this + 16049) = v41;
          *((_DWORD *)this + 16230) = v41;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v41;
          *((_DWORD *)this + 16233) = v41;
          *((_DWORD *)this + 16588) = v41;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v41;
          *((_DWORD *)this + 16591) = v41;
          *((_DWORD *)this + 16600) = v41;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v41;
          *((_DWORD *)this + 16603) = v41;
          *((_DWORD *)this + 16784) = v41;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v41;
          *((_DWORD *)this + 16787) = v41;
          *((_DWORD *)this + 16796) = v41;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v41;
          *((_DWORD *)this + 16799) = v41;
          *((_DWORD *)this + 16810) = v41;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v41;
          *((_DWORD *)this + 16813) = v41;
          *((_DWORD *)this + 17168) = v41;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v41;
          *((_DWORD *)this + 17171) = v41;
          *(_OWORD *)(*((_QWORD *)this + 7673) + 16 * v40) = v69;
          if (v84 <= DWORD1(v84))
            v42 = DWORD1(v84);
          else
            v42 = v84;
          if (DWORD1(v84))
            v43 = (_DWORD)v84 == 0;
          else
            v43 = 1;
          if (v43)
            v44 = 0;
          else
            v44 = v42;
          *(_DWORD *)(*((_QWORD *)this + 8026) + 4 * v40) = v44;
          sub_18D053AA8(*((_QWORD *)this + 8297) + (v40 << 6), (uint64_t)&v83);
          if (v89 <= HIDWORD(v89))
            v45 = HIDWORD(v89);
          else
            v45 = v89;
          if (HIDWORD(v89))
            v46 = (_DWORD)v89 == 0;
          else
            v46 = 1;
          if (v46)
            v47 = 0;
          else
            v47 = v45;
          *(_DWORD *)(*((_QWORD *)this + 8303) + 4 * v40) = v47;
          sub_18D053AA8(*((_QWORD *)this + 8395) + (v40 << 6), (uint64_t)&v88);
          v48 = sub_18D053AA8(*((_QWORD *)this + 8401) + 112 * (int)v40, (uint64_t)&v78);
          *(_QWORD *)(*((_QWORD *)this + 8408) + 8 * v40) = sub_18D196964;
          if (*v39)
            v49 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v39)(3, v39, 0, &unk_1E25B47E8, &std::__any_imp::__unique_typeinfo<raven::h_DeviceAltitudeChangeArgs_RavenPNT<double>>::__id, v48);
          else
            v49 = 0;
          v22 = 0;
          *(_QWORD *)(*((_QWORD *)v14 + 926) + 8 * v40) = v49;
          goto LABEL_43;
        }
        LOWORD(v96[0]) = 2;
        v95 = 4;
        v50 = (*(uint64_t (**)(uint64_t))(v70[0] + 16))((uint64_t)v70);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v51, v52, v53, v54, v55, v50);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v16) <= 1)
  {
    LOWORD(v96[0]) = 2;
    v95 = 1;
    v66 = v15 + (double)v13;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v23, v24, v25, v26, v27, SLOBYTE(v66));
  }
  LOWORD(v96[0]) = 12;
  v95 = 4;
  v88 = (void *)(*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v89 = v56;
  v57 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v88, "Could not add measurement - device attitude change");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v63) = v57;
  else
    v63 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "%s", v58, v59, v60, v61, v62, v63);
  v22 = 0xFFFFFFFFLL;
LABEL_43:
  v70[0] = &unk_1E25B8EE0;
  if (v71 < 0)
    operator delete((void *)v70[2]);
  return v22;
}

void sub_18D196904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D196964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  float64x2_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int *v75;
  uint64_t v76;
  double v77;
  __int128 v78;
  double v79;
  _BYTE v80[64];
  void *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD v86[5];
  uint64_t v87;
  _QWORD v88[2];
  int v89;
  int v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE v93[624];
  void *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  void (**v99)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v100;
  void *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t (**v106)();
  uint64_t v107;
  _QWORD v108[5];
  uint64_t v109;
  void *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t (**v115)();
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  _BYTE v120[8];
  uint64_t v121;
  int *v122;
  void **v123;
  __int128 *v124;
  void **v125;
  uint64_t v126;
  __int128 v127;
  _OWORD v128[3];
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD v134[24];
  _BYTE v135[160];
  uint64_t v136;
  void *v137;
  uint64_t v138;
  __int128 v139;
  _BYTE v140[25];
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD v146[24];
  _BYTE v147[168];
  uint64_t v148;
  uint64_t v149;
  void *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD v154[20];
  __int128 v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD v158[362];
  __int128 v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  _BYTE v163[32];
  void *v164;
  __int128 v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  __int128 v169;
  void *v170;
  __int128 v171;
  uint64_t v172;
  float64x2_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  _BYTE v179[24];
  uint64_t v180;
  _BYTE *v181;
  _BYTE v182[832];
  _BYTE v183[664];
  float64x2_t v184;
  uint64_t v185;
  uint64_t v186;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v186 = *MEMORY[0x1E0C80C00];
  if (!v4
    || (v10 = v7,
        v11 = v6,
        v12 = v5,
        v13 = v3,
        v14 = v2,
        (v15 = (char *)__dynamic_cast(v4, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B47E8, 0)) == 0))
  {
    LOWORD(v137) = 12;
    v179[0] = 4;
    v79 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v137, v179, "time,%.3lf,h-function failure on line %d: %s() %s", v5, v6, v7, v8, v9, SLOBYTE(v79));
    return 0xFFFFFFFFLL;
  }
  v16 = v15;
  v18 = *(_DWORD *)(v14 + 8);
  v17 = *(_DWORD *)(v14 + 12);
  if (v18 <= v17)
    v19 = *(_DWORD *)(v14 + 12);
  else
    v19 = *(_DWORD *)(v14 + 8);
  if (!v18
    || !v17
    || v19 != 26
    || ((v21 = *(_DWORD *)(v13 + 8), v20 = *(_DWORD *)(v13 + 12), v21 <= v20)
      ? (v22 = *(_DWORD *)(v13 + 12))
      : (v22 = *(_DWORD *)(v13 + 8)),
        !v21 || !v20 || v22 != 1 || !*((_QWORD *)v15 + 7)))
  {
    LOWORD(v137) = 12;
    v179[0] = 4;
    v33 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v137, v179, "time,%.3lf,h-function failure on line %d: %s() %s", v5, v6, v7, v8, v9, SLOBYTE(v33));
    return 0xFFFFFFFFLL;
  }
  v178 = *(_OWORD *)(v15 + 40);
  v23 = *((_QWORD *)v15 + 9);
  v177 = *(_OWORD *)*((_QWORD *)v15 + 8);
  sub_18D1D6E1C((uint64_t)&v175, v23);
  v24 = *((_QWORD *)v16 + 7);
  v172 = 0x10000001CLL;
  v170 = &unk_1E25C72B0;
  v171 = xmmword_18D319780;
  v173 = (float64x2_t *)&v174;
  if (!sub_18D1C7470((uint64_t)&v178, (uint64_t)&v177, v176, v24, *((_QWORD *)v16 + 11), (uint64_t)&v170))
  {
    v36 = (uint64_t)(v16 + 40);
    v30.i64[0] = *((_QWORD *)v16 + 12);
    if (*(double *)v30.i64 <= 0.0)
    {
      sub_18D1C741C((uint64_t)(v16 + 40), (uint64_t)"invalid time interval", (uint64_t)"h_DeviceAltitudeChange_RavenPNT", 2229, v26, v27, v28, v29);
      return 0xFFFFFFFFLL;
    }
    v138 = 0;
    v137 = 0;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v137, 0, v30, v31);
    *(_QWORD *)&v169 = CNTimeSpan::operator-((uint64_t)&v178, &v137, v37, v38);
    *((_QWORD *)&v169 + 1) = v39;
    v166 = 0x10000001CLL;
    v164 = &unk_1E25C72B0;
    v165 = xmmword_18D319780;
    v167 = &v168;
    if (sub_18D1C7470((uint64_t)&v169, (uint64_t)&v177, v176, v24, *((_QWORD *)v16 + 11), (uint64_t)&v164))
    {
      sub_18D1C741C((uint64_t)(v16 + 40), (uint64_t)"could not integrate full states", (uint64_t)"h_DeviceAltitudeChange_RavenPNT", 2238, v40, v41, v42, v43);
      return 0xFFFFFFFFLL;
    }
    v139 = 0u;
    memset(v140, 0, sizeof(v140));
    v144 = 0x100000013;
    v143 = 0;
    v141 = &unk_1E25C66B0;
    v142 = 0;
    v146[22] = 0x100000013;
    v145 = v146;
    v146[19] = &unk_1E25C66B0;
    v146[21] = 0;
    v146[20] = 0;
    v146[23] = v147;
    v147[152] = 1;
    v149 = 0;
    v148 = 0;
    v152 = 0x100000013;
    v150 = &unk_1E25C66B0;
    v151 = xmmword_18D319860;
    v153 = v154;
    v156 = 0x1300000013;
    v154[19] = &unk_1E25C6680;
    v155 = xmmword_18D319870;
    v157 = v158;
    v160 = 0xF00000013;
    v158[361] = &unk_1E25C6620;
    v159 = xmmword_18D319880;
    v161 = &v162;
    LOBYTE(v138) = 0;
    v147[160] = 0;
    v137 = &unk_1E25C3648;
    memset(v163, 0, sizeof(v163));
    memset(v128, 0, 41);
    v132 = 0x100000013;
    v131 = 0;
    v129 = &unk_1E25C66B0;
    v130 = 0;
    v134[22] = 0x100000013;
    v133 = v134;
    v134[19] = &unk_1E25C66B0;
    v134[21] = 0;
    v134[20] = 0;
    v134[23] = v135;
    v135[152] = 1;
    v136 = 0;
    if (sub_18D1CB920(v24, (uint64_t)v128))
    {
      v48 = 2250;
      v49 = "could not get integrator configuration";
LABEL_31:
      sub_18D1C741C((uint64_t)(v16 + 40), (uint64_t)v49, (uint64_t)"h_DeviceAltitudeChange_RavenPNT", v48, v44, v45, v46, v47);
      v34 = 0xFFFFFFFFLL;
LABEL_32:
      v137 = &unk_1E25C3648;
      *(_QWORD *)v179 = v163;
      sub_18D1C4ED8((void ***)v179);
      return v34;
    }
    if (sub_18D18FCC0((uint64_t)&v137, (uint64_t)v128))
    {
      v48 = 2255;
      v49 = "could not set integrator configuration";
      goto LABEL_31;
    }
    v123 = &v137;
    v124 = &v178;
    v50 = *((_QWORD *)v16 + 11);
    v125 = &v170;
    v126 = v50;
    v127 = v169;
    v180 = 0x1A00000001;
    *(_QWORD *)v179 = &off_1E25C6B60;
    v181 = v182;
    v51 = 10;
    *(_OWORD *)&v179[8] = xmmword_18D3198D0;
    do
    {
      *(_DWORD *)&v179[4 * v51] = v51 - 10;
      ++v51;
    }
    while (v51 != 28);
    sub_18D1B741C((uint64_t)v120, (uint64_t)v179);
    v117 = 0x100000017;
    v115 = &off_1E25C6F20;
    v118 = &v119;
    v116 = xmmword_18D3198E0;
    sub_18D04BE88((uint64_t)&v115, 0.0);
    v112 = 0x10000001ALL;
    v110 = &unk_1E25C70A0;
    v111 = xmmword_18D319790;
    v113 = &v114;
    sub_18D1C99C8((uint64_t)v108);
    sub_18D1CBE44((uint64_t)&v106);
    v52 = *(_QWORD *)(v14 + 32);
    v53 = (HIDWORD(v121) * v121);
    v180 = 0x10000001ALL;
    *(_QWORD *)v179 = &unk_1E25C70A0;
    *(_QWORD *)&v179[8] = v121;
    *(_DWORD *)&v179[16] = v53;
    *(_DWORD *)&v179[20] = v121;
    v54 = v182;
    v181 = v182;
    if ((_DWORD)v53)
    {
      v55 = v122;
      do
      {
        v56 = *v55++;
        *v54++ = *(_QWORD *)(v52 + 8 * v56);
        --v53;
      }
      while (v53);
    }
    if (sub_18D1BB3E0((uint64_t)v179, (uint64_t)&v115))
    {
      v61.n128_f64[0] = sub_18D1C741C(v36, (uint64_t)"could not evaluate position dynamics", (uint64_t)"h_DeviceAltitudeChange_RavenPNT", 2273, v57, v58, v59, v60);
    }
    else
    {
      v100 = 0;
      v103 = 0x300000003;
      v101 = &unk_1E25C78E0;
      v102 = xmmword_18D30BB60;
      v104 = &v105;
      v99 = &off_1E25B9560;
      v62 = *(float64x2_t **)(v14 + 32);
      *(float64x2_t *)v179 = vaddq_f64(*v173, *v62);
      *(double *)&v179[16] = v173[1].f64[0] + v62[1].f64[0];
      v184 = *(float64x2_t *)v179;
      v185 = *(_QWORD *)&v179[16];
      cnnavigation::ECEFToENU((float64x2_t *)v179, 1, 0, &v184, 0, (uint64_t)v183, (uint64_t)&v99, *(double *)v179);
      if (v67)
      {
        v61.n128_f64[0] = sub_18D1C741C(v36, (uint64_t)"coordinate conversion error", (uint64_t)"h_DeviceAltitudeChange_RavenPNT", 2288, v63, v64, v65, v66);
      }
      else
      {
        v96 = 0x300000003;
        v94 = &unk_1E25C78E0;
        v95 = xmmword_18D30BB60;
        v97 = &v98;
        if (v100)
        {
          sub_18D053AA8((uint64_t)&v94, (uint64_t)&v101);
          sub_18D1CB9F8((uint64_t)v179);
          sub_18D1CB98C((uint64_t)&v184, (uint64_t)&v94, (uint64_t)v179);
          sub_18D1CBB40((uint64_t)v88);
          sub_18D1CBAD4((uint64_t)v179, (uint64_t)&v94, (uint64_t)v88);
          sub_18D1CBBB0((uint64_t)&v81);
          sub_18D1C99C8((uint64_t)v86);
          sub_18D0540FC((uint64_t)&v81, (uint64_t)v108, (uint64_t)v86);
          sub_18D1CBA68((uint64_t)v183, (uint64_t)v179, (uint64_t)v86);
          v70 = v87;
          v86[0] = &unk_1E25C7160;
          v87 = 0;
          if (v70)
            MEMORY[0x18D78B5BC](v70, 0x1000C8000313F17);
          v86[0] = &unk_1E25C5E70;
          v71 = v85;
          v81 = &unk_1E25C7160;
          v85 = 0;
          if (v71)
            MEMORY[0x18D78B5BC](v71, 0x1000C8000313F17);
          v180 = 0x10000001CLL;
          *(_QWORD *)v179 = &unk_1E25C72B0;
          *(_OWORD *)&v179[8] = xmmword_18D319780;
          v181 = v182;
          sub_18D0540FC((uint64_t)&v170, (uint64_t)&v164, (uint64_t)v179);
          sub_18D1CBC14((uint64_t)&v81, (uint64_t)&v184, (uint64_t)v179);
          v72 = *(_QWORD *)(v14 + 32);
          v73 = (HIDWORD(v121) * v121);
          v91 = 0x10000001ALL;
          v88[0] = &unk_1E25C70A0;
          v88[1] = v121;
          v89 = v73;
          v90 = v121;
          v74 = v93;
          v92 = v93;
          if ((_DWORD)v73)
          {
            v75 = v122;
            do
            {
              v76 = *v75++;
              *v74++ = *(_QWORD *)(v72 + 8 * v76);
              --v73;
            }
            while (v73);
          }
          sub_18D1CBC84((uint64_t)v80, (uint64_t)v183, (uint64_t)v88);
          sub_18D1B2810((uint64_t)v86, (uint64_t)&v81, (uint64_t)v80);
          v77 = *(double *)(v86[4] + 16);
          *(_QWORD *)&v78 = 0x100000001;
          *((_QWORD *)&v78 + 1) = 0x100000001;
          *(_OWORD *)(v12 + 8) = v78;
          **(double **)(v12 + 32) = v77 + **(double **)(v13 + 32);
          v83 = 0x300000001;
          v81 = &unk_1E25C6C20;
          v84 = &v85;
          v82 = xmmword_18D314670;
          sub_18D04BE88((uint64_t)&v81, 0.0);
          v84[2] = 0x3FF0000000000000;
          v180 = 0x1A00000001;
          *(_QWORD *)v179 = &off_1E25C6B30;
          v181 = v182;
          *(_OWORD *)&v179[8] = xmmword_18D3198F0;
          sub_18D04BE88((uint64_t)v179, 0.0);
          sub_18D053AA8(v11, (uint64_t)v179);
          sub_18D1CBD08((uint64_t)v88, (uint64_t)&v81, (uint64_t)v183);
          sub_18D1CBD74((uint64_t)v179, v11, (uint64_t)v120);
          sub_18D1BEC80((uint64_t)v179, (uint64_t)v88);
          v34 = 0;
          v61.n128_u64[0] = 0x100000001;
          v61.n128_u64[1] = 0x100000001;
          *(__n128 *)(v10 + 8) = v61;
          **(_QWORD **)(v10 + 32) = 0x3FF0000000000000;
          goto LABEL_43;
        }
        v61.n128_f64[0] = sub_18D1C741C(v36, (uint64_t)"could not compute Jacobian", (uint64_t)"h_DeviceAltitudeChange_RavenPNT", 2295, v63, v64, v65, v66);
      }
    }
    v34 = 0xFFFFFFFFLL;
LABEL_43:
    v68 = v107;
    v106 = &off_1E25C7130;
    v107 = 0;
    if (v68)
      MEMORY[0x18D78B5BC](v68, 0x1000C8000313F17, v61);
    v69 = v109;
    v108[0] = &unk_1E25C7160;
    v109 = 0;
    if (v69)
      MEMORY[0x18D78B5BC](v69, 0x1000C8000313F17, v61);
    goto LABEL_32;
  }
  LOWORD(v137) = 12;
  v179[0] = 4;
  v32 = *((double *)v16 + 6) + (double)*((uint64_t *)v16 + 5);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v137, v179, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v32));
  return 0xFFFFFFFFLL;
}

void sub_18D197530(_Unwind_Exception *a1)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;

  v3 = STACK[0x4B0];
  STACK[0x488] = (unint64_t)&off_1E25C7130;
  STACK[0x4B0] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  v4 = STACK[0x4E0];
  STACK[0x4B8] = (unint64_t)&unk_1E25C7160;
  STACK[0x4E0] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  STACK[0x948] = (unint64_t)&unk_1E25C3648;
  STACK[0x23D0] = v1;
  sub_18D1C4ED8((void ***)&STACK[0x23D0]);
  _Unwind_Resume(a1);
}

uint64_t sub_18D197684(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AltitudeEvent *a2)
{
  uint64_t v4;
  double v5;
  __int128 v6;
  uint64_t v7;
  double v8;
  double v9;
  char *v10;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  __n128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v59;
  double v60;
  double v61;
  double v62;
  _QWORD v63[4];
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  double *v74;
  double v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned __int8 v88;
  void (*v89[5])(uint64_t);

  v89[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58)
    || *((_BYTE *)this + 2536) == 1
    && *((_BYTE *)this + 1776)
    && *((unsigned __int8 *)this + 1888) - 1 < 2)
  {
    return 0;
  }
  v78 = 0x100000003;
  v76 = &unk_1E25C7790;
  v5 = *((double *)a2 + 14);
  v80 = *((_QWORD *)a2 + 13);
  v73 = 0x300000003;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  v77 = v6;
  v79 = &v80;
  v71 = &unk_1E25C78E0;
  v72 = v6;
  v74 = &v75;
  v75 = v5 * v5;
  v7 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v9 = v8;
  *(_QWORD *)&v70 = v7;
  *((double *)&v70 + 1) = v8;
  sub_18D1C7988(v63, 25);
  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  v63[0] = off_1E25C3738;
  v65 = v70;
  v69 = *(_QWORD *)(*((_QWORD *)this + 146) + 80);
  *(_QWORD *)&v66 = (char *)this + 2696;
  *((_QWORD *)&v66 + 1) = (char *)this + 14600;
  *(_QWORD *)&v67 = (char *)this + 14616;
  *((_QWORD *)&v67 + 1) = (char *)this + 2536;
  v68 = (char *)this + 2576;
  if ((v72 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v85 = 0x100000003;
  v10 = (char *)this + 61288;
  v81 = &unk_1E25C7790;
  v86 = &v87;
  v82 = v72 | 0x100000000;
  v83 = v72;
  v84 = v72;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v81, 0.0);
  if (*((_BYTE *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v89[0]) = 2;
      v88 = 2;
      v59 = v9 + (double)v7;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v59));
    }
    else if (*((_BYTE *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
      {
        LOWORD(v89[0]) = 2;
        v88 = 1;
        v61 = v9 + (double)v7;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v61));
      }
    }
    else
    {
      v27 = sub_18D03FE4C((double *)&v70, (double *)this + 7662);
      if (v27)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
        {
          LOWORD(v89[0]) = 2;
          v88 = 1;
          v62 = *((double *)&v70 + 1) + (double)(uint64_t)v70;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v62));
        }
      }
      else
      {
        v89[0] = 0;
        v89[1] = 0;
        sub_18D1CC73C((void (**)(int))v89, (uint64_t)v63);
        v33 = sub_18D1C7B34((uint64_t *)this + 7666, v89);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v89);
        v34 = *((int *)this + 16806);
        v35 = (v34 + 1);
        if (*((_QWORD *)this + 7668) == v35)
        {
          *((_DWORD *)this + 16806) = v35;
          *((_DWORD *)this + 15340) = v35;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v35;
          *((_DWORD *)this + 15343) = v35;
          *((_DWORD *)this + 16046) = v35;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v35;
          *((_DWORD *)this + 16049) = v35;
          *((_DWORD *)this + 16230) = v35;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v35;
          *((_DWORD *)this + 16233) = v35;
          *((_DWORD *)this + 16588) = v35;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v35;
          *((_DWORD *)this + 16591) = v35;
          *((_DWORD *)this + 16600) = v35;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v35;
          *((_DWORD *)this + 16603) = v35;
          *((_DWORD *)this + 16784) = v35;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v35;
          *((_DWORD *)this + 16787) = v35;
          *((_DWORD *)this + 16796) = v35;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v35;
          *((_DWORD *)this + 16799) = v35;
          *((_DWORD *)this + 16810) = v35;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v35;
          *((_DWORD *)this + 16813) = v35;
          *((_DWORD *)this + 17168) = v35;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v35;
          *((_DWORD *)this + 17171) = v35;
          *(_OWORD *)(*((_QWORD *)this + 7673) + 16 * v34) = v70;
          if (v77 <= DWORD1(v77))
            v36 = DWORD1(v77);
          else
            v36 = v77;
          if (DWORD1(v77))
            v37 = (_DWORD)v77 == 0;
          else
            v37 = 1;
          if (v37)
            v38 = 0;
          else
            v38 = v36;
          *(_DWORD *)(*((_QWORD *)this + 8026) + 4 * v34) = v38;
          sub_18D053AA8(*((_QWORD *)this + 8297) + (v34 << 6), (uint64_t)&v76);
          if (v82 <= HIDWORD(v82))
            v39 = HIDWORD(v82);
          else
            v39 = v82;
          if (HIDWORD(v82))
            v40 = (_DWORD)v82 == 0;
          else
            v40 = 1;
          if (v40)
            v41 = 0;
          else
            v41 = v39;
          *(_DWORD *)(*((_QWORD *)this + 8303) + 4 * v34) = v41;
          sub_18D053AA8(*((_QWORD *)this + 8395) + (v34 << 6), (uint64_t)&v81);
          v42 = sub_18D053AA8(*((_QWORD *)this + 8401) + 112 * (int)v34, (uint64_t)&v71);
          *(_QWORD *)(*((_QWORD *)this + 8408) + 8 * v34) = sub_18D197CD0;
          if (*v33)
            v43 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33)(3, v33, 0, &unk_1E25B42F0, &std::__any_imp::__unique_typeinfo<raven::h_UserAltitudeArgs_RavenPNT<double>>::__id, v42);
          else
            v43 = 0;
          v4 = 0;
          *(_QWORD *)(*((_QWORD *)v10 + 926) + 8 * v34) = v43;
          goto LABEL_46;
        }
        LOWORD(v89[0]) = 2;
        v88 = 4;
        v44 = (*(uint64_t (**)(uint64_t))(v63[0] + 16))((uint64_t)v63);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v45, v46, v47, v48, v49, v44);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
  {
    LOWORD(v89[0]) = 2;
    v88 = 1;
    v60 = v9 + (double)v7;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v60));
  }
  LOWORD(v89[0]) = 12;
  v88 = 4;
  v81 = (void *)(*(uint64_t (**)(const raven::AltitudeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v82 = v50;
  v51 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v81, "Could not add measurement - user altitude");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v57) = v51;
  else
    v57 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "%s", v52, v53, v54, v55, v56, v57);
  v4 = 0xFFFFFFFFLL;
LABEL_46:
  v63[0] = &unk_1E25B8EE0;
  if (v64 < 0)
    operator delete((void *)v63[2]);
  return v4;
}

void sub_18D197C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D197CD0(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  double v23;
  double v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  double v50;
  double v51;
  double *v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t (**v56)();
  __int128 v57;
  uint64_t v58;
  double *v59;
  _BYTE v60[33];
  unsigned __int8 v61[48];
  double v62;
  double v63;
  double v64;
  _BYTE v65[32];
  _OWORD v66[12];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  void *v89;
  __int128 v90;
  uint64_t v91;
  float64x2_t *v92;
  uint64_t v93;
  void *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned __int8 v99[264];
  __int128 v100;
  __int128 v101;
  double v102[3];
  float64x2_t v103;
  float64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  if (!lpsrc
    || (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B42F0, 0)) == 0)
  {
    *(_WORD *)v65 = 12;
    v99[0] = 4;
    v55 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v65, v99, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v55));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  if (!*((_QWORD *)v13 + 7)
    || ((v16 = *(_DWORD *)(a1 + 8), v15 = *(_DWORD *)(a1 + 12), v16 <= v15)
      ? (v17 = *(_DWORD *)(a1 + 12))
      : (v17 = *(_DWORD *)(a1 + 8)),
        !v16
     || !v15
     || v17 != 26
     || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
       ? (v20 = *(_DWORD *)(a2 + 12))
       : (v20 = *(_DWORD *)(a2 + 8)),
         !v19 || !v18 || v20 != 1)))
  {
    *(_WORD *)v65 = 12;
    v99[0] = 4;
    v24 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v65, v99, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v24));
    return 0xFFFFFFFFLL;
  }
  v101 = *(_OWORD *)(v13 + 40);
  v21 = *((_QWORD *)v13 + 9);
  v100 = *(_OWORD *)*((_QWORD *)v13 + 8);
  sub_18D1D6E1C((uint64_t)v99, v21);
  v22 = **((unsigned __int8 **)v14 + 10);
  v23 = *((double *)v14 + 12);
  v96 = 0x10000001CLL;
  v94 = &unk_1E25C72B0;
  v95 = xmmword_18D319780;
  v97 = &v98;
  if (v22)
  {
    if (v22 != 1)
    {
      if (v22 == 2)
        __assert_rtn("h_UserAltitude_RavenPNT", "ravenmeasurementfunctions.h", 6786, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      goto LABEL_30;
    }
    if (!sub_18D1D0D6C((uint64_t)&v101, &v100, (uint64_t)v99, *((_QWORD *)v14 + 7), *((_QWORD *)v14 + 11), 1, 1, 1, (uint64_t)&v94))goto LABEL_30;
    *(_WORD *)v65 = 12;
    LOBYTE(v56) = 4;
    v31 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v65, (unsigned __int8 *)&v56, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
    return 0xFFFFFFFFLL;
  }
  v58 = 0x100000007;
  v56 = (uint64_t (**)())&unk_1E25C81E0;
  v57 = xmmword_18D319810;
  v59 = (double *)v60;
  if (sub_18D1C7D64((uint64_t)&v101, &v100, (uint64_t)v99, 0, (uint64_t)&v56))
  {
    *(_WORD *)v65 = 12;
    LOBYTE(v89) = 4;
    v37 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v65, (unsigned __int8 *)&v89, "time,%.3lf,h-function failure on line %d: %s() %s", v32, v33, v34, v35, v36, SLOBYTE(v37));
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)&v65[24] = 0x700000001;
  *(_QWORD *)v65 = &off_1E25C6DA0;
  *(_QWORD *)&v66[0] = (char *)v66 + 8;
  *(_OWORD *)&v65[8] = xmmword_18D319820;
  for (i = 10; i != 17; ++i)
    *(_DWORD *)&v65[4 * i] = i + 11;
  sub_18D1BA028((uint64_t)&v89, (uint64_t)v65);
  sub_18D1C8640((uint64_t)v65, (uint64_t)&v94, (uint64_t)&v89);
  sub_18D1C8130((uint64_t)v65, SDWORD2(v57), v59);
LABEL_30:
  v91 = 0x100000007;
  v89 = &unk_1E25C81E0;
  v90 = xmmword_18D319810;
  v92 = (float64x2_t *)&v93;
  *(int64x2_t *)v65 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v65[16] = *(_OWORD *)v65;
  v66[0] = *(_OWORD *)v65;
  v66[1] = *(_OWORD *)v65;
  v66[2] = *(_OWORD *)v65;
  v66[3] = *(_OWORD *)v65;
  v66[4] = *(_OWORD *)v65;
  v66[5] = *(_OWORD *)v65;
  v66[6] = *(_OWORD *)v65;
  v66[7] = *(_OWORD *)v65;
  v66[8] = *(_OWORD *)v65;
  v66[9] = *(_OWORD *)v65;
  v66[10] = *(_OWORD *)v65;
  v66[11] = *(_OWORD *)v65;
  v67 = *(_OWORD *)v65;
  v68 = *(_OWORD *)v65;
  v69 = *(_OWORD *)v65;
  v70 = *(_OWORD *)v65;
  v71 = *(_OWORD *)v65;
  v72 = *(_OWORD *)v65;
  v73 = *(_OWORD *)v65;
  v74 = *(_OWORD *)v65;
  v75 = *(_OWORD *)v65;
  v76 = *(_OWORD *)v65;
  v77 = *(_OWORD *)v65;
  v78 = *(_OWORD *)v65;
  v79 = *(_OWORD *)v65;
  v80 = *(_OWORD *)v65;
  v81 = *(_OWORD *)v65;
  v82 = *(_OWORD *)v65;
  v83 = *(_OWORD *)v65;
  v84 = *(_OWORD *)v65;
  v85 = *(_OWORD *)v65;
  v86 = *(_OWORD *)v65;
  v87 = *(_OWORD *)v65;
  v88 = 0x7FF8000000000000;
  LOBYTE(v56) = 0;
  if (sub_18D1C9FFC((uint64_t)&v94, a1, v22, (uint64_t)&v89, (uint64_t)v65, (BOOL *)&v56, 0.000000015))
  {
    LOWORD(v56) = 12;
    v61[0] = 4;
    v44 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, v61, "time,%.3lf,h-function failure on line %d: %s() %s", v39, v40, v41, v42, v43, SLOBYTE(v44));
    return 0xFFFFFFFFLL;
  }
  v103 = *v92;
  v104 = v92[1].f64[0];
  if (cnnavigation::ECEFToLLA(&v103, 1, v102, 1, (uint64_t)v61))
  {
    sub_18D1C741C((uint64_t)(v14 + 40), (uint64_t)"coordinate conversion error", (uint64_t)"h_UserAltitude_RavenPNT", 6810, v45, v46, v47, v48);
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)&v49 = 0x100000001;
  *((_QWORD *)&v49 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v49;
  **(double **)(a4 + 32) = v102[2] - v23 + **(double **)(a2 + 32);
  v58 = 0x1A00000001;
  v56 = &off_1E25C6B30;
  v59 = (double *)v60;
  v57 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v56, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v56);
  v50 = v62;
  v51 = v63;
  v52 = *(double **)(a5 + 32);
  *v52 = v62 * *((double *)&v67 + 1);
  v53 = *(int *)(a5 + 20);
  v52[v53] = v51 * *(double *)&v71;
  v54 = v64;
  v52[2 * v53] = v64 * *((double *)&v74 + 1);
  v52[6 * (int)v53] = v51 * *((double *)&v71 + 1) + v50 * *(double *)&v68 + v54 * *(double *)&v75;
  v52[7 * (int)v53] = v51 * *(double *)&v72 + v50 * *((double *)&v68 + 1) + v54 * *((double *)&v75 + 1);
  v52[8 * v53] = v51 * *((double *)&v72 + 1) + v50 * *(double *)&v69 + v54 * *(double *)&v76;
  v52[20 * (int)v53] = v51 * *(double *)&v73 + v50 * *((double *)&v69 + 1) + v54 * *((double *)&v76 + 1);
  v52[21 * (int)v53] = v51 * *((double *)&v73 + 1) + v50 * *(double *)&v70 + v54 * *(double *)&v77;
  v52[22 * (int)v53] = v51 * *(double *)&v74 + v50 * *((double *)&v70 + 1) + v54 * *((double *)&v77 + 1);
  sub_18D1CC610(1u, 1u, (uint64_t)&v56);
  sub_18D053AA8(a6, (uint64_t)&v56);
  return 0;
}

uint64_t sub_18D198414(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AttitudeChangeEvent *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  int8x16_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  int v39;
  __int32 v40;
  BOOL v41;
  __int32 v42;
  __n128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v60;
  double v61;
  double v62;
  double v63;
  _QWORD v64[4];
  char v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  double v72;
  __int128 v73;
  _BYTE v74[8];
  unsigned int v75;
  uint64_t v76;
  void *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  __int128 *v86;
  __int128 v87;
  uint64_t v88;
  int8x16_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned __int8 v95;
  void (*v96[5])(uint64_t);

  v96[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v85 = 0x100000003;
  v83 = &unk_1E25C7790;
  v84 = xmmword_18D313070;
  v86 = &v87;
  v87 = *(_OWORD *)((char *)a2 + 200);
  v88 = *((_QWORD *)a2 + 27);
  v76 = 0x100000000;
  v79 = 0x100000003;
  v77 = &unk_1E25C77C0;
  v78 = xmmword_18D313070;
  v82 = 2;
  v80 = &v81;
  v81 = 0x100000000;
  sub_18D161D4C((uint64_t)a2 + 232, (uint64_t)&v77, (uint64_t)&v77, (uint64_t)v74);
  v4 = (*(uint64_t (**)(const raven::AttitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v6 = v5;
  *(_QWORD *)&v73 = v4;
  *((double *)&v73 + 1) = v5;
  sub_18D1C7988(v64, 5);
  v64[0] = off_1E25C43A8;
  v66 = v73;
  v89 = *(int8x16_t *)((char *)a2 + 104);
  v8 = CNTimeSpan::operator-((uint64_t)&v73, &v89, v89, v7);
  v72 = v9 + (double)v8;
  v67 = (char *)this + 2696;
  v68 = (char *)this + 14600;
  v69 = (char *)this + 14616;
  v70 = (char *)this + 2536;
  v71 = (char *)this + 2576;
  if ((v75 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v92 = 0x100000003;
  v10 = (char *)this + 61288;
  v89.i64[0] = (uint64_t)&unk_1E25C7790;
  v93 = &v94;
  v89.i64[1] = v75 | 0x100000000;
  v90 = v75;
  v91 = v75;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v89, 0.0);
  if (*((_BYTE *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v96[0]) = 2;
      v95 = 2;
      v60 = v6 + (double)v4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v60));
    }
    else if (*((_BYTE *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
      {
        LOWORD(v96[0]) = 2;
        v95 = 1;
        v62 = v6 + (double)v4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v23, v24, v25, v26, v27, SLOBYTE(v62));
      }
    }
    else
    {
      v28 = sub_18D03FE4C((double *)&v73, (double *)this + 7662);
      if (v28)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v28) <= 1)
        {
          LOWORD(v96[0]) = 2;
          v95 = 1;
          v63 = *((double *)&v73 + 1) + (double)(uint64_t)v73;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v29, v30, v31, v32, v33, SLOBYTE(v63));
        }
      }
      else
      {
        v96[0] = 0;
        v96[1] = 0;
        sub_18D1CCC00((void (**)(int))v96, (uint64_t)v64);
        v34 = sub_18D1C7B34((uint64_t *)this + 7666, v96);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v96);
        v35 = *((int *)this + 16806);
        v36 = (v35 + 1);
        if (*((_QWORD *)this + 7668) == v36)
        {
          *((_DWORD *)this + 16806) = v36;
          *((_DWORD *)this + 15340) = v36;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v36;
          *((_DWORD *)this + 15343) = v36;
          *((_DWORD *)this + 16046) = v36;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v36;
          *((_DWORD *)this + 16049) = v36;
          *((_DWORD *)this + 16230) = v36;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v36;
          *((_DWORD *)this + 16233) = v36;
          *((_DWORD *)this + 16588) = v36;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v36;
          *((_DWORD *)this + 16591) = v36;
          *((_DWORD *)this + 16600) = v36;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v36;
          *((_DWORD *)this + 16603) = v36;
          *((_DWORD *)this + 16784) = v36;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v36;
          *((_DWORD *)this + 16787) = v36;
          *((_DWORD *)this + 16796) = v36;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v36;
          *((_DWORD *)this + 16799) = v36;
          *((_DWORD *)this + 16810) = v36;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v36;
          *((_DWORD *)this + 16813) = v36;
          *((_DWORD *)this + 17168) = v36;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v36;
          *((_DWORD *)this + 17171) = v36;
          *(_OWORD *)(*((_QWORD *)this + 7673) + 16 * v35) = v73;
          if (v84 <= DWORD1(v84))
            v37 = DWORD1(v84);
          else
            v37 = v84;
          if (DWORD1(v84))
            v38 = (_DWORD)v84 == 0;
          else
            v38 = 1;
          if (v38)
            v39 = 0;
          else
            v39 = v37;
          *(_DWORD *)(*((_QWORD *)this + 8026) + 4 * v35) = v39;
          sub_18D053AA8(*((_QWORD *)this + 8297) + (v35 << 6), (uint64_t)&v83);
          if (v89.i32[2] <= (unsigned __int32)v89.i32[3])
            v40 = v89.i32[3];
          else
            v40 = v89.i32[2];
          if (v89.i32[3])
            v41 = v89.i32[2] == 0;
          else
            v41 = 1;
          if (v41)
            v42 = 0;
          else
            v42 = v40;
          *(_DWORD *)(*((_QWORD *)this + 8303) + 4 * v35) = v42;
          sub_18D053AA8(*((_QWORD *)this + 8395) + (v35 << 6), (uint64_t)&v89);
          v43 = sub_18D053AA8(*((_QWORD *)this + 8401) + 112 * (int)v35, (uint64_t)v74);
          *(_QWORD *)(*((_QWORD *)this + 8408) + 8 * v35) = sub_18D198A6C;
          if (*v34)
            v44 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v34)(3, v34, 0, &unk_1E25B4820, &std::__any_imp::__unique_typeinfo<raven::h_DeviceAttitudeChangeArgs_RavenPNT<double>>::__id, v43);
          else
            v44 = 0;
          v17 = 0;
          *(_QWORD *)(*((_QWORD *)v10 + 926) + 8 * v35) = v44;
          goto LABEL_43;
        }
        LOWORD(v96[0]) = 2;
        v95 = 4;
        v45 = (*(uint64_t (**)(uint64_t))(v64[0] + 16))((uint64_t)v64);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v46, v47, v48, v49, v50, v45);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
  {
    LOWORD(v96[0]) = 2;
    v95 = 1;
    v61 = v6 + (double)v4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v18, v19, v20, v21, v22, SLOBYTE(v61));
  }
  LOWORD(v96[0]) = 12;
  v95 = 4;
  v89.i64[0] = (*(uint64_t (**)(const raven::AttitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v89.i64[1] = v51;
  v52 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v89, "Could not add measurement - device attitude-change");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v58) = v52;
  else
    v58 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "%s", v53, v54, v55, v56, v57, v58);
  v17 = 0xFFFFFFFFLL;
LABEL_43:
  v64[0] = &unk_1E25B8EE0;
  if (v65 < 0)
    operator delete((void *)v64[2]);
  return v17;
}

void sub_18D198A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D198A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  char *v20;
  int8x16_t v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double *v84;
  double *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  uint64_t j;
  double v90;
  _BYTE v91[664];
  _BYTE v92[472];
  _BYTE v93[472];
  void *v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD v98[12];
  void *v99;
  __int128 v100;
  uint64_t v101;
  double *v102;
  double v103[12];
  uint64_t (**v104)();
  __int128 v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE v108[832];
  _BYTE v109[472];
  void *v110;
  __int128 v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD v114[12];
  void *v115;
  __int128 v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD v119[12];
  double v120[4];
  _QWORD v121[4];
  double v122[4];
  int64x2_t v123[3];
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  uint64_t v156;
  void *v157;
  __int128 v158;
  uint64_t v159;
  double *v160;
  uint64_t v161;
  void *v162;
  __int128 v163;
  uint64_t v164;
  double *v165;
  uint64_t v166;
  uint64_t (**v167)();
  uint64_t v168;
  _QWORD v169[5];
  uint64_t v170;
  void *v171;
  __int128 v172;
  uint64_t v173;
  double *v174;
  uint64_t v175;
  uint64_t (**v176)();
  __int128 v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD v180[27];
  __int128 v181;
  _OWORD v182[3];
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD v188[24];
  _BYTE v189[160];
  uint64_t v190;
  uint64_t (**v191)();
  _BYTE v192[24];
  _QWORD v193[9];
  _QWORD v194[24];
  _BYTE v195[168];
  uint64_t v196;
  uint64_t v197;
  void *v198;
  __int128 v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD v202[20];
  __int128 v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD v206[362];
  __int128 v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  _BYTE v211[32];
  void *v212;
  __int128 v213;
  uint64_t v214;
  double *v215;
  uint64_t v216;
  _OWORD v217[3];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  void *v251;
  __int128 v252;
  uint64_t v253;
  double *v254;
  uint64_t v255;
  void *v256;
  __int128 v257;
  uint64_t v258;
  double *v259;
  uint64_t v260;
  void *v261;
  __int128 v262;
  uint64_t v263;
  double *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  int8x16_t v270[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = v5;
  v9 = v4;
  v10 = v3;
  v12 = v11;
  v14 = v13;
  v15 = v2;
  v16 = atomic_load((unsigned __int8 *)&qword_1ECF23110);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23110))
  {
    *(_QWORD *)&v192[16] = 0x1300000001;
    v191 = &off_1E25C6830;
    v193[0] = &v193[1];
    *(_OWORD *)v192 = xmmword_18D319900;
    for (i = 10; i != 29; ++i)
      *(_DWORD *)&v192[4 * i - 8] = i - 10;
    sub_18D1B9FA8((uint64_t)&unk_1ECF23968, (uint64_t)&v191);
    __cxa_atexit((void (*)(void *))sub_18D1BE790, &unk_1ECF23968, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23110);
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1ECF23118);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23118))
  {
    *(_QWORD *)&v192[16] = 0x1A00000001;
    v191 = &off_1E25C6B60;
    v193[0] = &v193[1];
    *(_OWORD *)v192 = xmmword_18D3198D0;
    for (j = 10; j != 28; ++j)
      *(_DWORD *)&v192[4 * j - 8] = j - 10;
    sub_18D1B741C((uint64_t)&unk_1ECF23CE0, (uint64_t)&v191);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1ECF23CE0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23118);
  }
  v18 = atomic_load((unsigned __int8 *)&qword_1ECF23120);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23120))
  {
    *(_QWORD *)&v192[16] = 0x1A00000001;
    v191 = &off_1E25C6B60;
    v193[0] = &v193[1];
    *(_OWORD *)v192 = xmmword_18D314670;
    v193[1] = 0x700000006;
    LODWORD(v193[2]) = 8;
    sub_18D1B741C((uint64_t)&unk_1ECF23D70, (uint64_t)&v191);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1ECF23D70, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23120);
  }
  v19 = atomic_load((unsigned __int8 *)&qword_1ECF23128);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23128))
  {
    *(_QWORD *)&v192[16] = 0x300000001;
    v191 = (uint64_t (**)())&unk_1E25C6C50;
    v193[0] = &v193[1];
    *(_OWORD *)v192 = xmmword_18D314670;
    v193[1] = 0x100000000;
    LODWORD(v193[2]) = 2;
    sub_18D16169C((uint64_t)&v191, (uint64_t)&unk_1ECF234A0);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF234A0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23128);
  }
  if (!v12
    || (v20 = (char *)__dynamic_cast(v12, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4820, 0)) == 0)
  {
    LOWORD(v191) = 12;
    LOBYTE(v104) = 4;
    v38 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_26:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v191, (unsigned __int8 *)&v104, "time,%.3lf,h-function failure on line %d: %s() %s", v3, v4, v5, v6, v7, SLOBYTE(v38));
    return 0xFFFFFFFFLL;
  }
  v22 = v20;
  v24 = *(_DWORD *)(v15 + 8);
  v23 = *(_DWORD *)(v15 + 12);
  if (v24 <= v23)
    v25 = *(_DWORD *)(v15 + 12);
  else
    v25 = *(_DWORD *)(v15 + 8);
  if (!v24
    || !v23
    || v25 != 26
    || ((v27 = *(_DWORD *)(v14 + 8), v26 = *(_DWORD *)(v14 + 12), v27 <= v26)
      ? (v28 = *(_DWORD *)(v14 + 12))
      : (v28 = *(_DWORD *)(v14 + 8)),
        !v27 || !v26 || v28 != 3))
  {
    LOWORD(v191) = 12;
    LOBYTE(v104) = 4;
    v38 = *((double *)v20 + 6) + (double)*((uint64_t *)v20 + 5);
    goto LABEL_26;
  }
  if (!*((_QWORD *)v20 + 7))
  {
    LOWORD(v191) = 12;
    LOBYTE(v104) = 4;
    v38 = *((double *)v20 + 6) + (double)*((uint64_t *)v20 + 5);
    goto LABEL_26;
  }
  v21.i64[0] = *((_QWORD *)v20 + 12);
  if ((v21.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)v21.i64 <= 0.0)
  {
    LOWORD(v191) = 12;
    LOBYTE(v104) = 4;
    v38 = *((double *)v20 + 6) + (double)*((uint64_t *)v20 + 5);
    goto LABEL_26;
  }
  v270[0] = *(int8x16_t *)(v20 + 40);
  *(_QWORD *)v192 = 0;
  v191 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v191, 0, v21, v270[0]);
  *(_QWORD *)&v269 = CNTimeSpan::operator-((uint64_t)v270, &v191, v29, v30);
  *((_QWORD *)&v269 + 1) = v31;
  v32 = v22[9];
  v268 = *(_OWORD *)v22[8];
  sub_18D1D6E1C((uint64_t)&v266, v32);
  v33 = v22[7];
  v263 = 0x10000001CLL;
  v261 = &unk_1E25C72B0;
  v262 = xmmword_18D319860;
  v264 = (double *)&v265;
  if (!sub_18D1C7470((uint64_t)v270, (uint64_t)&v268, v267, v33, v22[11], (uint64_t)&v261))
  {
    v258 = 0x10000001CLL;
    v256 = &unk_1E25C72B0;
    v259 = (double *)&v260;
    v257 = xmmword_18D319780;
    sub_18D04BE88((uint64_t)&v256, 0.0);
    sub_18D1D86F8((uint64_t)&v191, (uint64_t)&v256, (uint64_t)&unk_1ECF23968);
    sub_18D1C9EF8((uint64_t)&v191, SDWORD2(v262), v264);
    v253 = 0x100000013;
    v251 = &unk_1E25C66B0;
    v252 = xmmword_18D319860;
    v254 = (double *)&v255;
    v217[0] = vdupq_n_s64(0x7FF8000000000000uLL);
    v217[1] = v217[0];
    v217[2] = v217[0];
    v218 = v217[0];
    v219 = v217[0];
    v220 = v217[0];
    v221 = v217[0];
    v222 = v217[0];
    v223 = v217[0];
    v224 = v217[0];
    v225 = v217[0];
    v226 = v217[0];
    v227 = v217[0];
    v228 = v217[0];
    v229 = v217[0];
    v230 = v217[0];
    v231 = v217[0];
    v232 = v217[0];
    v233 = v217[0];
    v234 = v217[0];
    v235 = v217[0];
    v236 = v217[0];
    v237 = v217[0];
    v238 = v217[0];
    v239 = v217[0];
    v240 = v217[0];
    v241 = v217[0];
    v242 = v217[0];
    v243 = v217[0];
    v244 = v217[0];
    v245 = v217[0];
    v246 = v217[0];
    v247 = v217[0];
    v248 = v217[0];
    v249 = v217[0];
    v250 = 0x7FF8000000000000;
    sub_18D1C75E8(v259, *(double **)(v15 + 32), (uint64_t)&v251, (uint64_t)v217);
    v214 = 0x10000001CLL;
    v212 = &unk_1E25C72B0;
    v213 = xmmword_18D319860;
    v215 = (double *)&v216;
    v45 = (uint64_t)(v22 + 5);
    if (sub_18D1C7470((uint64_t)&v269, (uint64_t)&v268, v267, v33, v22[11], (uint64_t)&v212))
    {
      sub_18D1C741C((uint64_t)(v22 + 5), (uint64_t)"could not integrate full states", (uint64_t)"h_DeviceAttitudeChange_RavenPNT", 2481, v41, v42, v43, v44);
      return 0xFFFFFFFFLL;
    }
    memset(v193, 0, 25);
    *(_OWORD *)&v192[8] = 0u;
    v193[7] = 0x100000013;
    v193[6] = 0;
    v193[4] = &unk_1E25C66B0;
    v193[5] = 0;
    v194[22] = 0x100000013;
    v193[8] = v194;
    v194[19] = &unk_1E25C66B0;
    v194[21] = 0;
    v194[20] = 0;
    v195[152] = 1;
    v194[23] = v195;
    v196 = 0;
    v200 = 0x100000013;
    v197 = 0;
    v198 = &unk_1E25C66B0;
    v199 = xmmword_18D319860;
    v201 = v202;
    v204 = 0x1300000013;
    v202[19] = &unk_1E25C6680;
    v203 = xmmword_18D319870;
    v205 = v206;
    v208 = 0xF00000013;
    v206[361] = &unk_1E25C6620;
    v207 = xmmword_18D319880;
    v209 = &v210;
    v192[0] = 0;
    v195[160] = 0;
    v191 = (uint64_t (**)())&unk_1E25C3648;
    memset(v211, 0, sizeof(v211));
    memset(v182, 0, 41);
    v186 = 0x100000013;
    v185 = 0;
    v183 = &unk_1E25C66B0;
    v184 = 0;
    v188[22] = 0x100000013;
    v187 = v188;
    v188[19] = &unk_1E25C66B0;
    v188[21] = 0;
    v188[20] = 0;
    v189[152] = 1;
    v188[23] = v189;
    v190 = 0;
    if (sub_18D1CB920(v33, (uint64_t)v182))
    {
      v50 = 2495;
      v51 = "could not get integrator configuration";
    }
    else
    {
      if (!sub_18D18FCC0((uint64_t)&v191, (uint64_t)v182))
      {
        v180[23] = &v191;
        v180[24] = v270;
        v52 = v22[11];
        v180[25] = &v261;
        v180[26] = v52;
        v181 = v269;
        v178 = 0x100000017;
        v176 = &off_1E25C6F20;
        v179 = v180;
        v177 = xmmword_18D3198E0;
        sub_18D04BE88((uint64_t)&v176, 0.0);
        v173 = 0x10000001ALL;
        v171 = &unk_1E25C70A0;
        v172 = xmmword_18D319790;
        v174 = (double *)&v175;
        sub_18D1C99C8((uint64_t)v169);
        sub_18D1CBE44((uint64_t)&v167);
        sub_18D1B63F0((uint64_t)&v104, *(_QWORD *)(v15 + 32), (uint64_t)&unk_1ECF23CE0);
        if (sub_18D1BB3E0((uint64_t)&v104, (uint64_t)&v176))
        {
          v57.n128_f64[0] = sub_18D1C741C(v45, (uint64_t)"could not evaluate position dynamics", (uint64_t)"h_DeviceAttitudeChange_RavenPNT", 2524, v53, v54, v55, v56);
          v39 = 0xFFFFFFFFLL;
        }
        else
        {
          v164 = 0x10000001CLL;
          v162 = &unk_1E25C72B0;
          v165 = (double *)&v166;
          v163 = xmmword_18D319780;
          v58 = 0.0;
          sub_18D04BE88((uint64_t)&v162, 0.0);
          sub_18D1D86F8((uint64_t)&v104, (uint64_t)&v162, (uint64_t)&unk_1ECF23968);
          sub_18D1C9EF8((uint64_t)&v104, SDWORD2(v213), v215);
          v159 = 0x100000013;
          v157 = &unk_1E25C66B0;
          v158 = xmmword_18D319860;
          v160 = (double *)&v161;
          v123[0] = vdupq_n_s64(0x7FF8000000000000uLL);
          v123[1] = v123[0];
          v123[2] = v123[0];
          v124 = v123[0];
          v125 = v123[0];
          v126 = v123[0];
          v127 = v123[0];
          v128 = v123[0];
          v129 = v123[0];
          v130 = v123[0];
          v131 = v123[0];
          v132 = v123[0];
          v133 = v123[0];
          v134 = v123[0];
          v135 = v123[0];
          v136 = v123[0];
          v137 = v123[0];
          v138 = v123[0];
          v139 = v123[0];
          v140 = v123[0];
          v141 = v123[0];
          v142 = v123[0];
          v143 = v123[0];
          v144 = v123[0];
          v145 = v123[0];
          v146 = v123[0];
          v147 = v123[0];
          v148 = v123[0];
          v149 = v123[0];
          v150 = v123[0];
          v151 = v123[0];
          v152 = v123[0];
          v153 = v123[0];
          v154 = v123[0];
          v155 = v123[0];
          v156 = 0x7FF8000000000000;
          sub_18D1C75E8(v165, v174, (uint64_t)&v157, (uint64_t)v123);
          v59 = v254[6];
          v60 = v254[7];
          v62 = v254[8];
          v61 = v254[9];
          v63 = sqrt(v60 * v60 + v59 * v59 + v62 * v62 + v61 * v61);
          v64 = 1.0;
          v65 = 0.0;
          v66 = 0.0;
          v67 = 1.0;
          if (fabs(v63) >= 2.22044605e-16)
          {
            v58 = v59 / v63;
            v65 = v60 / v63;
            v66 = v62 / v63;
            v67 = v61 / v63;
          }
          v90 = v254[9];
          v122[0] = v58;
          v122[1] = v65;
          v122[2] = v66;
          v122[3] = v67;
          v69 = v160[6];
          v68 = v160[7];
          v70 = v160[8];
          v71 = v160[9];
          v72 = sqrt(v68 * v68 + v69 * v69 + v70 * v70 + v71 * v71);
          v73 = 0.0;
          v74 = 0.0;
          v75 = 0.0;
          v76 = 0.0;
          if (fabs(v72) >= 2.22044605e-16)
          {
            v74 = v69 / v72;
            v75 = v68 / v72;
            v76 = v70 / v72;
            v64 = v71 / v72;
          }
          v77 = sqrt(v75 * v75 + v74 * v74 + v76 * v76 + v64 * v64);
          v78 = 1.0;
          v79 = 0.0;
          v80 = 0.0;
          if (fabs(v77) >= 2.22044605e-16)
          {
            v73 = -v74 / v77;
            v79 = -v75 / v77;
            v80 = -v76 / v77;
            v78 = v64 / v77;
          }
          *(double *)v121 = v73;
          *(double *)&v121[1] = v79;
          *(double *)&v121[2] = v80;
          *(double *)&v121[3] = v78;
          cnrotation::Cat(v122, (const cnrotation::CNRotation *)v121, v120);
          v81 = v120[0];
          v82 = v120[1];
          v83 = v120[2];
          *(_OWORD *)(v10 + 8) = xmmword_18D313070;
          v84 = *(double **)(v14 + 32);
          v85 = *(double **)(v10 + 32);
          *v85 = v81 + *v84;
          v85[1] = v82 + v84[1];
          v85[2] = v83 + v84[2];
          v117 = 0x400000003;
          v115 = &unk_1E25C7940;
          v116 = xmmword_18D3130B0;
          v118 = v119;
          *(double *)v119 = v71;
          *(double *)&v119[1] = -v70;
          *(double *)&v119[6] = -v68;
          *(double *)&v119[7] = v69;
          *(double *)&v119[3] = v70;
          *(double *)&v119[2] = v68;
          *(double *)&v119[4] = v71;
          *(double *)&v119[5] = -v69;
          *(double *)&v119[9] = -v69;
          *(double *)&v119[8] = v71;
          *(double *)&v119[10] = -v68;
          *(double *)&v119[11] = -v70;
          v112 = 0x300000004;
          v110 = &unk_1E25C7F70;
          v114[0] = v218;
          v114[1] = *((_QWORD *)&v219 + 1);
          v114[2] = v221;
          v114[3] = *((_QWORD *)&v222 + 1);
          v114[4] = *((_QWORD *)&v218 + 1);
          v114[5] = v220;
          v114[6] = *((_QWORD *)&v221 + 1);
          v114[7] = v223;
          v111 = xmmword_18D3130A0;
          v113 = v114;
          v114[8] = v219;
          v114[9] = *((_QWORD *)&v220 + 1);
          v114[10] = v222;
          v114[11] = *((_QWORD *)&v223 + 1);
          v106 = 0x1A00000003;
          v104 = &off_1E25C7850;
          v107 = v108;
          v105 = xmmword_18D319910;
          sub_18D04BE88((uint64_t)&v104, 0.0);
          sub_18D1CC9BC((uint64_t)v109, (uint64_t)&v104);
          sub_18D1913B4((uint64_t)&v115, (uint64_t)&v110, (uint64_t)v91);
          sub_18D1CBD74((uint64_t)&v104, (uint64_t)v109, (uint64_t)&unk_1ECF23D70);
          sub_18D1BEC80((uint64_t)&v104, (uint64_t)v91);
          v101 = 0x400000003;
          v99 = &unk_1E25C7940;
          v100 = xmmword_18D3130B0;
          v102 = v103;
          v103[0] = -v90;
          v103[1] = v62;
          v103[6] = v60;
          v103[7] = -v59;
          v103[3] = -v62;
          v103[2] = -v60;
          v103[4] = -v90;
          v103[5] = v59;
          v103[9] = v59;
          v103[8] = -v90;
          v103[10] = v60;
          v103[11] = v62;
          v96 = 0x300000004;
          v94 = &unk_1E25C7F70;
          v95 = xmmword_18D3130A0;
          v97 = v98;
          v98[0] = v124.i64[0];
          v98[1] = v125.i64[1];
          v98[2] = v127.i64[0];
          v98[3] = v128.i64[1];
          v98[4] = v124.i64[1];
          v98[5] = v126.i64[0];
          v98[6] = v127.i64[1];
          v98[7] = v129.i64[0];
          v98[8] = v125.i64[0];
          v98[9] = v126.i64[1];
          v98[10] = v128.i64[0];
          v98[11] = v129.i64[1];
          v106 = 0x1A00000003;
          v104 = &off_1E25C7850;
          v107 = v108;
          v105 = xmmword_18D319910;
          sub_18D04BE88((uint64_t)&v104, 0.0);
          sub_18D1CC9BC((uint64_t)v93, (uint64_t)&v104);
          sub_18D1913B4((uint64_t)&v99, (uint64_t)&v94, (uint64_t)v91);
          sub_18D1CBD74((uint64_t)&v104, (uint64_t)v93, (uint64_t)&unk_1ECF23D70);
          sub_18D1BEC80((uint64_t)&v104, (uint64_t)v91);
          v106 = 0x1A00000003;
          v104 = &off_1E25C7850;
          v107 = v108;
          v105 = xmmword_18D319800;
          sub_18D04BE88((uint64_t)&v104, 0.0);
          sub_18D053AA8(v9, (uint64_t)&v104);
          sub_18D1CC93C((uint64_t)v91, (uint64_t)v93, (uint64_t)v169);
          sub_18D1CC8D0((uint64_t)v92, (uint64_t)v109, (uint64_t)v91);
          sub_18D1CBD74((uint64_t)&v104, v9, (uint64_t)&unk_1ECF23CE0);
          sub_18D1BEC80((uint64_t)&v104, (uint64_t)v92);
          sub_18D1BE948(3u, 3u, (uint64_t)&v104);
          v57 = sub_18D053AA8(v8, (uint64_t)&v104);
          v39 = 0;
        }
        v86 = v168;
        v167 = &off_1E25C7130;
        v168 = 0;
        if (v86)
          MEMORY[0x18D78B5BC](v86, 0x1000C8000313F17, v57);
        v87 = v170;
        v169[0] = &unk_1E25C7160;
        v170 = 0;
        if (v87)
          MEMORY[0x18D78B5BC](v87, 0x1000C8000313F17, v57);
        goto LABEL_38;
      }
      v50 = 2500;
      v51 = "could not set integrator configuration";
    }
    sub_18D1C741C(v45, (uint64_t)v51, (uint64_t)"h_DeviceAttitudeChange_RavenPNT", v50, v46, v47, v48, v49);
    v39 = 0xFFFFFFFFLL;
LABEL_38:
    v191 = (uint64_t (**)())&unk_1E25C3648;
    v104 = (uint64_t (**)())v211;
    sub_18D1C4ED8((void ***)&v104);
    return v39;
  }
  sub_18D1C741C((uint64_t)(v22 + 5), (uint64_t)"could not integrate full states", (uint64_t)"h_DeviceAttitudeChange_RavenPNT", 2456, v34, v35, v36, v37);
  return 0xFFFFFFFFLL;
}

void sub_18D199B24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF23128);
  _Unwind_Resume(a1);
}

uint64_t sub_18D199C3C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AttitudeEvent *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  unsigned __int8 v13;
  __int16 v14;

  if (*((_BYTE *)this + 57))
  {
    if (*((_BYTE *)a2 + 217) == 1)
    {
      sub_18D1CCD94((uint64_t)this + 19432, (uint64_t)a2);
      return 0;
    }
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v14 = 12;
      v13 = 1;
      v12[0] = (*(uint64_t (**)(const raven::AttitudeEvent *))(*(_QWORD *)a2 + 16))(a2);
      v12[1] = v5;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v12, "Unexpected attitude rotation type,%d", *((unsigned __int8 *)a2 + 217));
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v11) = (_BYTE)this - 72;
      else
        v11 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v6, v7, v8, v9, v10, v11);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  raven::RavenEstimator *v2;
  const raven::GnssPreprocessedMeasurementsEvent *v3;
  uint64_t v4;
  unsigned int *v5;
  cnprint::CNPrinter *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  double v21;
  int8x16_t v22;
  int8x16_t v23;
  _BOOL8 v24;
  int8x16_t v25;
  double v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int8x16_t v35;
  uint64_t v36;
  _BOOL4 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  uint64_t v66;
  double v67;
  int8x16_t v68;
  _BOOL4 v69;
  int8x16_t *v70;
  void **v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  double *v79;
  double v80;
  int v81;
  double v82;
  int v83;
  double v84;
  int8x16_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int i;
  uint64_t j;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  _QWORD *v110;
  int v111;
  int v112;
  int k;
  unsigned int v114;
  BOOL v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  double v138;
  unsigned int v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  int v146;
  char v147;
  __int128 *v148;
  uint64_t v149;
  char v150;
  __int128 v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  int *v159;
  _DWORD *v160;
  int v161;
  uint64_t v162;
  char v163;
  __int128 v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  int *v172;
  _DWORD *v173;
  int v174;
  unsigned int (*v175)(_BYTE *, _BYTE *, _QWORD, void (**)(uint64_t), _BYTE *, _BYTE *);
  uint64_t v176;
  int *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  __n128 v181;
  double v182;
  double v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  __int128 v201;
  int v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  __int128 *v206;
  uint64_t v207;
  char v208;
  __int128 v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  int v215;
  uint64_t v216;
  int *v217;
  _DWORD *v218;
  int v219;
  uint64_t v220;
  char v221;
  __int128 v222;
  int v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  int *v230;
  _DWORD *v231;
  int v232;
  uint64_t *v233;
  _QWORD *v234;
  unsigned int v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int *v242;
  _DWORD *v243;
  int v244;
  uint64_t v245;
  char v246;
  __int128 v247;
  int v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  int *v255;
  _DWORD *v256;
  int v257;
  uint64_t v258;
  uint64_t *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  int *v263;
  uint64_t *v264;
  _QWORD *v265;
  uint64_t v266;
  char v267;
  __int128 v268;
  int v269;
  int v270;
  uint64_t v271;
  int v272;
  int m;
  int v274;
  unsigned int v275;
  char v276;
  __int128 v277;
  int v278;
  uint64_t v279;
  int v280;
  int n;
  int v282;
  int v283;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  unsigned __int8 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  uint64_t v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  __int128 v321;
  char v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  _OWORD *v330;
  _OWORD *v331;
  _QWORD *v332;
  _OWORD *v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  _OWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  _QWORD *v341;
  char v342;
  int8x16_t v343;
  int8x16_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t updated;
  double v349;
  int8x16_t v350;
  int8x16_t v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t *ITRCount;
  int v355;
  uint64_t *v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t UnprocessedMSRData;
  uint64_t v360;
  unsigned int v361;
  char *v362;
  uint64_t *v363;
  const std::string *v364;
  int v365;
  __int128 v366;
  char *v367;
  uint64_t v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  int v378;
  int v379;
  char *v380;
  uint64_t v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  char *v390;
  uint64_t v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  char *v400;
  cnprint::CNPrinter *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _BOOL8 v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  BOOL v427;
  int v428;
  int v429;
  BOOL v430;
  int v431;
  __n128 v432;
  char v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  const char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  cnprint::CNPrinter *LogLevel;
  uint64_t v448;
  const char *v449;
  char v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  const char *v458;
  char v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  const char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  const char *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  const char *v483;
  double v484;
  double v485;
  double v486;
  double v487;
  int v488;
  int64x2_t v489;
  int v490;
  _BOOL4 v491;
  unsigned int *v492;
  uint64_t v493;
  void *v494;
  uint64_t v495;
  uint64_t v496;
  _BYTE *v497;
  uint64_t v498;
  unsigned int v499;
  int64x2_t v500;
  int v501;
  unsigned int v502;
  unsigned int v503;
  char v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  uint64_t v509;
  void *v510[2];
  char v511;
  void *v512[2];
  char v513;
  void *__p[2];
  char v515;
  void *v516;
  __int128 v517;
  uint64_t v518;
  _QWORD *v519;
  _QWORD v520[2];
  double v521;
  _QWORD v522[2];
  __int128 v523;
  uint64_t v524;
  _QWORD *v525;
  _QWORD v526[2];
  void *v527;
  __int128 v528;
  uint64_t v529;
  __int128 *v530;
  __int128 v531;
  void *v532;
  __int128 v533;
  uint64_t v534;
  uint64_t *v535;
  uint64_t v536;
  _QWORD v537[2];
  double v538;
  int64x2_t v539;
  int64x2_t v540;
  double v541;
  double v542;
  double v543;
  double v544;
  int8x16_t v545;
  _QWORD v546[2];
  uint64_t v547[2];
  uint64_t v548[2];
  int8x16_t v549;
  void *v550;
  double v551;
  void *v552[2];
  uint64_t v553;
  __int128 v554;
  __int128 v555;
  uint64_t v556;
  uint64_t v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  _OWORD v562[9];
  void (**v563)(cnnavigation::GNSSEphemerides *__hidden);
  std::string v564;
  uint64_t v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  uint64_t *v579;
  uint64_t v580;
  uint64_t v581;
  void *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _BYTE *v586;
  _BYTE v587[64];
  void *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  _BYTE *v592;
  _BYTE v593[64];
  void *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  _BYTE *v598;
  _BYTE v599[512];
  void *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  _BYTE *v604;
  _BYTE v605[64];
  uint64_t v606;
  char v607;
  _BYTE v608[20];
  __int128 v609;
  __int128 v610;
  __int128 v611;
  _BYTE v612[24];
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  uint64_t v620;
  void *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  _BYTE *v625;
  _BYTE v626[512];
  void *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  _BYTE *v631;
  _BYTE v632[64];
  void *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  _BYTE *v637;
  _BYTE v638[512];
  __int128 v639;
  int8x16_t v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  uint64_t v645;
  uint64_t v646;
  double v647;
  __int128 v648;
  char v649;
  uint64_t v650;
  uint64_t v651;
  char v652;
  uint64_t v653;
  uint64_t v654;
  char v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  void *v659;
  int v660;
  int v661;
  int v662;
  int v663;
  uint64_t v664;
  uint64_t *v665;
  uint64_t v666;
  _BYTE v667[32];
  __int128 v668;
  __int128 v669;
  __int128 v670;
  uint64_t v671;
  void *v672;
  __int128 v673;
  uint64_t v674;
  uint64_t *v675;
  uint64_t v676;
  void *v677;
  __int128 v678;
  uint64_t v679;
  _BYTE *v680;
  _BYTE v681[512];
  void *v682;
  __int128 v683;
  uint64_t v684;
  __int128 *v685;
  __int128 v686;
  uint64_t v687;
  void *v688;
  __int128 v689;
  uint64_t v690;
  _BYTE *v691;
  _BYTE v692[512];
  void *v693;
  __int128 v694;
  uint64_t v695;
  float64_t *v696;
  _BYTE v697[512];
  void *v698;
  __int128 v699;
  uint64_t v700;
  _DWORD *v701;
  _DWORD v702[128];
  _BYTE v703[32];
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  int64x2_t v714;
  void *v715;
  void *v716;
  __int128 v717;
  uint64_t v718;
  uint64_t *v719;
  uint64_t v720;
  void *v721;
  __int128 v722;
  uint64_t v723;
  uint64_t *v724;
  uint64_t v725;
  void *v726;
  __int128 v727;
  uint64_t v728;
  _BYTE *v729;
  _BYTE v730[512];
  uint64_t (**v731)();
  __int128 v732;
  uint64_t v733;
  _QWORD *v734;
  _QWORD v735[64];
  _BYTE v736[104];
  _BYTE v737[32];
  uint64_t *v738;
  uint64_t v739;
  int v740;
  _BYTE v741[104];
  void *v742;
  __int128 v743;
  uint64_t v744;
  int *v745;
  uint64_t v746;
  void *v747;
  __int128 v748;
  uint64_t v749;
  uint64_t *v750;
  uint64_t v751;
  _BYTE v752[32];
  _QWORD *v753;
  _BYTE v754[1112];
  _BYTE v755[32];
  uint64_t *v756;
  uint64_t v757;
  int v758;
  _BYTE v759[32];
  uint64_t v760;
  _BYTE __src[64];
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  _OWORD v767[4];
  __int128 v768;
  int64x2_t v769;
  void (**v770)(cnnavigation::GNSSEphemerides *__hidden);
  std::string v771;
  uint64_t v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  void (*v784)(uint64_t);
  __int128 v785;
  uint64_t v786;
  double *v787;
  _QWORD v788[67];

  v2 = (raven::RavenEstimator *)MEMORY[0x1E0C80A78](this, a2);
  v788[64] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)v2 + 57))
    return 0xFFFFFFFFLL;
  v4 = (uint64_t)v2;
  if (!*((_BYTE *)v2 + 58))
    return 0xFFFFFFFFLL;
  v5 = (unsigned int *)v3;
  v6 = (cnprint::CNPrinter *)raven::RavenEstimator::HandleGnssPreprocessedMeasurementsEvent(v2, v3);
  if ((_DWORD)v6)
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)v5 + 88))
  {
    if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
    {
      *(_WORD *)__src = 12;
      v703[0] = 1;
      v550 = (void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      v551 = v7;
      cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v550, "Encountered GnssPreprocessedMeasurementsEvent with no oscillator model.");
      if (*(char *)(v4 + 2511) >= 0)
        LOBYTE(v13) = v4 - 72;
      else
        v13 = *(_QWORD *)(v4 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, v703, "%s", v8, v9, v10, v11, v12, v13);
    }
    raven::RavenPNTEstimator::ResetOscillatorStates((raven::RavenPNTEstimator *)v4);
  }
  v550 = (void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  v551 = v14;
  if (!raven::RavenPNTEstimator::UpdateClockOffsetEstimateIfNecessary(v4, (uint64_t)(v5 + 6), (uint64_t)&v550))return 0xFFFFFFFFLL;
  v648 = 0uLL;
  v649 = 0;
  v651 = 0;
  v650 = 0;
  v652 = 0;
  v654 = 0;
  v653 = 0;
  v655 = 0;
  v657 = 0;
  v656 = 0;
  v658 = 0x7FF8000000000000;
  v493 = v4;
  v492 = v5;
  if (!*(_BYTE *)(*(_QWORD *)(v4 + 1168) + 3811)
    || (v15.i64[0] = 0x3EB0C6F7A0B5ED8DLL, !raven::RavenEstimator::AreGnssMeasurementsAtSameTime(v4, v5, &v648, v15, v16)))
  {
    v38 = 0;
    goto LABEL_342;
  }
  v19 = atomic_load((unsigned __int8 *)&qword_1ECF23050);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23050))
  {
    qword_1ECF231F8 = 0;
    dbl_1ECF23200 = 0.2;
    __cxa_guard_release(&qword_1ECF23050);
  }
  v20 = CNTimeSpan::operator-((uint64_t)&v648, (_QWORD *)(v4 + 14600), v17, v18);
  v550 = (void *)v20;
  v551 = v21;
  if (v20 < 0 || (*(double *)v22.i64 = v21, v21 < 0.0))
    v20 = CNTimeSpan::operator-((double *)&v550, v22, v23);
  v646 = v20;
  v647 = v21;
  v24 = sub_18D03F608((double *)&v646, (double *)&qword_1ECF231F8);
  if (v24)
    goto LABEL_19;
  if (v646)
  {
    if (v646 < 0)
      goto LABEL_19;
LABEL_32:
    v553 = 0x100000008;
    *(_QWORD *)&v561 = 0x800000008;
    v585 = 0x100000008;
    v591 = 0x100000008;
    v597 = 0x800000008;
    v603 = 0x100000008;
    v619 = 0u;
    v618 = 0u;
    v617 = 0u;
    v616 = 0u;
    v615 = 0u;
    v614 = 0u;
    v613 = 0u;
    *(_OWORD *)v608 = xmmword_18D3197A0;
    v624 = 0x800000008;
    v630 = 0x100000008;
    v636 = 0x800000008;
    v39 = *(_OWORD *)(v4 + 19272);
    v639 = *(_OWORD *)(v4 + 19256);
    v40 = *(_OWORD *)(v4 + 19256);
    v640 = *(int8x16_t *)(v4 + 19272);
    v41 = *(_OWORD *)(v4 + 19304);
    v641 = *(_OWORD *)(v4 + 19288);
    v42 = *(_OWORD *)(v4 + 19320);
    v644 = *(_OWORD *)(v4 + 19336);
    v643 = *(_OWORD *)(v4 + 19320);
    v43 = *(_OWORD *)(v4 + 19288);
    v642 = *(_OWORD *)(v4 + 19304);
    *(_OWORD *)&v608[4] = v40;
    v609 = v39;
    *(_QWORD *)&v554 = (char *)&v554 + 8;
    *((_QWORD *)&v559 + 1) = &unk_1E25C87E0;
    *((_QWORD *)&v561 + 1) = v562;
    v582 = &unk_1E25C86C0;
    v586 = v587;
    v588 = &unk_1E25C86C0;
    v592 = v593;
    v594 = &unk_1E25C87E0;
    v598 = v599;
    v600 = &unk_1E25C86C0;
    v604 = v605;
    LOBYTE(v610) = 0;
    v606 = 0;
    v552[1] = 0;
    v552[0] = 0;
    v560 = 0uLL;
    v584 = 0;
    v583 = 0;
    v590 = 0;
    v589 = 0;
    v596 = 0;
    v595 = 0;
    v602 = 0;
    v601 = 0;
    v620 = 0;
    v551 = COERCE_DOUBLE(&unk_1E25C86C0);
    v550 = &off_1E25B91D0;
    v621 = &unk_1E25C87E0;
    v625 = v626;
    v627 = &unk_1E25C86C0;
    v631 = v632;
    v633 = &unk_1E25C87E0;
    v637 = v638;
    v622 = 0;
    v623 = 0;
    v628 = 0;
    v629 = 0;
    v634 = 0;
    v635 = 0;
    v645 = *(_QWORD *)(v4 + 19352);
    v44 = *(_QWORD *)(v4 + 19336);
    v611 = v41;
    *(_OWORD *)v612 = v42;
    v610 = v43;
    *(_QWORD *)&v612[16] = v44;
    v607 = 0;
    LOBYTE(v44) = atomic_load((unsigned __int8 *)&qword_1ECF23058);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23058))
    {
      *(_QWORD *)&v755[24] = 0x1C00000001;
      *(_QWORD *)v755 = &off_1E25C6B90;
      v756 = &v757;
      *(_OWORD *)&v755[8] = xmmword_18D314670;
      v757 = 0x100000000;
      v758 = 2;
      sub_18D1A0634((uint64_t)v667, (uint64_t)v755);
      *(_QWORD *)&v737[24] = 0x1C00000001;
      *(_QWORD *)v737 = &off_1E25C6B90;
      v738 = &v739;
      *(_OWORD *)&v737[8] = xmmword_18D314670;
      v739 = 0x400000003;
      v740 = 5;
      sub_18D1A0634((uint64_t)v752, (uint64_t)v737);
      v733 = 0x1C00000001;
      v731 = &off_1E25C6B90;
      v734 = v735;
      v732 = xmmword_18D319920;
      v735[0] = 0x1400000013;
      sub_18D1A0634((uint64_t)&v784, (uint64_t)&v731);
      sub_18D1A06A0((uint64_t)v703, (uint64_t)v752, (uint64_t)&v784);
      sub_18D1A05C8((uint64_t)__src, (uint64_t)v667, (uint64_t)v703);
      sub_18D1CD3D0((uint64_t)&unk_1EE061730, (uint64_t)__src);
      __cxa_atexit((void (*)(void *))sub_18D1A0734, &unk_1EE061730, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF23058);
    }
    sub_18D1CD4A0((uint64_t)__src, v4 + 14616, (uint64_t)&unk_1EE061730);
    sub_18D1CD594((uint64_t)v667, (uint64_t)__src);
    sub_18D1CD668((uint64_t)v703, v4 + 14880);
    v45 = sub_18D055148((uint64_t)__src, (uint64_t)v703);
    v715 = &unk_1E25C5EA0;
    *((_QWORD *)&v705 + 1) = &unk_1E25C5EA0;
    v46 = *((_QWORD *)&v704 + 1);
    *(_QWORD *)v703 = &unk_1E25C7370;
    *((_QWORD *)&v704 + 1) = 0;
    if (v46)
      MEMORY[0x18D78B5BC](v46, 0x1000C8000313F17, v45);
    sub_18D1A07F4((uint64_t)&v550, (uint64_t)v667, (uint64_t)__src);
    v34 = 1;
    goto LABEL_36;
  }
  if (v647 >= 0.0)
    goto LABEL_32;
LABEL_19:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v24) <= 1)
  {
    *(_WORD *)__src = 12;
    v703[0] = 1;
    v550 = (void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    v551 = v26;
    v27 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v550, "GNSS measurement selection: invalid prediction interval,dt,%.3lf,min,0.0,max,%.3lf", v647 + (double)v646, dbl_1ECF23200 + (double)qword_1ECF231F8);
    if (*(char *)(v4 + 2511) >= 0)
      LOBYTE(v33) = (_BYTE)v27;
    else
      v33 = *v27;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, v703, "%s", v28, v29, v30, v31, v32, v33);
  }
  v34 = 0;
  v553 = 0x100000008;
  v25.i64[0] = 0x800000008;
  *(_QWORD *)&v561 = 0x800000008;
  *(_QWORD *)&v554 = (char *)&v554 + 8;
  *((_QWORD *)&v559 + 1) = &unk_1E25C87E0;
  v585 = 0x100000008;
  *((_QWORD *)&v561 + 1) = v562;
  v582 = &unk_1E25C86C0;
  v586 = v587;
  v591 = 0x100000008;
  v588 = &unk_1E25C86C0;
  v592 = v593;
  v597 = 0x800000008;
  v594 = &unk_1E25C87E0;
  v598 = v599;
  v603 = 0x100000008;
  v600 = &unk_1E25C86C0;
  v604 = v605;
  *(_QWORD *)&v609 = 0x3E45798EE2308C3ALL;
  *((_QWORD *)&v609 + 1) = 0x3E45798EE2308C3ALL;
  LOWORD(v610) = 0;
  *((_QWORD *)&v610 + 1) = 0x3FEE666666666666;
  v611 = 0uLL;
  *(_QWORD *)v612 = 0x4197D78400000000;
  v606 = 0;
  v607 = 0;
  v619 = 0u;
  v618 = 0u;
  v617 = 0u;
  v616 = 0u;
  v615 = 0u;
  v614 = 0u;
  v613 = 0u;
  *(_OWORD *)&v612[8] = 0u;
  v552[1] = 0;
  v552[0] = 0;
  v560 = 0uLL;
  v584 = 0;
  v583 = 0;
  v590 = 0;
  v589 = 0;
  v596 = 0;
  v595 = 0;
  v602 = 0;
  v601 = 0;
  v620 = 0;
  *(_OWORD *)v608 = xmmword_18D3197A0;
  v551 = COERCE_DOUBLE(&unk_1E25C86C0);
  v550 = &off_1E25B91D0;
  v624 = 0x800000008;
  v621 = &unk_1E25C87E0;
  v625 = v626;
  v630 = 0x100000008;
  v627 = &unk_1E25C86C0;
  v631 = v632;
  v636 = 0x800000008;
  v633 = &unk_1E25C87E0;
  v637 = v638;
  *(_QWORD *)&v639 = 0x100000000;
  v35 = (int8x16_t)vdupq_n_s64(0x3E45798EE2308C3AuLL);
  DWORD2(v639) = 0x7FFFFFFF;
  v640 = v35;
  LOWORD(v641) = 0;
  *((_QWORD *)&v641 + 1) = 0x3FEE666666666666;
  v642 = 0uLL;
  v643 = 0x4197D78400000000uLL;
  *(_QWORD *)&v644 = 0;
  WORD4(v644) = 1;
  v645 = 0;
  v623 = 0;
  v622 = 0;
  v628 = 0;
  v629 = 0;
  v634 = 0;
  v635 = 0;
LABEL_36:
  v47 = v4;
  v48 = *(_QWORD *)(v4 + 80);
  v49 = *(_QWORD *)(v47 + 88);
  *(_QWORD *)__src = v48;
  *(_QWORD *)&__src[8] = v49;
  v50 = CNTimeSpan::operator-((uint64_t)&v648, __src, v35, v25);
  v52 = v51;
  v53 = *(_QWORD *)(v47 + 1168);
  v54 = *(double *)(v53 + 872);
  v549.i64[0] = v48;
  v549.i64[1] = v49;
  v548[1] = 0;
  v548[0] = 0;
  *(double *)v55.i64 = v54;
  CNTimeSpan::SetTimeSpan(v548, 0, v55, v56);
  v57.i64[0] = *(_QWORD *)(v53 + 880);
  v547[1] = 0;
  v547[0] = 0;
  CNTimeSpan::SetTimeSpan(v547, 0, v57, v58);
  if (!v34)
    goto LABEL_327;
  *(double *)v60.i64 = v52;
  *(double *)v59.i64 = (v52 + (double)v50) / v54;
  v488 = vcvtpd_s64_f64(*(double *)v59.i64);
  if (v488 < 1)
    goto LABEL_327;
  v61 = 0;
  v489 = vdupq_n_s64(0x7FF8000000000000uLL);
  v62 = 0x100000020;
  v59 = (int8x16_t)xmmword_18D319990;
  while (1)
  {
    v546[0] = CNTimeSpan::operator+((uint64_t)&v549, v548, v59, v60);
    v546[1] = v63;
    v66 = CNTimeSpan::operator+((uint64_t)v546, v547, v64, v65);
    if (!v66 && (*(_QWORD *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_44:
      v68.i64[0] = *((_QWORD *)&v648 + 1);
LABEL_45:
      v69 = *(double *)v68.i64 <= v67;
      goto LABEL_47;
    }
    if (!(_QWORD)v648)
    {
      v68.i64[0] = *((_QWORD *)&v648 + 1);
      if ((*((_QWORD *)&v648 + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_45;
    }
    if (v66 == (_QWORD)v648)
      goto LABEL_44;
    v69 = v66 > (uint64_t)v648;
LABEL_47:
    v491 = v69;
    v115 = !v69;
    v70 = (int8x16_t *)v546;
    if (!v115)
      v70 = (int8x16_t *)&v648;
    v545 = *v70;
    v537[1] = 0;
    v537[0] = 0;
    v539 = v489;
    v540 = v489;
    if (!raven::RavenPNTEstimator::GetSimplifiedEightStateEstimatorPredictArgs(v493, (uint64_t)&v549, &v545, (uint64_t)v537, *(double *)v489.i64, v68))
    {
      *(_WORD *)v703 = 12;
      v667[0] = 4;
      v5 = v492;
      *(_QWORD *)__src = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v492 + 16))(v492);
      *(_QWORD *)&__src[8] = v294;
      v295 = cnprint::CNLogFormatter::FormatGeneral(v493 + 2488, (uint64_t)__src, "GNSS measurement selection: could not get simplified predict and update arguments");
      if (*(char *)(v493 + 2511) >= 0)
        LOBYTE(v301) = v295;
      else
        v301 = *(_QWORD *)(v493 + 2488);
      goto LABEL_321;
    }
    v534 = 0x800000008;
    v532 = &unk_1E25C87E0;
    v533 = xmmword_18D319930;
    v535 = &v536;
    v695 = 0x100000008;
    v693 = &unk_1E25C86C0;
    v694 = xmmword_18D319940;
    v696 = (float64_t *)v697;
    if (*(_DWORD *)v608)
      v71 = &v588;
    else
      v71 = (void **)&v551;
    sub_18D053AA8((uint64_t)&v693, (uint64_t)v71);
    sub_18D04DDF4((uint64_t)&v726, *v696, v696[1], v696[2]);
    if ((_BYTE)v727)
      v72 = v541;
    else
      v72 = v544;
    if ((_BYTE)v727)
      v73 = v542;
    else
      v73 = v544;
    if ((_BYTE)v727)
      v74 = v543;
    else
      v74 = v544;
    if (v72 <= 0.0 || v73 <= 0.0 || v74 <= 0.0)
    {
      v302 = v493;
LABEL_318:
      v5 = v492;
      *(_WORD *)v703 = 12;
      v667[0] = 4;
      *(_QWORD *)__src = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v492 + 16))(v492);
      *(_QWORD *)&__src[8] = v310;
      v311 = cnprint::CNLogFormatter::FormatGeneral(v302 + 2488, (uint64_t)__src, "GNSS measurement selection: could not get process noise matrix");
      if (*(char *)(v302 + 2511) >= 0)
        LOBYTE(v301) = v311;
      else
        v301 = *(_QWORD *)(v302 + 2488);
LABEL_321:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v703, v667, "%s", v296, v297, v298, v299, v300, v301);
      v34 = 0;
      goto LABEL_327;
    }
    v75 = v62;
    v76 = v538;
    v77 = fabs(v538);
    v786 = 0x600000006;
    v784 = (void (*)(uint64_t))&unk_1E25C81B0;
    v787 = (double *)v788;
    v785 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v784, 0.0);
    v78 = v76 * v76;
    v62 = v75;
    v79 = v787;
    *v787 = v72 * 0.333333333 * (v78 * v77);
    v80 = v72 * 0.5 * v78;
    v81 = HIDWORD(v785);
    v79[3 * HIDWORD(v785)] = v80;
    v79[3] = v80;
    v79[3 * v81 + 3] = v72 * v77;
    v79[v81 + 1] = v73 * 0.333333333 * (v78 * v77);
    v82 = v73 * 0.5 * v78;
    v79[(4 * v81) | 1] = v82;
    v79[v81 + 4] = v82;
    v79[4 * v81 + 4] = v73 * v77;
    v83 = 2 * v81;
    v79[2 * v81 + 2] = v74 * 0.333333333 * (v78 * v77);
    v84 = v74 * 0.5 * v78;
    v81 *= 5;
    v79[v81 + 2] = v84;
    v79[v83 + 5] = v84;
    v79[v81 + 5] = v74 * v77;
    sub_18D05C524((uint64_t)&v731, (uint64_t)&v784);
    if ((_BYTE)v727)
    {
      *(_QWORD *)&v752[24] = 0x300000003;
      *(_QWORD *)v752 = &unk_1E25C78E0;
      *(_OWORD *)&v752[8] = xmmword_18D30BB60;
      v753 = v754;
      sub_18D053AA8((uint64_t)v752, (uint64_t)&v727 + 8);
      *(_QWORD *)&__src[24] = 0x600000006;
      *(_QWORD *)__src = &unk_1E25C81B0;
      *(_QWORD *)&__src[32] = &__src[40];
      *(_OWORD *)&__src[8] = xmmword_18D314680;
      sub_18D04BE88((uint64_t)__src, 0.0);
      v86 = v753;
      v87 = *(_QWORD *)&__src[32];
      **(_QWORD **)&__src[32] = *v753;
      v88 = *(int *)&v752[20];
      v89 = *(int *)&__src[20];
      *(_QWORD *)(v87 + 8 * *(int *)&__src[20]) = v86[*(int *)&v752[20]];
      *(_QWORD *)(v87 + 16 * v89) = v86[2 * v88];
      *(_QWORD *)(v87 + 8) = v86[1];
      v90 = v88 + 1;
      *(_QWORD *)(v87 + 8 * ((int)v89 + 1)) = v86[(int)v88 + 1];
      v91 = &v86[2 * (int)v88];
      v92 = v87 + 16 * (_DWORD)v89;
      *(_QWORD *)(v92 + 8) = v91[1];
      *(_QWORD *)(v87 + 16) = v86[2];
      v93 = v88 + 2;
      *(_QWORD *)(v87 + 8 * ((int)v89 + 2)) = v86[(int)v88 + 2];
      *(_QWORD *)(v92 + 16) = v91[2];
      LODWORD(v92) = 3 * v89;
      *(_QWORD *)(v87 + 8 * ((int)v92 + 3)) = *v86;
      *(_QWORD *)(v87 + 8 * (int)((4 * v89) | 3)) = v86[v88];
      v94 = v86[2 * v88];
      LODWORD(v88) = 4 * v89;
      LODWORD(v89) = 5 * v89;
      *(_QWORD *)(v87 + 8 * ((int)v89 + 3)) = v94;
      *(_QWORD *)(v87 + 8 * ((int)v92 + 4)) = v86[1];
      *(_QWORD *)(v87 + 8 * ((int)v88 + 4)) = v86[v90];
      *(_QWORD *)(v87 + 8 * ((int)v89 + 4)) = v91[1];
      *(_QWORD *)(v87 + 8 * ((int)v92 + 5)) = v86[2];
      *(_QWORD *)(v87 + 8 * ((int)v88 + 5)) = v86[v93];
      *(_QWORD *)(v87 + 8 * ((int)v89 + 5)) = v91[2];
      *(_QWORD *)&v667[24] = 0x600000006;
      *(_QWORD *)v667 = &unk_1E25C81B0;
      *(_OWORD *)&v667[8] = xmmword_18D314680;
      *(_QWORD *)&v668 = (char *)&v668 + 8;
      sub_18D053B2C((uint64_t)__src, (uint64_t)&v784, (uint64_t)v667);
      v95 = *(_DWORD *)&__src[12];
      v96 = *(_DWORD *)&__src[8];
      *(_QWORD *)&v755[24] = 0x600000006;
      *(_QWORD *)v755 = &unk_1E25C81B0;
      v756 = &v757;
      *(_DWORD *)&v755[8] = *(_DWORD *)&__src[12];
      *(_DWORD *)&v755[12] = *(_DWORD *)&__src[8];
      *(_DWORD *)&v755[16] = *(_DWORD *)&__src[8] * *(_DWORD *)&__src[12];
      *(_DWORD *)&v755[20] = *(_DWORD *)&__src[12];
      if (*(_DWORD *)&__src[12])
      {
        v97 = 0;
        v98 = 0;
        v99 = *(_DWORD *)&__src[20];
        v100 = *(_QWORD *)&__src[32];
        do
        {
          v101 = v97;
          v102 = v98;
          for (i = v96; i; --i)
          {
            *(&v757 + v102) = *(_QWORD *)(v100 + 8 * v101);
            v102 += v95;
            ++v101;
          }
          ++v98;
          v97 += v99;
        }
        while (v98 != v95);
      }
      *(_QWORD *)&v703[24] = 0x600000006;
      *(_QWORD *)v703 = &unk_1E25C81B0;
      *(_OWORD *)&v703[8] = xmmword_18D314680;
      *(_QWORD *)&v704 = (char *)&v704 + 8;
      sub_18D053B2C((uint64_t)v667, (uint64_t)v755, (uint64_t)v703);
      sub_18D053AA8((uint64_t)&v731, (uint64_t)v703);
    }
    v690 = 0x200000002;
    v688 = &unk_1E25C75B0;
    v689 = xmmword_18D319340;
    v691 = v692;
    if (sub_18D05BEA4(v493, (uint64_t)v537, (uint64_t)&v688, COERCE_DOUBLE(0x200000002), v85))
    {
      *(_WORD *)__src = 12;
      v703[0] = 4;
      v302 = v493;
      v303 = cnprint::CNLogFormatter::FormatGeneral(v493 + 2488, (uint64_t)v537, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix failed");
      if (*(char *)(v493 + 2511) >= 0)
        LOBYTE(v309) = v303;
      else
        v309 = *(_QWORD *)(v493 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, v703, "%s", v304, v305, v306, v307, v308, v309);
      goto LABEL_318;
    }
    *(_QWORD *)&v703[24] = 0x800000008;
    *(_QWORD *)v703 = &unk_1E25C87E0;
    *(_QWORD *)&v704 = (char *)&v704 + 8;
    *(_OWORD *)&v703[8] = xmmword_18D319930;
    sub_18D04BE88((uint64_t)v703, 0.0);
    for (j = 0; j != 6; ++j)
      *(_DWORD *)&__src[4 * j + 40] = j;
    v684 = 0x100000006;
    v682 = &unk_1E25C8150;
    v683 = xmmword_18D319950;
    v685 = &v686;
    v686 = *(_OWORD *)&__src[40];
    v687 = *(_QWORD *)&__src[56];
    sub_18D1CDD14((uint64_t)__src, (uint64_t)v703, (uint64_t)&v682, (uint64_t)&v682);
    sub_18D1CDA28((uint64_t)__src, (uint64_t)&v731);
    *(_QWORD *)&v667[24] = 0x800000001;
    *(_QWORD *)v667 = &unk_1E25C6E30;
    *(_QWORD *)&v668 = (char *)&v668 + 8;
    *(_OWORD *)&v667[8] = xmmword_18D319920;
    *((_QWORD *)&v668 + 1) = 0x700000006;
    *(_QWORD *)&__src[24] = 0x100000008;
    *(_QWORD *)__src = &unk_1E25C86F0;
    *(_OWORD *)&__src[8] = xmmword_18D319330;
    *(_QWORD *)&__src[32] = &__src[40];
    *(_QWORD *)&__src[40] = 0x700000006;
    sub_18D1CDE7C((uint64_t)&v677, (uint64_t)__src);
    sub_18D1CDF50((uint64_t)__src, (uint64_t)v703, (uint64_t)&v677, (uint64_t)&v677);
    v490 = v61;
    sub_18D1CDB38((uint64_t)__src, (uint64_t)&v688);
    *(_QWORD *)&v737[24] = 0x800000008;
    *(_QWORD *)v737 = &unk_1E25C87E0;
    *(_OWORD *)&v737[8] = xmmword_18D319930;
    v738 = &v739;
    __src[0] = 0;
    sub_18D05C654((uint64_t)v703, (uint64_t)v737, __src);
    *(_QWORD *)&v752[24] = 0x800000008;
    *(_QWORD *)v752 = &unk_1E25C87E0;
    *(_OWORD *)&v752[8] = xmmword_18D319930;
    v753 = v754;
    v700 = 0x100000008;
    v698 = &unk_1E25C86F0;
    v699 = xmmword_18D319940;
    v701 = v702;
    *(_QWORD *)&__src[24] = v75;
    *(_QWORD *)__src = &unk_1E25C7670;
    *(_OWORD *)&__src[8] = xmmword_18D319960;
    *(_QWORD *)&__src[32] = &__src[40];
    sub_18D04F504((uint64_t)v737, (uint64_t)&v698, (uint64_t)__src, (uint64_t)v752);
    v105 = *(_DWORD *)&v752[12];
    v106 = *(_DWORD *)&v752[8];
    *(_QWORD *)&v755[24] = 0x800000008;
    *(_QWORD *)v755 = &unk_1E25C87E0;
    v756 = &v757;
    *(_DWORD *)&v755[8] = *(_DWORD *)&v752[12];
    *(_DWORD *)&v755[12] = *(_DWORD *)&v752[8];
    *(_DWORD *)&v755[16] = *(_DWORD *)&v752[8] * *(_DWORD *)&v752[12];
    *(_DWORD *)&v755[20] = *(_DWORD *)&v752[12];
    if (*(_DWORD *)&v752[12])
    {
      v107 = 0;
      v108 = 0;
      v109 = *(_DWORD *)&v752[20];
      v110 = v753;
      do
      {
        v111 = v107;
        v112 = v108;
        for (k = v106; k; --k)
        {
          *(&v757 + v112) = v110[v111];
          v112 += v105;
          ++v111;
        }
        ++v108;
        v107 += v109;
      }
      while (v108 != v105);
    }
    v700 = 0x100000008;
    v698 = &unk_1E25C86C0;
    v699 = xmmword_18D319940;
    v701 = v702;
    *(_QWORD *)&__src[24] = 0x800000008;
    *(_QWORD *)__src = &unk_1E25C87E0;
    *(_OWORD *)&__src[8] = xmmword_18D319930;
    *(_QWORD *)&__src[32] = &__src[40];
    *(_QWORD *)&v667[24] = 0x800000008;
    *(_QWORD *)v667 = &unk_1E25C87E0;
    *(_OWORD *)&v667[8] = xmmword_18D319930;
    *(_QWORD *)&v668 = (char *)&v668 + 8;
    sub_18D05C770((uint64_t)v755, (uint64_t)&v698, (uint64_t)__src, (uint64_t)v667);
    sub_18D053AA8((uint64_t)&v532, (uint64_t)v667);
    v529 = 0x200000002;
    v527 = &unk_1E25C75E0;
    v528 = xmmword_18D319340;
    v530 = &v531;
    v531 = xmmword_18D319970;
    v524 = 0x100000002;
    v522[1] = &unk_1E25C7460;
    v523 = xmmword_18D319330;
    v525 = v526;
    v526[0] = sub_18D054EFC;
    v526[1] = sub_18D055218;
    *(double *)v522 = v538;
    v521 = v538;
    v518 = 0x100000002;
    v516 = &unk_1E25C74F0;
    v517 = xmmword_18D319330;
    v519 = v520;
    v520[0] = v522;
    v520[1] = &v521;
    if (!*(_DWORD *)v608)
    {
      sub_18D053AA8((uint64_t)&v588, (uint64_t)&v551);
      sub_18D053AA8((uint64_t)&v594, (uint64_t)&v559 + 8);
      sub_18D053AA8((uint64_t)&v600, (uint64_t)&v582);
    }
    if ((v533 & 0x80000000) != 0)
    {
LABEL_496:
      v482 = 3098;
      v483 = "nr >= 0";
      goto LABEL_500;
    }
    if (v589 <= HIDWORD(v589))
      v114 = HIDWORD(v589);
    else
      v114 = v589;
    if (HIDWORD(v589))
      v115 = (_DWORD)v589 == 0;
    else
      v115 = 1;
    if (v115)
      v116 = 0;
    else
      v116 = v114;
    v498 = v116;
    v664 = 0x100000008;
    v659 = &unk_1E25C86C0;
    v665 = &v666;
    v660 = v533;
    v661 = 1;
    v662 = v533;
    v495 = v533;
    v663 = v533;
    sub_18D04BE88((uint64_t)&v659, 0.0);
    if (v523 <= DWORD1(v523))
      v117 = DWORD1(v523);
    else
      v117 = v523;
    if (DWORD1(v523))
      v118 = (_DWORD)v523 == 0;
    else
      v118 = 1;
    if (v118)
      v119 = 0;
    else
      v119 = v117;
    v509 = v119;
    sub_18D054040(":", (uint64_t)&v527, 0, (uint64_t)v703);
    *(_QWORD *)&__src[32] = &__src[40];
    v120 = *(unsigned int *)&v703[12];
    *(_DWORD *)&__src[8] = 1;
    *(_DWORD *)&__src[12] = *(_DWORD *)&v703[12];
    *(_DWORD *)&__src[28] = 1;
    *(_DWORD *)&__src[16] = *(_DWORD *)&v703[12];
    *(_QWORD *)&__src[20] = 0x200000001;
    if (*(_DWORD *)&v703[12])
    {
      v121 = 0;
      v122 = v704;
      v123 = *(_DWORD *)&v703[8];
      v124 = *(unsigned int *)&v703[8] - 1;
      v125 = 1;
      do
      {
        v126 = *(_DWORD *)(v122 + 4 * v123 * v121);
        v127 = v125;
        v128 = v124;
        if (v123 >= 2)
        {
          do
          {
            v126 += *(_DWORD *)(v122 + 4 * v127++);
            --v128;
          }
          while (v128);
        }
        *(_DWORD *)&__src[4 * v121++ + 40] = v126;
        v125 += v123;
      }
      while (v121 != v120);
    }
    sub_18D054040(":", (uint64_t)&v527, 1, (uint64_t)v703);
    *(_QWORD *)&__src[32] = &__src[40];
    v129 = *(unsigned int *)&v703[12];
    *(_DWORD *)&__src[8] = 1;
    *(_DWORD *)&__src[12] = *(_DWORD *)&v703[12];
    *(_DWORD *)&__src[28] = 1;
    *(_DWORD *)&__src[16] = *(_DWORD *)&v703[12];
    *(_QWORD *)&__src[20] = 0x200000001;
    if (*(_DWORD *)&v703[12])
    {
      v130 = 0;
      v131 = v704;
      v132 = *(_DWORD *)&v703[8];
      v133 = *(unsigned int *)&v703[8] - 1;
      v134 = 1;
      do
      {
        v135 = *(_DWORD *)(v131 + 4 * v132 * v130);
        v136 = v134;
        v137 = v133;
        if (v132 >= 2)
        {
          do
          {
            v135 += *(_DWORD *)(v131 + 4 * v136++);
            --v137;
          }
          while (v137);
        }
        *(_DWORD *)&__src[4 * v130++ + 40] = v135;
        v134 += v132;
      }
      while (v130 != v129);
    }
    v138 = *(double *)&v643;
    v501 = BYTE9(v644);
    v139 = v498;
    if (!(_DWORD)v589 || !HIDWORD(v589))
    {
      if ((v498 & 0x80000000) != 0)
        goto LABEL_496;
      *(_QWORD *)&__src[24] = 0x100000008;
      *(_QWORD *)__src = &unk_1E25C86C0;
      *(_QWORD *)&__src[32] = &__src[40];
      *(_DWORD *)&__src[8] = v498;
      *(_DWORD *)&__src[12] = 1;
      *(_DWORD *)&__src[16] = v498;
      *(_DWORD *)&__src[20] = v498;
      sub_18D04BE88((uint64_t)__src, 0.0);
      sub_18D053AA8((uint64_t)&v588, (uint64_t)__src);
    }
    if (!(_DWORD)v595 || !HIDWORD(v595))
    {
      if ((v498 & 0x80000000) != 0)
      {
        v482 = 3056;
        v483 = "n >= 0";
LABEL_500:
        __assert_rtn("Zeros", "cnmatrix.h", v482, v483);
      }
      *(_QWORD *)&__src[24] = 0x800000008;
      *(_QWORD *)__src = &unk_1E25C87E0;
      *(_QWORD *)&__src[32] = &__src[40];
      *(_DWORD *)&__src[8] = v498;
      *(_DWORD *)&__src[12] = v498;
      *(_DWORD *)&__src[16] = v498 * v498;
      *(_DWORD *)&__src[20] = v498;
      sub_18D04BE88((uint64_t)__src, 0.0);
      sub_18D053AA8((uint64_t)&v594, (uint64_t)__src);
    }
    if (!(_DWORD)v601 || !HIDWORD(v601))
    {
      *(_QWORD *)&__src[24] = 0x100000008;
      *(_QWORD *)__src = &unk_1E25C86C0;
      *(_OWORD *)&__src[8] = xmmword_18D319940;
      *(_QWORD *)&__src[32] = &__src[40];
      sub_18D053B2C((uint64_t)&v594, (uint64_t)&v588, (uint64_t)__src);
      sub_18D053AA8((uint64_t)&v600, (uint64_t)__src);
      v139 = v498;
    }
    if ((v139 & 0x80000000) != 0)
    {
      v482 = 3099;
      v483 = "nc >= 0";
      goto LABEL_500;
    }
    *(_QWORD *)&__src[24] = 0x800000008;
    *(_QWORD *)__src = &unk_1E25C87E0;
    *(_QWORD *)&__src[32] = &__src[40];
    *(_DWORD *)&__src[8] = v495;
    *(_DWORD *)&__src[12] = v139;
    v507 = v139 * v495;
    *(_DWORD *)&__src[16] = v139 * v495;
    *(_DWORD *)&__src[20] = v495;
    sub_18D04BE88((uint64_t)__src, 0.0);
    sub_18D053AA8((uint64_t)&v621, (uint64_t)__src);
    *(_QWORD *)&__src[24] = 0x100000008;
    *(_QWORD *)__src = &unk_1E25C86C0;
    *(_QWORD *)&__src[32] = &__src[40];
    *(_DWORD *)&__src[8] = v495;
    *(_DWORD *)&__src[12] = 1;
    *(_DWORD *)&__src[16] = v495;
    *(_DWORD *)&__src[20] = v495;
    sub_18D04BE88((uint64_t)__src, 0.0);
    sub_18D053AA8((uint64_t)&v627, (uint64_t)__src);
    sub_18D053AA8((uint64_t)&v633, (uint64_t)&v532);
    *(_DWORD *)v608 = 1;
    v140 = (__n128)vdupq_lane_s32((int32x2_t)(v139 | 0x100000000), 0);
    v140.n128_u32[1] = 1;
    *(__n128 *)v552 = v140;
    sub_18D054B00((uint64_t)v759, v509, 1, v140);
    sub_18D0542CC((uint64_t)v755, v509, 1, v141);
    sub_18D0542CC((uint64_t)v752, v509, 1, v142);
    v749 = 0x100000008;
    v747 = &unk_1E25C86F0;
    v748 = xmmword_18D319940;
    v750 = &v751;
    v744 = 0x100000008;
    v742 = &unk_1E25C86F0;
    v743 = xmmword_18D319940;
    v745 = (int *)&v746;
    v143 = v509;
    if ((int)v509 < 1)
    {
LABEL_167:
      if (v501)
        v184 = v143;
      else
        v184 = 1;
      v494 = (void *)v184;
      sub_18D054198((uint64_t)v741, (uint64_t)&v588);
      sub_18D0549D0((uint64_t)v737, (uint64_t)&v594);
      v185 = v498;
      sub_18D054198((uint64_t)v736, (uint64_t)&v600);
      v622 = 0;
      v623 = 0;
      v628 = 0;
      v629 = 0;
      v634 = 0;
      v635 = 0;
      v786 = 0x800000008;
      v784 = (void (*)(uint64_t))&unk_1E25C87E0;
      v785 = xmmword_18D319930;
      v787 = (double *)v788;
      v733 = 0x800000008;
      v731 = (uint64_t (**)())&unk_1E25C87E0;
      v734 = v735;
      LODWORD(v732) = v498;
      DWORD1(v732) = v498;
      DWORD2(v732) = v732 * v732;
      HIDWORD(v732) = v498;
      sub_18D04BE88((uint64_t)&v731, 0.0);
      if ((_DWORD)v498)
      {
        v186 = 0;
        v187 = HIDWORD(v732) + 1;
        v188 = v734;
        v189 = v498;
        do
        {
          v188[v186] = 0x3FF0000000000000;
          v186 += v187;
          --v189;
        }
        while (v189);
      }
      v728 = 0x800000008;
      v726 = &unk_1E25C87E0;
      v727 = xmmword_18D319930;
      v729 = v730;
      v723 = 0x100000008;
      v721 = &unk_1E25C86C0;
      v722 = xmmword_18D319940;
      v724 = &v725;
      v718 = 0x100000008;
      v716 = &unk_1E25C86C0;
      v717 = xmmword_18D319940;
      v719 = &v720;
      if ((int)v494 >= 1)
      {
        v190 = 0;
        v191 = 0;
        v192 = 0;
        v193 = v498;
        do
        {
          v505 = v190;
          if (v501)
          {
            if (v190)
            {
              if ((v193 & 0x80000000) != 0)
                __assert_rtn("Eye", "cnmatrix.h", 2094, "n >= 0");
              *(_QWORD *)&v703[24] = 0x800000008;
              *(_QWORD *)v703 = &unk_1E25C87E0;
              *(_QWORD *)&v704 = (char *)&v704 + 8;
              *(_DWORD *)&v703[8] = v193;
              *(_DWORD *)&v703[12] = v193;
              *(_DWORD *)&v703[16] = v193 * v193;
              *(_DWORD *)&v703[20] = v193;
              v194 = v193;
              sub_18D04BE88((uint64_t)v703, 0.0);
              if (v194)
              {
                v195 = 0;
                v196 = *(_DWORD *)&v703[20] + 1;
                v197 = v704;
                v198 = v194;
                do
                {
                  *(_QWORD *)(v197 + 8 * v195) = 0x3FF0000000000000;
                  v195 += v196;
                  --v198;
                }
                while (v198);
              }
              sub_18D053C48((uint64_t)__src, (uint64_t)&v731, (uint64_t)&v747, (uint64_t)&v747);
              sub_18D053EBC((uint64_t)__src, (uint64_t)v703);
            }
            v199 = *((unsigned int *)v530 + v190);
            *(_QWORD *)&v667[24] = 0x800000001;
            *(_QWORD *)v667 = &unk_1E25C6E30;
            *(_QWORD *)&v668 = (char *)&v668 + 8;
            if ((_DWORD)v199 == 1)
            {
              v200 = 0;
              *(_QWORD *)&v201 = 0x100000001;
              *((_QWORD *)&v201 + 1) = 0x100000001;
              *(_OWORD *)&v667[8] = v201;
              DWORD2(v668) = 0;
              v202 = 1;
              LODWORD(v199) = 1;
            }
            else if ((int)v199 <= 0)
            {
              v202 = 0;
              LODWORD(v199) = 0;
              *(_QWORD *)&v667[8] = 0;
              *(_QWORD *)&v667[16] = 0;
              v200 = 1;
            }
            else
            {
              v236 = 0;
              *(_DWORD *)&v667[8] = 1;
              *(_DWORD *)&v667[12] = v199;
              *(_DWORD *)&v667[16] = v199;
              *(_DWORD *)&v667[20] = 1;
              do
              {
                *((_DWORD *)&v668 + v236 + 2) = v236;
                ++v236;
              }
              while (v199 != v236);
              v200 = 0;
              v202 = 1;
            }
            *(_QWORD *)&v703[24] = 0x100000008;
            *(_QWORD *)v703 = &unk_1E25C86F0;
            *(_QWORD *)&v704 = (char *)&v704 + 8;
            *(_DWORD *)&v703[8] = v199;
            *(_DWORD *)&v703[12] = v202;
            *(_DWORD *)&v703[16] = v199 * v202;
            *(_DWORD *)&v703[20] = v199;
            if ((_DWORD)v199)
            {
              v237 = 0;
              v238 = 0;
              do
              {
                if ((v200 & 1) == 0)
                {
                  v239 = 0;
                  do
                  {
                    *((_DWORD *)&v704 + v238 + *(_DWORD *)&v703[20] * v239 + 2) = *((_DWORD *)&v668 + v237 + v239 + 2);
                    ++v239;
                  }
                  while (v202 != v239);
                }
                ++v238;
                v237 += v202;
              }
              while (v238 != (_DWORD)v199);
              v240 = *(_DWORD *)&v703[8];
              v202 = *(_DWORD *)&v703[12];
            }
            else
            {
              v240 = 0;
            }
            *(_QWORD *)&__src[24] = 0x100000008;
            *(_QWORD *)__src = &unk_1E25C86F0;
            *(_QWORD *)&__src[32] = &__src[40];
            *(_DWORD *)&__src[8] = v240;
            *(_DWORD *)&__src[12] = v202;
            v241 = (v240 * v202);
            *(_DWORD *)&__src[16] = v240 * v202;
            *(_DWORD *)&__src[20] = v240;
            if ((int)v241 >= 1)
            {
              v242 = (int *)&v704 + 2;
              v243 = &__src[40];
              do
              {
                v244 = *v242++;
                *v243++ = v244 + v192;
                --v241;
              }
              while (v241);
            }
            sub_18D053D7C((uint64_t)&v747, (uint64_t)__src);
            v245 = *((unsigned int *)v530 + HIDWORD(v528) + (int)v190);
            *(_QWORD *)&v667[24] = 0x800000001;
            *(_QWORD *)v667 = &unk_1E25C6E30;
            *(_QWORD *)&v668 = (char *)&v668 + 8;
            if ((_DWORD)v245 == 1)
            {
              v246 = 0;
              *(_QWORD *)&v247 = 0x100000001;
              *((_QWORD *)&v247 + 1) = 0x100000001;
              *(_OWORD *)&v667[8] = v247;
              DWORD2(v668) = 0;
              v248 = 1;
              LODWORD(v245) = 1;
            }
            else if ((int)v245 <= 0)
            {
              v248 = 0;
              LODWORD(v245) = 0;
              *(_QWORD *)&v667[8] = 0;
              *(_QWORD *)&v667[16] = 0;
              v246 = 1;
            }
            else
            {
              v249 = 0;
              *(_DWORD *)&v667[8] = 1;
              *(_DWORD *)&v667[12] = v245;
              *(_DWORD *)&v667[16] = v245;
              *(_DWORD *)&v667[20] = 1;
              do
              {
                *((_DWORD *)&v668 + v249 + 2) = v249;
                ++v249;
              }
              while (v245 != v249);
              v246 = 0;
              v248 = 1;
            }
            *(_QWORD *)&v703[24] = 0x100000008;
            *(_QWORD *)v703 = &unk_1E25C86F0;
            *(_QWORD *)&v704 = (char *)&v704 + 8;
            *(_DWORD *)&v703[8] = v245;
            *(_DWORD *)&v703[12] = v248;
            *(_DWORD *)&v703[16] = v245 * v248;
            *(_DWORD *)&v703[20] = v245;
            if ((_DWORD)v245)
            {
              v250 = 0;
              v251 = 0;
              do
              {
                if ((v246 & 1) == 0)
                {
                  v252 = 0;
                  do
                  {
                    *((_DWORD *)&v704 + v251 + *(_DWORD *)&v703[20] * v252 + 2) = *((_DWORD *)&v668 + v250 + v252 + 2);
                    ++v252;
                  }
                  while (v248 != v252);
                }
                ++v251;
                v250 += v248;
              }
              while (v251 != (_DWORD)v245);
              v253 = *(_DWORD *)&v703[8];
              v248 = *(_DWORD *)&v703[12];
            }
            else
            {
              v253 = 0;
            }
            *(_QWORD *)&__src[24] = 0x100000008;
            *(_QWORD *)__src = &unk_1E25C86F0;
            *(_QWORD *)&__src[32] = &__src[40];
            *(_DWORD *)&__src[8] = v253;
            *(_DWORD *)&__src[12] = v248;
            v254 = (v253 * v248);
            *(_DWORD *)&__src[16] = v253 * v248;
            *(_DWORD *)&__src[20] = v253;
            if ((int)v254 >= 1)
            {
              v255 = (int *)&v704 + 2;
              v256 = &__src[40];
              do
              {
                v257 = *v255++;
                *v256++ = v257 + v191;
                --v254;
              }
              while (v254);
            }
            sub_18D053D7C((uint64_t)&v742, (uint64_t)__src);
            sub_18D1CE204((uint64_t)&v532, (uint64_t)&v742, (uint64_t)&v742, (uint64_t)__src);
            sub_18D053AA8((uint64_t)&v784, (uint64_t)__src);
            v502 = *((_DWORD *)v530 + HIDWORD(v528) + (int)v190);
            v499 = *((_DWORD *)v530 + v190);
            v258 = v190;
            v259 = v756;
            sub_18D053C48((uint64_t)__src, (uint64_t)&v731, (uint64_t)&v747, (uint64_t)&v747);
            sub_18D053EBC((uint64_t)__src, (uint64_t)&v259[69 * v258]);
            if ((v502 & 0x80000000) != 0)
              __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
            *(_QWORD *)&__src[24] = 0x800000008;
            *(_QWORD *)__src = &unk_1E25C87E0;
            v204 = v502 * v185;
            *(_QWORD *)&__src[32] = &__src[40];
            *(_DWORD *)&__src[8] = v185;
            *(_DWORD *)&__src[12] = v502;
            *(_DWORD *)&__src[16] = v502 * v185;
            *(_DWORD *)&__src[20] = v185;
            sub_18D04BE88((uint64_t)__src, 0.0);
            sub_18D053AA8((uint64_t)&v726, (uint64_t)__src);
            v260 = v753;
            sub_18D1CE298(":", (uint64_t)&v726, (uint64_t)&v747, (uint64_t)__src);
            sub_18D053EBC((uint64_t)__src, (uint64_t)&v260[69 * v505]);
            sub_18D053AA8((uint64_t)&v721, (uint64_t)v741);
            v261 = v760;
            sub_18D053E04((uint64_t)__src, (uint64_t)&v721, (uint64_t)&v747);
            sub_18D05495C((uint64_t)__src, v261 + 104 * v505);
            v262 = (DWORD1(v743) * v743);
            *(_QWORD *)&__src[24] = 0x100000008;
            *(_QWORD *)__src = &unk_1E25C86C0;
            *(_QWORD *)&__src[8] = v743;
            *(_DWORD *)&__src[16] = DWORD1(v743) * v743;
            *(_DWORD *)&__src[20] = v743;
            *(_QWORD *)&__src[32] = &__src[40];
            if ((_DWORD)v262)
            {
              v263 = v745;
              v264 = v665;
              v265 = &__src[40];
              do
              {
                v266 = *v263++;
                *v265++ = v264[v266];
                --v262;
              }
              while (v262);
            }
            sub_18D053AA8((uint64_t)&v716, (uint64_t)__src);
            v192 += *((_DWORD *)v530 + v505);
            v191 += *((_DWORD *)v530 + HIDWORD(v528) + (int)v505);
            v203 = v185;
            v235 = v502;
          }
          else
          {
            sub_18D053AA8((uint64_t)&v784, (uint64_t)&v532);
            *(_QWORD *)&__src[24] = 0x800000008;
            *(_QWORD *)__src = &unk_1E25C87E0;
            *(_QWORD *)&__src[32] = &__src[40];
            *(_DWORD *)&__src[8] = v185;
            v203 = v185;
            *(_DWORD *)&__src[12] = v495;
            v204 = v507;
            *(_DWORD *)&__src[16] = v507;
            *(_DWORD *)&__src[20] = v185;
            sub_18D04BE88((uint64_t)__src, 0.0);
            sub_18D053AA8((uint64_t)&v726, (uint64_t)__src);
            sub_18D053AA8((uint64_t)&v721, (uint64_t)&v551);
            sub_18D053AA8((uint64_t)&v716, (uint64_t)&v659);
            if ((int)v509 < 1)
            {
              v235 = v495;
            }
            else
            {
              v205 = 0;
              v206 = v530;
              do
              {
                v207 = *((unsigned int *)v206 + v205);
                *(_QWORD *)&v667[24] = 0x800000001;
                *(_QWORD *)v667 = &unk_1E25C6E30;
                *(_QWORD *)&v668 = (char *)&v668 + 8;
                if ((_DWORD)v207 == 1)
                {
                  v208 = 0;
                  *(_QWORD *)&v209 = 0x100000001;
                  *((_QWORD *)&v209 + 1) = 0x100000001;
                  *(_OWORD *)&v667[8] = v209;
                  DWORD2(v668) = 0;
                  v210 = 1;
                  LODWORD(v207) = 1;
                }
                else if ((int)v207 <= 0)
                {
                  v210 = 0;
                  LODWORD(v207) = 0;
                  *(_QWORD *)&v667[8] = 0;
                  *(_QWORD *)&v667[16] = 0;
                  v208 = 1;
                }
                else
                {
                  v211 = 0;
                  *(_DWORD *)&v667[8] = 1;
                  *(_DWORD *)&v667[12] = v207;
                  *(_DWORD *)&v667[16] = v207;
                  *(_DWORD *)&v667[20] = 1;
                  do
                  {
                    *((_DWORD *)&v668 + v211 + 2) = v211;
                    ++v211;
                  }
                  while (v207 != v211);
                  v208 = 0;
                  v210 = 1;
                }
                *(_QWORD *)&v703[24] = 0x100000008;
                *(_QWORD *)v703 = &unk_1E25C86F0;
                *(_QWORD *)&v704 = (char *)&v704 + 8;
                *(_DWORD *)&v703[8] = v207;
                *(_DWORD *)&v703[12] = v210;
                *(_DWORD *)&v703[16] = v207 * v210;
                *(_DWORD *)&v703[20] = v207;
                if ((_DWORD)v207)
                {
                  v212 = 0;
                  v213 = 0;
                  do
                  {
                    if ((v208 & 1) == 0)
                    {
                      v214 = 0;
                      do
                      {
                        *((_DWORD *)&v704 + v213 + *(_DWORD *)&v703[20] * v214 + 2) = *((_DWORD *)&v668 + v212 + v214 + 2);
                        ++v214;
                      }
                      while (v210 != v214);
                    }
                    ++v213;
                    v212 += v210;
                  }
                  while (v213 != (_DWORD)v207);
                  v215 = *(_DWORD *)&v703[8];
                  v210 = *(_DWORD *)&v703[12];
                }
                else
                {
                  v215 = 0;
                }
                *(_QWORD *)&__src[24] = 0x100000008;
                *(_QWORD *)__src = &unk_1E25C86F0;
                *(_QWORD *)&__src[32] = &__src[40];
                *(_DWORD *)&__src[8] = v215;
                *(_DWORD *)&__src[12] = v210;
                v216 = (v215 * v210);
                *(_DWORD *)&__src[16] = v215 * v210;
                *(_DWORD *)&__src[20] = v215;
                if ((int)v216 >= 1)
                {
                  v217 = (int *)&v704 + 2;
                  v218 = &__src[40];
                  do
                  {
                    v219 = *v217++;
                    *v218++ = v219 + v192;
                    --v216;
                  }
                  while (v216);
                }
                sub_18D053D7C((uint64_t)&v747, (uint64_t)__src);
                v220 = *((unsigned int *)v530 + HIDWORD(v528) + (int)v205);
                *(_QWORD *)&v667[24] = 0x800000001;
                *(_QWORD *)v667 = &unk_1E25C6E30;
                *(_QWORD *)&v668 = (char *)&v668 + 8;
                if ((_DWORD)v220 == 1)
                {
                  v221 = 0;
                  *(_QWORD *)&v222 = 0x100000001;
                  *((_QWORD *)&v222 + 1) = 0x100000001;
                  *(_OWORD *)&v667[8] = v222;
                  DWORD2(v668) = 0;
                  v223 = 1;
                  LODWORD(v220) = 1;
                }
                else if ((int)v220 <= 0)
                {
                  v223 = 0;
                  LODWORD(v220) = 0;
                  *(_QWORD *)&v667[8] = 0;
                  *(_QWORD *)&v667[16] = 0;
                  v221 = 1;
                }
                else
                {
                  v224 = 0;
                  *(_DWORD *)&v667[8] = 1;
                  *(_DWORD *)&v667[12] = v220;
                  *(_DWORD *)&v667[16] = v220;
                  *(_DWORD *)&v667[20] = 1;
                  do
                  {
                    *((_DWORD *)&v668 + v224 + 2) = v224;
                    ++v224;
                  }
                  while (v220 != v224);
                  v221 = 0;
                  v223 = 1;
                }
                *(_QWORD *)&v703[24] = 0x100000008;
                *(_QWORD *)v703 = &unk_1E25C86F0;
                *(_QWORD *)&v704 = (char *)&v704 + 8;
                *(_DWORD *)&v703[8] = v220;
                *(_DWORD *)&v703[12] = v223;
                *(_DWORD *)&v703[16] = v220 * v223;
                *(_DWORD *)&v703[20] = v220;
                if ((_DWORD)v220)
                {
                  v225 = 0;
                  v226 = 0;
                  do
                  {
                    if ((v221 & 1) == 0)
                    {
                      v227 = 0;
                      do
                      {
                        *((_DWORD *)&v704 + v226 + *(_DWORD *)&v703[20] * v227 + 2) = *((_DWORD *)&v668 + v225 + v227 + 2);
                        ++v227;
                      }
                      while (v223 != v227);
                    }
                    ++v226;
                    v225 += v223;
                  }
                  while (v226 != (_DWORD)v220);
                  v228 = *(_DWORD *)&v703[8];
                  v223 = *(_DWORD *)&v703[12];
                }
                else
                {
                  v228 = 0;
                }
                *(_QWORD *)&__src[24] = 0x100000008;
                *(_QWORD *)__src = &unk_1E25C86F0;
                *(_QWORD *)&__src[32] = &__src[40];
                *(_DWORD *)&__src[8] = v228;
                *(_DWORD *)&__src[12] = v223;
                v229 = (v228 * v223);
                *(_DWORD *)&__src[16] = v228 * v223;
                *(_DWORD *)&__src[20] = v228;
                if ((int)v229 >= 1)
                {
                  v230 = (int *)&v704 + 2;
                  v231 = &__src[40];
                  do
                  {
                    v232 = *v230++;
                    *v231++ = v232 + v191;
                    --v229;
                  }
                  while (v229);
                }
                sub_18D053D7C((uint64_t)&v742, (uint64_t)__src);
                v233 = v756;
                sub_18D053C48((uint64_t)__src, (uint64_t)&v731, (uint64_t)&v747, (uint64_t)&v747);
                sub_18D053EBC((uint64_t)__src, (uint64_t)&v233[69 * v205]);
                v234 = v753;
                sub_18D053C48((uint64_t)__src, (uint64_t)&v726, (uint64_t)&v747, (uint64_t)&v742);
                sub_18D053EBC((uint64_t)__src, (uint64_t)&v234[69 * v205]);
                v206 = v530;
                v192 += *((_DWORD *)v530 + v205);
                v191 += *((_DWORD *)v530 + HIDWORD(v528) + (int)v205++);
                v204 = v507;
              }
              while (v205 != v509);
              v235 = v495;
              v203 = v498;
            }
            v499 = v203;
          }
          v700 = 0x800000008;
          v698 = &unk_1E25C87E0;
          v701 = v702;
          *(_QWORD *)&v699 = __PAIR64__(v203, v235);
          *((_QWORD *)&v699 + 1) = __PAIR64__(v235, v204);
          v503 = v235;
          sub_18D04BE88((uint64_t)&v698, 0.0);
          *(_QWORD *)&__src[24] = 0x1000000008;
          *(_QWORD *)__src = &unk_1E25C8660;
          *(_OWORD *)&__src[8] = xmmword_18D319980;
          *(_QWORD *)&__src[32] = &__src[40];
          sub_18D05449C((uint64_t)&v784, (uint64_t)&v698, (uint64_t)__src);
          v690 = 0x800000008;
          v688 = &unk_1E25C87E0;
          v689 = xmmword_18D319930;
          v691 = v692;
          sub_18D054E78((uint64_t)v737, (uint64_t)&v688);
          v684 = 0x800000008;
          v682 = &unk_1E25C87E0;
          v683 = xmmword_18D319930;
          v685 = &v686;
          sub_18D053B2C((uint64_t)&v731, (uint64_t)&v726, (uint64_t)&v682);
          v695 = 0x800000008;
          v693 = &unk_1E25C87E0;
          v694 = xmmword_18D319930;
          v696 = (float64_t *)v697;
          sub_18D053B2C((uint64_t)&v688, (uint64_t)&v682, (uint64_t)&v693);
          v679 = 0x800000008;
          v677 = &unk_1E25C87E0;
          v678 = xmmword_18D319930;
          v680 = v681;
          sub_18D053B2C((uint64_t)v737, (uint64_t)&v731, (uint64_t)&v677);
          *(_QWORD *)&v667[24] = 0x1000000008;
          *(_QWORD *)v667 = &unk_1E25C8660;
          *(_OWORD *)&v667[8] = xmmword_18D319980;
          *(_QWORD *)&v668 = (char *)&v668 + 8;
          sub_18D05449C((uint64_t)&v693, (uint64_t)&v677, (uint64_t)v667);
          *(_QWORD *)&v703[24] = 0x1000000010;
          *(_QWORD *)v703 = &unk_1E25C6320;
          *(_OWORD *)&v703[8] = xmmword_18D319990;
          *(_QWORD *)&v704 = (char *)&v704 + 8;
          sub_18D0543E8((uint64_t)__src, (uint64_t)v667, (uint64_t)v703);
          *(_QWORD *)&__src[24] = 0x100000008;
          *(_QWORD *)__src = &unk_1E25C86C0;
          *(_OWORD *)&__src[8] = xmmword_18D319940;
          *(_QWORD *)&__src[32] = &__src[40];
          sub_18D053B2C((uint64_t)&v784, (uint64_t)&v716, (uint64_t)__src);
          v674 = 0x100000008;
          v672 = &unk_1E25C86C0;
          v673 = xmmword_18D319940;
          v675 = &v676;
          sub_18D053B2C((uint64_t)&v726, (uint64_t)&v716, (uint64_t)&v672);
          v679 = 0x100000008;
          v677 = &unk_1E25C86C0;
          v678 = xmmword_18D319940;
          v680 = v681;
          sub_18D0540FC((uint64_t)&v721, (uint64_t)&v672, (uint64_t)&v677);
          v684 = 0x100000008;
          v682 = &unk_1E25C86C0;
          v683 = xmmword_18D319940;
          v685 = &v686;
          sub_18D053B2C((uint64_t)&v731, (uint64_t)&v677, (uint64_t)&v682);
          v690 = 0x100000008;
          v688 = &unk_1E25C86C0;
          v689 = xmmword_18D319940;
          v691 = v692;
          sub_18D0540FC((uint64_t)&v682, (uint64_t)v741, (uint64_t)&v688);
          v700 = 0x100000008;
          v698 = &unk_1E25C86C0;
          v699 = xmmword_18D319940;
          v701 = v702;
          sub_18D053B2C((uint64_t)v737, (uint64_t)&v688, (uint64_t)&v698);
          v185 = v498;
          *(_QWORD *)&v667[24] = 0x100000008;
          *(_QWORD *)v667 = &unk_1E25C86C0;
          *(_OWORD *)&v667[8] = xmmword_18D319940;
          *(_QWORD *)&v668 = (char *)&v668 + 8;
          sub_18D053FA4((uint64_t)&v698, (uint64_t)v736, (uint64_t)v667);
          v695 = 0x100000010;
          v693 = &unk_1E25C6350;
          v694 = xmmword_18D319180;
          v696 = (float64_t *)v697;
          sub_18D0543E8((uint64_t)__src, (uint64_t)v667, (uint64_t)&v693);
          *(_QWORD *)&v667[24] = 0x1000000010;
          *(_QWORD *)v667 = &unk_1E25C6320;
          *(_OWORD *)&v667[8] = xmmword_18D319990;
          *(_QWORD *)&v668 = (char *)&v668 + 8;
          v690 = 0x100000010;
          v688 = &unk_1E25C6350;
          v689 = xmmword_18D319180;
          v691 = v692;
          v700 = 0x100000010;
          v698 = &unk_1E25C6350;
          v699 = xmmword_18D319180;
          v701 = v702;
          *(_QWORD *)&__src[24] = 0x1000000010;
          *(_QWORD *)__src = &unk_1E25C6320;
          *(_OWORD *)&__src[8] = xmmword_18D319990;
          *(_QWORD *)&__src[32] = &__src[40];
          sub_18D054C20((uint64_t)v703, (uint64_t)&v693, (uint64_t)&v698, (uint64_t)__src, (uint64_t)&v688, (uint64_t)v667);
          *(_QWORD *)&__src[24] = 0x800000001;
          *(_QWORD *)__src = &unk_1E25C6E30;
          *(_QWORD *)&__src[32] = &__src[40];
          if ((_DWORD)v498 == 1)
          {
            v267 = 0;
            *(_QWORD *)&v268 = 0x100000001;
            *((_QWORD *)&v268 + 1) = 0x100000001;
            *(_OWORD *)&__src[8] = v268;
            *(_DWORD *)&__src[40] = v503;
            v269 = 1;
            v270 = 1;
          }
          else if ((int)v498 <= 0)
          {
            v269 = 0;
            v270 = 0;
            *(_QWORD *)&__src[8] = 0;
            *(_QWORD *)&__src[16] = 0;
            v267 = 1;
          }
          else
          {
            v271 = 0;
            *(_DWORD *)&__src[8] = 1;
            *(_DWORD *)&__src[12] = v498;
            *(_DWORD *)&__src[16] = v498;
            *(_DWORD *)&__src[20] = 1;
            do
            {
              *(_DWORD *)&__src[4 * v271 + 40] = v503 + v271;
              ++v271;
            }
            while (v498 != v271);
            v267 = 0;
            v269 = 1;
            v270 = v498;
          }
          v700 = 0x100000008;
          v698 = &unk_1E25C86F0;
          v701 = v702;
          *(_QWORD *)&v699 = __PAIR64__(v269, v270);
          DWORD2(v699) = v270 * v269;
          HIDWORD(v699) = v270;
          if (v270)
          {
            v272 = 0;
            for (m = 0; m != v270; ++m)
            {
              if ((v267 & 1) == 0)
              {
                v274 = 0;
                do
                {
                  v702[m + HIDWORD(v699) * v274] = *(_DWORD *)&__src[4 * v272 + 40 + 4 * v274];
                  ++v274;
                }
                while (v269 != v274);
              }
              v272 += v269;
            }
          }
          sub_18D053AA8((uint64_t)v741, (uint64_t)&v721);
          sub_18D053C48((uint64_t)__src, (uint64_t)v667, (uint64_t)&v698, (uint64_t)&v698);
          sub_18D053AA8((uint64_t)v737, (uint64_t)__src);
          sub_18D053E04((uint64_t)__src, (uint64_t)&v688, (uint64_t)&v698);
          sub_18D053AA8((uint64_t)v736, (uint64_t)__src);
          if (!v501)
          {
            *(_QWORD *)&__src[24] = 0x800000001;
            *(_QWORD *)__src = &unk_1E25C6E30;
            *(_QWORD *)&__src[32] = &__src[40];
            v275 = v495;
            if ((_DWORD)v495 == 1)
            {
              v276 = 0;
              *(_QWORD *)&v277 = 0x100000001;
              *((_QWORD *)&v277 + 1) = 0x100000001;
              *(_OWORD *)&__src[8] = v277;
              *(_DWORD *)&__src[40] = 0;
              v278 = 1;
            }
            else if ((int)v495 <= 0)
            {
              v278 = 0;
              v275 = 0;
              *(_QWORD *)&__src[8] = 0;
              *(_QWORD *)&__src[16] = 0;
              v276 = 1;
            }
            else
            {
              v279 = 0;
              *(_DWORD *)&__src[8] = 1;
              *(_DWORD *)&__src[12] = v495;
              *(_DWORD *)&__src[16] = v495;
              *(_DWORD *)&__src[20] = 1;
              do
              {
                *(_DWORD *)&__src[4 * v279 + 40] = v279;
                ++v279;
              }
              while (v495 != v279);
              v276 = 0;
              v278 = 1;
            }
            v684 = 0x100000008;
            v682 = &unk_1E25C86F0;
            v685 = &v686;
            *(_QWORD *)&v683 = __PAIR64__(v278, v275);
            DWORD2(v683) = v275 * v278;
            HIDWORD(v683) = v275;
            if (v275)
            {
              v280 = 0;
              for (n = 0; n != v275; ++n)
              {
                if ((v276 & 1) == 0)
                {
                  v282 = 0;
                  do
                  {
                    *((_DWORD *)&v686 + n + HIDWORD(v683) * v282) = *(_DWORD *)&__src[4 * v280 + 40 + 4 * v282];
                    ++v282;
                  }
                  while (v278 != v282);
                }
                v280 += v278;
              }
            }
            sub_18D053C48((uint64_t)__src, (uint64_t)v667, (uint64_t)&v682, (uint64_t)&v698);
            sub_18D053AA8((uint64_t)&v621, (uint64_t)__src);
            sub_18D053E04((uint64_t)__src, (uint64_t)&v688, (uint64_t)&v682);
            sub_18D053AA8((uint64_t)&v627, (uint64_t)__src);
            sub_18D053C48((uint64_t)__src, (uint64_t)v667, (uint64_t)&v682, (uint64_t)&v682);
            sub_18D053AA8((uint64_t)&v633, (uint64_t)__src);
          }
          v190 = v505 + 1;
          v193 = v499;
        }
        while ((void *)(v505 + 1) != v494);
      }
      sub_18D053AA8((uint64_t)&v559 + 8, (uint64_t)v737);
      v181 = sub_18D053AA8((uint64_t)&v582, (uint64_t)v736);
      v283 = 0;
      *(_DWORD *)v608 = 0;
      v34 = 1;
    }
    else
    {
      v144 = 0;
      v145 = 0;
      v146 = 0;
      v147 = 1;
      v148 = v530;
      do
      {
        v149 = *((unsigned int *)v148 + v144);
        *(_QWORD *)&v667[24] = 0x800000001;
        *(_QWORD *)v667 = &unk_1E25C6E30;
        *(_QWORD *)&v668 = (char *)&v668 + 8;
        v504 = v147;
        if ((_DWORD)v149 == 1)
        {
          v150 = 0;
          *(_QWORD *)&v151 = 0x100000001;
          *((_QWORD *)&v151 + 1) = 0x100000001;
          *(_OWORD *)&v667[8] = v151;
          DWORD2(v668) = 0;
          v152 = 1;
          LODWORD(v149) = 1;
        }
        else if ((int)v149 <= 0)
        {
          v152 = 0;
          LODWORD(v149) = 0;
          *(_QWORD *)&v667[8] = 0;
          *(_QWORD *)&v667[16] = 0;
          v150 = 1;
        }
        else
        {
          v153 = 0;
          *(_DWORD *)&v667[8] = 1;
          *(_DWORD *)&v667[12] = v149;
          *(_DWORD *)&v667[16] = v149;
          *(_DWORD *)&v667[20] = 1;
          do
          {
            *((_DWORD *)&v668 + v153 + 2) = v153;
            ++v153;
          }
          while (v149 != v153);
          v150 = 0;
          v152 = 1;
        }
        *(_QWORD *)&v703[24] = 0x100000008;
        *(_QWORD *)v703 = &unk_1E25C86F0;
        *(_QWORD *)&v704 = (char *)&v704 + 8;
        *(_DWORD *)&v703[8] = v149;
        *(_DWORD *)&v703[12] = v152;
        *(_DWORD *)&v703[16] = v149 * v152;
        *(_DWORD *)&v703[20] = v149;
        if ((_DWORD)v149)
        {
          v154 = 0;
          v155 = 0;
          do
          {
            if ((v150 & 1) == 0)
            {
              v156 = 0;
              do
              {
                *((_DWORD *)&v704 + v155 + *(_DWORD *)&v703[20] * v156 + 2) = *((_DWORD *)&v668 + v154 + v156 + 2);
                ++v156;
              }
              while (v152 != v156);
            }
            ++v155;
            v154 += v152;
          }
          while (v155 != (_DWORD)v149);
          v157 = *(_DWORD *)&v703[8];
          v152 = *(_DWORD *)&v703[12];
        }
        else
        {
          v157 = 0;
        }
        *(_QWORD *)&__src[24] = 0x100000008;
        *(_QWORD *)__src = &unk_1E25C86F0;
        *(_QWORD *)&__src[32] = &__src[40];
        *(_DWORD *)&__src[8] = v157;
        *(_DWORD *)&__src[12] = v152;
        v158 = (v157 * v152);
        *(_DWORD *)&__src[16] = v157 * v152;
        *(_DWORD *)&__src[20] = v157;
        if ((int)v158 >= 1)
        {
          v159 = (int *)&v704 + 2;
          v160 = &__src[40];
          do
          {
            v161 = *v159++;
            *v160++ = v161 + v146;
            --v158;
          }
          while (v158);
        }
        sub_18D053D7C((uint64_t)&v747, (uint64_t)__src);
        v162 = *((unsigned int *)v530 + HIDWORD(v528) + (int)v144);
        *(_QWORD *)&v667[24] = 0x800000001;
        *(_QWORD *)v667 = &unk_1E25C6E30;
        *(_QWORD *)&v668 = (char *)&v668 + 8;
        if ((_DWORD)v162 == 1)
        {
          v163 = 0;
          *(_QWORD *)&v164 = 0x100000001;
          *((_QWORD *)&v164 + 1) = 0x100000001;
          *(_OWORD *)&v667[8] = v164;
          DWORD2(v668) = 0;
          v165 = 1;
          LODWORD(v162) = 1;
        }
        else if ((int)v162 <= 0)
        {
          v165 = 0;
          LODWORD(v162) = 0;
          *(_QWORD *)&v667[8] = 0;
          *(_QWORD *)&v667[16] = 0;
          v163 = 1;
        }
        else
        {
          v166 = 0;
          *(_DWORD *)&v667[8] = 1;
          *(_DWORD *)&v667[12] = v162;
          *(_DWORD *)&v667[16] = v162;
          *(_DWORD *)&v667[20] = 1;
          do
          {
            *((_DWORD *)&v668 + v166 + 2) = v166;
            ++v166;
          }
          while (v162 != v166);
          v163 = 0;
          v165 = 1;
        }
        *(_QWORD *)&v703[24] = 0x100000008;
        *(_QWORD *)v703 = &unk_1E25C86F0;
        *(_QWORD *)&v704 = (char *)&v704 + 8;
        *(_DWORD *)&v703[8] = v162;
        *(_DWORD *)&v703[12] = v165;
        *(_DWORD *)&v703[16] = v162 * v165;
        *(_DWORD *)&v703[20] = v162;
        if ((_DWORD)v162)
        {
          v167 = 0;
          v168 = 0;
          do
          {
            if ((v163 & 1) == 0)
            {
              v169 = 0;
              do
              {
                *((_DWORD *)&v704 + v168 + *(_DWORD *)&v703[20] * v169 + 2) = *((_DWORD *)&v668 + v167 + v169 + 2);
                ++v169;
              }
              while (v165 != v169);
            }
            ++v168;
            v167 += v165;
          }
          while (v168 != (_DWORD)v162);
          v170 = *(_DWORD *)&v703[8];
          v165 = *(_DWORD *)&v703[12];
        }
        else
        {
          v170 = 0;
        }
        *(_QWORD *)&__src[24] = 0x100000008;
        *(_QWORD *)__src = &unk_1E25C86F0;
        *(_QWORD *)&__src[32] = &__src[40];
        *(_DWORD *)&__src[8] = v170;
        *(_DWORD *)&__src[12] = v165;
        v171 = (v170 * v165);
        *(_DWORD *)&__src[16] = v170 * v165;
        *(_DWORD *)&__src[20] = v170;
        if ((int)v171 >= 1)
        {
          v172 = (int *)&v704 + 2;
          v173 = &__src[40];
          do
          {
            v174 = *v172++;
            *v173++ = v174 + v145;
            --v171;
          }
          while (v171);
        }
        sub_18D053D7C((uint64_t)&v742, (uint64_t)__src);
        v786 = 0x100000008;
        v784 = (void (*)(uint64_t))&unk_1E25C86C0;
        v785 = xmmword_18D319940;
        v787 = (double *)v788;
        *(_QWORD *)&__src[24] = 0x800000008;
        *(_QWORD *)__src = &unk_1E25C87E0;
        *(_OWORD *)&__src[8] = xmmword_18D319930;
        *(_QWORD *)&__src[32] = &__src[40];
        *(_QWORD *)&v703[24] = 0x800000008;
        *(_QWORD *)v703 = &unk_1E25C87E0;
        *(_OWORD *)&v703[8] = xmmword_18D319930;
        *(_QWORD *)&v704 = (char *)&v704 + 8;
        v175 = (unsigned int (*)(_BYTE *, _BYTE *, _QWORD, void (**)(uint64_t), _BYTE *, _BYTE *))v525[v144];
        sub_18D053E04((uint64_t)v667, (uint64_t)&v588, (uint64_t)&v747);
        v176 = (DWORD1(v743) * v743);
        *(_QWORD *)&v737[24] = 0x100000008;
        *(_QWORD *)v737 = &unk_1E25C86C0;
        *(_QWORD *)&v737[8] = v743;
        *(_DWORD *)&v737[16] = v176;
        *(_DWORD *)&v737[20] = v743;
        v738 = &v739;
        if ((_DWORD)v176)
        {
          v177 = v745;
          v178 = v665;
          v179 = &v739;
          do
          {
            v180 = *v177++;
            *v179++ = v178[v180];
            --v176;
          }
          while (v176);
        }
        if (v175(v667, v737, v519[v144], &v784, __src, v703))
        {
          v34 = 0;
          v607 = 0;
          v283 = 20;
          goto LABEL_296;
        }
        sub_18D053E04((uint64_t)v667, (uint64_t)&v551, (uint64_t)&v747);
        sub_18D05495C((uint64_t)v667, (uint64_t)&v784);
        sub_18D053AA8(v760 + 104 * v144, (uint64_t)&v784);
        *(_QWORD *)&v667[24] = 0x800000008;
        *(_QWORD *)v667 = &unk_1E25C87E0;
        *(_OWORD *)&v667[8] = xmmword_18D319930;
        *(_QWORD *)&v668 = (char *)&v668 + 8;
        v733 = 0x100000008;
        v731 = (uint64_t (**)())&unk_1E25C86F0;
        v732 = xmmword_18D319940;
        v734 = v735;
        v728 = 0x100000008;
        v726 = &unk_1E25C86F0;
        v727 = xmmword_18D319940;
        v729 = v730;
        *(_QWORD *)&v737[24] = v75;
        *(_QWORD *)v737 = &unk_1E25C7670;
        *(_OWORD *)&v737[8] = xmmword_18D319960;
        v738 = &v739;
        v182 = sub_18D054568((uint64_t)__src, (uint64_t)&v731, (uint64_t)&v726, (uint64_t)v737, (uint64_t)v667);
        sub_18D053AA8((uint64_t)&v756[69 * v144], (uint64_t)v667);
        *(_QWORD *)&v183 = sub_18D053AA8((uint64_t)&v753[69 * v144], (uint64_t)v703).n128_u64[0];
        v147 = (v182 <= v138) & v504;
        v148 = v530;
        v146 += *((_DWORD *)v530 + v144);
        v145 += *((_DWORD *)v530 + HIDWORD(v528) + (int)v144++);
        v143 = v509;
      }
      while (v144 != v509);
      if (((v182 <= v138) & v504) != 0)
        goto LABEL_167;
      *(_WORD *)__src = 2;
      v703[0] = 2;
      v287 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)((char *)&v617 + 8), "Predict state Jacobian matrix is not invertible.", v183);
      v293 = v618 >= 0 ? v287 : BYTE8(v617);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, v703, "%s", v288, v289, v290, v291, v292, v293);
      sub_18D053AA8((uint64_t)&v559 + 8, (uint64_t)&v594);
      *(_QWORD *)&__src[24] = 0x100000008;
      *(_QWORD *)__src = &unk_1E25C86C0;
      *(_OWORD *)&__src[8] = xmmword_18D319940;
      *(_QWORD *)&__src[32] = &__src[40];
      sub_18D053B2C((uint64_t)&v559 + 8, (uint64_t)&v551, (uint64_t)__src);
      sub_18D053AA8((uint64_t)&v582, (uint64_t)__src);
      *(_QWORD *)&__src[24] = 0x800000008;
      *(_QWORD *)__src = &unk_1E25C87E0;
      *(_QWORD *)&__src[32] = &__src[40];
      *(_DWORD *)&__src[8] = v495;
      *(_DWORD *)&__src[12] = v498;
      *(_DWORD *)&__src[16] = v507;
      *(_DWORD *)&__src[20] = v495;
      sub_18D04BE88((uint64_t)__src, 0.0);
      sub_18D053AA8((uint64_t)&v621, (uint64_t)__src);
      *(_QWORD *)&__src[24] = 0x100000008;
      *(_QWORD *)__src = &unk_1E25C86C0;
      *(_QWORD *)&__src[32] = &__src[40];
      *(_DWORD *)&__src[8] = v495;
      *(_DWORD *)&__src[12] = 1;
      *(_DWORD *)&__src[16] = v495;
      *(_DWORD *)&__src[20] = v495;
      sub_18D04BE88((uint64_t)__src, 0.0);
      sub_18D053AA8((uint64_t)&v627, (uint64_t)__src);
      v181 = sub_18D053AA8((uint64_t)&v633, (uint64_t)&v532);
      v34 = 0;
      *(_DWORD *)v608 = 0;
      v607 = 0;
      v283 = 21;
    }
LABEL_296:
    for (ii = 592; ii != -512; ii -= 552)
      *(_QWORD *)&v752[ii] = &unk_1E25C5E70;
    for (jj = 592; jj != -512; jj -= 552)
      *(_QWORD *)&v755[jj] = &unk_1E25C5E70;
    for (kk = 144; kk != -64; kk -= 104)
      *(_QWORD *)&v759[kk] = &unk_1E25C5E70;
    if ((v34 & 1) == 0)
      break;
    v59 = v545;
    v549 = v545;
    if (v491)
      goto LABEL_326;
    v61 = v490 + 1;
    if (v490 + 1 == v488)
    {
      v34 = 1;
      goto LABEL_326;
    }
  }
  *(_WORD *)v703 = 12;
  v667[0] = 4;
  *(_QWORD *)__src = (*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)v492 + 16))(v492, v181);
  *(_QWORD *)&__src[8] = v312;
  v313 = cnprint::CNLogFormatter::FormatGeneral(v493 + 2488, (uint64_t)__src, "GNSS measurement selection: could not predict filter,code,%d", v283);
  if (*(char *)(v493 + 2511) >= 0)
    LOBYTE(v319) = v313;
  else
    v319 = *(_QWORD *)(v493 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v703, v667, "%s", v314, v315, v316, v317, v318, v319);
LABEL_326:
  v5 = v492;
LABEL_327:
  v4 = v493;
  raven::PopulateAllTimeFields((uint64_t)&v648, v493 + 136, v59, v60);
  if (*(_BYTE *)(v493 + 1208))
  {
    v671 = *(_QWORD *)(v493 + 1400);
    v320 = *(_OWORD *)(v493 + 1368);
    v668 = *(_OWORD *)(v493 + 1352);
    v669 = v320;
    v670 = *(_OWORD *)(v493 + 1384);
    v321 = *(_OWORD *)(v493 + 1336);
    *(_OWORD *)v667 = *(_OWORD *)(v493 + 1320);
    *(_OWORD *)&v667[16] = v321;
  }
  else
  {
    *(_QWORD *)v667 = 0;
    *(_QWORD *)&v667[8] = 0x3FF0000000000000;
    *(_OWORD *)&v667[16] = 0u;
    v668 = 0u;
    v669 = 0u;
    v670 = 0u;
    v671 = 0;
  }
  v322 = *(_BYTE *)(v493 + 2368);
  if (v322)
    v322 = *(_BYTE *)(v493 + 2480);
  v737[0] = v322;
  if (*(_BYTE *)(v493 + 1624))
  {
    v756 = *(uint64_t **)(v493 + 1768);
    v323 = *(_OWORD *)(v493 + 1752);
    *(_OWORD *)v755 = *(_OWORD *)(v493 + 1736);
    *(_OWORD *)&v755[16] = v323;
  }
  else
  {
    *(_QWORD *)v755 = 0;
    *(_QWORD *)&v755[8] = 0x3FF0000000000000;
    v756 = 0;
    *(_OWORD *)&v755[16] = 0uLL;
  }
  if (*(_BYTE *)(v493 + 1776))
  {
    v324 = *(_OWORD *)(v493 + 1904);
    *(_OWORD *)v752 = *(_OWORD *)(v493 + 1888);
    *(_OWORD *)&v752[16] = v324;
    v753 = *(_QWORD **)(v493 + 1920);
  }
  else
  {
    *(_QWORD *)v752 = 0;
    *(_QWORD *)&v752[8] = 0x3FF0000000000000;
    v753 = 0;
    *(_QWORD *)&v752[16] = 0;
    *(_QWORD *)&v752[24] = 0;
  }
  if (v34)
  {
    sub_18D1A0AD8((uint64_t)&v550, (uint64_t)v703);
    sub_18D1A1544((uint64_t)&v550, (uint64_t)__src);
    v38 = sub_18D1A0B60(v493 + 16800, (uint64_t)&v648, (uint64_t)v703, (uint64_t)__src, v667, v737, (__int128 *)v755, (__int128 *)v752);
  }
  else
  {
    v38 = 0;
  }
  v633 = &unk_1E25C5E70;
  v627 = &unk_1E25C5E70;
  v550 = &off_1E25B91D0;
  v621 = &unk_1E25C5E70;
  sub_18D1C50CC((uint64_t)&v550);
LABEL_342:
  *(_BYTE *)(v4 + 8656) = *(_BYTE *)(v4 + 2704);
  v325 = *(_OWORD *)(v4 + 2728);
  *(_OWORD *)(v4 + 8664) = *(_OWORD *)(v4 + 2712);
  *(_OWORD *)(v4 + 8680) = v325;
  v508 = v4 + 2696;
  v496 = v4 + 8648;
  *(_OWORD *)(v4 + 8689) = *(_OWORD *)(v4 + 2737);
  sub_18D053AA8(v4 + 8712, v4 + 2760);
  sub_18D053AA8(v4 + 8904, v4 + 2952);
  *(_BYTE *)(v4 + 9096) = *(_BYTE *)(v4 + 3144);
  *(_OWORD *)(v4 + 9104) = *(_OWORD *)(v4 + 3152);
  *(_QWORD *)(v4 + 9120) = *(_QWORD *)(v4 + 3168);
  sub_18D053AA8(v4 + 9128, v4 + 3176);
  sub_18D053AA8(v4 + 9320, v4 + 3368);
  sub_18D053AA8(v4 + 12248, v4 + 6296);
  v326 = *(_QWORD *)(v4 + 8616);
  v327 = *(_QWORD *)(v4 + 8624);
  v328 = 0xCFF3FCFF3FCFF3FDLL * ((v327 - v326) >> 4);
  v329 = *(_QWORD *)(v4 + 14584);
  v330 = *(_OWORD **)(v4 + 14568);
  if (0xCFF3FCFF3FCFF3FDLL * ((v329 - (uint64_t)v330) >> 4) >= v328)
  {
    if (0xCFF3FCFF3FCFF3FDLL * ((uint64_t)(*(_QWORD *)(v4 + 14576) - (_QWORD)v330) >> 4) >= v328)
    {
      v337 = (uint64_t)sub_18D1C5378(*(_OWORD **)(v4 + 8616), *(_OWORD **)(v4 + 8624), v330);
      v339 = *(_QWORD *)(v4 + 14576);
      if (v339 != v337)
      {
        v340 = (_QWORD *)(v339 - 2320);
        do
        {
          *v340 = &unk_1E25C5E70;
          *(v340 - 366) = &unk_1E25C5E70;
          *(v340 - 390) = &unk_1E25C5E70;
          v341 = v340 - 392;
          v340 -= 682;
        }
        while (v341 != (_QWORD *)v337);
      }
    }
    else
    {
      v338 = (_OWORD *)(v326 + 16 * ((uint64_t)(*(_QWORD *)(v4 + 14576) - (_QWORD)v330) >> 4));
      sub_18D1C5378(*(_OWORD **)(v4 + 8616), v338, v330);
      v337 = sub_18D1C52CC((uint64_t)v338, v327, *(_QWORD *)(v4 + 14576));
    }
  }
  else
  {
    if (v330)
    {
      v331 = *(_OWORD **)(v4 + 14576);
      if (v331 != v330)
      {
        v332 = v331 - 145;
        do
        {
          *v332 = &unk_1E25C5E70;
          *(v332 - 366) = &unk_1E25C5E70;
          *(v332 - 390) = &unk_1E25C5E70;
          v333 = v332 - 392;
          v332 -= 682;
        }
        while (v333 != v330);
      }
      *(_QWORD *)(v4 + 14576) = v330;
      operator delete(v330);
      v329 = 0;
      *(_QWORD *)(v4 + 14568) = 0;
      *(_QWORD *)(v4 + 14576) = 0;
      *(_QWORD *)(v4 + 14584) = 0;
    }
    if (v328 > 0xC0300C0300C03)
      sub_18D07AFE4();
    v334 = 0xCFF3FCFF3FCFF3FDLL * (v329 >> 4);
    v335 = 2 * v334;
    if (2 * v334 <= v328)
      v335 = 0xCFF3FCFF3FCFF3FDLL * ((v327 - v326) >> 4);
    if (v334 >= 0x6018060180601)
      v336 = 0xC0300C0300C03;
    else
      v336 = v335;
    sub_18D1C5278((_QWORD *)(v4 + 14568), v336);
    v337 = sub_18D1C52CC(v326, v327, *(_QWORD *)(v4 + 14576));
  }
  *(_QWORD *)(v4 + 14576) = v337;
  *(_QWORD *)(v4 + 14592) = *(_QWORD *)(v4 + 8640);
  v731 = (uint64_t (**)())&v731;
  *(_QWORD *)&v732 = &v731;
  *((_QWORD *)&v732 + 1) = 0;
  if (!v38)
  {
LABEL_371:
    UnprocessedMSRData = raven::RavenSequentialGNSSMeasurementSelector::GetUnprocessedMSRData(v4 + 16800, (uint64_t)v5, (uint64_t *)&v731);
    if ((UnprocessedMSRData & 1) != 0)
      goto LABEL_372;
LABEL_455:
    v36 = 0xFFFFFFFFLL;
    goto LABEL_493;
  }
  LOBYTE(v550) = 0;
  LOBYTE(v551) = 0;
  v342 = raven::RavenSequentialGNSSMeasurementSelector::SelectMeasurements(v4 + 16800, (uint64_t)v5, (uint64_t *)&v731, (uint64_t)&v550);
  if ((v342 & 1) != 0)
  {
    if (LOBYTE(v551))
    {
      v345 = v550;
      *(_QWORD *)__src = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      *(_QWORD *)&__src[8] = v346;
      if ((raven::RavenPNTEstimator::AdjustClockOffset(v4, (uint64_t)__src, *(double *)&v345) & 1) == 0)
        goto LABEL_455;
    }
  }
  v347 = v4 + 19224;
  updated = CNTimeSpan::operator-(v4 + 80, (_QWORD *)(v4 + 64), v343, v344);
  *(double *)v350.i64 = v349 + (double)updated;
  v351.i64[0] = 0x405E000000000000;
  if (*(double *)v350.i64 <= 120.0 && *(_DWORD *)(v4 + 288) < 0x10u)
  {
    *(_QWORD *)__src = updated;
    *(double *)&__src[8] = v349;
    updated = raven::RavenEstimator::UpdateAggressiveFlooringOfOutputUncertaintyData(v4, (uint64_t)__src, v4 + 1928, v5[23], v350, v351);
    v352 = v493;
  }
  else
  {
    *(_BYTE *)v347 = 0;
    *(_BYTE *)(v4 + 280) = 0;
    v352 = v4;
  }
  *(_DWORD *)__src = 1;
  *(_DWORD *)v703 = 5;
  v353 = (_QWORD *)(v352 + 18264);
  ITRCount = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount(updated, (_QWORD *)(v352 + 18264), (int *)__src, (int *)v703);
  v355 = (int)ITRCount;
  *(_DWORD *)__src = 1;
  *(_DWORD *)v703 = 4;
  v356 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)ITRCount, v353, (int *)__src, (int *)v703);
  v357 = v356;
  v358 = (_DWORD)v356 + v355;
  *(_DWORD *)(v493 + 312) = (_DWORD)v356 + v355 - *(_DWORD *)(v347 + 16);
  *(_DWORD *)__src = 1;
  *(_DWORD *)v703 = 3;
  UnprocessedMSRData = (uint64_t)raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v356, v353, (int *)__src, (int *)v703);
  *(_DWORD *)(v493 + 316) = UnprocessedMSRData - *(_DWORD *)(v347 + 20);
  if (v358)
    *(double *)(v493 + 320) = (double)v357 / (double)v358;
  v4 = v493;
  if ((v342 & 1) == 0)
    goto LABEL_371;
LABEL_372:
  v360 = v732;
  if ((uint64_t (***)())v732 == &v731)
    goto LABEL_458;
  v361 = 0;
  v506 = v4 + 2488;
  v497 = (_BYTE *)(v4 + 61288);
  v500 = vdupq_n_s64(0x7FF8000000000000uLL);
  v362 = "";
  while (2)
  {
    v363 = (uint64_t *)(v360 + 16);
    v364 = *(const std::string **)(v360 + 16);
    v365 = *(_DWORD *)(v360 + 192);
    if ((v365 - 1) >= 2)
    {
      if (v365 == 3)
      {
        ++v361;
        goto LABEL_451;
      }
      raven::RavenSequentialGNSSMeasurementSelector::GetFinalGnssObservable(v4 + 16800, v360 + 16, (uint64_t)v703);
      if ((_BYTE)v715)
      {
        *(_QWORD *)&v752[24] = 0x100000003;
        *(_QWORD *)v752 = &unk_1E25C7790;
        *(_QWORD *)&v366 = 0x100000001;
        *((_QWORD *)&v366 + 1) = 0x100000001;
        *(_OWORD *)&v752[8] = v366;
        v753 = v754;
        *(_QWORD *)&v667[24] = 0x300000003;
        *(_QWORD *)v667 = &unk_1E25C78E0;
        *(_OWORD *)&v667[8] = v366;
        *(_QWORD *)&v668 = (char *)&v668 + 8;
        sub_18D0778AC(__src, v362);
        __src[24] = 0;
        *(_DWORD *)&__src[28] = -1;
        memset(&__src[32], 0, 17);
        *(_QWORD *)&__src[56] = 0;
        *(_QWORD *)&v762 = 0;
        BYTE8(v762) = 0;
        v763 = 0uLL;
        LOBYTE(v764) = 0;
        *((_QWORD *)&v764 + 1) = 0;
        *(_QWORD *)&v765 = 0;
        *((_QWORD *)&v765 + 1) = 0x7FF8000000000000;
        LODWORD(v766) = 0;
        BYTE4(v766) = 0;
        *((_QWORD *)&v766 + 1) = 0x7FF8000000000000;
        LODWORD(v767[0]) = 2143289344;
        *(int64x2_t *)((char *)v767 + 8) = v500;
        *(int64x2_t *)((char *)&v767[1] + 8) = v500;
        *(int64x2_t *)((char *)&v767[2] + 8) = v500;
        DWORD2(v767[3]) = 2143289344;
        BYTE12(v767[3]) = 0;
        LOBYTE(v768) = 0;
        BYTE4(v768) = 0;
        BYTE8(v768) = 0;
        WORD6(v768) = 0;
        BYTE14(v768) = 1;
        v769 = v500;
        v770 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
        v367 = v362;
        sub_18D0778AC(&v771, v362);
        LOBYTE(v772) = 0;
        HIDWORD(v772) = -1;
        v773 = 0u;
        v774 = 0u;
        v775 = 0u;
        v776 = 0u;
        v777 = 0u;
        v778 = 0u;
        v779 = 0u;
        v780 = 0u;
        v781 = 0u;
        v782 = 0u;
        v783 = 0u;
        v368 = *v363;
        *(_QWORD *)&v369 = 0x100000001;
        *((_QWORD *)&v369 + 1) = 0x100000001;
        *(_OWORD *)&v752[8] = v369;
        *(_OWORD *)&v667[8] = v369;
        *v753 = *((_QWORD *)&v709 + 1);
        *(double *)v668 = (float)(*((float *)&v712 + 2) * *((float *)&v712 + 2));
        v767[3] = v712;
        v768 = v713;
        v769 = v714;
        v766 = v708;
        v767[0] = v709;
        v767[1] = v710;
        v767[2] = v711;
        v762 = v704;
        v763 = v705;
        v764 = v706;
        v765 = v707;
        *(_OWORD *)&__src[32] = *(_OWORD *)v703;
        *(_OWORD *)&__src[48] = *(_OWORD *)&v703[16];
        std::string::operator=((std::string *)__src, v364);
        *(_QWORD *)&__src[24] = v364[1].__r_.__value_.__l.__data_;
        UnprocessedMSRData = (uint64_t)std::string::operator=(&v771, (const std::string *)(v368 + 40));
        v772 = *(_QWORD *)(v368 + 64);
        v370 = *(_OWORD *)(v368 + 72);
        v371 = *(_OWORD *)(v368 + 104);
        v774 = *(_OWORD *)(v368 + 88);
        v775 = v371;
        v773 = v370;
        v372 = *(_OWORD *)(v368 + 120);
        v373 = *(_OWORD *)(v368 + 136);
        v374 = *(_OWORD *)(v368 + 168);
        v778 = *(_OWORD *)(v368 + 152);
        v779 = v374;
        v776 = v372;
        v777 = v373;
        v375 = *(_OWORD *)(v368 + 184);
        v376 = *(_OWORD *)(v368 + 200);
        v377 = *(_OWORD *)(v368 + 232);
        v782 = *(_OWORD *)(v368 + 216);
        v783 = v377;
        v780 = v375;
        v781 = v376;
        *(_QWORD *)v737 = v508;
        *(_QWORD *)&v737[8] = v4 + 14600;
        *(_QWORD *)&v737[16] = v4 + 14616;
        *(_QWORD *)&v737[24] = v4 + 2536;
        v738 = (uint64_t *)(v4 + 2576);
        v378 = *(_DWORD *)(*(_QWORD *)(v360 + 24) + 96);
        if ((v378 - 3) >= 2)
        {
          if (v378 == 2)
          {
            sub_18D1CF530((uint64_t)&v550, (__int128 *)__src, (__int128 *)v737);
            v554 = *(_OWORD *)*(_QWORD *)(v360 + 24);
            v389 = LOBYTE(v551);
            v390 = (char *)sub_18D181C54((uint64_t)v364);
            sub_18D0778AC(v512, v390);
            sub_18D1A1738((uint64_t)&v550, v389, (__int128 *)v512);
            if (v513 < 0)
              operator delete(v512[0]);
            if (sub_18D1A29C4((uint64_t)v497, (double *)&v554, (uint64_t)v752, (uint64_t)v667, (uint64_t)&v550))
            {
              LOWORD(v784) = 12;
              LOBYTE(v726) = 4;
              *(_QWORD *)v755 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v492 + 16))(v492);
              *(_QWORD *)&v755[8] = v391;
              v392 = sub_18D181C54((uint64_t)v364);
              cnprint::CNLogFormatter::FormatGeneral(v506, (uint64_t)v755, "Could not add measurement - Doppler for %s", v392);
              LOBYTE(v398) = v4 - 72;
              if (*(char *)(v493 + 2511) < 0)
                v398 = *(_QWORD *)(v493 + 2488);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v784, (unsigned __int8 *)&v726, "%s", v393, v394, v395, v396, v397, v398);
            }
            UnprocessedMSRData = sub_18D1A2DF0((uint64_t)&v550);
          }
          else if (v378 == 1)
          {
            sub_18D1CF048((uint64_t)&v550, (__int128 *)__src, (__int128 *)v737);
            v554 = *(_OWORD *)*(_QWORD *)(v360 + 24);
            v379 = LOBYTE(v551);
            v380 = (char *)sub_18D181C54((uint64_t)v364);
            sub_18D0778AC(__p, v380);
            sub_18D1A1738((uint64_t)&v550, v379, (__int128 *)__p);
            if (v515 < 0)
              operator delete(__p[0]);
            sub_18D1893E8(&v580, (uint64_t *)(*v363 + 312));
            if (sub_18D1A1E48((uint64_t)v497, (double *)&v554, (uint64_t)v752, (uint64_t)v667, (uint64_t)&v550))
            {
              LOWORD(v784) = 12;
              LOBYTE(v726) = 4;
              *(_QWORD *)v755 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v492 + 16))(v492);
              *(_QWORD *)&v755[8] = v381;
              v382 = sub_18D181C54((uint64_t)v364);
              cnprint::CNLogFormatter::FormatGeneral(v506, (uint64_t)v755, "Could not add measurement - PSR for %s", v382);
              LOBYTE(v388) = v4 - 72;
              if (*(char *)(v493 + 2511) < 0)
                v388 = *(_QWORD *)(v493 + 2488);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v784, (unsigned __int8 *)&v726, "%s", v383, v384, v385, v386, v387, v388);
            }
            UnprocessedMSRData = sub_18D1A2274((uint64_t)&v550);
          }
          goto LABEL_446;
        }
        sub_18D1C7988(&v550, 16);
        if ((__src[23] & 0x80000000) != 0)
        {
          sub_18D077798(&v555, *(void **)__src, *(unint64_t *)&__src[8]);
        }
        else
        {
          v555 = *(_OWORD *)__src;
          v556 = *(_QWORD *)&__src[16];
        }
        v562[6] = v767[3];
        v562[7] = v768;
        v562[8] = v769;
        v562[2] = v766;
        v562[3] = v767[0];
        v562[4] = v767[1];
        v562[5] = v767[2];
        v560 = v762;
        v561 = v763;
        v562[0] = v764;
        v562[1] = v765;
        v558 = *(_OWORD *)&__src[32];
        v559 = *(_OWORD *)&__src[48];
        v557 = *(_QWORD *)&__src[24];
        v563 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
        if (SHIBYTE(v771.__r_.__value_.__r.__words[2]) < 0)
          sub_18D077798(&v564, v771.__r_.__value_.__l.__data_, v771.__r_.__value_.__l.__size_);
        else
          v564 = v771;
        v579 = v738;
        v574 = v781;
        v575 = v782;
        v576 = v783;
        v570 = v777;
        v571 = v778;
        v572 = v779;
        v573 = v780;
        v566 = v773;
        v567 = v774;
        v568 = v775;
        v569 = v776;
        v577 = *(_OWORD *)v737;
        v578 = *(_OWORD *)&v737[16];
        v565 = v772;
        v550 = off_1E25C4048;
        v580 = 0;
        v581 = 0;
        v554 = *(_OWORD *)*(_QWORD *)(v360 + 24);
        v580 = v4 + 16776;
        v581 = v496;
        v399 = LOBYTE(v551);
        v400 = (char *)sub_18D181C54((uint64_t)v364);
        sub_18D0778AC(v510, v400);
        sub_18D1A1738((uint64_t)&v550, v399, (__int128 *)v510);
        if (v511 < 0)
          operator delete(v510[0]);
        if ((*(_DWORD *)&v667[8] & 0x80000000) != 0)
          __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
        *(_QWORD *)&v755[24] = 0x100000003;
        *(_QWORD *)v755 = &unk_1E25C7790;
        v756 = &v757;
        *(_DWORD *)&v755[8] = *(_DWORD *)&v667[8];
        *(_DWORD *)&v755[12] = 1;
        *(_DWORD *)&v755[16] = *(_DWORD *)&v667[8];
        *(_DWORD *)&v755[20] = *(_DWORD *)&v667[8];
        v401 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)v755, 0.0);
        if (*v497)
        {
          if (*(_DWORD *)(v4 + 67224) == 174)
          {
            LOWORD(v784) = 2;
            LOBYTE(v726) = 2;
            v484 = *((double *)&v554 + 1) + (double)(uint64_t)v554;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v784, (unsigned __int8 *)&v726, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v402, v403, v404, v405, v406, SLOBYTE(v484));
            goto LABEL_437;
          }
          if (*(_BYTE *)(v4 + 61289))
          {
            if (cnprint::CNPrinter::GetLogLevel(v401) <= 1)
            {
              LOWORD(v784) = 2;
              LOBYTE(v726) = 1;
              v486 = *((double *)&v554 + 1) + (double)(uint64_t)v554;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v784, (unsigned __int8 *)&v726, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v412, v413, v414, v415, v416, SLOBYTE(v486));
            }
            goto LABEL_437;
          }
          v417 = sub_18D03FE4C((double *)&v554, (double *)(v4 + 61296));
          if (v417)
          {
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v417) <= 1)
            {
              LOWORD(v784) = 2;
              LOBYTE(v726) = 1;
              v487 = *((double *)&v554 + 1) + (double)(uint64_t)v554;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v784, (unsigned __int8 *)&v726, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v418, v419, v420, v421, v422, SLOBYTE(v487));
            }
            goto LABEL_437;
          }
          *(_QWORD *)&v785 = 0;
          v784 = 0;
          sub_18D1D19F8((void (**)(int))&v784, (uint64_t)&v550);
          v423 = sub_18D1C7B34((uint64_t *)(v4 + 61328), &v784);
          sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v784);
          v424 = *(int *)(v4 + 67224);
          v425 = (v424 + 1);
          if (*(_QWORD *)(v4 + 61344) != v425)
          {
            LOWORD(v784) = 2;
            LOBYTE(v726) = 4;
            v433 = (*((uint64_t (**)(uint64_t))v550 + 2))((uint64_t)&v550);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v784, (unsigned __int8 *)&v726, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v434, v435, v436, v437, v438, v433);
            goto LABEL_437;
          }
          *(_DWORD *)(v4 + 67224) = v425;
          *(_DWORD *)(v4 + 61360) = v425;
          *(_DWORD *)(v4 + 61364) = 1;
          *(_DWORD *)(v4 + 61368) = v425;
          *(_DWORD *)(v4 + 61372) = v425;
          *(_DWORD *)(v4 + 64184) = v425;
          *(_DWORD *)(v4 + 64188) = 1;
          *(_DWORD *)(v4 + 64192) = v425;
          *(_DWORD *)(v4 + 64196) = v425;
          *(_DWORD *)(v4 + 64920) = v425;
          *(_DWORD *)(v4 + 64924) = 1;
          *(_DWORD *)(v4 + 64928) = v425;
          *(_DWORD *)(v4 + 64932) = v425;
          *(_DWORD *)(v4 + 66352) = v425;
          *(_DWORD *)(v4 + 66356) = 1;
          *(_DWORD *)(v4 + 66360) = v425;
          *(_DWORD *)(v4 + 66364) = v425;
          *(_DWORD *)(v4 + 66400) = v425;
          *(_DWORD *)(v4 + 66404) = 1;
          *(_DWORD *)(v4 + 66408) = v425;
          *(_DWORD *)(v4 + 66412) = v425;
          *(_DWORD *)(v4 + 67136) = v425;
          *(_DWORD *)(v4 + 67140) = 1;
          *(_DWORD *)(v4 + 67144) = v425;
          *(_DWORD *)(v4 + 67148) = v425;
          *(_DWORD *)(v4 + 67184) = v425;
          *(_DWORD *)(v4 + 67188) = 1;
          *(_DWORD *)(v4 + 67192) = v425;
          *(_DWORD *)(v4 + 67196) = v425;
          *(_DWORD *)(v4 + 67240) = v425;
          *(_DWORD *)(v4 + 67244) = 1;
          *(_DWORD *)(v4 + 67248) = v425;
          *(_DWORD *)(v4 + 67252) = v425;
          *(_DWORD *)(v4 + 68672) = v425;
          *(_DWORD *)(v4 + 68676) = 1;
          *(_DWORD *)(v4 + 68680) = v425;
          *(_DWORD *)(v4 + 68684) = v425;
          *(_OWORD *)(*(_QWORD *)(v4 + 61384) + 16 * v424) = v554;
          if (*(_DWORD *)&v752[8] <= *(_DWORD *)&v752[12])
            v426 = *(_DWORD *)&v752[12];
          else
            v426 = *(_DWORD *)&v752[8];
          if (*(_DWORD *)&v752[12])
            v427 = *(_DWORD *)&v752[8] == 0;
          else
            v427 = 1;
          if (v427)
            v428 = 0;
          else
            v428 = v426;
          *(_DWORD *)(*(_QWORD *)(v4 + 64208) + 4 * v424) = v428;
          sub_18D053AA8(*(_QWORD *)(v4 + 66376) + (v424 << 6), (uint64_t)v752);
          if (*(_DWORD *)&v755[8] <= *(_DWORD *)&v755[12])
            v429 = *(_DWORD *)&v755[12];
          else
            v429 = *(_DWORD *)&v755[8];
          if (*(_DWORD *)&v755[12])
            v430 = *(_DWORD *)&v755[8] == 0;
          else
            v430 = 1;
          if (v430)
            v431 = 0;
          else
            v431 = v429;
          *(_DWORD *)(*(_QWORD *)(v4 + 66424) + 4 * v424) = v431;
          sub_18D053AA8(*(_QWORD *)(v4 + 67160) + (v424 << 6), (uint64_t)v755);
          v432 = sub_18D053AA8(*(_QWORD *)(v4 + 67208) + 112 * (int)v424, (uint64_t)v667);
          *(_QWORD *)(*(_QWORD *)(v4 + 67264) + 8 * v424) = sub_18D1A2E70;
          if (*v423)
            UnprocessedMSRData = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v423)(3, v423, 0, &unk_1E25B4678, &std::__any_imp::__unique_typeinfo<raven::h_GnssAverageDopplerArgs_RavenPNT<double>>::__id, v432);
          else
            UnprocessedMSRData = 0;
          *(_QWORD *)(*(_QWORD *)(v4 + 68696) + 8 * v424) = UnprocessedMSRData;
        }
        else
        {
          if (cnprint::CNPrinter::GetLogLevel(v401) <= 1)
          {
            LOWORD(v784) = 2;
            LOBYTE(v726) = 1;
            v485 = *((double *)&v554 + 1) + (double)(uint64_t)v554;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v784, (unsigned __int8 *)&v726, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v407, v408, v409, v410, v411, SLOBYTE(v485));
          }
LABEL_437:
          LOWORD(v784) = 12;
          LOBYTE(v726) = 4;
          *(_QWORD *)v755 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v492 + 16))(v492);
          *(_QWORD *)&v755[8] = v439;
          v440 = sub_18D181C54((uint64_t)v364);
          cnprint::CNLogFormatter::FormatGeneral(v506, (uint64_t)v755, "Could not add measurement - average Doppler for %s", v440);
          LOBYTE(v446) = v4 - 72;
          if (*(char *)(v493 + 2511) < 0)
            v446 = *(_QWORD *)(v493 + 2488);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v784, (unsigned __int8 *)&v726, "%s", v441, v442, v443, v444, v445, v446);
        }
        v563 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
        if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v564.__r_.__value_.__l.__data_);
        v563 = off_1E25B93B0;
        if (SHIBYTE(v556) < 0)
          operator delete((void *)v555);
        v550 = &unk_1E25B8EE0;
        if (SHIBYTE(v553) < 0)
          operator delete(v552[0]);
LABEL_446:
        v770 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
        if (SHIBYTE(v771.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v771.__r_.__value_.__l.__data_);
        v770 = off_1E25B93B0;
        if ((__src[23] & 0x80000000) != 0)
          operator delete(*(void **)__src);
        v362 = v367;
      }
    }
LABEL_451:
    v360 = *(_QWORD *)(v360 + 8);
    if ((uint64_t (***)())v360 != &v731)
      continue;
    break;
  }
  v4 = v493;
  v5 = v492;
  if (v361)
    UnprocessedMSRData = sub_18D1A37F8(v493 + 19360, v361, *(_DWORD *)(*(_QWORD *)(v493 + 1168) + 1472));
LABEL_458:
  LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)UnprocessedMSRData);
  if (LogLevel <= 1)
  {
    *(_WORD *)v703 = 12;
    v667[0] = 1;
    *(_QWORD *)__src = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    *(_QWORD *)&__src[8] = v448;
    raven::RavenSequentialGNSSMeasurementSelector::StringOfL1MeasurementCountsByConstellation((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 16800), &v550);
    v449 = SHIBYTE(v552[0]) >= 0 ? (const char *)&v550 : (const char *)v550;
    v450 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)__src, "%s", v449);
    if (*(char *)(v4 + 2511) >= 0)
      LOBYTE(v456) = v450;
    else
      v456 = *(_QWORD *)(v4 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v703, v667, "%s", v451, v452, v453, v454, v455, v456);
    if (SHIBYTE(v552[0]) < 0)
      operator delete(v550);
  }
  if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    *(_WORD *)v703 = 12;
    v667[0] = 1;
    *(_QWORD *)__src = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    *(_QWORD *)&__src[8] = v457;
    raven::RavenSequentialGNSSMeasurementSelector::StringOfL5MeasurementCountsByConstellation((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 16800), &v550);
    v458 = SHIBYTE(v552[0]) >= 0 ? (const char *)&v550 : (const char *)v550;
    v459 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)__src, "%s", v458);
    if (*(char *)(v4 + 2511) >= 0)
      LOBYTE(v465) = v459;
    else
      v465 = *(_QWORD *)(v4 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v703, v667, "%s", v460, v461, v462, v463, v464, v465);
    if (SHIBYTE(v552[0]) < 0)
      operator delete(v550);
  }
  *(_WORD *)v703 = 12;
  v667[0] = 2;
  *(_QWORD *)__src = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  *(_QWORD *)&__src[8] = v466;
  raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCounts((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 16800), &v550);
  if (SHIBYTE(v552[0]) >= 0)
    v467 = (const char *)&v550;
  else
    v467 = (const char *)v550;
  cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)__src, "%s", v467);
  if (*(char *)(v4 + 2511) >= 0)
    LOBYTE(v473) = v4 - 72;
  else
    v473 = *(_QWORD *)(v4 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v703, v667, "%s", v468, v469, v470, v471, v472, v473);
  if (SHIBYTE(v552[0]) < 0)
    operator delete(v550);
  *(_WORD *)v703 = 12;
  v667[0] = 2;
  *(_QWORD *)__src = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  *(_QWORD *)&__src[8] = v474;
  raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCountsForRayTracedMeasurements((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 16800), &v550);
  if (SHIBYTE(v552[0]) >= 0)
    v475 = (const char *)&v550;
  else
    v475 = (const char *)v550;
  cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)__src, "%s", v475);
  if (*(char *)(v4 + 2511) >= 0)
    LOBYTE(v481) = v4 - 72;
  else
    v481 = *(_QWORD *)(v4 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v703, v667, "%s", v476, v477, v478, v479, v480, v481);
  if (SHIBYTE(v552[0]) < 0)
    operator delete(v550);
  v36 = 0;
LABEL_493:
  sub_18D1C5494(&v731);
  return v36;
}

void sub_18D19EEA0(_Unwind_Exception *a1)
{
  unint64_t v1;

  __cxa_guard_abort(&qword_1ECF23058);
  STACK[0x10A8] = (unint64_t)&unk_1E25C5E70;
  STACK[0x1040] = (unint64_t)&unk_1E25C5E70;
  STACK[0x740] = v1;
  STACK[0xE18] = (unint64_t)&unk_1E25C5E70;
  sub_18D1C50CC((uint64_t)&STACK[0x740]);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::ResetOscillatorStates(raven::RavenPNTEstimator *this)
{
  raven::RavenPNTEstimator *v1;
  uint64_t v2;
  double v3;
  double v4;
  double *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  int v17;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  double *v24;
  uint64_t *v25;
  uint64_t *v26;
  char *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  double v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  int v45;
  int *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  double *v52;
  uint64_t *v53;
  uint64_t *v54;
  char *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  int v59;
  int *v60;
  int v61;
  double v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _DWORD *v71;
  int v72;
  int v73;
  int i;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  double v78;
  char *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  const void **v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const void *v93;
  int v94;
  uint64_t v95;
  char v96;
  int v97;
  int v98;
  __int128 v99;
  int v100;
  int j;
  int v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  int32x4_t v107;
  char v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int k;
  int v114;
  int v115;
  uint64_t v116;
  _DWORD *v117;
  _BYTE *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  __int128 v122;
  int v123;
  int v124;
  _DWORD *v125;
  int v126;
  int v127;
  int m;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  int v143;
  uint64_t v144;
  const void **v145;
  void *v146;
  __int128 v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  void *v151;
  __int128 v152;
  uint64_t v153;
  double *v154;
  _QWORD v155[3];
  __int128 v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  _BYTE v160[24];
  uint64_t v161;
  _QWORD *v162;
  _QWORD v163[2];
  void *v164;
  void *v165;
  char *v166;
  void *v167;
  __int128 v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  void *v172;
  __int128 v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  void *v177;
  __int128 v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t (**v182)();
  __int128 v183;
  uint64_t v184;
  double *v185;
  _QWORD v186[21];
  void *v187;
  __int128 v188;
  uint64_t v189;
  double *v190;
  uint64_t v191;
  void *v192;
  int v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  void *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  _DWORD *v204;
  _DWORD v205[26];
  _BYTE v206[144];
  void *v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char v211;
  void *v212;
  __int128 v213;
  uint64_t v214;
  _BYTE *v215;
  _BYTE v216[104];
  void *v217;
  __int128 v218;
  uint64_t v219;
  _DWORD *v220;
  _DWORD v221[30];

  v1 = this;
  *((_OWORD *)this + 7) = *((_OWORD *)this + 5);
  v189 = 0x200000002;
  v187 = &unk_1E25C75B0;
  v190 = (double *)&v191;
  v188 = xmmword_18D319340;
  sub_18D04BE88((uint64_t)&v187, 0.0);
  v2 = *((_QWORD *)v1 + 146);
  v3 = *(double *)(v2 + 1256) * *(double *)(v2 + 1256);
  v4 = *(double *)(v2 + 1264) * *(double *)(v2 + 1264);
  v5 = v190;
  *v190 = v3;
  v5[SHIDWORD(v188) + 1] = v4;
  v6 = *((_QWORD *)v1 + 1831);
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  LOBYTE(v6) = atomic_load((unsigned __int8 *)&qword_1ECF230E0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230E0))
  {
    v161 = 0x200000001;
    *(_QWORD *)v160 = &unk_1E25C6BF0;
    v162 = v163;
    *(_OWORD *)&v160[8] = xmmword_18D319920;
    v163[0] = 0x1300000012;
    sub_18D1B82C8((uint64_t)v160, (uint64_t)&unk_1ECF23248);
    __cxa_atexit((void (*)(void *))sub_18D1B8348, &unk_1ECF23248, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230E0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_1ECF230E8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230E8))
  {
    v144 = 0;
    v161 = 0x1A00000001;
    *(_QWORD *)v160 = &off_1E25C6B60;
    v162 = v163;
    *(_OWORD *)&v160[8] = xmmword_18D3198F0;
    do
    {
      *((_DWORD *)v163 + v144) = v144;
      ++v144;
    }
    while (v144 != 26);
    sub_18D1B741C((uint64_t)&unk_1ECF23C50, (uint64_t)v160);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1ECF23C50, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230E8);
  }
  v184 = 0x1A00000002;
  v182 = &off_1E25C7580;
  v185 = (double *)v186;
  v183 = xmmword_18D3199A0;
  sub_18D04BE88((uint64_t)&v182, 0.0);
  v161 = 0x1A00000002;
  *(_OWORD *)&v160[8] = xmmword_18D3199A0;
  *(_QWORD *)v160 = &off_1E25C4F40;
  v162 = v163;
  v166 = (char *)v1 + 14880;
  v169 = 0x100000002;
  v167 = &unk_1E25C7550;
  v168 = xmmword_18D319330;
  v174 = 0x10000001ALL;
  v170 = &v171;
  v172 = &unk_1E25C70D0;
  v173 = xmmword_18D319790;
  v175 = &v176;
  sub_18D053D7C((uint64_t)&v167, (uint64_t)&unk_1ECF23248);
  sub_18D053D7C((uint64_t)&v172, (uint64_t)&unk_1ECF23C50);
  v8 = DWORD2(v168);
  v9 = DWORD2(v173);
  *(_DWORD *)&v160[8] = DWORD2(v168);
  *(_DWORD *)&v160[12] = DWORD2(v173);
  *(_DWORD *)&v160[16] = DWORD2(v173) * DWORD2(v168);
  *(_DWORD *)&v160[20] = DWORD2(v168);
  if (DWORD2(v173))
  {
    v10 = 0;
    v11 = 0;
    v12 = *((_DWORD *)v1 + 3725);
    v13 = *((_QWORD *)v1 + 1864);
    v14 = v175;
    v15 = v170;
    v16 = v162;
    do
    {
      if ((_DWORD)v8)
      {
        v17 = *((_DWORD *)v14 + v11) * v12;
        v18 = (int *)v15;
        v19 = v10;
        v20 = v8;
        do
        {
          v21 = *v18++;
          v16[v19++] = *(_QWORD *)(v13 + 8 * (v21 + v17));
          --v20;
        }
        while (v20);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  if ((_DWORD)v8 != (_DWORD)v183)
    goto LABEL_132;
  if ((_DWORD)v9 != DWORD1(v183))
    goto LABEL_133;
  if ((_DWORD)v9)
  {
    v22 = 0;
    v23 = 0;
    v24 = v185;
    v25 = v170;
    v26 = v175;
    v27 = v166;
    v28 = v162;
    do
    {
      if ((_DWORD)v8)
      {
        v29 = *((_DWORD *)v27 + 5) * *((_DWORD *)v26 + v23);
        v30 = *((_QWORD *)v27 + 4);
        v31 = v22;
        v32 = (int *)v25;
        v33 = v8;
        do
        {
          v34 = v24[v31];
          v35 = *v32++;
          *(double *)(v30 + 8 * (v35 + v29)) = v34;
          *(double *)&v28[v31++] = v34;
          --v33;
        }
        while (v33);
      }
      ++v23;
      v22 += v8;
    }
    while (v23 != v9);
  }
  v184 = 0x20000001ALL;
  v182 = &off_1E25C71C0;
  v185 = (double *)v186;
  v183 = xmmword_18D3199B0;
  sub_18D04BE88((uint64_t)&v182, 0.0);
  v161 = 0x20000001ALL;
  *(_OWORD *)&v160[8] = xmmword_18D3199B0;
  *(_QWORD *)v160 = &off_1E25C4EB0;
  v162 = v163;
  v166 = (char *)v1 + 14880;
  v169 = 0x10000001ALL;
  v167 = &unk_1E25C70D0;
  v168 = xmmword_18D319790;
  v179 = 0x100000002;
  v170 = &v171;
  v177 = &unk_1E25C7550;
  v178 = xmmword_18D319330;
  v180 = &v181;
  sub_18D053D7C((uint64_t)&v167, (uint64_t)&unk_1ECF23C50);
  sub_18D053D7C((uint64_t)&v177, (uint64_t)&unk_1ECF23248);
  v36 = DWORD2(v168);
  v37 = DWORD2(v178);
  *(_DWORD *)&v160[8] = DWORD2(v168);
  *(_DWORD *)&v160[12] = DWORD2(v178);
  *(_DWORD *)&v160[16] = DWORD2(v178) * DWORD2(v168);
  *(_DWORD *)&v160[20] = DWORD2(v168);
  if (DWORD2(v178))
  {
    v38 = 0;
    v39 = 0;
    v40 = *((_DWORD *)v1 + 3725);
    v41 = *((_QWORD *)v1 + 1864);
    v42 = v180;
    v43 = v170;
    v44 = v162;
    do
    {
      if ((_DWORD)v36)
      {
        v45 = *((_DWORD *)v42 + v39) * v40;
        v46 = (int *)v43;
        v47 = v38;
        v48 = v36;
        do
        {
          v49 = *v46++;
          v44[v47++] = *(_QWORD *)(v41 + 8 * (v49 + v45));
          --v48;
        }
        while (v48);
      }
      ++v39;
      v38 += v36;
    }
    while (v39 != v37);
  }
  if ((_DWORD)v36 != (_DWORD)v183)
LABEL_132:
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  if ((_DWORD)v37 != DWORD1(v183))
LABEL_133:
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v37)
  {
    v50 = 0;
    v51 = 0;
    v52 = v185;
    v53 = v170;
    v54 = v180;
    v55 = v166;
    v56 = v162;
    do
    {
      if ((_DWORD)v36)
      {
        v57 = *((_DWORD *)v55 + 5) * *((_DWORD *)v54 + v51);
        v58 = *((_QWORD *)v55 + 4);
        v59 = v50;
        v60 = (int *)v53;
        v61 = v36;
        do
        {
          v62 = v52[v59];
          v63 = *v60++;
          *(double *)(v58 + 8 * (v63 + v57)) = v62;
          *(double *)&v56[v59++] = v62;
          --v61;
        }
        while (v61);
      }
      ++v51;
      v50 += v36;
    }
    while (v51 != v37);
  }
  v64 = *((_DWORD *)v1 + 3725);
  v65 = *((_QWORD *)v1 + 1864);
  *(double *)(v65 + 8 * (19 * v64 + 19)) = v3;
  *(double *)(v65 + 8 * (20 * v64 + 20)) = v4;
  v163[0] = 0x1300000012;
  v157 = 0x100000002;
  v155[2] = &unk_1E25C7550;
  v156 = xmmword_18D319330;
  v158 = &v159;
  v159 = 0x1300000012;
  v153 = 0x100000002;
  v151 = &unk_1E25C7520;
  v154 = (double *)v155;
  v152 = xmmword_18D319330;
  sub_18D04BE88((uint64_t)&v151, 0.0);
  v214 = 0x200000002;
  v212 = &unk_1E25C75B0;
  v213 = xmmword_18D319340;
  v215 = v216;
  v160[0] = 0;
  sub_18D05C654((uint64_t)&v187, (uint64_t)&v212, v160);
  v219 = 0x200000002;
  v217 = &unk_1E25C75B0;
  v218 = xmmword_18D319340;
  v220 = v221;
  v209 = 0x100000002;
  v207 = &unk_1E25C7550;
  v208 = xmmword_18D319330;
  v210 = &v211;
  v161 = 0x100000008;
  *(_QWORD *)v160 = &unk_1E25C86C0;
  *(_OWORD *)&v160[8] = xmmword_18D319940;
  v162 = v163;
  sub_18D04F504((uint64_t)&v212, (uint64_t)&v207, (uint64_t)v160, (uint64_t)&v217);
  v66 = DWORD1(v218);
  v67 = v218;
  v184 = 0x200000002;
  v182 = (uint64_t (**)())&unk_1E25C75B0;
  v185 = (double *)v186;
  *(_QWORD *)&v183 = __PAIR64__(v218, DWORD1(v218));
  DWORD2(v183) = v218 * DWORD1(v218);
  HIDWORD(v183) = DWORD1(v218);
  if (DWORD1(v218))
  {
    v68 = 0;
    v69 = 0;
    v70 = HIDWORD(v218);
    v71 = v220;
    do
    {
      v72 = v68;
      v73 = v69;
      for (i = v67; i; --i)
      {
        v186[v73] = *(_QWORD *)&v71[2 * v72];
        v73 += v66;
        ++v72;
      }
      ++v69;
      v68 += v70;
    }
    while (v69 != v66);
  }
  v209 = 0x100000002;
  v207 = &unk_1E25C7520;
  v208 = xmmword_18D319330;
  v210 = &v211;
  v161 = 0x200000002;
  *(_QWORD *)v160 = &unk_1E25C75B0;
  *(_OWORD *)&v160[8] = xmmword_18D319340;
  v162 = v163;
  v148 = 0x200000002;
  v146 = &unk_1E25C75B0;
  v147 = xmmword_18D319340;
  v149 = &v150;
  sub_18D05C770((uint64_t)&v182, (uint64_t)&v207, (uint64_t)v160, (uint64_t)&v146);
  if (v156 <= DWORD1(v156))
    v75 = DWORD1(v156);
  else
    v75 = v156;
  if (DWORD1(v156))
    v76 = (_DWORD)v156 == 0;
  else
    v76 = 1;
  if (v76)
    v77 = 0;
  else
    v77 = v75;
  v161 = 0x100000002;
  *(_QWORD *)v160 = &unk_1E25C7520;
  *(_OWORD *)&v160[8] = xmmword_18D319330;
  v162 = v163;
  sub_18D053B2C((uint64_t)&v146, (uint64_t)&v151, (uint64_t)v160);
  v78 = sub_18D1D6EF0((uint64_t)&v182, (uint64_t)v160);
  if (!*((_DWORD *)v1 + 4035))
  {
    sub_18D053AA8((uint64_t)v1 + 15584, (uint64_t)v1 + 15040);
    sub_18D053AA8((uint64_t)v1 + 15832, (uint64_t)v1 + 15288);
    *(_QWORD *)&v78 = sub_18D053AA8((uint64_t)v1 + 15880, (uint64_t)v1 + 15336).n128_u64[0];
  }
  *((_DWORD *)v1 + 4035) = 1;
  if (!(_DWORD)v156 || !DWORD1(v156))
  {
    sub_18D053AA8((uint64_t)v1 + 15040, (uint64_t)v1 + 15584);
    sub_18D053AA8((uint64_t)v1 + 15288, (uint64_t)v1 + 15832);
    sub_18D053AA8((uint64_t)v1 + 15336, (uint64_t)v1 + 15880);
    *((_DWORD *)v1 + 4035) = 1;
    goto LABEL_128;
  }
  v79 = (char *)v1 + 16136;
  *((_BYTE *)v1 + 16136) = 0;
  v80 = *((_DWORD *)v1 + 3898);
  v145 = (const void **)v1;
  v81 = *((_DWORD *)v1 + 3899);
  if (v80 <= v81)
    v82 = *((_DWORD *)v1 + 3899);
  else
    v82 = *((_DWORD *)v1 + 3898);
  if (v81)
    v83 = v80 == 0;
  else
    v83 = 1;
  if (v83)
    v84 = 0;
  else
    v84 = v82;
  if ((int)v77 >= 1)
  {
    v85 = 0;
    v86 = v145 + 2038;
    do
    {
      v87 = *(_DWORD *)((char *)v158 + v85);
      if (v87 < 0 || v87 >= (int)v84)
      {
        *(_WORD *)v160 = 2;
        LOBYTE(v217) = 4;
        cnprint::CNLogFormatter::FormatGeneral(v86, "ResetStates(): states must contain valid indices into x, Rxx, and zx.", v78);
        if (v79[191] >= 0)
          LOBYTE(v93) = (_BYTE)v145 - 80;
        else
          v93 = *v86;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v160, (unsigned __int8 *)&v217, "%s", v88, v89, v90, v91, v92, (char)v93);
      }
      v85 += 4;
    }
    while (4 * v77 != v85);
  }
  v161 = 0x1A00000001;
  *(_QWORD *)v160 = &off_1E25C6B60;
  v162 = v163;
  v94 = v84 - 1;
  if ((_DWORD)v84 == 1)
  {
    v96 = 0;
    *(_QWORD *)&v99 = 0x100000001;
    *((_QWORD *)&v99 + 1) = 0x100000001;
    *(_OWORD *)&v160[8] = v99;
    LODWORD(v163[0]) = 0;
    v97 = 1;
    v98 = 1;
    v1 = (raven::RavenPNTEstimator *)v145;
  }
  else
  {
    v1 = (raven::RavenPNTEstimator *)v145;
    if ((int)v84 <= 0)
    {
      v97 = 0;
      v98 = 0;
      *(_QWORD *)&v160[8] = 0;
      *(_QWORD *)&v160[16] = 0;
      v96 = 1;
    }
    else
    {
      v95 = 0;
      *(_DWORD *)&v160[8] = 1;
      *(_DWORD *)&v160[12] = v84;
      *(_DWORD *)&v160[16] = v84;
      *(_DWORD *)&v160[20] = 1;
      do
      {
        *((_DWORD *)v163 + v95) = v95;
        ++v95;
      }
      while (v84 != v95);
      v96 = 0;
      v97 = 1;
      v98 = v84;
    }
  }
  v219 = 0x10000001ALL;
  v217 = &unk_1E25C70D0;
  v220 = v221;
  *(_QWORD *)&v218 = __PAIR64__(v97, v98);
  DWORD2(v218) = v98 * v97;
  HIDWORD(v218) = v98;
  if (v98)
  {
    v100 = 0;
    for (j = 0; j != v98; ++j)
    {
      if ((v96 & 1) == 0)
      {
        v102 = 0;
        do
        {
          v221[j + HIDWORD(v218) * v102] = *((_DWORD *)v163 + v100 + v102);
          ++v102;
        }
        while (v97 != v102);
      }
      v100 += v97;
    }
  }
  if ((int)v77 > 0)
  {
    v103 = (int *)v158;
    v104 = v77;
    do
    {
      v105 = *v103++;
      v221[v105] = -1;
      --v104;
    }
    while (v104);
  }
  v214 = 0x10000001ALL;
  v215 = 0;
  v213 = 0uLL;
  v212 = &unk_1E25C70D0;
  if ((v84 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  *(_QWORD *)&v106 = 0x100000001;
  *((_QWORD *)&v106 + 1) = 0x100000001;
  v107 = vdupq_lane_s32((int32x2_t)(v84 | 0x100000000), 0);
  v107.i32[1] = 1;
  v213 = (__int128)v107;
  v215 = v216;
  v161 = 0x1A00000001;
  *(_QWORD *)v160 = &off_1E25C6B60;
  v162 = v163;
  if ((_DWORD)v77 == 1)
  {
    v108 = 0;
    *(_OWORD *)&v160[8] = v106;
    LODWORD(v163[0]) = 0;
    v109 = 1;
    v110 = 1;
  }
  else if ((int)v77 <= 0)
  {
    v109 = 0;
    v110 = 0;
    *(_QWORD *)&v160[8] = 0;
    *(_QWORD *)&v160[16] = 0;
    v108 = 1;
  }
  else
  {
    v111 = 0;
    *(_DWORD *)&v160[8] = 1;
    *(_DWORD *)&v160[12] = v77;
    *(_DWORD *)&v160[16] = v77;
    *(_DWORD *)&v160[20] = 1;
    do
    {
      *((_DWORD *)v163 + v111) = v111;
      ++v111;
    }
    while (v77 != v111);
    v108 = 0;
    v109 = 1;
    v110 = v77;
  }
  v209 = 0x10000001ALL;
  v207 = &unk_1E25C70D0;
  v210 = &v211;
  *(_QWORD *)&v208 = __PAIR64__(v109, v110);
  DWORD2(v208) = v110 * v109;
  HIDWORD(v208) = v110;
  if (v110)
  {
    v112 = 0;
    for (k = 0; k != v110; ++k)
    {
      if ((v108 & 1) == 0)
      {
        v114 = 0;
        do
        {
          *((_DWORD *)&v211 + k + HIDWORD(v208) * v114) = *((_DWORD *)v163 + v112 + v114);
          ++v114;
        }
        while (v109 != v114);
      }
      v112 += v109;
    }
  }
  sub_18D1D5CC0((uint64_t)v160, (uint64_t)&v212, (uint64_t)&v207);
  sub_18D1D55CC((uint64_t)v160, SDWORD2(v156), (int *)v158);
  v115 = v84 - v77;
  if ((int)v84 > (int)v77)
  {
    LODWORD(v116) = 0;
    v117 = v220;
    v118 = v215;
    v119 = (int)v77;
    do
    {
      v116 = (int)v116;
      do
        v120 = v117[v116++];
      while (v120 == -1);
      *(_DWORD *)&v118[4 * v119++] = v120;
    }
    while (v119 != v84);
  }
  sub_18D1D5654((uint64_t)v1 + 15032, v84, (uint64_t)&v212);
  sub_18D1D6170((uint64_t)v206, (uint64_t)&v207);
  v161 = 0x1A00000001;
  *(_QWORD *)v160 = &off_1E25C6B60;
  v162 = v163;
  if (v94 == (_DWORD)v77)
  {
    LOBYTE(v121) = 0;
    *(_QWORD *)&v122 = 0x100000001;
    *((_QWORD *)&v122 + 1) = 0x100000001;
    *(_OWORD *)&v160[8] = v122;
    LODWORD(v163[0]) = v77;
    v123 = 1;
    v124 = 1;
  }
  else if (v94 - (int)v77 < 0)
  {
    v123 = 0;
    v124 = 0;
    *(_QWORD *)&v160[8] = 0;
    *(_QWORD *)&v160[16] = 0;
    LOBYTE(v121) = 1;
  }
  else
  {
    v124 = v84 - v77;
    *(_DWORD *)&v160[8] = 1;
    *(_DWORD *)&v160[12] = v84 - v77;
    *(_DWORD *)&v160[16] = v84 - v77;
    *(_DWORD *)&v160[20] = 1;
    v125 = v163;
    v121 = (v84 - v77);
    v126 = v77;
    do
    {
      *v125++ = v126++;
      --v121;
    }
    while (v121);
    v123 = 1;
  }
  v203 = 0x10000001ALL;
  v198 = &unk_1E25C70D0;
  v204 = v205;
  v199 = v124;
  v200 = v123;
  v201 = v124 * v123;
  v202 = v124;
  if (v124)
  {
    v127 = 0;
    for (m = 0; m != v124; ++m)
    {
      if ((v121 & 1) == 0)
      {
        v129 = 0;
        do
        {
          v205[m + v202 * v129] = *((_DWORD *)v163 + v127 + v129);
          ++v129;
        }
        while (v123 != v129);
      }
      v127 += v123;
    }
  }
  sub_18D1D1680((uint64_t)v160, (uint64_t)v1 + 15584, (uint64_t)&v207);
  sub_18D1D1080((uint64_t)v160, SDWORD2(v152), v154);
  sub_18D1D1778((uint64_t)v160, (uint64_t)v1 + 15832, (uint64_t)v206, (uint64_t)v206);
  sub_18D1D1114((uint64_t)v160, (uint64_t)&v146);
  v165 = &unk_1E25C5EA0;
  v164 = &unk_1E25C5EA0;
  v130 = v163[0];
  *(_QWORD *)v160 = &unk_1E25C7160;
  v163[0] = 0;
  if (v130)
    MEMORY[0x18D78B5BC](v130, 0x1000C8000313F17);
  if ((v77 & 0x80000000) != 0)
  {
    v142 = "nr >= 0";
    v143 = 3098;
    goto LABEL_137;
  }
  if (v115 < 0)
  {
    v142 = "nc >= 0";
    v143 = 3099;
LABEL_137:
    __assert_rtn("Zeros", "cnmatrix.h", v143, v142);
  }
  sub_18D1C96FC((uint64_t)&v192, v77, v84 - v77);
  v193 = v77;
  v194 = v84 - v77;
  v195 = v115 * v77;
  v196 = v77;
  sub_18D04BE88((uint64_t)&v192, 0.0);
  sub_18D1D1778((uint64_t)v160, (uint64_t)v1 + 15832, (uint64_t)v206, (uint64_t)&v198);
  sub_18D1D1114((uint64_t)v160, (uint64_t)&v192);
  v165 = &unk_1E25C5EA0;
  v164 = &unk_1E25C5EA0;
  v131 = v163[0];
  *(_QWORD *)v160 = &unk_1E25C7160;
  v163[0] = 0;
  if (v131)
    MEMORY[0x18D78B5BC](v131, 0x1000C8000313F17);
  v132 = v197;
  v192 = &unk_1E25C7160;
  v197 = 0;
  if (v132)
    MEMORY[0x18D78B5BC](v132, 0x1000C8000313F17);
  sub_18D1D1680((uint64_t)v160, (uint64_t)v1 + 15880, (uint64_t)&v207);
  sub_18D1D1080((uint64_t)v160, SDWORD2(v183), v185);
  v161 = 0x10000001ALL;
  *(_QWORD *)v160 = &unk_1E25C70D0;
  *(_DWORD *)&v160[8] = v84;
  *(_DWORD *)&v160[12] = 1;
  *(_DWORD *)&v160[16] = v84;
  *(_DWORD *)&v160[20] = v84;
  v162 = v163;
  if ((int)v84 >= 1)
  {
    v133 = 0;
    v134 = v215;
    do
    {
      *((_DWORD *)v163 + *(int *)&v134[4 * v133]) = v133;
      ++v133;
    }
    while (v84 != v133);
  }
  sub_18D1D5654((uint64_t)v1 + 15032, v84, (uint64_t)v160);
LABEL_128:
  LOWORD(v182) = 12;
  LOBYTE(v217) = 2;
  *(_OWORD *)v160 = *((_OWORD *)v1 + 5);
  v135 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v1 + 2488, (uint64_t)v160, "Resetting estimator oscillator states.");
  if (*((char *)v1 + 2511) >= 0)
    LOBYTE(v141) = v135;
  else
    v141 = *((_QWORD *)v1 + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v182, (unsigned __int8 *)&v217, "%s", v136, v137, v138, v139, v140, v141);
}

void sub_18D1A035C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF230E8);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPNTEstimator::UpdateClockOffsetEstimateIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  double v6;
  double v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int16 v28;
  unsigned __int8 v29;
  __int16 v30;

  if (*(_BYTE *)(a2 + 8))
    v5 = *(_BYTE *)(a2 + 24) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(double *)(*(_QWORD *)(a1 + 14648) + 152) * 0.001;
    v7 = round(v6);
    if (fabs(v7) < 2.22044605e-16)
      return 1;
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v28 = 12;
      v27 = 1;
      v8 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a3, "clock offset exceeds 0.5 ms,%.3lf ms", v6);
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v14) = v8;
      else
        v14 = *(_QWORD *)(a1 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v9, v10, v11, v12, v13, v14);
    }
    v15 = v7 * -0.001;
    v16 = a1;
  }
  else
  {
    v17 = *(double *)(a2 + 16);
    if (vabdd_f64(*(double *)a2, v17) < 2.22044605e-16)
      return 1;
    v19 = *(double *)a2 - v17;
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v30 = 12;
      v29 = 1;
      v20 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a3, "clock jump detected");
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v26) = v20;
      else
        v26 = *(_QWORD *)(a1 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v21, v22, v23, v24, v25, v26);
    }
    v16 = a1;
    v15 = v19;
  }
  return raven::RavenPNTEstimator::AdjustClockOffset(v16, a3, v15);
}

uint64_t sub_18D1A05C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000054;
  *(_QWORD *)a1 = &off_1E25C8240;
  *(_OWORD *)(a1 + 8) = xmmword_18D3199C0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D1CD0EC(a2, a3, a1);
}

void sub_18D1A0620(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1A0634(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x10000001CLL;
  *(_QWORD *)a1 = &off_1E25C72E0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D1A068C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1A06A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000038;
  *(_QWORD *)a1 = &off_1E25C8060;
  *(_OWORD *)(a1 + 8) = xmmword_18D3199D0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D1CD0EC(a2, a3, a1);
}

void sub_18D1A06F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1A070C(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1A0720(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1A0734(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1A0748(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1A075C(_QWORD *result)
{
  result[34] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1A0780(_QWORD *a1)
{
  uint64_t v2;

  a1[26] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C7370;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D1A07F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v5;
  int32x4_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BYTE *v12;
  int v13;
  int v14;
  int i;
  int32x2_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE v21[265];
  void *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[64];
  void *v27;
  __int128 v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE v31[512];
  void *v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE v36[72];

  v5.i32[1] = 1;
  v5.i32[0] = *(_DWORD *)(a2 + 16);
  v16 = v5;
  sub_18D054198((uint64_t)&v27, a2);
  v6 = vdupq_lane_s32(v16, 0);
  v6.i32[1] = 1;
  v28 = (__int128)v6;
  sub_18D053AA8(a1 + 8, (uint64_t)&v27);
  v19 = 0x800000008;
  v17 = &unk_1E25C87E0;
  v18 = xmmword_18D319930;
  v20 = v21;
  LOBYTE(v27) = 0;
  sub_18D05C654(a3, (uint64_t)&v17, (BOOL *)&v27);
  v29 = 0x800000008;
  v27 = &unk_1E25C87E0;
  v28 = xmmword_18D319930;
  v30 = v31;
  v34 = 0x100000008;
  v32 = &unk_1E25C86F0;
  v33 = xmmword_18D319940;
  v35 = v36;
  v24 = 0x100000020;
  v22 = &unk_1E25C7670;
  v23 = xmmword_18D319960;
  v25 = v26;
  sub_18D04F504((uint64_t)&v17, (uint64_t)&v32, (uint64_t)&v22, (uint64_t)&v27);
  v7 = DWORD1(v28);
  v8 = v28;
  v24 = 0x800000008;
  v22 = &unk_1E25C87E0;
  v25 = v26;
  *(_QWORD *)&v23 = __PAIR64__(v28, DWORD1(v28));
  DWORD2(v23) = v28 * DWORD1(v28);
  HIDWORD(v23) = DWORD1(v28);
  if (DWORD1(v28))
  {
    v9 = 0;
    v10 = 0;
    v11 = HIDWORD(v28);
    v12 = v30;
    do
    {
      v13 = v9;
      v14 = v10;
      for (i = v8; i; --i)
      {
        v26[v14] = *(_QWORD *)&v12[8 * v13];
        v14 += v7;
        ++v13;
      }
      ++v10;
      v9 += v11;
    }
    while (v10 != v7);
  }
  v34 = 0x100000008;
  v32 = &unk_1E25C86C0;
  v33 = xmmword_18D319940;
  v35 = v36;
  v29 = 0x800000008;
  v27 = &unk_1E25C87E0;
  v28 = xmmword_18D319930;
  v30 = v31;
  v19 = 0x800000008;
  v17 = &unk_1E25C87E0;
  v18 = xmmword_18D319930;
  v20 = v21;
  sub_18D05C770((uint64_t)&v22, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)&v17);
  sub_18D053AA8(a1 + 112, (uint64_t)&v17);
  v29 = 0x100000008;
  v27 = &unk_1E25C86C0;
  v28 = xmmword_18D319940;
  v30 = v31;
  sub_18D053B2C(a1 + 112, a1 + 8, (uint64_t)&v27);
  sub_18D053AA8(a1 + 664, (uint64_t)&v27);
  sub_18D053AA8(a1 + 768, a1 + 8);
  sub_18D053AA8(a1 + 872, a1 + 112);
  sub_18D053AA8(a1 + 1424, a1 + 664);
  *(_QWORD *)(a1 + 1528) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1540) = 1;
}

_QWORD *sub_18D1A0AB0(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1A0AC4(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

double sub_18D1A0AD8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000008;
  *(_QWORD *)a2 = &unk_1E25C86C0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319940;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540))
    v2 = a1 + 768;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

_QWORD *sub_18D1A0B24(_QWORD *result)
{
  *result = &unk_1E25C5E10;
  return result;
}

_QWORD *sub_18D1A0B38(_QWORD *result)
{
  *result = &unk_1E25C5D50;
  return result;
}

_QWORD *sub_18D1A0B4C(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

BOOL sub_18D1A0B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, __int128 *a7, __int128 *a8)
{
  double v9;
  double v10;
  BOOL v12;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t i;
  _BOOL4 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  void **v48;
  uint64_t v49;
  _QWORD *v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  void **v70;
  uint64_t v71;
  _QWORD *v72;
  void **v73;
  uint64_t v74;
  _QWORD *v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  unsigned int v98;
  unsigned int v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  unsigned int v107;
  _OWORD *v108;
  unsigned int v109;
  __int128 v110;
  _OWORD *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  double v125;
  uint64_t v126;
  unsigned __int8 v127;
  void *v128;
  void **v129;
  uint64_t v130;
  unsigned __int8 v131;
  BOOL v132[9];

  v9 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  v10 = fabs(v9);
  v12 = (unint64_t)(*(_QWORD *)&v10 - 0x10000000000000) >> 53 <= 0x3FE
     || (unint64_t)(*(_QWORD *)&v10 - 1) <= 0xFFFFFFFFFFFFELL
     || *(_QWORD *)&v9 == 0;
  if (!v12 || (v129 = 0, v130 = 0, sub_18D03FE4C((double *)a2, (double *)&v129)))
  {
    LOWORD(v129) = 12;
    v132[0] = 4;
    v25 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not initialized; invalid time");
LABEL_11:
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v31) = v25;
    else
      v31 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v129, (unsigned __int8 *)v132, "%s", v26, v27, v28, v29, v30, v31);
    return 0;
  }
  if (!*(_BYTE *)a1)
  {
    LOWORD(v129) = 12;
    v132[0] = 2;
    v25 = cnprint::CNLogFormatter::FormatWarning(a1 + 208, a2, "#MSR not initialized; not configured",
            v20,
            v21,
            v22,
            v23,
            v24,
            v126);
    goto LABEL_11;
  }
  v35 = *(_DWORD *)(a3 + 8);
  v34 = *(_DWORD *)(a3 + 12);
  if (v35 <= v34)
    v36 = *(_DWORD *)(a3 + 12);
  else
    v36 = *(_DWORD *)(a3 + 8);
  if (!v35 || !v34 || v36 != 8)
  {
    LOWORD(v129) = 12;
    v132[0] = 4;
    v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; state vector has incorrect size,nx,%u");
    goto LABEL_11;
  }
  if (*(_QWORD *)(a4 + 8) != 0x800000008)
  {
    LOWORD(v129) = 12;
    v132[0] = 4;
    v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; state covariance has incorrect size,rows,%u,cols,%u");
    goto LABEL_11;
  }
  for (i = 0; i != 8; ++i)
  {
    if ((*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8 * i) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v129) = 12;
      v132[0] = 4;
      v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; infinite value at index,%d");
      goto LABEL_11;
    }
  }
  v38 = *(_BYTE *)(a1 + 2192) == 0;
  if (!*(_BYTE *)(a1 + 2192))
  {
    v39 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 2096) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 2112) = v39;
    v40 = *(_OWORD *)(a2 + 32);
    v41 = *(_OWORD *)(a2 + 48);
    v42 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 2160) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 2176) = v42;
    *(_OWORD *)(a1 + 2128) = v40;
    *(_OWORD *)(a1 + 2144) = v41;
    *(_BYTE *)(a1 + 2192) = 1;
  }
  if (!*(_BYTE *)(a1 + 2304))
  {
    sub_18D1CE994(a1 + 2200, a3);
    v38 = 1;
  }
  v43 = a1 + 2312;
  if (*(_BYTE *)(a1 + 2416))
    sub_18D1CE994(v43, a1 + 256);
  else
    sub_18D1CE994(v43, a3);
  raven::RavenSequentialGNSSMeasurementSelector::ResetEpochSpecificMembers((raven::RavenSequentialGNSSMeasurementSelector *)a1);
  if (v38)
  {
    v44 = (uint64_t *)(a1 + 1512);
    sub_18D0778AC(&v129, "\n");
    if ((v131 & 0x80u) == 0)
      v45 = (void **)&v129;
    else
      v45 = v129;
    if ((v131 & 0x80u) == 0)
      v46 = v131;
    else
      v46 = v130;
    v47 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)v45, v46);
    if ((v131 & 0x80u) == 0)
      v48 = (void **)&v129;
    else
      v48 = v129;
    if ((v131 & 0x80u) == 0)
      v49 = v131;
    else
      v49 = v130;
    v50 = sub_18D076A18(v47, (uint64_t)v48, v49);
    if ((v131 & 0x80u) == 0)
      v51 = (void **)&v129;
    else
      v51 = v129;
    if ((v131 & 0x80u) == 0)
      v52 = v131;
    else
      v52 = v130;
    sub_18D076A18(v50, (uint64_t)v51, v52);
    sub_18D1CE9D8((_QWORD *)(a1 + 1512));
    v53 = *v44;
    *(uint64_t *)((char *)v44 + *(_QWORD *)(*v44 - 24) + 16) = 3;
    *(uint64_t *)((char *)v44 + *(_QWORD *)(v53 - 24) + 24) = 27;
    v54 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)"Configured Start Time    : ", 27);
    *(_QWORD *)((char *)v54 + *(_QWORD *)(*v54 - 24) + 24) = 15;
    if (!*(_BYTE *)(a1 + 2192))
      sub_18D164CA0();
    v55 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v55 + *(_QWORD *)(*v55 - 24) + 24) = 15;
    if (!*(_BYTE *)(a1 + 2192))
      sub_18D164CA0();
    v56 = (_QWORD *)std::ostream::operator<<();
    if ((v131 & 0x80u) == 0)
      v57 = (void **)&v129;
    else
      v57 = v129;
    if ((v131 & 0x80u) == 0)
      v58 = v131;
    else
      v58 = v130;
    v59 = sub_18D076A18(v56, (uint64_t)v57, v58);
    if ((v131 & 0x80u) == 0)
      v60 = (void **)&v129;
    else
      v60 = v129;
    if ((v131 & 0x80u) == 0)
      v61 = v131;
    else
      v61 = v130;
    sub_18D076A18(v59, (uint64_t)v60, v61);
    v62 = *v44;
    *(uint64_t *)((char *)v44 + *(_QWORD *)(*v44 - 24) + 16) = 3;
    *(uint64_t *)((char *)v44 + *(_QWORD *)(v62 - 24) + 24) = 27;
    v63 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)"Start PVT XYZ [m or m/s] : ", 27);
    *(_QWORD *)((char *)v63 + *(_QWORD *)(*v63 - 24) + 24) = 15;
    if (!*(_BYTE *)(a1 + 2304))
      sub_18D164CA0();
    v64 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v64 + *(_QWORD *)(*v64 - 24) + 24) = 15;
    if (!*(_BYTE *)(a1 + 2304))
      sub_18D164CA0();
    v65 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v65 + *(_QWORD *)(*v65 - 24) + 24) = 15;
    if (!*(_BYTE *)(a1 + 2304))
      sub_18D164CA0();
    v66 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v66 + *(_QWORD *)(*v66 - 24) + 24) = 15;
    if (!*(_BYTE *)(a1 + 2304))
      sub_18D164CA0();
    v67 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v67 + *(_QWORD *)(*v67 - 24) + 24) = 15;
    if (!*(_BYTE *)(a1 + 2304))
      sub_18D164CA0();
    v68 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v68 + *(_QWORD *)(*v68 - 24) + 24) = 15;
    if (!*(_BYTE *)(a1 + 2304))
      sub_18D164CA0();
    v69 = (_QWORD *)std::ostream::operator<<();
    if ((v131 & 0x80u) == 0)
      v70 = (void **)&v129;
    else
      v70 = v129;
    if ((v131 & 0x80u) == 0)
      v71 = v131;
    else
      v71 = v130;
    v72 = sub_18D076A18(v69, (uint64_t)v70, v71);
    if ((v131 & 0x80u) == 0)
      v73 = (void **)&v129;
    else
      v73 = v129;
    if ((v131 & 0x80u) == 0)
      v74 = v131;
    else
      v74 = v130;
    v75 = sub_18D076A18(v72, (uint64_t)v73, v74);
    if ((v131 & 0x80u) == 0)
      v76 = (void **)&v129;
    else
      v76 = v129;
    if ((v131 & 0x80u) == 0)
      v77 = v131;
    else
      v77 = v130;
    sub_18D076A18(v75, (uint64_t)v76, v77);
    if ((char)v131 < 0)
      operator delete(v129);
  }
  sub_18D053AA8(a1 + 360, a4);
  v78 = 0;
  v79 = *(int *)(a1 + 380);
  v80 = *(_QWORD *)(a1 + 392);
  v81 = v79 + 1;
  v82 = 8 * v79;
  v83 = v80;
  while (2)
  {
    v84 = 0;
    v85 = 0;
    do
    {
      v86 = *(double *)(v83 + v84);
      if ((*(_QWORD *)&v86 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_110:
        LOWORD(v129) = 12;
        v132[0] = 4;
        v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; infinite input covariance,i,%u,j,%u");
        goto LABEL_11;
      }
      if (!v85 && *(double *)(v80 + 8 * v81 * (int)v78) <= 0.0)
      {
        LOWORD(v129) = 12;
        v132[0] = 4;
        v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; non-positive variance,i,%u");
        goto LABEL_11;
      }
      v87 = *(double *)(v83 + 8 * v85);
      if ((*(_QWORD *)&v87 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_110;
      if (vabdd_f64(v86, v87) > 0.000000015)
      {
        LOWORD(v129) = 12;
        v132[0] = 4;
        v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; covariance not symmetric,i,%u,j,%u,Pij,%.3e,Pji,%.3e");
        goto LABEL_11;
      }
      v88 = (v86 + v87) * 0.5;
      *(double *)(v83 + v84) = v88;
      *(double *)(v83 + 8 * v85++) = v88;
      v84 += v82;
    }
    while (v78 + v85 != 8);
    ++v78;
    v83 += v82 + 8;
    if (v78 != 8)
      continue;
    break;
  }
  v132[0] = 0;
  sub_18D1CEEAC(a1 + 360, v132, (uint64_t)&v128);
  v128 = &unk_1E25C5E70;
  v32 = v132[0];
  if (!v132[0])
  {
    LOWORD(v129) = 12;
    v127 = 4;
    v112 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; covariance not positive definite");
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v118) = v112;
    else
      v118 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v129, &v127, "%s", v113, v114, v115, v116, v117, v118);
    return v32;
  }
  v89 = *a6;
  *(_BYTE *)(a1 + 1016) = v89;
  v90 = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 1040) = *((_OWORD *)a5 + 1);
  *(_OWORD *)(a1 + 1024) = v90;
  v91 = *((_OWORD *)a5 + 2);
  v92 = *((_OWORD *)a5 + 3);
  v93 = *((_OWORD *)a5 + 4);
  *(_QWORD *)(a1 + 1104) = *((_QWORD *)a5 + 10);
  *(_OWORD *)(a1 + 1088) = v93;
  *(_OWORD *)(a1 + 1072) = v92;
  *(_OWORD *)(a1 + 1056) = v91;
  v94 = *a7;
  v95 = a7[1];
  *(_QWORD *)(a1 + 1144) = *((_QWORD *)a7 + 4);
  *(_OWORD *)(a1 + 1112) = v94;
  *(_OWORD *)(a1 + 1128) = v95;
  v96 = *a8;
  v97 = a8[1];
  *(_QWORD *)(a1 + 1184) = *((_QWORD *)a8 + 4);
  *(_OWORD *)(a1 + 1168) = v97;
  *(_OWORD *)(a1 + 1152) = v96;
  if ((v89 - 3) > 1 || (v98 = *(unsigned __int8 *)(a1 + 1024), v98 > 9))
    LOBYTE(v99) = 0;
  else
    v99 = (0xCu >> v98) & 1;
  *(_BYTE *)(a1 + 1272) = v99;
  v100 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 112) = v100;
  v101 = *(_OWORD *)(a2 + 32);
  v102 = *(_OWORD *)(a2 + 48);
  v103 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 176) = v103;
  *(_OWORD *)(a1 + 128) = v101;
  *(_OWORD *)(a1 + 144) = v102;
  sub_18D053AA8(a1 + 256, a3);
  v104 = *(_QWORD *)(a1 + 192);
  v105 = *(_OWORD *)(v104 + 1656);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(v104 + 1672);
  *(_OWORD *)(a1 + 1312) = v105;
  v106 = *(_OWORD *)(v104 + 1688);
  *(_OWORD *)(a1 + 1296) = *(_OWORD *)(v104 + 1704);
  *(_OWORD *)(a1 + 1280) = v106;
  v107 = *a6;
  if (v107 > 6)
    goto LABEL_138;
  v108 = (_OWORD *)(a1 + 1312);
  if (((1 << v107) & 0x26) != 0)
  {
    v109 = *a5;
    if (v109 - 2 < 2 || v109 == 6)
    {
      v120 = *(_OWORD *)(v104 + 1800);
      *v108 = *(_OWORD *)(v104 + 1784);
      *(_OWORD *)(a1 + 1328) = v120;
      v111 = (_OWORD *)(v104 + 1816);
    }
    else
    {
      if (v109 != 5)
        goto LABEL_139;
      v119 = *(_OWORD *)(v104 + 1736);
      *v108 = *(_OWORD *)(v104 + 1720);
      *(_OWORD *)(a1 + 1328) = v119;
      v111 = (_OWORD *)(v104 + 1752);
    }
    goto LABEL_137;
  }
  if (((1 << v107) & 0x18) != 0)
  {
    v109 = *a5;
    if (v109 - 2 < 2 || v109 == 6)
    {
      v122 = *(_OWORD *)(v104 + 1928);
      *v108 = *(_OWORD *)(v104 + 1912);
      *(_OWORD *)(a1 + 1328) = v122;
      v111 = (_OWORD *)(v104 + 1944);
    }
    else
    {
      if (v109 != 5)
        goto LABEL_139;
      v110 = *(_OWORD *)(v104 + 1864);
      *v108 = *(_OWORD *)(v104 + 1848);
      *(_OWORD *)(a1 + 1328) = v110;
      v111 = (_OWORD *)(v104 + 1880);
    }
LABEL_137:
    v124 = v111[1];
    *(_OWORD *)(a1 + 1280) = *v111;
    *(_OWORD *)(a1 + 1296) = v124;
    goto LABEL_138;
  }
  if (v107 == 6)
  {
    v109 = *a5;
    if (v109 - 2 < 2 || v109 == 6)
    {
      v123 = *(_OWORD *)(v104 + 2056);
      *v108 = *(_OWORD *)(v104 + 2040);
      *(_OWORD *)(a1 + 1328) = v123;
      v111 = (_OWORD *)(v104 + 2072);
    }
    else
    {
      if (v109 != 5)
        goto LABEL_139;
      v121 = *(_OWORD *)(v104 + 1992);
      *v108 = *(_OWORD *)(v104 + 1976);
      *(_OWORD *)(a1 + 1328) = v121;
      v111 = (_OWORD *)(v104 + 2008);
    }
    goto LABEL_137;
  }
LABEL_138:
  v109 = *a5;
LABEL_139:
  if (v109 <= 6 && ((1 << v109) & 0x4C) != 0)
    v125 = *(double *)(v104 + 2184);
  else
    v125 = *(double *)(v104 + 2176);
  *(double *)(a1 + 1192) = v125 * v125;
  *(_BYTE *)(a1 + 40) = (((_BYTE)v109 - 4) & 0xFA) == 0;
  *(_BYTE *)(a1 + 1) = 1;
  return v32;
}

void sub_18D1A1500(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 - 97) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_18D1A1544@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  int i;
  __n128 result;
  void *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[33];
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v21 = 0x800000008;
  v19 = &unk_1E25C87E0;
  v20 = xmmword_18D319930;
  v22 = &v23;
  if (*(_DWORD *)(a1 + 1540))
    v3 = a1 + 872;
  else
    v3 = a1 + 112;
  v16 = 0x800000008;
  v14 = &unk_1E25C87E0;
  v15 = xmmword_18D319930;
  v17 = v18;
  v31 = 0x100000008;
  v29 = &unk_1E25C86F0;
  v30 = xmmword_18D319940;
  v32 = &v33;
  v26 = 0x100000020;
  v24 = &unk_1E25C7670;
  v25 = xmmword_18D319960;
  v27 = &v28;
  sub_18D04F504(v3, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v14);
  sub_18D053AA8((uint64_t)&v19, (uint64_t)&v14);
  v4 = DWORD1(v20);
  v5 = v20;
  v16 = 0x800000008;
  v14 = &unk_1E25C87E0;
  v17 = v18;
  *(_QWORD *)&v15 = __PAIR64__(v20, DWORD1(v20));
  DWORD2(v15) = v20 * DWORD1(v20);
  HIDWORD(v15) = DWORD1(v20);
  if (DWORD1(v20))
  {
    v6 = 0;
    v7 = 0;
    v8 = HIDWORD(v20);
    v9 = v22;
    do
    {
      v10 = v6;
      v11 = v7;
      for (i = v5; i; --i)
      {
        v18[v11] = v9[v10];
        v11 += v4;
        ++v10;
      }
      ++v7;
      v6 += v8;
    }
    while (v7 != v4);
  }
  *(_QWORD *)(a2 + 24) = 0x800000008;
  *(_QWORD *)a2 = &unk_1E25C87E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319930;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_18D053B2C((uint64_t)&v19, (uint64_t)&v14, a2);
  return result;
}

void sub_18D1A16FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1A1710(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25B91D0;
  *(_QWORD *)(a1 + 2408) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 2304) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 1752) = &unk_1E25C5E70;
  return sub_18D1C50CC(a1);
}

double sub_18D1A1738(uint64_t a1, int a2, __int128 *a3)
{
  void **v4;
  double result;
  int v6;
  __int128 v7;
  uint64_t v8;

  v6 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_18D077798(&v7, *(void **)a3, *((_QWORD *)a3 + 1));
    a2 = v6;
  }
  else
  {
    v7 = *a3;
    v8 = *((_QWORD *)a3 + 2);
  }
  *(_DWORD *)(a1 + 8) = a2;
  v4 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v4);
  result = *(double *)&v7;
  *(_OWORD *)v4 = v7;
  *(_QWORD *)(a1 + 32) = v8;
  return result;
}

uint64_t sub_18D1A17C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18D1A17CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  double v20;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int8x16_t v46;
  cnprint::CNPrinter *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  cnprint::CNPrinter *v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  double *v71;
  double *v72;
  double *v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t (**v81)();
  __int128 v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  float64x2_t v89;
  __int128 v90;
  __int128 v91;
  double v92;
  void *v93;
  void *v94;
  __int128 v95;
  uint64_t v96;
  int64x2_t v97;
  int64x2_t v98[12];
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  uint64_t v121;
  void *v122;
  __int128 v123;
  uint64_t v124;
  double *v125;
  uint64_t v126;
  void *v127;
  __int128 v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  unsigned __int8 v132[264];
  __int128 v133;
  __int128 v134;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 26;
  if (!v13
    || ((v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (v17 = *(_DWORD *)(a2 + 12))
      : (v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (v18 = v16 == 0) : (v18 = 1),
        !v18 ? (v19 = v17 == 1) : (v19 = 0),
        !v19))
  {
    v97.i16[0] = 12;
    v132[0] = 4;
    v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v97, v132, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v20));
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)(a3 + 512))
  {
    v97.i16[0] = 12;
    v132[0] = 4;
    v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a3 + 128))
  {
    v97.i16[0] = 12;
    v132[0] = 4;
    v33 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v97, v132, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v33));
    v97.i16[0] = 12;
    v132[0] = 4;
    v34 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18D181C54(a3 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v97, v132, "t,%.3lf,%s,TAI time invalid", v35, v36, v37, v38, v39, SLOBYTE(v34));
    return 0xFFFFFFFFLL;
  }
  v134 = *(_OWORD *)(a3 + 40);
  v133 = *(_OWORD *)*(_QWORD *)(a3 + 520);
  sub_18D1D6E1C((uint64_t)v132, *(_QWORD *)(a3 + 528));
  v26 = **(unsigned __int8 **)(a3 + 536);
  v27 = *(_QWORD *)(a3 + 512);
  v129 = 0x10000001CLL;
  v127 = &unk_1E25C72B0;
  v128 = xmmword_18D319780;
  v130 = &v131;
  if (sub_18D1D0D6C((uint64_t)&v134, &v133, (uint64_t)v132, v27, *(_QWORD *)(a3 + 544), v26, 1, 1, (uint64_t)&v127))
  {
    v97.i16[0] = 12;
    LOBYTE(v122) = 4;
    v78 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v97, (unsigned __int8 *)&v122, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v78));
    return 0xFFFFFFFFLL;
  }
  v128 = xmmword_18D319780;
  v124 = 0x10000001CLL;
  v122 = &unk_1E25C72B0;
  v123 = xmmword_18D319780;
  v125 = (double *)&v126;
  v97 = vdupq_n_s64(0x7FF8000000000000uLL);
  v98[0] = v97;
  v98[1] = v97;
  v98[2] = v97;
  v98[3] = v97;
  v98[4] = v97;
  v98[5] = v97;
  v98[6] = v97;
  v98[7] = v97;
  v98[8] = v97;
  v98[9] = v97;
  v98[10] = v97;
  v98[11] = v97;
  v99 = v97;
  v100 = v97;
  v101 = v97;
  v102 = v97;
  v103 = v97;
  v104 = v97;
  v105 = v97;
  v106 = v97;
  v107 = v97;
  v108 = v97;
  v109 = v97;
  v110 = v97;
  v111 = v97;
  v112 = v97;
  v113 = v97;
  v114 = v97;
  v115 = v97;
  v116 = v97;
  v117 = v97;
  v118 = v97;
  v119 = v97;
  v120 = v97;
  v121 = 0x7FF8000000000000;
  LOBYTE(v81) = 0;
  if (sub_18D1C9BF4((uint64_t)&v127, a1, 0, 1, 1, (uint64_t)&v122, (uint64_t)&v97, (BOOL *)&v81, 0.000000015))
  {
    LOWORD(v81) = 12;
    LOBYTE(v89.f64[0]) = 4;
    v79 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v89, "time,%.3lf,h-function failure on line %d: %s() %s", v40, v41, v42, v43, v44, SLOBYTE(v79));
    return 0xFFFFFFFFLL;
  }
  v95 = *(_OWORD *)v125;
  v96 = *((_QWORD *)v125 + 2);
  v94 = &unk_1E25B97E0;
  v92 = 0.0;
  v93 = &unk_1E25B9818;
  *(double *)&v45 = v125[19] * 0.000001;
  v90 = 0u;
  v91 = 0u;
  v88 = *(_OWORD *)(a3 + 136);
  v46.i64[1] = *((_QWORD *)&v88 + 1);
  v89 = 0u;
  v46.i64[0] = *(_QWORD *)(a3 + 192);
  LOWORD(v81) = 0;
  v82 = 0u;
  v83 = 0u;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v47 = (cnprint::CNPrinter *)cnnavigation::GNSSPseudorange((uint64_t)&v88, (uint64_t)&v81, (uint64_t)&v95, a3 + 296, (uint64_t *)&v94, (uint64_t *)&v93, &v92, 1, v46, (int8x16_t)v45, &v89);
  if ((_DWORD)v47)
  {
    sub_18D1C741C(a3 + 40, (uint64_t)"could not compute expected measurement", (uint64_t)"h_GnssPsr_RavenPNT", 5706, v48, v49, v50, v51);
    if (cnprint::CNPrinter::GetLogLevel(v52) <= 1)
    {
      LOWORD(v81) = 12;
      LOBYTE(v88) = 1;
      v54 = *(_QWORD *)(a3 + 88);
      v53 = *(double *)(a3 + 96);
      sub_18D181C54(a3 + 56);
      v80 = v53 + (double)v54;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v88, "t,%.3lf,%s,GNSSPseudorange returned != 0", v55, v56, v57, v58, v59, SLOBYTE(v80));
    }
    return 0xFFFFFFFFLL;
  }
  if (cnprint::CNPrinter::GetLogLevel(v47))
  {
    v60 = v92;
  }
  else
  {
    LOWORD(v81) = 12;
    LOBYTE(v88) = 0;
    v62 = *(_QWORD *)(a3 + 88);
    v61 = *(double *)(a3 + 96);
    sub_18D181C54(a3 + 56);
    v63 = v61 + (double)v62;
    v60 = v92;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v88, "t,%.3lf,%s,using PSR,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v64, v65, v66, v67, v68, SLOBYTE(v63));
  }
  *(_QWORD *)&v69 = 0x100000001;
  *((_QWORD *)&v69 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v69;
  *(_QWORD *)&v83 = 0x1A00000001;
  v81 = &off_1E25C6B30;
  *((_QWORD *)&v83 + 1) = &v84;
  v82 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v81, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v81);
  v70 = *(_QWORD *)(a3 + 552);
  if (v70)
  {
    v71 = (double *)v98;
    **(double **)(a4 + 32) = v60 + *(double *)v70 + **(double **)(a2 + 32);
    v72 = *(double **)(v70 + 40);
    v73 = *(double **)(a5 + 32);
    *v73 = *v72 * *(double *)v97.i64;
    v76 = *(int *)(v70 + 28);
    v74 = *(int *)(a5 + 20);
    v73[v74] = v72[v76] * *(double *)&v97.i64[1];
    v75 = v72[2 * v76];
    LODWORD(v76) = v74;
  }
  else
  {
    **(double **)(a4 + 32) = v60 + **(double **)(a2 + 32);
    v77 = *((double *)&v90 + 1);
    v73 = *(double **)(a5 + 32);
    *v73 = *(double *)v97.i64 * *(double *)&v90;
    v76 = *(int *)(a5 + 20);
    v73[v76] = *(double *)&v97.i64[1] * v77;
    v75 = *(double *)v98[0].i64;
    v71 = (double *)&v91;
  }
  v73[2 * (int)v76] = v75 * *v71;
  v73[18 * (int)v76] = *(double *)&v99.i64[1] * *((double *)&v91 + 1) * 0.000001;
  sub_18D1CC610(1u, 1u, (uint64_t)&v81);
  sub_18D053AA8(a6, (uint64_t)&v81);
  return 0;
}

uint64_t sub_18D1A1E48(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D1CF20C((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D1A17CC;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B3F30, &std::__any_imp::__unique_typeinfo<raven::h_GnssPsrArgs_RavenPNT<double>>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D1A2248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1A2274(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25C2FF8;
  sub_18D07C868(a1 + 552);
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D1A2308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  double v20;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  double v46;
  int8x16_t v47;
  cnprint::CNPrinter *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  cnprint::CNPrinter *v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  double v71;
  double *v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t (**v81)();
  __int128 v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v94;
  void *v95;
  void *v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  uint64_t v136;
  void *v137;
  __int128 v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  void *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  unsigned __int8 v147[264];
  __int128 v148;
  __int128 v149;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 26;
  if (!v13
    || ((v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (v17 = *(_DWORD *)(a2 + 12))
      : (v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (v18 = v16 == 0) : (v18 = 1),
        !v18 ? (v19 = v17 == 1) : (v19 = 0),
        !v19))
  {
    v101.i16[0] = 12;
    v147[0] = 4;
    v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, v147, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v20));
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)(a3 + 512))
  {
    v101.i16[0] = 12;
    v147[0] = 4;
    v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a3 + 128))
  {
    v101.i16[0] = 12;
    v147[0] = 4;
    v33 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, v147, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v33));
    v101.i16[0] = 12;
    v147[0] = 4;
    v34 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18D181C54(a3 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, v147, "t,%.3lf,%s,TAI time invalid", v35, v36, v37, v38, v39, SLOBYTE(v34));
    return 0xFFFFFFFFLL;
  }
  v149 = *(_OWORD *)(a3 + 40);
  v148 = *(_OWORD *)*(_QWORD *)(a3 + 520);
  sub_18D1D6E1C((uint64_t)v147, *(_QWORD *)(a3 + 528));
  v26 = **(unsigned __int8 **)(a3 + 536);
  v27 = *(_QWORD *)(a3 + 512);
  v144 = 0x10000001CLL;
  v142 = &unk_1E25C72B0;
  v143 = xmmword_18D319780;
  v145 = &v146;
  if (sub_18D1D0D6C((uint64_t)&v149, &v148, (uint64_t)v147, v27, *(_QWORD *)(a3 + 544), v26, 1, 1, (uint64_t)&v142))
  {
    v101.i16[0] = 12;
    LOBYTE(v137) = 4;
    v77 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, (unsigned __int8 *)&v137, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v77));
    return 0xFFFFFFFFLL;
  }
  v143 = xmmword_18D319780;
  v139 = 0x10000001CLL;
  v137 = &unk_1E25C72B0;
  v138 = xmmword_18D319780;
  v140 = &v141;
  v101 = vdupq_n_s64(0x7FF8000000000000uLL);
  v102 = v101;
  v103 = v101;
  v104 = v101;
  v105 = v101;
  v106 = v101;
  v107 = v101;
  v108 = v101;
  v109 = v101;
  v110 = v101;
  v111 = v101;
  v112 = v101;
  v113 = v101;
  v114 = v101;
  v115 = v101;
  v116 = v101;
  v117 = v101;
  v118 = v101;
  v119 = v101;
  v120 = v101;
  v121 = v101;
  v122 = v101;
  v123 = v101;
  v124 = v101;
  v125 = v101;
  v126 = v101;
  v127 = v101;
  v128 = v101;
  v129 = v101;
  v130 = v101;
  v131 = v101;
  v132 = v101;
  v133 = v101;
  v134 = v101;
  v135 = v101;
  v136 = 0x7FF8000000000000;
  LOBYTE(v81) = 0;
  if (sub_18D1C9BF4((uint64_t)&v142, a1, 0, 1, 1, (uint64_t)&v137, (uint64_t)&v101, (BOOL *)&v81, 0.000000015))
  {
    LOWORD(v81) = 12;
    LOBYTE(v89) = 4;
    v78 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v89, "time,%.3lf,h-function failure on line %d: %s() %s", v40, v41, v42, v43, v44, SLOBYTE(v78));
    return 0xFFFFFFFFLL;
  }
  v99 = *(_OWORD *)v140;
  v100 = v140[2];
  v97 = *(_OWORD *)(v140 + 3);
  v98 = v140[5];
  v96 = &unk_1E25B97E0;
  v94 = 0.0;
  v95 = &unk_1E25B9818;
  v46 = *((double *)v140 + 20);
  *(double *)v45.i64 = *((double *)v140 + 19) / 1000000.0;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = *(_OWORD *)(a3 + 136);
  v47.i64[1] = *((_QWORD *)&v88 + 1);
  v89 = 0u;
  v47.i64[0] = *(_QWORD *)(a3 + 192);
  LOWORD(v81) = 0;
  v82 = 0u;
  v83 = 0u;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v48 = (cnprint::CNPrinter *)cnnavigation::GNSSDopplerShift((uint64_t)&v88, (const cnnavigation::GNSSUTCParameters *)&v81, (uint64_t)&v99, (double *)&v97, a3 + 296, (uint64_t *)&v96, (uint64_t *)&v95, 1, v47, v45, v46 / 1000000.0, &v94, 1u, (uint64_t)&v89);
  if ((_DWORD)v48)
  {
    sub_18D1C741C(a3 + 40, (uint64_t)"could not compute expected measurement", (uint64_t)"h_GnssDoppler_RavenPNT", 5536, v49, v50, v51, v52);
    if (cnprint::CNPrinter::GetLogLevel(v53) <= 1)
    {
      LOWORD(v81) = 12;
      LOBYTE(v88) = 1;
      v55 = *(_QWORD *)(a3 + 88);
      v54 = *(double *)(a3 + 96);
      sub_18D181C54(a3 + 56);
      v79 = v54 + (double)v55;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v88, "t,%.3lf,%s,GNSSDopplerShift returned != 0", v56, v57, v58, v59, v60, SLOBYTE(v79));
    }
    return 0xFFFFFFFFLL;
  }
  v61 = -299792458.0 / *(double *)(a3 + 192);
  v62 = v94 * v61;
  if (!cnprint::CNPrinter::GetLogLevel(v48))
  {
    LOWORD(v81) = 12;
    LOBYTE(v88) = 0;
    v64 = *(_QWORD *)(a3 + 88);
    v63 = *(double *)(a3 + 96);
    sub_18D181C54(a3 + 56);
    v80 = v63 + (double)v64;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v88, "t,%.3lf,%s,using Doppler,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,clockDriftMps,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v65, v66, v67, v68, v69, SLOBYTE(v80));
  }
  *(_QWORD *)&v70 = 0x100000001;
  *((_QWORD *)&v70 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v70;
  **(double **)(a4 + 32) = v62 + **(double **)(a2 + 32);
  *(_QWORD *)&v83 = 0x1A00000001;
  v81 = &off_1E25C6B30;
  *((_QWORD *)&v83 + 1) = &v84;
  v82 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v81, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v81);
  v71 = *((double *)&v90 + 1);
  v72 = *(double **)(a5 + 32);
  *v72 = v61 * (*(double *)v101.i64 * *(double *)&v90);
  v73 = *(int *)(a5 + 20);
  v72[v73] = v61 * (*(double *)&v101.i64[1] * v71);
  v74 = *((double *)&v91 + 1);
  v72[2 * v73] = v61 * (*(double *)v102.i64 * *(double *)&v91);
  v72[3 * (int)v73] = v61 * (*(double *)&v102.i64[1] * v74);
  v75 = *((double *)&v92 + 1);
  v72[4 * v73] = v61 * (*(double *)v103.i64 * *(double *)&v92);
  v72[5 * (int)v73] = v61 * (*(double *)&v103.i64[1] * v75);
  v76 = *((double *)&v93 + 1);
  v72[18 * (int)v73] = v61 * (*(double *)&v114.i64[1] * *(double *)&v93) / 1000000.0;
  v72[19 * (int)v73] = v61 * (*(double *)v115.i64 * v76) / 1000000.0;
  sub_18D1CC610(1u, 1u, (uint64_t)&v81);
  sub_18D053AA8(a6, (uint64_t)&v81);
  return 0;
}

uint64_t sub_18D1A29C4(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D1CF778((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D1A2308;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4208, &std::__any_imp::__unique_typeinfo<raven::h_GnssDopplerArgs_RavenPNT<double>>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D1A2DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1A2DF0(uint64_t a1)
{
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D1A2E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  double v22;
  unsigned int v24;
  unsigned int v25;
  int v26;
  double v27;
  double v28;
  unsigned __int8 v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint64_t *v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  cnprint::CNPrinter *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  double v74;
  double *v75;
  double v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  __n128 v82;
  int8x16_t v83;
  uint64_t v84;
  double v85;
  int8x16_t v86;
  int8x16_t v87;
  uint64_t v88;
  uint64_t (***v89)();
  _BYTE *v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t i;
  uint64_t v98;
  _BYTE v99[248];
  _BYTE v100[248];
  uint64_t (**v101)();
  __int128 v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE v105[208];
  uint64_t (**v106)();
  __int128 v107;
  uint64_t v108;
  double *v109;
  uint64_t v110;
  uint64_t (**v111)();
  __int128 v112;
  uint64_t v113;
  double *v114;
  _BYTE v115[208];
  __int128 v116;
  float64x2_t v117;
  __int128 v118;
  __int128 v119;
  double v120;
  __int128 v121;
  float64x2_t v122;
  __int128 v123;
  __int128 v124;
  double v125;
  uint64_t v126;
  uint64_t v127[4];

  v15 = a1;
  v16 = atomic_load((unsigned __int8 *)&qword_1ECF23130);
  if ((v16 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_1ECF23130);
    if ((_DWORD)a1)
    {
      v113 = 0x1300000001;
      v111 = &off_1E25C6830;
      v114 = (double *)v115;
      v112 = xmmword_18D319900;
      for (i = 10; i != 29; ++i)
        *((_DWORD *)&v111 + i) = i - 10;
      sub_18D1B9FA8((uint64_t)&unk_1ECF239E0, (uint64_t)&v111);
      __cxa_atexit((void (*)(void *))sub_18D1BE790, &unk_1ECF239E0, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF23130);
    }
  }
  v17 = *(_DWORD *)(v15 + 8);
  v18 = *(_DWORD *)(v15 + 12);
  if (v17 <= v18)
    v19 = *(_DWORD *)(v15 + 12);
  else
    v19 = *(_DWORD *)(v15 + 8);
  if (v17)
    v20 = v18 == 0;
  else
    v20 = 1;
  v21 = !v20 && v19 == 26;
  if (!v21
    || ((v25 = *(_DWORD *)(a2 + 8), v24 = *(_DWORD *)(a2 + 12), v25 <= v24)
      ? (v26 = *(_DWORD *)(a2 + 12))
      : (v26 = *(_DWORD *)(a2 + 8)),
        !v25 || !v24 || v26 != 1))
  {
    LOWORD(v111) = 12;
    LOBYTE(v106) = 4;
    v22 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_13:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)&v106, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v22));
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)(a3 + 552))
  {
    LOWORD(v111) = 12;
    LOBYTE(v106) = 4;
    v22 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a3 + 512))
  {
    LOWORD(v111) = 12;
    LOBYTE(v106) = 4;
    v22 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a3 + 560))
  {
    LOWORD(v111) = 12;
    LOBYTE(v106) = 4;
    v22 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_13;
  }
  v27 = *(double *)(a3 + 288) - *(double *)(a3 + 280);
  v28 = fabs(v27);
  if (v27 <= 0.0 || *(_QWORD *)&v28 >= 0x7FF0000000000000)
  {
    LOWORD(v111) = 12;
    LOBYTE(v106) = 4;
    v22 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_13;
  }
  v127[0] = v15;
  v127[1] = a3;
  v30 = atomic_load((unsigned __int8 *)&qword_1ECF23138);
  if ((v30 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_1ECF23138);
    if ((_DWORD)a1)
    {
      qword_1ECF23208 = 0;
      dbl_1ECF23210 = 0.05;
      __cxa_guard_release(&qword_1ECF23138);
    }
  }
  v126 = *(_QWORD *)(a3 + 552);
  a10.i64[0] = 3.0;
  v31 = (dbl_1ECF23210 + (double)qword_1ECF23208) * 3.0;
  if (v27 <= v31 && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    LOWORD(v111) = 12;
    LOBYTE(v106) = 1;
    v32 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18D181C54(a3 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)&v106, "t,%.3lf,%s, do not use carrier phase compuatation cache, vendor_meas_interval_sec, %.3lf", v33, v34, v35, v36, v37, SLOBYTE(v32));
  }
  v98 = a3 + 56;
  a9.i64[0] = *(_QWORD *)(a3 + 280);
  *(_QWORD *)&v107 = 0;
  v106 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v106, 0, a9, a10);
  v111 = (uint64_t (**)())CNTimeSpan::operator+(a3 + 88, &v106, v38, v39);
  *(_QWORD *)&v112 = v40;
  v43 = sub_18D1CFB04(&v126, (double *)&v111, v27 > v31, v41, v42);
  v125 = 0.0;
  v123 = 0u;
  v124 = 0u;
  v121 = *((_OWORD *)v43 + 2);
  v122 = 0u;
  if (sub_18D1CFFB0(v127, (uint64_t)&v121, &v125, &v122, (uint64_t)(v43 + 6), *(double *)&v121, (int8x16_t)0))
  {
    v50 = a3 + 40;
    v51 = "could not compute expected Doppler at start";
    v52 = 5316;
LABEL_40:
    sub_18D1C741C(v50, (uint64_t)v51, (uint64_t)"h_GnssAverageDoppler_RavenPNT", v52, v44, v45, v46, v47);
    return 0xFFFFFFFFLL;
  }
  v48.i64[0] = *(_QWORD *)(a3 + 288);
  *(_QWORD *)&v107 = 0;
  v106 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v106, 0, v48, v49);
  v111 = (uint64_t (**)())CNTimeSpan::operator+(a3 + 88, &v106, v53, v54);
  *(_QWORD *)&v112 = v55;
  v58 = sub_18D1CFB04(&v126, (double *)&v111, v27 > v31, v56, v57);
  v120 = 0.0;
  v118 = 0u;
  v119 = 0u;
  v117 = 0u;
  v116 = *((_OWORD *)v58 + 2);
  if (sub_18D1CFFB0(v127, (uint64_t)&v116, &v120, &v117, (uint64_t)(v58 + 6), *(double *)&v116, v59))
  {
    v50 = a3 + 40;
    v51 = "could not compute expected Doppler at end";
    v52 = 5326;
    goto LABEL_40;
  }
  v62 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v116, &v121, v60, v61);
  v64 = v63 + (double)(uint64_t)v62;
  if (v64 <= 0.0)
  {
    LOWORD(v111) = 12;
    LOBYTE(v106) = 4;
    v91 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18D181C54(v98);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)&v106, "t,%.3lf,%s,Invalid true averaging interval in raven time,%.3lf, vendor_meas_interval_sec, %.3lf", v92, v93, v94, v95, v96, SLOBYTE(v91));
    return 0xFFFFFFFFLL;
  }
  v65 = 1.0 / v64 * (299792458.0 / *(double *)(a3 + 192));
  v66 = v65 * (v120 - v125);
  if (!cnprint::CNPrinter::GetLogLevel(v62))
  {
    LOWORD(v111) = 12;
    LOBYTE(v106) = 0;
    v67 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18D181C54(v98);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)&v106, "t,%.3lf,%s,using avg Doppler,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v68, v69, v70, v71, v72, SLOBYTE(v67));
  }
  *(_QWORD *)&v73 = 0x100000001;
  *((_QWORD *)&v73 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v73;
  **(double **)(a4 + 32) = v66 + **(double **)(a2 + 32);
  v113 = 0x1A00000001;
  v111 = &off_1E25C6B30;
  v114 = (double *)v115;
  v112 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v111, 0.0);
  v108 = 0x1A00000001;
  v106 = &off_1E25C6B30;
  v109 = (double *)&v110;
  v107 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v106, 0.0);
  v74 = *((double *)&v118 + 1);
  v75 = v114;
  *v114 = v65 * (*(double *)&v118 * *((double *)v58 + 41));
  v76 = *((double *)&v123 + 1);
  v77 = v109;
  *v109 = v65 * (*(double *)&v123 * *((double *)v43 + 41));
  v78 = SHIDWORD(v112);
  v75[SHIDWORD(v112)] = v65 * (v74 * *((double *)v58 + 42));
  v79 = SHIDWORD(v107);
  v77[SHIDWORD(v107)] = v65 * (v76 * *((double *)v43 + 42));
  v80 = *((double *)&v119 + 1);
  v75[2 * v78] = v65 * (*(double *)&v119 * *((double *)v58 + 43));
  v81 = *((double *)&v124 + 1);
  v77[2 * v79] = v65 * (*(double *)&v124 * *((double *)v43 + 43));
  v75[18 * (int)v78] = v65 * (v80 * *((double *)v58 + 68)) * 0.000001;
  v77[18 * (int)v79] = v65 * (v81 * *((double *)v43 + 68)) * 0.000001;
  v103 = 0x1A00000001;
  v101 = &off_1E25C6B30;
  v104 = v105;
  v102 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v101, 0.0);
  v82 = sub_18D053AA8(a5, (uint64_t)&v101);
  v84 = CNTimeSpan::operator-((uint64_t)&v116, (_QWORD *)(a3 + 88), (int8x16_t)v82, v83);
  v101 = (uint64_t (**)())v84;
  *(double *)&v102 = v85;
  if (v84 < 0 || (*(double *)v86.i64 = v85, v85 < 0.0))
  {
    v84 = CNTimeSpan::operator-((double *)&v101, v86, v87);
    v86.i64[0] = v88;
  }
  if (*(double *)v86.i64 + (double)v84 >= 0.001)
  {
    sub_18D1D0D00((uint64_t)v100, (uint64_t)&v111, (uint64_t)(v58 + 114));
    sub_18D1D0D00((uint64_t)v99, (uint64_t)&v106, (uint64_t)(v43 + 114));
    v103 = 0x1A00000001;
    v101 = &off_1E25C6B30;
    v102 = xmmword_18D3198F0;
    v104 = v105;
    v89 = (uint64_t (***)())v100;
    v90 = v99;
  }
  else
  {
    sub_18D1D0D00((uint64_t)v100, (uint64_t)&v106, (uint64_t)(v43 + 114));
    v103 = 0x1A00000001;
    v101 = &off_1E25C6B30;
    v102 = xmmword_18D3198F0;
    v104 = v105;
    v89 = &v111;
    v90 = v100;
  }
  sub_18D0540FC((uint64_t)v89, (uint64_t)v90, (uint64_t)&v101);
  sub_18D053AA8(a5, (uint64_t)&v101);
  *(double *)(*(_QWORD *)(a5 + 32) + 152 * *(int *)(a5 + 20)) = *(double *)(*(_QWORD *)(a5 + 32)
                                                                            + 152 * *(int *)(a5 + 20))
                                                                + v65 * (v120 - v125) * 0.000001 * *((double *)v58 + 69);
  sub_18D1CC610(1u, 1u, (uint64_t)&v101);
  sub_18D053AA8(a6, (uint64_t)&v101);
  return 0;
}

void sub_18D1A36EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF23130);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1A3718(uint64_t a1)
{
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D1A3798(uint64_t a1)
{
  *(_QWORD *)(a1 + 240) = &unk_1E25B9850;
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  *(_QWORD *)(a1 + 240) = off_1E25B93B0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18D1A37F8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  int v6;
  unsigned int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 / a3 <= 1)
    v4 = 1;
  else
    v4 = a2 / a3;
  if (sub_18D1D1D04(a1))
    return 0xFFFFFFFFLL;
  v6 = 1;
  do
  {
    v7 = v6;
    if (v4 == v6)
      break;
    v8 = sub_18D1D1D04(a1);
    v6 = v7 + 1;
  }
  while (!v8);
  if (v7 >= v4)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::HorizontalDOTInIMUFrameEvent *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  cnprint::CNPrinter *v12;
  uint64_t v13;
  float64x2_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  _QWORD v59[2];
  unsigned __int8 v60;
  __int16 v61;
  void *v62;
  void *__p[2];
  uint64_t v64;
  __int128 *v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  void *v72;
  _OWORD v73[2];
  __int128 v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;

  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v4 = 0;
  v5 = (_OWORD *)((char *)a2 + 280);
  v6 = *((int *)a2 + 7);
  v7 = v6 + 1;
  v8 = 8 * v6;
  v9 = (_QWORD *)*((_QWORD *)a2 + 5);
  while (2)
  {
    if ((*(_QWORD *)(*((_QWORD *)a2 + 31) + 8 * v4) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v62) = 12;
      LOBYTE(v75) = 4;
      v31 = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(_QWORD *)a2 + 16))(a2);
      v57 = v32 + (double)v31;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v75, "t,%.3lf, Invalid horizontal DOT at %d element = %.3lf", v33, v34, v35, v36, v37, SLOBYTE(v57));
      return 0xFFFFFFFFLL;
    }
    if (*(double *)(*((_QWORD *)a2 + 5) + 8 * v7 * (int)v4) <= 0.0)
    {
      LOWORD(v62) = 12;
      LOBYTE(v75) = 4;
      v38 = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(_QWORD *)a2 + 16))(a2);
      v58 = v39 + (double)v38;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v75, "t,%.3lf, Invalid horizontal DOT covariance %d diagonal value = %.3lf", v40, v41, v42, v43, v44, SLOBYTE(v58));
      return 0xFFFFFFFFLL;
    }
    v10 = 0;
    v11 = v9;
    do
    {
      if ((*v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        LOWORD(v62) = 12;
        LOBYTE(v75) = 4;
        v23 = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(_QWORD *)a2 + 16))(a2);
        v56 = v24 + (double)v23;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v75, "t,%.3lf, Invalid horizontal DOT uncertainty at location (%d, %d) = %.3lf", v25, v26, v27, v28, v29, SLOBYTE(v56));
        return 0xFFFFFFFFLL;
      }
      ++v10;
      v11 = (_QWORD *)((char *)v11 + v8);
    }
    while (v10 != 3);
    ++v4;
    ++v9;
    if (v4 != 3)
      continue;
    break;
  }
  v82 = 0x100000003;
  v80 = &unk_1E25C7790;
  v83 = &v84;
  v81 = xmmword_18D313070;
  v12 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v80, 0.0);
  v77 = 0x300000003;
  v75 = &unk_1E25C78E0;
  v76 = xmmword_18D30BB60;
  v78 = &v79;
  v13 = *((_QWORD *)this + 1831);
  v14.f64[0] = *(float64_t *)(v13 + 192);
  if (v14.f64[0] < 0.75)
  {
    if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
    {
      LOWORD(v74) = 12;
      LOBYTE(v59[0]) = 1;
      v62 = (void *)(*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(_QWORD *)a2 + 16))(a2);
      __p[0] = v15;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v62, "horizontal dot measurement ignored at low user speed of %.1lf", *(double *)(v13 + 192));
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v21) = (_BYTE)this - 72;
      else
        v21 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)v59, "%s", v16, v17, v18, v19, v20, v21);
    }
    return 0;
  }
  v14.f64[0] = v14.f64[0] * v14.f64[0];
  v64 = 0x300000003;
  v62 = &unk_1E25C78E0;
  *(_OWORD *)__p = xmmword_18D30BB60;
  v65 = &v66;
  sub_18D064EF4((uint64_t)a2 + 8, (uint64_t)&v62, v14);
  v45 = sub_18D053AA8((uint64_t)&v75, (uint64_t)&v62);
  *(_QWORD *)&v74 = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *, __n128))(*(_QWORD *)a2 + 16))(a2, v45);
  *((_QWORD *)&v74 + 1) = v46;
  sub_18D1D20D8(&v62);
  v66 = v74;
  sub_18D053AA8((uint64_t)&v72, (uint64_t)a2 + 216);
  if (v73 != v5)
  {
    v47 = v5[1];
    v73[0] = *v5;
    v73[1] = v47;
  }
  v67 = (char *)this + 2696;
  v68 = (char *)this + 14600;
  v69 = (char *)this + 14616;
  v70 = (char *)this + 2536;
  v71 = (char *)this + 2576;
  if (sub_18D1A4AF8((uint64_t)this + 61288, (double *)&v74, (uint64_t)&v80, (uint64_t)&v75, (uint64_t)&v62))
  {
    v61 = 12;
    v60 = 4;
    v59[0] = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(_QWORD *)a2 + 16))(a2);
    v59[1] = v48;
    v49 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v59, "Could not add measurement - horizontal DOT");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v55) = v49;
    else
      v55 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v61, &v60, "%s", v50, v51, v52, v53, v54, v55);
    v22 = 0xFFFFFFFFLL;
  }
  else
  {
    v22 = 0;
  }
  v72 = &unk_1E25C5E70;
  v62 = &unk_1E25B8EE0;
  if (SHIBYTE(v65) < 0)
    operator delete(__p[1]);
  return v22;
}

void sub_18D1A3CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_18D1A3CF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  double result;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = &unk_1E25C78E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D064EF4(a1, a2, a3);
  return result;
}

void sub_18D1A3D40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1A3D54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  double v16;
  cnprint::CNPrinter *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  double v33;
  double v34;
  float64x2_t *v35;
  double v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  cnprint::CNPrinter *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  float64x2_t v63;
  double v64;
  float64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  double v81;
  double v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE v92[72];
  void *v93;
  __int128 v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE v97[49];
  void *v98;
  __int128 v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE v102[72];
  void *v103;
  __int128 v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE v107[72];
  void *v108;
  __int128 v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _BYTE v113[112];
  _BYTE v114[112];
  _BYTE v115[89];
  _BYTE v116[112];
  _BYTE v117[112];
  void *v118;
  __int128 v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  double v123[4];
  _BYTE v124[64];
  _BYTE v125[89];
  _BYTE v126[112];
  _BYTE v127[20];
  int v128;
  uint64_t v129;
  void *v130;
  __int128 v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unsigned __int8 v135[16];
  uint64_t v136;
  _BYTE v137[56];
  float64x2_t v138;
  double v139;
  double v140;
  BOOL v141;
  _BYTE v142[32];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  void *v177;
  __int128 v178;
  uint64_t v179;
  double *v180;
  uint64_t v181;
  void *v182;
  __int128 v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE v186[224];
  _BYTE v187[264];
  __int128 v188;
  __int128 v189;
  uint64_t (**v190)();
  __int128 v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  int v195;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = v4;
  v189 = *(_OWORD *)(v4 + 40);
  v11 = *(_DWORD *)(v2 + 8);
  v12 = *(_DWORD *)(v2 + 12);
  if (v11 <= v12)
    v13 = *(_DWORD *)(v2 + 12);
  else
    v13 = *(_DWORD *)(v2 + 8);
  if (v11)
    v14 = v12 == 0;
  else
    v14 = 1;
  v15 = !v14 && v13 == 26;
  if (!v15
    || ((v23 = v3, v25 = *(_DWORD *)(v3 + 8), v24 = *(_DWORD *)(v3 + 12), v25 <= v24)
      ? (v26 = *(_DWORD *)(v3 + 12))
      : (v26 = *(_DWORD *)(v3 + 8)),
        !v25 || !v24 || v26 != 3))
  {
    LOWORD(v190) = 12;
    v142[0] = 4;
    v16 = *(double *)(v4 + 48) + (double)*(uint64_t *)(v4 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v190, v142, "time,%.3lf,h-function failure on line %d: %s() %s", v5, v6, v7, v8, v9, SLOBYTE(v16));
    if (cnprint::CNPrinter::GetLogLevel(v17) <= 1)
    {
      LOWORD(v190) = 12;
      v142[0] = 1;
      v81 = *((double *)&v189 + 1) + (double)(uint64_t)v189;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v190, v142, "t,%.3lf, Warning: h_HorizontalVelocityInIMUFrame_RavenPNT called with inadequate matrices", v18, v19, v20, v21, v22, SLOBYTE(v81));
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)(v4 + 56))
  {
    LOWORD(v190) = 12;
    v142[0] = 4;
    v36 = *(double *)(v4 + 48) + (double)*(uint64_t *)(v4 + 40);
LABEL_29:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v190, v142, "time,%.3lf,h-function failure on line %d: %s() %s", v5, v6, v7, v8, v9, SLOBYTE(v36));
    return 0xFFFFFFFFLL;
  }
  v27 = v7;
  v28 = v6;
  v29 = v5;
  v30 = v2;
  v31 = *(_QWORD *)(v4 + 72);
  v188 = *(_OWORD *)*(_QWORD *)(v4 + 64);
  sub_18D1D6E1C((uint64_t)v187, v31);
  for (i = 0; i != 24; i += 8)
  {
    if ((*(_QWORD *)(*(_QWORD *)(v10 + 128) + i) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v190) = 12;
      v142[0] = 4;
      v36 = *(double *)(v10 + 48) + (double)*(uint64_t *)(v10 + 40);
      goto LABEL_29;
    }
  }
  *(_QWORD *)&v142[24] = 0x100000003;
  *(_QWORD *)v142 = &unk_1E25C7790;
  *(_OWORD *)&v142[8] = xmmword_18D313070;
  *(_QWORD *)&v143 = (char *)&v143 + 8;
  v192 = 0x100000134;
  v190 = (uint64_t (**)())&unk_1E25C7640;
  v191 = xmmword_18D3130C0;
  v193 = &v194;
  v184 = 0x100000003;
  v182 = &unk_1E25C7790;
  v183 = xmmword_18D313070;
  v185 = v186;
  sub_18D159EE0(v10 + 96, (uint64_t)v142, (uint64_t)&v190, (uint64_t)&v182, "2");
  if (fabs(v33) <= 0.000000015)
  {
    LOWORD(v190) = 12;
    v142[0] = 4;
    v36 = *(double *)(v10 + 48) + (double)*(uint64_t *)(v10 + 40);
    goto LABEL_29;
  }
  v34 = 1.0 / v33;
  v35 = *(float64x2_t **)(v10 + 128);
  *v35 = vmulq_n_f64(*v35, v34);
  v35[1].f64[0] = v34 * v35[1].f64[0];
  if (**(_BYTE **)(v10 + 80))
  {
    LOWORD(v190) = 12;
    v142[0] = 4;
    v36 = *(double *)(v10 + 48) + (double)*(uint64_t *)(v10 + 40);
    goto LABEL_29;
  }
  v38 = *(_QWORD *)(v10 + 56);
  v184 = 0x10000001CLL;
  v182 = &unk_1E25C72B0;
  v183 = xmmword_18D319780;
  v185 = v186;
  if (sub_18D1D0D6C((uint64_t)&v189, &v188, (uint64_t)v187, v38, *(_QWORD *)(v10 + 88), 0, 0, 1, (uint64_t)&v182))
  {
    sub_18D1C741C(v10 + 40, (uint64_t)"could not integrate full states", (uint64_t)"h_HorizontalVelocityInIMUFrame_RavenPNT", 5912, v39, v40, v41, v42);
    return 0xFFFFFFFFLL;
  }
  v179 = 0x10000001CLL;
  v177 = &unk_1E25C72B0;
  v178 = xmmword_18D319780;
  v180 = (double *)&v181;
  *(int64x2_t *)v142 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v142[16] = *(_OWORD *)v142;
  v143 = *(_OWORD *)v142;
  v144 = *(_OWORD *)v142;
  v145 = *(_OWORD *)v142;
  v146 = *(_OWORD *)v142;
  v147 = *(_OWORD *)v142;
  v148 = *(_OWORD *)v142;
  v149 = *(_OWORD *)v142;
  v150 = *(_OWORD *)v142;
  v151 = *(_OWORD *)v142;
  v152 = *(_OWORD *)v142;
  v153 = *(_OWORD *)v142;
  v154 = *(_OWORD *)v142;
  v155 = *(_OWORD *)v142;
  v156 = *(_OWORD *)v142;
  v157 = *(_OWORD *)v142;
  v158 = *(_OWORD *)v142;
  v159 = *(_OWORD *)v142;
  v160 = *(_OWORD *)v142;
  v161 = *(_OWORD *)v142;
  v162 = *(_OWORD *)v142;
  v163 = *(_OWORD *)v142;
  v164 = *(_OWORD *)v142;
  v165 = *(_OWORD *)v142;
  v166 = *(_OWORD *)v142;
  v167 = *(_OWORD *)v142;
  v168 = *(_OWORD *)v142;
  v169 = *(_OWORD *)v142;
  v170 = *(_OWORD *)v142;
  v171 = *(_OWORD *)v142;
  v172 = *(_OWORD *)v142;
  v173 = *(_OWORD *)v142;
  v174 = *(_OWORD *)v142;
  v175 = *(_OWORD *)v142;
  v176 = 0x7FF8000000000000;
  v141 = 0;
  v43 = 0.0;
  if (sub_18D1C9BF4((uint64_t)&v182, v30, 0, 0, 1, (uint64_t)&v177, (uint64_t)v142, &v141, 0.0))
  {
    sub_18D1C741C(v10 + 40, (uint64_t)"could not correct states", (uint64_t)"h_HorizontalVelocityInIMUFrame_RavenPNT", 5926, v44, v45, v46, v47);
    if (cnprint::CNPrinter::GetLogLevel(v48) <= 1)
    {
      LOWORD(v190) = 12;
      v135[0] = 1;
      v82 = *((double *)&v189 + 1) + (double)(uint64_t)v189;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v190, v135, "t,%.3lf, Error: h_HorizontalVelocityInIMUFrame_RavenPNT GetEarthFixedFullStateEstimate failed", v49, v50, v51, v52, v53, SLOBYTE(v82));
    }
    return 0xFFFFFFFFLL;
  }
  v54 = v180;
  v55 = v180[6];
  v56 = v180[7];
  v57 = v180[8];
  v58 = v180[9];
  v59 = sqrt(v56 * v56 + v55 * v55 + v57 * v57 + v58 * v58);
  v60 = 1.0;
  v61 = 0.0;
  v62 = 0.0;
  if (fabs(v59) >= 2.22044605e-16)
  {
    v43 = v55 / v59;
    v61 = v56 / v59;
    v62 = v57 / v59;
    v60 = v58 / v59;
  }
  v138.f64[0] = v43;
  v138.f64[1] = v61;
  v139 = v62;
  v140 = v60;
  v192 = 0x300000001;
  v190 = (uint64_t (**)())&unk_1E25C6C50;
  v193 = &v194;
  v191 = xmmword_18D314670;
  v194 = 0x1A00000019;
  v195 = 27;
  sub_18D16169C((uint64_t)&v190, (uint64_t)v137);
  sub_18D16AF50((uint64_t)v135, v180[21], v180[22], v180[23]);
  if (!v135[8])
    return 0xFFFFFFFFLL;
  v132 = 0x300000003;
  v130 = &unk_1E25C78E0;
  v131 = xmmword_18D30BB60;
  v133 = &v134;
  sub_18D053AA8((uint64_t)&v130, (uint64_t)&v136);
  sub_18D1BE948(3u, 3u, (uint64_t)v127);
  *(_QWORD *)(v129 + 16 * v128 + 16) = 0;
  sub_18D1873A0((uint64_t)&v130, (uint64_t)v125);
  sub_18D166008((uint64_t)v125, (uint64_t)v127, (uint64_t)&v190);
  sub_18D166008((uint64_t)&v190, (uint64_t)&v130, (uint64_t)v126);
  v63.f64[0] = v54[24];
  sub_18D1A3CF0((uint64_t)v126, (uint64_t)v125, v63);
  sub_18D1C9120((uint64_t)&v190, (uint64_t)&v177, (uint64_t)v137);
  sub_18D1D1FA4((uint64_t)v124, (uint64_t)v125, (uint64_t)&v190);
  sub_18D192CE4((uint64_t)v124);
  v65 = v64;
  cnrotation::Inv((float64x2_t *)(v10 + 160), (float64x2_t *)&v190);
  cnrotation::Cat(v138.f64, (const cnrotation::CNRotation *)&v190, v123);
  sub_18D162AB8((cnrotation::CNRotation *)v123, v10 + 96, (uint64_t)v125);
  *(_OWORD *)(v29 + 8) = xmmword_18D313070;
  sub_18D162AB8((cnrotation::CNRotation *)&v138, (uint64_t)v124, (uint64_t)v117);
  v66.f64[0] = v65;
  sub_18D1A3CF0((uint64_t)v125, (uint64_t)v116, v66);
  v120 = 0x300000003;
  v118 = &unk_1E25C78E0;
  v119 = xmmword_18D30BB60;
  v121 = &v122;
  sub_18D0540FC((uint64_t)v117, (uint64_t)v116, (uint64_t)&v118);
  sub_18D1D2014((uint64_t)&v190, (uint64_t)&v118, v23);
  sub_18D053AA8(v29, (uint64_t)&v190);
  v192 = 0x1A00000003;
  v190 = &off_1E25C7850;
  v193 = &v194;
  v191 = xmmword_18D319800;
  sub_18D04BE88((uint64_t)&v190, 0.0);
  sub_18D053AA8(v28, (uint64_t)&v190);
  cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v138, (uint64_t)&v118);
  cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v138, (uint64_t)v117);
  cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v138, (uint64_t)v116);
  cnrotation::CNRotation::dRdq4(&v138, (uint64_t)v115);
  *(_QWORD *)&v67.f64[0] = v144;
  v110 = 0x300000003;
  v108 = &unk_1E25C78E0;
  v109 = xmmword_18D30BB60;
  v111 = &v112;
  v68 = sub_18D1C94E0((uint64_t)&v118, (uint64_t)&v108, v67);
  v68.f64[0] = *((float64_t *)&v145 + 1);
  v105 = 0x300000003;
  v103 = &unk_1E25C78E0;
  v104 = xmmword_18D30BB60;
  v106 = v107;
  sub_18D1C94E0((uint64_t)v117, (uint64_t)&v103, v68);
  sub_18D1BE894((uint64_t)&v108, (uint64_t)&v103, (uint64_t)v113);
  *(_QWORD *)&v69.f64[0] = v147;
  v100 = 0x300000003;
  v98 = &unk_1E25C78E0;
  v99 = xmmword_18D30BB60;
  v101 = v102;
  sub_18D1C94E0((uint64_t)v116, (uint64_t)&v98, v69);
  sub_18D1BE894((uint64_t)v113, (uint64_t)&v98, (uint64_t)&v190);
  v70.f64[0] = *((float64_t *)&v148 + 1);
  v95 = 0x300000003;
  v93 = &unk_1E25C78E0;
  v94 = xmmword_18D30BB60;
  v96 = v97;
  sub_18D1C94E0((uint64_t)v115, (uint64_t)&v93, v70);
  sub_18D1BE894((uint64_t)&v190, (uint64_t)&v93, (uint64_t)v114);
  v71.f64[0] = *((float64_t *)&v144 + 1);
  v105 = 0x300000003;
  v103 = &unk_1E25C78E0;
  v104 = xmmword_18D30BB60;
  v106 = v107;
  v72 = sub_18D1C94E0((uint64_t)&v118, (uint64_t)&v103, v71);
  *(_QWORD *)&v72.f64[0] = v146;
  v100 = 0x300000003;
  v98 = &unk_1E25C78E0;
  v99 = xmmword_18D30BB60;
  v101 = v102;
  sub_18D1C94E0((uint64_t)v117, (uint64_t)&v98, v72);
  sub_18D1BE894((uint64_t)&v103, (uint64_t)&v98, (uint64_t)&v108);
  v73.f64[0] = *((float64_t *)&v147 + 1);
  v95 = 0x300000003;
  v93 = &unk_1E25C78E0;
  v94 = xmmword_18D30BB60;
  v96 = v97;
  sub_18D1C94E0((uint64_t)v116, (uint64_t)&v93, v73);
  sub_18D1BE894((uint64_t)&v108, (uint64_t)&v93, (uint64_t)&v190);
  *(_QWORD *)&v74.f64[0] = v149;
  v90 = 0x300000003;
  v88 = &unk_1E25C78E0;
  v89 = xmmword_18D30BB60;
  v91 = v92;
  sub_18D1C94E0((uint64_t)v115, (uint64_t)&v88, v74);
  sub_18D1BE894((uint64_t)&v190, (uint64_t)&v88, (uint64_t)v113);
  *(_QWORD *)&v75.f64[0] = v145;
  v100 = 0x300000003;
  v98 = &unk_1E25C78E0;
  v99 = xmmword_18D30BB60;
  v101 = v102;
  v76 = sub_18D1C94E0((uint64_t)&v118, (uint64_t)&v98, v75);
  v76.f64[0] = *((float64_t *)&v146 + 1);
  v95 = 0x300000003;
  v93 = &unk_1E25C78E0;
  v94 = xmmword_18D30BB60;
  v96 = v97;
  sub_18D1C94E0((uint64_t)v117, (uint64_t)&v93, v76);
  sub_18D1BE894((uint64_t)&v98, (uint64_t)&v93, (uint64_t)&v103);
  *(_QWORD *)&v77.f64[0] = v148;
  v90 = 0x300000003;
  v88 = &unk_1E25C78E0;
  v89 = xmmword_18D30BB60;
  v91 = v92;
  sub_18D1C94E0((uint64_t)v116, (uint64_t)&v88, v77);
  sub_18D1BE894((uint64_t)&v103, (uint64_t)&v88, (uint64_t)&v190);
  v78.f64[0] = *((float64_t *)&v149 + 1);
  v85 = 0x300000003;
  v83 = &unk_1E25C78E0;
  v84 = xmmword_18D30BB60;
  v86 = &v87;
  sub_18D1C94E0((uint64_t)v115, (uint64_t)&v83, v78);
  sub_18D1BE894((uint64_t)&v190, (uint64_t)&v83, (uint64_t)&v108);
  v79 = atomic_load((unsigned __int8 *)&qword_1ECF23160);
  if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23160))
  {
    v192 = 0x300000001;
    v190 = (uint64_t (**)())&unk_1E25C6C50;
    v193 = &v194;
    v191 = xmmword_18D314670;
    v194 = 0x100000000;
    v195 = 2;
    sub_18D16169C((uint64_t)&v190, (uint64_t)&unk_1ECF234D8);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF234D8, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23160);
  }
  sub_18D192C7C((uint64_t)v114, (uint64_t)v124, (uint64_t)&v103);
  sub_18D1D2080((uint64_t)&v190, v28, 6);
  sub_18D16182C((uint64_t)&v190, (uint64_t)&v103);
  sub_18D192C7C((uint64_t)v113, (uint64_t)v124, (uint64_t)&v103);
  sub_18D1D2080((uint64_t)&v190, v28, 7);
  sub_18D16182C((uint64_t)&v190, (uint64_t)&v103);
  sub_18D192C7C((uint64_t)&v108, (uint64_t)v124, (uint64_t)&v103);
  sub_18D1D2080((uint64_t)&v190, v28, 8);
  sub_18D16182C((uint64_t)&v190, (uint64_t)&v103);
  v80 = atomic_load((unsigned __int8 *)&qword_1ECF23168);
  if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23168))
  {
    v192 = 0x300000001;
    v190 = (uint64_t (**)())&unk_1E25C6C50;
    v193 = &v194;
    v191 = xmmword_18D314670;
    v194 = 0x1800000017;
    v195 = 25;
    sub_18D16169C((uint64_t)&v190, (uint64_t)&unk_1ECF23510);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23510, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23168);
  }
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v138, (uint64_t)&v98);
  sub_18D166008((uint64_t)&v98, (uint64_t)v126, (uint64_t)&v103);
  sub_18D04F764((uint64_t)&v190, v28, (uint64_t)&unk_1ECF234D8, (uint64_t)&unk_1ECF23510);
  sub_18D16171C((uint64_t)&v190, (uint64_t)&v103);
  sub_18D1BE948(3u, 3u, (uint64_t)&v190);
  sub_18D053AA8(v27, (uint64_t)&v190);
  return 0;
}

void sub_18D1A4A30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF23168);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1A4AF8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D1D2144((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D1A3D54;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4B60, &std::__any_imp::__unique_typeinfo<raven::h_HorizontalVelocityInIMUFrameArgs_RavenPNT<double>>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D1A4EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1A4F24(uint64_t a1)
{
  *(_QWORD *)(a1 + 96) = &unk_1E25C5E70;
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void raven::RavenPNTEstimator::InflateAttitudeUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *__p[2];
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF23078);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23078))
  {
    v18 = 0x300000001;
    *(_QWORD *)v17 = &unk_1E25C6C50;
    v19 = &v20;
    *(_OWORD *)&v17[8] = xmmword_18D314670;
    v20 = 0x700000006;
    v21 = 8;
    sub_18D16169C((uint64_t)v17, (uint64_t)&unk_1ECF232E0);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF232E0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23078);
  }
  sub_18D1D63C0((uint64_t)v17, (uint64_t)&unk_1ECF232E0);
  sub_18D0778AC(__p, "InflateAttitudeUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v17, (uint64_t)__p, a3, a2);
  if (v16 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v14 = 2;
  *(_OWORD *)v17 = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v17, "Inflating estimator variance of attitude error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v14, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1A50F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF23078);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::InflateInsUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflateInsUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1432), a2);
}

void raven::RavenPNTEstimator::InflateVelocityUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflateVelocityUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1448), a2);
}

void raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1448), a2);
}

void raven::RavenPNTEstimator::InflateUserVelocityUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflateUserVelocityUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1448), a2);
}

void raven::RavenPNTEstimator::InflateUserPositionUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflateUserPositionUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1440), a2);
}

uint64_t raven::RavenPNTEstimator::UpdateFullStateEstimate(raven::RavenPNTEstimator *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  __int128 v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  BOOL v51;
  __int128 v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  double *v60;
  double v61;
  double *v62;
  double v63;
  double v64;
  double v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  int8x16_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  double *v84;
  int v85;
  int v86;
  int j;
  __int128 v88;
  cnstatistics *v89;
  unsigned int v90;
  double *v91;
  double v92;
  double v93;
  cnprint::CNPrinter *v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double *v103;
  unsigned int v104;
  unsigned int v105;
  _OWORD *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  int v127;
  int v128;
  __int128 v129;
  int v130;
  int k;
  int v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  int32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  __int128 *v146;
  int v147;
  int v148;
  int v149;
  int v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  __n128 v158;
  uint64_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  __n128 v166;
  uint64_t v167;
  float64x2_t v168;
  int8x16_t v169;
  int8x16_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int32 v174;
  _QWORD *v175;
  int v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  __int128 *v180;
  uint64_t v181;
  __int128 *v182;
  _OWORD *v183;
  __int128 v184;
  __int32 v185;
  _QWORD *v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  int v192;
  __n128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  int v198;
  __int32 v199;
  int v200;
  int v201;
  uint64_t v202;
  __int32 v203;
  _QWORD *v204;
  int m;
  float64x2_t v206;
  int v207;
  uint64_t v208;
  int v209;
  int v210;
  uint64_t v211;
  double *v212;
  int *v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  double *v217;
  int v218;
  uint64_t v219;
  int v220;
  int *v221;
  int v222;
  int v223;
  double v224;
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  __int32 v231;
  _QWORD *v232;
  unsigned int v233;
  int v234;
  uint64_t v235;
  float64x2_t v236;
  float64x2_t v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  double *v243;
  int *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  double *v248;
  int v249;
  uint64_t v250;
  int v251;
  int *v252;
  int v253;
  int v254;
  double v255;
  int v256;
  uint64_t v257;
  const char *v258;
  int v259;
  const char *v260;
  int v261;
  const char *v262;
  int v263;
  uint64_t i;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  uint64_t (**v270)();
  __int128 v271;
  uint64_t v272;
  double *v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  int *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (**v280)();
  __int128 v281;
  uint64_t v282;
  double *v283;
  _QWORD v284[84];
  uint64_t (**v285)();
  __int128 v286;
  uint64_t v287;
  double *v288;
  _QWORD v289[84];
  uint64_t (**v290)();
  __int128 v291;
  uint64_t v292;
  double *v293;
  _QWORD v294[85];
  __int128 v295;
  uint64_t v296;
  int *v297;
  _OWORD v298[6];
  uint64_t v299;
  BOOL v300;
  _BYTE v301[32];
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  uint64_t (**v336)();
  int v337;
  int v338;
  uint64_t v339;
  void *v340;
  __int128 v341;
  uint64_t v342;
  double *v343;
  uint64_t v344;
  void *v345;
  __int128 v346;
  uint64_t v347;
  double *v348;
  uint64_t v349;
  _QWORD v350[2];
  int v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  __int128 v355;
  uint64_t v356;
  double *v357;
  uint64_t v358;
  _BYTE v359[32];
  double *v360;
  uint64_t (**v361)();
  __int128 v362;
  uint64_t v363;
  __int128 *v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  void *v372;
  _QWORD v373[5];
  uint64_t v374;
  _QWORD v375[5];
  uint64_t v376;
  _QWORD v377[5];
  uint64_t v378;
  _BYTE v379[144];
  _BYTE v380[144];
  void *v381;
  int v382;
  int v383;
  int v384;
  int v385;
  uint64_t v386;
  _DWORD *v387;
  _DWORD v388[26];
  void *v389;
  __int128 v390;
  uint64_t v391;
  float64x2_t *v392;
  double v393[26];
  _BYTE v394[144];
  _BYTE v395[144];
  void *v396;
  int v397;
  int v398;
  int v399;
  int v400;
  uint64_t v401;
  _DWORD *v402;
  _DWORD v403[26];
  void *v404;
  int32x4_t v405;
  uint64_t v406;
  _QWORD *v407;
  _QWORD v408[13];
  float64x2_t v409;
  double v410;
  uint64_t v411;
  _DWORD *v412;
  _DWORD v413[30];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  if (!*(_BYTE *)(v2 + 58))
    return 0xFFFFFFFFLL;
  v3 = v2;
  v4 = v2 + 14616;
  sub_18D1D8C14((uint64_t)v359, v2 + 14616);
  v5 = atomic_load((unsigned __int8 *)&qword_1ECF230F8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230F8))
  {
    v363 = 0x1C00000001;
    v361 = &off_1E25C6B90;
    v364 = &v365;
    v362 = xmmword_18D319900;
    for (i = 10; i != 29; ++i)
      *((_DWORD *)&v361 + i) = i - 10;
    sub_18D1A0634((uint64_t)&unk_1EE0617C8, (uint64_t)&v361);
    __cxa_atexit((void (*)(void *))sub_18D1A0734, &unk_1EE0617C8, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230F8);
  }
  if (!*(_BYTE *)(v3 + 58) || !sub_18D1B8600(v3 + 15032))
  {
    sub_18D1D8C14((uint64_t)&v270, (uint64_t)v359);
    v24 = v360;
    v25 = v360[6];
    v26 = v360[7];
    v27 = v360[8];
    v28 = v360[9];
    v29 = sqrt(v26 * v26 + v25 * v25 + v27 * v27 + v28 * v28);
    if (fabs(v29) >= 2.22044605e-16)
    {
      v31 = v25 / v29;
      v32 = v26 / v29;
      v33 = v27 / v29;
      v30 = v28 / v29;
    }
    else
    {
      v30 = 1.0;
      v31 = 0.0;
      v32 = 0.0;
      v33 = 0.0;
    }
    v34 = v273;
    v273[6] = v31;
    v34[7] = v32;
    v34[8] = v33;
    v34[9] = v30;
    v36 = v24[25];
    v35 = v24[26];
    v37 = v24[27];
    v38 = sqrt(v35 * v35 + v36 * v36 + v37 * v37);
    if (fabs(v38) > 0.000000015)
    {
      v34[24] = v38 * v24[24];
      v34[25] = v36 / v38;
      v34[26] = v35 / v38;
      v34[27] = v37 / v38;
      sub_18D1CD4A0((uint64_t)&v361, (uint64_t)&v270, (uint64_t)&unk_1EE0617C8);
      if (!sub_18D1B8368(v3 + 2696, (_OWORD *)(v3 + 14600), (uint64_t)&v361, v39, v40))
      {
        sub_18D053AA8(v4, (uint64_t)&v270);
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v356 = 0x10000001ALL;
  v354 = &unk_1E25C70A0;
  v355 = xmmword_18D319790;
  v357 = (double *)&v358;
  v267 = v3 + 15584;
  if (*(_DWORD *)(v3 + 16140))
    v6 = v3 + 15584;
  else
    v6 = v3 + 15040;
  sub_18D053AA8((uint64_t)&v354, v6);
  sub_18D1927F4(v3 + 15032, (uint64_t)v350);
  v347 = 0x10000001CLL;
  v345 = &unk_1E25C72B0;
  v346 = xmmword_18D319780;
  v348 = (double *)&v349;
  v342 = 0x10000001ALL;
  v340 = &unk_1E25C70A0;
  v343 = (double *)&v344;
  v341 = xmmword_18D319790;
  sub_18D04BE88((uint64_t)&v340, 0.0);
  sub_18D1E8E50((uint64_t)&v336);
  v7 = v360[24];
  v8 = v360[25];
  v9 = v357[23];
  v10 = v357[24];
  v11 = v360[26];
  v12 = v360[27];
  v13 = v357[25];
  v14 = atomic_load((unsigned __int8 *)&qword_1ECF23100);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23100))
  {
    v363 = 0x300000001;
    v361 = (uint64_t (**)())&unk_1E25C6C50;
    v364 = &v365;
    v362 = xmmword_18D314670;
    *(_QWORD *)&v365 = 0x1A00000019;
    DWORD2(v365) = 27;
    sub_18D16169C((uint64_t)&v361, (uint64_t)&unk_1ECF23430);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23430, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23100);
  }
  v266 = v3 + 15032;
  v15 = atomic_load((unsigned __int8 *)&qword_1ECF23108);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23108))
  {
    v363 = 0x300000001;
    v361 = (uint64_t (**)())&unk_1E25C6C50;
    v364 = &v365;
    v362 = xmmword_18D314670;
    *(_QWORD *)&v365 = 0x1800000017;
    DWORD2(v365) = 25;
    sub_18D16169C((uint64_t)&v361, (uint64_t)&unk_1ECF23468);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23468, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23108);
  }
  v16 = v9 + v7 * v8;
  v17 = v10 + v7 * v11;
  v18 = v13 + v7 * v12;
  v19 = sqrt(v17 * v17 + v16 * v16 + v18 * v18);
  sub_18D1BE7A4((uint64_t)&v280, (uint64_t)v359, (uint64_t)&unk_1ECF23430);
  if (fabs(v19) <= 0.000000015)
  {
    v43 = *(_OWORD *)v283;
    v44 = *((_QWORD *)v283 + 2);
    v45 = 0.0;
    goto LABEL_53;
  }
  sub_18D04F764((uint64_t)&v361, v3 + 14880, (uint64_t)&unk_1ECF23430, (uint64_t)&unk_1ECF23430);
  sub_18D159B20((uint64_t)&v290, (uint64_t)&v361);
  v272 = 0x300000003;
  v270 = (uint64_t (**)())&unk_1E25C78E0;
  v271 = xmmword_18D30BB60;
  v273 = (double *)&v274;
  v363 = 0x1000001E6;
  v361 = (uint64_t (**)())&unk_1E25C7C10;
  v362 = xmmword_18D319190;
  v364 = &v365;
  *(_QWORD *)&v301[24] = 0x100000003;
  *(_QWORD *)v301 = &unk_1E25C7790;
  *(_OWORD *)&v301[8] = xmmword_18D313070;
  *(_QWORD *)&v302 = (char *)&v302 + 8;
  sub_18D15A3D4((uint64_t)&v290, (uint64_t)&v270, (uint64_t)&v361, (uint64_t)v301);
  v287 = 0x100000003;
  v285 = (uint64_t (**)())&unk_1E25C7790;
  v286 = xmmword_18D313070;
  v288 = (double *)v289;
  v363 = 0x100000003;
  v361 = &off_1E25C77F0;
  v362 = xmmword_18D313070;
  v364 = &v365;
  sub_18D04C6B8((uint64_t)v301, (uint64_t)&v285, (uint64_t)&v361);
  v20 = sqrt(*v288);
  v21 = v20 * 57.2957795;
  v22 = sqrt(*(double *)(*(_QWORD *)(v3 + 14912) + 192 * *(int *)(v3 + 14900) + 192));
  if (*(_BYTE *)(v3 + 2536) != 1)
  {
    if (*(_BYTE *)(v3 + 2368) && *(unsigned __int8 *)(v3 + 2480) - 3 <= 1)
    {
      if (*(_BYTE *)(v3 + 1208) && ((*(_BYTE *)(v3 + 1320) - 4) & 0xFA) == 0)
      {
        v23 = 1080.0;
        if (v21 > 1080.0)
          goto LABEL_34;
        v23 = 90.0;
LABEL_32:
        if (v21 >= v23)
          v23 = v20 * 57.2957795;
        goto LABEL_34;
      }
      v23 = 1080.0;
      if (v21 > 1080.0)
        goto LABEL_34;
      *(double *)&v46 = 60.0;
    }
    else
    {
      v23 = 1080.0;
      if (v21 > 1080.0)
        goto LABEL_34;
      *(double *)&v46 = 240.0;
    }
    v23 = *(double *)&v46;
    goto LABEL_32;
  }
  v23 = 5.0;
  if (v21 <= 5.0)
  {
    v23 = 2.0;
    goto LABEL_32;
  }
LABEL_34:
  v47 = v360[24] / v22 * (v23 * 0.0232339099);
  v48 = 1.0;
  if (v47 < 0.0
    || ((v48 = 1.0 - 1.0 / cosh(v47),
         v49 = fabs(v48),
         v45 = 0.0,
         (unint64_t)(*(_QWORD *)&v49 - 0x10000000000000) >> 53 > 0x3FE)
      ? (v50 = (unint64_t)(*(_QWORD *)&v49 - 1) > 0xFFFFFFFFFFFFELL)
      : (v50 = 0),
        v50 ? (v51 = *(_QWORD *)&v48 == 0) : (v51 = 1),
        v52 = xmmword_18D313070,
        v51))
  {
    v45 = fmin(fmax(v48, 0.0), 1.0);
    v52 = xmmword_18D313070;
  }
  *(_QWORD *)&v301[24] = 0x100000003;
  *(_QWORD *)v301 = &unk_1E25C7790;
  *(_OWORD *)&v301[8] = v52;
  *(_QWORD *)&v302 = (char *)&v302 + 8;
  *((double *)&v302 + 1) = v16 / v19;
  *(double *)&v303 = v17 / v19;
  *((double *)&v303 + 1) = v18 / v19;
  v391 = 0x100000003;
  v389 = &unk_1E25C7790;
  v392 = (float64x2_t *)v393;
  *(_QWORD *)&v390 = v281;
  DWORD2(v390) = DWORD1(v281) * v281;
  HIDWORD(v390) = v281;
  v53 = *v283;
  v54 = v283[1];
  v55 = v283[2];
  v56 = v55 * (v16 / v19) - *v283 * (v18 / v19);
  v393[0] = v54 * (v18 / v19) - v55 * (v17 / v19);
  v393[1] = v56;
  v393[2] = v53 * (v17 / v19) - v54 * (v16 / v19);
  v272 = 0x100000003;
  v270 = (uint64_t (**)())&unk_1E25C7790;
  v271 = v52;
  v273 = (double *)&v274;
  v363 = 0x100000134;
  v361 = (uint64_t (**)())&unk_1E25C7640;
  v362 = xmmword_18D3130C0;
  v364 = &v365;
  v287 = 0x100000003;
  v285 = (uint64_t (**)())&unk_1E25C7790;
  v286 = v52;
  v288 = (double *)v289;
  sub_18D159EE0((uint64_t)&v389, (uint64_t)&v270, (uint64_t)&v361, (uint64_t)&v285, "2");
  if (fabs(v57) <= 0.000000015)
  {
    v66 = v283;
  }
  else
  {
    v58 = DWORD2(v281);
    v59 = v45 / v57;
    if (SDWORD2(v281) < 1)
    {
      v61 = 0.0;
    }
    else
    {
      v60 = v283;
      v61 = 0.0;
      v62 = (double *)v302;
      do
      {
        v63 = *v60++;
        v64 = v63;
        v65 = *v62++;
        v61 = v61 + v64 * v65;
        --v58;
      }
      while (v58);
    }
    v67 = v59 * acos(v61);
    v409 = vmulq_n_f64(*v392, v67);
    v68 = v392[1].f64[0];
    v410 = v67 * v68;
    cnrotation::CNRotation::CNRotation((uint64_t)&v285, v409.f64, v67 * v68, v68, v69, v70);
    sub_18D162AB8((cnrotation::CNRotation *)&v285, (uint64_t)&v280, (uint64_t)&v361);
    sub_18D1636E4((uint64_t)&v270, (uint64_t)&v361);
    v66 = v273;
  }
  v43 = *(_OWORD *)v66;
  v44 = *((_QWORD *)v66 + 2);
LABEL_53:
  v272 = 0x300000001;
  v270 = (uint64_t (**)())&unk_1E25C6C20;
  v271 = xmmword_18D314670;
  v273 = (double *)&v274;
  v274 = v43;
  v275 = v44;
  v71 = v351;
  v72 = v352;
  v73 = dword_1ECF23478;
  v363 = 0x300000003;
  v361 = (uint64_t (**)())&unk_1E25C78E0;
  LODWORD(v362) = dword_1ECF23478;
  DWORD1(v362) = dword_1ECF23478;
  DWORD2(v362) = v362 * v362;
  HIDWORD(v362) = dword_1ECF23478;
  v364 = &v365;
  if (dword_1ECF23478)
  {
    v74 = 0;
    v75 = 0;
    v76 = qword_1ECF23488;
    do
    {
      v77 = 0;
      v78 = *(_DWORD *)(v76 + 4 * v75) * v71;
      do
      {
        *((_QWORD *)&v365 + (v74 + v77)) = *(_QWORD *)(v72
                                                                   + 8
                                                                   * (*(_DWORD *)(v76 + 4 * v77) + v78));
        ++v77;
      }
      while (v73 != v77);
      ++v75;
      v74 += v73;
    }
    while (v75 != v73);
  }
  v268 = v43;
  v292 = 0x300000001;
  v290 = (uint64_t (**)())&unk_1E25C6C20;
  v291 = xmmword_18D314670;
  v293 = (double *)v294;
  sub_18D053B2C((uint64_t)&v270, (uint64_t)&v361, (uint64_t)&v290);
  v80 = v271;
  v79 = DWORD1(v271);
  v287 = 0x100000003;
  v285 = (uint64_t (**)())&unk_1E25C7790;
  v288 = (double *)v289;
  *(_QWORD *)&v286 = __PAIR64__(v271, DWORD1(v271));
  DWORD2(v286) = v271 * DWORD1(v271);
  HIDWORD(v286) = DWORD1(v271);
  if (DWORD1(v271))
  {
    v81 = 0;
    v82 = 0;
    v83 = HIDWORD(v271);
    v84 = v273;
    do
    {
      v85 = v81;
      v86 = v82;
      for (j = v80; j; --j)
      {
        v289[v86] = *(_QWORD *)&v84[v85];
        v86 += v79;
        ++v85;
      }
      ++v82;
      v81 += v83;
    }
    while (v82 != v79);
  }
  v282 = 0x100000001;
  v280 = (uint64_t (**)())&unk_1E25C6A40;
  *(_QWORD *)&v88 = 0x100000001;
  *((_QWORD *)&v88 + 1) = 0x100000001;
  v281 = v88;
  v283 = (double *)v284;
  sub_18D053B2C((uint64_t)&v290, (uint64_t)&v285, (uint64_t)&v280);
  if (*(_BYTE *)(v3 + 1208) && (v90 = *(unsigned __int8 *)(v3 + 1320), v90 <= 7) && ((1 << v90) & 0xCE) != 0)
    v91 = (double *)(*(_QWORD *)(v3 + 1168) + 936);
  else
    v91 = (double *)(*(_QWORD *)(v3 + 1168) + 928);
  v92 = 1.0 - *v91;
  if (*(_BYTE *)(v3 + 2536) == 1)
    v92 = 0.999;
  v93 = cnstatistics::InverseNormal(v89, v92, 0.0, sqrt(*v283));
  *(int64x2_t *)v301 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v301[16] = *(_OWORD *)v301;
  v302 = *(_OWORD *)v301;
  v303 = *(_OWORD *)v301;
  v304 = *(_OWORD *)v301;
  v305 = *(_OWORD *)v301;
  v306 = *(_OWORD *)v301;
  v307 = *(_OWORD *)v301;
  v308 = *(_OWORD *)v301;
  v309 = *(_OWORD *)v301;
  v310 = *(_OWORD *)v301;
  v311 = *(_OWORD *)v301;
  v312 = *(_OWORD *)v301;
  v313 = *(_OWORD *)v301;
  v314 = *(_OWORD *)v301;
  v315 = *(_OWORD *)v301;
  v316 = *(_OWORD *)v301;
  v317 = *(_OWORD *)v301;
  v318 = *(_OWORD *)v301;
  v319 = *(_OWORD *)v301;
  v320 = *(_OWORD *)v301;
  v321 = *(_OWORD *)v301;
  v322 = *(_OWORD *)v301;
  v323 = *(_OWORD *)v301;
  v324 = *(_OWORD *)v301;
  v325 = *(_OWORD *)v301;
  v326 = *(_OWORD *)v301;
  v327 = *(_OWORD *)v301;
  v328 = *(_OWORD *)v301;
  v329 = *(_OWORD *)v301;
  v330 = *(_OWORD *)v301;
  v331 = *(_OWORD *)v301;
  v332 = *(_OWORD *)v301;
  v333 = *(_OWORD *)v301;
  v334 = *(_OWORD *)v301;
  v335 = 0x7FF8000000000000;
  v300 = 0;
  v94 = (cnprint::CNPrinter *)sub_18D1C9BF4((uint64_t)v359, (uint64_t)&v354, 0, 1, 1, (uint64_t)&v345, (uint64_t)v301, &v300, v93);
  if (!(_DWORD)v94)
  {
    if (v300)
    {
      v268 = *(_OWORD *)(v360 + 25);
      v44 = *((_QWORD *)v360 + 27);
      if (*(_BYTE *)(v3 + 2536) == 1)
        v45 = 0.0;
      if (cnprint::CNPrinter::GetLogLevel(v94) <= 1)
      {
        LOWORD(v361) = 5;
        LOBYTE(v270) = 1;
        v95 = cnprint::CNLogFormatter::FormatGeneral(v3 + 2488, v3 + 14600, "User speed is statistically zero,speed,%.3lf,threshold,%.3lf", v19, v93);
        if (*(char *)(v3 + 2511) >= 0)
          LOBYTE(v101) = v95;
        else
          v101 = *(_QWORD *)(v3 + 2488);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v361, (unsigned __int8 *)&v270, "%s", v96, v97, v98, v99, v100, v101);
      }
    }
    v102 = 0;
    v103 = v348;
    v348[24] = v19;
    *(_OWORD *)(v103 + 25) = v268;
    *((_QWORD *)v103 + 27) = v44;
    do
    {
      *((_DWORD *)&v365 + v102) = v102;
      ++v102;
    }
    while (v102 != 26);
    v298[3] = v368;
    v298[4] = v369;
    v298[5] = v370;
    v298[0] = v365;
    v298[1] = v366;
    v296 = 0x10000001ALL;
    v294[84] = &unk_1E25C70D0;
    v295 = xmmword_18D319790;
    v297 = (int *)v298;
    v299 = v371;
    v298[2] = v367;
    if (*(_DWORD *)(v3 + 16140))
    {
      v104 = 26;
      v105 = 1;
    }
    else
    {
      sub_18D053AA8(v267, v3 + 15040);
      sub_18D053AA8(v3 + 15832, v3 + 15288);
      sub_18D053AA8(v3 + 15880, v3 + 15336);
      v104 = v295;
      v105 = DWORD1(v295);
    }
    v106 = (_OWORD *)(v3 + 14600);
    *(_DWORD *)(v3 + 16140) = 1;
    if (v104 && v105)
    {
      v265 = v4;
      if (v104 <= v105)
        v107 = v105;
      else
        v107 = v104;
      v108 = *(_DWORD *)(v3 + 15592);
      v109 = *(_DWORD *)(v3 + 15596);
      if (v108 <= v109)
        v110 = *(_DWORD *)(v3 + 15596);
      else
        v110 = *(_DWORD *)(v3 + 15592);
      if (v109)
        v111 = v108 == 0;
      else
        v111 = 1;
      if (v111)
        v112 = 0;
      else
        v112 = v110;
      v269 = v107;
      if ((int)v107 >= 1)
      {
        v113 = 0;
        v114 = 4 * v107;
        do
        {
          v115 = v297[v113 / 4];
          if (v115 < 0 || v115 >= (int)v112)
          {
            LOWORD(v361) = 2;
            LOBYTE(v270) = 4;
            cnprint::CNLogFormatter::FormatGeneral((const void **)(v3 + 16304), "FixStates(): states must contain valid indices into x, Rxx, and zx.");
            if (*(char *)(v3 + 16327) >= 0)
              LOBYTE(v121) = v3 - 80;
            else
              v121 = *(_QWORD *)(v3 + 16304);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v361, (unsigned __int8 *)&v270, "%s", v116, v117, v118, v119, v120, v121);
          }
          v113 += 4;
        }
        while (v114 != v113);
      }
      v122 = *(double *)(v3 + 16208);
      v363 = 0x1A00000001;
      v361 = &off_1E25C6B60;
      v364 = &v365;
      v123 = v112 - 1;
      if ((_DWORD)v112 == 1)
      {
        v126 = 0;
        *(_QWORD *)&v129 = 0x100000001;
        *((_QWORD *)&v129 + 1) = 0x100000001;
        v362 = v129;
        LODWORD(v365) = 0;
        v127 = 1;
        v128 = 1;
        v4 = v265;
        v106 = (_OWORD *)(v3 + 14600);
        v124 = v269;
      }
      else
      {
        v124 = v269;
        if ((int)v112 <= 0)
        {
          v127 = 0;
          v128 = 0;
          v362 = 0uLL;
          v126 = 1;
        }
        else
        {
          v125 = 0;
          LODWORD(v362) = 1;
          DWORD1(v362) = v112;
          *((_QWORD *)&v362 + 1) = v112 | 0x100000000;
          do
          {
            *((_DWORD *)&v365 + v125) = v125;
            ++v125;
          }
          while (v112 != v125);
          v126 = 0;
          v127 = 1;
          v128 = v112;
        }
        v4 = v265;
        v106 = (_OWORD *)(v3 + 14600);
      }
      v411 = 0x10000001ALL;
      *(_QWORD *)&v409.f64[0] = &unk_1E25C70D0;
      v412 = v413;
      *(_QWORD *)&v409.f64[1] = __PAIR64__(v127, v128);
      LODWORD(v410) = v128 * v127;
      HIDWORD(v410) = v128;
      if (v128)
      {
        v130 = 0;
        for (k = 0; k != v128; ++k)
        {
          if ((v126 & 1) == 0)
          {
            v132 = 0;
            do
            {
              v413[k + HIDWORD(v410) * v132] = *((_DWORD *)&v365 + v130 + v132);
              ++v132;
            }
            while (v127 != v132);
          }
          v130 += v127;
        }
      }
      if ((int)v124 > 0)
      {
        v133 = v297;
        v134 = v124;
        do
        {
          v135 = *v133++;
          v413[v135] = -1;
          --v134;
        }
        while (v134);
      }
      v406 = 0x10000001ALL;
      v407 = 0;
      v405 = 0uLL;
      v404 = &unk_1E25C70D0;
      if ((v112 & 0x80000000) != 0)
        __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
      v136 = vdupq_lane_s32((int32x2_t)(v112 | 0x100000000), 0);
      v136.i32[1] = 1;
      v405 = v136;
      v407 = v408;
      v137 = (v112 - v124);
      if ((int)v137 >= 1)
      {
        v138 = 0;
        LODWORD(v139) = 0;
        do
        {
          v139 = (int)v139;
          do
            v140 = v413[v139++];
          while (v140 == -1);
          *((_DWORD *)v408 + v138++) = v140;
        }
        while (v138 != v137);
      }
      v363 = 0x1A00000001;
      v361 = &off_1E25C6B60;
      v364 = &v365;
      v141 = v123 - v137;
      if (v123 == (_DWORD)v137)
      {
        LOBYTE(v142) = 0;
        *(_QWORD *)&v143 = 0x100000001;
        *((_QWORD *)&v143 + 1) = 0x100000001;
        v362 = v143;
        LODWORD(v365) = v112 - 1;
        v144 = 1;
        LODWORD(v145) = 1;
      }
      else if (v123 - (int)v137 < 0)
      {
        v144 = 0;
        LODWORD(v145) = 0;
        v362 = 0uLL;
        LOBYTE(v142) = 1;
      }
      else
      {
        v145 = (v141 + 1);
        LODWORD(v362) = 1;
        DWORD1(v362) = v141 + 1;
        DWORD2(v362) = v141 + 1;
        HIDWORD(v362) = 1;
        v146 = &v365;
        v142 = v145;
        v147 = v112 - v124;
        do
        {
          *(_DWORD *)v146 = v147;
          v146 = (__int128 *)((char *)v146 + 4);
          ++v147;
          --v142;
        }
        while (v142);
        v144 = 1;
      }
      v401 = 0x10000001ALL;
      v396 = &unk_1E25C70D0;
      v402 = v403;
      v397 = v145;
      v398 = v144;
      v399 = v145 * v144;
      v400 = v145;
      if ((_DWORD)v145)
      {
        v148 = 0;
        v149 = 0;
        do
        {
          if ((v142 & 1) == 0)
          {
            v150 = 0;
            do
            {
              v403[v149 + v400 * v150] = *((_DWORD *)&v365 + v148 + v150);
              ++v150;
            }
            while (v144 != v150);
          }
          ++v149;
          v148 += v144;
        }
        while (v149 != (_DWORD)v145);
      }
      sub_18D1D5CC0((uint64_t)&v361, (uint64_t)&v404, (uint64_t)&v396);
      sub_18D1D55CC((uint64_t)&v361, SDWORD2(v295), v297);
      sub_18D1D5654(v266, v112, (uint64_t)&v404);
      sub_18D1D1680((uint64_t)&v361, v267, (uint64_t)&v396);
      v287 = 0x10000001ALL;
      v285 = (uint64_t (**)())&unk_1E25C70A0;
      v286 = xmmword_18D319790;
      v288 = (double *)v289;
      sub_18D0540FC((uint64_t)&v340, (uint64_t)&v361, (uint64_t)&v285);
      sub_18D1D1680((uint64_t)&v361, v267, (uint64_t)&v396);
      sub_18D1D1080((uint64_t)&v361, SDWORD2(v341), v343);
      sub_18D1D6170((uint64_t)v395, (uint64_t)&v396);
      sub_18D1D6170((uint64_t)v394, (uint64_t)&v396);
      sub_18D1D1680((uint64_t)&v361, v3 + 15880, (uint64_t)v395);
      sub_18D1D1778((uint64_t)&v290, v3 + 15832, (uint64_t)v394, (uint64_t)v394);
      v391 = 0x10000001ALL;
      v389 = &unk_1E25C70A0;
      v390 = xmmword_18D319790;
      v392 = (float64x2_t *)v393;
      sub_18D053B2C((uint64_t)&v290, (uint64_t)&v285, (uint64_t)&v389);
      v282 = 0x10000001ALL;
      v280 = (uint64_t (**)())&unk_1E25C70A0;
      v281 = xmmword_18D319790;
      v283 = (double *)v284;
      sub_18D053FA4((uint64_t)&v361, (uint64_t)&v389, (uint64_t)&v280);
      sub_18D1D1680((uint64_t)&v270, v3 + 15880, (uint64_t)v395);
      v151 = sub_18D1D1080((uint64_t)&v270, SDWORD2(v281), v283);
      v280 = (uint64_t (**)())&unk_1E25C5E70;
      v389 = &unk_1E25C5E70;
      v294[20] = &unk_1E25C5EA0;
      v294[2] = &unk_1E25C5EA0;
      v152 = v294[0];
      v290 = (uint64_t (**)())&unk_1E25C7160;
      v294[0] = 0;
      if (v152)
        MEMORY[0x18D78B5BC](v152, 0x1000C8000313F17, v151);
      if ((int)v137 >= 1)
      {
        v363 = 0x1A00000001;
        v361 = &off_1E25C6B60;
        v364 = &v365;
        LODWORD(v362) = 1;
        if ((_DWORD)v137 == 1)
        {
          *(_QWORD *)((char *)&v362 + 4) = 0x100000001;
          HIDWORD(v362) = 1;
          LODWORD(v365) = 0;
        }
        else
        {
          v153 = 0;
          DWORD1(v362) = v137;
          *((_QWORD *)&v362 + 1) = v137 | 0x100000000;
          do
          {
            *((_DWORD *)&v365 + v153) = v153;
            ++v153;
          }
          while (v137 != v153);
        }
        v154 = 0;
        v386 = 0x10000001ALL;
        v381 = &unk_1E25C70D0;
        v387 = v388;
        v382 = v137;
        v383 = 1;
        v384 = v137;
        v385 = v137;
        do
        {
          v388[v154] = *((_DWORD *)&v365 + v154);
          ++v154;
        }
        while ((_DWORD)v137 != v154);
        sub_18D1D6170((uint64_t)v380, (uint64_t)&v381);
        sub_18D1D6170((uint64_t)v379, (uint64_t)&v381);
        sub_18D1D1778((uint64_t)&v361, v3 + 15832, (uint64_t)v380, (uint64_t)v380);
        sub_18D1C9844((uint64_t)v377, (uint64_t)&v361);
        v372 = &unk_1E25C5EA0;
        *(_QWORD *)&v366 = &unk_1E25C5EA0;
        v155 = v365;
        v361 = (uint64_t (**)())&unk_1E25C7160;
        *(_QWORD *)&v365 = 0;
        if (v155)
          MEMORY[0x18D78B5BC](v155, 0x1000C8000313F17);
        sub_18D1D1778((uint64_t)&v361, v3 + 15832, (uint64_t)v380, (uint64_t)v394);
        sub_18D1C9844((uint64_t)v375, (uint64_t)&v361);
        v372 = &unk_1E25C5EA0;
        *(_QWORD *)&v366 = &unk_1E25C5EA0;
        v156 = v365;
        v361 = (uint64_t (**)())&unk_1E25C7160;
        *(_QWORD *)&v365 = 0;
        if (v156)
          MEMORY[0x18D78B5BC](v156, 0x1000C8000313F17);
        sub_18D1C99C8((uint64_t)v373);
        sub_18D1C99C8((uint64_t)&v280);
        v272 = 0x10000001ALL;
        v270 = (uint64_t (**)())&unk_1E25C70D0;
        v271 = xmmword_18D319790;
        v273 = (double *)&v274;
        v292 = 0x10000001ALL;
        v290 = (uint64_t (**)())&unk_1E25C70D0;
        v291 = xmmword_18D319790;
        v293 = (double *)v294;
        v363 = 0x100000068;
        v361 = (uint64_t (**)())&unk_1E25C5F90;
        v362 = xmmword_18D3198A0;
        v364 = &v365;
        v157 = sub_18D054568((uint64_t)v377, (uint64_t)&v270, (uint64_t)&v290, (uint64_t)&v361, (uint64_t)&v280);
        v158 = sub_18D053AA8((uint64_t)v373, (uint64_t)&v280);
        v159 = v284[0];
        v280 = (uint64_t (**)())&unk_1E25C7160;
        v284[0] = 0;
        if (v159)
          MEMORY[0x18D78B5BC](v159, 0x1000C8000313F17, v158);
        sub_18D1D1680((uint64_t)&v361, v3 + 15880, (uint64_t)v379);
        if (v157 <= v122)
        {
          v391 = 0x10000001ALL;
          v389 = &unk_1E25C70A0;
          v390 = xmmword_18D319790;
          v392 = (float64x2_t *)v393;
          sub_18D053B2C((uint64_t)v375, (uint64_t)&v340, (uint64_t)&v389);
          v282 = 0x10000001ALL;
          v280 = (uint64_t (**)())&unk_1E25C70A0;
          v281 = xmmword_18D319790;
          v283 = (double *)v284;
          sub_18D0540FC((uint64_t)&v361, (uint64_t)&v389, (uint64_t)&v280);
          v292 = 0x10000001ALL;
          v290 = (uint64_t (**)())&unk_1E25C70A0;
          v291 = xmmword_18D319790;
          v293 = (double *)v294;
          sub_18D053B2C((uint64_t)v373, (uint64_t)&v280, (uint64_t)&v290);
          sub_18D1D1680((uint64_t)&v270, v267, (uint64_t)&v381);
        }
        else
        {
          v282 = 0x10000001ALL;
          v280 = (uint64_t (**)())&unk_1E25C70A0;
          v281 = xmmword_18D319790;
          v283 = (double *)v284;
          sub_18D053B2C((uint64_t)v375, (uint64_t)&v285, (uint64_t)&v280);
          v292 = 0x10000001ALL;
          v290 = (uint64_t (**)())&unk_1E25C70A0;
          v291 = xmmword_18D319790;
          v293 = (double *)v294;
          sub_18D053FA4((uint64_t)&v361, (uint64_t)&v280, (uint64_t)&v290);
          sub_18D1D1680((uint64_t)&v270, v3 + 15880, (uint64_t)v379);
        }
        v160.n128_f64[0] = sub_18D1D1080((uint64_t)&v270, SDWORD2(v291), v293);
        v161 = v374;
        v373[0] = &unk_1E25C7160;
        v374 = 0;
        if (v161)
          MEMORY[0x18D78B5BC](v161, 0x1000C8000313F17, v160);
        v162 = v376;
        v375[0] = &unk_1E25C7160;
        v376 = 0;
        if (v162)
          MEMORY[0x18D78B5BC](v162, 0x1000C8000313F17, v160);
        v163 = v378;
        v377[0] = &unk_1E25C7160;
        v378 = 0;
        if (v163)
          MEMORY[0x18D78B5BC](v163, 0x1000C8000313F17, v160);
      }
      v363 = 0x10000001ALL;
      v361 = (uint64_t (**)())&unk_1E25C70D0;
      *(_QWORD *)&v362 = v112 | 0x100000000;
      DWORD2(v362) = v112;
      HIDWORD(v362) = v112;
      v364 = &v365;
      if ((int)v112 >= 1)
      {
        v164 = 0;
        v165 = v407;
        do
        {
          *((_DWORD *)&v365 + *((int *)v165 + v164)) = v164;
          ++v164;
        }
        while (v112 != v164);
      }
      sub_18D1D5654(v266, v112, (uint64_t)&v361);
    }
    else
    {
      sub_18D053AA8(v3 + 15040, v267);
      sub_18D053AA8(v3 + 15288, v3 + 15832);
      sub_18D053AA8(v3 + 15336, v3 + 15880);
      *(_DWORD *)(v3 + 16140) = 1;
    }
    sub_18D1922C0((uint64_t)&v361, (uint64_t)v301);
    v166 = sub_18D053AA8((uint64_t)&v336, (uint64_t)&v361);
    v167 = v365;
    v361 = &off_1E25C7340;
    *(_QWORD *)&v365 = 0;
    if (v167)
      MEMORY[0x18D78B5BC](v167, 0x1000C8000313F17, v166);
    sub_18D1BEBD8((uint64_t)&v361, (uint64_t)&v336);
    v292 = 0x1A00000003;
    v290 = &off_1E25C7850;
    *(_QWORD *)&v168.f64[1] = 0x30000004ELL;
    v291 = xmmword_18D319800;
    v293 = (double *)v294;
    v168.f64[0] = v45;
    sub_18D064EF4((uint64_t)&v361, (uint64_t)&v290, v168);
    sub_18D1BEBD8((uint64_t)&v270, (uint64_t)&v336);
    sub_18D1BEC80((uint64_t)&v270, (uint64_t)&v290);
    sub_18D1CD4A0((uint64_t)&v361, (uint64_t)&v345, (uint64_t)&unk_1EE0617C8);
    if (!sub_18D1B8368(v3 + 2696, v106, (uint64_t)&v361, v169, v170))
    {
      sub_18D053AA8(v4, (uint64_t)&v345);
      v173 = v3 + 14880;
      v406 = 0x1C0000001CLL;
      v405 = 0uLL;
      v404 = &unk_1E25C7370;
      v408[0] = 0;
      v407 = 0;
      if (&v404 == (void **)(v3 + 14880))
      {
        v258 = "this != &(A)";
        v259 = 603;
      }
      else
      {
        v174 = *(_DWORD *)(v3 + 14892);
        v405.i32[0] = *(_DWORD *)(v3 + 14888);
        v405.i32[1] = v174;
        v405.i32[2] = v174 * v405.i32[0];
        v405.i32[3] = v405.i32[0];
        sub_18D04A684((uint64_t)&v404);
        v175 = (_QWORD *)v408[0];
        v407 = (_QWORD *)v408[0];
        if (v408[0])
        {
          if (v406 < *(_DWORD *)(v3 + 14888))
          {
            v258 = "this->max_num_rows_ >= A.num_rows_";
            v259 = 616;
          }
          else
          {
            if (HIDWORD(v406) >= *(_DWORD *)(v3 + 14892))
            {
              v176 = *(_DWORD *)(v3 + 14896);
              if (v176 > 3)
              {
                v180 = *(__int128 **)(v3 + 14912);
                v181 = (v176 - 1) >> 1;
                v182 = v180;
                v183 = (_OWORD *)v408[0];
                do
                {
                  v184 = *v182++;
                  *v183++ = v184;
                  --v181;
                }
                while (v181);
                *(_OWORD *)&v175[v176 - 2] = *(__int128 *)((char *)v180 + 8 * (v176 - 2));
              }
              else
              {
                v177 = v405.u32[2];
                if (v405.i32[2] >= 1)
                {
                  v178 = *(uint64_t **)(v3 + 14912);
                  do
                  {
                    v179 = *v178++;
                    *v175++ = v179;
                    --v177;
                  }
                  while (v177);
                }
              }
              v185 = v405.i32[3];
              v186 = v407;
              v187 = dword_1ECF23440;
              v391 = 0x300000003;
              v389 = &unk_1E25C78E0;
              LODWORD(v390) = dword_1ECF23440;
              DWORD1(v390) = dword_1ECF23440;
              DWORD2(v390) = v390 * v390;
              HIDWORD(v390) = dword_1ECF23440;
              v392 = (float64x2_t *)v393;
              if (dword_1ECF23440)
              {
                v188 = 0;
                v189 = 0;
                v190 = qword_1ECF23450;
                do
                {
                  v191 = 0;
                  v192 = *(_DWORD *)(v190 + 4 * v189) * v185;
                  do
                  {
                    v393[v188 + v191] = *(double *)&v186[*(_DWORD *)(v190 + 4 * v191) + v192];
                    ++v191;
                  }
                  while (v187 != v191);
                  ++v189;
                  v188 += v187;
                }
                while (v189 != v187);
              }
              sub_18D1CB528((uint64_t)&v270);
              sub_18D053B2C((uint64_t)&v336, (uint64_t)v350, (uint64_t)&v270);
              sub_18D1CB5B8((uint64_t)&v290, v338, v337);
              sub_18D073454((uint64_t)&v336, (uint64_t)&v290);
              sub_18D04A5F4((uint64_t)&v361);
              sub_18D053B2C((uint64_t)&v270, (uint64_t)&v290, (uint64_t)&v361);
              v193 = sub_18D053AA8(v173, (uint64_t)&v361);
              v194 = v365;
              v361 = (uint64_t (**)())&unk_1E25C7370;
              *(_QWORD *)&v365 = 0;
              if (v194)
                MEMORY[0x18D78B5BC](v194, 0x1000C8000313F17, v193);
              v361 = (uint64_t (**)())&unk_1E25C5E70;
              v195 = v294[0];
              v290 = &off_1E25C7190;
              v294[0] = 0;
              if (v195)
                MEMORY[0x18D78B5BC](v195, 0x1000C8000313F17, v193);
              v196 = v274;
              v270 = &off_1E25C7340;
              *(_QWORD *)&v274 = 0;
              if (v196)
                MEMORY[0x18D78B5BC](v196, 0x1000C8000313F17, v193);
              sub_18D04F764((uint64_t)&v361, v173, (uint64_t)&unk_1ECF23430, (uint64_t)&unk_1ECF23430);
              sub_18D159B20((uint64_t)&v409, (uint64_t)&v361);
              v197 = fmax(1.0 - v45, 0.0);
              v198 = dword_1ECF23440;
              v199 = v405.i32[1];
              v282 = 0x1C00000003;
              v280 = &off_1E25C7880;
              *(_QWORD *)&v281 = __PAIR64__(v405.u32[1], dword_1ECF23440);
              DWORD2(v281) = v405.i32[1] * dword_1ECF23440;
              HIDWORD(v281) = dword_1ECF23440;
              v283 = (double *)v284;
              if (v405.i32[1])
              {
                v200 = 0;
                v201 = 0;
                v202 = qword_1ECF23450;
                v203 = v405.i32[3];
                v204 = v407;
                do
                {
                  if (v198)
                  {
                    for (m = 0; m != v198; ++m)
                      v284[v200 + m] = v204[*(_DWORD *)(v202 + 4 * m) + v203 * v201];
                  }
                  ++v201;
                  v200 += v198;
                }
                while (v201 != v199);
              }
              v287 = 0x1C00000003;
              v285 = &off_1E25C7880;
              *(_QWORD *)&v206.f64[1] = 0x300000054;
              v286 = xmmword_18D3199E0;
              v288 = (double *)v289;
              v206.f64[0] = v197;
              sub_18D064EF4((uint64_t)&v280, (uint64_t)&v285, v206);
              sub_18D1BEDA4((uint64_t)&v361, v173);
              v292 = 0x1C00000003;
              v290 = &off_1E25C7880;
              v291 = xmmword_18D3199E0;
              v293 = (double *)v294;
              sub_18D053FA4((uint64_t)&v285, (uint64_t)&v361, (uint64_t)&v290);
              sub_18D1BEDA4((uint64_t)&v270, v173);
              v207 = v271;
              if ((_DWORD)v271 == (_DWORD)v291)
              {
                v208 = DWORD1(v271);
                if (DWORD1(v271) == DWORD1(v291))
                {
                  if (DWORD1(v271))
                  {
                    v209 = 0;
                    v210 = 0;
                    v211 = 0;
                    v212 = v293;
                    v213 = v277;
                    v214 = v278;
                    v215 = HIDWORD(v271);
                    v216 = v276;
                    v217 = v273;
                    do
                    {
                      if (v207)
                      {
                        v218 = *(_DWORD *)(v216 + 20) * *(_DWORD *)(v214 + 4 * v211);
                        v219 = *(_QWORD *)(v216 + 32);
                        v220 = v209;
                        v221 = v213;
                        v222 = v210;
                        v223 = v207;
                        do
                        {
                          v224 = v212[v220];
                          v225 = *v221++;
                          *(double *)(v219 + 8 * (v225 + v218)) = v224;
                          v217[v222++] = v224;
                          ++v220;
                          --v223;
                        }
                        while (v223);
                      }
                      ++v211;
                      v210 += v215;
                      v209 += v207;
                    }
                    while (v211 != v208);
                  }
                  v226 = v405.u32[0];
                  v227 = dword_1ECF23440;
                  v282 = 0x30000001CLL;
                  v280 = &off_1E25C73A0;
                  *(_QWORD *)&v281 = __PAIR64__(dword_1ECF23440, v405.u32[0]);
                  DWORD2(v281) = dword_1ECF23440 * v405.i32[0];
                  HIDWORD(v281) = v405.i32[0];
                  v283 = (double *)v284;
                  if (dword_1ECF23440)
                  {
                    v228 = 0;
                    v229 = 0;
                    v230 = qword_1ECF23450;
                    v231 = v405.i32[3];
                    v232 = v407;
                    do
                    {
                      if ((_DWORD)v226)
                      {
                        v233 = v231 * *(_DWORD *)(v230 + 4 * v229);
                        v234 = v228;
                        v235 = v226;
                        do
                        {
                          v284[v234++] = v232[v233++];
                          --v235;
                        }
                        while (v235);
                      }
                      ++v229;
                      v228 += v226;
                    }
                    while (v229 != v227);
                  }
                  v287 = 0x30000001CLL;
                  v285 = &off_1E25C73A0;
                  *(_QWORD *)&v236.f64[1] = 0x1C00000054;
                  v286 = xmmword_18D3199F0;
                  v288 = (double *)v289;
                  v236.f64[0] = v197;
                  sub_18D064EF4((uint64_t)&v280, (uint64_t)&v285, v236);
                  sub_18D1BEF9C((uint64_t)&v361, v173);
                  v292 = 0x30000001CLL;
                  v290 = &off_1E25C73A0;
                  v291 = xmmword_18D3199F0;
                  v293 = (double *)v294;
                  sub_18D053FA4((uint64_t)&v285, (uint64_t)&v361, (uint64_t)&v290);
                  sub_18D1BEF9C((uint64_t)&v270, v173);
                  v238 = v271;
                  if ((_DWORD)v271 == (_DWORD)v291)
                  {
                    v239 = DWORD1(v271);
                    if (DWORD1(v271) == DWORD1(v291))
                    {
                      if (DWORD1(v271))
                      {
                        v240 = 0;
                        v241 = 0;
                        v242 = 0;
                        v243 = v293;
                        v244 = v277;
                        v245 = v279;
                        v246 = HIDWORD(v271);
                        v247 = v276;
                        v248 = v273;
                        do
                        {
                          if (v238)
                          {
                            v249 = *(_DWORD *)(v247 + 20) * *(_DWORD *)(v245 + 4 * v242);
                            v250 = *(_QWORD *)(v247 + 32);
                            v251 = v240;
                            v252 = v244;
                            v253 = v241;
                            v254 = v238;
                            do
                            {
                              v255 = v243[v251];
                              v256 = *v252++;
                              *(double *)(v250 + 8 * (v256 + v249)) = v255;
                              v248[v253++] = v255;
                              ++v251;
                              --v254;
                            }
                            while (v254);
                          }
                          ++v242;
                          v241 += v246;
                          v240 += v238;
                        }
                        while (v242 != v239);
                      }
                      v237.f64[0] = (v45 + v45) * v197 + v197 * v197;
                      v292 = 0x300000003;
                      v290 = (uint64_t (**)())&unk_1E25C78E0;
                      v291 = xmmword_18D30BB60;
                      v293 = (double *)v294;
                      sub_18D064EF4((uint64_t)&v389, (uint64_t)&v290, v237);
                      v272 = 0x300000003;
                      v270 = (uint64_t (**)())&unk_1E25C78E0;
                      v271 = xmmword_18D30BB60;
                      v273 = (double *)&v274;
                      sub_18D053FA4((uint64_t)&v290, (uint64_t)&v409, (uint64_t)&v270);
                      sub_18D04F764((uint64_t)&v361, v173, (uint64_t)&unk_1ECF23430, (uint64_t)&unk_1ECF23430);
                      sub_18D16171C((uint64_t)&v361, (uint64_t)&v270);
                      v257 = v408[0];
                      v404 = &unk_1E25C7370;
                      v408[0] = 0;
                      if (v257)
                        MEMORY[0x18D78B5BC](v257, 0x1000C8000313F17);
                      v41 = 0;
                      goto LABEL_176;
                    }
                    v262 = "this->num_cols_ == A.num_cols_";
                    v263 = 377;
                  }
                  else
                  {
                    v262 = "this->num_rows_ == A.num_rows_";
                    v263 = 376;
                  }
                  __assert_rtn("operator=", "cnsubmatrix.h", v263, v262);
                }
                v260 = "this->num_cols_ == A.num_cols_";
                v261 = 377;
              }
              else
              {
                v260 = "this->num_rows_ == A.num_rows_";
                v261 = 376;
              }
              __assert_rtn("operator=", "cnsubmatrix.h", v261, v260);
            }
            v258 = "this->max_num_cols_ >= A.num_cols_";
            v259 = 617;
          }
        }
        else
        {
          v258 = "this->allocated_data_ != NULL";
          v259 = 615;
        }
      }
      __assert_rtn("CNMatrix", "cnmatrix.h", v259, v258);
    }
  }
  v41 = 0xFFFFFFFFLL;
LABEL_176:
  v171 = v339;
  v336 = &off_1E25C7340;
  v339 = 0;
  if (v171)
    MEMORY[0x18D78B5BC](v171, 0x1000C8000313F17);
  v172 = v353;
  v350[0] = &unk_1E25C7160;
  v353 = 0;
  if (v172)
    MEMORY[0x18D78B5BC](v172, 0x1000C8000313F17);
  return v41;
}

void sub_18D1A74D0(_Unwind_Exception *a1)
{
  unint64_t v2;
  unint64_t v3;

  __cxa_guard_abort(&qword_1ECF23108);
  v2 = STACK[0xF58];
  STACK[0xF30] = (unint64_t)&off_1E25C7340;
  STACK[0xF58] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  v3 = STACK[0x1188];
  STACK[0x1160] = (unint64_t)&unk_1E25C7160;
  STACK[0x1188] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1A7894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int8x16_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  uint64_t i;
  _BYTE v77[664];
  _BYTE v78[472];
  _BYTE v79[472];
  void *v80;
  __int128 v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD v84[12];
  void *v85;
  __int128 v86;
  uint64_t v87;
  double *v88;
  double v89[12];
  uint64_t (**v90)();
  __int128 v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE v94[832];
  _BYTE v95[472];
  void *v96;
  __int128 v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD v100[12];
  void *v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD v105[12];
  void *v106;
  __int128 v107;
  uint64_t v108;
  __int128 *v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  void *v122;
  __int128 v123;
  uint64_t v124;
  double *v125;
  uint64_t v126;
  int64x2_t v127[3];
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  uint64_t v160;
  void *v161;
  __int128 v162;
  uint64_t v163;
  double *v164;
  uint64_t v165;
  uint64_t (**v166)();
  uint64_t v167;
  _QWORD v168[5];
  uint64_t v169;
  void *v170;
  __int128 v171;
  uint64_t v172;
  double *v173;
  uint64_t v174;
  uint64_t (**v175)();
  __int128 v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD v179[27];
  __int128 v180;
  uint64_t (**v181)();
  __int128 v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  _OWORD v188[3];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  void *v222;
  __int128 v223;
  uint64_t v224;
  double *v225;
  uint64_t v226;
  void *v227;
  __int128 v228;
  uint64_t v229;
  double *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  _OWORD v236[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  if (!v4
    || (v10 = v7,
        v11 = v6,
        v12 = v5,
        v13 = v3,
        v14 = v2,
        (v15 = (char *)__dynamic_cast(v4, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B48C0, 0)) == 0))
  {
    LOWORD(v181) = 12;
    LOBYTE(v90) = 4;
    v38 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_22:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v90, "time,%.3lf,h-function failure on line %d: %s() %s", v5, v6, v7, v8, v9, SLOBYTE(v38));
    return 0xFFFFFFFFLL;
  }
  v17 = v15;
  v19 = *(_DWORD *)(v14 + 8);
  v18 = *(_DWORD *)(v14 + 12);
  if (v19 <= v18)
    v20 = *(_DWORD *)(v14 + 12);
  else
    v20 = *(_DWORD *)(v14 + 8);
  if (!v19
    || !v18
    || v20 != 26
    || ((v22 = *(_DWORD *)(v13 + 8), v21 = *(_DWORD *)(v13 + 12), v22 <= v21)
      ? (v23 = *(_DWORD *)(v13 + 12))
      : (v23 = *(_DWORD *)(v13 + 8)),
        !v22 || !v21 || v23 != 3))
  {
    LOWORD(v181) = 12;
    LOBYTE(v90) = 4;
    v38 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    goto LABEL_22;
  }
  if (!*((_QWORD *)v15 + 7))
  {
    LOWORD(v181) = 12;
    LOBYTE(v90) = 4;
    v38 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    goto LABEL_22;
  }
  v236[0] = *(_OWORD *)(v15 + 40);
  v24.i64[1] = *((_QWORD *)&v236[0] + 1);
  v24.i64[0] = *((_QWORD *)v15 + 12);
  *(_QWORD *)&v182 = 0;
  v181 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v181, 0, v24, v16);
  *(_QWORD *)&v235 = CNTimeSpan::operator-((uint64_t)v236, &v181, v25, v26);
  *((_QWORD *)&v235 + 1) = v27;
  v28 = *((_QWORD *)v17 + 9);
  v234 = *(_OWORD *)*((_QWORD *)v17 + 8);
  sub_18D1D6E1C((uint64_t)&v232, v28);
  v29 = *((_QWORD *)v17 + 7);
  v30 = atomic_load((unsigned __int8 *)&qword_1ECF23170);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23170))
  {
    v183 = 0x1A00000001;
    v181 = &off_1E25C6B60;
    v184 = &v185;
    v182 = xmmword_18D3198D0;
    for (i = 10; i != 28; ++i)
      *((_DWORD *)&v181 + i) = i - 10;
    sub_18D1B741C((uint64_t)&unk_1ECF23F20, (uint64_t)&v181);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1ECF23F20, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23170);
  }
  v31 = atomic_load((unsigned __int8 *)&qword_1ECF23178);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23178))
  {
    v183 = 0x1A00000001;
    v181 = &off_1E25C6B60;
    v184 = &v185;
    v182 = xmmword_18D314670;
    v185 = 0x700000006;
    v186 = 8;
    sub_18D1B741C((uint64_t)&unk_1ECF23FB0, (uint64_t)&v181);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1ECF23FB0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23178);
  }
  v229 = 0x10000001CLL;
  v227 = &unk_1E25C72B0;
  v228 = xmmword_18D319860;
  v230 = (double *)&v231;
  if (sub_18D1C7470((uint64_t)v236, (uint64_t)&v234, v233, v29, *((_QWORD *)v17 + 11), (uint64_t)&v227))
  {
    LOWORD(v181) = 12;
    LOBYTE(v90) = 4;
    v37 = *((double *)v17 + 6) + (double)*((uint64_t *)v17 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v90, "time,%.3lf,h-function failure on line %d: %s() %s", v32, v33, v34, v35, v36, SLOBYTE(v37));
    return 0xFFFFFFFFLL;
  }
  v224 = 0x100000013;
  v222 = &unk_1E25C66B0;
  v223 = xmmword_18D319860;
  v225 = (double *)&v226;
  v188[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  v188[1] = v188[0];
  v188[2] = v188[0];
  v189 = v188[0];
  v190 = v188[0];
  v191 = v188[0];
  v192 = v188[0];
  v193 = v188[0];
  v194 = v188[0];
  v195 = v188[0];
  v196 = v188[0];
  v197 = v188[0];
  v198 = v188[0];
  v199 = v188[0];
  v200 = v188[0];
  v201 = v188[0];
  v202 = v188[0];
  v203 = v188[0];
  v204 = v188[0];
  v205 = v188[0];
  v206 = v188[0];
  v207 = v188[0];
  v208 = v188[0];
  v209 = v188[0];
  v210 = v188[0];
  v211 = v188[0];
  v212 = v188[0];
  v213 = v188[0];
  v214 = v188[0];
  v215 = v188[0];
  v216 = v188[0];
  v217 = v188[0];
  v218 = v188[0];
  v219 = v188[0];
  v220 = v188[0];
  v221 = 0x7FF8000000000000;
  sub_18D1C75E8(v230, *(double **)(v14 + 32), (uint64_t)&v222, (uint64_t)v188);
  sub_18D1D2320((uint64_t)&v181, v29);
  v179[23] = &v181;
  v179[24] = v236;
  v41 = *((_QWORD *)v17 + 11);
  v179[25] = &v227;
  v179[26] = v41;
  v180 = v235;
  v177 = 0x100000017;
  v175 = &off_1E25C6F20;
  v178 = v179;
  v176 = xmmword_18D3198E0;
  sub_18D04BE88((uint64_t)&v175, 0.0);
  v172 = 0x10000001ALL;
  v170 = &unk_1E25C70A0;
  v171 = xmmword_18D319790;
  v173 = (double *)&v174;
  sub_18D1C99C8((uint64_t)v168);
  sub_18D1CBE44((uint64_t)&v166);
  sub_18D1B63F0((uint64_t)&v90, *(_QWORD *)(v14 + 32), (uint64_t)&unk_1ECF23F20);
  if (sub_18D1BB3E0((uint64_t)&v90, (uint64_t)&v175))
  {
    v46.n128_f64[0] = sub_18D1C741C((uint64_t)v236, (uint64_t)"could not evaluate error dynamics", (uint64_t)"h_DeviceZeroAngularRate_RavenPNT", 4611, v42, v43, v44, v45);
  }
  else
  {
    v163 = 0x100000013;
    v161 = &unk_1E25C66B0;
    v162 = xmmword_18D319860;
    v164 = (double *)&v165;
    if (!sub_18D1C7470((uint64_t)&v235, (uint64_t)&v234, v233, (uint64_t)&v181, *((_QWORD *)v17 + 11), (uint64_t)&v161))
    {
      v127[0] = vdupq_n_s64(0x7FF8000000000000uLL);
      v127[1] = v127[0];
      v127[2] = v127[0];
      v128 = v127[0];
      v129 = v127[0];
      v130 = v127[0];
      v131 = v127[0];
      v132 = v127[0];
      v133 = v127[0];
      v134 = v127[0];
      v135 = v127[0];
      v136 = v127[0];
      v137 = v127[0];
      v138 = v127[0];
      v139 = v127[0];
      v140 = v127[0];
      v141 = v127[0];
      v142 = v127[0];
      v143 = v127[0];
      v144 = v127[0];
      v145 = v127[0];
      v146 = v127[0];
      v147 = v127[0];
      v148 = v127[0];
      v149 = v127[0];
      v150 = v127[0];
      v151 = v127[0];
      v152 = v127[0];
      v153 = v127[0];
      v154 = v127[0];
      v155 = v127[0];
      v156 = v127[0];
      v157 = v127[0];
      v158 = v127[0];
      v159 = v127[0];
      v160 = 0x7FF8000000000000;
      v124 = 0x100000013;
      v122 = &unk_1E25C66B0;
      v123 = xmmword_18D319860;
      v125 = (double *)&v126;
      sub_18D1C75E8(v164, v173, (uint64_t)&v122, (uint64_t)v127);
      v53 = v225[6];
      v54 = v225[7];
      v55 = v225[8];
      v56 = v225[9];
      v57 = sqrt(v54 * v54 + v53 * v53 + v55 * v55 + v56 * v56);
      v58 = 1.0;
      v59 = 0.0;
      v60 = 0.0;
      v61 = 0.0;
      v62 = 0.0;
      v63 = 1.0;
      if (fabs(v57) >= 2.22044605e-16)
      {
        v60 = v53 / v57;
        v61 = v54 / v57;
        v62 = v55 / v57;
        v63 = v56 / v57;
      }
      v118 = v60;
      v119 = v61;
      v120 = v62;
      v121 = v63;
      v64 = v125[6];
      v65 = v125[7];
      v66 = v125[8];
      v67 = v125[9];
      v68 = sqrt(v65 * v65 + v64 * v64 + v66 * v66 + v67 * v67);
      v69 = 0.0;
      v70 = 0.0;
      if (fabs(v68) >= 2.22044605e-16)
      {
        v59 = v64 / v68;
        v69 = v65 / v68;
        v70 = v66 / v68;
        v58 = v67 / v68;
      }
      v71 = sqrt(v69 * v69 + v59 * v59 + v70 * v70 + v58 * v58);
      if (fabs(v71) >= 2.22044605e-16)
      {
        v73 = -v59 / v71;
        v74 = -v69 / v71;
        v75 = -v70 / v71;
        v72 = v58 / v71;
      }
      else
      {
        v72 = 1.0;
        v73 = 0.0;
        v74 = 0.0;
        v75 = 0.0;
      }
      v114 = v73;
      v115 = v74;
      v116 = v75;
      v117 = v72;
      cnrotation::Cat(&v118, (const cnrotation::CNRotation *)&v114, (double *)&v112);
      v108 = 0x100000003;
      v106 = &unk_1E25C7790;
      v107 = xmmword_18D313070;
      v109 = &v110;
      v110 = v112;
      v111 = v113;
      sub_18D1B2810((uint64_t)&v90, (uint64_t)&v106, v13);
      sub_18D053AA8(v12, (uint64_t)&v90);
      v103 = 0x400000003;
      v101 = &unk_1E25C7940;
      v102 = xmmword_18D3130B0;
      v104 = v105;
      *(double *)v105 = v117;
      *(double *)&v105[1] = v116;
      *(double *)&v105[6] = v115;
      *(double *)&v105[7] = -v114;
      *(double *)&v105[3] = -v116;
      *(double *)&v105[2] = -v115;
      *(double *)&v105[4] = v117;
      *(double *)&v105[5] = v114;
      *(double *)&v105[9] = v114;
      *(double *)&v105[8] = v117;
      *(double *)&v105[10] = v115;
      *(double *)&v105[11] = v116;
      v98 = 0x300000004;
      v96 = &unk_1E25C7F70;
      v100[0] = v189;
      v100[1] = *((_QWORD *)&v190 + 1);
      v100[2] = v192;
      v100[3] = *((_QWORD *)&v193 + 1);
      v100[4] = *((_QWORD *)&v189 + 1);
      v100[5] = v191;
      v100[6] = *((_QWORD *)&v192 + 1);
      v100[7] = v194;
      v97 = xmmword_18D3130A0;
      v99 = v100;
      v100[8] = v190;
      v100[9] = *((_QWORD *)&v191 + 1);
      v100[10] = v193;
      v100[11] = *((_QWORD *)&v194 + 1);
      v92 = 0x1A00000003;
      v90 = &off_1E25C7850;
      v93 = v94;
      v91 = xmmword_18D319910;
      sub_18D04BE88((uint64_t)&v90, 0.0);
      sub_18D1CC9BC((uint64_t)v95, (uint64_t)&v90);
      sub_18D1913B4((uint64_t)&v101, (uint64_t)&v96, (uint64_t)v77);
      sub_18D1CBD74((uint64_t)&v90, (uint64_t)v95, (uint64_t)&unk_1ECF23FB0);
      sub_18D1BEC80((uint64_t)&v90, (uint64_t)v77);
      v87 = 0x400000003;
      v85 = &unk_1E25C7940;
      v86 = xmmword_18D3130B0;
      v88 = v89;
      v89[0] = -v121;
      v89[1] = v120;
      v89[6] = v119;
      v89[7] = -v118;
      v89[3] = -v120;
      v89[2] = -v119;
      v89[4] = -v121;
      v89[5] = v118;
      v89[9] = v118;
      v89[8] = -v121;
      v89[10] = v119;
      v89[11] = v120;
      v82 = 0x300000004;
      v80 = &unk_1E25C7F70;
      v81 = xmmword_18D3130A0;
      v83 = v84;
      v84[0] = v128.i64[0];
      v84[1] = v129.i64[1];
      v84[2] = v131.i64[0];
      v84[3] = v132.i64[1];
      v84[4] = v128.i64[1];
      v84[5] = v130.i64[0];
      v84[6] = v131.i64[1];
      v84[7] = v133.i64[0];
      v84[8] = v129.i64[0];
      v84[9] = v130.i64[1];
      v84[10] = v132.i64[0];
      v84[11] = v133.i64[1];
      v92 = 0x1A00000003;
      v90 = &off_1E25C7850;
      v93 = v94;
      v91 = xmmword_18D319910;
      sub_18D04BE88((uint64_t)&v90, 0.0);
      sub_18D1CC9BC((uint64_t)v79, (uint64_t)&v90);
      sub_18D1913B4((uint64_t)&v85, (uint64_t)&v80, (uint64_t)v77);
      sub_18D1CBD74((uint64_t)&v90, (uint64_t)v79, (uint64_t)&unk_1ECF23FB0);
      sub_18D1BEC80((uint64_t)&v90, (uint64_t)v77);
      v92 = 0x1A00000003;
      v90 = &off_1E25C7850;
      v93 = v94;
      v91 = xmmword_18D319800;
      sub_18D04BE88((uint64_t)&v90, 0.0);
      sub_18D053AA8(v11, (uint64_t)&v90);
      sub_18D1CC93C((uint64_t)v77, (uint64_t)v79, (uint64_t)v168);
      sub_18D1CC8D0((uint64_t)v78, (uint64_t)v95, (uint64_t)v77);
      sub_18D1CBD74((uint64_t)&v90, v11, (uint64_t)&unk_1ECF23F20);
      sub_18D1BEC80((uint64_t)&v90, (uint64_t)v78);
      sub_18D1BE948(3u, 3u, (uint64_t)&v90);
      v46 = sub_18D053AA8(v10, (uint64_t)&v90);
      v39 = 0;
      goto LABEL_31;
    }
    v46.n128_f64[0] = sub_18D1C741C((uint64_t)v236, (uint64_t)"could not integrate kinematic states", (uint64_t)"h_DeviceZeroAngularRate_RavenPNT", 4623, v47, v48, v49, v50);
  }
  v39 = 0xFFFFFFFFLL;
LABEL_31:
  v51 = v167;
  v166 = &off_1E25C7130;
  v167 = 0;
  if (v51)
    MEMORY[0x18D78B5BC](v51, 0x1000C8000313F17, v46);
  v52 = v169;
  v168[0] = &unk_1E25C7160;
  v169 = 0;
  if (v52)
    MEMORY[0x18D78B5BC](v52, 0x1000C8000313F17, v46);
  v181 = (uint64_t (**)())&unk_1E25C3648;
  v90 = (uint64_t (**)())&v187;
  sub_18D1C4ED8((void ***)&v90);
  return v39;
}

void sub_18D1A85A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF23178);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1A86AC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D1D2564((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D1A7894;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B48C0, &std::__any_imp::__unique_typeinfo<raven::h_DeviceZeroAngularRateArgs_RavenPNT<double>>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D1A8AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1A8AD8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::MapVectorEvent *a2)
{
  uint64_t v4;
  BOOL IsUserStationary;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *v16;
  int ShouldMapVectorConstraintBeApplied;
  BOOL v18;
  _BOOL4 v19;
  int v21;
  __int128 v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int v27;
  BOOL v28;
  __int128 v29;
  double v30;
  double v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  BOOL v43;
  __int128 v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  __int128 v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  float64x2_t v63;
  uint64_t v64;
  int64x2_t v65;
  void *__p[2];
  _BYTE v67[32];
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  _BYTE v79[32];
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  uint64_t v98;
  void *v99;
  __int128 v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD v108[26];
  __int128 v109;
  void (**v110)(cnnavigation::ENUToECEFJacobian *__hidden);
  __int128 v111;
  __int128 v112;
  double v113[2];
  uint64_t v114;
  float64x2_t v115;
  double v116;
  __double2 v117;
  uint64_t v118;
  float64x2_t v119;
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57) || !*((_BYTE *)this + 58))
    return 0xFFFFFFFFLL;
  *(_QWORD *)&v109 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)&v109 + 1) = v4;
  IsUserStationary = raven::RavenPNTEstimator::IsUserStationary(this);
  v106 = 0x10000001ALL;
  v104 = &unk_1E25C70A0;
  v107 = v108;
  v105 = xmmword_18D319790;
  sub_18D04BE88((uint64_t)&v104, 0.0);
  v101 = 0x100000007;
  v99 = &unk_1E25C81E0;
  v100 = xmmword_18D319810;
  v102 = (double *)&v103;
  v65 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)__p = v65;
  *(int64x2_t *)v67 = v65;
  *(int64x2_t *)&v67[16] = v65;
  v68 = v65;
  v69 = v65;
  v70 = v65;
  v71 = v65;
  v72 = v65;
  v73 = v65;
  v74 = v65;
  v75 = v65;
  v76 = v65;
  v77 = v65;
  v78 = v65;
  *(int64x2_t *)v79 = v65;
  *(int64x2_t *)&v79[16] = v65;
  v80 = v65;
  v81 = v65;
  v82 = v65;
  v83 = v65;
  v84 = v65;
  v85 = v65;
  v86 = v65;
  v87 = v65;
  v88 = v65;
  v89 = v65;
  v90 = v65;
  v91 = v65;
  v92 = v65;
  v93 = v65;
  v94 = v65;
  v95 = v65;
  v96 = v65;
  v97 = v65;
  v98 = 0x7FF8000000000000;
  v6 = *((unsigned __int8 *)this + 2536);
  LOBYTE(v110) = 0;
  if (sub_18D1C9FFC((uint64_t)this + 14616, (uint64_t)&v104, v6, (uint64_t)&v99, (uint64_t)&v65, (BOOL *)&v110, 0.000000015))
  {
    LOWORD(v63.f64[0]) = 12;
    LOBYTE(v119.f64[0]) = 4;
    v110 = (void (**)(cnnavigation::ENUToECEFJacobian *__hidden))(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v111 = v7;
    v8 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v110, "Could not get user position for map vector measurement");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v14) = v8;
    else
      v14 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v119, "%s", v9, v10, v11, v12, v13, v14);
    return 0xFFFFFFFFLL;
  }
  v63 = 0uLL;
  v64 = 0;
  v63 = *(float64x2_t *)v102;
  v64 = *((_QWORD *)v102 + 2);
  v16 = (int64x2_t *)((char *)a2 + 104);
  ShouldMapVectorConstraintBeApplied = raven::RavenEstimator::ShouldMapVectorConstraintBeApplied(this, &v63, (float64x2_t *)((char *)a2 + 104));
  if (ShouldMapVectorConstraintBeApplied)
    v18 = 0;
  else
    v18 = !IsUserStationary;
  v19 = ShouldMapVectorConstraintBeApplied != -2;
  if (*((_BYTE *)this + 2536) != 1)
    goto LABEL_27;
  if (*((_BYTE *)this + 1776))
    v19 = *((unsigned __int8 *)this + 1888) - 3 < 0xFFFFFFFE && ShouldMapVectorConstraintBeApplied != -2;
  if (*((_BYTE *)this + 2064) && fabs(*((double *)this + 276)) > 1.0)
  {
    v19 = 0;
    v18 = 0;
  }
  if (v18 || v19)
  {
    v119 = vmulq_f64(*((float64x2_t *)a2 + 14), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    v120 = 0;
    v117 = __sincos_stret(*((double *)a2 + 32) * 0.0174532925);
    v118 = 0;
    LOBYTE(v111) = 0;
    *(_QWORD *)&v113[0] = 0x300000003;
    *((_QWORD *)&v111 + 1) = &unk_1E25C78E0;
    v112 = xmmword_18D30BB60;
    *(_QWORD *)&v113[1] = &v114;
    v110 = &off_1E25B9588;
    if (!cnnavigation::ENUToECEF((__int128 *)&v117, 1, 1, (uint64_t)&v119, 1, &v115, (uint64_t)&v110))
    {
      if (v102[5] * v115.f64[1] + v102[4] * v115.f64[0] + v102[6] * v116 >= 0.866025404)
      {
        v43 = v18;
      }
      else
      {
        v19 = 0;
        v43 = 0;
      }
      if (v43)
        goto LABEL_28;
      goto LABEL_55;
    }
LABEL_27:
    if (v18)
    {
LABEL_28:
      sub_18D1C7988(&v65, 21);
      v65.i64[0] = (uint64_t)off_1E25C49E0;
      *(_OWORD *)&v67[8] = v109;
      *(_QWORD *)&v67[24] = (char *)this + 2696;
      v68.i64[0] = (uint64_t)this + 14600;
      v68.i64[1] = (uint64_t)this + 14616;
      v69.i64[0] = (uint64_t)this + 2536;
      v69.i64[1] = (uint64_t)this + 2576;
      v22 = *(_OWORD *)((char *)a2 + 248);
      v78 = *(int64x2_t *)((char *)a2 + 232);
      *(_OWORD *)v79 = v22;
      *(_OWORD *)&v79[12] = *(_OWORD *)((char *)a2 + 260);
      v23 = *(int64x2_t *)((char *)a2 + 184);
      v74 = *(int64x2_t *)((char *)a2 + 168);
      v75 = v23;
      v24 = *(int64x2_t *)((char *)a2 + 216);
      v76 = *(int64x2_t *)((char *)a2 + 200);
      v77 = v24;
      v25 = *(int64x2_t *)((char *)a2 + 120);
      v70 = *v16;
      v71 = v25;
      v26 = *(int64x2_t *)((char *)a2 + 152);
      v72 = *(int64x2_t *)((char *)a2 + 136);
      v73 = v26;
      v27 = *((unsigned __int8 *)this + 1208);
      v28 = *((_BYTE *)this + 1208)
         && *((_BYTE *)this + 1320) == 5
         && *((_BYTE *)this + 2368)
         && *((unsigned __int8 *)this + 2480) - 2 < 3;
      v80.i8[0] = v28;
      v106 = 0x100000003;
      v104 = &unk_1E25C7790;
      *(_QWORD *)&v29 = 0x100000001;
      *((_QWORD *)&v29 + 1) = 0x100000001;
      v105 = v29;
      v107 = v108;
      v108[0] = 0;
      *(_QWORD *)&v112 = 0x100000001;
      v110 = (void (**)(cnnavigation::ENUToECEFJacobian *__hidden))&unk_1E25C6A40;
      v111 = v29;
      *((_QWORD *)&v112 + 1) = v113;
      v30 = *(double *)(*((_QWORD *)this + 146) + 2528);
      if (v30 <= 0.0)
      {
        LOWORD(v63.f64[0]) = 12;
        LOBYTE(v119.f64[0]) = 4;
        v99 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v100 = v40;
        v41 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v99, "estimator_map_vector_number_of_cross_track_position_sigmas_in_road_width_ <= 0");
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v39) = v41;
        else
          v39 = *((_QWORD *)this + 311);
      }
      else
      {
        v31 = *((double *)a2 + 30) / v30;
        if (v27 && v31 < 1.0 && *((_BYTE *)this + 1320) != 5)
          v31 = 1.0;
        v113[0] = v31 * v31;
        if (!sub_18D1A9D3C((uint64_t)this + 61288, (double *)&v109, (uint64_t)&v104, (uint64_t)&v110, (uint64_t)&v65))
        {
          v21 = 0;
LABEL_47:
          v65.i64[0] = (uint64_t)&unk_1E25B8EE0;
          if ((v67[7] & 0x80000000) != 0)
            operator delete(__p[0]);
          if (!v19)
            goto LABEL_50;
LABEL_56:
          sub_18D1C7988(&v65, 22);
          v65.i64[0] = (uint64_t)off_1E25C4A08;
          *(_OWORD *)&v67[8] = v109;
          *(_QWORD *)&v67[24] = (char *)this + 2696;
          v68.i64[0] = (uint64_t)this + 14600;
          v68.i64[1] = (uint64_t)this + 14616;
          v69.i64[0] = (uint64_t)this + 2536;
          v69.i64[1] = (uint64_t)this + 2576;
          v44 = *(_OWORD *)((char *)a2 + 248);
          v78 = *(int64x2_t *)((char *)a2 + 232);
          *(_OWORD *)v79 = v44;
          *(_OWORD *)&v79[12] = *(_OWORD *)((char *)a2 + 260);
          v45 = *(int64x2_t *)((char *)a2 + 184);
          v74 = *(int64x2_t *)((char *)a2 + 168);
          v75 = v45;
          v46 = *(int64x2_t *)((char *)a2 + 216);
          v76 = *(int64x2_t *)((char *)a2 + 200);
          v77 = v46;
          v47 = *(int64x2_t *)((char *)a2 + 120);
          v70 = *v16;
          v71 = v47;
          v48 = *(_OWORD *)((char *)a2 + 152);
          v72 = *(int64x2_t *)((char *)a2 + 136);
          v73 = (int64x2_t)v48;
          v106 = 0x100000003;
          v104 = &unk_1E25C7790;
          *(_QWORD *)&v48 = 0x100000001;
          *((_QWORD *)&v48 + 1) = 0x100000001;
          v105 = v48;
          v107 = v108;
          v108[0] = 0x3FF0000000000000;
          *(_QWORD *)&v112 = 0x100000001;
          v110 = (void (**)(cnnavigation::ENUToECEFJacobian *__hidden))&unk_1E25C6A40;
          v111 = v48;
          v49 = *(double *)(*((_QWORD *)this + 146) + 2536);
          *((_QWORD *)&v112 + 1) = v113;
          if (v49 <= 0.0)
          {
            LOWORD(v63.f64[0]) = 12;
            LOBYTE(v119.f64[0]) = 4;
            v99 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
            *(_QWORD *)&v100 = v61;
            v62 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v99, "estimator_map_vector_cross_track_velocity_sigma_ <= 0");
            if (*((char *)this + 2511) >= 0)
              LOBYTE(v60) = v62;
            else
              v60 = *((_QWORD *)this + 311);
          }
          else
          {
            v50 = *(double *)(*((_QWORD *)this + 1831) + 192);
            v51 = 1.0;
            if (fabs(v50) > 0.000000015)
            {
              v52 = v49 / v50;
              if (v52 <= 1.0)
              {
                v51 = 0.0174524064;
                if (v52 >= 0.0174524064)
                  v51 = v52;
              }
            }
            v113[0] = v51 * v51;
            if (!sub_18D1AA818((uint64_t)this + 61288, (double *)&v109, (uint64_t)&v104, (uint64_t)&v110, (uint64_t)&v65))
            {
              v42 = 0;
LABEL_69:
              v65.i64[0] = (uint64_t)&unk_1E25B8EE0;
              if ((v67[7] & 0x80000000) != 0)
                operator delete(__p[0]);
              return (v42 + v21);
            }
            LOWORD(v63.f64[0]) = 12;
            LOBYTE(v119.f64[0]) = 4;
            v99 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
            *(_QWORD *)&v100 = v53;
            v54 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v99, "Could not add measurement - map vector velocity");
            if (*((char *)this + 2511) >= 0)
              LOBYTE(v60) = v54;
            else
              v60 = *((_QWORD *)this + 311);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v119, "%s", v55, v56, v57, v58, v59, v60);
          v42 = -2;
          goto LABEL_69;
        }
        LOWORD(v63.f64[0]) = 12;
        LOBYTE(v119.f64[0]) = 4;
        v99 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v100 = v32;
        v33 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v99, "Could not add measurement - map vector position");
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v39) = v33;
        else
          v39 = *((_QWORD *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v119, "%s", v34, v35, v36, v37, v38, v39);
      v21 = -1;
      goto LABEL_47;
    }
LABEL_55:
    v21 = 0;
    v42 = 0;
    if (!v19)
      return (v42 + v21);
    goto LABEL_56;
  }
  v21 = 0;
LABEL_50:
  v42 = 0;
  return (v42 + v21);
}

void sub_18D1A9390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL raven::RavenPNTEstimator::IsUserStationary(raven::RavenPNTEstimator *this)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  BOOL v4;
  double *v5;
  double v7;

  if (!*((_BYTE *)this + 58))
    return 0;
  if (!*((_BYTE *)this + 1208)
    || ((v1 = *((unsigned __int8 *)this + 1320), v2 = v1 > 7, v3 = (1 << v1) & 0xCE, !v2) ? (v4 = v3 == 0) : (v4 = 1), v4))
  {
    v5 = (double *)(*((_QWORD *)this + 146) + 928);
  }
  else
  {
    v5 = (double *)(*((_QWORD *)this + 146) + 936);
  }
  v7 = *(double *)(*((_QWORD *)this + 1831) + 192);
  return v7 < cnstatistics::InverseNormal(this, 1.0 - *v5, 0.0, sqrt(*(double *)(*((_QWORD *)this + 1864) + 192 * *((int *)this + 3725) + 192)));
}

_QWORD *sub_18D1A9488(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1A949C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  double v15;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  __double2 v52;
  __int128 v53;
  double v54;
  double *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double *v68;
  uint64_t v69;
  uint64_t (**v70)();
  __int128 v71;
  uint64_t v72;
  double *v73;
  _BYTE v74[208];
  void *v75;
  __int128 v76;
  uint64_t v77;
  double *v78;
  uint64_t v79;
  void (**v80)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v81;
  void *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _BYTE v87[32];
  _OWORD v88[12];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  void *v111;
  __int128 v112;
  uint64_t v113;
  float64x2_t *v114;
  uint64_t v115;
  void *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unsigned __int8 v121[264];
  __int128 v122;
  __int128 v123;
  double v124[3];
  float64x2_t v125;
  uint64_t v126;
  float64x2_t v127;
  float64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a3 + 56))
    goto LABEL_12;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  v12 = v10 <= v11 ? *(_DWORD *)(a1 + 12) : *(_DWORD *)(a1 + 8);
  v13 = !v10 || v11 == 0;
  v14 = !v13 && v12 == 26;
  if (!v14
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
LABEL_12:
    *(_WORD *)v87 = 12;
    v121[0] = 4;
    v15 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, v121, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
    return 0xFFFFFFFFLL;
  }
  v123 = *(_OWORD *)(a3 + 40);
  v24 = *(_QWORD *)(a3 + 72);
  v122 = *(_OWORD *)*(_QWORD *)(a3 + 64);
  sub_18D1D6E1C((uint64_t)v121, v24);
  v25 = **(unsigned __int8 **)(a3 + 80);
  v118 = 0x10000001CLL;
  v116 = &unk_1E25C72B0;
  v117 = xmmword_18D319780;
  v119 = &v120;
  switch(v25)
  {
    case 0:
      v72 = 0x100000007;
      v70 = (uint64_t (**)())&unk_1E25C81E0;
      v71 = xmmword_18D319810;
      v73 = (double *)v74;
      if (!sub_18D1C7D64((uint64_t)&v123, &v122, (uint64_t)v121, 0, (uint64_t)&v70))
      {
        *(_QWORD *)&v87[24] = 0x700000001;
        *(_QWORD *)v87 = &off_1E25C6DA0;
        *(_QWORD *)&v88[0] = (char *)v88 + 8;
        *(_OWORD *)&v87[8] = xmmword_18D319820;
        for (i = 10; i != 17; ++i)
          *(_DWORD *)&v87[4 * i] = i + 11;
        sub_18D1BA028((uint64_t)&v80, (uint64_t)v87);
        sub_18D1C8640((uint64_t)v87, (uint64_t)&v116, (uint64_t)&v80);
        sub_18D1C8130((uint64_t)v87, SDWORD2(v71), v73);
        break;
      }
      *(_WORD *)v87 = 12;
      LOBYTE(v80) = 4;
      v37 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, (unsigned __int8 *)&v80, "time,%.3lf,h-function failure on line %d: %s() %s", v32, v33, v34, v35, v36, SLOBYTE(v37));
      return 0xFFFFFFFFLL;
    case 1:
      if (!sub_18D1D0D6C((uint64_t)&v123, &v122, (uint64_t)v121, *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 88), 1, 1, 1, (uint64_t)&v116))break;
      *(_WORD *)v87 = 12;
      LOBYTE(v70) = 4;
      v31 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, (unsigned __int8 *)&v70, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
      return 0xFFFFFFFFLL;
    case 2:
      __assert_rtn("h_MapVector_Position_RavenPNT", "ravenmeasurementfunctions.h", 6187, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
  }
  v113 = 0x100000007;
  v111 = &unk_1E25C81E0;
  v112 = xmmword_18D319810;
  v114 = (float64x2_t *)&v115;
  *(int64x2_t *)v87 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v87[16] = *(_OWORD *)v87;
  v88[0] = *(_OWORD *)v87;
  v88[1] = *(_OWORD *)v87;
  v88[2] = *(_OWORD *)v87;
  v88[3] = *(_OWORD *)v87;
  v88[4] = *(_OWORD *)v87;
  v88[5] = *(_OWORD *)v87;
  v88[6] = *(_OWORD *)v87;
  v88[7] = *(_OWORD *)v87;
  v88[8] = *(_OWORD *)v87;
  v88[9] = *(_OWORD *)v87;
  v88[10] = *(_OWORD *)v87;
  v88[11] = *(_OWORD *)v87;
  v89 = *(_OWORD *)v87;
  v90 = *(_OWORD *)v87;
  v91 = *(_OWORD *)v87;
  v92 = *(_OWORD *)v87;
  v93 = *(_OWORD *)v87;
  v94 = *(_OWORD *)v87;
  v95 = *(_OWORD *)v87;
  v96 = *(_OWORD *)v87;
  v97 = *(_OWORD *)v87;
  v98 = *(_OWORD *)v87;
  v99 = *(_OWORD *)v87;
  v100 = *(_OWORD *)v87;
  v101 = *(_OWORD *)v87;
  v102 = *(_OWORD *)v87;
  v103 = *(_OWORD *)v87;
  v104 = *(_OWORD *)v87;
  v105 = *(_OWORD *)v87;
  v106 = *(_OWORD *)v87;
  v107 = *(_OWORD *)v87;
  v108 = *(_OWORD *)v87;
  v109 = *(_OWORD *)v87;
  v110 = 0x7FF8000000000000;
  LOBYTE(v70) = 0;
  if (sub_18D1C9FFC((uint64_t)&v116, a1, v25, (uint64_t)&v111, (uint64_t)v87, (BOOL *)&v70, 0.000000015)
    || (v127 = *v114,
        v128 = v114[1].f64[0],
        v126 = 0,
        cnnavigation::ECEFToLLA(&v127, 1, v125.f64, 0, (uint64_t)&v70)))
  {
    LOWORD(v70) = 12;
    LOBYTE(v80) = 4;
    v44 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, (unsigned __int8 *)&v80, "time,%.3lf,h-function failure on line %d: %s() %s", v39, v40, v41, v42, v43, SLOBYTE(v44));
    return 0xFFFFFFFFLL;
  }
  v125 = vmulq_f64(*(float64x2_t *)(a3 + 192), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  v81 = 0;
  v84 = 0x300000003;
  v82 = &unk_1E25C78E0;
  v83 = xmmword_18D30BB60;
  v85 = &v86;
  v80 = &off_1E25B9560;
  cnnavigation::ECEFToENU(&v127, 1, 1, &v125, 0, (uint64_t)v124, (uint64_t)&v80, COERCE_DOUBLE(0x300000003));
  v50 = v49;
  v51 = a3 + 40;
  if (v50)
  {
    sub_18D1C741C(v51, (uint64_t)"coordinate conversion error to ENU", (uint64_t)"h_MapVector_Position_RavenPNT", 6227, v45, v46, v47, v48);
    return 0xFFFFFFFFLL;
  }
  v77 = 0x300000003;
  v75 = &unk_1E25C78E0;
  v76 = xmmword_18D30BB60;
  v78 = (double *)&v79;
  if (!v81)
  {
    sub_18D1C741C(v51, (uint64_t)"could not compute Jacobian", (uint64_t)"h_MapVector_Position_RavenPNT", 6235, v45, v46, v47, v48);
    return 0xFFFFFFFFLL;
  }
  sub_18D053AA8((uint64_t)&v75, (uint64_t)&v82);
  v52 = __sincos_stret(*(double *)(a3 + 248) * 0.0174532925);
  *(_QWORD *)&v53 = 0x100000001;
  *((_QWORD *)&v53 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v53;
  v54 = -v52.__cosval;
  v55 = *(double **)(a4 + 32);
  v56 = v52.__sinval * v124[1] - v52.__cosval * v124[0] + **(double **)(a2 + 32);
  *v55 = v56;
  if (!*(_BYTE *)(a3 + 272))
  {
    v57 = *(double *)(a3 + 232);
    if (fabs(v56) > v57 * 0.5)
    {
      if (v56 >= 0.0)
        v57 = -v57;
      *v55 = v56 + v57 * 0.5;
    }
  }
  v58 = *v78;
  v59 = v78[1];
  v60 = &v78[SHIDWORD(v76)];
  v61 = *v60;
  v62 = v60[1];
  v63 = v78[2 * SHIDWORD(v76)];
  v64 = v78[(2 * HIDWORD(v76)) | 1];
  v72 = 0x1A00000001;
  v70 = &off_1E25C6B30;
  v73 = (double *)v74;
  v71 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v70, 0.0);
  v65 = v52.__sinval * v64 + v54 * v63;
  v66 = v52.__sinval * v62 + v54 * v61;
  v67 = v52.__sinval * v59 + v54 * v58;
  sub_18D053AA8(a5, (uint64_t)&v70);
  v68 = *(double **)(a5 + 32);
  *v68 = v67 * *((double *)&v89 + 1);
  v69 = *(int *)(a5 + 20);
  v68[v69] = v66 * *(double *)&v93;
  v68[2 * v69] = v65 * *((double *)&v96 + 1);
  v68[6 * (int)v69] = v66 * *((double *)&v93 + 1) + v67 * *(double *)&v90 + v65 * *(double *)&v97;
  v68[7 * (int)v69] = v66 * *(double *)&v94 + v67 * *((double *)&v90 + 1) + v65 * *((double *)&v97 + 1);
  v68[8 * v69] = v66 * *((double *)&v94 + 1) + v67 * *(double *)&v91 + v65 * *(double *)&v98;
  v68[20 * (int)v69] = v66 * *(double *)&v95 + v67 * *((double *)&v91 + 1) + v65 * *((double *)&v98 + 1);
  v68[21 * (int)v69] = v66 * *((double *)&v95 + 1) + v67 * *(double *)&v92 + v65 * *(double *)&v99;
  v68[22 * (int)v69] = v66 * *(double *)&v96 + v67 * *((double *)&v92 + 1) + v65 * *((double *)&v99 + 1);
  sub_18D1CC610(1u, 1u, (uint64_t)&v70);
  sub_18D053AA8(a6, (uint64_t)&v70);
  return 0;
}

uint64_t sub_18D1A9D3C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D1D2748((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D1A949C;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4A80, &std::__any_imp::__unique_typeinfo<raven::h_MapVectorPositionConstraintArgs_RavenPNT<double>>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D1AA13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1AA168(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D1AA1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  double v15;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  double *v61;
  _BYTE v62[208];
  double v63;
  double v64;
  double v65;
  __double2 v66;
  uint64_t v67;
  unsigned __int8 v68[128];
  _BYTE v69[32];
  _OWORD v70[24];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  double v80;
  void *v81;
  __int128 v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unsigned __int8 v91[264];
  __int128 v92;
  __int128 v93;

  if (!*(_QWORD *)(a3 + 56))
  {
    *(_WORD *)v69 = 12;
    v91[0] = 4;
    v15 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_14;
  }
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  if (v10 <= v11)
    v12 = *(_DWORD *)(a1 + 12);
  else
    v12 = *(_DWORD *)(a1 + 8);
  if (v10)
    v13 = v11 == 0;
  else
    v13 = 1;
  v14 = !v13 && v12 == 26;
  if (!v14
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    *(_WORD *)v69 = 12;
    v91[0] = 4;
    v15 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_14:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v69, v91, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
    return 0xFFFFFFFFLL;
  }
  v93 = *(_OWORD *)(a3 + 40);
  v24 = *(_QWORD *)(a3 + 72);
  v92 = *(_OWORD *)*(_QWORD *)(a3 + 64);
  sub_18D1D6E1C((uint64_t)v91, v24);
  v25 = **(unsigned __int8 **)(a3 + 80);
  v88 = 0x10000001CLL;
  v86 = &unk_1E25C72B0;
  v87 = xmmword_18D319780;
  v89 = &v90;
  if (v25)
  {
    if (v25 != 1)
    {
      if (v25 == 2)
        __assert_rtn("h_MapVector_Velocity_RavenPNT", "ravenmeasurementfunctions.h", 6395, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      goto LABEL_33;
    }
    if (!sub_18D1D0D6C((uint64_t)&v93, &v92, (uint64_t)v91, *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 88), 1, 1, 1, (uint64_t)&v86))goto LABEL_33;
    *(_WORD *)v69 = 12;
    LOBYTE(v58) = 4;
    v57 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v69, (unsigned __int8 *)&v58, "time,%.3lf,h-function failure on line %d: %s() %s", v32, v33, v34, v35, v36, SLOBYTE(v57));
    return 0xFFFFFFFFLL;
  }
  v60 = 0x100000007;
  v58 = (uint64_t (**)())&unk_1E25C81E0;
  v59 = xmmword_18D319810;
  v61 = (double *)v62;
  if (sub_18D1C7D64((uint64_t)&v93, &v92, (uint64_t)v91, 0, (uint64_t)&v58))
  {
    *(_WORD *)v69 = 12;
    v68[0] = 4;
    v31 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v69, v68, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)&v69[24] = 0x700000001;
  *(_QWORD *)v69 = &off_1E25C6DA0;
  *(_QWORD *)&v70[0] = (char *)v70 + 8;
  *(_OWORD *)&v69[8] = xmmword_18D319820;
  for (i = 10; i != 17; ++i)
    *(_DWORD *)&v69[4 * i] = i + 11;
  sub_18D1BA028((uint64_t)v68, (uint64_t)v69);
  sub_18D1C8640((uint64_t)v69, (uint64_t)&v86, (uint64_t)v68);
  sub_18D1C8130((uint64_t)v69, SDWORD2(v59), v61);
LABEL_33:
  v83 = 0x100000007;
  v81 = &unk_1E25C81E0;
  v82 = xmmword_18D319810;
  v84 = (double *)&v85;
  *(int64x2_t *)v69 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v69[16] = *(_OWORD *)v69;
  v70[0] = *(_OWORD *)v69;
  v70[1] = *(_OWORD *)v69;
  v70[2] = *(_OWORD *)v69;
  v70[3] = *(_OWORD *)v69;
  v70[4] = *(_OWORD *)v69;
  v70[5] = *(_OWORD *)v69;
  v70[6] = *(_OWORD *)v69;
  v70[7] = *(_OWORD *)v69;
  v70[8] = *(_OWORD *)v69;
  v70[9] = *(_OWORD *)v69;
  v70[10] = *(_OWORD *)v69;
  v70[11] = *(_OWORD *)v69;
  v70[12] = *(_OWORD *)v69;
  v70[13] = *(_OWORD *)v69;
  v70[14] = *(_OWORD *)v69;
  v70[15] = *(_OWORD *)v69;
  v70[16] = *(_OWORD *)v69;
  v70[17] = *(_OWORD *)v69;
  v70[18] = *(_OWORD *)v69;
  v70[19] = *(_OWORD *)v69;
  v70[20] = *(_OWORD *)v69;
  v70[21] = *(_OWORD *)v69;
  v70[22] = *(_OWORD *)v69;
  v70[23] = *(_OWORD *)v69;
  v71 = *(_OWORD *)v69;
  v72 = *(_OWORD *)v69;
  v73 = *(_OWORD *)v69;
  v74 = *(_OWORD *)v69;
  v75 = *(_OWORD *)v69;
  v76 = *(_OWORD *)v69;
  v77 = *(_OWORD *)v69;
  v78 = *(_OWORD *)v69;
  v79 = *(_OWORD *)v69;
  v80 = NAN;
  LOBYTE(v58) = 0;
  if (sub_18D1C9FFC((uint64_t)&v86, a1, v25, (uint64_t)&v81, (uint64_t)v69, (BOOL *)&v58, 0.000000015))
  {
    LOWORD(v58) = 12;
    v68[0] = 4;
    v43 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, v68, "time,%.3lf,h-function failure on line %d: %s() %s", v38, v39, v40, v41, v42, SLOBYTE(v43));
    return 0xFFFFFFFFLL;
  }
  v44 = v84[4];
  v45 = v84[5];
  v46 = v84[6];
  sub_18D1D290C((uint64_t)v68, *(double *)(a3 + 192) * 0.0174532925, *(double *)(a3 + 200) * 0.0174532925);
  v66 = __sincos_stret(*(double *)(a3 + 248) * 0.0174532925);
  v67 = 0;
  if (!sub_18D056ECC((uint64_t)v68, &v66.__sinval, &v63))
  {
    sub_18D1C741C(a3 + 40, (uint64_t)"could not compute DoT", (uint64_t)"h_MapVector_Velocity_RavenPNT", 6431, v47, v48, v49, v50);
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)&v51 = 0x100000001;
  *((_QWORD *)&v51 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v51;
  **(double **)(a4 + 32) = v45 * v64 + v63 * v44 + v65 * v46 + **(double **)(a2 + 32);
  v52 = v63;
  v53 = v64;
  v54 = v65;
  v60 = 0x1A00000001;
  v58 = &off_1E25C6B30;
  v61 = (double *)v62;
  v59 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v58, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v58);
  v55 = *(int *)(a5 + 20);
  v56 = *(_QWORD *)(a5 + 32);
  *(double *)(v56 + 48 * (_DWORD)v55) = v53 * *((double *)&v74 + 1)
                                        + v52 * *((double *)&v71 + 1)
                                        + v54 * *((double *)&v77 + 1);
  *(double *)(v56 + 56 * (_DWORD)v55) = v53 * *(double *)&v75 + v52 * *(double *)&v72 + v54 * *(double *)&v78;
  *(double *)(v56 + (v55 << 6)) = v53 * *((double *)&v75 + 1)
                                + v52 * *((double *)&v72 + 1)
                                + v54 * *((double *)&v78 + 1);
  *(double *)(v56 + 184 * (_DWORD)v55) = v53 * *(double *)&v76 + v52 * *(double *)&v73 + v54 * *(double *)&v79;
  *(double *)(v56 + 192 * (_DWORD)v55) = v53 * *((double *)&v76 + 1)
                                         + v52 * *((double *)&v73 + 1)
                                         + v54 * *((double *)&v79 + 1);
  *(double *)(v56 + 200 * (_DWORD)v55) = v53 * *(double *)&v77 + v52 * *(double *)&v74 + v54 * v80;
  sub_18D1CC610(1u, 1u, (uint64_t)&v58);
  sub_18D053AA8(a6, (uint64_t)&v58);
  return 0;
}

uint64_t sub_18D1AA818(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D1D29E4((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D1AA1A8;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4AB8, &std::__any_imp::__unique_typeinfo<raven::h_MapVectorVelocityConstraintArgs_RavenPNT<double>>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D1AAC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1AAC44(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::NonHolonomicVelocityConstraintEvent *a2)
{
  char *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  _QWORD v46[2];
  unsigned __int8 v47;
  __int16 v48;
  _QWORD v49[4];
  char v50;
  __int128 v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  void *v60;
  __int128 v61;
  uint64_t v62;
  double *v63;
  double v64;
  void *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;

  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v4 = (char *)a2 + 104;
  v5 = *((double *)a2 + 13);
  if (fabs(v5) == INFINITY
    || (v6 = *((double *)a2 + 14), fabs(v6) == INFINITY)
    || (v7 = *((double *)a2 + 15), fabs(v7) == INFINITY))
  {
    LOWORD(v49[0]) = 12;
    LOBYTE(v60) = 4;
    v8 = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(_QWORD *)a2 + 16))(a2);
    v43 = v9 + (double)v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v49, (unsigned __int8 *)&v60, "t,%.3lf, Invalid constraint axis", v10, v11, v12, v13, v14, SLOBYTE(v43));
    return 0xFFFFFFFFLL;
  }
  if (fabs(sqrt(v6 * v6 + v5 * v5 + v7 * v7)) <= 0.000000015)
  {
    LOWORD(v49[0]) = 12;
    LOBYTE(v60) = 4;
    v24 = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(_QWORD *)a2 + 16))(a2);
    v45 = v25 + (double)v24;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v49, (unsigned __int8 *)&v60, "t,%.3lf, Constraint axis has zero magnitude", v26, v27, v28, v29, v30, SLOBYTE(v45));
    return 0xFFFFFFFFLL;
  }
  if (fabs(*((double *)a2 + 16)) == INFINITY)
  {
    LOWORD(v49[0]) = 12;
    LOBYTE(v60) = 4;
    v17 = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(_QWORD *)a2 + 16))(a2);
    v44 = v18 + (double)v17;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v49, (unsigned __int8 *)&v60, "t,%.3lf, Invalid angular uncertainty on constraint axis", v19, v20, v21, v22, v23, SLOBYTE(v44));
    return 0xFFFFFFFFLL;
  }
  v67 = 0x100000003;
  v65 = &unk_1E25C7790;
  v68 = &v69;
  *(_QWORD *)&v31 = 0x100000001;
  *((_QWORD *)&v31 + 1) = 0x100000001;
  v66 = v31;
  sub_18D04BE88((uint64_t)&v65, 0.0);
  v62 = 0x300000003;
  v60 = &unk_1E25C78E0;
  *(_QWORD *)&v32 = 0x100000001;
  *((_QWORD *)&v32 + 1) = 0x100000001;
  v61 = v32;
  v63 = &v64;
  v33 = *(double *)(*((_QWORD *)this + 1831) + 192) * *((double *)a2 + 16);
  v64 = *(double *)(*((_QWORD *)this + 146) + 296) * *(double *)(*((_QWORD *)this + 146) + 296) + v33 * v33;
  *(_QWORD *)&v59 = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)&v59 + 1) = v34;
  sub_18D1C7988(v49, 23);
  v49[0] = off_1E25C4AA8;
  v51 = v59;
  v57 = *(_OWORD *)v4;
  v58 = *((_QWORD *)v4 + 2);
  v52 = (char *)this + 2696;
  v53 = (char *)this + 14600;
  v54 = (char *)this + 14616;
  v55 = (char *)this + 2536;
  v56 = (char *)this + 2576;
  if (sub_18D1AB7C4((uint64_t)this + 61288, (double *)&v59, (uint64_t)&v65, (uint64_t)&v60, (uint64_t)v49))
  {
    v48 = 12;
    v47 = 4;
    v46[0] = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(_QWORD *)a2 + 16))(a2);
    v46[1] = v35;
    v36 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v46, "Could not add measurement - NHC velocity");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v42) = v36;
    else
      v42 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "%s", v37, v38, v39, v40, v41, v42);
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    v15 = 0;
  }
  v49[0] = &unk_1E25B8EE0;
  if (v50 < 0)
    operator delete((void *)v49[2]);
  return v15;
}

void sub_18D1AAFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1AB010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  double v20;
  cnprint::CNPrinter *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v31;
  cnprint::CNPrinter *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  cnprint::CNPrinter *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  __int128 v64;
  uint64_t v65;
  double *v66;
  double v67;
  double *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  _BYTE v76[72];
  uint64_t (**v77)();
  __int128 v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  _BYTE v83[64];
  _BYTE v84[41];
  _BYTE v85[144];
  void *v86;
  __int128 v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD v90[12];
  _BYTE v91[112];
  _BYTE v92[136];
  _BYTE v93[112];
  void *v94;
  __int128 v95;
  uint64_t v96;
  double *v97;
  __int128 v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  double *v103;
  uint64_t v104;
  double v105[4];
  void *v106;
  __int128 v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD v110[3];
  int64x2_t v111[3];
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  uint64_t v144;
  void *v145;
  __int128 v146;
  uint64_t v147;
  double *v148;
  uint64_t v149;
  void *v150;
  __int128 v151;
  uint64_t v152;
  double *v153;
  uint64_t v154;
  char v155[32];
  uint64_t v156;
  __int128 v157;
  __int128 v158;

  v158 = *(_OWORD *)(a3 + 40);
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 26;
  if (!v13
    || ((v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (v17 = *(_DWORD *)(a2 + 12))
      : (v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (v18 = v16 == 0) : (v18 = 1),
        !v18 ? (v19 = v17 == 1) : (v19 = 0),
        !v19))
  {
    v111[0].i16[0] = 12;
    LOBYTE(v77) = 4;
    v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v77, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v20));
    if (cnprint::CNPrinter::GetLogLevel(v21) <= 1)
    {
      v111[0].i16[0] = 12;
      LOBYTE(v77) = 1;
      v72 = *((double *)&v158 + 1) + (double)(uint64_t)v158;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v77, "t,%.3lf, Warning: h_NonHolonomicVelocityConstraint_RavenPNT called with inadequate matrices", v22, v23, v24, v25, v26, SLOBYTE(v72));
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)(a3 + 56))
  {
    v111[0].i16[0] = 12;
    LOBYTE(v77) = 4;
    v36 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_30;
  }
  v31 = *(_QWORD *)(a3 + 72);
  v157 = *(_OWORD *)*(_QWORD *)(a3 + 64);
  sub_18D1D6E1C((uint64_t)v155, v31);
  v33 = *(double *)(a3 + 96);
  if (fabs(v33) == INFINITY
    || (v34 = *(double *)(a3 + 104), fabs(v34) == INFINITY)
    || (v35 = *(double *)(a3 + 112), fabs(v35) == INFINITY))
  {
    v111[0].i16[0] = 12;
    LOBYTE(v77) = 4;
    v36 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_30:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v77, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v36));
    return 0xFFFFFFFFLL;
  }
  v38 = sqrt(v34 * v34 + v33 * v33 + v35 * v35);
  if (fabs(v38) <= 0.000000015)
  {
    sub_18D1C741C(a3 + 40, (uint64_t)"constraint axis has zero magnitude", (uint64_t)"h_NonHolonomicVelocityConstraint_RavenPNT", 6553, a5, a6, a7, a8);
    return 0xFFFFFFFFLL;
  }
  if (vabdd_f64(1.0, v38) > 0.000000015)
  {
    *(double *)&v75 = v38;
    if (!cnprint::CNPrinter::GetLogLevel(v32))
    {
      v111[0].i16[0] = 12;
      LOBYTE(v77) = 0;
      v73 = *((double *)&v158 + 1) + (double)(uint64_t)v158;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v77, "t,%.3lf, Normalizing constraint axis to unit magnitude", v39, v40, v41, v42, v43, SLOBYTE(v73));
    }
    *(float64x2_t *)(a3 + 96) = vdivq_f64(*(float64x2_t *)(a3 + 96), (float64x2_t)vdupq_lane_s64(v75, 0));
    *(double *)(a3 + 112) = *(double *)(a3 + 112) / *(double *)&v75;
  }
  v44 = *(_QWORD *)(a3 + 56);
  v152 = 0x10000001CLL;
  v150 = &unk_1E25C72B0;
  v151 = xmmword_18D319780;
  v153 = (double *)&v154;
  if (sub_18D1C7470((uint64_t)&v158, (uint64_t)&v157, v156, v44, *(_QWORD *)(a3 + 88), (uint64_t)&v150))
  {
    sub_18D1C741C(a3 + 40, (uint64_t)"could not integrate full states", (uint64_t)"h_NonHolonomicVelocityConstraint_RavenPNT", 6571, v45, v46, v47, v48);
    if (cnprint::CNPrinter::GetLogLevel(v49) <= 1)
    {
      v111[0].i16[0] = 12;
      LOBYTE(v77) = 1;
      v74 = *((double *)&v158 + 1) + (double)(uint64_t)v158;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v77, "t,%.3lf, Error: h_NonHolonomicVelocityConstraint_RavenPNT IntegrateDeviceKinematicStateEstimate failed", v50, v51, v52, v53, v54, SLOBYTE(v74));
    }
    return 0xFFFFFFFFLL;
  }
  v151 = xmmword_18D319780;
  v147 = 0x10000001CLL;
  v145 = &unk_1E25C72B0;
  v146 = xmmword_18D319780;
  v148 = (double *)&v149;
  v111[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  v111[1] = v111[0];
  v111[2] = v111[0];
  v112 = v111[0];
  v113 = v111[0];
  v114 = v111[0];
  v115 = v111[0];
  v116 = v111[0];
  v117 = v111[0];
  v118 = v111[0];
  v119 = v111[0];
  v120 = v111[0];
  v121 = v111[0];
  v122 = v111[0];
  v123 = v111[0];
  v124 = v111[0];
  v125 = v111[0];
  v126 = v111[0];
  v127 = v111[0];
  v128 = v111[0];
  v129 = v111[0];
  v130 = v111[0];
  v131 = v111[0];
  v132 = v111[0];
  v133 = v111[0];
  v134 = v111[0];
  v135 = v111[0];
  v136 = v111[0];
  v137 = v111[0];
  v138 = v111[0];
  v139 = v111[0];
  v140 = v111[0];
  v141 = v111[0];
  v142 = v111[0];
  v143 = v111[0];
  v144 = 0x7FF8000000000000;
  sub_18D1C75E8(v153, *(double **)(a1 + 32), (uint64_t)&v145, (uint64_t)v111);
  v108 = 0x100000003;
  v106 = &unk_1E25C7790;
  v107 = xmmword_18D313070;
  v109 = v110;
  *(double *)v110 = v148[3];
  *(double *)&v110[1] = v148[4];
  *(double *)&v110[2] = v148[5];
  v55 = v148[6];
  v56 = v148[7];
  v57 = v148[8];
  v58 = v148[9];
  v59 = sqrt(v56 * v56 + v55 * v55 + v57 * v57 + v58 * v58);
  if (fabs(v59) >= 2.22044605e-16)
  {
    v61 = v55 / v59;
    v62 = v56 / v59;
    v63 = v57 / v59;
    v60 = v58 / v59;
  }
  else
  {
    v60 = 1.0;
    v61 = 0.0;
    v62 = 0.0;
    v63 = 0.0;
  }
  v105[0] = v61;
  v105[1] = v62;
  v105[2] = v63;
  v105[3] = v60;
  v102 = 0x100000003;
  v100 = &unk_1E25C7790;
  v101 = xmmword_18D313070;
  v103 = (double *)&v104;
  sub_18D162AB8((cnrotation::CNRotation *)v105, (uint64_t)&v106, (uint64_t)&v77);
  sub_18D053AA8((uint64_t)&v100, (uint64_t)&v77);
  v96 = 0x300000001;
  v94 = &unk_1E25C6C20;
  v95 = xmmword_18D314670;
  v97 = (double *)&v98;
  v98 = *(_OWORD *)(a3 + 96);
  v99 = *(_QWORD *)(a3 + 112);
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v105, (uint64_t)v93);
  cnrotation::CNRotation::dRotateVectordq(v105, (uint64_t)&v106, (uint64_t)v92);
  sub_18D1D2BA0((uint64_t)v91, (uint64_t)v111);
  v88 = 0x300000004;
  v87 = xmmword_18D3130A0;
  v90[0] = v112.i64[0];
  v90[1] = v113.i64[1];
  v90[2] = v115.i64[0];
  v90[3] = v116.i64[1];
  v90[4] = v112.i64[1];
  v90[5] = v114.i64[0];
  v90[6] = v115.i64[1];
  v90[7] = v117.i64[0];
  v90[8] = v113.i64[0];
  v90[9] = v114.i64[1];
  v86 = &unk_1E25C7F70;
  v89 = v90;
  v90[10] = v116.i64[0];
  v90[11] = v117.i64[1];
  v79 = 0x1A00000001;
  v77 = &off_1E25C6B30;
  v80 = &v81;
  v78 = xmmword_18D3198F0;
  sub_18D04BE88((uint64_t)&v77, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v77);
  v79 = 0x1A00000001;
  v77 = &off_1E25C6B60;
  v80 = &v81;
  v78 = xmmword_18D314670;
  v81 = 0x400000003;
  v82 = 5;
  sub_18D1B741C((uint64_t)v85, (uint64_t)&v77);
  v79 = 0x1A00000001;
  v77 = &off_1E25C6B60;
  v80 = &v81;
  v78 = xmmword_18D314670;
  v81 = 0x700000006;
  v82 = 8;
  sub_18D1B741C((uint64_t)v84, (uint64_t)&v77);
  sub_18D186B40((uint64_t)&v94, (uint64_t)v93, (uint64_t)v83);
  sub_18D186B40((uint64_t)v83, (uint64_t)v91, (uint64_t)v76);
  sub_18D1D2C20((uint64_t)&v77, a5, (uint64_t)v85);
  sub_18D1D2C74((uint64_t)&v77, (uint64_t)v76);
  sub_18D1D2DF4((uint64_t)v76, (uint64_t)&v94, (uint64_t)v92);
  sub_18D1D2D84((uint64_t)v83, (uint64_t)v76, (uint64_t)&v86);
  sub_18D1D2C20((uint64_t)&v77, a5, (uint64_t)v84);
  sub_18D1D2C74((uint64_t)&v77, (uint64_t)v83);
  *(_QWORD *)&v64 = 0x100000001;
  *((_QWORD *)&v64 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v64;
  v65 = DWORD2(v95);
  if (SDWORD2(v95) < 1)
  {
    v67 = 0.0;
  }
  else
  {
    v66 = v97;
    v67 = 0.0;
    v68 = v103;
    do
    {
      v69 = *v66++;
      v70 = v69;
      v71 = *v68++;
      v67 = v67 + v70 * v71;
      --v65;
    }
    while (v65);
  }
  **(double **)(a4 + 32) = v67 + **(double **)(a2 + 32);
  sub_18D1D2E78((uint64_t)&v77);
  sub_18D053AA8(a6, (uint64_t)&v77);
  return 0;
}

uint64_t sub_18D1AB7C4(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D1D30F0((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D1AB010;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4B98, &std::__any_imp::__unique_typeinfo<raven::h_NonHolonomicVelocityConstraintArgs_RavenPNT<double>>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D1ABBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1ABBF0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::PositionChangeEvent *a2)
{
  __n128 v4;
  uint64_t v5;
  double v6;
  double v7;
  int8x16_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  cnprint::CNPrinter *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  __int32 v41;
  BOOL v42;
  __int32 v43;
  __n128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v61;
  double v62;
  double v63;
  double v64;
  _QWORD v65[4];
  char v66;
  __int128 v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  double v73;
  __int128 v74;
  _BYTE v75[8];
  unsigned int v76;
  _BYTE v77[8];
  unsigned int v78;
  unsigned int v79;
  int8x16_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned __int8 v86;
  void (*v87[5])(uint64_t);

  v87[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  sub_18D04DA0C((uint64_t)v77, (uint64_t)a2 + 200);
  v4 = sub_18D159B20((uint64_t)v75, (uint64_t)a2 + 264);
  v5 = (*(uint64_t (**)(const raven::PositionChangeEvent *, __n128))(*(_QWORD *)a2 + 16))(a2, v4);
  v7 = v6;
  *(_QWORD *)&v74 = v5;
  *((double *)&v74 + 1) = v6;
  sub_18D1C7988(v65, 7);
  v65[0] = off_1E25C43D0;
  v67 = v74;
  v80 = *(int8x16_t *)((char *)a2 + 104);
  v9 = CNTimeSpan::operator-((uint64_t)&v74, &v80, v80, v8);
  v73 = v10 + (double)v9;
  v68 = (char *)this + 2696;
  v69 = (char *)this + 14600;
  v70 = (char *)this + 14616;
  v71 = (char *)this + 2536;
  v72 = (char *)this + 2576;
  if ((v76 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v11 = (char *)this + 61288;
  v83 = 0x100000003;
  v80.i64[0] = (uint64_t)&unk_1E25C7790;
  v84 = &v85;
  v80.i64[1] = v76 | 0x100000000;
  v81 = v76;
  v82 = v76;
  v12 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v80, 0.0);
  if (*((_BYTE *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v87[0]) = 2;
      v86 = 2;
      v61 = v7 + (double)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v13, v14, v15, v16, v17, SLOBYTE(v61));
    }
    else if (*((_BYTE *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
      {
        LOWORD(v87[0]) = 2;
        v86 = 1;
        v63 = v7 + (double)v5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v63));
      }
    }
    else
    {
      v29 = sub_18D03FE4C((double *)&v74, (double *)this + 7662);
      if (v29)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
        {
          LOWORD(v87[0]) = 2;
          v86 = 1;
          v64 = *((double *)&v74 + 1) + (double)(uint64_t)v74;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v64));
        }
      }
      else
      {
        v87[0] = 0;
        v87[1] = 0;
        sub_18D1D3488((void (**)(int))v87, (uint64_t)v65);
        v35 = sub_18D1C7B34((uint64_t *)this + 7666, v87);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v87);
        v36 = *((int *)this + 16806);
        v37 = (v36 + 1);
        if (*((_QWORD *)this + 7668) == v37)
        {
          *((_DWORD *)this + 16806) = v37;
          *((_DWORD *)this + 15340) = v37;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v37;
          *((_DWORD *)this + 15343) = v37;
          *((_DWORD *)this + 16046) = v37;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v37;
          *((_DWORD *)this + 16049) = v37;
          *((_DWORD *)this + 16230) = v37;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v37;
          *((_DWORD *)this + 16233) = v37;
          *((_DWORD *)this + 16588) = v37;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v37;
          *((_DWORD *)this + 16591) = v37;
          *((_DWORD *)this + 16600) = v37;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v37;
          *((_DWORD *)this + 16603) = v37;
          *((_DWORD *)this + 16784) = v37;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v37;
          *((_DWORD *)this + 16787) = v37;
          *((_DWORD *)this + 16796) = v37;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v37;
          *((_DWORD *)this + 16799) = v37;
          *((_DWORD *)this + 16810) = v37;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v37;
          *((_DWORD *)this + 16813) = v37;
          *((_DWORD *)this + 17168) = v37;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v37;
          *((_DWORD *)this + 17171) = v37;
          *(_OWORD *)(*((_QWORD *)this + 7673) + 16 * v36) = v74;
          if (v78 <= v79)
            v38 = v79;
          else
            v38 = v78;
          if (v79)
            v39 = v78 == 0;
          else
            v39 = 1;
          if (v39)
            v40 = 0;
          else
            v40 = v38;
          *(_DWORD *)(*((_QWORD *)this + 8026) + 4 * v36) = v40;
          sub_18D053AA8(*((_QWORD *)this + 8297) + (v36 << 6), (uint64_t)v77);
          if (v80.i32[2] <= (unsigned __int32)v80.i32[3])
            v41 = v80.i32[3];
          else
            v41 = v80.i32[2];
          if (v80.i32[3])
            v42 = v80.i32[2] == 0;
          else
            v42 = 1;
          if (v42)
            v43 = 0;
          else
            v43 = v41;
          *(_DWORD *)(*((_QWORD *)this + 8303) + 4 * v36) = v43;
          sub_18D053AA8(*((_QWORD *)this + 8395) + (v36 << 6), (uint64_t)&v80);
          v44 = sub_18D053AA8(*((_QWORD *)this + 8401) + 112 * (int)v36, (uint64_t)v75);
          *(_QWORD *)(*((_QWORD *)this + 8408) + 8 * v36) = sub_18D1AC1DC;
          if (*v35)
            v45 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v35)(3, v35, 0, &unk_1E25B4858, &std::__any_imp::__unique_typeinfo<raven::h_DevicePositionChangeArgs_RavenPNT<double>>::__id, v44);
          else
            v45 = 0;
          v18 = 0;
          *(_QWORD *)(*((_QWORD *)v11 + 926) + 8 * v36) = v45;
          goto LABEL_43;
        }
        LOWORD(v87[0]) = 2;
        v86 = 4;
        v46 = (*(uint64_t (**)(uint64_t))(v65[0] + 16))((uint64_t)v65);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v47, v48, v49, v50, v51, v46);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
  {
    LOWORD(v87[0]) = 2;
    v86 = 1;
    v62 = v7 + (double)v5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v62));
  }
  LOWORD(v87[0]) = 12;
  v86 = 4;
  v80.i64[0] = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v80.i64[1] = v52;
  v53 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v80, "Could not add measurement - device position-change");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v59) = v53;
  else
    v59 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "%s", v54, v55, v56, v57, v58, v59);
  v18 = 0xFFFFFFFFLL;
LABEL_43:
  v65[0] = &unk_1E25B8EE0;
  if (v66 < 0)
    operator delete((void *)v65[2]);
  return v18;
}

void sub_18D1AC184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1AC1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  char *v20;
  int8x16_t v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  uint64_t j;
  _BYTE v72[737];
  _BYTE v73[112];
  uint64_t (**v74)();
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD v83[47];
  void *v84;
  __int128 v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD v88[12];
  _BYTE v89[64];
  _QWORD v90[5];
  uint64_t v91;
  _BYTE v92[64];
  _BYTE v93[32];
  uint64_t v94;
  _BYTE v95[664];
  _OWORD v96[35];
  uint64_t v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  void *v103;
  __int128 v104;
  uint64_t v105;
  double *v106;
  uint64_t v107;
  uint64_t (**v108)();
  uint64_t v109;
  _QWORD v110[5];
  uint64_t v111;
  void *v112;
  __int128 v113;
  uint64_t v114;
  double *v115;
  uint64_t v116;
  uint64_t (**v117)();
  __int128 v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD v121[27];
  __int128 v122;
  _OWORD v123[3];
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[24];
  _BYTE v130[160];
  uint64_t v131;
  uint64_t (**v132)();
  _BYTE v133[24];
  _QWORD v134[9];
  _QWORD v135[24];
  _BYTE v136[168];
  uint64_t v137;
  uint64_t v138;
  void *v139;
  __int128 v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD v143[20];
  __int128 v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD v147[362];
  __int128 v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _BYTE v152[32];
  void *v153;
  __int128 v154;
  uint64_t v155;
  double *v156;
  uint64_t v157;
  _BYTE v158[112];
  double v159[4];
  _OWORD v160[3];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  void *v194;
  __int128 v195;
  uint64_t v196;
  double *v197;
  uint64_t v198;
  void *v199;
  __int128 v200;
  uint64_t v201;
  double *v202;
  uint64_t v203;
  void *v204;
  __int128 v205;
  uint64_t v206;
  double *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  int8x16_t v213[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = v5;
  v9 = v4;
  v10 = v3;
  v12 = v11;
  v14 = v13;
  v15 = v2;
  v16 = atomic_load((unsigned __int8 *)&qword_1ECF23180);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23180))
  {
    *(_QWORD *)&v133[16] = 0x1300000001;
    v132 = &off_1E25C6830;
    v134[0] = &v134[1];
    *(_OWORD *)v133 = xmmword_18D319900;
    for (i = 10; i != 29; ++i)
      *(_DWORD *)&v133[4 * i - 8] = i - 10;
    sub_18D1B9FA8((uint64_t)&unk_1ECF23AD0, (uint64_t)&v132);
    __cxa_atexit((void (*)(void *))sub_18D1BE790, &unk_1ECF23AD0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23180);
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1ECF23188);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23188))
  {
    *(_QWORD *)&v133[16] = 0x1A00000001;
    v132 = &off_1E25C6B60;
    v134[0] = &v134[1];
    *(_OWORD *)v133 = xmmword_18D3198D0;
    for (j = 10; j != 28; ++j)
      *(_DWORD *)&v133[4 * j - 8] = j - 10;
    sub_18D1B741C((uint64_t)&unk_1EE061460, (uint64_t)&v132);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1EE061460, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23188);
  }
  v18 = atomic_load((unsigned __int8 *)&qword_1ECF23190);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23190))
  {
    *(_QWORD *)&v133[16] = 0x1A00000001;
    v132 = &off_1E25C6B60;
    v134[0] = &v134[1];
    *(_OWORD *)v133 = xmmword_18D314670;
    v134[1] = 0x700000006;
    LODWORD(v134[2]) = 8;
    sub_18D1B741C((uint64_t)&unk_1EE0614F0, (uint64_t)&v132);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1EE0614F0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23190);
  }
  v19 = atomic_load((unsigned __int8 *)&qword_1ECF23198);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23198))
  {
    *(_QWORD *)&v133[16] = 0x1A00000001;
    v132 = &off_1E25C6B60;
    v134[0] = &v134[1];
    *(_OWORD *)v133 = xmmword_18D314670;
    v134[1] = 0x100000000;
    LODWORD(v134[2]) = 2;
    sub_18D1B741C((uint64_t)&unk_1EE061580, (uint64_t)&v132);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1EE061580, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23198);
  }
  if (!v12
    || (v20 = (char *)__dynamic_cast(v12, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4858, 0)) == 0)
  {
    LOWORD(v132) = 12;
    LOBYTE(v74) = 4;
    v38 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_26:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v132, (unsigned __int8 *)&v74, "time,%.3lf,h-function failure on line %d: %s() %s", v3, v4, v5, v6, v7, SLOBYTE(v38));
    return 0xFFFFFFFFLL;
  }
  v22 = v20;
  v24 = *(_DWORD *)(v15 + 8);
  v23 = *(_DWORD *)(v15 + 12);
  if (v24 <= v23)
    v25 = *(_DWORD *)(v15 + 12);
  else
    v25 = *(_DWORD *)(v15 + 8);
  if (!v24
    || !v23
    || v25 != 26
    || ((v27 = *(_DWORD *)(v14 + 8), v26 = *(_DWORD *)(v14 + 12), v27 <= v26)
      ? (v28 = *(_DWORD *)(v14 + 12))
      : (v28 = *(_DWORD *)(v14 + 8)),
        !v27 || !v26 || v28 != 3))
  {
    LOWORD(v132) = 12;
    LOBYTE(v74) = 4;
    v38 = *((double *)v20 + 6) + (double)*((uint64_t *)v20 + 5);
    goto LABEL_26;
  }
  if (!*((_QWORD *)v20 + 7))
  {
    LOWORD(v132) = 12;
    LOBYTE(v74) = 4;
    v38 = *((double *)v20 + 6) + (double)*((uint64_t *)v20 + 5);
    goto LABEL_26;
  }
  v21.i64[0] = *((_QWORD *)v20 + 12);
  if ((v21.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)v21.i64 <= 0.0)
  {
    LOWORD(v132) = 12;
    LOBYTE(v74) = 4;
    v38 = *((double *)v20 + 6) + (double)*((uint64_t *)v20 + 5);
    goto LABEL_26;
  }
  v213[0] = *(int8x16_t *)(v20 + 40);
  *(_QWORD *)v133 = 0;
  v132 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v132, 0, v21, v213[0]);
  *(_QWORD *)&v212 = CNTimeSpan::operator-((uint64_t)v213, &v132, v29, v30);
  *((_QWORD *)&v212 + 1) = v31;
  v32 = v22[9];
  v211 = *(_OWORD *)v22[8];
  sub_18D1D6E1C((uint64_t)&v209, v32);
  v33 = v22[7];
  v206 = 0x10000001CLL;
  v204 = &unk_1E25C72B0;
  v205 = xmmword_18D319860;
  v207 = (double *)&v208;
  if (!sub_18D1C7470((uint64_t)v213, (uint64_t)&v211, v210, v33, v22[11], (uint64_t)&v204))
  {
    v201 = 0x10000001CLL;
    v199 = &unk_1E25C72B0;
    v202 = (double *)&v203;
    v200 = xmmword_18D319780;
    v41 = 0.0;
    sub_18D04BE88((uint64_t)&v199, 0.0);
    sub_18D1D86F8((uint64_t)&v132, (uint64_t)&v199, (uint64_t)&unk_1ECF23AD0);
    sub_18D1C9EF8((uint64_t)&v132, SDWORD2(v205), v207);
    v196 = 0x100000013;
    v194 = &unk_1E25C66B0;
    v195 = xmmword_18D319860;
    v197 = (double *)&v198;
    v160[0] = vdupq_n_s64(0x7FF8000000000000uLL);
    v160[1] = v160[0];
    v160[2] = v160[0];
    v161 = v160[0];
    v162 = v160[0];
    v163 = v160[0];
    v164 = v160[0];
    v165 = v160[0];
    v166 = v160[0];
    v167 = v160[0];
    v168 = v160[0];
    v169 = v160[0];
    v170 = v160[0];
    v171 = v160[0];
    v172 = v160[0];
    v173 = v160[0];
    v174 = v160[0];
    v175 = v160[0];
    v176 = v160[0];
    v177 = v160[0];
    v178 = v160[0];
    v179 = v160[0];
    v180 = v160[0];
    v181 = v160[0];
    v182 = v160[0];
    v183 = v160[0];
    v184 = v160[0];
    v185 = v160[0];
    v186 = v160[0];
    v187 = v160[0];
    v188 = v160[0];
    v189 = v160[0];
    v190 = v160[0];
    v191 = v160[0];
    v192 = v160[0];
    v193 = 0x7FF8000000000000;
    sub_18D1C75E8(v202, *(double **)(v15 + 32), (uint64_t)&v194, (uint64_t)v160);
    v42 = v197[6];
    v43 = v197[7];
    v44 = v197[8];
    v45 = v197[9];
    v46 = sqrt(v43 * v43 + v42 * v42 + v44 * v44 + v45 * v45);
    v47 = 1.0;
    v48 = 0.0;
    v49 = 0.0;
    if (fabs(v46) >= 2.22044605e-16)
    {
      v41 = v42 / v46;
      v48 = v43 / v46;
      v49 = v44 / v46;
      v47 = v45 / v46;
    }
    v159[0] = v41;
    v159[1] = v48;
    v159[2] = v49;
    v159[3] = v47;
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v159, (uint64_t)v158);
    v155 = 0x10000001CLL;
    v153 = &unk_1E25C72B0;
    v154 = xmmword_18D319860;
    v156 = (double *)&v157;
    if (sub_18D1C7470((uint64_t)&v212, (uint64_t)&v211, v210, v33, v22[11], (uint64_t)&v153))
    {
      sub_18D1C741C((uint64_t)(v22 + 5), (uint64_t)"could not integrate full states", (uint64_t)"h_DevicePositionChange_RavenPNT", 2915, v50, v51, v52, v53);
      return 0xFFFFFFFFLL;
    }
    *(_OWORD *)&v133[8] = 0u;
    memset(v134, 0, 25);
    v134[7] = 0x100000013;
    v134[6] = 0;
    v134[5] = 0;
    v135[22] = 0x100000013;
    v134[8] = v135;
    v135[19] = &unk_1E25C66B0;
    v135[21] = 0;
    v135[20] = 0;
    v136[152] = 1;
    v135[23] = v136;
    v137 = 0;
    v141 = 0x100000013;
    v138 = 0;
    v139 = &unk_1E25C66B0;
    v140 = xmmword_18D319860;
    v142 = v143;
    v145 = 0x1300000013;
    v143[19] = &unk_1E25C6680;
    v144 = xmmword_18D319870;
    v146 = v147;
    v149 = 0xF00000013;
    v147[361] = &unk_1E25C6620;
    v148 = xmmword_18D319880;
    v150 = &v151;
    v133[0] = 0;
    v136[160] = 0;
    v134[4] = &unk_1E25C66B0;
    v132 = (uint64_t (**)())&unk_1E25C3648;
    memset(v152, 0, sizeof(v152));
    memset(v123, 0, 41);
    v127 = 0x100000013;
    v126 = 0;
    v124 = &unk_1E25C66B0;
    v125 = 0;
    v129[22] = 0x100000013;
    v128 = v129;
    v129[19] = &unk_1E25C66B0;
    v129[21] = 0;
    v129[20] = 0;
    v130[152] = 1;
    v129[23] = v130;
    v131 = 0;
    if (sub_18D1CB920(v33, (uint64_t)v123))
    {
      v58 = 2929;
      v59 = "could not get integrator configuration";
    }
    else
    {
      if (!sub_18D18FCC0((uint64_t)&v132, (uint64_t)v123))
      {
        v121[23] = &v132;
        v121[24] = v213;
        v60 = v22[11];
        v121[25] = &v204;
        v121[26] = v60;
        v122 = v212;
        v119 = 0x100000017;
        v117 = &off_1E25C6F20;
        v120 = v121;
        v118 = xmmword_18D3198E0;
        sub_18D04BE88((uint64_t)&v117, 0.0);
        v114 = 0x10000001ALL;
        v112 = &unk_1E25C70A0;
        v113 = xmmword_18D319790;
        v115 = (double *)&v116;
        sub_18D1C99C8((uint64_t)v110);
        sub_18D1CBE44((uint64_t)&v108);
        sub_18D1B63F0((uint64_t)&v74, *(_QWORD *)(v15 + 32), (uint64_t)&unk_1EE061460);
        if (sub_18D1BB3E0((uint64_t)&v74, (uint64_t)&v117))
        {
          v65.n128_f64[0] = sub_18D1C741C((uint64_t)(v22 + 5), (uint64_t)"could not evaluate position dynamics", (uint64_t)"h_DevicePositionChange_RavenPNT", 2958, v61, v62, v63, v64);
          v39 = 0xFFFFFFFFLL;
        }
        else
        {
          v105 = 0x10000001CLL;
          v103 = &unk_1E25C72B0;
          v106 = (double *)&v107;
          v104 = xmmword_18D319780;
          sub_18D04BE88((uint64_t)&v103, 0.0);
          sub_18D1D86F8((uint64_t)&v74, (uint64_t)&v103, (uint64_t)&unk_1ECF23AD0);
          sub_18D1C9EF8((uint64_t)&v74, SDWORD2(v154), v156);
          v100 = 0x100000013;
          v98 = &unk_1E25C66B0;
          v99 = xmmword_18D319860;
          v101 = &v102;
          v96[0] = vdupq_n_s64(0x7FF8000000000000uLL);
          v96[1] = v96[0];
          v96[2] = v96[0];
          v96[3] = v96[0];
          v96[4] = v96[0];
          v96[5] = v96[0];
          v96[6] = v96[0];
          v96[7] = v96[0];
          v96[8] = v96[0];
          v96[9] = v96[0];
          v96[10] = v96[0];
          v96[11] = v96[0];
          v96[12] = v96[0];
          v96[13] = v96[0];
          v96[14] = v96[0];
          v96[15] = v96[0];
          v96[16] = v96[0];
          v96[17] = v96[0];
          v96[18] = v96[0];
          v96[19] = v96[0];
          v96[20] = v96[0];
          v96[21] = v96[0];
          v96[22] = v96[0];
          v96[23] = v96[0];
          v96[24] = v96[0];
          v96[25] = v96[0];
          v96[26] = v96[0];
          v96[27] = v96[0];
          v96[28] = v96[0];
          v96[29] = v96[0];
          v96[30] = v96[0];
          v96[31] = v96[0];
          v96[32] = v96[0];
          v96[33] = v96[0];
          v96[34] = v96[0];
          v97 = 0x7FF8000000000000;
          sub_18D1C75E8(v106, v115, (uint64_t)&v98, (uint64_t)v96);
          sub_18D1CBB40((uint64_t)v72);
          sub_18D1CBAD4((uint64_t)&v74, (uint64_t)v158, (uint64_t)v72);
          sub_18D1CBBB0((uint64_t)v90);
          sub_18D1C99C8((uint64_t)&v79);
          sub_18D0540FC((uint64_t)v90, (uint64_t)v110, (uint64_t)&v79);
          sub_18D1CBA68((uint64_t)v95, (uint64_t)&v74, (uint64_t)&v79);
          v66 = v83[0];
          v79 = &unk_1E25C7160;
          v83[0] = 0;
          if (v66)
            MEMORY[0x18D78B5BC](v66, 0x1000C8000313F17);
          v79 = &unk_1E25C5E70;
          v67 = v91;
          v90[0] = &unk_1E25C7160;
          v91 = 0;
          if (v67)
            MEMORY[0x18D78B5BC](v67, 0x1000C8000313F17);
          sub_18D1B63F0((uint64_t)&v74, *(_QWORD *)(v15 + 32), (uint64_t)&unk_1EE061460);
          sub_18D1CBC84((uint64_t)v93, (uint64_t)v95, (uint64_t)&v74);
          sub_18D1D1680((uint64_t)&v74, (uint64_t)&v204, (uint64_t)&unk_1EE061580);
          sub_18D1D1680((uint64_t)v72, (uint64_t)&v153, (uint64_t)&unk_1EE061580);
          v81 = 0x10000001ALL;
          v79 = &unk_1E25C70A0;
          v80 = xmmword_18D319790;
          v82 = v83;
          sub_18D0540FC((uint64_t)&v74, (uint64_t)v72, (uint64_t)&v79);
          sub_18D1D32FC((uint64_t)&v84, (uint64_t)v158, (uint64_t)&v79);
          sub_18D1D336C((uint64_t)v90, v94);
          sub_18D1D328C((uint64_t)v92, (uint64_t)&v84, (uint64_t)v90);
          sub_18D1B2810((uint64_t)&v74, (uint64_t)v92, v14);
          sub_18D053AA8(v10, (uint64_t)&v74);
          sub_18D1D1680((uint64_t)&v74, (uint64_t)&v194, (uint64_t)&unk_1EE061580);
          sub_18D1D1680((uint64_t)v72, (uint64_t)&v98, (uint64_t)&unk_1EE061580);
          v81 = 0x10000001ALL;
          v79 = &unk_1E25C70A0;
          v80 = xmmword_18D319790;
          v82 = v83;
          sub_18D0540FC((uint64_t)&v74, (uint64_t)v72, (uint64_t)&v79);
          sub_18D1636E4((uint64_t)v89, (uint64_t)&v79);
          cnrotation::CNRotation::dRotateVectordq(v159, (uint64_t)v89, (uint64_t)v90);
          v86 = 0x300000004;
          v85 = xmmword_18D3130A0;
          v88[0] = v161;
          v88[1] = *((_QWORD *)&v162 + 1);
          v88[2] = v164;
          v88[3] = *((_QWORD *)&v165 + 1);
          v88[4] = *((_QWORD *)&v161 + 1);
          v88[5] = v163;
          v88[6] = *((_QWORD *)&v164 + 1);
          v88[7] = v166;
          v88[8] = v162;
          v88[9] = *((_QWORD *)&v163 + 1);
          v84 = &unk_1E25C7F70;
          v87 = v88;
          v88[10] = v165;
          v88[11] = *((_QWORD *)&v166 + 1);
          sub_18D1CBD74((uint64_t)&v74, (uint64_t)v95, (uint64_t)&unk_1EE0614F0);
          sub_18D1913B4((uint64_t)v90, (uint64_t)&v84, (uint64_t)v73);
          sub_18D1D33CC((uint64_t)&v79, (uint64_t)&v74, (uint64_t)v73);
          sub_18D1CBD74((uint64_t)v72, (uint64_t)v95, (uint64_t)&unk_1EE0614F0);
          sub_18D1BEC80((uint64_t)v72, (uint64_t)&v79);
          v76 = 0x1A00000003;
          v74 = &off_1E25C7850;
          v77 = &v78;
          v75 = xmmword_18D319800;
          sub_18D04BE88((uint64_t)&v74, 0.0);
          sub_18D053AA8(v9, (uint64_t)&v74);
          sub_18D1CBD74((uint64_t)&v74, v9, (uint64_t)&unk_1EE061460);
          sub_18D1BEC80((uint64_t)&v74, (uint64_t)v95);
          sub_18D1BE948(3u, 3u, (uint64_t)&v74);
          v65 = sub_18D053AA8(v8, (uint64_t)&v74);
          v39 = 0;
        }
        v68 = v109;
        v108 = &off_1E25C7130;
        v109 = 0;
        if (v68)
          MEMORY[0x18D78B5BC](v68, 0x1000C8000313F17, v65);
        v69 = v111;
        v110[0] = &unk_1E25C7160;
        v111 = 0;
        if (v69)
          MEMORY[0x18D78B5BC](v69, 0x1000C8000313F17, v65);
        goto LABEL_40;
      }
      v58 = 2934;
      v59 = "could not set integrator configuration";
    }
    sub_18D1C741C((uint64_t)(v22 + 5), (uint64_t)v59, (uint64_t)"h_DevicePositionChange_RavenPNT", v58, v54, v55, v56, v57);
    v39 = 0xFFFFFFFFLL;
LABEL_40:
    v132 = (uint64_t (**)())&unk_1E25C3648;
    v74 = (uint64_t (**)())v152;
    sub_18D1C4ED8((void ***)&v74);
    return v39;
  }
  sub_18D1C741C((uint64_t)(v22 + 5), (uint64_t)"could not integrate full states", (uint64_t)"h_DevicePositionChange_RavenPNT", 2880, v34, v35, v36, v37);
  return 0xFFFFFFFFLL;
}

void sub_18D1AD200(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF23198);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1AD3A8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::PositionEvent *a2)
{
  BOOL v4;
  uint64_t v5;
  _BOOL8 IsPositionMeasurementUsable;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  double v14;
  int v15;
  __int128 *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  _BOOL8 ShouldInflatePositionStateUncertaintyForVL;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  cnprint::CNPrinter *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  __n128 v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  uint64_t v94;
  unsigned __int8 v95;
  unsigned __int8 v96[64];
  double v97;
  _QWORD v98[2];
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t (**v102)();
  __int128 v103;
  uint64_t v104;
  __int128 *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  uint64_t (**v110)();
  int v111;
  std::string v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char *v116;
  __int128 v117;
  void *v118;
  __int128 v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD v122[7];
  __int128 v123;
  void *v124;
  __int128 v125;
  uint64_t v126;
  __int128 *v127;
  __int128 v128;
  uint64_t v129;
  uint64_t (**v130)();
  uint64_t v131;
  std::string v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char *v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (*((_BYTE *)this + 58))
    v4 = *((_BYTE *)a2 + 280) == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  IsPositionMeasurementUsable = raven::RavenEstimator::IsPositionMeasurementUsable(this, (uint64_t)a2);
  if (!IsPositionMeasurementUsable)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)IsPositionMeasurementUsable) <= 1)
    {
      LOWORD(v118) = 12;
      LOBYTE(v130) = 1;
      v102 = (uint64_t (**)())(*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)&v103 = v35;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v102, "WiFi position measurement not used in non-dense urban fitness case");
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v41) = (_BYTE)this - 72;
      else
        v41 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v118, (unsigned __int8 *)&v130, "%s", v36, v37, v38, v39, v40, v41);
    }
    return 0;
  }
  if (*((_BYTE *)this + 2536) == 1)
  {
    v8 = *((unsigned __int8 *)a2 + 200);
    if (v8 <= 0xB && ((1 << v8) & 0xC10) != 0 && raven::RavenPNTEstimator::IsUserStationary(this))
      return 0;
  }
  v126 = 0x100000003;
  v124 = &unk_1E25C7790;
  v125 = xmmword_18D313070;
  v127 = &v128;
  v128 = *((_OWORD *)a2 + 18);
  v9 = *((_QWORD *)a2 + 39);
  v129 = *((_QWORD *)a2 + 38);
  v120 = 0x300000003;
  v118 = &unk_1E25C78E0;
  v119 = xmmword_18D30BB60;
  v121 = v122;
  v10 = *((_QWORD *)a2 + 40);
  v11 = *((_QWORD *)a2 + 41);
  v122[0] = v9;
  v122[1] = v10;
  v12 = *((_QWORD *)a2 + 42);
  v122[2] = v11;
  v122[3] = v10;
  v13 = *(_OWORD *)((char *)a2 + 344);
  v122[4] = v12;
  v122[5] = v13;
  v122[6] = v11;
  v123 = v13;
  v14 = *((double *)a2 + 14);
  v94 = *((_QWORD *)a2 + 13);
  *(_QWORD *)&v117 = v94;
  *((double *)&v117 + 1) = v14;
  sub_18D1C7988(&v110, 6);
  v110 = off_1E25C3938;
  v113 = v117;
  *(_QWORD *)&v114 = (char *)this + 2696;
  *((_QWORD *)&v114 + 1) = (char *)this + 14600;
  *(_QWORD *)&v115 = (char *)this + 14616;
  *((_QWORD *)&v115 + 1) = (char *)this + 2536;
  v116 = (char *)this + 2576;
  v15 = *((unsigned __int8 *)a2 + 200);
  if (v15 == 14)
  {
    if (!*((_BYTE *)this + 58))
      goto LABEL_39;
    if (sub_18D1B8600((uint64_t)this + 15032))
    {
      v104 = 0x10000001CLL;
      v102 = (uint64_t (**)())&unk_1E25C72B0;
      v103 = xmmword_18D313070;
      v105 = &v106;
      v16 = (__int128 *)*((_QWORD *)this + 1831);
      v106 = *v16;
      *(_QWORD *)&v107 = *((_QWORD *)v16 + 2);
      sub_18D1C9B64((uint64_t)v98, 3, 3);
      v17 = (_QWORD *)*((_QWORD *)this + 1864);
      v18 = v100;
      *v100 = *v17;
      v19 = *((int *)this + 3725);
      v20 = &v17[v19];
      v21 = v99;
      v18[v99] = *v20;
      v22 = 2 * v19;
      v19 *= 16;
      v18[2 * v21] = *(_QWORD *)((char *)v17 + v19);
      v18[1] = *v20;
      v18[(int)v21 + 1] = v20[1];
      v23 = &v17[v22];
      v24 = &v18[2 * (int)v21];
      v24[1] = v23[1];
      v18[2] = *(_QWORD *)((char *)v17 + v19);
      v18[(int)v21 + 2] = v23[1];
      v24[2] = v23[2];
      v97 = 1.0;
      sub_18D1636E4((uint64_t)v96, (uint64_t)&v102);
      sub_18D163614((uint64_t)&v130, (uint64_t)v98);
      ShouldInflatePositionStateUncertaintyForVL = raven::RavenEstimator::ShouldInflatePositionStateUncertaintyForVL((char *)this, (uint64_t)&v124, (uint64_t)&v118, (uint64_t)v96, (uint64_t)&v130, &v97);
      if (ShouldInflatePositionStateUncertaintyForVL)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)ShouldInflatePositionStateUncertaintyForVL) <= 1)
        {
          *(_WORD *)v96 = 12;
          v95 = 1;
          v130 = (uint64_t (**)())(*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v131 = v26;
          v27 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v130, "kVLF Inflate Position State Uncertainty sf,%.3lf", v97);
          if (*((char *)this + 2511) >= 0)
            LOBYTE(v33) = v27;
          else
            v33 = *((_QWORD *)this + 311);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "%s", v28, v29, v30, v31, v32, v33);
        }
        raven::RavenPNTEstimator::InflatePositionUncertainty(this, v97, 1);
      }
      sub_18D1C7988(&v130, 31);
      v136 = 0;
      v135 = 0u;
      v134 = 0u;
      v130 = off_1E25C35C0;
      v111 = v131;
      std::string::operator=(&v112, &v132);
      v113 = v133;
      v114 = v134;
      v115 = v135;
      v116 = v136;
      v130 = (uint64_t (**)())&unk_1E25B8EE0;
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      v113 = v117;
      *(_QWORD *)&v114 = (char *)this + 2696;
      *((_QWORD *)&v114 + 1) = (char *)this + 14600;
      *(_QWORD *)&v115 = (char *)this + 14616;
      *((_QWORD *)&v115 + 1) = (char *)this + 2536;
      v116 = (char *)this + 2576;
      v34 = v101;
      v98[0] = &unk_1E25C7370;
      v101 = 0;
      if (v34)
        MEMORY[0x18D78B5BC](v34, 0x1000C8000313F17);
      goto LABEL_39;
    }
    v15 = *((unsigned __int8 *)a2 + 200);
  }
  if (v15 == 15)
  {
    sub_18D1C7988(&v102, 30);
    v109 = 0;
    v108 = 0u;
    v107 = 0u;
    v102 = off_1E25C3598;
    v111 = v103;
    std::string::operator=(&v112, (const std::string *)((char *)&v103 + 8));
    v113 = v106;
    v114 = v107;
    v115 = v108;
    v116 = v109;
    v102 = (uint64_t (**)())&unk_1E25B8EE0;
    if (SHIBYTE(v105) < 0)
      operator delete(*((void **)&v103 + 1));
    v113 = v117;
    *(_QWORD *)&v114 = (char *)this + 2696;
    *((_QWORD *)&v114 + 1) = (char *)this + 14600;
    *(_QWORD *)&v115 = (char *)this + 14616;
    *((_QWORD *)&v115 + 1) = (char *)this + 2536;
    v116 = (char *)this + 2576;
  }
LABEL_39:
  if ((v119 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v104 = 0x100000003;
  v42 = (char *)this + 61288;
  v102 = (uint64_t (**)())&unk_1E25C7790;
  v105 = &v106;
  *(_QWORD *)&v103 = v119 | 0x100000000;
  DWORD2(v103) = v119;
  HIDWORD(v103) = v119;
  v43 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v102, 0.0);
  if (*((_BYTE *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v130) = 2;
      v96[0] = 2;
      v90 = v14 + (double)v94;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v130, v96, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v44, v45, v46, v47, v48, SLOBYTE(v90));
    }
    else if (*((_BYTE *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v43) <= 1)
      {
        LOWORD(v130) = 2;
        v96[0] = 1;
        v92 = v14 + (double)v94;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v130, v96, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v54, v55, v56, v57, v58, SLOBYTE(v92));
      }
    }
    else
    {
      v59 = sub_18D03FE4C((double *)&v117, (double *)this + 7662);
      if (v59)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v59) <= 1)
        {
          LOWORD(v130) = 2;
          v96[0] = 1;
          v93 = *((double *)&v117 + 1) + (double)(uint64_t)v117;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v130, v96, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v60, v61, v62, v63, v64, SLOBYTE(v93));
        }
      }
      else
      {
        v130 = 0;
        v131 = 0;
        sub_18D1D370C((void (**)(int))&v130, (uint64_t)&v110);
        v65 = sub_18D1C7B34((uint64_t *)this + 7666, (void (**)(uint64_t))&v130);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v130);
        v66 = *((int *)this + 16806);
        v67 = (v66 + 1);
        if (*((_QWORD *)this + 7668) == v67)
        {
          *((_DWORD *)this + 16806) = v67;
          *((_DWORD *)this + 15340) = v67;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v67;
          *((_DWORD *)this + 15343) = v67;
          *((_DWORD *)this + 16046) = v67;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v67;
          *((_DWORD *)this + 16049) = v67;
          *((_DWORD *)this + 16230) = v67;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v67;
          *((_DWORD *)this + 16233) = v67;
          *((_DWORD *)this + 16588) = v67;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v67;
          *((_DWORD *)this + 16591) = v67;
          *((_DWORD *)this + 16600) = v67;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v67;
          *((_DWORD *)this + 16603) = v67;
          *((_DWORD *)this + 16784) = v67;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v67;
          *((_DWORD *)this + 16787) = v67;
          *((_DWORD *)this + 16796) = v67;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v67;
          *((_DWORD *)this + 16799) = v67;
          *((_DWORD *)this + 16810) = v67;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v67;
          *((_DWORD *)this + 16813) = v67;
          *((_DWORD *)this + 17168) = v67;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v67;
          *((_DWORD *)this + 17171) = v67;
          *(_OWORD *)(*((_QWORD *)this + 7673) + 16 * v66) = v117;
          if (v125 <= DWORD1(v125))
            v68 = DWORD1(v125);
          else
            v68 = v125;
          if (DWORD1(v125))
            v69 = (_DWORD)v125 == 0;
          else
            v69 = 1;
          if (v69)
            v70 = 0;
          else
            v70 = v68;
          *(_DWORD *)(*((_QWORD *)this + 8026) + 4 * v66) = v70;
          sub_18D053AA8(*((_QWORD *)this + 8297) + (v66 << 6), (uint64_t)&v124);
          if (v103 <= DWORD1(v103))
            v71 = DWORD1(v103);
          else
            v71 = v103;
          if (DWORD1(v103))
            v72 = (_DWORD)v103 == 0;
          else
            v72 = 1;
          if (v72)
            v73 = 0;
          else
            v73 = v71;
          *(_DWORD *)(*((_QWORD *)this + 8303) + 4 * v66) = v73;
          sub_18D053AA8(*((_QWORD *)this + 8395) + (v66 << 6), (uint64_t)&v102);
          v74 = sub_18D053AA8(*((_QWORD *)this + 8401) + 112 * (int)v66, (uint64_t)&v118);
          *(_QWORD *)(*((_QWORD *)this + 8408) + 8 * v66) = sub_18D1ADF08;
          if (*v65)
            v75 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v65)(3, v65, 0, &unk_1E25B4408, &std::__any_imp::__unique_typeinfo<raven::h_DevicePositionArgs_RavenPNT<double>>::__id, v74);
          else
            v75 = 0;
          v5 = 0;
          *(_QWORD *)(*((_QWORD *)v42 + 926) + 8 * v66) = v75;
          goto LABEL_77;
        }
        LOWORD(v130) = 2;
        v96[0] = 4;
        v76 = ((uint64_t (*)(uint64_t (***)()))v110[2])(&v110);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v130, v96, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v77, v78, v79, v80, v81, v76);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v43) <= 1)
  {
    LOWORD(v130) = 2;
    v96[0] = 1;
    v91 = v14 + (double)v94;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v130, v96, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v49, v50, v51, v52, v53, SLOBYTE(v91));
  }
  LOWORD(v130) = 12;
  v96[0] = 4;
  v102 = (uint64_t (**)())(*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v103 = v82;
  v83 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v102, "Could not add measurement - position, src,%d", *((unsigned __int8 *)a2 + 200));
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v89) = v83;
  else
    v89 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v130, v96, "%s", v84, v85, v86, v87, v88, v89);
  v5 = 0xFFFFFFFFLL;
LABEL_77:
  v110 = (uint64_t (**)())&unk_1E25B8EE0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  return v5;
}

void sub_18D1ADE08(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_18D076A08(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1ADF08(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double *v25;
  double *v26;
  double *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  _QWORD *v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  _BYTE v37[624];
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  double *v77;
  uint64_t v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  double *v82;
  uint64_t v83;
  _BYTE v84[32];
  uint64_t v85;
  __int128 v86;
  __int128 v87;

  if (!lpsrc
    || (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4408, 0)) == 0)
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    v23 = MEMORY[0x30] + (double)MEMORY[0x28];
    goto LABEL_20;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 3))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  if (!*((_QWORD *)v13 + 7))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  v87 = *(_OWORD *)(v13 + 40);
  v21 = *((_QWORD *)v13 + 9);
  v86 = *(_OWORD *)*((_QWORD *)v13 + 8);
  sub_18D1D6E1C((uint64_t)v84, v21);
  v22 = *((_QWORD *)v14 + 7);
  v81 = 0x10000001CLL;
  v79 = &unk_1E25C72B0;
  v80 = xmmword_18D319780;
  v82 = (double *)&v83;
  if (sub_18D1C7470((uint64_t)&v87, (uint64_t)&v86, v85, v22, *((_QWORD *)v14 + 11), (uint64_t)&v79))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    v23 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, (unsigned __int8 *)&v38, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  v80 = xmmword_18D319780;
  v76 = 0x10000001CLL;
  v74 = &unk_1E25C72B0;
  v75 = xmmword_18D319780;
  v77 = (double *)&v78;
  v38 = vdupq_n_s64(0x7FF8000000000000uLL);
  v39 = v38;
  v40 = v38;
  v41 = v38;
  v42 = v38;
  v43 = v38;
  v44 = v38;
  v45 = v38;
  v46 = v38;
  v47 = v38;
  v48 = v38;
  v49 = v38;
  v50 = v38;
  v51 = v38;
  v52 = v38;
  v53 = v38;
  v54 = v38;
  v55 = v38;
  v56 = v38;
  v57 = v38;
  v58 = v38;
  v59 = v38;
  v60 = v38;
  v61 = v38;
  v62 = v38;
  v63 = v38;
  v64 = v38;
  v65 = v38;
  v66 = v38;
  v67 = v38;
  v68 = v38;
  v69 = v38;
  v70 = v38;
  v71 = v38;
  v72 = v38;
  v73 = 0x7FF8000000000000;
  sub_18D1C75E8(v82, *(double **)(a1 + 32), (uint64_t)&v74, (uint64_t)&v38);
  *(_OWORD *)(a4 + 8) = xmmword_18D313070;
  v25 = v77;
  v26 = *(double **)(a2 + 32);
  v27 = *(double **)(a4 + 32);
  *v27 = *v77 + *v26;
  v27[1] = v25[1] + v26[1];
  v27[2] = v25[2] + v26[2];
  v35 = 0x1A00000003;
  v33 = &off_1E25C7850;
  v36 = v37;
  v34 = xmmword_18D319800;
  sub_18D04BE88((uint64_t)&v33, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v33);
  v28 = *(_QWORD **)(a5 + 32);
  v29 = v38.i64[1];
  *v28 = v38.i64[0];
  v30 = *(_DWORD *)(a5 + 20);
  v28[v30 + 1] = v29;
  v28[2 * v30 + 2] = v39.i64[0];
  v35 = 0x300000003;
  v33 = (uint64_t (**)())&unk_1E25C78E0;
  v36 = v37;
  v34 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v33, 0.0);
  v31 = HIDWORD(v34) + 1;
  v32 = v36;
  *v36 = 0x3FF0000000000000;
  v32[v31] = 0x3FF0000000000000;
  v32[2 * v31] = 0x3FF0000000000000;
  sub_18D053AA8(a6, (uint64_t)&v33);
  return 0;
}

void raven::RavenPNTEstimator::InflatePositionUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[9];
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 v21[56];
  void *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF23098);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23098))
  {
    v24 = 0x300000001;
    v22 = &unk_1E25C6C50;
    v25 = &v26;
    v23 = xmmword_18D314670;
    v26 = 0x100000000;
    v27 = 2;
    sub_18D16169C((uint64_t)&v22, (uint64_t)v14);
    v17 = 0x300000001;
    v15 = &unk_1E25C6C50;
    v18 = &v19;
    v16 = xmmword_18D314670;
    v19 = 0x1500000014;
    v20 = 22;
    sub_18D16169C((uint64_t)&v15, (uint64_t)v21);
    sub_18D1B7AF8((uint64_t)&unk_1ECF236D0, (uint64_t)v14, (uint64_t)v21);
    __cxa_atexit((void (*)(void *))sub_18D1B7B68, &unk_1ECF236D0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23098);
  }
  sub_18D1D63C0((uint64_t)v14, (uint64_t)&unk_1ECF236D0);
  sub_18D0778AC(&v22, "InflatePositionUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, (uint64_t)&v22, a3, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(v22);
  LOWORD(v22) = 12;
  v21[0] = 2;
  v14[0] = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of position error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, v21, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1AE4DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF23098);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1AE51C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D1AE55C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D1AE59C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::RateGyroEvent *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  unsigned __int8 v14;
  __int16 v15;
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;

  if (*((_BYTE *)this + 57))
  {
    v16[0] = &unk_1E25C2C38;
    v16[1] = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
    v16[2] = v4;
    v17 = *(_OWORD *)((char *)a2 + 104);
    v18 = *((_QWORD *)a2 + 15);
    result = sub_18D1AE6BC((uint64_t)this + 44440, (uint64_t)v16);
    if (!(_DWORD)result)
      return result;
    v15 = 12;
    v14 = 4;
    v13[0] = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
    v13[1] = v6;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v13, "Could not add measurement - rotation rates");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v12) = (_BYTE)this - 72;
    else
      v12 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "%s", v7, v8, v9, v10, v11, v12);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D1AE6BC(uint64_t a1, uint64_t a2)
{
  int v4;
  double v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unsigned int v25;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
  {
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)(a1 + 40) = 0;
    v20 = *(_OWORD *)(a2 + 8);
    v21 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 72) = v21;
    *(_OWORD *)(a1 + 56) = v20;
    goto LABEL_34;
  }
  if (v4 == 350 && sub_18D1CB820(a1))
    return 0xFFFFFFFFLL;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v8 = v6;
  v9 = *(_DWORD *)(a1 + 44);
  if (v7)
    v10 = 1;
  else
    v10 = (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  v11 = v10;
  while (1)
  {
    v12 = v9;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48 * v9 + 48) + 16))(a1 + 48 * v9 + 48);
    if ((v11 & 1) != 0)
    {
      v15 = v13 || (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v15 && v7 != v13)
        break;
    }
    if (v8 >= v14)
      goto LABEL_28;
LABEL_21:
    v16 = a1 + 48 + 48 * ((v12 + 1) % 0x15E);
    v17 = a1 + 48 + 48 * v12;
    v18 = *(_OWORD *)(v17 + 8);
    v19 = *(_OWORD *)(v17 + 24);
    *(_QWORD *)(v16 + 40) = *(_QWORD *)(v17 + 40);
    *(_OWORD *)(v16 + 24) = v19;
    *(_OWORD *)(v16 + 8) = v18;
    if (v12 == *(_DWORD *)(a1 + 40))
    {
      v22 = v17 + 8;
      goto LABEL_29;
    }
    v9 = v12 - 1;
    if (!v12)
      v9 = 349;
    if (v9 == *(_DWORD *)(a1 + 44))
      goto LABEL_30;
  }
  if (v7 < v13)
    goto LABEL_21;
LABEL_28:
  v22 = a1 + 48 * ((v12 + 1) % 0x15E) + 56;
LABEL_29:
  v23 = *(_OWORD *)(a2 + 8);
  v24 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)v22 = v23;
  *(_OWORD *)(v22 + 16) = v24;
  v9 = *(_DWORD *)(a1 + 44);
LABEL_30:
  ++*(_DWORD *)(a1 + 8);
  if (v9 == 349)
    v25 = 0;
  else
    v25 = v9 + 1;
  *(_DWORD *)(a1 + 44) = v25;
LABEL_34:
  sub_18D1CB864(a1);
  return 0;
}

uint64_t sub_18D1AE8AC(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  double v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  uint64_t (**v48)();
  __int128 v49;
  uint64_t v50;
  double *v51;
  _BYTE v52[208];
  _BYTE v53[32];
  _OWORD v54[23];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  void *v66;
  __int128 v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned __int8 v76[264];
  __int128 v77;
  __int128 v78;
  unsigned __int8 v79;

  if (!lpsrc
    || (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B3FF0, 0)) == 0)
  {
    *(_WORD *)v53 = 12;
    v76[0] = 4;
    v23 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v53, v76, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    *(_WORD *)v53 = 12;
    v76[0] = 4;
    v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_21;
  }
  v78 = *(_OWORD *)(v13 + 40);
  v21 = *((_QWORD *)v13 + 9);
  v77 = *(_OWORD *)*((_QWORD *)v13 + 8);
  sub_18D1D6E1C((uint64_t)v76, v21);
  v22 = **((unsigned __int8 **)v14 + 10);
  v73 = 0x10000001CLL;
  v71 = &unk_1E25C72B0;
  v72 = xmmword_18D319780;
  v74 = &v75;
  if (v22)
  {
    if (v22 == 1)
    {
      if (sub_18D1D0D6C((uint64_t)&v78, &v77, (uint64_t)v76, *((_QWORD *)v14 + 7), *((_QWORD *)v14 + 11), 1, 1, 1, (uint64_t)&v71))
      {
        *(_WORD *)v53 = 12;
        LOBYTE(v48) = 4;
        v46 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v53, (unsigned __int8 *)&v48, "time,%.3lf,h-function failure on line %d: %s() %s", v30, v31, v32, v33, v34, SLOBYTE(v46));
        return 0xFFFFFFFFLL;
      }
    }
    else if (v22 == 2)
    {
      __assert_rtn("h_UserSpeed_RavenPNT", "ravenmeasurementfunctions.h", 6935, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
    }
  }
  else
  {
    v50 = 0x100000007;
    v48 = (uint64_t (**)())&unk_1E25C81E0;
    v49 = xmmword_18D319810;
    v51 = (double *)v52;
    if (sub_18D1C7D64((uint64_t)&v78, &v77, (uint64_t)v76, 0, (uint64_t)&v48))
    {
      *(_WORD *)v53 = 12;
      LOBYTE(v66) = 4;
      v45 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v53, (unsigned __int8 *)&v66, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v45));
      return 0xFFFFFFFFLL;
    }
    *(_QWORD *)&v53[24] = 0x700000001;
    *(_QWORD *)v53 = &off_1E25C6DA0;
    *(_QWORD *)&v54[0] = (char *)v54 + 8;
    *(_OWORD *)&v53[8] = xmmword_18D319820;
    for (i = 10; i != 17; ++i)
      *(_DWORD *)&v53[4 * i] = i + 11;
    sub_18D1BA028((uint64_t)&v66, (uint64_t)v53);
    sub_18D1C8640((uint64_t)v53, (uint64_t)&v71, (uint64_t)&v66);
    sub_18D1C8130((uint64_t)v53, SDWORD2(v49), v51);
  }
  v68 = 0x100000007;
  v66 = &unk_1E25C81E0;
  v67 = xmmword_18D319810;
  v69 = (double *)&v70;
  *(int64x2_t *)v53 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v53[16] = *(_OWORD *)v53;
  v54[0] = *(_OWORD *)v53;
  v54[1] = *(_OWORD *)v53;
  v54[2] = *(_OWORD *)v53;
  v54[3] = *(_OWORD *)v53;
  v54[4] = *(_OWORD *)v53;
  v54[5] = *(_OWORD *)v53;
  v54[6] = *(_OWORD *)v53;
  v54[7] = *(_OWORD *)v53;
  v54[8] = *(_OWORD *)v53;
  v54[9] = *(_OWORD *)v53;
  v54[10] = *(_OWORD *)v53;
  v54[11] = *(_OWORD *)v53;
  v54[12] = *(_OWORD *)v53;
  v54[13] = *(_OWORD *)v53;
  v54[14] = *(_OWORD *)v53;
  v54[15] = *(_OWORD *)v53;
  v54[16] = *(_OWORD *)v53;
  v54[17] = *(_OWORD *)v53;
  v54[18] = *(_OWORD *)v53;
  v54[19] = *(_OWORD *)v53;
  v54[20] = *(_OWORD *)v53;
  v54[21] = *(_OWORD *)v53;
  v54[22] = *(_OWORD *)v53;
  v55 = *(_OWORD *)v53;
  v56 = *(_OWORD *)v53;
  v57 = *(_OWORD *)v53;
  v58 = *(_OWORD *)v53;
  v59 = *(_OWORD *)v53;
  v60 = *(_OWORD *)v53;
  v61 = *(_OWORD *)v53;
  v62 = *(_OWORD *)v53;
  v63 = *(_OWORD *)v53;
  v64 = *(_OWORD *)v53;
  v65 = 0x7FF8000000000000;
  LOBYTE(v48) = 0;
  if (!sub_18D1C9FFC((uint64_t)&v71, a1, v22, (uint64_t)&v66, (uint64_t)v53, (BOOL *)&v48, 0.000000015))
  {
    *(_QWORD *)&v41 = 0x100000001;
    *((_QWORD *)&v41 + 1) = 0x100000001;
    *(_OWORD *)(a4 + 8) = v41;
    **(double **)(a4 + 32) = v69[3] + **(double **)(a2 + 32);
    v50 = 0x1A00000001;
    v48 = &off_1E25C6B30;
    v51 = (double *)v52;
    v49 = xmmword_18D3198F0;
    sub_18D04BE88((uint64_t)&v48, 0.0);
    sub_18D053AA8(a5, (uint64_t)&v48);
    v42 = *(_DWORD *)(a5 + 20);
    v43 = *(_QWORD *)(a5 + 32);
    *(_QWORD *)(v43 + 184 * v42) = v55;
    *(_QWORD *)(v43 + 192 * v42) = *((_QWORD *)&v55 + 1);
    *(_QWORD *)(v43 + 200 * v42) = v56;
    v50 = 0x100000001;
    v48 = (uint64_t (**)())&unk_1E25C6A40;
    v51 = (double *)v52;
    *(_QWORD *)&v44 = 0x100000001;
    *((_QWORD *)&v44 + 1) = 0x100000001;
    v49 = v44;
    sub_18D04BE88((uint64_t)&v48, 0.0);
    *v51 = 1.0;
    sub_18D053AA8(a6, (uint64_t)&v48);
    return 0;
  }
  LOWORD(v48) = 12;
  v79 = 4;
  v47 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v79, "time,%.3lf,h-function failure on line %d: %s() %s", v36, v37, v38, v39, v40, SLOBYTE(v47));
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D1AEE1C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  cnprint::CNPrinter *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  __n128 v46;
  uint64_t (*v47)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  void *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned __int8 v67;
  void (*v68[5])(uint64_t);

  v68[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a4 + 8);
  if ((v6 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v64 = 0x100000003;
  v59 = &unk_1E25C7790;
  v65 = &v66;
  v60 = v6;
  v61 = 1;
  v62 = v6;
  v63 = v6;
  v13 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v59, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v68[0]) = 2;
      v67 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v68[0]) = 2;
    v67 = 2;
    v55 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v14, v15, v16, v17, v18, SLOBYTE(v55));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v68[0]) = 2;
      v67 = 1;
      v57 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v57));
    }
    return 0xFFFFFFFFLL;
  }
  v29 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v29)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
    {
      LOWORD(v68[0]) = 2;
      v67 = 1;
      v58 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v58));
    }
    return 0xFFFFFFFFLL;
  }
  v68[0] = 0;
  v68[1] = 0;
  sub_18D1D38E8((void (**)(int))v68, a6);
  v35 = sub_18D1C7B34((uint64_t *)(a1 + 40), v68);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v68);
  v36 = *(int *)(a1 + 5936);
  v37 = (v36 + 1);
  if (*(_QWORD *)(a1 + 56) != v37)
  {
    LOWORD(v68[0]) = 2;
    v67 = 4;
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v50, v51, v52, v53, v54, v49);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v37;
  *(_DWORD *)(a1 + 72) = v37;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v37;
  *(_DWORD *)(a1 + 84) = v37;
  *(_DWORD *)(a1 + 2896) = v37;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v37;
  *(_DWORD *)(a1 + 2908) = v37;
  *(_DWORD *)(a1 + 3632) = v37;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v37;
  *(_DWORD *)(a1 + 3644) = v37;
  *(_DWORD *)(a1 + 5064) = v37;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v37;
  *(_DWORD *)(a1 + 5076) = v37;
  *(_DWORD *)(a1 + 5112) = v37;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v37;
  *(_DWORD *)(a1 + 5124) = v37;
  *(_DWORD *)(a1 + 5848) = v37;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v37;
  *(_DWORD *)(a1 + 5860) = v37;
  *(_DWORD *)(a1 + 5896) = v37;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v37;
  *(_DWORD *)(a1 + 5908) = v37;
  *(_DWORD *)(a1 + 5952) = v37;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v37;
  *(_DWORD *)(a1 + 5964) = v37;
  *(_DWORD *)(a1 + 7384) = v37;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v37;
  *(_DWORD *)(a1 + 7396) = v37;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v36) = *(_OWORD *)a2;
  v38 = *(_DWORD *)(a3 + 8);
  v39 = *(_DWORD *)(a3 + 12);
  if (v38 <= v39)
    v40 = *(_DWORD *)(a3 + 12);
  else
    v40 = *(_DWORD *)(a3 + 8);
  if (v39)
    v41 = v38 == 0;
  else
    v41 = 1;
  if (v41)
    v42 = 0;
  else
    v42 = v40;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v36) = v42;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v36 << 6), a3);
  if (v60 <= v61)
    v43 = v61;
  else
    v43 = v60;
  if (v61)
    v44 = v60 == 0;
  else
    v44 = 1;
  if (v44)
    v45 = 0;
  else
    v45 = v43;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v36) = v45;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v36 << 6), (uint64_t)&v59);
  v46 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v36, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v36) = a5;
  v47 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v35;
  if (*v35)
    v47 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v47(3, v35, 0, &unk_1E25B3FF0, &std::__any_imp::__unique_typeinfo<raven::h_UserSpeedArgs_RavenPNT<double>>::__id, v46);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v36) = v47;
  return result;
}

void sub_18D1AF218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1AF244(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenPNTEstimator::Initialize(uint64_t a1, __n128 *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v23;
  uint64_t v24;
  int updated;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD v38[3];
  _OWORD v39[21];
  uint64_t (**v40)();
  __int128 v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD v44[3];
  _OWORD v45[4];
  void *v46;
  __int128 v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;

  if (!*(_BYTE *)(a1 + 57))
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(a1 + 58))
  {
    LOWORD(v34) = 12;
    LOBYTE(v27) = 4;
    v4 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a1 + 80, "Attempting to initialize an already initialized estimator");
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v10) = v4;
    else
      v10 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v27, "%s", v5, v6, v7, v8, v9, v10);
  }
  *(__n128 *)(a1 + 64) = *a2;
  *(__n128 *)(a1 + 80) = *a2;
  *(__n128 *)(a1 + 96) = *a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_18D04AE0C(a1 + 61288);
  sub_18D05DB3C(a1 + 61288, a2, v11, v12, v13, v14, v15, v16);
  *(__n128 *)(a1 + 14600) = *a2;
  v36 = 0x10000001CLL;
  v34 = &unk_1E25C72B0;
  v37 = v38;
  v35 = xmmword_18D319780;
  sub_18D04BE88((uint64_t)&v34, 0.0);
  sub_18D053AA8(a1 + 14616, (uint64_t)&v34);
  *(_BYTE *)(a1 + 2536) = 0;
  *(__n128 *)(a1 + 2544) = *a2;
  v48 = 0x100000013;
  v46 = &unk_1E25C66B0;
  v49 = (double *)&v50;
  v47 = xmmword_18D319860;
  sub_18D04BE88((uint64_t)&v46, 0.0);
  v17 = v49;
  *v49 = a2[1].n128_f64[0];
  v17[1] = a2[1].n128_f64[1];
  v17[2] = a2[2].n128_f64[0];
  v17[3] = a2[2].n128_f64[1];
  v17[4] = a2[3].n128_f64[0];
  v17[5] = a2[3].n128_f64[1];
  v17[6] = a2[4].n128_f64[0];
  v17[7] = a2[4].n128_f64[1];
  v17[8] = a2[5].n128_f64[0];
  v17[9] = a2[5].n128_f64[1];
  v17[10] = a2[6].n128_f64[0];
  v17[11] = a2[6].n128_f64[1];
  v17[12] = a2[7].n128_f64[0];
  v17[13] = a2[7].n128_f64[1];
  v17[14] = a2[8].n128_f64[0];
  v17[15] = a2[8].n128_f64[1];
  v17[16] = a2[9].n128_f64[0];
  v17[17] = a2[9].n128_f64[1];
  v18.i64[0] = a2[10].n128_i64[0];
  v17[18] = *(double *)v18.i64;
  if (sub_18D1B8368(a1 + 2696, a2, (uint64_t)&v46, v18, v19))
    return 0xFFFFFFFFLL;
  for (i = 10; i != 29; ++i)
    *((_DWORD *)&v34 + i) = i - 10;
  v42 = 0x10000001CLL;
  v41 = xmmword_18D319860;
  v44[1] = v38[1];
  v44[2] = v38[2];
  v40 = &off_1E25C72E0;
  v43 = v44;
  v45[0] = v39[0];
  *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)((char *)v39 + 12);
  v44[0] = v38[0];
  sub_18D1CD4A0((uint64_t)&v34, a1 + 14616, (uint64_t)&v40);
  sub_18D1B8420((uint64_t)&v34, SDWORD2(v47), v49);
  v23 = *(_QWORD **)(a1 + 14648);
  v23[19] = a2[10].n128_u64[1];
  v23[20] = a2[11].n128_u64[0];
  v23[21] = a2[11].n128_u64[1];
  v23[22] = a2[12].n128_u64[0];
  v23[23] = a2[12].n128_u64[1];
  v23[24] = a2[13].n128_u64[0];
  v23[25] = a2[13].n128_u64[1];
  v23[26] = a2[14].n128_u64[0];
  v23[27] = a2[14].n128_u64[1];
  v36 = 0x10000001ALL;
  v34 = &unk_1E25C70A0;
  v37 = v38;
  v35 = xmmword_18D319790;
  sub_18D04BE88((uint64_t)&v34, 0.0);
  sub_18D1C9844((uint64_t)v32, (uint64_t)&a2[15]);
  v29 = 0x10000001ALL;
  v27 = (uint64_t)&unk_1E25C70A0;
  v28 = xmmword_18D319790;
  v30 = &v31;
  sub_18D053B2C((uint64_t)v32, (uint64_t)&v34, (uint64_t)&v27);
  sub_18D1B8490(a1 + 15032, (uint64_t)&v34, (uint64_t)v32, (uint64_t)&v27);
  *(_BYTE *)(a1 + 58) = 1;
  updated = raven::RavenPNTEstimator::UpdateFullStateEstimate((raven::RavenPNTEstimator *)a1, v24);
  *(_BYTE *)(a1 + 58) = 0;
  if (updated || (v27 = 0x3FE0000000000000, sub_18D04AD78(a1 + 19368, (double *)&v27)))
  {
    v20 = 0xFFFFFFFFLL;
  }
  else
  {
    v20 = 0;
    *(_BYTE *)(a1 + 58) = 1;
  }
  v26 = v33;
  v32[0] = &unk_1E25C7160;
  v33 = 0;
  if (v26)
    MEMORY[0x18D78B5BC](v26, 0x1000C8000313F17);
  return v20;
}

void sub_18D1AF6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a50)
    MEMORY[0x18D78B5BC](a50, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void raven::RavenPNTEstimator::InflateDevicePositionUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflateDevicePositionUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1440), a2);
}

uint64_t sub_18D1AF6F8(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  double *v44;
  double *v45;
  _QWORD *v46;
  int v47;
  double *v48;
  double *v49;
  double *v50;
  int v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  _BYTE v58[72];
  uint64_t (**v59)();
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE v63[624];
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  double *v103;
  _BYTE v104[224];
  void *v105;
  __int128 v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE v109[224];
  _BYTE v110[264];
  __int128 v111;
  _OWORD v112[2];

  if (lpsrc
    && (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4AF0, 0)) != 0)
  {
    v14 = v13;
    v16 = *(_DWORD *)(a1 + 8);
    v15 = *(_DWORD *)(a1 + 12);
    if (v16 <= v15)
      v17 = *(_DWORD *)(a1 + 12);
    else
      v17 = *(_DWORD *)(a1 + 8);
    if (v16
      && v15
      && v17 == 26
      && ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
        ? (v20 = *(_DWORD *)(a2 + 12))
        : (v20 = *(_DWORD *)(a2 + 8)),
          v19 && v18 && v20 == 3))
    {
      if (*((_QWORD *)v13 + 7))
      {
        v112[0] = *(_OWORD *)(v13 + 40);
        v21 = *((_QWORD *)v13 + 9);
        v111 = *(_OWORD *)*((_QWORD *)v13 + 8);
        sub_18D1D6E1C((uint64_t)v110, v21);
        v22 = **((unsigned __int8 **)v14 + 10);
        if (**((_BYTE **)v14 + 10))
        {
          if (v22 != 1)
          {
            if (v22 == 2)
              __assert_rtn("h_DeviceUserPositionDifference_RavenPNT", "ravenmeasurementfunctions.h", 3186, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
            goto LABEL_19;
          }
          v102 = 0x100000007;
          v100 = &unk_1E25C81E0;
          v101 = xmmword_18D319810;
          v103 = (double *)v104;
          if (sub_18D1C7D64((uint64_t)v112, &v111, (uint64_t)v110, 1, (uint64_t)&v100))
            goto LABEL_26;
          v61 = 0x700000001;
          v59 = &off_1E25C6DA0;
          v62 = v63;
          v60 = xmmword_18D319820;
          for (i = 10; i != 17; ++i)
            *((_DWORD *)&v59 + i) = i + 11;
          sub_18D1BA028((uint64_t)v58, (uint64_t)&v59);
          v107 = 0x10000001CLL;
          v105 = &unk_1E25C72B0;
          v106 = xmmword_18D319780;
          v108 = v109;
          sub_18D1C8640((uint64_t)&v59, (uint64_t)&v105, (uint64_t)v58);
          sub_18D1C8130((uint64_t)&v59, SDWORD2(v101), v103);
          v55 = 0x100000007;
          v53 = &unk_1E25C81E0;
          v54 = xmmword_18D319810;
          v56 = (double *)&v57;
          v64 = vdupq_n_s64(0x7FF8000000000000uLL);
          v65 = v64;
          v66 = v64;
          v67 = v64;
          v68 = v64;
          v69 = v64;
          v70 = v64;
          v71 = v64;
          v72 = v64;
          v73 = v64;
          v74 = v64;
          v75 = v64;
          v76 = v64;
          v77 = v64;
          v78 = v64;
          v79 = v64;
          v80 = v64;
          v81 = v64;
          v82 = v64;
          v83 = v64;
          v84 = v64;
          v85 = v64;
          v86 = v64;
          v87 = v64;
          v88 = v64;
          v89 = v64;
          v90 = v64;
          v91 = v64;
          v92 = v64;
          v93 = v64;
          v94 = v64;
          v95 = v64;
          v96 = v64;
          v97 = v64;
          v98 = v64;
          v99 = 0x7FF8000000000000;
          LOBYTE(v59) = 0;
          if (sub_18D1C9FFC((uint64_t)&v105, a1, 0, (uint64_t)&v53, (uint64_t)&v64, (BOOL *)&v59, 0.000000015))
          {
            sub_18D1C741C((uint64_t)(v14 + 40), (uint64_t)"could not correct states", (uint64_t)"h_DeviceUserPositionDifference_RavenPNT", 3166, v39, v40, v41, v42);
            return 0xFFFFFFFFLL;
          }
          *(_OWORD *)(a4 + 8) = xmmword_18D313070;
          v48 = v56;
          v49 = *(double **)(a2 + 32);
          v50 = *(double **)(a4 + 32);
          *v50 = *v49 - *v56;
          v50[1] = v49[1] - v48[1];
          v50[2] = v49[2] - v48[2];
          v61 = 0x1A00000003;
          v59 = &off_1E25C7850;
          v62 = v63;
          v60 = xmmword_18D319800;
          sub_18D04BE88((uint64_t)&v59, 0.0);
          sub_18D053AA8(a5, (uint64_t)&v59);
          v51 = *(_DWORD *)(a5 + 20);
          v52 = *(_QWORD *)(a5 + 32);
          *(double *)(v52 + 160 * v51) = -*(double *)&v80.i64[1];
          *(double *)(v52 + 8 * (21 * v51 + 1)) = -*(double *)&v84.i64[1];
          *(double *)(v52 + 8 * (22 * v51 + 2)) = -*(double *)&v88.i64[1];
        }
        else
        {
          v27 = *((_QWORD *)v14 + 7);
          v107 = 0x10000001CLL;
          v105 = &unk_1E25C72B0;
          v106 = xmmword_18D319780;
          v108 = v109;
          if (sub_18D1D0D6C((uint64_t)v112, &v111, (uint64_t)v110, v27, *((_QWORD *)v14 + 11), 0, 1, 1, (uint64_t)&v105))
          {
LABEL_26:
            LOWORD(v59) = 12;
            v64.i8[0] = 4;
            v33 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v64, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v33));
            return 0xFFFFFFFFLL;
          }
          v102 = 0x10000001CLL;
          v100 = &unk_1E25C72B0;
          v101 = xmmword_18D319780;
          v103 = (double *)v104;
          v64 = vdupq_n_s64(0x7FF8000000000000uLL);
          v65 = v64;
          v66 = v64;
          v67 = v64;
          v68 = v64;
          v69 = v64;
          v70 = v64;
          v71 = v64;
          v72 = v64;
          v73 = v64;
          v74 = v64;
          v75 = v64;
          v76 = v64;
          v77 = v64;
          v78 = v64;
          v79 = v64;
          v80 = v64;
          v81 = v64;
          v82 = v64;
          v83 = v64;
          v84 = v64;
          v85 = v64;
          v86 = v64;
          v87 = v64;
          v88 = v64;
          v89 = v64;
          v90 = v64;
          v91 = v64;
          v92 = v64;
          v93 = v64;
          v94 = v64;
          v95 = v64;
          v96 = v64;
          v97 = v64;
          v98 = v64;
          v99 = 0x7FF8000000000000;
          LOBYTE(v59) = 0;
          if (sub_18D1C9BF4((uint64_t)&v105, a1, 0, 1, 1, (uint64_t)&v100, (uint64_t)&v64, (BOOL *)&v59, 0.000000015))
          {
            sub_18D1C741C((uint64_t)(v14 + 40), (uint64_t)"could not correct states", (uint64_t)"h_DeviceUserPositionDifference_RavenPNT", 3122, v34, v35, v36, v37);
            return 0xFFFFFFFFLL;
          }
          *(_OWORD *)(a4 + 8) = xmmword_18D313070;
          v43 = v103;
          v44 = *(double **)(a2 + 32);
          v45 = *(double **)(a4 + 32);
          *v45 = *v103 - v103[21] + *v44;
          v45[1] = v43[1] - v43[22] + v44[1];
          v45[2] = v43[2] - v43[23] + v44[2];
          v61 = 0x1A00000003;
          v59 = &off_1E25C7850;
          v62 = v63;
          v60 = xmmword_18D319800;
          sub_18D04BE88((uint64_t)&v59, 0.0);
          sub_18D053AA8(a5, (uint64_t)&v59);
          v46 = *(_QWORD **)(a5 + 32);
          *v46 = v64.i64[0];
          v47 = *(_DWORD *)(a5 + 20);
          v46[v47 + 1] = v64.i64[1];
          v46[2 * v47 + 2] = v65.i64[0];
          *(double *)&v46[20 * v47] = -*(double *)&v80.i64[1];
          *(double *)&v46[21 * v47 + 1] = -*(double *)&v84.i64[1];
          *(double *)&v46[22 * v47 + 2] = -*(double *)&v88.i64[1];
        }
LABEL_19:
        v61 = 0x300000003;
        v59 = (uint64_t (**)())&unk_1E25C78E0;
        v62 = v63;
        v60 = xmmword_18D30BB60;
        sub_18D04BE88((uint64_t)&v59, 0.0);
        v23 = HIDWORD(v60) + 1;
        v24 = v62;
        *v62 = 0x3FF0000000000000;
        v24[v23] = 0x3FF0000000000000;
        v24[2 * v23] = 0x3FF0000000000000;
        sub_18D053AA8(a6, (uint64_t)&v59);
        return 0;
      }
      LOWORD(v59) = 12;
      v64.i8[0] = 4;
      v26 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    }
    else
    {
      LOWORD(v59) = 12;
      v64.i8[0] = 4;
      v26 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    }
  }
  else
  {
    LOWORD(v59) = 12;
    v64.i8[0] = 4;
    v26 = MEMORY[0x30] + (double)MEMORY[0x28];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v64, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v26));
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D1AFF80(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D1AFFC0@<X0>(char *__s1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  int i;
  __int128 v9;
  void *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  int v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD v23[4];

  if (strcmp(__s1, ":"))
    __assert_rtn("operator()", "cnmatrix.h", 891, "strcmp(r, \":\") == 0");
  v7 = *(_DWORD *)(a2 + 8);
  v21 = 0x100000003;
  v16 = &unk_1E25C77C0;
  v17 = v7;
  v18 = 1;
  v19 = v7;
  v20 = v7;
  v22 = v23;
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      v23[i] = i;
  }
  v13 = 0x100000001;
  v11 = &unk_1E25C6A70;
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  v12 = v9;
  v14 = &v15;
  v15 = a3;
  return sub_18D163258(a4, a2, (uint64_t)&v16, (uint64_t)&v11);
}

uint64_t sub_18D1B00C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int8x16_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  __n128 v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  uint64_t *v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  double v135;
  double v136;
  double v137;
  double v138;
  uint64_t v139;
  int v140;
  uint64_t i;
  uint64_t v142;
  int v143;
  uint64_t j;
  uint64_t v145;
  int v146;
  uint64_t k;
  uint64_t v148;
  int v149;
  uint64_t m;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  void *v156;
  __int128 v157;
  uint64_t v158;
  _BYTE *v159;
  _BYTE v160[136];
  void *v161;
  __int128 v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  void *v166;
  __int128 v167;
  uint64_t v168;
  _BYTE *v169;
  _BYTE v170[624];
  void *v171;
  __int128 v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE v175[72];
  uint64_t (**v176)();
  __int128 v177;
  uint64_t v178;
  double *v179;
  double v180[78];
  void *v181;
  __int128 v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE v185[72];
  void *v186;
  __int128 v187;
  uint64_t v188;
  _BYTE *v189;
  _BYTE v190[72];
  void *v191;
  __int128 v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE v195[72];
  void *v196;
  __int128 v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  void *v201;
  __int128 v202;
  uint64_t v203;
  _BYTE *v204;
  _BYTE v205[624];
  _BYTE v206[112];
  _BYTE v207[112];
  _BYTE v208[112];
  uint64_t (**v209)();
  __int128 v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE v213[377];
  uint64_t (**v214)();
  __int128 v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  void *v219;
  __int128 v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  _BYTE v224[664];
  _BYTE v225[664];
  void *v226;
  __int128 v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  _BYTE v231[112];
  _BYTE v232[112];
  _BYTE v233[112];
  _BYTE v234[112];
  uint64_t (**v235)();
  __int128 v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  void *v240;
  void *v241;
  _BYTE v242[64];
  _BYTE v243[64];
  void *v244;
  __int128 v245;
  uint64_t v246;
  double *v247;
  double v248[3];
  _BYTE v249[64];
  float64x2_t v250;
  double v251;
  double v252;
  _QWORD v253[4];
  float64x2_t v254;
  double v255;
  double v256;
  void *v257;
  __int128 v258;
  uint64_t v259;
  double *v260;
  uint64_t v261;
  void *v262;
  __int128 v263;
  uint64_t v264;
  double *v265;
  uint64_t v266;
  void *v267;
  __int128 v268;
  uint64_t v269;
  double *v270;
  uint64_t v271;
  _OWORD v272[3];
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  double v305;
  void *v306;
  __int128 v307;
  uint64_t v308;
  double *v309;
  uint64_t v310;
  void *v311;
  __int128 v312;
  uint64_t v313;
  double *v314;
  uint64_t v315;
  void *v316;
  __int128 v317;
  uint64_t v318;
  double *v319;
  uint64_t v320;
  _QWORD v321[5];
  uint64_t v322;
  void *v323;
  __int128 v324;
  uint64_t v325;
  double *v326;
  uint64_t v327;
  uint64_t (**v328)();
  __int128 v329;
  uint64_t v330;
  _BYTE *v331;
  _BYTE v332[1248];
  _QWORD v333[5];
  uint64_t v334;
  void *v335;
  __int128 v336;
  uint64_t v337;
  double *v338;
  uint64_t v339;
  void *v340;
  __int128 v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t (**v345)();
  uint64_t v346;
  _QWORD v347[5];
  uint64_t v348;
  void *v349;
  __int128 v350;
  uint64_t v351;
  double *v352;
  uint64_t v353;
  uint64_t (**v354)();
  __int128 v355;
  uint64_t v356;
  _QWORD *v357;
  _QWORD v358[27];
  __int128 v359;
  uint64_t (**v360)();
  __int128 v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  int64x2_t v367;
  int64x2_t v368;
  int64x2_t v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t v372;
  int64x2_t v373;
  int64x2_t v374;
  int64x2_t v375;
  int64x2_t v376;
  int64x2_t v377;
  int64x2_t v378;
  int64x2_t v379;
  int64x2_t v380;
  int64x2_t v381;
  int64x2_t v382;
  int64x2_t v383;
  int64x2_t v384;
  int64x2_t v385;
  int64x2_t v386;
  int64x2_t v387;
  int64x2_t v388;
  int64x2_t v389;
  int64x2_t v390;
  int64x2_t v391;
  int64x2_t v392;
  int64x2_t v393;
  int64x2_t v394;
  int64x2_t v395;
  int64x2_t v396;
  int64x2_t v397;
  int64x2_t v398;
  int64x2_t v399;
  int64x2_t v400;
  int64x2_t v401;
  uint64_t v402;
  void *v403;
  __int128 v404;
  uint64_t v405;
  double *v406;
  uint64_t v407;
  void *v408;
  __int128 v409;
  uint64_t v410;
  double *v411;
  uint64_t v412;
  void *v413;
  __int128 v414;
  uint64_t v415;
  double *v416;
  uint64_t v417;
  _BYTE v418[32];
  uint64_t v419;
  __int128 v420;
  __int128 v421;
  _OWORD v422[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  if (!v4
    || (v10 = v7,
        v11 = v6,
        v12 = v5,
        v13 = v3,
        v14 = v2,
        (v15 = (char *)__dynamic_cast(v4, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4C18, 0)) == 0))
  {
    LOWORD(v360) = 12;
    LOBYTE(v328) = 4;
    v29 = MEMORY[0x30] + (double)MEMORY[0x28];
    goto LABEL_20;
  }
  v17 = v15;
  v19 = *(_DWORD *)(v14 + 8);
  v18 = *(_DWORD *)(v14 + 12);
  if (v19 <= v18)
    v20 = *(_DWORD *)(v14 + 12);
  else
    v20 = *(_DWORD *)(v14 + 8);
  if (!v19
    || !v18
    || v20 != 26
    || ((v22 = *(_DWORD *)(v13 + 8), v21 = *(_DWORD *)(v13 + 12), v22 <= v21)
      ? (v23 = *(_DWORD *)(v13 + 12))
      : (v23 = *(_DWORD *)(v13 + 8)),
        !v22 || !v21 || v23 != 3))
  {
    LOWORD(v360) = 12;
    LOBYTE(v328) = 4;
    v29 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    goto LABEL_20;
  }
  if (!*((_QWORD *)v15 + 7))
  {
    LOWORD(v360) = 12;
    LOBYTE(v328) = 4;
    v29 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    goto LABEL_20;
  }
  v422[0] = *(_OWORD *)(v15 + 40);
  v24.i64[1] = *((_QWORD *)&v422[0] + 1);
  v24.i64[0] = *((_QWORD *)v15 + 12);
  *(_QWORD *)&v361 = 0;
  v360 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v360, 0, v24, v16);
  *(_QWORD *)&v421 = CNTimeSpan::operator-((uint64_t)v422, &v360, v25, v26);
  *((_QWORD *)&v421 + 1) = v27;
  v28 = *((_QWORD *)v17 + 9);
  v420 = *(_OWORD *)*((_QWORD *)v17 + 8);
  sub_18D1D6E1C((uint64_t)v418, v28);
  if (**((_BYTE **)v17 + 10))
  {
    LOWORD(v360) = 12;
    LOBYTE(v328) = 4;
    v29 = *((double *)v17 + 6) + (double)*((uint64_t *)v17 + 5);
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v360, (unsigned __int8 *)&v328, "time,%.3lf,h-function failure on line %d: %s() %s", v5, v6, v7, v8, v9, SLOBYTE(v29));
    return 0xFFFFFFFFLL;
  }
  v32 = *((_QWORD *)v17 + 7);
  v33 = atomic_load((unsigned __int8 *)&qword_1ECF231A0);
  if ((v33 & 1) == 0)
  {
    v139 = *((_QWORD *)v17 + 7);
    v140 = __cxa_guard_acquire(&qword_1ECF231A0);
    v32 = v139;
    if (v140)
    {
      v362 = 0x1300000001;
      v360 = &off_1E25C6830;
      v363 = &v364;
      v361 = xmmword_18D319900;
      for (i = 10; i != 29; ++i)
        *((_DWORD *)&v360 + i) = i - 10;
      sub_18D1B9FA8((uint64_t)&unk_1ECF23B48, (uint64_t)&v360);
      __cxa_atexit((void (*)(void *))sub_18D1BE790, &unk_1ECF23B48, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF231A0);
      v32 = v139;
    }
  }
  v34 = atomic_load((unsigned __int8 *)&qword_1ECF231A8);
  if ((v34 & 1) == 0)
  {
    v142 = v32;
    v143 = __cxa_guard_acquire(&qword_1ECF231A8);
    v32 = v142;
    if (v143)
    {
      v362 = 0x1A00000001;
      v360 = &off_1E25C6B60;
      v363 = &v364;
      v361 = xmmword_18D3198D0;
      for (j = 10; j != 28; ++j)
        *((_DWORD *)&v360 + j) = j - 10;
      sub_18D1B741C((uint64_t)&unk_1EE061610, (uint64_t)&v360);
      __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1EE061610, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF231A8);
      v32 = v142;
    }
  }
  v35 = atomic_load((unsigned __int8 *)&qword_1ECF231B0);
  if ((v35 & 1) == 0)
  {
    v145 = v32;
    v146 = __cxa_guard_acquire(&qword_1ECF231B0);
    v32 = v145;
    if (v146)
    {
      v362 = 0x700000001;
      v360 = &off_1E25C6DA0;
      v363 = &v364;
      v361 = xmmword_18D319820;
      for (k = 10; k != 17; ++k)
        *((_DWORD *)&v360 + k) = k + 11;
      sub_18D1BA028((uint64_t)&unk_1ECF23750, (uint64_t)&v360);
      __cxa_atexit((void (*)(void *))sub_18D1BE77C, &unk_1ECF23750, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF231B0);
      v32 = v145;
    }
  }
  v36 = atomic_load((unsigned __int8 *)&qword_1ECF231B8);
  if ((v36 & 1) == 0)
  {
    v148 = v32;
    v149 = __cxa_guard_acquire(&qword_1ECF231B8);
    v32 = v148;
    if (v149)
    {
      v330 = 0x600000001;
      v328 = (uint64_t (**)())&unk_1E25C6D70;
      v331 = v332;
      v329 = xmmword_18D319A00;
      for (m = 10; m != 16; ++m)
        *((_DWORD *)&v328 + m) = m + 10;
      sub_18D1D1270((uint64_t)&v360, (uint64_t)&v328);
      sub_18D1D63C0((uint64_t)&unk_1EE0616A0, (uint64_t)&v360);
      __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1EE0616A0, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF231B8);
      v32 = v148;
    }
  }
  v37 = atomic_load((unsigned __int8 *)&qword_1ECF231C0);
  if ((v37 & 1) == 0)
  {
    v151 = v32;
    v152 = __cxa_guard_acquire(&qword_1ECF231C0);
    v32 = v151;
    if (v152)
    {
      v362 = 0x300000001;
      v360 = (uint64_t (**)())&unk_1E25C6C50;
      v363 = &v364;
      v361 = xmmword_18D314670;
      v364 = 0x400000003;
      v365 = 5;
      sub_18D16169C((uint64_t)&v360, (uint64_t)&unk_1ECF23548);
      __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23548, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF231C0);
      v32 = v151;
    }
  }
  v38 = atomic_load((unsigned __int8 *)&qword_1ECF231C8);
  if ((v38 & 1) == 0)
  {
    v153 = v32;
    v154 = __cxa_guard_acquire(&qword_1ECF231C8);
    v32 = v153;
    if (v154)
    {
      v362 = 0x300000001;
      v360 = (uint64_t (**)())&unk_1E25C6C50;
      v363 = &v364;
      v361 = xmmword_18D314670;
      v364 = 0x1800000017;
      v365 = 25;
      sub_18D16169C((uint64_t)&v360, (uint64_t)&unk_1ECF23580);
      __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23580, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF231C8);
      v32 = v153;
    }
  }
  v415 = 0x10000001CLL;
  v413 = &unk_1E25C72B0;
  v414 = xmmword_18D319860;
  v416 = (double *)&v417;
  v155 = v32;
  if (sub_18D1C7470((uint64_t)v422, (uint64_t)&v420, v419, v32, *((_QWORD *)v17 + 11), (uint64_t)&v413))
  {
    LOWORD(v360) = 12;
    LOBYTE(v328) = 4;
    v44 = *((double *)v17 + 6) + (double)*((uint64_t *)v17 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v360, (unsigned __int8 *)&v328, "time,%.3lf,h-function failure on line %d: %s() %s", v39, v40, v41, v42, v43, SLOBYTE(v44));
    return 0xFFFFFFFFLL;
  }
  v410 = 0x10000001CLL;
  v408 = &unk_1E25C72B0;
  v411 = (double *)&v412;
  v409 = xmmword_18D319780;
  sub_18D04BE88((uint64_t)&v408, 0.0);
  sub_18D1D86F8((uint64_t)&v360, (uint64_t)&v408, (uint64_t)&unk_1ECF23B48);
  sub_18D1C9EF8((uint64_t)&v360, SDWORD2(v414), v416);
  v405 = 0x100000013;
  v403 = &unk_1E25C66B0;
  v404 = xmmword_18D319860;
  v406 = (double *)&v407;
  v367 = vdupq_n_s64(0x7FF8000000000000uLL);
  v368 = v367;
  v369 = v367;
  v370 = v367;
  v371 = v367;
  v372 = v367;
  v373 = v367;
  v374 = v367;
  v375 = v367;
  v376 = v367;
  v377 = v367;
  v378 = v367;
  v379 = v367;
  v380 = v367;
  v381 = v367;
  v382 = v367;
  v383 = v367;
  v384 = v367;
  v385 = v367;
  v386 = v367;
  v387 = v367;
  v388 = v367;
  v389 = v367;
  v390 = v367;
  v391 = v367;
  v392 = v367;
  v393 = v367;
  v394 = v367;
  v395 = v367;
  v396 = v367;
  v397 = v367;
  v398 = v367;
  v399 = v367;
  v400 = v367;
  v401 = v367;
  v402 = 0x7FF8000000000000;
  sub_18D1C75E8(v411, *(double **)(v14 + 32), (uint64_t)&v403, (uint64_t)&v367);
  sub_18D1D2320((uint64_t)&v360, v155);
  v358[23] = &v360;
  v358[24] = v422;
  v45 = *((_QWORD *)v17 + 11);
  v358[25] = &v413;
  v358[26] = v45;
  v359 = v421;
  v356 = 0x100000017;
  v354 = &off_1E25C6F20;
  v357 = v358;
  v355 = xmmword_18D3198E0;
  sub_18D04BE88((uint64_t)&v354, 0.0);
  v351 = 0x10000001ALL;
  v349 = &unk_1E25C70A0;
  v350 = xmmword_18D319790;
  v352 = (double *)&v353;
  sub_18D1C99C8((uint64_t)v347);
  sub_18D1CBE44((uint64_t)&v345);
  sub_18D1B63F0((uint64_t)&v328, *(_QWORD *)(v14 + 32), (uint64_t)&unk_1EE061610);
  if (!sub_18D1BB3E0((uint64_t)&v328, (uint64_t)&v354))
  {
    v53 = CNTimeSpan::operator-((uint64_t)&v421, v422, v50, v51);
    v55 = v54;
    v342 = 0x100000006;
    v340 = &unk_1E25C8120;
    v343 = &v344;
    v341 = xmmword_18D319950;
    sub_18D04BE88((uint64_t)&v340, 0.0);
    v337 = 0x10000001ALL;
    v335 = &unk_1E25C70A0;
    v336 = xmmword_18D319790;
    v338 = (double *)&v339;
    sub_18D1C99C8((uint64_t)v333);
    v330 = 0x60000001ALL;
    v328 = &off_1E25C7250;
    v329 = xmmword_18D319A10;
    v331 = v332;
    sub_18D1B63F0((uint64_t)&v235, *(_QWORD *)(v14 + 32), (uint64_t)&unk_1EE0616A0);
    if (sub_18D1D3C50((uint64_t)&v235, (uint64_t)&v340, (uint64_t)&v335, (uint64_t)v333, (uint64_t)&v328, v56, v57, v58, v55 + (double)v53))
    {
      v52.n128_f64[0] = sub_18D1C741C((uint64_t)v422, (uint64_t)"could not evaluate user dynamics", (uint64_t)"h_DeviceUserVelocityDifferenceMountedWithNHC_RavenPNT", 4089, v59, v60, v61, v62);
      v30 = 0xFFFFFFFFLL;
LABEL_49:
      v80 = v334;
      v333[0] = &unk_1E25C7160;
      v334 = 0;
      if (v80)
        MEMORY[0x18D78B5BC](v80, 0x1000C8000313F17, v52);
      goto LABEL_51;
    }
    v325 = 0x10000001ALL;
    v323 = &unk_1E25C70A0;
    v326 = (double *)&v327;
    v324 = xmmword_18D319790;
    sub_18D04BE88((uint64_t)&v323, 0.0);
    sub_18D1D1680((uint64_t)&v235, (uint64_t)&v323, (uint64_t)&unk_1EE061610);
    sub_18D1D1080((uint64_t)&v235, SDWORD2(v350), v352);
    sub_18D1D1680((uint64_t)&v235, (uint64_t)&v323, (uint64_t)&unk_1EE0616A0);
    sub_18D1D1080((uint64_t)&v235, SDWORD2(v336), v338);
    sub_18D1912C8((uint64_t)v321);
    sub_18D1D1778((uint64_t)&v235, (uint64_t)v321, (uint64_t)&unk_1EE061610, (uint64_t)&unk_1EE061610);
    sub_18D1D1114((uint64_t)&v235, (uint64_t)v347);
    v241 = &unk_1E25C5EA0;
    v240 = &unk_1E25C5EA0;
    v63 = v239;
    v235 = (uint64_t (**)())&unk_1E25C7160;
    v239 = 0;
    if (v63)
      MEMORY[0x18D78B5BC](v63, 0x1000C8000313F17);
    sub_18D1D1778((uint64_t)&v235, (uint64_t)v321, (uint64_t)&unk_1EE0616A0, (uint64_t)&unk_1EE0616A0);
    sub_18D1D1114((uint64_t)&v235, (uint64_t)v333);
    v241 = &unk_1E25C5EA0;
    v240 = &unk_1E25C5EA0;
    v64 = v239;
    v235 = (uint64_t (**)())&unk_1E25C7160;
    v239 = 0;
    if (v64)
      MEMORY[0x18D78B5BC](v64, 0x1000C8000313F17);
    v318 = 0x100000013;
    v316 = &unk_1E25C66B0;
    v317 = xmmword_18D319860;
    v319 = (double *)&v320;
    v65 = sub_18D1C7470((uint64_t)&v421, (uint64_t)&v420, v419, (uint64_t)&v360, *((_QWORD *)v17 + 11), (uint64_t)&v316);
    v70 = (uint64_t)(v17 + 40);
    if (v65)
    {
      v52.n128_f64[0] = sub_18D1C741C(v70, (uint64_t)"could not integrate kinematic states", (uint64_t)"h_DeviceUserVelocityDifferenceMountedWithNHC_RavenPNT", 4117, v66, v67, v68, v69);
    }
    else
    {
      v313 = 0x100000013;
      v311 = &unk_1E25C66B0;
      v312 = xmmword_18D319860;
      v314 = (double *)&v315;
      if (sub_18D1D3F14((uint64_t)&v421, &v420, (uint64_t)v418, (uint64_t)&v311))
      {
        v52.n128_f64[0] = sub_18D1C741C(v70, (uint64_t)"could not integrate user states", (uint64_t)"h_DeviceUserVelocityDifferenceMountedWithNHC_RavenPNT", 4126, v71, v72, v73, v74);
      }
      else
      {
        v308 = 0x10000001CLL;
        v306 = &unk_1E25C72B0;
        v309 = (double *)&v310;
        v307 = xmmword_18D319780;
        sub_18D04BE88((uint64_t)&v306, 0.0);
        sub_18D1D86F8((uint64_t)&v235, (uint64_t)&v306, (uint64_t)&unk_1ECF23B48);
        sub_18D1C9EF8((uint64_t)&v235, SDWORD2(v317), v319);
        sub_18D1C8640((uint64_t)&v235, (uint64_t)&v306, (uint64_t)&unk_1ECF23750);
        sub_18D1C8130((uint64_t)&v235, SDWORD2(v312), v314);
        v272[0] = vdupq_n_s64(0x7FF8000000000000uLL);
        v272[1] = v272[0];
        v272[2] = v272[0];
        v273 = v272[0];
        v274 = v272[0];
        v275 = v272[0];
        v276 = v272[0];
        v277 = v272[0];
        v278 = v272[0];
        v279 = v272[0];
        v280 = v272[0];
        v281 = v272[0];
        v282 = v272[0];
        v283 = v272[0];
        v284 = v272[0];
        v285 = v272[0];
        v286 = v272[0];
        v287 = v272[0];
        v288 = v272[0];
        v289 = v272[0];
        v290 = v272[0];
        v291 = v272[0];
        v292 = v272[0];
        v293 = v272[0];
        v294 = v272[0];
        v295 = v272[0];
        v296 = v272[0];
        v297 = v272[0];
        v298 = v272[0];
        v299 = v272[0];
        v300 = v272[0];
        v301 = v272[0];
        v302 = v272[0];
        v303 = v272[0];
        v304 = v272[0];
        v305 = NAN;
        v269 = 0x100000013;
        v267 = &unk_1E25C66B0;
        v268 = xmmword_18D319860;
        v270 = (double *)&v271;
        sub_18D1C75E8(v309, v326, (uint64_t)&v267, (uint64_t)v272);
        v264 = 0x100000007;
        v262 = &unk_1E25C81E0;
        v263 = xmmword_18D319810;
        v265 = (double *)&v266;
        LOBYTE(v235) = 0;
        if (!sub_18D1C9FFC((uint64_t)&v306, (uint64_t)&v323, 0, (uint64_t)&v262, (uint64_t)v272, (BOOL *)&v235, 0.000000015))
        {
          v259 = 0x10000001CLL;
          v257 = &unk_1E25C72B0;
          v260 = (double *)&v261;
          v258 = xmmword_18D319780;
          sub_18D04BE88((uint64_t)&v257, 0.0);
          sub_18D1D86F8((uint64_t)&v235, (uint64_t)&v257, (uint64_t)&unk_1ECF23B48);
          sub_18D1C9EF8((uint64_t)&v235, SDWORD2(v268), v270);
          sub_18D1C8640((uint64_t)&v235, (uint64_t)&v257, (uint64_t)&unk_1ECF23750);
          sub_18D1C8130((uint64_t)&v235, SDWORD2(v263), v265);
          v83 = v406[6];
          v84 = v406[7];
          v85 = v406[8];
          v86 = v406[9];
          v87 = sqrt(v84 * v84 + v83 * v83 + v85 * v85 + v86 * v86);
          v88 = 1.0;
          v89 = 0.0;
          v90 = 0.0;
          v91 = 0.0;
          v92 = 0.0;
          v93 = 1.0;
          if (fabs(v87) >= 2.22044605e-16)
          {
            v90 = v83 / v87;
            v91 = v84 / v87;
            v92 = v85 / v87;
            v93 = v86 / v87;
          }
          v254.f64[0] = v90;
          v254.f64[1] = v91;
          v255 = v92;
          v256 = v93;
          v94 = sqrt(v91 * v91 + v90 * v90 + v92 * v92 + v93 * v93);
          v95 = 0.0;
          v96 = 0.0;
          if (fabs(v94) >= 2.22044605e-16)
          {
            v89 = -v90 / v94;
            v95 = -v91 / v94;
            v96 = -v92 / v94;
            v88 = v93 / v94;
          }
          *(double *)v253 = v89;
          *(double *)&v253[1] = v95;
          *(double *)&v253[2] = v96;
          *(double *)&v253[3] = v88;
          v97 = v260[6];
          v98 = v260[7];
          v99 = v260[8];
          v100 = v260[9];
          v101 = sqrt(v98 * v98 + v97 * v97 + v99 * v99 + v100 * v100);
          if (fabs(v101) >= 2.22044605e-16)
          {
            v103 = v97 / v101;
            v104 = v98 / v101;
            v105 = v99 / v101;
            v102 = v100 / v101;
          }
          else
          {
            v102 = 1.0;
            v103 = 0.0;
            v104 = 0.0;
            v105 = 0.0;
          }
          v250.f64[0] = v103;
          v250.f64[1] = v104;
          v251 = v105;
          v252 = v102;
          sub_18D1C9120((uint64_t)&v235, (uint64_t)&v403, (uint64_t)&unk_1ECF23548);
          sub_18D04DA0C((uint64_t)v249, (uint64_t)&v235);
          v246 = 0x100000003;
          v244 = &unk_1E25C7790;
          v245 = xmmword_18D313070;
          v247 = v248;
          v106 = v260[24];
          v107 = v260[27];
          v108 = v106 * v260[26];
          v248[0] = v106 * v260[25];
          v248[1] = v108;
          v248[2] = v106 * v107;
          sub_18D162AB8((cnrotation::CNRotation *)&v250, (uint64_t)&v244, (uint64_t)&v235);
          sub_18D1636E4((uint64_t)v243, (uint64_t)&v235);
          sub_18D162AB8((cnrotation::CNRotation *)v253, (uint64_t)v243, (uint64_t)&v235);
          sub_18D1636E4((uint64_t)v242, (uint64_t)&v235);
          v228 = 0x100000003;
          v226 = &unk_1E25C7790;
          v227 = xmmword_18D313070;
          v229 = &v230;
          sub_18D0540FC((uint64_t)v249, (uint64_t)v242, (uint64_t)&v226);
          sub_18D1B2810((uint64_t)&v235, (uint64_t)&v226, v13);
          sub_18D053AA8(v12, (uint64_t)&v235);
          v237 = 0x1A00000003;
          v235 = &off_1E25C7850;
          v238 = &v239;
          v236 = xmmword_18D319800;
          sub_18D04BE88((uint64_t)&v235, 0.0);
          v109 = HIDWORD(v236);
          v110 = v238;
          v238[3 * HIDWORD(v236)] = v368.i64[1];
          v110[(4 * v109) | 1] = v369.i64[0];
          v110[5 * v109 + 2] = v369.i64[1];
          cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v254, (uint64_t)v234);
          cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v254, (uint64_t)v233);
          cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v254, (uint64_t)v232);
          cnrotation::CNRotation::dRdq4(&v254, (uint64_t)v231);
          *(_QWORD *)&v111.f64[0] = v370.i64[0];
          v211 = 0x300000003;
          v209 = (uint64_t (**)())&unk_1E25C78E0;
          v210 = xmmword_18D30BB60;
          v212 = v213;
          v112 = sub_18D1C94E0((uint64_t)v234, (uint64_t)&v209, v111);
          *(_QWORD *)&v112.f64[0] = v371.i64[1];
          v203 = 0x300000003;
          v201 = &unk_1E25C78E0;
          v202 = xmmword_18D30BB60;
          v204 = v205;
          sub_18D1C94E0((uint64_t)v233, (uint64_t)&v201, v112);
          sub_18D1BE894((uint64_t)&v209, (uint64_t)&v201, (uint64_t)&v214);
          *(_QWORD *)&v113.f64[0] = v373.i64[0];
          v178 = 0x300000003;
          v176 = (uint64_t (**)())&unk_1E25C78E0;
          v177 = xmmword_18D30BB60;
          v179 = v180;
          sub_18D1C94E0((uint64_t)v232, (uint64_t)&v176, v113);
          sub_18D1BE894((uint64_t)&v214, (uint64_t)&v176, (uint64_t)v224);
          *(_QWORD *)&v114.f64[0] = v374.i64[1];
          v168 = 0x300000003;
          v166 = &unk_1E25C78E0;
          v167 = xmmword_18D30BB60;
          v169 = v170;
          sub_18D1C94E0((uint64_t)v231, (uint64_t)&v166, v114);
          sub_18D1BE894((uint64_t)v224, (uint64_t)&v166, (uint64_t)v225);
          sub_18D1D4530((uint64_t)&v226, (uint64_t)v225);
          *(_QWORD *)&v115.f64[0] = v370.i64[1];
          v203 = 0x300000003;
          v201 = &unk_1E25C78E0;
          v202 = xmmword_18D30BB60;
          v204 = v205;
          v116 = sub_18D1C94E0((uint64_t)v234, (uint64_t)&v201, v115);
          *(_QWORD *)&v116.f64[0] = v372.i64[0];
          v178 = 0x300000003;
          v176 = (uint64_t (**)())&unk_1E25C78E0;
          v177 = xmmword_18D30BB60;
          v179 = v180;
          sub_18D1C94E0((uint64_t)v233, (uint64_t)&v176, v116);
          sub_18D1BE894((uint64_t)&v201, (uint64_t)&v176, (uint64_t)&v209);
          *(_QWORD *)&v117.f64[0] = v373.i64[1];
          v168 = 0x300000003;
          v166 = &unk_1E25C78E0;
          v167 = xmmword_18D30BB60;
          v169 = v170;
          sub_18D1C94E0((uint64_t)v232, (uint64_t)&v166, v117);
          sub_18D1BE894((uint64_t)&v209, (uint64_t)&v166, (uint64_t)&v214);
          *(_QWORD *)&v118.f64[0] = v375.i64[0];
          v158 = 0x300000003;
          v156 = &unk_1E25C78E0;
          v157 = xmmword_18D30BB60;
          v159 = v160;
          sub_18D1C94E0((uint64_t)v231, (uint64_t)&v156, v118);
          sub_18D1BE894((uint64_t)&v214, (uint64_t)&v156, (uint64_t)v224);
          sub_18D1D4530((uint64_t)v225, (uint64_t)v224);
          *(_QWORD *)&v119.f64[0] = v371.i64[0];
          v178 = 0x300000003;
          v176 = (uint64_t (**)())&unk_1E25C78E0;
          v177 = xmmword_18D30BB60;
          v179 = v180;
          v120 = sub_18D1C94E0((uint64_t)v234, (uint64_t)&v176, v119);
          *(_QWORD *)&v120.f64[0] = v372.i64[1];
          v168 = 0x300000003;
          v166 = &unk_1E25C78E0;
          v167 = xmmword_18D30BB60;
          v169 = v170;
          sub_18D1C94E0((uint64_t)v233, (uint64_t)&v166, v120);
          sub_18D1BE894((uint64_t)&v176, (uint64_t)&v166, (uint64_t)&v201);
          *(_QWORD *)&v121.f64[0] = v374.i64[0];
          v158 = 0x300000003;
          v156 = &unk_1E25C78E0;
          v157 = xmmword_18D30BB60;
          v159 = v160;
          sub_18D1C94E0((uint64_t)v232, (uint64_t)&v156, v121);
          sub_18D1BE894((uint64_t)&v201, (uint64_t)&v156, (uint64_t)&v209);
          *(_QWORD *)&v122.f64[0] = v375.i64[1];
          v221 = 0x300000003;
          v219 = &unk_1E25C78E0;
          v220 = xmmword_18D30BB60;
          v222 = &v223;
          sub_18D1C94E0((uint64_t)v231, (uint64_t)&v219, v122);
          sub_18D1BE894((uint64_t)&v209, (uint64_t)&v219, (uint64_t)&v214);
          sub_18D1D4530((uint64_t)v224, (uint64_t)&v214);
          v216 = 0x1A00000003;
          v214 = &off_1E25C7850;
          v217 = &v218;
          v215 = xmmword_18D319800;
          sub_18D04BE88((uint64_t)&v214, 0.0);
          sub_18D1D4184((uint64_t)&v209, (uint64_t)&v226);
          sub_18D1D4114((uint64_t)&v201, (uint64_t)&v209, (uint64_t)v243);
          sub_18D1D41F0((uint64_t)&v176, (uint64_t)&v214, 6);
          sub_18D16182C((uint64_t)&v176, (uint64_t)&v201);
          sub_18D1D4184((uint64_t)&v209, (uint64_t)v225);
          sub_18D1D4114((uint64_t)&v201, (uint64_t)&v209, (uint64_t)v243);
          sub_18D1D41F0((uint64_t)&v176, (uint64_t)&v214, 7);
          sub_18D16182C((uint64_t)&v176, (uint64_t)&v201);
          sub_18D1D4184((uint64_t)&v209, (uint64_t)v224);
          sub_18D1D4114((uint64_t)&v201, (uint64_t)&v209, (uint64_t)v243);
          sub_18D1D41F0((uint64_t)&v176, (uint64_t)&v214, 8);
          sub_18D16182C((uint64_t)&v176, (uint64_t)&v201);
          v211 = 0x1A00000003;
          v209 = &off_1E25C7850;
          v212 = v213;
          v210 = xmmword_18D319800;
          sub_18D04BE88((uint64_t)&v209, 0.0);
          cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v250, (uint64_t)&v219);
          cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v250, (uint64_t)v208);
          cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v250, (uint64_t)v207);
          cnrotation::CNRotation::dRdq4(&v250, (uint64_t)v206);
          *(_QWORD *)&v123.f64[0] = v273;
          v198 = 0x300000003;
          v196 = &unk_1E25C78E0;
          v197 = xmmword_18D30BB60;
          v199 = &v200;
          v124 = sub_18D1C94E0((uint64_t)&v219, (uint64_t)&v196, v123);
          v124.f64[0] = *((float64_t *)&v274 + 1);
          v193 = 0x300000003;
          v191 = &unk_1E25C78E0;
          v192 = xmmword_18D30BB60;
          v194 = v195;
          sub_18D1C94E0((uint64_t)v208, (uint64_t)&v191, v124);
          sub_18D1BE894((uint64_t)&v196, (uint64_t)&v191, (uint64_t)&v156);
          *(_QWORD *)&v125.f64[0] = v276;
          v188 = 0x300000003;
          v186 = &unk_1E25C78E0;
          v187 = xmmword_18D30BB60;
          v189 = v190;
          sub_18D1C94E0((uint64_t)v207, (uint64_t)&v186, v125);
          sub_18D1BE894((uint64_t)&v156, (uint64_t)&v186, (uint64_t)&v166);
          v126.f64[0] = *((float64_t *)&v277 + 1);
          v183 = 0x300000003;
          v181 = &unk_1E25C78E0;
          v182 = xmmword_18D30BB60;
          v184 = v185;
          sub_18D1C94E0((uint64_t)v206, (uint64_t)&v181, v126);
          sub_18D1BE894((uint64_t)&v166, (uint64_t)&v181, (uint64_t)&v176);
          sub_18D1D4530((uint64_t)&v201, (uint64_t)&v176);
          v127.f64[0] = *((float64_t *)&v273 + 1);
          v193 = 0x300000003;
          v191 = &unk_1E25C78E0;
          v192 = xmmword_18D30BB60;
          v194 = v195;
          v128 = sub_18D1C94E0((uint64_t)&v219, (uint64_t)&v191, v127);
          *(_QWORD *)&v128.f64[0] = v275;
          v188 = 0x300000003;
          v186 = &unk_1E25C78E0;
          v187 = xmmword_18D30BB60;
          v189 = v190;
          sub_18D1C94E0((uint64_t)v208, (uint64_t)&v186, v128);
          sub_18D1BE894((uint64_t)&v191, (uint64_t)&v186, (uint64_t)&v196);
          v129.f64[0] = *((float64_t *)&v276 + 1);
          v183 = 0x300000003;
          v181 = &unk_1E25C78E0;
          v182 = xmmword_18D30BB60;
          v184 = v185;
          sub_18D1C94E0((uint64_t)v207, (uint64_t)&v181, v129);
          sub_18D1BE894((uint64_t)&v196, (uint64_t)&v181, (uint64_t)&v156);
          *(_QWORD *)&v130.f64[0] = v278;
          v173 = 0x300000003;
          v171 = &unk_1E25C78E0;
          v172 = xmmword_18D30BB60;
          v174 = v175;
          sub_18D1C94E0((uint64_t)v206, (uint64_t)&v171, v130);
          sub_18D1BE894((uint64_t)&v156, (uint64_t)&v171, (uint64_t)&v166);
          sub_18D1D4530((uint64_t)&v176, (uint64_t)&v166);
          *(_QWORD *)&v131.f64[0] = v274;
          v188 = 0x300000003;
          v186 = &unk_1E25C78E0;
          v187 = xmmword_18D30BB60;
          v189 = v190;
          v132 = sub_18D1C94E0((uint64_t)&v219, (uint64_t)&v186, v131);
          v132.f64[0] = *((float64_t *)&v275 + 1);
          v183 = 0x300000003;
          v181 = &unk_1E25C78E0;
          v182 = xmmword_18D30BB60;
          v184 = v185;
          sub_18D1C94E0((uint64_t)v208, (uint64_t)&v181, v132);
          sub_18D1BE894((uint64_t)&v186, (uint64_t)&v181, (uint64_t)&v191);
          *(_QWORD *)&v133.f64[0] = v277;
          v173 = 0x300000003;
          v171 = &unk_1E25C78E0;
          v172 = xmmword_18D30BB60;
          v174 = v175;
          sub_18D1C94E0((uint64_t)v207, (uint64_t)&v171, v133);
          sub_18D1BE894((uint64_t)&v191, (uint64_t)&v171, (uint64_t)&v196);
          v134.f64[0] = *((float64_t *)&v278 + 1);
          v163 = 0x300000003;
          v161 = &unk_1E25C78E0;
          v162 = xmmword_18D30BB60;
          v164 = &v165;
          sub_18D1C94E0((uint64_t)v206, (uint64_t)&v161, v134);
          sub_18D1BE894((uint64_t)&v196, (uint64_t)&v161, (uint64_t)&v156);
          sub_18D1D4530((uint64_t)&v166, (uint64_t)&v156);
          sub_18D1D42A8((uint64_t)&v196, (uint64_t)&v201, (uint64_t)&v244);
          sub_18D1D41F0((uint64_t)&v156, (uint64_t)&v209, 6);
          sub_18D16182C((uint64_t)&v156, (uint64_t)&v196);
          sub_18D1D42A8((uint64_t)&v196, (uint64_t)&v176, (uint64_t)&v244);
          sub_18D1D41F0((uint64_t)&v156, (uint64_t)&v209, 7);
          sub_18D16182C((uint64_t)&v156, (uint64_t)&v196);
          sub_18D1D42A8((uint64_t)&v196, (uint64_t)&v166, (uint64_t)&v244);
          sub_18D1D41F0((uint64_t)&v156, (uint64_t)&v209, 8);
          sub_18D16182C((uint64_t)&v156, (uint64_t)&v196);
          v135 = v260[24];
          v136 = v260[25];
          v137 = v260[26];
          v138 = v260[27];
          v178 = 0x300000003;
          v177 = xmmword_18D30BB60;
          v180[0] = v135 * *(double *)&v298 + v136 * *(double *)&v295;
          v180[1] = v135 * *(double *)&v301 + v137 * *(double *)&v295;
          v176 = (uint64_t (**)())&unk_1E25C78E0;
          v179 = v180;
          v180[6] = v135 * *(double *)&v299 + v136 * *(double *)&v296;
          v180[7] = v135 * *(double *)&v302 + v137 * *(double *)&v296;
          v180[3] = v135 * *((double *)&v298 + 1) + v136 * *((double *)&v295 + 1);
          v180[2] = v135 * *(double *)&v304 + v138 * *(double *)&v295;
          v180[4] = v135 * *((double *)&v301 + 1) + v137 * *((double *)&v295 + 1);
          v180[5] = v135 * *((double *)&v304 + 1) + v138 * *((double *)&v295 + 1);
          v180[8] = v135 * v305 + v138 * *(double *)&v296;
          cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v250, (uint64_t)&v156);
          sub_18D166008((uint64_t)&v156, (uint64_t)&v176, (uint64_t)&v166);
          sub_18D1D4318((uint64_t)&v201, (uint64_t)&v209, (uint64_t)&unk_1ECF23580);
          sub_18D16171C((uint64_t)&v201, (uint64_t)&v166);
          cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v253, (uint64_t)&v156);
          sub_18D1CBAD4((uint64_t)&v166, (uint64_t)&v156, (uint64_t)&v209);
          sub_18D1CBA68((uint64_t)&v176, (uint64_t)&v166, (uint64_t)v321);
          sub_18D1D438C((uint64_t)&v201, (uint64_t)&v214, (uint64_t)&v176);
          v178 = 0x1A00000003;
          v176 = &off_1E25C7850;
          v177 = xmmword_18D319800;
          v179 = v180;
          sub_18D0540FC((uint64_t)&v235, (uint64_t)&v201, (uint64_t)&v176);
          sub_18D053AA8(v11, (uint64_t)&v176);
          sub_18D1BE948(3u, 3u, (uint64_t)&v176);
          v52 = sub_18D053AA8(v10, (uint64_t)&v176);
          v30 = 0;
          goto LABEL_47;
        }
        v52.n128_f64[0] = sub_18D1C741C((uint64_t)v422, (uint64_t)"could not correct user states", (uint64_t)"h_DeviceUserVelocityDifferenceMountedWithNHC_RavenPNT", 4153, v75, v76, v77, v78);
      }
    }
    v30 = 0xFFFFFFFFLL;
LABEL_47:
    v79 = v322;
    v321[0] = &unk_1E25C7160;
    v322 = 0;
    if (v79)
      MEMORY[0x18D78B5BC](v79, 0x1000C8000313F17, v52);
    goto LABEL_49;
  }
  v52.n128_f64[0] = sub_18D1C741C((uint64_t)v422, (uint64_t)"could not evaluate error dynamics", (uint64_t)"h_DeviceUserVelocityDifferenceMountedWithNHC_RavenPNT", 4074, v46, v47, v48, v49);
  v30 = 0xFFFFFFFFLL;
LABEL_51:
  v81 = v346;
  v345 = &off_1E25C7130;
  v346 = 0;
  if (v81)
    MEMORY[0x18D78B5BC](v81, 0x1000C8000313F17, v52);
  v82 = v348;
  v347[0] = &unk_1E25C7160;
  v348 = 0;
  if (v82)
    MEMORY[0x18D78B5BC](v82, 0x1000C8000313F17, v52);
  v360 = (uint64_t (**)())&unk_1E25C3648;
  v328 = (uint64_t (**)())&v366;
  sub_18D1C4ED8((void ***)&v328);
  return v30;
}

void sub_18D1B1FFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF231C8);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B233C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D1D4774((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D1B00C0;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4C18, &std::__any_imp::__unique_typeinfo<raven::h_DeviceUserVelocityDifferenceMountedWithNHCArgs_RavenPNT<double>>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D1B273C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1B2768(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

double sub_18D1B27A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000003;
  *(_QWORD *)a2 = &unk_1E25C7790;
  *(_OWORD *)(a2 + 8) = xmmword_18D313070;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D064EF4(a1, a2, a3);
  return result;
}

void sub_18D1B27FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1B2810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1B286C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1B2880(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)&result = 0x100000003;
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  v5 = (v3 * v2);
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v2;
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = fabs(v8);
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_18D1B28D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  double *v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  double v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  uint64_t *v85;
  int v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  double *v100;
  int v101;
  double *v102;
  int v103;
  double v104;
  double v105;
  double v106;
  _BYTE v107[112];
  _BYTE v108[112];
  _BYTE v109[112];
  _BYTE v110[20];
  int v111;
  double *v112;
  void *v113;
  __int128 v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  void *v118;
  __int128 v119;
  uint64_t v120;
  double *v121;
  _BYTE v122[72];
  void *v123;
  __int128 v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE v127[72];
  void *v128;
  __int128 v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD v132[9];
  void *v133;
  __int128 v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE v137[72];
  void *v138;
  __int128 v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  _BYTE v143[112];
  _BYTE v144[112];
  _BYTE v145[112];
  _BYTE v146[112];
  _BYTE v147[112];
  _BYTE v148[112];
  void *v149;
  __int128 v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD v153[9];
  void *v154;
  __int128 v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD v158[9];
  _BYTE v159[112];
  void *v160;
  __int128 v161;
  uint64_t v162;
  int64x2_t *v163;
  int64x2_t v164;
  uint64_t v165;
  void *v166;
  __int128 v167;
  uint64_t v168;
  double *v169;
  double v170[3];
  void *v171;
  __int128 v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  _BYTE v176[64];
  _BYTE v177[64];
  void *v178;
  __int128 v179;
  uint64_t v180;
  double *v181;
  double v182[3];
  _OWORD v183[16];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  void *v204;
  __int128 v205;
  uint64_t v206;
  double *v207;
  uint64_t v208;
  void *v209;
  __int128 v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD v213[10];
  __int128 v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD v217[3];
  void *v218;
  __int128 v219;
  uint64_t v220;
  double *v221;
  double v222[3];
  void *v223;
  __int128 v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD v227[3];
  _BYTE v228[112];
  float64x2_t v229;
  double v230;
  double v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  double v267;
  void *v268;
  __int128 v269;
  uint64_t v270;
  double *v271;
  uint64_t v272;
  void *v273;
  __int128 v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  _BYTE v278[264];
  __int128 v279;
  __int128 v280;
  uint64_t (**v281)();
  __int128 v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  int v286;
  uint64_t v287;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v287 = *MEMORY[0x1E0C80C00];
  if (!v4
    || (v10 = v7,
        v11 = v6,
        v12 = v5,
        v13 = v3,
        v14 = v2,
        (v15 = (char *)__dynamic_cast(v4, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4B28, 0)) == 0))
  {
    LOWORD(v281) = 12;
    v232.i8[0] = 4;
    v104 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v281, (unsigned __int8 *)&v232, "time,%.3lf,h-function failure on line %d: %s() %s", v5, v6, v7, v8, v9, SLOBYTE(v104));
    return 0xFFFFFFFFLL;
  }
  v16 = v15;
  v18 = *(_DWORD *)(v14 + 8);
  v17 = *(_DWORD *)(v14 + 12);
  if (v18 <= v17)
    v19 = *(_DWORD *)(v14 + 12);
  else
    v19 = *(_DWORD *)(v14 + 8);
  if (!v18
    || !v17
    || v19 != 26
    || ((v21 = *(_DWORD *)(v13 + 8), v20 = *(_DWORD *)(v13 + 12), v21 <= v20)
      ? (v22 = *(_DWORD *)(v13 + 12))
      : (v22 = *(_DWORD *)(v13 + 8)),
        !v21 || !v20 || v22 != 3 || !*((_QWORD *)v15 + 7)))
  {
    LOWORD(v281) = 12;
    v232.i8[0] = 4;
    v35 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v281, (unsigned __int8 *)&v232, "time,%.3lf,h-function failure on line %d: %s() %s", v5, v6, v7, v8, v9, SLOBYTE(v35));
    return 0xFFFFFFFFLL;
  }
  if ((*((_QWORD *)v15 + 15) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)v15 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)v15 + 17) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    sprintf((char *)&v281, "invalid rate gyro measurement %lg,%lg,%lg", *((double *)v15 + 15), *((double *)v15 + 16), *((double *)v15 + 17));
    v232.i16[0] = 12;
    LOBYTE(v183[0]) = 4;
    v37 = *((double *)v16 + 6) + (double)*((uint64_t *)v16 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v232, (unsigned __int8 *)v183, "time,%.3lf,h-function failure on line %d: %s() %s", v38, v39, v40, v41, v42, SLOBYTE(v37));
    return 0xFFFFFFFFLL;
  }
  v280 = *(_OWORD *)(v15 + 40);
  v23 = *((_QWORD *)v15 + 9);
  v279 = *(_OWORD *)*((_QWORD *)v15 + 8);
  sub_18D1D6E1C((uint64_t)v278, v23);
  v24 = *((_QWORD *)v16 + 11);
  v25 = **((unsigned __int8 **)v16 + 10);
  v27 = *((double *)v16 + 15);
  v26 = *((double *)v16 + 16);
  v28 = *((double *)v16 + 17);
  v273 = &unk_1E25C72B0;
  v276 = &v277;
  v29 = *((_QWORD *)v16 + 7);
  v275 = 0x10000001CLL;
  v274 = xmmword_18D319780;
  v34 = (uint64_t)(v16 + 40);
  if (sub_18D1D0D6C((uint64_t)&v280, &v279, (uint64_t)v278, v29, v24, v25, 1, 1, (uint64_t)&v273))
  {
    sub_18D1C741C(v34, (uint64_t)"could not integrate full states", (uint64_t)"h_DeviceUserVelocityDifference_RavenPNT", 3628, v30, v31, v32, v33);
    return 0xFFFFFFFFLL;
  }
  v270 = 0x10000001CLL;
  v268 = &unk_1E25C72B0;
  v269 = xmmword_18D319780;
  v271 = (double *)&v272;
  v232 = vdupq_n_s64(0x7FF8000000000000uLL);
  v233 = v232;
  v234 = v232;
  v235 = v232;
  v236 = v232;
  v237 = v232;
  v238 = v232;
  v239 = v232;
  v240 = v232;
  v241 = v232;
  v242 = v232;
  v243 = v232;
  v244 = v232;
  v245 = v232;
  v246 = v232;
  v247 = v232;
  v248 = v232;
  v249 = v232;
  v250 = v232;
  v251 = v232;
  v252 = v232;
  v253 = v232;
  v254 = v232;
  v255 = v232;
  v256 = v232;
  v257 = v232;
  v258 = v232;
  v259 = v232;
  v260 = v232;
  v261 = v232;
  v262 = v232;
  v263 = v232;
  v264 = v232;
  v265 = v232;
  v266 = v232;
  v267 = NAN;
  LOBYTE(v281) = 0;
  if (sub_18D1C9BF4((uint64_t)&v273, v14, v25, 1, 1, (uint64_t)&v268, (uint64_t)&v232, (BOOL *)&v281, 0.000000015))
  {
    sub_18D1C741C(v34, (uint64_t)"could not correct states", (uint64_t)"h_DeviceUserVelocityDifference_RavenPNT", 3637, v43, v44, v45, v46);
    return 0xFFFFFFFFLL;
  }
  v47 = v271;
  v49 = v271[24];
  v48 = v271[25];
  v50 = v271[26];
  v51 = v271[27];
  if (v25)
  {
    if (v25 == 1)
    {
      v52 = v271[6];
      v53 = v271[7];
      v54 = v271[8];
      v55 = v271[9];
      v56 = sqrt(v53 * v53 + v52 * v52 + v54 * v54 + v55 * v55);
      v57 = 1.0;
      v58 = 0.0;
      v59 = 0.0;
      v60 = 0.0;
      v61 = 0.0;
      v62 = 1.0;
      if (fabs(v56) >= 2.22044605e-16)
      {
        v59 = v52 / v56;
        v60 = v53 / v56;
        v61 = v54 / v56;
        v62 = v55 / v56;
      }
      v63 = sqrt(v60 * v60 + v59 * v59 + v61 * v61 + v62 * v62);
      v64 = 0.0;
      v65 = 0.0;
      if (fabs(v63) >= 2.22044605e-16)
      {
        v58 = -v59 / v63;
        v64 = -v60 / v63;
        v65 = -v61 / v63;
        v57 = v62 / v63;
      }
      v229.f64[0] = v58;
      v229.f64[1] = v64;
      v230 = v65;
      v231 = v57;
      cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v229, (uint64_t)v228);
      v225 = 0x100000003;
      v223 = &unk_1E25C7790;
      v224 = xmmword_18D313070;
      v226 = v227;
      *(double *)v227 = v271[3];
      *(double *)&v227[1] = v271[4];
      *(double *)&v227[2] = v271[5];
      v220 = 0x100000003;
      v218 = &unk_1E25C7790;
      v219 = xmmword_18D313070;
      v221 = v222;
      v222[0] = v49 * v48;
      v222[1] = v49 * v50;
      v222[2] = v49 * v51;
      v66 = v27 - v271[10];
      v67 = v26 - v271[11];
      v68 = v28 - v271[12];
      v215 = 0x100000003;
      v213[9] = &unk_1E25C7790;
      v214 = xmmword_18D313070;
      v216 = v217;
      *(double *)v217 = v66;
      *(double *)&v217[1] = v67;
      *(double *)&v217[2] = v68;
      v211 = 0x300000003;
      v209 = &unk_1E25C78E0;
      v210 = xmmword_18D30BB60;
      v212 = v213;
      v213[0] = 0;
      *(double *)&v213[3] = -v68;
      v213[4] = 0;
      *(double *)&v213[7] = -v66;
      *(double *)&v213[1] = v68;
      *(double *)&v213[2] = -v67;
      *(double *)&v213[6] = v67;
      *(double *)&v213[5] = v66;
      v213[8] = 0;
      v206 = 0x100000007;
      v204 = &unk_1E25C81E0;
      v205 = xmmword_18D319810;
      v207 = (double *)&v208;
      v183[0] = vdupq_n_s64(0x7FF8000000000000uLL);
      v183[1] = v183[0];
      v183[2] = v183[0];
      v183[3] = v183[0];
      v183[4] = v183[0];
      v183[5] = v183[0];
      v183[6] = v183[0];
      v183[7] = v183[0];
      v183[8] = v183[0];
      v183[9] = v183[0];
      v183[10] = v183[0];
      v183[11] = v183[0];
      v183[12] = v183[0];
      v183[13] = v183[0];
      v183[14] = v183[0];
      v183[15] = v183[0];
      v184 = v183[0];
      v185 = v183[0];
      v186 = v183[0];
      v187 = v183[0];
      v188 = v183[0];
      v189 = v183[0];
      v190 = v183[0];
      v191 = v183[0];
      v192 = v183[0];
      v193 = v183[0];
      v194 = v183[0];
      v195 = v183[0];
      v196 = v183[0];
      v197 = v183[0];
      v198 = v183[0];
      v199 = v183[0];
      v200 = v183[0];
      v201 = v183[0];
      v202 = v183[0];
      v203 = 0x7FF8000000000000;
      LOBYTE(v281) = 0;
      if (sub_18D1C9FFC((uint64_t)&v273, v14, 0, (uint64_t)&v204, (uint64_t)v183, (BOOL *)&v281, 0.000000015))
      {
        sub_18D1C741C(v34, (uint64_t)"could not correct user states", (uint64_t)"h_DeviceUserVelocityDifference_RavenPNT", 3738, v69, v70, v71, v72);
        return 0xFFFFFFFFLL;
      }
      v105 = *v207;
      v106 = v207[1];
      v79 = v207[2];
      v180 = 0x100000003;
      v178 = &unk_1E25C7790;
      v179 = xmmword_18D313070;
      v181 = v182;
      v182[0] = -v105;
      v182[1] = -v106;
      v182[2] = -v79;
      sub_18D192C7C((uint64_t)&v209, (uint64_t)&v178, (uint64_t)v177);
      sub_18D192C7C((uint64_t)v228, (uint64_t)v177, (uint64_t)&v281);
      sub_18D1B2810((uint64_t)v176, (uint64_t)&v218, (uint64_t)&v281);
      v173 = 0x100000003;
      v171 = &unk_1E25C7790;
      v172 = xmmword_18D313070;
      v174 = &v175;
      sub_18D0540FC((uint64_t)&v223, (uint64_t)v176, (uint64_t)&v171);
      sub_18D1B2810((uint64_t)&v281, (uint64_t)&v171, v13);
      sub_18D053AA8(v12, (uint64_t)&v281);
      v80 = atomic_load((unsigned __int8 *)&qword_1ECF231D0);
      if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF231D0))
      {
        v283 = 0x300000001;
        v281 = (uint64_t (**)())&unk_1E25C6C50;
        v284 = &v285;
        v282 = xmmword_18D314670;
        v285 = 0x400000003;
        v286 = 5;
        sub_18D16169C((uint64_t)&v281, (uint64_t)&unk_1ECF235B8);
        __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF235B8, &dword_18D038000);
        __cxa_guard_release(&qword_1ECF231D0);
      }
      v81 = atomic_load((unsigned __int8 *)&qword_1ECF231D8);
      if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF231D8))
      {
        v283 = 0x300000001;
        v281 = (uint64_t (**)())&unk_1E25C6C50;
        v284 = &v285;
        v282 = xmmword_18D314670;
        v285 = 0x700000006;
        v286 = 8;
        sub_18D16169C((uint64_t)&v281, (uint64_t)&unk_1ECF235F0);
        __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF235F0, &dword_18D038000);
        __cxa_guard_release(&qword_1ECF231D8);
      }
      v82 = atomic_load((unsigned __int8 *)&qword_1ECF231E0);
      if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF231E0))
      {
        v283 = 0x300000001;
        v281 = (uint64_t (**)())&unk_1E25C6C50;
        v284 = &v285;
        v282 = xmmword_18D314670;
        v285 = 0xA00000009;
        v286 = 11;
        sub_18D16169C((uint64_t)&v281, (uint64_t)&unk_1ECF23628);
        __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23628, &dword_18D038000);
        __cxa_guard_release(&qword_1ECF231E0);
      }
      v83 = atomic_load((unsigned __int8 *)&qword_1ECF231E8);
      if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF231E8))
      {
        v283 = 0x300000001;
        v281 = (uint64_t (**)())&unk_1E25C6C50;
        v284 = &v285;
        v282 = xmmword_18D314670;
        v285 = 0x1500000014;
        v286 = 22;
        sub_18D16169C((uint64_t)&v281, (uint64_t)&unk_1ECF23660);
        __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23660, &dword_18D038000);
        __cxa_guard_release(&qword_1ECF231E8);
      }
      v84 = atomic_load((unsigned __int8 *)&qword_1ECF231F0);
      if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF231F0))
      {
        v283 = 0x300000001;
        v281 = (uint64_t (**)())&unk_1E25C6C50;
        v284 = &v285;
        v282 = xmmword_18D314670;
        v285 = 0x1800000017;
        v286 = 25;
        sub_18D16169C((uint64_t)&v281, (uint64_t)&unk_1ECF23698);
        __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23698, &dword_18D038000);
        __cxa_guard_release(&qword_1ECF231F0);
      }
      sub_18D1BE948(3u, 3u, (uint64_t)&v171);
      v85 = v174;
      *v174 = v233.i64[1];
      v86 = HIDWORD(v172);
      v85[HIDWORD(v172) + 1] = v234.i64[0];
      v85[2 * v86 + 2] = v234.i64[1];
      v168 = 0x100000003;
      v166 = &unk_1E25C7790;
      v167 = xmmword_18D313070;
      v169 = v170;
      v170[0] = -v48;
      v170[1] = -v50;
      v170[2] = -v51;
      v162 = 0x300000001;
      v160 = &unk_1E25C6C20;
      v161 = xmmword_18D314670;
      v163 = &v164;
      v164 = v257;
      v165 = v258.i64[0];
      v151 = 0x100000003;
      v149 = &unk_1E25C7790;
      v152 = v153;
      v150 = xmmword_18D313070;
      sub_18D04BE88((uint64_t)&v149, 1.0);
      v87.f64[0] = -v49;
      sub_18D1B27A8((uint64_t)&v149, (uint64_t)&v154, v87);
      sub_18D1D4908((uint64_t)&v281, (uint64_t)&v154);
      sub_18D163614((uint64_t)v159, (uint64_t)&v281);
      v156 = 0x300000003;
      v154 = &unk_1E25C78E0;
      v155 = xmmword_18D30BB60;
      v157 = v158;
      v158[0] = v258.i64[1];
      v158[1] = v261.i64[1];
      v158[6] = v259.i64[1];
      v158[7] = v262.i64[1];
      v158[3] = v259.i64[0];
      v158[2] = v264.i64[1];
      v158[4] = v262.i64[0];
      v158[8] = v265.i64[1];
      v158[5] = v265.i64[0];
      v151 = 0x300000003;
      v149 = &unk_1E25C78E0;
      v150 = xmmword_18D30BB60;
      v152 = v153;
      v153[0] = v260.i64[0];
      v153[1] = v263.i64[0];
      v153[6] = v261.i64[0];
      v153[7] = v264.i64[0];
      v153[3] = v260.i64[1];
      v153[2] = v266.i64[0];
      v153[4] = v263.i64[1];
      v153[5] = v266.i64[1];
      *(double *)&v153[8] = v267;
      cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v229, (uint64_t)v148);
      cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v229, (uint64_t)v147);
      cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v229, (uint64_t)v146);
      cnrotation::CNRotation::dRdq4(&v229, (uint64_t)v145);
      *(_QWORD *)&v88.f64[0] = v235.i64[0];
      v140 = 0x300000003;
      v138 = &unk_1E25C78E0;
      v139 = xmmword_18D30BB60;
      v141 = &v142;
      v89 = sub_18D1C94E0((uint64_t)v148, (uint64_t)&v138, v88);
      *(_QWORD *)&v89.f64[0] = v236.i64[1];
      v135 = 0x300000003;
      v133 = &unk_1E25C78E0;
      v134 = xmmword_18D30BB60;
      v136 = v137;
      sub_18D1C94E0((uint64_t)v147, (uint64_t)&v133, v89);
      sub_18D1BE894((uint64_t)&v138, (uint64_t)&v133, (uint64_t)v143);
      *(_QWORD *)&v90.f64[0] = v238.i64[0];
      v130 = 0x300000003;
      v128 = &unk_1E25C78E0;
      v129 = xmmword_18D30BB60;
      v131 = v132;
      sub_18D1C94E0((uint64_t)v146, (uint64_t)&v128, v90);
      sub_18D1BE894((uint64_t)v143, (uint64_t)&v128, (uint64_t)&v281);
      *(_QWORD *)&v91.f64[0] = v239.i64[1];
      v125 = 0x300000003;
      v123 = &unk_1E25C78E0;
      v124 = xmmword_18D30BB60;
      v126 = v127;
      sub_18D1C94E0((uint64_t)v145, (uint64_t)&v123, v91);
      sub_18D1BE894((uint64_t)&v281, (uint64_t)&v123, (uint64_t)v144);
      *(_QWORD *)&v92.f64[0] = v235.i64[1];
      v135 = 0x300000003;
      v133 = &unk_1E25C78E0;
      v134 = xmmword_18D30BB60;
      v136 = v137;
      v93 = sub_18D1C94E0((uint64_t)v148, (uint64_t)&v133, v92);
      *(_QWORD *)&v93.f64[0] = v237.i64[0];
      v130 = 0x300000003;
      v128 = &unk_1E25C78E0;
      v129 = xmmword_18D30BB60;
      v131 = v132;
      sub_18D1C94E0((uint64_t)v147, (uint64_t)&v128, v93);
      sub_18D1BE894((uint64_t)&v133, (uint64_t)&v128, (uint64_t)&v138);
      *(_QWORD *)&v94.f64[0] = v238.i64[1];
      v125 = 0x300000003;
      v123 = &unk_1E25C78E0;
      v124 = xmmword_18D30BB60;
      v126 = v127;
      sub_18D1C94E0((uint64_t)v146, (uint64_t)&v123, v94);
      sub_18D1BE894((uint64_t)&v138, (uint64_t)&v123, (uint64_t)&v281);
      *(_QWORD *)&v95.f64[0] = v240.i64[0];
      v120 = 0x300000003;
      v118 = &unk_1E25C78E0;
      v119 = xmmword_18D30BB60;
      v121 = (double *)v122;
      sub_18D1C94E0((uint64_t)v145, (uint64_t)&v118, v95);
      sub_18D1BE894((uint64_t)&v281, (uint64_t)&v118, (uint64_t)v143);
      *(_QWORD *)&v96.f64[0] = v236.i64[0];
      v130 = 0x300000003;
      v128 = &unk_1E25C78E0;
      v129 = xmmword_18D30BB60;
      v131 = v132;
      v97 = sub_18D1C94E0((uint64_t)v148, (uint64_t)&v128, v96);
      *(_QWORD *)&v97.f64[0] = v237.i64[1];
      v125 = 0x300000003;
      v123 = &unk_1E25C78E0;
      v124 = xmmword_18D30BB60;
      v126 = v127;
      sub_18D1C94E0((uint64_t)v147, (uint64_t)&v123, v97);
      sub_18D1BE894((uint64_t)&v128, (uint64_t)&v123, (uint64_t)&v133);
      *(_QWORD *)&v98.f64[0] = v239.i64[0];
      v120 = 0x300000003;
      v118 = &unk_1E25C78E0;
      v119 = xmmword_18D30BB60;
      v121 = (double *)v122;
      sub_18D1C94E0((uint64_t)v146, (uint64_t)&v118, v98);
      sub_18D1BE894((uint64_t)&v133, (uint64_t)&v118, (uint64_t)&v281);
      *(_QWORD *)&v99.f64[0] = v240.i64[1];
      v115 = 0x300000003;
      v113 = &unk_1E25C78E0;
      v114 = xmmword_18D30BB60;
      v116 = &v117;
      sub_18D1C94E0((uint64_t)v145, (uint64_t)&v113, v99);
      sub_18D1BE894((uint64_t)&v281, (uint64_t)&v113, (uint64_t)&v138);
      sub_18D192C7C((uint64_t)v144, (uint64_t)v177, (uint64_t)&v123);
      sub_18D192C7C((uint64_t)v143, (uint64_t)v177, (uint64_t)&v118);
      sub_18D192C7C((uint64_t)&v138, (uint64_t)v177, (uint64_t)&v113);
      sub_18D1D49B0((uint64_t)&v128, (uint64_t)&v118, (uint64_t)&v113);
      sub_18D1D4944((uint64_t)&v281, (uint64_t)&v123, (uint64_t)&v128);
      v135 = 0x300000003;
      v133 = &unk_1E25C78E0;
      v134 = xmmword_18D30BB60;
      v136 = v137;
      sub_18D054E78((uint64_t)&v281, (uint64_t)&v133);
      v130 = 0x300000003;
      v128 = &unk_1E25C78E0;
      v129 = xmmword_18D30BB60;
      v131 = v132;
      v132[0] = 0;
      *(double *)&v132[3] = v79;
      v132[4] = 0;
      *(double *)&v132[7] = v105;
      *(double *)&v132[1] = -v79;
      *(double *)&v132[2] = v106;
      *(double *)&v132[6] = -v106;
      *(double *)&v132[5] = -v105;
      v132[8] = 0;
      sub_18D166008((uint64_t)v228, (uint64_t)&v128, (uint64_t)&v123);
      v120 = 0x300000003;
      v118 = &unk_1E25C78E0;
      v121 = (double *)v122;
      v119 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v118, 0.0);
      v100 = v121;
      *v121 = -*(double *)v241.i64;
      v101 = HIDWORD(v119);
      v100[HIDWORD(v119) + 1] = -*(double *)&v241.i64[1];
      v100[2 * v101 + 2] = -*(double *)v242.i64;
      v283 = 0x300000003;
      v281 = (uint64_t (**)())&unk_1E25C78E0;
      v282 = xmmword_18D30BB60;
      v284 = &v285;
      sub_18D054E78((uint64_t)v228, (uint64_t)&v281);
      sub_18D166008((uint64_t)&v281, (uint64_t)&v209, (uint64_t)&v113);
      sub_18D1BE948(3u, 3u, (uint64_t)v110);
      v102 = v112;
      *v112 = -*((double *)&v184 + 1);
      v103 = v111;
      v102[v111 + 1] = -*((double *)&v188 + 1);
      v102[2 * v103 + 2] = -*((double *)&v192 + 1);
      v283 = 0x1A00000003;
      v281 = &off_1E25C7850;
      v284 = &v285;
      v282 = xmmword_18D319800;
      sub_18D04BE88((uint64_t)&v281, 0.0);
      sub_18D053AA8(v11, (uint64_t)&v281);
      sub_18D1D4318((uint64_t)&v281, v11, (uint64_t)&unk_1ECF235B8);
      sub_18D16171C((uint64_t)&v281, (uint64_t)&v171);
      sub_18D166008((uint64_t)v159, (uint64_t)&v154, (uint64_t)v108);
      sub_18D1BE894((uint64_t)v108, (uint64_t)&v133, (uint64_t)v109);
      sub_18D1D4318((uint64_t)&v281, v11, (uint64_t)&unk_1ECF235F0);
      sub_18D16171C((uint64_t)&v281, (uint64_t)v109);
      sub_18D166008((uint64_t)&v123, (uint64_t)&v118, (uint64_t)v109);
      sub_18D1D4318((uint64_t)&v281, v11, (uint64_t)&unk_1ECF23628);
      sub_18D16171C((uint64_t)&v281, (uint64_t)v109);
      sub_18D166008((uint64_t)&v113, (uint64_t)v110, (uint64_t)v109);
      sub_18D1D4318((uint64_t)&v281, v11, (uint64_t)&unk_1ECF23660);
      sub_18D16171C((uint64_t)&v281, (uint64_t)v109);
      sub_18D1D4A34((uint64_t)&v166, (uint64_t)&v160, (uint64_t)v108);
      sub_18D166008((uint64_t)v159, (uint64_t)&v149, (uint64_t)v107);
      sub_18D1BE894((uint64_t)v108, (uint64_t)v107, (uint64_t)v109);
      sub_18D1D4318((uint64_t)&v281, v11, (uint64_t)&unk_1ECF23698);
      sub_18D16171C((uint64_t)&v281, (uint64_t)v109);
    }
    else if (v25 == 2)
    {
      __assert_rtn("h_DeviceUserVelocityDifference_RavenPNT", "ravenmeasurementfunctions.h", 3862, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
    }
  }
  else
  {
    *(_OWORD *)(v12 + 8) = xmmword_18D313070;
    v73 = *(double **)(v13 + 32);
    v74 = *(double **)(v12 + 32);
    *v74 = v47[3] - v49 * v48 + *v73;
    v74[1] = v47[4] - v49 * v50 + v73[1];
    v74[2] = v47[5] - v49 * v51 + v73[2];
    v283 = 0x1A00000003;
    v281 = &off_1E25C7850;
    v284 = &v285;
    v282 = xmmword_18D319800;
    sub_18D04BE88((uint64_t)&v281, 0.0);
    sub_18D053AA8(v11, (uint64_t)&v281);
    v75 = *(_DWORD *)(v11 + 20);
    v76 = 3 * v75;
    v77 = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v77 + 24 * v75) = v233.i64[1];
    *(_QWORD *)(v77 + 8 * ((4 * v75) | 1)) = v234.i64[0];
    *(_QWORD *)(v77 + 8 * (5 * v75 + 2)) = v234.i64[1];
    v78 = 23 * v75;
    *(double *)(v77 + 184 * v75) = -(v49 * *(double *)v260.i64) - v48 * *(double *)v257.i64;
    *(double *)(v77 + 192 * v75) = -(v49 * *(double *)&v260.i64[1]) - v48 * *(double *)&v257.i64[1];
    v75 *= 25;
    *(double *)(v77 + 8 * v75) = -(v49 * *(double *)v261.i64) - v48 * *(double *)v258.i64;
    *(double *)(v77 + 8 * (v78 + 1)) = -(v49 * *(double *)v263.i64) - v50 * *(double *)v257.i64;
    *(double *)(v77 + 8 * ((8 * v76) | 1)) = -(v49 * *(double *)&v263.i64[1]) - v50 * *(double *)&v257.i64[1];
    *(double *)(v77 + 8 * (v75 + 1)) = -(v49 * *(double *)v264.i64) - v50 * *(double *)v258.i64;
    *(double *)(v77 + 8 * (v78 + 2)) = -(v49 * *(double *)v266.i64) - v51 * *(double *)v257.i64;
    *(double *)(v77 + 8 * ((8 * v76) | 2)) = -(v49 * *(double *)&v266.i64[1]) - v51 * *(double *)&v257.i64[1];
    *(double *)(v77 + 8 * (v75 + 2)) = -(v49 * v267) - v51 * *(double *)v258.i64;
  }
  sub_18D1BE948(3u, 3u, (uint64_t)&v281);
  sub_18D053AA8(v10, (uint64_t)&v281);
  return 0;
}

void sub_18D1B3F5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF231F0);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B4068(uint64_t a1)
{
  *(_QWORD *)(a1 + 96) = &unk_1E25B8DB8;
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D1B40B8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  cnprint::CNPrinter *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  __n128 v46;
  uint64_t (*v47)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  void *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned __int8 v67;
  void (*v68[5])(uint64_t);

  v68[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a4 + 8);
  if ((v6 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v64 = 0x100000003;
  v59 = &unk_1E25C7790;
  v65 = &v66;
  v60 = v6;
  v61 = 1;
  v62 = v6;
  v63 = v6;
  v13 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v59, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v68[0]) = 2;
      v67 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v68[0]) = 2;
    v67 = 2;
    v55 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v14, v15, v16, v17, v18, SLOBYTE(v55));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v68[0]) = 2;
      v67 = 1;
      v57 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v57));
    }
    return 0xFFFFFFFFLL;
  }
  v29 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v29)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
    {
      LOWORD(v68[0]) = 2;
      v67 = 1;
      v58 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v58));
    }
    return 0xFFFFFFFFLL;
  }
  v68[0] = 0;
  v68[1] = 0;
  sub_18D1D4EC4((void (**)(int))v68, a6);
  v35 = sub_18D1C7B34((uint64_t *)(a1 + 40), v68);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v68);
  v36 = *(int *)(a1 + 5936);
  v37 = (v36 + 1);
  if (*(_QWORD *)(a1 + 56) != v37)
  {
    LOWORD(v68[0]) = 2;
    v67 = 4;
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v50, v51, v52, v53, v54, v49);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v37;
  *(_DWORD *)(a1 + 72) = v37;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v37;
  *(_DWORD *)(a1 + 84) = v37;
  *(_DWORD *)(a1 + 2896) = v37;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v37;
  *(_DWORD *)(a1 + 2908) = v37;
  *(_DWORD *)(a1 + 3632) = v37;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v37;
  *(_DWORD *)(a1 + 3644) = v37;
  *(_DWORD *)(a1 + 5064) = v37;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v37;
  *(_DWORD *)(a1 + 5076) = v37;
  *(_DWORD *)(a1 + 5112) = v37;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v37;
  *(_DWORD *)(a1 + 5124) = v37;
  *(_DWORD *)(a1 + 5848) = v37;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v37;
  *(_DWORD *)(a1 + 5860) = v37;
  *(_DWORD *)(a1 + 5896) = v37;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v37;
  *(_DWORD *)(a1 + 5908) = v37;
  *(_DWORD *)(a1 + 5952) = v37;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v37;
  *(_DWORD *)(a1 + 5964) = v37;
  *(_DWORD *)(a1 + 7384) = v37;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v37;
  *(_DWORD *)(a1 + 7396) = v37;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v36) = *(_OWORD *)a2;
  v38 = *(_DWORD *)(a3 + 8);
  v39 = *(_DWORD *)(a3 + 12);
  if (v38 <= v39)
    v40 = *(_DWORD *)(a3 + 12);
  else
    v40 = *(_DWORD *)(a3 + 8);
  if (v39)
    v41 = v38 == 0;
  else
    v41 = 1;
  if (v41)
    v42 = 0;
  else
    v42 = v40;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v36) = v42;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v36 << 6), a3);
  if (v60 <= v61)
    v43 = v61;
  else
    v43 = v60;
  if (v61)
    v44 = v60 == 0;
  else
    v44 = 1;
  if (v44)
    v45 = 0;
  else
    v45 = v43;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v36) = v45;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v36 << 6), (uint64_t)&v59);
  v46 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v36, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v36) = a5;
  v47 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v35;
  if (*v35)
    v47 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v47(3, v35, 0, &unk_1E25B4B28, &std::__any_imp::__unique_typeinfo<raven::h_DeviceUserVelocityDifferenceArgs_RavenPNT<double>>::__id, v46);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v36) = v47;
  return result;
}

void sub_18D1B44B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenPNTEstimator::PredictAndUpdate(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  double v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  cnprint::CNPrinter *v20;
  unsigned __int8 *v21;
  int8x16_t v22;
  uint64_t v23;
  double v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  int8x16_t *v29;
  double v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  unint64_t v43;
  uint64_t *v44;
  int8x16_t *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  int8x16_t *v49;
  int8x16_t *v50;
  uint64_t v52;
  uint64_t **v53;
  __n128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  cnprint::CNPrinter *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  uint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  __n128 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  _BOOL4 v95;
  _QWORD *v96;
  double v101;
  double *v102;
  __int128 *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int updated;
  int8x16_t v115;
  int8x16_t v116;
  int v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int *v120;
  unint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  cnprint::CNPrinter *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __n128 v148;
  __n128 v149;
  int8x16_t v150;
  uint64_t v151;
  _DWORD *v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __n128 v160;
  __n128 v161;
  int8x16_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  char v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  double v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  double v188;
  unint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  _DWORD *v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  unsigned __int8 v202;
  unsigned int *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int *v206;
  unsigned int *v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int *v210;
  uint64_t v211;
  void *v212;
  __int128 v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  _QWORD v217[5];
  uint64_t v218;
  unsigned __int8 v219[248];
  uint64_t *v220[33];
  __n128 v221;
  double v222;
  uint64_t (**v223)();
  int v224;
  int v225;
  int v226;
  int v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD v230[2];
  double *v231;
  uint64_t v232;
  double v233;
  double v234;
  __n128 v235[3];
  uint64_t (**v236)();
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t (**v242)(uint64_t, uint64_t);
  uint64_t (*v243)(uint64_t, uint64_t);
  uint64_t (*v244)(uint64_t, uint64_t, double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void *v245;
  uint64_t (*v246)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v247;
  int v248;
  int v249;
  int v250;
  int v251;
  uint64_t v252;
  __int128 *v253;
  __int128 v254;
  uint64_t (**v255)();
  int v256;
  int v257;
  int v258;
  int v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD v262[2];
  double *v263;
  uint64_t v264;
  double v265;
  double v266;
  int8x16_t v267;
  uint64_t v268;
  _OWORD v269[3];
  _OWORD v270[14];
  _BYTE v271[192];
  __n128 v272;
  __n128 v273;
  __n128 v274;
  uint64_t (**v275)();
  int v276;
  int v277;
  int v278;
  int v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD v282[2];
  void *v283;
  uint64_t (*v284)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v285)();
  int v286;
  int v287;
  int v288;
  int v289;
  uint64_t v290;
  _DWORD *v291;
  _DWORD v292[2];
  int v293;
  int v294;
  _QWORD v295[5];
  uint64_t v296;
  uint64_t (**v297)();
  __int128 v298;
  uint64_t v299;
  _OWORD *v300;
  _OWORD v301[2];
  void *v302;
  __int128 v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t (**v307)();
  __int128 v308;
  uint64_t v309;
  _OWORD *v310;
  _OWORD v311[3];
  _OWORD v312[2];
  int8x16_t v313;

  if (!*(_BYTE *)(a1 + 58))
    return 32;
  v4 = a1 + 61288;
  v313 = *(int8x16_t *)a2;
  v5 = a2[1].n128_f64[0];
  if (v5 < 0.0)
  {
    v6 = (__n128 *)(a1 + 80);
    sub_18D1BE17C(a1 + 61288, a1 + 80);
    *(_BYTE *)v4 = 0;
    sub_18D05DB3C(v4, v6, v7, v8, v9, v10, v11, v12);
    return 64;
  }
  if (v5 <= 0.0)
    return 0;
  if (sub_18D05B574((double *)v313.i64, (double *)(a1 + 61296)))
  {
    v267.i16[0] = 2;
    LOBYTE(v220[0]) = 4;
    v20 = (cnprint::CNPrinter *)&v267;
    v21 = (unsigned __int8 *)v220;
    goto LABEL_56;
  }
  v22 = v313;
  *(int8x16_t *)(a1 + 61312) = v313;
  v23 = CNTimeSpan::operator-(a1 + 61312, (_QWORD *)(a1 + 61296), v22, v19);
  v26 = *(unsigned int *)(v4 + 5936);
  if ((int)v26 >= 1)
  {
    v27 = 0;
    *(double *)v25.i64 = (double)v23;
    v28 = v24 + (double)v23;
    v29 = *(int8x16_t **)(v4 + 96);
    while (1)
    {
      v267 = *v29;
      *(double *)v25.i64 = (double)CNTimeSpan::operator-((uint64_t)&v267, (_QWORD *)(a1 + 61296), v267, v25);
      v31 = (v30 + *(double *)v25.i64) / v28;
      if (v31 < 0.0)
        break;
      *(double *)(*(_QWORD *)(v4 + 3656) + v27) = v31;
      v27 += 8;
      ++v29;
      if (8 * v26 == v27)
        goto LABEL_13;
    }
    LOWORD(v220[0]) = 2;
    LOBYTE(v212) = 2;
    v20 = (cnprint::CNPrinter *)v220;
    v21 = (unsigned __int8 *)&v212;
LABEL_56:
    cnprint::CNPrinter::Print(v20, v21, "WARNING: MeasurementAccumulator.LockAccumulator() called with bad t_end.", v14, v15, v16, v17, v18, v187);
LABEL_57:
    v54 = (__n128 *)(a1 + 80);
    sub_18D1BE17C(v4, (uint64_t)v54);
    *(_BYTE *)v4 = 0;
    sub_18D05DB3C(v4, v54, v55, v56, v57, v58, v59, v60);
    return 128;
  }
LABEL_13:
  *(_DWORD *)(v4 + 11904) = 87;
  *(_OWORD *)(v4 + 10248) = xmmword_18D3197F0;
  *(_OWORD *)(v4 + 8816) = xmmword_18D3197F0;
  *(_OWORD *)(v4 + 10640) = xmmword_18D3197F0;
  *(_OWORD *)(v4 + 11376) = xmmword_18D3197F0;
  *(_OWORD *)(v4 + 11816) = xmmword_18D3197F0;
  *(_OWORD *)(v4 + 11424) = xmmword_18D3197F0;
  *(_OWORD *)(v4 + 11864) = xmmword_18D3197F0;
  *(_OWORD *)(v4 + 11920) = xmmword_18D3197F0;
  *(_OWORD *)(v4 + 12656) = xmmword_18D3197F0;
  v267.i64[1] = 0;
  v268 = 0;
  v267.i64[0] = (uint64_t)&v267.i64[1];
  if ((int)v26 < 1)
  {
    v33 = 0;
    goto LABEL_62;
  }
  v32 = 0;
  v198 = 0;
  v200 = 0;
  v33 = 0;
  do
  {
    if (*(double *)(*(_QWORD *)(v4 + 3656) + 8 * v32) > 1.0)
      goto LABEL_49;
    ++v198;
    v34 = *(_DWORD *)(*(_QWORD *)(v4 + 2920) + 4 * v32);
    v35 = v34 + v200;
    if (v33 <= 86 && v35 < 88)
    {
      v36 = v33;
      goto LABEL_19;
    }
    v46 = v267.i64[0];
    if ((unint64_t *)v267.i64[0] == &v267.u64[1])
      goto LABEL_81;
    v47 = 0;
    v48 = -1;
    do
    {
      if (*(_DWORD *)(v46 + 40) > v48)
      {
        v47 = *(uint64_t **)(v46 + 32);
        v48 = *(_DWORD *)(v46 + 40);
      }
      v49 = *(int8x16_t **)(v46 + 8);
      if (v49)
      {
        do
        {
          v50 = v49;
          v49 = (int8x16_t *)v49->i64[0];
        }
        while (v49);
      }
      else
      {
        do
        {
          v50 = *(int8x16_t **)(v46 + 16);
          _ZF = v50->i64[0] == v46;
          v46 = (uint64_t)v50;
        }
        while (!_ZF);
      }
      v46 = (uint64_t)v50;
    }
    while (v50 != (int8x16_t *)&v267.u64[1]);
    v220[0] = v47;
    if (!v47)
    {
LABEL_81:
      LOWORD(v212) = 2;
      v219[0] = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v212, v219, "MeasurementAccumulator.LockAccumulator() most_common_measurement_type == nullptr", v14, v15, v16, v17, v18, v187);
      goto LABEL_60;
    }
    if (*(uint64_t **)(*(_QWORD *)(v4 + 5976) + 8 * v32) != v47)
    {
      v36 = v33 - 1;
      if (v33 < 1)
      {
LABEL_59:
        LOWORD(v212) = 2;
        v219[0] = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v212, v219, "MeasurementAccumulator.LockAccumulator() found_idx == false", v14, v15, v16, v17, v18, v187);
LABEL_60:
        sub_18D05B5E4((_QWORD *)v267.i64[1]);
        goto LABEL_57;
      }
      LODWORD(v52) = v33;
      while (1)
      {
        v52 = (v52 - 1);
        if (*(uint64_t **)(*(_QWORD *)(v4 + 11944) + 8 * v52) == v47)
          break;
        if ((int)v52 <= 0)
          goto LABEL_59;
      }
      if (v35 - *(_DWORD *)(*(_QWORD *)(v4 + 10272) + 4 * v52) <= 87)
      {
        v53 = sub_18D1D73A0((uint64_t **)&v267, (unint64_t)v47, v220);
        --*((_DWORD *)v53 + 10);
        v200 -= *(_DWORD *)(*(_QWORD *)(v4 + 10272) + 4 * v52);
        v33 = v52;
LABEL_19:
        *(_OWORD *)(*(_QWORD *)(v4 + 8840) + 16 * v33) = *(_OWORD *)(*(_QWORD *)(v4 + 96) + 16 * v32);
        *(_DWORD *)(*(_QWORD *)(v4 + 10272) + 4 * v33) = v34;
        *(_QWORD *)(*(_QWORD *)(v4 + 10664) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(v4 + 3656) + 8 * v32);
        sub_18D053AA8(*(_QWORD *)(v4 + 11400) + ((uint64_t)v33 << 6), *(_QWORD *)(v4 + 5088) + (v32 << 6));
        *(_DWORD *)(*(_QWORD *)(v4 + 11448) + 4 * v33) = *(_DWORD *)(*(_QWORD *)(v4 + 5136) + 4 * v32);
        sub_18D053AA8(*(_QWORD *)(v4 + 11840) + ((uint64_t)v33 << 6), *(_QWORD *)(v4 + 5872) + (v32 << 6));
        sub_18D053AA8(*(_QWORD *)(v4 + 11888) + 112 * v33, *(_QWORD *)(v4 + 5920) + 112 * v32);
        *(_QWORD *)(*(_QWORD *)(v4 + 11944) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(v4 + 5976) + 8 * v32);
        *(_QWORD *)(*(_QWORD *)(v4 + 12680) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(v4 + 7408) + 8 * v32);
        v37 = (uint64_t **)(*(_QWORD *)(v4 + 5976) + 8 * v32);
        v38 = v267.i64[1];
        v39 = *v37;
        if (!v267.i64[1])
          goto LABEL_29;
        v40 = (int8x16_t *)&v267.u64[1];
        do
        {
          v41 = (int8x16_t *)v38;
          v42 = v40;
          v43 = *(_QWORD *)(v38 + 32);
          v44 = (uint64_t *)(v38 + 8);
          if (v43 >= (unint64_t)v39)
          {
            v44 = (uint64_t *)v41;
            v40 = v41;
          }
          v38 = *v44;
        }
        while (v38);
        if (v40 != (int8x16_t *)&v267.u64[1]
          && (v43 >= (unint64_t)v39 ? (v45 = v41) : (v45 = v42), (unint64_t)v39 >= v45[2].i64[0]))
        {
          if (v43 < (unint64_t)v39)
            v41 = v42;
          ++v41[2].i32[2];
        }
        else
        {
LABEL_29:
          *((_DWORD *)sub_18D1D73A0((uint64_t **)&v267, (unint64_t)v39, v37) + 10) = 1;
        }
        v33 = v36 + 1;
        v200 += v34;
        LODWORD(v26) = *(_DWORD *)(v4 + 5936);
      }
    }
LABEL_49:
    ++v32;
  }
  while (v32 < (int)v26);
  if (v198 > v33)
  {
    LOWORD(v220[0]) = 2;
    LOBYTE(v212) = 2;
    v188 = *(double *)&v313.i64[1] + (double)v313.i64[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v220, (unsigned __int8 *)&v212, "t,%.3lf,WARNING: MeasurementAccumulator.LockAccumulator() truncating measurements,nh,%d,eligible,%d,num_truncated,%d", v14, v15, v16, v17, v18, SLOBYTE(v188));
  }
LABEL_62:
  *(_DWORD *)(v4 + 11904) = v33;
  *(_DWORD *)(v4 + 8816) = v33;
  *(_DWORD *)(v4 + 8820) = 1;
  *(_DWORD *)(v4 + 8824) = v33;
  *(_DWORD *)(v4 + 8828) = v33;
  *(_DWORD *)(v4 + 10248) = v33;
  *(_DWORD *)(v4 + 10252) = 1;
  *(_DWORD *)(v4 + 10256) = v33;
  *(_DWORD *)(v4 + 10260) = v33;
  *(_DWORD *)(v4 + 10640) = v33;
  *(_DWORD *)(v4 + 10644) = 1;
  *(_DWORD *)(v4 + 10648) = v33;
  *(_DWORD *)(v4 + 10652) = v33;
  *(_DWORD *)(v4 + 11376) = v33;
  *(_DWORD *)(v4 + 11380) = 1;
  *(_DWORD *)(v4 + 11384) = v33;
  *(_DWORD *)(v4 + 11388) = v33;
  *(_DWORD *)(v4 + 11424) = v33;
  *(_DWORD *)(v4 + 11428) = 1;
  *(_DWORD *)(v4 + 11432) = v33;
  *(_DWORD *)(v4 + 11436) = v33;
  *(_DWORD *)(v4 + 11816) = v33;
  *(_DWORD *)(v4 + 11820) = 1;
  *(_DWORD *)(v4 + 11824) = v33;
  *(_DWORD *)(v4 + 11828) = v33;
  *(_DWORD *)(v4 + 11864) = v33;
  *(_DWORD *)(v4 + 11868) = 1;
  *(_DWORD *)(v4 + 11872) = v33;
  *(_DWORD *)(v4 + 11876) = v33;
  *(_DWORD *)(v4 + 11920) = v33;
  *(_DWORD *)(v4 + 11924) = 1;
  *(_DWORD *)(v4 + 11928) = v33;
  *(_DWORD *)(v4 + 11932) = v33;
  *(_DWORD *)(v4 + 12656) = v33;
  *(_DWORD *)(v4 + 12660) = 1;
  *(_DWORD *)(v4 + 12664) = v33;
  *(_DWORD *)(v4 + 12668) = v33;
  *(_BYTE *)(v4 + 1) = 1;
  sub_18D05B5E4((_QWORD *)v267.i64[1]);
  if (!cnprint::CNPrinter::GetLogLevel(v62))
  {
    v267.i16[0] = 12;
    LOBYTE(v220[0]) = 0;
    v70 = *(double *)&v313.i64[1] + (double)v313.i64[0];
    v71 = sub_18D05C4D8(v4, v63, v64, v65, v66, v67, v68, v69);
    cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a1 + 80, "Predict,%.2lf,dt,%.3lf,meas_types,%d", v70, v5, v71);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v77) = a1 - 72;
    else
      v77 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v267, (unsigned __int8 *)v220, "%s", v72, v73, v74, v75, v76, v77);
  }
  for (i = 10; i != 29; ++i)
    v267.i32[i] = i - 10;
  v309 = 0x100000013;
  v307 = &off_1E25C66E0;
  v310 = v311;
  v308 = xmmword_18D319860;
  v311[2] = v269[2];
  v312[0] = v270[0];
  *(_OWORD *)((char *)v312 + 12) = *(_OWORD *)((char *)v270 + 12);
  v311[0] = v269[0];
  v311[1] = v269[1];
  *(_QWORD *)&v269[0] = 0x1400000013;
  v304 = 0x100000002;
  v302 = &unk_1E25C7550;
  v305 = &v306;
  v306 = 0x1400000013;
  v79 = 10;
  v303 = xmmword_18D319330;
  do
  {
    v267.i32[v79] = v79 + 11;
    ++v79;
  }
  while (v79 != 17);
  v299 = 0x100000007;
  v297 = &off_1E25C8210;
  v300 = v301;
  v298 = xmmword_18D319810;
  v301[0] = v269[0];
  *(_OWORD *)((char *)v301 + 12) = *(_OWORD *)((char *)v269 + 12);
  sub_18D1D77AC((uint64_t)v295);
  if (sub_18D1BA0A8(a1, (uint64_t)a2, (uint64_t)v295))
  {
    v82 = (__n128 *)(a1 + 80);
    sub_18D1BE17C(v4, (uint64_t)v82);
    *(_BYTE *)v4 = 0;
    v89 = sub_18D05DB3C(v4, v82, v83, v84, v85, v86, v87, v88);
    v13 = 256;
    goto LABEL_73;
  }
  v91 = *(unsigned __int8 *)(a1 + 2536);
  if (*(_BYTE *)(a1 + 2536))
  {
    if (v91 == 1)
    {
      v92 = 4;
    }
    else
    {
      if (v91 == 2)
        __assert_rtn("PredictAndUpdate", "ravenpntestimator.cpp", 5764, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      v92 = 0;
    }
  }
  else
  {
    v92 = 3;
  }
  v80.i64[0] = 0x200000004;
  v290 = 0x200000004;
  v285 = &off_1E25C7F10;
  v286 = v92;
  v93 = 2;
  v287 = 2;
  v288 = 2 * v92;
  v289 = v92;
  v292[0] = 18;
  v292[v92] = 15;
  v291 = v292;
  v292[1] = 2;
  v292[v92 + 1] = 2;
  if (v91 == 1)
  {
    v93 = 3;
    v293 = 3;
    v292[v92 + 2] = 3;
    v294 = 3;
    v94 = 3;
LABEL_89:
    v292[v93 + v92] = v94;
  }
  else if (!v91)
  {
    v94 = 6;
    v293 = 6;
    goto LABEL_89;
  }
  v280 = 0x100000004;
  v275 = &off_1E25C7DC0;
  v276 = v92;
  v277 = 1;
  v278 = v92;
  v281 = v282;
  v279 = v92;
  v282[0] = sub_18D1BB3E0;
  v282[1] = sub_18D1BBCBC;
  if (v91 == 1)
  {
    v283 = sub_18D1BC200;
    v284 = sub_18D1BC200;
  }
  else if (!v91)
  {
    v283 = sub_18D1BBF3C;
  }
  v95 = raven::RavenPNTEstimator::UseHighAccelerationParameters((raven::RavenPNTEstimator *)a1, v80, v81);
  v96 = *(_QWORD **)(a1 + 1168);
  if (v95)
  {
    *(_QWORD *)(a1 + 2600) = v96[85];
    *(_QWORD *)(a1 + 2616) = v96[87];
    *(_OWORD *)(a1 + 2624) = 0u;
    *(_OWORD *)(a1 + 2640) = 0u;
    *(_OWORD *)(a1 + 2656) = 0u;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 2672) = _Q0;
    v101 = 1.0;
  }
  else
  {
    *(_QWORD *)(a1 + 2600) = v96[84];
    *(_QWORD *)(a1 + 2616) = v96[86];
    v102 = *(double **)(a1 + 14648);
    *(double *)(a1 + 2624) = v102[10];
    *(double *)(a1 + 2632) = v102[11];
    *(double *)(a1 + 2640) = v102[12];
    *(double *)(a1 + 2648) = v102[13];
    *(double *)(a1 + 2656) = v102[14];
    *(double *)(a1 + 2664) = v102[15];
    *(double *)(a1 + 2672) = v102[16];
    *(double *)(a1 + 2680) = v102[17];
    v101 = v102[18];
  }
  *(double *)(a1 + 2688) = v101;
  v274 = 0uLL;
  v201 = a1 + 2696;
  v272.n128_u64[0] = a1 + 2696;
  v103 = (__int128 *)(a1 + 14600);
  v272.n128_u64[1] = a1 + 14600;
  sub_18D1D86F8((uint64_t)&v267, a1 + 14616, (uint64_t)&v307);
  sub_18D1CEF14((uint64_t)v271, (uint64_t)&v267);
  v273.n128_u64[0] = (unint64_t)v271;
  v273.n128_u64[1] = a1 + 2576;
  v274 = (__n128)v313;
  v265 = v5;
  v266 = v5;
  v260 = 0x100000004;
  v255 = &off_1E25C7E20;
  v256 = v92;
  v257 = 1;
  v258 = v92;
  v259 = v92;
  v261 = v262;
  v262[0] = &v272;
  v262[1] = &v266;
  v104 = *(unsigned __int8 *)(a1 + 2536);
  if (*(_BYTE *)(a1 + 2536))
  {
    if (v104 == 1)
    {
      v263 = 0;
      v264 = 0;
      v252 = 0x100000004;
      v247 = &unk_1E25C7E80;
      v248 = v92;
      v249 = 1;
      v250 = v92;
      v251 = v92;
      v253 = &v254;
      v254 = xmmword_18D319A20;
      v241 = 0x100000004;
      v236 = &off_1E25C7DF0;
      v237 = v92;
      v238 = 1;
      v239 = v92;
      v240 = v92;
      v242 = &v243;
      v243 = sub_18D1BC3C4;
      v244 = sub_18D1BCFA8;
      v245 = sub_18D1BD664;
      v246 = sub_18D1BD664;
    }
    else
    {
      if (v104 == 2)
        __assert_rtn("PredictAndUpdate", "ravenpntestimator.cpp", 5890, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      v252 = 0x100000004;
      v247 = &unk_1E25C7E80;
      v248 = v92;
      v249 = 1;
      v250 = v92;
      v251 = v92;
      v253 = &v254;
      *(_QWORD *)&v254 = 0x200000012;
      v241 = 0x100000004;
      v236 = &off_1E25C7DF0;
      v237 = v92;
      v238 = 1;
      v239 = v92;
      v240 = v92;
      v242 = &v243;
      v243 = sub_18D1BC3C4;
      v244 = sub_18D1BCFA8;
    }
  }
  else
  {
    v263 = &v265;
    v252 = 0x100000004;
    v247 = &unk_1E25C7E80;
    v248 = v92;
    v249 = 1;
    v250 = v92;
    v251 = v92;
    v253 = &v254;
    *(_QWORD *)&v254 = 0x200000012;
    DWORD2(v254) = 6;
    v241 = 0x100000004;
    v236 = &off_1E25C7DF0;
    v237 = v92;
    v238 = 1;
    v239 = v92;
    v240 = v92;
    v242 = &v243;
    v243 = sub_18D1BC3C4;
    v244 = sub_18D1BCFA8;
    v245 = sub_18D1BD3F8;
  }
  v235[0] = v272;
  v235[1] = v273;
  v235[2] = v274;
  v234 = v5;
  v233 = v5;
  v228 = 0x100000004;
  v223 = &off_1E25C7E20;
  v224 = v92;
  v225 = 1;
  v226 = v92;
  v227 = v92;
  v229 = v230;
  v230[0] = v235;
  v230[1] = &v234;
  if (v104 == 1)
  {
    v232 = 0;
    v231 = 0;
  }
  else if (!v104)
  {
    v231 = &v233;
  }
  v222 = v5;
  if (!*(_BYTE *)(v4 + 1))
  {
    v89.n128_f64[0] = sub_18D1B9F78((_BYTE *)v4, (__n128 *)(a1 + 80));
    v13 = 512;
    goto LABEL_73;
  }
  v221 = (__n128)*v103;
  sub_18D1D8C14((uint64_t)v220, a1 + 14616);
  sub_18D1B63A4(a1 + 15032, (uint64_t)v219);
  sub_18D1BD9E4(a1 + 15032, (uint64_t)v217);
  v214 = 0x10000001CLL;
  v212 = &unk_1E25C72B0;
  v213 = xmmword_18D319780;
  v215 = &v216;
  if (sub_18D1D0D6C((uint64_t)&v313, (__int128 *)&v221, (uint64_t)v220, v201, a1 + 2576, *(unsigned __int8 *)(a1 + 2536), 1, 1, (uint64_t)&v212))
  {
    v89.n128_f64[0] = sub_18D1B9F78((_BYTE *)v4, (__n128 *)(a1 + 80));
    v13 = 2048;
    goto LABEL_177;
  }
  v199 = sub_18D05C4D8(v4, v105, v106, v107, v108, v109, v110, v111);
  if (v199)
  {
    v194 = sub_18D1BDA1C(a1 + 15032, (uint64_t)v295, a1 + 71920, a1 + 72656, a1 + 73144, (uint64_t)&v285, (uint64_t)&v275, (uint64_t)&v255, a1 + 73200, a1 + 73936, (uint64_t)&v247, (uint64_t)&v236, (uint64_t)&v223);
    v112 = 10;
  }
  else
  {
    v194 = sub_18D1BDFB0(a1 + 15032, (uint64_t)v295, (uint64_t)&v285, (uint64_t)&v275, (uint64_t)&v255);
    v112 = 2;
  }
  sub_18D04A584(a1 + 16776, *(_QWORD **)(a1 + 16784));
  *(_QWORD *)(a1 + 16776) = a1 + 16784;
  *(_QWORD *)(a1 + 16792) = 0;
  *(_QWORD *)(a1 + 16784) = 0;
  *v103 = (__int128)v313;
  sub_18D053AA8(a1 + 14616, (uint64_t)&v212);
  updated = raven::RavenPNTEstimator::UpdateFullStateEstimate((raven::RavenPNTEstimator *)a1, v113);
  sub_18D1D86F8((uint64_t)&v267, a1 + 14616, (uint64_t)&v307);
  v117 = sub_18D1B8368(v201, (_OWORD *)(a1 + 14600), (uint64_t)&v267, v115, v116);
  v118 = v112 | 0x2000;
  if (!updated)
    v118 = v112;
  if (v117)
    v13 = v118 | 0x1000;
  else
    v13 = v118;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  sub_18D1E7E30(&v209, *(_QWORD *)(a1 + 16256), *(_QWORD *)(a1 + 16264), (uint64_t)(*(_QWORD *)(a1 + 16264) - *(_QWORD *)(a1 + 16256)) >> 5);
  v206 = 0;
  v207 = 0;
  v208 = 0;
  sub_18D1E7E30(&v206, *(_QWORD *)(a1 + 16232), *(_QWORD *)(a1 + 16240), (uint64_t)(*(_QWORD *)(a1 + 16240) - *(_QWORD *)(a1 + 16232)) >> 5);
  v191 = a1 + 15032;
  v197 = (_DWORD *)(a1 + 19384);
  v203 = 0;
  v204 = 0;
  v205 = 0;
  sub_18D1E7E30(&v203, *(_QWORD *)(a1 + 16280), *(_QWORD *)(a1 + 16288), (uint64_t)(*(_QWORD *)(a1 + 16288) - *(_QWORD *)(a1 + 16280)) >> 5);
  v119 = v209;
  v120 = v210;
  v121 = (char *)v210 - (char *)v209;
  v122 = v206;
  v190 = v207;
  v189 = (char *)v207 - (char *)v206;
  v195 = ((char *)v207 - (char *)v206) >> 5;
  v196 = ((char *)v210 - (char *)v209) >> 5;
  v192 = (v204 - (uint64_t)v203) >> 5;
  if (v199)
  {
    *(_QWORD *)(a1 + 256) += v196;
    raven::RavenEstimator::AddToAcceptedMeasurementTypeCount((cnprint::CNPrinter *)a1, &v209);
    *(_QWORD *)(a1 + 264) += v195;
    raven::RavenEstimator::AddToRejectedMeasurementTypeCount((cnprint::CNPrinter *)a1, &v206);
    *(_QWORD *)(a1 + 272) += v192;
    raven::RavenEstimator::AddToUnusedMeasurementTypeCount((cnprint::CNPrinter *)a1, &v203);
  }
  v123 = 16;
  if (!*v197)
    v123 = 8;
  v193 = a1 + 19360;
  v124 = *(double *)(a1 + 19360 + v123);
  if (v194 > 0x16)
  {
LABEL_143:
    v13 |= 1uLL;
LABEL_144:
    v267.i16[0] = 12;
    v202 = 4;
    v153 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v313, "Unexpected predict and update return code %d", v194);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v159) = v153;
    else
      v159 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v267, &v202, "%s", v154, v155, v156, v157, v158, v159);
    if ((v13 & 8) != 0)
    {
      v160 = v221;
      *(__n128 *)(a1 + 80) = v221;
      *v103 = (__int128)v160;
      v161 = sub_18D053AA8(a1 + 14616, (uint64_t)v220);
      sub_18D1B8368(v201, &v221, (uint64_t)v220, (int8x16_t)v161, v162);
      v125 = a1 + 19360;
      sub_18D1B857C((uint64_t)&v267, (uint64_t)v217, (uint64_t)v219);
      sub_18D1B8490(v191, (uint64_t)v219, (uint64_t)v217, (uint64_t)&v267);
      raven::RavenPNTEstimator::UpdateFullStateEstimate((raven::RavenPNTEstimator *)a1, v163);
      sub_18D1BE17C(v4, (uint64_t)&v313);
      v164 = raven::RavenPNTEstimator::PredictAndUpdate(a1, a2);
      v165 = v195 + v196 + v192;
      v152 = (_DWORD *)(a1 + 19384);
      if (v165)
        sub_18D1A37F8(v193, v165, *(_DWORD *)(*(_QWORD *)(a1 + 1168) + 1472));
      v13 |= v164 | 0x18;
    }
    else
    {
      v152 = (_DWORD *)(a1 + 19384);
      v125 = a1 + 19360;
    }
    goto LABEL_159;
  }
  if (((1 << v194) & 0x440408) != 0)
    goto LABEL_144;
  if (((1 << v194) & 0x301) == 0)
  {
    if (((1 << v194) & 0x300000) != 0)
    {
      v267.i16[0] = 12;
      v202 = 4;
      v141 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v313, "Resetting due to prediction error,code,%d", v194);
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v147) = v141;
      else
        v147 = *(_QWORD *)(a1 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v267, &v202, "%s", v142, v143, v144, v145, v146, v147);
      v148 = v221;
      *(__n128 *)(a1 + 80) = v221;
      *v103 = (__int128)v148;
      v149 = sub_18D053AA8(a1 + 14616, (uint64_t)v220);
      sub_18D1B8368(v201, &v221, (uint64_t)v220, (int8x16_t)v149, v150);
      v125 = a1 + 19360;
      sub_18D1B857C((uint64_t)&v267, (uint64_t)v217, (uint64_t)v219);
      sub_18D1B8490(v191, (uint64_t)v219, (uint64_t)v217, (uint64_t)&v267);
      raven::RavenPNTEstimator::UpdateFullStateEstimate((raven::RavenPNTEstimator *)a1, v151);
      v13 |= 6uLL;
      v152 = (_DWORD *)(a1 + 19384);
      goto LABEL_159;
    }
    goto LABEL_143;
  }
  v125 = a1 + 19360;
  v126 = (cnprint::CNPrinter *)sub_18D05D3A8(v193, &v222);
  v133 = 16;
  if (!*v197)
    v133 = 8;
  v124 = *(double *)(v193 + v133);
  if (v199)
  {
    if (v120 != v119)
      v126 = (cnprint::CNPrinter *)sub_18D1BE108(v193, v121 >> 5, *(_DWORD *)(*(_QWORD *)(a1 + 1168) + 1472));
    if (v190 != v122)
      v126 = (cnprint::CNPrinter *)sub_18D1A37F8(v193, v189 >> 5, *(_DWORD *)(*(_QWORD *)(a1 + 1168) + 1472));
    if (v196 <= v195)
    {
      if (cnprint::CNPrinter::GetLogLevel(v126) <= 1)
      {
        v267.i16[0] = 12;
        v202 = 1;
        v166 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v313, "accepted_meas,%zu,rejected_meas,%zu", v196, v195);
        if (*(char *)(a1 + 2511) >= 0)
          LOBYTE(v140) = v166;
        else
          v140 = *(_QWORD *)(a1 + 2488);
LABEL_156:
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v267, &v202, "%s", v135, v136, v137, v138, v139, v140);
      }
    }
    else if (!cnprint::CNPrinter::GetLogLevel(v126))
    {
      v267.i16[0] = 12;
      v202 = 0;
      v134 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v313, "accepted_meas,%zu,rejected_meas,%zu", v196, v195);
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v140) = v134;
      else
        v140 = *(_QWORD *)(a1 + 2488);
      goto LABEL_156;
    }
  }
  *(int8x16_t *)(a1 + 80) = v313;
  v267 = 0uLL;
  v152 = (_DWORD *)(a1 + 19384);
  if (!sub_18D05C40C(v4, &v267, v127, v128, v129, v130, v131, v132))
    *(int8x16_t *)(a1 + 96) = v267;
LABEL_159:
  v167 = 16;
  if (!*v152)
    v167 = 8;
  v168 = *(double *)(v125 + v167);
  v169 = *(_QWORD *)(a1 + 1168);
  v170 = *(double *)(v169 + 1512);
  if (v124 >= v170 || v168 < v170)
  {
LABEL_168:
    v178 = *(double *)(v169 + 1520);
    if (v124 < v178 && v168 >= v178)
    {
      v267.i16[0] = 12;
      v202 = 2;
      v179 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v313, "triggering major error recovery pfb,%.3lf,pfa,%.3lf", v124, v168);
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v185) = v179;
      else
        v185 = *(_QWORD *)(a1 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v267, &v202, "%s", v180, v181, v182, v183, v184, v185);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 80);
      raven::RavenPNTEstimator::InflateUncertainty((raven::RavenPNTEstimator *)a1, *(double *)(*(_QWORD *)(a1 + 1168) + 1536), 1, 1);
      if (!*(_BYTE *)(a1 + 58))
        goto LABEL_175;
    }
    sub_18D1B9F78((_BYTE *)v4, (__n128 *)&v313);
  }
  else
  {
    v267.i16[0] = 12;
    v202 = 2;
    v171 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v313, "triggering minor error recovery pfb,%.3lf,pfa,%.3lf", v124, v168);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v177) = v171;
    else
      v177 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v267, &v202, "%s", v172, v173, v174, v175, v176, v177);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 80);
    raven::RavenPNTEstimator::InflateUncertainty((raven::RavenPNTEstimator *)a1, *(double *)(*(_QWORD *)(a1 + 1168) + 1528), 1, 1);
    if (*(_BYTE *)(a1 + 58))
    {
      v169 = *(_QWORD *)(a1 + 1168);
      goto LABEL_168;
    }
LABEL_175:
    v13 |= 0x2000uLL;
  }
  v267.i64[0] = (uint64_t)&v203;
  sub_18D1C59AC((void ***)&v267);
  v267.i64[0] = (uint64_t)&v206;
  sub_18D1C59AC((void ***)&v267);
  v267.i64[0] = (uint64_t)&v209;
  sub_18D1C59AC((void ***)&v267);
LABEL_177:
  v217[0] = &unk_1E25C7160;
  v186 = v218;
  v218 = 0;
  if (v186)
    MEMORY[0x18D78B5BC](v186, 0x1000C8000313F17, v89);
LABEL_73:
  v295[0] = &unk_1E25C6F80;
  v90 = v296;
  v296 = 0;
  if (v90)
    MEMORY[0x18D78B5BC](v90, 0x1000C8000313F17, v89);
  return v13;
}

void sub_18D1B5A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  unint64_t v70;
  unint64_t v71;

  STACK[0x590] = (unint64_t)&a27;
  sub_18D1C59AC((void ***)&STACK[0x590]);
  STACK[0x590] = (unint64_t)&a30;
  sub_18D1C59AC((void ***)&STACK[0x590]);
  STACK[0x590] = (unint64_t)&a33;
  sub_18D1C59AC((void ***)&STACK[0x590]);
  a69 = &unk_1E25C7160;
  v70 = STACK[0x208];
  STACK[0x208] = 0;
  if (v70)
    MEMORY[0x18D78B5BC](v70, 0x1000C8000313F17);
  STACK[0x850] = (unint64_t)&unk_1E25C6F80;
  v71 = STACK[0x878];
  STACK[0x878] = 0;
  if (v71)
    MEMORY[0x18D78B5BC](v71, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::VelocityEvent *a2)
{
  BOOL v2;

  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (*((_BYTE *)this + 58))
    v2 = *((_BYTE *)a2 + 280) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return raven::RavenPNTEstimator::AddDeviceVelocityMeasurement(this, a2);
}

void raven::RavenPNTEstimator::InflateUncertainties(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int32x4_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int i;
  float64x2_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v59[5];
  uint64_t v60;
  _QWORD v61[5];
  uint64_t v62;
  void *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76[40];
  uint64_t v77;
  void *v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 v84[8];
  int32x4_t v85;
  void *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  unsigned int *v93;
  _BYTE v94[208];
  _BYTE v95[24];
  uint64_t v96;
  _BYTE *v97;
  _BYTE v98[840];
  void *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;

  if (a5 < 1.0 || (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v90) = 12;
    v84[0] = 4;
    *(_OWORD *)v95 = *(_OWORD *)(a1 + 80);
    v51 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v95, "%s failed, invalid inflation factor, %.6lf.");
LABEL_44:
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v57) = v51;
    else
      v57 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v90, v84, "%s", v52, v53, v54, v55, v56, v57);
    return;
  }
  v92 = 0x10000001ALL;
  v90 = &unk_1E25C70D0;
  v91 = xmmword_18D319790;
  v93 = (unsigned int *)v94;
  v96 = 0x10000001ALL;
  *(_QWORD *)v95 = &off_1E25C7100;
  *(_OWORD *)&v95[8] = xmmword_18D319790;
  v97 = v98;
  sub_18D1D5074(a2, (uint64_t)&v90, (uint64_t)v95);
  v9 = *v93;
  v92 = 0x10000001ALL;
  v90 = &unk_1E25C70D0;
  v91 = xmmword_18D319790;
  v93 = (unsigned int *)v94;
  v96 = 0x10000001ALL;
  *(_QWORD *)v95 = &off_1E25C7100;
  *(_OWORD *)&v95[8] = xmmword_18D319790;
  v97 = v98;
  sub_18D1D53BC(a2, (uint64_t)&v90, (uint64_t)v95);
  v10 = *v93;
  if (v9 > 0x19 || v10 < 0 || v10 >= 26)
  {
    LOWORD(v90) = 12;
    v84[0] = 4;
    *(_OWORD *)v95 = *(_OWORD *)(a1 + 80);
    v51 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v95, "%s failed, invalid specified states, min state %d, max state %d.");
    goto LABEL_44;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 80);
  v11 = *(_DWORD *)(a2 + 8);
  v92 = 0x10000001ALL;
  v90 = &unk_1E25C70A0;
  v91 = xmmword_18D319790;
  v93 = (unsigned int *)v94;
  if (*(_DWORD *)(a1 + 16140))
    v12 = a1 + 15584;
  else
    v12 = a1 + 15040;
  sub_18D053AA8((uint64_t)&v90, v12);
  sub_18D1927F4(a1 + 15032, (uint64_t)&v86);
  sub_18D1B63F0((uint64_t)v84, (uint64_t)v93, a2);
  v13 = vdupq_lane_s32((int32x2_t)(v11 | 0x100000000), 0);
  v13.i32[1] = 1;
  v85 = v13;
  v14 = *(_DWORD *)(a2 + 16);
  sub_18D1C96FC((uint64_t)v59, v14, v14);
  if (v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)(a2 + 32);
    v18 = v59[4];
    v19 = v87;
    v20 = v88;
    do
    {
      v21 = 0;
      v22 = v19 * *(_DWORD *)(v17 + 4 * v16);
      do
      {
        *(_QWORD *)(v18 + 8 * (v15 + v21)) = *(_QWORD *)(v20
                                                                       + 8
                                                                       * (*(_DWORD *)(v17 + 4 * v21)
                                                                                      + v22));
        ++v21;
      }
      while (v14 != v21);
      ++v16;
      v15 += v14;
    }
    while (v16 != v14);
  }
  sub_18D1C99C8((uint64_t)v61);
  v95[0] = 0;
  sub_18D05C654((uint64_t)v59, (uint64_t)v61, v95);
  sub_18D1C99C8((uint64_t)&v63);
  v101 = 0x10000001ALL;
  v99 = &unk_1E25C70D0;
  v100 = xmmword_18D319790;
  v102 = &v103;
  v96 = 0x100000068;
  *(_QWORD *)v95 = &unk_1E25C5F90;
  *(_OWORD *)&v95[8] = xmmword_18D3198A0;
  v97 = v98;
  sub_18D04F504((uint64_t)v61, (uint64_t)&v99, (uint64_t)v95, (uint64_t)&v63);
  sub_18D1C96FC((uint64_t)&v69, v65, v64);
  v24 = v64;
  v23 = v65;
  v70 = v65;
  v71 = v64;
  v72 = v64 * v65;
  v73 = v65;
  if (v65)
  {
    v25 = 0;
    v26 = 0;
    v27 = v66;
    v28 = v67;
    v29 = v74;
    do
    {
      v30 = v25;
      v31 = v26;
      for (i = v24; i; --i)
      {
        *(_QWORD *)(v29 + 8 * v31) = *(_QWORD *)(v28 + 8 * v30);
        v31 += v23;
        ++v30;
      }
      ++v26;
      v25 += v27;
    }
    while (v26 != v23);
  }
  sub_18D1914F0((uint64_t)v76, (uint64_t)&v69);
  sub_18D1C99C8((uint64_t)&v78);
  v33.f64[0] = 1.0 / a5;
  v34 = (__n128)sub_18D1C94E0((uint64_t)v76, (uint64_t)&v78, v33);
  v35 = v77;
  *(_QWORD *)v76 = &unk_1E25C7160;
  v77 = 0;
  if (v35)
    MEMORY[0x18D78B5BC](v35, 0x1000C8000313F17, v34);
  v36 = v75;
  v69 = &unk_1E25C7160;
  v75 = 0;
  *(_QWORD *)v76 = &unk_1E25C5E70;
  if (v36)
    MEMORY[0x18D78B5BC](v36, 0x1000C8000313F17, v34);
  v37 = v68;
  v63 = &unk_1E25C7160;
  v68 = 0;
  v69 = &unk_1E25C5E70;
  if (v37)
    MEMORY[0x18D78B5BC](v37, 0x1000C8000313F17, v34);
  v38 = v62;
  v61[0] = &unk_1E25C7160;
  v62 = 0;
  v63 = &unk_1E25C5E70;
  if (v38)
    MEMORY[0x18D78B5BC](v38, 0x1000C8000313F17, v34);
  v39 = v60;
  v59[0] = &unk_1E25C7160;
  v60 = 0;
  v61[0] = &unk_1E25C5E70;
  if (v39)
    MEMORY[0x18D78B5BC](v39, 0x1000C8000313F17, v34);
  v79 = v11;
  v80 = v11;
  v81 = v11 * v11;
  v82 = v11;
  sub_18D1B6444(a1 + 15032, a2, (uint64_t)v84, (uint64_t)&v78);
  if (a4 && raven::RavenPNTEstimator::UpdateFullStateEstimate((raven::RavenPNTEstimator *)a1, v40))
  {
    LOWORD(v99) = 12;
    v76[0] = 4;
    *(_OWORD *)v95 = *(_OWORD *)(a1 + 80);
    if (*(char *)(a3 + 23) >= 0)
      v41 = (const char *)a3;
    else
      v41 = *(const char **)a3;
    v42 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v95, "%s failed to update full states", v41);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v48) = v42;
    else
      v48 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v99, v76, "%s", v43, v44, v45, v46, v47, v48);
    raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)a1);
  }
  v49 = v83;
  v78 = &unk_1E25C7160;
  v83 = 0;
  if (v49)
    MEMORY[0x18D78B5BC](v49, 0x1000C8000313F17);
  v50 = v89;
  v86 = &unk_1E25C7160;
  v89 = 0;
  if (v50)
    MEMORY[0x18D78B5BC](v50, 0x1000C8000313F17);
}

void sub_18D1B61D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  unint64_t v51;

  if (a50)
    MEMORY[0x18D78B5BC](a50, 0x1000C8000313F17);
  v51 = STACK[0x270];
  STACK[0x248] = (unint64_t)&unk_1E25C7160;
  STACK[0x270] = 0;
  if (v51)
    MEMORY[0x18D78B5BC](v51, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1B6390(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

double sub_18D1B63A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x10000001ALL;
  *(_QWORD *)a2 = &unk_1E25C70A0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319790;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1108))
    v2 = a1 + 552;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

double sub_18D1B63F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double result;
  double *v7;
  int *v8;
  uint64_t v9;

  v3 = *(_DWORD *)(a3 + 8);
  v4 = *(_DWORD *)(a3 + 12);
  v5 = (v4 * v3);
  *(_QWORD *)&result = 0x10000001ALL;
  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_QWORD *)a1 = &unk_1E25C70A0;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v7 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if ((_DWORD)v5)
  {
    v8 = *(int **)(a3 + 32);
    do
    {
      v9 = *v8++;
      result = *(double *)(a2 + 8 * v9);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1B6444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  double v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  int i;
  int v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int32x4_t v40;
  char v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int j;
  int v47;
  int v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  int v57;
  _DWORD *v58;
  int v59;
  int v60;
  int k;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  const char *v68;
  int v69;
  void *v70;
  __int128 v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  void *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t (**v81)();
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD v85[2];
  void *v86;
  void *v87;
  void *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD v95[26];
  _BYTE v96[41];
  void *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  _DWORD *v103;
  _DWORD v104[26];
  void *v105;
  int32x4_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  _DWORD *v116;
  _DWORD v117[28];

  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 12);
  v72 = 0x10000001ALL;
  v70 = &unk_1E25C70A0;
  v71 = xmmword_18D319790;
  v73 = (double *)&v74;
  sub_18D053B2C(a4, a3, (uint64_t)&v70);
  if (v8 <= v9)
    v11 = v9;
  else
    v11 = v8;
  if (v9)
    v12 = v8 == 0;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = v11;
  if (!*(_DWORD *)(a1 + 1108))
  {
    sub_18D053AA8(a1 + 552, a1 + 8);
    sub_18D053AA8(a1 + 800, a1 + 256);
    *(_QWORD *)&v10 = sub_18D053AA8(a1 + 848, a1 + 304).n128_u64[0];
  }
  *(_DWORD *)(a1 + 1108) = 1;
  if (!*(_DWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 12))
  {
    sub_18D053AA8(a1 + 8, a1 + 552);
    sub_18D053AA8(a1 + 256, a1 + 800);
    sub_18D053AA8(a1 + 304, a1 + 848);
    *(_DWORD *)(a1 + 1108) = 1;
    return;
  }
  *(_BYTE *)(a1 + 1104) = 0;
  v14 = *(_DWORD *)(a1 + 560);
  v15 = *(_DWORD *)(a1 + 564);
  if (v14 <= v15)
    v16 = *(_DWORD *)(a1 + 564);
  else
    v16 = *(_DWORD *)(a1 + 560);
  if (v15)
    v17 = v14 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  if ((int)v13 >= 1)
  {
    v19 = 0;
    do
    {
      v20 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + v19);
      if (v20 < 0 || v20 >= (int)v18)
      {
        LOWORD(v81) = 2;
        LOBYTE(v110) = 4;
        cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1272), "ResetStates(): states must contain valid indices into x, Rxx, and zx.", v10);
        if (*(char *)(a1 + 1295) >= 0)
          LOBYTE(v26) = a1 - 8;
        else
          v26 = *(_QWORD *)(a1 + 1272);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v110, "%s", v21, v22, v23, v24, v25, v26);
      }
      v19 += 4;
    }
    while (4 * v13 != v19);
  }
  v83 = 0x1A00000001;
  v81 = &off_1E25C6B60;
  v84 = v85;
  v27 = v18 - 1;
  if ((_DWORD)v18 == 1)
  {
    v29 = 0;
    *(_QWORD *)&v32 = 0x100000001;
    *((_QWORD *)&v32 + 1) = 0x100000001;
    v82 = v32;
    LODWORD(v85[0]) = 0;
    v30 = 1;
    v31 = 1;
  }
  else if ((int)v18 <= 0)
  {
    v30 = 0;
    v31 = 0;
    v82 = 0uLL;
    v29 = 1;
  }
  else
  {
    v28 = 0;
    LODWORD(v82) = 1;
    DWORD1(v82) = v18;
    *((_QWORD *)&v82 + 1) = v18 | 0x100000000;
    do
    {
      *((_DWORD *)v85 + v28) = v28;
      ++v28;
    }
    while (v18 != v28);
    v29 = 0;
    v30 = 1;
    v31 = v18;
  }
  v115 = 0x10000001ALL;
  v110 = &unk_1E25C70D0;
  v116 = v117;
  v111 = v31;
  v112 = v30;
  v113 = v31 * v30;
  v114 = v31;
  if (v31)
  {
    v33 = 0;
    for (i = 0; i != v31; ++i)
    {
      if ((v29 & 1) == 0)
      {
        v35 = 0;
        do
        {
          v117[i + v114 * v35] = *((_DWORD *)v85 + v33 + v35);
          ++v35;
        }
        while (v30 != v35);
      }
      v33 += v30;
    }
  }
  if ((int)v13 > 0)
  {
    v36 = *(int **)(a2 + 32);
    v37 = v13;
    do
    {
      v38 = *v36++;
      v117[v38] = -1;
      --v37;
    }
    while (v37);
  }
  v107 = 0x10000001ALL;
  v108 = 0;
  v106 = 0uLL;
  v105 = &unk_1E25C70D0;
  if ((v18 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  *(_QWORD *)&v39 = 0x100000001;
  *((_QWORD *)&v39 + 1) = 0x100000001;
  v40 = vdupq_lane_s32((int32x2_t)(v18 | 0x100000000), 0);
  v40.i32[1] = 1;
  v106 = v40;
  v108 = &v109;
  v83 = 0x1A00000001;
  v81 = &off_1E25C6B60;
  v84 = v85;
  if ((_DWORD)v13 == 1)
  {
    v41 = 0;
    v82 = v39;
    LODWORD(v85[0]) = 0;
    v42 = 1;
    v43 = 1;
  }
  else if ((int)v13 <= 0)
  {
    v42 = 0;
    v43 = 0;
    v82 = 0uLL;
    v41 = 1;
  }
  else
  {
    v44 = 0;
    LODWORD(v82) = 1;
    DWORD1(v82) = v13;
    *((_QWORD *)&v82 + 1) = v13 | 0x100000000;
    do
    {
      *((_DWORD *)v85 + v44) = v44;
      ++v44;
    }
    while (v13 != v44);
    v41 = 0;
    v42 = 1;
    v43 = v13;
  }
  v102 = 0x10000001ALL;
  v97 = &unk_1E25C70D0;
  v103 = v104;
  v98 = v43;
  v99 = v42;
  v100 = v43 * v42;
  v101 = v43;
  if (v43)
  {
    v45 = 0;
    for (j = 0; j != v43; ++j)
    {
      if ((v41 & 1) == 0)
      {
        v47 = 0;
        do
        {
          v104[j + v101 * v47] = *((_DWORD *)v85 + v45 + v47);
          ++v47;
        }
        while (v42 != v47);
      }
      v45 += v42;
    }
  }
  sub_18D1D5CC0((uint64_t)&v81, (uint64_t)&v105, (uint64_t)&v97);
  sub_18D1D55CC((uint64_t)&v81, *(_DWORD *)(a2 + 16), *(int **)(a2 + 32));
  v48 = v18 - v13;
  if ((int)v18 > (int)v13)
  {
    LODWORD(v49) = 0;
    v50 = v116;
    v51 = v108;
    v52 = (int)v13;
    do
    {
      v49 = (int)v49;
      do
        v53 = v50[v49++];
      while (v53 == -1);
      *((_DWORD *)v51 + v52++) = v53;
    }
    while (v52 != v18);
  }
  sub_18D1D5654(a1, v18, (uint64_t)&v105);
  sub_18D1D6170((uint64_t)v96, (uint64_t)&v97);
  v83 = 0x1A00000001;
  v81 = &off_1E25C6B60;
  v84 = v85;
  if (v27 == (_DWORD)v13)
  {
    LOBYTE(v54) = 0;
    *(_QWORD *)&v55 = 0x100000001;
    *((_QWORD *)&v55 + 1) = 0x100000001;
    v82 = v55;
    LODWORD(v85[0]) = v13;
    v56 = 1;
    v57 = 1;
  }
  else if (v27 - (int)v13 < 0)
  {
    v56 = 0;
    v57 = 0;
    v82 = 0uLL;
    LOBYTE(v54) = 1;
  }
  else
  {
    v57 = v18 - v13;
    LODWORD(v82) = 1;
    DWORD1(v82) = v18 - v13;
    DWORD2(v82) = v18 - v13;
    HIDWORD(v82) = 1;
    v58 = v85;
    v54 = (v18 - v13);
    v59 = v13;
    do
    {
      *v58++ = v59++;
      --v54;
    }
    while (v54);
    v56 = 1;
  }
  v93 = 0x10000001ALL;
  v88 = &unk_1E25C70D0;
  v94 = v95;
  v89 = v57;
  v90 = v56;
  v91 = v57 * v56;
  v92 = v57;
  if (v57)
  {
    v60 = 0;
    for (k = 0; k != v57; ++k)
    {
      if ((v54 & 1) == 0)
      {
        v62 = 0;
        do
        {
          v95[k + v92 * v62] = *((_DWORD *)v85 + v60 + v62);
          ++v62;
        }
        while (v56 != v62);
      }
      v60 += v56;
    }
  }
  sub_18D1D1680((uint64_t)&v81, a1 + 552, (uint64_t)&v97);
  sub_18D1D1080((uint64_t)&v81, *(_DWORD *)(a3 + 16), *(double **)(a3 + 32));
  sub_18D1D1778((uint64_t)&v81, a1 + 800, (uint64_t)v96, (uint64_t)v96);
  sub_18D1D1114((uint64_t)&v81, a4);
  v87 = &unk_1E25C5EA0;
  v86 = &unk_1E25C5EA0;
  v63 = v85[0];
  v81 = (uint64_t (**)())&unk_1E25C7160;
  v85[0] = 0;
  if (v63)
    MEMORY[0x18D78B5BC](v63, 0x1000C8000313F17);
  if ((v13 & 0x80000000) != 0)
  {
    v68 = "nr >= 0";
    v69 = 3098;
    goto LABEL_96;
  }
  if (v48 < 0)
  {
    v68 = "nc >= 0";
    v69 = 3099;
LABEL_96:
    __assert_rtn("Zeros", "cnmatrix.h", v69, v68);
  }
  sub_18D1C96FC((uint64_t)&v75, v13, v18 - v13);
  v76 = v13;
  v77 = v18 - v13;
  v78 = v48 * v13;
  v79 = v13;
  sub_18D04BE88((uint64_t)&v75, 0.0);
  sub_18D1D1778((uint64_t)&v81, a1 + 800, (uint64_t)v96, (uint64_t)&v88);
  sub_18D1D1114((uint64_t)&v81, (uint64_t)&v75);
  v87 = &unk_1E25C5EA0;
  v86 = &unk_1E25C5EA0;
  v64 = v85[0];
  v81 = (uint64_t (**)())&unk_1E25C7160;
  v85[0] = 0;
  if (v64)
    MEMORY[0x18D78B5BC](v64, 0x1000C8000313F17);
  v65 = v80;
  v75 = &unk_1E25C7160;
  v80 = 0;
  if (v65)
    MEMORY[0x18D78B5BC](v65, 0x1000C8000313F17);
  sub_18D1D1680((uint64_t)&v81, a1 + 848, (uint64_t)&v97);
  sub_18D1D1080((uint64_t)&v81, SDWORD2(v71), v73);
  v83 = 0x10000001ALL;
  v81 = (uint64_t (**)())&unk_1E25C70D0;
  *(_QWORD *)&v82 = v18 | 0x100000000;
  DWORD2(v82) = v18;
  HIDWORD(v82) = v18;
  v84 = v85;
  if ((int)v18 >= 1)
  {
    v66 = 0;
    v67 = v108;
    do
    {
      *((_DWORD *)v85 + *((int *)v67 + v66)) = v66;
      ++v66;
    }
    while (v18 != v66);
  }
  sub_18D1D5654(a1, v18, (uint64_t)&v81);
}

void sub_18D1B6C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  STACK[0x210] = v55 + 16;
  if (a55)
    MEMORY[0x18D78B5BC](a55, 0x1000C8000313F17);
  if (a49)
    MEMORY[0x18D78B5BC](a49, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::InflateUncertainty(raven::RavenPNTEstimator *this, double a2, int a3, int a4)
{
  char *v8;
  double v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int i;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[5];
  uint64_t v53;
  void *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[5];
  uint64_t v68;
  void *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _BYTE v79[24];
  uint64_t v80;
  _QWORD *v81;
  _QWORD v82[105];
  void *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;

  if (!*((_BYTE *)this + 58))
  {
    LOWORD(v74) = 12;
    LOBYTE(v83) = 2;
    *(_OWORD *)v79 = *((_OWORD *)this + 5);
    v16 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v79, "InflateUncertainty called on uninitialized estimator");
LABEL_16:
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v22) = v16;
    else
      v22 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)&v83, "%s", v17, v18, v19, v20, v21, v22);
    return;
  }
  if (a2 < 1.0 || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v74) = 12;
    LOBYTE(v83) = 4;
    *(_OWORD *)v79 = *((_OWORD *)this + 5);
    v16 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v79, "InflateUncertainty failed, invalid inflation factor, %.6lf.");
    goto LABEL_16;
  }
  *((_OWORD *)this + 7) = *((_OWORD *)this + 5);
  v76 = 0x10000001ALL;
  v74 = &unk_1E25C70A0;
  v75 = xmmword_18D319790;
  v77 = &v78;
  if (*((_DWORD *)this + 4035))
    v8 = (char *)this + 15584;
  else
    v8 = (char *)this + 15040;
  sub_18D053AA8((uint64_t)&v74, (uint64_t)v8);
  v9 = a2 * a2;
  sub_18D1C99C8((uint64_t)&v69);
  if (a3)
  {
    sub_18D1927F4((uint64_t)this + 15032, (uint64_t)v79);
    v10 = sub_18D053AA8((uint64_t)&v69, (uint64_t)v79);
    v11 = v82[0];
    *(_QWORD *)v79 = &unk_1E25C7160;
    v82[0] = 0;
    if (v11)
      MEMORY[0x18D78B5BC](v11, 0x1000C8000313F17, v10);
    v12 = v70;
    if (v70 >= 1)
    {
      v13 = 0;
      v14 = v71 + 1;
      v15 = v72;
      do
      {
        *(double *)(v15 + 8 * v13) = v9 * *(double *)(v15 + 8 * v13);
        v13 += v14;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    sub_18D1927F4((uint64_t)this + 15032, (uint64_t)&v83);
    sub_18D1C99C8((uint64_t)v79);
    v23.f64[0] = v9;
    sub_18D064EF4((uint64_t)&v83, (uint64_t)v79, v23);
    v24 = sub_18D053AA8((uint64_t)&v69, (uint64_t)v79);
    v25 = v82[0];
    *(_QWORD *)v79 = &unk_1E25C7160;
    v82[0] = 0;
    if (v25)
      MEMORY[0x18D78B5BC](v25, 0x1000C8000313F17, v24);
    *(_QWORD *)v79 = &unk_1E25C5E70;
    v26 = v87;
    v83 = &unk_1E25C7160;
    v87 = 0;
    if (v26)
      MEMORY[0x18D78B5BC](v26, 0x1000C8000313F17, v24);
  }
  v27 = atomic_load((unsigned __int8 *)&qword_1ECF23070);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23070))
  {
    v51 = 0;
    v80 = 0x1A00000001;
    *(_QWORD *)v79 = &off_1E25C6B60;
    v81 = v82;
    *(_OWORD *)&v79[8] = xmmword_18D3198F0;
    do
    {
      *((_DWORD *)v82 + v51) = v51;
      ++v51;
    }
    while (v51 != 26);
    sub_18D1B741C((uint64_t)&unk_1ECF23BC0, (uint64_t)v79);
    __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1ECF23BC0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23070);
  }
  sub_18D1C99C8((uint64_t)v52);
  v79[0] = 0;
  sub_18D05C654((uint64_t)&v69, (uint64_t)v52, v79);
  sub_18D1C99C8((uint64_t)&v54);
  v85 = 0x10000001ALL;
  v83 = &unk_1E25C70D0;
  v84 = xmmword_18D319790;
  v86 = &v87;
  v80 = 0x100000068;
  *(_QWORD *)v79 = &unk_1E25C5F90;
  *(_OWORD *)&v79[8] = xmmword_18D3198A0;
  v81 = v82;
  sub_18D04F504((uint64_t)v52, (uint64_t)&v83, (uint64_t)v79, (uint64_t)&v54);
  sub_18D1C96FC((uint64_t)&v60, v56, v55);
  v29 = v55;
  v28 = v56;
  v61 = v56;
  v62 = v55;
  v63 = v55 * v56;
  v64 = v56;
  if (v56)
  {
    v30 = 0;
    v31 = 0;
    v32 = v57;
    v33 = v58;
    v34 = v65;
    do
    {
      v35 = v30;
      v36 = v31;
      for (i = v29; i; --i)
      {
        *(_QWORD *)(v34 + 8 * v36) = *(_QWORD *)(v33 + 8 * v35);
        v36 += v28;
        ++v35;
      }
      ++v31;
      v30 += v32;
    }
    while (v31 != v28);
  }
  sub_18D1914F0((uint64_t)v67, (uint64_t)&v60);
  v38 = v66;
  v60 = &unk_1E25C7160;
  v66 = 0;
  if (v38)
    MEMORY[0x18D78B5BC](v38, 0x1000C8000313F17);
  v39 = v59;
  v54 = &unk_1E25C7160;
  v59 = 0;
  v60 = &unk_1E25C5E70;
  if (v39)
    MEMORY[0x18D78B5BC](v39, 0x1000C8000313F17);
  v40 = v53;
  v52[0] = &unk_1E25C7160;
  v53 = 0;
  v54 = &unk_1E25C5E70;
  if (v40)
    MEMORY[0x18D78B5BC](v40, 0x1000C8000313F17);
  sub_18D1B6444((uint64_t)this + 15032, (uint64_t)&unk_1ECF23BC0, (uint64_t)&v74, (uint64_t)v67);
  if (a4 && raven::RavenPNTEstimator::UpdateFullStateEstimate(this, v41))
  {
    LOWORD(v83) = 12;
    LOBYTE(v60) = 4;
    *(_OWORD *)v79 = *((_OWORD *)this + 5);
    v42 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v79, "InflateUncertainty failed to update full states");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v48) = v42;
    else
      v48 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, (unsigned __int8 *)&v60, "%s", v43, v44, v45, v46, v47, v48);
    raven::RavenPNTEstimator::Reset(this);
  }
  v49 = v68;
  v67[0] = &unk_1E25C7160;
  v68 = 0;
  if (v49)
    MEMORY[0x18D78B5BC](v49, 0x1000C8000313F17);
  v50 = v73;
  v69 = &unk_1E25C7160;
  v73 = 0;
  if (v50)
    MEMORY[0x18D78B5BC](v50, 0x1000C8000313F17);
}

void sub_18D1B7268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  __cxa_guard_abort(&qword_1ECF23070);
  if (a43)
    MEMORY[0x18D78B5BC](a43, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B741C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_QWORD *)a1 = &unk_1E25C70D0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D1B7478(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1B748C(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

void raven::RavenPNTEstimator::InflateAttitudeUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflateAttitudeUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1424), a2);
}

void raven::RavenPNTEstimator::InflateDevicePositionUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *__p[2];
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF23080);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23080))
  {
    v18 = 0x300000001;
    *(_QWORD *)v17 = &unk_1E25C6C50;
    v19 = &v20;
    *(_OWORD *)&v17[8] = xmmword_18D314670;
    v20 = 0x100000000;
    v21 = 2;
    sub_18D16169C((uint64_t)v17, (uint64_t)&unk_1ECF23318);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23318, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23080);
  }
  sub_18D1D63C0((uint64_t)v17, (uint64_t)&unk_1ECF23318);
  sub_18D0778AC(__p, "InflateDevicePositionUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v17, (uint64_t)__p, a3, a2);
  if (v16 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v14 = 2;
  *(_OWORD *)v17 = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v17, "Inflating estimator variance of device (only) position error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v14, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1B7628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF23080);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *__p[2];
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF23088);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23088))
  {
    v18 = 0x300000001;
    *(_QWORD *)v17 = &unk_1E25C6C50;
    v19 = &v20;
    *(_OWORD *)&v17[8] = xmmword_18D314670;
    v20 = 0x400000003;
    v21 = 5;
    sub_18D16169C((uint64_t)v17, (uint64_t)&unk_1ECF23350);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23350, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23088);
  }
  sub_18D1D63C0((uint64_t)v17, (uint64_t)&unk_1ECF23350);
  sub_18D0778AC(__p, "InflateDeviceVelocityUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v17, (uint64_t)__p, a3, a2);
  if (v16 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v14 = 2;
  *(_OWORD *)v17 = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v17, "Inflating estimator variance of device (only) velocity error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v14, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1B77DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF23088);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::InflateInsUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[9];
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _BYTE v21[56];
  void *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[56];
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35[2];
  char v36;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF23090);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23090))
  {
    v31 = 0x300000001;
    v29 = &unk_1E25C6C50;
    v32 = &v33;
    v30 = xmmword_18D314670;
    v33 = 0xA00000009;
    v34 = 11;
    sub_18D16169C((uint64_t)&v29, (uint64_t)v35);
    v24 = 0x300000001;
    v22 = &unk_1E25C6C50;
    v25 = &v26;
    v23 = xmmword_18D314670;
    v26 = 0xD0000000CLL;
    v27 = 14;
    sub_18D16169C((uint64_t)&v22, (uint64_t)v28);
    sub_18D1B7AF8((uint64_t)v14, (uint64_t)v35, (uint64_t)v28);
    v17 = 0x300000001;
    v15 = &unk_1E25C6C50;
    v18 = &v19;
    v16 = xmmword_18D314670;
    v19 = 0x100000000FLL;
    v20 = 17;
    sub_18D16169C((uint64_t)&v15, (uint64_t)v21);
    sub_18D1B7A98((uint64_t)v14, (uint64_t)v21);
    __cxa_atexit((void (*)(void *))sub_18D1B7B7C, &qword_1ECF23798, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF23090);
  }
  sub_18D1D63C0((uint64_t)v14, (uint64_t)&qword_1ECF23798);
  sub_18D0778AC(v35, "InflateInsUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, (uint64_t)v35, a3, a2);
  if (v36 < 0)
    operator delete(v35[0]);
  LOWORD(v35[0]) = 12;
  LOBYTE(v29) = 2;
  v14[0] = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of ins sensor error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v35, (unsigned __int8 *)&v29, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1B7A3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF23090);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B7A98(uint64_t a1, uint64_t a2)
{
  qword_1ECF237B0 = 0x100000009;
  qword_1ECF23798 = (uint64_t)&off_1E25C88A0;
  unk_1ECF237A0 = xmmword_18D319A30;
  qword_1ECF237B8 = (uint64_t)&unk_1ECF237C0;
  return sub_18D1CD0EC(a1, a2, (uint64_t)&qword_1ECF23798);
}

void sub_18D1B7AE0(_Unwind_Exception *a1)
{
  qword_1ECF23798 = (uint64_t)&unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B7AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000006;
  *(_QWORD *)a1 = &unk_1E25C8150;
  *(_OWORD *)(a1 + 8) = xmmword_18D319950;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D1CD0EC(a2, a3, a1);
}

void sub_18D1B7B54(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1B7B68(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1B7B7C(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

void raven::RavenPNTEstimator::InflatePositionUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflatePositionUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1440), a2);
}

void raven::RavenPNTEstimator::InflateUserPositionUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *__p[2];
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF230A0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230A0))
  {
    v18 = 0x300000001;
    *(_QWORD *)v17 = &unk_1E25C6C50;
    v19 = &v20;
    *(_OWORD *)&v17[8] = xmmword_18D314670;
    v20 = 0x1500000014;
    v21 = 22;
    sub_18D16169C((uint64_t)v17, (uint64_t)&unk_1ECF23388);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF23388, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230A0);
  }
  sub_18D1D63C0((uint64_t)v17, (uint64_t)&unk_1ECF23388);
  sub_18D0778AC(__p, "InflateUserPositionUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v17, (uint64_t)__p, a3, a2);
  if (v16 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v14 = 2;
  *(_OWORD *)v17 = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v17, "Inflating estimator variance of user position error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v14, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1B7D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF230A0);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::InflateUserVelocityUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *__p[2];
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF230A8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230A8))
  {
    v18 = 0x300000001;
    *(_QWORD *)v17 = &unk_1E25C6C50;
    v19 = &v20;
    *(_OWORD *)&v17[8] = xmmword_18D314670;
    v20 = 0x1800000017;
    v21 = 25;
    sub_18D16169C((uint64_t)v17, (uint64_t)&unk_1ECF233C0);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF233C0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230A8);
  }
  sub_18D1D63C0((uint64_t)v17, (uint64_t)&unk_1ECF233C0);
  sub_18D0778AC(__p, "InflateUserVelocityUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v17, (uint64_t)__p, a3, a2);
  if (v16 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v14 = 2;
  *(_OWORD *)v17 = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v17, "Inflating estimator variance of user velocity error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v14, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1B7ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF230A8);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::InflateVelocityUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[9];
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 v21[56];
  void *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF230B0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230B0))
  {
    v24 = 0x300000001;
    v22 = &unk_1E25C6C50;
    v25 = &v26;
    v23 = xmmword_18D314670;
    v26 = 0x400000003;
    v27 = 5;
    sub_18D16169C((uint64_t)&v22, (uint64_t)v14);
    v17 = 0x300000001;
    v15 = &unk_1E25C6C50;
    v18 = &v19;
    v16 = xmmword_18D314670;
    v19 = 0x1800000017;
    v20 = 25;
    sub_18D16169C((uint64_t)&v15, (uint64_t)v21);
    sub_18D1B7AF8((uint64_t)&unk_1ECF23710, (uint64_t)v14, (uint64_t)v21);
    __cxa_atexit((void (*)(void *))sub_18D1B7B68, &unk_1ECF23710, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230B0);
  }
  sub_18D1D63C0((uint64_t)v14, (uint64_t)&unk_1ECF23710);
  sub_18D0778AC(&v22, "InflateVelocityUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, (uint64_t)&v22, a3, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(v22);
  LOWORD(v22) = 12;
  v21[0] = 2;
  v14[0] = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of velocity error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, v21, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1B80DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF230B0);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::InflateXOUncertainty(raven::RavenPNTEstimator *this, double a2, int a3)
{
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *__p[2];
  char v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECF230B8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230B8))
  {
    v18 = 0x200000001;
    *(_QWORD *)v17 = &unk_1E25C6BF0;
    v19 = &v20;
    *(_OWORD *)&v17[8] = xmmword_18D319920;
    v20 = 0x1300000012;
    sub_18D1B82C8((uint64_t)v17, (uint64_t)&unk_1ECF23218);
    __cxa_atexit((void (*)(void *))sub_18D1B8348, &unk_1ECF23218, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230B8);
  }
  sub_18D1D63C0((uint64_t)v17, (uint64_t)&unk_1ECF23218);
  sub_18D0778AC(__p, "InflateXOUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v17, (uint64_t)__p, a3, a2);
  if (v16 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v14 = 2;
  *(_OWORD *)v17 = *((_OWORD *)this + 5);
  v7 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v17, "Inflating estimator variance of xo error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v13) = v7;
  else
    v13 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v14, "%s", v8, v9, v10, v11, v12, v13);
}

void sub_18D1B8290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF230B8);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B82C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 24) = 0x100000002;
  *(_QWORD *)a2 = &unk_1E25C7550;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  return sub_18D163160(a1, a2);
}

void sub_18D1B8320(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1B8334(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1B8348(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

void raven::RavenPNTEstimator::InflateXOUncertainty(raven::RavenPNTEstimator *this, int a2)
{
  raven::RavenPNTEstimator::InflateXOUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1456), a2);
}

uint64_t sub_18D1B8368(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  _QWORD *v13;

  v8 = *(_QWORD **)(a1 + 5928);
  v9 = *(_QWORD **)(a1 + 5920);
  if (v8 != v9)
  {
    v10 = CNTimeSpan::operator-((uint64_t)a2, v9, a4, a5);
    if (fabs(v11 + (double)v10) >= 2.22044605e-16)
    {
      v12 = v8 - 290;
      do
      {
        *v12 = &unk_1E25C5E70;
        *(v12 - 366) = &unk_1E25C5E70;
        *(v12 - 390) = &unk_1E25C5E70;
        v13 = v12 - 392;
        v12 -= 682;
      }
      while (v13 != v9);
      *(_QWORD *)(a1 + 5928) = v9;
    }
  }
  return sub_18D1BFCA4(a1, a2, a3);
}

double sub_18D1B8420(uint64_t a1, int a2, double *a3)
{
  int *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double result;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(a1 + 304);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 32);
    v5 = *(double **)(a1 + 32);
    v6 = a2;
    do
    {
      v7 = *a3++;
      result = v7;
      v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_18D1B8490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int32x2_t v7;
  int32x4_t v8;
  int32x2_t v9;
  int32x4_t v10;
  _BYTE v11[8];
  int32x4_t v12;

  v7.i32[1] = 1;
  v7.i32[0] = *(_DWORD *)(a2 + 16);
  v9 = v7;
  sub_18D1D6A24((uint64_t)v11, a2);
  v8 = vdupq_lane_s32(v9, 0);
  v8.i32[1] = 1;
  v10 = v8;
  v12 = v8;
  sub_18D053AA8(a1 + 8, (uint64_t)v11);
  sub_18D053AA8(a1 + 256, a3);
  sub_18D1D6A24((uint64_t)v11, a4);
  v12 = v10;
  sub_18D053AA8(a1 + 304, (uint64_t)v11);
  sub_18D053AA8(a1 + 552, a1 + 8);
  sub_18D053AA8(a1 + 800, a1 + 256);
  sub_18D053AA8(a1 + 848, a1 + 304);
  *(_QWORD *)(a1 + 1096) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1104) = 0;
  *(_DWORD *)(a1 + 1108) = 1;
}

void sub_18D1B857C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_QWORD *)a1 = &unk_1E25C70A0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319790;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1B85D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1B85EC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

BOOL sub_18D1B8600(uint64_t a1)
{
  int v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  double v9;
  char v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];
  uint64_t v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;
  _QWORD v35[5];
  uint64_t v36;

  v1 = *(unsigned __int8 *)(a1 + 1104);
  if (v1 == 2)
    return 1;
  if (v1 == 1)
    return 0;
  if (*(_BYTE *)(a1 + 1104))
  {
    LOWORD(v21) = 2;
    LOBYTE(v28) = 5;
    v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1272), "LeastSquaresEstimator::IsObservable called with unexpected observability state %hhu", v1);
    if (*(char *)(a1 + 1295) >= 0)
      LOBYTE(v17) = v11;
    else
      v17 = *(_QWORD *)(a1 + 1272);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v21, (unsigned __int8 *)&v28, "%s", v12, v13, v14, v15, v16, v17);
    return 0;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(v19, a1);
  sub_18D1C99C8((uint64_t)v35);
  sub_18D1C99C8((uint64_t)v33);
  v30 = 0x10000001ALL;
  v28 = &unk_1E25C70D0;
  v29 = xmmword_18D319790;
  v31 = &v32;
  sub_18D1D6664((uint64_t)v26);
  v23 = 0x10000001ALL;
  v21 = &unk_1E25C70A0;
  v22 = xmmword_18D319790;
  v24 = &v25;
  v3 = sub_18D186C18(v19, (uint64_t)v35, (uint64_t)v33, (uint64_t)&v28, (uint64_t)v26, (uint64_t)&v21, "2");
  v4 = v27;
  v26[0] = &off_1E25C8630;
  v27 = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  v5 = v34;
  v33[0] = &unk_1E25C7160;
  v34 = 0;
  if (v5)
    MEMORY[0x18D78B5BC](v5, 0x1000C8000313F17);
  v6 = v36;
  v35[0] = &unk_1E25C7160;
  v36 = 0;
  if (v6)
    MEMORY[0x18D78B5BC](v6, 0x1000C8000313F17);
  v7 = v20;
  v19[0] = &unk_1E25C7160;
  v20 = 0;
  if (v7)
    MEMORY[0x18D78B5BC](v7, 0x1000C8000313F17);
  v8 = 0;
  v9 = *(double *)(a1 + 1176);
  v10 = 1;
  if (v9 >= 1.0 && v3 > 0.0)
  {
    v8 = v3 <= v9;
    if (v3 > v9)
      v10 = 1;
    else
      v10 = 2;
  }
  *(_BYTE *)(a1 + 1104) = v10;
  return v8;
}

void sub_18D1B8848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;

  if (a56)
    MEMORY[0x18D78B5BC](a56, 0x1000C8000313F17);
  v58 = *(_QWORD *)(v56 - 104);
  *(_QWORD *)(v56 - 144) = &unk_1E25C7160;
  *(_QWORD *)(v56 - 104) = 0;
  if (v58)
    MEMORY[0x18D78B5BC](v58, 0x1000C8000313F17);
  v59 = *(_QWORD *)(v56 - 56);
  *(_QWORD *)(v56 - 96) = &unk_1E25C7160;
  *(_QWORD *)(v56 - 56) = 0;
  if (v59)
    MEMORY[0x18D78B5BC](v59, 0x1000C8000313F17);
  if (a19)
    MEMORY[0x18D78B5BC](a19, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1B8928(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_18D1B8934(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

void raven::RavenPNTEstimator::ResetSubStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  _QWORD v44[5];
  uint64_t v45;
  void *v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned __int8 v50[40];
  uint64_t v51;
  _QWORD v52[5];
  uint64_t v53;
  uint64_t (**v54)();
  __int128 v55;
  uint64_t v56;
  unsigned int *v57;
  _BYTE v58[208];
  _BYTE v59[24];
  uint64_t v60;
  double *v61;
  _QWORD v62[105];
  uint64_t (**v63)();
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD v67[15];

  v56 = 0x10000001CLL;
  v54 = &off_1E25C72E0;
  v55 = xmmword_18D319780;
  v57 = (unsigned int *)v58;
  v60 = 0x10000001CLL;
  *(_QWORD *)v59 = &off_1E25C7310;
  *(_OWORD *)&v59[8] = xmmword_18D319780;
  v61 = (double *)v62;
  sub_18D1D5074(a2, (uint64_t)&v54, (uint64_t)v59);
  v11 = *v57;
  v56 = 0x10000001CLL;
  v54 = &off_1E25C72E0;
  v55 = xmmword_18D319780;
  v57 = (unsigned int *)v58;
  v60 = 0x10000001CLL;
  *(_QWORD *)v59 = &off_1E25C7310;
  *(_OWORD *)&v59[8] = xmmword_18D319780;
  v61 = (double *)v62;
  sub_18D1D53BC(a2, (uint64_t)&v54, (uint64_t)v59);
  v12 = *v57;
  if (v11 > 0x1B || v12 < 0 || v12 >= 28)
  {
    LOWORD(v54) = 12;
    LOBYTE(v63) = 4;
    *(_OWORD *)v59 = *(_OWORD *)(a1 + 80);
    v32 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v59, "%s failed, invalid specified full states, min state %d, max state %d.");
LABEL_35:
    v38 = *(char *)(a1 + 2511);
    v39 = *(_QWORD *)(a1 + 2488);
LABEL_36:
    if (v38 >= 0)
      v40 = v32;
    else
      v40 = v39;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v63, "%s", v33, v34, v35, v36, v37, v40);
    return;
  }
  v56 = 0x10000001ALL;
  v54 = (uint64_t (**)())&unk_1E25C70D0;
  v55 = xmmword_18D319790;
  v57 = (unsigned int *)v58;
  v60 = 0x10000001ALL;
  *(_QWORD *)v59 = &off_1E25C7100;
  *(_OWORD *)&v59[8] = xmmword_18D319790;
  v61 = (double *)v62;
  sub_18D1D5074(a4, (uint64_t)&v54, (uint64_t)v59);
  v13 = *v57;
  v56 = 0x10000001ALL;
  v54 = (uint64_t (**)())&unk_1E25C70D0;
  v55 = xmmword_18D319790;
  v57 = (unsigned int *)v58;
  v60 = 0x10000001ALL;
  *(_QWORD *)v59 = &off_1E25C7100;
  *(_OWORD *)&v59[8] = xmmword_18D319790;
  v61 = (double *)v62;
  sub_18D1D53BC(a4, (uint64_t)&v54, (uint64_t)v59);
  v14 = *v57;
  if (v13 > 0x19 || v14 < 0 || v14 >= 26)
  {
    LOWORD(v54) = 12;
    LOBYTE(v63) = 4;
    *(_OWORD *)v59 = *(_OWORD *)(a1 + 80);
    v32 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v59, "%s failed, invalid specified error states, min state %d, max state %d.");
    goto LABEL_35;
  }
  if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(a2 + 8))
  {
    LOWORD(v54) = 12;
    LOBYTE(v63) = 4;
    *(_OWORD *)v59 = *(_OWORD *)(a1 + 80);
    v32 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v59, "%s failed, size mismatch, full state size,%u, initial value size,%u");
    goto LABEL_35;
  }
  v15 = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a5 + 8) != v15 || *(_DWORD *)(a6 + 8) != v15 || *(_DWORD *)(a6 + 12) != v15)
  {
    LOWORD(v54) = 12;
    LOBYTE(v63) = 4;
    *(_OWORD *)v59 = *(_OWORD *)(a1 + 80);
    v32 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v59, "%s failed, size mismatch, error state size,%u, inital error value size,%u, init covariance matrix size, %u, %u");
LABEL_43:
    v38 = *(char *)(a1 + 2511);
    v39 = *(_QWORD *)(a1 + 2488);
    goto LABEL_36;
  }
  sub_18D1C99C8((uint64_t)v59);
  sub_18D1D6664((uint64_t)&v63);
  v56 = 0x10000001ALL;
  v54 = (uint64_t (**)())&unk_1E25C70A0;
  v55 = xmmword_18D319790;
  v57 = (unsigned int *)v58;
  v16.n128_f64[0] = sub_18D15A3D4(a6, (uint64_t)v59, (uint64_t)&v63, (uint64_t)&v54);
  v17 = v67[0];
  v63 = &off_1E25C8630;
  v67[0] = 0;
  if (v17)
    MEMORY[0x18D78B5BC](v17, 0x1000C8000313F17, v16.n128_f64[0]);
  v18 = v62[0];
  *(_QWORD *)v59 = &unk_1E25C7160;
  v62[0] = 0;
  if (v18)
    MEMORY[0x18D78B5BC](v18, 0x1000C8000313F17, v16);
  v60 = 0x10000001ALL;
  *(_QWORD *)v59 = &unk_1E25C70A0;
  *(_OWORD *)&v59[8] = xmmword_18D319790;
  v61 = (double *)v62;
  v65 = 0x10000001ALL;
  v63 = &off_1E25C7100;
  v64 = xmmword_18D319790;
  v66 = v67;
  sub_18D1C2074((uint64_t)&v54, (uint64_t)v59, (uint64_t)&v63);
  if (*v61 <= 0.000000015)
  {
    LOWORD(v54) = 12;
    LOBYTE(v63) = 4;
    *(_OWORD *)v59 = *(_OWORD *)(a1 + 80);
    v32 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v59, "%s failed, non-positive covariance matrix, %.3lf");
    goto LABEL_43;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 80);
  sub_18D1CD4A0((uint64_t)v59, a1 + 14616, a2);
  sub_18D1B8420((uint64_t)v59, *(_DWORD *)(a3 + 16), *(double **)(a3 + 32));
  sub_18D1D6A24((uint64_t)&v54, a5);
  sub_18D1C99C8((uint64_t)v44);
  v59[0] = 0;
  sub_18D05C654(a6, (uint64_t)v44, v59);
  sub_18D1C99C8((uint64_t)&v46);
  v65 = 0x10000001ALL;
  v63 = (uint64_t (**)())&unk_1E25C70D0;
  v64 = xmmword_18D319790;
  v66 = v67;
  v60 = 0x100000068;
  *(_QWORD *)v59 = &unk_1E25C5F90;
  *(_OWORD *)&v59[8] = xmmword_18D3198A0;
  v61 = (double *)v62;
  sub_18D04F504((uint64_t)v44, (uint64_t)&v63, (uint64_t)v59, (uint64_t)&v46);
  sub_18D1C96FC((uint64_t)v50, v48, v47);
  sub_18D073454((uint64_t)&v46, (uint64_t)v50);
  sub_18D1914F0((uint64_t)v52, (uint64_t)v50);
  v19 = v51;
  *(_QWORD *)v50 = &unk_1E25C7160;
  v51 = 0;
  if (v19)
    MEMORY[0x18D78B5BC](v19, 0x1000C8000313F17);
  v20 = v49;
  v46 = &unk_1E25C7160;
  v49 = 0;
  *(_QWORD *)v50 = &unk_1E25C5E70;
  if (v20)
    MEMORY[0x18D78B5BC](v20, 0x1000C8000313F17);
  v21 = v45;
  v44[0] = &unk_1E25C7160;
  v45 = 0;
  v46 = &unk_1E25C5E70;
  if (v21)
    MEMORY[0x18D78B5BC](v21, 0x1000C8000313F17);
  sub_18D1B6444(a1 + 15032, a4, (uint64_t)&v54, (uint64_t)v52);
  if (raven::RavenPNTEstimator::UpdateFullStateEstimate((raven::RavenPNTEstimator *)a1, v22))
  {
    LOWORD(v63) = 12;
    v50[0] = 4;
    *(_OWORD *)v59 = *(_OWORD *)(a1 + 80);
    if (*(char *)(a7 + 23) >= 0)
      v23 = (const char *)a7;
    else
      v23 = *(const char **)a7;
    v24 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v59, "%s failed to update full states", v23);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, v50, "%s", v25, v26, v27, v28, v29, v30);
    raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)a1);
  }
  v31 = v53;
  v52[0] = &unk_1E25C7160;
  v53 = 0;
  if (v31)
    MEMORY[0x18D78B5BC](v31, 0x1000C8000313F17);
}

void sub_18D1B9048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a39)
    MEMORY[0x18D78B5BC](a39, 0x1000C8000313F17);
  if (a33)
    MEMORY[0x18D78B5BC](a33, 0x1000C8000313F17);
  if (a27)
    MEMORY[0x18D78B5BC](a27, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::ResetInsStates(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  char *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  void *v46;
  __int128 v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE v50[112];
  void *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void *__p;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  _BYTE v77[24];
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t (**v81)();
  __int128 v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE v85[648];

  v4 = atomic_load((unsigned __int8 *)&qword_1ECF230C0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230C0))
  {
    v36 = 0x300000001;
    v34 = (uint64_t (**)())&unk_1E25C6C50;
    v37 = &v38;
    v35 = xmmword_18D314670;
    v38 = 0xB0000000ALL;
    v39 = 12;
    sub_18D16169C((uint64_t)&v34, (uint64_t)&v81);
    v42 = 0x300000001;
    v40 = &unk_1E25C6C50;
    v43 = &v44;
    v41 = xmmword_18D314670;
    v44 = 0xE0000000DLL;
    v45 = 15;
    sub_18D16169C((uint64_t)&v40, (uint64_t)&v46);
    v68 = 0x300000001;
    __p = &unk_1E25C6C50;
    v69 = &v70;
    v67 = xmmword_18D314670;
    v70 = 0x1100000010;
    v71 = 18;
    sub_18D16169C((uint64_t)&__p, (uint64_t)&v72);
    sub_18D1B7AF8((uint64_t)v77, (uint64_t)&v46, (uint64_t)&v72);
    sub_18D1B9AEC((uint64_t)&unk_1ECF237E8, (uint64_t)&v81, (uint64_t)v77);
    __cxa_atexit((void (*)(void *))sub_18D1B7B7C, &unk_1ECF237E8, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230C0);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ECF230C8);
  v6 = "ation3CLP8LogEntry16InternalToolData23InternalToolDataCaptureE";
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230C8))
  {
    v83 = 0x100000003;
    v81 = (uint64_t (**)())&unk_1E25C7790;
    v84 = v85;
    v82 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v81, 0.0);
    v36 = 0x100000003;
    v34 = (uint64_t (**)())&unk_1E25C7790;
    v37 = &v38;
    v35 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v34, 0.0);
    v48 = 0x100000003;
    v46 = &unk_1E25C7790;
    v49 = v50;
    v47 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v46, 1.0);
    sub_18D1B9BB8((uint64_t)v77, (uint64_t)&v34, (uint64_t)&v46);
    sub_18D1B9B58((uint64_t)&v81, (uint64_t)v77);
    __cxa_atexit((void (*)(void *))sub_18D1B9C3C, &qword_1ECF23888, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230C8);
    v6 = "ation3CLP8LogEntry16InternalToolData23InternalToolDataCaptureE";
  }
  v7 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a2, a3);
  v8 = *((_QWORD *)this + 146);
  v9 = 744;
  if (v7)
    v9 = 752;
  v10 = *(double *)(v8 + v9);
  v11 = *(double *)(v8 + 728);
  v12 = 768;
  if (v7)
    v12 = 776;
  v13 = *(double *)(v8 + v12);
  v14 = atomic_load((unsigned __int8 *)&qword_1ECF230D0);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230D0))
  {
    v36 = 0x300000001;
    v34 = (uint64_t (**)())&unk_1E25C6C50;
    v37 = &v38;
    v35 = xmmword_18D314670;
    v38 = 0xA00000009;
    v39 = 11;
    sub_18D16169C((uint64_t)&v34, (uint64_t)&v81);
    v42 = 0x300000001;
    v40 = &unk_1E25C6C50;
    v43 = &v44;
    v41 = xmmword_18D314670;
    v44 = 0xD0000000CLL;
    v45 = 14;
    sub_18D16169C((uint64_t)&v40, (uint64_t)&v46);
    v68 = 0x300000001;
    __p = &unk_1E25C6C50;
    v69 = &v70;
    v67 = xmmword_18D314670;
    v70 = 0x100000000FLL;
    v71 = 17;
    sub_18D16169C((uint64_t)&__p, (uint64_t)&v72);
    sub_18D1B7AF8((uint64_t)v77, (uint64_t)&v46, (uint64_t)&v72);
    sub_18D1B9AEC((uint64_t)&unk_1ECF23838, (uint64_t)&v81, (uint64_t)v77);
    __cxa_atexit((void (*)(void *))sub_18D1B7B7C, &unk_1ECF23838, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230D0);
    v6 = "N14CoreNavigation3CLP8LogEntry16InternalToolData23InternalToolDataCaptureE" + 12;
  }
  v15 = atomic_load((unsigned __int8 *)&qword_1ECF230D8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF230D8))
  {
    qword_1ECF23910 = 0x100000009;
    qword_1ECF238F8 = (uint64_t)&off_1E25C8870;
    qword_1ECF23918 = (uint64_t)&unk_1ECF23920;
    unk_1ECF23900 = xmmword_18D319A30;
    sub_18D04BE88((uint64_t)&qword_1ECF238F8, 0.0);
    __cxa_atexit((void (*)(void *))sub_18D1B9C3C, &qword_1ECF238F8, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF230D8);
  }
  v74 = *((_QWORD *)v6 + 8);
  v16 = v74;
  v72 = &unk_1E25C7790;
  v75 = &v76;
  v73 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v72, 1.0);
  v17.f64[0] = v10 * v10;
  v42 = v16;
  v40 = &unk_1E25C7790;
  v41 = xmmword_18D313070;
  v43 = &v44;
  sub_18D1C94E0((uint64_t)&v72, (uint64_t)&v40, v17);
  v63 = v16;
  v61 = &unk_1E25C7790;
  v64 = &v65;
  v62 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v61, 1.0);
  v18.f64[0] = v11 * v11;
  v68 = v16;
  __p = &unk_1E25C7790;
  v67 = xmmword_18D313070;
  v69 = &v70;
  sub_18D1C94E0((uint64_t)&v61, (uint64_t)&__p, v18);
  v53 = v16;
  v51 = &unk_1E25C7790;
  v54 = &v55;
  v52 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v51, 1.0);
  v19.f64[0] = v13 * v13;
  v58 = v16;
  v56 = &unk_1E25C7790;
  v57 = xmmword_18D313070;
  v59 = &v60;
  sub_18D1C94E0((uint64_t)&v51, (uint64_t)&v56, v19);
  v48 = 0x100000006;
  v46 = &unk_1E25C8120;
  v47 = xmmword_18D319950;
  v49 = v50;
  sub_18D0543E8((uint64_t)&__p, (uint64_t)&v56, (uint64_t)&v46);
  v36 = 0x100000009;
  v34 = &off_1E25C8870;
  v35 = xmmword_18D319A30;
  v37 = &v38;
  sub_18D0543E8((uint64_t)&v40, (uint64_t)&v46, (uint64_t)&v34);
  v78 = 0xA0000000ALL;
  *(_QWORD *)v77 = &unk_1E25C5FC0;
  *(_OWORD *)&v77[8] = xmmword_18D319A40;
  v79 = &v80;
  sub_18D1D4A98((uint64_t)&v34, 0, (uint64_t)v77);
  v83 = 0x900000009;
  v81 = &off_1E25C88D0;
  *(_QWORD *)&v82 = *(_QWORD *)&v77[8];
  v20 = (*(_DWORD *)&v77[12] * *(_DWORD *)&v77[8]);
  DWORD2(v82) = *(_DWORD *)&v77[12] * *(_DWORD *)&v77[8];
  HIDWORD(v82) = *(_DWORD *)&v77[8];
  v21 = v85;
  v84 = v85;
  if (*(_DWORD *)&v77[8] > 9u)
  {
    v32 = "this->max_num_rows_ >= A.NumRows()";
    v33 = 567;
    goto LABEL_24;
  }
  if (*(_DWORD *)&v77[12] > 9u)
  {
    v32 = "this->max_num_cols_ >= A.NumCols()";
    v33 = 568;
LABEL_24:
    __assert_rtn("CNMatrix", "cnmatrix.h", v33, v32);
  }
  if ((int)v20 >= 1)
  {
    v22 = v79;
    do
    {
      v23 = *v22++;
      *v21++ = v23;
      --v20;
    }
    while (v20);
  }
  sub_18D1CD3D0((uint64_t)&v46, (uint64_t)&unk_1ECF237E8);
  sub_18D1D6E1C((uint64_t)v77, (uint64_t)&qword_1ECF23888);
  sub_18D1D63C0((uint64_t)&v40, (uint64_t)&unk_1ECF23838);
  sub_18D1D6EF0((uint64_t)&v34, (uint64_t)&qword_1ECF238F8);
  sub_18D1D6FC4((uint64_t)&v72, (uint64_t)&v81);
  sub_18D0778AC(&__p, "ResetInsStates");
  raven::RavenPNTEstimator::ResetSubStates((uint64_t)this, (uint64_t)&v46, (uint64_t)v77, (uint64_t)&v40, (uint64_t)&v34, (uint64_t)&v72, (uint64_t)&__p);
  if (SHIBYTE(v67) < 0)
    operator delete(__p);
  v24 = v76;
  v72 = &unk_1E25C7160;
  v76 = 0;
  if (v24)
    MEMORY[0x18D78B5BC](v24, 0x1000C8000313F17);
  LOWORD(v34) = 12;
  LOBYTE(v46) = 2;
  *(_OWORD *)v77 = *((_OWORD *)this + 5);
  v25 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v77, "Resetting INS sensor states.");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v31) = v25;
  else
    v31 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v46, "%s", v26, v27, v28, v29, v30, v31);
}

void sub_18D1B9A18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF230D0);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B9AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000009;
  *(_QWORD *)a1 = &off_1E25C88A0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A30;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D1CD0EC(a2, a3, a1);
}

void sub_18D1B9B44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B9B58(uint64_t a1, uint64_t a2)
{
  qword_1ECF238A0 = 0x100000009;
  qword_1ECF23888 = (uint64_t)&off_1E25C8870;
  *(_OWORD *)algn_1ECF23890 = xmmword_18D319A30;
  qword_1ECF238A8 = (uint64_t)&unk_1ECF238B0;
  return sub_18D0543E8(a1, a2, (uint64_t)&qword_1ECF23888);
}

void sub_18D1B9BA0(_Unwind_Exception *a1)
{
  qword_1ECF23888 = (uint64_t)&unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B9BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000006;
  *(_QWORD *)a1 = &unk_1E25C8120;
  *(_OWORD *)(a1 + 8) = xmmword_18D319950;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D0543E8(a2, a3, a1);
}

void sub_18D1B9C14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1B9C28(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1B9C3C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1B9C50(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1B9C64(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1B9C78(_QWORD *result)
{
  result[64] = &unk_1E25C5EA0;
  result[58] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1B9CA0(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1B9CB4(_QWORD *result)
{
  result[76] = &unk_1E25C5EA0;
  result[58] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1B9CDC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1B9CF0(uint64_t a1, uint64_t a2)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = 0x100000002;
  v7 = &unk_1E25C7520;
  v8 = xmmword_18D319330;
  v10 = &v11;
  v4 = 0x200000002;
  v2 = &unk_1E25C75B0;
  v3 = xmmword_18D319340;
  v5 = &v6;
  *(_QWORD *)(a1 + 24) = 0x200000002;
  *(_QWORD *)a1 = &unk_1E25C75B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319340;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D05C770(a2, (uint64_t)&v7, (uint64_t)&v2, a1);
}

void sub_18D1B9DA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1B9DB8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x200000002;
  *(_QWORD *)a1 = &unk_1E25C75B0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D073454(a2, a1);
}

void sub_18D1B9E10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1B9E24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  *(_QWORD *)(a2 + 24) = 0x200000002;
  *(_QWORD *)a2 = &unk_1E25C75B0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319340;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v9 = 0x100000002;
  v7 = &unk_1E25C7550;
  v8 = xmmword_18D319330;
  v10 = &v11;
  v4 = 0x100000008;
  v2 = &unk_1E25C86C0;
  v3 = xmmword_18D319940;
  v5 = &v6;
  sub_18D04F504(a1, (uint64_t)&v7, (uint64_t)&v2, a2);
}

void sub_18D1B9EEC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1B9F00(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  *(_QWORD *)(a1 + 24) = 0x200000002;
  *(_QWORD *)a1 = &unk_1E25C75B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319340;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v2 = 0;
  sub_18D05C654(a2, a1, &v2);
}

void sub_18D1B9F64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1B9F78(_BYTE *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  sub_18D1BE17C((uint64_t)a1, (uint64_t)a2);
  *a1 = 0;
  *(_QWORD *)&result = sub_18D05DB3C((uint64_t)a1, a2, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

uint64_t sub_18D1B9FA8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000013;
  *(_QWORD *)a1 = &off_1E25C66E0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D1BA000(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1BA014(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D1BA028(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000007;
  *(_QWORD *)a1 = &off_1E25C8210;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D1BA080(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1BA094(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D1BA0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  uint64_t result;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  int8x16_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  double v22;
  double *v23;
  int v24;
  __int128 v25;
  float64x2_t v26;
  uint64_t v27;
  cnstatistics *v28;
  int v29;
  unsigned int v30;
  double *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  int v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  double v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  int v65;
  uint64_t v66;
  double *v67;
  double v68;
  double *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double *v74;
  float64_t *v75;
  int v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  double v86;
  __n128 v87;
  uint64_t v88;
  double *v89;
  int v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  float64_t v98;
  float64_t v99;
  double v100;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v109;
  void *v110;
  __int128 v111;
  uint64_t v112;
  double *v113;
  _BYTE v114[288];
  void (**v115)(cnnavigation::ENUToECEFJacobian *__hidden);
  __int128 v116;
  __int128 v117;
  _QWORD v118[2];
  uint64_t v119;
  void *v120;
  __int128 v121;
  uint64_t v122;
  double *v123;
  double v124[9];
  void *v125;
  __int128 v126;
  uint64_t v127;
  double *v128;
  _BYTE v129[72];
  void *v130;
  __int128 v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  _BYTE v135[72];
  _BYTE v136[72];
  _BYTE v137[48];
  void *v138;
  __int128 v139;
  uint64_t v140;
  double *v141;
  __int128 v142;
  uint64_t v143;
  void *v144;
  __int128 v145;
  uint64_t v146;
  double *v147;
  uint64_t v148;
  void *v149;
  __int128 v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  _BYTE v154[24];
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  int v158;
  void *v159;
  __int128 v160;
  uint64_t v161;
  float64_t *v162;
  _BYTE v163[288];
  void *v164;
  __int128 v165;
  uint64_t v166;
  double *v167;
  _QWORD v168[39];

  v168[36] = *MEMORY[0x1E0C80C00];
  v4 = *(double *)(a2 + 16);
  result = 0xFFFFFFFFLL;
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v4 != 0.0)
  {
    v6 = *(double *)(a2 + 56);
    if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a2 + 64) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && v6 > 0.0
      && *(double *)(a2 + 64) > 0.0
      && (*(_QWORD *)(a2 + 72) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a2 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a2 + 88) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *(double *)(a2 + 72) > 0.0
      && *(double *)(a2 + 80) > 0.0
      && *(double *)(a2 + 88) > 0.0)
    {
      v7 = *(double *)(a2 + 96);
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v8 = *(double *)(a2 + 104);
        if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v9 = *(double *)(a2 + 112);
          if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && v7 > 0.0
            && v8 > 0.0
            && v9 > 0.0
            && (*(_QWORD *)(a2 + 120) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)(a2 + 128) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && *(double *)(a2 + 120) > 0.0
            && *(double *)(a2 + 128) > 0.0)
          {
            v10 = *(float64x2_t *)(a2 + 144);
            if ((*(_QWORD *)(a2 + 144) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v11 = *(double *)(a2 + 152);
              if ((*(_QWORD *)&v10.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                v102 = *(double *)(a2 + 120);
                v103 = *(double *)(a2 + 64);
                v104 = *(double *)(a2 + 128);
                v105 = *(double *)(a2 + 72);
                v109 = *(double *)(a2 + 104);
                v106 = *(double *)(a2 + 80);
                v107 = *(double *)(a2 + 88);
                if ((*(_QWORD *)(a2 + 160) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                {
                  v98 = *(double *)(a2 + 160);
                  v99 = *(double *)(a2 + 176);
                  v12.f64[1] = v99;
                  v100 = *(double *)(a2 + 144);
                  v12.f64[0] = v98;
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vclezq_f64(v10), (int32x4_t)vclezq_f64(v12)))) & 1) == 0
                    && (*(_QWORD *)(a2 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                  {
                    v95 = *(double *)(a2 + 136);
                    v97 = fabs(v4);
                    v91 = *(double *)(a2 + 168);
                    v92 = exp(-v97 / v7);
                    v93 = exp(-v97 / v8);
                    v94 = exp(-v97 / v9);
                    v151 = 0x200000002;
                    v149 = &unk_1E25C75B0;
                    v150 = xmmword_18D319340;
                    v152 = &v153;
                    if (sub_18D05BEA4(a1, a2, (uint64_t)&v149, COERCE_DOUBLE(0x200000002), v13))
                    {
                      *(_WORD *)v154 = 12;
                      LOBYTE(v144) = 4;
                      v14 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix failed");
                      if (*(char *)(a1 + 2511) >= 0)
                        LOBYTE(v20) = (_BYTE)v14;
                      else
                        v20 = *v14;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, (unsigned __int8 *)&v144, "%s", v15, v16, v17, v18, v19, v20);
                      return 0xFFFFFFFFLL;
                    }
                    else
                    {
                      v146 = 0x600000006;
                      v144 = &unk_1E25C81B0;
                      v147 = (double *)&v148;
                      v145 = xmmword_18D314680;
                      sub_18D04BE88((uint64_t)&v144, 0.0);
                      v21 = *(unsigned __int8 *)(a1 + 2536);
                      if (*(_BYTE *)(a1 + 2536))
                      {
                        if (v21 == 1)
                        {
                          v22 = v97 * (v95 * *(double *)(a1 + 2568));
                          v23 = v147;
                          *v147 = v22;
                          v24 = HIDWORD(v145);
                          v23[HIDWORD(v145) + 1] = v22;
                          v23[2 * v24 + 2] = v22;
                          v155 = 0x300000001;
                          *(_QWORD *)v154 = &unk_1E25C6C50;
                          v156 = &v157;
                          *(_OWORD *)&v154[8] = xmmword_18D314670;
                          v157 = 0x400000003;
                          v158 = 5;
                          sub_18D16169C((uint64_t)v154, (uint64_t)v136);
                          *(_QWORD *)&v117 = 0x300000003;
                          v115 = (void (**)(cnnavigation::ENUToECEFJacobian *__hidden))&unk_1E25C78E0;
                          v116 = xmmword_18D30BB60;
                          *((_QWORD *)&v117 + 1) = v118;
                          v155 = 0x300000001;
                          *(_QWORD *)v154 = &unk_1E25C6C50;
                          v156 = &v157;
                          *(_OWORD *)&v154[8] = xmmword_18D314670;
                          v157 = 0x1A00000019;
                          v158 = 27;
                          sub_18D16169C((uint64_t)v154, (uint64_t)v135);
                          sub_18D1BE7A4((uint64_t)&v164, a1 + 14616, (uint64_t)v135);
                          v132 = 0x100000001;
                          v130 = &unk_1E25C6A40;
                          *(_QWORD *)&v25 = 0x100000001;
                          *((_QWORD *)&v25 + 1) = 0x100000001;
                          v131 = v25;
                          v133 = &v134;
                          v140 = 0x100000001;
                          v138 = &unk_1E25C6AA0;
                          v139 = v25;
                          v141 = (double *)&v142;
                          sub_18D1B2880((uint64_t)v154, (uint64_t)&v164);
                          sub_18D1C2074((uint64_t)v154, (uint64_t)&v130, (uint64_t)&v138);
                          v161 = 0x100000003;
                          v159 = &unk_1E25C7790;
                          v162 = (float64_t *)v163;
                          v160 = xmmword_18D313070;
                          sub_18D04BE88((uint64_t)&v159, 0.0);
                          v162[*(int *)v141] = 1.0;
                          v112 = 0x100000003;
                          v110 = &unk_1E25C7790;
                          v111 = xmmword_18D313070;
                          v113 = (double *)v114;
                          sub_18D1CB7D0((uint64_t)&v159, (uint64_t)&v164, (uint64_t)&v110);
                          sub_18D192CE4((uint64_t)&v110);
                          if (fabs(v26.f64[0]) <= 0.000000015)
                          {
                            *(_WORD *)v154 = 12;
                            LOBYTE(v125) = 4;
                            v32 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "GetProcessNoiseInformationMatrix unexpected zero vector arbitrary_1,%.3lf,%.3lf,%.3lf", *v113, v113[1], v113[2]);
                            if (*(char *)(a1 + 2511) >= 0)
                              LOBYTE(v38) = v32;
                            else
                              v38 = *(_QWORD *)(a1 + 2488);
                            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, (unsigned __int8 *)&v125, "%s", v33, v34, v35, v36, v37, v38);
                          }
                          else
                          {
                            v26.f64[0] = 1.0 / v26.f64[0];
                            sub_18D1B27A8((uint64_t)&v110, (uint64_t)v154, v26);
                            sub_18D053AA8((uint64_t)&v110, (uint64_t)v154);
                          }
                          v127 = 0x100000003;
                          v125 = &unk_1E25C7790;
                          v126 = xmmword_18D313070;
                          v128 = (double *)v129;
                          sub_18D1CB7D0((uint64_t)&v164, (uint64_t)&v110, (uint64_t)&v125);
                          sub_18D192CE4((uint64_t)&v125);
                          if (fabs(v39.f64[0]) <= 0.000000015)
                          {
                            *(_WORD *)v154 = 12;
                            LOBYTE(v120) = 4;
                            v40 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "GetProcessNoiseInformationMatrix unexpected zero vector arbitrary_2,%.3lf,%.3lf,%.3lf", *v128, v128[1], v128[2]);
                            if (*(char *)(a1 + 2511) >= 0)
                              LOBYTE(v46) = v40;
                            else
                              v46 = *(_QWORD *)(a1 + 2488);
                            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, (unsigned __int8 *)&v120, "%s", v41, v42, v43, v44, v45, v46);
                          }
                          else
                          {
                            v39.f64[0] = 1.0 / v39.f64[0];
                            sub_18D1B27A8((uint64_t)&v125, (uint64_t)v154, v39);
                            sub_18D053AA8((uint64_t)&v125, (uint64_t)v154);
                          }
                          sub_18D186BA8((uint64_t)&v164, (uint64_t)&v120);
                          sub_18D165F0C(":", (uint64_t)&v115, 0, (uint64_t)v154);
                          sub_18D16193C((uint64_t)v154, (uint64_t)&v120);
                          sub_18D186BA8((uint64_t)&v110, (uint64_t)&v120);
                          sub_18D165F0C(":", (uint64_t)&v115, 1, (uint64_t)v154);
                          sub_18D16193C((uint64_t)v154, (uint64_t)&v120);
                          sub_18D186BA8((uint64_t)&v125, (uint64_t)&v120);
                          sub_18D165F0C(":", (uint64_t)&v115, 2, (uint64_t)v154);
                          sub_18D16193C((uint64_t)v154, (uint64_t)&v120);
                          v47 = *(double *)(a1 + 2560);
                          v48 = *(_QWORD *)(a1 + 14648);
                          v49 = *(double *)(a1 + 2568);
                          if (*(double *)(v48 + 192) * (v91 * *(double *)(v48 + 192)) <= v95)
                            v50 = v95;
                          else
                            v50 = *(double *)(v48 + 192) * (v91 * *(double *)(v48 + 192));
                          v166 = 0x300000003;
                          v164 = &unk_1E25C78E0;
                          v167 = (double *)v168;
                          v165 = xmmword_18D30BB60;
                          sub_18D04BE88((uint64_t)&v164, 0.0);
                          v51 = v97 * (v49 * v50);
                          v52 = v167;
                          *v167 = v97 * (v100 * v47);
                          v53 = HIDWORD(v165);
                          v52[HIDWORD(v165) + 1] = v51;
                          v52[2 * v53 + 2] = v51;
                          sub_18D166008((uint64_t)&v115, (uint64_t)&v164, (uint64_t)&v110);
                          sub_18D16606C((uint64_t)&v115, (uint64_t)&v125);
                          sub_18D166008((uint64_t)&v110, (uint64_t)&v125, (uint64_t)&v159);
                          sub_18D04F764((uint64_t)v154, (uint64_t)&v144, (uint64_t)v136, (uint64_t)v136);
                          sub_18D16171C((uint64_t)v154, (uint64_t)&v159);
                        }
                        else if (v21 == 2)
                        {
                          __assert_rtn("GetProcessNoiseInformationMatrix", "ravenpntestimator.h", 806, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
                        }
                      }
                      else
                      {
                        LOBYTE(v116) = 0;
                        v118[0] = 0x300000003;
                        *((_QWORD *)&v116 + 1) = &unk_1E25C78E0;
                        v117 = xmmword_18D30BB60;
                        v118[1] = &v119;
                        v115 = &off_1E25B9588;
                        v27 = *(_QWORD *)(a1 + 14648);
                        *(_OWORD *)v154 = *(_OWORD *)v27;
                        *(_QWORD *)&v154[16] = *(_QWORD *)(v27 + 16);
                        v165 = 0uLL;
                        v164 = 0;
                        v160 = 0uLL;
                        v159 = 0;
                        v28 = (cnstatistics *)cnnavigation::ENUToECEF((__int128 *)&v164, 1, 0, (uint64_t)v154, 1, (float64x2_t *)&v159, (uint64_t)&v115);
                        v29 = (int)v28;
                        if (*(_BYTE *)(a1 + 1208)
                          && (v30 = *(unsigned __int8 *)(a1 + 1320), v30 <= 7)
                          && ((1 << v30) & 0xCE) != 0)
                        {
                          v31 = (double *)(*(_QWORD *)(a1 + 1168) + 936);
                        }
                        else
                        {
                          v31 = (double *)(*(_QWORD *)(a1 + 1168) + 928);
                        }
                        v54 = cnstatistics::InverseNormal(v28, 1.0 - *v31, 0.0, sqrt(*(double *)(*(_QWORD *)(a1 + 14912) + 192 * *(int *)(a1 + 14900) + 192)));
                        v55 = *(double *)(*(_QWORD *)(a1 + 14648) + 192);
                        v166 = 0x300000003;
                        v164 = &unk_1E25C78E0;
                        v167 = (double *)v168;
                        v165 = xmmword_18D30BB60;
                        sub_18D04BE88((uint64_t)&v164, 0.0);
                        if (v29 || v55 <= v54)
                        {
                          v64 = v167;
                          *v167 = v99;
                          v65 = HIDWORD(v165);
                          v64[HIDWORD(v165) + 1] = v99;
                          v64[2 * v65 + 2] = v99;
                        }
                        else
                        {
                          v161 = 0x300000003;
                          v159 = &unk_1E25C78E0;
                          v162 = (float64_t *)v163;
                          v160 = xmmword_18D30BB60;
                          sub_18D04BE88((uint64_t)&v159, 0.0);
                          v140 = 0x100000003;
                          v138 = &unk_1E25C7790;
                          v139 = xmmword_18D313070;
                          v141 = (double *)&v142;
                          v56 = *(_QWORD *)(a1 + 14648);
                          v142 = *(_OWORD *)(v56 + 200);
                          v143 = *(_QWORD *)(v56 + 216);
                          v112 = 0x300000003;
                          v110 = &unk_1E25C78E0;
                          v111 = xmmword_18D30BB60;
                          v113 = (double *)v114;
                          if ((_BYTE)v116)
                            sub_18D053AA8((uint64_t)&v110, (uint64_t)&v116 + 8);
                          sub_18D1AFFC0(":", (uint64_t)&v110, 0, (uint64_t)v154);
                          v57 = DWORD2(v139);
                          if (SDWORD2(v139) < 1)
                          {
                            v59 = 0.0;
                          }
                          else
                          {
                            v58 = v141;
                            v59 = 0.0;
                            v60 = (double *)v156;
                            do
                            {
                              v61 = *v58++;
                              v62 = v61;
                              v63 = *v60++;
                              v59 = v59 + v62 * v63;
                              --v57;
                            }
                            while (v57);
                          }
                          sub_18D1AFFC0(":", (uint64_t)&v110, 1, (uint64_t)v154);
                          v66 = DWORD2(v139);
                          if (SDWORD2(v139) < 1)
                          {
                            v68 = 0.0;
                          }
                          else
                          {
                            v67 = v141;
                            v68 = 0.0;
                            v69 = (double *)v156;
                            do
                            {
                              v70 = *v67++;
                              v71 = v70;
                              v72 = *v69++;
                              v68 = v68 + v71 * v72;
                              --v66;
                            }
                            while (v66);
                          }
                          v96 = sqrt(v68 * v68 + v59 * v59);
                          if (fabs(v96) <= 0.000000015)
                          {
                            v75 = v162;
                            *v162 = v99;
                            v76 = HIDWORD(v160);
                            v75[HIDWORD(v160) + 1] = v99;
                            v75[2 * v76 + 2] = v98;
                          }
                          else
                          {
                            v73 = *(double *)(*(_QWORD *)(a1 + 14648) + 192);
                            v127 = 0x200000002;
                            v125 = &unk_1E25C75B0;
                            v128 = (double *)v129;
                            v126 = xmmword_18D319340;
                            sub_18D04BE88((uint64_t)&v125, 0.0);
                            v74 = v128;
                            *v128 = v100;
                            v74[SHIDWORD(v126) + 1] = v73 * (v11 * v73);
                            v122 = 0x200000002;
                            v120 = &unk_1E25C75B0;
                            v121 = xmmword_18D319340;
                            v123 = v124;
                            v124[0] = v59 / v96;
                            v124[1] = v68 / v96;
                            v124[2] = -(v68 / v96);
                            v124[3] = v59 / v96;
                            v155 = 0x200000001;
                            *(_QWORD *)v154 = &unk_1E25C6BF0;
                            v156 = &v157;
                            *(_OWORD *)&v154[8] = xmmword_18D319920;
                            v157 = 0x100000000;
                            sub_18D1B82C8((uint64_t)v154, (uint64_t)v137);
                            sub_18D1D783C((uint64_t)v135, (uint64_t)&v120, (uint64_t)&v125);
                            sub_18D1B9DB8((uint64_t)&v130, (uint64_t)&v120);
                            sub_18D1D783C((uint64_t)v136, (uint64_t)v135, (uint64_t)&v130);
                            sub_18D1CDF50((uint64_t)v154, (uint64_t)&v159, (uint64_t)v137, (uint64_t)v137);
                            sub_18D1CDB38((uint64_t)v154, (uint64_t)v136);
                            v162[2 * SHIDWORD(v160) + 2] = v98;
                          }
                          sub_18D166008((uint64_t)&v110, (uint64_t)&v159, (uint64_t)&v125);
                          sub_18D16606C((uint64_t)&v110, (uint64_t)&v120);
                          sub_18D166008((uint64_t)&v125, (uint64_t)&v120, (uint64_t)v154);
                          sub_18D053AA8((uint64_t)&v164, (uint64_t)v154);
                        }
                        v155 = 0x300000001;
                        *(_QWORD *)v154 = &unk_1E25C6C50;
                        v156 = &v157;
                        *(_OWORD *)&v154[8] = xmmword_18D314670;
                        v157 = 0x100000000;
                        v158 = 2;
                        sub_18D16169C((uint64_t)v154, (uint64_t)&v110);
                        v155 = 0x300000001;
                        *(_QWORD *)v154 = &unk_1E25C6C50;
                        v156 = &v157;
                        *(_OWORD *)&v154[8] = xmmword_18D314670;
                        v157 = 0x400000003;
                        v158 = 5;
                        sub_18D16169C((uint64_t)v154, (uint64_t)&v125);
                        v77.f64[0] = v4 * v4 * v97 * 0.333333333;
                        v161 = 0x300000003;
                        v159 = &unk_1E25C78E0;
                        v160 = xmmword_18D30BB60;
                        v162 = (float64_t *)v163;
                        sub_18D1C94E0((uint64_t)&v164, (uint64_t)&v159, v77);
                        sub_18D04F764((uint64_t)v154, (uint64_t)&v144, (uint64_t)&v110, (uint64_t)&v110);
                        sub_18D16171C((uint64_t)v154, (uint64_t)&v159);
                        v161 = 0x300000003;
                        v159 = &unk_1E25C78E0;
                        *(_QWORD *)&v78.f64[1] = 0x300000009;
                        v160 = xmmword_18D30BB60;
                        v162 = (float64_t *)v163;
                        v78.f64[0] = v4 * v4 * 0.5;
                        sub_18D1C94E0((uint64_t)&v164, (uint64_t)&v159, v78);
                        sub_18D04F764((uint64_t)v154, (uint64_t)&v144, (uint64_t)&v110, (uint64_t)&v125);
                        sub_18D16171C((uint64_t)v154, (uint64_t)&v159);
                        v161 = 0x300000003;
                        v159 = &unk_1E25C78E0;
                        *(_QWORD *)&v79.f64[1] = 0x300000009;
                        v160 = xmmword_18D30BB60;
                        v162 = (float64_t *)v163;
                        v79.f64[0] = v4 * v4 * 0.5;
                        sub_18D1C94E0((uint64_t)&v164, (uint64_t)&v159, v79);
                        sub_18D04F764((uint64_t)v154, (uint64_t)&v144, (uint64_t)&v125, (uint64_t)&v110);
                        sub_18D16171C((uint64_t)v154, (uint64_t)&v159);
                        v161 = 0x300000003;
                        v159 = &unk_1E25C78E0;
                        *(_QWORD *)&v80.f64[1] = 0x300000009;
                        v160 = xmmword_18D30BB60;
                        v162 = (float64_t *)v163;
                        v80.f64[0] = v97;
                        sub_18D1C94E0((uint64_t)&v164, (uint64_t)&v159, v80);
                        sub_18D04F764((uint64_t)v154, (uint64_t)&v144, (uint64_t)&v125, (uint64_t)&v125);
                        sub_18D16171C((uint64_t)v154, (uint64_t)&v159);
                      }
                      v155 = 0x200000001;
                      *(_QWORD *)v154 = &unk_1E25C6BF0;
                      v156 = &v157;
                      *(_OWORD *)&v154[8] = xmmword_18D319920;
                      v157 = 0x100000000FLL;
                      sub_18D1B82C8((uint64_t)v154, (uint64_t)&v120);
                      v81 = sqrt(v102 / v97) / v6;
                      v82 = v7 * (1.0 - v92) / sqrt(v103 * (v103 * (1.0 - v92 * v92)));
                      v83 = sqrt(v104 / v97) / v105;
                      v84 = v109 * (1.0 - v93) / sqrt(v106 * (v106 * (1.0 - v93 * v93)));
                      v155 = 0x600000001;
                      *(_QWORD *)v154 = &unk_1E25C6D70;
                      v156 = &v157;
                      *(_OWORD *)&v154[8] = xmmword_18D319A00;
                      v85 = 10;
                      v86 = v9 * (1.0 - v94) / sqrt(v107 * (v107 * (1.0 - v94 * v94)));
                      do
                      {
                        *(_DWORD *)&v154[4 * v85] = v85 + 7;
                        ++v85;
                      }
                      while (v85 != 16);
                      sub_18D1D1270((uint64_t)&v125, (uint64_t)v154);
                      sub_18D1D78A8((uint64_t)v154);
                      v87 = sub_18D053AA8(a3, (uint64_t)v154);
                      v88 = v157;
                      *(_QWORD *)v154 = &unk_1E25C6F80;
                      v157 = 0;
                      if (v88)
                        MEMORY[0x18D78B5BC](v88, 0x1000C8000313F17, v87);
                      v89 = *(double **)(a3 + 32);
                      *v89 = v81;
                      v90 = *(_DWORD *)(a3 + 20);
                      v89[v90 + 1] = v81;
                      v89[2 * v90 + 2] = v81;
                      v89[3 * v90 + 3] = v82;
                      v89[4 * v90 + 4] = v82;
                      v89[5 * v90 + 5] = v82;
                      v89[6 * v90 + 6] = v83;
                      v89[7 * v90 + 7] = v83;
                      v89[8 * v90 + 8] = v83;
                      v89[9 * v90 + 9] = v84;
                      v89[10 * v90 + 10] = v84;
                      v89[11 * v90 + 11] = v84;
                      v89[12 * v90 + 12] = v86;
                      v89[13 * v90 + 13] = v86;
                      v89[14 * v90 + 14] = v86;
                      sub_18D1B9F00((uint64_t)&v110, (uint64_t)&v149);
                      sub_18D1B9E24((uint64_t)&v110, (uint64_t)&v159);
                      sub_18D1B9DB8((uint64_t)&v164, (uint64_t)&v159);
                      sub_18D1B9CF0((uint64_t)&v115, (uint64_t)&v164);
                      sub_18D1CDF50((uint64_t)v154, a3, (uint64_t)&v120, (uint64_t)&v120);
                      sub_18D1CDB38((uint64_t)v154, (uint64_t)&v115);
                      sub_18D1D7A80((uint64_t)&v110, (uint64_t)&v144);
                      sub_18D1D799C((uint64_t)&v159, (uint64_t)&v110);
                      sub_18D1CD9AC((uint64_t)&v159, (uint64_t)&v164);
                      sub_18D1D78D4((uint64_t)&v115, (uint64_t)&v164);
                      sub_18D1CDD14((uint64_t)v154, a3, (uint64_t)&v125, (uint64_t)&v125);
                      sub_18D1CDA28((uint64_t)v154, (uint64_t)&v115);
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_18D1BB3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  char *v15;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  int v36;
  int v37;
  double *v38;
  int v39;
  int v40;
  int v41;
  char v42;
  int64x2_t v43;
  _BYTE v44[184];
  _BYTE v45[184];
  _BYTE v46[184];
  _BYTE v47[2776];
  _BYTE v48[2632];
  uint64_t (**v49)();
  __int128 v50;
  uint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t (**v54)();
  __int128 v55;
  uint64_t v56;
  double *v57;
  _BYTE v58[2736];
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  uint64_t v135;
  void *v136;
  __int128 v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  void *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  void *v146;
  __int128 v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  void *v151;
  __int128 v152;
  uint64_t v153;
  double *v154;
  uint64_t v155;
  __int128 v156;
  double *v157[24];
  __int128 v158;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = *(_DWORD *)(v2 + 8);
  v11 = *(_DWORD *)(v2 + 12);
  if (v10 <= v11)
    v12 = *(_DWORD *)(v2 + 12);
  else
    v12 = *(_DWORD *)(v2 + 8);
  if (v10)
    v13 = v11 == 0;
  else
    v13 = 1;
  v14 = !v13 && v12 == 18;
  if (!v14
    || ((v17 = v3, v19 = *(_DWORD *)(v3 + 8), v18 = *(_DWORD *)(v3 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(v3 + 12))
      : (v20 = *(_DWORD *)(v3 + 8)),
        !v19 || !v18 || v20 != 15))
  {
    LOWORD(v146) = 12;
    LOBYTE(v54) = 4;
    v15 = "f_SixDOFError called with inadequate matrices";
LABEL_12:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v146, (unsigned __int8 *)&v54, v15, v5, v6, v7, v8, v9, v42);
    return 0xFFFFFFFFLL;
  }
  v21 = v4;
  v22 = *v4;
  if (!*v4)
  {
    LOWORD(v146) = 12;
    LOBYTE(v54) = 4;
    v15 = "f_SixDOFError called with invalid numerical integrator";
    goto LABEL_12;
  }
  v23 = v7;
  v24 = v6;
  v25 = v5;
  v26 = v2;
  v27 = v4[2];
  v158 = *(_OWORD *)v4[1];
  v28 = sub_18D1C2FEC((uint64_t)v157, v27);
  if ((*(unsigned int (**)(uint64_t, __int128 *, double **, double))(*(_QWORD *)v22 + 56))(v22, &v158, v157, v28))
  {
    return 0xFFFFFFFFLL;
  }
  v156 = *((_OWORD *)v21 + 2);
  v153 = 0x100000013;
  v151 = &unk_1E25C66B0;
  v152 = xmmword_18D319860;
  v154 = (double *)&v155;
  v148 = 0x1300000013;
  v146 = &unk_1E25C6680;
  v147 = xmmword_18D319870;
  v149 = &v150;
  v143 = 0xF00000013;
  v141 = &unk_1E25C6620;
  v142 = xmmword_18D319880;
  v144 = &v145;
  if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, void **, void **, void **))(*(_QWORD *)v22 + 88))(v22, &v156, v21[3], &v151, &v146, &v141))
  {
    return 0xFFFFFFFFLL;
  }
  v29 = v154;
  v30 = v154[6];
  v31 = v154[7];
  v32 = v154[8];
  v33 = v154[9];
  v34 = sqrt(v31 * v31 + v30 * v30 + v32 * v32 + v33 * v33);
  if (fabs(v34) <= 0.000000015)
    return 0xFFFFFFFFLL;
  v154[6] = v30 / v34;
  v29[7] = v31 / v34;
  v29[8] = v32 / v34;
  v29[9] = v33 / v34;
  v138 = 0x100000013;
  v136 = &unk_1E25C66B0;
  v137 = xmmword_18D319860;
  v43 = vdupq_n_s64(0x7FF8000000000000uLL);
  v139 = &v140;
  v100 = v43;
  v101 = v43;
  v102 = v43;
  v103 = v43;
  v104 = v43;
  v105 = v43;
  v106 = v43;
  v107 = v43;
  v108 = v43;
  v109 = v43;
  v110 = v43;
  v111 = v43;
  v112 = v43;
  v113 = v43;
  v114 = v43;
  v115 = v43;
  v116 = v43;
  v117 = v43;
  v118 = v43;
  v119 = v43;
  v120 = v43;
  v121 = v43;
  v122 = v43;
  v123 = v43;
  v124 = v43;
  v125 = v43;
  v126 = v43;
  v127 = v43;
  v128 = v43;
  v129 = v43;
  v130 = v43;
  v131 = v43;
  v132 = v43;
  v133 = v43;
  v134 = v43;
  v135 = 0x7FF8000000000000;
  sub_18D1C75E8(v157[4], *(double **)(v26 + 32), (uint64_t)&v136, (uint64_t)&v100);
  v97 = 0x100000013;
  v95 = &unk_1E25C66B0;
  v96 = xmmword_18D319860;
  v98 = &v99;
  v59 = v43;
  v60 = v43;
  v61 = v43;
  v62 = v43;
  v63 = v43;
  v64 = v43;
  v65 = v43;
  v66 = v43;
  v67 = v43;
  v68 = v43;
  v69 = v43;
  v70 = v43;
  v71 = v43;
  v72 = v43;
  v73 = v43;
  v74 = v43;
  v75 = v43;
  v76 = v43;
  v77 = v43;
  v78 = v43;
  v79 = v43;
  v80 = v43;
  v81 = v43;
  v82 = v43;
  v83 = v43;
  v84 = v43;
  v85 = v43;
  v86 = v43;
  v87 = v43;
  v88 = v43;
  v89 = v43;
  v90 = v43;
  v91 = v43;
  v92 = v43;
  v93 = v43;
  v94 = 0x7FF8000000000000;
  v56 = 0x100000012;
  v54 = &off_1E25C65F0;
  v57 = (double *)v58;
  v55 = xmmword_18D319A50;
  sub_18D04BE88((uint64_t)&v54, 0.0);
  sub_18D1C75E8(v154, v57, (uint64_t)&v95, (uint64_t)&v59);
  v56 = 0x1200000013;
  v54 = &off_1E25C6650;
  v57 = (double *)v58;
  v55 = xmmword_18D319A60;
  sub_18D04BE88((uint64_t)&v54, 0.0);
  v35 = v57;
  *v57 = *(double *)v100.i64;
  v36 = HIDWORD(v55);
  v35[HIDWORD(v55) + 1] = *(double *)&v100.i64[1];
  v35[2 * v36 + 2] = *(double *)v101.i64;
  v35[3 * v36 + 3] = *(double *)&v101.i64[1];
  v35[4 * v36 + 4] = *(double *)v102.i64;
  v35[5 * v36 + 5] = *(double *)&v102.i64[1];
  v35[6 * v36 + 6] = *(double *)v103.i64;
  v37 = 7 * v36;
  v35[v37 + 6] = *(double *)&v103.i64[1];
  v35[(8 * v36) | 6] = *(double *)v104.i64;
  v35[6 * v36 + 7] = *(double *)&v104.i64[1];
  v35[v37 + 7] = *(double *)v105.i64;
  v35[(8 * v36) | 7] = *(double *)&v105.i64[1];
  v35[6 * v36 + 8] = *(double *)v106.i64;
  v35[v37 + 8] = *(double *)&v106.i64[1];
  v35[8 * v36 + 8] = *(double *)v107.i64;
  v35[6 * v36 + 9] = *(double *)&v107.i64[1];
  v35[v37 + 9] = *(double *)v108.i64;
  v35[8 * v36 + 9] = *(double *)&v108.i64[1];
  v35[9 * v36 + 10] = *(double *)v109.i64;
  v35[10 * v36 + 11] = *(double *)&v109.i64[1];
  v35[11 * v36 + 12] = *(double *)v110.i64;
  v35[12 * v36 + 13] = *(double *)&v110.i64[1];
  v35[13 * v36 + 14] = *(double *)v111.i64;
  v35[14 * v36 + 15] = *(double *)&v111.i64[1];
  v35[15 * v36 + 16] = *(double *)v112.i64;
  v35[16 * v36 + 17] = *(double *)&v112.i64[1];
  v35[17 * v36 + 18] = *(double *)v113.i64;
  v51 = 0x1300000012;
  v49 = &off_1E25C65C0;
  v52 = (double *)&v53;
  v50 = xmmword_18D319A70;
  sub_18D04BE88((uint64_t)&v49, 0.0);
  v38 = v52;
  *v52 = 1.0 / *(double *)v59.i64;
  v39 = HIDWORD(v50);
  v38[HIDWORD(v50) + 1] = 1.0 / *(double *)&v59.i64[1];
  v38[2 * v39 + 2] = 1.0 / *(double *)v60.i64;
  v38[3 * v39 + 3] = 1.0 / *(double *)&v60.i64[1];
  v38[4 * v39 + 4] = 1.0 / *(double *)v61.i64;
  v38[5 * v39 + 5] = 1.0 / *(double *)&v61.i64[1];
  v38[6 * v39 + 6] = *(double *)v62.i64;
  v40 = 7 * v39;
  v38[v40 + 6] = *(double *)&v63.i64[1];
  v38[(8 * v39) | 6] = *(double *)v65.i64;
  v41 = 9 * v39;
  v38[v41 + 6] = *(double *)&v66.i64[1];
  v38[6 * v39 + 7] = *(double *)&v62.i64[1];
  v38[v40 + 7] = *(double *)v64.i64;
  v38[(8 * v39) | 7] = *(double *)&v65.i64[1];
  v38[v41 + 7] = *(double *)v67.i64;
  v38[6 * v39 + 8] = *(double *)v63.i64;
  v38[v40 + 8] = *(double *)&v64.i64[1];
  v38[8 * v39 + 8] = *(double *)v66.i64;
  v38[v41 + 8] = *(double *)&v67.i64[1];
  v38[10 * v39 + 9] = 1.0 / *(double *)v68.i64;
  v38[11 * v39 + 10] = 1.0 / *(double *)&v68.i64[1];
  v38[12 * v39 + 11] = 1.0 / *(double *)v69.i64;
  v38[13 * v39 + 12] = 1.0 / *(double *)&v69.i64[1];
  v38[14 * v39 + 13] = 1.0 / *(double *)v70.i64;
  v38[15 * v39 + 14] = 1.0 / *(double *)&v70.i64[1];
  v38[(16 * v39) | 0xF] = 1.0 / *(double *)v71.i64;
  v38[17 * v39 + 16] = 1.0 / *(double *)&v71.i64[1];
  v38[18 * v39 + 17] = 1.0 / *(double *)v72.i64;
  sub_18D1D7EB8((uint64_t)v47, (uint64_t)&v49, (uint64_t)&v146);
  sub_18D1D7E50((uint64_t)v48, (uint64_t)v47, (uint64_t)&v54);
  sub_18D1D7F38((uint64_t)v47, (uint64_t)&v49, (uint64_t)&v141);
  sub_18D1D8010((uint64_t)v45, (uint64_t)v48, v26);
  sub_18D1D807C((uint64_t)v44, (uint64_t)v47, v17);
  sub_18D1D7FA4((uint64_t)v46, (uint64_t)v45, (uint64_t)v44);
  sub_18D053AA8(v25, (uint64_t)v46);
  sub_18D053AA8(v24, (uint64_t)v48);
  sub_18D053AA8(v23, (uint64_t)v47);
  return 0;
}

uint64_t sub_18D1BBCBC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _BYTE v42[208];
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 2;
  if (v12
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 2) : (v18 = 0),
        v18))
  {
    v24 = *a3;
    v40 = 0x200000002;
    v38 = &unk_1E25C75B0;
    v41 = v42;
    v39 = xmmword_18D319340;
    sub_18D04BE88((uint64_t)&v38, 0.0);
    v25 = HIDWORD(v39) + 1;
    v26 = v41;
    *v41 = 0x3FF0000000000000;
    v26[v25] = 0x3FF0000000000000;
    v27 = sub_18D1D6FC4((uint64_t)v43, (uint64_t)&v38);
    *(_QWORD *)(v45 + 8 * v44) = v24;
    v35 = 0x10000001ALL;
    v33 = &unk_1E25C70A0;
    v34 = xmmword_18D319790;
    v36 = &v37;
    sub_18D053B2C(v27, a1, (uint64_t)&v33);
    v40 = 0x10000001ALL;
    v38 = &unk_1E25C70A0;
    v39 = xmmword_18D319790;
    v41 = v42;
    sub_18D053FA4((uint64_t)&v33, a2, (uint64_t)&v38);
    sub_18D053AA8(a4, (uint64_t)&v38);
    sub_18D053AA8(a5, (uint64_t)v43);
    v40 = 0x200000002;
    v38 = &unk_1E25C75B0;
    v41 = v42;
    v39 = xmmword_18D319340;
    sub_18D04BE88((uint64_t)&v38, 0.0);
    v28 = HIDWORD(v39) + 1;
    v29 = v41;
    *v41 = 0x3FF0000000000000;
    v29[v28] = 0x3FF0000000000000;
    v30 = sub_18D053AA8(a6, (uint64_t)&v38);
    v31 = v46;
    v43[0] = &unk_1E25C7160;
    v46 = 0;
    if (v31)
      MEMORY[0x18D78B5BC](v31, 0x1000C8000313F17, v30);
    return 0;
  }
  else
  {
    LOWORD(v38) = 12;
    LOBYTE(v33) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, (unsigned __int8 *)&v33, "f_TwoStateOscillator called with inadequate matrices.", a4, a5, a6, a7, a8, v32);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D1BBEFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 104);
  *(_QWORD *)(v1 - 144) = &unk_1E25C7160;
  *(_QWORD *)(v1 - 104) = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1BBF3C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  __n128 v36;
  uint64_t v37;
  char v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE v48[288];
  _QWORD v49[2];
  int v50;
  uint64_t v51;
  uint64_t v52;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 6;
  if (v12
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 6) : (v18 = 0),
        v18))
  {
    v24 = *a3;
    v46 = 0x600000006;
    v44 = &unk_1E25C81B0;
    v47 = v48;
    v45 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v44, 0.0);
    v25 = 0;
    v26 = HIDWORD(v45) + 1;
    v27 = 6;
    v28 = v47;
    do
    {
      *(_QWORD *)&v28[8 * v25] = 0x3FF0000000000000;
      v25 += v26;
      --v27;
    }
    while (v27);
    v29 = sub_18D1D6FC4((uint64_t)v49, (uint64_t)&v44);
    v30 = v50;
    v31 = v51;
    *(_QWORD *)(v51 + 24 * v50) = v24;
    *(_QWORD *)(v31 + 8 * ((4 * v30) | 1)) = v24;
    *(_QWORD *)(v31 + 8 * (5 * v30 + 2)) = v24;
    v41 = 0x10000001ALL;
    v39 = &unk_1E25C70A0;
    v40 = xmmword_18D319790;
    v42 = &v43;
    sub_18D053B2C(v29, a1, (uint64_t)&v39);
    v46 = 0x10000001ALL;
    v44 = &unk_1E25C70A0;
    v45 = xmmword_18D319790;
    v47 = v48;
    sub_18D053FA4((uint64_t)&v39, a2, (uint64_t)&v44);
    sub_18D053AA8(a4, (uint64_t)&v44);
    sub_18D053AA8(a5, (uint64_t)v49);
    v46 = 0x600000006;
    v44 = &unk_1E25C81B0;
    v47 = v48;
    v45 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v44, 0.0);
    v32 = 0;
    v33 = HIDWORD(v45) + 1;
    v34 = 6;
    v35 = v47;
    do
    {
      *(_QWORD *)&v35[8 * v32] = 0x3FF0000000000000;
      v32 += v33;
      --v34;
    }
    while (v34);
    v36 = sub_18D053AA8(a6, (uint64_t)&v44);
    v37 = v52;
    v49[0] = &unk_1E25C7160;
    v52 = 0;
    if (v37)
      MEMORY[0x18D78B5BC](v37, 0x1000C8000313F17, v36);
    return 0;
  }
  else
  {
    LOWORD(v44) = 12;
    LOBYTE(v39) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, (unsigned __int8 *)&v39, "f_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v38);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D1BC1C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 104);
  *(_QWORD *)(v1 - 144) = &unk_1E25C7160;
  *(_QWORD *)(v1 - 104) = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1BC200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  char v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE v31[215];
  unsigned __int8 v32;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 3;
  if (v12
    && ((v13 = *(_DWORD *)(a2 + 8), v14 = *(_DWORD *)(a2 + 12), v13 <= v14)
      ? (v15 = *(_DWORD *)(a2 + 12))
      : (v15 = *(_DWORD *)(a2 + 8)),
        v13 ? (v16 = v14 == 0) : (v16 = 1),
        !v16 ? (v17 = v15 == 3) : (v17 = 0),
        v17))
  {
    v29 = 0x10000001ALL;
    v27 = &unk_1E25C70A0;
    v28 = xmmword_18D319790;
    v30 = v31;
    sub_18D053FA4(a1, a2, (uint64_t)&v27);
    sub_18D053AA8(a4, (uint64_t)&v27);
    v29 = 0x300000003;
    v27 = &unk_1E25C78E0;
    v30 = v31;
    v28 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v27, 0.0);
    v22 = HIDWORD(v28) + 1;
    v23 = v30;
    *v30 = 0x3FF0000000000000;
    v23[v22] = 0x3FF0000000000000;
    v23[2 * v22] = 0x3FF0000000000000;
    sub_18D053AA8(a5, (uint64_t)&v27);
    v29 = 0x300000003;
    v27 = &unk_1E25C78E0;
    v30 = v31;
    v28 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v27, 0.0);
    v24 = HIDWORD(v28) + 1;
    v25 = v30;
    *v30 = 0x3FF0000000000000;
    v25[v24] = 0x3FF0000000000000;
    v25[2 * v24] = 0x3FF0000000000000;
    sub_18D053AA8(a6, (uint64_t)&v27);
    return 0;
  }
  else
  {
    LOWORD(v27) = 12;
    v32 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v32, "f_ThreeStateNearlyConstant called with inadequate matrices.", a4, a5, a6, a7, a8, v26);
    return 0xFFFFFFFFLL;
  }
}

_QWORD *sub_18D1BC3A0(_QWORD *result)
{
  result[25] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1BC3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int8x16_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  int8x16_t v29;
  double v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  double v46;
  __n128 v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double *v53;
  int v54;
  int v55;
  double *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int64x2_t v64;
  uint64_t (**v65)();
  __int128 v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD v70[5];
  uint64_t v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  void *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  int8x16_t v82;
  __int128 v83;
  _BYTE v84[184];
  _BYTE v85[184];
  _BYTE v86[184];
  _BYTE v87[2776];
  _BYTE v88[2632];
  uint64_t (**v89)();
  __int128 v90;
  uint64_t v91;
  double *v92;
  uint64_t v93;
  uint64_t (**v94)();
  __int128 v95;
  uint64_t v96;
  double *v97;
  _BYTE v98[2736];
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  uint64_t v134;
  void *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  uint64_t v175;
  void *v176;
  __int128 v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  void *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t (**v186)();
  __int128 v187;
  uint64_t v188;
  _BYTE *v189;
  _BYTE v190[2888];
  void *v191;
  __int128 v192;
  uint64_t v193;
  double *v194;
  uint64_t v195;
  _QWORD v196[2];
  double *v197[24];
  __int128 v198;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = *(_DWORD *)(v2 + 8);
  v13 = *(_DWORD *)(v2 + 12);
  if (v12 <= v13)
    v14 = *(_DWORD *)(v2 + 12);
  else
    v14 = *(_DWORD *)(v2 + 8);
  if (v12)
    v15 = v13 == 0;
  else
    v15 = 1;
  v16 = !v15 && v14 == 18;
  if (!v16
    || ((v20 = *(_DWORD *)(v3 + 8), v19 = *(_DWORD *)(v3 + 12), v20 <= v19)
      ? (v21 = *(_DWORD *)(v3 + 12))
      : (v21 = *(_DWORD *)(v3 + 8)),
        !v20 || !v19 || v21 != 18))
  {
    LOWORD(v65) = 12;
    LOBYTE(v186) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, (unsigned __int8 *)&v186, "in_SixDOFError called with inadequate matrices.", v5, v6, v7, v8, v9, v61);
    return 0xFFFFFFFFLL;
  }
  v22 = v6;
  v23 = v5;
  v24 = v10;
  v25 = v2;
  v62 = v7;
  v26 = v4->i64[0];
  v27 = (__int128 *)v4->i64[1];
  v83 = *v27;
  v82 = v4[2];
  v28 = v4[1].i64[0];
  v63 = v4[1].i64[1];
  *(double *)v29.i64 = (double)CNTimeSpan::operator-((uint64_t)&v82, &v83, v82, v11);
  *(double *)v31.i64 = (v30 + *(double *)v29.i64) * v24;
  v65 = 0;
  *(_QWORD *)&v66 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v65, 0, v31, v29);
  v34 = CNTimeSpan::operator+((uint64_t)&v83, &v65, v32, v33);
  v36 = v35;
  v79 = 0x10000000FLL;
  v77 = &unk_1E25C62C0;
  v80 = &v81;
  v78 = xmmword_18D3198E0;
  sub_18D04BE88((uint64_t)&v77, 0.0);
  v74 = 0x10000001ALL;
  v72 = &unk_1E25C70A0;
  v73 = xmmword_18D319A50;
  v75 = &v76;
  sub_18D1D89EC((uint64_t)v70, 18, 18);
  v67 = 0xF0000001ALL;
  v65 = &off_1E25C7040;
  v66 = xmmword_18D319A80;
  v68 = &v69;
  v43 = *(_DWORD *)(v25 + 8);
  v42 = *(_DWORD *)(v25 + 12);
  if (v43 <= v42)
    v44 = *(_DWORD *)(v25 + 12);
  else
    v44 = *(_DWORD *)(v25 + 8);
  if (v43
    && v42
    && v44 == 18
    && (v78 <= DWORD1(v78) ? (v45 = DWORD1(v78)) : (v45 = v78), (_DWORD)v78 && DWORD1(v78) && v45 == 15))
  {
    if (v26)
    {
      v198 = *v27;
      v46 = sub_18D1C2FEC((uint64_t)v197, v28);
      if (!(*(unsigned int (**)(uint64_t, __int128 *, double **, double))(*(_QWORD *)v26 + 56))(v26, &v198, v197, v46))
      {
        v196[0] = v34;
        v196[1] = v36;
        v193 = 0x100000013;
        v191 = &unk_1E25C66B0;
        v192 = xmmword_18D319860;
        v194 = (double *)&v195;
        v188 = 0x1300000013;
        v186 = (uint64_t (**)())&unk_1E25C6680;
        v187 = xmmword_18D319870;
        v189 = v190;
        v183 = 0xF00000013;
        v181 = &unk_1E25C6620;
        v182 = xmmword_18D319880;
        v184 = &v185;
        if (!(*(unsigned int (**)(uint64_t, _QWORD *, uint64_t, void **, uint64_t (***)(), void **))(*(_QWORD *)v26 + 88))(v26, v196, v63, &v191, &v186, &v181))
        {
          v48 = v194;
          v49 = v194[6];
          v50 = v194[7];
          v47.n128_f64[0] = v194[8];
          v51 = v194[9];
          v52 = sqrt(v50 * v50 + v49 * v49 + v47.n128_f64[0] * v47.n128_f64[0] + v51 * v51);
          if (fabs(v52) > 0.000000015)
          {
            v194[6] = v49 / v52;
            v48[7] = v50 / v52;
            v48[8] = v47.n128_f64[0] / v52;
            v48[9] = v51 / v52;
            v178 = 0x100000013;
            v176 = &unk_1E25C66B0;
            v177 = xmmword_18D319860;
            v179 = &v180;
            v64 = vdupq_n_s64(0x7FF8000000000000uLL);
            v140 = v64;
            v141 = v64;
            v142 = v64;
            v143 = v64;
            v144 = v64;
            v145 = v64;
            v146 = v64;
            v147 = v64;
            v148 = v64;
            v149 = v64;
            v150 = v64;
            v151 = v64;
            v152 = v64;
            v153 = v64;
            v154 = v64;
            v155 = v64;
            v156 = v64;
            v157 = v64;
            v158 = v64;
            v159 = v64;
            v160 = v64;
            v161 = v64;
            v162 = v64;
            v163 = v64;
            v164 = v64;
            v165 = v64;
            v166 = v64;
            v167 = v64;
            v168 = v64;
            v169 = v64;
            v170 = v64;
            v171 = v64;
            v172 = v64;
            v173 = v64;
            v174 = v64;
            v175 = 0x7FF8000000000000;
            sub_18D1C75E8(v197[4], *(double **)(v25 + 32), (uint64_t)&v176, (uint64_t)&v140);
            v137 = 0x100000013;
            v135 = &unk_1E25C66B0;
            v136 = xmmword_18D319860;
            v138 = &v139;
            v99 = v64;
            v100 = v64;
            v101 = v64;
            v102 = v64;
            v103 = v64;
            v104 = v64;
            v105 = v64;
            v106 = v64;
            v107 = v64;
            v108 = v64;
            v109 = v64;
            v110 = v64;
            v111 = v64;
            v112 = v64;
            v113 = v64;
            v114 = v64;
            v115 = v64;
            v116 = v64;
            v117 = v64;
            v118 = v64;
            v119 = v64;
            v120 = v64;
            v121 = v64;
            v122 = v64;
            v123 = v64;
            v124 = v64;
            v125 = v64;
            v126 = v64;
            v127 = v64;
            v128 = v64;
            v129 = v64;
            v130 = v64;
            v131 = v64;
            v132 = v64;
            v133 = v64;
            v134 = 0x7FF8000000000000;
            v96 = 0x100000012;
            v94 = &off_1E25C65F0;
            v97 = (double *)v98;
            v95 = xmmword_18D319A50;
            sub_18D04BE88((uint64_t)&v94, 0.0);
            sub_18D1C75E8(v194, v97, (uint64_t)&v135, (uint64_t)&v99);
            v96 = 0x1200000013;
            v94 = &off_1E25C6650;
            v97 = (double *)v98;
            v95 = xmmword_18D319A60;
            sub_18D04BE88((uint64_t)&v94, 0.0);
            v53 = v97;
            *v97 = *(double *)v140.i64;
            v54 = HIDWORD(v95);
            v53[HIDWORD(v95) + 1] = *(double *)&v140.i64[1];
            v53[2 * v54 + 2] = *(double *)v141.i64;
            v53[3 * v54 + 3] = *(double *)&v141.i64[1];
            v53[4 * v54 + 4] = *(double *)v142.i64;
            v53[5 * v54 + 5] = *(double *)&v142.i64[1];
            v53[6 * v54 + 6] = *(double *)v143.i64;
            v55 = 7 * v54;
            v53[v55 + 6] = *(double *)&v143.i64[1];
            v53[(8 * v54) | 6] = *(double *)v144.i64;
            v53[6 * v54 + 7] = *(double *)&v144.i64[1];
            v53[v55 + 7] = *(double *)v145.i64;
            v53[(8 * v54) | 7] = *(double *)&v145.i64[1];
            v53[6 * v54 + 8] = *(double *)v146.i64;
            v53[v55 + 8] = *(double *)&v146.i64[1];
            v53[8 * v54 + 8] = *(double *)v147.i64;
            v53[6 * v54 + 9] = *(double *)&v147.i64[1];
            v53[v55 + 9] = *(double *)v148.i64;
            v53[8 * v54 + 9] = *(double *)&v148.i64[1];
            v53[9 * v54 + 10] = *(double *)v149.i64;
            v53[10 * v54 + 11] = *(double *)&v149.i64[1];
            v53[11 * v54 + 12] = *(double *)v150.i64;
            v53[12 * v54 + 13] = *(double *)&v150.i64[1];
            v53[13 * v54 + 14] = *(double *)v151.i64;
            v53[14 * v54 + 15] = *(double *)&v151.i64[1];
            v53[15 * v54 + 16] = *(double *)v152.i64;
            v53[16 * v54 + 17] = *(double *)&v152.i64[1];
            v53[17 * v54 + 18] = *(double *)v153.i64;
            v91 = 0x1300000012;
            v89 = &off_1E25C65C0;
            v92 = (double *)&v93;
            v90 = xmmword_18D319A70;
            sub_18D04BE88((uint64_t)&v89, 0.0);
            v56 = v92;
            *v92 = 1.0 / *(double *)v99.i64;
            v57 = HIDWORD(v90);
            v56[HIDWORD(v90) + 1] = 1.0 / *(double *)&v99.i64[1];
            v56[2 * v57 + 2] = 1.0 / *(double *)v100.i64;
            v56[3 * v57 + 3] = 1.0 / *(double *)&v100.i64[1];
            v56[4 * v57 + 4] = 1.0 / *(double *)v101.i64;
            v56[5 * v57 + 5] = 1.0 / *(double *)&v101.i64[1];
            v56[6 * v57 + 6] = *(double *)v102.i64;
            v58 = 7 * v57;
            v56[v58 + 6] = *(double *)&v103.i64[1];
            v56[(8 * v57) | 6] = *(double *)v105.i64;
            v59 = 9 * v57;
            v56[v59 + 6] = *(double *)&v106.i64[1];
            v56[6 * v57 + 7] = *(double *)&v102.i64[1];
            v56[v58 + 7] = *(double *)v104.i64;
            v56[(8 * v57) | 7] = *(double *)&v105.i64[1];
            v56[9 * v57 + 7] = *(double *)v107.i64;
            v56[6 * v57 + 8] = *(double *)v103.i64;
            v56[v58 + 8] = *(double *)&v104.i64[1];
            v56[8 * v57 + 8] = *(double *)v106.i64;
            v56[v59 + 8] = *(double *)&v107.i64[1];
            v56[10 * v57 + 9] = 1.0 / *(double *)v108.i64;
            v56[11 * v57 + 10] = 1.0 / *(double *)&v108.i64[1];
            v56[12 * v57 + 11] = 1.0 / *(double *)v109.i64;
            v56[13 * v57 + 12] = 1.0 / *(double *)&v109.i64[1];
            v56[14 * v57 + 13] = 1.0 / *(double *)v110.i64;
            v56[15 * v57 + 14] = 1.0 / *(double *)&v110.i64[1];
            v56[(16 * v57) | 0xF] = 1.0 / *(double *)v111.i64;
            v56[17 * v57 + 16] = 1.0 / *(double *)&v111.i64[1];
            v56[18 * v57 + 17] = 1.0 / *(double *)v112.i64;
            sub_18D1D7EB8((uint64_t)v87, (uint64_t)&v89, (uint64_t)&v186);
            sub_18D1D7E50((uint64_t)v88, (uint64_t)v87, (uint64_t)&v94);
            sub_18D1D7F38((uint64_t)v87, (uint64_t)&v89, (uint64_t)&v181);
            sub_18D1D8010((uint64_t)v85, (uint64_t)v88, v25);
            sub_18D1D8BA8((uint64_t)v84, (uint64_t)v87, (uint64_t)&v77);
            sub_18D1D7FA4((uint64_t)v86, (uint64_t)v85, (uint64_t)v84);
            sub_18D053AA8((uint64_t)&v72, (uint64_t)v86);
            sub_18D053AA8((uint64_t)v70, (uint64_t)v88);
            sub_18D053AA8((uint64_t)&v65, (uint64_t)v87);
            sub_18D053AA8(v23, (uint64_t)&v72);
            sub_18D053AA8(v22, (uint64_t)v70);
            v188 = 0x1200000012;
            v186 = &off_1E25C6590;
            v189 = v190;
            v187 = xmmword_18D319A90;
            sub_18D04BE88((uint64_t)&v186, 0.0);
            v47 = sub_18D053AA8(v62, (uint64_t)&v186);
            v17 = 0;
            goto LABEL_38;
          }
        }
      }
    }
    else
    {
      LOWORD(v186) = 12;
      LOBYTE(v94) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v186, (unsigned __int8 *)&v94, "f_SixDOFError called with invalid numerical integrator", v37, v38, v39, v40, v41, v61);
    }
  }
  else
  {
    LOWORD(v186) = 12;
    LOBYTE(v94) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v186, (unsigned __int8 *)&v94, "f_SixDOFError called with inadequate matrices", v37, v38, v39, v40, v41, v61);
  }
  v17 = 0xFFFFFFFFLL;
LABEL_38:
  v60 = v71;
  v70[0] = &unk_1E25C7160;
  v71 = 0;
  if (v60)
    MEMORY[0x18D78B5BC](v60, 0x1000C8000313F17, v47);
  return v17;
}

void sub_18D1BCF54(_Unwind_Exception *a1)
{
  unint64_t v2;

  v2 = STACK[0xCC0];
  STACK[0xC98] = (unint64_t)&unk_1E25C7160;
  STACK[0xCC0] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1BCFA8(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  char v45;
  uint64_t (**v46)();
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD v51[5];
  uint64_t v52;
  void *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  _BYTE v72[208];
  _QWORD v73[2];
  int v74;
  uint64_t v75;
  uint64_t v76;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 2;
  if (v13
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 2) : (v18 = 0),
        v18))
  {
    v26 = *a3;
    v60 = 0x100000002;
    v58 = &unk_1E25C7520;
    v61 = &v62;
    v59 = xmmword_18D319330;
    sub_18D04BE88((uint64_t)&v58, 0.0);
    v55 = 0x10000001ALL;
    v53 = &unk_1E25C70A0;
    v54 = xmmword_18D319330;
    v56 = &v57;
    sub_18D1D89EC((uint64_t)v51, 2, 2);
    v48 = 0x20000001ALL;
    v46 = &off_1E25C71C0;
    v47 = xmmword_18D319340;
    v49 = &v50;
    v33 = *(_DWORD *)(a1 + 8);
    v32 = *(_DWORD *)(a1 + 12);
    if (v33 <= v32)
      v34 = *(_DWORD *)(a1 + 12);
    else
      v34 = *(_DWORD *)(a1 + 8);
    if (v33
      && v32
      && v34 == 2
      && (v59 <= DWORD1(v59) ? (v35 = DWORD1(v59)) : (v35 = v59), (_DWORD)v59 && DWORD1(v59) && v35 == 2))
    {
      v70 = 0x200000002;
      v68 = &unk_1E25C75B0;
      v71 = v72;
      v69 = xmmword_18D319340;
      sub_18D04BE88((uint64_t)&v68, 0.0);
      v36 = HIDWORD(v69) + 1;
      v37 = v71;
      *v71 = 0x3FF0000000000000;
      v37[v36] = 0x3FF0000000000000;
      v38 = sub_18D1D6FC4((uint64_t)v73, (uint64_t)&v68);
      *(double *)(v75 + 8 * v74) = v26 * a9;
      v65 = 0x10000001ALL;
      v63 = &unk_1E25C70A0;
      v64 = xmmword_18D319790;
      v66 = &v67;
      sub_18D053B2C(v38, a1, (uint64_t)&v63);
      v70 = 0x10000001ALL;
      v68 = &unk_1E25C70A0;
      v69 = xmmword_18D319790;
      v71 = v72;
      sub_18D053FA4((uint64_t)&v63, (uint64_t)&v58, (uint64_t)&v68);
      sub_18D053AA8((uint64_t)&v53, (uint64_t)&v68);
      sub_18D053AA8((uint64_t)v51, (uint64_t)v73);
      v70 = 0x200000002;
      v68 = &unk_1E25C75B0;
      v71 = v72;
      v69 = xmmword_18D319340;
      sub_18D04BE88((uint64_t)&v68, 0.0);
      v39 = HIDWORD(v69) + 1;
      v40 = v71;
      *v71 = 0x3FF0000000000000;
      v40[v39] = 0x3FF0000000000000;
      v41 = sub_18D053AA8((uint64_t)&v46, (uint64_t)&v68);
      v42 = v76;
      v73[0] = &unk_1E25C7160;
      v76 = 0;
      if (v42)
        MEMORY[0x18D78B5BC](v42, 0x1000C8000313F17, v41);
      sub_18D053AA8(a4, (uint64_t)&v53);
      sub_18D053AA8(a5, (uint64_t)v51);
      v70 = 0x200000002;
      v68 = &unk_1E25C75B0;
      v71 = v72;
      v69 = xmmword_18D319340;
      sub_18D04BE88((uint64_t)&v68, 0.0);
      v43 = sub_18D053AA8(a6, (uint64_t)&v68);
      v19 = 0;
    }
    else
    {
      LOWORD(v68) = 12;
      LOBYTE(v63) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v63, "f_TwoStateOscillator called with inadequate matrices.", v27, v28, v29, v30, v31, v45);
      v19 = 0xFFFFFFFFLL;
    }
    v44 = v52;
    v51[0] = &unk_1E25C7160;
    v52 = 0;
    if (v44)
      MEMORY[0x18D78B5BC](v44, 0x1000C8000313F17, v43);
  }
  else
  {
    LOWORD(v46) = 12;
    LOBYTE(v68) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, (unsigned __int8 *)&v68, "in_TwoStateOscillator called with inadequate matrices.", a4, a5, a6, a7, a8, v45);
    return 0xFFFFFFFFLL;
  }
  return v19;
}

void sub_18D1BD380(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(v1 - 120);
  *(_QWORD *)(v1 - 160) = &unk_1E25C7160;
  *(_QWORD *)(v1 - 120) = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  v4 = STACK[0x218];
  STACK[0x218] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1BD3F8(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD v41[5];
  uint64_t v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 6;
  if (v13
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 6) : (v18 = 0),
        v18))
  {
    v25 = *a3 * a9;
    v50 = 0x100000006;
    v48 = &unk_1E25C8120;
    v51 = &v52;
    v49 = xmmword_18D319950;
    sub_18D04BE88((uint64_t)&v48, 0.0);
    v45 = 0x10000001ALL;
    v43 = &unk_1E25C70A0;
    v44 = xmmword_18D319950;
    v46 = &v47;
    sub_18D1D89EC((uint64_t)v41, 6, 6);
    v38 = 0x60000001ALL;
    v36 = &off_1E25C7250;
    v37 = xmmword_18D314680;
    v39 = &v40;
    if (sub_18D1D3C50(a1, (uint64_t)&v48, (uint64_t)&v43, (uint64_t)v41, (uint64_t)&v36, v26, v27, v28, v25))
    {
      v19 = 0xFFFFFFFFLL;
    }
    else
    {
      sub_18D053AA8(a4, (uint64_t)&v43);
      sub_18D053AA8(a5, (uint64_t)v41);
      v33 = 0x600000006;
      v31 = &unk_1E25C81B0;
      v34 = &v35;
      v32 = xmmword_18D314680;
      sub_18D04BE88((uint64_t)&v31, 0.0);
      sub_18D053AA8(a6, (uint64_t)&v31);
      v19 = 0;
    }
    v29 = v42;
    v41[0] = &unk_1E25C7160;
    v42 = 0;
    if (v29)
      MEMORY[0x18D78B5BC](v29, 0x1000C8000313F17);
  }
  else
  {
    LOWORD(v36) = 12;
    LOBYTE(v31) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, (unsigned __int8 *)&v31, "in_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v30);
    return 0xFFFFFFFFLL;
  }
  return v19;
}

void sub_18D1BD628(_Unwind_Exception *a1)
{
  unint64_t v2;

  v2 = STACK[0x688];
  STACK[0x660] = (unint64_t)&unk_1E25C7160;
  STACK[0x688] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1BD664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  __n128 v37;
  uint64_t v38;
  char v39;
  uint64_t (**v40)();
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD v45[5];
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  uint64_t v59;
  _QWORD *v60;
  _BYTE v61[215];
  unsigned __int8 v62;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 3;
  if (v12
    && ((v13 = *(_DWORD *)(a2 + 8), v14 = *(_DWORD *)(a2 + 12), v13 <= v14)
      ? (v15 = *(_DWORD *)(a2 + 12))
      : (v15 = *(_DWORD *)(a2 + 8)),
        v13 ? (v16 = v14 == 0) : (v16 = 1),
        !v16 ? (v17 = v15 == 3) : (v17 = 0),
        v17))
  {
    v54 = 0x100000003;
    v52 = &unk_1E25C7790;
    v55 = &v56;
    v53 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v52, 0.0);
    v49 = 0x10000001ALL;
    v47 = &unk_1E25C70A0;
    v48 = xmmword_18D313070;
    v50 = &v51;
    sub_18D1D89EC((uint64_t)v45, 3, 3);
    v42 = 0x30000001ALL;
    v40 = &off_1E25C71F0;
    v41 = xmmword_18D30BB60;
    v43 = &v44;
    v30 = *(_DWORD *)(a1 + 8);
    v29 = *(_DWORD *)(a1 + 12);
    if (v30 <= v29)
      v31 = *(_DWORD *)(a1 + 12);
    else
      v31 = *(_DWORD *)(a1 + 8);
    if (v30
      && v29
      && v31 == 3
      && (v53 <= DWORD1(v53) ? (v32 = DWORD1(v53)) : (v32 = v53), (_DWORD)v53 && DWORD1(v53) && v32 == 3))
    {
      v59 = 0x10000001ALL;
      v57 = &unk_1E25C70A0;
      v58 = xmmword_18D319790;
      v60 = v61;
      sub_18D053FA4(a1, (uint64_t)&v52, (uint64_t)&v57);
      sub_18D053AA8((uint64_t)&v47, (uint64_t)&v57);
      v59 = 0x300000003;
      v57 = &unk_1E25C78E0;
      v60 = v61;
      v58 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v57, 0.0);
      v33 = HIDWORD(v58) + 1;
      v34 = v60;
      *v60 = 0x3FF0000000000000;
      v34[v33] = 0x3FF0000000000000;
      v34[2 * v33] = 0x3FF0000000000000;
      sub_18D053AA8((uint64_t)v45, (uint64_t)&v57);
      v59 = 0x300000003;
      v57 = &unk_1E25C78E0;
      v60 = v61;
      v58 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v57, 0.0);
      v35 = HIDWORD(v58) + 1;
      v36 = v60;
      *v60 = 0x3FF0000000000000;
      v36[v35] = 0x3FF0000000000000;
      v36[2 * v35] = 0x3FF0000000000000;
      sub_18D053AA8((uint64_t)&v40, (uint64_t)&v57);
      sub_18D053AA8(a4, (uint64_t)&v47);
      sub_18D053AA8(a5, (uint64_t)v45);
      v59 = 0x300000003;
      v57 = &unk_1E25C78E0;
      v60 = v61;
      v58 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v57, 0.0);
      v37 = sub_18D053AA8(a6, (uint64_t)&v57);
      v18 = 0;
    }
    else
    {
      LOWORD(v57) = 12;
      v62 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v57, &v62, "f_ThreeStateNearlyConstant called with inadequate matrices.", v24, v25, v26, v27, v28, 3);
      v18 = 0xFFFFFFFFLL;
    }
    v38 = v46;
    v45[0] = &unk_1E25C7160;
    v46 = 0;
    if (v38)
      MEMORY[0x18D78B5BC](v38, 0x1000C8000313F17, v37);
  }
  else
  {
    LOWORD(v40) = 12;
    LOBYTE(v57) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, (unsigned __int8 *)&v57, "in_ThreeStateNearlyConstant called with inadequate matrices.", a4, a5, a6, a7, a8, v39);
    return 0xFFFFFFFFLL;
  }
  return v18;
}

void sub_18D1BD9A8(_Unwind_Exception *a1)
{
  unint64_t v2;

  v2 = STACK[0x2D0];
  STACK[0x2A8] = (unint64_t)&unk_1E25C7160;
  STACK[0x2D0] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

double sub_18D1BD9E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_18D1C99C8(a2);
  if (*(_DWORD *)(a1 + 1108))
    v4 = a1 + 800;
  else
    v4 = a1 + 256;
  *(_QWORD *)&result = sub_18D053AA8(v3, v4).n128_u64[0];
  return result;
}

uint64_t sub_18D1BDA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  void *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[5];
  uint64_t v75;
  void *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  int32x4_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t (**v89)();
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  void *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _QWORD v102[5];
  uint64_t v103;
  void *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;

  v106 = 0x10000001ALL;
  v104 = &unk_1E25C70A0;
  v105 = xmmword_18D319790;
  v107 = &v108;
  sub_18D1C99C8((uint64_t)v102);
  v99 = 0x10000001ALL;
  v97 = &unk_1E25C70A0;
  v98 = xmmword_18D319790;
  v100 = &v101;
  if (*(_DWORD *)(a1 + 1108))
  {
    sub_18D053AA8((uint64_t)&v104, a1 + 552);
    sub_18D053AA8((uint64_t)v102, a1 + 800);
    v21 = a1 + 848;
  }
  else
  {
    sub_18D053AA8((uint64_t)&v104, a1 + 8);
    sub_18D053AA8((uint64_t)v102, a1 + 256);
    v21 = a1 + 304;
  }
  sub_18D053AA8((uint64_t)&v97, v21);
  if (v105 <= DWORD1(v105))
    v22 = DWORD1(v105);
  else
    v22 = v105;
  if (DWORD1(v105))
    v23 = (_DWORD)v105 == 0;
  else
    v23 = 1;
  if (v23)
    v24 = 0;
  else
    v24 = v22;
  v25 = *(_DWORD *)(a2 + 8);
  if ((v25 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v64 = v24;
  v65 = a8;
  v94 = 0x100000017;
  v89 = &off_1E25C6F20;
  v95 = &v96;
  v90 = v25;
  v91 = 1;
  v92 = v25;
  v63 = v25;
  v93 = v25;
  sub_18D04BE88((uint64_t)&v89, 0.0);
  v26 = *(_DWORD *)(a9 + 8);
  v27 = *(_DWORD *)(a9 + 12);
  if (v26 <= v27)
    v28 = *(_DWORD *)(a9 + 12);
  else
    v28 = *(_DWORD *)(a9 + 8);
  if (v27)
    v29 = v26 == 0;
  else
    v29 = 1;
  if (v29)
    v30 = 0;
  else
    v30 = v28;
  v86 = 0x100000057;
  v87 = 0;
  v85 = 0uLL;
  v84 = &unk_1E25C83F0;
  if ((v30 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v60 = a6;
  v61 = a3;
  v62 = a2;
  v31 = vdupq_lane_s32((int32x2_t)(v30 | 0x100000000), 0);
  v31.i32[1] = 1;
  v85 = v31;
  v87 = &v88;
  if (v30)
  {
    v32 = 0;
    v33 = 0;
    do
    {
      sub_18D04DA0C((uint64_t)&v76, *(_QWORD *)(a4 + 32) + v33);
      if (v77 <= v78)
        v34 = v78;
      else
        v34 = v77;
      if (v78)
        v35 = v77 == 0;
      else
        v35 = 1;
      if (v35)
        v36 = 0;
      else
        v36 = v34;
      *(_DWORD *)((char *)v87 + v32) = v36;
      v33 += 64;
      v32 += 4;
    }
    while ((unint64_t)v30 << 6 != v33);
  }
  v81 = 0x100000057;
  v76 = &unk_1E25C83F0;
  v77 = v30;
  v78 = 1;
  v79 = v30;
  v80 = v30;
  v82 = &v83;
  sub_18D1DF480((uint64_t)v74, v30, 1);
  if ((int)v30 >= 1)
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    do
    {
      sub_18D159B20((uint64_t)&v66, *(_QWORD *)(a5 + 32) + v39);
      v40 = v82;
      *(_DWORD *)((char *)v82 + v37) = v67;
      v41 = *(_DWORD *)((char *)v40 + v37);
      if (v41 < 0)
        __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
      v71 = 0x100000003;
      v66 = &unk_1E25C7790;
      v72 = &v73;
      v67 = v41;
      v68 = 1;
      v69 = v41;
      v70 = v41;
      sub_18D04BE88((uint64_t)&v66, 0.0);
      sub_18D053AA8(v74[4] + v38, (uint64_t)&v66);
      v39 += 112;
      v38 += 64;
      v37 += 4;
    }
    while (112 * v30 != v39);
  }
  v42 = *(_DWORD *)(a7 + 8);
  v43 = *(_DWORD *)(a7 + 12);
  if (v42 <= v43)
    v44 = *(_DWORD *)(a7 + 12);
  else
    v44 = *(_DWORD *)(a7 + 8);
  if (v43)
    v45 = v42 == 0;
  else
    v45 = 1;
  if (v45)
    v46 = 0;
  else
    v46 = v44;
  v47 = *(_DWORD *)(a12 + 8);
  v48 = *(_DWORD *)(a12 + 12);
  if (v47 <= v48)
    v49 = *(_DWORD *)(a12 + 12);
  else
    v49 = *(_DWORD *)(a12 + 8);
  if (v48)
    v50 = v47 == 0;
  else
    v50 = 1;
  if (v50)
    v51 = 0;
  else
    v51 = v49;
  v52 = sub_18D1D8D48(a1, v64, (uint64_t)&v104, (uint64_t)v102, (uint64_t)&v97, v63, (uint64_t)&v89, v62, (uint64_t)&v84, v61, a4, (uint64_t)&v76, (uint64_t)v74, a5, v46, v60, a7, v65, v30,
          a9,
          a10,
          v51,
          a11,
          a12,
          a13,
          a1 + 1640);
  v53 = v75;
  v74[0] = &unk_1E25C82A0;
  v75 = 0;
  if (v53)
  {
    v54 = v53 - 16;
    v55 = *(_QWORD *)(v53 - 8);
    if (v55)
    {
      v56 = v55 << 6;
      v57 = v53 - 64;
      do
      {
        *(_QWORD *)(v57 + v56) = &unk_1E25C5E70;
        v56 -= 64;
      }
      while (v56);
    }
    MEMORY[0x18D78B5BC](v54, 0x1081C8052DD7B27);
  }
  v58 = v103;
  v102[0] = &unk_1E25C7160;
  v103 = 0;
  if (v58)
    MEMORY[0x18D78B5BC](v58, 0x1000C8000313F17);
  return v52;
}

void sub_18D1BDEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  if (a57)
  {
    v58 = *(_QWORD *)(a57 - 8);
    if (v58)
    {
      v59 = v58 << 6;
      do
      {
        *(_QWORD *)(a57 - 64 + v59) = &unk_1E25C5E70;
        v59 -= 64;
      }
      while (v59);
    }
    MEMORY[0x18D78B5BC](a57 - 16, 0x1081C8052DD7B27);
  }
  v60 = STACK[0x698];
  STACK[0x670] = (unint64_t)&unk_1E25C7160;
  STACK[0x698] = 0;
  if (v60)
    MEMORY[0x18D78B5BC](v60, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1BDFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t (**v22)();
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if (!*(_DWORD *)(a1 + 1108))
  {
    sub_18D053AA8(a1 + 552, a1 + 8);
    sub_18D053AA8(a1 + 800, a1 + 256);
    sub_18D053AA8(a1 + 848, a1 + 304);
  }
  v10 = *(unsigned int *)(a2 + 8);
  if ((v10 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v11 = *(_DWORD *)(a1 + 560);
  v12 = *(_DWORD *)(a1 + 564);
  if (v11 <= v12)
    v13 = *(_DWORD *)(a1 + 564);
  else
    v13 = *(_DWORD *)(a1 + 560);
  if (v12)
    v14 = v11 == 0;
  else
    v14 = 1;
  if (v14)
    v15 = 0;
  else
    v15 = v13;
  v27 = 0x100000017;
  v22 = &off_1E25C6F20;
  v28 = &v29;
  v23 = v10;
  v24 = 1;
  v25 = v10;
  v26 = v10;
  sub_18D04BE88((uint64_t)&v22, 0.0);
  v16 = *(_DWORD *)(a4 + 8);
  v17 = *(_DWORD *)(a4 + 12);
  if (v16 <= v17)
    v18 = *(_DWORD *)(a4 + 12);
  else
    v18 = *(_DWORD *)(a4 + 8);
  if (v17)
    v19 = v16 == 0;
  else
    v19 = 1;
  if (v19)
    v20 = 0;
  else
    v20 = v18;
  return sub_18D1E41B8(a1, v15, a1 + 552, a1 + 800, a1 + 848, v10, (uint64_t)&v22, a2, v20, a3, a4, a5, *(_BYTE *)(a1 + 1729));
}

uint64_t sub_18D1BE108(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  int v6;
  unsigned int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 / a3 <= 1)
    v4 = 1;
  else
    v4 = a2 / a3;
  if (sub_18D1E7EB4(a1))
    return 0xFFFFFFFFLL;
  v6 = 1;
  do
  {
    v7 = v6;
    if (v4 == v6)
      break;
    v8 = sub_18D1E7EB4(a1);
    v6 = v7 + 1;
  }
  while (!v8);
  if (v7 >= v4)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

void sub_18D1BE17C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  __n128 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int32x4_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int32x4_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  if (*(_BYTE *)v2)
  {
    v4 = (__n128 *)v3;
    v5 = v2;
    if (*(_BYTE *)(v2 + 1))
      *(_BYTE *)(v2 + 1) = 0;
    if (*(_DWORD *)(v2 + 5936))
    {
      if (!sub_18D05B574(v3, (double *)(v2 + 8)))
      {
        v6 = *(unsigned int *)(v5 + 5936);
        v70 = 0x1000000AELL;
        v68 = &unk_1E25C6500;
        if ((v6 & 0x80000000) != 0)
          __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
        v7 = 0;
        v8 = vdupq_lane_s32((int32x2_t)(v6 | 0x100000000), 0);
        v8.i32[1] = 1;
        v69 = v8;
        v71 = &v72;
        if ((_DWORD)v6)
        {
          v9 = *(_QWORD **)(v5 + 48);
          if (v9 != (_QWORD *)(v5 + 40))
          {
            v10 = 0;
            v7 = 0;
            v11 = 1;
            do
            {
              if (sub_18D03F608((double *)(*(_QWORD *)(v5 + 96) + v10), v4->n128_f64))
              {
                *((_DWORD *)v71 + (int)v7) = v11 - 1;
                v9 = (_QWORD *)v9[1];
                ++v7;
              }
              else
              {
                v12 = (_QWORD *)*v9;
                v13 = (_QWORD *)v9[1];
                v12[1] = v13;
                *(_QWORD *)v9[1] = v12;
                --*(_QWORD *)(v5 + 56);
                sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v9 + 2);
                operator delete(v9);
                v9 = v13;
              }
              if (v11 >= v6)
                break;
              ++v11;
              v10 += 16;
            }
            while (v9 != (_QWORD *)(v5 + 40));
          }
        }
        v14 = vdupq_lane_s32((int32x2_t)(v7 | 0x100000000), 0);
        v14.i32[1] = 1;
        v69 = v14;
        if (v7 <= 1)
          v15 = 1;
        else
          v15 = v7;
        if (!v7)
          v15 = 0;
        *(_DWORD *)(v5 + 5936) = v15;
        sub_18D1E83CC((uint64_t)v57, v5 + 64, (uint64_t)&v68);
        sub_18D1E84D8(v5 + 64, (uint64_t)v57);
        sub_18D1E8568((uint64_t)v57, v5 + 2888, (uint64_t)&v68);
        sub_18D053D7C(v5 + 2888, (uint64_t)v57);
        sub_18D1E8650((uint64_t)v57, v5 + 3624, (uint64_t)&v68);
        sub_18D053AA8(v5 + 3624, (uint64_t)v57);
        sub_18D1E8750((uint64_t)v57, v5 + 5056, (uint64_t)&v68);
        sub_18D1E890C(v5 + 5056, (uint64_t)v57);
        v61 = &unk_1E25C5EA0;
        v16 = v60;
        *(_QWORD *)v57 = &unk_1E25C63E0;
        v60 = 0;
        if (v16)
        {
          v17 = v16 - 16;
          v18 = *(_QWORD *)(v16 - 8);
          if (v18)
          {
            v19 = v18 << 6;
            v20 = v16 - 64;
            do
            {
              *(_QWORD *)(v20 + v19) = &unk_1E25C5E70;
              v19 -= 64;
            }
            while (v19);
          }
          MEMORY[0x18D78B5BC](v17, 0x1081C8052DD7B27);
        }
        sub_18D1E8568((uint64_t)v57, v5 + 5104, (uint64_t)&v68);
        sub_18D053D7C(v5 + 5104, (uint64_t)v57);
        sub_18D1E8750((uint64_t)v57, v5 + 5840, (uint64_t)&v68);
        sub_18D1E890C(v5 + 5840, (uint64_t)v57);
        v61 = &unk_1E25C5EA0;
        v21 = v60;
        *(_QWORD *)v57 = &unk_1E25C63E0;
        v60 = 0;
        if (v21)
        {
          v22 = v21 - 16;
          v23 = *(_QWORD *)(v21 - 8);
          if (v23)
          {
            v24 = v23 << 6;
            v25 = v21 - 64;
            do
            {
              *(_QWORD *)(v25 + v24) = &unk_1E25C5E70;
              v24 -= 64;
            }
            while (v24);
          }
          MEMORY[0x18D78B5BC](v22, 0x1081C8052DD7B27);
        }
        sub_18D1E89E8((uint64_t)v57, v5 + 5888, (uint64_t)&v68);
        sub_18D1E8BA8(v5 + 5888, (uint64_t)v57);
        v61 = &unk_1E25C5EA0;
        v26 = v60;
        *(_QWORD *)v57 = &unk_1E25C6410;
        v60 = 0;
        if (v26)
        {
          v27 = v26 - 16;
          v28 = *(_QWORD *)(v26 - 8);
          if (v28)
          {
            v29 = 112 * v28;
            v30 = v26 - 112;
            do
            {
              *(_QWORD *)(v30 + v29) = &unk_1E25C5E70;
              v29 -= 112;
            }
            while (v29);
          }
          MEMORY[0x18D78B5BC](v27, 0x1081C80064FE0DDLL);
        }
        v58 = 0x1000000AELL;
        *(_OWORD *)&v57[8] = xmmword_18D3197E0;
        *(_QWORD *)v57 = &off_1E25C53C0;
        v59 = &v60;
        v62 = v5 + 5944;
        v65 = 0x1000000AELL;
        v63 = &unk_1E25C6500;
        v64 = xmmword_18D3197E0;
        v66 = &v67;
        sub_18D053D7C((uint64_t)&v63, (uint64_t)&v68);
        v31 = v64;
        v32 = DWORD1(v64);
        *(_QWORD *)&v57[8] = v64;
        v33 = (DWORD1(v64) * v64);
        *(_DWORD *)&v57[16] = v33;
        *(_DWORD *)&v57[20] = v64;
        v34 = (v33 - 1);
        if ((int)v33 >= 1)
        {
          for (i = 0; i != v33; ++i)
            v59[i] = *(_QWORD *)(*(_QWORD *)(v5 + 5976) + 8 * *((int *)v66 + i));
        }
        if ((_BYTE *)(v5 + 5944) != v57)
        {
          *(_DWORD *)(v5 + 5952) = v31;
          *(_DWORD *)(v5 + 5956) = v32;
          *(_DWORD *)(v5 + 5960) = v33;
          *(_DWORD *)(v5 + 5964) = v31;
          if ((int)v33 > 3)
          {
            v50 = *(_QWORD **)(v5 + 5976);
            v51 = v59;
            v52 = v59;
            v53 = v50;
            v54 = v34;
            do
            {
              v55 = *v52++;
              *v53++ = v55;
              --v54;
            }
            while (v54);
            v50[v34] = v51[v34];
          }
          else if ((int)v33 >= 1)
          {
            v36 = 0;
            v37 = 8 * v33;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v5 + 5976) + v36) = v59[v36 / 8];
              v36 += 8;
            }
            while (v37 != v36);
          }
        }
        v56 = v5 + 7376;
        sub_18D1E8CC0((uint64_t)v57, v56, (uint64_t)&v68);
        sub_18D1E8DC8(v56, (uint64_t)v57);
      }
    }
    else
    {
      *(_OWORD *)v57 = *(_OWORD *)(v2 + 8);
      sub_18D04AE0C(v2);
      sub_18D05DB3C(v5, v4, v38, v39, v40, v41, v42, v43);
      *(_BYTE *)v5 = 0;
      sub_18D05DB3C(v5, (__n128 *)v57, v44, v45, v46, v47, v48, v49);
    }
  }
}

_QWORD *sub_18D1BE6D4(_QWORD *result)
{
  *result = &unk_1E25C5E10;
  return result;
}

_QWORD *sub_18D1BE6E8(_QWORD *result)
{
  *result = off_1E25C5CF0;
  return result;
}

_QWORD *sub_18D1BE6F8(_QWORD *result)
{
  *result = off_1E25C5C90;
  return result;
}

_QWORD *sub_18D1BE708(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1BE71C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C6F80;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1BE77C(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1BE790(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

double sub_18D1BE7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double result;
  double *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(a3 + 8);
  v4 = *(_DWORD *)(a3 + 12);
  v5 = (v4 * v3);
  *(_QWORD *)&result = 0x100000003;
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v7 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if ((_DWORD)v5)
  {
    v8 = *(int **)(a3 + 32);
    v9 = *(_QWORD *)(a2 + 32);
    do
    {
      v10 = *v8++;
      result = *(double *)(v9 + 8 * v10);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

double sub_18D1BE7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  int *v4;
  uint64_t v5;
  double *v6;
  double v7;
  double result;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16))
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if ((int)v2 >= 1)
  {
    v3 = *(double **)(a2 + 32);
    v4 = *(int **)(a1 + 104);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 32);
    v6 = *(double **)(a1 + 32);
    do
    {
      v7 = *v3++;
      result = v7;
      v9 = *v4++;
      *(double *)(v5 + 8 * v9) = result;
      *v6++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_18D1BE870(_QWORD *result)
{
  result[9] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

double sub_18D1BE894@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = &unk_1E25C78E0;
  *(_OWORD *)(a3 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a1, a2, a3);
  return result;
}

void sub_18D1BE8E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1BE8F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v4;
  void *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  int v10;

  v8 = 0x100000001;
  v6 = &unk_1E25C6A70;
  *(_QWORD *)&v4 = 0x100000001;
  *((_QWORD *)&v4 + 1) = 0x100000001;
  v7 = v4;
  v9 = &v10;
  v10 = a4;
  return sub_18D163258(a1, a2, a3, (uint64_t)&v6);
}

uint64_t sub_18D1BE948@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  if ((a1 & 0x80000000) != 0)
    __assert_rtn("Eye", "cnmatrix.h", 2135, "nr >= 0");
  if ((a2 & 0x80000000) != 0)
    __assert_rtn("Eye", "cnmatrix.h", 2136, "nc >= 0");
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = &unk_1E25C78E0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;
  result = sub_18D04BE88(a3, 0.0);
  if (a1 >= a2)
    v7 = a2;
  else
    v7 = a1;
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a3 + 20) + 1;
    v10 = *(_QWORD *)(a3 + 32);
    do
    {
      *(_QWORD *)(v10 + 8 * v8) = 0x3FF0000000000000;
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_18D1BEA24(uint64_t a1, uint64_t a2, double *a3)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  sub_18D1C99C8(a1);
  v18 = 0x10000001ALL;
  v16 = &unk_1E25C70D0;
  v17 = xmmword_18D319790;
  v19 = &v20;
  v13 = 0x10000001ALL;
  v11 = &unk_1E25C70D0;
  v12 = xmmword_18D319790;
  v14 = &v15;
  v8 = 0x100000068;
  v6 = &unk_1E25C5F90;
  v7 = xmmword_18D3198A0;
  v9 = &v10;
  *a3 = sub_18D054568(a2, (uint64_t)&v16, (uint64_t)&v11, (uint64_t)&v6, a1);
}

void sub_18D1BEB00(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E25C7160;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1BEB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18D1C99C8(a1);
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1BEB8C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E25C7160;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1BEBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int32x4_t v3;
  uint64_t i;
  void *v6;
  int32x4_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD v10[26];

  v2 = *(unsigned int *)(a2 + 12);
  v8 = 0x10000001ALL;
  v6 = &unk_1E25C70D0;
  if ((v2 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v3 = vdupq_lane_s32((int32x2_t)(v2 | 0x100000000), 0);
  v3.i32[1] = 1;
  v7 = v3;
  v9 = v10;
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
      v10[i] = i;
  }
  return sub_18D1CC2A4(a1, a2, (uint64_t)&unk_1ECF23430, (uint64_t)&v6);
}

uint64_t sub_18D1BEC80(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 664);
        v8 = *(int **)(result + 704);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 760) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D1BED68(_QWORD *result)
{
  result[91] = &unk_1E25C5EA0;
  result[84] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1BED90(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1BEDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int32x4_t v5;
  uint64_t i;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t (**v19)();
  int32x4_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD v23[28];

  v2 = *(unsigned int *)(a2 + 12);
  v21 = 0x10000001CLL;
  v19 = &off_1E25C72E0;
  if ((v2 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v5 = vdupq_lane_s32((int32x2_t)(v2 | 0x100000000), 0);
  v5.i32[1] = 1;
  v20 = v5;
  v22 = v23;
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
      v23[i] = i;
  }
  *(_QWORD *)(a1 + 24) = 0x1C00000003;
  *(_OWORD *)(a1 + 8) = xmmword_18D3199E0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5030;
  *(_QWORD *)(a1 + 712) = a2;
  *(_QWORD *)(a1 + 744) = 0x100000003;
  *(_QWORD *)(a1 + 720) = &unk_1E25C77C0;
  *(_OWORD *)(a1 + 728) = xmmword_18D313070;
  *(_QWORD *)(a1 + 752) = a1 + 760;
  *(_QWORD *)(a1 + 800) = 0x10000001CLL;
  *(_QWORD *)(a1 + 776) = &off_1E25C72E0;
  *(_OWORD *)(a1 + 784) = xmmword_18D319780;
  *(_QWORD *)(a1 + 808) = a1 + 816;
  sub_18D053D7C(a1 + 720, (uint64_t)&unk_1ECF23430);
  result = sub_18D053D7C(a1 + 776, (uint64_t)&v19);
  v8 = *(unsigned int *)(a1 + 736);
  v9 = *(unsigned int *)(a1 + 792);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v8)
      {
        v14 = *(int **)(a1 + 752);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 808) + 4 * v11) * v12;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v10;
        result = v8;
        do
        {
          v18 = *v14++;
          *(_QWORD *)(v16 + 8 * v17++) = *(_QWORD *)(v13 + 8 * (v18 + v15));
          --result;
        }
        while (result);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return result;
}

_QWORD *sub_18D1BEF60(_QWORD *result)
{
  result[97] = &unk_1E25C5EA0;
  result[90] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1BEF88(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1BEF9C(uint64_t a1, uint64_t a2)
{
  int v4;
  int i;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t (**v18)();
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD v25[28];

  v4 = *(_DWORD *)(a2 + 8);
  v23 = 0x10000001CLL;
  v18 = &off_1E25C72E0;
  v19 = v4;
  v20 = 1;
  v21 = v4;
  v22 = v4;
  v24 = v25;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      v25[i] = i;
  }
  *(_QWORD *)(a1 + 24) = 0x30000001CLL;
  *(_OWORD *)(a1 + 8) = xmmword_18D3199F0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C4F10;
  *(_QWORD *)(a1 + 712) = a2;
  *(_QWORD *)(a1 + 744) = 0x10000001CLL;
  *(_QWORD *)(a1 + 720) = &off_1E25C72E0;
  *(_OWORD *)(a1 + 728) = xmmword_18D319780;
  *(_QWORD *)(a1 + 752) = a1 + 760;
  *(_QWORD *)(a1 + 896) = 0x100000003;
  *(_QWORD *)(a1 + 872) = &unk_1E25C77C0;
  *(_OWORD *)(a1 + 880) = xmmword_18D313070;
  *(_QWORD *)(a1 + 904) = a1 + 912;
  sub_18D053D7C(a1 + 720, (uint64_t)&v18);
  result = sub_18D053D7C(a1 + 872, (uint64_t)&unk_1ECF23430);
  v7 = *(unsigned int *)(a1 + 736);
  v8 = *(unsigned int *)(a1 + 888);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(a2 + 20);
    v12 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v13 = *(int **)(a1 + 752);
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 904) + 4 * v10) * v11;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v9;
        result = v7;
        do
        {
          v17 = *v13++;
          *(_QWORD *)(v15 + 8 * v16++) = *(_QWORD *)(v12 + 8 * (v17 + v14));
          --result;
        }
        while (result);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return result;
}

_QWORD *sub_18D1BF128(_QWORD *result)
{
  result[109] = &unk_1E25C5EA0;
  result[90] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1BF150(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1BF168(uint64_t a1)
{
  sub_18D03CCEC(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1BF18C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E25C3648;
  v3 = (void **)(a1 + 5920);
  sub_18D1C4ED8(&v3);
  *(_QWORD *)a1 = &unk_1E25B9BA8;
  *(_QWORD *)(a1 + 3600) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 672) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 480) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 256) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 64) = &unk_1E25C5E70;
  return MEMORY[0x18D78B5D4](a1, 0x10A1C40438F3BCFLL);
}

uint64_t sub_18D1BF21C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 8))
    return 0xFFFFFFFFLL;
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 25) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  sub_18D053AA8(a2 + 48, a1 + 64);
  sub_18D053AA8(a2 + 240, a1 + 256);
  result = 0;
  *(_BYTE *)(a2 + 432) = *(_BYTE *)(a1 + 448);
  return result;
}

uint64_t sub_18D1BF280(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18D1BF288(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == 4 && *(_DWORD *)(a2 + 20) == 4 && *(_BYTE *)(a2 + 40) == 0)
    return sub_18D1C1A28(a1, (int *)a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_18D1BF2AC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (!*(_BYTE *)(a1 + 456))
    return 0xFFFFFFFFLL;
  *a2 = *(_OWORD *)(a1 + 464);
  sub_18D053AA8(a3, a1 + 480);
  return 0;
}

uint64_t sub_18D1BF2E4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(_BYTE *)(a1 + 456) || !*(_BYTE *)(a1 + 448))
    return 0xFFFFFFFFLL;
  *a2 = *(_OWORD *)(a1 + 464);
  sub_18D053AA8(a3, a1 + 480);
  sub_18D053AA8(a4, a1 + 672);
  sub_18D053AA8(a5, a1 + 3600);
  return 0;
}

uint64_t sub_18D1BF358(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 456);
}

uint64_t sub_18D1BF360(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (_DWORD *)v2;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2))
    return 0xFFFFFFFFLL;
  v10 = v9[5];
  v27 = 0x10000000FLL;
  v22 = &unk_1E25C62C0;
  v28 = &v29;
  v23 = v10;
  v24 = 1;
  v25 = v10;
  v26 = v10;
  sub_18D04BE88((uint64_t)&v22, 0.0);
  v19 = 0x1300000013;
  v17 = &unk_1E25C6680;
  v18 = xmmword_18D319870;
  v20 = &v21;
  v14 = 0xF00000013;
  v12 = &unk_1E25C6620;
  v13 = xmmword_18D319880;
  v15 = &v16;
  return (*(uint64_t (**)(_DWORD *, uint64_t, void **, uint64_t, uint64_t, void **, void **))(*(_QWORD *)v9 + 96))(v9, v8, &v22, v6, v4, &v17, &v12);
}

uint64_t sub_18D1BF4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 24))(v0))
    return 0xFFFFFFFFLL;
  v18 = 0x1300000013;
  v16 = &unk_1E25C6680;
  v17 = xmmword_18D319870;
  v19 = &v20;
  v13 = 0xF00000013;
  v11 = &unk_1E25C6620;
  v12 = xmmword_18D319880;
  v14 = &v15;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, void **))(*(_QWORD *)v9 + 96))(v9, v8, v6, v4, v2, &v16, &v11);
}

uint64_t sub_18D1BF5A8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  void *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1))
    return 0xFFFFFFFFLL;
  v12 = a1[5];
  v19 = 0x10000000FLL;
  v14 = &unk_1E25C62C0;
  v20 = &v21;
  v15 = v12;
  v16 = 1;
  v17 = v12;
  v18 = v12;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  return (*(uint64_t (**)(_DWORD *, uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, &v14, a3, a4, a5, a6);
}

uint64_t sub_18D1BF674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v35;
  float64x2_t v36;
  __n128 v37;
  float64x2_t v38;
  __n128 v39;
  float64x2_t v40;
  _OWORD *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _BYTE v49[192];
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  void *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _OWORD v66[341];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11))
  {
    return 0xFFFFFFFFLL;
  }
  v47 = (uint64_t *)(v11 + 5920);
  v48 = v8;
  v14 = *(_QWORD *)(v11 + 5928);
  v15 = *(_QWORD **)(v11 + 5920);
  if ((_QWORD *)v14 == v15)
  {
    v16 = v6;
    v17 = *(unsigned int *)(v11 + 16);
    v18 = *(_DWORD *)(v11 + 20);
    v63 = 0x1300000013;
    v58 = &unk_1E25C6680;
    v64 = &v65;
    v59 = v17;
    v60 = v17;
    v61 = v17 * v17;
    v62 = v17;
    sub_18D04BE88((uint64_t)&v58, 0.0);
    if ((int)v17 >= 1)
    {
      v19 = 0;
      v20 = v62 + 1;
      v21 = v64;
      v22 = v17;
      do
      {
        v21[v19] = 0x3FF0000000000000;
        v19 += v20;
        --v22;
      }
      while (v22);
    }
    v55 = 0xF00000013;
    v50 = &unk_1E25C6620;
    v56 = &v57;
    v51 = v17;
    v52 = v18;
    v53 = v18 * v17;
    v54 = v17;
    sub_18D04BE88((uint64_t)&v50, 0.0);
    sub_18D1C2EC4(v66, (_OWORD *)(v11 + 464), v11 + 480, (uint64_t)&v58, (uint64_t)&v50);
    v23 = *(_QWORD *)(v11 + 5928);
    v6 = v16;
    if (v23 >= *(_QWORD *)(v11 + 5936))
    {
      v14 = sub_18D1C2A70(v47, v66);
    }
    else
    {
      sub_18D1C2BDC(*(_OWORD **)(v11 + 5928), v66);
      v14 = v23 + 5456;
      *(_QWORD *)(v11 + 5928) = v23 + 5456;
    }
    *(_QWORD *)(v11 + 5928) = v14;
    v15 = *(_QWORD **)(v11 + 5920);
  }
  if (0xCFF3FCFF3FCFF3FDLL * ((v14 - (uint64_t)v15) >> 4) < 2)
  {
    if (v14 - (_QWORD)v15 == 5456)
    {
      v42 = CNTimeSpan::operator-((uint64_t)v10, v15, v12, v13);
      if (fabs(v43 + (double)v42) < 2.22044605e-16)
      {
        sub_18D053AA8(v48, (uint64_t)(v15 + 2));
        sub_18D053AA8(v6, (uint64_t)(v15 + 26));
        v41 = v15 + 392;
        goto LABEL_37;
      }
    }
LABEL_38:
    result = sub_18D1BFDF4(v11, (uint64_t)v10);
    if (!(_DWORD)result)
    {
      sub_18D1C2FEC((uint64_t)v49, v48);
      sub_18D1C30C0((uint64_t)&v58, v6);
      sub_18D1C3190((uint64_t)&v50, v4);
      sub_18D1C2F58(v66, v10, (uint64_t)v49, (uint64_t)&v58, (uint64_t)&v50);
      v45 = *(_QWORD *)(v11 + 5928);
      if (v45 >= *(_QWORD *)(v11 + 5936))
      {
        v46 = sub_18D1C2A70(v47, v66);
      }
      else
      {
        sub_18D1C2BDC(*(_OWORD **)(v11 + 5928), v66);
        v46 = v45 + 5456;
        *(_QWORD *)(v11 + 5928) = v45 + 5456;
      }
      result = 0;
      *(_QWORD *)(v11 + 5928) = v46;
    }
    return result;
  }
  if (v15 == (_QWORD *)v14)
    goto LABEL_38;
  v25 = 0;
  v26 = 0;
  v27 = -INFINITY;
  v28 = INFINITY;
  do
  {
    v29 = CNTimeSpan::operator-((uint64_t)v15, v10, v12, v13);
    *(double *)v12.i64 = v30 + (double)v29;
    *(double *)v13.i64 = fabs(*(double *)v12.i64);
    if (*(double *)v13.i64 < 2.22044605e-16)
    {
      sub_18D053AA8(v48, (uint64_t)(v15 + 2));
      sub_18D053AA8(v6, (uint64_t)(v15 + 26));
      v41 = v15 + 392;
      v44 = v4;
      goto LABEL_42;
    }
    if (*(double *)v12.i64 >= 0.0 || *(double *)v12.i64 <= v27)
    {
      if (*(double *)v12.i64 > 0.0 && *(double *)v12.i64 < v28)
      {
        v28 = v30 + (double)v29;
        v25 = v15;
      }
    }
    else
    {
      v27 = v30 + (double)v29;
      v26 = v15;
    }
    v15 += 682;
  }
  while (v15 != (_QWORD *)v14);
  if (!v26 || !v25)
    goto LABEL_38;
  v32 = *(double *)(v11 + 5944);
  v33 = fabs(v28);
  if (fabs(v27) > v32 || v33 > v32)
    goto LABEL_38;
  v12.i64[0] = 0;
  if (v28 / (v28 - v27) >= 0.0)
    *(double *)v12.i64 = v28 / (v28 - v27);
  v35 = fmin(*(double *)v12.i64, 1.0);
  *(double *)v12.i64 = v35;
  sub_18D1C263C((uint64_t)&v58, (uint64_t)(v26 + 2), (float64x2_t)v12);
  v36.f64[0] = 1.0 - v35;
  sub_18D1C263C((uint64_t)&v50, (uint64_t)(v25 + 2), v36);
  sub_18D1C2424((uint64_t)v66, (uint64_t)&v58, (uint64_t)&v50);
  v37 = sub_18D053AA8(v48, (uint64_t)v66);
  v37.n128_f64[0] = v35;
  sub_18D1C26A8((uint64_t)&v58, (uint64_t)(v26 + 26), (float64x2_t)v37);
  v38.f64[0] = 1.0 - v35;
  sub_18D1C26A8((uint64_t)&v50, (uint64_t)(v25 + 26), v38);
  sub_18D1C2494((uint64_t)v66, (uint64_t)&v58, (uint64_t)&v50);
  v39 = sub_18D053AA8(v6, (uint64_t)v66);
  v39.n128_f64[0] = v35;
  sub_18D1C2710((uint64_t)&v58, (uint64_t)(v26 + 392), (float64x2_t)v39);
  v40.f64[0] = 1.0 - v35;
  sub_18D1C2710((uint64_t)&v50, (uint64_t)(v25 + 392), v40);
  sub_18D1C2500((uint64_t)v66, (uint64_t)&v58, (uint64_t)&v50);
  v41 = v66;
LABEL_37:
  v44 = v4;
LABEL_42:
  sub_18D053AA8(v44, (uint64_t)v41);
  return 0;
}

void sub_18D1BFB94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 5928) = v1;
  _Unwind_Resume(a1);
}

void sub_18D1BFBA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 5928) = v2;
  _Unwind_Resume(a1);
}

double sub_18D1BFBB8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &unk_1E25B9BA8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_QWORD *)(a1 + 88) = 0x100000013;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = &unk_1E25C66B0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 280) = 0x100000013;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = &unk_1E25C66B0;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  *(_BYTE *)(a1 + 448) = 1;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 504) = 0x100000013;
  *(_QWORD *)(a1 + 480) = &unk_1E25C66B0;
  *(_OWORD *)(a1 + 488) = xmmword_18D319860;
  *(_QWORD *)(a1 + 512) = a1 + 520;
  *(_QWORD *)(a1 + 696) = 0x1300000013;
  *(_QWORD *)(a1 + 672) = &unk_1E25C6680;
  *(_OWORD *)(a1 + 680) = xmmword_18D319870;
  *(_QWORD *)(a1 + 704) = a1 + 712;
  *(_QWORD *)(a1 + 3624) = 0xF00000013;
  *(_QWORD *)(a1 + 3600) = &unk_1E25C6620;
  *(_QWORD *)&result = 0xF00000013;
  *(_OWORD *)(a1 + 3608) = xmmword_18D319880;
  *(_QWORD *)(a1 + 3632) = a1 + 3640;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  return result;
}

uint64_t sub_18D1BFCA4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  int v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE v21[2888];

  v4 = *(unsigned int *)(a3 + 8);
  v3 = *(_DWORD *)(a3 + 12);
  if ((_DWORD)v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5 || v3 != 1)
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(a1 + 8))
  {
    if ((_DWORD)v4 != *(_DWORD *)(a1 + 16))
      return 0xFFFFFFFFLL;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v4;
  }
  *(_OWORD *)(a1 + 464) = *a2;
  sub_18D053AA8(a1 + 480, a3);
  v19 = 0x1300000013;
  v14 = &unk_1E25C6680;
  v20 = v21;
  v15 = v4;
  v16 = v4;
  v17 = v4 * v4;
  v18 = v4;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  if ((int)v4 >= 1)
  {
    v9 = 0;
    v10 = v18 + 1;
    v11 = v20;
    v12 = v4;
    do
    {
      *(_QWORD *)&v11[8 * v9] = 0x3FF0000000000000;
      v9 += v10;
      --v12;
    }
    while (v12);
  }
  sub_18D053AA8(a1 + 672, (uint64_t)&v14);
  if (*(_BYTE *)(a1 + 8))
  {
    v13 = *(_DWORD *)(a1 + 20);
    v19 = 0xF00000013;
    v14 = &unk_1E25C6620;
    v20 = v21;
    v15 = v4;
    v16 = v13;
    v17 = v13 * v4;
    v18 = v4;
    sub_18D04BE88((uint64_t)&v14, 0.0);
    sub_18D053AA8(a1 + 3600, (uint64_t)&v14);
  }
  result = 0;
  *(_BYTE *)(a1 + 456) = 1;
  return result;
}

uint64_t sub_18D1BFDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  double v23;
  int v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  double v28;
  double v29;
  int v30;
  double v31;
  int v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  double v36;
  int8x16_t v37;
  int v38;
  __n128 v39;
  int8x16_t v40;
  int8x16_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  __int128 v53;
  __int128 v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  __int128 v63;
  __int128 v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint64_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  __int128 v73;
  __int128 v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  __n128 v80;
  float64x2_t v81;
  float64x2_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _OWORD *v88;
  unsigned int (*v89)(__int128 *, double *, void **, uint64_t, uint64_t, void **, void **, void **);
  uint64_t v90;
  void *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  void *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  void *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  void *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  void *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  void *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  void *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  void *v126;
  __int128 v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  void *v131;
  __int128 v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  void *v136;
  __int128 v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  void *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  void *v146;
  __int128 v147;
  uint64_t v148;
  _BYTE *v149;
  _BYTE v150[2280];
  void *v151;
  __int128 v152;
  uint64_t v153;
  _BYTE *v154;
  _BYTE v155[2888];
  void *v156;
  __int128 v157;
  uint64_t v158;
  _BYTE *v159;
  _BYTE v160[2888];
  void *v161;
  __int128 v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  _QWORD v166[2];
  void *v167;
  __int128 v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE v171[2280];
  void *v172;
  __int128 v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  void *v177;
  __int128 v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  void *v182;
  __int128 v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  void *v187;
  __int128 v188;
  uint64_t v189;
  _BYTE *v190;
  _BYTE v191[2280];
  void *v192;
  __int128 v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE v196[2888];
  void *v197;
  __int128 v198;
  uint64_t v199;
  _BYTE *v200;
  _BYTE v201[2888];
  void *v202;
  __int128 v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  _QWORD v207[2];
  void *v208;
  __int128 v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE v212[2280];
  void *v213;
  __int128 v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  void *v218;
  __int128 v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  void *v223;
  __int128 v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  void *v228;
  __int128 v229;
  uint64_t v230;
  _BYTE *v231;
  _BYTE v232[2280];
  void *v233;
  __int128 v234;
  uint64_t v235;
  _BYTE *v236;
  _BYTE v237[2888];
  void *v238;
  __int128 v239;
  uint64_t v240;
  _BYTE *v241;
  _BYTE v242[2888];
  void *v243;
  __int128 v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  _QWORD v248[2];
  void *v249;
  __int128 v250;
  uint64_t v251;
  _BYTE *v252;
  _BYTE v253[2280];
  void *v254;
  __int128 v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  void *v259;
  __int128 v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  void *v264;
  __int128 v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  void *v269;
  __int128 v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  void *v274;
  __int128 v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  void *v279;
  __int128 v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  _BYTE v284[192];
  __int128 v285;
  void *v286;
  __int128 v287;
  uint64_t v288;
  _BYTE *v289;
  _BYTE v290[2280];
  void *v291;
  __int128 v292;
  uint64_t v293;
  _BYTE *v294;
  _BYTE v295[2888];
  void *v296;
  __int128 v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  __int128 v301;
  void *v302;
  __int128 v303;
  uint64_t v304;
  _BYTE *v305;
  _BYTE v306[2280];
  void *v307;
  __int128 v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE v311[2888];
  void *v312;
  int v313;
  int v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  void *v320;
  __int128 v321;
  uint64_t v322;
  _BYTE *v323;
  _BYTE v324[2280];
  _BYTE v325[192];
  double v326;
  void *v327;
  __int128 v328;
  uint64_t v329;
  _BYTE *v330;
  _BYTE v331[2904];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v90 = v9;
  v11 = v10;
  v13 = v12;
  v14 = v2;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14))
  {
    return 0xFFFFFFFFLL;
  }
  v17 = *(_DWORD *)(v14 + 20);
  result = 0xFFFFFFFFLL;
  if (*(_DWORD *)(v11 + 8) != v17 || *(_DWORD *)(v11 + 12) != 1)
    return result;
  v19 = *(unsigned int *)(v14 + 16);
  v89 = *(unsigned int (**)(__int128 *, double *, void **, uint64_t, uint64_t, void **, void **, void **))(v14 + 24);
  v20 = *(unsigned __int8 *)(v14 + 448);
  v88 = (_OWORD *)(v14 + 464);
  v21 = CNTimeSpan::operator-((uint64_t)v13, (_QWORD *)(v14 + 464), v15, v16);
  v23 = v22 + (double)v21;
  if (fabs(v23) >= 2.22044605e-16)
  {
    v28 = 1.0;
    v29 = 0.0;
    if (v23 < 0.0)
      v29 = -1.0;
    if (v23 <= 0.0)
      v28 = v29;
    v30 = vcvtpd_s64_f64(fabs(v23 / *(double *)(v14 + 48)));
    v326 = v28;
    if (v30 <= 1)
      v30 = 1;
    v87 = v30;
    v31 = (double)v30;
    v86 = v14 + 480;
    sub_18D1CEF14((uint64_t)v325, v14 + 480);
    v329 = 0x1300000013;
    v327 = &unk_1E25C6680;
    if (v20)
    {
      v330 = v331;
      LODWORD(v328) = v19;
      DWORD1(v328) = v19;
      DWORD2(v328) = v19 * v19;
      HIDWORD(v328) = v19;
      sub_18D04BE88((uint64_t)&v327, 0.0);
      if ((int)v19 >= 1)
      {
        v32 = 0;
        v33 = HIDWORD(v328) + 1;
        v34 = v330;
        v35 = v19;
        do
        {
          *(_QWORD *)&v34[8 * v32] = 0x3FF0000000000000;
          v32 += v33;
          --v35;
        }
        while (v35);
      }
      v322 = 0xF00000013;
      v320 = &unk_1E25C6620;
      v323 = v324;
      *(_QWORD *)&v321 = __PAIR64__(v17, v19);
      DWORD2(v321) = v17 * v19;
      HIDWORD(v321) = v19;
      sub_18D04BE88((uint64_t)&v320, 0.0);
    }
    else
    {
      v328 = xmmword_18D319870;
      v330 = v331;
      v322 = 0xF00000013;
      v320 = &unk_1E25C6620;
      v321 = xmmword_18D319880;
      v323 = v324;
    }
    v36 = v23 / v31;
    v317 = 0x100000013;
    v312 = &unk_1E25C66B0;
    v318 = &v319;
    v313 = v19;
    v314 = 1;
    v315 = v19;
    v316 = v19;
    sub_18D04BE88((uint64_t)&v312, 0.0);
    v309 = 0x1300000013;
    v307 = &unk_1E25C6680;
    if (v20)
    {
      v310 = v311;
      LODWORD(v308) = v19;
      DWORD1(v308) = v19;
      DWORD2(v308) = v19 * v19;
      HIDWORD(v308) = v19;
      sub_18D04BE88((uint64_t)&v307, 0.0);
      v304 = 0xF00000013;
      v302 = &unk_1E25C6620;
      v305 = v306;
      *(_QWORD *)&v303 = __PAIR64__(v17, v19);
      DWORD2(v303) = v17 * v19;
      HIDWORD(v303) = v19;
      sub_18D04BE88((uint64_t)&v302, 0.0);
    }
    else
    {
      v308 = xmmword_18D319870;
      v310 = v311;
      v304 = 0xF00000013;
      v302 = &unk_1E25C6620;
      v303 = xmmword_18D319880;
      v305 = v306;
    }
    v38 = 0;
    v39.n128_u64[1] = 0x130000011DLL;
    while (1)
    {
      v39.n128_f64[0] = v36 * (double)v38;
      *(_QWORD *)&v292 = 0;
      v291 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v291, 0, (int8x16_t)v39, v37);
      *(_QWORD *)&v301 = CNTimeSpan::operator+((uint64_t)v88, &v291, v40, v41);
      *((_QWORD *)&v301 + 1) = v42;
      v298 = 0x100000013;
      v296 = &unk_1E25C66B0;
      v297 = xmmword_18D319860;
      v299 = &v300;
      sub_18D053FA4((uint64_t)v325, (uint64_t)&v312, (uint64_t)&v296);
      v293 = 0x1300000013;
      v291 = &unk_1E25C6680;
      v292 = xmmword_18D319870;
      v294 = v295;
      if (v20)
      {
        sub_18D053FA4((uint64_t)&v327, (uint64_t)&v307, (uint64_t)&v291);
        v288 = 0xF00000013;
        v286 = &unk_1E25C6620;
        v287 = xmmword_18D319880;
        v289 = v290;
        sub_18D053FA4((uint64_t)&v320, (uint64_t)&v302, (uint64_t)&v286);
      }
      else
      {
        v288 = 0xF00000013;
        v286 = &unk_1E25C6620;
        v287 = xmmword_18D319880;
        v289 = v290;
      }
      v285 = v301;
      sub_18D1CEF14((uint64_t)v284, (uint64_t)&v296);
      if (v20)
      {
        sub_18D1C277C((uint64_t)&v279, (uint64_t)&v291);
        sub_18D1C28AC((uint64_t)&v274, (uint64_t)&v286);
        v43 = xmmword_18D319870;
        v44 = xmmword_18D319880;
      }
      else
      {
        v281 = 0x1300000013;
        v279 = &unk_1E25C6680;
        v43 = xmmword_18D319870;
        v44 = xmmword_18D319880;
        v280 = xmmword_18D319870;
        v282 = &v283;
        v276 = 0xF00000013;
        v274 = &unk_1E25C6620;
        v275 = xmmword_18D319880;
        v277 = &v278;
      }
      v271 = 0x100000013;
      v269 = &unk_1E25C66B0;
      v270 = xmmword_18D319860;
      v272 = &v273;
      v266 = 0x1300000013;
      v264 = &unk_1E25C6680;
      v265 = v43;
      v267 = &v268;
      v261 = 0xF00000013;
      v259 = &unk_1E25C6620;
      v260 = v44;
      v262 = &v263;
      if (v89(&v285, &v326, (void **)v284, v11, v90, &v269, &v264, &v259))
        break;
      v256 = 0x1300000013;
      v254 = &unk_1E25C6680;
      v255 = xmmword_18D319870;
      v257 = &v258;
      if (v20)
      {
        sub_18D053B2C((uint64_t)&v264, (uint64_t)&v279, (uint64_t)&v254);
        v240 = 0xF00000013;
        v238 = &unk_1E25C6620;
        v239 = xmmword_18D319880;
        v241 = v242;
        sub_18D053B2C((uint64_t)&v264, (uint64_t)&v274, (uint64_t)&v238);
        v251 = 0xF00000013;
        v249 = &unk_1E25C6620;
        v250 = xmmword_18D319880;
        v252 = v253;
        v46 = (int8x16_t)sub_18D053FA4((uint64_t)&v238, (uint64_t)&v259, (uint64_t)&v249);
      }
      else
      {
        v251 = 0xF00000013;
        v249 = &unk_1E25C6620;
        v46.i64[1] = 0x130000011DLL;
        v250 = xmmword_18D319880;
        v252 = v253;
      }
      v238 = 0;
      *(_QWORD *)&v239 = 0;
      *(double *)v46.i64 = v36 * 0.5;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v238, 0, v46, v45);
      v248[0] = CNTimeSpan::operator+((uint64_t)&v301, &v238, v47, v48);
      v248[1] = v49;
      v240 = 0x100000013;
      v238 = &unk_1E25C66B0;
      *(_QWORD *)&v50.f64[1] = 0x1300000013;
      v239 = xmmword_18D319860;
      v241 = v242;
      v50.f64[0] = v36 * 0.5;
      sub_18D064EF4((uint64_t)&v269, (uint64_t)&v238, v50);
      v245 = 0x100000013;
      v243 = &unk_1E25C66B0;
      v244 = xmmword_18D319860;
      v246 = &v247;
      sub_18D053FA4((uint64_t)&v296, (uint64_t)&v238, (uint64_t)&v243);
      if (v20)
      {
        v235 = 0x1300000013;
        v233 = &unk_1E25C6680;
        *(_QWORD *)&v51.f64[1] = 0x1300000169;
        v234 = xmmword_18D319870;
        v236 = v237;
        v51.f64[0] = v36 * 0.5;
        sub_18D064EF4((uint64_t)&v254, (uint64_t)&v233, v51);
        v240 = 0x1300000013;
        v238 = &unk_1E25C6680;
        v239 = xmmword_18D319870;
        v241 = v242;
        sub_18D053FA4((uint64_t)&v291, (uint64_t)&v233, (uint64_t)&v238);
        v235 = 0xF00000013;
        v233 = &unk_1E25C6620;
        *(_QWORD *)&v52.f64[1] = 0x130000011DLL;
        v234 = xmmword_18D319880;
        v236 = v237;
        v52.f64[0] = v36 * 0.5;
        sub_18D064EF4((uint64_t)&v249, (uint64_t)&v233, v52);
        v230 = 0xF00000013;
        v228 = &unk_1E25C6620;
        v229 = xmmword_18D319880;
        v231 = v232;
        sub_18D053FA4((uint64_t)&v286, (uint64_t)&v233, (uint64_t)&v228);
        v53 = xmmword_18D319870;
        v54 = xmmword_18D319880;
      }
      else
      {
        v240 = 0x1300000013;
        v238 = &unk_1E25C6680;
        v53 = xmmword_18D319870;
        v54 = xmmword_18D319880;
        v239 = xmmword_18D319870;
        v241 = v242;
        v230 = 0xF00000013;
        v228 = &unk_1E25C6620;
        v229 = xmmword_18D319880;
        v231 = v232;
      }
      v225 = 0x100000013;
      v223 = &unk_1E25C66B0;
      v224 = xmmword_18D319860;
      v226 = &v227;
      v235 = 0x1300000013;
      v233 = &unk_1E25C6680;
      v234 = v53;
      v236 = v237;
      v220 = 0xF00000013;
      v218 = &unk_1E25C6620;
      v219 = v54;
      v221 = &v222;
      if (v89((__int128 *)v248, &v326, &v243, v11, v90, &v223, &v233, &v218))
        break;
      v215 = 0x1300000013;
      v213 = &unk_1E25C6680;
      v214 = xmmword_18D319870;
      v216 = &v217;
      if (v20)
      {
        sub_18D053B2C((uint64_t)&v233, (uint64_t)&v238, (uint64_t)&v213);
        v199 = 0xF00000013;
        v197 = &unk_1E25C6620;
        v198 = xmmword_18D319880;
        v200 = v201;
        sub_18D053B2C((uint64_t)&v233, (uint64_t)&v228, (uint64_t)&v197);
        v210 = 0xF00000013;
        v208 = &unk_1E25C6620;
        v209 = xmmword_18D319880;
        v211 = v212;
        v56 = (int8x16_t)sub_18D053FA4((uint64_t)&v197, (uint64_t)&v218, (uint64_t)&v208);
      }
      else
      {
        v210 = 0xF00000013;
        v208 = &unk_1E25C6620;
        v56.i64[1] = 0x130000011DLL;
        v209 = xmmword_18D319880;
        v211 = v212;
      }
      v197 = 0;
      *(_QWORD *)&v198 = 0;
      *(double *)v56.i64 = v36 * 0.5;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v197, 0, v56, v55);
      v207[0] = CNTimeSpan::operator+((uint64_t)&v301, &v197, v57, v58);
      v207[1] = v59;
      v199 = 0x100000013;
      v197 = &unk_1E25C66B0;
      *(_QWORD *)&v60.f64[1] = 0x1300000013;
      v198 = xmmword_18D319860;
      v200 = v201;
      v60.f64[0] = v36 * 0.5;
      sub_18D064EF4((uint64_t)&v223, (uint64_t)&v197, v60);
      v204 = 0x100000013;
      v202 = &unk_1E25C66B0;
      v203 = xmmword_18D319860;
      v205 = &v206;
      sub_18D053FA4((uint64_t)&v296, (uint64_t)&v197, (uint64_t)&v202);
      if (v20)
      {
        v194 = 0x1300000013;
        v192 = &unk_1E25C6680;
        *(_QWORD *)&v61.f64[1] = 0x1300000169;
        v193 = xmmword_18D319870;
        v195 = v196;
        v61.f64[0] = v36 * 0.5;
        sub_18D064EF4((uint64_t)&v213, (uint64_t)&v192, v61);
        v199 = 0x1300000013;
        v197 = &unk_1E25C6680;
        v198 = xmmword_18D319870;
        v200 = v201;
        sub_18D053FA4((uint64_t)&v291, (uint64_t)&v192, (uint64_t)&v197);
        v194 = 0xF00000013;
        v192 = &unk_1E25C6620;
        *(_QWORD *)&v62.f64[1] = 0x130000011DLL;
        v193 = xmmword_18D319880;
        v195 = v196;
        v62.f64[0] = v36 * 0.5;
        sub_18D064EF4((uint64_t)&v208, (uint64_t)&v192, v62);
        v189 = 0xF00000013;
        v187 = &unk_1E25C6620;
        v188 = xmmword_18D319880;
        v190 = v191;
        sub_18D053FA4((uint64_t)&v286, (uint64_t)&v192, (uint64_t)&v187);
        v63 = xmmword_18D319870;
        v64 = xmmword_18D319880;
      }
      else
      {
        v199 = 0x1300000013;
        v197 = &unk_1E25C6680;
        v63 = xmmword_18D319870;
        v64 = xmmword_18D319880;
        v198 = xmmword_18D319870;
        v200 = v201;
        v189 = 0xF00000013;
        v187 = &unk_1E25C6620;
        v188 = xmmword_18D319880;
        v190 = v191;
      }
      v184 = 0x100000013;
      v182 = &unk_1E25C66B0;
      v183 = xmmword_18D319860;
      v185 = &v186;
      v194 = 0x1300000013;
      v192 = &unk_1E25C6680;
      v193 = v63;
      v195 = v196;
      v179 = 0xF00000013;
      v177 = &unk_1E25C6620;
      v178 = v64;
      v180 = &v181;
      if (v89((__int128 *)v207, &v326, &v202, v11, v90, &v182, &v192, &v177))
        break;
      v174 = 0x1300000013;
      v172 = &unk_1E25C6680;
      v173 = xmmword_18D319870;
      v175 = &v176;
      if (v20)
      {
        sub_18D053B2C((uint64_t)&v192, (uint64_t)&v197, (uint64_t)&v172);
        v158 = 0xF00000013;
        v156 = &unk_1E25C6620;
        v157 = xmmword_18D319880;
        v159 = v160;
        sub_18D053B2C((uint64_t)&v192, (uint64_t)&v187, (uint64_t)&v156);
        v169 = 0xF00000013;
        v167 = &unk_1E25C6620;
        v168 = xmmword_18D319880;
        v170 = v171;
        v66 = (int8x16_t)sub_18D053FA4((uint64_t)&v156, (uint64_t)&v177, (uint64_t)&v167);
      }
      else
      {
        v169 = 0xF00000013;
        v167 = &unk_1E25C6620;
        v66.i64[1] = 0x130000011DLL;
        v168 = xmmword_18D319880;
        v170 = v171;
      }
      v156 = 0;
      *(_QWORD *)&v157 = 0;
      *(double *)v66.i64 = v36;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v156, 0, v66, v65);
      v166[0] = CNTimeSpan::operator+((uint64_t)&v301, &v156, v67, v68);
      v166[1] = v69;
      v158 = 0x100000013;
      v156 = &unk_1E25C66B0;
      *(_QWORD *)&v70.f64[1] = 0x1300000013;
      v157 = xmmword_18D319860;
      v159 = v160;
      v70.f64[0] = v36;
      sub_18D064EF4((uint64_t)&v182, (uint64_t)&v156, v70);
      v163 = 0x100000013;
      v161 = &unk_1E25C66B0;
      v162 = xmmword_18D319860;
      v164 = &v165;
      sub_18D053FA4((uint64_t)&v296, (uint64_t)&v156, (uint64_t)&v161);
      if (v20)
      {
        v153 = 0x1300000013;
        v151 = &unk_1E25C6680;
        *(_QWORD *)&v71.f64[1] = 0x1300000169;
        v152 = xmmword_18D319870;
        v154 = v155;
        v71.f64[0] = v36;
        sub_18D064EF4((uint64_t)&v172, (uint64_t)&v151, v71);
        v158 = 0x1300000013;
        v156 = &unk_1E25C6680;
        v157 = xmmword_18D319870;
        v159 = v160;
        sub_18D053FA4((uint64_t)&v291, (uint64_t)&v151, (uint64_t)&v156);
        v153 = 0xF00000013;
        v151 = &unk_1E25C6620;
        *(_QWORD *)&v72.f64[1] = 0x130000011DLL;
        v152 = xmmword_18D319880;
        v154 = v155;
        v72.f64[0] = v36;
        sub_18D064EF4((uint64_t)&v167, (uint64_t)&v151, v72);
        v148 = 0xF00000013;
        v146 = &unk_1E25C6620;
        v147 = xmmword_18D319880;
        v149 = v150;
        sub_18D053FA4((uint64_t)&v286, (uint64_t)&v151, (uint64_t)&v146);
        v73 = xmmword_18D319870;
        v74 = xmmword_18D319880;
      }
      else
      {
        v158 = 0x1300000013;
        v156 = &unk_1E25C6680;
        v73 = xmmword_18D319870;
        v74 = xmmword_18D319880;
        v157 = xmmword_18D319870;
        v159 = v160;
        v148 = 0xF00000013;
        v146 = &unk_1E25C6620;
        v147 = xmmword_18D319880;
        v149 = v150;
      }
      v143 = 0x100000013;
      v141 = &unk_1E25C66B0;
      v142 = xmmword_18D319860;
      v144 = &v145;
      v153 = 0x1300000013;
      v151 = &unk_1E25C6680;
      v152 = v73;
      v154 = v155;
      v138 = 0xF00000013;
      v136 = &unk_1E25C6620;
      v137 = v74;
      v139 = &v140;
      if (v89((__int128 *)v166, &v326, &v161, v11, v90, &v141, &v151, &v136))
        break;
      if (v20)
      {
        sub_18D1C2570((uint64_t)&v151, (uint64_t)&v156, (uint64_t)&v131);
        sub_18D1C25D4((uint64_t)&v151, (uint64_t)&v146, (uint64_t)&v121);
        sub_18D1C2500((uint64_t)&v126, (uint64_t)&v121, (uint64_t)&v136);
      }
      else
      {
        v133 = 0x1300000013;
        v131 = &unk_1E25C6680;
        v132 = xmmword_18D319870;
        v134 = &v135;
        v128 = 0xF00000013;
        v126 = &unk_1E25C6620;
        v127 = xmmword_18D319880;
        v129 = &v130;
      }
      v98 = 0x100000013;
      v96 = &unk_1E25C66B0;
      *(_QWORD *)&v75.f64[1] = 0x1300000013;
      v97 = xmmword_18D319860;
      v99 = &v100;
      v75.f64[0] = 2.0;
      sub_18D064EF4((uint64_t)&v223, (uint64_t)&v96, v75);
      v103 = 0x100000013;
      v101 = &unk_1E25C66B0;
      v102 = xmmword_18D319860;
      v104 = &v105;
      sub_18D053FA4((uint64_t)&v269, (uint64_t)&v96, (uint64_t)&v101);
      v93 = 0x100000013;
      v91 = &unk_1E25C66B0;
      *(_QWORD *)&v76.f64[1] = 0x1300000013;
      v92 = xmmword_18D319860;
      v94 = &v95;
      v76.f64[0] = 2.0;
      sub_18D064EF4((uint64_t)&v182, (uint64_t)&v91, v76);
      v108 = 0x100000013;
      v106 = &unk_1E25C66B0;
      v107 = xmmword_18D319860;
      v109 = &v110;
      sub_18D053FA4((uint64_t)&v101, (uint64_t)&v91, (uint64_t)&v106);
      v113 = 0x100000013;
      v111 = &unk_1E25C66B0;
      v112 = xmmword_18D319860;
      v114 = &v115;
      sub_18D053FA4((uint64_t)&v106, (uint64_t)&v141, (uint64_t)&v111);
      v118 = 0x100000013;
      v116 = &unk_1E25C66B0;
      *(_QWORD *)&v77.f64[1] = 0x1300000013;
      v117 = xmmword_18D319860;
      v119 = &v120;
      v77.f64[0] = v36 / 6.0;
      sub_18D064EF4((uint64_t)&v111, (uint64_t)&v116, v77);
      v123 = 0x100000013;
      v121 = &unk_1E25C66B0;
      v122 = xmmword_18D319860;
      v124 = &v125;
      sub_18D053FA4((uint64_t)&v312, (uint64_t)&v116, (uint64_t)&v121);
      v39 = sub_18D053AA8((uint64_t)&v312, (uint64_t)&v121);
      if (v20)
      {
        v39.n128_u64[0] = 2.0;
        sub_18D1C26A8((uint64_t)&v96, (uint64_t)&v213, (float64x2_t)v39);
        sub_18D1C2494((uint64_t)&v101, (uint64_t)&v254, (uint64_t)&v96);
        v78.f64[0] = 2.0;
        sub_18D1C26A8((uint64_t)&v91, (uint64_t)&v172, v78);
        sub_18D1C2494((uint64_t)&v106, (uint64_t)&v101, (uint64_t)&v91);
        sub_18D1C2494((uint64_t)&v111, (uint64_t)&v106, (uint64_t)&v131);
        v79.f64[0] = v36 / 6.0;
        sub_18D1C26A8((uint64_t)&v116, (uint64_t)&v111, v79);
        sub_18D1C2494((uint64_t)&v121, (uint64_t)&v307, (uint64_t)&v116);
        v80 = sub_18D053AA8((uint64_t)&v307, (uint64_t)&v121);
        v80.n128_u64[0] = 2.0;
        sub_18D1C2710((uint64_t)&v96, (uint64_t)&v208, (float64x2_t)v80);
        sub_18D1C2500((uint64_t)&v101, (uint64_t)&v249, (uint64_t)&v96);
        v81.f64[0] = 2.0;
        sub_18D1C2710((uint64_t)&v91, (uint64_t)&v167, v81);
        sub_18D1C2500((uint64_t)&v106, (uint64_t)&v101, (uint64_t)&v91);
        sub_18D1C2500((uint64_t)&v111, (uint64_t)&v106, (uint64_t)&v126);
        v82.f64[0] = v36 / 6.0;
        sub_18D1C2710((uint64_t)&v116, (uint64_t)&v111, v82);
        sub_18D1C2500((uint64_t)&v121, (uint64_t)&v302, (uint64_t)&v116);
        v39 = sub_18D053AA8((uint64_t)&v302, (uint64_t)&v121);
      }
      if (v87 == ++v38)
      {
        *(double *)(v14 + 40) = v36;
        *v88 = *v13;
        v293 = 0x100000013;
        v291 = &unk_1E25C66B0;
        v292 = xmmword_18D319860;
        v294 = v295;
        sub_18D053FA4(v86, (uint64_t)&v312, (uint64_t)&v291);
        sub_18D053AA8(v86, (uint64_t)&v291);
        if (v20)
        {
          sub_18D1C2494((uint64_t)&v279, (uint64_t)&v327, (uint64_t)&v307);
          sub_18D1C2570((uint64_t)&v279, v14 + 672, (uint64_t)&v291);
          sub_18D053AA8(v14 + 672, (uint64_t)&v291);
          sub_18D1C2494((uint64_t)&v291, (uint64_t)&v327, (uint64_t)&v307);
          v83 = v14 + 3600;
          sub_18D1C25D4((uint64_t)&v291, v83, (uint64_t)&v264);
          sub_18D1C2500((uint64_t)&v254, (uint64_t)&v320, (uint64_t)&v302);
          sub_18D1C2500((uint64_t)&v279, (uint64_t)&v264, (uint64_t)&v254);
          sub_18D053AA8(v83, (uint64_t)&v279);
          sub_18D053AA8(v8, v86);
          sub_18D1C2494((uint64_t)&v291, (uint64_t)&v327, (uint64_t)&v307);
          sub_18D053AA8(v6, (uint64_t)&v291);
          sub_18D1C2500((uint64_t)&v291, (uint64_t)&v320, (uint64_t)&v302);
          v84 = &v291;
          v85 = v4;
        }
        else
        {
          v85 = v8;
          v84 = (void **)(v14 + 480);
        }
        sub_18D053AA8(v85, (uint64_t)v84);
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  sub_18D053AA8(v8, v14 + 480);
  if (v20)
  {
    v329 = 0x1300000013;
    v327 = &unk_1E25C6680;
    v330 = v331;
    LODWORD(v328) = v19;
    DWORD1(v328) = v19;
    DWORD2(v328) = v19 * v19;
    HIDWORD(v328) = v19;
    sub_18D04BE88((uint64_t)&v327, 0.0);
    if ((int)v19 >= 1)
    {
      v24 = 0;
      v25 = HIDWORD(v328) + 1;
      v26 = v330;
      v27 = v19;
      do
      {
        *(_QWORD *)&v26[8 * v24] = 0x3FF0000000000000;
        v24 += v25;
        --v27;
      }
      while (v27);
    }
    sub_18D053AA8(v6, (uint64_t)&v327);
    v329 = 0xF00000013;
    v327 = &unk_1E25C6620;
    v330 = v331;
    *(_QWORD *)&v328 = __PAIR64__(v17, v19);
    DWORD2(v328) = v17 * v19;
    HIDWORD(v328) = v19;
    sub_18D04BE88((uint64_t)&v327, 0.0);
    sub_18D053AA8(v4, (uint64_t)&v327);
  }
  result = 0;
  *(_QWORD *)(v14 + 40) = 0;
  return result;
}

uint64_t sub_18D1C1A04(uint64_t result)
{
  *(_BYTE *)(result + 456) = 0;
  return result;
}

_QWORD *sub_18D1C1A0C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1C1A28(uint64_t a1, int *a2)
{
  int v2;
  unsigned int v4;
  uint64_t result;
  double v8;
  _DWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[97];
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;

  v2 = *a2;
  if (!*a2 || !*((_QWORD *)a2 + 1))
    return 0xFFFFFFFFLL;
  v4 = a2[5];
  if (a2[4] > v4 || v4 == 0)
    return 0xFFFFFFFFLL;
  v8 = *((double *)a2 + 4);
  result = 0xFFFFFFFFLL;
  if (fabs(*((double *)a2 + 3)) > v8 || v8 <= 0.0)
    return result;
  if (*((_BYTE *)a2 + 40))
  {
    if (a2[62] != v2 || a2[63] != 1)
      return result;
    v26 = 0x100000013;
    v24 = &unk_1E25C66B0;
    v25 = xmmword_18D319860;
    v27 = (double *)&v28;
    v21 = 0x100000013;
    v19 = &unk_1E25C6710;
    v20 = xmmword_18D319860;
    v22 = &v23;
    sub_18D1C2074((uint64_t)(a2 + 60), (uint64_t)&v24, (uint64_t)&v19);
    if (*v27 < 0.0)
      return 0xFFFFFFFFLL;
    result = 0xFFFFFFFFLL;
    if (a2[14] != v2 || a2[15] != 1)
      return result;
    sub_18D1C1E30((uint64_t)(a2 + 12), (uint64_t)&v24);
    if (*v27 < 0.0)
      return 0xFFFFFFFFLL;
    sub_18D1C1FF8((uint64_t)(a2 + 60), (uint64_t)(a2 + 12), (uint64_t)v18);
    sub_18D1C1F60((uint64_t)v18, 2, (uint64_t)&v19);
    sub_18D1C1EC8((uint64_t)&v19, (uint64_t)&v24);
    if (*v27 <= 0.0)
      return 0xFFFFFFFFLL;
  }
  v9 = (_DWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
  {
    v10 = *v9 != *a2 || *(_DWORD *)(a1 + 20) != a2[1];
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *((_QWORD *)a2 + 1);
    v13 = *(_OWORD *)a2;
    v14 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)v9 = v13;
    *(_OWORD *)(a1 + 32) = v14;
    sub_18D053AA8(a1 + 64, (uint64_t)(a2 + 12));
    v15 = sub_18D053AA8(a1 + 256, (uint64_t)(a2 + 60));
    *(_BYTE *)(a1 + 448) = *((_BYTE *)a2 + 432);
    *(_BYTE *)(a1 + 8) = 1;
    if (v10 || v11 != v12)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)a1 + 104))(a1, v15);
    return 0;
  }
  else
  {
    v16 = *(_OWORD *)a2;
    v17 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)v9 = v16;
    *(_OWORD *)(a1 + 32) = v17;
    sub_18D053AA8(a1 + 64, (uint64_t)(a2 + 12));
    sub_18D053AA8(a1 + 256, (uint64_t)(a2 + 60));
    result = 0;
    *(_BYTE *)(a1 + 448) = *((_BYTE *)a2 + 432);
    *(_BYTE *)(a1 + 8) = 1;
  }
  return result;
}

void sub_18D1C1C98(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C1CBC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C1CC8(uint64_t a1)
{
  char v1[19];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1C1D14(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C1D38(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C1D44(uint64_t a1)
{
  char v1[361];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

_QWORD *sub_18D1C1D98(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1C1DAC(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C1DD0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C1DDC(uint64_t a1)
{
  char v1[285];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

double sub_18D1C1E30@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 24) = 0x100000013;
  *(_QWORD *)a2 = &unk_1E25C66B0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319860;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v5 = 0x100000013;
  v3 = &unk_1E25C6710;
  v4 = xmmword_18D319860;
  v6 = &v7;
  *(_QWORD *)&result = sub_18D1C2074(a1, a2, (uint64_t)&v3).n128_u64[0];
  return result;
}

void sub_18D1C1EB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C1EC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 24) = 0x200000013;
  *(_QWORD *)a2 = &unk_1E25C6740;
  *(_OWORD *)(a2 + 8) = xmmword_18D319AA0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v5 = 0x200000013;
  v3 = &unk_1E25C6770;
  v4 = xmmword_18D319AA0;
  v6 = &v7;
  *(_QWORD *)&result = sub_18D1C2074(a1, a2, (uint64_t)&v3).n128_u64[0];
  return result;
}

void sub_18D1C1F4C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C1F60@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  *(_QWORD *)(a3 + 24) = 0x200000013;
  *(_QWORD *)a3 = &unk_1E25C6740;
  *(_OWORD *)(a3 + 8) = xmmword_18D319AA0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  v6 = 0x200000013;
  v4 = &unk_1E25C6770;
  v5 = xmmword_18D319AA0;
  v7 = &v8;
  return sub_18D04C758(a1, a2, a3, (uint64_t)&v4);
}

void sub_18D1C1FE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C1FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x200000013;
  *(_QWORD *)a3 = &unk_1E25C6740;
  *(_OWORD *)(a3 + 8) = xmmword_18D319AA0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  return sub_18D05449C(a1, a2, a3);
}

void sub_18D1C204C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1C2060(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

__n128 sub_18D1C2074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  int v8;
  double *v9;
  _DWORD *v10;
  double v11;
  uint64_t i;
  double v13;

  sub_18D1C21A4(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    v8 = *(_DWORD *)(a2 + 16);
    if (v8 >= 2)
    {
      v9 = *(double **)(a2 + 32);
      v10 = *(_DWORD **)(a3 + 32);
      v11 = *v9;
      for (i = 1; i < v8; ++i)
      {
        v13 = v9[i];
        if (v13 < v11)
        {
          *v9 = v13;
          *v10 = v10[i];
          v8 = *(_DWORD *)(a2 + 16);
          v11 = v13;
        }
      }
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

_QWORD *sub_18D1C2114(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1C2128(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C214C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C2158(uint64_t a1)
{
  char v1[19];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

uint64_t sub_18D1C21A4(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  uint64_t i;
  int32x2_t v15;
  int32x4_t v16;
  unsigned int v17;
  int32x4_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  double v32;

  if (a2 == 1)
  {
    v4 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = 1;
    v5 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v5;
    *(_DWORD *)(a4 + 20) = 1;
    if (v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(result + 32);
      v8 = *(_QWORD *)(a3 + 32);
      v9 = *(_QWORD *)(a4 + 32);
      do
      {
        v10 = *(unsigned int *)(result + 8);
        v11 = *(double *)(v7 + 8 * (v10 * v6));
        if (v10 < 2)
        {
          v12 = 0;
        }
        else
        {
          v12 = 0;
          v13 = v10 * v6;
          for (i = 1; i != v10; ++i)
          {
            if (*(double *)(v7 + 8 * (v13 + i)) < v11)
            {
              v11 = *(double *)(v7 + 8 * (v13 + i));
              v12 = i;
            }
          }
        }
        *(double *)(v8 + 8 * v6) = v11;
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v15.i32[1] = 1;
    v15.i32[0] = *(_DWORD *)(result + 8);
    v16 = vdupq_lane_s32(v15, 0);
    v16.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v16;
    v17 = *(_DWORD *)(result + 8);
    v18 = vdupq_lane_s32((int32x2_t)(v17 | 0x100000000), 0);
    v18.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v18;
    if (v17)
    {
      v19 = 0;
      v20 = *(_QWORD *)(result + 32);
      v21 = *(_QWORD *)(a3 + 32);
      v22 = *(_QWORD *)(a4 + 32);
      do
      {
        *(_QWORD *)(v21 + 8 * v19) = *(_QWORD *)(v20 + 8 * v19);
        *(_DWORD *)(v22 + 4 * v19++) = 0;
      }
      while (v19 < *(unsigned int *)(result + 8));
    }
    v23 = *(_DWORD *)(result + 12);
    if (v23 >= 2)
    {
      v24 = *(_QWORD *)(result + 32);
      v25 = *(_QWORD *)(a3 + 32);
      v26 = *(_DWORD *)(result + 8);
      v27 = 1;
      v28 = v26;
      do
      {
        if (v28)
        {
          v29 = 0;
          v30 = *(_QWORD *)(a4 + 32);
          v31 = v28 * v27;
          do
          {
            v32 = *(double *)(v24 + 8 * (v31 + v29));
            if (v32 < *(double *)(v25 + 8 * v29))
            {
              *(double *)(v25 + 8 * v29) = v32;
              *(_DWORD *)(v30 + 4 * v29) = v27;
              v26 = *(_DWORD *)(result + 8);
            }
            ++v29;
          }
          while (v29 < v26);
          v23 = *(_DWORD *)(result + 12);
          v28 = v26;
        }
        ++v27;
      }
      while (v27 < v23);
    }
  }
  return result;
}

_QWORD *sub_18D1C2318(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1C232C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C2350(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C235C(uint64_t a1)
{
  char v1[38];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1C23A8(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C23CC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C23D8(uint64_t a1)
{
  char v1[38];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

double sub_18D1C2424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x100000013;
  *(_QWORD *)a1 = &unk_1E25C66B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319860;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1C2480(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C2494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x1300000013;
  *(_QWORD *)a1 = &unk_1E25C6680;
  *(_OWORD *)(a1 + 8) = xmmword_18D319870;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1C24EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C2500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0xF00000013;
  *(_QWORD *)a1 = &unk_1E25C6620;
  *(_OWORD *)(a1 + 8) = xmmword_18D319880;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1C255C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1C2570(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x1300000013;
  *(_QWORD *)a3 = &unk_1E25C6680;
  *(_OWORD *)(a3 + 8) = xmmword_18D319870;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D1C25C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1C25D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0xF00000013;
  *(_QWORD *)a3 = &unk_1E25C6620;
  *(_OWORD *)(a3 + 8) = xmmword_18D319880;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D1C2628(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C263C(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x100000013;
  *(_QWORD *)a1 = &unk_1E25C66B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319860;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D064EF4(a2, a1, a3);
  return result;
}

void sub_18D1C2694(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C26A8(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x1300000013;
  *(_QWORD *)a1 = &unk_1E25C6680;
  *(_OWORD *)(a1 + 8) = xmmword_18D319870;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D064EF4(a2, a1, a3);
  return result;
}

void sub_18D1C26FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C2710(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0xF00000013;
  *(_QWORD *)a1 = &unk_1E25C6620;
  *(_OWORD *)(a1 + 8) = xmmword_18D319880;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D064EF4(a2, a1, a3);
  return result;
}

void sub_18D1C2768(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D1C277C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x1300000013;
  *(_QWORD *)(a1 + 24) = 0x1300000013;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6680;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 0x14u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1C2898(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D1C28AC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0xF00000013;
  *(_QWORD *)(a1 + 24) = 0xF00000013;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6620;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 0x10u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1C29CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1C29E0(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1C29F4(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C2A18(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C2A24(uint64_t a1)
{
  char v1[15];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

uint64_t sub_18D1C2A70(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xCFF3FCFF3FCFF3FDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xC0300C0300C03)
    sub_18D07AFE4();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCFF3FCFF3FCFF3FDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x6018060180601)
    v9 = 0xC0300C0300C03;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)sub_18D1C2CD4(v7, v9);
  else
    v10 = 0;
  __p = v10;
  v17 = &v10[5456 * v4];
  v19 = &v10[5456 * v9];
  sub_18D1C2BDC(v17, a2);
  v18 = v17 + 5456;
  sub_18D1C2C60(a1, &__p);
  v11 = a1[1];
  v12 = v17;
  if (v18 != v17)
  {
    v13 = v18 - 2320;
    do
    {
      *(_QWORD *)v13 = &unk_1E25C5E70;
      *((_QWORD *)v13 - 366) = &unk_1E25C5E70;
      *((_QWORD *)v13 - 390) = &unk_1E25C5E70;
      v14 = v13 - 3136;
      v13 -= 5456;
    }
    while (v14 != v12);
    v18 = v12;
  }
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_18D1C2BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D1C2E50((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_18D1C2BDC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_18D1CEF14((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  sub_18D1C277C((uint64_t)(a1 + 13), (uint64_t)(a2 + 13));
  sub_18D1C28AC((uint64_t)(a1 + 196), (uint64_t)(a2 + 196));
  return a1;
}

void sub_18D1C2C38(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C2C60(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_18D1C2D1C((uint64_t)(a1 + 2), a1[1], (_OWORD *)a1[1], *a1, (_OWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_18D1C2CD4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC0300C0300C04)
    sub_18D0788A0();
  return operator new(5456 * a2);
}

uint64_t sub_18D1C2D1C(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;

  v10 = (_OWORD *)(a7 - 5456);
  v11 = 5456;
  v12 = a7;
  while (a3 != a5)
  {
    a3 -= 341;
    v11 -= 5456;
    v12 -= 5456;
    v13 = v10 - 341;
    sub_18D1C2DCC(v10, a3);
    v10 = v13;
  }
  return a6;
}

void sub_18D1C2D9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  for (; v2; v2 += 5456)
  {
    v3 = (_QWORD *)(v1 + v2);
    v3[392] = &unk_1E25C5E70;
    v3[26] = &unk_1E25C5E70;
    v3[2] = &unk_1E25C5E70;
  }
  _Unwind_Resume(a1);
}

_OWORD *sub_18D1C2DCC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_18D1CEF14((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  sub_18D1C277C((uint64_t)(a1 + 13), (uint64_t)(a2 + 13));
  sub_18D1C28AC((uint64_t)(a1 + 196), (uint64_t)(a2 + 196));
  return a1;
}

void sub_18D1C2E28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C2E50(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3 != v2)
  {
    v4 = v3 - 290;
    do
    {
      *v4 = &unk_1E25C5E70;
      *(v4 - 366) = &unk_1E25C5E70;
      *(v4 - 390) = &unk_1E25C5E70;
      v5 = v4 - 392;
      v4 -= 682;
    }
    while (v5 != v2);
    *(_QWORD *)(a1 + 16) = v2;
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v6);
  return a1;
}

_OWORD *sub_18D1C2EC4(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = *a2;
  sub_18D1CEF14((uint64_t)(a1 + 1), a3);
  sub_18D1C277C((uint64_t)(a1 + 13), a4);
  sub_18D1C28AC((uint64_t)(a1 + 196), a5);
  return a1;
}

void sub_18D1C2F30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_OWORD *sub_18D1C2F58(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = *a2;
  sub_18D1CEF14((uint64_t)(a1 + 1), a3);
  sub_18D1C277C((uint64_t)(a1 + 13), a4);
  sub_18D1C28AC((uint64_t)(a1 + 196), a5);
  return a1;
}

void sub_18D1C2FC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C2FEC(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x100000013;
  *(_QWORD *)(a1 + 24) = 0x100000013;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C66B0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1C30AC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C30C0(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x1300000013;
  *(_QWORD *)(a1 + 24) = 0x1300000013;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6680;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0x13u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1C317C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C3190(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0xF00000013;
  *(_QWORD *)(a1 + 24) = 0xF00000013;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6620;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0xFu)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

