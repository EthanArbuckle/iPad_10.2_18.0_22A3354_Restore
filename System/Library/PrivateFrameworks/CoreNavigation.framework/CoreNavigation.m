void sub_18D03C8FC(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 199) < 0)
        operator delete(v1[22]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void sub_18D03C940(cnframework::ActiveObjectBase *a1)
{
  *(_QWORD *)a1 = &off_1E25C3C58;
  sub_18D20B884((_QWORD *)a1 + 1044);
  sub_18D20B0C4((_QWORD *)a1 + 1037);
  *((_QWORD *)a1 + 1026) = &unk_1E25B8D98;
  *((_QWORD *)a1 + 1027) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1018) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1010) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1002) = &unk_1E25C5E70;
  sub_18D16C7E0((_QWORD *)a1 + 996);
  sub_18D16C7E0((_QWORD *)a1 + 990);
  sub_18D20AEC4((_QWORD *)a1 + 984);
  sub_18D20AEC4((_QWORD *)a1 + 978);
  sub_18D16C7E0((_QWORD *)a1 + 972);
  sub_18D16C7E0((_QWORD *)a1 + 966);
  sub_18D16C7E0((_QWORD *)a1 + 863);
  *((_QWORD *)a1 + 522) = &unk_1E25B9B60;
  *((_QWORD *)a1 + 843) = &unk_1E25B9250;
  *((_QWORD *)a1 + 521) = &unk_1E25B9250;
  *((_QWORD *)a1 + 180) = &unk_1E25B9B60;
  *((_QWORD *)a1 + 501) = &unk_1E25B9250;
  *((_QWORD *)a1 + 131) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 113) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 99) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 89) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 75) = &unk_1E25C5E70;
  sub_18D16C7E0((_QWORD *)a1 + 62);
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

uint64_t sub_18D03CA50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void *sub_18D03CAA0()
{
}

void *sub_18D03CAAC()
{
}

uint64_t sub_18D03CAB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 1696);
  *(_QWORD *)(a1 + 1696) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(_QWORD *)(a1 + 1688);
  *(_QWORD *)(a1 + 1688) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1680) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_QWORD *)(a1 + 1672);
  *(_QWORD *)(a1 + 1672) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_QWORD *)(a1 + 1664);
  *(_QWORD *)(a1 + 1664) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_QWORD *)(a1 + 1656);
  *(_QWORD *)(a1 + 1656) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_QWORD *)(a1 + 1648);
  *(_QWORD *)(a1 + 1648) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = *(_QWORD *)(a1 + 1640);
  *(_QWORD *)(a1 + 1640) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_QWORD *)(a1 + 1632);
  *(_QWORD *)(a1 + 1632) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11 = *(_QWORD *)(a1 + 1624);
  *(_QWORD *)(a1 + 1624) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v12 = *(_QWORD *)(a1 + 1616);
  *(_QWORD *)(a1 + 1616) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = *(_QWORD *)(a1 + 1608);
  *(_QWORD *)(a1 + 1608) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v14 = *(_QWORD *)(a1 + 1600);
  *(_QWORD *)(a1 + 1600) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v15 = *(_QWORD *)(a1 + 1592);
  *(_QWORD *)(a1 + 1592) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  v16 = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 1584) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  v17 = *(_QWORD *)(a1 + 1576);
  *(_QWORD *)(a1 + 1576) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  v18 = *(_QWORD *)(a1 + 1568);
  *(_QWORD *)(a1 + 1568) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  v19 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  if (*(_BYTE *)(a1 + 1536))
    *(_BYTE *)(a1 + 1536) = 0;
  if (*(_BYTE *)(a1 + 1168))
    *(_BYTE *)(a1 + 1168) = 0;
  if (*(_BYTE *)(a1 + 800))
    *(_BYTE *)(a1 + 800) = 0;
  if (*(_BYTE *)(a1 + 680))
    *(_BYTE *)(a1 + 680) = 0;
  if (*(_BYTE *)(a1 + 288))
    *(_BYTE *)(a1 + 288) = 0;
  if (*(_BYTE *)(a1 + 160))
    *(_BYTE *)(a1 + 160) = 0;
  sub_18D04344C(a1 + 32);
  return a1;
}

void sub_18D03CCD8()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D03CCEC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  void **v13;

  v2 = (_QWORD *)(a1 + 73096);
  v3 = (_QWORD *)(a1 + 72656);
  v4 = (_QWORD *)(a1 + 67128);
  v5 = (_QWORD *)(a1 + 66344);
  v10 = (_QWORD *)(a1 + 44440);
  v11 = (_BYTE *)(a1 + 22104);
  v12 = (_BYTE *)(a1 + 19432);
  *(_QWORD *)a1 = off_1E25C2820;
  *(_QWORD *)(a1 + 73936) = &unk_1E25C5DE0;
  *(_QWORD *)(a1 + 73200) = &unk_1E25C5CC0;
  *(_QWORD *)(a1 + 73144) = &unk_1E25C82D0;
  sub_18D1C3A48((uint64_t *)(a1 + 73184));
  v2[6] = &unk_1E25C5A50;
  *v2 = &unk_1E25C82A0;
  sub_18D1C3D98((uint64_t *)(a1 + 73136));
  *v2 = &unk_1E25C5A20;
  v3[6] = &unk_1E25C5EA0;
  *v3 = &unk_1E25C82A0;
  sub_18D1C3D98((uint64_t *)(a1 + 72696));
  *v3 = &unk_1E25C5A20;
  *(_QWORD *)(a1 + 71920) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 71528) = &unk_1E25C5EA0;
  *(_QWORD *)(a1 + 70096) = &unk_1E25C58D0;
  *(_QWORD *)(a1 + 68664) = &unk_1E25C5DE0;
  v4[13] = &unk_1E25C5CC0;
  v4[6] = &unk_1E25C6410;
  sub_18D1C3A48((uint64_t *)(a1 + 67216));
  v4[6] = &unk_1E25C5A50;
  *v4 = &unk_1E25C63E0;
  sub_18D1C3D98((uint64_t *)(a1 + 67168));
  *v4 = &unk_1E25C5A20;
  v5[6] = &unk_1E25C5EA0;
  *v5 = &unk_1E25C63E0;
  sub_18D1C3D98((uint64_t *)(a1 + 66384));
  *(_QWORD *)(a1 + 64912) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 64176) = &unk_1E25C5EA0;
  *v5 = &unk_1E25C5A20;
  *(_QWORD *)(a1 + 61352) = &unk_1E25C58D0;
  sub_18D05DB90((_QWORD *)(a1 + 61328));
  v6 = -16800;
  v7 = 61240;
  do
  {
    *(_QWORD *)(a1 + v7) = &unk_1E25B8DB8;
    v7 -= 48;
    v6 += 48;
  }
  while (v6);
  *v10 = &unk_1E25B90C0;
  do
  {
    *(_QWORD *)(a1 + 16800 + v6 + 27592) = &unk_1E25B8DE8;
    v6 -= 48;
  }
  while (v6 != -16800);
  *(_QWORD *)(a1 + 27592) = &unk_1E25B9108;
  *(_QWORD *)(a1 + 24864) = &unk_1E25B9B60;
  *(_QWORD *)(a1 + 27432) = &unk_1E25B9250;
  *(_QWORD *)(a1 + 24856) = &unk_1E25B9250;
  *(_QWORD *)(a1 + 22128) = &unk_1E25B9B60;
  *(_QWORD *)(a1 + 24696) = &unk_1E25B9250;
  if (*v11)
    *v11 = 0;
  if (v12[232])
    v12[232] = 0;
  if (*v12)
    *v12 = 0;
  *(_QWORD *)(a1 + 19360) = &unk_1E25B90A0;
  sub_18D04AF7C(a1 + 16800);
  sub_18D04A584(a1 + 16776, *(_QWORD **)(a1 + 16784));
  sub_18D075A20((_QWORD *)(a1 + 15032));
  *(_QWORD *)(a1 + 14880) = &unk_1E25C7370;
  v8 = *(_QWORD *)(a1 + 14920);
  *(_QWORD *)(a1 + 14920) = 0;
  if (v8)
    MEMORY[0x18D78B5BC](v8, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 14880) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 14616) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 8648) = &unk_1E25C3648;
  v13 = (void **)(a1 + 14568);
  sub_18D1C4ED8(&v13);
  *(_QWORD *)(a1 + 8648) = &unk_1E25B9BA8;
  *(_QWORD *)(a1 + 12248) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 9320) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 9128) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 8904) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 8712) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 2696) = &unk_1E25C3648;
  v13 = (void **)(a1 + 8616);
  sub_18D1C4ED8(&v13);
  *(_QWORD *)(a1 + 2696) = &unk_1E25B9BA8;
  *(_QWORD *)(a1 + 6296) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 3368) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 3176) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 2952) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 2760) = &unk_1E25C5E70;
  return sub_18D04A18C(a1);
}

uint64_t sub_18D03D0CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void **v9;

  sub_18D07C868(a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v2)
    MEMORY[0x18D78B5D4](v2, 0x1000C4095D96C66);
  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    MEMORY[0x18D78B5D4](v3, 0x1000C4095D96C66);
  v4 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v4)
    MEMORY[0x18D78B5D4](v4, 0x1000C4095D96C66);
  v5 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v5)
    MEMORY[0x18D78B5D4](v5, 0x1000C40D315E998);
  v6 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v6)
    MEMORY[0x18D78B5D4](v6, 0x1000C4079AA8B5ELL);
  v7 = *(void **)(a1 + 120);
  if (v7)
  {
    *(_QWORD *)(a1 + 128) = v7;
    operator delete(v7);
  }
  v9 = (void **)(a1 + 96);
  sub_18D20C0F8(&v9);
  v9 = (void **)(a1 + 72);
  sub_18D20C1B4(&v9);
  return a1;
}

__n128 cnnavigation::KlobucharModelParameters::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    result = *(__n128 *)(a2 + 56);
    *(__n128 *)(a1 + 56) = result;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  }
  return result;
}

void raven::GnssMeasurementPreprocessor::Reset(raven::GnssMeasurementPreprocessor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int64x2_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  __int128 v52;
  _OWORD v53[54];
  unsigned __int8 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[3];
  _BYTE v58[24];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v58[0] = 3;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, v58, "#gmp,Reset invoked", a4, a5, a6, a7, a8, 12);
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)&v52 + 1) = 0;
  memset(v53, 0, 104);
  *(_QWORD *)&v52 = off_1E25C3EC8;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v9 = *(_OWORD *)((char *)&v53[1] + 8);
  v10 = *(_OWORD *)((char *)&v53[2] + 8);
  v11 = *(_OWORD *)((char *)&v53[3] + 8);
  *((_QWORD *)this + 14) = *((_QWORD *)&v53[4] + 1);
  *((_OWORD *)this + 5) = v10;
  *((_OWORD *)this + 6) = v11;
  *((_OWORD *)this + 4) = v9;
  if ((__int128 *)((char *)this + 24) != &v52)
    sub_18D189238((uint64_t)this + 120, 0, 0, 0);
  *(_QWORD *)&v52 = off_1E25C3EC8;
  *(_QWORD *)v58 = &v53[5];
  sub_18D07C7AC((void ***)v58);
  *(_DWORD *)v58 = 0;
  *(_WORD *)&v58[4] = 0;
  memset(&v53[1], 0, 48);
  *(_WORD *)&v58[14] = 0;
  *(_QWORD *)&v58[6] = 0;
  *(_OWORD *)((char *)this + 168) = 0uLL;
  *(_OWORD *)((char *)this + 152) = 0uLL;
  v12 = v53[1];
  v13 = v53[2];
  *(_OWORD *)((char *)this + 216) = v53[3];
  *(_OWORD *)((char *)this + 200) = v13;
  *(_OWORD *)((char *)this + 184) = v12;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0x7FF8000000000000;
  *((_WORD *)this + 124) = 0;
  v14 = *(_OWORD *)v58;
  *((_QWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 250) = v14;
  *(_OWORD *)((char *)this + 300) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  memset(v53, 0, 72);
  memset(v58, 0, sizeof(v58));
  memset((char *)&v57[1] + 8, 0, 24);
  memset(v57, 0, 23);
  v52 = 0uLL;
  *(_OWORD *)((char *)this + 552) = 0uLL;
  *(_OWORD *)((char *)this + 536) = 0uLL;
  v15 = v53[1];
  v16 = v53[2];
  v17 = v53[3];
  *((_QWORD *)this + 77) = 0;
  *(_OWORD *)((char *)this + 600) = v17;
  *(_OWORD *)((char *)this + 584) = v16;
  *(_OWORD *)((char *)this + 568) = v15;
  *((_QWORD *)this + 78) = 0x7FF8000000000000;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_BYTE *)this + 648) = 0;
  v18 = *(_OWORD *)v58;
  *(_QWORD *)((char *)this + 665) = *(_QWORD *)&v58[16];
  *(_OWORD *)((char *)this + 649) = v18;
  v19 = *(_OWORD *)((char *)&v57[1] + 8);
  *(_QWORD *)((char *)this + 689) = *((_QWORD *)&v57[2] + 1);
  *(_OWORD *)((char *)this + 673) = v19;
  v20 = v57[0];
  *((_QWORD *)this + 89) = *(_QWORD *)((char *)v57 + 15);
  *(_OWORD *)((char *)this + 697) = v20;
  *((_QWORD *)this + 90) = 0x7FF8000000000000;
  *((_QWORD *)this + 91) = 0;
  v21 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 46) = v21;
  *((int64x2_t *)this + 47) = v21;
  *((int64x2_t *)this + 48) = v21;
  *((int64x2_t *)this + 49) = v21;
  *((_QWORD *)this + 100) = 0x7FF8000000000000;
  *((_QWORD *)this + 101) = 0;
  *((int64x2_t *)this + 51) = v21;
  *((int64x2_t *)this + 52) = v21;
  *((int64x2_t *)this + 53) = v21;
  *((int64x2_t *)this + 54) = v21;
  *((_QWORD *)this + 110) = 0x7FF8000000000000;
  *((_QWORD *)this + 111) = 0;
  *((_QWORD *)this + 112) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *((_QWORD *)this + 121) = 0;
  *((_BYTE *)this + 977) = 0;
  v22 = *((_QWORD *)this + 1);
  v52 = (unint64_t)&v52 + 8;
  v53[1] = 0uLL;
  *(_QWORD *)&v53[0] = 0;
  *((_QWORD *)&v53[0] + 1) = &v53[1];
  *(_OWORD *)((char *)&v53[2] + 8) = 0uLL;
  *(_QWORD *)&v53[2] = (char *)&v53[2] + 8;
  WORD4(v53[3]) = 0;
  LOBYTE(v53[4]) = 0;
  LOBYTE(v53[6]) = 0;
  BYTE8(v53[6]) = 0;
  LOBYTE(v53[8]) = 0;
  BYTE8(v53[8]) = 0;
  BYTE8(v53[9]) = 0;
  LOBYTE(v53[10]) = 0;
  LOBYTE(v53[11]) = 0;
  BYTE8(v53[11]) = 0;
  LOBYTE(v53[13]) = 0;
  BYTE8(v53[13]) = 0;
  LOBYTE(v53[15]) = 0;
  BYTE8(v53[15]) = 0;
  LOBYTE(v53[17]) = 0;
  if (v22)
  {
    BYTE8(v53[3]) = *(_BYTE *)(v22 + 588);
    BYTE9(v53[3]) = *(_BYTE *)(v22 + 597);
  }
  v23 = (char *)this + 992;
  sub_18D03D96C((uint64_t)this + 984, *((_QWORD **)this + 124));
  v24 = *((_QWORD *)&v52 + 1);
  *((_QWORD *)this + 123) = v52;
  *((_QWORD *)this + 124) = v24;
  v25 = *(_QWORD *)&v53[0];
  *((_QWORD *)this + 125) = *(_QWORD *)&v53[0];
  if (v25)
  {
    *(_QWORD *)(v24 + 16) = v23;
    *(_QWORD *)&v52 = (char *)&v52 + 8;
    *((_QWORD *)&v52 + 1) = 0;
    *(_QWORD *)&v53[0] = 0;
  }
  else
  {
    *((_QWORD *)this + 123) = v23;
  }
  v26 = (char *)this + 1016;
  sub_18D03D9B4((uint64_t)this + 1008, *((_QWORD **)this + 127));
  v27 = *(_QWORD *)&v53[1];
  *((_QWORD *)this + 126) = *((_QWORD *)&v53[0] + 1);
  *((_QWORD *)this + 127) = v27;
  v28 = *((_QWORD *)&v53[1] + 1);
  *((_QWORD *)this + 128) = *((_QWORD *)&v53[1] + 1);
  if (v28)
  {
    *(_QWORD *)(v27 + 16) = v26;
    *((_QWORD *)&v53[0] + 1) = &v53[1];
    v53[1] = 0uLL;
  }
  else
  {
    *((_QWORD *)this + 126) = v26;
  }
  v29 = (char *)this + 1040;
  sub_18D03D9B4((uint64_t)this + 1032, *((_QWORD **)this + 130));
  v30 = (_QWORD *)*((_QWORD *)&v53[2] + 1);
  *((_QWORD *)this + 129) = *(_QWORD *)&v53[2];
  *((_QWORD *)this + 130) = v30;
  v31 = *(_QWORD *)&v53[3];
  *((_QWORD *)this + 131) = *(_QWORD *)&v53[3];
  if (v31)
  {
    v30[2] = v29;
    v30 = 0;
    *(_QWORD *)&v53[2] = (char *)&v53[2] + 8;
    *(_OWORD *)((char *)&v53[2] + 8) = 0uLL;
  }
  else
  {
    *((_QWORD *)this + 129) = v29;
  }
  v32 = *(_OWORD *)((char *)&v53[14] + 8);
  *((_OWORD *)this + 76) = *(_OWORD *)((char *)&v53[13] + 8);
  *((_OWORD *)this + 77) = v32;
  *((_OWORD *)this + 78) = *(_OWORD *)((char *)&v53[15] + 8);
  *(_OWORD *)((char *)this + 1257) = *(_OWORD *)((char *)&v53[16] + 1);
  v33 = *(_OWORD *)((char *)&v53[10] + 8);
  *((_OWORD *)this + 72) = *(_OWORD *)((char *)&v53[9] + 8);
  *((_OWORD *)this + 73) = v33;
  v34 = *(_OWORD *)((char *)&v53[12] + 8);
  *((_OWORD *)this + 74) = *(_OWORD *)((char *)&v53[11] + 8);
  *((_OWORD *)this + 75) = v34;
  v35 = *(_OWORD *)((char *)&v53[6] + 8);
  *((_OWORD *)this + 68) = *(_OWORD *)((char *)&v53[5] + 8);
  *((_OWORD *)this + 69) = v35;
  v36 = *(_OWORD *)((char *)&v53[8] + 8);
  *((_OWORD *)this + 70) = *(_OWORD *)((char *)&v53[7] + 8);
  *((_OWORD *)this + 71) = v36;
  v37 = *(_OWORD *)((char *)&v53[4] + 8);
  *((_OWORD *)this + 66) = *(_OWORD *)((char *)&v53[3] + 8);
  *((_OWORD *)this + 67) = v37;
  sub_18D03D9B4((uint64_t)&v53[2], v30);
  sub_18D03D9B4((uint64_t)v53 + 8, *(_QWORD **)&v53[1]);
  sub_18D03D96C((uint64_t)&v52, *((_QWORD **)&v52 + 1));
  *((_BYTE *)this + 2208) = 0;
  *((_DWORD *)this + 553) = -1;
  *((_BYTE *)this + 2216) = 0;
  *((_DWORD *)this + 555) = -1;
  *((_OWORD *)this + 137) = 0u;
  if (*((_BYTE *)this + 520))
  {
    *((_QWORD *)this + 40) = &off_1E25C30B0;
    *((_BYTE *)this + 520) = 0;
  }
  *((_QWORD *)this + 288) = 0;
  if (*((_BYTE *)this + 2296))
    *((_BYTE *)this + 2296) = 0;
  *(_OWORD *)((char *)this + 2312) = 0uLL;
  *((_BYTE *)this + 2336) = 1;
  raven::GnssReceiverBandCorrectionsManager::GnssReceiverBandCorrectionsManager((raven::GnssReceiverBandCorrectionsManager *)&v52, *((const raven::RavenParameters **)this + 1));
  *((_QWORD *)this + 160) = v52;
  v38 = (char *)this + 1296;
  sub_18D03D9B4((uint64_t)this + 1288, *((_QWORD **)this + 162));
  v39 = *(_QWORD *)&v53[0];
  *((_QWORD *)this + 161) = *((_QWORD *)&v52 + 1);
  *((_QWORD *)this + 162) = v39;
  v40 = *((_QWORD *)&v53[0] + 1);
  *((_QWORD *)this + 163) = *((_QWORD *)&v53[0] + 1);
  if (v40)
  {
    *(_QWORD *)(v39 + 16) = v38;
    *((_QWORD *)&v52 + 1) = v53;
    v53[0] = 0uLL;
  }
  else
  {
    *((_QWORD *)this + 161) = v38;
  }
  v41 = *(_QWORD *)&v53[1];
  *(_QWORD *)&v53[1] = 0;
  sub_18D20B088((uint64_t *)this + 164, v41);
  v42 = *((_QWORD *)&v53[1] + 1);
  *((_QWORD *)&v53[1] + 1) = 0;
  v43 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = v42;
  if (v43)
    sub_18D20B03C((uint64_t)this + 1320, v43);
  if (*((unsigned __int8 *)this + 2160) == v54)
  {
    if (*((_BYTE *)this + 2160))
      memcpy((char *)this + 1336, (char *)&v53[2] + 8, 0x334uLL);
  }
  else if (*((_BYTE *)this + 2160))
  {
    *((_BYTE *)this + 2160) = 0;
  }
  else
  {
    *((_QWORD *)this + 166) = &unk_1E25C4350;
    memcpy((char *)this + 1336, (char *)&v53[2] + 8, 0x334uLL);
    *((_BYTE *)this + 2160) = 1;
  }
  v44 = *((_QWORD *)&v53[1] + 1);
  *((_QWORD *)this + 273) = v56;
  *(_OWORD *)((char *)this + 2168) = v55;
  *((_QWORD *)&v53[1] + 1) = 0;
  if (v44)
    sub_18D20B03C((uint64_t)&v53[1] + 8, v44);
  v45 = *(_QWORD *)&v53[1];
  *(_QWORD *)&v53[1] = 0;
  if (v45)
  {
    v46 = sub_18D04344C(v45);
    MEMORY[0x18D78B5D4](v46, 0x10E0C401B4558CBLL);
  }
  sub_18D03D9B4((uint64_t)&v52 + 8, *(_QWORD **)&v53[0]);
  v47 = *((_QWORD *)this + 1);
  if (v47)
  {
    if (!*(_BYTE *)(v47 + 577))
      goto LABEL_44;
    if (*((_BYTE *)this + 2600))
    {
      sub_18D04344C((uint64_t)this + 2560);
      v47 = *((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 319) = v47;
    *((_OWORD *)this + 160) = 0u;
    *((_OWORD *)this + 161) = 0u;
    *((_DWORD *)this + 648) = 1065353216;
    *((_BYTE *)this + 2600) = 1;
    if (v47)
    {
LABEL_44:
      if (*(_BYTE *)(v47 + 2544))
      {
        v48 = operator new();
        *(_QWORD *)v48 = &off_1E25B9B08;
        v50.i64[1] = 0;
        *(_OWORD *)(v48 + 8) = 0u;
        *(_OWORD *)(v48 + 24) = 0u;
        *(_QWORD *)(v48 + 40) = 0;
        *(_QWORD *)(v48 + 48) = 3600;
        *(_DWORD *)(v48 + 40) = 1065353216;
        *(_QWORD *)(v48 + 56) = 0;
        v51 = *((_QWORD *)this + 318);
        *((_QWORD *)this + 318) = v48;
        if (v51)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          v48 = *((_QWORD *)this + 318);
        }
        v50.i64[0] = *(_QWORD *)(*((_QWORD *)this + 1) + 2552);
        v52 = 0uLL;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v52, 0, v50, v49);
        cnnavigation::SphericalHarmonicsIonosphereModel::SetDataAgeThreshold((cnnavigation::SphericalHarmonicsIonosphereModel *)v48, (const CNTimeSpan *)&v52);
      }
    }
  }
}

void sub_18D03D93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 - 112) = &a21;
  sub_18D07C7AC((void ***)(v21 - 112));
  _Unwind_Resume(a1);
}

void sub_18D03D96C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_18D03D96C(a1, *a2);
    sub_18D03D96C(a1, a2[1]);
    sub_18D18533C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_18D03D9B4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_18D03D9B4(a1, *a2);
    sub_18D03D9B4(a1, a2[1]);
    operator delete(a2);
  }
}

void cnframework::ActiveObjectBase::SetThreadingModel(uint64_t a1, _BYTE *a2)
{
  std::mutex *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::__thread_struct *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  char v27;
  pthread_t v28;
  void *__p[2];
  char v30;
  unsigned __int8 v31;

  v4 = (std::mutex *)(a1 + 368);
  std::mutex::lock((std::mutex *)(a1 + 368));
  if (*(_BYTE *)(a1 + 168))
    v5 = 0;
  else
    v5 = atomic_load((unsigned __int8 *)(a1 + 352));
  LOWORD(v28) = 3;
  v31 = 2;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
  if (v30 >= 0)
    v11 = __p;
  else
    LOBYTE(v11) = __p[0];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v31, "%s changing threading model from %u to %u", v6, v7, v8, v9, v10, (char)v11);
  if (v30 < 0)
    operator delete(__p[0]);
  v17 = *a2;
  if (v5 != v17)
  {
    if (v17 == 1)
    {
      if (*(_BYTE *)(a1 + 168))
      {
        LOWORD(__p[0]) = 3;
        LOBYTE(v28) = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v28, "cannot switch into MultiThreaded due to configuration", v12, v13, v14, v15, v16, v27);
        __assert_rtn("SetThreadingModel", "activeobjectbase.cpp", 285, "false && \"cannot switch into MultiThreaded due to configuration\"");
      }
      atomic_store(1u, (unsigned __int8 *)(a1 + 352));
      v18 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v18);
      v19 = (_QWORD *)operator new();
      *v19 = v18;
      v19[1] = a1;
      __p[0] = v19;
      v20 = pthread_create(&v28, 0, (void *(__cdecl *)(void *))sub_18D07C8C0, v19);
      if (v20)
      {
        std::__throw_system_error(v20, "thread constructor failed");
        __break(1u);
      }
      else
      {
        __p[0] = 0;
        sub_18D07C928((uint64_t **)__p);
        if (!*(_QWORD *)(a1 + 360))
        {
          *(_QWORD *)(a1 + 360) = v28;
          v28 = 0;
          std::thread::~thread((std::thread *)&v28);
          goto LABEL_18;
        }
      }
      std::terminate();
    }
    if (!*a2)
    {
      atomic_store(0, (unsigned __int8 *)(a1 + 352));
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 432));
      if (*(_QWORD *)(a1 + 360))
      {
        std::thread::join((std::thread *)(a1 + 360));
      }
      else
      {
        LOWORD(v28) = 3;
        v31 = 4;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
        if (v30 >= 0)
          v26 = __p;
        else
          LOBYTE(v26) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v31, "%s thread not joinable", v21, v22, v23, v24, v25, (char)v26);
        if (v30 < 0)
          operator delete(__p[0]);
      }
    }
  }
LABEL_18:
  std::mutex::unlock(v4);
}

void sub_18D03DC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::mutex *v18;

  if (a18 < 0)
    operator delete(__p);
  std::mutex::unlock(v18);
  _Unwind_Resume(a1);
}

uint64_t cnprint::CNPrinter::GetLogLevel(cnprint::CNPrinter *this)
{
  unsigned int v1;
  uint64_t v2;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4;

  cnprint::CNPrinter::GetCNPrinter(this);
  v1 = dword_1EE061900;
  v4 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v1;
  if (!sub_18D03DE74((uint64_t)&stru_1EE061908, &v4))
    return 255;
  v2 = byte_1EE061980;
  std::timed_mutex::unlock(&stru_1EE061908);
  return v2;
}

void cnprint::CNPrinter::Print(cnprint::CNPrinter *a1, unsigned __int8 *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v12;
  char *v13;

  cnprint::CNPrinter::GetCNPrinter(a1);
  v12 = dword_1EE061900;
  v13 = (char *)(std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v12);
  if (sub_18D03DE74((uint64_t)&stru_1EE061908, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)&v13))
  {
    v13 = &a9;
    cnprint::CNPrinter::PrintCore((uint64_t)&unk_1EE0618E8, a1, a2, a3, &a9);
    std::timed_mutex::unlock(&stru_1EE061908);
  }
}

void *cnprint::CNPrinter::GetCNPrinter(cnprint::CNPrinter *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1EE0618E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EE0618E0))
  {
    cnprint::CNPrinter::CNPrinter((cnprint::CNPrinter *)&unk_1EE0618E8);
    __cxa_atexit((void (*)(void *))sub_18D09910C, &unk_1EE0618E8, &dword_18D038000);
    __cxa_guard_release(&qword_1EE0618E0);
  }
  return &unk_1EE0618E8;
}

void sub_18D03DE5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE0618E0);
  _Unwind_Resume(a1);
}

uint64_t sub_18D03DE74(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4;
  std::chrono::steady_clock::time_point v5;
  std::chrono::system_clock::time_point v6;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8;
  uint64_t v9;
  std::unique_lock<std::mutex> v11;

  v11.__m_ = (std::unique_lock<std::mutex>::mutex_type *)a1;
  v11.__owns_ = 1;
  std::mutex::lock((std::mutex *)a1);
  if (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    while (1)
    {
      if (!*(_BYTE *)(a1 + 112))
        goto LABEL_20;
      if (*a2 <= std::chrono::steady_clock::now().__d_.__rep_)
        goto LABEL_18;
      v4 = *a2;
      v5.__d_.__rep_ = v4 - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1)
        break;
LABEL_17:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= *a2)
        goto LABEL_18;
    }
    std::chrono::steady_clock::now();
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v6.__d_.__rep_)
    {
      if (v6.__d_.__rep_ < 1)
      {
        if ((unint64_t)v6.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v7 = 0x8000000000000000;
          goto LABEL_15;
        }
      }
      else if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v7 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_13;
      }
      v7 = 1000 * v6.__d_.__rep_;
    }
    else
    {
      v7 = 0;
    }
LABEL_13:
    if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_16:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 64), &v11, v8);
      std::chrono::steady_clock::now();
      goto LABEL_17;
    }
LABEL_15:
    v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
    goto LABEL_16;
  }
LABEL_18:
  if (*(_BYTE *)(a1 + 112))
  {
    v9 = 0;
  }
  else
  {
LABEL_20:
    v9 = 1;
    *(_BYTE *)(a1 + 112) = 1;
  }
  if (v11.__owns_)
    std::mutex::unlock(v11.__m_);
  return v9;
}

void cnprint::CNPrinter::PrintCore(uint64_t a1, _WORD *a2, unsigned __int8 *a3, char *__format, va_list a5)
{
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint8x8_t v17;
  tm *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  const std::ios_base *v22;
  const std::locale::facet *v23;
  std::ios_base::fmtflags v24;
  uint64_t v25;
  const std::locale *v26;
  std::ios_base *v27;
  std::locale *rdbuf;
  std::locale *v29;
  void *locale;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  void **v53;
  uint64_t v54;
  _QWORD *v55;
  std::string *v56;
  size_t v57;
  std::string *v58;
  std::string::size_type size;
  uint64_t v60;
  void **v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  os_log_type_t v66;
  NSObject *v67;
  NSObject *v68;
  void *v69[2];
  unsigned __int8 v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::locale v74[2];
  int64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *tm_zone;
  time_t v80;
  void *v81[2];
  unsigned __int8 v82;
  std::locale v83;
  std::locale v84;
  uint64_t v85;
  unsigned __int8 v86;
  void *v87;
  uint64_t v88;
  unsigned __int8 v89;
  void *__p;
  char v91;
  uint64_t v92;
  uint8_t buf[16];
  uint64_t v94;
  _QWORD v95[10];
  char v96;
  uint64_t v97;
  char __str[2048];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 160) & 7) != 0)
  {
    v7 = *a3;
    v8 = v7 != 255 && v7 >= *(unsigned __int8 *)(a1 + 152);
    if (v8 && vsnprintf(__str, 0x800uLL, __format, a5) >= 1)
    {
      sub_18D0778AC(v81, __str);
      v10 = *(_QWORD *)(a1 + 160);
      if ((v10 & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 176);
        if (v11)
        {
          v12 = (unsigned __int16)*a2;
          v13 = a1 + 176;
          do
          {
            v14 = *(unsigned __int16 *)(v11 + 32);
            v15 = v14 >= v12;
            if (v14 >= v12)
              v16 = (uint64_t *)v11;
            else
              v16 = (uint64_t *)(v11 + 8);
            if (v15)
              v13 = v11;
            v11 = *v16;
          }
          while (*v16);
          if (v13 != a1 + 176 && v12 >= *(unsigned __int16 *)(v13 + 32))
          {
            if ((v82 & 0x80u) == 0)
              v61 = v81;
            else
              v61 = (void **)v81[0];
            switch(*a3)
            {
              case 1u:
                v62 = *(NSObject **)(v13 + 40);
                if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v61;
                  _os_log_debug_impl(&dword_18D038000, v62, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
                }
                break;
              case 2u:
                v68 = *(NSObject **)(v13 + 40);
                if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v61;
                  v65 = v68;
                  v66 = OS_LOG_TYPE_INFO;
                  goto LABEL_124;
                }
                break;
              case 3u:
                v64 = *(NSObject **)(v13 + 40);
                if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v61;
                  v65 = v64;
                  v66 = OS_LOG_TYPE_DEFAULT;
LABEL_124:
                  _os_log_impl(&dword_18D038000, v65, v66, "%s", buf, 0xCu);
                }
                break;
              case 4u:
                v67 = *(NSObject **)(v13 + 40);
                if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v61;
                  _os_log_error_impl(&dword_18D038000, v67, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
                }
                break;
              case 5u:
                v63 = *(NSObject **)(v13 + 40);
                if (os_log_type_enabled(v63, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v61;
                  _os_log_fault_impl(&dword_18D038000, v63, OS_LOG_TYPE_FAULT, "%s", buf, 0xCu);
                }
                break;
              default:
                break;
            }
          }
        }
      }
      if ((*(_QWORD *)(a1 + 160) & 7) != 0)
      {
        if ((v10 & 1) == 0
          || (v17 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(a1 + 160) & 7)),
              v17.i16[0] = vaddlv_u8(v17),
              v17.u32[0] >= 2uLL))
        {
          sub_18D076238((uint64_t)buf);
          v80 = time(0);
          v18 = localtime(&v80);
          v19 = *(_OWORD *)&v18->tm_sec;
          v20 = *(_OWORD *)&v18->tm_mon;
          v21 = *(_OWORD *)&v18->tm_isdst;
          tm_zone = v18->tm_zone;
          v77 = v20;
          v78 = v21;
          v76 = v19;
          MEMORY[0x18D78B2C8](&v87, &v94);
          if ((_BYTE)v87)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)&v95[-1] + *(_QWORD *)(v94 - 24)));
            std::locale::use_facet(&v84, MEMORY[0x1E0DE4CD0]);
            std::locale::~locale(&v84);
            v22 = (const std::ios_base *)((char *)&v95[-1] + *(_QWORD *)(v94 - 24));
            if (v22[1].__fmtflags_ == -1)
            {
              std::ios_base::getloc(v22);
              v23 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4A90]);
              v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 32);
              std::locale::~locale(&v83);
              v22[1].__fmtflags_ = v24;
            }
            if (!std::time_put<char,std::ostreambuf_iterator<char>>::put())
              std::ios_base::clear((std::ios_base *)((char *)&v95[-1] + *(_QWORD *)(v94 - 24)), *(_DWORD *)((char *)&v95[3] + *(_QWORD *)(v94 - 24)) | 1);
          }
          MEMORY[0x18D78B2D4](&v87);
          sub_18D076A18(&v94, (uint64_t)"\t", 1);
          pthread_self();
          sub_18D099F88((uint64_t)&v87);
          v25 = *((_QWORD *)v87 - 3);
          v26 = std::locale::classic();
          v27 = (std::ios_base *)((char *)&v87 + v25);
          std::ios_base::getloc(v27);
          std::ios_base::imbue(v27, v26);
          std::locale::~locale(&v84);
          rdbuf = (std::locale *)v27->__rdbuf_;
          if (rdbuf)
          {
            (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v26);
            v29 = rdbuf + 1;
            std::locale::locale(v74, v29);
            std::locale::operator=(v29, v26);
            std::locale::~locale(v74);
          }
          std::locale::~locale((std::locale *)&v73);
          std::ostream::operator<<();
          sub_18D076DE8((uint64_t)&v88, &v84);
          if ((v86 & 0x80u) == 0)
            locale = &v84;
          else
            locale = v84.__locale_;
          if ((v86 & 0x80u) == 0)
            v31 = v86;
          else
            v31 = v85;
          v32 = sub_18D076A18(&v94, (uint64_t)locale, v31);
          if ((char)v86 < 0)
            operator delete(v84.__locale_);
          v87 = (void *)*MEMORY[0x1E0DE4F60];
          *(void **)((char *)&v87 + *((_QWORD *)v87 - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
          v33 = MEMORY[0x1E0DE4FB8];
          v88 = MEMORY[0x1E0DE4FB8] + 16;
          if (v91 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D78B550](&v92);
          sub_18D076A18(v32, (uint64_t)"\t", 1);
          cnprint::CNPrinter::GetLogLevelString(a3, &v87);
          if ((v89 & 0x80u) == 0)
            v34 = &v87;
          else
            v34 = v87;
          if ((v89 & 0x80u) == 0)
            v35 = v89;
          else
            v35 = v88;
          v36 = sub_18D076A18(&v94, (uint64_t)v34, v35);
          sub_18D076A18(v36, (uint64_t)"\t", 1);
          sub_18D0778AC(&v84, "0x0");
          if ((v86 & 0x80u) == 0)
            v37 = &v84;
          else
            v37 = v84.__locale_;
          if ((v86 & 0x80u) == 0)
            v38 = v86;
          else
            v38 = v85;
          v39 = sub_18D076A18(&v94, (uint64_t)v37, v38);
          sub_18D076A18(v39, (uint64_t)"\t", 1);
          getpid();
          v40 = (_QWORD *)std::ostream::operator<<();
          sub_18D076A18(v40, (uint64_t)"\t", 1);
          v41 = sub_18D076A18(&v94, (uint64_t)"unknown:", 8);
          sub_18D076A18(v41, (uint64_t)"\t", 1);
          std::operator+<char>();
          v42 = std::string::append(&v71, ".", 1uLL);
          v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v72.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          cnprint::CNPrinter::GetLogCategoryString(a2, v69);
          if ((v70 & 0x80u) == 0)
            v44 = v69;
          else
            v44 = (void **)v69[0];
          if ((v70 & 0x80u) == 0)
            v45 = v70;
          else
            v45 = (std::string::size_type)v69[1];
          v46 = std::string::append(&v72, (const std::string::value_type *)v44, v45);
          v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v73.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v48 = std::string::append(&v73, "]", 1uLL);
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v75 = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v74[0].__locale_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v73.__r_.__value_.__l.__data_);
          if ((char)v70 < 0)
            operator delete(v69[0]);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v71.__r_.__value_.__l.__data_);
          if (v75 >= 0)
            v50 = v74;
          else
            v50 = v74[0].__locale_;
          if (v75 >= 0)
            v51 = HIBYTE(v75);
          else
            v51 = (uint64_t)v74[1].__locale_;
          v52 = sub_18D076A18(&v94, (uint64_t)v50, v51);
          sub_18D076A18(v52, (uint64_t)"\t", 1);
          if ((v82 & 0x80u) == 0)
            v53 = v81;
          else
            v53 = (void **)v81[0];
          if ((v82 & 0x80u) == 0)
            v54 = v82;
          else
            v54 = (uint64_t)v81[1];
          v55 = sub_18D076A18(&v94, (uint64_t)v53, v54);
          sub_18D076A18(v55, (uint64_t)"\n", 1);
          sub_18D076DE8((uint64_t)v95, &v73);
          if ((*(_BYTE *)(a1 + 160) & 2) != 0)
          {
            if (*(_QWORD *)(a1 + 344)
              || !sub_18D099368((const void **)(a1 + 192), "")
              && (*(_QWORD *)(a1 + 344) || (std::ofstream::open(), *(_QWORD *)(a1 + 344))))
            {
              if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v56 = &v73;
              else
                v56 = (std::string *)v73.__r_.__value_.__r.__words[0];
              v57 = strlen((const char *)v56);
              sub_18D076A18((_QWORD *)(a1 + 216), (uint64_t)v56, v57);
            }
          }
          if ((*(_BYTE *)(a1 + 160) & 4) != 0)
          {
            if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = &v73;
            else
              v58 = (std::string *)v73.__r_.__value_.__r.__words[0];
            if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
            else
              size = v73.__r_.__value_.__l.__size_;
            sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)v58, size);
          }
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v73.__r_.__value_.__l.__data_);
          if (SHIBYTE(v75) < 0)
            operator delete(v74[0].__locale_);
          if ((char)v86 < 0)
            operator delete(v84.__locale_);
          if ((char)v89 < 0)
            operator delete(v87);
          *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
          v60 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
          *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
          v94 = v60;
          v95[0] = v33 + 16;
          if (v96 < 0)
            operator delete((void *)v95[8]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x18D78B550](&v97);
        }
      }
      if ((char)v82 < 0)
        operator delete(v81[0]);
    }
  }
}

void sub_18D03E8E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,std::locale a38,void *a39,uint64_t a40,uint64_t a41,void *a42)
{
  uint64_t v42;

  if (a2)
  {
    MEMORY[0x18D78B2D4](&a42);
    __cxa_begin_catch(a1);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)(v42 + *(_QWORD *)(STACK[0x220] - 24)));
    __cxa_end_catch();
    JUMPOUT(0x18D03E1E8);
  }
  _Unwind_Resume(a1);
}

void cnframework::Supervisor::RaiseEvent(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  double v6;
  double v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  int8x16_t v31;
  int8x16_t v32;
  cnframework::ActiveObjectBase **v33;
  cnframework::ActiveObjectBase **v34;
  char v35;
  int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;
  unsigned __int8 v41;
  __int16 v42;

  v5 = (_QWORD *)*a2;
  v6 = *(double *)(*a2 + 40) + (double)*(uint64_t *)(*a2 + 32);
  v7 = fabs(v6);
  if ((unint64_t)(*(_QWORD *)&v7 - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(_QWORD *)&v7 - 1) < 0xFFFFFFFFFFFFFLL
    || *(_QWORD *)&v6 == 0)
  {
    std::mutex::lock((std::mutex *)(a1 + 680));
    if (*(_BYTE *)(a1 + 672))
    {
      std::mutex::lock((std::mutex *)(a1 + 608));
      if (!*(_BYTE *)(a1 + 584)
        || (*(_OWORD *)__p = *(_OWORD *)(*a2 + 32), sub_18D03FE4C((double *)(a1 + 592), (double *)__p)))
      {
        *(_BYTE *)(a1 + 584) = 1;
        *(_OWORD *)(a1 + 592) = *(_OWORD *)(*a2 + 32);
      }
      std::mutex::unlock((std::mutex *)(a1 + 608));
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 520));
      v16 = *(uint64_t **)(a1 + 496);
      v17 = *(uint64_t **)(a1 + 504);
      while (v16 != v17)
      {
        v18 = *v16;
        v19 = (std::__shared_weak_count *)a2[1];
        v37 = *a2;
        v38 = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        cnframework::ActiveObjectBase::ReceiveEvent(v18, (uint64_t)&v37, a3, v11, v12, v13, v14, v15);
        v22 = v38;
        if (v38)
        {
          v23 = (unint64_t *)&v38->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        ++v16;
      }
      std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 520));
      std::mutex::unlock((std::mutex *)(a1 + 680));
      if (*(_BYTE *)(a1 + 8) || (v36 = atomic_load((unsigned __int8 *)(a1 + 744))) == 0)
      {
        std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 520));
        do
        {
          v33 = *(cnframework::ActiveObjectBase ***)(a1 + 496);
          v34 = *(cnframework::ActiveObjectBase ***)(a1 + 504);
          if (v33 == v34)
            break;
          v35 = 0;
          do
          {
            if (cnframework::ActiveObjectBase::HandleNextEvent(*v33, v31, v32))
              v35 = 1;
            ++v33;
          }
          while (v33 != v34);
        }
        while ((v35 & 1) != 0);
        std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 520));
      }
    }
    else
    {
      std::mutex::unlock((std::mutex *)(a1 + 680));
    }
  }
  else
  {
    v42 = 3;
    v41 = 4;
    cnframework::GenericEvent::GetEventName(v5, __p);
    LOBYTE(v30) = __p[0];
    if (v40 >= 0)
      v30 = __p;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "Supervisor::RaiseEvent() called with event type %s with invalid timestamp %.3lf.", v25, v26, v27, v28, v29, (char)v30);
    if (v40 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D03ED14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::mutex *v18;

  std::mutex::unlock(v18);
  _Unwind_Resume(a1);
}

uint64_t cnframework::ActiveObjectBase::HandleNextEvent(cnframework::ActiveObjectBase *this, int8x16_t a2, int8x16_t a3)
{
  int v4;
  std::mutex *v5;
  int v6;
  _BOOL4 v7;
  uint64_t EventWithoutMutex;

  v4 = *((_DWORD *)this + 34) + 1;
  *((_DWORD *)this + 34) = v4;
  if (*((_BYTE *)this + 168))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = (std::mutex *)((char *)this + 72);
    v7 = std::mutex::try_lock((std::mutex *)((char *)this + 72));
    v6 = v7;
    if (!*((_BYTE *)this + 168))
    {
      if (!v7)
      {
        EventWithoutMutex = 0;
        --*((_DWORD *)this + 34);
        return EventWithoutMutex;
      }
      v6 = 1;
      goto LABEL_9;
    }
    v4 = *((_DWORD *)this + 34);
  }
  if (v4 > 1)
  {
    EventWithoutMutex = 0;
    goto LABEL_10;
  }
LABEL_9:
  EventWithoutMutex = cnframework::ActiveObjectBase::HandleNextEventWithoutMutex(this, a2, a3);
  v4 = *((_DWORD *)this + 34);
LABEL_10:
  *((_DWORD *)this + 34) = v4 - 1;
  if (v6)
    std::mutex::unlock(v5);
  return EventWithoutMutex;
}

void sub_18D03EE20(_Unwind_Exception *exception_object)
{
  std::mutex *v1;
  int v2;

  if (v2)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t cnframework::ActiveObjectBase::HandleNextEventWithoutMutex(cnframework::ActiveObjectBase *this, int8x16_t a2, int8x16_t a3)
{
  cnframework::ActiveObjectBase *v3;
  std::mutex *v4;
  int v5;
  cnframework::GenericEvent **v6;
  int v7;
  cnframework::GenericEvent *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  BOOL v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v72;
  cnframework::ActiveObjectBase *v73;
  std::mutex *v74;
  uint64_t v75;
  int v76;
  int64_t v77;
  void *v78[2];
  char v79;
  unsigned __int8 v80;
  __int16 v81;
  cnframework::GenericEvent *v82;
  std::__shared_weak_count *v83;
  void *__p[2];
  char v85;
  void **v86;
  uint64_t v87;

  v3 = this;
  v4 = 0;
  v87 = *MEMORY[0x1E0C80C00];
  v82 = 0;
  v83 = 0;
  v5 = *((unsigned __int8 *)this + 168);
  if (!*((_BYTE *)this + 168))
  {
    v4 = (std::mutex *)((char *)this + 280);
    std::mutex::lock((std::mutex *)((char *)this + 280));
  }
  v6 = (cnframework::GenericEvent **)*((_QWORD *)v3 + 30);
  if (v6 == *((cnframework::GenericEvent ***)v3 + 31))
    goto LABEL_16;
  v7 = *((_DWORD *)v3 + 68);
  if (v7 == 1)
  {
    v8 = *v6;
    v9 = *((_QWORD *)*v6 + 4);
    v10 = *((double *)*v6 + 5);
    v11 = CNTimeSpan::operator-((uint64_t)v3 + 176, (_QWORD *)v3 + 28, a2, a3);
    if (v9)
      v13 = 1;
    else
      v13 = (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (v13 && (v11 || (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v9 != v11)
    {
      if (v9 >= v11)
        goto LABEL_16;
    }
    else if (v10 > v12)
    {
      goto LABEL_16;
    }
LABEL_20:
    v15 = (std::__shared_weak_count *)v6[1];
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v82 = v8;
    v83 = v15;
    v18 = *((_QWORD *)v3 + 30);
    v19 = *((_QWORD *)v3 + 31);
    v20 = v19 - v18;
    if (v19 - v18 >= 17)
    {
      v74 = v4;
      v75 = *((_QWORD *)v3 + 31);
      v76 = v5;
      v72 = *((_QWORD *)v3 + 30);
      v73 = v3;
      v21 = 0;
      v22 = v20 >> 4;
      *(_OWORD *)__p = *(_OWORD *)v18;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v23 = (unint64_t)((v20 >> 4) - 2) >> 1;
      v24 = v18;
      v77 = v23;
      while (1)
      {
        v25 = v24;
        v24 += 16 * (v21 + 1);
        v26 = 2 * v21;
        v21 = (2 * v21) | 1;
        v27 = v26 + 2;
        if (v26 + 2 >= v22)
          goto LABEL_44;
        v28 = *(_QWORD *)v24;
        v29 = *(std::__shared_weak_count **)(v24 + 8);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v32 = *(_QWORD *)(v24 + 16);
        v33 = *(std::__shared_weak_count **)(v24 + 24);
        if (v33)
        {
          v34 = v22;
          v35 = (unint64_t *)&v33->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
          v37 = cnframework::GenericEvent::operator>(v28, v32);
          do
            v38 = __ldaxr(v35);
          while (__stlxr(v38 - 1, v35));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          v22 = v34;
          v23 = v77;
          if (v29)
          {
LABEL_39:
            v39 = (unint64_t *)&v29->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
              if (!v37)
                goto LABEL_44;
LABEL_43:
              v24 += 16;
              v21 = v27;
              goto LABEL_44;
            }
          }
        }
        else
        {
          v37 = cnframework::GenericEvent::operator>(v28, v32);
          if (v29)
            goto LABEL_39;
        }
        if (v37)
          goto LABEL_43;
LABEL_44:
        sub_18D07CBBC(v25, (__int128 *)v24);
        if (v21 > v23)
        {
          if (v75 - 16 == v24)
          {
            sub_18D07CBBC(v24, (__int128 *)__p);
            v5 = v76;
          }
          else
          {
            sub_18D07CBBC(v24, (__int128 *)(v75 - 16));
            sub_18D07CBBC(v75 - 16, (__int128 *)__p);
            v5 = v76;
            sub_18D07C990(v72, v24 + 16, (v24 + 16 - v72) >> 4);
          }
          v41 = (std::__shared_weak_count *)__p[1];
          v3 = v73;
          v4 = v74;
          if (__p[1])
          {
            v42 = (unint64_t *)((char *)__p[1] + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v19 = *((_QWORD *)v73 + 31);
          break;
        }
      }
    }
    *((_QWORD *)v3 + 31) = sub_18D07C868(v19 - 16);
    if (!v5)
      std::mutex::unlock(v4);
    if (v82 && *((_BYTE *)v82 + 8))
    {
      __p[0] = (void *)cnframework::GenericEvent::GetEventType(v82, v44, v45, v46, v47, v48, v49, v50);
      v51 = sub_18D03FCF0((_QWORD *)v3 + 4, (uint64_t *)__p);
      if (v51)
      {
        sub_18D07CC20((uint64_t)__p, (uint64_t)(v51 + 3));
        v78[0] = v3;
        if (!v86)
          sub_18D07CC84();
        (*((void (**)(void **, void **, cnframework::GenericEvent *))*v86 + 6))(v86, v78, v82);
        v52 = v86;
        if (v86 == __p)
        {
          v53 = 4;
          v52 = __p;
        }
        else
        {
          if (!v86)
          {
LABEL_78:
            v14 = 2;
            goto LABEL_79;
          }
          v53 = 5;
        }
        (*((void (**)(void))*v52 + v53))();
        goto LABEL_78;
      }
      v81 = 3;
      v80 = 5;
      (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)v3 + 16))(__p, v3);
      v60 = v85;
      v61 = (char)__p[0];
      cnframework::GenericEvent::GetEventName(v82, v78);
      v67 = __p;
      if (v60 < 0)
        LOBYTE(v67) = v61;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, &v80, "%s has no event handler defined for event type %s.  Dropping event.", v62, v63, v64, v65, v66, (char)v67);
      if (v79 < 0)
        operator delete(v78[0]);
    }
    else
    {
      LOWORD(v78[0]) = 3;
      LOBYTE(v81) = 4;
      (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)v3 + 16))(__p, v3);
      if (v85 >= 0)
        v59 = __p;
      else
        LOBYTE(v59) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v78, (unsigned __int8 *)&v81, "%s received empty event; dropping.",
        v54,
        v55,
        v56,
        v57,
        v58,
        (char)v59);
    }
    if (v85 < 0)
      operator delete(__p[0]);
    goto LABEL_78;
  }
  if (!v7)
  {
    v8 = *v6;
    goto LABEL_20;
  }
LABEL_16:
  if (!v5)
    std::mutex::unlock(v4);
  v14 = 0;
LABEL_79:
  v68 = v83;
  if (v83)
  {
    v69 = (unint64_t *)&v83->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  return v14;
}

void sub_18D03F33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  if (a22 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  sub_18D07C868((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void cnframework::ActiveObjectBase::ReceiveEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  std::mutex *v12;
  int v13;
  uint64_t EventType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char v20;
  cnframework::GenericEvent *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int v27;
  cnframework::GenericEvent *v28[2];
  __int128 v29;

  v29 = *(_OWORD *)(*(_QWORD *)a2 + 32);
  v11 = *(unsigned __int8 *)(a1 + 168);
  if (*(_BYTE *)(a1 + 168))
  {
    v12 = 0;
  }
  else
  {
    v12 = (std::mutex *)(a1 + 280);
    std::mutex::lock((std::mutex *)(a1 + 280));
  }
  if (!*(_BYTE *)(a1 + 169) || sub_18D03F608((double *)&v29, (double *)(a1 + 176)))
  {
    v13 = 1;
    *(_BYTE *)(a1 + 169) = 1;
    *(_OWORD *)(a1 + 176) = v29;
    if (v11)
      goto LABEL_8;
    goto LABEL_7;
  }
  v13 = 0;
  if (!v11)
LABEL_7:
    std::mutex::unlock(v12);
LABEL_8:
  EventType = cnframework::GenericEvent::GetEventType(*(cnframework::GenericEvent **)a2, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16);
  if (v15 == v16)
  {
LABEL_15:
    v20 = 0;
  }
  else
  {
    v17 = EventType;
    while (!sub_18D07C81C(*(_QWORD *)(v15 + 8), v17) && !*(_BYTE *)v15
         || *(_QWORD *)(v15 + 24) != a3 && !*(_BYTE *)(v15 + 16))
    {
      v15 += 32;
      if (v15 == v16)
        goto LABEL_15;
    }
    v21 = *(cnframework::GenericEvent **)(a2 + 8);
    v28[0] = *(cnframework::GenericEvent **)a2;
    v28[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)((char *)v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v20 = cnframework::ActiveObjectBase::AddEventToEventQueue(a1, v28, v18, v19);
    if (v21)
    {
      v24 = (unint64_t *)((char *)v21 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(cnframework::GenericEvent *))(*(_QWORD *)v21 + 16))(v21);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 168))
  {
    v26 = atomic_load((unsigned __int8 *)(a1 + 352));
    if (v26 == 1)
    {
      v27 = *(_DWORD *)(a1 + 272);
      if (v27 == 1)
      {
        if (!v13)
          return;
      }
      else if (v27 || (v20 & 1) == 0)
      {
        return;
      }
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 432));
    }
  }
}

void sub_18D03F58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D07C868((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t cnframework::GenericEvent::GetEventType(cnframework::GenericEvent *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  if (*((_BYTE *)this + 8))
    return *((_QWORD *)this + 3);
  v11 = 3;
  v10 = 5;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "Attempted to access type of uninitialized GenericEvent.", a4, a5, a6, a7, a8, v9);
  return MEMORY[0x1E0DE4F20];
}

BOOL sub_18D03F608(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  BOOL v5;

  v2 = *a1;
  if (!*(_QWORD *)a1)
  {
    v3 = a1[1];
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_7:
      v5 = v3 <= a2[1];
      return !v5;
    }
  }
  v4 = *a2;
  if (*(_QWORD *)a2 || ((_QWORD)a2[1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v5 = *(_QWORD *)&v2 <= *(_QWORD *)&v4;
    if (*(_QWORD *)&v2 != *(_QWORD *)&v4)
      return !v5;
    v3 = a1[1];
    goto LABEL_7;
  }
  v5 = a1[1] <= a2[1];
  return !v5;
}

uint64_t CNTimeSpan::operator-(uint64_t a1, _QWORD *a2, int8x16_t a3, int8x16_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v7[2];

  a4.i64[0] = a2[1];
  v4 = __OFSUB__(*(_QWORD *)a1, *a2);
  v5 = *(_QWORD *)a1 - *a2;
  if (v4)
    return 0;
  *(double *)a3.i64 = *(double *)(a1 + 8) - *(double *)a4.i64;
  v7[0] = 0;
  v7[1] = 0;
  CNTimeSpan::SetTimeSpan(v7, v5, a3, a4);
  return v7[0];
}

uint64_t *CNTimeSpan::SetTimeSpan(uint64_t *this, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  float64x2_t v5;
  uint64_t v6;
  float64x2_t v7;
  double v8;
  double v9;

  if ((a3.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 && fabs(*(double *)a3.i64) == INFINITY)
  {
    if (a2 == 0x8000000000000000 && *(double *)a3.i64 > 0.0 || a2 == 0x7FFFFFFFFFFFFFFFLL && *(double *)a3.i64 < 0.0)
    {
      *this = 0;
      this[1] = 0x7FF8000000000000;
      return this;
    }
    *this = 0;
    goto LABEL_25;
  }
  if (*(double *)a3.i64 < -9.22337204e18 || *(double *)a3.i64 > 9.22337204e18)
  {
    *this = 0;
    a4.i64[0] = 0x7FF0000000000000;
    v5.f64[0] = NAN;
    v5.f64[1] = NAN;
    a3.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v5), a4, a3).u64[0];
LABEL_25:
    this[1] = a3.i64[0];
    return this;
  }
  *(double *)a4.i64 = (double)(uint64_t)trunc(*(double *)a3.i64);
  v6 = a2 + (uint64_t)*(double *)a3.i64;
  *this = v6;
  if (__OFADD__(a2, (uint64_t)*(double *)a3.i64))
  {
    *this = 0;
    a3.i64[0] = 0x7FF0000000000000;
    v7.f64[0] = NAN;
    v7.f64[1] = NAN;
    a3.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v7), a3, a4).u64[0];
    goto LABEL_25;
  }
  v8 = *(double *)a3.i64 - *(double *)a4.i64;
  *((double *)this + 1) = v8;
  if (v6 >= 1 && v8 < 0.0)
  {
    *this = v6 - 1;
    v9 = 1.0;
LABEL_22:
    *((double *)this + 1) = v8 + v9;
    return this;
  }
  if (v6 < 0 && v8 > 0.0)
  {
    *this = v6 + 1;
    v9 = -1.0;
    goto LABEL_22;
  }
  return this;
}

{
  BOOL v4;
  double v5;
  uint64_t v6;

  if ((a2 & 0x8000000000000000) == 0)
    return CNTimeSpan::SetTimeSpan(this, a2, a3, a4);
  v4 = *(double *)a3.i64 < 0.0;
  v5 = fabs(*(double *)a3.i64);
  v6 = 0x7FF0000000000000;
  if (v4 && v5 == INFINITY)
    v6 = 0x7FF8000000000000;
  *this = 0;
  this[1] = v6;
  return this;
}

BOOL cnframework::GenericEvent::operator>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(double *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(double *)(a2 + 40);
  v6 = v2 > v4;
  if (v2 == v4)
    v6 = v3 > v5;
  v7 = v4 == 0;
  v8 = *(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v10 = __OFSUB__(v8, 0x7FF0000000000000);
    v9 = v8 - 0x7FF0000000000000 < 0;
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  if (v9 != v10)
    v11 = v6;
  else
    v11 = v3 > v5;
  v7 = v2 == 0;
  v12 = *(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v14 = __OFSUB__(v12, 0x7FF0000000000000);
    v13 = v12 - 0x7FF0000000000000 < 0;
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  if (v13 != v14)
    return v11;
  else
    return v3 > v5;
}

uint64_t cnframework::ActiveObjectBase::AddEventToEventQueue(uint64_t a1, cnframework::GenericEvent **a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v5;
  int v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t EventType;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  int v24;
  double v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  double v60;
  __int128 v61;
  void *__p[2];
  char v63;
  unsigned __int8 v64;
  void *v65;
  uint64_t v66;
  char v67;
  uint64_t v68[2];

  v5 = a1;
  v6 = *(unsigned __int8 *)(a1 + 168);
  if (*(_BYTE *)(a1 + 168))
  {
    v7 = 0;
  }
  else
  {
    v7 = (std::mutex *)(a1 + 280);
    std::mutex::lock((std::mutex *)(a1 + 280));
  }
  if (*(_DWORD *)(v5 + 272) != 1)
    goto LABEL_12;
  *(_OWORD *)__p = *((_OWORD *)*a2 + 2);
  v65 = (void *)CNTimeSpan::operator+((uint64_t)__p, (_QWORD *)(v5 + 224), *(int8x16_t *)__p, a4);
  v66 = v8;
  a1 = sub_18D03FE4C((double *)&v65, (double *)(v5 + 176));
  if (!(_DWORD)a1)
    goto LABEL_12;
  v16 = *(uint64_t **)(v5 + 144);
  v17 = *(uint64_t **)(v5 + 152);
  if (v16 == v17)
    goto LABEL_13;
  while (1)
  {
    v18 = *v16;
    EventType = cnframework::GenericEvent::GetEventType(*a2, v9, v10, v11, v12, v13, v14, v15);
    a1 = sub_18D07C81C(v18, EventType);
    if ((a1 & 1) != 0)
      break;
    v16 += 2;
    if (v16 == v17)
    {
      v16 = v17;
      break;
    }
  }
  if (v16 == *(uint64_t **)(v5 + 152))
    goto LABEL_13;
  *(_OWORD *)__p = *((_OWORD *)*a2 + 2);
  v20.i64[1] = (uint64_t)__p[1];
  v20.i64[0] = v16[1];
  v68[0] = 0;
  v68[1] = 0;
  CNTimeSpan::SetTimeSpan(v68, 0, v20, a4);
  v65 = (void *)CNTimeSpan::operator+((uint64_t)__p, v68, v21, v22);
  v66 = v23;
  a1 = sub_18D069E98((double *)&v65, (double *)(v5 + 176));
  if ((a1 & 1) == 0)
  {
LABEL_13:
    ++*(_QWORD *)(v5 + 216);
    v24 = 1;
  }
  else
  {
LABEL_12:
    v24 = 0;
  }
  if (*(_QWORD *)(v5 + 216)
    && ((a1 = CNTimeSpan::operator-(v5 + 176, (_QWORD *)(v5 + 200), a3, a4), !*(_BYTE *)(v5 + 192))
     || v25 + (double)a1 >= 1.0))
  {
    LOWORD(__p[0]) = 3;
    LOBYTE(v68[0]) = 3;
    v34 = *(_QWORD *)(v5 + 176);
    v35 = *(double *)(v5 + 184);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 16))(&v65, v5);
    v60 = v35 + (double)v34;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v68, "Warning: time,%.3lf,%s dropped %llu latent event(s) in the past %.1lf second(s)", v36, v37, v38, v39, v40, SLOBYTE(v60));
    if (v67 < 0)
      operator delete(v65);
    *(_BYTE *)(v5 + 192) = 1;
    *(_OWORD *)(v5 + 200) = *(_OWORD *)(v5 + 176);
    *(_QWORD *)(v5 + 216) = 0;
    if (v24)
      goto LABEL_18;
  }
  else if (v24)
  {
LABEL_18:
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1))
    {
      LOWORD(v68[0]) = 3;
      v64 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 16))(&v65, v5);
      v26 = v67;
      v27 = (char)v65;
      cnframework::GenericEvent::GetEventName(*a2, __p);
      v33 = &v65;
      if (v26 < 0)
        LOBYTE(v33) = v27;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v64, "Warning: %s dropping old %s with time %.3lf at time %.3lf", v28, v29, v30, v31, v32, (char)v33);
      if (v63 < 0)
        operator delete(__p[0]);
      if (v67 < 0)
        operator delete(v65);
    }
    goto LABEL_54;
  }
  v41 = *(_OWORD *)a2;
  v43 = *(char **)(v5 + 248);
  v42 = *(_QWORD *)(v5 + 256);
  if ((unint64_t)v43 >= v42)
  {
    v47 = *(char **)(v5 + 240);
    v48 = (v43 - v47) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      sub_18D07AFE4();
    v61 = v41;
    v50 = v42 - (_QWORD)v47;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51 >> 60)
      sub_18D0788A0();
    v52 = (char *)operator new(16 * v51);
    v53 = &v52[16 * v48];
    *(_OWORD *)v53 = v61;
    if (*((_QWORD *)&v61 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v47 = *(char **)(v5 + 240);
      v43 = *(char **)(v5 + 248);
    }
    if (v43 == v47)
    {
      v46 = (uint64_t)(v53 + 16);
      *(_QWORD *)(v5 + 240) = v53;
      *(_QWORD *)(v5 + 248) = v53 + 16;
      *(_QWORD *)(v5 + 256) = &v52[16 * v51];
    }
    else
    {
      v56 = &v52[16 * v48];
      do
      {
        v57 = *((_OWORD *)v43 - 1);
        v43 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v43 + 1) = 0;
      }
      while (v43 != v47);
      v47 = *(char **)(v5 + 240);
      v58 = *(_QWORD *)(v5 + 248);
      v46 = (uint64_t)(v53 + 16);
      *(_QWORD *)(v5 + 240) = v56;
      *(_QWORD *)(v5 + 248) = v53 + 16;
      *(_QWORD *)(v5 + 256) = &v52[16 * v51];
      while ((char *)v58 != v47)
      {
        v58 -= 16;
        sub_18D07C868(v58);
      }
    }
    if (v47)
      operator delete(v47);
  }
  else
  {
    *(_OWORD *)v43 = v41;
    if (*((_QWORD *)&v41 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = (uint64_t)(v43 + 16);
  }
  *(_QWORD *)(v5 + 248) = v46;
  sub_18D07C990(*(_QWORD *)(v5 + 240), v46, (v46 - *(_QWORD *)(v5 + 240)) >> 4);
LABEL_54:
  if (!v6)
    std::mutex::unlock(v7);
  return v24 ^ 1u;
}

void sub_18D03FC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::mutex *v28;
  int v29;

  if (a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (!v29)
    std::mutex::unlock(v28);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D03FCF0(_QWORD *a1, uint64_t *a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *(_QWORD *)(*a2 + 8);
  if ((v3 & 0x8000000000000000) != 0)
  {
    v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    v5 = 5381;
    do
    {
      v3 = v5;
      v6 = *v4++;
      v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v3;
    if (v3 >= *(_QWORD *)&v7)
      v10 = v3 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v3;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v13 == v3)
      {
        if (sub_18D07C81C(v12[2], *a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v7)
            v13 %= *(_QWORD *)&v7;
        }
        else
        {
          v13 &= *(_QWORD *)&v7 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_18D03FE00(uint64_t a1)
{
  return sub_18D03FE08(a1 + 24);
}

uint64_t sub_18D03FE08(uint64_t a1)
{
  uint64_t v2;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

BOOL sub_18D03FE4C(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;

  v2 = *a1;
  if (!*(_QWORD *)a1)
  {
    v3 = a1[1];
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return v3 < a2[1];
  }
  v4 = *a2;
  if (*(_QWORD *)a2 || ((_QWORD)a2[1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    if (*(_QWORD *)&v2 != *(_QWORD *)&v4)
      return *(_QWORD *)&v2 < *(_QWORD *)&v4;
    v3 = a1[1];
    return v3 < a2[1];
  }
  return a1[1] < a2[1];
}

void sub_18D03FEBC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 352);
  if (v2)
  {
    *(_QWORD *)(a1 + 360) = v2;
    operator delete(v2);
  }
  sub_18D07C868(a1 + 336);
  *(_QWORD *)(a1 + 56) = &unk_1E25B9850;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  *(_QWORD *)(a1 + 56) = off_1E25B93B0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_18D03FF38()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D03FF4C(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (__p)
  {
    v2 = __p;
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[6];
      if (v4 == v2 + 3)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      operator delete(v2);
      v2 = v3;
      if (!v3)
        return;
    }
    v4 = v2 + 3;
    v5 = 4;
    goto LABEL_7;
  }
}

uint64_t raven::PopulateAllTimeFields(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t result;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  result = CNTimeSpan::operator-(a1, (_QWORD *)a2, a3, a4);
  v13[0] = result;
  v13[1] = v9;
  if (*(_BYTE *)(a2 + 16))
  {
    result = CNTimeSpan::operator+(a2 + 24, v13, v7, v8);
    *(_QWORD *)(a1 + 24) = result;
    *(_QWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 16) = 1;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    result = CNTimeSpan::operator+(a2 + 72, v13, v7, v8);
    *(_QWORD *)(a1 + 72) = result;
    *(_QWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 64) = 1;
  }
  if (*(_BYTE *)(a2 + 40))
  {
    result = CNTimeSpan::operator+(a2 + 48, v13, v7, v8);
    *(_QWORD *)(a1 + 48) = result;
    *(_QWORD *)(a1 + 56) = v12;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t CNTimeSpan::operator+(uint64_t a1, _QWORD *a2, int8x16_t a3, int8x16_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v7[2];

  a4.i64[0] = a2[1];
  v4 = __OFADD__(*(_QWORD *)a1, *a2);
  v5 = *(_QWORD *)a1 + *a2;
  if (v4)
    return 0;
  *(double *)a3.i64 = *(double *)(a1 + 8) + *(double *)a4.i64;
  v7[0] = 0;
  v7[1] = 0;
  CNTimeSpan::SetTimeSpan(v7, v5, a3, a4);
  return v7[0];
}

void sub_18D0400B8()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D0400CC()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D0400E0()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D0400F4()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D040120(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[304];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D0408A8(v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 480))
  {
    if (*(_BYTE *)(v8 + 753))
    {
      if (*(_BYTE *)(v8 + 752))
        raven::RavenMovingStateEstimator::HandleEvent(v8 + 536, (const raven::RavenSolutionEvent *)v22);
    }
  }
  else
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 511) >= 0)
      LOBYTE(v21) = v8 - 24;
    else
      v21 = *(_QWORD *)(v8 + 488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D040220(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D040240()
{
  uint64_t *v0;
  uint64_t v1;
  cnframework::GenericEvent *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v31;
  void **v32;
  uint64_t v33;
  uint64_t shared_weak_owners;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  double v42;
  _QWORD v43[26];
  char v44;
  uint64_t v45;
  double v46;
  unsigned __int8 v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[23];
  uint64_t v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  _OWORD v62[2];
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  MEMORY[0x1E0C80A78]();
  v67 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  sub_18D0408A8(v43, v2, (uint64_t)v2, v3, v4, v5, v6, v7);
  *(_QWORD *)(v1 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v1);
  *(_QWORD *)(v1 + 520) = v8;
  sub_18D0409EC((uint64_t)&v49);
  v9 = (cnprint::CNPrinter *)raven::RavenIntegrityEstimator::HandleEvent((raven::SolutionChecker **)(v1 + 496), (const raven::RavenSolutionEvent *)v43, (raven::RavenSolutionEvent *)&v49);
  if ((_DWORD)v9)
  {
    if (v46 + (double)v45 >= *(double *)(*(_QWORD *)(v1 + 488) + 1576))
    {
      v17 = v50;
      v18 = *(_QWORD *)&v51;
      v19 = v52;
      v65 = v53;
      v66 = v54;
      v63 = v55;
      v64 = v56;
      v62[0] = *(_OWORD *)v57;
      *(_QWORD *)((char *)v62 + 15) = *(_QWORD *)&v57[15];
      v20 = v58;
      v21 = v44;
      if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
      {
        v48 = 12;
        v47 = 1;
        v22 = v50;
        v23 = v51;
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v1 + 16))(&v60, v1);
        v42 = v23 + (double)v22;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "t, %.3lf, %s, Integrity check on RavenSolutionEvent failed. Initiating error recovery action, %u, on estimator type, %u", v24, v25, v26, v27, v28, SLOBYTE(v42));
        if (SHIBYTE(v61) < 0)
          operator delete((void *)v60);
      }
      v29 = (std::__shared_weak_count *)operator new(0x60uLL);
      v29->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      v29->__shared_weak_owners_ = 0;
      v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
      v29[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
      v31 = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
      LOBYTE(v29[1].__shared_owners_) = 0;
      v29[1].__shared_weak_owners_ = 0;
      v29[2].__vftable = v31;
      v32 = (void **)&v29[3].__vftable;
      v29[2].__shared_owners_ = 0;
      v29[2].__shared_weak_owners_ = 0;
      sub_18D0778AC(&v29[3].__vftable, "");
      LOBYTE(v29[1].__shared_owners_) = 1;
      v33 = operator new();
      *(_QWORD *)v33 = &off_1E25C1C60;
      *(_QWORD *)(v33 + 8) = &unk_1E25C3618;
      *(_QWORD *)(v33 + 16) = v17;
      *(_QWORD *)(v33 + 24) = v18;
      *(_BYTE *)(v33 + 32) = v19;
      *(_OWORD *)(v33 + 33) = v65;
      *(_QWORD *)(v33 + 49) = v66;
      *(_OWORD *)(v33 + 57) = v63;
      *(_QWORD *)(v33 + 73) = v64;
      *(_QWORD *)(v33 + 96) = *(_QWORD *)((char *)v62 + 15);
      *(_OWORD *)(v33 + 81) = v62[0];
      *(_QWORD *)(v33 + 104) = v20;
      *(_BYTE *)(v33 + 112) = v21;
      *(_BYTE *)(v33 + 113) = 6;
      shared_weak_owners = v29[1].__shared_weak_owners_;
      v29[1].__shared_weak_owners_ = v33;
      if (shared_weak_owners)
        (*(void (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 8))(shared_weak_owners);
      v29[2].__shared_owners_ = v17;
      v29[2].__shared_weak_owners_ = v18;
      sub_18D0778AC(&v60, "EstimatorErrorRecoveryEvent");
      if (SHIBYTE(v29[3].__shared_weak_owners_) < 0)
        operator delete(*v32);
      *(_OWORD *)v32 = v60;
      v29[3].__shared_weak_owners_ = v61;
      v35 = *(_QWORD *)(v1 + 344);
      *(_QWORD *)&v60 = v29 + 1;
      *((_QWORD *)&v60 + 1) = v29;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v35 + 16))(v35, &v60, v1);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      LOWORD(v65) = 12;
      LOBYTE(v63) = 1;
      v10 = v50;
      v11 = v51;
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v1 + 16))(&v60, v1);
      v41 = v11 + (double)v10;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, (unsigned __int8 *)&v63, "t, %.3lf, %s, Integrity check on RavenSolutionEvent failed. However, estimator activity duration is not large enough to raise an error recovery event on estimator type, %u", v12, v13, v14, v15, v16, SLOBYTE(v41));
      if (SHIBYTE(v61) < 0)
        operator delete((void *)v60);
    }
    v59 = 1;
  }
  sub_18D05CEF4(v1, &v49);
}

void sub_18D040668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v1 + 2455) < 0)
    operator delete(*(void **)(v2 - 232));
  _Unwind_Resume(exception_object);
}

uint64_t cnframework::ActiveObjectBase::GetCurrentTime(cnframework::ActiveObjectBase *this)
{
  uint64_t v2;
  std::mutex *v3;

  if (*((_BYTE *)this + 168))
    return *((_QWORD *)this + 22);
  v3 = (std::mutex *)((char *)this + 280);
  std::mutex::lock((std::mutex *)((char *)this + 280));
  v2 = *((_QWORD *)this + 22);
  std::mutex::unlock(v3);
  return v2;
}

void sub_18D04079C()
{
  _BYTE **v0;
  _BYTE *v1;
  cnframework::GenericEvent *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  _QWORD v20[304];
  void *__p[2];
  char v22;
  unsigned __int8 v23;
  __int16 v24;

  MEMORY[0x1E0C80A78]();
  v1 = *v0;
  sub_18D0408A8(v20, v2, (uint64_t)v2, v3, v4, v5, v6, v7);
  if (v1[976])
  {
    raven::RavenSolutionSelector::HandleEvent((raven::RavenSolutionSelector *)(v1 + 480), (const raven::RavenSolutionEvent *)v20, v8, v9, v10, v11, v12, v13);
    sub_18D0409EC((uint64_t)__p);
    if (!raven::RavenSolutionSelector::GetRavenSolution((raven::RavenSolutionSelector *)(v1 + 480), (raven::RavenSolutionEvent *)__p))sub_18D05CEF4((uint64_t)v1, (uint64_t *)__p);
  }
  else
  {
    v24 = 12;
    v23 = 2;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)v1 + 16))(__p, v1);
    if (v22 >= 0)
      v19 = __p;
    else
      LOBYTE(v19) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "Warning: %s Active Object not configured", v14, v15, v16, v17, v18, (char)v19);
    if (v22 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D04088C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x99F]) < 0)
    operator delete((void *)STACK[0x988]);
  _Unwind_Resume(a1);
}

void *sub_18D0408A8(_QWORD *a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int16 v30;
  std::bad_cast v31;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven18RavenSolutionEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven18RavenSolutionEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v31.__vftable = 0;
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    *a1 = &unk_1E25C2B48;
    return memcpy(a1 + 1, (const void *)(v28 + 16), 0x971uLL);
  }
  else
  {
    v30 = 3;
    v29 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    return (void *)sub_18D0409EC((uint64_t)a1);
  }
}

void sub_18D0409CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void *sub_18D0409E0()
{
}

uint64_t sub_18D0409EC(uint64_t a1)
{
  int64x2_t v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C2B48;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 1064) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 1072) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1088) = 0x7FF8000000000000;
  bzero((void *)(a1 + 268), 0x318uLL);
  *(_QWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1256) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 1264) = 0;
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a1 + 1272) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1280) = v2;
  *(int64x2_t *)(a1 + 1296) = v2;
  *(int64x2_t *)(a1 + 1312) = v2;
  *(int64x2_t *)(a1 + 1328) = v2;
  *(_WORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1352) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1360) = v2;
  *(int64x2_t *)(a1 + 1376) = v2;
  *(int64x2_t *)(a1 + 1392) = v2;
  *(int64x2_t *)(a1 + 1408) = v2;
  *(int64x2_t *)(a1 + 1424) = v2;
  *(int64x2_t *)(a1 + 1440) = v2;
  *(_QWORD *)(a1 + 1456) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 1464) = 0;
  *(int64x2_t *)(a1 + 1472) = v2;
  *(int64x2_t *)(a1 + 1488) = v2;
  *(int64x2_t *)(a1 + 1504) = v2;
  *(int64x2_t *)(a1 + 1520) = v2;
  *(_QWORD *)(a1 + 1536) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 1544) = 0;
  *(int64x2_t *)(a1 + 1552) = v2;
  *(int64x2_t *)(a1 + 1568) = v2;
  *(int64x2_t *)(a1 + 1584) = v2;
  *(int64x2_t *)(a1 + 1600) = v2;
  *(_QWORD *)(a1 + 1616) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 1624) = 0;
  *(int64x2_t *)(a1 + 1632) = v2;
  *(int64x2_t *)(a1 + 1648) = v2;
  *(int64x2_t *)(a1 + 1664) = v2;
  *(int64x2_t *)(a1 + 1680) = v2;
  *(int64x2_t *)(a1 + 1696) = v2;
  *(int64x2_t *)(a1 + 1712) = v2;
  *(int64x2_t *)(a1 + 1728) = v2;
  *(_BYTE *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1752) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1760) = v2;
  *(int64x2_t *)(a1 + 1776) = v2;
  *(int64x2_t *)(a1 + 1792) = v2;
  *(int64x2_t *)(a1 + 1808) = v2;
  *(_BYTE *)(a1 + 1824) = 0;
  *(_QWORD *)(a1 + 1832) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1840) = v2;
  *(int64x2_t *)(a1 + 1856) = v2;
  *(int64x2_t *)(a1 + 1872) = v2;
  *(int64x2_t *)(a1 + 1888) = v2;
  *(_BYTE *)(a1 + 1904) = 0;
  *(_QWORD *)(a1 + 1912) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1920) = v2;
  *(int64x2_t *)(a1 + 1936) = v2;
  *(int64x2_t *)(a1 + 1952) = v2;
  *(int64x2_t *)(a1 + 1968) = v2;
  *(_BYTE *)(a1 + 1984) = 0;
  *(_QWORD *)(a1 + 1992) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 2000) = v2;
  *(int64x2_t *)(a1 + 2016) = v2;
  *(_QWORD *)(a1 + 2112) = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_QWORD *)(a1 + 2120) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_QWORD *)(a1 + 2136) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_QWORD *)(a1 + 2312) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 2320) = 0;
  *(_QWORD *)(a1 + 2328) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_QWORD *)(a1 + 2368) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_QWORD *)(a1 + 2408) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 2416) = 0x3FE0000000000000;
  *(_BYTE *)(a1 + 2424) = 0;
  sub_18D040C34(a1);
  return a1;
}

double sub_18D040C34(uint64_t a1)
{
  uint64_t v1;
  int64x2_t v2;
  double result;

  *(_BYTE *)(a1 + 104) = 0;
  v1 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 1064) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 1072) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1088) = 0x7FF8000000000000;
  bzero((void *)(a1 + 268), 0x318uLL);
  *(_QWORD *)(v1 + 1144) = 0;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1096) = 0u;
  *(_OWORD *)(v1 + 1080) = 0u;
  *(_OWORD *)(v1 + 1064) = 0u;
  *(_QWORD *)(v1 + 1152) = 0x7FF8000000000000;
  *(_QWORD *)(v1 + 1160) = 0;
  *(_QWORD *)(v1 + 1168) = 0x7FF8000000000000;
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v1 + 1176) = v2;
  *(int64x2_t *)(v1 + 1192) = v2;
  *(int64x2_t *)(v1 + 1208) = v2;
  *(int64x2_t *)(v1 + 1224) = v2;
  *(_QWORD *)(v1 + 1240) = 0;
  *(_QWORD *)(v1 + 1248) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1256) = v2;
  *(int64x2_t *)(v1 + 1272) = v2;
  *(int64x2_t *)(v1 + 1288) = v2;
  *(int64x2_t *)(v1 + 1304) = v2;
  *(int64x2_t *)(v1 + 1320) = v2;
  *(int64x2_t *)(v1 + 1336) = v2;
  *(_QWORD *)(v1 + 1352) = 0x7FF8000000000000;
  *(_QWORD *)(v1 + 1360) = 0;
  *(int64x2_t *)(v1 + 1368) = v2;
  *(int64x2_t *)(v1 + 1384) = v2;
  *(int64x2_t *)(v1 + 1400) = v2;
  *(int64x2_t *)(v1 + 1416) = v2;
  *(_QWORD *)(v1 + 1432) = 0x7FF8000000000000;
  *(_QWORD *)(v1 + 1440) = 0;
  *(int64x2_t *)(v1 + 1448) = v2;
  *(int64x2_t *)(v1 + 1464) = v2;
  *(int64x2_t *)(v1 + 1480) = v2;
  *(int64x2_t *)(v1 + 1496) = v2;
  *(_QWORD *)(v1 + 1512) = 0x7FF8000000000000;
  *(_QWORD *)(v1 + 1520) = 0;
  *(int64x2_t *)(v1 + 1528) = v2;
  *(int64x2_t *)(v1 + 1544) = v2;
  *(int64x2_t *)(v1 + 1560) = v2;
  *(int64x2_t *)(v1 + 1576) = v2;
  *(int64x2_t *)(v1 + 1592) = v2;
  *(int64x2_t *)(v1 + 1608) = v2;
  *(int64x2_t *)(v1 + 1624) = v2;
  *(_QWORD *)(v1 + 1640) = 0;
  *(_QWORD *)(v1 + 1648) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1656) = v2;
  *(int64x2_t *)(v1 + 1672) = v2;
  *(int64x2_t *)(v1 + 1688) = v2;
  *(int64x2_t *)(v1 + 1704) = v2;
  *(_QWORD *)(v1 + 1720) = 0;
  *(_QWORD *)(v1 + 1728) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1736) = v2;
  *(int64x2_t *)(v1 + 1752) = v2;
  *(int64x2_t *)(v1 + 1768) = v2;
  *(int64x2_t *)(v1 + 1784) = v2;
  *(_QWORD *)(v1 + 1800) = 0;
  *(_QWORD *)(v1 + 1808) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1816) = v2;
  *(int64x2_t *)(v1 + 1832) = v2;
  *(int64x2_t *)(v1 + 1848) = v2;
  *(int64x2_t *)(v1 + 1864) = v2;
  *(_QWORD *)(v1 + 1880) = 0;
  *(_QWORD *)(v1 + 1888) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1896) = v2;
  *(int64x2_t *)(v1 + 1912) = v2;
  *(_QWORD *)(v1 + 2008) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 1992) = 0u;
  *(_OWORD *)(v1 + 1976) = 0u;
  *(_OWORD *)(v1 + 1960) = 0u;
  *(_OWORD *)(v1 + 1944) = 0u;
  *(_OWORD *)(v1 + 1928) = 0u;
  *(_QWORD *)(v1 + 2016) = 0x7FF8000000000000;
  *(_QWORD *)(v1 + 2024) = 0;
  *(_QWORD *)(v1 + 2032) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 2040) = 0u;
  *(_OWORD *)(v1 + 2056) = 0u;
  *(_OWORD *)(v1 + 2072) = 0u;
  *(_OWORD *)(v1 + 2088) = 0u;
  *(_OWORD *)(v1 + 2104) = 0u;
  *(_OWORD *)(v1 + 2120) = 0u;
  *(_OWORD *)(v1 + 2136) = 0u;
  *(_OWORD *)(v1 + 2152) = 0u;
  *(_OWORD *)(v1 + 2168) = 0u;
  *(_OWORD *)(v1 + 2184) = 0u;
  *(_QWORD *)(v1 + 2200) = 0;
  *(_QWORD *)(v1 + 2208) = 0x7FF8000000000000;
  *(_QWORD *)(v1 + 2216) = 0;
  *(_QWORD *)(v1 + 2224) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 2232) = 0u;
  *(_OWORD *)(v1 + 2248) = 0u;
  *(_QWORD *)(v1 + 2264) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 2272) = 0u;
  *(_OWORD *)(v1 + 2288) = 0u;
  *(_QWORD *)(v1 + 2304) = 0x3FE0000000000000;
  *(_QWORD *)(v1 + 2312) = 0x3FE0000000000000;
  *(_BYTE *)(v1 + 2320) = 0;
  return result;
}

void raven::RavenSolutionSelector::HandleEvent(raven::RavenSolutionSelector *this, const raven::RavenSolutionEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  double v31;
  unsigned int v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  cnprint::CNPrinter *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  double v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70[2];
  _BYTE *v71;
  uint64_t v72;
  unsigned __int8 v73;

  if (!*(_BYTE *)this)
  {
    LOWORD(v71) = 12;
    LOBYTE(v70[0]) = 2;
    v19 = "Solution Selector: not configured";
LABEL_46:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, v19, a4, a5, a6, a7, a8, SLOBYTE(v66));
    return;
  }
  v10 = (char *)a2 + 208;
  v73 = *((_BYTE *)a2 + 208);
  v11 = v73;
  switch(v73)
  {
    case 0u:
    case 5u:
      LOWORD(v71) = 12;
      LOBYTE(v70[0]) = 4;
      v12 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v67 = v13 + (double)v12;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, "t,%.3lf,Solution Selector: invalid estimator input type,%d", v14, v15, v16, v17, v18, SLOBYTE(v67));
      return;
    case 1u:
      v40 = *((unsigned __int8 *)this + 464);
      *((_OWORD *)this + 28) = *((_OWORD *)a2 + 73);
      if (!v40)
        *((_BYTE *)this + 464) = 1;
      goto LABEL_26;
    case 2u:
    case 3u:
      if (*(_BYTE *)(*((_QWORD *)this + 1) + 3352))
        v20 = *((_BYTE *)a2 + 2128) == 5;
      else
        v20 = 0;
      if (v20 && (v21 = sub_18D1654E4((_QWORD *)this + 51, v73)) != 0 && *((_BYTE *)v21 + 17))
      {
        if (!*((_BYTE *)this + 464))
          goto LABEL_15;
        v71 = (_BYTE *)(*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v72 = v27;
        if (!*((_BYTE *)this + 464))
          sub_18D164CA0();
        v30 = CNTimeSpan::operator-((uint64_t)&v71, (_QWORD *)this + 56, v28, v29);
        if (v31 + (double)v30 <= 10.0)
          v32 = 5;
        else
LABEL_15:
          v32 = 999;
        LOWORD(v71) = 12;
        LOBYTE(v70[0]) = 3;
        v65 = *((double *)a2 + 2) + (double)*((uint64_t *)a2 + 1);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, "t,%.3lf,Solution Selector: GNSS data starvation - increasing min required GNSS content,est,%d,min_meas_count,%d", v22, v23, v24, v25, v26, SLOBYTE(v65));
      }
      else
      {
        v32 = 1;
      }
      if (*((_DWORD *)a2 + 85) >= v32
        && (*((_DWORD *)a2 + 84) >= v32 || *((_DWORD *)a2 + 83) >= v32 || *((_DWORD *)a2 + 82) >= v32))
      {
        if (!sub_18D1654E4((_QWORD *)this + 2, v11))
        {
          LOWORD(v71) = 12;
          LOBYTE(v70[0]) = 2;
          v33 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v68 = v34 + (double)v33;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, "t,%.3lf,Solution Selector: GNSS data used in estimator,est,%d", v35, v36, v37, v38, v39, SLOBYTE(v68));
        }
        *(_OWORD *)(sub_18D165598((float *)this + 4, v11, &v73) + 3) = *((_OWORD *)a2 + 73);
      }
      goto LABEL_26;
    case 4u:
      return;
    default:
LABEL_26:
      v41 = (cnprint::CNPrinter *)raven::RavenSolutionSelector::SolutionSatisfiesYieldCriteria(this, a2);
      if ((_DWORD)v41)
      {
        if (!cnprint::CNPrinter::GetLogLevel(v41))
        {
          LOWORD(v71) = 12;
          LOBYTE(v70[0]) = 0;
          v42 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v69 = v43 + (double)v42;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, "t,%.3lf,Solution Selector: saving estimator %d", v44, v45, v46, v47, v48, SLOBYTE(v69));
        }
        v71 = v10;
        v49 = sub_18D05B344((uint64_t)this + 56, v10, (uint64_t)&std::piecewise_construct, &v71);
        memcpy(v49 + 4, (char *)a2 + 8, 0x971uLL);
      }
      v50 = 0;
      *((_BYTE *)this + 160) = 0;
      v51 = *(double *)(*((_QWORD *)this + 1) + 3472) - *(double *)(*((_QWORD *)this + 1) + 3304);
      break;
  }
  while (1)
  {
    v52 = (uint64_t)sub_18D041348((_QWORD *)this + 7, (unsigned __int8 *)&byte_18D314984[v50]);
    if (v52)
    {
      v53 = *(_QWORD *)(v52 + 1192);
      v54 = *(double *)(v52 + 1200);
      v71 = (_BYTE *)(*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v72 = v55;
      v70[0] = 0;
      v70[1] = 0;
      *(double *)v56.i64 = v51;
      CNTimeSpan::SetTimeSpan(v70, 0, v56, v57);
      v52 = CNTimeSpan::operator-((uint64_t)&v71, v70, v58, v59);
      if (v53)
        v61 = 1;
      else
        v61 = (*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (!v61
        || !v52 && (*(_QWORD *)&v60 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
        || (v62 = v53 <= v52, v53 == v52))
      {
        v62 = v54 <= v60;
      }
      if (!v62)
        break;
    }
    if (++v50 == 3)
      goto LABEL_44;
  }
  *((_BYTE *)this + 160) = byte_18D314984[v50];
LABEL_44:
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v52))
  {
    LOWORD(v71) = 12;
    LOBYTE(v70[0]) = 0;
    v63 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v66 = v64 + (double)v63;
    v19 = "t,%.3lf,Solution Selector: selected estimator %d";
    goto LABEL_46;
  }
}

uint64_t **sub_18D041348(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void sub_18D0413FC(int a1, raven::RavenDeltaVIOEstimateActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeltaVIOEstimateActiveObject *v8;
  double v9;
  int8x16_t v10;
  int8x16_t v11[152];

  v8 = *a2;
  sub_18D0408A8(v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(v8, v11, v9, v10);
}

void sub_18D041438(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeviceAttitudeActiveObject *v8;
  _QWORD v9[304];

  v8 = *a2;
  sub_18D0408A8(v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v9);
}

void sub_18D041478(int a1, raven::RavenMapVectorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenMapVectorActiveObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[304];

  v8 = *a2;
  sub_18D0408A8(v15, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenMapVectorActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v15, v9, v10, v11, v12, v13, v14);
}

void sub_18D0414B4(int a1, raven::RavenSolutionActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenSolutionActiveObject *v8;
  _QWORD v9[304];

  v8 = *a2;
  sub_18D0408A8(v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSolutionActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v9);
}

void sub_18D0414F0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBE98;
}

void sub_18D041500(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAEC8;
}

void sub_18D041510(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA840;
}

void sub_18D041520(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA4D0;
}

void sub_18D041530(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA1B8;
}

void sub_18D041540(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9088;
}

void sub_18D041550(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8DC8;
}

void raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(raven::RavenDeltaVIOEstimateActiveObject *this, int8x16_t *a2, double a3, int8x16_t a4)
{
  uint64_t v5;
  __int8 *v7;
  cnprint::CNPrinter *v8;
  double v9;
  int v10;
  char v11;
  unint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void *v26;
  int v27;
  int8x16_t v28;
  uint64_t v29;
  double v30;
  long double *v31;
  long double v32;
  long double v33;
  double v34;
  long double v35;
  long double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  long double *v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  char v60[32];
  long double *v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  long double *v70;
  __int128 v71;
  uint64_t v72;
  unsigned __int8 v73[23];
  char v74;
  long double *v75;
  _BYTE __p[24];
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  _BYTE v80[24];
  uint64_t v81;
  float64_t *v82;
  int8x16_t v83;
  uint64_t v84;
  int8x16_t v85;
  int8x16_t v86;

  if (!*((_BYTE *)this + 480))
  {
    *(_WORD *)v80 = 12;
    v73[0] = 2;
    (*(void (**)(_BYTE *__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *, int8x16_t *))(*(_QWORD *)this + 16))(__p, this, a2);
    if (__p[23] >= 0)
      v25 = __p;
    else
      LOBYTE(v25) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v80, v73, "%s: not configured", v20, v21, v22, v23, v24, (char)v25);
    if ((__p[23] & 0x80000000) == 0)
      return;
    v26 = *(void **)__p;
    goto LABEL_17;
  }
  v5 = *((_QWORD *)this + 1241);
  if (!v5 || !*((_BYTE *)this + 736))
    return;
  v7 = &a2->i8[8];
  *(_OWORD *)__p = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 1237)
                                         + (((unint64_t)(v5 + *((_QWORD *)this + 1240) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 1088 * (((_DWORD)v5 + *((_DWORD *)this + 2480) - 1) & 0xF));
  v8 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&a2->i64[1], __p, *(int8x16_t *)__p, a4);
  if (v9 + (double)(uint64_t)v8 > 6.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(v8) <= 1)
    {
      *(_WORD *)v73 = 12;
      LOBYTE(v67) = 1;
      (*(void (**)(_BYTE *__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 16))(__p, this);
      v10 = __p[23];
      v11 = __p[0];
      v12 = *((_QWORD *)this + 1241) + *((_QWORD *)this + 1240) - 1;
      *(_OWORD *)v80 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 1237) + ((v12 >> 1) & 0x7FFFFFFFFFFFFFF8))
                                 + 1088 * (v12 & 0xF));
      CNTimeSpan::operator-((uint64_t)v7, v80, *(int8x16_t *)v80, v13);
      if (v10 >= 0)
        v19 = __p;
      else
        LOBYTE(v19) = v11;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v73, (unsigned __int8 *)&v67, "%s: ravel_sol t,%.3lf VIO Buffer is flushed due to no VIO activity for %.3lf [s]", v14, v15, v16, v17, v18, (char)v19);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    (*(void (**)(raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 48))(this);
    return;
  }
  if (a2[13].i8[1] != 2 || !a2[91].i8[8])
    return;
  v27 = a2[13].u8[0];
  if ((v27 - 2) >= 2)
  {
    if (v27 == 1)
    {
      if (*((_BYTE *)this + 5616))
      {
        memcpy((char *)this + 3192, v7, 0x971uLL);
      }
      else
      {
        *((_QWORD *)this + 398) = &unk_1E25C2B48;
        memcpy((char *)this + 3192, v7, 0x971uLL);
        *((_BYTE *)this + 5616) = 1;
      }
    }
  }
  else
  {
    if (!*((_BYTE *)this + 3176))
    {
      *((_QWORD *)this + 93) = &unk_1E25C2B48;
      memcpy((char *)this + 752, v7, 0x971uLL);
      *((_BYTE *)this + 3176) = 1;
      return;
    }
    v28 = a2[73];
    v85 = *(int8x16_t *)((char *)this + 1912);
    v86 = v28;
    v29 = CNTimeSpan::operator-((uint64_t)&v86, &v85, v85, v28);
    if (v30 + (double)v29 >= 3.0)
    {
      memcpy((char *)this + 752, v7, 0x971uLL);
      if (*((_BYTE *)this + 520))
      {
        v81 = 0x100000003;
        *(_QWORD *)v80 = &unk_1E25C7790;
        *(_OWORD *)&v80[8] = xmmword_18D313070;
        v82 = (float64_t *)&v83;
        v83 = a2[92];
        v84 = a2[93].i64[0];
        if (*((_BYTE *)this + 732))
        {
          if (!*((_BYTE *)this + 733))
            return;
          goto LABEL_35;
        }
        sub_18D053AA8((uint64_t)this + 9592, (uint64_t)v80);
        *((_BYTE *)this + 732) = 1;
        sub_18D16AF50((uint64_t)__p, *v82, v82[1], v82[2]);
        if (__p[8])
        {
          sub_18D053AA8((uint64_t)this + 9720, (uint64_t)&__p[16]);
          *((_BYTE *)this + 733) = 1;
LABEL_35:
          v77 = 0x100000003;
          *(_QWORD *)__p = &unk_1E25C7790;
          *(_OWORD *)&__p[8] = xmmword_18D313070;
          v78 = &v79;
          sub_18D0540FC((uint64_t)v80, (uint64_t)this + 9592, (uint64_t)__p);
          sub_18D192C7C((uint64_t)this + 9720, (uint64_t)__p, (uint64_t)v73);
          v31 = v75;
          v32 = hypot(*v75, v75[1]);
          *((long double *)this + 72) = v32;
          *((_BYTE *)this + 584) = 1;
          if (v32 >= 1.0)
          {
            v33 = v31[1];
            if (fabs(*v31) > 0.005 || fabs(v33) > 0.005)
            {
              v34 = atan2(*v31, v33);
              *((double *)this + 70) = v34;
              *((_BYTE *)this + 568) = 1;
              if (v34 < 0.0)
                *((double *)this + 70) = v34 + 6.28318531;
            }
          }
          if (*((_BYTE *)this + 5616))
          {
            if (*((_BYTE *)this + 4648))
            {
              v69 = 0x100000003;
              v67 = &unk_1E25C7790;
              v68 = xmmword_18D313070;
              v70 = (long double *)&v71;
              v71 = *((_OWORD *)this + 291);
              v72 = *((_QWORD *)this + 584);
              v64 = 0x100000003;
              v62 = &unk_1E25C7790;
              v63 = xmmword_18D313070;
              v65 = &v66;
              sub_18D0540FC((uint64_t)&v67, (uint64_t)this + 9592, (uint64_t)&v62);
              sub_18D192C7C((uint64_t)this + 9720, (uint64_t)&v62, (uint64_t)v60);
              v35 = *v61;
              v36 = v61[1];
              v37 = hypot(*v61, v36);
              if (v37 >= 1.0 && (fabs(v35) > 0.005 || fabs(v36) > 0.005))
              {
                v38 = atan2(v35, v36);
                *((double *)this + 66) = v38;
                *((_BYTE *)this + 536) = 1;
                if (v38 < 0.0)
                {
                  v38 = v38 + 6.28318531;
                  *((double *)this + 66) = v38;
                }
                *((double *)this + 68) = v37;
                *((_BYTE *)this + 552) = 1;
                if (v37 > 0.0 && *((_BYTE *)this + 568))
                {
                  v39 = vabdd_f64(*((double *)this + 70), v38);
                  if (6.28318531 - v39 >= v39)
                    v40 = v39;
                  else
                    v40 = 6.28318531 - v39;
                  *((double *)this + 64) = v37 * v40;
                }
              }
            }
          }
          v41 = *((_QWORD *)this + 1237);
          v42 = *((_QWORD *)this + 1240);
          v43 = (uint64_t *)(v41 + 8 * (v42 >> 4));
          if (*((_QWORD *)this + 1238) == v41)
          {
            v44 = 0;
            v47 = 0;
            v46 = (char *)(v41 + 8 * ((*((_QWORD *)this + 1241) + v42) >> 4));
          }
          else
          {
            v44 = *v43 + 1088 * (*((_QWORD *)this + 1240) & 0xFLL);
            v45 = *((_QWORD *)this + 1241) + v42;
            v46 = (char *)(v41 + 8 * (v45 >> 4));
            v47 = *(_QWORD *)v46 + 1088 * (v45 & 0xF);
          }
          v48 = sub_18D2BADE4(v43, v44, v46, v47, (double *)a2[73].i64);
          v49 = *((_QWORD *)this + 1237);
          if (*((_QWORD *)this + 1238) == v49)
          {
            v51 = 0;
          }
          else
          {
            v50 = *((_QWORD *)this + 1241) + *((_QWORD *)this + 1240);
            v51 = *(_QWORD *)(v49 + ((v50 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 1088 * (v50 & 0xF);
          }
          if (v51 != v48)
          {
            v69 = 0x100000003;
            v67 = &unk_1E25C7790;
            v68 = xmmword_18D313070;
            v70 = (long double *)&v71;
            sub_18D0540FC(v48 + 232, (uint64_t)this + 632, (uint64_t)&v67);
            v52 = v70;
            *((long double *)this + 87) = hypot(*v70, v70[1]);
            *((_BYTE *)this + 704) = 1;
            v53 = atan2(*v52, v52[1]);
            *((double *)this + 77) = v53;
            *((_BYTE *)this + 624) = 1;
            if (v53 < 0.0)
              *((double *)this + 77) = v53 + 6.28318531;
          }
          return;
        }
        LOWORD(v67) = 12;
        LOBYTE(v62) = 2;
        (*(void (**)(unsigned __int8 *__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 16))(v73, this);
        if (v74 >= 0)
          v59 = v73;
        else
          LOBYTE(v59) = v73[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)&v62, "%s, curr_ravel_sol,%.3lf Raven Solution position Jecef2enu computation failed.", v54, v55, v56, v57, v58, (char)v59);
        if ((v74 & 0x80000000) == 0)
          return;
        v26 = *(void **)v73;
LABEL_17:
        operator delete(v26);
      }
    }
  }
}

void sub_18D041CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenDeviceAttitudeActiveObject::HandleEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::RavenSolutionEvent *a2)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  void *__p[2];
  char v31;
  unsigned __int8 v32;
  __int16 v33;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)a2 + 209) == 2 && *((_BYTE *)a2 + 1464) != 0 && *((_BYTE *)a2 + 1544) != 0)
    {
      if (*((_BYTE *)a2 + 208) == 3)
      {
        if (*(double *)(*((_QWORD *)this + 61) + 3336) < (double)*((uint64_t *)a2 + 28) && *((_BYTE *)a2 + 1624) != 0)
        {
          v6 = sub_18D05C904((_QWORD *)this + 984, (uint64_t)a2, (double *)this + 944, *((_QWORD *)this + 946));
          if ((v6 & 1) == 0 && !cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6))
          {
            LOWORD(__p[0]) = 12;
            LOBYTE(v33) = 0;
            v7 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v28 = v8 + (double)v7;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v33, "DevAtt, Raven pnt solution queue overflowed at %.3lf", v9, v10, v11, v12, v13, SLOBYTE(v28));
          }
        }
      }
      else
      {
        v20 = sub_18D05C904((_QWORD *)this + 978, (uint64_t)a2, (double *)this + 944, *((_QWORD *)this + 946));
        if ((v20 & 1) == 0 && !cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v20))
        {
          LOWORD(__p[0]) = 12;
          LOBYTE(v33) = 0;
          v21 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v29 = v22 + (double)v21;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v33, "DevAtt, Raven solution queue overflowed at %.3lf", v23, v24, v25, v26, v27, SLOBYTE(v29));
        }
      }
    }
  }
  else
  {
    v33 = 12;
    v32 = 3;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 16))(__p);
    if (v31 >= 0)
      v19 = __p;
    else
      LOBYTE(v19) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Warning: %s is not configured yet.", v14, v15, v16, v17, v18, (char)v19);
    if (v31 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D041EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::RavenSolutionEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned __int8 v11;
  __int16 v12;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)a2 + 209) == 2 && *((_BYTE *)a2 + 1744) != 0)
    {
      if (*((_BYTE *)this + 1528))
      {
        memcpy((char *)this + 1544, (char *)a2 + 8, 0x971uLL);
      }
      else
      {
        *((_QWORD *)this + 192) = &unk_1E25C2B48;
        memcpy((char *)this + 1544, (char *)a2 + 8, 0x971uLL);
        *((_BYTE *)this + 1528) = 1;
      }
    }
  }
  else
  {
    v12 = 12;
    v11 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "RavenMapVectorActiveObject: not configured", a4, a5, a6, a7, a8, v10);
  }
}

uint64_t raven::RavenMovingStateEstimator::HandleEvent(uint64_t this, const raven::RavenSolutionEvent *a2)
{
  uint64_t v5;
  cnstatistics *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  uint64_t v22;

  if (*((_BYTE *)a2 + 208) == 1 && *((_BYTE *)a2 + 209) == 2 && *((_BYTE *)a2 + 1344) != 0)
  {
    v5 = this;
    if (*(_BYTE *)(this + 3984))
    {
      v6 = (cnstatistics *)memcpy((void *)(this + 1560), (char *)a2 + 8, 0x971uLL);
    }
    else
    {
      *(_QWORD *)(this + 1552) = &unk_1E25C2B48;
      v6 = (cnstatistics *)memcpy((void *)(this + 1560), (char *)a2 + 8, 0x971uLL);
      *(_BYTE *)(v5 + 3984) = 1;
    }
    v7 = sqrt(*((double *)a2 + 173));
    v8 = cnstatistics::NormalCDF(v6, *((double *)a2 + 169), 0.25, 0.05);
    v9 = 1.0 - v8;
    if (*(_BYTE *)(v5 + 1040))
      v10 = 1.0 - v8;
    else
      v10 = 0.01;
    if (*(_BYTE *)(v5 + 1040))
      v9 = 0.01;
    v11 = *((double *)a2 + 169);
    v12 = v7 + v7 >= v11 || v11 <= 5.0;
    v13 = 7.9;
    if (v12)
      v13 = 0.0;
    v14 = v13 * v10 + 0.1;
    v15 = v13 * v8 + 0.1;
    v16 = v13 * v9 + 0.1;
    v17 = v16 + v14 + v15;
    v18 = v14 / v17;
    v19 = v15 / v17;
    v20 = v16 / v17;
    this = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v21 = *(unsigned __int8 *)(v5 + 208);
    *(_QWORD *)(v5 + 144) = sub_18D04DC20;
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 160) = 0x7FF8000000000000;
    *(double *)(v5 + 168) = v18;
    *(double *)(v5 + 176) = v20;
    *(double *)(v5 + 184) = v19;
    *(_QWORD *)(v5 + 192) = this;
    *(_QWORD *)(v5 + 200) = v22;
    if (!v21)
      *(_BYTE *)(v5 + 208) = 1;
  }
  return this;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::SolutionChecker **this, const raven::RavenSolutionEvent *a2, raven::RavenSolutionEvent *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t **v8;
  unsigned __int8 v10;
  unsigned __int8 *v11;

  v5 = raven::SolutionChecker::HandleEvent(this[207], a2, a3);
  if (!(_DWORD)v5)
  {
    v10 = *((_BYTE *)a3 + 208);
    if (*((_BYTE *)a3 + 209) == 2)
    {
      v6 = this + 4;
      if (!sub_18D041348(v6, &v10))
        goto LABEL_6;
      v7 = sub_18D041348(v6, &v10);
      if (!v7)
        sub_18D077838("unordered_map::at: key not found");
      if (sub_18D069E98((double *)a3 + 146, (double *)v7 + 149))
      {
LABEL_6:
        v11 = &v10;
        v8 = sub_18D05B344((uint64_t)v6, &v10, (uint64_t)&std::piecewise_construct, &v11);
        memcpy(v8 + 4, (char *)a3 + 8, 0x971uLL);
      }
    }
  }
  return v5;
}

uint64_t raven::RavenSolutionSelector::SolutionSatisfiesYieldCriteria(raven::RavenSolutionSelector *this, const raven::RavenSolutionEvent *a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  cnprint::CNPrinter *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  int8x16_t v67;
  int8x16_t v68;
  uint64_t **v69;
  uint64_t v70;
  double v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t **v74;
  cnprint::CNPrinter *v75;
  double v76;
  uint64_t v77;
  double v78;
  int8x16_t v79;
  int8x16_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  cnprint::CNPrinter *v87;
  double v88;
  BOOL v89;
  uint64_t v90;
  double v91;
  int8x16_t v92;
  int8x16_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  cnprint::CNPrinter *v101;
  double v102;
  uint64_t v103;
  double v104;
  int8x16_t v105;
  int8x16_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double *v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  unsigned __int8 v163;
  __int16 v164;
  double v165[3];
  char v166;

  v6 = *((unsigned __int8 *)a2 + 208);
  v4 = (unsigned __int8 *)a2 + 208;
  v5 = v6;
  v166 = v6;
  if (v4[1] != 2 || !*((_BYTE *)a2 + 1264))
  {
    v15 = (cnprint::CNPrinter *)sub_18D043494((float *)this + 102, v5, &v166);
    *((_BYTE *)v15 + 17) = 1;
    if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
    {
      LOWORD(v165[0]) = 12;
      LOBYTE(v164) = 1;
      v16 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v152 = v17 + (double)v16;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v164, "t,%.3lf,Solution Selector: solution unavailable,est,%d,health,%d,valid,%d", v18, v19, v20, v21, v22, SLOBYTE(v152));
    }
    return 0;
  }
  *(_OWORD *)v165 = *((_OWORD *)a2 + 73);
  if (COERCE_UNSIGNED_INT64(v165[1] + (double)*(uint64_t *)&v165[0]) >> 52 >= 0x7FF)
  {
    v164 = 12;
    v163 = 4;
    v23 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v153 = v24 + (double)v23;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid time,est,%d", v25, v26, v27, v28, v29, SLOBYTE(v153));
    return 0;
  }
  v7 = sub_18D041348((_QWORD *)this + 7, v4);
  if (v7)
  {
    v7 = (uint64_t **)sub_18D05B574(v165, (double *)v7 + 149);
    if ((_DWORD)v7)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v7) <= 1)
      {
        v164 = 12;
        v163 = 1;
        v8 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v151 = v9 + (double)v8;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: solution out of order,est,%d,t_prev,%.3lf,t_evt,%.3lf", v10, v11, v12, v13, v14, SLOBYTE(v151));
      }
      return 0;
    }
  }
  if (v5 != 1)
  {
    if (*((_BYTE *)a2 + 2128) != 6)
    {
      if (v5 > 5)
        goto LABEL_52;
      if (((1 << v5) & 0x31) != 0)
      {
        v164 = 12;
        v163 = 4;
        v31 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v154 = v32 + (double)v31;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid estimator type checked for GNSS age,est,%d", v33, v34, v35, v36, v37, SLOBYTE(v154));
        return 0;
      }
      if (((1 << v5) & 0xC) == 0)
        goto LABEL_52;
      v38 = sub_18D1654E4((_QWORD *)this + 2, v5);
      if (!v38)
      {
        if (!cnprint::CNPrinter::GetLogLevel(0))
        {
          v164 = 12;
          v163 = 0;
          v51 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v156 = v52 + (double)v51;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: no GNSS data so far,est,%d,t_curr,%.3lf", v53, v54, v55, v56, v57, SLOBYTE(v156));
        }
        return 0;
      }
      v41 = CNTimeSpan::operator-((uint64_t)v165, v38 + 3, v39, v40);
      v43 = v42 + (double)v41;
      if (v43 < 0.0)
      {
        v164 = 12;
        v163 = 4;
        v44 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v155 = v45 + (double)v44;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: last GNSS time is ahead of current time,est,%d,t_curr,%.3lf,t_last_gnss,%.3lf", v46, v47, v48, v49, v50, SLOBYTE(v155));
        return 0;
      }
      v58 = 3320;
      if (v5 == 2)
        v58 = 3312;
      if (v43 > *(double *)(*((_QWORD *)this + 1) + v58))
      {
        v164 = 12;
        v163 = 2;
        v59 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v157 = v60 + (double)v59;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: GNSS data starvation,est,%d,t_curr,%.3lf,t_last_gnss,%.3lf,dt,%.3lf", v61, v62, v63, v64, v65, SLOBYTE(v157));
        *((_BYTE *)sub_18D043494((float *)this + 102, v5, &v166) + 17) = 1;
        sub_18D04A038((_QWORD *)this + 12, v5);
        return 0;
      }
      v66 = sub_18D1654E4((_QWORD *)this + 51, v5);
      if (!*((_BYTE *)this + 168))
        goto LABEL_51;
      v69 = v66;
      if (*((_BYTE *)this + 402))
      {
        v70 = CNTimeSpan::operator-((uint64_t)v165, (_QWORD *)this + 35, v67, v68);
        if (fabs(v71 + (double)v70) < 600.0)
        {
          v7 = sub_18D1654E4((_QWORD *)this + 12, v5);
          if (v69 && *((_BYTE *)v69 + 17))
          {
            v74 = v7;
            if (*((_BYTE *)this + 464))
            {
              v75 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v165, (_QWORD *)this + 56, v72, v73);
              *(double *)v72.i64 = v76 + (double)(uint64_t)v75;
              v73.i64[0] = 2.5;
              if (*(double *)v72.i64 > 2.5)
              {
                if (cnprint::CNPrinter::GetLogLevel(v75) <= 1)
                {
                  v164 = 12;
                  v163 = 1;
                  v77 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
                  if (!*((_BYTE *)this + 464))
                    sub_18D164CA0();
                  *(double *)v79.i64 = v78;
                  *(double *)v80.i64 = (double)v77;
                  v81 = v78 + (double)v77;
                  CNTimeSpan::operator-((uint64_t)v165, (_QWORD *)this + 56, v79, v80);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: rejected solution due to time_difference_from_passthrough check failed while in tunnel after a recent GNSS starvation or nonhealthy period, time_difference_from_passthrough,%.2lf", v82, v83, v84, v85, v86, SLOBYTE(v81));
                }
                return 0;
              }
            }
            if (!v74)
            {
              v143 = sub_18D165598((float *)this + 24, v5, &v166);
              *(_OWORD *)(v143 + 3) = *((_OWORD *)a2 + 73);
              if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v143) <= 1)
              {
                v164 = 12;
                v163 = 1;
                v144 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
                v162 = v145 + (double)v144;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: rejected solution due to still being in tunnel after recent GNSS starvation or nonhealthy period, time_since_last_tunnel_bridge_notification_event,%.2lf", v146, v147, v148, v149, v150, SLOBYTE(v162));
              }
              return 0;
            }
            v100 = v74 + 3;
            v101 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v165, v100, v72, v73);
            if (fabs(v102 + (double)(uint64_t)v101) < 10.0)
            {
              if (cnprint::CNPrinter::GetLogLevel(v101) <= 1)
              {
                v164 = 12;
                v163 = 1;
                v103 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
                *(double *)v105.i64 = v104;
                *(double *)v106.i64 = (double)v103;
                v107 = v104 + (double)v103;
                CNTimeSpan::operator-((uint64_t)v165, v100, v105, v106);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: rejected solution due to still being in tunnel after recent GNSS starvation or nonhealthy period, time_since_last_tunnel_bridge_notification_event,%.2lf,time_since_first_tunnel_rejection,%.2lf", v108, v109, v110, v111, v112, SLOBYTE(v107));
              }
              return 0;
            }
            goto LABEL_51;
          }
LABEL_52:
          if ((*((_QWORD *)a2 + 162) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || *((double *)a2 + 162) <= 0.0
            || (*((_QWORD *)a2 + 165) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || *((double *)a2 + 165) <= 0.0
            || (*((_QWORD *)a2 + 167) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || *((double *)a2 + 167) <= 0.0)
          {
            v164 = 12;
            v163 = 4;
            v129 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v160 = v130 + (double)v129;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid covariance,est,%d,pxx,%.3lf,pyy,%.3lf,pzz,%.3lf", v131, v132, v133, v134, v135, SLOBYTE(v160));
          }
          else
          {
            if (COERCE_UNSIGNED_INT64(*((double *)a2 + 29) + (double)*((uint64_t *)a2 + 28)) >> 52 >= 0x7FF)
            {
              v164 = 12;
              v163 = 4;
              v113 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
              v158 = v114 + (double)v113;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid age,est,%d,age,%.3lf", v115, v116, v117, v118, v119, SLOBYTE(v158));
            }
            v120 = *((double *)a2 + 27);
            if ((*(_QWORD *)&v120 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v120 < 0.0 || v120 > 1.0)
            {
              if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v7) <= 1)
              {
                v164 = 12;
                v163 = 1;
                v136 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
                v161 = v137 + (double)v136;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid probabilty valid,est,%d,prob,%.3lf", v138, v139, v140, v141, v142, SLOBYTE(v161));
              }
              return 0;
            }
            v121 = (double *)*((_QWORD *)this + 1);
            if (sqrt(*((double *)a2 + 162) + *((double *)a2 + 165) + *((double *)a2 + 167)) > v121[416]
              || *((double *)a2 + 29) + (double)*((uint64_t *)a2 + 28) < v121[417]
              || v120 < v121[418])
            {
              if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v7) <= 1)
              {
                v164 = 12;
                v163 = 1;
                v122 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
                v159 = v123 + (double)v122;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: fail yield criteria,est,%d,pos_unc,%.1lf,age,%.1lf,prob_valid,%.1lf", v124, v125, v126, v127, v128, SLOBYTE(v159));
              }
              return 0;
            }
          }
          return 1;
        }
      }
      else if (*((_BYTE *)this + 472))
      {
        v87 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v165, (_QWORD *)this + 60, v67, v68);
        v89 = fabs(v88 + (double)(uint64_t)v87) >= 5.0 || v69 == 0;
        if (!v89 && *((_BYTE *)v69 + 17))
        {
          if (cnprint::CNPrinter::GetLogLevel(v87) <= 1)
          {
            v164 = 12;
            v163 = 1;
            v90 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
            if (!*((_BYTE *)this + 472))
              __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
            *(double *)v92.i64 = v91;
            *(double *)v93.i64 = (double)v90;
            v94 = v91 + (double)v90;
            CNTimeSpan::operator-((uint64_t)v165, (_QWORD *)this + 60, v92, v93);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: rejected solution post-tunnel exit after recent GNSS starvation period, time since in tunnel,%.2lf", v95, v96, v97, v98, v99, SLOBYTE(v94));
          }
          return 0;
        }
      }
LABEL_51:
      raven::RavenSolutionSelector::ResetTunnelInformationForEstimatorType(this, v5);
      goto LABEL_52;
    }
    return 0;
  }
  return 1;
}

uint64_t raven::SolutionChecker::HandleEvent(raven::SolutionChecker *this, const raven::RavenSolutionEvent *a2, raven::RavenSolutionEvent *a3)
{
  cnprint::CNPrinter *v6;
  int v7;
  double v8;
  double v9;
  double v10;
  int8x16_t v11;
  int8x16_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  cnprint::CNPrinter *v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t **v119;
  int8x16_t v120;
  int8x16_t v121;
  double v122;
  BOOL v124;
  uint64_t v125;
  double v126;
  int8x16_t v127;
  int8x16_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  int v176;
  unsigned __int8 v177;
  BOOL v178;
  __int16 v179;
  double v180[2];
  _OWORD v181[6];
  _OWORD v182[6];
  _QWORD __dst[304];

  __dst[303] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v182[0]) = 4;
    v26 = (*(uint64_t (**)(const raven::RavenSolutionEvent *, const raven::RavenSolutionEvent *, raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v159 = v27 + (double)v26;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v182, "t,%.3lf,SolutionChecker, not configured", v28, v29, v30, v31, v32, SLOBYTE(v159));
    return 0xFFFFFFFFLL;
  }
  v6 = (cnprint::CNPrinter *)memcpy((char *)a3 + 8, (char *)a2 + 8, 0x971uLL);
  v7 = *((unsigned __int8 *)a3 + 208);
  if ((v7 - 1) >= 3)
  {
    if (v7 != 4)
    {
      LOWORD(__dst[0]) = 12;
      LOBYTE(v182[0]) = 4;
      v33 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v160 = v34 + (double)v33;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v182, "t,%.3lf,SolutionChecker: est, %u. Cannot handle received RavenSolutionEvent esimator type. Exiting with check passed return value.", v35, v36, v37, v38, v39, SLOBYTE(v160));
    }
    return 0;
  }
  if (*((_BYTE *)a3 + 209) != 2)
  {
    if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
    {
      LOWORD(__dst[0]) = 12;
      LOBYTE(v182[0]) = 1;
      v40 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v161 = v41 + (double)v40;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v182, "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent is unhealthy. Exiting with check passed return value.", v42, v43, v44, v45, v46, SLOBYTE(v161));
    }
    return 0;
  }
  if (!*((_BYTE *)a3 + 1264))
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v182[0]) = 4;
    v55 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v163 = v56 + (double)v55;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v182, "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent has an invalid user position. Exiting with check failed return value.", v57, v58, v59, v60, v61, SLOBYTE(v163));
    return 0xFFFFFFFFLL;
  }
  if ((*((_QWORD *)a3 + 159) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a3 + 160) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a3 + 161) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v182[0]) = 4;
    v48 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v162 = v49 + (double)v48;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v182, "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent has a non-finite user position value.", v50, v51, v52, v53, v54, SLOBYTE(v162));
    return 0xFFFFFFFFLL;
  }
  v8 = sqrt(*((double *)a3 + 160) * *((double *)a3 + 160)+ *((double *)a3 + 159) * *((double *)a3 + 159)+ *((double *)a3 + 161) * *((double *)a3 + 161));
  if (v8 <= 3185504.5 || v8 >= 9556513.5)
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v182[0]) = 4;
    v62 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v164 = v63 + (double)v62;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v182, "t,%.3lf,SolutionChecker: est, %u. distance_from_earth_center checks failed, distance, %.2lf. Exiting with check failed return value.", v64, v65, v66, v67, v68, SLOBYTE(v164));
    return 0xFFFFFFFFLL;
  }
  v9 = *((double *)a3 + 165);
  v10 = *((double *)a3 + 167);
  if ((*((_QWORD *)a3 + 162) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a3 + 162) <= 0.0
    || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v9 <= 0.0
    || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v10 <= 0.0)
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v182[0]) = 4;
    v69 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v165 = v70 + (double)v69;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v182, "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent has a non-finite or non-positive user position covariance diagonal term, pxx, %.2lf, pyy, %.2lf, pzz, %.2lf. Exiting with check failed return value.", v71, v72, v73, v74, v75, SLOBYTE(v165));
    return 0xFFFFFFFFLL;
  }
  if ((*((_QWORD *)a3 + 163) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a3 + 164) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a3 + 166) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v182[0]) = 4;
    v76 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v166 = v77 + (double)v76;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v182, "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent has a non-finite user position covariance cross term, pxy, %.2lf, pxz, %.2lf, pyz, %.2lf. Exiting with check failed return value.", v78, v79, v80, v81, v82, SLOBYTE(v166));
    return 0xFFFFFFFFLL;
  }
  v176 = *((unsigned __int8 *)a3 + 208);
  v11 = *((int8x16_t *)a3 + 74);
  v182[0] = *((_OWORD *)a3 + 73);
  v12 = *((int8x16_t *)a3 + 75);
  v13 = *((_OWORD *)a3 + 77);
  v14 = *((_OWORD *)a3 + 78);
  v182[3] = *((_OWORD *)a3 + 76);
  v182[4] = v13;
  v182[5] = v14;
  v182[1] = v11;
  v182[2] = v12;
  if (COERCE_UNSIGNED_INT64(*((double *)v182 + 1) + (double)*(uint64_t *)&v182[0]) >> 52 >= 0x7FF)
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v181[0]) = 4;
    v83 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v167 = v84 + (double)v83;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v181, "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent time is invalid, time, %.3lf. Exiting with check failed return value.", v85, v86, v87, v88, v89, SLOBYTE(v167));
    return 0xFFFFFFFFLL;
  }
  v15 = (uint64_t *)*((_QWORD *)this + 2);
  v11.i64[0] = v15[1];
  *(double *)v12.i64 = (double)*v15;
  if (COERCE_UNSIGNED_INT64(*(double *)v11.i64 + *(double *)v12.i64) >> 52 >= 0x7FF)
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v181[0]) = 4;
    v90 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v168 = v91 + (double)v90;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v181, "t,%.3lf,SolutionChecker: est, %u. current_time time is invalid, time, %.3lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v92, v93, v94, v95, v96, SLOBYTE(v168));
LABEL_38:
    result = 0;
    *((_BYTE *)a3 + 209) = 1;
    return result;
  }
  v16 = (cnprint::CNPrinter *)CNTimeSpan::operator-(*((_QWORD *)this + 2), v182, v12, v11);
  v18 = v17 + (double)(uint64_t)v16;
  if (v18 > *((double *)this + 12))
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v181[0]) = 4;
    v19 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v158 = v20 + (double)v19;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v181, "t,%.3lf,SolutionChecker: est, %u. time_difference_from_current_time check failed. Time difference is greater than allowable tolerance, difference, %.3lf. Exiting with check failed return value.", v21, v22, v23, v24, v25, SLOBYTE(v158));
    return 0xFFFFFFFFLL;
  }
  if (v18 < 0.0)
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v181[0]) = 5;
    v97 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v169 = v98 + (double)v97;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v181, "t,%.3lf,SolutionChecker: est, %u. time_difference_from_current_time check failed. Time difference is negative, difference, %.3lf. Exiting with check failed return value.", v99, v100, v101, v102, v103, SLOBYTE(v169));
    return 0xFFFFFFFFLL;
  }
  if (!*((_BYTE *)this + 9))
  {
    LOWORD(__dst[0]) = 12;
    LOBYTE(v181[0]) = 2;
    v111 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v171 = v112 + (double)v111;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v181, "t,%.3lf,SolutionChecker: est, %u. is_active_ == false. Not cross checking with other information. Exiting with check passed return value.", v113, v114, v115, v116, v117, SLOBYTE(v171));
    return 0;
  }
  if (v176 == 1)
  {
    if (!cnprint::CNPrinter::GetLogLevel(v16))
    {
      LOWORD(__dst[0]) = 12;
      LOBYTE(v181[0]) = 0;
      v104 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v170 = v105 + (double)v104;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v181, "t,%.3lf,SolutionChecker: est, %u. Estimator type to be checked is PassThrough. Exiting with check passed return value.", v106, v107, v108, v109, v110, SLOBYTE(v170));
    }
    return 0;
  }
  LOBYTE(__dst[0]) = 1;
  if (!sub_18D041348(v15 + 2, (unsigned __int8 *)__dst))
  {
    if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
    {
      LOWORD(__dst[0]) = 12;
      LOBYTE(v181[0]) = 1;
      v137 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v173 = v138 + (double)v137;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__dst, (unsigned __int8 *)v181, "t,%.3lf,SolutionChecker: est, %u. A PassThrough solution has not yet been received to check against. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v139, v140, v141, v142, v143, SLOBYTE(v173));
    }
    goto LABEL_38;
  }
  v118 = (_QWORD *)(*((_QWORD *)this + 2) + 16);
  LOBYTE(v181[0]) = 1;
  v119 = sub_18D045814(v118, (unsigned __int8 *)v181);
  memcpy(__dst, v119 + 1, 0x971uLL);
  v181[2] = *(_OWORD *)&__dst[149];
  v181[3] = *(_OWORD *)&__dst[151];
  v181[4] = *(_OWORD *)&__dst[153];
  v181[5] = *(_OWORD *)&__dst[155];
  v121.i64[1] = __dst[146];
  v120.i64[1] = __dst[148];
  v181[0] = *(_OWORD *)&__dst[145];
  v181[1] = *(_OWORD *)&__dst[147];
  v120.i64[0] = __dst[146];
  *(double *)v121.i64 = *(double *)&__dst[146] + (double)__dst[145];
  v122 = fabs(*(double *)v121.i64);
  v124 = (unint64_t)(*(_QWORD *)&v122 - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&v122 - 1) <= 0xFFFFFFFFFFFFELL
      || COERCE__INT64(*(double *)&__dst[146] + (double)__dst[145]) == 0;
  if (!v124 || *(double *)v121.i64 < 0.0)
  {
    LOWORD(v180[0]) = 12;
    LOBYTE(v179) = 4;
    v144 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v174 = v145 + (double)v144;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v180, (unsigned __int8 *)&v179, "t,%.3lf,SolutionChecker: est, %u. Passthrough solution time is invalid, time, %.3lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v146, v147, v148, v149, v150, SLOBYTE(v174));
    goto LABEL_38;
  }
  v125 = CNTimeSpan::operator-((uint64_t)v182, v181, v121, v120);
  *(_QWORD *)&v180[0] = v125;
  v180[1] = v126;
  if (v125 < 0 || (*(double *)v127.i64 = v126, v126 < 0.0))
  {
    v125 = CNTimeSpan::operator-(v180, v127, v128);
    v127.i64[0] = v129;
  }
  if (*(double *)v127.i64 + (double)v125 > *((double *)this + 13))
  {
    v179 = 12;
    v178 = 2;
    v130 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v172 = v131 + (double)v130;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, (unsigned __int8 *)&v178, "t,%.3lf,SolutionChecker: est, %u. time_difference_from_passthrough check failed, difference, %.3lf. Exiting with check passed return value.", v132, v133, v134, v135, v136, SLOBYTE(v172));
    return 0;
  }
  v178 = 1;
  result = raven::SolutionChecker::PerformPositionCheck(this, a3, &v178);
  if (!(_DWORD)result && v178)
  {
    result = raven::SolutionChecker::PerformSpeedCheck(this, a3, &v178);
    if (!(_DWORD)result && v178)
    {
      if (*((double *)this + 3) < 180.0
        || *((double *)this + 4) < 180.0
        || (result = raven::SolutionChecker::PerformDirectionOfTravelCheck(this, a3, &v178), !(_DWORD)result) && v178)
      {
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result))
        {
          v179 = 12;
          v177 = 0;
          v151 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v175 = v152 + (double)v151;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, &v177, "t,%.3lf,SolutionChecker: est, %u. All checks passed. Exiting with check passed return value.", v153, v154, v155, v156, v157, SLOBYTE(v175));
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_18D04344C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_18D043494(float *a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  *((_BYTE *)v10 + 17) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_18D0788A0();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_18D043870(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D04388C(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenPositionContextEstimatorActiveObject *v8;
  _BYTE v9[192];

  v8 = *a2;
  sub_18D06632C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::ActivityStateEvent *)v9);
}

void sub_18D0438CC(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenPositionContextEstimatorActiveObject *v8;
  _BYTE v9[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

void sub_18D04390C(int a1, raven::RavenActivityStateEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenActivityStateEstimatorActiveObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v15, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenActivityStateEstimatorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v15, v9, v10, v11, v12, v13, v14);
}

void sub_18D043950(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[24];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D06632C((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleActivityStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::ActivityStateEvent *)v23);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D043A44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D043A64(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[18];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D049B98((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleMovingStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::MovingStateEvent *)v23);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D043B58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D043B78(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[18];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D0559DC((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleMountStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::MountStateEvent *)v23);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D043C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D043C8C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD __src[133];
  void *__p[2];
  uint64_t v31;
  _BYTE v32[1064];
  _BYTE v33[864];
  _BYTE v34[393];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  sub_18D05822C((uint64_t)&v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = (cnprint::CNPrinter *)raven::RavenPassThroughEstimator::HandleEvent(v8 + 544, (uint64_t)&v27);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v36 = 12;
    v35 = 1;
    __src[0] = (*(uint64_t (**)(uint64_t *))(v27 + 16))(&v27);
    __src[1] = v10;
    (*(void (**)(void **__return_ptr, uint64_t *))(v27 + 24))(__p, &v27);
    v16 = v31 >= 0 ? __p : (void **)__p[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v17, v18, v19, v20, v21, v22);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
  }
  if (*(_BYTE *)(v8 + 3824))
  {
    *(_OWORD *)__p = *(_OWORD *)(v8 + 3184);
    if (sub_18D03F608((double *)__p, (double *)(v8 + 3808)))
    {
      sub_18D0409EC((uint64_t)__p);
      __p[1] = (void *)cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
      v31 = v23;
      raven::PopulateAllTimeFields((uint64_t)&__p[1], (uint64_t)&v28, v24, v25);
      raven::RavenPassThroughEstimator::GetRavenSolution((raven::RavenPassThroughEstimator *)(v8 + 544), (uint64_t)__src);
      memcpy(v33, __src, sizeof(v33));
      raven::RavenPassThroughEstimator::GetRavenStatus((raven::RavenPassThroughEstimator *)(v8 + 544), (uint64_t)__src);
      memcpy(v32, __src, sizeof(v32));
      raven::RavenEstimator::GetRavenActivity((raven::RavenEstimator *)(v8 + 544), (uint64_t)__src);
      memcpy(v34, __src, sizeof(v34));
      *(_QWORD *)(v8 + 3808) = (*(uint64_t (**)(uint64_t *))(v27 + 16))(&v27);
      *(_QWORD *)(v8 + 3816) = v26;
      sub_18D05CEF4(v8, (uint64_t *)__p);
    }
  }
}

void sub_18D043E5C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18D043E7C()
{
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  JUMPOUT(0x18D043E74);
}

void sub_18D043E98(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[24];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  v9 = sub_18D06632C((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 480))
  {
    if (*(_BYTE *)(v8 + 753))
    {
      if (*(_BYTE *)(v8 + 752))
        raven::RavenMovingStateEstimator::HandleEvent((__n128 *)(v8 + 536), (const raven::ActivityStateEvent *)v23);
    }
  }
  else
  {
    v28 = 12;
    v27 = 2;
    v26[0] = (*(uint64_t (**)(_QWORD *, __n128))(v23[0] + 16))(v23, v9);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 511) >= 0)
      LOBYTE(v22) = v8 - 24;
    else
      v22 = *(_QWORD *)(v8 + 488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D043F98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D043FBC(int a1, raven::RavenMovingStateEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenMovingStateEstimatorActiveObject *v8;
  _BYTE v9[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenMovingStateEstimatorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

void sub_18D043FFC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  cnprint::CNPrinter *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  _QWORD v39[303];
  void *v40[2];
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  __int16 v45;

  v8 = *a2;
  sub_18D0408A8(&v38, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = (cnprint::CNPrinter *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
  if ((v9 & 1) == 0)
  {
    v45 = 12;
    v44 = 2;
    v42 = (*(uint64_t (**)(uint64_t *))(v38 + 16))(&v38);
    v43 = v31;
    (*(void (**)(void **__return_ptr, uint64_t *))(v38 + 24))(v40, &v38);
    if (v41 >= 0)
      v37 = v40;
    else
      v37 = (void **)v40[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&v42, "RavenConvergenceEstimatorActiveObject not configured, cannot handle event, %s", v32, v33, v34, v35, v36, (uint64_t)v37);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v8 - 16;
    else
      v30 = *(_QWORD *)(v8 + 496);
    goto LABEL_23;
  }
  if (!cnprint::CNPrinter::GetLogLevel(v9))
  {
    LOWORD(v42) = 12;
    LOBYTE(v45) = 0;
    v40[0] = (void *)(*(uint64_t (**)(uint64_t *))(v38 + 16))(&v38);
    v40[1] = v10;
    cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)v40, "RavenSolutionEvent received");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v16) = v8 - 16;
    else
      v16 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, (unsigned __int8 *)&v45, "%s", v11, v12, v13, v14, v15, v16);
  }
  if (BYTE1(v39[25]) == 2)
  {
    *(_BYTE *)(v8 + 544) = 1;
    *(_OWORD *)(v8 + 552) = *(_OWORD *)&v39[145];
    memcpy((void *)(v8 + 576), v39, 0x971uLL);
  }
  v17 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::RavenSolutionEvent *)&v38);
  if ((_DWORD)v17 && cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    v45 = 12;
    v44 = 1;
    v42 = (*(uint64_t (**)(uint64_t *))(v38 + 16))(&v38);
    v43 = v18;
    (*(void (**)(void **__return_ptr, uint64_t *))(v38 + 24))(v40, &v38);
    if (v41 >= 0)
      v24 = v40;
    else
      v24 = (void **)v40[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&v42, "Failed to handle event - %s.", v19, v20, v21, v22, v23, (uint64_t)v24);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v8 - 16;
    else
      v30 = *(_QWORD *)(v8 + 496);
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, &v44, "%s", v25, v26, v27, v28, v29, v30);
    if (v41 < 0)
      operator delete(v40[0]);
  }
}

void sub_18D044234(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D044258(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[24];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D06632C((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    raven::RavenEstimator::HandleActivityStateEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::ActivityStateEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D0443AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D0443CC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[18];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D049B98((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::MovingStateEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D044520(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D044548(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  cnprint::CNPrinter *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[64];
  double v53[4];
  void *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[40];
  void *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;

  v8 = *a2;
  sub_18D05822C((uint64_t)&v45, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v60 = *(_OWORD *)(v8 + 1512);
  v56 = *(_OWORD *)(v8 + 1448);
  *(_OWORD *)v61 = *(_OWORD *)(v8 + 1528);
  *(_OWORD *)&v61[16] = *(_OWORD *)(v8 + 1544);
  v9 = *(_QWORD *)(v8 + 1560);
  v54 = &unk_1E25C24A0;
  *(_QWORD *)&v61[32] = v9;
  v60 = v51;
  v56 = v47;
  v57 = v48;
  v58 = v49;
  v59 = v50;
  v55 = v46;
  v10 = v61[0];
  if (v61[0] > 3u || v61[0] == 1)
  {
    v11 = *(_QWORD *)(v8 + 536);
    if (v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 504) + 8 * ((v11 + *(_QWORD *)(v8 + 528) - 1) / 0x14uLL))
          + 200 * ((v11 + *(_QWORD *)(v8 + 528) - 1) % 0x14uLL);
      v67 = (void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 16))(v12);
      *(_QWORD *)&v68 = v13;
      v14 = *(_QWORD *)(*(_QWORD *)(v8 + 504) + 8 * (*(_QWORD *)(v8 + 528) / 0x14uLL))
          + 200 * (*(_QWORD *)(v8 + 528) % 0x14uLL);
      v72 = (void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v14 + 16))(v14);
      *(_QWORD *)&v73 = v15;
      v18 = CNTimeSpan::operator-((uint64_t)&v67, &v72, v16, v17);
      v20 = fabs(v19 + (double)v18);
      if (v20 > 0.45)
      {
        v21 = *(_QWORD *)(v8 + 528);
        v22 = *(_QWORD *)(v8 + 536) + v21 - 1;
        v23 = *(_QWORD *)(v8 + 504);
        v24 = *(_QWORD *)(v23 + 8 * (v22 / 0x14));
        cnrotation::Inv((float64x2_t *)(*(_QWORD *)(v23 + 8 * (v21 / 0x14)) + 200 * (v21 % 0x14) + 168), (float64x2_t *)&v67);
        cnrotation::Cat((double *)(v24 + 200 * (v22 % 0x14) + 168), (const cnrotation::CNRotation *)&v67, v53);
        cnrotation::CNRotation::RotationVector((cnrotation::CNRotation *)v53, (uint64_t)v52);
        v74 = 0x100000003;
        v72 = &unk_1E25C7790;
        v73 = xmmword_18D313070;
        v75 = &v76;
        v69 = 0x100000134;
        v67 = &unk_1E25C7640;
        v68 = xmmword_18D3130C0;
        v70 = &v71;
        v64 = 0x100000003;
        v62 = &unk_1E25C7790;
        v63 = xmmword_18D313070;
        v65 = &v66;
        sub_18D159EE0((uint64_t)v52, (uint64_t)&v72, (uint64_t)&v67, (uint64_t)&v62, "2");
        v27 = fabs(v26 / v20);
        v28 = 0.68584315;
        if (*(_BYTE *)(v8 + 720))
        {
          v29 = *(double *)(v8 + 728);
          if (v29 > 0.000000015)
          {
            v30 = 3.26888333 / fmin(v29, 50.0);
            if (v30 <= 0.68584315)
              v28 = v30;
            else
              v28 = 0.68584315;
          }
        }
        if (v27 > v28)
        {
          if (!cnprint::CNPrinter::GetLogLevel(v25))
          {
            LOWORD(v67) = 12;
            LOBYTE(v72) = 0;
            v31 = (*(uint64_t (**)(uint64_t *))(v45 + 16))(&v45);
            v44 = v32 + (double)v31;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)&v72, "Mount adjustment detected, t,%.3lf,%.1lf dps vs. %.1lf dps", v33, v34, v35, v36, v37, SLOBYTE(v44));
          }
          *(_QWORD *)(v8 + 1408) = (*(uint64_t (**)(uint64_t *))(v45 + 16))(&v45);
          *(_QWORD *)(v8 + 1416) = v38;
        }
      }
    }
  }
  if (v10 > 3 || v10 == 1)
  {
    v67 = (void *)(*(uint64_t (**)(uint64_t *))(v45 + 16))(&v45);
    *(_QWORD *)&v68 = v39;
    v42 = CNTimeSpan::operator-((uint64_t)&v67, (_QWORD *)(v8 + 1408), v40, v41);
    if (v43 + (double)v42 < 30.0)
    {
      v61[0] = 2;
      *(_OWORD *)&v61[8] = xmmword_18D31CF10;
      *(_OWORD *)&v61[24] = xmmword_18D31CF20;
    }
  }
  sub_18D0554B8(v8, (uint64_t *)&v54);
}

void sub_18D04497C(int a1, const void ***a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void **v8;
  _QWORD v9[304];

  v8 = *a2;
  sub_18D0408A8(v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIonosphereEstimatorActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v9);
}

void sub_18D0449BC(int a1, raven::RavenIonosphereEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenIonosphereEstimatorActiveObject *v8;
  _BYTE v9[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIonosphereEstimatorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

void sub_18D0449FC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[144];
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  sub_18D049B98((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = &unk_1E25C26E8;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0x7FF8000000000000;
  v22 = 0;
  v23 = 0x3FF0000000000000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  if (!raven::MovingStateChecker::HandleEvent(*(raven::MovingStateChecker **)(v8 + 2120), (const raven::MovingStateEvent *)v10, (raven::MovingStateEvent *)v11))sub_18D04C19C(v8, (uint64_t)v11);
}

void sub_18D044AA8(int a1, raven::RavenSignalEnvironmentActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenSignalEnvironmentActiveObject *v8;
  _BYTE v9[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSignalEnvironmentActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

double sub_18D044AEC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double result;
  _BYTE v10[24];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v8 = *a2;
  sub_18D06632C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_OWORD *)(v8 + 824) = v18;
  *(_OWORD *)(v8 + 840) = v19;
  *(_OWORD *)(v8 + 856) = v20;
  *(_QWORD *)(v8 + 872) = v21;
  *(_OWORD *)(v8 + 760) = v14;
  *(_OWORD *)(v8 + 776) = v15;
  *(_OWORD *)(v8 + 792) = v16;
  *(_OWORD *)(v8 + 808) = v17;
  *(_OWORD *)(v8 + 696) = *(_OWORD *)&v10[8];
  *(_OWORD *)(v8 + 712) = v11;
  *(_OWORD *)(v8 + 728) = v12;
  result = *(double *)&v13;
  *(_OWORD *)(v8 + 744) = v13;
  return result;
}

double sub_18D044B88(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = *a2;
  sub_18D049B98((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_OWORD *)(v8 + 968) = v16;
  *(_OWORD *)(v8 + 984) = v17;
  *(_OWORD *)(v8 + 1000) = v18;
  *(_QWORD *)(v8 + 1016) = v19;
  *(_OWORD *)(v8 + 904) = v12;
  *(_OWORD *)(v8 + 920) = v13;
  *(_OWORD *)(v8 + 936) = v14;
  *(_OWORD *)(v8 + 952) = v15;
  result = *(double *)&v11;
  *(_OWORD *)(v8 + 888) = v11;
  return result;
}

double sub_18D044C08(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeviceAttitudeActiveObject *v8;
  double result;
  _BYTE v10[192];

  v8 = *a2;
  sub_18D06632C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)&result = raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::ActivityStateEvent *)v10).n128_u64[0];
  return result;
}

double sub_18D044C4C(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeviceAttitudeActiveObject *v8;
  _BYTE v10[144];

  v8 = *a2;
  sub_18D0559DC((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::MountStateEvent *)v10);
}

void sub_18D044C8C(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeviceAttitudeActiveObject *v8;
  _BYTE v9[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

void sub_18D044CCC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[304];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D0408A8(v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent(v8 + 544, v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D044DB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D044DD8(int a1, int8x16_t **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[18];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D049B98((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent(v8 + 34, (const raven::MovingStateEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning((uint64_t)v8[31].i64, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (v8[32].i8[7] >= 0)
      LOBYTE(v21) = (_BYTE)v8 - 16;
    else
      v21 = v8[31].i64[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D044EC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_18D044EE8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v8 = *a2;
  sub_18D06632C((uint64_t)&v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 688))
  {
    *(_QWORD *)(v8 + 680) = v21;
    *(_OWORD *)(v8 + 632) = v18;
    *(_OWORD *)(v8 + 648) = v19;
    *(_OWORD *)(v8 + 664) = v20;
    *(_OWORD *)(v8 + 568) = v14;
    *(_OWORD *)(v8 + 584) = v15;
    *(_OWORD *)(v8 + 600) = v16;
    *(_OWORD *)(v8 + 616) = v17;
    *(_OWORD *)(v8 + 504) = v10;
    *(_OWORD *)(v8 + 520) = v11;
    *(_OWORD *)(v8 + 536) = v12;
    *(_OWORD *)(v8 + 552) = v13;
  }
  else
  {
    *(_QWORD *)(v8 + 496) = &unk_1E25C2AB0;
    *(_QWORD *)(v8 + 680) = v21;
    *(_OWORD *)(v8 + 632) = v18;
    *(_OWORD *)(v8 + 648) = v19;
    *(_OWORD *)(v8 + 664) = v20;
    *(_OWORD *)(v8 + 568) = v14;
    *(_OWORD *)(v8 + 584) = v15;
    *(_OWORD *)(v8 + 600) = v16;
    *(_OWORD *)(v8 + 616) = v17;
    *(_OWORD *)(v8 + 504) = v10;
    *(_OWORD *)(v8 + 520) = v11;
    *(_OWORD *)(v8 + 536) = v12;
    *(_OWORD *)(v8 + 552) = v13;
    *(_BYTE *)(v8 + 688) = 1;
  }
  if ((v16 & 0xFE) != 2)
  {
    if (*(_BYTE *)(v8 + 1352))
      *(_BYTE *)(v8 + 1352) = 0;
  }
}

void sub_18D04502C(int a1, raven::RavenUserSpeedActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenUserSpeedActiveObject *v8;
  _BYTE v9[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenUserSpeedActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

double sub_18D045078(int a1, raven::RavenSolutionActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenSolutionActiveObject *v8;
  double result;
  _BYTE v10[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)&result = raven::RavenSolutionActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v10).n128_u64[0];
  return result;
}

double sub_18D0450B8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  const char *v27;
  uint64_t v28;
  int v29;
  int v30;
  double v31;
  int v32;
  int v33;
  unsigned int v34;
  std::bad_cast v35[2];
  int v36;
  unsigned __int8 v37[24];
  int v38;
  __int16 v39;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven22GNSSUTCParametersEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)"N5raven22GNSSUTCParametersEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v35[0].__vftable = 0;
      std::bad_cast::bad_cast(v35);
      v35[0].__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(unsigned __int8 *)(v28 + 112);
    v30 = *(unsigned __int8 *)(v28 + 113);
    v38 = *(_DWORD *)(v28 + 114);
    v39 = *(_WORD *)(v28 + 118);
    result = *(double *)(v28 + 120);
    v31 = *(double *)(v28 + 128);
    *(_OWORD *)v37 = *(_OWORD *)(v28 + 136);
    v32 = *(_DWORD *)(v28 + 152);
    *(_OWORD *)&v35[0].__vftable = *(_OWORD *)(v28 + 156);
    v36 = *(_DWORD *)(v28 + 172);
    if (v29 && fabs(result) < 0.000001 && fabs(v31) < 0.000001 && (v32 + 500) <= 0x3E8)
    {
      v33 = *(_DWORD *)(v28 + 176);
      v34 = v32 - v33;
      if (v32 - v33 < 0)
        v34 = v33 - v32;
      if (v34 <= 1 && v30 == 1)
      {
        *(_BYTE *)(v9 + 584) = v29;
        *(_BYTE *)(v9 + 585) = 1;
        *(_WORD *)(v9 + 590) = v39;
        *(_DWORD *)(v9 + 586) = v38;
        *(double *)(v9 + 592) = result;
        *(double *)(v9 + 600) = v31;
        *(_OWORD *)(v9 + 608) = *(_OWORD *)v37;
        *(_DWORD *)(v9 + 624) = v32;
        *(_DWORD *)(v9 + 644) = v36;
        result = *(double *)&v35[0].__vftable;
        *(_OWORD *)(v9 + 628) = *(_OWORD *)&v35[0].__vftable;
        *(_DWORD *)(v9 + 648) = v33;
      }
    }
  }
  else
  {
    LOWORD(v35[0].__vftable) = 3;
    v37[0] = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v35, v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
  }
  return result;
}

void sub_18D04527C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  std::exception::~exception(&a11);
  _Unwind_Resume(a1);
}

void sub_18D045294(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v40;
  void **v41;
  uint64_t v42;
  int8x16_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t shared_weak_owners;
  std::bad_cast_vtbl *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  int8x16_t v56;
  __int128 v57;
  __int128 v58;
  int8x16_t v59;
  __int128 v60;
  uint64_t v61;
  int8x16_t v62;
  __int128 v63;
  double v64[2];
  std::bad_cast v65;
  int8x16_t v66;
  _BYTE v67[32];
  int8x16_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven10TimerEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)"N5raven10TimerEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v65.__vftable = 0;
      std::bad_cast::bad_cast(&v65);
      v65.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v28 = *((_QWORD *)this + 2);
    v58 = *(_OWORD *)(v28 + 48);
    v59 = *(int8x16_t *)(v28 + 64);
    v60 = *(_OWORD *)(v28 + 80);
    v61 = *(_QWORD *)(v28 + 96);
    v26 = *(int8x16_t *)(v28 + 16);
    v56 = v26;
    v57 = *(_OWORD *)(v28 + 32);
    v26.i64[0] = *(_QWORD *)(v28 + 104);
  }
  else
  {
    LOWORD(v65.__vftable) = 3;
    LOBYTE(v71) = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, (unsigned __int8 *)&v71, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    v26 = (int8x16_t)0x7FF8000000000000uLL;
  }
  if (*(_BYTE *)(v9 + 480))
  {
    *(_OWORD *)&v67[16] = v58;
    v68 = v59;
    v69 = v60;
    v66 = v56;
    v65.__vftable = (std::bad_cast_vtbl *)&unk_1E25C2218;
    *(_QWORD *)&v70 = v61;
    *(_OWORD *)v67 = v57;
    *((_QWORD *)&v70 + 1) = v26.i64[0];
    raven::PopulateAllTimeFields((uint64_t)&v66, v9 + 488, v26, v56);
    if (v67[0])
    {
      if (cnnavigation::GNSSUTCParameters::IsValid((cnnavigation::GNSSUTCParameters *)(v9 + 584)))
      {
        LODWORD(v64[0]) = 0;
        v64[1] = 0.0;
        v63 = *(_OWORD *)&v67[8];
        if (!cnnavigation::iOSTimeToJulianTime((uint64_t)&v63, (uint64_t)&v71)
          && !cnnavigation::JulianTimeToGPSTime((uint64_t)&v71, *(_DWORD *)(v9 + 624), (uint64_t)v64))
        {
          cnnavigation::TAITime::TAITime(&v62, v64, (cnnavigation::GNSSUTCParameters *)(v9 + 584));
          v34 = v62;
          v68 = v62;
          v67[24] = 1;
        }
      }
    }
    if (!*(_BYTE *)(v9 + 656)
      || (*((_QWORD *)&v71 + 1) = CNTimeSpan::operator-((uint64_t)&v66, (_QWORD *)(v9 + 680), v34, v35),
          v72 = v36,
          LOBYTE(v71) = 1,
          !sub_18D03FE4C((double *)&v71 + 1, (double *)(v9 + 664))))
    {
      LOWORD(v71) = 12;
      LOBYTE(v64[0]) = 3;
      v55 = *(double *)&v66.i64[1] + (double)v66.i64[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v64, "Time scales: Raven, %.6f, iOS, %.6f, TAIuncorrected, %.6f", v29, v30, v31, v32, v33, SLOBYTE(v55));
      v37 = *(unsigned __int8 *)(v9 + 656);
      *(int8x16_t *)(v9 + 664) = v66;
      if (!v37)
        *(_BYTE *)(v9 + 656) = 1;
    }
    v38 = (std::__shared_weak_count *)operator new(0x60uLL);
    v38->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    v38->__shared_weak_owners_ = 0;
    v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
    v38[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
    v40 = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
    LOBYTE(v38[1].__shared_owners_) = 0;
    v38[1].__shared_weak_owners_ = 0;
    v38[2].__vftable = v40;
    v41 = (void **)&v38[3].__vftable;
    v38[2].__shared_owners_ = 0;
    v38[2].__shared_weak_owners_ = 0;
    sub_18D0778AC(&v38[3].__vftable, "");
    LOBYTE(v38[1].__shared_owners_) = 1;
    v42 = operator new();
    *(_QWORD *)v42 = &off_1E25C1600;
    *(_QWORD *)(v42 + 8) = &unk_1E25C2218;
    v43 = v68;
    *(_OWORD *)(v42 + 48) = *(_OWORD *)&v67[16];
    *(int8x16_t *)(v42 + 64) = v43;
    v44 = v70;
    *(_OWORD *)(v42 + 80) = v69;
    *(_OWORD *)(v42 + 96) = v44;
    v45 = *(_OWORD *)v67;
    *(int8x16_t *)(v42 + 16) = v66;
    *(_OWORD *)(v42 + 32) = v45;
    shared_weak_owners = v38[1].__shared_weak_owners_;
    v38[1].__shared_weak_owners_ = v42;
    if (shared_weak_owners)
      (*(void (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 8))(shared_weak_owners);
    v47 = v65.__vftable;
    v38[2].__vftable = (std::__shared_weak_count_vtbl *)v65.__vftable[-1].what;
    v38[2].__shared_owners_ = ((uint64_t (*)(uint64_t))v47->what)((uint64_t)&v65);
    v38[2].__shared_weak_owners_ = v48;
    ((void (*)(_QWORD *@<X8>))v65.__vftable[1].~bad_cast)(&v71);
    if (SHIBYTE(v38[3].__shared_weak_owners_) < 0)
      operator delete(*v41);
    *(_OWORD *)v41 = v71;
    v38[3].__shared_weak_owners_ = v72;
    v49 = *(_QWORD *)(v9 + 344);
    *(_QWORD *)&v71 = v38 + 1;
    *((_QWORD *)&v71 + 1) = v38;
    do
      v50 = __ldxr(p_shared_owners);
    while (__stxr(v50 + 1, p_shared_owners));
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v49 + 16))(v49, &v71, v9);
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_18D04573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::exception a32)
{
  std::exception::~exception(&a32);
  _Unwind_Resume(a1);
}

uint64_t **sub_18D045814(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t **v2;

  v2 = sub_18D041348(a1, a2);
  if (!v2)
    sub_18D077838("unordered_map::at: key not found");
  return v2 + 3;
}

void sub_18D04583C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC5D0;
}

void sub_18D04584C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC578;
}

void sub_18D04585C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC368;
}

void sub_18D04586C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC0A8;
}

void sub_18D04587C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBFF8;
}

void sub_18D04588C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBF48;
}

void sub_18D04589C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBE40;
}

void sub_18D0458AC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBD38;
}

void sub_18D0458BC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBCE0;
}

void sub_18D0458CC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB8C0;
}

void sub_18D0458DC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB868;
}

void sub_18D0458EC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB708;
}

void sub_18D0458FC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB448;
}

void sub_18D04590C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB340;
}

void sub_18D04591C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB2E8;
}

void sub_18D04592C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAD68;
}

void sub_18D04593C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAD10;
}

void sub_18D04594C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA630;
}

void sub_18D04595C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA420;
}

void sub_18D04596C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA370;
}

void sub_18D04597C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA160;
}

void sub_18D04598C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA0B0;
}

void sub_18D04599C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9FA8;
}

void sub_18D0459AC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9A28;
}

void sub_18D0459BC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C99D0;
}

void sub_18D0459CC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C98C8;
}

void sub_18D0459DC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C96B8;
}

void sub_18D0459EC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9240;
}

void sub_18D0459FC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C91E8;
}

void sub_18D045A0C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9138;
}

void sub_18D045A1C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9030;
}

void sub_18D045A2C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8FD8;
}

void sub_18D045A3C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8F28;
}

void sub_18D045A4C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8CC0;
}

void sub_18D045A5C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8BB8;
}

uint64_t raven::SolutionChecker::PerformDirectionOfTravelCheck(raven::SolutionChecker *this, raven::RavenSolutionEvent *a2, BOOL *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t **LogLevel;
  double v26;
  double v27;
  double v28;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  cnprint::CNPrinter *v61;
  uint64_t v62;
  int8x16_t v63;
  int8x16_t v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  double v127;
  int8x16_t v128;
  int8x16_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162[2];
  unsigned __int8 v163;
  unsigned __int8 v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  char v168[9];

  v168[0] = *((_BYTE *)a2 + 208);
  if (!*((_BYTE *)a2 + 1345))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v165) = 12;
      LOBYTE(v162[0]) = 1;
      v16 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v148 = v17 + (double)v16;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v165, (unsigned __int8 *)v162, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test DOT invalid. Cannot perform direction of travel check.", v18, v19, v20, v21, v22, SLOBYTE(v148));
    }
    v14 = 0;
    *a3 = 1;
    return v14;
  }
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v6 = raven::SolutionChecker::GetListOfEstimatorsToCheckAgainst((uint64_t)this, v168, (unint64_t *)&v165);
  if (v6)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
    {
      LOWORD(v162[0]) = 12;
      v164 = 1;
      v7 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v147 = v8 + (double)v7;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v164, "t,%.3lf,SolutionChecker: Could not find any RavenSolutions to perform the direction of travel check against. Exiting with check passed return value.", v9, v10, v11, v12, v13, SLOBYTE(v147));
    }
    v14 = 0;
    *a3 = 0;
    v15 = v165;
    if (!v165)
      return v14;
LABEL_71:
    operator delete(v15);
    return v14;
  }
  v15 = v165;
  v23 = v166;
  if (v165 == v166)
  {
LABEL_70:
    v14 = 0;
    *a3 = 1;
    if (!v15)
      return v14;
    goto LABEL_71;
  }
  v24 = v165;
  while (1)
  {
    v164 = 0;
    v164 = *v24;
    LogLevel = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), &v164);
    if (!LogLevel)
      sub_18D077838("unordered_map::at: key not found");
    if (!*((_BYTE *)LogLevel + 1369))
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
      {
        LOWORD(v162[0]) = 12;
        v163 = 1;
        v97 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v152 = v98 + (double)v97;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. Solution to check against has DOT invalid. Cannot perform direction of travel check.", v99, v100, v101, v102, v103, SLOBYTE(v152));
      }
      goto LABEL_70;
    }
    v26 = *((double *)LogLevel + 173);
    v27 = *((double *)LogLevel + 174);
    v28 = *((double *)LogLevel + 175);
    if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t)LogLevel[174] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v162[0]) = 12;
      v163 = 4;
      v76 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v149 = v77 + (double)v76;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against direction of travel element is non-finite, %.2lf, %.2lf, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v78, v79, v80, v81, v82, SLOBYTE(v149));
      goto LABEL_63;
    }
    v31 = *((double *)LogLevel + 180);
    v32 = *((double *)LogLevel + 183);
    v33 = *((double *)LogLevel + 185);
    if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (v31 > 0.0 ? (v34 = (*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) : (v34 = 0),
          !v34
       || (v32 > 0.0 ? (v35 = (*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) : (v35 = 0),
           !v35 || v33 <= 0.0)))
    {
      LOWORD(v162[0]) = 12;
      v163 = 4;
      v83 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v150 = v84 + (double)v83;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against has a non-finite or non-positive user DOT covariance diagonal term, pevxevx, %.2lf, pevyevy, %.2lf, pevzpevz, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v85, v86, v87, v88, v89, SLOBYTE(v150));
      goto LABEL_63;
    }
    v36 = sqrt(v27 * v27 + v26 * v26 + v28 * v28);
    if (fabs(v36) <= 0.000000015)
    {
      LOWORD(v162[0]) = 12;
      v163 = 4;
      v104 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v153 = v105 + (double)v104;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against direction of travel vector is equal to zero, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v106, v107, v108, v109, v110, SLOBYTE(v153));
LABEL_63:
      v14 = 0;
      *((_BYTE *)a2 + 209) = 1;
      *a3 = 0;
      if (v15)
        goto LABEL_71;
      return v14;
    }
    if (fabs(v36 + -1.0) > 0.000000015)
    {
      LogLevel = (uint64_t **)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel);
      if (LogLevel <= 1)
      {
        LOWORD(v162[0]) = 12;
        v163 = 1;
        v37 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v39 = v38 + (double)v37;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "WARNING: t,%.3lf,SolutionChecker: est, %u. solution_to_check_against direction of travel vector is not of unit length, %.2lf. Will proceed normally, but this is unexpected.", v40, v41, v42, v43, v44, SLOBYTE(v39));
      }
    }
    v159 = v33;
    v160 = v32;
    v161 = v31;
    v45 = *((double *)a2 + 170);
    v46 = *((double *)a2 + 171);
    v47 = *((double *)a2 + 172);
    if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v162[0]) = 12;
      v163 = 4;
      v90 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v151 = v91 + (double)v90;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test direction of travel element is non-finite, %.2lf, %.2lf, %.2lf. Exiting with check failed return value.", v92, v93, v94, v95, v96, SLOBYTE(v151));
LABEL_66:
      *a3 = 0;
      goto LABEL_67;
    }
    v48 = sqrt(v46 * v46 + v45 * v45 + v47 * v47);
    if (fabs(v48) <= 0.000000015)
    {
      LOWORD(v162[0]) = 12;
      v163 = 4;
      v111 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v154 = v112 + (double)v111;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test direction of travel vector is equal to zero, %.2lf. Exiting with check failed return value.", v113, v114, v115, v116, v117, SLOBYTE(v154));
      goto LABEL_66;
    }
    v157 = *((double *)a2 + 180);
    v158 = *((double *)a2 + 177);
    v156 = *((double *)a2 + 182);
    if (fabs(v48 + -1.0) > 0.000000015
      && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
    {
      LOWORD(v162[0]) = 12;
      v163 = 1;
      v49 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v51 = v50 + (double)v49;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test direction of travel vector is not of unit length, %.2lf. Will proceed normally, but this is unexpected.", v52, v53, v54, v55, v56, SLOBYTE(v51));
    }
    v57 = (v27 * v46 + v26 * v45 + v28 * v47) / (v36 * v48);
    v58 = -1.0;
    if (v57 >= -1.0)
      v58 = (v27 * v46 + v26 * v45 + v28 * v47) / (v36 * v48);
    if (v57 <= 1.0)
      v59 = v58;
    else
      v59 = 1.0;
    v60 = acos(v59);
    v62 = cnprint::CNPrinter::GetLogLevel(v61);
    *(double *)v64.i64 = v48 * v48;
    v65 = v60 * 57.2957795;
    v66 = v65 / sqrt((v161 + v160 + v159) / (v36 * v36) * 3282.80635 + (v158 + v157 + v156) / (v48 * v48) * 3282.80635);
    if (!(_DWORD)v62)
    {
      LOWORD(v162[0]) = 12;
      v163 = 0;
      v67 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v69 = v68 + (double)v67;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. direction_of_travel_difference check results, difference, %.2lf, difference uncertainty, %.2lf, consistency, %.2lf, threshold, %.2lf, dot_angle_variance_of_solution_to_check_against, %.2lf,dot_angle_variance_of_solution_under_test, %.2lf. Exiting with check failed return value.", v70, v71, v72, v73, v74, SLOBYTE(v69));
    }
    v75 = (double *)((char *)this + 32);
    if (v164 != 1)
    {
      v75 = (double *)((char *)this + 24);
      if (v164 != 2)
      {
        LOWORD(v162[0]) = 12;
        v163 = 4;
        v118 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v155 = v119 + (double)v118;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: invalid estimator to check against during direction of travel check, exiting with check passed return value and continuing other checks", v120, v121, v122, v123, v124, SLOBYTE(v155));
        goto LABEL_70;
      }
    }
    if (v65 > *v75)
    {
      v63.i64[0] = *((_QWORD *)this + 9);
      if (v66 > *(double *)v63.i64)
        break;
    }
    if (++v24 == v23)
      goto LABEL_70;
  }
  v126 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v126 + 1520))
    goto LABEL_82;
  v62 = CNTimeSpan::operator-((uint64_t)a2 + 8, (_QWORD *)(v126 + 1528), v63, v64);
  *(_QWORD *)&v162[0] = v62;
  v162[1] = v127;
  if (v62 < 0 || (*(double *)v128.i64 = v127, v127 < 0.0))
  {
    v62 = CNTimeSpan::operator-(v162, v128, v129);
    v128.i64[0] = v130;
  }
  if (*(double *)v128.i64 + (double)v62 >= 10.0)
  {
LABEL_82:
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v62) <= 1)
    {
      LOWORD(v162[0]) = 12;
      v163 = 1;
      v139 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v141 = v140 + (double)v139;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. direction_of_travel_difference check failed, difference, %.2lf, difference uncertainty, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_dot_angle_unc, %.2lf, sol_dot_angle_unc, %.2lf. Exiting with check failed return value.", v142, v143, v144, v145, v146, SLOBYTE(v141));
    }
LABEL_67:
    v14 = 0xFFFFFFFFLL;
    if (v15)
      goto LABEL_71;
    return v14;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v62) <= 1)
  {
    LOWORD(v162[0]) = 12;
    v163 = 1;
    v131 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v133 = v132 + (double)v131;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. direction_of_travel_difference check failed after recently exiting tunnel,difference, %.2lf, difference uncertainty, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_dot_angle_unc, %.2lf,sol_dot_angle_unc, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v134, v135, v136, v137, v138, SLOBYTE(v133));
  }
  v14 = 0;
  *((_BYTE *)a2 + 209) = 1;
  if (v15)
    goto LABEL_71;
  return v14;
}

void sub_18D046334(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 184);
  if (v3)
    operator delete(v3);
  _Unwind_Resume(exception_object);
}

uint64_t raven::SolutionChecker::PerformPositionCheck(raven::SolutionChecker *this, raven::RavenSolutionEvent *a2, BOOL *a3)
{
  double v6;
  double v7;
  double v8;
  _BOOL8 v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t **v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t **v27;
  double v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  double v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double *v46;
  double v47;
  cnprint::CNPrinter *LogLevel;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  uint64_t v75;
  double v76;
  int8x16_t v77;
  int8x16_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  double v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  double v122;
  int8x16_t v123;
  int8x16_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  _QWORD v166[2];
  double v167[2];
  void *__p;
  double v169;
  char v170;
  _OWORD v171[6];
  char v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  char v176;
  _QWORD v177[3];

  v176 = *((_BYTE *)a2 + 208);
  v6 = *((double *)a2 + 162);
  v7 = *((double *)a2 + 165);
  v8 = *((double *)a2 + 167);
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v9 = raven::SolutionChecker::GetListOfEstimatorsToCheckAgainst((uint64_t)this, &v176, (unint64_t *)&v173);
  if (v9)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v9) <= 1)
    {
      LOWORD(v171[0]) = 12;
      LOBYTE(__p) = 1;
      v10 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v150 = v11 + (double)v10;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v171, (unsigned __int8 *)&__p, "t,%.3lf,SolutionChecker: Could not find any RavenSolutions to perform the position check against. Exiting with check passed return value.", v12, v13, v14, v15, v16, SLOBYTE(v150));
    }
    v17 = 0;
    *a3 = 0;
    v18 = v173;
  }
  else
  {
    v18 = v173;
    v19 = v174;
    if (v173 == v174)
      goto LABEL_61;
    v161 = v6 + v7 + v8;
    v20 = v173;
    while (1)
    {
      v172 = 0;
      v172 = *v20;
      v21 = *((_OWORD *)a2 + 76);
      v171[2] = *((_OWORD *)a2 + 75);
      v171[3] = v21;
      v22 = *((_OWORD *)a2 + 78);
      v171[4] = *((_OWORD *)a2 + 77);
      v171[5] = v22;
      v23 = *((_OWORD *)a2 + 74);
      v171[0] = *((_OWORD *)a2 + 73);
      v171[1] = v23;
      v24 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&v172);
      v27 = v24;
      if (!v24)
        sub_18D077838("unordered_map::at: key not found");
      v26.i64[0] = (uint64_t)v24[150];
      *(double *)v25.i64 = *(double *)v26.i64 + (double)(uint64_t)v24[149];
      v28 = fabs(*(double *)v25.i64);
      v29 = (unint64_t)(*(_QWORD *)&v28 - 0x10000000000000) >> 53 > 0x3FE
         && (unint64_t)(*(_QWORD *)&v28 - 1) > 0xFFFFFFFFFFFFELL;
      v30 = !v29 || COERCE__INT64(*(double *)v26.i64 + (double)(uint64_t)v24[149]) == 0;
      if (!v30 || *(double *)v25.i64 < 0.0)
        break;
      v31 = CNTimeSpan::operator-((uint64_t)v171, v24 + 149, v25, v26);
      *(_QWORD *)&v167[0] = v31;
      v167[1] = v32;
      if (v31 < 0 || (*(double *)v33.i64 = v32, v32 < 0.0))
      {
        v31 = CNTimeSpan::operator-(v167, v33, v34);
        v33.i64[0] = v35;
      }
      v36 = *(double *)v33.i64 + (double)v31;
      if (v36 <= *((double *)this + 13))
      {
        if (!*((_BYTE *)v27 + 1288))
        {
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 2;
          v105 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v107 = v106;
          sub_18D0778AC(&__p, off_1E25CD3D0[v172]);
          v156 = v107 + (double)v105;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, contains an invalid position. Exiting with check passed return value.", v108, v109, v110, v111, v112, SLOBYTE(v156));
          if (v170 < 0)
            operator delete(__p);
LABEL_61:
          v17 = 0;
          v104 = 1;
LABEL_62:
          *a3 = v104;
          goto LABEL_63;
        }
        v37 = *((double *)v27 + 172);
        if (!*((_BYTE *)v27 + 1368) || (*(_QWORD *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v37 < 0.0)
        {
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v31) > 1)
            goto LABEL_57;
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 1;
          v96 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v98 = v97;
          sub_18D0778AC(&__p, off_1E25CD3D0[v172]);
          v155 = v98 + (double)v96;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, has an invalid speed,validity,%d,speed,%.2lf. Cannot proceed with speed check or position check. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v99, v100, v101, v102, v103, SLOBYTE(v155));
LABEL_55:
          if (v170 < 0)
            operator delete(__p);
          goto LABEL_57;
        }
        v38 = *((double *)v27 + 168);
        v39 = *((double *)v27 + 170);
        if (((unint64_t)v27[165] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || *((double *)v27 + 165) <= 0.0
          || (*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v38 <= 0.0
          || (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v39 <= 0.0)
        {
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 4;
          v80 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v82 = v81;
          sub_18D0778AC(&__p, off_1E25CD3D0[v172]);
          v153 = v82 + (double)v80;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, has a non-finite or non-positive user position covariance diagonal term, pxx, %.2lf, pyy, %.2lf, pzz, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v83, v84, v85, v86, v87, SLOBYTE(v153));
          goto LABEL_55;
        }
        v164 = *((double *)v27 + 168);
        v165 = *((double *)v27 + 172);
        v163 = *((double *)v27 + 170);
        v40 = *((double *)a2 + 159);
        v41 = *((double *)v27 + 162);
        v42 = *((double *)a2 + 160);
        v43 = *((double *)v27 + 163);
        v44 = *((double *)a2 + 161);
        v45 = *((double *)v27 + 164);
        v46 = (double *)((char *)this + 48);
        if (v172 != 1)
        {
          v46 = (double *)((char *)this + 40);
          if (v172 != 2)
          {
            LOWORD(__p) = 12;
            LOBYTE(v177[0]) = 4;
            v113 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v157 = v114 + (double)v113;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)v177, "t,%.3lf,SolutionChecker: invalid estimator to check against during position check, exiting with check passed return value and continuing other checks", v115, v116, v117, v118, v119, SLOBYTE(v157));
            goto LABEL_61;
          }
        }
        v162 = *((double *)v27 + 165);
        v47 = *v46;
        LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v31);
        v49 = sqrt((v42 - v43) * (v42 - v43) + (v40 - v41) * (v40 - v41) + (v44 - v45) * (v44 - v45));
        if (!(_DWORD)LogLevel)
        {
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 0;
          v50 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v52 = v51;
          sub_18D0778AC(&__p, off_1E25CD3D0[v172]);
          v151 = v52 + (double)v50;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s,position_difference_from_solution_to_check_against: %.2lf, position_difference_from_solution_to_check_against_tolerance_: %.2lf,position_tolerance_accounting_for_time_difference_and_speed: %.2lf, speed_of_solution_to_check_against: %.2lf,time_difference_from_solution_to_check_against: %.2lf", v53, v54, v55, v56, v57, SLOBYTE(v151));
          if (v170 < 0)
            operator delete(__p);
        }
        v58 = cnprint::CNPrinter::GetLogLevel(LogLevel);
        *(double *)v60.i64 = v163;
        v61 = v49 / sqrt(v161 + v162 + v164 + v163);
        if (!(_DWORD)v58)
        {
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 0;
          v62 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v64 = v63;
          sub_18D0778AC(&__p, off_1E25CD3D0[v172]);
          v152 = v64 + (double)v62;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, Position difference, %.2lf,Position difference uncertainty, %.2lf, consistency, %.2lf, position_variance_of_solution_to_check_against, %.2f,position_variance_of_solution_under_test, %.2f", v65, v66, v67, v68, v69, SLOBYTE(v152));
          if (v170 < 0)
            operator delete(__p);
        }
        if (v49 > v47 + v165 * v36)
        {
          v59.i64[0] = *((_QWORD *)this + 7);
          if (v61 > *(double *)v59.i64)
          {
            v121 = *((_QWORD *)this + 2);
            if (*(_BYTE *)(v121 + 1520))
            {
              v58 = CNTimeSpan::operator-((uint64_t)a2 + 8, (_QWORD *)(v121 + 1528), v59, v60);
              __p = (void *)v58;
              v169 = v122;
              if (v58 < 0 || (*(double *)v123.i64 = v122, v122 < 0.0))
              {
                v58 = CNTimeSpan::operator-((double *)&__p, v123, v124);
                v123.i64[0] = v125;
              }
              if (*(double *)v123.i64 + (double)v58 < 10.0)
              {
                if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v58) > 1)
                  goto LABEL_57;
                LOWORD(v177[0]) = 12;
                LOBYTE(v166[0]) = 1;
                v126 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
                v128 = v127;
                sub_18D23C5C0(&v172, &__p);
                v158 = v128 + (double)v126;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s,position_difference_from_solution_to_check_against check failed after recently exiting tunnel, difference, %.2lf, tolerance, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_position_unc, %.2f, sol_position_unc, %.2f. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v129, v130, v131, v132, v133, SLOBYTE(v158));
                goto LABEL_55;
              }
            }
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v58) <= 1)
            {
              LOWORD(v177[0]) = 12;
              LOBYTE(v166[0]) = 1;
              v134 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
              v136 = v135;
              sub_18D23C5C0(&v172, &__p);
              v159 = v136 + (double)v134;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s,position_difference_from_solution_to_check_against check failed, difference, %.2lf, tolerance, %.2lf,consistency, %.2lf, threshold, %.2lf, solution_to_check_against_position_unc, %.2f, sol_position_unc, %.2f.Exiting with check failed return value.", v137, v138, v139, v140, v141, SLOBYTE(v159));
              if (v170 < 0)
                operator delete(__p);
            }
            v104 = 0;
            v17 = 0xFFFFFFFFLL;
            goto LABEL_62;
          }
          if (v172 == 1)
          {
            v70 = *((_QWORD *)this + 2);
            v166[0] = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v166[1] = v71;
            if (*(unsigned __int8 *)(v70 + 656) | *(unsigned __int8 *)(v70 + 658))
            {
              v177[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v70 + 432) + 16))(v70 + 432);
              v177[1] = v72;
              v75 = CNTimeSpan::operator-((uint64_t)v166, v177, v73, v74);
              __p = (void *)v75;
              v169 = v76;
              if (v75 < 0 || (*(double *)v77.i64 = v76, v76 < 0.0))
              {
                v75 = CNTimeSpan::operator-((double *)&__p, v77, v78);
                v77.i64[0] = v79;
              }
              if (*(double *)v77.i64 + (double)v75 < 5.0)
              {
                if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v75) <= 1)
                {
                  LOWORD(v177[0]) = 12;
                  LOBYTE(v166[0]) = 1;
                  v142 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
                  v144 = v143;
                  sub_18D23C5C0(&v172, &__p);
                  v160 = v144 + (double)v142;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s,position_difference_from_solution_under_check check failed while in tunnel, difference, %.2lf, tolerance, %.2lf,consistency, %.2lf, threshold, %.2lf, solution_to_check_against_position_unc, %.2f, sol_position_unc, %.2f.Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v145, v146, v147, v148, v149, SLOBYTE(v160));
                  goto LABEL_55;
                }
LABEL_57:
                v104 = 0;
                v17 = 0;
                *((_BYTE *)a2 + 209) = 1;
                goto LABEL_62;
              }
            }
          }
        }
      }
      if (++v20 == v19)
        goto LABEL_61;
    }
    LOWORD(v177[0]) = 12;
    LOBYTE(v167[0]) = 4;
    v88 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v90 = v89;
    sub_18D0778AC(&__p, off_1E25CD3D0[v172]);
    v154 = v90 + (double)v88;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v167, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, solution time is invalid, time, %.3lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v91, v92, v93, v94, v95, SLOBYTE(v154));
    if (v170 < 0)
      operator delete(__p);
    v17 = 0;
    *((_BYTE *)a2 + 209) = 1;
    *a3 = 0;
  }
LABEL_63:
  if (v18)
    operator delete(v18);
  return v17;
}

void sub_18D046DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  if (a35 < 0)
    operator delete(__p);
  v37 = *(void **)(v35 - 200);
  if (v37)
    operator delete(v37);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D046E6C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TimeMarkEvent");
}

void raven::RavenPositionContextEstimatorActiveObject::HandleEvent(raven::RavenPositionContextEstimatorActiveObject *this, const raven::ActivityStateEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  unsigned __int8 v11;
  __int16 v12;

  if (*((_BYTE *)this + 480))
  {
    raven::RavenPositionContextEstimator::HandleEvent((raven::RavenPositionContextEstimatorActiveObject *)((char *)this + 576), a2);
  }
  else
  {
    v12 = 12;
    v11 = 2;
    v10[0] = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v10[1] = v3;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 520, (uint64_t)v10, "RavenPositionContextEstimatorActiveObject is not configured.");
    if (*((char *)this + 543) >= 0)
      LOBYTE(v9) = (_BYTE)this + 8;
    else
      v9 = *((_QWORD *)this + 65);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "%s", v4, v5, v6, v7, v8, v9);
  }
}

void raven::RavenPositionContextEstimatorActiveObject::HandleEvent(raven::RavenPositionContextEstimatorActiveObject *this, const raven::TimeMarkEvent *a2)
{
  __int128 *v4;
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  double v8;
  int8x16_t v9;
  int8x16_t v10;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  __int128 v34;
  double v35[2];
  unsigned __int8 v36;

  if (*((_BYTE *)this + 480))
  {
    raven::RavenPositionContextEstimator::HandleEvent((raven::RavenPositionContextEstimatorActiveObject *)((char *)this + 576), a2);
    v4 = (__int128 *)((char *)a2 + 8);
    v7 = CNTimeSpan::operator-((uint64_t)v4, (_QWORD *)this + 61, v5, v6);
    *(_QWORD *)&v35[0] = v7;
    v35[1] = v8;
    if (v7 < 0 || (*(double *)v9.i64 = v8, v8 < 0.0))
      v7 = CNTimeSpan::operator-(v35, v9, v10);
    v26 = (void *)v7;
    *(double *)&v27 = v8;
    if (sub_18D069E98((double *)&v26, (double *)this + 63))
    {
      __asm { FMOV            V0.2D, #0.5 }
      v34 = _Q0;
      v16 = v4[3];
      v29 = v4[2];
      v30 = v16;
      v17 = v4[5];
      v31 = v4[4];
      v32 = v17;
      v18 = v4[1];
      v27 = *v4;
      v26 = &unk_1E25C3130;
      v33 = 0;
      v28 = v18;
      if (!raven::RavenPositionContextEstimator::PopulateEvent((raven::RavenPositionContextEstimatorActiveObject *)((char *)this + 576), (raven::PositionContextStateEvent *)&v26))sub_18D2B5D04((uint64_t)this, (uint64_t *)&v26);
      *(_OWORD *)((char *)this + 488) = *v4;
    }
  }
  else
  {
    LOWORD(v35[0]) = 12;
    v36 = 2;
    v26 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v27 = v19;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 520, (uint64_t)&v26, "RavenPositionContextEstimatorActiveObject is not configured.");
    if (*((char *)this + 543) >= 0)
      LOBYTE(v25) = (_BYTE)this + 8;
    else
      v25 = *((_QWORD *)this + 65);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v35, &v36, "%s", v20, v21, v22, v23, v24, v25);
  }
}

void raven::RavenIonosphereEstimatorActiveObject::HandleEvent(const void **this, const raven::RavenSolutionEvent *a2)
{
  const void **v2;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  double v12;
  double v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  double v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  double v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  double v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  unsigned __int8 v59;
  __int16 v60;

  v2 = this;
  if (!*((_BYTE *)this + 480))
  {
    v60 = 12;
    v59 = 2;
    v14 = cnprint::CNLogFormatter::FormatGeneral(this + 271, "RavenIonosphereEstimatorActiveObject: not configured");
    goto LABEL_15;
  }
  if (*((_BYTE *)a2 + 1464))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_1ECF24480);
    if ((v4 & 1) == 0)
    {
      this = (const void **)__cxa_guard_acquire(&qword_1ECF24480);
      if ((_DWORD)this)
      {
        qword_1ECF24478 = 0x400DDB3D742C2656;
        __cxa_guard_release(&qword_1ECF24480);
      }
    }
    v5 = atomic_load((unsigned __int8 *)&qword_1ECF24490);
    if ((v5 & 1) == 0)
    {
      this = (const void **)__cxa_guard_acquire(&qword_1ECF24490);
      if ((_DWORD)this)
      {
        *(double *)&qword_1ECF24488 = *(double *)&qword_1ECF24478 * *(double *)&qword_1ECF24478;
        __cxa_guard_release(&qword_1ECF24490);
      }
    }
    v6 = atomic_load((unsigned __int8 *)&qword_1ECF244A0);
    if ((v6 & 1) == 0)
    {
      this = (const void **)__cxa_guard_acquire(&qword_1ECF244A0);
      if ((_DWORD)this)
      {
        qword_1ECF24498 = 0x400DA639B642E9CDLL;
        __cxa_guard_release(&qword_1ECF244A0);
      }
    }
    v7 = atomic_load((unsigned __int8 *)&qword_1ECF244B0);
    if ((v7 & 1) == 0)
    {
      this = (const void **)__cxa_guard_acquire(&qword_1ECF244B0);
      if ((_DWORD)this)
      {
        *(double *)&qword_1ECF244A8 = *(double *)&qword_1ECF24498 * *(double *)&qword_1ECF24498;
        __cxa_guard_release(&qword_1ECF244B0);
      }
    }
    v8 = atomic_load((unsigned __int8 *)&qword_1ECF244C0);
    if ((v8 & 1) == 0)
    {
      this = (const void **)__cxa_guard_acquire(&qword_1ECF244C0);
      if ((_DWORD)this)
      {
        qword_1ECF244B8 = 0x3FFBB67AE8584CA8;
        __cxa_guard_release(&qword_1ECF244C0);
      }
    }
    v9 = atomic_load((unsigned __int8 *)&qword_1ECF244D0);
    if ((v9 & 1) == 0)
    {
      this = (const void **)__cxa_guard_acquire(&qword_1ECF244D0);
      if ((_DWORD)this)
      {
        *(double *)&qword_1ECF244C8 = *(double *)&qword_1ECF244B8 * *(double *)&qword_1ECF244B8;
        __cxa_guard_release(&qword_1ECF244D0);
      }
    }
    v10 = atomic_load((unsigned __int8 *)&qword_1ECF244E0);
    if ((v10 & 1) == 0)
    {
      this = (const void **)__cxa_guard_acquire(&qword_1ECF244E0);
      if ((_DWORD)this)
      {
        qword_1ECF244D8 = 0x3FFB99F88590841FLL;
        __cxa_guard_release(&qword_1ECF244E0);
      }
    }
    v11 = atomic_load((unsigned __int8 *)&qword_1ECF244F0);
    if ((v11 & 1) == 0)
    {
      this = (const void **)__cxa_guard_acquire(&qword_1ECF244F0);
      if ((_DWORD)this)
      {
        *(double *)&qword_1ECF244E8 = *(double *)&qword_1ECF244D8 * *(double *)&qword_1ECF244D8;
        __cxa_guard_release(&qword_1ECF244F0);
      }
    }
    v12 = *((double *)a2 + 186);
    v13 = *((double *)a2 + 185) * *((double *)a2 + 185) + *((double *)a2 + 184) * *((double *)a2 + 184);
    if (fabs(v13) >= 2.22044605e-16)
    {
      v21 = v12 * v12 / v13;
    }
    else
    {
      if (fabs(v12) < 2.22044605e-16)
      {
        v60 = 12;
        v59 = 2;
        v14 = cnprint::CNLogFormatter::FormatGeneral(v2 + 271, "Warning: RavenIonosphereEstimatorActiveObject: Receiver location is at the center of the earth. Cannot handle RavenSolutionEvent");
LABEL_15:
        if (*((char *)v2 + 2191) >= 0)
          LOBYTE(v20) = v14;
        else
          v20 = v2[271];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "%s", v15, v16, v17, v18, v19, (char)v20);
        return;
      }
      v21 = INFINITY;
    }
    if (v21 <= *(double *)&qword_1ECF24488)
    {
      if (v21 > *(double *)&qword_1ECF244C8 && *((_BYTE *)v2 + 481))
      {
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this))
        {
          v60 = 12;
          v59 = 0;
          v29 = cnprint::CNLogFormatter::FormatGeneral(v2 + 271, "RavenIonosphereEstimatorActiveObject: Receiver location is at a high latitude, but not too high to not run the estimator; run the estimator with an adjusted elevation mas"
                                   "k,tanlat,%.3lf,latthresh,%.3lf,tan_of_abs_lat_thresh_to_use_adjusted_elev_mask_squared,%.3lf",
                                   v21,
                                   *(double *)&qword_1ECF244C8,
                                   *(double *)&qword_1ECF24488);
          if (*((char *)v2 + 2191) >= 0)
            LOBYTE(v35) = v29;
          else
            v35 = v2[271];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "%s", v30, v31, v32, v33, v34, (char)v35);
        }
        v36 = *((double *)v2[277] + 388);
        if (v36 < 15.0)
          v36 = 15.0;
        *((double *)v2 + 286) = v36;
      }
      else
      {
        if (v21 <= *(double *)&qword_1ECF244E8)
        {
          if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this))
          {
            v60 = 12;
            v59 = 0;
            v44 = cnprint::CNLogFormatter::FormatGeneral(v2 + 271, "RavenIonosphereEstimatorActiveObject: Receiver location is at a low enough latitude to run the estimator without an adjusted elevation mask,tanlat,%.3lf,latthresh,%.3lf", v21, *(double *)&qword_1ECF244E8);
            if (*((char *)v2 + 2191) >= 0)
              LOBYTE(v50) = v44;
            else
              v50 = v2[271];
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "%s", v45, v46, v47, v48, v49, (char)v50);
          }
          v51 = *((double *)v2[277] + 388);
        }
        else
        {
          if (v21 > *(double *)&qword_1ECF244A8 || *((_BYTE *)v2 + 481))
          {
            if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this))
            {
              v60 = 12;
              v59 = 0;
              v37 = cnprint::CNLogFormatter::FormatGeneral(v2 + 271, "RavenIonosphereEstimatorActiveObject: Do nothing. Maintain the current state. This can happen if we are within the hysteresis region,tanlat,%.3lf,tan_of_abs_lat_minus_hysteresis_adjusted_elev_mask_thresh_squared,%.3lf,tan_of_abs_lat_thresh_squared,%.3lf", v21, *(double *)&qword_1ECF244A8, *(double *)&qword_1ECF244C8);
              if (*((char *)v2 + 2191) >= 0)
                LOBYTE(v43) = v37;
              else
                v43 = v2[271];
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "%s", v38, v39, v40, v41, v42, (char)v43);
            }
            goto LABEL_54;
          }
          if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this))
          {
            v60 = 12;
            v59 = 0;
            v52 = cnprint::CNLogFormatter::FormatGeneral(v2 + 271, "RavenIonosphereEstimatorActiveObject: Receiver location is at a high latitude, but no longer at a prohibitively high latitude; run the estimator with an adjusted elev"
                                     "ation mask,tanlat,%.3lf,latthresh,%.3lf",
                                     v21,
                                     *(double *)&qword_1ECF244A8);
            if (*((char *)v2 + 2191) >= 0)
              LOBYTE(v58) = v52;
            else
              v58 = v2[271];
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "%s", v53, v54, v55, v56, v57, (char)v58);
          }
          v51 = *((double *)v2[277] + 388);
          if (v51 < 15.0)
            v51 = 15.0;
        }
        *((double *)v2 + 286) = v51;
        *((_BYTE *)v2 + 481) = 1;
      }
    }
    else if (*((_BYTE *)v2 + 481))
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this) <= 1)
      {
        v60 = 12;
        v59 = 1;
        v22 = cnprint::CNLogFormatter::FormatGeneral(v2 + 271, "RavenIonosphereEstimatorActiveObject: Receiver location is at too high of a latitude to run the estimator, disabling the estimator,tanlat,%.3lf,latthresh,%.3lf", v21, *(double *)&qword_1ECF24488);
        if (*((char *)v2 + 2191) >= 0)
          LOBYTE(v28) = v22;
        else
          v28 = v2[271];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "%s", v23, v24, v25, v26, v27, (char)v28);
      }
      *((_BYTE *)v2 + 481) = 0;
      raven::RavenIonosphereEstimator::Reset((raven::RavenIonosphereEstimator *)(v2 + 286));
    }
  }
LABEL_54:
  if (*((_BYTE *)v2 + 481))
  {
    std::mutex::lock((std::mutex *)(v2 + 278));
    raven::RavenIonosphereEstimator::HandleEvent((raven::RavenIonosphereEstimator *)(v2 + 286), a2);
    std::mutex::unlock((std::mutex *)(v2 + 278));
  }
}

void sub_18D047644(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void raven::RavenSignalEnvironmentActiveObject::HandleEvent(raven::RavenSignalEnvironmentActiveObject *this, const raven::TimeMarkEvent *a2)
{
  int v4;
  double v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  if (*((_BYTE *)this + 496))
  {
    v4 = *((unsigned __int8 *)this + 616);
    if (*((_BYTE *)this + 616))
    {
      v5 = *(double *)(*((_QWORD *)this + 61) + 3168);
      v17 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)&v18 = v6;
      if (!*((_BYTE *)this + 616))
        goto LABEL_10;
      v9 = CNTimeSpan::operator-((uint64_t)&v17, (_QWORD *)this + 78, v7, v8);
      if (v10 + (double)v9 < v5)
        return;
      if (!*((_BYTE *)this + 496))
LABEL_10:
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
    }
    v17 = &unk_1E25C2FC8;
    v11 = *((_OWORD *)this + 33);
    v18 = *((_OWORD *)this + 32);
    v19 = v11;
    v12 = *((_OWORD *)this + 34);
    v21 = *((_OWORD *)this + 35);
    v13 = *((_OWORD *)this + 37);
    v22 = *((_OWORD *)this + 36);
    v23 = v13;
    v24 = *((_BYTE *)this + 608);
    v20 = v12;
    v18 = *(_OWORD *)((char *)a2 + 8);
    v19 = *(_OWORD *)((char *)a2 + 24);
    v14 = *(_OWORD *)((char *)a2 + 40);
    v15 = *(_OWORD *)((char *)a2 + 56);
    v16 = *(_OWORD *)((char *)a2 + 72);
    v23 = *(_OWORD *)((char *)a2 + 88);
    v22 = v16;
    v21 = v15;
    v20 = v14;
    *((_OWORD *)this + 39) = *(_OWORD *)((char *)a2 + 8);
    if (!v4)
      *((_BYTE *)this + 616) = 1;
    sub_18D166420((uint64_t)this, (uint64_t)&v17);
  }
}

raven::GnssReceiverBandCorrectionsManager *raven::GnssReceiverBandCorrectionsManager::GnssReceiverBandCorrectionsManager(raven::GnssReceiverBandCorrectionsManager *this, const raven::RavenParameters *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 880) = 0;
  *((_QWORD *)this + 111) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_BYTE *)this + 48) = 0;
  raven::GnssReceiverBandCorrectionsManager::Configure(this, a2);
  return this;
}

void sub_18D047808(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD **v4;
  uint64_t v6;

  v6 = *v3;
  *v3 = 0;
  if (v6)
    sub_18D20B03C((uint64_t)v3, v6);
  sub_18D20B088(v2, 0);
  sub_18D03D9B4(v1, *v4);
  _Unwind_Resume(a1);
}

__n128 raven::RavenDeviceAttitudeActiveObject::HandleEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::ActivityStateEvent *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__p[2];
  char v26;
  unsigned __int8 v27;
  __int16 v28;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 7176))
    {
      v2 = *(_OWORD *)((char *)a2 + 8);
      v3 = *(_OWORD *)((char *)a2 + 24);
      v4 = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)this + 440) = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 439) = v4;
      *((_OWORD *)this + 438) = v3;
      *((_OWORD *)this + 437) = v2;
      v5 = *(_OWORD *)((char *)a2 + 72);
      v6 = *(_OWORD *)((char *)a2 + 88);
      v7 = *(_OWORD *)((char *)a2 + 104);
      *((_OWORD *)this + 444) = *(_OWORD *)((char *)a2 + 120);
      *((_OWORD *)this + 443) = v7;
      *((_OWORD *)this + 442) = v6;
      *((_OWORD *)this + 441) = v5;
      result = *(__n128 *)((char *)a2 + 136);
      v9 = *(_OWORD *)((char *)a2 + 152);
      v10 = *(_OWORD *)((char *)a2 + 168);
      *((_QWORD *)this + 896) = *((_QWORD *)a2 + 23);
      *((_OWORD *)this + 447) = v10;
      *((_OWORD *)this + 446) = v9;
      *((__n128 *)this + 445) = result;
    }
    else
    {
      *((_QWORD *)this + 873) = &unk_1E25C2AB0;
      v17 = *(_OWORD *)((char *)a2 + 8);
      v18 = *(_OWORD *)((char *)a2 + 24);
      v19 = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)this + 440) = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 439) = v19;
      *((_OWORD *)this + 438) = v18;
      *((_OWORD *)this + 437) = v17;
      v20 = *(_OWORD *)((char *)a2 + 72);
      v21 = *(_OWORD *)((char *)a2 + 88);
      v22 = *(_OWORD *)((char *)a2 + 104);
      *((_OWORD *)this + 444) = *(_OWORD *)((char *)a2 + 120);
      *((_OWORD *)this + 443) = v22;
      *((_OWORD *)this + 442) = v21;
      *((_OWORD *)this + 441) = v20;
      result = *(__n128 *)((char *)a2 + 136);
      v23 = *(_OWORD *)((char *)a2 + 152);
      v24 = *(_OWORD *)((char *)a2 + 168);
      *((_QWORD *)this + 896) = *((_QWORD *)a2 + 23);
      *((_OWORD *)this + 447) = v24;
      *((_OWORD *)this + 446) = v23;
      *((__n128 *)this + 445) = result;
      *((_BYTE *)this + 7176) = 1;
    }
  }
  else
  {
    v28 = 12;
    v27 = 3;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 16))(__p);
    if (v26 >= 0)
      v16 = __p;
    else
      LOBYTE(v16) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s is not configured yet.", v11, v12, v13, v14, v15, (char)v16);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  return result;
}

void sub_18D0479B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double raven::RavenDeviceAttitudeActiveObject::HandleEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::MountStateEvent *a2)
{
  _BYTE *v4;
  unsigned int v5;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  cnprint::CNPrinter *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  void *__p[2];
  char v32;
  unsigned __int8 v33;
  __int16 v34;

  if (*((_BYTE *)this + 480))
  {
    v4 = (char *)this + 6979;
    if (!*((_BYTE *)this + 7176) || (*((_BYTE *)this + 7088) & 0xFE) != 2)
    {
      v5 = *((unsigned __int8 *)a2 + 104);
      if (v5 > 3 || v5 == 1)
      {
        if (!*v4)
        {
          v21 = (cnprint::CNPrinter *)(*(uint64_t (**)(raven::RavenDeviceAttitudeActiveObject *))(*(_QWORD *)this + 48))(this);
          *v4 = 1;
          if (!cnprint::CNPrinter::GetLogLevel(v21))
          {
            LOWORD(__p[0]) = 12;
            LOBYTE(v34) = 0;
            v22 = (*(uint64_t (**)(const raven::MountStateEvent *))(*(_QWORD *)a2 + 16))(a2);
            v30 = v23 + (double)v22;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v34, "DevAtt,t,%.3lf, Engaged for becoming mounted.", v24, v25, v26, v27, v28, SLOBYTE(v30));
          }
        }
      }
      else if (*v4)
      {
        *v4 = 0;
        if (!cnprint::CNPrinter::GetLogLevel(this))
        {
          LOWORD(__p[0]) = 12;
          LOBYTE(v34) = 0;
          v7 = (*(uint64_t (**)(const raven::MountStateEvent *))(*(_QWORD *)a2 + 16))(a2);
          v29 = v8 + (double)v7;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v34, "DevAtt,t,%.3lf, Reset because of not being mounted.", v9, v10, v11, v12, v13, SLOBYTE(v29));
        }
        (*(void (**)(raven::RavenDeviceAttitudeActiveObject *))(*(_QWORD *)this + 48))(this);
      }
    }
  }
  else
  {
    v34 = 12;
    v33 = 3;
    (*(void (**)(void **__return_ptr, raven::RavenDeviceAttitudeActiveObject *, const raven::MountStateEvent *))(*(_QWORD *)this + 16))(__p, this, a2);
    if (v32 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Warning: %s is not configured yet.", v15, v16, v17, v18, v19, (char)v20);
    if (v32 < 0)
      operator delete(__p[0]);
  }
  return result;
}

void sub_18D047B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenDeviceAttitudeActiveObject::HandleEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::TimeMarkEvent *a2)
{
  void *v4;
  void *v5;
  double v6;
  _QWORD *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  BOOL v16;
  BOOL v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  double v21;
  int8x16_t v22;
  int8x16_t v23;
  BOOL v24;
  BOOL v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  double v29;
  int8x16_t v30;
  int8x16_t v31;
  BOOL v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  double v36;
  int8x16_t v37;
  int8x16_t v38;
  BOOL v39;
  uint64_t v40;
  double v41;
  int8x16_t v42;
  int8x16_t v43;
  BOOL v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint64_t v48;
  double v49;
  int8x16_t v50;
  int8x16_t v51;
  BOOL v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  double v56;
  int8x16_t v57;
  int8x16_t v58;
  BOOL v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  BOOL v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  void *__p[2];
  char v77;
  unsigned __int8 v78;

  if (*((_BYTE *)this + 480))
  {
    v4 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    v6 = *(double *)&v5;
    __p[0] = v4;
    __p[1] = v5;
    v7 = (_QWORD *)*((_QWORD *)this + 61);
    v8.i64[0] = v7[144];
    v74 = 0;
    v75 = 0;
    CNTimeSpan::SetTimeSpan(&v74, 0, v8, v9);
    v12 = CNTimeSpan::operator+((uint64_t)this + 7696, &v74, v10, v11);
    if (v4)
      v16 = 1;
    else
      v16 = (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (!v16
      || !v12 && (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v17 = (uint64_t)v4 <= v12, v4 == (void *)v12))
    {
      v17 = v6 <= v13;
    }
    if (!v17)
    {
      *((_QWORD *)this + 962) = v4;
      *((_QWORD *)this + 963) = 0;
      raven::RavenDeviceAttitudeActiveObject::DetectStationaryStatus(this);
      v7 = (_QWORD *)*((_QWORD *)this + 61);
    }
    v14.i64[0] = v7[143];
    v74 = 0;
    v75 = 0;
    CNTimeSpan::SetTimeSpan(&v74, 0, v14, v15);
    v20 = CNTimeSpan::operator+((uint64_t)this + 7600, &v74, v18, v19);
    if (v4)
      v24 = 1;
    else
      v24 = (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (!v24
      || !v20 && (*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v25 = (uint64_t)v4 <= v20, v4 == (void *)v20))
    {
      v25 = v6 <= v21;
    }
    if (!v25)
    {
      *((_OWORD *)this + 475) = *(_OWORD *)__p;
      raven::RavenDeviceAttitudeActiveObject::DownSamplingAccelGyroSamples((uint64_t)this);
      v7 = (_QWORD *)*((_QWORD *)this + 61);
    }
    v22.i64[0] = v7[136];
    v74 = 0;
    v75 = 0;
    CNTimeSpan::SetTimeSpan(&v74, 0, v22, v23);
    v28 = CNTimeSpan::operator+((uint64_t)this + 7616, &v74, v26, v27);
    if (!v4 && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || !v28 && (*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v32 = (uint64_t)v4 <= v28, v4 == (void *)v28))
    {
      v32 = v6 <= v29;
    }
    if (!v32)
    {
      *((_QWORD *)this + 952) = v4;
      *((_QWORD *)this + 953) = 0;
      raven::RavenDeviceAttitudeActiveObject::RaiseExternalAttitudeEvent(this, a2);
      v7 = (_QWORD *)*((_QWORD *)this + 61);
    }
    v30.i64[0] = v7[136];
    v74 = 0;
    v75 = 0;
    CNTimeSpan::SetTimeSpan(&v74, 0, v30, v31);
    v35 = CNTimeSpan::operator+((uint64_t)this + 7648, &v74, v33, v34);
    *(double *)v38.i64 = v36;
    if (!v4 && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || !v35 && (*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v39 = (uint64_t)v4 <= v35, v4 == (void *)v35))
    {
      v39 = v6 <= v36;
    }
    if (!v39)
    {
      *((_QWORD *)this + 956) = v4;
      *((_QWORD *)this + 957) = 0;
      raven::RavenDeviceAttitudeActiveObject::RaiseNonHolonomicEvent(this, a2);
    }
    v74 = 2;
    v75 = 0;
    v40 = CNTimeSpan::operator+((uint64_t)this + 7680, &v74, v38, v37);
    *(double *)v43.i64 = v41;
    if (!v4 && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || !v40 && (*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v44 = (uint64_t)v4 <= v40, v4 == (void *)v40))
    {
      v44 = v6 <= v41;
    }
    if (!v44)
    {
      *((_QWORD *)this + 960) = v4;
      *((_QWORD *)this + 961) = 0;
      raven::RavenDeviceAttitudeActiveObject::RemoveStaleSolutions(this, (uint64_t)__p, v43, v42);
    }
    v45 = *((_QWORD *)this + 61);
    v43.i64[0] = *(_QWORD *)(v45 + 1040);
    v74 = 0;
    v75 = 0;
    CNTimeSpan::SetTimeSpan(&v74, 0, v43, v42);
    v48 = CNTimeSpan::operator+((uint64_t)this + 7632, &v74, v46, v47);
    if (!v4 && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || !v48 && (*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v52 = (uint64_t)v4 <= v48, v4 == (void *)v48))
    {
      v52 = v6 <= v49;
    }
    if (!v52)
    {
      *((_QWORD *)this + 954) = v4;
      *((_QWORD *)this + 955) = 0;
      raven::RavenDeviceAttitudeActiveObject::UpdateDeviceAttitudeByLinearAcceleration(this, a2);
      v45 = *((_QWORD *)this + 61);
    }
    v50.i64[0] = *(_QWORD *)(v45 + 1088);
    v74 = 0;
    v75 = 0;
    CNTimeSpan::SetTimeSpan(&v74, 0, v50, v51);
    v55 = CNTimeSpan::operator+((uint64_t)this + 7712, &v74, v53, v54);
    if (!v4 && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || !v55 && (*(_QWORD *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v59 = (uint64_t)v4 <= v55, v4 == (void *)v55))
    {
      v59 = v6 <= v56;
    }
    if (!v59)
    {
      *((_QWORD *)this + 964) = v4;
      *((_QWORD *)this + 965) = 0;
      raven::RavenDeviceAttitudeActiveObject::UpdateDeviceAttitudeByWahbaSolution(this, a2);
      v45 = *((_QWORD *)this + 61);
    }
    v57.i64[0] = *(_QWORD *)(v45 + 1136);
    v74 = 0;
    v75 = 0;
    CNTimeSpan::SetTimeSpan(&v74, 0, v57, v58);
    v62 = CNTimeSpan::operator+((uint64_t)this + 7664, &v74, v60, v61);
    v65.i64[0] = v63;
    if (!v4 && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || !v62 && (v63 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v66 = (uint64_t)v4 <= v62, v4 == (void *)v62))
    {
      v66 = v6 <= *(double *)&v63;
    }
    if (!v66)
    {
      *((_OWORD *)this + 479) = *(_OWORD *)__p;
      raven::RavenDeviceAttitudeActiveObject::UpdateDeviceVehicleAttitudeWithRotation(this, v63);
      v45 = *((_QWORD *)this + 61);
    }
    if (*(_BYTE *)(v45 + 3801))
    {
      if (*((_BYTE *)this + 7176))
      {
        v67 = *((unsigned __int8 *)this + 7088);
        if (v67 <= 6 && ((1 << v67) & 0x4C) != 0)
        {
          if (*((_BYTE *)this + 7496))
            raven::RavenDeviceAttitudeActiveObject::ComputePCABasedHorizontalDirectionOfTravelInIMUFrame(this, a2, v65, v64);
        }
      }
    }
  }
  else
  {
    LOWORD(v74) = 12;
    v78 = 3;
    (*(void (**)(void **__return_ptr, raven::RavenDeviceAttitudeActiveObject *, const raven::TimeMarkEvent *))(*(_QWORD *)this + 16))(__p, this, a2);
    if (v77 >= 0)
      v73 = __p;
    else
      LOBYTE(v73) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v78, "Warning: %s is not configured yet.", v68, v69, v70, v71, v72, (char)v73);
    if (v77 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D048068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::TimeMarkEvent *a2)
{
  uint64_t v3;
  _QWORD v5[2];

  if (*((_BYTE *)this + 1)
    && (*(_BYTE *)this
     || (v5[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2),
         v5[1] = v3,
         !raven::RavenPositionContextEstimator::Initialize(this, (uint64_t)v5))))
  {
    return 0;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void raven::RavenUserSpeedActiveObject::HandleEvent(raven::RavenUserSpeedActiveObject *this, const raven::TimeMarkEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  cnprint::CNPrinter *v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unsigned __int8 v19;
  _OWORD v20[5];
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *(_QWORD *)&v30 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)&v30 + 1) = v4;
  if (*((_BYTE *)this + 1352))
  {
    v22 = (void *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 154) + 16))((char *)this + 1232);
    *(_QWORD *)&v23 = v5;
    v8 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v30, &v22, v6, v7);
    v10 = v9 + (double)(uint64_t)v8;
    if (v10 <= 3.56)
    {
      if (v10 >= 0.0)
      {
        if (!*((_BYTE *)this + 1352))
          sub_18D164CA0();
        v21 = 0;
        v22 = &unk_1E25C2438;
        v26 = *(_OWORD *)((char *)this + 1288);
        v27 = *(_OWORD *)((char *)this + 1304);
        v28 = *(_OWORD *)((char *)this + 1320);
        v29 = *(_OWORD *)((char *)this + 1336);
        memset(&v20[1], 0, 64);
        v20[0] = v30;
        v23 = v30;
        v24 = 0u;
        v27 = 0u;
        v26 = 0u;
        v25 = 0u;
        *(_QWORD *)&v28 = 0;
        *((_QWORD *)&v28 + 1) = 0x7FF8000000000000;
        if (!cnprint::CNPrinter::GetLogLevel(v8))
        {
          LOWORD(v20[0]) = 12;
          v19 = 0;
          v11 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
          v18 = v12 + (double)v11;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v20, &v19, "t,%.3lf,UserSpeedAO: UserSpeedEvent,age,%.2lf", v13, v14, v15, v16, v17, SLOBYTE(v18));
        }
        sub_18D17EA80((uint64_t)this, (uint64_t)&v22);
      }
    }
    else if (*((_BYTE *)this + 1352))
    {
      *((_BYTE *)this + 1352) = 0;
    }
  }
}

__n128 raven::RavenSolutionActiveObject::HandleEvent(raven::RavenSolutionActiveObject *this, const raven::TimeMarkEvent *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  void *__p;
  char v25;
  void *v26[2];
  char v27;
  unsigned __int8 v28;
  __int16 v29;

  v4 = (std::mutex *)((char *)this + 11128);
  std::mutex::lock((std::mutex *)((char *)this + 11128));
  if (raven::RavenPredictor::HandleEvent((raven::RavenSolutionActiveObject *)((char *)this + 3040), a2, v5, v6, v7, v8, v9, v10))
  {
    v29 = 12;
    v28 = 2;
    (*(void (**)(void **__return_ptr, raven::RavenSolutionActiveObject *))(*(_QWORD *)this + 16))(v26, this);
    v11 = v27;
    v12 = (char)v26[0];
    (*(void (**)(void **__return_ptr, const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 24))(&__p, a2);
    v18 = v26;
    if (v11 < 0)
      LOBYTE(v18) = v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "Warning: %s failed to handle event of type %s.", v13, v14, v15, v16, v17, (char)v18);
    if (v25 < 0)
      operator delete(__p);
    if (v27 < 0)
      operator delete(v26[0]);
  }
  v19 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 31) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 32) = v19;
  v20 = *(_OWORD *)((char *)a2 + 40);
  v21 = *(_OWORD *)((char *)a2 + 56);
  v22 = *(_OWORD *)((char *)a2 + 88);
  *((_OWORD *)this + 35) = *(_OWORD *)((char *)a2 + 72);
  *((_OWORD *)this + 36) = v22;
  *((_OWORD *)this + 33) = v20;
  *((_OWORD *)this + 34) = v21;
  std::mutex::unlock(v4);
  return result;
}

void sub_18D04838C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::mutex *v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPassThroughEstimator::HandleEvent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v8;

  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 136) = v3;
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 200) = v6;
  *(_OWORD *)(a1 + 184) = v5;
  *(_OWORD *)(a1 + 168) = v4;
  if (*(_BYTE *)(a1 + 3280))
  {
    v8 = *(_OWORD *)(a1 + 2544);
    if (sub_18D03F608((double *)&v8, (double *)(a1 + 80)))
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 2544);
  }
  if (!*(_BYTE *)(a1 + 58))
    *(_BYTE *)(a1 + 58) = *(_BYTE *)(a1 + 3280);
  return 0;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::RavenSolutionEvent *a2)
{
  uint64_t result;
  double v5;
  double v6;
  int v7;
  uint64_t *v8;
  float64x2_t v9;
  double v10;
  double v11;
  double *v12;
  float64_t v13;
  uint64_t v14;
  const char *p_p;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unsigned __int8 v23;
  __int16 v24;
  void *__p;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD v40[11];
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (*((_BYTE *)a2 + 209) != 2)
    return 0;
  if (!*((_BYTE *)a2 + 208))
    return 0;
  if (*((_BYTE *)this + 58))
    return 0;
  if (!*((_BYTE *)a2 + 1464))
    return 0;
  v40[0] = 0;
  v40[1] = 0;
  v42 = 0x800000008;
  v40[10] = &unk_1E25C87E0;
  v41 = xmmword_18D319930;
  v43 = &v44;
  v37 = 0x300000003;
  v35 = &unk_1E25C78E0;
  v36 = xmmword_18D30BB60;
  v38 = &v39;
  if (!sub_18D2485E0((uint64_t)a2 + 1168, (uint64_t)&v35))
    return 0;
  v5 = *(double *)(*((_QWORD *)this + 146) + 1272);
  v27 = 0x300000003;
  __p = &unk_1E25C78E0;
  v28 = &v29;
  v26 = xmmword_18D30BB60;
  v6 = 0.0;
  sub_18D04BE88((uint64_t)&__p, 0.0);
  v7 = HIDWORD(v26) + 1;
  v8 = v28;
  *v28 = 0x3FF0000000000000;
  v8[v7] = 0x3FF0000000000000;
  v8[2 * v7] = 0x3FF0000000000000;
  v9.f64[0] = v5 * v5;
  v32 = 0x300000003;
  v30 = &unk_1E25C78E0;
  v31 = xmmword_18D30BB60;
  v33 = &v34;
  sub_18D1C94E0((uint64_t)&__p, (uint64_t)&v30, v9);
  v10 = 0.0;
  v11 = 0.0;
  if (!*((_BYTE *)a2 + 1544)
    || (v6 = *((double *)a2 + 194),
        v10 = *((double *)a2 + 195),
        v11 = *((double *)a2 + 196),
        result = sub_18D165E74((uint64_t)a2 + 1168, (uint64_t)&v30),
        (_DWORD)result))
  {
    v12 = (double *)*((_QWORD *)this + 146);
    v13 = 1.0;
    if (*((_BYTE *)a2 + 209) != 2)
      v13 = v12[315];
    sub_18D23D2B4((uint64_t)v40, *((_QWORD *)a2 + 146), *((_QWORD *)a2 + 147), (uint64_t)&v35, (uint64_t)&v30, *((double *)a2 + 184), *((double *)a2 + 185), *((double *)a2 + 186), v6, v10, v11, v12[157], v12[158], v13);
    result = (*(uint64_t (**)(raven::RavenConvergenceEstimator *, _QWORD *))(*(_QWORD *)this + 128))(this, v40);
    if (!(_DWORD)result)
    {
      v24 = 12;
      v23 = 3;
      v22[0] = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v22[1] = v14;
      sub_18D23C5C0((char *)a2 + 208, &__p);
      if (v26 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v22, "Estimator initialized from %s solution with validity time %.3lf", p_p, *((double *)a2 + 147) + (double)*((uint64_t *)a2 + 146));
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v21) = (_BYTE)this - 72;
      else
        v21 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s", v16, v17, v18, v19, v20, v21);
      if (SHIBYTE(v26) < 0)
        operator delete(__p);
      return 0;
    }
  }
  return result;
}

void sub_18D04873C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenIonosphereEstimator::HandleEvent(raven::RavenIonosphereEstimator *this, const raven::RavenSolutionEvent *a2)
{
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  double v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  cnprint::CNPrinter *updated;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  float64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  _QWORD v56[74];
  void *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  __n128 v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  void *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;

  if (*((_BYTE *)this + 8))
  {
    if (*((_BYTE *)a2 + 209) == 2 && *((_BYTE *)a2 + 208) != 0)
    {
      if (*((_BYTE *)this + 448))
      {
        if (*((_BYTE *)a2 + 1464))
        {
          memcpy((char *)this + 568, (char *)a2 + 8, 0x971uLL);
          if (!*((_BYTE *)this + 9))
          {
            if (!*((_BYTE *)this + 80))
              goto LABEL_14;
            v7 = CNTimeSpan::operator-((uint64_t)this + 464, (_QWORD *)this + 8, v5, v6);
            v67.n128_u64[0] = v7;
            v67.n128_f64[1] = v8;
            if (v7 < 0 || (*(double *)v9.i64 = v8, v8 < 0.0))
            {
              v7 = CNTimeSpan::operator-(v67.n128_f64, v9, v10);
              v9.i64[0] = v11;
            }
            if (*(double *)v9.i64 + (double)v7 >= *(double *)(*((_QWORD *)this + 476) + 3136))
            {
LABEL_14:
              updated = (cnprint::CNPrinter *)raven::RavenIonosphereEstimator::UpdateEstimatorParametersViaPolyfitToKlobucharModel(this);
              if ((_DWORD)updated && cnprint::CNPrinter::GetLogLevel(updated) <= 1)
              {
                v67.n128_u16[0] = 12;
                LOBYTE(v62) = 1;
                v13 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 477, "Warning: UpdateEstimatorParametersViaPolyfitToKlobucharModel failed, continuing without updating parameters");
                if (*((char *)this + 3839) >= 0)
                  LOBYTE(v19) = v13;
                else
                  v19 = *((_QWORD *)this + 477);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)&v62, "%s", v14, v15, v16, v17, v18, v19);
              }
            }
            v67 = 0uLL;
            v68 = vdupq_n_s64(0x7FF8000000000000uLL);
            v69 = v68;
            v70 = v68;
            v71 = v68;
            v72 = v68;
            v75 = 0xA0000000ALL;
            v73 = &unk_1E25C5FC0;
            v74 = xmmword_18D319A40;
            v76 = &v77;
            v20 = *((_QWORD *)this + 476);
            if (*(_BYTE *)(v20 + 2736))
              *(_QWORD *)(v20 + 2728) = 0x3EB0C6F7A0B5ED8DLL;
            if (*(double *)(v20 + 2656) > 0.0
              && *(double *)(v20 + 2664) > 0.0
              && *(double *)(v20 + 2672) > 0.0
              && *(double *)(v20 + 2680) > 0.0
              && *(double *)(v20 + 2688) > 0.0
              && *(double *)(v20 + 2696) > 0.0
              && *(double *)(v20 + 2704) > 0.0
              && *(double *)(v20 + 2712) > 0.0
              && *(double *)(v20 + 2720) > 0.0
              && *(double *)(v20 + 2728) > 0.0)
            {
              v64 = 0xA0000000ALL;
              v62 = &unk_1E25C5FC0;
              v63 = xmmword_18D319A40;
              v65 = (double *)&v66;
              v59 = 0xA0000000ALL;
              v57 = &unk_1E25C5FC0;
              v60 = &v61;
              v58 = xmmword_18D319A40;
              sub_18D04BE88((uint64_t)&v57, 0.0);
              sub_18D053AA8((uint64_t)&v62, (uint64_t)&v57);
              v21 = (double *)*((_QWORD *)this + 476);
              v22 = v65;
              v23 = 1.0;
              *v65 = 1.0 / v21[332];
              v24 = HIDWORD(v63);
              v22[HIDWORD(v63) + 1] = 1.0 / v21[333];
              v22[2 * v24 + 2] = 1.0 / v21[334];
              v22[3 * v24 + 3] = 1.0 / v21[335];
              v22[4 * v24 + 4] = 1.0 / v21[336];
              v22[5 * v24 + 5] = 1.0 / v21[337];
              v22[6 * v24 + 6] = 1.0 / v21[338];
              v22[7 * v24 + 7] = 1.0 / v21[339];
              v22[8 * v24 + 8] = 1.0 / v21[340];
              v22[9 * v24 + 9] = 1.0 / v21[341];
              v25 = *((_QWORD *)a2 + 146);
              v26 = *((_QWORD *)a2 + 147);
              v54 = *((double *)this + 12);
              v55 = *((double *)this + 11);
              v27 = *((double *)this + 14);
              v53 = *((double *)this + 13);
              v28 = *((double *)this + 15);
              v29 = *((double *)this + 16);
              v30 = *((double *)this + 17);
              v31 = *((double *)this + 18);
              v32 = *((_QWORD *)this + 19);
              v33 = *((_QWORD *)this + 20);
              sub_18D27FD68((uint64_t)v56, (uint64_t)&v62);
              if (*((_BYTE *)a2 + 209) != 2)
                v23 = *(double *)(*((_QWORD *)this + 476) + 2520);
              raven::RavenIonosphereEstimatorInitArgs::Fill((uint64_t)&v67, v25, v26, (uint64_t)v56, v55, v54, v53, v27, v28, v29, v30, v31, v34, v35, v36, v37, v32, v33, v23);
              v56[0] = &unk_1E25C5E70;
              return raven::RavenIonosphereEstimator::Initialize((__n128 *)this, &v67);
            }
            LOWORD(v62) = 12;
            LOBYTE(v57) = 4;
            v46 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 477, "RavenIonosphereEstimator::HandleEvent(const RavenSolutionEvent& evt), One or more initial state standard deviation values are negative");
            if (*((char *)this + 3839) >= 0)
              LOBYTE(v52) = v46;
            else
              v52 = *((_QWORD *)this + 477);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v57, "%s", v47, v48, v49, v50, v51, v52);
          }
        }
      }
    }
    return 0;
  }
  v67.n128_u16[0] = 12;
  LOBYTE(v62) = 2;
  v39 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenSolutionEvent received, but estimator is not configured");
  if (*((char *)this + 3839) >= 0)
    LOBYTE(v45) = v39;
  else
    v45 = *((_QWORD *)this + 477);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)&v62, "%s", v40, v41, v42, v43, v44, v45);
  return 0xFFFFFFFFLL;
}

uint64_t raven::MovingStateChecker::HandleEvent(raven::MovingStateChecker *this, const raven::MovingStateEvent *a2, raven::MovingStateEvent *a3)
{
  double v3;
  double v6;
  BOOL v7;
  double v9;
  BOOL v10;
  double v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  unsigned __int8 v36;
  __int16 v37;
  unsigned __int8 v38;
  __int16 v39;

  if (!*((_BYTE *)this + 8))
  {
    v39 = 12;
    v38 = 4;
    v20 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v34 = v21 + (double)v20;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "t,%.3lf,MovingStateChecker,Checker is not configured. Cannot perform checks", v22, v23, v24, v25, v26, SLOBYTE(v34));
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned __int8 *)a2 + 104) >= 4u)
  {
    v37 = 12;
    v36 = 4;
    v27 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v35 = v28 + (double)v27;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "t,%.3lf, Warning: Invalid type detected in moving state integrity check.", v29, v30, v31, v32, v33, SLOBYTE(v35));
    return 0xFFFFFFFFLL;
  }
  v3 = *((double *)a2 + 14);
  if (v3 < 0.0 || (*((_QWORD *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v3 > 1.0)
    return 0xFFFFFFFFLL;
  v6 = *((double *)a2 + 15);
  v7 = v6 < 0.0 || (*((_QWORD *)a2 + 15) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
  if (v7 || v6 > 1.0)
    return 0xFFFFFFFFLL;
  v9 = *((double *)a2 + 16);
  v10 = v9 < 0.0 || (*((_QWORD *)a2 + 16) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
  if (v10 || v9 > 1.0)
    return 0xFFFFFFFFLL;
  v12 = *((double *)a2 + 17);
  result = 0xFFFFFFFFLL;
  if (v12 >= 0.0
    && (*((_QWORD *)a2 + 17) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    && v12 <= 1.0
    && fabs(v9 + v3 + v6 + v12 + -1.0) < 2.22044605e-16)
  {
    result = 0;
    *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
    v14 = *(_OWORD *)((char *)a2 + 24);
    v15 = *(_OWORD *)((char *)a2 + 40);
    v16 = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)a3 + 56) = v16;
    *(_OWORD *)((char *)a3 + 40) = v15;
    *(_OWORD *)((char *)a3 + 24) = v14;
    v17 = *(_OWORD *)((char *)a2 + 88);
    v18 = *(_OWORD *)((char *)a2 + 104);
    v19 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)a3 + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)((char *)a3 + 120) = v19;
    *(_OWORD *)((char *)a3 + 104) = v18;
    *(_OWORD *)((char *)a3 + 88) = v17;
  }
  return result;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(uint64_t a1, _BYTE *a2)
{
  _BYTE *v4;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 57))
    return 0xFFFFFFFFLL;
  if (a2[209] != 2 || a2[208] == 0)
    return 0;
  if (!a2[1464] || a2[1544] == 0)
    return 0;
  v4 = (_BYTE *)(a1 + 19664);
  if (*(_BYTE *)(a1 + 19664))
  {
    memcpy((void *)(a1 + 19680), a2 + 8, 0x971uLL);
    return 0;
  }
  *(_QWORD *)(a1 + 19672) = &unk_1E25C2B48;
  memcpy((void *)(a1 + 19680), a2 + 8, 0x971uLL);
  result = 0;
  *v4 = 1;
  return result;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(int8x16_t *this, const raven::MovingStateEvent *a2)
{
  int v4;
  uint64_t result;
  int v6;
  __int8 *v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t (**v11)();
  double v12;
  double v13;
  double v14;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  int v25;
  int8x16_t v26;
  cnprint::CNPrinter *v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  cnprint::CNPrinter *v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  cnprint::CNPrinter *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  cnprint::CNPrinter *v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  cnprint::CNPrinter *v69;
  int v70;
  uint64_t v71;
  double v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  void *v82;
  __int128 v83;
  uint64_t v84;
  double *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  uint64_t v111;
  char v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  __int16 v119;
  uint64_t (**v120)();
  double v121;
  void *__p;
  char v123;
  int8x16_t v124;
  __int128 v125;
  __int128 v126;
  int8x16_t *v127;
  double v128;
  void *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  int8x16_t v134;

  if (!this[3].i8[9])
    return 0xFFFFFFFFLL;
  if (!this[3].i8[10])
    return 0;
  raven::RavenEstimator::HandleMovingStateEvent((raven::RavenEstimator *)this, a2);
  if (v4)
    return 0xFFFFFFFFLL;
  if (*((_BYTE *)a2 + 104) != 1 || *((double *)a2 + 15) < *(double *)(this[73].i64[0] + 248))
  {
    v6 = 0;
    if (this[1381].i8[8])
      this[1381].i8[8] = 0;
    goto LABEL_49;
  }
  v7 = &this[1381].i8[8];
  if (!this[1381].i8[8])
  {
    v18 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v19 = *v7;
    this[1382].i64[0] = v18;
    this[1382].i64[1] = v20;
    v6 = 1;
    if (!v19)
      *v7 = 1;
    goto LABEL_49;
  }
  v82 = (void *)(*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v83 = v8;
  if (!*v7)
    __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
  v11 = (uint64_t (**)())CNTimeSpan::operator-((uint64_t)&v82, (int8x16_t *)this[1382].i64, v9, v10);
  v13 = v12;
  v14 = v12;
  v15.i64[0] = *(_QWORD *)(this[73].i64[0] + 280);
  v120 = 0;
  v121 = 0.0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v120, 0, v15, v16);
  if (!v11 && (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    goto LABEL_17;
  if (!v120)
  {
    v17 = v121;
    if ((*(_QWORD *)&v121 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_18:
      if (v17 > v14)
        goto LABEL_48;
LABEL_23:
      v134.i64[0] = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
      v134.i64[1] = v21;
      v131 = 0x100000003;
      v129 = &unk_1E25C7790;
      v132 = &v133;
      v130 = xmmword_18D313070;
      sub_18D04BE88((uint64_t)&v129, 0.0);
      v84 = 0x300000003;
      v82 = &unk_1E25C78E0;
      v85 = (double *)&v86;
      v83 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v82, 0.0);
      v22 = *(double *)(this[73].i64[0] + 288) * 0.00872664626;
      v23 = v22 * v22;
      v24 = v85;
      *v85 = v23;
      v25 = HIDWORD(v83);
      v24[HIDWORD(v83) + 1] = v23;
      v24[2 * v25 + 2] = v23;
      sub_18D1C7988(&v120, 13);
      v127 = 0;
      v128 = 0.0;
      v126 = 0u;
      v125 = 0u;
      v120 = off_1E25C44D8;
      v124 = v134;
      if (!*v7)
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
      v27 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v134, (int8x16_t *)this[1382].i64, v134, v26);
      v128 = v28 + (double)(uint64_t)v27;
      *(_QWORD *)&v125 = (char *)this + 2696;
      *((_QWORD *)&v125 + 1) = (char *)this + 14600;
      *(_QWORD *)&v126 = (char *)this + 14616;
      *((_QWORD *)&v126 + 1) = (char *)this + 2536;
      v127 = this + 161;
      v29 = this[73].i64[0];
      v30 = 350.0 / *(double *)(v29 + 648);
      if (v30 >= 350.0 / *(double *)(v29 + 656))
        v30 = 350.0 / *(double *)(v29 + 656);
      if (v28 + (double)(uint64_t)v27 <= v30)
      {
        v43 = (cnprint::CNPrinter *)sub_18D1A86AC((uint64_t)&this[3830].i64[1], (double *)v134.i64, (uint64_t)&v129, (uint64_t)&v82, (uint64_t)&v120);
        if (!(_DWORD)v43)
        {
          if (cnprint::CNPrinter::GetLogLevel(v43) <= 1)
          {
            v119 = 12;
            v118 = 1;
            if (!*v7)
              __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
            v45 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&this[155].i64[1], (uint64_t)&v134, "Added ZARU measurement,t_start,%.3lf,t_end,%.3lf", *(double *)&v134.i64[1] + (double)v134.i64[0], *(double *)&this[1382].i64[1] + (double)this[1382].i64[0]);
            if (this[156].i8[15] >= 0)
              LOBYTE(v51) = v45;
            else
              v51 = this[155].i64[1];
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v119, &v118, "%s", v46, v47, v48, v49, v50, v51);
          }
          v52 = *v7;
          this[1382] = v134;
          if (!v52)
            *v7 = 1;
          v120 = (uint64_t (**)())&unk_1E25B8EE0;
          if (v123 < 0)
            operator delete(__p);
          goto LABEL_48;
        }
        v119 = 12;
        v118 = 4;
        v44 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&this[155].i64[1], (uint64_t)&v134, "Could not add measurement - device ZARU");
        if (this[156].i8[15] >= 0)
          LOBYTE(v42) = v44;
        else
          v42 = this[155].i64[1];
      }
      else
      {
        if (cnprint::CNPrinter::GetLogLevel(v27) > 1)
          goto LABEL_36;
        v119 = 12;
        v118 = 1;
        v36 = cnprint::CNLogFormatter::FormatWarning((uint64_t)&this[155].i64[1], (uint64_t)&v134, "ZARU time interval too large, %.3lf", v31, v32, v33, v34, v35, *(uint64_t *)&v128);
        if (this[156].i8[15] >= 0)
          LOBYTE(v42) = v36;
        else
          v42 = this[155].i64[1];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v119, &v118, "%s", v37, v38, v39, v40, v41, v42);
LABEL_36:
      v120 = (uint64_t (**)())&unk_1E25B8EE0;
      if (v123 < 0)
        operator delete(__p);
      return 0xFFFFFFFFLL;
    }
  }
  if (v11 == v120)
  {
LABEL_17:
    v17 = v121;
    goto LABEL_18;
  }
  if ((uint64_t)v11 > (uint64_t)v120)
    goto LABEL_23;
LABEL_48:
  v6 = 1;
LABEL_49:
  result = raven::RavenEstimator::IsZUPTAppropriate((raven::RavenEstimator *)this, a2);
  if (!(_DWORD)result)
    return result;
  v83 = 0uLL;
  v82 = &unk_1E25C2278;
  LOBYTE(v84) = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v94 = 0;
  v95 = 0;
  v93 = 0x7FF8000000000000;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0x7FF8000000000000;
  v106 = 0;
  v107 = vdupq_n_s64(0x7FF8000000000000uLL);
  v108 = v107;
  v109 = v107;
  v110 = v107;
  v111 = 0x7FF8000000000000;
  v112 = 0;
  v113 = v107;
  v114 = v107;
  v115 = v107;
  v116 = v107;
  v117 = 0x7FF8000000000000;
  if (!(*(unsigned int (**)(int8x16_t *, const raven::MovingStateEvent *, void **))(this->i64[0] + 184))(this, a2, &v82))
  {
    if (v6)
    {
      v53 = (cnprint::CNPrinter *)raven::RavenPNTEstimator::AddDeviceVelocityMeasurement((raven::RavenPNTEstimator *)this, (const raven::VelocityEvent *)&v82);
      if ((_DWORD)v53)
      {
        if (cnprint::CNPrinter::GetLogLevel(v53) <= 1)
        {
          LOWORD(v120) = 12;
          LOBYTE(v129) = 1;
          v54 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
          v80 = v55 + (double)v54;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v120, (unsigned __int8 *)&v129, "t,%.3lf, Could not add ZUPT measurement 1", v56, v57, v58, v59, v60, SLOBYTE(v80));
        }
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v61 = (cnprint::CNPrinter *)raven::RavenPNTEstimator::AddUserVelocityMeasurement((raven::RavenPNTEstimator *)this, (const raven::VelocityEvent *)&v82);
      if ((_DWORD)v61)
      {
        if (cnprint::CNPrinter::GetLogLevel(v61) <= 1)
        {
          LOWORD(v120) = 12;
          LOBYTE(v129) = 1;
          v62 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
          v81 = v63 + (double)v62;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v120, (unsigned __int8 *)&v129, "t,%.3lf, Could not add ZUPT measurement 2", v64, v65, v66, v67, v68, SLOBYTE(v81));
        }
        return 0xFFFFFFFFLL;
      }
    }
    v69 = (cnprint::CNPrinter *)(*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v70 = this[14].u8[8];
    this[15].i64[0] = (uint64_t)v69;
    this[15].i64[1] = v71;
    if (!v70)
      this[14].i8[8] = 1;
    if (cnprint::CNPrinter::GetLogLevel(v69) <= 1)
    {
      LOWORD(v129) = 12;
      v134.i8[0] = 1;
      v120 = (uint64_t (**)())(*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
      v121 = v72;
      v73 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&this[155].i64[1], (uint64_t)&v120, "Raising ZUPT velocity event");
      if (this[156].i8[15] >= 0)
        LOBYTE(v79) = v73;
      else
        v79 = this[155].i64[1];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v129, (unsigned __int8 *)&v134, "%s", v74, v75, v76, v77, v78, v79);
    }
  }
  return 0;
}

void sub_18D0495E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPredictor::HandleEvent(raven::RavenPredictor *this, const raven::TimeMarkEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v8;
  _OWORD *v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  unsigned __int8 v16;
  __int16 v17;

  if (*(_BYTE *)this)
  {
    v8 = (_OWORD *)((char *)a2 + 8);
    v9 = (_OWORD *)((char *)this + 7920);
    result = sub_18D03F608((double *)a2 + 1, (double *)this + 990);
    if ((_DWORD)result)
    {
      result = 0;
      v11 = v8[1];
      *v9 = *v8;
      v9[1] = v11;
      v12 = v8[2];
      v13 = v8[3];
      v14 = v8[5];
      v9[4] = v8[4];
      v9[5] = v14;
      v9[2] = v12;
      v9[3] = v13;
    }
  }
  else
  {
    v17 = 12;
    v16 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "Error: RavenPredictor::HandleEvent(TimeMarkEvent) failed. Predictor is not configured.", a4, a5, a6, a7, a8, v15);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::GnssSvDatabase(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = result + 8;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = result + 32;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = result + 56;
  *(_WORD *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_BYTE *)(result + 144) = 0;
  *(_BYTE *)(result + 152) = 0;
  *(_BYTE *)(result + 168) = 0;
  *(_BYTE *)(result + 176) = 0;
  *(_BYTE *)(result + 192) = 0;
  *(_BYTE *)(result + 200) = 0;
  *(_BYTE *)(result + 224) = 0;
  *(_BYTE *)(result + 232) = 0;
  *(_BYTE *)(result + 256) = 0;
  *(_BYTE *)(result + 264) = 0;
  *(_BYTE *)(result + 288) = 0;
  if (a2)
  {
    *(_BYTE *)(result + 72) = *(_BYTE *)(a2 + 588);
    *(_BYTE *)(result + 73) = *(_BYTE *)(a2 + 597);
  }
  return result;
}

void sub_18D049740()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D049754()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *cnnavigation::TAITime::TAITime(_QWORD *a1, double *a2, cnnavigation::GNSSUTCParameters *this)
{
  _BOOL4 IsValid;
  int8x16_t v7;
  int8x16_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  double v16;
  __int128 v18;

  *a1 = 0;
  a1[1] = 0;
  IsValid = cnnavigation::GNSSUTCParameters::IsValid(this);
  v9 = *(_DWORD *)a2;
  if (IsValid && *((_BYTE *)this + 1) == 1)
  {
    v10 = a2[1];
    v18 = 0uLL;
    *(double *)v7.i64 = v10;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v18, 604800 * v9, v7, v8);
    v11 = *((double *)this + 1);
    v12 = *((double *)this + 2);
    v15 = CNTimeSpan::operator-((uint64_t)&v18, (_QWORD *)this + 3, v13, v14);
    *(double *)v7.i64 = v11 + v12 * (v16 + (double)v15);
  }
  else
  {
    v10 = a2[1];
    v7.i64[0] = 0;
  }
  v8.i64[0] = 0xC1212319A1CAC083;
  *(double *)v7.i64 = v10 - *(double *)v7.i64 + -561548.816;
  v18 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v18, 604800 * (v9 - 1042), v7, v8);
  *(_OWORD *)a1 = v18;
  return a1;
}

{
  _BOOL4 IsValid;
  int8x16_t v7;
  int8x16_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  double v16;
  __int128 v18;

  *a1 = 0;
  a1[1] = 0;
  IsValid = cnnavigation::GNSSUTCParameters::IsValid(this);
  v9 = *(_DWORD *)a2;
  if (IsValid && *((_BYTE *)this + 1) == 3)
  {
    v10 = a2[1];
    v18 = 0uLL;
    *(double *)v7.i64 = v10;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v18, 604800 * v9, v7, v8);
    v11 = *((double *)this + 1);
    v12 = *((double *)this + 2);
    v15 = CNTimeSpan::operator-((uint64_t)&v18, (_QWORD *)this + 3, v13, v14);
    *(double *)v7.i64 = v11 + v12 * (v16 + (double)v15);
  }
  else
  {
    v10 = a2[1];
    v7.i64[0] = 0;
  }
  v8.i64[0] = 0xC1212319A1CAC083;
  *(double *)v7.i64 = v10 - *(double *)v7.i64 + -561548.816;
  v18 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v18, 604800 * (v9 - 18), v7, v8);
  *(_OWORD *)a1 = v18;
  return a1;
}

uint64_t cnnavigation::iOSTimeToJulianTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t result;
  double v5;

  v2 = *(_QWORD *)a1 / 86400;
  if ((int)v2 < -2451910)
    return 0xFFFFFFFFLL;
  v3 = (*(double *)(a1 + 8) + (double)(*(_QWORD *)a1 % 86400)) / 86400.0 + 0.5;
  if (v3 + (double)((int)v2 + 2451910) < 0.0)
    return 0xFFFFFFFFLL;
  if (v3 >= 1.0)
  {
    result = 0;
    *(_DWORD *)a2 = v2 + 2451911;
    v5 = -1.0;
LABEL_11:
    v3 = v3 + v5;
    goto LABEL_12;
  }
  if (v3 < 0.0)
  {
    result = 0;
    if (v3 >= -1.0)
    {
      *(_DWORD *)a2 = v2 + 2451909;
      v5 = 1.0;
    }
    else
    {
      *(_DWORD *)a2 = v2 + 2451908;
      v5 = 2.0;
    }
    goto LABEL_11;
  }
  result = 0;
  *(_DWORD *)a2 = v2 + 2451910;
LABEL_12:
  *(double *)(a2 + 8) = v3;
  return result;
}

uint64_t cnnavigation::JulianTimeToGPSTime(uint64_t a1, int a2, uint64_t a3)
{
  double v3;
  unsigned int v4;
  double v5;
  uint64_t result;

  v3 = *(double *)(a1 + 8) + -0.5;
  v4 = *(_DWORD *)a1 - 2444244 + vcvtmd_s64_f64(v3);
  if ((v4 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  *(_DWORD *)a3 = v4 / 7;
  v5 = (v3 - floor(v3)) * 86400.0 + (double)(v4 % 7) * 86400.0 + (double)a2;
  *(double *)(a3 + 8) = v5;
  result = 0;
  if (v5 >= 604800.0)
  {
    *(_DWORD *)a3 = v4 / 7 + 1;
    *(double *)(a3 + 8) = v5 + -604800.0;
  }
  return result;
}

uint64_t cnlogging::details::CNProtobufStreamChecksum::adler32(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;

  if (!a3)
    return 1;
  v3 = 0;
  v4 = (unsigned __int8 *)(*a1 + a2);
  v5 = 1;
  do
  {
    v6 = *v4++;
    v5 = (v5 + v6) % 0xFFF1;
    v3 = (v5 + v3) % 0xFFF1;
    --a3;
  }
  while (a3);
  return v5 | (v3 << 16);
}

uint64_t CoreNavigation::CLP::LogEntry::LogEntry::IsInitialized(CoreNavigation::CLP::LogEntry::LogEntry *this)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::IsInitialized((CoreNavigation::CLP::LogEntry::LogEntry *)((char *)this + 8));
}

void sub_18D049A58(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = *a2;
  sub_18D049B98((uint64_t)&v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 1056))
  {
    *(_QWORD *)(v8 + 1048) = v18;
    *(_OWORD *)(v8 + 1000) = v15;
    *(_OWORD *)(v8 + 1016) = v16;
    *(_OWORD *)(v8 + 1032) = v17;
    *(_OWORD *)(v8 + 936) = v11;
    *(_OWORD *)(v8 + 952) = v12;
    *(_OWORD *)(v8 + 968) = v13;
    *(_OWORD *)(v8 + 984) = v14;
    *(_OWORD *)(v8 + 920) = v10;
  }
  else
  {
    *(_QWORD *)(v8 + 912) = &unk_1E25C26E8;
    *(_QWORD *)(v8 + 1048) = v18;
    *(_OWORD *)(v8 + 1000) = v15;
    *(_OWORD *)(v8 + 1016) = v16;
    *(_OWORD *)(v8 + 1032) = v17;
    *(_OWORD *)(v8 + 936) = v11;
    *(_OWORD *)(v8 + 952) = v12;
    *(_OWORD *)(v8 + 968) = v13;
    *(_OWORD *)(v8 + 984) = v14;
    *(_OWORD *)(v8 + 920) = v10;
    *(_BYTE *)(v8 + 1056) = 1;
  }
  if (v16 != 3)
  {
    if (*(_BYTE *)(v8 + 1352))
      *(_BYTE *)(v8 + 1352) = 0;
  }
}

double sub_18D049B5C(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeviceAttitudeActiveObject *v8;
  double result;
  _BYTE v10[144];

  v8 = *a2;
  sub_18D049B98((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)&result = raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::MovingStateEvent *)v10).n128_u64[0];
  return result;
}

__n128 sub_18D049B98(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  __int16 v34;
  std::bad_cast v35;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven16MovingStateEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven16MovingStateEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    v30 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v30;
    v31 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    result = *(__n128 *)(v28 + 48);
    v32 = *(_OWORD *)(v28 + 64);
    *(__n128 *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 72) = v29;
    *(_QWORD *)a1 = &unk_1E25C26E8;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(v28 + 144);
    *(_OWORD *)(a1 + 8) = v31;
  }
  else
  {
    v34 = 3;
    v33 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C26E8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  return result;
}

void sub_18D049D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void *sub_18D049D44()
{
}

__n128 raven::RavenDeviceAttitudeActiveObject::HandleEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::MovingStateEvent *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *__p[2];
  char v20;
  unsigned __int8 v21;
  __int16 v22;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 7328))
    {
      result = *(__n128 *)((char *)a2 + 88);
      v3 = *(_OWORD *)((char *)a2 + 104);
      v4 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 915) = *((_QWORD *)a2 + 17);
      *(_OWORD *)((char *)this + 7192) = *(_OWORD *)((char *)a2 + 8);
      v5 = *(_OWORD *)((char *)a2 + 24);
      v6 = *(_OWORD *)((char *)a2 + 40);
      v7 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 7256) = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 7240) = v7;
      *(_OWORD *)((char *)this + 7224) = v6;
      *(_OWORD *)((char *)this + 7208) = v5;
      *(_OWORD *)((char *)this + 7304) = v4;
      *(_OWORD *)((char *)this + 7288) = v3;
      *(__n128 *)((char *)this + 7272) = result;
    }
    else
    {
      *((_QWORD *)this + 898) = &unk_1E25C26E8;
      *(_OWORD *)((char *)this + 7192) = *(_OWORD *)((char *)a2 + 8);
      v14 = *(_OWORD *)((char *)a2 + 24);
      v15 = *(_OWORD *)((char *)a2 + 40);
      v16 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 7256) = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 7240) = v16;
      *(_OWORD *)((char *)this + 7224) = v15;
      *(_OWORD *)((char *)this + 7208) = v14;
      result = *(__n128 *)((char *)a2 + 88);
      v17 = *(_OWORD *)((char *)a2 + 104);
      v18 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 915) = *((_QWORD *)a2 + 17);
      *(_OWORD *)((char *)this + 7304) = v18;
      *(_OWORD *)((char *)this + 7288) = v17;
      *(__n128 *)((char *)this + 7272) = result;
      *((_BYTE *)this + 7328) = 1;
    }
  }
  else
  {
    v22 = 12;
    v21 = 3;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 16))(__p);
    if (v20 >= 0)
      v13 = __p;
    else
      LOBYTE(v13) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "Warning: %s is not configured yet.", v8, v9, v10, v11, v12, (char)v13);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  return result;
}

void sub_18D049EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenSolutionSelector::ResetTunnelInformationForEstimatorType(_QWORD *a1, unsigned __int8 a2)
{
  _QWORD *v4;
  uint64_t **v5;
  int8x8_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  sub_18D04A038(a1 + 12, a2);
  v4 = a1 + 51;
  v5 = sub_18D1654E4(a1 + 51, a2);
  if (v5)
  {
    v6 = (int8x8_t)a1[52];
    v7 = *v5;
    v8 = (unint64_t)v5[1];
    v9 = (uint8x8_t)vcnt_s8(v6);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v6)
        v8 %= *(_QWORD *)&v6;
    }
    else
    {
      v8 &= *(_QWORD *)&v6 - 1;
    }
    v10 = *(uint64_t ***)(*v4 + 8 * v8);
    do
    {
      v11 = v10;
      v10 = (uint64_t **)*v10;
    }
    while (v10 != v5);
    if (v11 == a1 + 53)
      goto LABEL_20;
    v12 = v11[1];
    if (v9.u32[0] > 1uLL)
    {
      if ((unint64_t)v12 >= *(_QWORD *)&v6)
        v12 = (uint64_t *)((unint64_t)v12 % *(_QWORD *)&v6);
    }
    else
    {
      v12 = (uint64_t *)((unint64_t)v12 & (*(_QWORD *)&v6 - 1));
    }
    if (v12 != (uint64_t *)v8)
    {
LABEL_20:
      if (v7)
      {
        v13 = (uint64_t *)v7[1];
        if (v9.u32[0] > 1uLL)
        {
          v14 = (uint64_t *)v7[1];
          if ((unint64_t)v13 >= *(_QWORD *)&v6)
            v14 = (uint64_t *)((unint64_t)v13 % *(_QWORD *)&v6);
        }
        else
        {
          v14 = (uint64_t *)((unint64_t)v13 & (*(_QWORD *)&v6 - 1));
        }
        if (v14 == (uint64_t *)v8)
          goto LABEL_24;
      }
      *(_QWORD *)(*v4 + 8 * v8) = 0;
      v7 = *v5;
    }
    if (!v7)
    {
LABEL_30:
      *v11 = v7;
      *v5 = 0;
      --a1[54];
      operator delete(v5);
      return;
    }
    v13 = (uint64_t *)v7[1];
LABEL_24:
    if (v9.u32[0] > 1uLL)
    {
      if ((unint64_t)v13 >= *(_QWORD *)&v6)
        v13 = (uint64_t *)((unint64_t)v13 % *(_QWORD *)&v6);
    }
    else
    {
      v13 = (uint64_t *)((unint64_t)v13 & (*(_QWORD *)&v6 - 1));
    }
    if (v13 != (uint64_t *)v8)
    {
      *(_QWORD *)(*v4 + 8 * (_QWORD)v13) = v11;
      v7 = *v5;
    }
    goto LABEL_30;
  }
}

void sub_18D04A038(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t **v3;
  int8x8_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v3 = sub_18D1654E4(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = *v3;
    v6 = (unint64_t)v3[1];
    v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v4)
        v6 %= *(_QWORD *)&v4;
    }
    else
    {
      v6 &= *(_QWORD *)&v4 - 1;
    }
    v8 = *(uint64_t ***)(*a1 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (uint64_t **)*v8;
    }
    while (v8 != v3);
    if (v9 == a1 + 2)
      goto LABEL_20;
    v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if ((unint64_t)v10 >= *(_QWORD *)&v4)
        v10 = (uint64_t *)((unint64_t)v10 % *(_QWORD *)&v4);
    }
    else
    {
      v10 = (uint64_t *)((unint64_t)v10 & (*(_QWORD *)&v4 - 1));
    }
    if (v10 != (uint64_t *)v6)
    {
LABEL_20:
      if (v5)
      {
        v11 = (uint64_t *)v5[1];
        if (v7.u32[0] > 1uLL)
        {
          v12 = (uint64_t *)v5[1];
          if ((unint64_t)v11 >= *(_QWORD *)&v4)
            v12 = (uint64_t *)((unint64_t)v11 % *(_QWORD *)&v4);
        }
        else
        {
          v12 = (uint64_t *)((unint64_t)v11 & (*(_QWORD *)&v4 - 1));
        }
        if (v12 == (uint64_t *)v6)
          goto LABEL_24;
      }
      *(_QWORD *)(*a1 + 8 * v6) = 0;
      v5 = *v3;
    }
    if (!v5)
    {
LABEL_30:
      *v9 = v5;
      *v3 = 0;
      --a1[3];
      operator delete(v3);
      return;
    }
    v11 = (uint64_t *)v5[1];
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if ((unint64_t)v11 >= *(_QWORD *)&v4)
        v11 = (uint64_t *)((unint64_t)v11 % *(_QWORD *)&v4);
    }
    else
    {
      v11 = (uint64_t *)((unint64_t)v11 & (*(_QWORD *)&v4 - 1));
    }
    if (v11 != (uint64_t *)v6)
    {
      *(_QWORD *)(*a1 + 8 * (_QWORD)v11) = v9;
      v5 = *v3;
    }
    goto LABEL_30;
  }
}

uint64_t sub_18D04A18C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E25C2308;
  if (*(char *)(a1 + 2535) < 0)
    operator delete(*(void **)(a1 + 2512));
  if (*(char *)(a1 + 2511) < 0)
    operator delete(*(void **)(a1 + 2488));
  if (*(_BYTE *)(a1 + 2368))
    *(_BYTE *)(a1 + 2368) = 0;
  sub_18D03D9B4(a1 + 2344, *(_QWORD **)(a1 + 2352));
  if (*(_BYTE *)(a1 + 2216))
  {
    *(_QWORD *)(a1 + 2224) = off_1E25C3EC8;
    v3 = (void **)(a1 + 2320);
    sub_18D07C7AC(&v3);
    *(_BYTE *)(a1 + 2216) = 0;
  }
  if (*(_BYTE *)(a1 + 2064))
    *(_BYTE *)(a1 + 2064) = 0;
  if (*(_BYTE *)(a1 + 1928))
    *(_BYTE *)(a1 + 1928) = 0;
  if (*(_BYTE *)(a1 + 1776))
    *(_BYTE *)(a1 + 1776) = 0;
  if (*(_BYTE *)(a1 + 1624))
    *(_BYTE *)(a1 + 1624) = 0;
  if (*(_BYTE *)(a1 + 1408))
    *(_BYTE *)(a1 + 1408) = 0;
  if (*(_BYTE *)(a1 + 1208))
    *(_BYTE *)(a1 + 1208) = 0;
  if (*(_BYTE *)(a1 + 232))
    *(_BYTE *)(a1 + 232) = 0;
  sub_18D188EA8((_QWORD *)(a1 + 8));
  return a1;
}

void raven::RavenPNTEstimator::Reset(raven::RavenPNTEstimator *this)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  __n128 v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned __int8 v33;

  v2 = (char *)this + 9104;
  LOWORD(v28) = 12;
  v33 = 2;
  v3 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Resetting estimator");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v9) = v3;
  else
    v9 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v33, "%s", v4, v5, v6, v7, v8, v9);
  sub_18D04A584((uint64_t)this + 16776, *((_QWORD **)this + 2098));
  *((_QWORD *)this + 2097) = (char *)this + 16784;
  *((_OWORD *)this + 1049) = 0u;
  *((_BYTE *)this + 2536) = 0;
  *((_OWORD *)this + 159) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 160) = _Q0;
  v15 = (_QWORD *)*((_QWORD *)this + 1078);
  v16 = (_QWORD *)*((_QWORD *)this + 1077);
  if (v15 != v16)
  {
    v17 = v15 - 290;
    do
    {
      *v17 = &unk_1E25C5E70;
      *(v17 - 366) = &unk_1E25C5E70;
      *(v17 - 390) = &unk_1E25C5E70;
      v18 = v17 - 392;
      v17 -= 682;
    }
    while (v18 != v16);
  }
  v19 = (char *)this + 18992;
  *((_QWORD *)this + 1078) = v16;
  *((_BYTE *)this + 3152) = 0;
  v20 = (_QWORD *)*((_QWORD *)this + 1822);
  v21 = (_QWORD *)*((_QWORD *)this + 1821);
  if (v20 != v21)
  {
    v22 = v20 - 290;
    do
    {
      *v22 = &unk_1E25C5E70;
      *(v22 - 366) = &unk_1E25C5E70;
      *(v22 - 390) = &unk_1E25C5E70;
      v23 = v22 - 392;
      v22 -= 682;
    }
    while (v23 != v21);
  }
  *((_QWORD *)this + 1822) = v21;
  *v2 = 0;
  *(_OWORD *)((char *)this + 14600) = 0u;
  v30 = 0x10000001CLL;
  v28 = (uint64_t)&unk_1E25C72B0;
  v29 = xmmword_18D319780;
  v31 = &v32;
  sub_18D053AA8((uint64_t)this + 14616, (uint64_t)&v28);
  sub_18D04A5F4((uint64_t)&v28);
  v24 = sub_18D053AA8((uint64_t)this + 14880, (uint64_t)&v28);
  v25 = v32;
  v28 = (uint64_t)&unk_1E25C7370;
  v32 = 0;
  if (v25)
    MEMORY[0x18D78B5BC](v25, 0x1000C8000313F17, v24);
  v26 = (char *)this + 19432;
  raven::RavenSequentialGNSSMeasurementSelector::ResetEpochSpecificMembers((raven::RavenPNTEstimator *)((char *)this + 16800));
  if (*v19)
    *v19 = 0;
  if (*((_BYTE *)this + 19216))
  {
    *((_QWORD *)this + 2389) = &unk_1E25C5E70;
    *((_BYTE *)this + 19216) = 0;
  }
  v27 = (char *)this + 22104;
  v28 = 0x3FE0000000000000;
  sub_18D04AD78((uint64_t)this + 19368, (double *)&v28);
  if (*v26)
    *v26 = 0;
  if (*((_BYTE *)this + 19664))
    *((_BYTE *)this + 19664) = 0;
  if (*v27)
    *v27 = 0;
  *((_DWORD *)this + 6900) = 0;
  *((_QWORD *)this + 3454) = 0;
  *((_QWORD *)this + 3453) = 0;
  *((_DWORD *)this + 11112) = 0;
  *((_QWORD *)this + 5559) = 0;
  *((_QWORD *)this + 5560) = 0;
  sub_18D04AE0C((uint64_t)this + 61288);
  raven::RavenEstimator::Reset(this);
}

uint64_t sub_18D04A530(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(result + 5928);
  v2 = *(_QWORD **)(result + 5920);
  if (v1 != v2)
  {
    v3 = v1 - 290;
    do
    {
      *v3 = &unk_1E25C5E70;
      *(v3 - 366) = &unk_1E25C5E70;
      *(v3 - 390) = &unk_1E25C5E70;
      v4 = v3 - 392;
      v3 -= 682;
    }
    while (v4 != v2);
  }
  *(_QWORD *)(result + 5928) = v2;
  *(_BYTE *)(result + 456) = 0;
  return result;
}

void sub_18D04A584(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_18D04A584(a1, *a2);
    sub_18D04A584(a1, a2[1]);
    a2[114] = &unk_1E25C7160;
    v4 = a2[119];
    a2[119] = 0;
    if (v4)
      MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
    operator delete(a2);
  }
}

uint64_t sub_18D04A5F4(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1C0000001CLL;
  *(_QWORD *)a1 = &unk_1E25C7370;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319AF0;
  sub_18D04A684(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D04A648(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D04A684(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x1880uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void raven::RavenConvergenceEstimator::Reset(raven::RavenConvergenceEstimator *this)
{
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  uint64_t v12;

  v2 = (char *)this + 7896;
  v11 = 12;
  v10 = 2;
  v3 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Resetting estimator");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v9) = v3;
  else
    v9 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "%s", v4, v5, v6, v7, v8, v9);
  raven::RavenSequentialGNSSMeasurementSelector::ResetEpochSpecificMembers((raven::RavenConvergenceEstimator *)((char *)this + 5704));
  if (*v2)
    *v2 = 0;
  if (v2[224])
  {
    *((_QWORD *)this + 1002) = &unk_1E25C5E70;
    v2[224] = 0;
  }
  v12 = 0x3FE0000000000000;
  sub_18D04AD78((uint64_t)this + 8272, (double *)&v12);
  sub_18D04AE0C((uint64_t)this + 8336);
  raven::RavenEstimator::Reset(this);
}

void raven::RavenSequentialGNSSMeasurementSelector::Reset(raven::RavenSequentialGNSSMeasurementSelector *this)
{
  raven::RavenSequentialGNSSMeasurementSelector::ResetEpochSpecificMembers(this);
  if (*((_BYTE *)this + 2192))
    *((_BYTE *)this + 2192) = 0;
  if (*((_BYTE *)this + 2416))
  {
    *((_QWORD *)this + 289) = &unk_1E25C5E70;
    *((_BYTE *)this + 2416) = 0;
  }
}

void raven::RavenPassThroughEstimator::Reset(raven::RavenEstimator *this)
{
  int64x2_t v1;
  __int128 v2;
  _BYTE v3[24];
  _BYTE v4[24];

  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  memset(&v2, 0, 23);
  *((_OWORD *)this + 160) = 0uLL;
  *((_OWORD *)this + 159) = 0u;
  *((_QWORD *)this + 328) = 0;
  *((_OWORD *)this + 163) = 0u;
  *((_OWORD *)this + 162) = 0u;
  *((_OWORD *)this + 161) = 0uLL;
  *((_QWORD *)this + 329) = 0x7FF8000000000000;
  *((_BYTE *)this + 2656) = 0;
  *((_OWORD *)this + 165) = 0u;
  *(_QWORD *)((char *)this + 2673) = *(_QWORD *)&v4[16];
  *(_OWORD *)((char *)this + 2657) = *(_OWORD *)v4;
  *(_QWORD *)((char *)this + 2697) = *(_QWORD *)&v3[16];
  *(_OWORD *)((char *)this + 2681) = *(_OWORD *)v3;
  *((_QWORD *)this + 340) = 0;
  *(_OWORD *)((char *)this + 2705) = v2;
  *((_QWORD *)this + 341) = 0x7FF8000000000000;
  *((_QWORD *)this + 342) = 0;
  *((_QWORD *)this + 343) = 0x7FF8000000000000;
  v1 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 172) = v1;
  *((int64x2_t *)this + 173) = v1;
  *((int64x2_t *)this + 174) = v1;
  *((int64x2_t *)this + 175) = v1;
  *((_QWORD *)this + 352) = 0;
  *((_QWORD *)this + 353) = 0x7FF8000000000000;
  *((int64x2_t *)this + 177) = v1;
  *((int64x2_t *)this + 178) = v1;
  *((int64x2_t *)this + 179) = v1;
  *((int64x2_t *)this + 180) = v1;
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  memset(&v2, 0, 23);
  *(_OWORD *)((char *)this + 2920) = 0uLL;
  *(_OWORD *)((char *)this + 2904) = 0u;
  *((_QWORD *)this + 373) = 0;
  *(_OWORD *)((char *)this + 2968) = 0uLL;
  *(_OWORD *)((char *)this + 2952) = 0u;
  *(_OWORD *)((char *)this + 2936) = 0uLL;
  *((_QWORD *)this + 374) = 0x7FF8000000000000;
  *((_BYTE *)this + 3016) = 0;
  *(_OWORD *)((char *)this + 3000) = 0u;
  *(_QWORD *)((char *)this + 3033) = *(_QWORD *)&v4[16];
  *(_OWORD *)((char *)this + 3017) = *(_OWORD *)v4;
  *(_QWORD *)((char *)this + 3057) = *(_QWORD *)&v3[16];
  *(_OWORD *)((char *)this + 3041) = *(_OWORD *)v3;
  *((_QWORD *)this + 385) = 0;
  *(_OWORD *)((char *)this + 3065) = v2;
  *((_QWORD *)this + 386) = 0x7FF8000000000000;
  *((_QWORD *)this + 387) = 0;
  *((int64x2_t *)this + 194) = v1;
  *((int64x2_t *)this + 195) = v1;
  *((int64x2_t *)this + 196) = v1;
  *((int64x2_t *)this + 197) = v1;
  *((_QWORD *)this + 396) = 0x7FF8000000000000;
  *((_QWORD *)this + 397) = 0;
  *((int64x2_t *)this + 199) = v1;
  *((int64x2_t *)this + 200) = v1;
  *((int64x2_t *)this + 201) = v1;
  *((int64x2_t *)this + 202) = v1;
  *((_QWORD *)this + 406) = 0x7FF8000000000000;
  *(_OWORD *)((char *)this + 3256) = 0u;
  *((_QWORD *)this + 409) = 0xFFF0000000000000;
  *((_BYTE *)this + 3280) = 0;
  raven::RavenEstimator::Reset(this);
}

void raven::RavenEstimator::Reset(raven::RavenEstimator *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  v2 = (void **)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 6) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *((_QWORD *)this + 3);
      v2 = (void **)(*((_QWORD *)this + 2) + 8);
      *((_QWORD *)this + 2) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 8;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 16;
  }
  *((_QWORD *)this + 5) = v6;
LABEL_8:
  *((_BYTE *)this + 58) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0x7FF8000000000000;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  if (*((_BYTE *)this + 232))
    *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 73) = 0;
  *(_OWORD *)((char *)this + 328) = 0uLL;
  *(_OWORD *)((char *)this + 344) = 0uLL;
  *(_OWORD *)((char *)this + 360) = 0uLL;
  *(_OWORD *)((char *)this + 376) = 0uLL;
  *(_OWORD *)((char *)this + 392) = 0uLL;
  *(_OWORD *)((char *)this + 408) = 0uLL;
  *(_OWORD *)((char *)this + 424) = 0uLL;
  *(_OWORD *)((char *)this + 440) = 0uLL;
  *(_OWORD *)((char *)this + 456) = 0uLL;
  *(_OWORD *)((char *)this + 472) = 0uLL;
  *(_OWORD *)((char *)this + 488) = 0uLL;
  *(_OWORD *)((char *)this + 504) = 0uLL;
  *(_OWORD *)((char *)this + 520) = 0uLL;
  *(_OWORD *)((char *)this + 536) = 0uLL;
  *(_OWORD *)((char *)this + 552) = 0uLL;
  *(_OWORD *)((char *)this + 568) = 0uLL;
  *(_QWORD *)((char *)this + 980) = 0;
  *(_OWORD *)((char *)this + 948) = 0uLL;
  *(_OWORD *)((char *)this + 964) = 0uLL;
  *(_OWORD *)((char *)this + 916) = 0uLL;
  *(_OWORD *)((char *)this + 932) = 0uLL;
  *(_OWORD *)((char *)this + 884) = 0uLL;
  *(_OWORD *)((char *)this + 900) = 0uLL;
  *(_OWORD *)((char *)this + 852) = 0uLL;
  *(_OWORD *)((char *)this + 868) = 0uLL;
  *(_OWORD *)((char *)this + 820) = 0uLL;
  *(_OWORD *)((char *)this + 836) = 0uLL;
  *(_OWORD *)((char *)this + 788) = 0uLL;
  *(_OWORD *)((char *)this + 804) = 0uLL;
  *(_OWORD *)((char *)this + 756) = 0uLL;
  *(_OWORD *)((char *)this + 772) = 0uLL;
  *(_OWORD *)((char *)this + 724) = 0uLL;
  *(_OWORD *)((char *)this + 740) = 0uLL;
  *((_QWORD *)this + 40) = 0x7FF8000000000000;
  *((_QWORD *)this + 34) = 0;
  *((_OWORD *)this + 37) = 0uLL;
  *((_OWORD *)this + 38) = 0uLL;
  *((_OWORD *)this + 39) = 0uLL;
  *((_OWORD *)this + 40) = 0uLL;
  *((_OWORD *)this + 41) = 0uLL;
  *((_OWORD *)this + 42) = 0uLL;
  *((_OWORD *)this + 43) = 0uLL;
  *((_OWORD *)this + 44) = 0uLL;
  *((_DWORD *)this + 180) = 0;
  *(_OWORD *)((char *)this + 988) = 0uLL;
  *(_OWORD *)((char *)this + 1004) = 0uLL;
  *(_OWORD *)((char *)this + 1020) = 0uLL;
  *(_OWORD *)((char *)this + 1036) = 0uLL;
  *(_OWORD *)((char *)this + 1052) = 0uLL;
  *(_OWORD *)((char *)this + 1068) = 0uLL;
  *(_OWORD *)((char *)this + 1084) = 0uLL;
  *(_OWORD *)((char *)this + 1100) = 0uLL;
  *(_OWORD *)((char *)this + 1116) = 0uLL;
  *(_OWORD *)((char *)this + 1132) = 0uLL;
  *(_OWORD *)((char *)this + 1148) = 0uLL;
  *((_DWORD *)this + 291) = 0;
  if (*((_BYTE *)this + 1208))
    *((_BYTE *)this + 1208) = 0;
  if (*((_BYTE *)this + 1408))
    *((_BYTE *)this + 1408) = 0;
  if (*((_BYTE *)this + 1624))
    *((_BYTE *)this + 1624) = 0;
  if (*((_BYTE *)this + 1776))
    *((_BYTE *)this + 1776) = 0;
  if (*((_BYTE *)this + 1928))
    *((_BYTE *)this + 1928) = 0;
  if (*((_BYTE *)this + 2064))
    *((_BYTE *)this + 2064) = 0;
  if (*((_BYTE *)this + 2216))
  {
    *((_QWORD *)this + 278) = off_1E25C3EC8;
    v7 = (void **)((char *)this + 2320);
    sub_18D07C7AC(&v7);
    *((_BYTE *)this + 2216) = 0;
  }
  sub_18D03D9B4((uint64_t)this + 2344, *((_QWORD **)this + 294));
  *((_QWORD *)this + 293) = (char *)this + 2352;
  *((_QWORD *)this + 295) = 0;
  *((_QWORD *)this + 294) = 0;
  if (*((_BYTE *)this + 2368))
    *((_BYTE *)this + 2368) = 0;
}

void raven::RavenIonosphereEstimator::Reset(raven::RavenIonosphereEstimator *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[2417];
  unsigned __int8 v11;

  LOWORD(v9) = 12;
  v11 = 2;
  v2 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 32, "Resetting estimator");
  if (*((char *)this + 3839) >= 0)
    LOBYTE(v8) = v2;
  else
    v8 = *((_QWORD *)this + 477);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v9, &v11, "%s", v3, v4, v5, v6, v7, v8);
  v9 = 0x3FE0000000000000;
  sub_18D04AD78((uint64_t)this + 8168, (double *)&v9);
  sub_18D04AEC4((uint64_t)this + 8232);
  *((_BYTE *)this + 9) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (*((_BYTE *)this + 448))
  {
    *((_QWORD *)this + 31) = &off_1E25C30B0;
    *((_BYTE *)this + 448) = 0;
  }
  if (*((_BYTE *)this + 80))
    *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_OWORD *)this + 32) = 0uLL;
  *((_OWORD *)this + 33) = 0uLL;
  *((_OWORD *)this + 30) = 0uLL;
  *((_OWORD *)this + 31) = 0uLL;
  *((_OWORD *)this + 29) = 0uLL;
  *((_QWORD *)this + 69) = 0x7FF8000000000000;
  sub_18D0409EC((uint64_t)&v9);
  memcpy((char *)this + 568, v10, 0x971uLL);
  bzero((char *)this + 2992, 0x330uLL);
}

uint64_t sub_18D04AD78(uint64_t a1, double *a2)
{
  double v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 v12;
  __int16 v13;

  v3 = *a2;
  if (*a2 >= 0.0 && v3 <= 1.0)
  {
    result = 0;
    *(double *)a1 = v3;
    *(double *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = 1;
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v13 = 2;
      v12 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "WARNING: DiscreteEventDetector::Initialize called with bad xbar %.3lf.", v5, v6, v7, v8, v9, *(_QWORD *)a2);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_18D04AE0C(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  sub_18D05DB90((_QWORD *)(a1 + 40));
  *(_DWORD *)(a1 + 5936) = 0;
  *(_DWORD *)(a1 + 11904) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 2904) = 0;
  *(_QWORD *)(a1 + 2896) = 0;
  *(_QWORD *)(a1 + 3640) = 0;
  *(_QWORD *)(a1 + 3632) = 0;
  *(_QWORD *)(a1 + 5072) = 0;
  *(_QWORD *)(a1 + 5064) = 0;
  *(_QWORD *)(a1 + 5120) = 0;
  *(_QWORD *)(a1 + 5112) = 0;
  *(_QWORD *)(a1 + 5856) = 0;
  *(_QWORD *)(a1 + 5848) = 0;
  *(_QWORD *)(a1 + 5904) = 0;
  *(_QWORD *)(a1 + 5896) = 0;
  *(_QWORD *)(a1 + 5952) = 0;
  *(_QWORD *)(a1 + 5960) = 0;
  *(_QWORD *)(a1 + 7384) = 0;
  *(_QWORD *)(a1 + 7392) = 0;
  *(_QWORD *)(a1 + 8824) = 0;
  *(_QWORD *)(a1 + 8816) = 0;
  *(_QWORD *)(a1 + 10256) = 0;
  *(_QWORD *)(a1 + 10248) = 0;
  *(_QWORD *)(a1 + 10648) = 0;
  *(_QWORD *)(a1 + 10640) = 0;
  *(_QWORD *)(a1 + 11384) = 0;
  *(_QWORD *)(a1 + 11376) = 0;
  *(_QWORD *)(a1 + 11432) = 0;
  *(_QWORD *)(a1 + 11424) = 0;
  *(_QWORD *)(a1 + 11824) = 0;
  *(_QWORD *)(a1 + 11816) = 0;
  *(_QWORD *)(a1 + 11872) = 0;
  *(_QWORD *)(a1 + 11864) = 0;
  *(_QWORD *)(a1 + 11928) = 0;
  *(_QWORD *)(a1 + 11920) = 0;
  *(_QWORD *)(a1 + 12664) = 0;
  *(_QWORD *)(a1 + 12656) = 0;
}

void sub_18D04AEC4(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  sub_18D05DB90((_QWORD *)(a1 + 40));
  *(_DWORD *)(a1 + 3184) = 0;
  *(_DWORD *)(a1 + 12704) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 2664) = 0;
  *(_QWORD *)(a1 + 2656) = 0;
  *(_QWORD *)(a1 + 2712) = 0;
  *(_QWORD *)(a1 + 2704) = 0;
  *(_QWORD *)(a1 + 3104) = 0;
  *(_QWORD *)(a1 + 3096) = 0;
  *(_QWORD *)(a1 + 3152) = 0;
  *(_QWORD *)(a1 + 3144) = 0;
  *(_QWORD *)(a1 + 3200) = 0;
  *(_QWORD *)(a1 + 3208) = 0;
  *(_QWORD *)(a1 + 3944) = 0;
  *(_QWORD *)(a1 + 3952) = 0;
  *(_QWORD *)(a1 + 4696) = 0;
  *(_QWORD *)(a1 + 4688) = 0;
  *(_QWORD *)(a1 + 5440) = 0;
  *(_QWORD *)(a1 + 5432) = 0;
  *(_QWORD *)(a1 + 5656) = 0;
  *(_QWORD *)(a1 + 5648) = 0;
  *(_QWORD *)(a1 + 6048) = 0;
  *(_QWORD *)(a1 + 6040) = 0;
  *(_QWORD *)(a1 + 8200) = 0;
  *(_QWORD *)(a1 + 0x2000) = 0;
  *(_QWORD *)(a1 + 8416) = 0;
  *(_QWORD *)(a1 + 8408) = 0;
  *(_QWORD *)(a1 + 10568) = 0;
  *(_QWORD *)(a1 + 10560) = 0;
  *(_QWORD *)(a1 + 12728) = 0;
  *(_QWORD *)(a1 + 12720) = 0;
  *(_QWORD *)(a1 + 13120) = 0;
  *(_QWORD *)(a1 + 13112) = 0;
}

uint64_t sub_18D04AF7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 2416))
    *(_QWORD *)(a1 + 2312) = &unk_1E25C5E70;
  if (*(_BYTE *)(a1 + 2304))
    *(_QWORD *)(a1 + 2200) = &unk_1E25C5E70;
  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)(a1 + 1512) = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)(a1 + 1512 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x18D78B25C](a1 + 1520);
  std::ostream::~ostream();
  MEMORY[0x18D78B550](a1 + 1928);
  sub_18D04B08C(a1 + 1464);
  sub_18D04B08C(a1 + 1424);
  sub_18D04B100(a1 + 1384);
  sub_18D04B100(a1 + 1344);
  sub_18D03D9B4(a1 + 1248, *(_QWORD **)(a1 + 1256));
  sub_18D03D9B4(a1 + 1224, *(_QWORD **)(a1 + 1232));
  sub_18D03D9B4(a1 + 1200, *(_QWORD **)(a1 + 1208));
  *(_QWORD *)(a1 + 912) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 360) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 256) = &unk_1E25C5E70;
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_18D04B08C(uint64_t a1)
{
  void *v2;

  sub_18D04B0C4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_18D04B0C4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_18D04344C((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_18D04B100(uint64_t a1)
{
  void *v2;

  sub_18D04B138(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_18D04B138(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_18D04B08C((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void raven::RavenSequentialGNSSMeasurementSelector::ResetEpochSpecificMembers(raven::RavenSequentialGNSSMeasurementSelector *this)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  *((_BYTE *)this + 1) = 0;
  if (*((_BYTE *)this + 32))
    *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 306) = 0x7FF8000000000000;
  *((_QWORD *)this + 304) = 0x7FF8000000000000;
  if (*((_BYTE *)this + 80))
    *((_BYTE *)this + 80) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0x7FF8000000000000;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  v4 = 0x100000008;
  v2 = &unk_1E25C86C0;
  v5 = &v6;
  v3 = xmmword_18D319940;
  sub_18D04BE88((uint64_t)&v2, 0.0);
  sub_18D053AA8((uint64_t)this + 912, (uint64_t)&v2);
  *((_BYTE *)this + 1016) = 0;
  *((_QWORD *)this + 128) = 0;
  *((_QWORD *)this + 129) = 0x3FF0000000000000;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_QWORD *)this + 140) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *((_QWORD *)this + 145) = 0x3FF0000000000000;
  *((_QWORD *)this + 146) = 0;
  *((_QWORD *)this + 148) = 0;
  *((_QWORD *)this + 147) = 0;
  *((_BYTE *)this + 88) = 1;
  *((_QWORD *)this + 305) = 0;
  *((_QWORD *)this + 260) = 0;
  *((_DWORD *)this + 522) = 0;
  sub_18D03D9B4((uint64_t)this + 1200, *((_QWORD **)this + 151));
  *((_QWORD *)this + 150) = (char *)this + 1208;
  *((_QWORD *)this + 152) = 0;
  *((_QWORD *)this + 151) = 0;
  *((_QWORD *)this + 306) = 0x7FF8000000000000;
  sub_18D03D9B4((uint64_t)this + 1224, *((_QWORD **)this + 154));
  *((_QWORD *)this + 153) = (char *)this + 1232;
  *((_QWORD *)this + 155) = 0;
  *((_QWORD *)this + 154) = 0;
  sub_18D03D9B4((uint64_t)this + 1248, *((_QWORD **)this + 157));
  *((_QWORD *)this + 156) = (char *)this + 1256;
  *((_QWORD *)this + 158) = 0;
  *((_QWORD *)this + 157) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  sub_18D04B370((uint64_t)this + 1344);
  sub_18D04B370((uint64_t)this + 1384);
  sub_18D04B31C((uint64_t)this + 1424);
  sub_18D04B31C((uint64_t)this + 1464);
  *((_WORD *)this + 752) = 0;
}

void sub_18D04B31C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_18D04B0C4(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_18D04B370(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_18D04B138(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void raven::RavenIMUPreprocessorActiveObject::~RavenIMUPreprocessorActiveObject(raven::RavenIMUPreprocessorActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C3DB0;
  sub_18D16C7E0((_QWORD *)this + 86);
  sub_18D07BD60((_QWORD *)this + 80);
  sub_18D16C7E0((_QWORD *)this + 71);
  sub_18D07BD60((_QWORD *)this + 65);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  raven::RavenIMUPreprocessorActiveObject::~RavenIMUPreprocessorActiveObject(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenSupervisor::~RavenSupervisor(raven::RavenSupervisor *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  cnframework::ActiveObjectBase *v18;
  cnframework::ActiveObjectBase *v19;

  *(_QWORD *)this = &off_1E25C2578;
  cnframework::Supervisor::TearDown(this);
  v2 = (char *)this + 184920;
  v3 = *((_QWORD *)this + 23314);
  *((_QWORD *)this + 23314) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 23313);
  *((_QWORD *)this + 23313) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 23312);
  *((_QWORD *)this + 23312) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (char *)this + 170136;
  *((_QWORD *)this + 23142) = &off_1E25C3500;
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 185136));
  *((_QWORD *)this + 23055) = &off_1E25C2F58;
  if (*(_BYTE *)(v7 - 40))
    *((_BYTE *)this + 185096) = 0;
  if (*v2)
    *v2 = 0;
  v8 = (char *)this + 79576;
  v18 = (raven::RavenSupervisor *)((char *)this + 82472);
  v19 = (raven::RavenSupervisor *)((char *)this + 78224);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 184440));
  raven::RavenSolutionSelectorActiveObject::~RavenSolutionSelectorActiveObject((raven::RavenSupervisor *)((char *)this + 183456));
  raven::RavenSolutionPostprocessorActiveObject::~RavenSolutionPostprocessorActiveObject((raven::RavenSupervisor *)((char *)this + 181472));
  *((_QWORD *)this + 21285) = &off_1E25C33F0;
  std::mutex::~mutex((std::mutex *)((char *)this + 181408));
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::~RavenOutput((raven::RavenSupervisor *)((char *)this + 181344));
  sub_18D17F614((void ***)this + 22667, 0);
  *((_QWORD *)this + 22330) = &unk_1E25B9250;
  *((_QWORD *)this + 22008) = &unk_1E25B9250;
  *((_QWORD *)this + 22009) = &unk_1E25B9B60;
  *((_QWORD *)this + 21667) = &unk_1E25B9B60;
  *((_QWORD *)this + 21988) = &unk_1E25B9250;
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 170280));
  *((_QWORD *)this + 21205) = &off_1E25C40E0;
  if (*((_BYTE *)this + 170256))
    *((_BYTE *)this + 170256) = 0;
  if (*v6)
    *v6 = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 169640));
  *((_QWORD *)this + 20726) = &off_1E25C45F8;
  *((_QWORD *)this + 20794) = off_1E25C3320;
  sub_18D04A18C((uint64_t)this + 166352);
  sub_18D0745E0((void **)this + 20726);
  *((_QWORD *)this + 20650) = &off_1E25C4070;
  sub_18D20B6C8((_QWORD *)this + 20720);
  sub_18D07BD60((_QWORD *)this + 20714);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 165200));
  raven::RavenPositionContextEstimatorActiveObject::~RavenPositionContextEstimatorActiveObject((void **)this + 20518);
  *((_QWORD *)this + 11116) = &off_1E25C3850;
  sub_18D03CCEC((uint64_t)this + 89472);
  sub_18D074680((void **)this + 11116);
  sub_18D07396C((void **)this + 10505);
  *(_QWORD *)v18 = &off_1E25C4468;
  sub_18D20B0C4((_QWORD *)this + 10371);
  cnframework::ActiveObjectBase::~ActiveObjectBase(v18);
  *(_QWORD *)v19 = &off_1E25C3490;
  sub_18D07BD60((_QWORD *)this + 10299);
  if (*((_BYTE *)this + 79752))
    *((_BYTE *)this + 79752) = 0;
  v9 = (char *)this + 79288;
  if (*((_BYTE *)this + 79600))
    *((_BYTE *)this + 79600) = 0;
  v10 = (char *)this + 78920;
  if (*v8)
    *v8 = 0;
  if (*v9)
    *v9 = 0;
  if (*((_BYTE *)this + 79128))
    *((_BYTE *)this + 79128) = 0;
  if (*v10)
    *v10 = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase(v19);
  *((_QWORD *)this + 9503) = &off_1E25C4260;
  sub_18D03CAB8((uint64_t)this + 76520);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 76024));
  raven::RavenIMUPreprocessorActiveObject::~RavenIMUPreprocessorActiveObject((raven::RavenSupervisor *)((char *)this + 75288));
  *((_QWORD *)this + 9023) = &off_1E25C3F68;
  sub_18D074B58((uint64_t)this + 72672);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 72184));
  *((_QWORD *)this + 7972) = &off_1E25C3C58;
  sub_18D20B884((_QWORD *)this + 9016);
  sub_18D20B0C4((_QWORD *)this + 9009);
  *((_QWORD *)this + 8998) = &unk_1E25B8D98;
  *((_QWORD *)this + 8999) = &unk_1E25C5E70;
  *((_QWORD *)this + 8990) = &unk_1E25C5E70;
  *((_QWORD *)this + 8982) = &unk_1E25C5E70;
  *((_QWORD *)this + 8974) = &unk_1E25C5E70;
  sub_18D16C7E0((_QWORD *)this + 8968);
  sub_18D16C7E0((_QWORD *)this + 8962);
  sub_18D20AEC4((_QWORD *)this + 8956);
  sub_18D20AEC4((_QWORD *)this + 8950);
  sub_18D16C7E0((_QWORD *)this + 8944);
  sub_18D16C7E0((_QWORD *)this + 8938);
  sub_18D16C7E0((_QWORD *)this + 8835);
  *((_QWORD *)this + 8815) = &unk_1E25B9250;
  *((_QWORD *)this + 8493) = &unk_1E25B9250;
  *((_QWORD *)this + 8494) = &unk_1E25B9B60;
  *((_QWORD *)this + 8152) = &unk_1E25B9B60;
  *((_QWORD *)this + 8473) = &unk_1E25B9250;
  *((_QWORD *)this + 8103) = &unk_1E25C5E70;
  *((_QWORD *)this + 8085) = &unk_1E25C5E70;
  *((_QWORD *)this + 8071) = &unk_1E25C5E70;
  *((_QWORD *)this + 8061) = &unk_1E25C5E70;
  *((_QWORD *)this + 8047) = &unk_1E25C5E70;
  sub_18D16C7E0((_QWORD *)this + 8034);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 63776));
  sub_18D073AFC((_QWORD *)this + 6729);
  *((_QWORD *)this + 6656) = &off_1E25C3988;
  sub_18D28C4F8((uint64_t)this + 53784);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 53248));
  *((_QWORD *)this + 3566) = &off_1E25C4500;
  sub_18D20AB14((uint64_t *)this + 3941);
  sub_18D074630((void **)this + 3566);
  sub_18D073760((raven::RavenSupervisor *)((char *)this + 26632));
  raven::RavenAccelerationDecompositionActiveObject::~RavenAccelerationDecompositionActiveObject((raven::RavenSupervisor *)((char *)this + 8504));
  sub_18D04BAB0((uint64_t)this + 4672);
  sub_18D04BAB0((uint64_t)this + 840);
  cnframework::Supervisor::~Supervisor(this, v11, v12, v13, v14, v15, v16, v17);
}

{
  raven::RavenSupervisor::~RavenSupervisor(this);
  JUMPOUT(0x18D78B5D4);
}

void cnframework::ActiveObjectBase::~ActiveObjectBase(cnframework::ActiveObjectBase *this)
{
  std::mutex *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)this = off_1E25B8C88;
  v2 = (std::mutex *)((char *)this + 368);
  std::mutex::lock((std::mutex *)((char *)this + 368));
  if (!*((_BYTE *)this + 168))
  {
    if (atomic_load((unsigned __int8 *)this + 352))
    {
      atomic_store(0, (unsigned __int8 *)this + 352);
      std::condition_variable::notify_all((std::condition_variable *)this + 9);
      if (*((_QWORD *)this + 45))
        std::thread::join((std::thread *)this + 45);
    }
  }
  std::mutex::unlock(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 9);
  std::mutex::~mutex(v2);
  std::thread::~thread((std::thread *)this + 45);
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  v6 = (void **)((char *)this + 240);
  sub_18D07C7AC(&v6);
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 72));
  sub_18D04BA78((uint64_t)this + 32);
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

uint64_t sub_18D04BA78(uint64_t a1)
{
  void *v2;

  sub_18D03FF4C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_18D04BAB0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E25C2540;
  if (*(char *)(a1 + 3783) < 0)
    operator delete(*(void **)(a1 + 3760));
  if (*(char *)(a1 + 3751) < 0)
    operator delete(*(void **)(a1 + 3728));
  if (*(char *)(a1 + 3719) < 0)
    operator delete(*(void **)(a1 + 3696));
  if (*(char *)(a1 + 3687) < 0)
    operator delete(*(void **)(a1 + 3664));
  sub_18D07C868(a1 + 2320);
  v3 = (void **)(a1 + 40);
  sub_18D178498(&v3);
  *(_QWORD *)a1 = &unk_1E25C4B70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

BOOL sub_18D04BB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  int v7;
  int v8;
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = a1 + 16;
    v20 = 0x300000003;
    v18 = &unk_1E25C78E0;
    v19 = xmmword_18D30BB60;
    v21 = &v22;
    sub_18D053B2C(a1 + 16, a2, (uint64_t)&v18);
    v8 = *(_DWORD *)(a1 + 24);
    v7 = *(_DWORD *)(a1 + 28);
    v15 = 0x300000003;
    v10 = &unk_1E25C78E0;
    v11 = v7;
    v12 = v8;
    v13 = v8 * v7;
    v14 = v7;
    v16 = &v17;
    sub_18D073454(v6, (uint64_t)&v10);
    v25 = 0x300000003;
    v23 = &unk_1E25C78E0;
    v24 = xmmword_18D30BB60;
    v26 = &v27;
    sub_18D053B2C((uint64_t)&v18, (uint64_t)&v10, (uint64_t)&v23);
    sub_18D053AA8(a3, (uint64_t)&v23);
  }
  return v3 != 0;
}

cntransformation::CNRigidTransformation *cntransformation::CNRigidTransformation::CNRigidTransformation(cntransformation::CNRigidTransformation *this)
{
  char *v2;
  void *v4;
  __int128 v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v8[72];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  *((_QWORD *)this + 4) = &unk_1E25C7790;
  v2 = (char *)this + 32;
  *((_QWORD *)this + 7) = 0x100000003;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *(_OWORD *)((char *)this + 40) = xmmword_18D313070;
  sub_18D04BE88((uint64_t)this + 32, 0.0);
  *((_QWORD *)this + 12) = &unk_1E25C78E0;
  *((_QWORD *)this + 15) = 0x300000003;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *(_OWORD *)((char *)this + 104) = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)this + 96, 0.0);
  *((_QWORD *)this + 26) = &unk_1E25C78E0;
  *((_QWORD *)this + 29) = 0x300000003;
  *((_QWORD *)this + 30) = (char *)this + 248;
  *(_OWORD *)((char *)this + 216) = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)this + 208, 0.0);
  *((_QWORD *)this + 43) = 0x300000003;
  *((_QWORD *)this + 40) = &unk_1E25C78E0;
  *((_QWORD *)this + 44) = (char *)this + 360;
  *(_OWORD *)((char *)this + 328) = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)this + 320, 0.0);
  *((_BYTE *)this + 432) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  v6 = 0x100000003;
  v4 = &unk_1E25C7790;
  v7 = v8;
  v5 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v4, 0.0);
  sub_18D053AA8((uint64_t)v2, (uint64_t)&v4);
  v6 = 0x300000003;
  v4 = &unk_1E25C78E0;
  v7 = v8;
  v5 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v4, 0.0);
  sub_18D053AA8((uint64_t)this + 96, (uint64_t)&v4);
  v6 = 0x300000003;
  v4 = &unk_1E25C78E0;
  v7 = v8;
  v5 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v4, 0.0);
  sub_18D053AA8((uint64_t)this + 208, (uint64_t)&v4);
  v6 = 0x300000003;
  v4 = &unk_1E25C78E0;
  v7 = v8;
  v5 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v4, 0.0);
  sub_18D053AA8((uint64_t)this + 320, (uint64_t)&v4);
  *((_BYTE *)this + 432) = 0;
  return this;
}

void sub_18D04BE5C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *v4 = &unk_1E25C5E70;
  *v3 = &unk_1E25C5E70;
  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D04BE88(uint64_t result, double a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  int64x2_t *v7;

  v2 = *(double **)(result + 32);
  v3 = *(unsigned int *)(result + 16);
  if ((int)v3 > 3)
  {
    v4 = (v3 - 2);
    v5 = (v3 - 1) >> 1;
    v6 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v7 = *(int64x2_t **)(result + 32);
    do
    {
      *v7++ = v6;
      --v5;
    }
    while (v5);
    *(int64x2_t *)&v2[v4] = v6;
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      *v2++ = a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void raven::RavenMovingStateEstimatorActiveObject::HandleEvent(raven::RavenMovingStateEstimatorActiveObject *this, const raven::TimeMarkEvent *a2)
{
  cnprint::CNPrinter *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  cnprint::CNPrinter *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  unsigned __int8 v30;
  __int16 v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  if (!*((_BYTE *)this + 480))
  {
    LOWORD(v28[0]) = 12;
    LOBYTE(__p[0]) = 2;
    v5 = (char *)this + 488;
    v32 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v33 = v12;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)v5, (uint64_t)&v32, "RavenMovingStateEstimatorActiveObject is not configured.");
LABEL_6:
    if (*((char *)this + 511) >= 0)
      LOBYTE(v13) = (_BYTE)v5;
    else
      v13 = *((_QWORD *)this + 61);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v28, (unsigned __int8 *)__p, "%s", v7, v8, v9, v10, v11, v13);
    return;
  }
  v4 = (cnprint::CNPrinter *)raven::RavenMovingStateEstimator::HandleEvent((raven::RavenMovingStateEstimatorActiveObject *)((char *)this + 536), a2);
  if ((_DWORD)v4)
  {
    if (cnprint::CNPrinter::GetLogLevel(v4) > 1)
      return;
    LOWORD(v28[0]) = 12;
    LOBYTE(__p[0]) = 1;
    LOBYTE(v5) = (_BYTE)this - 24;
    v32 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v33 = v6;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 488, (uint64_t)&v32, "RavenMovingStateEstimatorActiveObject,failed to handle TimeMarkEvent in moving state estimator");
    goto LABEL_6;
  }
  v32 = &unk_1E25C26E8;
  LOBYTE(v39) = 0;
  *((_QWORD *)&v39 + 1) = 0x3FF0000000000000;
  v40 = 0uLL;
  v41 = 0;
  v35 = *(_OWORD *)((char *)a2 + 40);
  v36 = *(_OWORD *)((char *)a2 + 56);
  v37 = *(_OWORD *)((char *)a2 + 72);
  v38 = *(_OWORD *)((char *)a2 + 88);
  v33 = *(_OWORD *)((char *)a2 + 8);
  v34 = *(_OWORD *)((char *)a2 + 24);
  if (raven::RavenMovingStateEstimator::GetMovingStateEvent((raven::RavenMovingStateEstimatorActiveObject *)((char *)this + 536), (raven::MovingStateEvent *)&v32))
  {
    sub_18D04C19C((uint64_t)this, (uint64_t)&v32);
    if (v39 != *((unsigned __int8 *)this + 4848))
    {
      if (cnprint::CNPrinter::GetLogLevel(v14) <= 1)
      {
        v31 = 12;
        v30 = 1;
        v15 = v33;
        sub_18D0778AC(v28, off_1E25CD428[*((char *)this + 4848)]);
        sub_18D0778AC(__p, off_1E25CD428[(char)v39]);
        v25 = *((double *)&v15 + 1) + (double)(uint64_t)v15;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,moving state change,prev_state,%s,new_state,%s", v16, v17, v18, v19, v20, SLOBYTE(v25));
        if (v27 < 0)
          operator delete(__p[0]);
        if (v29 < 0)
          operator delete(v28[0]);
      }
      v21 = v37;
      *((_OWORD *)this + 302) = v38;
      v22 = v40;
      *((_OWORD *)this + 303) = v39;
      *((_OWORD *)this + 304) = v22;
      v23 = v33;
      *((_OWORD *)this + 298) = v34;
      v24 = v36;
      *((_OWORD *)this + 299) = v35;
      *((_OWORD *)this + 300) = v24;
      *((_OWORD *)this + 301) = v21;
      *((_QWORD *)this + 610) = v41;
      *((_OWORD *)this + 297) = v23;
    }
  }
}

void sub_18D04C168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_18D04C19C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D21D27C(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D04C274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D04C290(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D04C3C4(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D04C368(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D04C3A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D04C3B4@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "MovingStateEvent");
}

uint64_t *sub_18D04C3C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C17E0;
  *(_QWORD *)(v4 + 8) = &unk_1E25C26E8;
  v5 = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 128) = v6;
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(a2 + 136);
  v7 = *(_OWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v8;
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v5;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  v9 = *a1;
  *a1 = v4;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

uint64_t raven::RavenMovingStateEstimator::GetMovingStateEvent(raven::RavenMovingStateEstimator *this, raven::MovingStateEvent *a2)
{
  raven::RavenMovingStateEstimator *v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  __int128 v22;
  double *v23;
  double v24;
  double v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  double *v34;
  double v35[3];
  void *v36;
  __int128 v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;

  if (!*((_BYTE *)this + 217) || !*((_BYTE *)this + 216))
    return 0;
  v38 = 0x100000003;
  v36 = &unk_1E25C7790;
  v37 = xmmword_18D313070;
  v39 = (double *)&v40;
  v3 = *((_DWORD *)this + 1032)
     ? (raven::RavenMovingStateEstimator *)((char *)this + 4064)
     : (raven::RavenMovingStateEstimator *)((char *)this + 4000);
  sub_18D053AA8((uint64_t)&v36, (uint64_t)v3);
  v4 = v39;
  v5 = *v39;
  if ((*(_QWORD *)v39 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v6 = v39[1];
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v7 = v39[2];
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v8 = 0.0;
  if (v5 <= 1.0)
    v9 = *v39;
  else
    v9 = 1.0;
  if (v5 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v6 <= 1.0)
    v11 = v39[1];
  else
    v11 = 1.0;
  if (v6 >= 0.0)
    v12 = v11;
  else
    v12 = 0.0;
  *v39 = v10;
  v4[1] = v12;
  if (v7 >= 0.0)
  {
    v8 = 1.0;
    if (v7 <= 1.0)
      v8 = v7;
  }
  v4[2] = v8;
  v13 = DWORD1(v37);
  if (DWORD1(v37))
  {
    v14 = 0;
    v15 = v37;
    v16 = 1;
    do
    {
      v17 = v4[(v15 * v14)];
      v18 = v16;
      v19 = v15 - 1;
      if (v15 >= 2)
      {
        do
        {
          v17 = v17 + v4[v18++];
          --v19;
        }
        while (v19);
      }
      v35[v14++] = v17;
      v16 += v15;
    }
    while (v14 != v13);
    v20 = v35[0] + -1.0;
  }
  else
  {
    v20 = NAN;
  }
  if (fabs(v20) > 0.000000015)
    return 0;
  v33 = 0x100000001;
  v31 = &unk_1E25C6A40;
  *(_QWORD *)&v22 = 0x100000001;
  *((_QWORD *)&v22 + 1) = 0x100000001;
  v32 = v22;
  v34 = v35;
  v28 = 0x100000001;
  v26 = &unk_1E25C6AA0;
  v27 = v22;
  v29 = &v30;
  sub_18D04C6B8((uint64_t)&v36, (uint64_t)&v31, (uint64_t)&v26);
  if (*(_DWORD *)v29 <= 2u)
    *((_BYTE *)a2 + 104) = *(_DWORD *)v29 + 1;
  v23 = v39;
  v24 = *v39;
  *((double *)a2 + 15) = *v39;
  v25 = v23[1];
  *((double *)a2 + 16) = v25;
  *((double *)a2 + 17) = 1.0 - v24 - v25;
  *((_QWORD *)a2 + 14) = 0;
  return 1;
}

__n128 sub_18D04C6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  int v8;
  double *v9;
  _DWORD *v10;
  double v11;
  uint64_t i;
  double v13;

  sub_18D04C758(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    v8 = *(_DWORD *)(a2 + 16);
    if (v8 >= 2)
    {
      v9 = *(double **)(a2 + 32);
      v10 = *(_DWORD **)(a3 + 32);
      v11 = *v9;
      for (i = 1; i < v8; ++i)
      {
        v13 = v9[i];
        if (v13 > v11)
        {
          *v9 = v13;
          *v10 = v10[i];
          v8 = *(_DWORD *)(a2 + 16);
          v11 = v13;
        }
      }
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

uint64_t sub_18D04C758(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  uint64_t i;
  int32x2_t v15;
  int32x4_t v16;
  unsigned int v17;
  int32x4_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  double v32;

  if (a2 == 1)
  {
    v4 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = 1;
    v5 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v5;
    *(_DWORD *)(a4 + 20) = 1;
    if (v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(result + 32);
      v8 = *(_QWORD *)(a3 + 32);
      v9 = *(_QWORD *)(a4 + 32);
      do
      {
        v10 = *(unsigned int *)(result + 8);
        v11 = *(double *)(v7 + 8 * (v10 * v6));
        if (v10 < 2)
        {
          v12 = 0;
        }
        else
        {
          v12 = 0;
          v13 = v10 * v6;
          for (i = 1; i != v10; ++i)
          {
            if (*(double *)(v7 + 8 * (v13 + i)) > v11)
            {
              v11 = *(double *)(v7 + 8 * (v13 + i));
              v12 = i;
            }
          }
        }
        *(double *)(v8 + 8 * v6) = v11;
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v15.i32[1] = 1;
    v15.i32[0] = *(_DWORD *)(result + 8);
    v16 = vdupq_lane_s32(v15, 0);
    v16.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v16;
    v17 = *(_DWORD *)(result + 8);
    v18 = vdupq_lane_s32((int32x2_t)(v17 | 0x100000000), 0);
    v18.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v18;
    if (v17)
    {
      v19 = 0;
      v20 = *(_QWORD *)(result + 32);
      v21 = *(_QWORD *)(a3 + 32);
      v22 = *(_QWORD *)(a4 + 32);
      do
      {
        *(_QWORD *)(v21 + 8 * v19) = *(_QWORD *)(v20 + 8 * v19);
        *(_DWORD *)(v22 + 4 * v19++) = 0;
      }
      while (v19 < *(unsigned int *)(result + 8));
    }
    v23 = *(_DWORD *)(result + 12);
    if (v23 >= 2)
    {
      v24 = *(_QWORD *)(result + 32);
      v25 = *(_QWORD *)(a3 + 32);
      v26 = *(_DWORD *)(result + 8);
      v27 = 1;
      v28 = v26;
      do
      {
        if (v28)
        {
          v29 = 0;
          v30 = *(_QWORD *)(a4 + 32);
          v31 = v28 * v27;
          do
          {
            v32 = *(double *)(v24 + 8 * (v31 + v29));
            if (v32 > *(double *)(v25 + 8 * v29))
            {
              *(double *)(v25 + 8 * v29) = v32;
              *(_DWORD *)(v30 + 4 * v29) = v27;
              v26 = *(_DWORD *)(result + 8);
            }
            ++v29;
          }
          while (v29 < v26);
          v23 = *(_DWORD *)(result + 12);
          v28 = v26;
        }
        ++v27;
      }
      while (v27 < v23);
    }
  }
  return result;
}

uint64_t raven::RavenMovingStateEstimator::HandleEvent(raven::RavenMovingStateEstimator *this, const raven::TimeMarkEvent *a2)
{
  double v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  double v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  BOOL v15;
  uint64_t v16;
  cnprint::CNPrinter *v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  double v21;
  double v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  if (*((_BYTE *)this + 217))
  {
    if (*((_BYTE *)this + 216)
      || (*(_QWORD *)&v35 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2),
          *((_QWORD *)&v35 + 1) = v31,
          !raven::RavenMovingStateEstimator::Initialize((uint64_t)this, (uint64_t)&v35)))
    {
      v5 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      v8 = v4;
      if (v5)
        v9 = 1;
      else
        v9 = (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v10 = v9;
      while (1)
      {
        *(_QWORD *)&v35 = 0;
        *((_QWORD *)&v35 + 1) = 0x3FA999999999999ALL;
        v11 = CNTimeSpan::operator+((uint64_t)this + 4144, &v35, v6, v7);
        *(double *)v14.i64 = v12;
        if ((v10 & 1) == 0
          || !v11 && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
          || (v15 = v5 <= v11, v5 == v11))
        {
          v15 = v8 <= v12;
        }
        if (v15)
          return 0;
        v33 = 0;
        v34 = 0x3FB999999999999ALL;
        *(_QWORD *)&v35 = CNTimeSpan::operator+((uint64_t)this + 4144, &v33, v14, v13);
        *((_QWORD *)&v35 + 1) = v16;
        v17 = (cnprint::CNPrinter *)raven::RavenMovingStateEstimator::Predict((uint64_t)this, &v35);
        if ((_DWORD)v17)
          break;
        if (*((_BYTE *)this + 136))
        {
          if (!*((_BYTE *)this + 1544))
            sub_18D164CA0();
          if (*((_BYTE *)this + 1504))
            sub_18D04D4BC((uint64_t)this + 3992, *((_QWORD *)this + 9), (uint64_t)this + 80);
        }
        if (*((_BYTE *)this + 3984))
        {
          v33 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 194) + 16))((char *)this + 1552);
          v34 = v18;
          *(double *)v7.i64 = (double)CNTimeSpan::operator-((uint64_t)&v35, &v33, v19, v20);
          *(double *)v6.i64 = v21 + *(double *)v7.i64;
          if (v21 + *(double *)v7.i64 >= 1.25)
          {
            if (*((_BYTE *)this + 3984))
              *((_BYTE *)this + 3984) = 0;
            if (*((_BYTE *)this + 208))
              *((_BYTE *)this + 208) = 0;
          }
          else if (*((_BYTE *)this + 208))
          {
            sub_18D04D4BC((uint64_t)this + 3992, *((_QWORD *)this + 18), (uint64_t)this + 152);
          }
        }
        if (*((_BYTE *)this + 64))
        {
          *(double *)v7.i64 = (double)CNTimeSpan::operator-((uint64_t)&v35, (_QWORD *)this + 6, v6, v7);
          *(double *)v6.i64 = v22 + *(double *)v7.i64;
          if (v22 + *(double *)v7.i64 >= 0.5)
            *((_BYTE *)this + 64) = 0;
          else
            sub_18D04D4BC((uint64_t)this + 3992, *(_QWORD *)this, (uint64_t)this + 8);
        }
      }
      if (cnprint::CNPrinter::GetLogLevel(v17) <= 1)
      {
        LOWORD(v33) = 12;
        v32 = 1;
        v24 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 4160, (uint64_t)&v35, "RavenMovingStateEstimator,failed to predict");
        if (*((char *)this + 4183) >= 0)
          LOBYTE(v30) = v24;
        else
          v30 = *((_QWORD *)this + 520);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "%s", v25, v26, v27, v28, v29, v30);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenMovingStateEstimator::Predict(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t *v5;
  int32x2_t v6;
  int64x2_t v7;
  int8x16_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  float64x2_t v15;
  void **v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  cnprint::CNPrinter *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  double v45;
  double v46;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t result;
  cnprint::CNPrinter *v75;
  unint64_t v76;
  BOOL v77;
  double *v78;
  double v79;
  double *v80;
  unint64_t v81;
  double v82;
  double v84;
  float64x2_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  double v92;
  char v93;
  __int128 v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  double *v103;
  _BYTE v104[72];
  _BYTE v105[8];
  unsigned int v106;
  uint64_t v107;
  void *v108;
  __int128 v109;
  uint64_t v110;
  double *v111;
  uint64_t v112;
  void *v113;
  __int128 v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;

  if (!*(_BYTE *)(a1 + 217))
  {
    LOWORD(v94) = 12;
    LOBYTE(v100) = 4;
    v17 = cnprint::CNLogFormatter::FormatGeneral(a1 + 4160, (uint64_t)a2, "failed to predict, Unconfigured");
LABEL_21:
    if (*(char *)(a1 + 4183) >= 0)
      LOBYTE(v23) = v17;
    else
      v23 = *(_QWORD *)(a1 + 4160);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v94, (unsigned __int8 *)&v100, "%s", v18, v19, v20, v21, v22, v23);
    return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(a1 + 216))
  {
    LOWORD(v94) = 12;
    LOBYTE(v100) = 4;
    v17 = cnprint::CNLogFormatter::FormatGeneral(a1 + 4160, (uint64_t)a2, "failed to predict, Uninitialized");
    goto LABEL_21;
  }
  *(_QWORD *)&v94 = 0;
  *((_QWORD *)&v94 + 1) = 0x7FF8000000000000;
  v97 = 0x300000003;
  v95 = &unk_1E25C78E0;
  v98 = &v99;
  v96 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v95, 0.0);
  v4 = HIDWORD(v96) + 1;
  v5 = v98;
  *v98 = 0x3FF0000000000000;
  v5[v4] = 0x3FF0000000000000;
  v5[2 * v4] = 0x3FF0000000000000;
  v6 = vdup_n_s32(*(_BYTE *)(a1 + 1040) == 0);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  v8 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v7, 0x3FuLL));
  v94 = *a2;
  v96 = xmmword_18D30BB60;
  *(int8x16_t *)v5 = vbslq_s8(v8, (int8x16_t)xmmword_18D3147D0, (int8x16_t)xmmword_18D3147C0);
  *((_OWORD *)v5 + 1) = xmmword_18D314800;
  *((_OWORD *)v5 + 2) = xmmword_18D314810;
  *((int8x16_t *)v5 + 3) = vbslq_s8(v8, (int8x16_t)xmmword_18D3147F0, (int8x16_t)xmmword_18D3147E0);
  v5[8] = 0x3FE8000000000000;
  if (!*(_DWORD *)(a1 + 4128))
    sub_18D053AA8(a1 + 4064, a1 + 4000);
  v9 = *(_DWORD *)(a1 + 4072);
  v10 = *(_DWORD *)(a1 + 4076);
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  v12 = v11;
  if (v9 <= v10)
    v13 = *(_DWORD *)(a1 + 4076);
  else
    v13 = *(_DWORD *)(a1 + 4072);
  if (v12)
    v14 = 0;
  else
    v14 = v13;
  if (v12 != 1)
  {
    v24 = *(double *)(a1 + 4136);
    v102 = 0x100000003;
    v100 = &unk_1E25C7790;
    v101 = xmmword_18D313070;
    v103 = (double *)v104;
    v25 = (cnprint::CNPrinter *)sub_18D06403C(a1 + 4064, 1, (uint64_t)&v100);
    v26 = *v103;
    if (fabs(*v103 + -1.0) <= v24)
    {
      if ((v13 & 0x80000000) == 0)
      {
        sub_18D04DA0C((uint64_t)&v100, a1 + 4064);
        v33 = vdupq_lane_s32((int32x2_t)(v13 | 0x100000000), 0);
        v33.i32[1] = 1;
        v101 = (__int128)v33;
        goto LABEL_33;
      }
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
      {
        LOWORD(v100) = 2;
        LOBYTE(v113) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v113, "WARNING: HMM prediction passed a non-normalized probability vector.", v27, v28, v29, v30, v31, v91);
      }
      if ((v13 & 0x80000000) == 0)
      {
        sub_18D04DA0C((uint64_t)&v113, a1 + 4064);
        v32 = vdupq_lane_s32((int32x2_t)(v13 | 0x100000000), 0);
        v32.i32[1] = 1;
        v114 = (__int128)v32;
        v102 = 0x100000003;
        v100 = &unk_1E25C7790;
        *(_QWORD *)&v15.f64[1] = 0x300000003;
        v101 = xmmword_18D313070;
        v103 = (double *)v104;
        v15.f64[0] = 1.0 / v26;
        goto LABEL_30;
      }
    }
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  v115 = 0x100000003;
  v113 = &unk_1E25C7790;
  v116 = &v117;
  v114 = xmmword_18D314820;
  sub_18D04BE88((uint64_t)&v113, 1.0);
  v102 = 0x100000003;
  v100 = &unk_1E25C7790;
  *(_QWORD *)&v15.f64[1] = 0x300000003;
  v101 = xmmword_18D313070;
  v103 = (double *)v104;
  v15.f64[0] = INFINITY;
  v16 = &v113;
LABEL_30:
  sub_18D064EF4((uint64_t)v16, (uint64_t)&v100, v15);
LABEL_33:
  sub_18D053AA8(a1 + 4064, (uint64_t)&v100);
  *(_DWORD *)(a1 + 4128) = 1;
  v102 = 0x300000003;
  v100 = &unk_1E25C78E0;
  v101 = xmmword_18D30BB60;
  v103 = (double *)v104;
  v39 = atomic_load((unsigned __int8 *)&qword_1ECF22F30);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF22F30))
  {
    v115 = 0x300000001;
    v113 = &unk_1E25C6C50;
    v116 = &v117;
    v114 = xmmword_18D314670;
    v117 = 0x100000000;
    v118 = 2;
    sub_18D16169C((uint64_t)&v113, (uint64_t)&unk_1ECF22F38);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF22F38, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF22F30);
  }
  v40 = dword_1ECF22F48;
  v115 = 0x100000003;
  v113 = &unk_1E25C7790;
  *(_QWORD *)&v114 = dword_1ECF22F48 | 0x100000000;
  DWORD2(v114) = dword_1ECF22F48;
  HIDWORD(v114) = dword_1ECF22F48;
  v116 = &v117;
  if (dword_1ECF22F48)
  {
    v41 = 0;
    v42 = qword_1ECF22F58;
    v43 = v98;
    do
    {
      *(&v117 + v41) = v43[*(unsigned int *)(v42 + 4 * (int)v41)];
      ++v41;
    }
    while ((_DWORD)v40 != (_DWORD)v41);
    v44 = 0;
    v45 = 0.0;
    while (1)
    {
      v46 = *(double *)((char *)&v117 + (v44 >> 29));
      if ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_72;
      if (v46 < 0.0 || v46 > 1.0)
        goto LABEL_72;
      v45 = v45 + v46;
      v44 += 0x100000000;
      if (!--v40)
      {
        v48 = v45 + -1.0;
        goto LABEL_47;
      }
    }
  }
  v48 = -1.0;
LABEL_47:
  if (fabs(v48) >= 2.22044605e-16)
    goto LABEL_72;
  sub_18D04D448((uint64_t)&v108, (uint64_t)&v95, 1);
  v49 = v109;
  if ((_DWORD)v109)
  {
    v50 = 0;
    v51 = 0.0;
    while (1)
    {
      v52 = *(double *)((char *)v111 + (v50 >> 29));
      if ((*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_72;
      if (v52 < 0.0 || v52 > 1.0)
        goto LABEL_72;
      v51 = v51 + v52;
      v50 += 0x100000000;
      if (!--v49)
      {
        v54 = v51 + -1.0;
        goto LABEL_59;
      }
    }
  }
  v54 = -1.0;
LABEL_59:
  if (fabs(v54) >= 2.22044605e-16)
    goto LABEL_72;
  sub_18D04D448((uint64_t)v105, (uint64_t)&v95, 2);
  v55 = v106;
  if (v106)
  {
    v56 = 0;
    v57 = 0.0;
    while (1)
    {
      v58 = *(double *)(v107 + (v56 >> 29));
      if ((*(_QWORD *)&v58 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      if (v58 < 0.0 || v58 > 1.0)
        break;
      v57 = v57 + v58;
      v56 += 0x100000000;
      if (!--v55)
      {
        v60 = v57 + -1.0;
        goto LABEL_71;
      }
    }
LABEL_72:
    LOWORD(v113) = 12;
    LOBYTE(v108) = 4;
    v92 = *((double *)&v94 + 1) + (double)(uint64_t)v94;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v108, "time,%.3lf,t-function failure on line %d: %s() %s", v34, v35, v36, v37, v38, SLOBYTE(v92));
    LOWORD(v113) = 2;
    LOBYTE(v108) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v108, "ERROR: HMM transition probability function failed.", v61, v62, v63, v64, v65, v93);
    v66 = 27;
LABEL_73:
    LOWORD(v100) = 12;
    LOBYTE(v113) = 4;
    v67 = cnprint::CNLogFormatter::FormatGeneral(a1 + 4160, a1 + 4144, "failed to predict,code,%d", v66);
    if (*(char *)(a1 + 4183) >= 0)
      LOBYTE(v73) = v67;
    else
      v73 = *(_QWORD *)(a1 + 4160);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v113, "%s", v68, v69, v70, v71, v72, v73);
    return 0xFFFFFFFFLL;
  }
  v60 = -1.0;
LABEL_71:
  if (fabs(v60) >= 2.22044605e-16)
    goto LABEL_72;
  v101 = xmmword_18D30BB60;
  sub_18D053AA8((uint64_t)&v100, (uint64_t)&v95);
  if ((_DWORD)v14)
  {
    v76 = 0;
    v77 = 0;
    v78 = v103;
LABEL_80:
    v79 = 0.0;
    v80 = v78;
    v81 = v14;
    while (1)
    {
      v82 = *v80;
      if (*v80 < 0.0 || v82 > 1.0)
        break;
      v79 = v79 + v82;
      ++v80;
      if (!--v81)
      {
        if (fabs(v79 + -1.0) <= *(double *)(a1 + 4136))
        {
          ++v76;
          v78 += SHIDWORD(v101);
          v77 = v76 >= v14;
          if (v76 != v14)
            goto LABEL_80;
        }
        break;
      }
    }
    if (!v77)
    {
      if (cnprint::CNPrinter::GetLogLevel(v75) <= 1)
      {
        LOWORD(v113) = 2;
        LOBYTE(v108) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v108, "ERROR: HMM transition probability matrix is invalid.", v86, v87, v88, v89, v90, v91);
      }
      v66 = 28;
      goto LABEL_73;
    }
  }
  v115 = 0x100000003;
  v113 = &unk_1E25C7790;
  v114 = xmmword_18D313070;
  v116 = &v117;
  sub_18D053B2C((uint64_t)&v100, a1 + 4064, (uint64_t)&v113);
  sub_18D053AA8(a1 + 4000, (uint64_t)&v113);
  v110 = 0x100000003;
  v108 = &unk_1E25C7790;
  v109 = xmmword_18D313070;
  v111 = (double *)&v112;
  sub_18D06403C(a1 + 4000, 1, (uint64_t)&v108);
  v84 = *v111;
  v115 = 0x100000003;
  v113 = &unk_1E25C7790;
  v85.f64[0] = 1.0 / v84;
  v114 = xmmword_18D313070;
  v116 = &v117;
  sub_18D064EF4(a1 + 4000, (uint64_t)&v113, v85);
  sub_18D053AA8(a1 + 4000, (uint64_t)&v113);
  result = 0;
  *(_DWORD *)(a1 + 4128) = 0;
  *(_OWORD *)(a1 + 4144) = *a2;
  return result;
}

void sub_18D04D430(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF22F30);
  _Unwind_Resume(a1);
}

double sub_18D04D448(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = dword_1ECF22F48;
  *(_QWORD *)&result = 0x100000003;
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 20) = v3;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (v3)
  {
    v5 = 0;
    v6 = qword_1ECF22F58;
    v7 = *(_DWORD *)(a2 + 20) * a3;
    v8 = *(_QWORD *)(a2 + 32);
    do
    {
      result = *(double *)(v8 + 8 * (*(_DWORD *)(v6 + 4 * (int)v5) + v7));
      *(double *)(a1 + 40 + 8 * v5++) = result;
    }
    while (v3 != (_DWORD)v5);
  }
  return result;
}

void sub_18D04D4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  double v12;
  cnprint::CNPrinter *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  void **v21;
  float64x2_t v22;
  int32x4_t v23;
  uint64_t (*v24)(_QWORD, void **);
  cnprint::CNPrinter *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  char *v32;
  double v33;
  double *v34;
  double *v35;
  uint64_t v36;
  double v37;
  double *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  int v45;
  __int128 v46;
  double v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  int v59;
  double v60;
  unsigned int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[32];
  _QWORD *v66;
  uint64_t (**v67)();
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD v71[4];
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  double *v79;
  double v80[3];
  unsigned __int8 v81;
  void *v82;
  __int128 v83;
  uint64_t v84;
  double *v85;
  _BYTE v86[24];
  void *v87;
  __int128 v88;
  uint64_t v89;
  double *v90;
  _BYTE v91[24];

  if (*(_DWORD *)(a1 + 136) == 1)
    sub_18D053AA8(a1 + 8, a1 + 72);
  v73 = 0x100000001;
  v71[3] = &off_1E25C6950;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  v72 = v6;
  v74 = &v75;
  v75 = a2;
  v69 = 0x100000003;
  v67 = &off_1E25C7760;
  v68 = v6;
  v70 = v71;
  v71[0] = a3;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 20);
  sub_18D04DB40((uint64_t)v65, (uint64_t)&v67);
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = v7;
  if (v8)
    v10 = v7 == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = v9;
  v12 = *(double *)(a1 + 144);
  if (!*(_DWORD *)(a1 + 16) || !*(_DWORD *)(a1 + 20))
  {
    if ((v11 & 0x80000000) != 0)
      __assert_rtn("Ones", "cnmatrix.h", 2317, "nr >= 0");
    v84 = 0x100000003;
    v82 = &unk_1E25C7790;
    v85 = (double *)v86;
    *(_QWORD *)&v83 = v11 | 0x100000000;
    v20 = 1.0 / (double)(int)v11;
    DWORD2(v83) = v11;
    HIDWORD(v83) = v11;
    sub_18D04BE88((uint64_t)&v82, 1.0);
    v89 = 0x100000003;
    v87 = &unk_1E25C7790;
    *(_QWORD *)&v22.f64[1] = 0x300000003;
    v88 = xmmword_18D313070;
    v90 = (double *)v91;
    v21 = &v82;
    goto LABEL_21;
  }
  v89 = 0x100000003;
  v87 = &unk_1E25C7790;
  v63 = xmmword_18D313070;
  v88 = xmmword_18D313070;
  v90 = (double *)v91;
  v13 = (cnprint::CNPrinter *)sub_18D06403C(a1 + 8, 1, (uint64_t)&v87);
  v14 = *v90;
  if (fabs(*v90 + -1.0) > v12)
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v87) = 2;
      LOBYTE(v82) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v87, (unsigned __int8 *)&v82, "WARNING: HMM update passed a non-normalized probability vector.", v15, v16, v17, v18, v19, 3);
    }
    if ((v11 & 0x80000000) == 0)
    {
      v20 = 1.0 / v14;
      sub_18D04DA0C((uint64_t)&v82, a1 + 8);
      v22 = (float64x2_t)vdupq_lane_s32((int32x2_t)(v11 | 0x100000000), 0);
      HIDWORD(v22.f64[0]) = 1;
      v83 = (__int128)v22;
      v89 = 0x100000003;
      v87 = &unk_1E25C7790;
      *(_QWORD *)&v22.f64[1] = 0x300000003;
      v88 = v63;
      v90 = (double *)v91;
LABEL_21:
      v22.f64[0] = v20;
      sub_18D064EF4((uint64_t)v21, (uint64_t)&v87, v22);
      goto LABEL_24;
    }
LABEL_60:
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  if ((v11 & 0x80000000) != 0)
    goto LABEL_60;
  sub_18D04DA0C((uint64_t)&v87, a1 + 8);
  v23 = vdupq_lane_s32((int32x2_t)(v11 | 0x100000000), 0);
  v23.i32[1] = 1;
  v88 = (__int128)v23;
LABEL_24:
  sub_18D053AA8(a1 + 8, (uint64_t)&v87);
  sub_18D04DA0C((uint64_t)&v87, a1 + 8);
  v24 = (uint64_t (*)(_QWORD, void **))*v74;
  v84 = 0x100000003;
  v82 = &unk_1E25C7790;
  v64 = xmmword_18D313070;
  v83 = xmmword_18D313070;
  v85 = (double *)v86;
  v25 = (cnprint::CNPrinter *)v24(*v66, &v82);
  if ((_DWORD)v25)
  {
    LOWORD(v76) = 2;
    v81 = 4;
    v32 = "ERROR: HMM emission function failed.";
LABEL_26:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v81, v32, v26, v27, v28, v29, v30, 3);
    return;
  }
  if ((_DWORD)v11)
  {
    v33 = 0.0;
    v34 = v85;
    v35 = v85;
    v36 = v11;
    do
    {
      v37 = *v35;
      if (*v35 < 0.0 || v37 > 1.0)
      {
        LOWORD(v76) = 2;
        v81 = 4;
        v32 = "ERROR: HMM emission probability matrix is invalid.";
        goto LABEL_26;
      }
      v33 = v33 + v37;
      ++v35;
      --v36;
    }
    while (v36);
    if (fabs(v33) > v12)
    {
      v39 = v90;
      do
      {
        v40 = *v34++;
        v31.n128_f64[0] = v40 * *v39;
        *v39++ = v31.n128_f64[0];
        --v11;
      }
      while (v11);
      goto LABEL_40;
    }
LABEL_46:
    LOWORD(v76) = 2;
    v81 = 4;
    v32 = "ERROR: HMM emission probability matrix is null matrix";
    goto LABEL_26;
  }
  if (v12 >= 0.0)
    goto LABEL_46;
LABEL_40:
  v41 = DWORD1(v88);
  if (DWORD1(v88))
  {
    v42 = 0;
    v43 = v88;
    v44 = v90;
    v45 = 1;
    v46 = xmmword_18D313070;
    do
    {
      v47 = v44[(v43 * v42)];
      v48 = v45;
      v49 = v43 - 1;
      if (v43 >= 2)
      {
        do
        {
          v47 = v47 + v44[v48++];
          --v49;
        }
        while (v49);
      }
      v80[v42++] = v47;
      v45 += v43;
    }
    while (v42 != v41);
    v31.n128_f64[0] = v80[0];
  }
  else
  {
    v46 = xmmword_18D313070;
  }
  if (fabs(v31.n128_f64[0]) < 2.22044605e-16)
  {
    if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
    {
      LOWORD(v76) = 2;
      v81 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v81, "HMM state is null vector after update; revert to input state",
        v50,
        v51,
        v52,
        v53,
        v54,
        3);
    }
    v31 = sub_18D053AA8((uint64_t)&v87, a1 + 8);
    v55 = DWORD1(v88);
    if (DWORD1(v88))
    {
      v56 = 0;
      v57 = v88;
      v58 = v90;
      v59 = 1;
      v46 = v64;
      do
      {
        v60 = v58[(v57 * v56)];
        v61 = v59;
        v62 = v57 - 1;
        if (v57 >= 2)
        {
          do
          {
            v60 = v60 + v58[v61++];
            --v62;
          }
          while (v62);
        }
        v80[v56++] = v60;
        v59 += v57;
      }
      while (v56 != v55);
      v31.n128_f64[0] = v80[0];
    }
    else
    {
      v46 = v64;
    }
  }
  v78 = 0x100000003;
  v76 = &unk_1E25C7790;
  v77 = v46;
  v79 = v80;
  v31.n128_f64[0] = 1.0 / v31.n128_f64[0];
  sub_18D064EF4((uint64_t)&v87, (uint64_t)&v76, (float64x2_t)v31);
  sub_18D053AA8((uint64_t)&v87, (uint64_t)&v76);
  sub_18D053AA8(a1 + 72, (uint64_t)&v87);
  *(_DWORD *)(a1 + 136) = 1;
}

__n128 sub_18D04DA0C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x100000003;
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D04DB2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D04DB40(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;

  *(_QWORD *)(result + 24) = 0x100000001;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E25C69E0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  v4 = v3 * v2;
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    v7 = "this->max_num_rows_ >= A.NumRows()";
    v8 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v7 = "this->max_num_cols_ >= A.NumCols()";
    v8 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v8, v7);
  }
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = 8 * v4;
    do
    {
      *(_QWORD *)(*(_QWORD *)(result + 32) + v5) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v5);
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_18D04DC0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5DB0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D04DC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v16;
  uint64_t v20;
  uint64_t *v21;
  double v23;
  double v24;
  double v25;
  unsigned __int8 v26;
  __int16 v27;
  unsigned __int8 v28;
  __int16 v29;
  unsigned __int8 v30;
  __int16 v31;

  v8 = *(_QWORD *)(a1 + 16);
  if ((v8 <= -1 || ((v8 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v8 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v27 = 12;
    v26 = 4;
    v23 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 <= -1 || ((v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v12 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v12 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v29 = 12;
    v28 = 4;
    v24 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v24));
    return 0xFFFFFFFFLL;
  }
  v16 = *(_QWORD *)(a1 + 32);
  if ((v16 <= -1 || ((v16 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v16 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v31 = 12;
    v30 = 4;
    v25 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v25));
    return 0xFFFFFFFFLL;
  }
  v20 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_18D313070;
  v21 = *(uint64_t **)(a2 + 32);
  *v21 = v8;
  v21[1] = *(_QWORD *)(a1 + 24);
  v21[2] = *(_QWORD *)(a1 + 32);
  return v20;
}

uint64_t sub_18D04DDF4(uint64_t a1, float64_t a2, float64_t a3, double a4)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0x300000003;
  *(_QWORD *)(a1 + 16) = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 24) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)a1 = &off_1E25B9588;
  sub_18D04DE7C((_BYTE *)a1, a2, a3, a4);
  return a1;
}

void sub_18D04DE58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E25B9B80;
  v1[2] = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D04DE7C(_BYTE *a1, float64_t a2, float64_t a3, double a4)
{
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  float64x2_t v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  a1[8] = 0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0;
  v10.f64[0] = a2;
  v10.f64[1] = a3;
  v11 = a4;
  if (cnnavigation::ECEFToLLA(&v10, 1, &v7, 0, (uint64_t)&v6))
    return 0;
  else
    return (*(uint64_t (**)(_BYTE *, double, double))(*(_QWORD *)a1 + 16))(a1, v7, v8);
}

uint64_t raven::RavenEstimator::StoreHistoricalSolution(raven::RavenEstimator *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  double v10;
  double *v11;
  double *v12;
  double *v13;
  const void *i;
  double v15;
  double v16;
  BOOL v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _BYTE *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void *v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _OWORD v132[121];
  uint64_t v133;
  double v134;
  _QWORD v135[133];
  double v136[108];
  void *v137;
  _QWORD *v138;
  void *__src;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t __dst[107];

  result = MEMORY[0x1E0C80A78](this, a2);
  __dst[106] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(result + 57))
    return result;
  v3 = result;
  if (!*(_BYTE *)(result + 58))
    return result;
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)result + 40))(v136, result);
  result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v3 + 48))(v135, v3);
  if (BYTE1(v135[13]) != 2 || !LOBYTE(v135[13]))
    return result;
  v4 = (_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 48);
  if (!v5)
  {
    v23 = 0;
    goto LABEL_73;
  }
  result = sub_18D03FE4C(v136, (double *)(*(_QWORD *)(*(_QWORD *)(v3 + 16)+ (((unint64_t)(v5 + *(_QWORD *)(v3 + 40) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1928 * (((_DWORD)v5 + *(_DWORD *)(v3 + 40) - 1) & 0xF)+ 1064));
  if ((result & 1) != 0)
    return result;
  v132[0] = *(_OWORD *)(v3 + 80);
  v7.i64[1] = *((_QWORD *)&v132[0] + 1);
  v7.i64[0] = *(_QWORD *)(*(_QWORD *)(v3 + 1168) + 1416);
  __dst[1] = 0;
  __dst[0] = 0;
  CNTimeSpan::SetTimeSpan(__dst, 0, v7, v6);
  v133 = CNTimeSpan::operator-((uint64_t)v132, __dst, v8, v9);
  v134 = v10;
  v11 = (double *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + ((*(_QWORD *)(v3 + 40) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 1928 * (*(_QWORD *)(v3 + 40) & 0xFLL));
  memcpy(v132, v11, 0x428uLL);
  v12 = v11 + 133;
  v13 = v11 + 134;
  for (i = v11 + 135; ; i = v12 + 2)
  {
    v15 = *v12;
    v16 = *v13;
    memcpy(__dst, i, 0x350uLL);
    v17 = v15 != 0.0 || (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (!v17)
    {
LABEL_16:
      v18 = v134;
LABEL_17:
      if (v16 > v18)
        goto LABEL_26;
      goto LABEL_20;
    }
    if (!v133)
    {
      v18 = v134;
      if ((*(_QWORD *)&v134 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_17;
    }
    if (*(_QWORD *)&v15 == v133)
      goto LABEL_16;
    if (*(uint64_t *)&v15 >= v133)
    {
LABEL_26:
      v23 = *(_QWORD *)(v3 + 48);
      goto LABEL_73;
    }
LABEL_20:
    v19 = *(_QWORD *)(v3 + 48) - 1;
    v20 = *(_QWORD *)(v3 + 40) + 1;
    *(_QWORD *)(v3 + 40) = v20;
    *(_QWORD *)(v3 + 48) = v19;
    if (v20 >= 0x20)
    {
      operator delete(**(void ***)(v3 + 16));
      *(_QWORD *)(v3 + 16) += 8;
      v19 = *(_QWORD *)(v3 + 48);
      v20 = *(_QWORD *)(v3 + 40) - 16;
      *(_QWORD *)(v3 + 40) = v20;
    }
    if (!v19)
      goto LABEL_28;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + ((v20 >> 1) & 0x7FFFFFFFFFFFFFF8));
    v22 = v20 & 0xF;
    v12 = (double *)(v21 + 1928 * (v20 & 0xF) + 1064);
    if (sub_18D03F608(v12, (double *)&v133))
      break;
    memcpy(v132, (const void *)(v21 + 1928 * v22), 0x428uLL);
    v13 = v12 + 1;
  }
  v20 = *(_QWORD *)(v3 + 40);
LABEL_28:
  v24 = *(_QWORD *)(v3 + 16);
  if (!v20)
  {
    v25 = *(_QWORD *)(v3 + 24);
    v26 = 2 * (v25 - v24) - 1;
    if (v25 == v24)
      v26 = 0;
    if ((unint64_t)(v26 - *(_QWORD *)(v3 + 48)) < 0x10)
    {
      v27 = *(_QWORD *)(v3 + 32);
      v28 = *(_QWORD *)(v3 + 8);
      if (v25 - v24 >= (unint64_t)(v27 - v28))
      {
        if (v27 == v28)
          v29 = 1;
        else
          v29 = (v27 - v28) >> 2;
        v142 = v3 + 32;
        v140 = (char *)sub_18D07BF3C(v29);
        v138 = v140;
        __src = v140;
        v141 = &v140[8 * v30];
        v137 = operator new(0x7880uLL);
        sub_18D189050(&v138, &v137);
        v32 = *(uint64_t **)(v3 + 16);
        v31 = *(uint64_t **)(v3 + 24);
        v33 = v140;
        while (v32 != v31)
        {
          if (v33 == v141)
          {
            v34 = (char *)__src;
            v35 = v138;
            if (__src <= v138)
            {
              if (v33 == (char *)v138)
                v41 = 1;
              else
                v41 = (v33 - (char *)v138) >> 2;
              v42 = (char *)sub_18D07BF3C(v41);
              v45 = v33 - v34;
              v44 = v33 == v34;
              v33 = &v42[8 * (v41 >> 2)];
              if (!v44)
              {
                v33 = &v42[8 * (v41 >> 2) + (v45 & 0xFFFFFFFFFFFFFFF8)];
                v46 = 8 * (v45 >> 3);
                v47 = &v42[8 * (v41 >> 2)];
                do
                {
                  v48 = *(_QWORD *)v34;
                  v34 += 8;
                  *(_QWORD *)v47 = v48;
                  v47 += 8;
                  v46 -= 8;
                }
                while (v46);
              }
              v138 = v42;
              __src = &v42[8 * (v41 >> 2)];
              v140 = v33;
              v141 = &v42[8 * v43];
              if (v35)
                operator delete(v35);
            }
            else
            {
              v36 = ((_BYTE *)__src - (_BYTE *)v138) >> 3;
              if (v36 >= -1)
                v37 = v36 + 1;
              else
                v37 = v36 + 2;
              v38 = (char *)__src - 8 * (v37 >> 1);
              v39 = v33 - (_BYTE *)__src;
              if (v33 != __src)
              {
                memmove((char *)__src - 8 * (v37 >> 1), __src, v33 - (_BYTE *)__src);
                v33 = v34;
              }
              v40 = &v33[-8 * (v37 >> 1)];
              v33 = &v38[v39];
              v140 = &v38[v39];
              __src = v40;
            }
          }
          v49 = *v32++;
          *(_QWORD *)v33 = v49;
          v33 = v140 + 8;
          v140 += 8;
          v31 = *(uint64_t **)(v3 + 24);
        }
        v50 = *(void **)(v3 + 8);
        v51 = __src;
        *(_QWORD *)(v3 + 8) = v138;
        *(_QWORD *)(v3 + 16) = v51;
        v52 = v141;
        *(_QWORD *)(v3 + 24) = v33;
        *(_QWORD *)(v3 + 32) = v52;
        v53 = v33 - v51;
        if (v33 - v51 != 8)
          v53 = *(_QWORD *)(v3 + 40) + 16;
        *(_QWORD *)(v3 + 40) = v53;
        if (v50)
          operator delete(v50);
      }
      else
      {
        if (v24 == v28)
        {
          v138 = operator new(0x7880uLL);
          sub_18D189050((_QWORD *)(v3 + 8), &v138);
          v54 = *(_QWORD *)(v3 + 24);
          v138 = *(_QWORD **)(v54 - 8);
          *(_QWORD *)(v3 + 24) = v54 - 8;
        }
        else
        {
          v138 = operator new(0x7880uLL);
        }
        sub_18D188F3C(v3 + 8, &v138);
        v55 = *(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16);
        if (v55 != 8)
          v55 = *(_QWORD *)(v3 + 40) + 16;
        *(_QWORD *)(v3 + 40) = v55;
      }
    }
    else
    {
      *(_QWORD *)(v3 + 40) = 16;
      v138 = *(_QWORD **)(v25 - 8);
      *(_QWORD *)(v3 + 24) = v25 - 8;
      sub_18D188F3C(v3 + 8, &v138);
    }
    v20 = *(_QWORD *)(v3 + 40);
    v24 = *(_QWORD *)(v3 + 16);
  }
  v56 = (_QWORD *)(v24 + 8 * (v20 >> 4));
  v57 = *v56 + 1928 * (v20 & 0xF);
  if (*(_QWORD *)(v3 + 24) == v24)
    v58 = 0;
  else
    v58 = v57;
  if (v58 == *v56)
    v58 = *(v56 - 1) + 30848;
  memcpy((void *)(v58 - 1928), v132, 0x428uLL);
  *(double *)(v58 - 864) = v15;
  *(double *)(v58 - 856) = v16;
  memcpy((void *)(v58 - 848), __dst, 0x350uLL);
  v23 = *(_QWORD *)(v3 + 48) + 1;
  --*(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 48) = v23;
LABEL_73:
  memcpy(v132, v135, 0x428uLL);
  memcpy((char *)&v132[66] + 8, v136, 0x360uLL);
  v59 = *(char **)(v3 + 24);
  v60 = *(char **)(v3 + 16);
  if (v59 == v60)
    v61 = 0;
  else
    v61 = 2 * (v59 - v60) - 1;
  v62 = *(_QWORD *)(v3 + 40);
  v63 = v23 + v62;
  if (v61 == v23 + v62)
  {
    if (v62 >= 0x10)
    {
      *(_QWORD *)(v3 + 40) = v62 - 16;
      v66 = *(_QWORD *)v60;
      v64 = v60 + 8;
      v65 = v66;
      *(_QWORD *)(v3 + 16) = v64;
      if (v59 == *(char **)(v3 + 32))
      {
        v67 = (uint64_t)&v64[-*v4];
        if ((unint64_t)v64 > *v4)
        {
          v68 = v67 >> 3;
          v17 = v67 >> 3 < -1;
          v69 = (v67 >> 3) + 2;
          if (v17)
            v70 = v69;
          else
            v70 = v68 + 1;
          v71 = -(v70 >> 1);
          v72 = v70 >> 1;
          v73 = &v64[-8 * v72];
          v74 = v59 - v64;
          if (v59 != v64)
          {
            memmove(&v64[-8 * v72], v64, v59 - v64);
            v59 = *(char **)(v3 + 16);
          }
          v75 = &v59[8 * v71];
          v59 = &v73[v74];
          goto LABEL_86;
        }
        if (v59 == (char *)*v4)
          v102 = 1;
        else
          v102 = (uint64_t)&v59[-*v4] >> 2;
        v103 = (char *)sub_18D07BF3C(v102);
        v104 = &v103[8 * (v102 >> 2)];
        v106 = &v103[8 * v105];
        v107 = *(uint64_t **)(v3 + 16);
        v59 = v104;
        v108 = *(_QWORD *)(v3 + 24) - (_QWORD)v107;
        if (v108)
        {
          v59 = &v104[v108 & 0xFFFFFFFFFFFFFFF8];
          v109 = 8 * (v108 >> 3);
          v110 = &v103[8 * (v102 >> 2)];
          do
          {
            v111 = *v107++;
            *(_QWORD *)v110 = v111;
            v110 += 8;
            v109 -= 8;
          }
          while (v109);
        }
LABEL_119:
        v112 = *(void **)(v3 + 8);
        *(_QWORD *)(v3 + 8) = v103;
        *(_QWORD *)(v3 + 16) = v104;
        *(_QWORD *)(v3 + 24) = v59;
        *(_QWORD *)(v3 + 32) = v106;
        if (v112)
        {
          operator delete(v112);
          v59 = *(char **)(v3 + 24);
        }
      }
      goto LABEL_122;
    }
    v76 = (v59 - v60) >> 3;
    v77 = *(char **)(v3 + 32);
    v78 = *(char **)(v3 + 8);
    if (v76 >= (v77 - v78) >> 3)
    {
      if (v77 == v78)
        v79 = 1;
      else
        v79 = (v77 - v78) >> 2;
      __dst[4] = v3 + 32;
      v80 = sub_18D07BF3C(v79);
      __dst[2] = (uint64_t)v80 + 8 * v76;
      __dst[0] = (uint64_t)v80;
      __dst[1] = __dst[2];
      __dst[3] = (uint64_t)v80 + 8 * v81;
      v138 = operator new(0x7880uLL);
      sub_18D189050(__dst, &v138);
      v82 = (uint64_t *)__dst[1];
      v83 = __dst[0];
      v84 = __dst[2];
      v85 = __dst[3];
      v86 = *(_QWORD *)(v3 + 24);
      if (v86 == *(_QWORD *)(v3 + 16))
      {
        v101 = __dst[1];
      }
      else
      {
        do
        {
          if (v82 == (uint64_t *)v83)
          {
            if (v84 >= v85)
            {
              if ((uint64_t *)v85 == v82)
                v92 = 1;
              else
                v92 = (uint64_t)(v85 - (_QWORD)v82) >> 2;
              v93 = (char *)sub_18D07BF3C(v92);
              v83 = (uint64_t)v93;
              v87 = &v93[(2 * v92 + 6) & 0xFFFFFFFFFFFFFFF8];
              v95 = v84 - (_QWORD)v82;
              v44 = v84 == (_QWORD)v82;
              v84 = (unint64_t)v87;
              if (!v44)
              {
                v84 = (unint64_t)&v87[v95 & 0xFFFFFFFFFFFFFFF8];
                v96 = 8 * (v95 >> 3);
                v97 = v87;
                v98 = v82;
                do
                {
                  v99 = *v98++;
                  *(_QWORD *)v97 = v99;
                  v97 += 8;
                  v96 -= 8;
                }
                while (v96);
              }
              v85 = (unint64_t)&v93[8 * v94];
              if (v82)
                operator delete(v82);
            }
            else
            {
              v88 = (uint64_t)(v85 - v84) >> 3;
              if (v88 >= -1)
                v89 = v88 + 1;
              else
                v89 = v88 + 2;
              v90 = v89 >> 1;
              v87 = (char *)&v82[v89 >> 1];
              v91 = v82;
              if ((uint64_t *)v84 != v82)
              {
                memmove(v87, v82, v84 - (_QWORD)v82);
                v91 = (_QWORD *)v84;
              }
              v84 = (unint64_t)&v91[v90];
              v83 = (uint64_t)v82;
            }
          }
          else
          {
            v87 = (char *)v82;
          }
          v100 = *(_QWORD *)(v86 - 8);
          v86 -= 8;
          *((_QWORD *)v87 - 1) = v100;
          v101 = (uint64_t)(v87 - 8);
          v82 = (uint64_t *)v101;
        }
        while (v86 != *(_QWORD *)(v3 + 16));
      }
      v116 = *(void **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v83;
      *(_QWORD *)(v3 + 16) = v101;
      *(_QWORD *)(v3 + 24) = v84;
      *(_QWORD *)(v3 + 32) = v85;
      if (v116)
        operator delete(v116);
    }
    else if (v77 == v59)
    {
      __dst[0] = (uint64_t)operator new(0x7880uLL);
      sub_18D188F3C(v3 + 8, __dst);
      v113 = *(_QWORD **)(v3 + 16);
      v59 = *(char **)(v3 + 24);
      v115 = *v113;
      v114 = (char *)(v113 + 1);
      v65 = v115;
      *(_QWORD *)(v3 + 16) = v114;
      if (v59 == *(char **)(v3 + 32))
      {
        v117 = (uint64_t)&v114[-*v4];
        if ((unint64_t)v114 <= *v4)
        {
          if (v59 == (char *)*v4)
            v125 = 1;
          else
            v125 = (uint64_t)&v59[-*v4] >> 2;
          v103 = (char *)sub_18D07BF3C(v125);
          v104 = &v103[8 * (v125 >> 2)];
          v106 = &v103[8 * v126];
          v127 = *(uint64_t **)(v3 + 16);
          v59 = v104;
          v128 = *(_QWORD *)(v3 + 24) - (_QWORD)v127;
          if (v128)
          {
            v59 = &v104[v128 & 0xFFFFFFFFFFFFFFF8];
            v129 = 8 * (v128 >> 3);
            v130 = &v103[8 * (v125 >> 2)];
            do
            {
              v131 = *v127++;
              *(_QWORD *)v130 = v131;
              v130 += 8;
              v129 -= 8;
            }
            while (v129);
          }
          goto LABEL_119;
        }
        v118 = v117 >> 3;
        v17 = v117 >> 3 < -1;
        v119 = (v117 >> 3) + 2;
        if (v17)
          v120 = v119;
        else
          v120 = v118 + 1;
        v121 = -(v120 >> 1);
        v122 = v120 >> 1;
        v123 = &v114[-8 * v122];
        v124 = v59 - v114;
        if (v59 != v114)
        {
          memmove(&v114[-8 * v122], v114, v59 - v114);
          v114 = *(char **)(v3 + 16);
        }
        v59 = &v123[v124];
        v75 = &v114[8 * v121];
LABEL_86:
        *(_QWORD *)(v3 + 16) = v75;
        *(_QWORD *)(v3 + 24) = v59;
      }
LABEL_122:
      *(_QWORD *)v59 = v65;
      *(_QWORD *)(v3 + 24) += 8;
    }
    else
    {
      __dst[0] = (uint64_t)operator new(0x7880uLL);
      sub_18D189050((_QWORD *)(v3 + 8), __dst);
    }
    v60 = *(char **)(v3 + 16);
    v63 = *(_QWORD *)(v3 + 48) + *(_QWORD *)(v3 + 40);
  }
  result = (uint64_t)memcpy((void *)(*(_QWORD *)&v60[(v63 >> 1) & 0x7FFFFFFFFFFFFFF8] + 1928 * (v63 & 0xF)), v132, 0x788uLL);
  ++*(_QWORD *)(v3 + 48);
  return result;
}

void sub_18D04E8BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  if (STACK[0xF30])
    operator delete((void *)STACK[0xF30]);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenConvergenceEstimator::GetRavenSolution@<X0>(raven::RavenConvergenceEstimator *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  int64x2_t *v5;
  int64x2_t v6;
  char v7;
  char *v8;
  double *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double *v30;
  int v31;
  int v32;
  int i;
  __int128 v34;
  cnstatistics *v35;
  double v36;
  unsigned int v37;
  double *v38;
  __int128 v39;
  __int128 v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  double *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  double *v57;
  int v58;
  int v59;
  int j;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  _QWORD *v65;
  int64x2_t v66;
  void *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD v74[12];
  void *v75;
  __int128 v76;
  uint64_t v77;
  double *v78;
  _BYTE v79[17];
  void *v80;
  __int128 v81;
  uint64_t v82;
  _QWORD *v83;
  _BYTE v84[128];
  void *v85;
  __int128 v86;
  uint64_t v87;
  double *v88;
  _QWORD v89[12];
  _BYTE v90[40];
  uint64_t v91;
  void *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  double *v101;
  double v102[3];
  _BYTE v103[20];
  int v104;
  _QWORD *v105;
  void *v106;
  __int128 v107;
  uint64_t v108;
  double *v109;
  uint64_t v110;

  v4 = 0uLL;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  v5 = (int64x2_t *)(a2 + 264);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 96) = 0;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 104) = v6;
  *(int64x2_t *)(a2 + 120) = v6;
  *(int64x2_t *)(a2 + 136) = v6;
  *(int64x2_t *)(a2 + 152) = v6;
  *(_QWORD *)(a2 + 168) = 0x7FF8000000000000;
  *(_WORD *)(a2 + 176) = 0;
  *(int64x2_t *)(a2 + 184) = v6;
  *(int64x2_t *)(a2 + 200) = v6;
  *(int64x2_t *)(a2 + 216) = v6;
  *(int64x2_t *)(a2 + 232) = v6;
  *(int64x2_t *)(a2 + 248) = v6;
  *(int64x2_t *)(a2 + 264) = v6;
  *(int64x2_t *)(a2 + 280) = v6;
  *(_BYTE *)(a2 + 296) = 0;
  *(int64x2_t *)(a2 + 304) = v6;
  *(int64x2_t *)(a2 + 320) = v6;
  *(int64x2_t *)(a2 + 336) = v6;
  *(int64x2_t *)(a2 + 352) = v6;
  *(_QWORD *)(a2 + 368) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 376) = 0;
  *(int64x2_t *)(a2 + 384) = v6;
  *(int64x2_t *)(a2 + 400) = v6;
  *(int64x2_t *)(a2 + 416) = v6;
  *(int64x2_t *)(a2 + 432) = v6;
  *(_QWORD *)(a2 + 448) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 456) = 0;
  *(int64x2_t *)(a2 + 464) = v6;
  *(int64x2_t *)(a2 + 480) = v6;
  *(int64x2_t *)(a2 + 496) = v6;
  *(int64x2_t *)(a2 + 512) = v6;
  *(int64x2_t *)(a2 + 528) = v6;
  *(int64x2_t *)(a2 + 544) = v6;
  *(int64x2_t *)(a2 + 560) = v6;
  *(_BYTE *)(a2 + 576) = 0;
  *(int64x2_t *)(a2 + 584) = v6;
  *(int64x2_t *)(a2 + 600) = v6;
  *(int64x2_t *)(a2 + 616) = v6;
  *(int64x2_t *)(a2 + 632) = v6;
  *(_QWORD *)(a2 + 648) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 656) = 0;
  *(int64x2_t *)(a2 + 664) = v6;
  *(int64x2_t *)(a2 + 680) = v6;
  *(int64x2_t *)(a2 + 696) = v6;
  *(int64x2_t *)(a2 + 712) = v6;
  *(_QWORD *)(a2 + 728) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 736) = 0;
  *(int64x2_t *)(a2 + 744) = v6;
  *(int64x2_t *)(a2 + 760) = v6;
  *(int64x2_t *)(a2 + 776) = v6;
  *(int64x2_t *)(a2 + 792) = v6;
  *(_QWORD *)(a2 + 808) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 816) = 0;
  *(int64x2_t *)(a2 + 824) = v6;
  *(int64x2_t *)(a2 + 840) = v6;
  *(_QWORD *)(a2 + 856) = 0x7FF8000000000000;
  if (*((_BYTE *)this + 58)
    && (v66 = v6,
        v7 = (*(uint64_t (**)(raven::RavenConvergenceEstimator *))(*(_QWORD *)this + 144))(this),
        v4 = 0uLL,
        v6 = v66,
        (v7 & 1) != 0))
  {
    v108 = 0x100000008;
    v106 = &unk_1E25C86C0;
    v107 = xmmword_18D319940;
    v109 = (double *)&v110;
    if (*((_DWORD *)this + 1045))
      v8 = (char *)this + 3408;
    else
      v8 = (char *)this + 2648;
    sub_18D053AA8((uint64_t)&v106, (uint64_t)v8);
    sub_18D04F338((uint64_t)this + 2640, (uint64_t)v103);
    v17.i64[1] = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    v18 = *((int8x16_t *)this + 5);
    *(int8x16_t *)a2 = v18;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 96) = 1;
    v9 = v109;
    *(double *)(a2 + 104) = *v109;
    *(double *)(a2 + 112) = v9[1];
    *(double *)(a2 + 120) = v9[2];
    v10 = v105;
    *(_QWORD *)(a2 + 128) = *v105;
    v11 = v104;
    v12 = v104;
    *(_QWORD *)(a2 + 136) = v10[v104];
    v13 = 2 * v12;
    *(_QWORD *)(a2 + 144) = v10[2 * v12];
    v14 = v12 + 1;
    *(_QWORD *)(a2 + 152) = v10[v12 + 1];
    v15 = (2 * (int)v12) | 1;
    *(_QWORD *)(a2 + 160) = v10[v15];
    v16 = 2 * (int)v12 + 2;
    *(_QWORD *)(a2 + 168) = v10[v16];
    v17.i64[0] = (uint64_t)v9[3];
    v18.i64[0] = (uint64_t)v9[4];
    v19 = v9[5];
    v20 = sqrt(*(double *)v18.i64 * *(double *)v18.i64 + *(double *)v17.i64 * *(double *)v17.i64 + v19 * v19);
    if (fabs(v20) <= 0.000000015)
    {
      *(_BYTE *)(a2 + 176) = 1;
      *(_QWORD *)(a2 + 184) = 0;
      v44 = 3 * v11 + 3;
      LODWORD(v45) = 4 * v11;
      v46 = 4 * v11 + 4;
      LODWORD(v47) = 5 * v11;
      v48 = 5 * v11 + 5;
      *(double *)(a2 + 216) = *(double *)&v10[v44] + *(double *)&v10[v46] + *(double *)&v10[v48];
    }
    else
    {
      v21 = 1.0 / v20;
      v22 = *(double *)v17.i64 * (1.0 / v20);
      v23 = *(double *)v18.i64 * (1.0 / v20);
      v24 = v19 * (1.0 / v20);
      v100 = 0x300000001;
      v98 = &unk_1E25C6C20;
      v99 = xmmword_18D314670;
      v101 = v102;
      v102[0] = v22;
      v102[1] = v23;
      v102[2] = v24;
      v91 = 0x400000003;
      v94 = 0x100000003;
      v92 = &unk_1E25C77C0;
      v93 = xmmword_18D313070;
      v97 = 5;
      v95 = &v96;
      v96 = 0x400000003;
      sub_18D04F764((uint64_t)v90, (uint64_t)v103, (uint64_t)&v92, (uint64_t)&v92);
      v82 = 0x300000001;
      v80 = &unk_1E25C6C20;
      v81 = xmmword_18D314670;
      v83 = v84;
      sub_18D053B2C((uint64_t)&v98, (uint64_t)v90, (uint64_t)&v80);
      v25 = DWORD1(v99);
      v26 = v99;
      v87 = 0x100000003;
      v85 = &unk_1E25C7790;
      v88 = (double *)v89;
      *(_QWORD *)&v86 = __PAIR64__(v99, DWORD1(v99));
      DWORD2(v86) = v99 * DWORD1(v99);
      HIDWORD(v86) = DWORD1(v99);
      if (DWORD1(v99))
      {
        v27 = 0;
        v28 = 0;
        v29 = HIDWORD(v99);
        v30 = v101;
        do
        {
          v31 = v27;
          v32 = v28;
          for (i = v26; i; --i)
          {
            v89[v32] = *(_QWORD *)&v30[v31];
            v32 += v25;
            ++v31;
          }
          ++v28;
          v27 += v29;
        }
        while (v28 != v25);
      }
      v77 = 0x100000001;
      v75 = &unk_1E25C6A40;
      *(_QWORD *)&v34 = 0x100000001;
      *((_QWORD *)&v34 + 1) = 0x100000001;
      v76 = v34;
      v78 = (double *)v79;
      sub_18D053B2C((uint64_t)&v80, (uint64_t)&v85, (uint64_t)&v75);
      v36 = *v78;
      if (*((_BYTE *)this + 1208) && (v37 = *((unsigned __int8 *)this + 1320), v37 <= 7) && ((1 << v37) & 0xCE) != 0)
        v38 = (double *)(*((_QWORD *)this + 146) + 936);
      else
        v38 = (double *)(*((_QWORD *)this + 146) + 928);
      *(double *)v17.i64 = cnstatistics::InverseNormal(v35, 1.0 - *v38, 0.0, sqrt(v36));
      *(_BYTE *)(a2 + 176) = 1;
      if (v20 >= *(double *)v17.i64)
      {
        *(_BYTE *)(a2 + 177) = 1;
        *(double *)(a2 + 184) = v20;
        *(double *)(a2 + 192) = v22;
        *(double *)(a2 + 200) = v23;
        *(double *)(a2 + 208) = v24;
        v87 = 0x300000004;
        v85 = &unk_1E25C7F70;
        v88 = (double *)v89;
        v86 = xmmword_18D3130A0;
        sub_18D04BE88((uint64_t)&v85, 0.0);
        v49 = v88;
        *v88 = v22;
        v50 = SHIDWORD(v86);
        v49[SHIDWORD(v86)] = v23;
        v49[2 * v50] = v24;
        v49[1] = v21 * (1.0 - v22 * v22);
        v49[(int)v50 + 1] = v21 * -(v22 * v23);
        v51 = &v49[2 * (int)v50];
        v51[1] = v21 * -(v22 * v24);
        v49[2] = v21 * -(v23 * v22);
        v49[(int)v50 + 2] = v21 * (1.0 - v23 * v23);
        v51[2] = v21 * -(v23 * v24);
        v49[3] = v21 * -(v24 * v22);
        v49[(int)v50 + 3] = v21 * -(v24 * v23);
        v51[3] = v21 * (1.0 - v24 * v24);
        sub_18D04F764((uint64_t)v90, (uint64_t)v103, (uint64_t)&v92, (uint64_t)&v92);
        v77 = 0x300000004;
        v75 = &unk_1E25C7F70;
        v76 = xmmword_18D3130A0;
        v78 = (double *)v79;
        sub_18D053B2C((uint64_t)&v85, (uint64_t)v90, (uint64_t)&v75);
        v52 = DWORD1(v86);
        v53 = v86;
        v72 = 0x400000003;
        v67 = &unk_1E25C7940;
        v73 = v74;
        v68 = DWORD1(v86);
        v69 = v86;
        v70 = v86 * DWORD1(v86);
        v71 = DWORD1(v86);
        if (DWORD1(v86))
        {
          v54 = 0;
          v55 = 0;
          v56 = HIDWORD(v86);
          v57 = v88;
          do
          {
            v58 = v54;
            v59 = v55;
            for (j = v53; j; --j)
            {
              v74[v59] = *(_QWORD *)&v57[v58];
              v59 += v52;
              ++v58;
            }
            ++v55;
            v54 += v56;
          }
          while (v55 != v52);
        }
        v82 = 0x400000004;
        v80 = &unk_1E25C7FA0;
        v81 = xmmword_18D313080;
        v83 = v84;
        sub_18D053B2C((uint64_t)&v75, (uint64_t)&v67, (uint64_t)&v80);
        v61 = v83;
        *(_QWORD *)(a2 + 216) = *v83;
        v62 = SHIDWORD(v81);
        *(_QWORD *)(a2 + 224) = v61[SHIDWORD(v81)];
        *(_QWORD *)(a2 + 232) = v61[2 * v62];
        v63 = 3 * v62;
        *(_QWORD *)(a2 + 240) = v61[3 * (int)v62];
        *(_QWORD *)(a2 + 248) = v61[(int)v62 + 1];
        v64 = &v61[2 * (int)v62];
        *(_QWORD *)(a2 + 256) = v64[1];
        *(_QWORD *)(a2 + 264) = v61[v63 + 1];
        *(_QWORD *)(a2 + 272) = v64[2];
        *(_QWORD *)(a2 + 280) = v61[v63 + 2];
        *(_QWORD *)(a2 + 288) = v61[v63 + 3];
      }
      else
      {
        *(double *)(a2 + 184) = v20;
        *(double *)(a2 + 216) = v36;
      }
      v11 = v104;
      v12 = v104;
      v9 = v109;
      v10 = v105;
      v13 = 2 * v104;
      v14 = v104 + 1;
      v15 = (int)(v13 | 1);
      v16 = (int)v13 + 2;
      v44 = 3 * v104 + 3;
      v45 = 4 * v104;
      v47 = 5 * v104;
      v46 = v45 + 4;
      v48 = v47 + 5;
    }
    *(_BYTE *)(a2 + 296) = 1;
    *(double *)(a2 + 304) = *v9;
    *(double *)(a2 + 312) = v9[1];
    *(double *)(a2 + 320) = v9[2];
    *(_QWORD *)(a2 + 328) = *v10;
    *(_QWORD *)(a2 + 336) = v10[v12];
    *(_QWORD *)(a2 + 344) = v10[v13];
    *(_QWORD *)(a2 + 352) = v10[v14];
    *(_QWORD *)(a2 + 360) = v10[v15];
    *(_QWORD *)(a2 + 368) = v10[v16];
    *(_BYTE *)(a2 + 376) = 1;
    *(double *)(a2 + 384) = v9[3];
    *(double *)(a2 + 392) = v9[4];
    *(double *)(a2 + 400) = v9[5];
    *(_QWORD *)(a2 + 408) = v10[v44];
    *(_QWORD *)(a2 + 416) = v10[(int)(v45 | 3)];
    v65 = &v10[(int)v47];
    *(_QWORD *)(a2 + 424) = v65[3];
    *(_QWORD *)(a2 + 432) = v10[v46];
    *(_QWORD *)(a2 + 440) = v65[4];
    *(_QWORD *)(a2 + 448) = v10[v48];
    *(_BYTE *)(a2 + 456) = 0;
    *(_BYTE *)(a2 + 816) = 1;
    *(double *)(a2 + 824) = v9[6] * 0.000001;
    *(double *)(a2 + 832) = v9[7] * 0.000001;
    v18.i64[0] = 0x3D719799812DEA11;
    *(double *)(a2 + 840) = *(double *)&v10[6 * v11 + 6] * 1.0e-12;
    *(double *)(a2 + 848) = *(double *)&v10[7 * v11 + 6] * 1.0e-12;
    *(double *)v17.i64 = *(double *)&v10[7 * v11 + 7] * 1.0e-12;
    *(_QWORD *)(a2 + 856) = v17.i64[0];
    *(_BYTE *)(a2 + 576) = 0;
    *(_BYTE *)(a2 + 656) = 0;
    *(_BYTE *)(a2 + 736) = 0;
    return raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v17, v18);
  }
  else
  {
    *(_DWORD *)(a2 + 100) = 0;
    *(_DWORD *)(a2 + 97) = 0;
    *(_DWORD *)(a2 + 178) = 0;
    *(_WORD *)(a2 + 182) = 0;
    *(_DWORD *)(a2 + 300) = 0;
    *(_DWORD *)(a2 + 297) = 0;
    *(_DWORD *)(a2 + 380) = 0;
    *(_DWORD *)(a2 + 377) = 0;
    *(_DWORD *)(a2 + 460) = 0;
    *(_DWORD *)(a2 + 457) = 0;
    *(_DWORD *)(a2 + 580) = 0;
    *(_DWORD *)(a2 + 577) = 0;
    *(_DWORD *)(a2 + 660) = 0;
    *(_DWORD *)(a2 + 657) = 0;
    *(_DWORD *)(a2 + 740) = 0;
    *(_DWORD *)(a2 + 737) = 0;
    *(_DWORD *)(a2 + 820) = 0;
    *(_DWORD *)(a2 + 817) = 0;
    *(_OWORD *)(a2 + 48) = v4;
    *(_OWORD *)(a2 + 64) = v4;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v4;
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 96) = 0;
    *(int64x2_t *)(a2 + 104) = v6;
    *(int64x2_t *)(a2 + 120) = v6;
    *(int64x2_t *)(a2 + 136) = v6;
    *(int64x2_t *)(a2 + 152) = v6;
    *(_QWORD *)(a2 + 168) = 0x7FF8000000000000;
    *(_WORD *)(a2 + 176) = 0;
    *(int64x2_t *)(a2 + 184) = v6;
    *(int64x2_t *)(a2 + 200) = v6;
    *(int64x2_t *)(a2 + 216) = v6;
    *(int64x2_t *)(a2 + 232) = v6;
    *(int64x2_t *)(a2 + 248) = v6;
    *v5 = v6;
    v5[1] = v6;
    *(_BYTE *)(a2 + 296) = 0;
    *(int64x2_t *)(a2 + 304) = v6;
    *(int64x2_t *)(a2 + 320) = v6;
    *(int64x2_t *)(a2 + 336) = v6;
    *(int64x2_t *)(a2 + 352) = v6;
    *(_QWORD *)(a2 + 368) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 376) = 0;
    *(int64x2_t *)(a2 + 384) = v6;
    *(int64x2_t *)(a2 + 400) = v6;
    *(int64x2_t *)(a2 + 416) = v6;
    *(int64x2_t *)(a2 + 432) = v6;
    *(_QWORD *)(a2 + 448) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 456) = 0;
    *(int64x2_t *)(a2 + 464) = v6;
    *(int64x2_t *)(a2 + 480) = v6;
    *(int64x2_t *)(a2 + 496) = v6;
    *(int64x2_t *)(a2 + 512) = v6;
    *(int64x2_t *)(a2 + 528) = v6;
    *(int64x2_t *)(a2 + 544) = v6;
    *(int64x2_t *)(a2 + 560) = v6;
    *(_BYTE *)(a2 + 576) = 0;
    v5[20] = v6;
    v5[21] = v6;
    v5[22] = v6;
    v5[23] = v6;
    *(_QWORD *)(a2 + 648) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 656) = 0;
    v5[25] = v6;
    v5[26] = v6;
    v5[27] = v6;
    v5[28] = v6;
    *(_QWORD *)(a2 + 728) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 736) = 0;
    v5[30] = v6;
    v5[31] = v6;
    v5[32] = v6;
    v5[33] = v6;
    *(_QWORD *)(a2 + 808) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 816) = 0;
    v5[35] = v6;
    v5[36] = v6;
    *(_QWORD *)(a2 + 856) = 0x7FF8000000000000;
    v39 = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 136);
    *(_OWORD *)(a2 + 16) = v39;
    v40 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(a2 + 80) = v40;
    v41 = *(int8x16_t *)((char *)this + 184);
    v42 = *(int8x16_t *)((char *)this + 168);
    *(int8x16_t *)(a2 + 32) = v42;
    *(int8x16_t *)(a2 + 48) = v41;
    return raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v41, v42);
  }
}

__n128 sub_18D04F338@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  int i;
  __n128 result;
  void *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[33];
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v21 = 0x800000008;
  v19 = &unk_1E25C87E0;
  v20 = xmmword_18D319930;
  v22 = &v23;
  if (*(_DWORD *)(a1 + 1540))
    v3 = a1 + 872;
  else
    v3 = a1 + 112;
  v16 = 0x800000008;
  v14 = &unk_1E25C87E0;
  v15 = xmmword_18D319930;
  v17 = v18;
  v31 = 0x100000008;
  v29 = &unk_1E25C86F0;
  v30 = xmmword_18D319940;
  v32 = &v33;
  v26 = 0x100000020;
  v24 = &unk_1E25C7670;
  v25 = xmmword_18D319960;
  v27 = &v28;
  sub_18D04F504(v3, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v14);
  sub_18D053AA8((uint64_t)&v19, (uint64_t)&v14);
  v4 = DWORD1(v20);
  v5 = v20;
  v16 = 0x800000008;
  v14 = &unk_1E25C87E0;
  v17 = v18;
  *(_QWORD *)&v15 = __PAIR64__(v20, DWORD1(v20));
  DWORD2(v15) = v20 * DWORD1(v20);
  HIDWORD(v15) = DWORD1(v20);
  if (DWORD1(v20))
  {
    v6 = 0;
    v7 = 0;
    v8 = HIDWORD(v20);
    v9 = v22;
    do
    {
      v10 = v6;
      v11 = v7;
      for (i = v5; i; --i)
      {
        v18[v11] = v9[v10];
        v11 += v4;
        ++v10;
      }
      ++v7;
      v6 += v8;
    }
    while (v7 != v4);
  }
  *(_QWORD *)(a2 + 24) = 0x800000008;
  *(_QWORD *)a2 = &unk_1E25C87E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319930;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_18D053B2C((uint64_t)&v19, (uint64_t)&v14, a2);
  return result;
}

void sub_18D04F4F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D04F504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CLPK_doublereal *v14;
  __CLPK_integer v15;
  void *v16;
  size_t v17;
  __CLPK_integer *v18;
  __CLPK_integer *v19;
  __CLPK_integer v20;
  char *v21;
  __CLPK_doublereal *v22;
  __CLPK_integer v23;
  size_t v24;
  __CLPK_integer *v25;
  __CLPK_integer *v26;
  cnprint::CNPrinter *v27;
  __CLPK_integer v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __CLPK_integer __info;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  sub_18D053AA8(a4, a1);
  v12 = *(unsigned int *)(a4 + 8);
  v13 = *(unsigned int *)(a4 + 12);
  v14 = *(__CLPK_doublereal **)(a4 + 32);
  v15 = *(_DWORD *)(a4 + 20);
  v16 = *(void **)(a2 + 32);
  __n = *(_DWORD *)(a4 + 12);
  __m = v12;
  __lda = v15;
  if ((int)v12 < 1)
  {
    v20 = -1;
LABEL_8:
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    v35 = -v20;
    v21 = "Error using Inv: input argument %d invalid in getrf.";
    goto LABEL_9;
  }
  v17 = 4 * v12;
  v18 = (__CLPK_integer *)operator new[](4 * v12, MEMORY[0x1E0DE4E10]);
  if (!v18)
  {
    v20 = -5;
    goto LABEL_8;
  }
  v19 = v18;
  __info = 0;
  dgetrf_(&__m, &__n, v14, &__lda, v18, &__info);
  memcpy(v16, v19, v17);
  MEMORY[0x18D78B5BC](v19, 0x1000C8052888210);
  v20 = __info;
  if (!__info)
    goto LABEL_10;
  if (__info < 1)
    goto LABEL_8;
  LOWORD(__m) = 4;
  LOBYTE(__n) = 2;
  v21 = "Warning: matrix is singular to working precision.";
LABEL_9:
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, v21, v7, v8, v9, v10, v11, v35);
LABEL_10:
  v22 = *(__CLPK_doublereal **)(a3 + 32);
  v23 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __n = v15;
  __m = v13;
  if ((int)v13 < 1)
  {
    v28 = -1;
LABEL_16:
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Inv: input argument %d invalid in getri.", v7, v8, v9, v10, v11, -(char)v28);
    goto LABEL_17;
  }
  v24 = 4 * v13;
  v25 = (__CLPK_integer *)operator new[](v24, MEMORY[0x1E0DE4E10]);
  if (!v25)
  {
    v28 = -4;
    goto LABEL_16;
  }
  v26 = v25;
  memcpy(v25, v16, v24);
  __info = 0;
  __lda = v23;
  dgetri_(&__m, v14, &__n, v26, v22, &__lda, &__info);
  v27 = (cnprint::CNPrinter *)MEMORY[0x18D78B5BC](v26, 0x1000C8052888210);
  v28 = __info;
  if (__info < 0)
    goto LABEL_16;
LABEL_17:
  v29 = (int)**(double **)(a3 + 32);
  if (v23 < v29 && cnprint::CNPrinter::GetLogLevel(v27) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Inv optimal workspace size %d is greater than provided workspace size %d; performance may suffer.",
      v30,
      v31,
      v32,
      v33,
      v34,
      v29);
  }
  if (v28 >= 1)
    sub_18D04BE88(a4, INFINITY);
}

uint64_t sub_18D04F764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_OWORD *)(a1 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5060;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 144) = 0x100000003;
  *(_QWORD *)(a1 + 120) = &unk_1E25C77C0;
  *(_OWORD *)(a1 + 128) = xmmword_18D313070;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 200) = 0x100000003;
  *(_QWORD *)(a1 + 176) = &unk_1E25C77C0;
  *(_OWORD *)(a1 + 184) = xmmword_18D313070;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  sub_18D053D7C(a1 + 120, a3);
  sub_18D053D7C(a1 + 176, a4);
  v7 = *(unsigned int *)(a1 + 136);
  v8 = *(unsigned int *)(a1 + 192);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(a2 + 20);
    v12 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v13 = *(int **)(a1 + 152);
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v10) * v11;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v9;
        v17 = v7;
        do
        {
          v18 = *v13++;
          *(_QWORD *)(v15 + 8 * v16++) = *(_QWORD *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

double cnstatistics::InverseNormal(cnstatistics *this, double a2, double a3, double a4)
{
  double v4;
  BOOL v7;
  double v8;
  _BOOL4 v10;
  unint64_t v11;
  double v12;
  BOOL v13;

  if (a4 <= 0.0)
    return NAN;
  v4 = NAN;
  if (a2 < 0.0 || a2 > 1.0)
    return v4;
  if (fabs(a2) < 2.22044605e-16)
  {
    v7 = a3 == INFINITY;
    v8 = -INFINITY;
    goto LABEL_9;
  }
  if (fabs(a2 + -1.0) < 2.22044605e-16)
  {
    v7 = a3 == -INFINITY;
    v8 = INFINITY;
LABEL_9:
    v4 = NAN;
    if (!v7)
      return v8;
    return v4;
  }
  v10 = fabs(a4) == INFINITY;
  if (fabs(a3) != INFINITY)
  {
    if (v10)
    {
      if (a2 >= 0.5)
      {
        if (a2 <= 0.5)
        {
LABEL_29:
          v11 = 0x7FF8000000000000;
          return *(double *)&v11;
        }
        v11 = 0x7FF0000000000000;
        return *(double *)&v11;
      }
LABEL_19:
      v11 = 0xFFF0000000000000;
      return *(double *)&v11;
    }
LABEL_20:
    sub_18D04FA08(a2 + a2);
    return a3 + a4 * (v12 * -1.41421356);
  }
  if (!v10)
    goto LABEL_20;
  if (a2 < 0.5)
  {
    if (a3 > 0.0)
      goto LABEL_29;
    goto LABEL_19;
  }
  v13 = a3 < 0.0 || a2 <= 0.5;
  v4 = NAN;
  if (!v13)
    return INFINITY;
  return v4;
}

void sub_18D04FA08(double a1)
{
  double v3;
  double v4;
  double v5;
  double v6[2];

  v6[1] = a1;
  if (a1 < 0.0 || a1 > 2.0)
    sub_18D15A994((char *)qword_1EE061408, "Argument outside range [0,2] in inverse erfc function (got p=%1%).");
  if (a1 == 0.0)
    sub_18D15B780((char *)qword_1EE061408, "Overflow Error");
  if (a1 == 2.0)
    sub_18D15B780((char *)qword_1EE061408, "Overflow Error");
  v3 = 2.0 - a1;
  if (a1 <= 1.0)
    v3 = a1;
  v5 = v3;
  v6[0] = 1.0 - v3;
  sub_18D04FB18(v6, &v5);
  if (fabs(v4) > 1.79769313e308)
    sub_18D15B780((char *)qword_1EE061408, "numeric overflow");
}

void sub_18D04FB18(double *a1, long double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  if (*a1 > 0.5)
  {
    v2 = *a2;
    v3 = log(*a2);
    if (v2 < 0.25)
    {
      v4 = sqrt(-v3);
      if (v4 >= 3.0 && v4 >= 6.0 && v4 >= 18.0)
      {
        if (v4 >= 44.0)
        {
          v5 = v4 + -44.0;
          sub_18D15BD68(xmmword_18D3139C8, &v5);
          sub_18D15BD24(dbl_18D313A08, &v5);
        }
        else
        {
          v5 = v4 + -18.0;
          sub_18D15BD68(xmmword_18D313950, &v5);
          sub_18D15BD24(dbl_18D313990, &v5);
        }
      }
    }
  }
}

uint64_t raven::RavenConvergenceEstimator::GetRavenStatus@<X0>(raven::RavenConvergenceEstimator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  int v40;
  int v41;
  cnprint::CNPrinter *v42;
  int v43;
  char v44;
  __int128 v45;
  __int128 v46;
  int8x16_t v47;
  int8x16_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v57;
  __int16 v58[8];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v4 = a2 + 8;
  *(_QWORD *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_WORD *)(a2 + 160) = 0;
  *(int64x2_t *)(a2 + 960) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a2 + 976) = 0;
  *(_QWORD *)(a2 + 984) = 0x7FF8000000000000;
  v5 = a2 + 164;
  bzero((void *)(a2 + 164), 0x318uLL);
  *(_BYTE *)a2 = *((_BYTE *)this + 280);
  v12 = *((unsigned __int8 *)this + 56);
  *(_WORD *)(a2 + 104) = v12;
  if (*((_BYTE *)this + 58))
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    v13 = *((_OWORD *)this + 5);
    *(_QWORD *)(v4 + 80) = 0;
    *(_OWORD *)v4 = v13;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)(a2 + 96) = 0x7FF8000000000000;
    sub_18D0515C4((double *)a2, v12, 1.0, v6, v7, v8, v9, v10, v11);
    *(_OWORD *)(a2 + 136) = *((_OWORD *)this + 16);
    *(_QWORD *)(a2 + 152) = *((_QWORD *)this + 34);
    v14 = *(_OWORD *)((char *)this + 440);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)((char *)this + 424);
    *(_OWORD *)(v5 + 112) = v14;
    *(_DWORD *)(v5 + 128) = *((_DWORD *)this + 114);
    v15 = *(_OWORD *)((char *)this + 376);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)((char *)this + 360);
    *(_OWORD *)(v5 + 48) = v15;
    v16 = *(_OWORD *)((char *)this + 408);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)((char *)this + 392);
    *(_OWORD *)(v5 + 80) = v16;
    v17 = *(_OWORD *)((char *)this + 344);
    *(_OWORD *)v5 = *(_OWORD *)((char *)this + 328);
    *(_OWORD *)(v5 + 16) = v17;
    v18 = *(_OWORD *)((char *)this + 572);
    *(_OWORD *)(a2 + 392) = *(_OWORD *)((char *)this + 556);
    *(_OWORD *)(a2 + 408) = v18;
    *(_DWORD *)(a2 + 424) = *((_DWORD *)this + 147);
    v19 = *(_OWORD *)((char *)this + 508);
    *(_OWORD *)(a2 + 328) = *(_OWORD *)((char *)this + 492);
    *(_OWORD *)(a2 + 344) = v19;
    v20 = *(_OWORD *)((char *)this + 540);
    *(_OWORD *)(a2 + 360) = *(_OWORD *)((char *)this + 524);
    *(_OWORD *)(a2 + 376) = v20;
    v21 = *(_OWORD *)((char *)this + 476);
    *(_OWORD *)(a2 + 296) = *(_OWORD *)((char *)this + 460);
    *(_OWORD *)(a2 + 312) = v21;
    v22 = *((_OWORD *)this + 44);
    *(_OWORD *)(a2 + 524) = *((_OWORD *)this + 43);
    *(_OWORD *)(a2 + 540) = v22;
    *(_DWORD *)(a2 + 556) = *((_DWORD *)this + 180);
    v23 = *((_OWORD *)this + 40);
    *(_OWORD *)(a2 + 460) = *((_OWORD *)this + 39);
    *(_OWORD *)(a2 + 476) = v23;
    v24 = *((_OWORD *)this + 42);
    *(_OWORD *)(a2 + 492) = *((_OWORD *)this + 41);
    *(_OWORD *)(a2 + 508) = v24;
    v25 = *((_OWORD *)this + 38);
    *(_OWORD *)(a2 + 428) = *((_OWORD *)this + 37);
    *(_OWORD *)(a2 + 444) = v25;
    v26 = *(_OWORD *)((char *)this + 836);
    *(_OWORD *)(a2 + 656) = *(_OWORD *)((char *)this + 820);
    *(_OWORD *)(a2 + 672) = v26;
    *(_DWORD *)(a2 + 688) = *((_DWORD *)this + 213);
    v27 = *(_OWORD *)((char *)this + 772);
    *(_OWORD *)(a2 + 592) = *(_OWORD *)((char *)this + 756);
    *(_OWORD *)(a2 + 608) = v27;
    v28 = *(_OWORD *)((char *)this + 804);
    *(_OWORD *)(a2 + 624) = *(_OWORD *)((char *)this + 788);
    *(_OWORD *)(a2 + 640) = v28;
    v29 = *(_OWORD *)((char *)this + 740);
    *(_OWORD *)(a2 + 560) = *(_OWORD *)((char *)this + 724);
    *(_OWORD *)(a2 + 576) = v29;
    v30 = *(_OWORD *)((char *)this + 968);
    *(_OWORD *)(a2 + 788) = *(_OWORD *)((char *)this + 952);
    *(_OWORD *)(a2 + 804) = v30;
    *(_DWORD *)(a2 + 820) = *((_DWORD *)this + 246);
    v31 = *(_OWORD *)((char *)this + 904);
    *(_OWORD *)(a2 + 724) = *(_OWORD *)((char *)this + 888);
    *(_OWORD *)(a2 + 740) = v31;
    v32 = *(_OWORD *)((char *)this + 936);
    *(_OWORD *)(a2 + 756) = *(_OWORD *)((char *)this + 920);
    *(_OWORD *)(a2 + 772) = v32;
    v33 = *(_OWORD *)((char *)this + 872);
    *(_OWORD *)(a2 + 692) = *(_OWORD *)((char *)this + 856);
    *(_OWORD *)(a2 + 708) = v33;
    v34 = *(_OWORD *)((char *)this + 1100);
    *(_OWORD *)(a2 + 920) = *(_OWORD *)((char *)this + 1084);
    *(_OWORD *)(a2 + 936) = v34;
    *(_DWORD *)(a2 + 952) = *((_DWORD *)this + 279);
    v35 = *(_OWORD *)((char *)this + 1036);
    *(_OWORD *)(a2 + 856) = *(_OWORD *)((char *)this + 1020);
    *(_OWORD *)(a2 + 872) = v35;
    v36 = *(_OWORD *)((char *)this + 1068);
    *(_OWORD *)(a2 + 888) = *(_OWORD *)((char *)this + 1052);
    *(_OWORD *)(a2 + 904) = v36;
    v38 = *(int8x16_t *)((char *)this + 988);
    v37 = *(int8x16_t *)((char *)this + 1004);
    *(int8x16_t *)(a2 + 824) = v38;
    *(int8x16_t *)(a2 + 840) = v37;
    *(_QWORD *)(a2 + 120) = CNTimeSpan::operator-((uint64_t)this + 80, (_QWORD *)this + 8, v37, v38);
    *(_QWORD *)(a2 + 128) = v39;
    v40 = (*(uint64_t (**)(raven::RavenConvergenceEstimator *))(*(_QWORD *)this + 152))(this);
    v41 = (*(uint64_t (**)(raven::RavenConvergenceEstimator *))(*(_QWORD *)this + 144))(this);
    v42 = (cnprint::CNPrinter *)(*(uint64_t (**)(raven::RavenConvergenceEstimator *))(*(_QWORD *)this + 136))(this);
    v43 = (int)v42;
    if (v41 && v40 && (v42 & 1) != 0)
    {
      v44 = 2;
    }
    else
    {
      v44 = 1;
      if (cnprint::CNPrinter::GetLogLevel(v42) <= 1)
      {
        v58[0] = 12;
        v57 = 1;
        v49 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Estimator unhealthy,observable,%d,sane,%d,consistent,%d", v41, v40, v43);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v55) = v49;
        else
          v55 = *((_QWORD *)this + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v58, &v57, "%s", v50, v51, v52, v53, v54, v55);
      }
    }
    *(_BYTE *)(a2 + 105) = v44;
    *(double *)(a2 + 112) = 1.0
                          - (*(double (**)(raven::RavenConvergenceEstimator *))(*(_QWORD *)this + 56))(this);
    *(_WORD *)(a2 + 160) = 0;
    *(double *)(a2 + 992) = raven::RavenEstimator::GetPriorWeight(this);
    *(double *)(a2 + 1000) = raven::RavenEstimator::GetGNSSWeight(this);
    *(double *)(a2 + 1008) = raven::RavenEstimator::GetWiFiWeight(this);
    *(double *)(a2 + 1016) = raven::RavenEstimator::GetCellWeight(this);
    *(double *)(a2 + 1024) = raven::RavenEstimator::GetIndoorWeight(this);
    *(double *)(a2 + 1032) = raven::RavenEstimator::GetAccessoryWeight(this);
    v48.i64[0] = *((_QWORD *)this + 40);
    *(_QWORD *)(a2 + 976) = *((_QWORD *)this + 39);
    *(_QWORD *)(a2 + 968) = *((_QWORD *)this + 1017);
    v47.i64[0] = *((_QWORD *)this + 1019);
    *(_QWORD *)(a2 + 960) = v47.i64[0];
    *(_QWORD *)(a2 + 984) = v48.i64[0];
  }
  else
  {
    v45 = *(_OWORD *)((char *)this + 184);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)(v4 + 48) = v45;
    v46 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(v4 + 80) = v46;
    v47 = *(int8x16_t *)((char *)this + 136);
    v48 = *(int8x16_t *)((char *)this + 152);
    *(int8x16_t *)v4 = v47;
    *(int8x16_t *)(v4 + 16) = v48;
  }
  return raven::PopulateAllTimeFields(v4, (uint64_t)this + 136, v47, v48);
}

uint64_t raven::RavenConvergenceEstimator::IsObservable(raven::RavenConvergenceEstimator *this)
{
  char v1;
  char *v3;
  int v4;
  double v5;
  uint64_t v6;
  double v7;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[69];
  void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  v1 = *((_BYTE *)this + 58);
  if (!v1)
    return v1 & 1;
  v3 = (char *)this + 4176;
  v4 = *((unsigned __int8 *)this + 4176);
  if (v4 == 2)
  {
    v1 = 1;
    return v1 & 1;
  }
  if (v4 == 1)
  {
LABEL_18:
    v1 = 0;
    return v1 & 1;
  }
  if (*((_BYTE *)this + 4176))
  {
    LOWORD(v38) = 2;
    LOBYTE(v33) = 5;
    v9 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 543, "LeastSquaresEstimator::IsObservable called with unexpected observability state %hhu", v4);
    if (v3[191] >= 0)
      LOBYTE(v15) = v9;
    else
      v15 = *((_QWORD *)this + 543);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, (unsigned __int8 *)&v33, "%s", v10, v11, v12, v13, v14, v15);
    goto LABEL_18;
  }
  (*(void (**)(_QWORD *__return_ptr, char *))(*((_QWORD *)this + 330) + 40))(v17, (char *)this + 2640);
  v40 = 0x800000008;
  v38 = &unk_1E25C87E0;
  v39 = xmmword_18D319930;
  v41 = &v42;
  v35 = 0x800000008;
  v33 = &unk_1E25C87E0;
  v34 = xmmword_18D319930;
  v36 = &v37;
  v30 = 0x100000008;
  v28 = &unk_1E25C86F0;
  v29 = xmmword_18D319940;
  v31 = &v32;
  v25 = 0x100000650;
  v23 = &off_1E25C62F0;
  v27 = 0;
  v26 = 0;
  v24 = xmmword_18D331E50;
  sub_18D24F59C((uint64_t)&v23);
  v26 = v27;
  v20 = 0x100000008;
  v18 = &unk_1E25C86C0;
  v19 = xmmword_18D319940;
  v21 = &v22;
  v5 = sub_18D186C18(v17, (uint64_t)&v38, (uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v23, (uint64_t)&v18, "2");
  v6 = v27;
  v23 = &off_1E25C62F0;
  v27 = 0;
  if (v6)
    MEMORY[0x18D78B5BC](v6, 0x1000C8000313F17);
  v1 = 0;
  v7 = *((double *)this + 531);
  v8 = 1;
  if (v7 >= 1.0 && v5 > 0.0)
  {
    v1 = v5 <= v7;
    if (v5 > v7)
      v8 = 1;
    else
      v8 = 2;
  }
  *v3 = v8;
  return v1 & 1;
}

void sub_18D05063C(_Unwind_Exception *a1)
{
  unint64_t v1;
  unint64_t v3;

  v3 = STACK[0x2E0];
  STACK[0x2B8] = v1;
  STACK[0x2E0] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenConvergenceEstimator::IsSane(raven::RavenConvergenceEstimator *this)
{
  char *v2;
  char *v3;
  cnprint::CNPrinter *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  float64x2_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int64x2_t v22;
  double v23;
  BOOL v24;
  cnprint::CNPrinter *v25;
  double v26;
  double v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  double v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  float64x2_t v45;
  int64x2_t v46;
  unsigned __int8 v47;
  _OWORD v48[5];
  uint64_t v49;
  uint64_t v50;
  char v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  uint64_t v56;
  __int16 v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t v63;
  int64x2_t v64;
  uint64_t v65;
  char v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  uint64_t v71;
  char v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  uint64_t v77;
  char v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  char v86;
  uint64_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  char v92;
  uint64_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  char v98;
  uint64_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  char v104;
  uint64_t v105;
  int64x2_t v106;
  int64x2_t v107;
  __int16 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int16 v120;
  _BYTE v121[812];
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  void *v129;
  __int128 v130;
  uint64_t v131;
  double *v132;
  uint64_t v133;
  __int128 v134;
  _OWORD v135[4];
  double v136[2];
  double v137;
  float64x2_t v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 58))
    return 0;
  v2 = (char *)this + 80;
  v134 = *((_OWORD *)this + 5);
  v131 = 0x100000008;
  v129 = &unk_1E25C86C0;
  v130 = xmmword_18D319940;
  v132 = (double *)&v133;
  if (*((_DWORD *)this + 1045))
    v3 = (char *)this + 3408;
  else
    v3 = (char *)this + 2648;
  sub_18D053AA8((uint64_t)&v129, (uint64_t)v3);
  v5 = v132[3];
  v6 = v132[4];
  v7 = v132[5];
  v8 = sqrt(v6 * v6 + v5 * v5 + v7 * v7);
  if (v8 > *(double *)(*((_QWORD *)v2 + 136) + 1376))
  {
    if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
    {
      v108 = 12;
      LOBYTE(v48[0]) = 1;
      v9 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v2, "Sanity failure,speed,%.1lf > %.1lf", v8, *(double *)(*((_QWORD *)this + 146) + 1376));
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v15) = (_BYTE)v9;
      else
        v15 = *v9;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v108, (unsigned __int8 *)v48, "%s", v10, v11, v12, v13, v14, v15);
    }
    return 0;
  }
  v17 = *(float64x2_t *)v132;
  v18 = *((_QWORD *)v132 + 2);
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0;
  v115 = 0x7FF8000000000000;
  v116 = 0;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0;
  v45 = v17;
  v46 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)&v121[796] = v46;
  v122 = 0;
  v123 = 0x7FF8000000000000;
  LOBYTE(v108) = 0;
  bzero(v121, 0x318uLL);
  memset(v48, 0, sizeof(v48));
  v49 = 0;
  v50 = 0x7FF8000000000000;
  v51 = 0;
  v52 = v46;
  v53 = v46;
  v54 = v46;
  v55 = v46;
  v56 = 0x7FF8000000000000;
  v57 = 0;
  v58 = v46;
  v59 = v46;
  v60 = v46;
  v61 = v46;
  v62 = v46;
  v63 = 0x7FF8000000000000;
  v64 = v46;
  v65 = 0x7FF8000000000000;
  v66 = 0;
  v67 = v46;
  v68 = v46;
  v69 = v46;
  v70 = v46;
  v71 = 0x7FF8000000000000;
  v72 = 0;
  v73 = v46;
  v74 = v46;
  v75 = v46;
  v76 = v46;
  v77 = 0x7FF8000000000000;
  v78 = 0;
  v79 = v46;
  v80 = v46;
  v81 = v46;
  v82 = v46;
  v83 = v46;
  v84 = v46;
  v85 = v46;
  v86 = 0;
  v87 = 0x7FF8000000000000;
  v88 = v46;
  v89 = v46;
  v90 = v46;
  v91 = v46;
  v92 = 0;
  v93 = 0x7FF8000000000000;
  v94 = v46;
  v95 = v46;
  v96 = v46;
  v97 = v46;
  v98 = 0;
  v99 = 0x7FF8000000000000;
  v100 = v46;
  v101 = v46;
  v102 = v46;
  v103 = v46;
  v104 = 0;
  v105 = 0x7FF8000000000000;
  v106 = v46;
  v107 = v46;
  if (!raven::RavenEstimator::GetValidHistoricalSolution((uint64_t)this, &v108, (uint64_t)v48, *(double *)v46.i64, v19)&& HIBYTE(v116) == 2&& v72)
  {
    v21 = (int8x16_t)v48[0];
    v135[0] = v48[0];
    v22 = v73;
    v23 = *(double *)v74.i64;
    if ((_QWORD)v134
      || (v21.i64[0] = *((_QWORD *)&v134 + 1), (*((_QWORD *)&v134 + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
    {
      if (!*(_QWORD *)&v135[0])
      {
        v21.i64[0] = *((_QWORD *)&v135[0] + 1);
        if ((*((_QWORD *)&v135[0] + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v20.i64[0] = *((_QWORD *)&v134 + 1);
          if (*((double *)&v134 + 1) <= *((double *)v135 + 1))
            goto LABEL_31;
          goto LABEL_24;
        }
      }
      v24 = (uint64_t)v134 <= *(_QWORD *)&v135[0];
      if ((_QWORD)v134 != *(_QWORD *)&v135[0])
      {
LABEL_23:
        if (v24)
          goto LABEL_31;
LABEL_24:
        v25 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v134, v135, v21, v20);
        v27 = sqrt((v6 - *(double *)&v22.i64[1]) * (v6 - *(double *)&v22.i64[1])+ (v5 - *(double *)v22.i64) * (v5 - *(double *)v22.i64)+ (v7 - v23) * (v7 - v23))/ (v26 + (double)(uint64_t)v25);
        if (v27 > *(double *)(*((_QWORD *)this + 146) + 1384))
        {
          if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
          {
            LOWORD(v138.f64[0]) = 12;
            LOBYTE(v136[0]) = 1;
            v28 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v2, "Sanity failure,acceleration,%.1lf > %.1lf", v27, *(double *)(*((_QWORD *)this + 146) + 1384));
            if (*((char *)this + 2511) >= 0)
              LOBYTE(v34) = v28;
            else
              v34 = *((_QWORD *)this + 311);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v138, (unsigned __int8 *)v136, "%s", v29, v30, v31, v32, v33, v34);
          }
          return 0;
        }
        goto LABEL_31;
      }
      v21.i64[0] = *((_QWORD *)&v134 + 1);
    }
    v20.i64[0] = *((_QWORD *)&v135[0] + 1);
    v24 = *(double *)v21.i64 <= *((double *)v135 + 1);
    goto LABEL_23;
  }
LABEL_31:
  v138 = v45;
  v139 = v18;
  v35 = cnnavigation::ECEFToLLA(&v138, 1, v136, 0, (uint64_t)v135);
  result = 0;
  if (!v35)
  {
    v36 = v137;
    if (v137 <= 18000.0)
    {
      if (v8 <= 600.0)
        return 1;
      if (cnprint::CNPrinter::GetLogLevel(0) > 1)
        return 0;
      LOWORD(v135[0]) = 12;
      v47 = 1;
      v44 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v2, "Sanity failure,speed,%.1lf > %.1lf", v8, 600.0);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v43) = v44;
      else
        v43 = *((_QWORD *)this + 311);
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(0) > 1)
        return 0;
      LOWORD(v135[0]) = 12;
      v47 = 1;
      v37 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v2, "Sanity failure,altitude,%.1lf > %.1lf", v36, 18000.0);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v43) = v37;
      else
        v43 = *((_QWORD *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v135, &v47, "%s", v38, v39, v40, v41, v42, v43);
    return 0;
  }
  return result;
}

uint64_t cnnavigation::ECEFToLLA(float64x2_t *a1, int a2, double *a3, int a4, uint64_t a5)
{
  float64x2_t v5;
  long double v6;
  long double v7;
  double v8;
  double v9;
  uint64_t v13;
  double v14;
  int v15;
  int v16;
  double v17;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  long double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  double v31;
  uint64_t v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  long double v39;
  __double2 v41;
  long double v42;
  long double v43;
  float64_t v44;
  long double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  long double v50;
  long double v51;
  long double v52;
  long double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  long double v57;
  double v58;
  double v59;
  double v60;
  float64x2_t v61;
  long double v62;
  double v63;
  double __x;
  uint64_t __xa;

  v5 = *a1;
  v6 = a1[1].f64[0];
  v7 = a1->f64[1];
  v8 = vmlad_n_f64(vmuld_lane_f64(v7, *a1, 1), v5.f64[0], v5.f64[0]);
  v9 = sqrt(v8 + v6 * v6);
  if (v9 <= 0.00000001)
    return 1;
  v13 = 2;
  if (a2 == 1)
  {
    v19 = sqrt(v8);
    v20 = v6 / v19;
    v21 = fabs(v6 / v19);
    if (v6 >= 0.0)
      v22 = 1;
    else
      v22 = 2;
    if (v21 >= 100000000.0)
      v23 = v22;
    else
      v23 = 0;
    *(double *)&__xa = v19;
    v59 = v9;
    v61 = *a1;
    if (v21 >= 100000000.0)
    {
      if (v6 <= 0.0)
      {
        if (v6 >= 0.0)
          v25 = 0.0;
        else
          v25 = -1.57079633;
      }
      else
      {
        v25 = 1.57079633;
      }
    }
    else
    {
      v24 = atan2(v6, v19);
      v5.f64[0] = v61.f64[0];
      v25 = v24;
    }
    v30 = atan2(v7, v5.f64[0]);
    v31 = 6378137.0;
    if ((v23 - 1) >= 2)
    {
      if (v23)
      {
        v13 = 0xFFFFFFFFLL;
        v35 = 0.0;
        *(double *)&v32 = v59;
      }
      else
      {
        v58 = v30;
        v33 = -10;
        v34 = 0.0;
        v35 = INFINITY;
        v31 = 6378137.0;
        v36 = INFINITY;
        while (1)
        {
          v37 = v35;
          v35 = v34;
          v38 = v25;
          if (vabdd_f64(v34, v37) <= 0.0005 && vabdd_f64(v25, v36) <= 7.9e-11)
            break;
          v39 = sin(v25);
          v31 = 6378137.0 / sqrt(v39 * -0.00669437999 * v39 + 1.0);
          v25 = atan(v6 / (*(double *)&__xa * (v31 * -0.00669437999 / (v35 + v31) + 1.0)));
          v34 = *(double *)&__xa / cos(v25) - v31;
          v36 = v38;
          if (__CFADD__(v33++, 1))
          {
            v13 = 0;
            v35 = v34;
            goto LABEL_59;
          }
        }
        v13 = 0;
LABEL_59:
        *(double *)&v32 = v59;
        v30 = v58;
      }
    }
    else
    {
      *(double *)&v32 = v59;
      if (v6 <= 0.0)
      {
        if (v6 >= 0.0)
          v25 = 0.0;
        else
          v25 = -1.57079633;
      }
      else
      {
        v25 = 1.57079633;
      }
      v13 = 0;
      v35 = v59 + -6356752.31;
      v30 = 0.0;
    }
    *a3 = v25;
    a3[1] = v30;
    a3[2] = v35;
    if (a4)
    {
      if ((v23 - 1) >= 2)
      {
        if (v23)
        {
          return 0xFFFFFFFFLL;
        }
        else
        {
          v41 = __sincos_stret(v25);
          v63 = tan(v25);
          v42 = v41.__cosval
              * (v41.__sinval
               * 42697.6727)
              * pow(v41.__sinval * -0.00669437999 * v41.__sinval + 1.0, -1.5);
          v43 = *(double *)&__xa * v41.__sinval / (v41.__cosval * v41.__cosval) - v42;
          v44 = v61.f64[0] / (*(double *)&__xa * v41.__cosval);
          v45 = v7 / (*(double *)&__xa * v41.__cosval);
          v46 = v31 / (v31 + v35);
          v47 = v46 * -0.00669437999 + 1.0;
          v48 = v20 * 0.00669437999 / (v47 * v47);
          v49 = -(v48 * v46) / (v31 + v35);
          v50 = v63 * v63 + 1.0 - (v49 * v43 + v35 * v48 / ((v31 + v35) * (v31 + v35)) * v42);
          v51 = (v44 * v49 + -v61.f64[0] / *(double *)&__xa * v48 / (*(double *)&__xa * 0.00669437999) * v47) / v50;
          v52 = 1.0 / (*(double *)&__xa * v47) / v50;
          *(long double *)(a5 + 16) = v52;
          v53 = v43 * v52;
          v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v61.f64[0], 0);
          v54.f64[0] = -v7;
          v55 = (float64x2_t)vdupq_lane_s64(__xa, 0);
          v56 = vdivq_f64(v54, v55);
          v57 = (v45 * v49 + v48 * v56.f64[0] / (*(double *)&__xa * 0.00669437999) * v47) / v50;
          *(long double *)a5 = v51;
          *(long double *)(a5 + 8) = v57;
          *(long double *)(a5 + 48) = v44 + v43 * v51;
          *(long double *)(a5 + 56) = v45 + v43 * v57;
          *(long double *)(a5 + 64) = v53;
          *(float64x2_t *)(a5 + 24) = vdivq_f64(v56, v55);
          *(_QWORD *)(a5 + 40) = 0;
        }
      }
      else
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        *(float64x2_t *)(a5 + 48) = vdivq_f64(v61, (float64x2_t)vdupq_lane_s64(v32, 0));
        *(long double *)(a5 + 64) = v6 / *(double *)&v32;
        *(_QWORD *)(a5 + 32) = 0;
        *(_QWORD *)(a5 + 40) = 0;
      }
    }
    return v13;
  }
  if (a2)
    return v13;
  __x = sqrt(v8);
  v14 = fabs(v6 / __x);
  if (v6 >= 0.0)
    v15 = 1;
  else
    v15 = 2;
  if (v14 >= 100000000.0)
    v16 = v15;
  else
    v16 = 0;
  if ((v16 - 1) < 2)
  {
    if (v6 <= 0.0)
    {
      v17 = -1.57079633;
      if (v6 >= 0.0)
        v17 = 0.0;
    }
    else
    {
      v17 = 1.57079633;
    }
    *a3 = v17;
    v26 = 0.0;
LABEL_32:
    v13 = 0;
    a3[1] = v26;
    a3[2] = v9 + -6371009.0;
    if (a4)
      goto LABEL_33;
    return v13;
  }
  if (!v16)
  {
    v60 = v9;
    v62 = a1->f64[0];
    *a3 = atan2(v6, __x);
    v26 = atan2(v7, v62);
    v9 = v60;
    v5.f64[0] = v62;
    goto LABEL_32;
  }
  v13 = 0xFFFFFFFFLL;
  if (a4)
  {
LABEL_33:
    if ((v16 - 1) >= 2)
    {
      if (!v16)
      {
        v27 = v6 / v9;
        *(long double *)a5 = -v5.f64[0] / v9 * (v6 / v9) / __x;
        *(long double *)(a5 + 8) = -v7 / v9 * (v6 / v9) / __x;
        v28.f64[0] = v9;
        v28.f64[1] = __x;
        v29.f64[0] = __x;
        v29.f64[1] = -v7;
        *(float64x2_t *)(a5 + 16) = vdivq_f64(vdivq_f64(v29, v28), v28);
        *(double *)(a5 + 32) = v5.f64[0] / __x / __x;
        *(_QWORD *)(a5 + 40) = 0;
LABEL_57:
        *(double *)(a5 + 48) = v5.f64[0] / v9;
        *(long double *)(a5 + 56) = v7 / v9;
        *(double *)(a5 + 64) = v27;
        return v13;
      }
      v13 = 0xFFFFFFFFLL;
    }
    else
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
    }
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
    v27 = v6 / v9;
    goto LABEL_57;
  }
  return v13;
}

double raven::RavenConvergenceEstimator::GetFailureProbability(raven::RavenConvergenceEstimator *this)
{
  uint64_t v1;

  v1 = 16;
  if (!*((_DWORD *)this + 2072))
    v1 = 8;
  return *(double *)((char *)this + v1 + 8264);
}

uint64_t raven::RavenConvergenceEstimator::IsConsistent(raven::RavenConvergenceEstimator *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int16 v14;

  if (!*((_BYTE *)this + 58))
    return 1;
  v2 = (char *)this + 8264;
  v3 = 16;
  if (!*((_DWORD *)this + 2072))
    v3 = 8;
  if (*(double *)&v2[v3] < *(double *)(*((_QWORD *)this + 146) + 1464))
    return 1;
  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v14 = 12;
    v13 = 1;
    v5 = 16;
    if (!*((_DWORD *)this + 2072))
      v5 = 8;
    v6 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "consistency failure,%.1lf > %.1lf", *(double *)&v2[v5], *(double *)(*((_QWORD *)this + 146) + 1464));
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
  }
  return 0;
}

uint64_t raven::RavenEstimator::GetValidHistoricalSolution(uint64_t a1, void *a2, uint64_t a3, double a4, int8x16_t a5)
{
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  BOOL v18;
  BOOL v19;
  uint64_t v21[2];
  _OWORD __dst[53];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 57) || !*(_BYTE *)(a1 + 58) || !*(_QWORD *)(a1 + 48))
    return 0xFFFFFFFFLL;
  __dst[0] = *(_OWORD *)(a1 + 80);
  v8.i64[1] = *((_QWORD *)&__dst[0] + 1);
  v8.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 1416);
  v21[0] = 0;
  v21[1] = 0;
  CNTimeSpan::SetTimeSpan(v21, 0, v8, a5);
  v11 = CNTimeSpan::operator-((uint64_t)__dst, v21, v9, v10);
  v13 = v12;
  v14 = v12;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + ((*(_QWORD *)(a1 + 40) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 1928 * (*(_QWORD *)(a1 + 40) & 0xFLL);
  v16 = *(_QWORD *)(v15 + 1064);
  v17 = *(double *)(v15 + 1072);
  memcpy(__dst, (const void *)(v15 + 1080), sizeof(__dst));
  if (v16)
    v18 = 1;
  else
    v18 = (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (!v18
    || !v11 && (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (v19 = v16 <= v11, v16 == v11))
  {
    v19 = v17 <= v14;
  }
  if (!v19)
    return 0xFFFFFFFFLL;
  memmove(a2, (const void *)v15, 0x428uLL);
  *(_QWORD *)a3 = v16;
  *(double *)(a3 + 8) = v17;
  memcpy((void *)(a3 + 16), __dst, 0x350uLL);
  return 0;
}

double raven::RavenEstimator::GetAccessoryWeight(raven::RavenEstimator *this)
{
  double result;
  double v2;

  result = 0.0;
  if (*((_BYTE *)this + 58))
  {
    v2 = *((double *)this + 145);
    if (fabs(v2) >= 2.22044605e-16)
      return v2
           / (v2
            + *((double *)this + 140)
            + *((double *)this + 141)
            + *((double *)this + 142)
            + *((double *)this + 143)
            + *((double *)this + 144));
  }
  return result;
}

double raven::RavenEstimator::GetIndoorWeight(raven::RavenEstimator *this)
{
  double result;
  double v2;

  result = 0.0;
  if (*((_BYTE *)this + 58))
  {
    v2 = *((double *)this + 144);
    if (fabs(v2) >= 2.22044605e-16)
      return v2
           / (*((double *)this + 145)
            + v2
            + *((double *)this + 140)
            + *((double *)this + 141)
            + *((double *)this + 142)
            + *((double *)this + 143));
  }
  return result;
}

double raven::RavenEstimator::GetPriorWeight(raven::RavenEstimator *this)
{
  double v1;
  double result;

  if (!*((_BYTE *)this + 58))
    return 1.0;
  v1 = *((double *)this + 140);
  result = 0.0;
  if (fabs(v1) >= 2.22044605e-16)
    return v1
         / (v1
          + *((double *)this + 141)
          + *((double *)this + 142)
          + *((double *)this + 143)
          + *((double *)this + 144)
          + *((double *)this + 145));
  return result;
}

double raven::RavenEstimator::GetWiFiWeight(raven::RavenEstimator *this)
{
  double result;
  double v2;

  result = 0.0;
  if (*((_BYTE *)this + 58))
  {
    v2 = *((double *)this + 142);
    if (fabs(v2) >= 2.22044605e-16)
      return v2
           / (*((double *)this + 145)
            + *((double *)this + 144)
            + *((double *)this + 143)
            + v2
            + *((double *)this + 140)
            + *((double *)this + 141));
  }
  return result;
}

double raven::RavenEstimator::GetGNSSWeight(raven::RavenEstimator *this)
{
  double result;
  double v2;

  result = 0.0;
  if (*((_BYTE *)this + 58))
  {
    v2 = *((double *)this + 141);
    if (fabs(v2) >= 2.22044605e-16)
      return v2
           / (v2
            + *((double *)this + 140)
            + *((double *)this + 142)
            + *((double *)this + 143)
            + *((double *)this + 144)
            + *((double *)this + 145));
  }
  return result;
}

double raven::RavenEstimator::GetCellWeight(raven::RavenEstimator *this)
{
  double result;
  double v2;

  result = 0.0;
  if (*((_BYTE *)this + 58))
  {
    v2 = *((double *)this + 143);
    if (fabs(v2) >= 2.22044605e-16)
      return v2
           / (*((double *)this + 145)
            + *((double *)this + 144)
            + v2
            + *((double *)this + 140)
            + *((double *)this + 141)
            + *((double *)this + 142));
  }
  return result;
}

uint64_t sub_18D0515C4(double *a1, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  unsigned __int8 v11;
  __int16 v12;

  switch(a2)
  {
    case 3:
      result = 0;
      a1[132] = a3;
      break;
    case 2:
      result = 0;
      a1[131] = a3;
      break;
    case 1:
      result = 0;
      a1[130] = a3;
      break;
    default:
      v12 = 12;
      v11 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "Error: Invalid raven estimator type, %d", a5, a6, a7, a8, a9, a2);
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_18D05164C(uint64_t a1, double a2, double a3)
{
  __double2 v5;
  __double2 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = __sincos_stret(a2);
  v6 = __sincos_stret(a3);
  v7 = *(_QWORD *)(a1 + 48);
  *(double *)v7 = -v6.__sinval;
  v8 = *(int *)(a1 + 36);
  *(double *)(v7 + 8 * v8) = -(v6.__cosval * v5.__sinval);
  *(double *)(v7 + 16 * v8) = v5.__cosval * v6.__cosval;
  *(double *)(v7 + 8) = v6.__cosval;
  *(double *)(v7 + 8 * ((int)v8 + 1)) = -(v6.__sinval * v5.__sinval);
  v9 = v7 + 16 * (_DWORD)v8;
  *(double *)(v9 + 8) = v5.__cosval * v6.__sinval;
  *(_QWORD *)(v7 + 16) = 0;
  *(double *)(v7 + 8 * ((int)v8 + 2)) = v5.__cosval;
  *(double *)(v9 + 16) = v5.__sinval;
  *(_BYTE *)(a1 + 8) = 1;
  return 1;
}

uint64_t sub_18D0516F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int *v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int *v72;
  _DWORD *v73;
  int v74;
  unsigned int (*v75)(void **, void **, _QWORD, void **, void **, void **);
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  int v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int *v115;
  _DWORD *v116;
  int v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int *v128;
  _DWORD *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  int *v141;
  _DWORD *v142;
  int v143;
  uint64_t v144;
  char v145;
  __int128 v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  int *v154;
  _DWORD *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  uint64_t *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  char v168;
  __int128 v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  int i;
  int v175;
  char v176;
  __int128 v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int j;
  int v183;
  uint64_t result;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __n128 *v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  void *v222;
  __int128 v223;
  uint64_t v224;
  _DWORD *v225;
  _DWORD v226[512];
  void *v227;
  __int128 v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  void *v232;
  __int128 v233;
  uint64_t v234;
  _BYTE *v235;
  _BYTE v236[512];
  void *v237;
  __int128 v238;
  uint64_t v239;
  _DWORD *v240;
  _DWORD v241[128];
  void *v242;
  __int128 v243;
  uint64_t v244;
  _BYTE *v245;
  _BYTE v246[512];
  void *v247;
  __int128 v248;
  uint64_t v249;
  _BYTE *v250;
  _BYTE v251[512];
  void *v252;
  __int128 v253;
  uint64_t v254;
  _DWORD *v255;
  _DWORD v256[128];
  void *v257;
  __int128 v258;
  uint64_t v259;
  _DWORD *v260;
  _DWORD v261[512];
  void *v262;
  __int128 v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  void *v267;
  __int128 v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  void *v272;
  __int128 v273;
  uint64_t v274;
  _BYTE *v275;
  _BYTE v276[512];
  void *v277;
  __int128 v278;
  uint64_t v279;
  _BYTE *v280;
  _BYTE v281[512];
  void *v282;
  __int128 v283;
  uint64_t v284;
  _BYTE *v285;
  _BYTE v286[512];
  _BYTE v287[104];
  void *v288;
  __int128 v289;
  uint64_t v290;
  _BYTE *v291;
  _BYTE v292[512];
  _BYTE v293[104];
  void *v294;
  __int128 v295;
  uint64_t v296;
  int *v297;
  uint64_t v298;
  void *v299;
  __int128 v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  _BYTE v304[32];
  uint64_t v305;
  _BYTE v306[32];
  uint64_t v307;
  _BYTE v308[32];
  uint64_t v309;
  void *v310;
  _BYTE v311[24];
  _DWORD *v312;
  _DWORD v313[514];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v208 = v4;
  v210 = v3;
  v211 = v5;
  v7 = v6;
  v8 = (__n128 *)v2;
  if (!*(_DWORD *)(v2 + 1540))
  {
    sub_18D053AA8(v2 + 768, v2 + 8);
    sub_18D053AA8((uint64_t)&v8[54].n128_i64[1], (uint64_t)&v8[7]);
    sub_18D053AA8((uint64_t)&v8[89], (uint64_t)&v8[41].n128_i64[1]);
  }
  v9 = *(unsigned int *)(v7 + 8);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_231;
  v10 = v8[48].n128_u32[2];
  v204 = v8;
  v11 = v8[48].n128_u32[3];
  if (v10 <= v11)
    v12 = v8[48].n128_u32[3];
  else
    v12 = v8[48].n128_u32[2];
  if (v11)
    v13 = v10 == 0;
  else
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = v12;
  v219 = 0x100000008;
  v214 = &unk_1E25C86C0;
  v220 = &v221;
  v215 = v9;
  v216 = 1;
  v217 = v9;
  v218 = v9;
  sub_18D04BE88((uint64_t)&v214, 0.0);
  v15 = *(_DWORD *)(v210 + 8);
  v16 = *(_DWORD *)(v210 + 12);
  if (v15 <= v16)
    v17 = *(_DWORD *)(v210 + 12);
  else
    v17 = *(_DWORD *)(v210 + 8);
  if (v16)
    v18 = v15 == 0;
  else
    v18 = 1;
  if (v18)
    v19 = 0;
  else
    v19 = v17;
  sub_18D054040(":", v211, 0, (uint64_t)&v257);
  v312 = v313;
  v20 = DWORD1(v258);
  *(_DWORD *)v311 = 1;
  *(_DWORD *)&v311[4] = DWORD1(v258);
  *(_DWORD *)&v311[20] = 1;
  *(_DWORD *)&v311[8] = DWORD1(v258);
  *(_QWORD *)&v311[12] = 0x200000001;
  if (DWORD1(v258))
  {
    v21 = 0;
    v22 = v260;
    v23 = v258;
    v24 = v258 - 1;
    v25 = 1;
    do
    {
      v26 = v22[v23 * v21];
      v27 = v25;
      v28 = v24;
      if (v23 >= 2)
      {
        do
        {
          v26 += v22[v27++];
          --v28;
        }
        while (v28);
      }
      v313[v21++] = v26;
      v25 += v23;
    }
    while (v21 != v20);
  }
  v212 = (uint64_t)&v8[48];
  sub_18D054040(":", v211, 1, (uint64_t)&v257);
  v312 = v313;
  v29 = DWORD1(v258);
  *(_DWORD *)v311 = 1;
  *(_DWORD *)&v311[4] = DWORD1(v258);
  *(_DWORD *)&v311[20] = 1;
  *(_DWORD *)&v311[8] = DWORD1(v258);
  *(_QWORD *)&v311[12] = 0x200000001;
  if (DWORD1(v258))
  {
    v30 = 0;
    v31 = v260;
    v32 = v258;
    v33 = v258 - 1;
    v34 = 1;
    do
    {
      v35 = v31[v32 * v30];
      v36 = v34;
      v37 = v33;
      if (v32 >= 2)
      {
        do
        {
          v35 += v31[v36++];
          --v37;
        }
        while (v37);
      }
      v313[v30++] = v35;
      v34 += v32;
    }
    while (v30 != v29);
  }
  v38 = v8[189].n128_f64[0];
  v206 = v8[190].n128_u8[9];
  if (!v8[48].n128_u32[2] || !v8[48].n128_u32[3])
  {
    if ((v14 & 0x80000000) == 0)
    {
      *(_QWORD *)&v311[16] = 0x100000008;
      v310 = &unk_1E25C86C0;
      v312 = v313;
      *(_DWORD *)v311 = v14;
      *(_DWORD *)&v311[4] = 1;
      *(_DWORD *)&v311[8] = v14;
      *(_DWORD *)&v311[12] = v14;
      sub_18D04BE88((uint64_t)&v310, 0.0);
      sub_18D053AA8(v212, (uint64_t)&v310);
      goto LABEL_36;
    }
LABEL_231:
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
LABEL_36:
  v39 = (uint64_t)&v8[54].n128_i64[1];
  if (!v8[55].n128_u32[0] || !v8[55].n128_u32[1])
  {
    if ((v14 & 0x80000000) != 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    *(_QWORD *)&v311[16] = 0x800000008;
    v310 = &unk_1E25C87E0;
    v312 = v313;
    *(_DWORD *)v311 = v14;
    *(_DWORD *)&v311[4] = v14;
    *(_DWORD *)&v311[8] = v14 * v14;
    *(_DWORD *)&v311[12] = v14;
    sub_18D04BE88((uint64_t)&v310, 0.0);
    sub_18D053AA8((uint64_t)&v8[54].n128_i64[1], (uint64_t)&v310);
  }
  v40 = (uint64_t)&v8[89];
  if (!v8[89].n128_u32[2] || !v8[89].n128_u32[3])
  {
    *(_QWORD *)&v311[16] = 0x100000008;
    v310 = &unk_1E25C86C0;
    *(_OWORD *)v311 = xmmword_18D319940;
    v312 = v313;
    sub_18D053B2C(v39, v212, (uint64_t)&v310);
    sub_18D053AA8(v40, (uint64_t)&v310);
  }
  if ((v14 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  *(_QWORD *)&v311[16] = 0x800000008;
  v310 = &unk_1E25C87E0;
  v312 = v313;
  *(_DWORD *)v311 = v9;
  *(_DWORD *)&v311[4] = v14;
  v198 = v14 * v9;
  *(_DWORD *)&v311[8] = v14 * v9;
  *(_DWORD *)&v311[12] = v9;
  sub_18D04BE88((uint64_t)&v310, 0.0);
  v197 = (uint64_t)&v8[109].n128_i64[1];
  sub_18D053AA8((uint64_t)&v8[109].n128_i64[1], (uint64_t)&v310);
  *(_QWORD *)&v311[16] = 0x100000008;
  v310 = &unk_1E25C86C0;
  v312 = v313;
  *(_DWORD *)v311 = v9;
  *(_DWORD *)&v311[4] = 1;
  *(_DWORD *)&v311[8] = v9;
  *(_DWORD *)&v311[12] = v9;
  sub_18D04BE88((uint64_t)&v310, 0.0);
  v196 = (uint64_t)&v8[144];
  sub_18D053AA8((uint64_t)&v8[144], (uint64_t)&v310);
  v195 = (uint64_t)&v8[150].n128_i64[1];
  sub_18D053AA8((uint64_t)&v8[150].n128_i64[1], v7);
  v8[96].n128_u32[1] = 1;
  v41 = (__n128)vdupq_lane_s32((int32x2_t)(v14 | 0x100000000), 0);
  v41.n128_u32[1] = 1;
  v8[1] = v41;
  sub_18D054B00((uint64_t)v308, v19, 1, v41);
  sub_18D0542CC((uint64_t)v306, v19, 1, v42);
  v207 = v14;
  v201 = v9;
  sub_18D0542CC((uint64_t)v304, v19, 1, v43);
  v202 = (uint64_t)&v8->n128_i64[1];
  v301 = 0x100000008;
  v299 = &unk_1E25C86F0;
  v300 = xmmword_18D319940;
  v302 = &v303;
  v296 = 0x100000008;
  v294 = &unk_1E25C86F0;
  v295 = xmmword_18D319940;
  v297 = (int *)&v298;
  v203 = v7;
  v213 = v19;
  if ((int)v19 < 1)
  {
LABEL_88:
    if (v206)
      v83 = v19;
    else
      v83 = 1;
    v200 = v83;
    sub_18D054198((uint64_t)v293, v212);
    sub_18D0549D0((uint64_t)&v288, v39);
    v84 = v14;
    sub_18D054198((uint64_t)v287, v40);
    LODWORD(v85) = v201;
    v204[110].n128_u64[1] = 0;
    v204[110].n128_u64[0] = 0;
    v204[145].n128_u64[0] = 0;
    v204[144].n128_u64[1] = 0;
    v204[151].n128_u64[1] = 0;
    v204[151].n128_u64[0] = 0;
    v284 = 0x800000008;
    v282 = &unk_1E25C87E0;
    v283 = xmmword_18D319930;
    v285 = v286;
    v279 = 0x800000008;
    v277 = &unk_1E25C87E0;
    v280 = v281;
    LODWORD(v278) = v14;
    DWORD1(v278) = v14;
    DWORD2(v278) = v278 * v278;
    HIDWORD(v278) = v14;
    sub_18D04BE88((uint64_t)&v277, 0.0);
    if ((_DWORD)v14)
    {
      v86 = 0;
      v87 = HIDWORD(v278) + 1;
      v88 = v280;
      v89 = v14;
      do
      {
        *(_QWORD *)&v88[8 * v86] = 0x3FF0000000000000;
        v86 += v87;
        --v89;
      }
      while (v89);
    }
    v274 = 0x800000008;
    v272 = &unk_1E25C87E0;
    v273 = xmmword_18D319930;
    v275 = v276;
    v269 = 0x100000008;
    v267 = &unk_1E25C86C0;
    v268 = xmmword_18D319940;
    v270 = &v271;
    v264 = 0x100000008;
    v262 = &unk_1E25C86C0;
    v263 = xmmword_18D319940;
    v265 = &v266;
    if ((int)v200 < 1)
    {
LABEL_216:
      sub_18D053AA8((uint64_t)&v204[7], (uint64_t)&v288);
      sub_18D053AA8((uint64_t)&v204[41].n128_i64[1], (uint64_t)v287);
      result = 0;
      v204[96].n128_u32[1] = 0;
      goto LABEL_222;
    }
    v90 = 0;
    v91 = 0;
    v209 = 0;
    v92 = v207;
    while (1)
    {
      if (v206)
      {
        if (v209)
        {
          if ((v92 & 0x80000000) != 0)
            __assert_rtn("Eye", "cnmatrix.h", 2094, "n >= 0");
          v259 = 0x800000008;
          v257 = &unk_1E25C87E0;
          v260 = v261;
          LODWORD(v258) = v92;
          DWORD1(v258) = v92;
          DWORD2(v258) = v92 * v92;
          HIDWORD(v258) = v92;
          v93 = v92;
          sub_18D04BE88((uint64_t)&v257, 0.0);
          if (v93)
          {
            v94 = 0;
            v95 = HIDWORD(v258) + 1;
            v96 = v260;
            v97 = v93;
            do
            {
              *(_QWORD *)&v96[2 * v94] = 0x3FF0000000000000;
              v94 += v95;
              --v97;
            }
            while (v97);
          }
          sub_18D053C48((uint64_t)&v310, (uint64_t)&v277, (uint64_t)&v299, (uint64_t)&v299);
          sub_18D053EBC((uint64_t)&v310, (uint64_t)&v257);
          v7 = v203;
        }
        v98 = *(unsigned int *)(*(_QWORD *)(v211 + 32) + 4 * v209);
        v224 = 0x800000001;
        v222 = &unk_1E25C6E30;
        v225 = v226;
        if ((_DWORD)v98 == 1)
        {
          v99 = 0;
          *(_QWORD *)&v100 = 0x100000001;
          *((_QWORD *)&v100 + 1) = 0x100000001;
          v223 = v100;
          v226[0] = 0;
          v101 = 1;
          LODWORD(v98) = 1;
        }
        else if ((int)v98 <= 0)
        {
          v101 = 0;
          LODWORD(v98) = 0;
          v223 = 0uLL;
          v99 = 1;
        }
        else
        {
          v135 = 0;
          LODWORD(v223) = 1;
          DWORD1(v223) = v98;
          *((_QWORD *)&v223 + 1) = v98 | 0x100000000;
          do
          {
            v226[v135] = v135;
            ++v135;
          }
          while (v98 != v135);
          v99 = 0;
          v101 = 1;
        }
        v259 = 0x100000008;
        v257 = &unk_1E25C86F0;
        v260 = v261;
        *(_QWORD *)&v258 = __PAIR64__(v101, v98);
        DWORD2(v258) = v98 * v101;
        HIDWORD(v258) = v98;
        if ((_DWORD)v98)
        {
          v136 = 0;
          v137 = 0;
          do
          {
            if ((v99 & 1) == 0)
            {
              v138 = 0;
              do
              {
                v261[v137 + HIDWORD(v258) * v138] = v226[v136 + v138];
                ++v138;
              }
              while (v101 != v138);
            }
            ++v137;
            v136 += v101;
          }
          while (v137 != (_DWORD)v98);
          v139 = v258;
          v101 = DWORD1(v258);
        }
        else
        {
          v139 = 0;
        }
        *(_QWORD *)&v311[16] = 0x100000008;
        v310 = &unk_1E25C86F0;
        v312 = v313;
        *(_DWORD *)v311 = v139;
        *(_DWORD *)&v311[4] = v101;
        v140 = (v139 * v101);
        *(_DWORD *)&v311[8] = v140;
        *(_DWORD *)&v311[12] = v139;
        if ((int)v140 >= 1)
        {
          v141 = v261;
          v142 = v313;
          do
          {
            v143 = *v141++;
            *v142++ = v143 + v91;
            --v140;
          }
          while (v140);
        }
        sub_18D053D7C((uint64_t)&v299, (uint64_t)&v310);
        v144 = *(unsigned int *)(*(_QWORD *)(v211 + 32) + 4 * (*(_DWORD *)(v211 + 20) + (int)v209));
        v224 = 0x800000001;
        v222 = &unk_1E25C6E30;
        v225 = v226;
        if ((_DWORD)v144 == 1)
        {
          v145 = 0;
          *(_QWORD *)&v146 = 0x100000001;
          *((_QWORD *)&v146 + 1) = 0x100000001;
          v223 = v146;
          v226[0] = 0;
          v147 = 1;
          LODWORD(v144) = 1;
        }
        else if ((int)v144 <= 0)
        {
          v147 = 0;
          LODWORD(v144) = 0;
          v223 = 0uLL;
          v145 = 1;
        }
        else
        {
          v148 = 0;
          LODWORD(v223) = 1;
          DWORD1(v223) = v144;
          *((_QWORD *)&v223 + 1) = v144 | 0x100000000;
          do
          {
            v226[v148] = v148;
            ++v148;
          }
          while (v144 != v148);
          v145 = 0;
          v147 = 1;
        }
        v259 = 0x100000008;
        v257 = &unk_1E25C86F0;
        v260 = v261;
        *(_QWORD *)&v258 = __PAIR64__(v147, v144);
        DWORD2(v258) = v144 * v147;
        HIDWORD(v258) = v144;
        if ((_DWORD)v144)
        {
          v149 = 0;
          v150 = 0;
          do
          {
            if ((v145 & 1) == 0)
            {
              v151 = 0;
              do
              {
                v261[v150 + HIDWORD(v258) * v151] = v226[v149 + v151];
                ++v151;
              }
              while (v147 != v151);
            }
            ++v150;
            v149 += v147;
          }
          while (v150 != (_DWORD)v144);
          v152 = v258;
          v147 = DWORD1(v258);
        }
        else
        {
          v152 = 0;
        }
        *(_QWORD *)&v311[16] = 0x100000008;
        v310 = &unk_1E25C86F0;
        v312 = v313;
        *(_DWORD *)v311 = v152;
        *(_DWORD *)&v311[4] = v147;
        v153 = (v152 * v147);
        *(_DWORD *)&v311[8] = v153;
        *(_DWORD *)&v311[12] = v152;
        if ((int)v153 >= 1)
        {
          v154 = v261;
          v155 = v313;
          do
          {
            v156 = *v154++;
            *v155++ = v156 + v90;
            --v153;
          }
          while (v153);
        }
        sub_18D053D7C((uint64_t)&v294, (uint64_t)&v310);
        sub_18D1CE204(v7, (uint64_t)&v294, (uint64_t)&v294, (uint64_t)&v310);
        sub_18D053AA8((uint64_t)&v282, (uint64_t)&v310);
        v157 = *(_QWORD *)(v211 + 32);
        v133 = *(_DWORD *)(v157 + 4 * (*(_DWORD *)(v211 + 20) + (int)v209));
        v205 = *(_DWORD *)(v157 + 4 * v209);
        v158 = v307;
        sub_18D053C48((uint64_t)&v310, (uint64_t)&v277, (uint64_t)&v299, (uint64_t)&v299);
        sub_18D053EBC((uint64_t)&v310, v158 + 552 * v209);
        if ((v133 & 0x80000000) != 0)
          __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
        *(_QWORD *)&v311[16] = 0x800000008;
        v310 = &unk_1E25C87E0;
        v102 = v133 * v207;
        v312 = v313;
        *(_DWORD *)v311 = v207;
        *(_DWORD *)&v311[4] = v133;
        *(_DWORD *)&v311[8] = v133 * v207;
        *(_DWORD *)&v311[12] = v207;
        sub_18D04BE88((uint64_t)&v310, 0.0);
        sub_18D053AA8((uint64_t)&v272, (uint64_t)&v310);
        v159 = v305;
        sub_18D1CE298(":", (uint64_t)&v272, (uint64_t)&v299, (uint64_t)&v310);
        sub_18D053EBC((uint64_t)&v310, v159 + 552 * v209);
        sub_18D053AA8((uint64_t)&v267, (uint64_t)v293);
        v160 = v309;
        sub_18D053E04((uint64_t)&v310, (uint64_t)&v267, (uint64_t)&v299);
        sub_18D05495C((uint64_t)&v310, v160 + 104 * v209);
        v161 = (DWORD1(v295) * v295);
        *(_QWORD *)&v311[16] = 0x100000008;
        v310 = &unk_1E25C86C0;
        *(_QWORD *)v311 = v295;
        *(_DWORD *)&v311[8] = v161;
        *(_DWORD *)&v311[12] = v295;
        v312 = v313;
        if ((_DWORD)v161)
        {
          v162 = v297;
          v163 = v220;
          v164 = v313;
          do
          {
            v165 = *v162++;
            *v164++ = v163[v165];
            --v161;
          }
          while (v161);
        }
        sub_18D053AA8((uint64_t)&v262, (uint64_t)&v310);
        v166 = *(_QWORD *)(v211 + 32);
        v91 += *(_DWORD *)(v166 + 4 * v209);
        v90 += *(_DWORD *)(v166 + 4 * (*(_DWORD *)(v211 + 20) + (int)v209));
        v134 = v207;
      }
      else
      {
        sub_18D053AA8((uint64_t)&v282, v7);
        *(_QWORD *)&v311[16] = 0x800000008;
        v310 = &unk_1E25C87E0;
        v312 = v313;
        *(_DWORD *)v311 = v84;
        *(_DWORD *)&v311[4] = v85;
        v102 = v198;
        *(_DWORD *)&v311[8] = v198;
        *(_DWORD *)&v311[12] = v84;
        sub_18D04BE88((uint64_t)&v310, 0.0);
        sub_18D053AA8((uint64_t)&v272, (uint64_t)&v310);
        sub_18D053AA8((uint64_t)&v267, v202);
        sub_18D053AA8((uint64_t)&v262, (uint64_t)&v214);
        if ((int)v213 < 1)
        {
          v134 = v84;
          v133 = v85;
        }
        else
        {
          v103 = 0;
          v104 = *(_QWORD *)(v211 + 32);
          do
          {
            v105 = *(unsigned int *)(v104 + 4 * v103);
            v224 = 0x800000001;
            v222 = &unk_1E25C6E30;
            v225 = v226;
            if ((_DWORD)v105 == 1)
            {
              v106 = 0;
              *(_QWORD *)&v107 = 0x100000001;
              *((_QWORD *)&v107 + 1) = 0x100000001;
              v223 = v107;
              v226[0] = 0;
              v108 = 1;
              LODWORD(v105) = 1;
            }
            else if ((int)v105 <= 0)
            {
              v108 = 0;
              LODWORD(v105) = 0;
              v223 = 0uLL;
              v106 = 1;
            }
            else
            {
              v109 = 0;
              LODWORD(v223) = 1;
              DWORD1(v223) = v105;
              *((_QWORD *)&v223 + 1) = v105 | 0x100000000;
              do
              {
                v226[v109] = v109;
                ++v109;
              }
              while (v105 != v109);
              v106 = 0;
              v108 = 1;
            }
            v259 = 0x100000008;
            v257 = &unk_1E25C86F0;
            v260 = v261;
            *(_QWORD *)&v258 = __PAIR64__(v108, v105);
            DWORD2(v258) = v105 * v108;
            HIDWORD(v258) = v105;
            if ((_DWORD)v105)
            {
              v110 = 0;
              v111 = 0;
              do
              {
                if ((v106 & 1) == 0)
                {
                  v112 = 0;
                  do
                  {
                    v261[v111 + HIDWORD(v258) * v112] = v226[v110 + v112];
                    ++v112;
                  }
                  while (v108 != v112);
                }
                ++v111;
                v110 += v108;
              }
              while (v111 != (_DWORD)v105);
              v113 = v258;
              v108 = DWORD1(v258);
            }
            else
            {
              v113 = 0;
            }
            *(_QWORD *)&v311[16] = 0x100000008;
            v310 = &unk_1E25C86F0;
            v312 = v313;
            *(_DWORD *)v311 = v113;
            *(_DWORD *)&v311[4] = v108;
            v114 = (v113 * v108);
            *(_DWORD *)&v311[8] = v114;
            *(_DWORD *)&v311[12] = v113;
            if ((int)v114 >= 1)
            {
              v115 = v261;
              v116 = v313;
              do
              {
                v117 = *v115++;
                *v116++ = v117 + v91;
                --v114;
              }
              while (v114);
            }
            sub_18D053D7C((uint64_t)&v299, (uint64_t)&v310);
            v118 = *(unsigned int *)(*(_QWORD *)(v211 + 32) + 4 * (*(_DWORD *)(v211 + 20) + (int)v103));
            v224 = 0x800000001;
            v222 = &unk_1E25C6E30;
            v225 = v226;
            if ((_DWORD)v118 == 1)
            {
              v119 = 0;
              *(_QWORD *)&v120 = 0x100000001;
              *((_QWORD *)&v120 + 1) = 0x100000001;
              v223 = v120;
              v226[0] = 0;
              v121 = 1;
              LODWORD(v118) = 1;
            }
            else if ((int)v118 <= 0)
            {
              v121 = 0;
              LODWORD(v118) = 0;
              v223 = 0uLL;
              v119 = 1;
            }
            else
            {
              v122 = 0;
              LODWORD(v223) = 1;
              DWORD1(v223) = v118;
              *((_QWORD *)&v223 + 1) = v118 | 0x100000000;
              do
              {
                v226[v122] = v122;
                ++v122;
              }
              while (v118 != v122);
              v119 = 0;
              v121 = 1;
            }
            v259 = 0x100000008;
            v257 = &unk_1E25C86F0;
            v260 = v261;
            *(_QWORD *)&v258 = __PAIR64__(v121, v118);
            DWORD2(v258) = v118 * v121;
            HIDWORD(v258) = v118;
            if ((_DWORD)v118)
            {
              v123 = 0;
              v124 = 0;
              do
              {
                if ((v119 & 1) == 0)
                {
                  v125 = 0;
                  do
                  {
                    v261[v124 + HIDWORD(v258) * v125] = v226[v123 + v125];
                    ++v125;
                  }
                  while (v121 != v125);
                }
                ++v124;
                v123 += v121;
              }
              while (v124 != (_DWORD)v118);
              v126 = v258;
              v121 = DWORD1(v258);
            }
            else
            {
              v126 = 0;
            }
            *(_QWORD *)&v311[16] = 0x100000008;
            v310 = &unk_1E25C86F0;
            v312 = v313;
            *(_DWORD *)v311 = v126;
            *(_DWORD *)&v311[4] = v121;
            v127 = (v126 * v121);
            *(_DWORD *)&v311[8] = v127;
            *(_DWORD *)&v311[12] = v126;
            if ((int)v127 >= 1)
            {
              v128 = v261;
              v129 = v313;
              do
              {
                v130 = *v128++;
                *v129++ = v130 + v90;
                --v127;
              }
              while (v127);
            }
            sub_18D053D7C((uint64_t)&v294, (uint64_t)&v310);
            v131 = v307;
            sub_18D053C48((uint64_t)&v310, (uint64_t)&v277, (uint64_t)&v299, (uint64_t)&v299);
            sub_18D053EBC((uint64_t)&v310, v131 + 552 * v103);
            v132 = v305;
            sub_18D053C48((uint64_t)&v310, (uint64_t)&v272, (uint64_t)&v299, (uint64_t)&v294);
            sub_18D053EBC((uint64_t)&v310, v132 + 552 * v103);
            v104 = *(_QWORD *)(v211 + 32);
            v91 += *(_DWORD *)(v104 + 4 * v103);
            v90 += *(_DWORD *)(v104 + 4 * (*(_DWORD *)(v211 + 20) + (int)v103++));
          }
          while (v103 != v213);
          v102 = v198;
          v133 = v201;
          v134 = v207;
        }
        v205 = v134;
      }
      v254 = 0x800000008;
      v252 = &unk_1E25C87E0;
      v255 = v256;
      *(_QWORD *)&v253 = __PAIR64__(v134, v133);
      *((_QWORD *)&v253 + 1) = __PAIR64__(v133, v102);
      sub_18D04BE88((uint64_t)&v252, 0.0);
      *(_QWORD *)&v311[16] = 0x1000000008;
      v310 = &unk_1E25C8660;
      *(_OWORD *)v311 = xmmword_18D319980;
      v312 = v313;
      sub_18D05449C((uint64_t)&v282, (uint64_t)&v252, (uint64_t)&v310);
      v244 = 0x800000008;
      v242 = &unk_1E25C87E0;
      v243 = xmmword_18D319930;
      v245 = v246;
      sub_18D054E78((uint64_t)&v288, (uint64_t)&v242);
      v239 = 0x800000008;
      v237 = &unk_1E25C87E0;
      v238 = xmmword_18D319930;
      v240 = v241;
      sub_18D053B2C((uint64_t)&v277, (uint64_t)&v272, (uint64_t)&v237);
      v249 = 0x800000008;
      v247 = &unk_1E25C87E0;
      v248 = xmmword_18D319930;
      v250 = v251;
      sub_18D053B2C((uint64_t)&v242, (uint64_t)&v237, (uint64_t)&v247);
      v234 = 0x800000008;
      v232 = &unk_1E25C87E0;
      v233 = xmmword_18D319930;
      v235 = v236;
      sub_18D053B2C((uint64_t)&v288, (uint64_t)&v277, (uint64_t)&v232);
      v224 = 0x1000000008;
      v222 = &unk_1E25C8660;
      v223 = xmmword_18D319980;
      v225 = v226;
      sub_18D05449C((uint64_t)&v247, (uint64_t)&v232, (uint64_t)&v222);
      v259 = 0x1000000010;
      v257 = &unk_1E25C6320;
      v258 = xmmword_18D319990;
      v260 = v261;
      sub_18D0543E8((uint64_t)&v310, (uint64_t)&v222, (uint64_t)&v257);
      *(_QWORD *)&v311[16] = 0x100000008;
      v310 = &unk_1E25C86C0;
      *(_OWORD *)v311 = xmmword_18D319940;
      v312 = v313;
      sub_18D053B2C((uint64_t)&v282, (uint64_t)&v262, (uint64_t)&v310);
      v229 = 0x100000008;
      v227 = &unk_1E25C86C0;
      v228 = xmmword_18D319940;
      v230 = &v231;
      sub_18D053B2C((uint64_t)&v272, (uint64_t)&v262, (uint64_t)&v227);
      v234 = 0x100000008;
      v232 = &unk_1E25C86C0;
      v233 = xmmword_18D319940;
      v235 = v236;
      sub_18D0540FC((uint64_t)&v267, (uint64_t)&v227, (uint64_t)&v232);
      v239 = 0x100000008;
      v237 = &unk_1E25C86C0;
      v238 = xmmword_18D319940;
      v240 = v241;
      sub_18D053B2C((uint64_t)&v277, (uint64_t)&v232, (uint64_t)&v237);
      v244 = 0x100000008;
      v242 = &unk_1E25C86C0;
      v243 = xmmword_18D319940;
      v245 = v246;
      sub_18D0540FC((uint64_t)&v237, (uint64_t)v293, (uint64_t)&v242);
      v254 = 0x100000008;
      v252 = &unk_1E25C86C0;
      v253 = xmmword_18D319940;
      v255 = v256;
      sub_18D053B2C((uint64_t)&v288, (uint64_t)&v242, (uint64_t)&v252);
      v7 = v203;
      v224 = 0x100000008;
      v222 = &unk_1E25C86C0;
      v223 = xmmword_18D319940;
      v225 = v226;
      sub_18D053FA4((uint64_t)&v252, (uint64_t)v287, (uint64_t)&v222);
      v249 = 0x100000010;
      v247 = &unk_1E25C6350;
      v248 = xmmword_18D319180;
      v250 = v251;
      sub_18D0543E8((uint64_t)&v310, (uint64_t)&v222, (uint64_t)&v247);
      v167 = v133;
      v224 = 0x1000000010;
      v222 = &unk_1E25C6320;
      v223 = xmmword_18D319990;
      v225 = v226;
      v244 = 0x100000010;
      v242 = &unk_1E25C6350;
      v243 = xmmword_18D319180;
      v245 = v246;
      v254 = 0x100000010;
      v252 = &unk_1E25C6350;
      v253 = xmmword_18D319180;
      v255 = v256;
      *(_QWORD *)&v311[16] = 0x1000000010;
      v310 = &unk_1E25C6320;
      *(_OWORD *)v311 = xmmword_18D319990;
      v312 = v313;
      sub_18D054C20((uint64_t)&v257, (uint64_t)&v247, (uint64_t)&v252, (uint64_t)&v310, (uint64_t)&v242, (uint64_t)&v222);
      *(_QWORD *)&v311[16] = 0x800000001;
      v310 = &unk_1E25C6E30;
      v312 = v313;
      if ((_DWORD)v207 == 1)
      {
        v168 = 0;
        *(_QWORD *)&v169 = 0x100000001;
        *((_QWORD *)&v169 + 1) = 0x100000001;
        *(_OWORD *)v311 = v169;
        v313[0] = v133;
        v170 = 1;
        v171 = 1;
      }
      else
      {
        if ((int)v207 > 0)
        {
          v172 = 0;
          *(_DWORD *)v311 = 1;
          *(_DWORD *)&v311[4] = v207;
          *(_DWORD *)&v311[8] = v207;
          *(_DWORD *)&v311[12] = 1;
          v84 = v207;
          do
          {
            v313[v172] = v167 + v172;
            ++v172;
          }
          while (v207 != v172);
          v168 = 0;
          v170 = 1;
          v171 = v207;
          v85 = v201;
          goto LABEL_194;
        }
        v170 = 0;
        v171 = 0;
        *(_QWORD *)v311 = 0;
        *(_QWORD *)&v311[8] = 0;
        v168 = 1;
      }
      v85 = v201;
      v84 = v207;
LABEL_194:
      v254 = 0x100000008;
      v252 = &unk_1E25C86F0;
      v255 = v256;
      *(_QWORD *)&v253 = __PAIR64__(v170, v171);
      DWORD2(v253) = v171 * v170;
      HIDWORD(v253) = v171;
      if (v171)
      {
        v173 = 0;
        for (i = 0; i != v171; ++i)
        {
          if ((v168 & 1) == 0)
          {
            v175 = 0;
            do
            {
              v256[i + HIDWORD(v253) * v175] = v313[v173 + v175];
              ++v175;
            }
            while (v170 != v175);
          }
          v173 += v170;
        }
      }
      sub_18D053AA8((uint64_t)v293, (uint64_t)&v267);
      sub_18D053C48((uint64_t)&v310, (uint64_t)&v222, (uint64_t)&v252, (uint64_t)&v252);
      sub_18D053AA8((uint64_t)&v288, (uint64_t)&v310);
      sub_18D053E04((uint64_t)&v310, (uint64_t)&v242, (uint64_t)&v252);
      sub_18D053AA8((uint64_t)v287, (uint64_t)&v310);
      if (!v206)
      {
        *(_QWORD *)&v311[16] = 0x800000001;
        v310 = &unk_1E25C6E30;
        v312 = v313;
        if ((_DWORD)v85 == 1)
        {
          v176 = 0;
          *(_QWORD *)&v177 = 0x100000001;
          *((_QWORD *)&v177 + 1) = 0x100000001;
          *(_OWORD *)v311 = v177;
          v313[0] = 0;
          v178 = 1;
          v179 = 1;
        }
        else if ((int)v85 <= 0)
        {
          v178 = 0;
          v179 = 0;
          *(_QWORD *)v311 = 0;
          *(_QWORD *)&v311[8] = 0;
          v176 = 1;
        }
        else
        {
          v180 = 0;
          *(_DWORD *)v311 = 1;
          *(_DWORD *)&v311[4] = v85;
          *(_DWORD *)&v311[8] = v85;
          *(_DWORD *)&v311[12] = 1;
          do
          {
            v313[v180] = v180;
            ++v180;
          }
          while (v85 != v180);
          v176 = 0;
          v178 = 1;
          v179 = v85;
        }
        v239 = 0x100000008;
        v237 = &unk_1E25C86F0;
        v240 = v241;
        *(_QWORD *)&v238 = __PAIR64__(v178, v179);
        DWORD2(v238) = v179 * v178;
        HIDWORD(v238) = v179;
        if (v179)
        {
          v181 = 0;
          for (j = 0; j != v179; ++j)
          {
            if ((v176 & 1) == 0)
            {
              v183 = 0;
              do
              {
                v241[j + HIDWORD(v238) * v183] = v313[v181 + v183];
                ++v183;
              }
              while (v178 != v183);
            }
            v181 += v178;
          }
        }
        sub_18D053C48((uint64_t)&v310, (uint64_t)&v222, (uint64_t)&v237, (uint64_t)&v252);
        sub_18D053AA8(v197, (uint64_t)&v310);
        sub_18D053E04((uint64_t)&v310, (uint64_t)&v242, (uint64_t)&v237);
        sub_18D053AA8(v196, (uint64_t)&v310);
        sub_18D053C48((uint64_t)&v310, (uint64_t)&v222, (uint64_t)&v237, (uint64_t)&v237);
        sub_18D053AA8(v195, (uint64_t)&v310);
      }
      ++v209;
      v92 = v205;
      if (v209 == v200)
        goto LABEL_216;
    }
  }
  v199 = (uint64_t)&v8[54].n128_i64[1];
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = *(_QWORD *)(v211 + 32);
  v48 = 1;
  do
  {
    v49 = *(unsigned int *)(v47 + 4 * v44);
    v224 = 0x800000001;
    v222 = &unk_1E25C6E30;
    v225 = v226;
    if ((_DWORD)v49 == 1)
    {
      v50 = 0;
      *(_QWORD *)&v51 = 0x100000001;
      *((_QWORD *)&v51 + 1) = 0x100000001;
      v223 = v51;
      v226[0] = 0;
      v52 = 1;
      LODWORD(v49) = 1;
    }
    else if ((int)v49 <= 0)
    {
      v52 = 0;
      LODWORD(v49) = 0;
      v223 = 0uLL;
      v50 = 1;
    }
    else
    {
      v53 = 0;
      LODWORD(v223) = 1;
      DWORD1(v223) = v49;
      *((_QWORD *)&v223 + 1) = v49 | 0x100000000;
      do
      {
        v226[v53] = v53;
        ++v53;
      }
      while (v49 != v53);
      v50 = 0;
      v52 = 1;
    }
    v259 = 0x100000008;
    v257 = &unk_1E25C86F0;
    v260 = v261;
    *(_QWORD *)&v258 = __PAIR64__(v52, v49);
    DWORD2(v258) = v49 * v52;
    HIDWORD(v258) = v49;
    if ((_DWORD)v49)
    {
      v54 = 0;
      v55 = 0;
      do
      {
        if ((v50 & 1) == 0)
        {
          v56 = 0;
          do
          {
            v261[v55 + HIDWORD(v258) * v56] = v226[v54 + v56];
            ++v56;
          }
          while (v52 != v56);
        }
        ++v55;
        v54 += v52;
      }
      while (v55 != (_DWORD)v49);
      v57 = v258;
      v52 = DWORD1(v258);
    }
    else
    {
      v57 = 0;
    }
    *(_QWORD *)&v311[16] = 0x100000008;
    v310 = &unk_1E25C86F0;
    v312 = v313;
    *(_DWORD *)v311 = v57;
    *(_DWORD *)&v311[4] = v52;
    v58 = (v57 * v52);
    *(_DWORD *)&v311[8] = v58;
    *(_DWORD *)&v311[12] = v57;
    if ((int)v58 >= 1)
    {
      v59 = v261;
      v60 = v313;
      do
      {
        v61 = *v59++;
        *v60++ = v61 + v46;
        --v58;
      }
      while (v58);
    }
    sub_18D053D7C((uint64_t)&v299, (uint64_t)&v310);
    v62 = *(unsigned int *)(*(_QWORD *)(v211 + 32) + 4 * (*(_DWORD *)(v211 + 20) + (int)v44));
    v224 = 0x800000001;
    v222 = &unk_1E25C6E30;
    v225 = v226;
    if ((_DWORD)v62 == 1)
    {
      v63 = 0;
      *(_QWORD *)&v64 = 0x100000001;
      *((_QWORD *)&v64 + 1) = 0x100000001;
      v223 = v64;
      v226[0] = 0;
      v65 = 1;
      LODWORD(v62) = 1;
    }
    else if ((int)v62 <= 0)
    {
      v65 = 0;
      LODWORD(v62) = 0;
      v223 = 0uLL;
      v63 = 1;
    }
    else
    {
      v66 = 0;
      LODWORD(v223) = 1;
      DWORD1(v223) = v62;
      *((_QWORD *)&v223 + 1) = v62 | 0x100000000;
      do
      {
        v226[v66] = v66;
        ++v66;
      }
      while (v62 != v66);
      v63 = 0;
      v65 = 1;
    }
    v259 = 0x100000008;
    v257 = &unk_1E25C86F0;
    v260 = v261;
    *(_QWORD *)&v258 = __PAIR64__(v65, v62);
    DWORD2(v258) = v62 * v65;
    HIDWORD(v258) = v62;
    if ((_DWORD)v62)
    {
      v67 = 0;
      v68 = 0;
      do
      {
        if ((v63 & 1) == 0)
        {
          v69 = 0;
          do
          {
            v261[v68 + HIDWORD(v258) * v69] = v226[v67 + v69];
            ++v69;
          }
          while (v65 != v69);
        }
        ++v68;
        v67 += v65;
      }
      while (v68 != (_DWORD)v62);
      v70 = v258;
      v65 = DWORD1(v258);
    }
    else
    {
      v70 = 0;
    }
    *(_QWORD *)&v311[16] = 0x100000008;
    v310 = &unk_1E25C86F0;
    v312 = v313;
    *(_DWORD *)v311 = v70;
    *(_DWORD *)&v311[4] = v65;
    v71 = (v70 * v65);
    *(_DWORD *)&v311[8] = v71;
    *(_DWORD *)&v311[12] = v70;
    if ((int)v71 >= 1)
    {
      v72 = v261;
      v73 = v313;
      do
      {
        v74 = *v72++;
        *v73++ = v74 + v45;
        --v71;
      }
      while (v71);
    }
    sub_18D053D7C((uint64_t)&v294, (uint64_t)&v310);
    v284 = 0x100000008;
    v282 = &unk_1E25C86C0;
    v283 = xmmword_18D319940;
    v285 = v286;
    *(_QWORD *)&v311[16] = 0x800000008;
    v310 = &unk_1E25C87E0;
    *(_OWORD *)v311 = xmmword_18D319930;
    v312 = v313;
    v259 = 0x800000008;
    v257 = &unk_1E25C87E0;
    v258 = xmmword_18D319930;
    v260 = v261;
    v75 = *(unsigned int (**)(void **, void **, _QWORD, void **, void **, void **))(*(_QWORD *)(v210 + 32)
                                                                                             + 8 * v44);
    sub_18D053E04((uint64_t)&v222, v212, (uint64_t)&v299);
    v76 = (DWORD1(v295) * v295);
    v290 = 0x100000008;
    v288 = &unk_1E25C86C0;
    *(_QWORD *)&v289 = v295;
    *((_QWORD *)&v289 + 1) = __PAIR64__(v295, v76);
    v291 = v292;
    if ((_DWORD)v76)
    {
      v77 = v297;
      v78 = v220;
      v79 = v292;
      do
      {
        v80 = *v77++;
        *v79++ = v78[v80];
        --v76;
      }
      while (v76);
    }
    if (v75(&v222, &v288, *(_QWORD *)(*(_QWORD *)(v208 + 32) + 8 * v44), &v282, &v310, &v257))
    {
      v204[96].n128_u8[0] = 0;
      result = 20;
      goto LABEL_222;
    }
    sub_18D053E04((uint64_t)&v222, v202, (uint64_t)&v299);
    sub_18D05495C((uint64_t)&v222, (uint64_t)&v282);
    sub_18D053AA8(v309 + 104 * v44, (uint64_t)&v282);
    v224 = 0x800000008;
    v222 = &unk_1E25C87E0;
    v223 = xmmword_18D319930;
    v225 = v226;
    v279 = 0x100000008;
    v277 = &unk_1E25C86F0;
    v278 = xmmword_18D319940;
    v280 = v281;
    v274 = 0x100000008;
    v272 = &unk_1E25C86F0;
    v273 = xmmword_18D319940;
    v275 = v276;
    v290 = 0x100000020;
    v288 = &unk_1E25C7670;
    v289 = xmmword_18D319960;
    v291 = v292;
    v81 = sub_18D054568((uint64_t)&v310, (uint64_t)&v277, (uint64_t)&v272, (uint64_t)&v288, (uint64_t)&v222);
    sub_18D053AA8(v307 + 552 * v44, (uint64_t)&v222);
    *(_QWORD *)&v82 = sub_18D053AA8(v305 + 552 * v44, (uint64_t)&v257).n128_u64[0];
    v48 &= v81 <= v38;
    v47 = *(_QWORD *)(v211 + 32);
    v46 += *(_DWORD *)(v47 + 4 * v44);
    v45 += *(_DWORD *)(v47 + 4 * (*(_DWORD *)(v211 + 20) + (int)v44++));
  }
  while (v44 != v213);
  LODWORD(v19) = v213;
  v39 = (uint64_t)&v204[54].n128_i64[1];
  if ((v48 & 1) != 0)
    goto LABEL_88;
  LOWORD(v310) = 2;
  LOBYTE(v257) = 2;
  v185 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&v204[106].n128_i8[8], "Predict state Jacobian matrix is not invertible.", v82);
  if (v204[107].n128_i8[15] >= 0)
    LOBYTE(v191) = v185;
  else
    v191 = v204[106].n128_i64[1];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v310, (unsigned __int8 *)&v257, "%s", v186, v187, v188, v189, v190, v191);
  sub_18D053AA8((uint64_t)&v204[7], v199);
  *(_QWORD *)&v311[16] = 0x100000008;
  v310 = &unk_1E25C86C0;
  *(_OWORD *)v311 = xmmword_18D319940;
  v312 = v313;
  sub_18D053B2C((uint64_t)&v204[7], v202, (uint64_t)&v310);
  sub_18D053AA8((uint64_t)&v204[41].n128_i64[1], (uint64_t)&v310);
  *(_QWORD *)&v311[16] = 0x800000008;
  v310 = &unk_1E25C87E0;
  v312 = v313;
  *(_DWORD *)v311 = v201;
  *(_DWORD *)&v311[4] = v14;
  *(_DWORD *)&v311[8] = v198;
  *(_DWORD *)&v311[12] = v201;
  sub_18D04BE88((uint64_t)&v310, 0.0);
  sub_18D053AA8(v197, (uint64_t)&v310);
  *(_QWORD *)&v311[16] = 0x100000008;
  v310 = &unk_1E25C86C0;
  v312 = v313;
  *(_DWORD *)v311 = v201;
  *(_DWORD *)&v311[4] = 1;
  *(_DWORD *)&v311[8] = v201;
  *(_DWORD *)&v311[12] = v201;
  sub_18D04BE88((uint64_t)&v310, 0.0);
  sub_18D053AA8(v196, (uint64_t)&v310);
  sub_18D053AA8(v195, v7);
  v204[96].n128_u32[1] = 0;
  v204[96].n128_u8[0] = 0;
  result = 21;
LABEL_222:
  for (k = 592; k != -512; k -= 552)
    *(_QWORD *)&v304[k] = &unk_1E25C5E70;
  for (m = 592; m != -512; m -= 552)
    *(_QWORD *)&v306[m] = &unk_1E25C5E70;
  for (n = 144; n != -64; n -= 104)
    *(_QWORD *)&v308[n] = &unk_1E25C5E70;
  return result;
}

void sub_18D053980(_Unwind_Exception *a1)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;

  for (i = 592; i != -512; i -= 552)
    *(unint64_t *)((char *)&STACK[0x2818] + i) = (unint64_t)&unk_1E25C5E70;
  for (j = 592; j != -512; j -= 552)
    *(unint64_t *)((char *)&STACK[0x2C90] + j) = (unint64_t)&unk_1E25C5E70;
  for (k = 144; k != -64; k -= 104)
    *(unint64_t *)((char *)&STACK[0x3108] + k) = (unint64_t)&unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D053AA8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  __n128 result;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __n128 *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 8);
    v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 12) = v2;
    v4 = (v2 * v3);
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v3;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v10 = (v5 - 2);
      v11 = *(_OWORD **)(a1 + 32);
      v12 = *(__int128 **)(a2 + 32);
      v13 = (__n128 *)((char *)v11 + 8 * v10);
      v14 = (v5 - 1) >> 1;
      v15 = v12;
      do
      {
        v16 = *v15++;
        *v11++ = v16;
        --v14;
      }
      while (v14);
      result = *(__n128 *)((char *)v12 + 8 * v10);
      *v13 = result;
    }
    else if ((int)v4 >= 1)
    {
      v6 = *(unint64_t **)(a2 + 32);
      v7 = *(unint64_t **)(a1 + 32);
      do
      {
        v8 = *v6++;
        result.n128_u64[0] = v8;
        *v7++ = v8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

void sub_18D053B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t __ldc;
  uint64_t __ldb;
  uint64_t v5;
  uint32x4_t v6;
  const double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  uint64_t v17;
  double v18;

  __ldc = *(_QWORD *)(a1 + 8);
  __ldb = *(_QWORD *)(a2 + 8);
  v5 = __ldc;
  *(_QWORD *)(a3 + 8) = __PAIR64__(HIDWORD(__ldb), __ldc);
  *(_DWORD *)(a3 + 16) = HIDWORD(__ldb) * __ldc;
  *(_DWORD *)(a3 + 20) = __ldc;
  v6.i64[0] = __ldc;
  v6.i64[1] = __ldb;
  v7 = *(const double **)(a1 + 32);
  if ((int)vmaxvq_u32(v6) > 5)
  {
    cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, __ldc, SHIDWORD(__ldb), SHIDWORD(__ldc), 1.0, v7, __ldc, *(const double **)(a2 + 32), __ldb, 0.0, *(double **)(a3 + 32), __ldc);
  }
  else if (HIDWORD(__ldb))
  {
    v8 = 0;
    v9 = *(double **)(a2 + 32);
    v10 = *(_QWORD *)(a3 + 32);
    v11 = HIDWORD(__ldc);
    do
    {
      if ((_DWORD)v5)
      {
        v12 = 0;
        v13 = (double *)v7;
        do
        {
          v14 = 0.0;
          if ((_DWORD)v11)
          {
            v15 = v13;
            v16 = v9;
            v17 = v11;
            do
            {
              v18 = *v16++;
              v14 = v14 + *v15 * v18;
              v15 += v5;
              --v17;
            }
            while (v17);
          }
          *(double *)(v10 + 8 * (v12 + v8 * v5)) = v14;
          ++v12;
          ++v13;
        }
        while (v12 != v5);
      }
      ++v8;
      v9 += __ldb;
    }
    while (v8 != HIDWORD(__ldb));
  }
}

uint64_t sub_18D053C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0x800000008;
  *(_OWORD *)(a1 + 8) = xmmword_18D319930;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5240;
  *(_QWORD *)(a1 + 552) = a2;
  v7 = a1 + 560;
  *(_QWORD *)(a1 + 584) = 0x100000008;
  *(_QWORD *)(a1 + 560) = &unk_1E25C86F0;
  *(_OWORD *)(v7 + 8) = xmmword_18D319940;
  *(_QWORD *)(a1 + 592) = a1 + 600;
  *(_QWORD *)(a1 + 656) = 0x100000008;
  *(_QWORD *)(a1 + 632) = &unk_1E25C86F0;
  *(_OWORD *)(a1 + 640) = xmmword_18D319940;
  *(_QWORD *)(a1 + 664) = a1 + 672;
  sub_18D053D7C(v7, a3);
  sub_18D053D7C(a1 + 632, a4);
  v8 = *(unsigned int *)(a1 + 576);
  v9 = *(unsigned int *)(a1 + 648);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v8)
      {
        v14 = *(int **)(a1 + 592);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 664) + 4 * v11) * v12;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v10;
        v18 = v8;
        do
        {
          v19 = *v14++;
          *(_QWORD *)(v16 + 8 * v17++) = *(_QWORD *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

uint64_t sub_18D053D7C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;

  if (result != a2)
  {
    v3 = *(_DWORD *)(a2 + 8);
    v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(result + 8) = v3;
    *(_DWORD *)(result + 12) = v2;
    v4 = v2 * v3;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v3;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v9 = (v5 - 1);
      v10 = *(_DWORD **)(result + 32);
      v11 = *(int **)(a2 + 32);
      v12 = v11;
      v13 = v10;
      v14 = v9;
      do
      {
        v15 = *v12++;
        *v13++ = v15;
        --v14;
      }
      while (v14);
      v10[v9] = v11[v9];
    }
    else if (v4 >= 1)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(result + 32);
      do
      {
        *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v7 + 4 * v6);
        ++v6;
      }
      while (v6 < *(int *)(result + 16));
    }
  }
  return result;
}

uint64_t sub_18D053E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000008;
  *(_OWORD *)(a1 + 8) = xmmword_18D319940;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5870;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 136) = 0x100000008;
  *(_QWORD *)(a1 + 112) = &unk_1E25C86F0;
  *(_OWORD *)(a1 + 120) = xmmword_18D319940;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  sub_18D053D7C(a1 + 112, a3);
  v6 = *(_DWORD *)(a1 + 120);
  v5 = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 144);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

uint64_t sub_18D053EBC(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 552);
        v8 = *(int **)(result + 592);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 664) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

float64x2_t sub_18D053FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  float64_t *v8;
  double v9;
  double v10;
  double v11;
  float64x2_t result;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  if ((int)v5 > 3)
  {
    v13 = (v5 - 2);
    v14 = *(float64x2_t **)(a1 + 32);
    v15 = *(float64x2_t **)(a2 + 32);
    v16 = *(float64x2_t **)(a3 + 32);
    v17 = (float64x2_t *)((char *)v15 + 8 * v13);
    v18 = (v5 - 1) >> 1;
    v19 = v14;
    v20 = v16;
    do
    {
      v21 = *v19++;
      v22 = v21;
      v23 = *v15++;
      *v20++ = vaddq_f64(v22, v23);
      --v18;
    }
    while (v18);
    result = vaddq_f64(*(float64x2_t *)((char *)v14 + 8 * v13), *v17);
    *(float64x2_t *)((char *)v16 + 8 * v13) = result;
  }
  else if ((int)v5 >= 1)
  {
    v6 = *(double **)(a1 + 32);
    v7 = *(double **)(a2 + 32);
    v8 = *(float64_t **)(a3 + 32);
    do
    {
      v9 = *v6++;
      v10 = v9;
      v11 = *v7++;
      result.f64[0] = v10 + v11;
      *v8++ = result.f64[0];
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_18D054040@<X0>(char *__s1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  result = strcmp(__s1, ":");
  if ((_DWORD)result)
    __assert_rtn("operator()", "cnmatrix.h", 939, "strcmp(r, \":\") == 0");
  v8 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a4 + 24) = 0x100000002;
  *(_QWORD *)a4 = &unk_1E25C7550;
  *(_DWORD *)(a4 + 8) = v8;
  *(_DWORD *)(a4 + 12) = 1;
  *(_DWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 20) = v8;
  v9 = (_DWORD *)(a4 + 40);
  *(_QWORD *)(a4 + 32) = a4 + 40;
  if (v8)
  {
    v10 = *(_DWORD *)(a2 + 20) * a3;
    v11 = *(_QWORD *)(a2 + 32);
    do
    {
      *v9++ = *(_DWORD *)(v11 + 4 * v10++);
      --v8;
    }
    while (v8);
  }
  return result;
}

float64x2_t sub_18D0540FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  float64_t *v8;
  double v9;
  double v10;
  double v11;
  float64x2_t result;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  if ((int)v5 > 3)
  {
    v13 = (v5 - 2);
    v14 = *(float64x2_t **)(a1 + 32);
    v15 = *(float64x2_t **)(a2 + 32);
    v16 = *(float64x2_t **)(a3 + 32);
    v17 = (float64x2_t *)((char *)v15 + 8 * v13);
    v18 = (v5 - 1) >> 1;
    v19 = v14;
    v20 = v16;
    do
    {
      v21 = *v19++;
      v22 = v21;
      v23 = *v15++;
      *v20++ = vsubq_f64(v22, v23);
      --v18;
    }
    while (v18);
    result = vsubq_f64(*(float64x2_t *)((char *)v14 + 8 * v13), *v17);
    *(float64x2_t *)((char *)v16 + 8 * v13) = result;
  }
  else if ((int)v5 >= 1)
  {
    v6 = *(double **)(a1 + 32);
    v7 = *(double **)(a2 + 32);
    v8 = *(float64_t **)(a3 + 32);
    do
    {
      v9 = *v6++;
      v10 = v9;
      v11 = *v7++;
      result.f64[0] = v10 - v11;
      *v8++ = result.f64[0];
      --v5;
    }
    while (v5);
  }
  return result;
}

__n128 sub_18D054198(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x100000008;
  *(_QWORD *)(a1 + 24) = 0x100000008;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C86C0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D0542B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D0542CC(uint64_t a1, int a2, int a3, __n128 a4)
{
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  int v9;

  v5 = 0;
  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C7400;
  *(_QWORD *)(a1 + 8) = 0;
  a4.n128_u64[0] = 0x800000008;
  do
  {
    v6 = a1 + v5;
    *(_QWORD *)(v6 + 64) = 0x800000008;
    *(_QWORD *)(v6 + 40) = &unk_1E25C87E0;
    *(_OWORD *)(v6 + 48) = xmmword_18D319930;
    *(_QWORD *)(v6 + 72) = a1 + v5 + 80;
    v5 += 552;
  }
  while (v5 != 1104);
  if (a2 < 0)
  {
    v8 = "nr >= 0";
    v9 = 419;
    goto LABEL_8;
  }
  if (a3 < 0)
  {
    v8 = "nc >= 0";
    v9 = 420;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  (*(void (**)(uint64_t, __n128, __int128))(*(_QWORD *)a1 + 16))(a1, a4, xmmword_18D319930);
  return a1;
}

void sub_18D0543A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t i;

  for (i = 74; i != -64; i -= 69)
    v1[i] = &unk_1E25C5E70;
  *v1 = &unk_1E25C5B10;
  _Unwind_Resume(a1);
}

uint64_t sub_18D0543DC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

uint64_t sub_18D0543E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int i;
  int v19;
  unsigned int v20;
  int j;

  v3 = *(_DWORD *)(result + 8);
  v4 = *(_DWORD *)(result + 12);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = v5 + v3;
  *(_DWORD *)(a3 + 8) = v5 + v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 16) = (v5 + v3) * v4;
  *(_DWORD *)(a3 + 20) = v5 + v3;
  if (v4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 32);
    result = *(_QWORD *)(a3 + 32);
    v13 = *(_DWORD *)(a2 + 20);
    v14 = v3;
    v15 = *(_QWORD *)(a2 + 32);
    do
    {
      v16 = v8;
      v17 = v9;
      for (i = v3; i; --i)
        *(_QWORD *)(result + 8 * v17++) = *(_QWORD *)(v12 + 8 * v16++);
      v19 = v7;
      v20 = v14;
      for (j = v5; j; --j)
        *(_QWORD *)(result + 8 * v20++) = *(_QWORD *)(v15 + 8 * v19++);
      ++v10;
      v9 += v6;
      v8 += v11;
      v14 += v6;
      v7 += v13;
    }
    while (v10 != v4);
  }
  return result;
}

uint64_t sub_18D05449C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int i;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_DWORD *)(result + 12);
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = v5 + v4;
  *(_DWORD *)(a3 + 16) = (v5 + v4) * v3;
  *(_DWORD *)(a3 + 20) = v3;
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(_DWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 32);
    v11 = *(_QWORD *)(a3 + 32);
    do
    {
      v12 = v6;
      result = v7;
      for (i = v3; i; --i)
      {
        *(_QWORD *)(v11 + 8 * result) = *(_QWORD *)(v10 + 8 * v12);
        result = (result + 1);
        ++v12;
      }
      ++v8;
      v7 = (v7 + v3);
      v6 += v9;
    }
    while (v8 != v4);
  }
  if (v5)
  {
    v14 = 0;
    v15 = 0;
    v16 = *(_DWORD *)(a2 + 20);
    v17 = *(_QWORD *)(a2 + 32);
    v18 = v4 * v3;
    v19 = *(_QWORD *)(a3 + 32);
    do
    {
      v20 = v14;
      v21 = v18;
      for (result = v3; (_DWORD)result; result = (result - 1))
        *(_QWORD *)(v19 + 8 * v21++) = *(_QWORD *)(v17 + 8 * v20++);
      ++v15;
      v18 += v3;
      v14 += v16;
    }
    while (v15 != v5);
  }
  return result;
}

double sub_18D054568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CLPK_doublereal *v17;
  __CLPK_integer v18;
  void *v19;
  size_t v20;
  __CLPK_integer *v21;
  __CLPK_integer *v22;
  __CLPK_integer v23;
  char *v24;
  double v25;
  double *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  __CLPK_integer v30;
  double v31;
  uint64_t v32;
  __CLPK_doublereal *v33;
  void *v34;
  size_t v35;
  __CLPK_integer *v36;
  __CLPK_integer *v37;
  char v38;
  __CLPK_integer v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __CLPK_integer *v45;
  __CLPK_integer *v46;
  cnprint::CNPrinter *v47;
  __CLPK_integer v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  int v57;
  __CLPK_integer __n[2];
  __CLPK_integer __m[2];
  char __norm;
  __CLPK_integer v61;
  __CLPK_integer __info;
  __CLPK_integer __lda;

  sub_18D053AA8(a5, a1);
  v15 = *(unsigned int *)(a5 + 8);
  v16 = *(unsigned int *)(a5 + 12);
  v17 = *(__CLPK_doublereal **)(a5 + 32);
  v18 = *(_DWORD *)(a5 + 20);
  v19 = *(void **)(a2 + 32);
  __m[0] = v15;
  __n[0] = v16;
  __lda = v18;
  if ((int)v15 < 1)
  {
    v23 = -1;
LABEL_8:
    LOWORD(__m[0]) = 4;
    LOBYTE(__n[0]) = 5;
    v57 = -v23;
    v24 = "Error using Inv: input argument %d invalid in getrf.";
    goto LABEL_9;
  }
  v20 = 4 * v15;
  v21 = (__CLPK_integer *)operator new[](4 * v15, MEMORY[0x1E0DE4E10]);
  if (!v21)
  {
    v23 = -5;
    goto LABEL_8;
  }
  v22 = v21;
  __info = 0;
  dgetrf_(__m, __n, v17, &__lda, v21, &__info);
  memcpy(v19, v22, v20);
  MEMORY[0x18D78B5BC](v22, 0x1000C8052888210);
  v23 = __info;
  if (!__info)
    goto LABEL_10;
  if (__info < 1)
    goto LABEL_8;
  LOWORD(__m[0]) = 4;
  LOBYTE(__n[0]) = 2;
  v24 = "Warning: matrix is singular to working precision.";
LABEL_9:
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__m, (unsigned __int8 *)__n, v24, v10, v11, v12, v13, v14, v57);
LABEL_10:
  if ((int)v16 < 1)
  {
    v25 = 0.0;
  }
  else
  {
    v25 = 0.0;
    v26 = *(double **)(a1 + 32);
    v27 = v16;
    do
    {
      v28 = *v26++;
      v25 = v25 + fabs(v28);
      --v27;
    }
    while (v27);
    if ((int)v16 > 1)
    {
      v29 = 1;
      v30 = v18;
      do
      {
        v31 = 0.0;
        v32 = v30;
        do
          v31 = v31 + fabs(*(double *)(*(_QWORD *)(a1 + 32) + 8 * v32++));
        while (v32 < v16 + v29 * v18);
        if (v31 > v25)
          v25 = v31;
        ++v29;
        v30 += v18;
      }
      while (v29 != v16);
    }
  }
  *(double *)__n = 0.0;
  v33 = *(__CLPK_doublereal **)(a4 + 32);
  v34 = *(void **)(a3 + 32);
  __norm = 49;
  *(double *)__m = v25;
  __info = v18;
  __lda = v16;
  if ((int)v16 < 1)
  {
    v38 = -2;
  }
  else
  {
    v35 = 4 * v16;
    v36 = (__CLPK_integer *)operator new[](4 * v16, MEMORY[0x1E0DE4E10]);
    if (v36)
    {
      v37 = v36;
      v61 = 0;
      dgecon_(&__norm, &__lda, v17, &__info, (__CLPK_doublereal *)__m, (__CLPK_doublereal *)__n, v33, v36, &v61);
      memcpy(v34, v37, 4 * v16);
      MEMORY[0x18D78B5BC](v37, 0x1000C8052888210);
      v38 = v61;
      if ((v61 & 0x80000000) == 0)
      {
        v39 = *(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24);
        __m[0] = v16;
        __lda = v18;
        goto LABEL_30;
      }
    }
    else
    {
      v38 = -8;
    }
  }
  LOWORD(__m[0]) = 4;
  LOBYTE(__lda) = 5;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__m, (unsigned __int8 *)&__lda, "Error using Inv: input argument %d invalid in gecon.", v10, v11, v12, v13, v14, -v38);
  v39 = *(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24);
  __m[0] = v16;
  __lda = v18;
  if ((int)v16 < 1)
  {
    v48 = -1;
LABEL_35:
    LOWORD(__m[0]) = 4;
    LOBYTE(__lda) = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__m, (unsigned __int8 *)&__lda, "Error using Inv: input argument %d invalid in getri.", v40, v41, v42, v43, v44, -(char)v48);
    goto LABEL_36;
  }
  v35 = 4 * v16;
LABEL_30:
  v45 = (__CLPK_integer *)operator new[](v35, MEMORY[0x1E0DE4E10]);
  if (!v45)
  {
    v48 = -4;
    goto LABEL_35;
  }
  v46 = v45;
  memcpy(v45, v19, v35);
  v61 = 0;
  __info = v39;
  dgetri_(__m, v17, &__lda, v46, v33, &__info, &v61);
  v47 = (cnprint::CNPrinter *)MEMORY[0x18D78B5BC](v46, 0x1000C8052888210);
  v48 = v61;
  if (v61 < 0)
    goto LABEL_35;
LABEL_36:
  v49 = (int)**(double **)(a4 + 32);
  if (v39 < v49 && cnprint::CNPrinter::GetLogLevel(v47) <= 1)
  {
    LOWORD(__m[0]) = 4;
    LOBYTE(__lda) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__m, (unsigned __int8 *)&__lda, "Warning: Inv optimal workspace size %d is greater than provided workspace size %d; performance may suffer.",
      v50,
      v51,
      v52,
      v53,
      v54,
      v49);
  }
  v55 = *(double *)__n;
  if (v48 >= 1)
    sub_18D04BE88(a5, INFINITY);
  return 1.0 / v55;
}

double sub_18D05495C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  int *v4;
  uint64_t v5;
  double *v6;
  double v7;
  double result;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 16))
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if ((int)v2 >= 1)
  {
    v3 = *(double **)(a2 + 32);
    v4 = *(int **)(a1 + 144);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 32);
    v6 = *(double **)(a1 + 32);
    do
    {
      v7 = *v3++;
      result = v7;
      v9 = *v4++;
      *(double *)(v5 + 8 * v9) = result;
      *v6++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

__n128 sub_18D0549D0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x800000008;
  *(_QWORD *)(a1 + 24) = 0x800000008;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C87E0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 9u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D054AEC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D054B00(uint64_t a1, int a2, int a3, __n128 a4)
{
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  int v9;

  v5 = 0;
  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C73D0;
  *(_QWORD *)(a1 + 8) = 0;
  a4.n128_u64[0] = 0x100000008;
  do
  {
    v6 = a1 + v5;
    *(_QWORD *)(v6 + 64) = 0x100000008;
    *(_QWORD *)(v6 + 40) = &unk_1E25C86C0;
    *(_OWORD *)(v6 + 48) = xmmword_18D319940;
    *(_QWORD *)(v6 + 72) = a1 + v5 + 80;
    v5 += 104;
  }
  while (v5 != 208);
  if (a2 < 0)
  {
    v8 = "nr >= 0";
    v9 = 419;
    goto LABEL_8;
  }
  if (a3 < 0)
  {
    v8 = "nc >= 0";
    v9 = 420;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  (*(void (**)(uint64_t, __n128, __int128))(*(_QWORD *)a1 + 16))(a1, a4, xmmword_18D319940);
  return a1;
}

void sub_18D054BE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t i;

  for (i = 18; i != -8; i -= 13)
    v1[i] = &unk_1E25C5E70;
  *v1 = &unk_1E25C5AE0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D054C14(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

uint64_t sub_18D054C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __CLPK_integer v11;
  __CLPK_doublereal *v12;
  __CLPK_integer v13;
  __CLPK_doublereal *v14;
  __CLPK_doublereal *__work;
  __CLPK_integer v16;
  cnprint::CNPrinter *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __CLPK_integer v29;
  __CLPK_integer v30;
  unsigned int v31;
  __CLPK_doublereal *__c__;
  __CLPK_integer v33;
  uint64_t result;
  unsigned int v35;
  int32x4_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  __CLPK_integer v52;
  __CLPK_integer v53;
  __CLPK_integer __info;
  __CLPK_integer __lwork;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __trans;
  char __side;

  sub_18D053AA8(a6, a1);
  v11 = *(_DWORD *)(a6 + 8);
  v12 = *(__CLPK_doublereal **)(a6 + 32);
  v13 = *(_DWORD *)(a6 + 20);
  v50 = a3;
  v14 = *(__CLPK_doublereal **)(a3 + 32);
  __work = *(__CLPK_doublereal **)(a4 + 32);
  v16 = *(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24);
  __n = *(_DWORD *)(a6 + 12);
  __m = v11;
  __lwork = v16;
  __lda = v13;
  __info = 0;
  v17 = (cnprint::CNPrinter *)dgeqrf_(&__m, &__n, v12, &__lda, v14, __work, &__lwork, &__info);
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Qr: input argument %d invalid in geqrf.", v18, v19, v20, v21, v22, -(char)__info);
  }
  v23 = (int)**(double **)(a4 + 32);
  if (v16 < v23 && cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Qr optimal workspace size %d is greater than provided workspace size %d; performance may suffer.",
      v24,
      v25,
      v26,
      v27,
      v28,
      v23);
  }
  sub_18D053AA8(a5, a2);
  v29 = *(_DWORD *)(a5 + 8);
  v30 = *(_DWORD *)(a5 + 12);
  v31 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 12) < v31)
    v31 = *(_DWORD *)(a1 + 12);
  __c__ = *(__CLPK_doublereal **)(a5 + 32);
  v33 = *(_DWORD *)(a5 + 20);
  __side = 76;
  __trans = 84;
  __n = v30;
  __m = v29;
  __lwork = v13;
  __lda = v31;
  v53 = v16;
  __info = v33;
  v52 = 0;
  result = dormqr_(&__side, &__trans, &__m, &__n, &__lda, v12, &__lwork, v14, __c__, &__info, __work, &v53, &v52);
  v35 = *(_DWORD *)(a1 + 8);
  if (v35 >= *(_DWORD *)(a1 + 12))
    v35 = *(_DWORD *)(a1 + 12);
  v36 = vdupq_lane_s32((int32x2_t)(v35 | 0x100000000), 0);
  v36.i32[1] = 1;
  *(int32x4_t *)(v50 + 8) = v36;
  v37 = *(_DWORD *)(a4 + 24);
  v38 = *(_DWORD *)(a4 + 28);
  *(_DWORD *)(a4 + 8) = v37;
  *(_DWORD *)(a4 + 12) = v38;
  *(_DWORD *)(a4 + 16) = v38 * v37;
  *(_DWORD *)(a4 + 20) = v37;
  v39 = *(_DWORD *)(a1 + 8);
  v40 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a5 + 8) = v39;
  *(_DWORD *)(a5 + 12) = v40;
  *(_DWORD *)(a5 + 16) = v40 * v39;
  *(_DWORD *)(a5 + 20) = v39;
  v41 = *(_DWORD *)(a6 + 12);
  if (v41)
  {
    v42 = 0;
    v43 = *(_DWORD *)(a6 + 8);
    v44 = *(_QWORD *)(a6 + 32);
    v45 = v43 - 1;
    v46 = *(_DWORD *)(a6 + 20) + 1;
    v47 = 1;
    do
    {
      ++v42;
      v48 = v47;
      v49 = v45;
      if (v42 < v43)
      {
        do
        {
          *(_QWORD *)(v44 + 8 * v48++) = 0;
          --v49;
        }
        while (v49);
      }
      --v45;
      v47 += v46;
    }
    while (v42 != v41);
  }
  return result;
}

float64x2_t sub_18D054E78(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  float64x2_t result;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t v15;

  v3 = *(_DWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v2;
  v4 = (v2 * v3);
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v3;
  if ((int)v4 > 3)
  {
    v9 = (v4 - 2);
    v10 = *(float64x2_t **)(a1 + 32);
    v11 = *(float64x2_t **)(a2 + 32);
    v12 = (float64x2_t *)((char *)v10 + 8 * v9);
    v13 = (v4 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v10++;
      *v14++ = vnegq_f64(v15);
      --v13;
    }
    while (v13);
    result = vnegq_f64(*v12);
    *(float64x2_t *)((char *)v11 + 8 * v9) = result;
  }
  else if ((int)v4 >= 1)
  {
    v5 = *(double **)(a1 + 32);
    v6 = *(double **)(a2 + 32);
    do
    {
      v7 = *v5++;
      result.f64[0] = -v7;
      *v6++ = -v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_18D054EFC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  char v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE v45[288];
  _WORD v46[10];
  int v47;
  uint64_t v48;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 6;
  if (v12
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 6) : (v18 = 0),
        v18))
  {
    v24 = *a3;
    v43 = 0x600000006;
    v41 = &unk_1E25C81B0;
    v44 = v45;
    v42 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v41, 0.0);
    v25 = 0;
    v26 = HIDWORD(v42) + 1;
    v27 = 6;
    v28 = v44;
    do
    {
      *(_QWORD *)&v28[8 * v25] = 0x3FF0000000000000;
      v25 += v26;
      --v27;
    }
    while (v27);
    sub_18D055148((uint64_t)v46, (uint64_t)&v41);
    v29 = v47;
    v30 = v48;
    *(_QWORD *)(v48 + 24 * v47) = v24;
    *(_QWORD *)(v30 + 8 * ((4 * v29) | 1)) = v24;
    *(_QWORD *)(v30 + 8 * (5 * v29 + 2)) = v24;
    v38 = 0x100000008;
    v36 = &unk_1E25C86C0;
    v37 = xmmword_18D319940;
    v39 = &v40;
    sub_18D053B2C((uint64_t)v46, a1, (uint64_t)&v36);
    v43 = 0x100000008;
    v41 = &unk_1E25C86C0;
    v42 = xmmword_18D319940;
    v44 = v45;
    sub_18D053FA4((uint64_t)&v36, a2, (uint64_t)&v41);
    sub_18D053AA8(a4, (uint64_t)&v41);
    sub_18D053AA8(a5, (uint64_t)v46);
    v43 = 0x600000006;
    v41 = &unk_1E25C81B0;
    v44 = v45;
    v42 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v41, 0.0);
    v31 = 0;
    v32 = HIDWORD(v42) + 1;
    v33 = 6;
    v34 = v44;
    do
    {
      *(_QWORD *)&v34[8 * v31] = 0x3FF0000000000000;
      v31 += v32;
      --v33;
    }
    while (v33);
    sub_18D053AA8(a6, (uint64_t)&v41);
    return 0;
  }
  else
  {
    v46[0] = 12;
    LOBYTE(v41) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v46, (unsigned __int8 *)&v41, "f_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v35);
    return 0xFFFFFFFFLL;
  }
}

double sub_18D055148(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(a1 + 24) = 0x800000008;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C87E0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 8u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D055204(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D055218(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  char v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  _BYTE v39[64];
  _WORD v40[10];
  int v41;
  uint64_t v42;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 2;
  if (v12
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 2) : (v18 = 0),
        v18))
  {
    v24 = *a3;
    v37 = 0x200000002;
    v35 = &unk_1E25C75B0;
    v38 = v39;
    v36 = xmmword_18D319340;
    sub_18D04BE88((uint64_t)&v35, 0.0);
    v25 = HIDWORD(v36) + 1;
    v26 = v38;
    *v38 = 0x3FF0000000000000;
    v26[v25] = 0x3FF0000000000000;
    sub_18D055148((uint64_t)v40, (uint64_t)&v35);
    *(_QWORD *)(v42 + 8 * v41) = v24;
    v32 = 0x100000008;
    v30 = &unk_1E25C86C0;
    v31 = xmmword_18D319940;
    v33 = &v34;
    sub_18D053B2C((uint64_t)v40, a1, (uint64_t)&v30);
    v37 = 0x100000008;
    v35 = &unk_1E25C86C0;
    v36 = xmmword_18D319940;
    v38 = v39;
    sub_18D053FA4((uint64_t)&v30, a2, (uint64_t)&v35);
    sub_18D053AA8(a4, (uint64_t)&v35);
    sub_18D053AA8(a5, (uint64_t)v40);
    v37 = 0x200000002;
    v35 = &unk_1E25C75B0;
    v38 = v39;
    v36 = xmmword_18D319340;
    sub_18D04BE88((uint64_t)&v35, 0.0);
    v27 = HIDWORD(v36) + 1;
    v28 = v38;
    *v38 = 0x3FF0000000000000;
    v28[v27] = 0x3FF0000000000000;
    sub_18D053AA8(a6, (uint64_t)&v35);
    return 0;
  }
  else
  {
    v40[0] = 12;
    LOBYTE(v35) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v40, (unsigned __int8 *)&v35, "f_TwoStateOscillator called with inadequate matrices.", a4, a5, a6, a7, a8, v29);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D055414(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[144];
  uint64_t v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  sub_18D0559DC((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = (uint64_t)&unk_1E25C24A0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0x7FF8000000000000;
  v22 = 0;
  v23 = 0x3FF0000000000000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  if (!raven::MountStateChecker::HandleEvent(*(raven::MountStateChecker **)(v8 + 2112), (const raven::MountStateEvent *)v10, (raven::MountStateEvent *)v11))sub_18D0554B8(v8, v11);
}

void sub_18D0554B8(uint64_t a1, uint64_t *a2)
{
  __n128 v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3.n128_f64[0] = sub_18D21CFBC(&v15, a2);
  v4 = *(_QWORD *)(a1 + 344);
  v13 = v15;
  v14 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(_QWORD *)v4 + 16))(v4, &v13, a1, v3);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_18D05558C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_18D07C868((uint64_t)&a9);
  sub_18D07C868((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_18D0555A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D0555B4@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "MountStateEvent");
}

double sub_18D0555C4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = *a2;
  sub_18D0559DC((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 1376))
  {
    *(_OWORD *)(v8 + 1472) = v16;
    *(_OWORD *)(v8 + 1488) = v17;
    *(_OWORD *)(v8 + 1504) = v18;
    *(_QWORD *)(v8 + 1520) = v19;
    *(_OWORD *)(v8 + 1408) = v12;
    *(_OWORD *)(v8 + 1424) = v13;
    *(_OWORD *)(v8 + 1440) = v14;
    *(_OWORD *)(v8 + 1456) = v15;
    result = *(double *)&v11;
    *(_OWORD *)(v8 + 1392) = v11;
  }
  else
  {
    *(_QWORD *)(v8 + 1384) = &unk_1E25C24A0;
    *(_OWORD *)(v8 + 1472) = v16;
    *(_OWORD *)(v8 + 1488) = v17;
    *(_OWORD *)(v8 + 1504) = v18;
    *(_QWORD *)(v8 + 1520) = v19;
    *(_OWORD *)(v8 + 1408) = v12;
    *(_OWORD *)(v8 + 1424) = v13;
    *(_OWORD *)(v8 + 1440) = v14;
    *(_OWORD *)(v8 + 1456) = v15;
    result = *(double *)&v11;
    *(_OWORD *)(v8 + 1392) = v11;
    *(_BYTE *)(v8 + 1376) = 1;
  }
  return result;
}

void sub_18D0556A8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[18];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D0559DC((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    raven::RavenEstimator::HandleMountStateEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::MountStateEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D0557FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

double sub_18D055818(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  void *v34[2];
  char v35;
  _QWORD v36[2];
  unsigned __int8 v37;
  __int16 v38;

  v8 = *a2;
  v9 = sub_18D0559DC((uint64_t)&v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 480))
  {
    if (*(_BYTE *)(v8 + 753) && *(_BYTE *)(v8 + 752))
    {
      if (*(_BYTE *)(v8 + 1928))
      {
        *(_OWORD *)(v8 + 1872) = v30;
        *(_OWORD *)(v8 + 1888) = v31;
        *(_OWORD *)(v8 + 1904) = v32;
        *(_QWORD *)(v8 + 1920) = v33;
        *(_OWORD *)(v8 + 1808) = v26;
        *(_OWORD *)(v8 + 1824) = v27;
        *(_OWORD *)(v8 + 1840) = v28;
        *(_OWORD *)(v8 + 1856) = v29;
        v9.n128_u64[0] = v25;
        *(_OWORD *)(v8 + 1792) = v25;
      }
      else
      {
        *(_QWORD *)(v8 + 1784) = &unk_1E25C24A0;
        *(_OWORD *)(v8 + 1872) = v30;
        *(_OWORD *)(v8 + 1888) = v31;
        *(_OWORD *)(v8 + 1904) = v32;
        *(_QWORD *)(v8 + 1920) = v33;
        *(_OWORD *)(v8 + 1808) = v26;
        *(_OWORD *)(v8 + 1824) = v27;
        *(_OWORD *)(v8 + 1840) = v28;
        *(_OWORD *)(v8 + 1856) = v29;
        v9.n128_u64[0] = v25;
        *(_OWORD *)(v8 + 1792) = v25;
        *(_BYTE *)(v8 + 1928) = 1;
      }
    }
  }
  else
  {
    v38 = 12;
    v37 = 2;
    v36[0] = (*(uint64_t (**)(uint64_t *, __n128))(v24 + 16))(&v24, v9);
    v36[1] = v10;
    (*(void (**)(void **__return_ptr, uint64_t *))(v24 + 24))(v34, &v24);
    if (v35 >= 0)
      v16 = v34;
    else
      v16 = (void **)v34[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v36, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 511) >= 0)
      LOBYTE(v22) = v8 - 24;
    else
      v22 = *(_QWORD *)(v8 + 488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "%s", v17, v18, v19, v20, v21, v22);
    if (v35 < 0)
      operator delete(v34[0]);
  }
  return v9.n128_f64[0];
}

void sub_18D0559C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

__n128 sub_18D0559DC(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  __int16 v34;
  std::bad_cast v35;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven15MountStateEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven15MountStateEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    v30 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v30;
    v31 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    result = *(__n128 *)(v28 + 48);
    v32 = *(_OWORD *)(v28 + 64);
    *(__n128 *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 72) = v29;
    *(_QWORD *)a1 = &unk_1E25C24A0;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(v28 + 144);
    *(_OWORD *)(a1 + 8) = v31;
  }
  else
  {
    v34 = 3;
    v33 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C24A0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  return result;
}

void sub_18D055B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void *sub_18D055B88()
{
}

void sub_18D055B94(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  int8x16_t v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[18];
  void *v27[2];
  char v28;
  _QWORD v29[2];
  unsigned __int8 v30;
  __int16 v31;

  v8 = *a2;
  v9 = sub_18D0559DC((uint64_t)v26, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v11 = raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::MountStateEvent *)v26, (int8x16_t)v9, v10);
  if (v12)
  {
    v31 = 12;
    v30 = 2;
    v29[0] = (*(uint64_t (**)(_QWORD *, double))(v26[0] + 16))(v26, v11);
    v29[1] = v13;
    (*(void (**)(void **__return_ptr, _QWORD *))(v26[0] + 24))(v27, v26);
    if (v28 >= 0)
      v19 = v27;
    else
      v19 = (void **)v27[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v29, "Failed to handle event - %s.", v14, v15, v16, v17, v18, (uint64_t)v19);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v25) = v8 - 16;
    else
      v25 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s", v20, v21, v22, v23, v24, v25);
    if (v28 < 0)
      operator delete(v27[0]);
  }
}

void sub_18D055C7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

__n128 raven::RavenEstimator::HandleMountStateEvent(raven::RavenEstimator *this, const raven::MountStateEvent *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];
  unsigned __int8 v29;
  __int16 v30;

  if (*((_BYTE *)this + 57))
  {
    if (*((_BYTE *)this + 1624))
    {
      *(_OWORD *)((char *)this + 1640) = *(_OWORD *)((char *)a2 + 8);
      v4 = *(_OWORD *)((char *)a2 + 24);
      v5 = *(_OWORD *)((char *)a2 + 40);
      v6 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 1688) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1704) = v6;
      *(_OWORD *)((char *)this + 1656) = v4;
      *(_OWORD *)((char *)this + 1672) = v5;
      result = *(__n128 *)((char *)a2 + 88);
      v8 = *(_OWORD *)((char *)a2 + 104);
      v9 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 221) = *((_QWORD *)a2 + 17);
      *(_OWORD *)((char *)this + 1736) = v8;
      *(_OWORD *)((char *)this + 1752) = v9;
      *(__n128 *)((char *)this + 1720) = result;
    }
    else
    {
      *((_QWORD *)this + 204) = &unk_1E25C24A0;
      *(_OWORD *)((char *)this + 1640) = *(_OWORD *)((char *)a2 + 8);
      v22 = *(_OWORD *)((char *)a2 + 24);
      v23 = *(_OWORD *)((char *)a2 + 40);
      v24 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 1688) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1704) = v24;
      *(_OWORD *)((char *)this + 1656) = v22;
      *(_OWORD *)((char *)this + 1672) = v23;
      result = *(__n128 *)((char *)a2 + 88);
      v25 = *(_OWORD *)((char *)a2 + 104);
      v26 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 221) = *((_QWORD *)a2 + 17);
      *(_OWORD *)((char *)this + 1736) = v25;
      *(_OWORD *)((char *)this + 1752) = v26;
      *(__n128 *)((char *)this + 1720) = result;
      *((_BYTE *)this + 1624) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v30 = 12;
    v29 = 1;
    v28[0] = (*(uint64_t (**)(const raven::MountStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v28[1] = v10;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v28, "Estimator not configured, failed to handle MountStateEvent.", v11, v12, v13, v14, v15, v27);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v21) = (_BYTE)this - 72;
    else
      v21 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v16, v17, v18, v19, v20, v21);
  }
  return result;
}

double raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::MountStateEvent *a2, int8x16_t a3, int8x16_t a4)
{
  unsigned int v6;
  int v8;
  int v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  double v14;
  double v15;
  unsigned int v16;
  double result;
  unsigned int v18;
  BOOL v19;
  double *v20;
  double v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  __int16 v44;

  if (*((_BYTE *)this + 58) && *((_BYTE *)this + 1624))
  {
    v6 = *((unsigned __int8 *)this + 1736);
    if (v6 > 3 || v6 == 1)
    {
      v18 = *((unsigned __int8 *)a2 + 104);
      v19 = v18 > 3 || v18 == 1;
      if (!v19 && *((_BYTE *)this + 1208) && ((*((_BYTE *)this + 1320) - 4) & 0xFA) == 0)
      {
        v20 = (double *)*((_QWORD *)this + 146);
        v21 = v20[118];
        v22 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a3, a4);
        v23 = v22 ? 752 : 744;
        v24 = v22 ? 776 : 768;
        v25 = *((_DWORD *)this + 3725);
        v26 = *((_QWORD *)this + 1864);
        if (*(double *)(v26 + 8 * (6 * v25 + 6)) < v21
          && *(double *)(v26 + 8 * (7 * v25 + 7)) < v21
          && *(double *)(v26 + 8 * (8 * v25 + 8)) < v21
          && *(double *)(v26 + 8 * (9 * v25 + 9)) < v21)
        {
          v27 = *(double *)((char *)v20 + v23) * *(double *)((char *)v20 + v23);
          if (*(double *)(v26 + 8 * (10 * v25 + 10)) < v27
            && *(double *)(v26 + 8 * (11 * v25 + 11)) < v27
            && *(double *)(v26 + 8 * (12 * v25 + 12)) < v27)
          {
            v28 = v20[91] * v20[91];
            if (*(double *)(v26 + 8 * (13 * v25 + 13)) < v28
              && *(double *)(v26 + 8 * (14 * v25 + 14)) < v28
              && *(double *)(v26 + 8 * (15 * v25 + 15)) < v28)
            {
              v29 = *(double *)((char *)v20 + v24) * *(double *)((char *)v20 + v24);
              if (*(double *)(v26 + 8 * (16 * v25 + 16)) < v29
                && *(double *)(v26 + 8 * (17 * v25 + 17)) < v29
                && *(double *)(v26 + 8 * (18 * v25 + 18)) < v29)
              {
                raven::RavenPNTEstimator::InflateAttitudeUncertainty(this, v20[178] + v20[178], 0);
                raven::RavenPNTEstimator::InflateInsUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1432), 0);
                v30 = *(double *)(*((_QWORD *)this + 146) + 1448);
                if (*((_BYTE *)this + 2536) == 1)
                {
                  raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(this, v30, 0);
                  raven::RavenPNTEstimator::InflateUserVelocityUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1448), 0);
                  raven::RavenPNTEstimator::InflateUserPositionUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1440), 0);
                }
                else
                {
                  raven::RavenPNTEstimator::InflateVelocityUncertainty(this, v30, 0);
                }
                if (raven::RavenPNTEstimator::UpdateFullStateEstimate(this, v31))
                {
                  v44 = 12;
                  v43 = 4;
                  v42[0] = (*(uint64_t (**)(const raven::MountStateEvent *))(*(_QWORD *)a2 + 16))(a2);
                  v42[1] = v35;
                  cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v42, "Could not update full states after dismount");
                  if (*((char *)this + 2511) >= 0)
                    LOBYTE(v41) = (_BYTE)this - 72;
                  else
                    v41 = *((_QWORD *)this + 311);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "%s", v36, v37, v38, v39, v40, v41);
                  raven::RavenPNTEstimator::Reset(this);
                }
              }
            }
          }
        }
      }
    }
  }
  v8 = *((unsigned __int8 *)this + 2536);
  if (*((_BYTE *)this + 2536))
  {
    if (v8 != 1)
    {
      if (v8 == 2)
        __assert_rtn("HandleEvent", "ravenpntestimator.cpp", 2848, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      goto LABEL_27;
    }
    v12 = *((unsigned __int8 *)a2 + 104);
    if (v12 <= 3 && v12 != 1)
    {
      LOBYTE(v42[0]) = 0;
LABEL_18:
      raven::RavenPNTEstimator::SetStateParameterization((uint64_t)this, (uint64_t)v42);
    }
  }
  else
  {
    v9 = *((_DWORD *)this + 3725);
    v10 = *((_QWORD *)this + 1864);
    if (*((_BYTE *)this + 58))
      v11 = sqrt(*(double *)(v10 + 8 * (25 * v9 + 25))+ *(double *)(v10 + 8 * (26 * v9 + 26))+ *(double *)(v10 + 8 * (27 * v9 + 27)))* 57.2957795;
    else
      v11 = 180.0;
    a3.i64[0] = *(_QWORD *)(v10 + 8 * (16 * v9 + 16));
    a4.i64[0] = *(_QWORD *)(v10 + 8 * (17 * v9 + 17));
    if (*(double *)a4.i64 <= *(double *)(v10 + 8 * (18 * v9 + 18)))
      a4.i64[0] = *(_QWORD *)(v10 + 8 * (18 * v9 + 18));
    if (*(double *)a3.i64 <= *(double *)a4.i64)
      a3.i64[0] = a4.i64[0];
    v14 = *(double *)a3.i64;
    if (*((_BYTE *)this + 58))
    {
      v15 = *(double *)(*((_QWORD *)this + 146) + 784);
      v16 = *((unsigned __int8 *)a2 + 104);
      if (v16 > 3 || v16 == 1)
      {
        if (*((_BYTE *)this + 1624))
        {
          v32 = *((unsigned __int8 *)this + 1736);
          if ((v32 > 3 || v32 == 1)
            && *((_BYTE *)this + 1208)
            && ((*((_BYTE *)this + 1320) - 4) & 0xFA) == 0
            && !raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a3, a4))
          {
            v33 = sqrt(v14);
            if (v11 < 10.0 && v33 <= v15 * 20.0)
            {
              LOBYTE(v42[0]) = 1;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
LABEL_27:
  *(_QWORD *)&result = raven::RavenEstimator::HandleMountStateEvent(this, a2).n128_u64[0];
  return result;
}

uint64_t raven::MountStateChecker::HandleEvent(raven::MountStateChecker *this, const raven::MountStateEvent *a2, raven::MountStateEvent *a3)
{
  double v3;
  double v6;
  BOOL v7;
  double v9;
  BOOL v10;
  double v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  unsigned __int8 v36;
  __int16 v37;
  unsigned __int8 v38;
  __int16 v39;

  if (!*((_BYTE *)this + 8))
  {
    v39 = 12;
    v38 = 4;
    v20 = (*(uint64_t (**)(const raven::MountStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v34 = v21 + (double)v20;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "t,%.3lf,MountStateChecker, not configured", v22, v23, v24, v25, v26, SLOBYTE(v34));
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned __int8 *)a2 + 104) >= 4u)
  {
    v37 = 12;
    v36 = 4;
    v27 = (*(uint64_t (**)(const raven::MountStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v35 = v28 + (double)v27;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "t,%.3lf, Warning: Invalid type detected in mount state integrity check.", v29, v30, v31, v32, v33, SLOBYTE(v35));
    return 0xFFFFFFFFLL;
  }
  v3 = *((double *)a2 + 14);
  if (v3 < 0.0 || (*((_QWORD *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v3 > 1.0)
    return 0xFFFFFFFFLL;
  v6 = *((double *)a2 + 15);
  v7 = v6 < 0.0 || (*((_QWORD *)a2 + 15) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
  if (v7 || v6 > 1.0)
    return 0xFFFFFFFFLL;
  v9 = *((double *)a2 + 16);
  v10 = v9 < 0.0 || (*((_QWORD *)a2 + 16) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
  if (v10 || v9 > 1.0)
    return 0xFFFFFFFFLL;
  v12 = *((double *)a2 + 17);
  result = 0xFFFFFFFFLL;
  if (v12 >= 0.0
    && (*((_QWORD *)a2 + 17) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    && v12 <= 1.0
    && fabs(v3 + v6 + v9 + v12 + -1.0) < 2.22044605e-16)
  {
    result = 0;
    *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
    v14 = *(_OWORD *)((char *)a2 + 24);
    v15 = *(_OWORD *)((char *)a2 + 40);
    v16 = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)a3 + 56) = v16;
    *(_OWORD *)((char *)a3 + 40) = v15;
    *(_OWORD *)((char *)a3 + 24) = v14;
    v17 = *(_OWORD *)((char *)a2 + 88);
    v18 = *(_OWORD *)((char *)a2 + 104);
    v19 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)a3 + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)((char *)a3 + 120) = v19;
    *(_OWORD *)((char *)a3 + 104) = v18;
    *(_OWORD *)((char *)a3 + 88) = v17;
  }
  return result;
}

void raven::GnssReceiverBandCorrectionsManager::Configure(raven::GnssReceiverBandCorrectionsManager *this, const raven::RavenParameters *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  *(_QWORD *)this = a2;
  if (a2)
  {
    if (*((_BYTE *)a2 + 551))
    {
      v3 = operator new();
      v4 = *(_QWORD *)this;
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_DWORD *)(v3 + 32) = 1065353216;
      *(_QWORD *)(v3 + 40) = v4;
      sub_18D20B088((uint64_t *)this + 4, v3);
      a2 = *(const raven::RavenParameters **)this;
    }
    if (*((_BYTE *)a2 + 576))
    {
      v5 = operator new();
      v6 = *(_QWORD *)this;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)v5 = v5 + 8;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_DWORD *)(v5 + 56) = 1065353216;
      *(_QWORD *)(v5 + 64) = v6;
      v9 = *((_QWORD *)this + 5);
      v8 = (uint64_t *)((char *)this + 40);
      v7 = v9;
      *v8 = v5;
      if (v9)
        sub_18D20B03C((uint64_t)v8, v7);
    }
  }
}

uint64_t raven::RavenSolutionPostprocessor::ShouldBeClamped(raven::RavenSolutionPostprocessor *this, const raven::RavenSolutionEvent *a2, int8x16_t a3, int8x16_t a4)
{
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  unsigned __int8 v149;
  __int16 v150;
  void *v151;
  __int128 v152;
  uint64_t v153;
  double *v154;
  uint64_t v155;
  void *v156;
  __int128 v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163[3];
  float64x2_t v164;
  uint64_t v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  a3.i64[0] = 0x4000A1A34BF0F1F5;
  a4.i64[0] = 1.0;
  if (*((_BYTE *)this + 1296))
    v5 = 2.07892474;
  else
    v5 = 1.0;
  if (!*(_BYTE *)(*((_QWORD *)this + 1) + 3805))
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      v13 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v134 = v14 + (double)v13;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - clamping disabled.", v15, v16, v17, v18, v19, SLOBYTE(v134));
    }
    return 0;
  }
  if (*((_BYTE *)a2 + 209) != 2)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      v20 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v135 = v21 + (double)v20;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - solution not healthy.", v22, v23, v24, v25, v26, SLOBYTE(v135));
    }
    return 0;
  }
  if (!*((_BYTE *)a2 + 1264))
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      v27 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v136 = v28 + (double)v27;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - user position invalid.", v29, v30, v31, v32, v33, SLOBYTE(v136));
    }
    return 0;
  }
  if (*((_BYTE *)a2 + 2128) == 9)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      v6 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v133 = v7 + (double)v6;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - airborne.", v8, v9, v10, v11, v12, SLOBYTE(v133));
    }
    return 0;
  }
  v35 = *((_QWORD *)this + 7);
  if (!v35)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      v45 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v138 = v46 + (double)v45;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - no prior solution.", v47, v48, v49, v50, v51, SLOBYTE(v138));
    }
    return 0;
  }
  v161 = CNTimeSpan::operator-((uint64_t)a2 + 1168, (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)+ (((unint64_t)(v35 + *((_QWORD *)this + 6) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 864 * (((_DWORD)v35 + *((_DWORD *)this + 12) - 1) & 0xF)), a3, a4);
  v162 = v36;
  v37 = sub_18D03F608((double *)&v161, (double *)this + 165);
  if (v37)
  {
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v37))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      v38 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v137 = v39 + (double)v38;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - previous solution too old.", v40, v41, v42, v43, v44, SLOBYTE(v137));
    }
    return 0;
  }
  v164 = *(float64x2_t *)((char *)a2 + 1272);
  v165 = *((_QWORD *)a2 + 161);
  if (cnnavigation::ECEFToLLA(&v164, 1, v163, 0, (uint64_t)&v161))
  {
    LOWORD(v161) = 12;
    LOBYTE(v156) = 2;
    v52 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v139 = v53 + (double)v52;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - ECEF to LLA conversion failed.", v54, v55, v56, v57, v58, SLOBYTE(v139));
    return 0;
  }
  sub_18D0758F4((uint64_t)&v161, v163[0], v163[1]);
  if (!(_BYTE)v162)
  {
    LOWORD(v156) = 12;
    LOBYTE(v151) = 2;
    v70 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v141 = v71 + (double)v70;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v156, (unsigned __int8 *)&v151, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - Jenu computation failed.", v72, v73, v74, v75, v76, SLOBYTE(v141));
    return 0;
  }
  v158 = 0x300000003;
  v156 = &unk_1E25C78E0;
  v157 = xmmword_18D30BB60;
  v159 = &v160;
  if (!sub_18D0733DC((uint64_t)a2 + 1168, (uint64_t)&v156))
  {
    LOWORD(v151) = 12;
    LOBYTE(v150) = 2;
    v77 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v142 = v78 + (double)v77;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v151, (unsigned __int8 *)&v150, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - Get user ECEF position covariance failed.", v79, v80, v81, v82, v83, SLOBYTE(v142));
    return 0;
  }
  v153 = 0x300000003;
  v151 = &unk_1E25C78E0;
  v152 = xmmword_18D30BB60;
  v154 = (double *)&v155;
  v60 = sub_18D04BB5C((uint64_t)&v161, (uint64_t)&v156, (uint64_t)&v151);
  if ((v60 & 1) == 0)
  {
    v150 = 12;
    v149 = 2;
    v84 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v143 = v85 + (double)v84;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - variance rotation failed.", v86, v87, v88, v89, v90, SLOBYTE(v143));
    return 0;
  }
  v61 = sqrt(*v154 + v154[SHIDWORD(v152) + 1]);
  if (v61 <= 0.0)
  {
    v150 = 12;
    v149 = 2;
    v91 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v144 = v92 + (double)v91;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - hunc not positive: %.3f.", v93, v94, v95, v96, v97, SLOBYTE(v144));
    return 0;
  }
  v62 = *((_QWORD *)this + 6);
  if (*((unsigned __int8 *)a2 + 2320) - 1 >= 2)
  {
    v98 = *((_QWORD *)this + 3);
    if (*((_QWORD *)this + 4) != v98)
    {
      v99 = (_QWORD *)(v98 + 8 * (v62 >> 4));
      v100 = *v99 + 864 * (*((_QWORD *)this + 6) & 0xFLL);
      v101 = *(_QWORD *)(v98 + (((*((_QWORD *)this + 7) + v62) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 864 * ((*((_DWORD *)this + 14) + (_DWORD)v62) & 0xF);
      if (v100 != v101)
      {
        while (1)
        {
          v60 = raven::RavenSolutionPostprocessor::HorizontalDistanceCheck(v5, v61, v60, (uint64_t)a2 + 1168, v100, (uint64_t)&v161);
          if ((v60 & 1) == 0)
            break;
          v100 += 864;
          if (v100 - *v99 == 13824)
          {
            v102 = v99[1];
            ++v99;
            v100 = v102;
          }
          if (v100 == v101)
            goto LABEL_43;
        }
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
        {
          v150 = 12;
          v149 = 0;
          v126 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v148 = v127 + (double)v126;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - non-static distance check.", v128, v129, v130, v131, v132, SLOBYTE(v148));
        }
        return 0;
      }
    }
  }
  else
  {
    v60 = raven::RavenSolutionPostprocessor::HorizontalDistanceCheck(v5, v61, v60, (uint64_t)a2 + 1168, *(_QWORD *)(*((_QWORD *)this + 3) + (((v62 + *((_QWORD *)this + 7) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 864 * (((_DWORD)v62 + *((_DWORD *)this + 14) - 1) & 0xF), (uint64_t)&v161);
    if ((v60 & 1) == 0)
    {
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
      {
        v150 = 12;
        v149 = 0;
        v63 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v140 = v64 + (double)v63;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - static distance check.", v65, v66, v67, v68, v69, SLOBYTE(v140));
      }
      return 0;
    }
  }
LABEL_43:
  if (*((_BYTE *)a2 + 1344))
  {
    v103 = *((double *)a2 + 169);
    if (v103 >= 0.0)
    {
      v104 = *((double *)a2 + 173);
      if (v104 > 0.0 && (v103 > v5 * 3.634812 || fmax(v103 + -2.0, 0.0) / sqrt(v104) > v5 * 0.888064165))
      {
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
        {
          v150 = 12;
          v149 = 0;
          v105 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v145 = v106 + (double)v105;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - speed check.", v107, v108, v109, v110, v111, SLOBYTE(v145));
        }
        return 0;
      }
    }
  }
  if (*(_BYTE *)this == 1 && *((_BYTE *)a2 + 2216) == 5 && *((_BYTE *)a2 + 2128) == 6)
  {
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
    {
      v150 = 12;
      v149 = 0;
      v112 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v146 = v113 + (double)v112;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - swimming.", v114, v115, v116, v117, v118, SLOBYTE(v146));
    }
    return 0;
  }
  if (*((unsigned __int8 *)a2 + 2320) - 1 >= 2)
  {
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
    {
      v150 = 12;
      v149 = 0;
      v119 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v147 = v120 + (double)v119;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - moving.", v121, v122, v123, v124, v125, SLOBYTE(v147));
    }
    return 0;
  }
  return 1;
}

uint64_t raven::RavenSolutionPostprocessor::HorizontalDistanceCheck(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char *v15;
  char v17;
  unsigned __int8 v18;
  __int16 v19;
  double v20;
  double v21;
  float64x2_t v22;
  double v23;

  v22 = vsubq_f64(*(float64x2_t *)(a5 + 104), *(float64x2_t *)(a4 + 104));
  v23 = *(double *)(a5 + 120) - *(double *)(a4 + 120);
  v8 = sub_18D056ECC(a6, v22.f64, &v20);
  if (!v8)
  {
    v19 = 12;
    v18 = 2;
    v15 = "Clamping check failed: Position difference rotation.";
    goto LABEL_8;
  }
  v14 = sqrt(v21 * v21 + v20 * v20);
  if (*(_QWORD *)&v14 >> 52 >= 0x7FFuLL)
  {
    v19 = 12;
    v18 = 2;
    v15 = "Clamping check failed: Position difference not a positive number.";
    goto LABEL_8;
  }
  if (v14 > a1 * 8.86651914)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v8))
      return 0;
    v19 = 12;
    v18 = 0;
    v15 = "RavenSolutionPostprocessor: Not clamping - distance check.";
LABEL_8:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, v15, v9, v10, v11, v12, v13, v17);
    return 0;
  }
  if (fmax(v14 + -4.26495435, 0.0) / a2 > a1 * 0.832554611)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v8))
      return 0;
    v19 = 12;
    v18 = 0;
    v15 = "RavenSolutionPostprocessor: Not clamping - distance uncertainty check.";
    goto LABEL_8;
  }
  return 1;
}

BOOL sub_18D056ECC(uint64_t a1, double *a2, double *a3)
{
  int v3;
  double *v4;
  uint64_t v5;
  double *v6;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(double **)(a1 + 48);
    v5 = *(int *)(a1 + 36);
    *a3 = v4[v5] * a2[1] + *v4 * *a2 + v4[2 * v5] * a2[2];
    v6 = &v4[2 * (int)v5];
    a3[1] = v4[(int)v5 + 1] * a2[1] + v4[1] * *a2 + v6[1] * a2[2];
    a3[2] = v4[(int)v5 + 2] * a2[1] + v4[2] * *a2 + v6[2] * a2[2];
  }
  return v3 != 0;
}

uint64_t sub_18D056F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = &unk_1E25B8F40;
  if (*(char *)(a1 + 1319) < 0)
    operator delete(*(void **)(a1 + 1296));
  if (*(char *)(a1 + 1295) < 0)
    operator delete(*(void **)(a1 + 1272));
  v5 = (void **)(a1 + 1248);
  sub_18D1C59AC(&v5);
  v5 = (void **)(a1 + 1224);
  sub_18D1C59AC(&v5);
  v5 = (void **)(a1 + 1200);
  sub_18D1C59AC(&v5);
  *(_QWORD *)(a1 + 848) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 800) = &unk_1E25C7160;
  v2 = *(_QWORD *)(a1 + 840);
  *(_QWORD *)(a1 + 840) = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 800) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 552) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 256) = &unk_1E25C7160;
  v3 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = &unk_1E25C5E70;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 256) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 8) = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D057070(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E25B8F00;
  if (*(char *)(a1 + 2391) < 0)
    operator delete(*(void **)(a1 + 2368));
  if (*(char *)(a1 + 2367) < 0)
    operator delete(*(void **)(a1 + 2344));
  v3 = (void **)(a1 + 2320);
  sub_18D1C59AC(&v3);
  v3 = (void **)(a1 + 2296);
  sub_18D1C59AC(&v3);
  v3 = (void **)(a1 + 2272);
  sub_18D1C59AC(&v3);
  *(_QWORD *)(a1 + 2048) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 1208) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 1088) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 968) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 128) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 8) = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D05711C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E25B8FC0;
  if (*(char *)(a1 + 1751) < 0)
    operator delete(*(void **)(a1 + 1728));
  if (*(char *)(a1 + 1727) < 0)
    operator delete(*(void **)(a1 + 1704));
  v3 = (void **)(a1 + 1680);
  sub_18D1C59AC(&v3);
  v3 = (void **)(a1 + 1656);
  sub_18D1C59AC(&v3);
  v3 = (void **)(a1 + 1632);
  sub_18D1C59AC(&v3);
  *(_QWORD *)(a1 + 1424) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 872) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 768) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 664) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 112) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 8) = &unk_1E25C5E70;
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleTimeMarkEvent(raven::RavenConvergenceEstimator *this, const raven::TimeMarkEvent *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v8;
  double v9;
  double v10;
  int8x16_t v11;
  cnprint::CNPrinter *v12;
  int8x16_t v13;
  double v14;
  double v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  int8x16_t v33;
  BOOL v34;
  int v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  double v42;
  int8x16_t v43;
  _BOOL4 v44;
  int8x16_t *v45;
  _BOOL8 EstimatorPredictAndUpdateArguments;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v56;
  uint64_t v57;
  unsigned __int8 v58;
  __n128 v59[8];
  int8x16_t v60;
  _QWORD v61[2];
  int8x16_t v62;
  uint64_t v63[2];
  uint64_t v64[2];
  _QWORD v65[2];

  v2 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 136) = v2;
  v3 = *(_OWORD *)((char *)a2 + 40);
  v4 = *(_OWORD *)((char *)a2 + 56);
  v5 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 200) = v5;
  *(_OWORD *)((char *)this + 184) = v4;
  *(_OWORD *)((char *)this + 168) = v3;
  if (!*((_BYTE *)this + 57))
    return 32;
  if (!*((_BYTE *)this + 58))
    return 0;
  v8 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
  v10 = v9;
  v65[0] = v8;
  *(double *)&v65[1] = v9;
  v59[0] = *((__n128 *)this + 5);
  v12 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v65, v59, (int8x16_t)v59[0], v11);
  v15 = v14 + (double)(uint64_t)v12;
  if (v15 >= 0.0)
  {
    v27 = *((_QWORD *)this + 146);
    v13.i64[0] = *(_QWORD *)(v27 + 872);
    v28 = vcvtpd_s64_f64(v15 / *(double *)v13.i64);
    *(_OWORD *)((char *)this + 328) = 0u;
    *(_OWORD *)((char *)this + 344) = 0u;
    *(_OWORD *)((char *)this + 360) = 0u;
    *(_OWORD *)((char *)this + 376) = 0u;
    *(_OWORD *)((char *)this + 392) = 0u;
    *(_OWORD *)((char *)this + 408) = 0u;
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *(_OWORD *)((char *)this + 456) = 0u;
    *(_OWORD *)((char *)this + 472) = 0u;
    *(_OWORD *)((char *)this + 488) = 0u;
    *(_OWORD *)((char *)this + 504) = 0u;
    *(_OWORD *)((char *)this + 520) = 0u;
    *(_OWORD *)((char *)this + 536) = 0u;
    *(_OWORD *)((char *)this + 552) = 0u;
    *(_OWORD *)((char *)this + 568) = 0u;
    *(_OWORD *)((char *)this + 584) = 0u;
    *(_OWORD *)((char *)this + 600) = 0u;
    *(_OWORD *)((char *)this + 616) = 0u;
    *(_OWORD *)((char *)this + 632) = 0u;
    *(_OWORD *)((char *)this + 648) = 0u;
    *(_OWORD *)((char *)this + 664) = 0u;
    *(_OWORD *)((char *)this + 680) = 0u;
    *(_OWORD *)((char *)this + 696) = 0u;
    *(_OWORD *)((char *)this + 708) = 0u;
    v29 = *(_QWORD *)(v27 + 872);
    v64[0] = 0;
    v64[1] = 0;
    CNTimeSpan::SetTimeSpan(v64, 0, (int8x16_t)v29, v13);
    v30.i64[0] = *(_QWORD *)(v27 + 880);
    v63[0] = 0;
    v63[1] = 0;
    CNTimeSpan::SetTimeSpan(v63, 0, v30, v31);
    v26 = 0;
    v34 = __OFSUB__(v28, 1);
    v35 = v28 - 1;
    if (v35 < 0 == v34)
    {
      if (v8)
        v36 = 1;
      else
        v36 = (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v37 = v36;
      v56 = (__n128)vdupq_n_s64(0x7FF8000000000000uLL);
      while (1)
      {
        if (((v62 = *((int8x16_t *)this + 5),
               v61[0] = CNTimeSpan::operator+((uint64_t)&v62, v64, v62, v33),
               v61[1] = v38,
               (v41 = CNTimeSpan::operator+((uint64_t)v61, v63, v39, v40)) != 0)
           || (*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (v37 & 1) != 0)
        {
          v44 = v41 == v8 ? v10 <= v42 : v41 > v8;
        }
        else
        {
          v44 = v10 <= v42;
        }
        v45 = (int8x16_t *)(v44 ? v65 : v61);
        v60 = *v45;
        v59[0] = 0uLL;
        *(__n128 *)((char *)&v59[1] + 8) = v56;
        *(__n128 *)((char *)&v59[2] + 8) = v56;
        EstimatorPredictAndUpdateArguments = raven::RavenConvergenceEstimator::GetEstimatorPredictAndUpdateArguments((uint64_t)this, (uint64_t)&v62, &v60, (uint64_t)v59, v56.n128_f64[0], v43);
        if (!EstimatorPredictAndUpdateArguments)
          break;
        v57 = raven::RavenConvergenceEstimator::PredictAndUpdate((uint64_t)this, v59);
        v26 |= v57;
        if ((sub_18D057F50(&v57) & 1) != 0)
          return v26;
        if (v35)
          v47 = v44;
        else
          v47 = 1;
        --v35;
        if ((v47 & 1) != 0)
          goto LABEL_42;
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)EstimatorPredictAndUpdateArguments) <= 1)
      {
        LOWORD(v57) = 12;
        v58 = 1;
        v48 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v65, "Could not get predict and update arguments");
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v54) = v48;
        else
          v54 = *((_QWORD *)this + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v57, &v58, "%s", v49, v50, v51, v52, v53, v54);
      }
    }
LABEL_42:
    raven::RavenEstimator::StoreHistoricalSolution(this, v32);
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
    {
      LOWORD(v64[0]) = 12;
      LOBYTE(v63[0]) = 1;
      v59[0].n128_u64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      v59[0].n128_u64[1] = v16;
      v17 = *((double *)this + 11) + (double)*((uint64_t *)this + 10);
      v18 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v59, "Estimator time is greater than event time,%.3lf > %.3lf", v17, v19 + (double)v18);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v25) = (_BYTE)this - 72;
      else
        v25 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v64, (unsigned __int8 *)v63, "%s", v20, v21, v22, v23, v24, v25);
    }
    return 64;
  }
  return v26;
}

void sub_18D057530(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t CurrentTime;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  double v69;
  int8x16_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[96];
  __int128 v74;
  double v75;
  _BYTE __src[1064];
  void *__p;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[1064];
  double v87[108];
  _BYTE v88[393];
  uint64_t v89;

  v8 = *a2;
  sub_18D05822C((uint64_t)&v72, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v89 = raven::RavenPNTEstimator::HandleTimeMarkEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::TimeMarkEvent *)&v72);
  v9 = (cnprint::CNPrinter *)sub_18D057F50(&v89);
  if ((_DWORD)v9)
  {
    if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      LOWORD(v74) = 12;
      LOBYTE(v75) = 1;
      *(_QWORD *)__src = (*(uint64_t (**)(uint64_t *))(v72 + 16))(&v72);
      *(_QWORD *)&__src[8] = v10;
      (*(void (**)(void **__return_ptr, uint64_t *))(v72 + 24))(&__p, &v72);
      v16 = v79 >= 0 ? &__p : (void **)__p;
      v17 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Error handling event of type %s,code,%d", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v17;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)&v75, "%s", v18, v19, v20, v21, v22, v23);
      if (SHIBYTE(v79) < 0)
        operator delete(__p);
    }
    v24 = v89;
    v25 = v89;
    if ((v89 & 4) != 0)
    {
      *(_WORD *)__src = 12;
      LOBYTE(v74) = 2;
      __p = (void *)(*(uint64_t (**)(uint64_t *))(v72 + 16))(&v72);
      v78 = v26;
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&__p, "Resetting filter due to prediction error", v27, v28, v29, v30, v31, v71);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v37) = v8 - 16;
      else
        v37 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v74, "%s", v32, v33, v34, v35, v36, v37);
      v25 = v89;
    }
    if ((v25 & 0x1C00) != 0)
    {
      *(_WORD *)__src = 12;
      LOBYTE(v74) = 2;
      __p = (void *)(*(uint64_t (**)(uint64_t *))(v72 + 16))(&v72);
      v78 = v38;
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&__p, "Resetting filter due to FSDI error", v39, v40, v41, v42, v43, v71);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v49) = v8 - 16;
      else
        v49 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v74, "%s", v44, v45, v46, v47, v48, v49);
      LODWORD(v50) = 1;
    }
    else
    {
      v50 = (v24 >> 2) & 1;
    }
  }
  else
  {
    LODWORD(v50) = 0;
  }
  if (*(_BYTE *)(v8 + 602) && (v89 & 2) == 0)
  {
    if (!(_DWORD)v50)
      return;
    goto LABEL_26;
  }
  sub_18D0409EC((uint64_t)&__p);
  CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v83 = 0u;
  v82 = 0u;
  v81 = 0u;
  v80 = 0u;
  v78 = CurrentTime;
  v79 = v52;
  v84 = 0;
  v85 = 0x7FF8000000000000;
  raven::RavenPNTEstimator::GetRavenStatus((raven::RavenPNTEstimator *)(v8 + 544), (uint64_t)__src);
  memcpy(v86, __src, sizeof(v86));
  if (v86[104] == *(unsigned __int8 *)(v8 + 600))
  {
    raven::RavenPNTEstimator::GetRavenSolution((raven::RavenPNTEstimator *)(v8 + 544), (uint64_t)__src);
    memcpy(v87, __src, sizeof(v87));
    raven::RavenEstimator::GetRavenActivity((raven::RavenEstimator *)(v8 + 544), (uint64_t)__src);
    memcpy(v88, __src, sizeof(v88));
    if (v86[105] == 1)
    {
      LOWORD(v74) = 12;
      LOBYTE(v75) = 2;
      *(_QWORD *)__src = (*(uint64_t (**)(uint64_t *))(v72 + 16))(&v72);
      *(_QWORD *)&__src[8] = v55;
      v61 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Estimator unhealthy; resetting...",
              v56,
              v57,
              v58,
              v59,
              v60,
              v71);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v67) = v61;
      else
        v67 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)&v75, "%s", v62, v63, v64, v65, v66, v67);
      LODWORD(v50) = 1;
    }
    else
    {
      if (LOBYTE(v87[102]))
        v68 = v50;
      else
        v68 = 1;
      if ((v68 & 1) == 0)
      {
        v69 = v87[105];
        if (v87[105] > 0.0)
        {
          *(double *)v53.i64 = v87[103];
          *(_OWORD *)__src = 0uLL;
          CNTimeSpan::SetTimeSpan((uint64_t *)__src, 0, v53, v54);
          v75 = sqrt(v69);
          v74 = *(_OWORD *)__src;
          sub_18D05D1F4((uint64_t)&__p, (uint64_t)v73, &v74, (uint64_t *)&v75, *(int8x16_t *)__src, v70);
LABEL_44:
          sub_18D05CEF4(v8, (uint64_t *)&__p);
          return;
        }
        LODWORD(v50) = 0;
      }
    }
    sub_18D05D360((uint64_t)&__p, (uint64_t)v73, v53, v54);
    if ((_DWORD)v50)
    {
      v86[105] = 1;
      raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)(v8 + 544));
    }
    goto LABEL_44;
  }
  if ((_DWORD)v50)
LABEL_26:
    raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)(v8 + 544));
}

void sub_18D057920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18D05795C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *p_p;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  cnprint::CNPrinter *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  cnprint::CNPrinter *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t CurrentTime;
  uint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  double v95;
  int8x16_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[96];
  __int128 v100;
  double v101;
  _BYTE __src[1064];
  uint64_t v103;
  void *__p;
  _QWORD v105[303];

  v8 = *a2;
  v9 = sub_18D05822C((uint64_t)&v98, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) == 0)
  {
    LOWORD(v100) = 12;
    LOBYTE(v103) = 2;
    *(_QWORD *)__src = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
    *(_QWORD *)&__src[8] = v22;
    (*(void (**)(void **__return_ptr, uint64_t *))(v98 + 24))(&__p, &v98);
    if (v105[1] >= 0)
      p_p = &__p;
    else
      p_p = __p;
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "RavenConvergenceEstimatorActiveObject not configured, cannot handle event, %s", v23, v24, v25, v26, v27, (uint64_t)p_p);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v34) = v8 - 16;
    else
      v34 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v103, "%s", v29, v30, v31, v32, v33, v34);
    if (SHIBYTE(v105[1]) < 0)
      operator delete(__p);
    return;
  }
  if (!*(_BYTE *)(v8 + 3058) && *(_BYTE *)(v8 + 544))
  {
    v10 = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
    v12 = v11;
    v13 = v11;
    v14 = *(_QWORD *)(v8 + 488);
    v15.i64[0] = *(_QWORD *)(v14 + 832);
    *(double *)v16.i64 = *(double *)(v14 + 896) + *(double *)(v14 + 872) + *(double *)v15.i64;
    v105[0] = 0;
    __p = 0;
    CNTimeSpan::SetTimeSpan((uint64_t *)&__p, 0, v16, v15);
    v19 = CNTimeSpan::operator+(v8 + 552, &__p, v17, v18);
    if (v10)
      v21 = 1;
    else
      v21 = (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (v21 && (v19 || (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v10 != v19)
    {
      if (v10 >= v19)
      {
LABEL_29:
        *(_BYTE *)(v8 + 544) = 0;
        *(_QWORD *)(v8 + 552) = 0;
        *(_QWORD *)(v8 + 560) = 0xFFF0000000000000;
        sub_18D0409EC((uint64_t)&__p);
        memcpy((void *)(v8 + 576), v105, 0x971uLL);
        goto LABEL_30;
      }
    }
    else if (v13 > v20)
    {
      goto LABEL_29;
    }
    __p = &unk_1E25C2B48;
    memcpy(v105, (const void *)(v8 + 576), 0x971uLL);
    BYTE1(v105[25]) = 1;
    v35 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::RavenSolutionEvent *)&__p);
    if ((_DWORD)v35 && cnprint::CNPrinter::GetLogLevel(v35) <= 1)
    {
      LOWORD(v100) = 12;
      LOBYTE(v103) = 1;
      *(_QWORD *)__src = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
      *(_QWORD *)&__src[8] = v36;
      v42 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Could not initialize from external solution", v37, v38, v39, v40, v41, v97);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v48) = v42;
      else
        v48 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v103, "%s", v43, v44, v45, v46, v47, v48);
    }
    goto LABEL_29;
  }
LABEL_30:
  v103 = raven::RavenConvergenceEstimator::HandleTimeMarkEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::TimeMarkEvent *)&v98);
  v49 = (cnprint::CNPrinter *)sub_18D057F50(&v103);
  if (!(_DWORD)v49)
    goto LABEL_41;
  if (cnprint::CNPrinter::GetLogLevel(v49) <= 1)
  {
    LOWORD(v100) = 12;
    LOBYTE(v101) = 1;
    *(_QWORD *)__src = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
    *(_QWORD *)&__src[8] = v50;
    (*(void (**)(void **__return_ptr, uint64_t *))(v98 + 24))(&__p, &v98);
    v56 = v105[1] >= 0 ? &__p : (void **)__p;
    v57 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Error handling event of type %s,code,%d", v51, v52, v53, v54, v55, (uint64_t)v56);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v63) = v57;
    else
      v63 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v101, "%s", v58, v59, v60, v61, v62, v63);
    if (SHIBYTE(v105[1]) < 0)
      operator delete(__p);
  }
  if ((v103 & 4) != 0)
  {
    *(_WORD *)__src = 12;
    LOBYTE(v100) = 2;
    __p = (void *)(*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
    v105[0] = v65;
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&__p, "Resetting filter due to prediction error", v66, v67, v68, v69, v70, v97);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v76) = v8 - 16;
    else
      v76 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v100, "%s", v71, v72, v73, v74, v75, v76);
    v64 = 1;
  }
  else
  {
LABEL_41:
    v64 = 0;
  }
  if (*(_BYTE *)(v8 + 3058) && (v103 & 2) == 0)
  {
    if (!v64)
      return;
    goto LABEL_49;
  }
  sub_18D0409EC((uint64_t)&__p);
  CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  memset(&v105[2], 0, 72);
  v105[0] = CurrentTime;
  v105[1] = v78;
  v105[11] = 0x7FF8000000000000;
  raven::RavenConvergenceEstimator::GetRavenStatus((raven::RavenConvergenceEstimator *)(v8 + 3000), (uint64_t)__src);
  memcpy(&v105[12], __src, 0x428uLL);
  if (LOBYTE(v105[25]) == *(unsigned __int8 *)(v8 + 3056))
  {
    raven::RavenConvergenceEstimator::GetRavenSolution((raven::RavenConvergenceEstimator *)(v8 + 3000), (uint64_t)__src);
    memcpy(&v105[145], __src, 0x360uLL);
    raven::RavenEstimator::GetRavenActivity((raven::RavenEstimator *)(v8 + 3000), (uint64_t)__src);
    memcpy(&v105[253], __src, 0x189uLL);
    if (BYTE1(v105[25]) == 1)
    {
      LOWORD(v100) = 12;
      LOBYTE(v101) = 2;
      *(_QWORD *)__src = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
      *(_QWORD *)&__src[8] = v81;
      v87 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Estimator unhealthy; resetting...",
              v82,
              v83,
              v84,
              v85,
              v86,
              v97);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v93) = v87;
      else
        v93 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v101, "%s", v88, v89, v90, v91, v92, v93);
      v64 = 1;
    }
    else
    {
      if (LOBYTE(v105[247]))
        v94 = v64;
      else
        v94 = 1;
      if ((v94 & 1) == 0)
      {
        v95 = *(double *)&v105[250];
        if (*(double *)&v105[250] > 0.0)
        {
          v79.i64[0] = v105[248];
          *(_OWORD *)__src = 0uLL;
          CNTimeSpan::SetTimeSpan((uint64_t *)__src, 0, v79, v80);
          v101 = sqrt(v95);
          v100 = *(_OWORD *)__src;
          sub_18D05D1F4((uint64_t)&__p, (uint64_t)v99, &v100, (uint64_t *)&v101, *(int8x16_t *)__src, v96);
LABEL_67:
          sub_18D05CEF4(v8, (uint64_t *)&__p);
          return;
        }
        v64 = 0;
      }
    }
    sub_18D05D360((uint64_t)&__p, (uint64_t)v99, v79, v80);
    if (v64)
    {
      BYTE1(v105[25]) = 1;
      raven::RavenConvergenceEstimator::Reset((raven::RavenConvergenceEstimator *)(v8 + 3000));
    }
    goto LABEL_67;
  }
  if (v64)
LABEL_49:
    raven::RavenConvergenceEstimator::Reset((raven::RavenConvergenceEstimator *)(v8 + 3000));
}

void sub_18D057F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_18D057F50(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&qword_1EE0613F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EE0613F8))
  {
    sub_18D1C569C(&qword_1EE061400, "11111111110101", 0xFFFFFFFFFFFFFFFFLL, 0x30u, 0x31u);
    __cxa_guard_release(&qword_1EE0613F8);
  }
  v3 = qword_1EE061400 & *a1;
  v5 = 0;
  v6 = v3;
  return sub_18D1C58E0(&v6, 0, (uint64_t)&v6, 0xEu, &v5) ^ 1;
}

void sub_18D057FF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE0613F8);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenEstimator::GetRavenActivity@<X0>(raven::RavenEstimator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;

  *(_QWORD *)(a2 + 96) = 0;
  v4 = a2 + 96;
  *(_QWORD *)(a2 + 288) = 0;
  v5 = a2 + 288;
  *(_QWORD *)(a2 + 104) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0x7FF8000000000000;
  *(_QWORD *)(a2 + 296) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_QWORD *)(a2 + 336) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_QWORD *)(a2 + 376) = 0x3FE0000000000000;
  *(_QWORD *)(a2 + 384) = 0x3FE0000000000000;
  *(_BYTE *)(a2 + 392) = 0;
  if (*((_BYTE *)this + 58))
  {
    *(_OWORD *)(a2 + 32) = 0uLL;
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(_OWORD *)(a2 + 64) = 0uLL;
    v6 = *((int8x16_t *)this + 5);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
    *(int8x16_t *)a2 = v6;
    *(_OWORD *)(a2 + 16) = 0uLL;
    result = raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v6, (int8x16_t)0);
    if (*((_BYTE *)this + 1208))
    {
      *(_QWORD *)(v4 + 80) = *((_QWORD *)this + 175);
      v8 = *(_OWORD *)((char *)this + 1368);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)((char *)this + 1352);
      *(_OWORD *)(v4 + 48) = v8;
      *(_OWORD *)(v4 + 64) = *(_OWORD *)((char *)this + 1384);
      v9 = *(_OWORD *)((char *)this + 1336);
      *(_OWORD *)v4 = *(_OWORD *)((char *)this + 1320);
      *(_OWORD *)(v4 + 16) = v9;
    }
    if (*((_BYTE *)this + 1408))
    {
      *(_OWORD *)(a2 + 232) = *((_OWORD *)this + 98);
      *(_OWORD *)(a2 + 248) = *((_OWORD *)this + 99);
      *(_OWORD *)(a2 + 264) = *((_OWORD *)this + 100);
      *(_QWORD *)(a2 + 280) = *((_QWORD *)this + 202);
      *(_OWORD *)(a2 + 184) = *((_OWORD *)this + 95);
      *(_OWORD *)(a2 + 200) = *((_OWORD *)this + 96);
      *(_OWORD *)(a2 + 216) = *((_OWORD *)this + 97);
    }
    if (*((_BYTE *)this + 1776))
    {
      v10 = *((_OWORD *)this + 119);
      *(_OWORD *)v5 = *((_OWORD *)this + 118);
      *(_OWORD *)(v5 + 16) = v10;
      *(_QWORD *)(v5 + 32) = *((_QWORD *)this + 240);
    }
    if (*((_BYTE *)this + 1624))
    {
      *(_QWORD *)(a2 + 360) = *((_QWORD *)this + 221);
      v11 = *(_OWORD *)((char *)this + 1752);
      *(_OWORD *)(a2 + 328) = *(_OWORD *)((char *)this + 1736);
      *(_OWORD *)(a2 + 344) = v11;
    }
    if (*((_BYTE *)this + 1928))
    {
      *(_QWORD *)(a2 + 384) = *((_QWORD *)this + 257);
      *(_OWORD *)(a2 + 368) = *(_OWORD *)((char *)this + 2040);
    }
    if (*((_BYTE *)this + 2368))
      *(_BYTE *)(a2 + 392) = *((_BYTE *)this + 2480);
  }
  else
  {
    v12 = *(_OWORD *)((char *)this + 184);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)(a2 + 48) = v12;
    v13 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(a2 + 80) = v13;
    v14 = *(int8x16_t *)((char *)this + 136);
    v15 = *(int8x16_t *)((char *)this + 152);
    *(int8x16_t *)a2 = v14;
    *(int8x16_t *)(a2 + 16) = v15;
    return raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v14, v15);
  }
  return result;
}

void sub_18D0581F0(int a1, raven::RavenMapVectorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenMapVectorActiveObject *v8;
  _BYTE v9[104];

  v8 = *a2;
  sub_18D05822C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenMapVectorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

__n128 sub_18D05822C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;
  __int16 v33;
  std::bad_cast v34;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven13TimeMarkEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven13TimeMarkEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v34.__vftable = 0;
        std::bad_cast::bad_cast(&v34);
        v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = v29;
    v30 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v30;
    result = *(__n128 *)(v28 + 16);
    v31 = *(_OWORD *)(v28 + 32);
    *(__n128 *)(a1 + 8) = result;
    *(_QWORD *)a1 = &unk_1E25C2218;
    *(_OWORD *)(a1 + 24) = v31;
  }
  else
  {
    v33 = 3;
    v32 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2218;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D05839C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void *sub_18D0583B0()
{
}

BOOL raven::RavenConvergenceEstimator::GetEstimatorPredictAndUpdateArguments(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, double a5, int8x16_t a6)
{
  int8x16_t v10;
  cnprint::CNPrinter *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _OWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v27;
  __int16 v28;

  v10 = *a3;
  *(int8x16_t *)a4 = *a3;
  v11 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)a3, (_QWORD *)a2, v10, a6);
  v13 = v12 + (double)(uint64_t)v11;
  *(double *)(a4 + 16) = v13;
  if (v13 < 0.0)
  {
    if (!cnprint::CNPrinter::GetLogLevel(v11))
    {
      v28 = 12;
      v27 = 0;
      v19 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)a3, "Prediction time is negative,dt,%.2lf,current_estimator_time,%.1lf", *(double *)(a4 + 16), *(double *)(a2 + 8) + (double)*(uint64_t *)a2);
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v25) = v19;
      else
        v25 = *(_QWORD *)(a1 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v20, v21, v22, v23, v24, v25);
    }
  }
  else
  {
    v14 = raven::RavenConvergenceEstimator::AdjustDynamicModelWithMovingStateContraints(a1);
    *(double *)(a4 + 56) = v14;
    *(double *)(a4 + 64) = v14;
    *(double *)(a4 + 72) = v15;
    *(double *)(a4 + 80) = v16;
    *(double *)(a4 + 88) = v16;
    *(double *)(a4 + 96) = v17;
    *(double *)(a4 + 104) = v15 + v14 * 2.0;
    *(double *)(a4 + 112) = v17 + v16 * 2.0;
    v18 = (_OWORD *)(*(_QWORD *)(a1 + 1168) + 792);
    *(_OWORD *)(a4 + 24) = *v18;
    *(_OWORD *)(a4 + 40) = v18[1];
  }
  return v13 >= 0.0;
}

double raven::RavenConvergenceEstimator::AdjustDynamicModelWithMovingStateContraints(uint64_t a1)
{
  uint64_t v2;
  double v3;
  int v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  unsigned __int8 v15;
  __int16 v16;

  v2 = *(_QWORD *)(a1 + 1168);
  v3 = *(double *)(v2 + 216);
  if (*(_BYTE *)(a1 + 1776))
  {
    v4 = *(unsigned __int8 *)(a1 + 1888);
    switch(v4)
    {
      case 3:
        v5 = (_QWORD *)(v2 + 152);
        return *(double *)v5;
      case 2:
        v5 = (_QWORD *)(v2 + 184);
        return *(double *)v5;
      case 1:
        v5 = (_QWORD *)(v2 + 120);
        return *(double *)v5;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    v16 = 12;
    v15 = 1;
    v14 = *(_OWORD *)(a1 + 80);
    v6 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v14, "AdjustDynamicModelWithMovingStateContraints: WARNING: Moving State not yet available.");
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "%s", v7, v8, v9, v10, v11, v12);
  }
  return v3;
}

uint64_t raven::RavenPNTEstimator::GetRavenSolution@<X0>(raven::RavenPNTEstimator *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  int64x2_t *v5;
  int64x2_t v6;
  BOOL v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t result;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  __int128 v23;
  __int128 v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  double *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int8x16_t v42;
  double *v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  unsigned __int8 v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  __int128 *v60;
  int v61;
  int v62;
  int i;
  __int128 v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t v81;
  void *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD v89[3];
  void *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t (**v95)();
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD v105[2];
  int v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD v110[3];
  void *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t (**v116)();
  __int128 v117;
  uint64_t v118;
  double *v119;
  __int128 v120;
  uint64_t v121;
  _QWORD v122[3];
  int64x2_t v123;
  uint64_t v124;
  void *v125;
  __int128 v126;
  uint64_t v127;
  double *v128;
  uint64_t v129;
  _QWORD v130[4];
  uint64_t (**v131)();
  __int128 v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD v135[3];
  void *v136;
  __int128 v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD v141[2];
  int v142;
  _QWORD *v143;
  uint64_t v144;
  void *v145;
  __int128 v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  __int128 v150;
  void *v151;
  __int128 v152;
  uint64_t v153;
  __int128 *v154;
  __int128 v155;
  uint64_t v156;
  _BYTE v157[32];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;

  v4 = 0uLL;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  v5 = (int64x2_t *)(a2 + 264);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 96) = 0;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 104) = v6;
  *(int64x2_t *)(a2 + 120) = v6;
  *(int64x2_t *)(a2 + 136) = v6;
  *(int64x2_t *)(a2 + 152) = v6;
  *(_QWORD *)(a2 + 168) = 0x7FF8000000000000;
  *(_WORD *)(a2 + 176) = 0;
  *(int64x2_t *)(a2 + 184) = v6;
  *(int64x2_t *)(a2 + 200) = v6;
  *(int64x2_t *)(a2 + 216) = v6;
  *(int64x2_t *)(a2 + 232) = v6;
  *(int64x2_t *)(a2 + 248) = v6;
  *(int64x2_t *)(a2 + 264) = v6;
  *(int64x2_t *)(a2 + 280) = v6;
  *(_BYTE *)(a2 + 296) = 0;
  *(int64x2_t *)(a2 + 304) = v6;
  *(int64x2_t *)(a2 + 320) = v6;
  *(int64x2_t *)(a2 + 336) = v6;
  *(int64x2_t *)(a2 + 352) = v6;
  *(_QWORD *)(a2 + 368) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 376) = 0;
  *(int64x2_t *)(a2 + 384) = v6;
  *(int64x2_t *)(a2 + 400) = v6;
  *(int64x2_t *)(a2 + 416) = v6;
  *(int64x2_t *)(a2 + 432) = v6;
  *(_QWORD *)(a2 + 448) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 456) = 0;
  *(int64x2_t *)(a2 + 464) = v6;
  *(int64x2_t *)(a2 + 480) = v6;
  *(int64x2_t *)(a2 + 496) = v6;
  *(int64x2_t *)(a2 + 512) = v6;
  *(int64x2_t *)(a2 + 528) = v6;
  *(int64x2_t *)(a2 + 544) = v6;
  *(int64x2_t *)(a2 + 560) = v6;
  *(_BYTE *)(a2 + 576) = 0;
  *(int64x2_t *)(a2 + 584) = v6;
  *(int64x2_t *)(a2 + 600) = v6;
  *(int64x2_t *)(a2 + 616) = v6;
  *(int64x2_t *)(a2 + 632) = v6;
  *(_QWORD *)(a2 + 648) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 656) = 0;
  *(int64x2_t *)(a2 + 664) = v6;
  *(int64x2_t *)(a2 + 680) = v6;
  *(int64x2_t *)(a2 + 696) = v6;
  *(int64x2_t *)(a2 + 712) = v6;
  *(_QWORD *)(a2 + 728) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 736) = 0;
  *(int64x2_t *)(a2 + 744) = v6;
  *(int64x2_t *)(a2 + 760) = v6;
  *(int64x2_t *)(a2 + 776) = v6;
  *(int64x2_t *)(a2 + 792) = v6;
  *(_QWORD *)(a2 + 808) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 816) = 0;
  *(int64x2_t *)(a2 + 824) = v6;
  *(int64x2_t *)(a2 + 840) = v6;
  *(_QWORD *)(a2 + 856) = 0x7FF8000000000000;
  if (!*((_BYTE *)this + 58) || (v81 = v6, v7 = sub_18D1B8600((uint64_t)this + 15032), v4 = 0uLL, v6 = v81, !v7))
  {
    *(_DWORD *)(a2 + 100) = 0;
    *(_DWORD *)(a2 + 97) = 0;
    *(_DWORD *)(a2 + 178) = 0;
    *(_WORD *)(a2 + 182) = 0;
    *(_DWORD *)(a2 + 300) = 0;
    *(_DWORD *)(a2 + 297) = 0;
    *(_DWORD *)(a2 + 380) = 0;
    *(_DWORD *)(a2 + 377) = 0;
    *(_DWORD *)(a2 + 460) = 0;
    *(_DWORD *)(a2 + 457) = 0;
    *(_DWORD *)(a2 + 580) = 0;
    *(_DWORD *)(a2 + 577) = 0;
    *(_DWORD *)(a2 + 660) = 0;
    *(_DWORD *)(a2 + 657) = 0;
    *(_DWORD *)(a2 + 740) = 0;
    *(_DWORD *)(a2 + 737) = 0;
    *(_DWORD *)(a2 + 820) = 0;
    *(_DWORD *)(a2 + 817) = 0;
    *(_OWORD *)(a2 + 48) = v4;
    *(_OWORD *)(a2 + 64) = v4;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v4;
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 96) = 0;
    *(int64x2_t *)(a2 + 104) = v6;
    *(int64x2_t *)(a2 + 120) = v6;
    *(int64x2_t *)(a2 + 136) = v6;
    *(int64x2_t *)(a2 + 152) = v6;
    *(_QWORD *)(a2 + 168) = 0x7FF8000000000000;
    *(_WORD *)(a2 + 176) = 0;
    *(int64x2_t *)(a2 + 184) = v6;
    *(int64x2_t *)(a2 + 200) = v6;
    *(int64x2_t *)(a2 + 216) = v6;
    *(int64x2_t *)(a2 + 232) = v6;
    *(int64x2_t *)(a2 + 248) = v6;
    *v5 = v6;
    v5[1] = v6;
    *(_BYTE *)(a2 + 296) = 0;
    *(int64x2_t *)(a2 + 304) = v6;
    *(int64x2_t *)(a2 + 320) = v6;
    *(int64x2_t *)(a2 + 336) = v6;
    *(int64x2_t *)(a2 + 352) = v6;
    *(_QWORD *)(a2 + 368) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 376) = 0;
    *(int64x2_t *)(a2 + 384) = v6;
    *(int64x2_t *)(a2 + 400) = v6;
    *(int64x2_t *)(a2 + 416) = v6;
    *(int64x2_t *)(a2 + 432) = v6;
    *(_QWORD *)(a2 + 448) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 456) = 0;
    *(int64x2_t *)(a2 + 464) = v6;
    *(int64x2_t *)(a2 + 480) = v6;
    *(int64x2_t *)(a2 + 496) = v6;
    *(int64x2_t *)(a2 + 512) = v6;
    *(int64x2_t *)(a2 + 528) = v6;
    *(int64x2_t *)(a2 + 544) = v6;
    *(int64x2_t *)(a2 + 560) = v6;
    *(_BYTE *)(a2 + 576) = 0;
    v5[20] = v6;
    v5[21] = v6;
    v5[22] = v6;
    v5[23] = v6;
    *(_QWORD *)(a2 + 648) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 656) = 0;
    v5[25] = v6;
    v5[26] = v6;
    v5[27] = v6;
    v5[28] = v6;
    *(_QWORD *)(a2 + 728) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 736) = 0;
    v5[30] = v6;
    v5[31] = v6;
    v5[32] = v6;
    v5[33] = v6;
    *(_QWORD *)(a2 + 808) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 816) = 0;
    v5[35] = v6;
    v5[36] = v6;
    *(_QWORD *)(a2 + 856) = 0x7FF8000000000000;
    v9 = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 136);
    *(_OWORD *)(a2 + 16) = v9;
    v10 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(a2 + 80) = v10;
    v11 = *(int8x16_t *)((char *)this + 184);
    v12 = *(int8x16_t *)((char *)this + 168);
    *(int8x16_t *)(a2 + 32) = v12;
    *(int8x16_t *)(a2 + 48) = v11;
    return raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v11, v12);
  }
  v150 = *(_OWORD *)((char *)this + 14600);
  v147 = 0x10000001CLL;
  v145 = &unk_1E25C72B0;
  v146 = xmmword_18D319780;
  v148 = &v149;
  sub_18D1C9B64((uint64_t)v141, 28, 28);
  v8 = *((unsigned __int8 *)this + 2536);
  if (!*((_BYTE *)this + 2536))
  {
    sub_18D053AA8((uint64_t)&v145, (uint64_t)this + 14616);
    sub_18D053AA8((uint64_t)v141, (uint64_t)this + 14880);
LABEL_14:
    v159 = 0u;
    v160 = 0u;
    v158 = 0u;
    *(_OWORD *)&v157[16] = 0u;
    v27 = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    v28.i64[1] = *((_QWORD *)&v150 + 1);
    *(_OWORD *)a2 = v150;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 96) = 1;
    v29 = (double *)v148;
    *(_QWORD *)(a2 + 104) = v148[21];
    *(double *)(a2 + 112) = v29[22];
    *(double *)(a2 + 120) = v29[23];
    v30 = v142;
    v31 = v143;
    *(_QWORD *)(a2 + 128) = v143[21 * v142 + 21];
    *(_QWORD *)(a2 + 136) = v31[22 * v30 + 21];
    *(_QWORD *)(a2 + 144) = v31[23 * v30 + 21];
    *(_QWORD *)(a2 + 152) = v31[22 * v30 + 22];
    *(_QWORD *)(a2 + 160) = v31[23 * v30 + 22];
    *(_QWORD *)(a2 + 168) = v31[23 * v30 + 23];
    *(_WORD *)(a2 + 176) = 257;
    *(double *)(a2 + 184) = v29[24];
    if (*((_BYTE *)this + 2536) == 1)
    {
      v133 = 0x100000003;
      v131 = (uint64_t (**)())&unk_1E25C7790;
      v132 = xmmword_18D313070;
      v134 = v135;
      v32 = *((_QWORD *)this + 1831);
      v135[0] = *(_QWORD *)(v32 + 24);
      v135[1] = *(_QWORD *)(v32 + 32);
      v135[2] = *(_QWORD *)(v32 + 40);
      v33 = *(double *)(v32 + 48);
      v34 = *(double *)(v32 + 56);
      v35 = *(double *)(v32 + 64);
      v36 = *(double *)(v32 + 72);
      v37 = sqrt(v34 * v34 + v33 * v33 + v35 * v35 + v36 * v36);
      if (fabs(v37) >= 2.22044605e-16)
      {
        v39 = v33 / v37;
        v40 = v34 / v37;
        v41 = v35 / v37;
        v38 = v36 / v37;
      }
      else
      {
        v38 = 1.0;
        v39 = 0.0;
        v40 = 0.0;
        v41 = 0.0;
      }
      *(double *)v130 = v39;
      *(double *)&v130[1] = v40;
      *(double *)&v130[2] = v41;
      *(double *)&v130[3] = v38;
      cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v130, (uint64_t)&v136);
      v127 = 0x100000003;
      v125 = &unk_1E25C7790;
      v128 = (double *)&v129;
      v126 = xmmword_18D313070;
      sub_18D04BE88((uint64_t)&v125, 0.0);
      v122[0] = &unk_1E25C2C38;
      v122[1] = 0;
      v123 = vdupq_n_s64(0x7FF8000000000000uLL);
      v122[2] = 0;
      v124 = 0x7FF8000000000000;
      if (!sub_18D190038((uint64_t)this + 44440, (double *)&v150, (uint64_t)v122, *(double *)v123.i64, v42))
      {
        v43 = v128;
        *(int64x2_t *)v128 = v123;
        *((_QWORD *)v43 + 2) = v124;
      }
      v118 = 0x100000003;
      v116 = (uint64_t (**)())&unk_1E25C7790;
      v117 = xmmword_18D313070;
      v119 = (double *)&v120;
      v44 = *((_QWORD *)this + 1831);
      v120 = *(_OWORD *)(v44 + 168);
      v121 = *(_QWORD *)(v44 + 184);
      v113 = 0x100000003;
      v111 = &unk_1E25C7790;
      v112 = xmmword_18D313070;
      v114 = &v115;
      sub_18D053B2C((uint64_t)&v136, (uint64_t)&v131, (uint64_t)&v111);
      v108 = 0x100000003;
      v105[0] = &unk_1E25C7790;
      v109 = v110;
      v105[1] = v126;
      v106 = DWORD1(v126) * v126;
      v107 = v126;
      v45 = *v128;
      v46 = v128[1];
      v47 = v128[2];
      v48 = *v119;
      v49 = v119[1];
      v50 = v119[2];
      v51 = v46 * v50 - v47 * v49;
      v52 = v47 * *v119 - *v128 * v50;
      *(double *)v110 = v51;
      *(double *)&v110[1] = v52;
      *(double *)&v110[2] = v45 * v49 - v46 * v48;
      v102 = 0x100000003;
      v100 = &unk_1E25C7790;
      v101 = xmmword_18D313070;
      v103 = &v104;
      sub_18D0540FC((uint64_t)&v111, (uint64_t)v105, (uint64_t)&v100);
      v97 = 0x100000003;
      v95 = (uint64_t (**)())&unk_1E25C7790;
      v96 = xmmword_18D313070;
      v98 = &v99;
      *(_QWORD *)&v157[24] = 0x100000134;
      *(_QWORD *)v157 = &unk_1E25C7640;
      *(_OWORD *)&v157[8] = xmmword_18D3130C0;
      *(_QWORD *)&v158 = (char *)&v158 + 8;
      v153 = 0x100000003;
      v151 = &unk_1E25C7790;
      v152 = xmmword_18D313070;
      v154 = &v155;
      sub_18D159EE0((uint64_t)&v100, (uint64_t)&v95, (uint64_t)v157, (uint64_t)&v151, "2");
      *(_QWORD *)(a2 + 184) = v53;
      v153 = 0x300000001;
      v151 = &unk_1E25C6C20;
      v152 = xmmword_18D314670;
      v154 = &v155;
      v155 = *(_OWORD *)(v148 + 25);
      v156 = v148[27];
      v54 = atomic_load((unsigned __int8 *)&qword_1ECF23048);
      if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23048))
      {
        *(_QWORD *)&v157[24] = 0x300000001;
        *(_QWORD *)v157 = &unk_1E25C6C50;
        *(_QWORD *)&v158 = (char *)&v158 + 8;
        *(_OWORD *)&v157[8] = xmmword_18D314670;
        *((_QWORD *)&v158 + 1) = 0x400000003;
        LODWORD(v159) = 5;
        sub_18D16169C((uint64_t)v157, (uint64_t)&unk_1ECF232A8);
        __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF232A8, &dword_18D038000);
        __cxa_guard_release(&qword_1ECF23048);
      }
      sub_18D04F764((uint64_t)v157, (uint64_t)v141, (uint64_t)&unk_1ECF232A8, (uint64_t)&unk_1ECF232A8);
      sub_18D159B20((uint64_t)&v95, (uint64_t)v157);
      *(_QWORD *)&v157[24] = 0x300000001;
      *(_QWORD *)v157 = &unk_1E25C6C20;
      *(_OWORD *)&v157[8] = xmmword_18D314670;
      *(_QWORD *)&v158 = (char *)&v158 + 8;
      sub_18D053B2C((uint64_t)&v151, (uint64_t)&v95, (uint64_t)v157);
      v55 = DWORD1(v152);
      v56 = v152;
      v87 = 0x100000003;
      v82 = &unk_1E25C7790;
      v88 = v89;
      v83 = DWORD1(v152);
      v84 = v152;
      v85 = v152 * DWORD1(v152);
      v86 = DWORD1(v152);
      if (DWORD1(v152))
      {
        v57 = 0;
        v58 = 0;
        v59 = HIDWORD(v152);
        v60 = v154;
        do
        {
          v61 = v57;
          v62 = v58;
          for (i = v56; i; --i)
          {
            v89[v62] = *((_QWORD *)v60 + v61);
            v62 += v55;
            ++v61;
          }
          ++v58;
          v57 += v59;
        }
        while (v58 != v55);
      }
      v92 = 0x100000001;
      v90 = &unk_1E25C6A40;
      *(_QWORD *)&v64 = 0x100000001;
      *((_QWORD *)&v64 + 1) = 0x100000001;
      v91 = v64;
      v93 = &v94;
      sub_18D053B2C((uint64_t)v157, (uint64_t)&v82, (uint64_t)&v90);
      *(_QWORD *)(a2 + 216) = *v93;
      v29 = (double *)v148;
      v30 = v142;
      v31 = v143;
    }
    else
    {
      *(_QWORD *)(a2 + 216) = v31[24 * v30 + 24];
    }
    *(double *)(a2 + 192) = v29[25];
    *(double *)(a2 + 200) = v29[26];
    *(double *)(a2 + 208) = v29[27];
    *(_QWORD *)(a2 + 224) = v31[25 * v30 + 24];
    *(_QWORD *)(a2 + 232) = v31[26 * v30 + 24];
    *(_QWORD *)(a2 + 240) = v31[27 * v30 + 24];
    *(_QWORD *)(a2 + 248) = v31[25 * v30 + 25];
    v65 = &v31[26 * v30];
    *(_QWORD *)(a2 + 256) = v65[25];
    v66 = &v31[27 * v30];
    *(_QWORD *)(a2 + 264) = v66[25];
    *(_QWORD *)(a2 + 272) = v65[26];
    *(_QWORD *)(a2 + 280) = v66[26];
    *(_QWORD *)(a2 + 288) = v66[27];
    *(_BYTE *)(a2 + 296) = 1;
    *(double *)(a2 + 304) = *v29;
    *(double *)(a2 + 312) = v29[1];
    *(double *)(a2 + 320) = v29[2];
    *(_QWORD *)(a2 + 328) = *v31;
    v67 = &v31[v30];
    *(_QWORD *)(a2 + 336) = *v67;
    *(_QWORD *)(a2 + 344) = v31[2 * v30];
    *(_QWORD *)(a2 + 352) = v67[1];
    v68 = &v31[2 * v30];
    *(_QWORD *)(a2 + 360) = v68[1];
    *(_QWORD *)(a2 + 368) = v68[2];
    *(_BYTE *)(a2 + 376) = 1;
    *(double *)(a2 + 384) = v29[3];
    *(double *)(a2 + 392) = v29[4];
    *(double *)(a2 + 400) = v29[5];
    *(_QWORD *)(a2 + 408) = v31[3 * v30 + 3];
    *(_QWORD *)(a2 + 416) = v31[4 * v30 + 3];
    *(_QWORD *)(a2 + 424) = v31[5 * v30 + 3];
    *(_QWORD *)(a2 + 432) = v31[4 * v30 + 4];
    v69 = &v31[5 * v30];
    *(_QWORD *)(a2 + 440) = v69[4];
    *(_QWORD *)(a2 + 448) = v69[5];
    *(_BYTE *)(a2 + 456) = 1;
    *(double *)(a2 + 464) = v29[6];
    *(double *)(a2 + 472) = v29[7];
    *(double *)(a2 + 480) = v29[8];
    *(double *)(a2 + 488) = v29[9];
    *(_QWORD *)(a2 + 496) = v31[6 * v30 + 6];
    *(_QWORD *)(a2 + 504) = v31[7 * v30 + 6];
    *(_QWORD *)(a2 + 512) = v31[8 * (uint64_t)v30 + 6];
    *(_QWORD *)(a2 + 520) = v31[9 * v30 + 6];
    *(_QWORD *)(a2 + 528) = v31[7 * v30 + 7];
    v70 = &v31[8 * v30];
    *(_QWORD *)(a2 + 536) = v70[7];
    v71 = &v31[9 * v30];
    *(_QWORD *)(a2 + 544) = v71[7];
    *(_QWORD *)(a2 + 552) = v70[8];
    *(_QWORD *)(a2 + 560) = v71[8];
    *(_QWORD *)(a2 + 568) = v71[9];
    *(_BYTE *)(a2 + 576) = 1;
    *(double *)(a2 + 584) = v29[10];
    *(double *)(a2 + 592) = v29[11];
    *(double *)(a2 + 600) = v29[12];
    *(_QWORD *)(a2 + 608) = v31[10 * v30 + 10];
    *(_QWORD *)(a2 + 616) = v31[11 * v30 + 10];
    *(_QWORD *)(a2 + 624) = v31[12 * v30 + 10];
    *(_QWORD *)(a2 + 632) = v31[11 * v30 + 11];
    v72 = &v31[12 * v30];
    *(_QWORD *)(a2 + 640) = v72[11];
    *(_QWORD *)(a2 + 648) = v72[12];
    *(_BYTE *)(a2 + 656) = 1;
    *(double *)(a2 + 664) = v29[13];
    *(double *)(a2 + 672) = v29[14];
    *(double *)(a2 + 680) = v29[15];
    *(_QWORD *)(a2 + 688) = v31[13 * v30 + 13];
    *(_QWORD *)(a2 + 696) = v31[14 * v30 + 13];
    *(_QWORD *)(a2 + 704) = v31[15 * v30 + 13];
    *(_QWORD *)(a2 + 712) = v31[14 * v30 + 14];
    v73 = &v31[15 * v30];
    *(_QWORD *)(a2 + 720) = v73[14];
    *(_QWORD *)(a2 + 728) = v73[15];
    *(_BYTE *)(a2 + 736) = 1;
    *(double *)(a2 + 744) = v29[16];
    *(double *)(a2 + 752) = v29[17];
    *(double *)(a2 + 760) = v29[18];
    *(_QWORD *)(a2 + 768) = v31[16 * (uint64_t)v30 + 16];
    *(_QWORD *)(a2 + 776) = v31[17 * v30 + 16];
    *(_QWORD *)(a2 + 784) = v31[18 * v30 + 16];
    *(_QWORD *)(a2 + 792) = v31[17 * v30 + 17];
    v74 = &v31[18 * v30];
    *(_QWORD *)(a2 + 800) = v74[17];
    *(_QWORD *)(a2 + 808) = v74[18];
    *(_BYTE *)(a2 + 816) = 1;
    *(double *)(a2 + 824) = v29[19] * 0.000001;
    *(double *)(a2 + 832) = v29[20] * 0.000001;
    v27.i64[0] = 0x3D719799812DEA11;
    *(double *)(a2 + 840) = *(double *)&v31[19 * v30 + 19] * 1.0e-12;
    *(double *)(a2 + 848) = *(double *)&v31[20 * v30 + 19] * 1.0e-12;
    *(double *)v28.i64 = *(double *)&v31[20 * v30 + 20] * 1.0e-12;
    *(_QWORD *)(a2 + 856) = v28.i64[0];
    raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v28, v27);
    goto LABEL_29;
  }
  if (v8 != 1)
  {
    if (v8 == 2)
      __assert_rtn("GetRavenSolution", "ravenpntestimator.cpp", 1463, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
    goto LABEL_14;
  }
  v138 = 0x10000001ALL;
  v136 = &unk_1E25C70A0;
  v139 = &v140;
  v137 = xmmword_18D319790;
  sub_18D04BE88((uint64_t)&v136, 0.0);
  *(int64x2_t *)v157 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v157[16] = *(_OWORD *)v157;
  v158 = *(_OWORD *)v157;
  v159 = *(_OWORD *)v157;
  v160 = *(_OWORD *)v157;
  v161 = *(_OWORD *)v157;
  v162 = *(_OWORD *)v157;
  v163 = *(_OWORD *)v157;
  v164 = *(_OWORD *)v157;
  v165 = *(_OWORD *)v157;
  v166 = *(_OWORD *)v157;
  v167 = *(_OWORD *)v157;
  v168 = *(_OWORD *)v157;
  v169 = *(_OWORD *)v157;
  v170 = *(_OWORD *)v157;
  v171 = *(_OWORD *)v157;
  v172 = *(_OWORD *)v157;
  v173 = *(_OWORD *)v157;
  v174 = *(_OWORD *)v157;
  v175 = *(_OWORD *)v157;
  v176 = *(_OWORD *)v157;
  v177 = *(_OWORD *)v157;
  v178 = *(_OWORD *)v157;
  v179 = *(_OWORD *)v157;
  v180 = *(_OWORD *)v157;
  v181 = *(_OWORD *)v157;
  v182 = *(_OWORD *)v157;
  v183 = *(_OWORD *)v157;
  v184 = *(_OWORD *)v157;
  v185 = *(_OWORD *)v157;
  v186 = *(_OWORD *)v157;
  v187 = *(_OWORD *)v157;
  v188 = *(_OWORD *)v157;
  v189 = *(_OWORD *)v157;
  v190 = *(_OWORD *)v157;
  v191 = 0x7FF8000000000000;
  v14 = *((unsigned __int8 *)this + 2536);
  LOBYTE(v95) = 0;
  if (!sub_18D1C9BF4((uint64_t)this + 14616, (uint64_t)&v136, v14, 1, 1, (uint64_t)&v145, (uint64_t)v157, (BOOL *)&v95, 0.000000015))
  {
    sub_18D1922C0((uint64_t)&v95, (uint64_t)v157);
    sub_18D1927F4((uint64_t)this + 15032, (uint64_t)&v125);
    sub_18D1CB528((uint64_t)&v131);
    sub_18D053B2C((uint64_t)&v95, (uint64_t)&v125, (uint64_t)&v131);
    sub_18D1CB5B8((uint64_t)&v116, SDWORD1(v96), v96);
    sub_18D073454((uint64_t)&v95, (uint64_t)&v116);
    sub_18D04A5F4((uint64_t)&v151);
    sub_18D053B2C((uint64_t)&v131, (uint64_t)&v116, (uint64_t)&v151);
    v75 = sub_18D053AA8((uint64_t)v141, (uint64_t)&v151);
    v76 = v155;
    v151 = &unk_1E25C7370;
    *(_QWORD *)&v155 = 0;
    if (v76)
      MEMORY[0x18D78B5BC](v76, 0x1000C8000313F17, v75);
    v151 = &unk_1E25C5E70;
    v77 = v120;
    v116 = &off_1E25C7190;
    *(_QWORD *)&v120 = 0;
    if (v77)
      MEMORY[0x18D78B5BC](v77, 0x1000C8000313F17, v75);
    v78 = v135[0];
    v131 = &off_1E25C7340;
    v135[0] = 0;
    if (v78)
      MEMORY[0x18D78B5BC](v78, 0x1000C8000313F17, v75);
    v131 = (uint64_t (**)())&unk_1E25C5E70;
    v79 = v129;
    v125 = &unk_1E25C7160;
    v129 = 0;
    if (v79)
      MEMORY[0x18D78B5BC](v79, 0x1000C8000313F17, v75);
    v80 = v99;
    v95 = &off_1E25C7340;
    v99 = 0;
    if (v80)
      MEMORY[0x18D78B5BC](v80, 0x1000C8000313F17, v75);
    goto LABEL_14;
  }
  LOWORD(v95) = 12;
  LOBYTE(v151) = 2;
  v15 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 136, "GetEarthFixedFullStateEstimate failed to retrieve current state estimate.");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v21) = v15;
  else
    v21 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v95, (unsigned __int8 *)&v151, "%s", v16, v17, v18, v19, v20, v21);
  *(_DWORD *)(a2 + 100) = 0;
  *(_DWORD *)(a2 + 97) = 0;
  *(_DWORD *)(a2 + 178) = 0;
  *(_WORD *)(a2 + 182) = 0;
  *(_DWORD *)(a2 + 297) = 0;
  *(_DWORD *)(a2 + 300) = 0;
  *(_DWORD *)(a2 + 377) = 0;
  *(_DWORD *)(a2 + 380) = 0;
  *(_DWORD *)(a2 + 457) = 0;
  *(_DWORD *)(a2 + 460) = 0;
  *(_DWORD *)(a2 + 577) = 0;
  *(_DWORD *)(a2 + 580) = 0;
  *(_DWORD *)(a2 + 657) = 0;
  *(_DWORD *)(a2 + 660) = 0;
  *(_DWORD *)(a2 + 740) = 0;
  *(_DWORD *)(a2 + 737) = 0;
  *(_DWORD *)(a2 + 820) = 0;
  *(_DWORD *)(a2 + 817) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 96) = 0;
  v22 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 104) = v22;
  *(int64x2_t *)(a2 + 120) = v22;
  *(int64x2_t *)(a2 + 136) = v22;
  *(int64x2_t *)(a2 + 152) = v22;
  *(_QWORD *)(a2 + 168) = 0x7FF8000000000000;
  *(_WORD *)(a2 + 176) = 0;
  *(int64x2_t *)(a2 + 184) = v22;
  *(int64x2_t *)(a2 + 200) = v22;
  *(int64x2_t *)(a2 + 216) = v22;
  *(int64x2_t *)(a2 + 232) = v22;
  *(int64x2_t *)(a2 + 248) = v22;
  *v5 = v22;
  v5[1] = v22;
  *(_BYTE *)(a2 + 296) = 0;
  *(int64x2_t *)(a2 + 304) = v22;
  *(int64x2_t *)(a2 + 320) = v22;
  *(int64x2_t *)(a2 + 336) = v22;
  *(int64x2_t *)(a2 + 352) = v22;
  *(_QWORD *)(a2 + 368) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 376) = 0;
  *(int64x2_t *)(a2 + 384) = v22;
  *(int64x2_t *)(a2 + 400) = v22;
  *(int64x2_t *)(a2 + 416) = v22;
  *(int64x2_t *)(a2 + 432) = v22;
  *(_QWORD *)(a2 + 448) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 456) = 0;
  *(int64x2_t *)(a2 + 464) = v22;
  *(int64x2_t *)(a2 + 480) = v22;
  *(int64x2_t *)(a2 + 496) = v22;
  *(int64x2_t *)(a2 + 512) = v22;
  *(int64x2_t *)(a2 + 528) = v22;
  *(int64x2_t *)(a2 + 544) = v22;
  *(int64x2_t *)(a2 + 560) = v22;
  *(_BYTE *)(a2 + 576) = 0;
  v5[20] = v22;
  v5[21] = v22;
  v5[22] = v22;
  v5[23] = v22;
  *(_QWORD *)(a2 + 648) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 656) = 0;
  v5[25] = v22;
  v5[26] = v22;
  v5[27] = v22;
  v5[28] = v22;
  *(_QWORD *)(a2 + 728) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 736) = 0;
  v5[30] = v22;
  v5[31] = v22;
  v5[32] = v22;
  v5[33] = v22;
  *(_QWORD *)(a2 + 808) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 816) = 0;
  v5[35] = v22;
  v5[36] = v22;
  *(_QWORD *)(a2 + 856) = 0x7FF8000000000000;
  v23 = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(a2 + 16) = v23;
  v24 = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
  *(_OWORD *)(a2 + 80) = v24;
  v26 = *(int8x16_t *)((char *)this + 168);
  v25 = *(int8x16_t *)((char *)this + 184);
  *(int8x16_t *)(a2 + 32) = v26;
  *(int8x16_t *)(a2 + 48) = v25;
  raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v25, v26);
LABEL_29:
  result = v144;
  v141[0] = &unk_1E25C7370;
  v144 = 0;
  if (result)
    return MEMORY[0x18D78B5BC](result, 0x1000C8000313F17);
  return result;
}

void sub_18D0596FC(_Unwind_Exception *a1)
{
  unint64_t v2;

  __cxa_guard_abort(&qword_1ECF23048);
  v2 = STACK[0x3F0];
  STACK[0x3C8] = (unint64_t)&unk_1E25C7370;
  STACK[0x3F0] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPNTEstimator::GetRavenStatus@<X0>(raven::RavenPNTEstimator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t IsSane;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  char v18;
  unsigned int LogLevel;
  _BOOL4 v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  int8x16_t v24;
  int8x16_t v25;
  int v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unsigned __int8 v62;
  __int16 v63[8];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v4 = a2 + 8;
  *(_QWORD *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_WORD *)(a2 + 160) = 0;
  *(int64x2_t *)(a2 + 960) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a2 + 976) = 0;
  *(_QWORD *)(a2 + 984) = 0x7FF8000000000000;
  v5 = a2 + 164;
  bzero((void *)(a2 + 164), 0x318uLL);
  *(_BYTE *)a2 = *((_BYTE *)this + 280);
  v12 = *((unsigned __int8 *)this + 56);
  *(_WORD *)(a2 + 104) = v12;
  if (*((_BYTE *)this + 58))
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    v13 = *(_OWORD *)((char *)this + 14600);
    *(_QWORD *)(v4 + 80) = 0;
    *(_OWORD *)v4 = v13;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)(a2 + 96) = 0x7FF8000000000000;
    IsSane = sub_18D0515C4((double *)a2, v12, 1.0, v6, v7, v8, v9, v10, v11);
    if (!*((_BYTE *)this + 58))
      goto LABEL_10;
    IsSane = sub_18D1B8600((uint64_t)this + 15032);
    if (!(_DWORD)IsSane)
      goto LABEL_10;
    IsSane = raven::RavenPNTEstimator::IsSane(this);
    if (!(_DWORD)IsSane)
      goto LABEL_10;
    if (!*((_BYTE *)this + 58))
      goto LABEL_9;
    v17 = 16;
    if (!*((_DWORD *)this + 4846))
      v17 = 8;
    if (*(double *)((char *)this + v17 + 19360) < *(double *)(*((_QWORD *)this + 146) + 1464))
    {
LABEL_9:
      v18 = 2;
    }
    else
    {
LABEL_10:
      LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)IsSane);
      v18 = 1;
      if (LogLevel <= 1)
      {
        v63[0] = 12;
        v62 = 1;
        if (*((_BYTE *)this + 58))
          v20 = sub_18D1B8600((uint64_t)this + 15032);
        else
          v20 = 0;
        v26 = raven::RavenPNTEstimator::IsSane(this);
        if (*((_BYTE *)this + 58))
        {
          v27 = 16;
          if (!*((_DWORD *)this + 4846))
            v27 = 8;
          v28 = *(double *)((char *)this + v27 + 19360) < *(double *)(*((_QWORD *)this + 146) + 1464);
        }
        else
        {
          v28 = 1;
        }
        cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Estimator unhealthy,observable,%d,sane,%d,consistent,%d", v20, v26, v28);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v34) = (_BYTE)this - 72;
        else
          v34 = *((_QWORD *)this + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v63, &v62, "%s", v29, v30, v31, v32, v33, v34);
        v18 = 1;
      }
    }
    v35 = 16;
    if (!*((_DWORD *)this + 4846))
      v35 = 8;
    v15.i64[0] = *(_QWORD *)((char *)this + v35 + 19360);
    *(_BYTE *)(a2 + 105) = v18;
    v16.i64[0] = 1.0;
    *(double *)v15.i64 = 1.0 - *(double *)v15.i64;
    *(_QWORD *)(a2 + 112) = v15.i64[0];
    *(_QWORD *)(a2 + 120) = CNTimeSpan::operator-((uint64_t)this + 80, (_QWORD *)this + 8, v15, v16);
    *(_QWORD *)(a2 + 128) = v36;
    *(_OWORD *)(a2 + 136) = *((_OWORD *)this + 16);
    *(_QWORD *)(a2 + 152) = *((_QWORD *)this + 34);
    v37 = *(_OWORD *)((char *)this + 440);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)((char *)this + 424);
    *(_OWORD *)(v5 + 112) = v37;
    *(_DWORD *)(v5 + 128) = *((_DWORD *)this + 114);
    v38 = *(_OWORD *)((char *)this + 376);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)((char *)this + 360);
    *(_OWORD *)(v5 + 48) = v38;
    v39 = *(_OWORD *)((char *)this + 408);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)((char *)this + 392);
    *(_OWORD *)(v5 + 80) = v39;
    v40 = *(_OWORD *)((char *)this + 344);
    *(_OWORD *)v5 = *(_OWORD *)((char *)this + 328);
    *(_OWORD *)(v5 + 16) = v40;
    v41 = *(_OWORD *)((char *)this + 572);
    *(_OWORD *)(a2 + 392) = *(_OWORD *)((char *)this + 556);
    *(_OWORD *)(a2 + 408) = v41;
    *(_DWORD *)(a2 + 424) = *((_DWORD *)this + 147);
    v42 = *(_OWORD *)((char *)this + 508);
    *(_OWORD *)(a2 + 328) = *(_OWORD *)((char *)this + 492);
    *(_OWORD *)(a2 + 344) = v42;
    v43 = *(_OWORD *)((char *)this + 540);
    *(_OWORD *)(a2 + 360) = *(_OWORD *)((char *)this + 524);
    *(_OWORD *)(a2 + 376) = v43;
    v44 = *(_OWORD *)((char *)this + 476);
    *(_OWORD *)(a2 + 296) = *(_OWORD *)((char *)this + 460);
    *(_OWORD *)(a2 + 312) = v44;
    v45 = *((_OWORD *)this + 44);
    *(_OWORD *)(a2 + 524) = *((_OWORD *)this + 43);
    *(_OWORD *)(a2 + 540) = v45;
    *(_DWORD *)(a2 + 556) = *((_DWORD *)this + 180);
    v46 = *((_OWORD *)this + 40);
    *(_OWORD *)(a2 + 460) = *((_OWORD *)this + 39);
    *(_OWORD *)(a2 + 476) = v46;
    v47 = *((_OWORD *)this + 42);
    *(_OWORD *)(a2 + 492) = *((_OWORD *)this + 41);
    *(_OWORD *)(a2 + 508) = v47;
    v48 = *((_OWORD *)this + 38);
    *(_OWORD *)(a2 + 428) = *((_OWORD *)this + 37);
    *(_OWORD *)(a2 + 444) = v48;
    v49 = *(_OWORD *)((char *)this + 836);
    *(_OWORD *)(a2 + 656) = *(_OWORD *)((char *)this + 820);
    *(_OWORD *)(a2 + 672) = v49;
    *(_DWORD *)(a2 + 688) = *((_DWORD *)this + 213);
    v50 = *(_OWORD *)((char *)this + 772);
    *(_OWORD *)(a2 + 592) = *(_OWORD *)((char *)this + 756);
    *(_OWORD *)(a2 + 608) = v50;
    v51 = *(_OWORD *)((char *)this + 804);
    *(_OWORD *)(a2 + 624) = *(_OWORD *)((char *)this + 788);
    *(_OWORD *)(a2 + 640) = v51;
    v52 = *(_OWORD *)((char *)this + 740);
    *(_OWORD *)(a2 + 560) = *(_OWORD *)((char *)this + 724);
    *(_OWORD *)(a2 + 576) = v52;
    v53 = *(_OWORD *)((char *)this + 968);
    *(_OWORD *)(a2 + 788) = *(_OWORD *)((char *)this + 952);
    *(_OWORD *)(a2 + 804) = v53;
    *(_DWORD *)(a2 + 820) = *((_DWORD *)this + 246);
    v54 = *(_OWORD *)((char *)this + 904);
    *(_OWORD *)(a2 + 724) = *(_OWORD *)((char *)this + 888);
    *(_OWORD *)(a2 + 740) = v54;
    v55 = *(_OWORD *)((char *)this + 936);
    *(_OWORD *)(a2 + 756) = *(_OWORD *)((char *)this + 920);
    *(_OWORD *)(a2 + 772) = v55;
    v56 = *(_OWORD *)((char *)this + 872);
    *(_OWORD *)(a2 + 692) = *(_OWORD *)((char *)this + 856);
    *(_OWORD *)(a2 + 708) = v56;
    v57 = *(_OWORD *)((char *)this + 1100);
    *(_OWORD *)(a2 + 920) = *(_OWORD *)((char *)this + 1084);
    *(_OWORD *)(a2 + 936) = v57;
    *(_DWORD *)(a2 + 952) = *((_DWORD *)this + 279);
    v58 = *(_OWORD *)((char *)this + 1036);
    *(_OWORD *)(a2 + 856) = *(_OWORD *)((char *)this + 1020);
    *(_OWORD *)(a2 + 872) = v58;
    v59 = *(_OWORD *)((char *)this + 1068);
    *(_OWORD *)(a2 + 888) = *(_OWORD *)((char *)this + 1052);
    *(_OWORD *)(a2 + 904) = v59;
    v60 = *(_OWORD *)((char *)this + 1004);
    *(_OWORD *)(a2 + 824) = *(_OWORD *)((char *)this + 988);
    *(_OWORD *)(a2 + 840) = v60;
    *(_WORD *)(a2 + 160) = 0;
    *(double *)(a2 + 992) = raven::RavenEstimator::GetPriorWeight(this);
    *(double *)(a2 + 1000) = raven::RavenEstimator::GetGNSSWeight(this);
    *(double *)(a2 + 1008) = raven::RavenEstimator::GetWiFiWeight(this);
    *(double *)(a2 + 1016) = raven::RavenEstimator::GetCellWeight(this);
    *(double *)(a2 + 1024) = raven::RavenEstimator::GetIndoorWeight(this);
    *(double *)(a2 + 1032) = raven::RavenEstimator::GetAccessoryWeight(this);
    v25.i64[0] = *((_QWORD *)this + 40);
    *(_QWORD *)(a2 + 976) = *((_QWORD *)this + 39);
    *(_QWORD *)(a2 + 984) = v25.i64[0];
    v24.i64[0] = *((_QWORD *)this + 2404);
    *(_QWORD *)(a2 + 968) = v24.i64[0];
    v21 = (char *)this + 136;
  }
  else
  {
    v21 = (char *)this + 136;
    v22 = *(_OWORD *)((char *)this + 184);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)(v4 + 48) = v22;
    v23 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(v4 + 80) = v23;
    v24 = *(int8x16_t *)((char *)this + 136);
    v25 = *(int8x16_t *)((char *)this + 152);
    *(int8x16_t *)v4 = v24;
    *(int8x16_t *)(v4 + 16) = v25;
  }
  return raven::PopulateAllTimeFields(v4, (uint64_t)v21, v24, v25);
}

void raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::TimeMarkEvent *a2)
{
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  double v13;
  uint64_t v14;
  int8x16_t v15;
  cnprint::CNPrinter *v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  double v33;
  double v34;
  _OWORD v35[5];
  uint64_t v36;
  void *v37;
  _OWORD v38[17];
  __int128 v39;

  *(_QWORD *)&v39 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)&v39 + 1) = v4;
  raven::RavenMapVectorActiveObject::RaiseTurnStateEvent((uint64_t)this, (uint64_t)&v39);
  if (!*((_BYTE *)this + 1064))
    return;
  if (!*((_BYTE *)this + 1352))
    goto LABEL_23;
  v7 = CNTimeSpan::operator-((uint64_t)&v39, (_QWORD *)this + 170, v5, v6);
  if (v8 + (double)v7 < *(double *)(*((_QWORD *)this + 61) + 3152))
    return;
  v37 = (void *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 134) + 16))((char *)this + 1072);
  *(_QWORD *)&v38[0] = v9;
  *(double *)v12.i64 = (double)CNTimeSpan::operator-((uint64_t)&v39, &v37, v10, v11);
  v14 = *((_QWORD *)this + 61);
  v15.i64[0] = *(_QWORD *)(v14 + 3144);
  if (v13 + *(double *)v12.i64 > *(double *)v15.i64)
  {
    if (*((_BYTE *)this + 1064))
      *((_BYTE *)this + 1064) = 0;
    *((_QWORD *)this + 517) = 0x7FF0000000000000;
    *((_QWORD *)this + 518) = 0;
    *((_QWORD *)this + 519) = 0x7FF8000000000000;
    *((_BYTE *)this + 4160) = 0;
    return;
  }
  if (!*((_BYTE *)this + 4160))
    return;
  v16 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v39, (_QWORD *)this + 518, v15, v12);
  if (v17 + (double)(uint64_t)v16 <= 1.0)
  {
    if (fabs(*((double *)this + 517)) > *(double *)(v14 + 3160))
    {
      if (!cnprint::CNPrinter::GetLogLevel(v16))
      {
        LOWORD(v37) = 12;
        LOBYTE(v35[0]) = 0;
        v18 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        v33 = v19 + (double)v18;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)v35, "t,%.3lf,MapVectorAO: Failed to re-inject map vector assistance. accumulatedRotation,%.2lf,map vector age,%.2lf,", v20, v21, v22, v23, v24, SLOBYTE(v33));
      }
      if (*((_BYTE *)this + 1064))
        *((_BYTE *)this + 1064) = 0;
      *((_QWORD *)this + 517) = 0x7FF0000000000000;
      *((_QWORD *)this + 518) = 0;
      *((_QWORD *)this + 519) = 0x7FF8000000000000;
      *((_BYTE *)this + 4160) = 0;
      return;
    }
    if (*((_BYTE *)this + 1064))
    {
      v37 = &unk_1E25C22D8;
      memcpy(v38, (char *)this + 1080, 0x10CuLL);
      v38[0] = v39;
      memset(&v38[1], 0, 72);
      *((_QWORD *)&v38[5] + 1) = 0x7FF8000000000000;
      v36 = 0;
      memset(&v35[1], 0, 64);
      v35[0] = v39;
      memset(&v38[7], 0, 72);
      v38[6] = v39;
      *((_QWORD *)&v38[11] + 1) = 0x7FF8000000000000;
      v32 = *((unsigned __int8 *)this + 1352);
      *((_OWORD *)this + 85) = v39;
      if (!v32)
        *((_BYTE *)this + 1352) = 1;
      sub_18D21CB74((uint64_t)this, (uint64_t)&v37);
      return;
    }
LABEL_23:
    __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
  }
  if (!cnprint::CNPrinter::GetLogLevel(v16))
  {
    LOWORD(v37) = 12;
    LOBYTE(v35[0]) = 0;
    v25 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    v34 = v26 + (double)v25;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)v35, "t,%.3lf,MapVectorAO: accumulated device rotation age is too large to be used to determine if the device has rotated too far. Not re-raising map vector event. Age,%.2lf", v27, v28, v29, v30, v31, SLOBYTE(v34));
  }
}

void raven::RavenMapVectorActiveObject::RaiseTurnStateEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BYTE *v4;
  unsigned int v6;
  char *v7;
  unint64_t *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  void (**v51)(_QWORD *@<X8>);
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  char *v61;
  std::__shared_weak_count *v62;

  v2 = *(_QWORD *)(a1 + 4208);
  if (v2 && v2 >= *(_QWORD *)(a1 + 4240))
  {
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v45 = *(_OWORD *)(a1 + 4224);
    v46 = 0u;
    v52 = v45;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v4 = (_BYTE *)(a1 + 4112);
    v51 = (void (**)(_QWORD *@<X8>))&unk_1E25C2408;
    LOBYTE(v58) = 0;
    v60 = INFINITY;
    *((_QWORD *)&v58 + 1) = 0x3FF0000000000000;
    v59 = 0uLL;
    v50 = 0;
    v53 = 0u;
    *(_QWORD *)&v57 = 0;
    *((_QWORD *)&v57 + 1) = 0x7FF8000000000000;
    if (*(_BYTE *)(a1 + 1376))
    {
      v6 = *(unsigned __int8 *)(a1 + 1488);
      if (v6 > 3 || v6 == 1)
      {
        v60 = *(double *)(a1 + 4216) / (double)v2;
        v33 = fabs(v60);
        v34 = *(_BYTE *)(a1 + 4120) ? *(double *)(a1 + 4128) + *(double *)(a1 + 4128) : 0.0;
        v35 = *(double **)(a1 + 488);
        if (v33 <= v35[402] - v34)
        {
          LOBYTE(v58) = 1;
          *(_QWORD *)&v59 = 0x3FE570A3D70A3D71;
          if (v33 <= v35[403] - v34)
          {
            *(_QWORD *)&v59 = 0x3FF0000000000000;
            v37 = 1.0;
          }
          else
          {
            v37 = 0.67;
          }
          *((double *)&v59 + 1) = 1.0 - v37;
          v38 = 1.0 - (1.0 - v37);
        }
        else
        {
          LOBYTE(v58) = 2;
          *((_QWORD *)&v59 + 1) = 0x3FE570A3D70A3D71;
          if (v33 >= v35[401] - v34)
          {
            *((_QWORD *)&v59 + 1) = 0x3FF0000000000000;
            v36 = 1.0;
          }
          else
          {
            v36 = 0.67;
          }
          v38 = 1.0 - v36;
          *(double *)&v59 = 1.0 - v36;
          v37 = 1.0 - v36;
        }
        *((double *)&v58 + 1) = v38 - v37;
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1))
        {
          LOWORD(v45) = 12;
          LOBYTE(v61) = 0;
          v44 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, (unsigned __int8 *)&v61, "t,%.3lf,MapVectorAO:TurnState,average_absolute_vertical_rotation_rate,%.2lf,turn_state,%u,probability,t,%.2lf,nt,%.2lf,uk,%.2lf,queue_size,%zu", v39, v40, v41, v42, v43, SLOBYTE(v44));
        }
      }
    }
    v7 = (char *)operator new(0x60uLL);
    *((_QWORD *)v7 + 1) = 0;
    v8 = (unint64_t *)(v7 + 8);
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &unk_1E25CCE50;
    *((_QWORD *)v7 + 3) = &unk_1E25B8C58;
    v9 = MEMORY[0x1E0DE4F20];
    v7[32] = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = v9;
    v10 = (void **)(v7 + 72);
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    sub_18D0778AC((_QWORD *)v7 + 9, "");
    v7[32] = 1;
    v11 = operator new();
    *(_QWORD *)v11 = &off_1E25C1720;
    *(_QWORD *)(v11 + 8) = &unk_1E25C2408;
    v12 = v59;
    *(_OWORD *)(v11 + 112) = v58;
    *(_OWORD *)(v11 + 128) = v12;
    *(double *)(v11 + 144) = v60;
    v13 = v55;
    *(_OWORD *)(v11 + 48) = v54;
    *(_OWORD *)(v11 + 64) = v13;
    v14 = v57;
    *(_OWORD *)(v11 + 80) = v56;
    *(_OWORD *)(v11 + 96) = v14;
    v15 = v53;
    *(_OWORD *)(v11 + 16) = v52;
    *(_OWORD *)(v11 + 32) = v15;
    v16 = *((_QWORD *)v7 + 5);
    *((_QWORD *)v7 + 5) = v11;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    *((_QWORD *)v7 + 7) = sub_18D28C380((uint64_t)&v51);
    *((_QWORD *)v7 + 8) = v17;
    v51[3](&v45);
    if (v7[95] < 0)
      operator delete(*v10);
    *(_OWORD *)v10 = v45;
    *((_QWORD *)v7 + 11) = v46;
    v61 = v7 + 24;
    v62 = (std::__shared_weak_count *)v7;
    v18 = *(_QWORD *)(a1 + 344);
    *(_QWORD *)&v45 = v7 + 24;
    *((_QWORD *)&v45 + 1) = v7;
    do
      v19 = __ldxr(v8);
    while (__stxr(v19 + 1, v8));
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v18 + 16))(v18, &v45, a1);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v62;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v56;
    if (*v4)
    {
      *(_OWORD *)(a1 + 4056) = v57;
      v27 = v59;
      *(_OWORD *)(a1 + 4072) = v58;
      *(_OWORD *)(a1 + 4088) = v27;
      v28 = v52;
      *(_OWORD *)(a1 + 3992) = v53;
      v29 = v55;
      *(_OWORD *)(a1 + 4008) = v54;
      *(_OWORD *)(a1 + 4024) = v29;
      *(_OWORD *)(a1 + 4040) = v26;
      *(double *)(a1 + 4104) = v60;
      *(_OWORD *)(a1 + 3976) = v28;
    }
    else
    {
      *(_OWORD *)(a1 + 4056) = v57;
      v30 = v59;
      *(_OWORD *)(a1 + 4072) = v58;
      *(_OWORD *)(a1 + 4088) = v30;
      v31 = v52;
      *(_OWORD *)(a1 + 3992) = v53;
      v32 = v55;
      *(_OWORD *)(a1 + 4008) = v54;
      *(_OWORD *)(a1 + 4024) = v32;
      *(_OWORD *)(a1 + 4040) = v26;
      *(_QWORD *)(a1 + 3968) = &unk_1E25C2408;
      *(double *)(a1 + 4104) = v60;
      *(_OWORD *)(a1 + 3976) = v31;
      *v4 = 1;
    }
  }
}

void sub_18D05A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868(v9 - 128);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenConvergenceEstimator::PredictAndUpdate(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  double v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  cnprint::CNPrinter *v20;
  unsigned __int8 *v21;
  int8x16_t v22;
  uint64_t v23;
  double v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _OWORD *v29;
  double v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  _BYTE *v46;
  uint64_t *v47;
  int v48;
  _QWORD *v49;
  _BYTE *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t **v53;
  __n128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  cnprint::CNPrinter *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int *v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  cnprint::CNPrinter *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  char v130;
  char v131;
  double v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  int v138;
  int v139;
  __int128 v140;
  unsigned __int8 v141;
  unsigned int ***v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int **v145;
  unsigned int *v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int *v149;
  uint64_t v150;
  double v151;
  void *v152;
  __int128 v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD v156[2];
  double v157;
  double v158;
  uint64_t (**v159)();
  __int128 v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD v163[2];
  void *v164;
  __int128 v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  void *v169;
  __int128 v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD v173[2];
  double v174;
  double v175;
  void *v176;
  __int128 v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD v180[2];
  uint64_t *v181;
  __int128 v182;
  uint64_t v183;
  __int128 *v184;
  __int128 v185;
  _BYTE v186[24];
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  int8x16_t v190;

  if (!*(_BYTE *)(a1 + 58))
    return 32;
  v4 = a1 + 8336;
  v190 = *(int8x16_t *)a2;
  v5 = a2[1].n128_f64[0];
  if (v5 < 0.0)
  {
    v6 = (__n128 *)(a1 + 80);
    sub_18D05D5B4(a1 + 8336, a1 + 80);
    *(_BYTE *)v4 = 0;
    sub_18D05DB3C(v4, v6, v7, v8, v9, v10, v11, v12);
    return 64;
  }
  if (v5 <= 0.0)
    return 0;
  if (!sub_18D05B574((double *)v190.i64, (double *)(a1 + 8344)))
  {
    v22 = v190;
    *(int8x16_t *)(a1 + 8360) = v190;
    v23 = CNTimeSpan::operator-(a1 + 8360, (_QWORD *)(a1 + 8344), v22, v19);
    v26 = *(unsigned int *)(a1 + 14272);
    if ((int)v26 >= 1)
    {
      v27 = 0;
      *(double *)v25.i64 = (double)v23;
      v28 = v24 + (double)v23;
      v29 = *(_OWORD **)(a1 + 8432);
      while (1)
      {
        *(_OWORD *)v186 = *v29;
        *(double *)v25.i64 = (double)CNTimeSpan::operator-((uint64_t)v186, (_QWORD *)(a1 + 8344), *(int8x16_t *)v186, v25);
        v31 = (v30 + *(double *)v25.i64) / v28;
        if (v31 < 0.0)
          break;
        *(double *)(*(_QWORD *)(a1 + 11992) + v27) = v31;
        v27 += 8;
        ++v29;
        if (8 * v26 == v27)
          goto LABEL_13;
      }
      LOWORD(v181) = 2;
      LOBYTE(v176) = 2;
      v20 = (cnprint::CNPrinter *)&v181;
      v21 = (unsigned __int8 *)&v176;
      goto LABEL_56;
    }
LABEL_13:
    *(_DWORD *)(v4 + 11904) = 87;
    *(_OWORD *)(v4 + 10248) = xmmword_18D3197F0;
    *(_OWORD *)(v4 + 8816) = xmmword_18D3197F0;
    *(_OWORD *)(v4 + 10640) = xmmword_18D3197F0;
    *(_OWORD *)(v4 + 11376) = xmmword_18D3197F0;
    *(_OWORD *)(v4 + 11816) = xmmword_18D3197F0;
    *(_OWORD *)(v4 + 11424) = xmmword_18D3197F0;
    *(_OWORD *)(v4 + 11864) = xmmword_18D3197F0;
    *(_OWORD *)(v4 + 11920) = xmmword_18D3197F0;
    *(_OWORD *)(v4 + 12656) = xmmword_18D3197F0;
    *(_QWORD *)&v186[16] = 0;
    *(_QWORD *)&v186[8] = 0;
    *(_QWORD *)v186 = &v186[8];
    if ((int)v26 < 1)
    {
      v33 = 0;
      goto LABEL_62;
    }
    v32 = 0;
    v136 = 0;
    v138 = 0;
    v33 = 0;
    while (1)
    {
      if (*(double *)(*(_QWORD *)(a1 + 11992) + 8 * v32) <= 1.0)
      {
        ++v136;
        v34 = *(_DWORD *)(*(_QWORD *)(a1 + 11256) + 4 * v32);
        v35 = v34 + v138;
        if (v33 > 86 || v35 >= 88)
        {
          v46 = *(_BYTE **)v186;
          if (*(_BYTE **)v186 == &v186[8])
            goto LABEL_74;
          v47 = 0;
          v48 = -1;
          do
          {
            if (*((_DWORD *)v46 + 10) > v48)
            {
              v47 = (uint64_t *)*((_QWORD *)v46 + 4);
              v48 = *((_DWORD *)v46 + 10);
            }
            v49 = (_QWORD *)*((_QWORD *)v46 + 1);
            if (v49)
            {
              do
              {
                v50 = v49;
                v49 = (_QWORD *)*v49;
              }
              while (v49);
            }
            else
            {
              do
              {
                v50 = (_BYTE *)*((_QWORD *)v46 + 2);
                v51 = *(_QWORD *)v50 == (_QWORD)v46;
                v46 = v50;
              }
              while (!v51);
            }
            v46 = v50;
          }
          while (v50 != &v186[8]);
          v181 = v47;
          if (!v47)
          {
LABEL_74:
            LOWORD(v176) = 2;
            LOBYTE(v169) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v176, (unsigned __int8 *)&v169, "MeasurementAccumulator.LockAccumulator() most_common_measurement_type == nullptr", v14, v15, v16, v17, v18, v131);
            goto LABEL_60;
          }
          if (*(uint64_t **)(*(_QWORD *)(a1 + 14312) + 8 * v32) == v47)
            goto LABEL_49;
          v36 = v33 - 1;
          if (v33 < 1)
          {
LABEL_59:
            LOWORD(v176) = 2;
            LOBYTE(v169) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v176, (unsigned __int8 *)&v169, "MeasurementAccumulator.LockAccumulator() found_idx == false", v14, v15, v16, v17, v18, v131);
LABEL_60:
            sub_18D05B5E4(*(_QWORD **)&v186[8]);
            goto LABEL_57;
          }
          LODWORD(v52) = v33;
          while (1)
          {
            v52 = (v52 - 1);
            if (*(uint64_t **)(*(_QWORD *)(a1 + 20280) + 8 * v52) == v47)
              break;
            if ((int)v52 <= 0)
              goto LABEL_59;
          }
          if (v35 - *(_DWORD *)(*(_QWORD *)(a1 + 18608) + 4 * v52) > 87)
            goto LABEL_49;
          v53 = sub_18D1D73A0((uint64_t **)v186, (unint64_t)v47, &v181);
          --*((_DWORD *)v53 + 10);
          v138 -= *(_DWORD *)(*(_QWORD *)(a1 + 18608) + 4 * v52);
          v33 = v52;
        }
        else
        {
          v36 = v33;
        }
        *(_OWORD *)(*(_QWORD *)(a1 + 17176) + 16 * v33) = *(_OWORD *)(*(_QWORD *)(a1 + 8432) + 16 * v32);
        *(_DWORD *)(*(_QWORD *)(a1 + 18608) + 4 * v33) = v34;
        *(_QWORD *)(*(_QWORD *)(a1 + 19000) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(a1 + 11992) + 8 * v32);
        sub_18D053AA8(*(_QWORD *)(a1 + 19736) + ((uint64_t)v33 << 6), *(_QWORD *)(a1 + 13424) + (v32 << 6));
        *(_DWORD *)(*(_QWORD *)(a1 + 19784) + 4 * v33) = *(_DWORD *)(*(_QWORD *)(a1 + 13472) + 4 * v32);
        sub_18D053AA8(*(_QWORD *)(a1 + 20176) + ((uint64_t)v33 << 6), *(_QWORD *)(a1 + 14208) + (v32 << 6));
        sub_18D053AA8(*(_QWORD *)(a1 + 20224) + 112 * v33, *(_QWORD *)(a1 + 14256) + 112 * v32);
        *(_QWORD *)(*(_QWORD *)(a1 + 20280) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(a1 + 14312) + 8 * v32);
        *(_QWORD *)(*(_QWORD *)(a1 + 21016) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(a1 + 15744) + 8 * v32);
        v37 = (uint64_t **)(*(_QWORD *)(a1 + 14312) + 8 * v32);
        v38 = *(_QWORD *)&v186[8];
        v39 = *v37;
        if (!*(_QWORD *)&v186[8])
          goto LABEL_29;
        v40 = (uint64_t *)&v186[8];
        do
        {
          v41 = (uint64_t *)v38;
          v42 = v40;
          v43 = *(_QWORD *)(v38 + 32);
          v44 = (uint64_t *)(v38 + 8);
          if (v43 >= (unint64_t)v39)
          {
            v44 = v41;
            v40 = v41;
          }
          v38 = *v44;
        }
        while (v38);
        if (v40 != (uint64_t *)&v186[8]
          && (v43 >= (unint64_t)v39 ? (v45 = v41) : (v45 = v42), (unint64_t)v39 >= v45[4]))
        {
          if (v43 < (unint64_t)v39)
            v41 = v42;
          ++*((_DWORD *)v41 + 10);
        }
        else
        {
LABEL_29:
          *((_DWORD *)sub_18D1D73A0((uint64_t **)v186, (unint64_t)v39, v37) + 10) = 1;
        }
        v33 = v36 + 1;
        v138 += v34;
        LODWORD(v26) = *(_DWORD *)(a1 + 14272);
      }
LABEL_49:
      if (++v32 >= (int)v26)
      {
        if (v136 > v33)
        {
          LOWORD(v181) = 2;
          LOBYTE(v176) = 2;
          v132 = *(double *)&v190.i64[1] + (double)v190.i64[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v176, "t,%.3lf,WARNING: MeasurementAccumulator.LockAccumulator() truncating measurements,nh,%d,eligible,%d,num_truncated,%d", v14, v15, v16, v17, v18, SLOBYTE(v132));
        }
LABEL_62:
        *(_DWORD *)(v4 + 11904) = v33;
        *(_DWORD *)(v4 + 8816) = v33;
        *(_DWORD *)(v4 + 8820) = 1;
        *(_DWORD *)(v4 + 8824) = v33;
        *(_DWORD *)(v4 + 8828) = v33;
        *(_DWORD *)(v4 + 10248) = v33;
        *(_DWORD *)(v4 + 10252) = 1;
        *(_DWORD *)(v4 + 10256) = v33;
        *(_DWORD *)(v4 + 10260) = v33;
        *(_DWORD *)(v4 + 10640) = v33;
        *(_DWORD *)(v4 + 10644) = 1;
        *(_DWORD *)(v4 + 10648) = v33;
        *(_DWORD *)(v4 + 10652) = v33;
        *(_DWORD *)(v4 + 11376) = v33;
        *(_DWORD *)(v4 + 11380) = 1;
        *(_DWORD *)(v4 + 11384) = v33;
        *(_DWORD *)(v4 + 11388) = v33;
        *(_DWORD *)(v4 + 11424) = v33;
        *(_DWORD *)(v4 + 11428) = 1;
        *(_DWORD *)(v4 + 11432) = v33;
        *(_DWORD *)(v4 + 11436) = v33;
        *(_DWORD *)(v4 + 11816) = v33;
        *(_DWORD *)(v4 + 11820) = 1;
        *(_DWORD *)(v4 + 11824) = v33;
        *(_DWORD *)(v4 + 11828) = v33;
        *(_DWORD *)(v4 + 11864) = v33;
        *(_DWORD *)(v4 + 11868) = 1;
        *(_DWORD *)(v4 + 11872) = v33;
        *(_DWORD *)(v4 + 11876) = v33;
        *(_DWORD *)(v4 + 11920) = v33;
        *(_DWORD *)(v4 + 11924) = 1;
        *(_DWORD *)(v4 + 11928) = v33;
        *(_DWORD *)(v4 + 11932) = v33;
        *(_DWORD *)(v4 + 12656) = v33;
        *(_DWORD *)(v4 + 12660) = 1;
        *(_DWORD *)(v4 + 12664) = v33;
        *(_DWORD *)(v4 + 12668) = v33;
        *(_BYTE *)(v4 + 1) = 1;
        sub_18D05B5E4(*(_QWORD **)&v186[8]);
        if (!cnprint::CNPrinter::GetLogLevel(v62))
        {
          *(_WORD *)v186 = 12;
          LOBYTE(v181) = 0;
          v70 = *(double *)&v190.i64[1] + (double)v190.i64[0];
          v71 = sub_18D05C4D8(v4, v63, v64, v65, v66, v67, v68, v69);
          cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Predict,%.2lf,dt,%.3lf,meas_types,%d", v70, v5, v71);
          if (*(char *)(a1 + 2511) >= 0)
            LOBYTE(v77) = a1 - 72;
          else
            v77 = *(_QWORD *)(a1 + 2488);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v186, (unsigned __int8 *)&v181, "%s", v72, v73, v74, v75, v76, v77);
        }
        v187 = 0x800000008;
        *(_QWORD *)v186 = &unk_1E25C87E0;
        *(_OWORD *)&v186[8] = xmmword_18D319930;
        v188 = &v189;
        if (sub_18D05B61C(a1, (uint64_t)a2))
        {
          v85 = (__n128 *)(a1 + 80);
          sub_18D05D5B4(v4, (uint64_t)v85);
          *(_BYTE *)v4 = 0;
          sub_18D05DB3C(v4, v85, v86, v87, v88, v89, v90, v91);
          return 256;
        }
        v183 = 0x200000002;
        v181 = (uint64_t *)&unk_1E25C75E0;
        v182 = xmmword_18D319340;
        v184 = &v185;
        v185 = xmmword_18D319970;
        v178 = 0x100000002;
        v176 = &unk_1E25C7460;
        v177 = xmmword_18D319330;
        v179 = v180;
        v180[0] = sub_18D054EFC;
        v180[1] = sub_18D055218;
        v174 = v5;
        v175 = v5;
        v171 = 0x100000002;
        v169 = &unk_1E25C74F0;
        v170 = xmmword_18D319330;
        v172 = v173;
        v173[0] = &v175;
        v173[1] = &v174;
        v166 = 0x100000002;
        v164 = &unk_1E25C7550;
        v165 = xmmword_18D319330;
        v167 = &v168;
        v168 = 0x200000006;
        v161 = 0x100000002;
        v159 = &off_1E25C7490;
        v160 = xmmword_18D319330;
        v162 = v163;
        v163[0] = sub_18D24A414;
        v163[1] = sub_18D24A7E4;
        v157 = v5;
        v158 = v5;
        v154 = 0x100000002;
        v152 = &unk_1E25C74F0;
        v153 = xmmword_18D319330;
        v155 = v156;
        v156[0] = &v158;
        v156[1] = &v157;
        v151 = v5;
        if (!*(_BYTE *)(v4 + 1))
        {
          sub_18D05D584((_BYTE *)v4, (__n128 *)(a1 + 80));
          return 512;
        }
        v92 = sub_18D05C4D8(v4, v78, v79, v80, v81, v82, v83, v84);
        v93 = a1 + 2640;
        v139 = v92;
        if (v92)
        {
          v94 = sub_18D24AB54(v93, (uint64_t)v186, a1 + 18968, a1 + 19704, a1 + 20192, (uint64_t)&v181, (uint64_t)&v176, (uint64_t)&v169, a1 + 20248, a1 + 20984, (uint64_t)&v164, (uint64_t)&v159, (uint64_t)&v152);
          v13 = 10;
        }
        else
        {
          v94 = sub_18D0516F0(v93, (uint64_t)v186);
          v13 = 2;
        }
        v148 = 0;
        v149 = 0;
        v150 = 0;
        sub_18D1E7E30(&v148, *(_QWORD *)(a1 + 4296), *(_QWORD *)(a1 + 4304), (uint64_t)(*(_QWORD *)(a1 + 4304) - *(_QWORD *)(a1 + 4296)) >> 5);
        v145 = 0;
        v146 = 0;
        v147 = 0;
        sub_18D1E7E30(&v145, *(_QWORD *)(a1 + 4272), *(_QWORD *)(a1 + 4280), (uint64_t)(*(_QWORD *)(a1 + 4280) - *(_QWORD *)(a1 + 4272)) >> 5);
        v142 = 0;
        v143 = 0;
        v144 = 0;
        sub_18D1E7E30(&v142, *(_QWORD *)(a1 + 4320), *(_QWORD *)(a1 + 4328), (uint64_t)(*(_QWORD *)(a1 + 4328) - *(_QWORD *)(a1 + 4320)) >> 5);
        v96 = v148;
        v95 = v149;
        v97 = (char *)v149 - (char *)v148;
        v99 = (unsigned int *)v145;
        v98 = v146;
        v133 = (char *)v146 - (char *)v145;
        v135 = ((char *)v146 - (char *)v145) >> 5;
        v137 = ((char *)v149 - (char *)v148) >> 5;
        v134 = (v143 - (uint64_t)v142) >> 5;
        if (v139)
        {
          *(_QWORD *)(a1 + 256) += v137;
          raven::RavenEstimator::AddToAcceptedMeasurementTypeCount((cnprint::CNPrinter *)a1, &v148);
          *(_QWORD *)(a1 + 264) += v135;
          raven::RavenEstimator::AddToRejectedMeasurementTypeCount((cnprint::CNPrinter *)a1, (unsigned int **)&v145);
          *(_QWORD *)(a1 + 272) += v134;
          raven::RavenEstimator::AddToUnusedMeasurementTypeCount((cnprint::CNPrinter *)a1, (unsigned int **)&v142);
        }
        if (v94 > 0x16)
          goto LABEL_97;
        if (((1 << v94) & 0x440408) == 0)
        {
          if (((1 << v94) & 0x301) != 0)
          {
            v100 = (cnprint::CNPrinter *)sub_18D05D3A8(a1 + 8264, &v151);
            if (v139)
            {
              if (v95 != v96)
                v100 = (cnprint::CNPrinter *)sub_18D1BE108(a1 + 8264, v97 >> 5, *(_DWORD *)(*(_QWORD *)(a1 + 1168) + 1472));
              if (v98 != v99)
                v100 = (cnprint::CNPrinter *)sub_18D1A37F8(a1 + 8264, v133 >> 5, *(_DWORD *)(*(_QWORD *)(a1 + 1168) + 1472));
              if (v137 <= v135)
              {
                if (cnprint::CNPrinter::GetLogLevel(v100) <= 1)
                {
                  LOWORD(v140) = 12;
                  v141 = 1;
                  v130 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v190, "accepted_meas,%zu,rejected_meas,%zu", v137, v135);
                  if (*(char *)(a1 + 2511) >= 0)
                    LOBYTE(v113) = v130;
                  else
                    v113 = *(_QWORD *)(a1 + 2488);
LABEL_109:
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v140, &v141, "%s", v108, v109, v110, v111, v112, v113);
                }
              }
              else if (!cnprint::CNPrinter::GetLogLevel(v100))
              {
                LOWORD(v140) = 12;
                v141 = 0;
                v107 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v190, "accepted_meas,%zu,rejected_meas,%zu", v137, v135);
                if (*(char *)(a1 + 2511) >= 0)
                  LOBYTE(v113) = v107;
                else
                  v113 = *(_QWORD *)(a1 + 2488);
                goto LABEL_109;
              }
            }
            *(int8x16_t *)(a1 + 80) = v190;
            v140 = 0uLL;
            if (!sub_18D05C40C(v4, &v140, v101, v102, v103, v104, v105, v106))
              *(_OWORD *)(a1 + 96) = v140;
LABEL_112:
            sub_18D05D584((_BYTE *)v4, (__n128 *)&v190);
            *(_QWORD *)&v140 = &v142;
            sub_18D1C59AC((void ***)&v140);
            v142 = &v145;
            sub_18D1C59AC((void ***)&v142);
            v145 = &v148;
            sub_18D1C59AC((void ***)&v145);
            return v13;
          }
          if (((1 << v94) & 0x300000) != 0)
          {
            LOWORD(v140) = 12;
            v141 = 4;
            v114 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v190, "Resetting due to prediction error code %d", v94);
            if (*(char *)(a1 + 2511) >= 0)
              LOBYTE(v120) = v114;
            else
              v120 = *(_QWORD *)(a1 + 2488);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v140, &v141, "%s", v115, v116, v117, v118, v119, v120);
            v13 |= 6uLL;
            goto LABEL_112;
          }
LABEL_97:
          v13 |= 1uLL;
        }
        LOWORD(v140) = 12;
        v141 = 4;
        v121 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v190, "Unexpected predict and update return code %d", v94);
        if (*(char *)(a1 + 2511) >= 0)
          LOBYTE(v127) = v121;
        else
          v127 = *(_QWORD *)(a1 + 2488);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v140, &v141, "%s", v122, v123, v124, v125, v126, v127);
        if ((v13 & 8) != 0)
        {
          sub_18D05D5B4(v4, (uint64_t)&v190);
          v128 = raven::RavenConvergenceEstimator::PredictAndUpdate(a1, a2);
          v129 = v135 + v137 + v134;
          if (v129)
            sub_18D1A37F8(a1 + 8264, v129, *(_DWORD *)(*(_QWORD *)(a1 + 1168) + 1472));
          v13 |= v128 | 0x18;
        }
        goto LABEL_112;
      }
    }
  }
  *(_WORD *)v186 = 2;
  LOBYTE(v181) = 4;
  v20 = (cnprint::CNPrinter *)v186;
  v21 = (unsigned __int8 *)&v181;
LABEL_56:
  cnprint::CNPrinter::Print(v20, v21, "WARNING: MeasurementAccumulator.LockAccumulator() called with bad t_end.", v14, v15, v16, v17, v18, v131);
LABEL_57:
  v54 = (__n128 *)(a1 + 80);
  sub_18D05D5B4(v4, (uint64_t)v54);
  *(_BYTE *)v4 = 0;
  sub_18D05DB3C(v4, v54, v55, v56, v57, v58, v59, v60);
  return 128;
}

void sub_18D05B108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void ****a19, uint64_t a20,uint64_t a21,void ***a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28)
{
  a19 = &a22;
  sub_18D1C59AC((void ***)&a19);
  a22 = &a25;
  sub_18D1C59AC((void ***)&a22);
  a25 = (void **)&a28;
  sub_18D1C59AC(&a25);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSolutionSelector::GetRavenSolution(raven::RavenSolutionSelector *this, raven::RavenSolutionEvent *a2)
{
  _BYTE *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  _BYTE *v36[2];
  unsigned __int8 v37;

  if (*(_BYTE *)this)
  {
    v4 = (char *)this + 160;
    if (*((_BYTE *)this + 160))
    {
      if (sub_18D041348((_QWORD *)this + 7, v4))
      {
        v36[0] = v4;
        v5 = sub_18D05B344((uint64_t)this + 56, v4, (uint64_t)&std::piecewise_construct, v36);
        v6 = v5;
        v7 = v5 + 3;
        if (*((unsigned __int8 *)this + 160) != *((unsigned __int8 *)this + 136)
          || (v36[0] = (_BYTE *)((uint64_t (*)(uint64_t **))(*v7)[2])(v5 + 3),
              v36[1] = v8,
              !sub_18D05B574((double *)v36, (double *)this + 18)))
        {
          memcpy((char *)a2 + 8, v6 + 4, 0x971uLL);
          *((_BYTE *)a2 + 208) = 4;
          *((_BYTE *)this + 136) = *((_BYTE *)this + 160);
          v9 = ((uint64_t (*)(uint64_t **))v6[3][2])(v7);
          result = 0;
          *((_QWORD *)this + 18) = v9;
          *((_QWORD *)this + 19) = v11;
          return result;
        }
      }
      else
      {
        LOWORD(v36[0]) = 12;
        v37 = 4;
        v26 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v35 = v27 + (double)v26;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "t,%.3lf,Solution Selector: specified estimator unavailable", v28, v29, v30, v31, v32, SLOBYTE(v35));
      }
    }
    else
    {
      LOWORD(v36[0]) = 12;
      v37 = 2;
      v19 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v34 = v20 + (double)v19;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "t,%.3lf,Solution Selector: no estimators meet yield criteria", v21, v22, v23, v24, v25, SLOBYTE(v34));
    }
  }
  else
  {
    LOWORD(v36[0]) = 12;
    v37 = 4;
    v12 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v33 = v13 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "t,%.3lf,Solution Selector: not configured", v14, v15, v16, v17, v18, SLOBYTE(v33));
  }
  return 0xFFFFFFFFLL;
}

uint64_t **sub_18D05B344(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      for (result = *v9; result; result = (uint64_t **)*result)
      {
        v11 = (unint64_t)result[1];
        if (v11 == v6)
        {
          if (*((unsigned __int8 *)result + 16) == (_DWORD)v6)
            return result;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4)
            break;
        }
      }
    }
  }
  sub_18D16522C(a1, *a2, a4, (uint64_t)v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_18D1652B0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v20[0] = *v18;
    *v18 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20[0];
    }
  }
  result = (uint64_t **)v20[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_18D05B558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18D05B574(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  BOOL v6;

  v2 = *a1;
  if (!*(_QWORD *)a1)
  {
    v3 = a1[1];
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_7:
      v6 = v3 > a2[1];
      return !v6;
    }
  }
  v4 = *a2;
  if (*(_QWORD *)a2 || (v5 = a2[1], (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
  {
    if (*(_QWORD *)&v2 != *(_QWORD *)&v4)
      return *(_QWORD *)&v2 < *(_QWORD *)&v4;
    v3 = a1[1];
    goto LABEL_7;
  }
  v6 = a1[1] > v5;
  return !v6;
}

void sub_18D05B5E4(_QWORD *a1)
{
  if (a1)
  {
    sub_18D05B5E4(*a1);
    sub_18D05B5E4(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_18D05B61C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t result;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  int v23;
  int v24;
  double v25;
  int v26;
  double v27;
  int8x16_t v28;
  _QWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  __int128 *v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  __int128 *v43;
  int v44;
  int v45;
  int i;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _QWORD *v60;
  int v61;
  int v62;
  int k;
  void *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  _BYTE v73[512];
  void *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD v81[64];
  void *v82;
  __int128 v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE v86[512];
  void *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  void *v92;
  __int128 v93;
  uint64_t v94;
  __int128 *v95;
  __int128 v96;
  uint64_t v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  __int128 *v101;
  __int128 v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE v108[265];
  void *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  _BYTE v114[328];
  void *v115;
  __int128 v116;
  uint64_t v117;
  double *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  void *v123;
  __int128 v124;
  uint64_t v125;
  float64_t *v126;
  uint64_t v127;
  void *v128;
  __int128 v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE v132[72];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = v2;
  v125 = 0x100000008;
  v123 = &unk_1E25C86C0;
  v124 = xmmword_18D319940;
  v126 = (float64_t *)&v127;
  if (*(_DWORD *)(v2 + 4180))
    v8 = v2 + 3408;
  else
    v8 = v2 + 2648;
  sub_18D053AA8((uint64_t)&v123, v8);
  sub_18D04DDF4((uint64_t)&v120, *v126, v126[1], v126[2]);
  v9 = 1.0;
  if (*(_BYTE *)(v7 + 1408))
  {
    v10 = *(unsigned __int8 *)(v7 + 1520);
    if (v10 >= 0xA || ((0x37Fu >> v10) & 1) == 0)
      v9 = *(double *)(*(_QWORD *)(v7 + 1168) + 536);
  }
  v11 = v6[13];
  v12 = v6[7];
  if (!v121)
    v12 = v6[13];
  v13 = v9 * v12;
  if (v121)
    v14 = v6[8];
  else
    v14 = v6[13];
  if (v121)
    v11 = v6[9];
  result = 0xFFFFFFFFLL;
  if (v13 > 0.0)
  {
    v16 = v9 * v14;
    if (v9 * v14 > 0.0)
    {
      v17 = v9 * v11;
      if (v9 * v11 > 0.0)
      {
        v18 = v6[2];
        v19 = fabs(v18);
        v117 = 0x600000006;
        v115 = &unk_1E25C81B0;
        v118 = (double *)&v119;
        v116 = xmmword_18D314680;
        sub_18D04BE88((uint64_t)&v115, 0.0);
        v20 = v18 * v18 * v19;
        v21 = v118;
        *v118 = v13 * 0.333333333 * v20;
        v22 = v13 * 0.5 * (v18 * v18);
        v23 = HIDWORD(v116);
        v24 = 3 * HIDWORD(v116);
        v21[3 * HIDWORD(v116)] = v22;
        v21[3] = v22;
        v21[v24 + 3] = v13 * v19;
        v21[v23 + 1] = v16 * 0.333333333 * v20;
        v25 = v16 * 0.5 * (v18 * v18);
        v21[(4 * v23) | 1] = v25;
        v21[v23 + 4] = v25;
        v21[4 * v23 + 4] = v16 * v19;
        v26 = 2 * v23;
        v21[2 * v23 + 2] = v17 * 0.333333333 * v20;
        v27 = v17 * 0.5 * (v18 * v18);
        v23 *= 5;
        v21[v23 + 2] = v27;
        v21[v26 + 5] = v27;
        v21[v23 + 5] = v17 * v19;
        sub_18D05C524((uint64_t)v114, (uint64_t)&v115);
        if (v121)
        {
          v71 = 0x300000003;
          v69 = &unk_1E25C78E0;
          v70 = xmmword_18D30BB60;
          v72 = v73;
          sub_18D053AA8((uint64_t)&v69, (uint64_t)&v122);
          v94 = 0x600000006;
          v92 = &unk_1E25C81B0;
          v95 = &v96;
          v93 = xmmword_18D314680;
          sub_18D04BE88((uint64_t)&v92, 0.0);
          v29 = v72;
          v30 = v95;
          *(_QWORD *)v95 = *v72;
          v31 = SHIDWORD(v70);
          v32 = SHIDWORD(v93);
          *((_QWORD *)v30 + SHIDWORD(v93)) = v29[SHIDWORD(v70)];
          *(_QWORD *)&v30[v32] = v29[2 * v31];
          *((_QWORD *)v30 + 1) = v29[1];
          v33 = v31 + 1;
          *((_QWORD *)v30 + (int)v32 + 1) = v29[(int)v31 + 1];
          v34 = &v29[2 * (int)v31];
          v35 = &v30[(_DWORD)v32];
          *((_QWORD *)v35 + 1) = v34[1];
          *((_QWORD *)v30 + 2) = v29[2];
          v36 = v31 + 2;
          *((_QWORD *)v30 + (int)v32 + 2) = v29[(int)v31 + 2];
          *((_QWORD *)v35 + 2) = v34[2];
          LODWORD(v35) = 3 * v32;
          *((_QWORD *)v30 + (int)v35 + 3) = *v29;
          *((_QWORD *)v30 + (int)((4 * v32) | 3)) = v29[v31];
          v37 = v29[2 * v31];
          LODWORD(v31) = 5 * v32;
          *((_QWORD *)v30 + (int)v31 + 3) = v37;
          *((_QWORD *)v30 + (int)v35 + 4) = v29[1];
          LODWORD(v32) = 4 * v32;
          *((_QWORD *)v30 + (int)v32 + 4) = v29[v33];
          *((_QWORD *)v30 + (int)v31 + 4) = v34[1];
          *((_QWORD *)v30 + (int)v35 + 5) = v29[2];
          *((_QWORD *)v30 + (int)v32 + 5) = v29[v36];
          *((_QWORD *)v30 + (int)v31 + 5) = v34[2];
          v84 = 0x600000006;
          v82 = &unk_1E25C81B0;
          v83 = xmmword_18D314680;
          v85 = v86;
          sub_18D053B2C((uint64_t)&v92, (uint64_t)&v115, (uint64_t)&v82);
          v38 = DWORD1(v93);
          v39 = v93;
          v79 = 0x600000006;
          v74 = &unk_1E25C81B0;
          v80 = v81;
          v75 = DWORD1(v93);
          v76 = v93;
          v77 = v93 * DWORD1(v93);
          v78 = DWORD1(v93);
          if (DWORD1(v93))
          {
            v40 = 0;
            v41 = 0;
            v42 = HIDWORD(v93);
            v43 = v95;
            do
            {
              v44 = v40;
              v45 = v41;
              for (i = v39; i; --i)
              {
                v81[v45] = *((_QWORD *)v43 + v44);
                v45 += v38;
                ++v44;
              }
              ++v41;
              v40 += v42;
            }
            while (v41 != v38);
          }
          v106 = 0x600000006;
          v104 = &unk_1E25C81B0;
          v105 = xmmword_18D314680;
          v107 = v108;
          sub_18D053B2C((uint64_t)&v82, (uint64_t)&v74, (uint64_t)&v104);
          sub_18D053AA8((uint64_t)v114, (uint64_t)&v104);
        }
        v111 = 0x200000002;
        v109 = &unk_1E25C75B0;
        v110 = xmmword_18D319340;
        v112 = &v113;
        if (sub_18D05BEA4(v7, (uint64_t)v6, (uint64_t)&v109, COERCE_DOUBLE(0x200000002), v28))
        {
          LOWORD(v92) = 12;
          LOBYTE(v104) = 4;
          v47 = cnprint::CNLogFormatter::FormatGeneral(v7 + 2488, (uint64_t)v6, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix failed");
          if (*(char *)(v7 + 2511) >= 0)
            LOBYTE(v53) = v47;
          else
            v53 = *(_QWORD *)(v7 + 2488);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v92, (unsigned __int8 *)&v104, "%s", v48, v49, v50, v51, v52, v53);
          return 0xFFFFFFFFLL;
        }
        else
        {
          v106 = 0x800000008;
          v104 = &unk_1E25C87E0;
          v107 = v108;
          v105 = xmmword_18D319930;
          sub_18D04BE88((uint64_t)&v104, 0.0);
          for (j = 0; j != 6; ++j)
            *((_DWORD *)&v96 + j) = j;
          v100 = 0x100000008;
          v98 = &unk_1E25C86F0;
          v99 = xmmword_18D319950;
          v102 = v96;
          v101 = &v102;
          v103 = v97;
          sub_18D053C48((uint64_t)&v92, (uint64_t)&v104, (uint64_t)&v98, (uint64_t)&v98);
          sub_18D053EBC((uint64_t)&v92, (uint64_t)v114);
          *(_QWORD *)&v96 = 0x700000006;
          v89 = 0x100000008;
          v87 = &unk_1E25C86F0;
          v88 = xmmword_18D319330;
          v90 = &v91;
          v91 = 0x700000006;
          sub_18D053C48((uint64_t)&v92, (uint64_t)&v104, (uint64_t)&v87, (uint64_t)&v87);
          sub_18D053EBC((uint64_t)&v92, (uint64_t)&v109);
          v66 = 0x800000008;
          v64 = &unk_1E25C87E0;
          v65 = xmmword_18D319930;
          v67 = &v68;
          LOBYTE(v92) = 0;
          sub_18D05C654((uint64_t)&v104, (uint64_t)&v64, (BOOL *)&v92);
          v71 = 0x800000008;
          v69 = &unk_1E25C87E0;
          v70 = xmmword_18D319930;
          v72 = v73;
          v130 = 0x100000008;
          v128 = &unk_1E25C86F0;
          v129 = xmmword_18D319940;
          v131 = v132;
          v94 = 0x100000020;
          v92 = &unk_1E25C7670;
          v93 = xmmword_18D319960;
          v95 = &v96;
          sub_18D04F504((uint64_t)&v64, (uint64_t)&v128, (uint64_t)&v92, (uint64_t)&v69);
          v55 = DWORD1(v70);
          v56 = v70;
          v79 = 0x800000008;
          v74 = &unk_1E25C87E0;
          v80 = v81;
          v75 = DWORD1(v70);
          v76 = v70;
          v77 = v70 * DWORD1(v70);
          v78 = DWORD1(v70);
          if (DWORD1(v70))
          {
            v57 = 0;
            v58 = 0;
            v59 = HIDWORD(v70);
            v60 = v72;
            do
            {
              v61 = v57;
              v62 = v58;
              for (k = v56; k; --k)
              {
                v81[v62] = v60[v61];
                v62 += v55;
                ++v61;
              }
              ++v58;
              v57 += v59;
            }
            while (v58 != v55);
          }
          v130 = 0x100000008;
          v128 = &unk_1E25C86C0;
          v129 = xmmword_18D319940;
          v131 = v132;
          v94 = 0x800000008;
          v92 = &unk_1E25C87E0;
          v93 = xmmword_18D319930;
          v95 = &v96;
          v84 = 0x800000008;
          v82 = &unk_1E25C87E0;
          v83 = xmmword_18D319930;
          v85 = v86;
          sub_18D05C770((uint64_t)&v74, (uint64_t)&v128, (uint64_t)&v92, (uint64_t)&v82);
          sub_18D053AA8(v4, (uint64_t)&v82);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_18D05BEA4(uint64_t a1, uint64_t a2, uint64_t a3, double a4, int8x16_t a5)
{
  int8x16_t v8;
  double v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v19;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  double v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  double v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  double v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  int v44;
  int v45;
  BOOL v47;
  float v48;
  int v49;
  BOOL v50;
  float v51;
  BOOL v52;
  double v53;
  double v54;
  double v55;
  char v56;
  char v57;
  int v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t result;
  double v64;
  double *v65;
  double v66;
  double *v67;
  double v68;
  cnprint::CNPrinter *LogLevel;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double *v87;
  double v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  double v98[2];
  _QWORD v99[2];
  uint64_t v100;
  double v101;
  _QWORD v102[2];
  __int128 v103;

  v103 = *(_OWORD *)a2;
  v8.i64[1] = *((_QWORD *)&v103 + 1);
  v9 = *(double *)(a2 + 16);
  v100 = 0;
  v101 = 0.0;
  *(double *)v8.i64 = v9;
  CNTimeSpan::SetTimeSpan(&v100, 0, v8, a5);
  v12 = CNTimeSpan::operator-(a2, &v100, v10, v11);
  v102[0] = v12;
  v102[1] = v13;
  v14 = *(double *)(a2 + 24);
  v15 = *(double *)(a2 + 32);
  v96 = a3;
  *(_OWORD *)(a3 + 8) = xmmword_18D319340;
  v16 = *(unsigned __int8 *)(a1 + 2216);
  if (*(_BYTE *)(a1 + 2216))
    v17 = *(_BYTE *)(a1 + 2312) != 0;
  else
    v17 = 0;
  v19 = v14 > 0.0 && (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  v21 = v15 > 0.0 && (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  v22 = !v21;
  if (!v17 || v22)
    goto LABEL_29;
  if (!*(_BYTE *)(a1 + 2216))
    goto LABEL_103;
  v99[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 2224) + 16))(a1 + 2224);
  v99[1] = v23;
  v26 = CNTimeSpan::operator-((uint64_t)&v103, v99, v24, v25);
  v100 = v26;
  v101 = v27;
  if (v26 < 0 || (*(double *)v28.i64 = v27, v27 < 0.0))
  {
    v26 = CNTimeSpan::operator-((double *)&v100, v28, v29);
    v28.i64[0] = v30;
  }
  if (!*(_BYTE *)(a1 + 2216))
    goto LABEL_103;
  v31 = *(double *)v28.i64 + (double)v26;
  v97[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 2224) + 16))(a1 + 2224);
  v97[1] = v32;
  v12 = CNTimeSpan::operator-((uint64_t)v102, v97, v33, v34);
  *(_QWORD *)&v98[0] = v12;
  v98[1] = v35;
  if (v12 < 0 || (*(double *)v36.i64 = v35, v35 < 0.0))
  {
    v12 = CNTimeSpan::operator-(v98, v36, v37);
    v36.i64[0] = v38;
  }
  v39 = *(double *)v36.i64 + (double)v12;
  if (v31 > v39)
    v39 = v31;
  if (v39 > v15)
  {
LABEL_29:
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 2216))
      goto LABEL_103;
    if (!*(_BYTE *)(a1 + 2312))
      goto LABEL_104;
    v42 = *(float *)(a1 + 2308) > 0.0 && (*(_DWORD *)(a1 + 2308) & 0x7FFFFFFFu) < 0x7F800000;
    v47 = *(float *)(a1 + 2300) > 0.0 && (*(_DWORD *)(a1 + 2300) & 0x7FFFFFFFu) < 0x7F800000;
    v43 = v47;
    v48 = *(float *)(a1 + 2304);
    v49 = v47 || v42;
    v50 = v48 > 0.0 && (LODWORD(v48) & 0x7FFFFFFFu) < 0x7F800000;
    v44 = v50;
    v51 = *(float *)(a1 + 2296);
    if (!v50)
      v49 = 0;
    v52 = v51 > 0.0 && (LODWORD(v51) & 0x7FFFFFFFu) < 0x7F800000;
    v45 = v52;
    if (v52)
      v41 = 1;
    else
      v41 = v49;
    v40 = 1;
  }
  v53 = fabs(v9);
  v54 = v9 * v9;
  v55 = v54 * v53;
  if (v16)
    v56 = !v17;
  else
    v56 = 1;
  v57 = v56 | !v19 | v22;
  v58 = v40 ^ 1;
  if ((v57 & 1) == 0 && (v58 & 1) == 0 && v41)
  {
    if (*(_BYTE *)(a1 + 2216))
    {
      if (*(_BYTE *)(a1 + 2312))
      {
        v59 = 0.0;
        v60 = 0.0;
        v61 = v53 / v14;
        if (v42)
          v60 = v61 * *(float *)(a1 + 2308) * 0.000001;
        v62 = *(float *)(a1 + 2300) * 0.001 * (*(float *)(a1 + 2300) * 0.001);
        if (!v43)
          v62 = 0.0;
        if (v44)
          v59 = v61 * *(float *)(a1 + 2304) * 0.000001;
        result = 0;
        v64 = *(float *)(a1 + 2296) * 0.001 * (*(float *)(a1 + 2296) * 0.001);
        if (!v45)
          v64 = 0.0;
        v65 = *(double **)(v96 + 32);
        *v65 = v60 + v62 * v53 + v64 * 0.333333333 * v55;
        v66 = v54 * (v64 * 0.5);
        v67 = &v65[*(int *)(v96 + 20)];
        *v67 = v66;
        v65[1] = v66;
        v68 = v59 + v64 * v53;
        goto LABEL_98;
      }
LABEL_104:
      sub_18D164CA0();
    }
LABEL_103:
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  }
  LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v12);
  if (!(_DWORD)LogLevel)
  {
    LOWORD(v100) = 12;
    LOBYTE(v99[0]) = 0;
    v70 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v102, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix using default xo model.  lgpms,%d,xams,%d,gorv,%d,xamvdv,%d,xamu,%d,xamv,%d", v16, v17, v19, v21, v40, v41);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v76) = v70;
    else
      v76 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)v99, "%s", v71, v72, v73, v74, v75, v76);
  }
  if (((v58 | v41) & 1) == 0 && cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v100) = 12;
    LOBYTE(v99[0]) = 1;
    v77 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v102, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix encountered invalid xo model.  Using default model.");
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v83) = v77;
    else
      v83 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)v99, "%s", v78, v79, v80, v81, v82, v83);
  }
  v84 = *(double *)(a2 + 40);
  v85 = *(double *)(a2 + 48);
  if ((*(_QWORD *)&v84 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && v84 > 0.0
    && (*(_QWORD *)&v85 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && v85 > 0.0)
  {
    result = 0;
    v86 = v84 * 1000000.0 * 1000000.0 * 49.348022;
    v87 = *(double **)(v96 + 32);
    *v87 = v55 * (v86 * 0.333333333) + v85 * 1000000.0 * 1000000.0 * 1.25 * v53;
    v88 = v54 * (v86 * 0.5);
    v67 = &v87[*(int *)(v96 + 20)];
    *v67 = v88;
    v87[1] = v88;
    v68 = v53 * v86;
LABEL_98:
    v67[1] = v68;
    return result;
  }
  LOWORD(v100) = 12;
  LOBYTE(v99[0]) = 5;
  v89 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v102, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix called with invalid parameters xo_alpha,%.3lf,xo_gamma,%.3lf.", v84, v85);
  if (*(char *)(a1 + 2511) >= 0)
    LOBYTE(v95) = v89;
  else
    v95 = *(_QWORD *)(a1 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)v99, "%s", v90, v91, v92, v93, v94, v95);
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D05C400(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18D05C40C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  _WORD v11[16];
  _OWORD *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 1))
  {
    if (*(_DWORD *)(a1 + 11904))
    {
      v9 = a1 + 8808;
      sub_18D1C6F64((uint64_t)v11);
      v15 = 0x100000057;
      v13 = &unk_1E25C8420;
      v14 = xmmword_18D3197F0;
      v16 = &v17;
      sub_18D1E7F0C(v9, (uint64_t)v11, (uint64_t)&v13);
      result = 0;
      *a2 = *v12;
      return result;
    }
  }
  else
  {
    LOBYTE(v13) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v11, (unsigned __int8 *)&v13, "WARNING: MeasurementAccumulator.LatestLockedMeasurementTime() called on unlocked accumulator.", a4, a5, a6, a7, a8, 2);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D05C4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  if (*(_BYTE *)(a1 + 1))
    return *(unsigned int *)(a1 + 11904);
  v11 = 2;
  v10 = 2;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "WARNING: MeasurementAccumulator.NumberLocked() called on unlocked accumulator.", a4, a5, a6, a7, a8, v9);
  return 0;
}

__n128 sub_18D05C524(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x600000006;
  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C81B0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 7u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D05C640(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D05C654(uint64_t a1, uint64_t a2, BOOL *a3)
{
  unsigned int v5;
  __CLPK_doublereal *v6;
  __CLPK_integer v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CLPK_integer v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  __CLPK_integer __info;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  char __uplo;

  sub_18D053AA8(a2, a1);
  v5 = *(_DWORD *)(a2 + 12);
  v6 = *(__CLPK_doublereal **)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 20);
  __uplo = 85;
  __lda = v7;
  __n = v5;
  __info = 0;
  dpotrf_(&__uplo, &__n, v6, &__lda, &__info);
  v13 = __info;
  *a3 = __info == 0;
  if (v13)
  {
    LOWORD(__n) = 4;
    if (v13 < 1)
    {
      LOBYTE(__lda) = 5;
      v21 = -v13;
      v14 = "Error using Chol: input argument %d invalid in potrf.";
    }
    else
    {
      LOBYTE(__lda) = 4;
      v14 = "Error using Chol: matrix must be positive definite.";
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__n, (unsigned __int8 *)&__lda, v14, v8, v9, v10, v11, v12, v21);
  }
  else if (v5)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a2 + 32);
    v17 = v5 - 1;
    v18 = 1;
    do
    {
      ++v15;
      v19 = v18;
      v20 = v17;
      if (v15 < v5)
      {
        do
        {
          *(_QWORD *)(v16 + 8 * v19++) = 0;
          --v20;
        }
        while (v20);
      }
      --v17;
      v18 += v5 + 1;
    }
    while (v15 != v5);
  }
}

void sub_18D05C770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CLPK_integer v8;
  __CLPK_doublereal *v9;
  __CLPK_integer v10;
  __CLPK_doublereal *v11;
  __CLPK_doublereal *v12;
  __CLPK_integer v13;
  cnprint::CNPrinter *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int32x4_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  __CLPK_integer __info;
  __CLPK_integer __lwork;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  sub_18D053AA8(a4, a1);
  v8 = *(_DWORD *)(a4 + 8);
  v9 = *(__CLPK_doublereal **)(a4 + 32);
  v10 = *(_DWORD *)(a4 + 20);
  v11 = *(__CLPK_doublereal **)(a2 + 32);
  v12 = *(__CLPK_doublereal **)(a3 + 32);
  v13 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __n = *(_DWORD *)(a4 + 12);
  __m = v8;
  __lwork = v13;
  __lda = v10;
  __info = 0;
  v14 = (cnprint::CNPrinter *)dgeqrf_(&__m, &__n, v9, &__lda, v11, v12, &__lwork, &__info);
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Qr: input argument %d invalid in geqrf.", v15, v16, v17, v18, v19, -(char)__info);
  }
  v20 = (int)**(double **)(a3 + 32);
  if (v13 < v20 && cnprint::CNPrinter::GetLogLevel(v14) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Qr optimal workspace size %d is greater than provided workspace size %d; performance may suffer.",
      v21,
      v22,
      v23,
      v24,
      v25,
      v20);
  }
  v26 = *(_DWORD *)(a1 + 8);
  if (v26 >= *(_DWORD *)(a1 + 12))
    v26 = *(_DWORD *)(a1 + 12);
  v27 = vdupq_lane_s32((int32x2_t)(v26 | 0x100000000), 0);
  v27.i32[1] = 1;
  *(int32x4_t *)(a2 + 8) = v27;
  v28 = *(_DWORD *)(a3 + 24);
  v29 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v29;
  *(_DWORD *)(a3 + 16) = v29 * v28;
  *(_DWORD *)(a3 + 20) = v28;
  v30 = *(_DWORD *)(a4 + 12);
  if (v30)
  {
    v31 = 0;
    v32 = *(_DWORD *)(a4 + 8);
    v33 = *(_QWORD *)(a4 + 32);
    v34 = v32 - 1;
    v35 = *(_DWORD *)(a4 + 20) + 1;
    v36 = 1;
    do
    {
      ++v31;
      v37 = v36;
      v38 = v34;
      if (v31 < v32)
      {
        do
        {
          *(_QWORD *)(v33 + 8 * v37++) = 0;
          --v38;
        }
        while (v38);
      }
      --v34;
      v36 += v35;
    }
    while (v31 != v30);
  }
}

uint64_t sub_18D05C904(_QWORD *a1, uint64_t a2, double *a3, unint64_t a4)
{
  unint64_t v4;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t i;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  char v80;
  char j;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  int8x16_t v86;
  double v87;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  int64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  _QWORD v122[2];
  _QWORD v123[2];
  double v124[2];

  v4 = a4;
  v9 = (char *)a1[2];
  v8 = (char *)a1[1];
  v10 = v9 - v8;
  if (v9 == v8)
    v11 = 0;
  else
    v11 = 2 * (v9 - v8) - 1;
  v12 = a1[4];
  v13 = a1[5] + v12;
  if (v11 == v13)
  {
    if (v12 < 0x10)
    {
      v27 = v10 >> 3;
      v28 = (char *)a1[3];
      v29 = (char *)*a1;
      v30 = (uint64_t)&v28[-*a1];
      if (v10 >> 3 >= (unint64_t)(v30 >> 3))
      {
        v33 = v30 >> 2;
        if (v28 == v29)
          v34 = 1;
        else
          v34 = v33;
        v35 = (char *)sub_18D07BF3C(v34);
        v37 = v36;
        v38 = operator new(0x9800uLL);
        v39 = &v35[8 * v27];
        v40 = v37;
        v41 = &v35[8 * v37];
        if (v27 == v40)
        {
          v42 = 8 * v27;
          if (v10 < 1)
          {
            v55 = v38;
            v56 = v42 >> 2;
            if (v9 == v8)
              v57 = 1;
            else
              v57 = v56;
            v58 = (char *)sub_18D07BF3C(v57);
            v39 = &v58[8 * (v57 >> 2)];
            v41 = &v58[8 * v59];
            if (v35)
              operator delete(v35);
            v35 = v58;
            v38 = v55;
          }
          else
          {
            v43 = v42 >> 3;
            if (v43 >= -1)
              v44 = v43 + 1;
            else
              v44 = v43 + 2;
            v39 -= 8 * (v44 >> 1);
          }
        }
        *(_QWORD *)v39 = v38;
        v60 = v39 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v39 == v35)
          {
            if (v60 >= v41)
            {
              if (v41 == v35)
                v66 = 1;
              else
                v66 = (v41 - v35) >> 2;
              v67 = (char *)sub_18D07BF3C(v66);
              v69 = v67;
              v39 = &v67[(2 * v66 + 6) & 0xFFFFFFFFFFFFFFF8];
              v71 = v60 - v35;
              v70 = v60 == v35;
              v60 = v39;
              if (!v70)
              {
                v60 = &v39[v71 & 0xFFFFFFFFFFFFFFF8];
                v72 = 8 * (v71 >> 3);
                v73 = v39;
                v74 = (uint64_t *)v35;
                do
                {
                  v75 = *v74++;
                  *(_QWORD *)v73 = v75;
                  v73 += 8;
                  v72 -= 8;
                }
                while (v72);
              }
              v41 = &v67[8 * v68];
              if (v35)
                operator delete(v35);
              v35 = v69;
            }
            else
            {
              v62 = (v41 - v60) >> 3;
              if (v62 >= -1)
                v63 = v62 + 1;
              else
                v63 = v62 + 2;
              v64 = v63 >> 1;
              v39 = &v35[8 * (v63 >> 1)];
              v65 = v35;
              if (v60 != v35)
              {
                memmove(v39, v35, v60 - v35);
                v65 = v60;
              }
              v60 = &v65[8 * v64];
            }
          }
          v76 = *(_QWORD *)(i - 8);
          *((_QWORD *)v39 - 1) = v76;
          v39 -= 8;
        }
        v77 = (char *)*a1;
        *a1 = v35;
        a1[1] = v39;
        a1[2] = v60;
        a1[3] = v41;
        v4 = a4;
        if (v77)
          operator delete(v77);
        goto LABEL_66;
      }
      v31 = operator new(0x9800uLL);
      v32 = v31;
      if (v28 != v9)
      {
        *(_QWORD *)v9 = v31;
        a1[2] += 8;
        v4 = a4;
LABEL_66:
        v8 = (char *)a1[1];
        v13 = a1[5] + a1[4];
        goto LABEL_67;
      }
      if (v8 == v29)
      {
        if (v9 == v8)
          v89 = 1;
        else
          v89 = (v28 - v8) >> 2;
        v90 = 2 * v89;
        v91 = (char *)sub_18D07BF3C(v89);
        v8 = &v91[(v90 + 6) & 0xFFFFFFFFFFFFFFF8];
        v93 = (uint64_t *)a1[1];
        v94 = v8;
        v95 = a1[2] - (_QWORD)v93;
        v4 = a4;
        if (v95)
        {
          v94 = &v8[v95 & 0xFFFFFFFFFFFFFFF8];
          v96 = 8 * (v95 >> 3);
          v97 = &v91[(v90 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            v98 = *v93++;
            *(_QWORD *)v97 = v98;
            v97 += 8;
            v96 -= 8;
          }
          while (v96);
        }
        v99 = (char *)*a1;
        *a1 = v91;
        a1[1] = v8;
        a1[2] = v94;
        a1[3] = &v91[8 * v92];
        if (v99)
        {
          operator delete(v99);
          v8 = (char *)a1[1];
        }
      }
      else
      {
        v4 = a4;
      }
      *((_QWORD *)v8 - 1) = v32;
      v100 = (char *)a1[1];
      v101 = (char *)a1[2];
      a1[1] = v100 - 8;
      v102 = *((_QWORD *)v100 - 1);
      a1[1] = v100;
      if (v101 == (char *)a1[3])
      {
        v103 = (uint64_t)&v100[-*a1];
        if ((unint64_t)v100 <= *a1)
        {
          if (v101 == (char *)*a1)
            v111 = 1;
          else
            v111 = (uint64_t)&v101[-*a1] >> 2;
          v112 = (char *)sub_18D07BF3C(v111);
          v114 = &v112[8 * (v111 >> 2)];
          v115 = (uint64_t *)a1[1];
          v101 = v114;
          v116 = a1[2] - (_QWORD)v115;
          if (v116)
          {
            v101 = &v114[v116 & 0xFFFFFFFFFFFFFFF8];
            v117 = 8 * (v116 >> 3);
            v118 = &v112[8 * (v111 >> 2)];
            do
            {
              v119 = *v115++;
              *(_QWORD *)v118 = v119;
              v118 += 8;
              v117 -= 8;
            }
            while (v117);
          }
          v120 = (char *)*a1;
          *a1 = v112;
          a1[1] = v114;
          a1[2] = v101;
          a1[3] = &v112[8 * v113];
          if (v120)
          {
            operator delete(v120);
            v101 = (char *)a1[2];
          }
        }
        else
        {
          v104 = v103 >> 3;
          v19 = v103 >> 3 < -1;
          v105 = (v103 >> 3) + 2;
          if (v19)
            v106 = v105;
          else
            v106 = v104 + 1;
          v107 = -(v106 >> 1);
          v108 = v106 >> 1;
          v109 = &v100[-8 * v108];
          v110 = v101 - v100;
          if (v101 != v100)
          {
            memmove(&v100[-8 * v108], v100, v101 - v100);
            v100 = (char *)a1[1];
          }
          v101 = &v109[v110];
          a1[1] = &v100[8 * v107];
          a1[2] = &v109[v110];
        }
      }
      *(_QWORD *)v101 = v102;
    }
    else
    {
      a1[4] = v12 - 16;
      v16 = *(_QWORD *)v8;
      v14 = v8 + 8;
      v15 = v16;
      a1[1] = v14;
      if (v9 == (char *)a1[3])
      {
        v17 = (uint64_t)&v14[-*a1];
        if ((unint64_t)v14 <= *a1)
        {
          if (v9 == (char *)*a1)
            v45 = 1;
          else
            v45 = (uint64_t)&v9[-*a1] >> 2;
          v46 = (char *)sub_18D07BF3C(v45);
          v48 = &v46[8 * (v45 >> 2)];
          v49 = (uint64_t *)a1[1];
          v9 = v48;
          v50 = a1[2] - (_QWORD)v49;
          if (v50)
          {
            v9 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
            v51 = 8 * (v50 >> 3);
            v52 = &v46[8 * (v45 >> 2)];
            do
            {
              v53 = *v49++;
              *(_QWORD *)v52 = v53;
              v52 += 8;
              v51 -= 8;
            }
            while (v51);
          }
          v54 = (char *)*a1;
          *a1 = v46;
          a1[1] = v48;
          a1[2] = v9;
          a1[3] = &v46[8 * v47];
          if (v54)
          {
            operator delete(v54);
            v9 = (char *)a1[2];
          }
        }
        else
        {
          v18 = v17 >> 3;
          v19 = v17 >> 3 < -1;
          v20 = (v17 >> 3) + 2;
          if (v19)
            v21 = v20;
          else
            v21 = v18 + 1;
          v22 = -(v21 >> 1);
          v23 = v21 >> 1;
          v24 = &v14[-8 * v23];
          v25 = v9 - v14;
          if (v9 != v14)
          {
            memmove(&v14[-8 * v23], v14, v9 - v14);
            v9 = (char *)a1[1];
          }
          v26 = &v9[8 * v22];
          v9 = &v24[v25];
          a1[1] = v26;
          a1[2] = &v24[v25];
        }
      }
      *(_QWORD *)v9 = v15;
    }
    a1[2] += 8;
    goto LABEL_66;
  }
LABEL_67:
  v78 = (_QWORD *)(*(_QWORD *)&v8[(v13 >> 1) & 0x7FFFFFFFFFFFFFF8] + 2432 * (v13 & 0xF));
  *v78 = &unk_1E25C2B48;
  memcpy(v78 + 1, (const void *)(a2 + 8), 0x971uLL);
  v79 = a1[5];
  a1[5] = v79 + 1;
  if (v79 == -1)
  {
    v80 = 1;
  }
  else
  {
    for (j = 1; ; j = 0)
    {
      v123[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v123[1] = v82;
      v83 = *(_QWORD *)(a1[1] + ((a1[4] >> 1) & 0x7FFFFFFFFFFFFFF8)) + 2432 * (a1[4] & 0xFLL);
      v122[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
      v122[1] = v84;
      *(_QWORD *)&v124[0] = CNTimeSpan::operator-((uint64_t)v123, v122, v85, v86);
      v124[1] = v87;
      if (!sub_18D03F608(v124, a3) && a1[5] <= v4)
        break;
      sub_18D05D168((uint64_t)a1);
      v80 = 0;
      if (!a1[5])
        return v80 & 1;
    }
    v80 = j;
  }
  return v80 & 1;
}

void sub_18D05CEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D05CEF4(uint64_t a1, uint64_t *a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  char *v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  uint64_t v25;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v6 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v6;
  v7 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E25C1900;
  v8[1] = &unk_1E25C2B48;
  memcpy(v8 + 2, a2 + 1, 0x971uLL);
  v9 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v10 + 16))(a2);
  *((_QWORD *)v4 + 8) = v11;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v24, a2);
  if (v4[95] < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v24;
  *((_QWORD *)v4 + 11) = v25;
  v22 = v4 + 24;
  v23 = (std::__shared_weak_count *)v4;
  v12 = *(_QWORD *)(a1 + 344);
  v20 = v4 + 24;
  v21 = (std::__shared_weak_count *)v4;
  do
    v13 = __ldxr(v5);
  while (__stxr(v13 + 1, v5));
  (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)v12 + 16))(v12, &v20, a1);
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_18D05D0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D05D14C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D05D158@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenSolutionEvent");
}

void sub_18D05D168(uint64_t a1)
{
  void (***v2)(_QWORD);
  int64x2_t v3;

  v2 = (void (***)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                 + ((*(_QWORD *)(a1 + 32) >> 1) & 0x7FFFFFFFFFFFFFF8))
                                     + 2432 * (*(_QWORD *)(a1 + 32) & 0xFLL));
  (**v2)(v2);
  v3 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_18D30B1A0);
  *(int64x2_t *)(a1 + 32) = v3;
  if (v3.i64[0] >= 0x20uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 16;
  }
}

void sub_18D05D1F4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;

  raven::PopulateAllTimeFields(a1 + 8, a2, a3, a4, a5, a6);
  raven::PopulateAllTimeFields(a1 + 1168, a2, a3, a4, v10, v11);
  raven::PopulateAllTimeFields(a1 + 112, a2, a3, a4, v12, v13);
  raven::PopulateAllTimeFields(a1 + 2032, a2, a3, a4, v14, v15);
}

void raven::PopulateAllTimeFields(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  double v23;
  unsigned __int8 v24;
  __int16 v25;
  _QWORD v26[2];

  v26[0] = CNTimeSpan::operator-(a1, (_QWORD *)a2, a5, a6);
  v26[1] = v10;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_QWORD *)(a1 + 24) = CNTimeSpan::operator+(a2 + 24, v26, v11, v12);
    *(_QWORD *)(a1 + 32) = v13;
    *(_BYTE *)(a1 + 16) = 1;
  }
  if (*(_BYTE *)(a2 + 40))
  {
    *(_QWORD *)(a1 + 48) = CNTimeSpan::operator+(a2 + 48, v26, v11, v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_BYTE *)(a1 + 40) = 1;
    v21.i64[0] = *a4;
    if ((*a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)v21.i64 <= 0.0)
    {
      v25 = 12;
      v24 = 4;
      v23 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, &v24, "t,%.3lf,invalid clock uncertainty,%.3lf", v15, v16, v17, v18, v19, SLOBYTE(v23));
    }
    else
    {
      *(_QWORD *)(a1 + 72) = CNTimeSpan::operator-(a1 + 48, a3, v21, v20);
      *(_QWORD *)(a1 + 80) = v22;
      *(_BYTE *)(a1 + 64) = 1;
      *(_QWORD *)(a1 + 88) = *a4;
    }
  }
}

uint64_t sub_18D05D360(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;

  raven::PopulateAllTimeFields(a1 + 8, a2, a3, a4);
  raven::PopulateAllTimeFields(a1 + 1168, a2, v6, v7);
  raven::PopulateAllTimeFields(a1 + 112, a2, v8, v9);
  return raven::PopulateAllTimeFields(a1 + 2032, a2, v10, v11);
}

uint64_t sub_18D05D3A8(uint64_t a1, double *a2)
{
  double v2;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  long double v36;
  double v37;
  double v38;

  v2 = *a2;
  if (*a2 < 0.0)
    return 0xFFFFFFFFLL;
  if (fabs(v2) < 2.22044605e-16)
    return 0;
  v5 = *(double *)(a1 + 40);
  v6 = v2 / *(double *)(a1 + 48);
  v7 = *(double *)(a1 + 32);
  v8 = 1.0 - v5;
  v9 = 1.0 - v7;
  v10 = sqrt((v7 * v5 - (1.0 - v5) * (1.0 - v7)) * -4.0 + (v7 + v5) * (v7 + v5));
  v11 = (v7 + v5 + v10) * 0.5;
  v12 = (v7 + v5 - v10) * 0.5;
  v13 = v7 + 1.0 - v5;
  v14 = 1.0 - v7 + v5;
  v15 = (1.0 - v7) / (v11 - v5);
  v16 = (v11 - v5) / (1.0 - v7);
  if (1.0 - v7 <= vabdd_f64(v11, v5))
    v16 = 1.0;
  else
    v15 = 1.0;
  v17 = v12 - v5;
  v25 = v9 <= vabdd_f64(v12, v5);
  v18 = v9 / (v12 - v5);
  v19 = v17 / v9;
  if (v25)
    v19 = 1.0;
  else
    v18 = 1.0;
  v20 = v8 / (v11 - v7);
  v21 = (v11 - v7) / v8;
  if (v8 > vabdd_f64(v11, v7))
    v20 = 1.0;
  else
    v21 = 1.0;
  v22 = v12 - v7;
  v25 = v8 <= vabdd_f64(v12, v7);
  v23 = v8 / (v12 - v7);
  v24 = v22 / v8;
  if (v25)
    v24 = 1.0;
  else
    v23 = 1.0;
  v25 = v13 <= v14;
  if (v13 > v14)
    v26 = v21;
  else
    v26 = v15;
  if (v13 > v14)
    v27 = v20;
  else
    v27 = v16;
  if (v25)
    v23 = v19;
  else
    v18 = v24;
  v28 = sqrt(v26 * v26 + v27 * v27);
  v29 = v27 / v28;
  v30 = v26 / v28;
  v31 = sqrt(v18 * v18 + v23 * v23);
  v32 = v23 / v31;
  v33 = v18 / v31;
  v34 = v27 / v28 * (v18 / v31) - v30 * (v23 / v31);
  v35 = pow(v11, v6);
  v36 = pow(v12, v6) * v32;
  v37 = (v29 * v36 + -(v35 * v29) * v32) / v34;
  v38 = (v35 * v29 * v33 - v36 * v30) / v34;
  if (!*(_DWORD *)(a1 + 24))
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  return sub_18D05DC00(a1 + 8, (double *)(a1 + 16), &v38, &v37);
}

double sub_18D05D584(_BYTE *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  sub_18D05D5B4((uint64_t)a1, (uint64_t)a2);
  *a1 = 0;
  *(_QWORD *)&result = sub_18D05DB3C((uint64_t)a1, a2, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

void sub_18D05D5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  __n128 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int32x4_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int32x4_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  if (*(_BYTE *)v2)
  {
    v4 = (__n128 *)v3;
    v5 = v2;
    if (*(_BYTE *)(v2 + 1))
      *(_BYTE *)(v2 + 1) = 0;
    if (*(_DWORD *)(v2 + 5936))
    {
      if (!sub_18D05B574(v3, (double *)(v2 + 8)))
      {
        v6 = *(unsigned int *)(v5 + 5936);
        v70 = 0x1000000AELL;
        v68 = &unk_1E25C6500;
        if ((v6 & 0x80000000) != 0)
          __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
        v7 = 0;
        v8 = vdupq_lane_s32((int32x2_t)(v6 | 0x100000000), 0);
        v8.i32[1] = 1;
        v69 = v8;
        v71 = &v72;
        if ((_DWORD)v6)
        {
          v9 = *(_QWORD **)(v5 + 48);
          if (v9 != (_QWORD *)(v5 + 40))
          {
            v10 = 0;
            v7 = 0;
            v11 = 1;
            do
            {
              if (sub_18D03F608((double *)(*(_QWORD *)(v5 + 96) + v10), v4->n128_f64))
              {
                *((_DWORD *)v71 + (int)v7) = v11 - 1;
                v9 = (_QWORD *)v9[1];
                ++v7;
              }
              else
              {
                v12 = (_QWORD *)*v9;
                v13 = (_QWORD *)v9[1];
                v12[1] = v13;
                *(_QWORD *)v9[1] = v12;
                --*(_QWORD *)(v5 + 56);
                sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v9 + 2);
                operator delete(v9);
                v9 = v13;
              }
              if (v11 >= v6)
                break;
              ++v11;
              v10 += 16;
            }
            while (v9 != (_QWORD *)(v5 + 40));
          }
        }
        v14 = vdupq_lane_s32((int32x2_t)(v7 | 0x100000000), 0);
        v14.i32[1] = 1;
        v69 = v14;
        if (v7 <= 1)
          v15 = 1;
        else
          v15 = v7;
        if (!v7)
          v15 = 0;
        *(_DWORD *)(v5 + 5936) = v15;
        sub_18D1E83CC((uint64_t)v57, v5 + 64, (uint64_t)&v68);
        sub_18D1E84D8(v5 + 64, (uint64_t)v57);
        sub_18D1E8568((uint64_t)v57, v5 + 2888, (uint64_t)&v68);
        sub_18D053D7C(v5 + 2888, (uint64_t)v57);
        sub_18D1E8650((uint64_t)v57, v5 + 3624, (uint64_t)&v68);
        sub_18D053AA8(v5 + 3624, (uint64_t)v57);
        sub_18D1E8750((uint64_t)v57, v5 + 5056, (uint64_t)&v68);
        sub_18D1E890C(v5 + 5056, (uint64_t)v57);
        v61 = &unk_1E25C5EA0;
        v16 = v60;
        *(_QWORD *)v57 = &unk_1E25C63E0;
        v60 = 0;
        if (v16)
        {
          v17 = v16 - 16;
          v18 = *(_QWORD *)(v16 - 8);
          if (v18)
          {
            v19 = v18 << 6;
            v20 = v16 - 64;
            do
            {
              *(_QWORD *)(v20 + v19) = &unk_1E25C5E70;
              v19 -= 64;
            }
            while (v19);
          }
          MEMORY[0x18D78B5BC](v17, 0x1081C8052DD7B27);
        }
        sub_18D1E8568((uint64_t)v57, v5 + 5104, (uint64_t)&v68);
        sub_18D053D7C(v5 + 5104, (uint64_t)v57);
        sub_18D1E8750((uint64_t)v57, v5 + 5840, (uint64_t)&v68);
        sub_18D1E890C(v5 + 5840, (uint64_t)v57);
        v61 = &unk_1E25C5EA0;
        v21 = v60;
        *(_QWORD *)v57 = &unk_1E25C63E0;
        v60 = 0;
        if (v21)
        {
          v22 = v21 - 16;
          v23 = *(_QWORD *)(v21 - 8);
          if (v23)
          {
            v24 = v23 << 6;
            v25 = v21 - 64;
            do
            {
              *(_QWORD *)(v25 + v24) = &unk_1E25C5E70;
              v24 -= 64;
            }
            while (v24);
          }
          MEMORY[0x18D78B5BC](v22, 0x1081C8052DD7B27);
        }
        sub_18D1E89E8((uint64_t)v57, v5 + 5888, (uint64_t)&v68);
        sub_18D1E8BA8(v5 + 5888, (uint64_t)v57);
        v61 = &unk_1E25C5EA0;
        v26 = v60;
        *(_QWORD *)v57 = &unk_1E25C6410;
        v60 = 0;
        if (v26)
        {
          v27 = v26 - 16;
          v28 = *(_QWORD *)(v26 - 8);
          if (v28)
          {
            v29 = 112 * v28;
            v30 = v26 - 112;
            do
            {
              *(_QWORD *)(v30 + v29) = &unk_1E25C5E70;
              v29 -= 112;
            }
            while (v29);
          }
          MEMORY[0x18D78B5BC](v27, 0x1081C80064FE0DDLL);
        }
        v58 = 0x1000000AELL;
        *(_OWORD *)&v57[8] = xmmword_18D3197E0;
        *(_QWORD *)v57 = &off_1E25C53F0;
        v59 = &v60;
        v62 = v5 + 5944;
        v65 = 0x1000000AELL;
        v63 = &unk_1E25C6500;
        v64 = xmmword_18D3197E0;
        v66 = &v67;
        sub_18D053D7C((uint64_t)&v63, (uint64_t)&v68);
        v31 = v64;
        v32 = DWORD1(v64);
        *(_QWORD *)&v57[8] = v64;
        v33 = (DWORD1(v64) * v64);
        *(_DWORD *)&v57[16] = v33;
        *(_DWORD *)&v57[20] = v64;
        v34 = (v33 - 1);
        if ((int)v33 >= 1)
        {
          for (i = 0; i != v33; ++i)
            v59[i] = *(_QWORD *)(*(_QWORD *)(v5 + 5976) + 8 * *((int *)v66 + i));
        }
        if ((_BYTE *)(v5 + 5944) != v57)
        {
          *(_DWORD *)(v5 + 5952) = v31;
          *(_DWORD *)(v5 + 5956) = v32;
          *(_DWORD *)(v5 + 5960) = v33;
          *(_DWORD *)(v5 + 5964) = v31;
          if ((int)v33 > 3)
          {
            v50 = *(_QWORD **)(v5 + 5976);
            v51 = v59;
            v52 = v59;
            v53 = v50;
            v54 = v34;
            do
            {
              v55 = *v52++;
              *v53++ = v55;
              --v54;
            }
            while (v54);
            v50[v34] = v51[v34];
          }
          else if ((int)v33 >= 1)
          {
            v36 = 0;
            v37 = 8 * v33;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v5 + 5976) + v36) = v59[v36 / 8];
              v36 += 8;
            }
            while (v37 != v36);
          }
        }
        v56 = v5 + 7376;
        sub_18D1E8CC0((uint64_t)v57, v56, (uint64_t)&v68);
        sub_18D1E8DC8(v56, (uint64_t)v57);
      }
    }
    else
    {
      *(_OWORD *)v57 = *(_OWORD *)(v2 + 8);
      sub_18D04AE0C(v2);
      sub_18D05DB3C(v5, v4, v38, v39, v40, v41, v42, v43);
      *(_BYTE *)v5 = 0;
      sub_18D05DB3C(v5, (__n128 *)v57, v44, v45, v46, v47, v48, v49);
    }
  }
}

void sub_18D05DB0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D1C3A48((uint64_t *)(v1 + 40));
  _Unwind_Resume(a1);
}

__n128 sub_18D05DB3C(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  if (*(_BYTE *)a1)
  {
    v11 = 2;
    v10 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "WARNING: MeasurementAccumulator.InitializeTime() called twice.", a4, a5, a6, a7, a8, v9);
  }
  else
  {
    result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *(_BYTE *)a1 = 1;
  }
  return result;
}

void sub_18D05DB90(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*v3;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (_QWORD *)v3[1];
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_18D05DC00(uint64_t a1, double *a2, long double *a3, double *a4)
{
  double v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  double v27;
  long double v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  __int16 v36;
  unsigned __int8 v37;
  __int16 v38;
  unsigned __int8 v39;
  __int16 v40;

  v5 = *a2;
  if (*a2 < 0.0 || v5 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v40 = 2;
      v39 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "WARNING: DiscreteEventDetector::Predict called with bad x %.3lf.", v7, v8, v9, v10, v11, *(_QWORD *)a2);
    }
    return 0xFFFFFFFFLL;
  }
  if (*a3 < 0.0 || *a3 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v38 = 2;
      v37 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "WARNING: DiscreteEventDetector::Predict called with bad pxbargx %.3lf.", v14, v15, v16, v17, v18, *(_QWORD *)a3);
    }
    return 0xFFFFFFFFLL;
  }
  if (*a4 < 0.0 || *a4 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v36 = 2;
      v35 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "WARNING: DiscreteEventDetector::Predict called with bad pxbargnx %.3lf.", v30, v31, v32, v33, v34, *(_QWORD *)a4);
    }
    return 0xFFFFFFFFLL;
  }
  *(double *)(a1 + 8) = v5;
  v21 = 0.0;
  v22 = fmax(1.0 - v5, 0.0);
  *(_QWORD *)a1 = 0;
  if (fabs(v5) >= 2.22044605e-16 && fabs(*a3) >= 2.22044605e-16)
  {
    v23 = log(*a3);
    v24 = log(v5);
    v21 = exp(v24 + v23);
    *(double *)a1 = v21;
  }
  v25 = fabs(*a4);
  if (fabs(v22) >= 2.22044605e-16 && v25 >= 2.22044605e-16)
  {
    v27 = log(*a4);
    v28 = log(v22);
    v21 = v21 + exp(v28 + v27);
  }
  result = 0;
  *(double *)a1 = fmin(v21, 1.0);
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void cnframework::Supervisor::Reset(cnframework::Supervisor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  cnprint::CNPrinter *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  unsigned __int8 v32;
  void *__p[2];
  char v34;
  unsigned __int8 v35;
  __int16 v36;

  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v36 = 3;
    v35 = 1;
    (*(void (**)(void **__return_ptr, cnframework::Supervisor *))(*(_QWORD *)this + 40))(__p, this);
    if (v34 >= 0)
      v7 = __p;
    else
      LOBYTE(v7) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s calling Supervisor::Reset", v2, v3, v4, v5, v6, (char)v7);
    if (v34 < 0)
      operator delete(__p[0]);
  }
  std::mutex::lock((std::mutex *)((char *)this + 680));
  v8 = *((unsigned __int8 *)this + 672);
  std::mutex::unlock((std::mutex *)((char *)this + 680));
  if (v8)
    cnframework::Supervisor::Pause(this);
  v35 = 0;
  if (*((_BYTE *)this + 8) || (v16 = atomic_load((unsigned __int8 *)this + 744), v35 = v16, !v16))
  {
    v15 = 1;
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    cnframework::Supervisor::SetThreadingModel((uint64_t)this, (unsigned __int8 *)__p, v9, v10, v11, v12, v13, v14);
    v15 = 0;
  }
  std::mutex::lock((std::mutex *)((char *)this + 608));
  *((_BYTE *)this + 584) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 75) = 0x7FF8000000000000;
  std::mutex::unlock((std::mutex *)((char *)this + 608));
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 520));
  v17 = (_QWORD *)*((_QWORD *)this + 62);
  v18 = (_QWORD *)*((_QWORD *)this + 63);
  while (v17 != v18)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 48))(*v17);
    ++v17;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 520));
  if ((v15 & 1) == 0)
    cnframework::Supervisor::SetThreadingModel((uint64_t)this, &v35, v19, v20, v21, v22, v23, v24);
  v25 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::Supervisor *))(*(_QWORD *)this + 128))(this);
  if (v8)
    cnframework::Supervisor::Start(this);
  if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
  {
    v36 = 3;
    v32 = 1;
    (*(void (**)(void **__return_ptr, cnframework::Supervisor *))(*(_QWORD *)this + 40))(__p, this);
    if (v34 >= 0)
      v31 = __p;
    else
      LOBYTE(v31) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v32, "%s Supervisor::Reset completed", v26, v27, v28, v29, v30, (char)v31);
    if (v34 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D05E010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cnframework::ActiveObjectBase::ResetEventQueue(cnframework::ActiveObjectBase *this)
{
  int v2;
  std::mutex *v3;
  _QWORD v4[4];
  void **v5;

  v2 = *((unsigned __int8 *)this + 168);
  if (*((_BYTE *)this + 168))
  {
    v3 = 0;
  }
  else
  {
    v3 = (std::mutex *)((char *)this + 280);
    std::mutex::lock((std::mutex *)((char *)this + 280));
  }
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0x7FF8000000000000;
  *((_QWORD *)this + 27) = 0;
  sub_18D05E0CC((void **)this + 30);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  memset(v4, 0, 24);
  v5 = (void **)v4;
  sub_18D07C7AC(&v5);
  if (!v2)
    std::mutex::unlock(v3);
}

void sub_18D05E0CC(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_18D07C868(v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *raven::RavenSupervisor::GetSupervisorName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenSupervisor");
}

void sub_18D05E13C(cnframework::ActiveObjectBase *this)
{
  if (*((_BYTE *)this + 480))
    sub_18D05E174((uint64_t)this);
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18D05E174(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 17345) = 0;
  v2 = *(void ***)(a1 + 18088);
  v3 = *(void ***)(a1 + 18096);
  if (v3 == v2)
  {
    v6 = (_QWORD *)(a1 + 18120);
    v3 = *(void ***)(a1 + 18088);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 18112);
    v5 = &v2[v4 / 0x1A];
    v6 = (_QWORD *)(a1 + 18120);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 18120) + v4) / 0x1A] + 152 * ((*(_QWORD *)(a1 + 18120) + v4) % 0x1A);
    if ((char *)*v5 + 152 * (v4 % 0x1A) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v5 + 152 * (v4 % 0x1A));
      do
      {
        v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v5 == 3952)
        {
          v10 = (void (***)(void))v5[1];
          ++v5;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v3 = *(void ***)(a1 + 18096);
      v2 = *(void ***)(a1 + 18088);
    }
  }
  *v6 = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*(_QWORD *)(a1 + 18088) + 8);
      *(_QWORD *)(a1 + 18088) = v2;
      v11 = *(_QWORD *)(a1 + 18096) - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v12 = 13;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v12 = 26;
  }
  *(_QWORD *)(a1 + 18112) = v12;
}

double sub_18D05E2C4(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  result = NAN;
  *(_OWORD *)(a1 + 736) = xmmword_18D319350;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 984) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 992) = 0x3FE0000000000000;
  return result;
}

void raven::RavenActivityStateEstimatorActiveObject::Reset(raven::RavenActivityStateEstimatorActiveObject *this)
{
  void *v2;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 608))
      *((_BYTE *)this + 608) = 0;
    if (*((_BYTE *)this + 824))
      *((_BYTE *)this + 824) = 0;
    if (*((_BYTE *)this + 1064))
    {
      *((_QWORD *)this + 104) = &off_1E25C2AE0;
      v2 = (void *)*((_QWORD *)this + 130);
      if (v2)
      {
        *((_QWORD *)this + 131) = v2;
        operator delete(v2);
      }
      *((_BYTE *)this + 1064) = 0;
    }
    if (*((_BYTE *)this + 1232))
      *((_BYTE *)this + 1232) = 0;
    if (*((_BYTE *)this + 1400))
      *((_BYTE *)this + 1400) = 0;
    *((_BYTE *)this + 1408) = 0;
    *((_QWORD *)this + 211) = 0;
    *((_QWORD *)this + 212) = 0x7FF8000000000000;
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18D05E390(cnframework::ActiveObjectBase *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = (uint64_t)a1 + 480;
  v4[0] = cnframework::ActiveObjectBase::GetCurrentTime(a1);
  v4[1] = v3;
  raven::RavenSolutionPostprocessor::Reset(v2, (uint64_t)v4);
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

void sub_18D05E3D8(cnframework::ActiveObjectBase *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  __int16 v10;

  if ((*(unsigned int (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)a1 + 104))(a1))
  {
    v10 = 12;
    v9 = 2;
    v2 = cnprint::CNLogFormatter::FormatGeneral((const void **)a1 + 62, "Resetting");
    if (*((char *)a1 + 519) >= 0)
      LOBYTE(v8) = v2;
    else
      v8 = *((_QWORD *)a1 + 62);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v10, &v9, "%s", v3, v4, v5, v6, v7, v8);
    raven::RavenPassThroughEstimator::Reset((cnframework::ActiveObjectBase *)((char *)a1 + 544));
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

uint64_t sub_18D05E468(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 480);
}

void raven::RavenMovingStateEstimatorActiveObject::Reset(raven::RavenMovingStateEstimatorActiveObject *this)
{
  raven::RavenMovingStateEstimator::Reset((raven::RavenMovingStateEstimatorActiveObject *)((char *)this + 536));
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18D05E4A0(cnframework::ActiveObjectBase *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  __int16 v10;
  _BYTE v11[2417];

  if ((*(unsigned int (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)a1 + 104))(a1))
  {
    v10 = 12;
    v9 = 2;
    v2 = cnprint::CNLogFormatter::FormatGeneral((const void **)a1 + 62, "Resetting");
    if (*((char *)a1 + 519) >= 0)
      LOBYTE(v8) = v2;
    else
      v8 = *((_QWORD *)a1 + 62);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v10, &v9, "%s", v3, v4, v5, v6, v7, v8);
    raven::RavenConvergenceEstimator::Reset((cnframework::ActiveObjectBase *)((char *)a1 + 3000));
  }
  *((_BYTE *)a1 + 544) = 0;
  *((_QWORD *)a1 + 69) = 0;
  *((_QWORD *)a1 + 70) = 0xFFF0000000000000;
  sub_18D0409EC((uint64_t)&v10);
  memcpy((char *)a1 + 576, v11, 0x971uLL);
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

uint64_t sub_18D05E568(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 480);
}

const void **cnprint::CNLogFormatter::FormatGeneral(const void **this, char *__format, ...)
{
  _QWORD v4[3];
  va_list va;

  va_start(va, __format);
  v4[1] = 0;
  va_copy((va_list)&v4[2], va);
  v4[0] = 0;
  cnprint::CNLogFormatter::FormatCore((uint64_t)this, this + 3, (uint64_t)v4, 0, __format, va);
  return this;
}

uint64_t cnprint::CNLogFormatter::FormatGeneral(uint64_t a1, uint64_t a2, char *__format, ...)
{
  va_list va;

  va_start(va, __format);
  cnprint::CNLogFormatter::FormatCore(a1, (const void **)(a1 + 24), a2, 1, __format, va);
  return a1;
}

void cnprint::CNLogFormatter::FormatCore(uint64_t a1, const void **a2, uint64_t a3, int a4, char *__format, va_list a6)
{
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  std::string v15;
  std::string __p;
  _QWORD v17[2];
  char __str[2048];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  if (a4 && snprintf(__str, 0x800uLL, "time,%.3lf,", *(double *)(a3 + 8) + (double)*(uint64_t *)a3) >= 1)
    sub_18D099E08(&__p, __str);
  if (vsnprintf(__str, 0x800uLL, __format, a6) < 0)
  {
    sub_18D099A1C(a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v15);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = v15;
  }
  else
  {
    sub_18D099A1C(a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v15);
    v10 = strlen(__str);
    v11 = std::string::append(&v15, __str, v10);
    v12 = v11->__r_.__value_.__r.__words[0];
    v17[0] = v11->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = v17[0];
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a1 + 23) = v13;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18D05E788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_18D05E7C4(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

void sub_18D05E880(cnframework::ActiveObjectBase *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;

  if (*((_BYTE *)this + 480))
  {
    v2 = (void **)*((_QWORD *)this + 63);
    v3 = (void **)*((_QWORD *)this + 64);
    if (v3 == v2)
    {
      v6 = (_QWORD *)((char *)this + 536);
      v3 = (void **)*((_QWORD *)this + 63);
    }
    else
    {
      v4 = *((_QWORD *)this + 66);
      v5 = &v2[v4 / 0x14];
      v6 = (_QWORD *)((char *)this + 536);
      v7 = (unint64_t)v2[(*((_QWORD *)this + 67) + v4) / 0x14] + 200 * ((*((_QWORD *)this + 67) + v4) % 0x14);
      if ((char *)*v5 + 200 * (v4 % 0x14) != (void *)v7)
      {
        v8 = (void (***)(void))((char *)*v5 + 200 * (v4 % 0x14));
        do
        {
          v9 = *v8;
          v8 += 25;
          (*v9)();
          if ((char *)v8 - (_BYTE *)*v5 == 4000)
          {
            v10 = (void (***)(void))v5[1];
            ++v5;
            v8 = v10;
          }
        }
        while (v8 != (void (***)(void))v7);
        v2 = (void **)*((_QWORD *)this + 63);
        v3 = (void **)*((_QWORD *)this + 64);
      }
    }
    *v6 = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = *((_QWORD *)this + 64);
        v2 = (void **)(*((_QWORD *)this + 63) + 8);
        *((_QWORD *)this + 63) = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
    if (v11 >> 3 == 1)
    {
      v13 = 10;
    }
    else
    {
      if (v11 >> 3 != 2)
      {
LABEL_17:
        *((_QWORD *)this + 78) = 0;
        *((_OWORD *)this + 37) = 0u;
        *((_OWORD *)this + 38) = 0u;
        *((_OWORD *)this + 35) = 0u;
        *((_OWORD *)this + 36) = 0u;
        *((_OWORD *)this + 34) = 0u;
        *((_QWORD *)this + 79) = 0x7FF8000000000000;
        *((_QWORD *)this + 80) = 0;
        *((_QWORD *)this + 81) = 0x7FF8000000000000;
        v14 = vdupq_n_s64(0x7FF8000000000000uLL);
        *((int64x2_t *)this + 41) = v14;
        *((int64x2_t *)this + 42) = v14;
        *((int64x2_t *)this + 43) = v14;
        *((int64x2_t *)this + 44) = v14;
        *((_QWORD *)this + 90) = 0;
        *((_QWORD *)this + 91) = 0x7FF8000000000000;
        *((int64x2_t *)this + 46) = v14;
        *((int64x2_t *)this + 47) = v14;
        *((int64x2_t *)this + 48) = v14;
        *((int64x2_t *)this + 49) = v14;
        *((int64x2_t *)this + 50) = v14;
        *((int64x2_t *)this + 51) = v14;
        *((_QWORD *)this + 104) = 0x7FF8000000000000;
        *((_QWORD *)this + 105) = 0;
        *((int64x2_t *)this + 53) = v14;
        *((int64x2_t *)this + 54) = v14;
        *((int64x2_t *)this + 55) = v14;
        *((int64x2_t *)this + 56) = v14;
        *((_QWORD *)this + 114) = 0x7FF8000000000000;
        *((_QWORD *)this + 115) = 0;
        *((int64x2_t *)this + 58) = v14;
        *((int64x2_t *)this + 59) = v14;
        *((int64x2_t *)this + 60) = v14;
        *((int64x2_t *)this + 61) = v14;
        *((_QWORD *)this + 124) = 0x7FF8000000000000;
        *((_QWORD *)this + 125) = 0;
        *((int64x2_t *)this + 63) = v14;
        *((int64x2_t *)this + 64) = v14;
        *((int64x2_t *)this + 65) = v14;
        *((int64x2_t *)this + 66) = v14;
        *((int64x2_t *)this + 67) = v14;
        *((int64x2_t *)this + 68) = v14;
        *((int64x2_t *)this + 69) = v14;
        *((_QWORD *)this + 140) = 0;
        *((_QWORD *)this + 141) = 0x7FF8000000000000;
        *((int64x2_t *)this + 71) = v14;
        *((int64x2_t *)this + 72) = v14;
        *((int64x2_t *)this + 73) = v14;
        *((int64x2_t *)this + 74) = v14;
        *((_QWORD *)this + 150) = 0;
        *((_QWORD *)this + 151) = 0x7FF8000000000000;
        *((int64x2_t *)this + 76) = v14;
        *((int64x2_t *)this + 77) = v14;
        *((int64x2_t *)this + 78) = v14;
        *((int64x2_t *)this + 79) = v14;
        *((_QWORD *)this + 160) = 0;
        *((_QWORD *)this + 161) = 0x7FF8000000000000;
        *((int64x2_t *)this + 81) = v14;
        *((int64x2_t *)this + 82) = v14;
        *((int64x2_t *)this + 83) = v14;
        *((int64x2_t *)this + 84) = v14;
        *((_QWORD *)this + 170) = 0;
        *((_QWORD *)this + 171) = 0x7FF8000000000000;
        *((int64x2_t *)this + 86) = v14;
        *((int64x2_t *)this + 87) = v14;
        *((_QWORD *)this + 176) = 0;
        *((_QWORD *)this + 177) = 0xFFF0000000000000;
        *(_OWORD *)((char *)this + 1448) = 0uLL;
        *(_OWORD *)((char *)this + 1432) = 0uLL;
        *((_QWORD *)this + 189) = 0;
        *(_OWORD *)((char *)this + 1496) = 0uLL;
        *(_OWORD *)((char *)this + 1480) = 0uLL;
        *(_OWORD *)((char *)this + 1464) = 0uLL;
        *((_QWORD *)this + 190) = 0x7FF8000000000000;
        *((_QWORD *)this + 191) = 0;
        *((_QWORD *)this + 192) = 0x3FF0000000000000;
        *((_QWORD *)this + 194) = 0;
        *((_QWORD *)this + 193) = 0;
        *((_QWORD *)this + 195) = 0;
        goto LABEL_18;
      }
      v13 = 20;
    }
    *((_QWORD *)this + 66) = v13;
    goto LABEL_17;
  }
LABEL_18:
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void raven::RavenIonosphereEstimatorActiveObject::Reset(raven::RavenIonosphereEstimatorActiveObject *this)
{
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
  if (*((_BYTE *)this + 1320))
    *((_BYTE *)this + 1320) = 0;
  if (*((_BYTE *)this + 2160))
    *((_BYTE *)this + 2160) = 0;
  *((_BYTE *)this + 481) = 1;
  std::mutex::lock((std::mutex *)((char *)this + 2224));
  raven::RavenIonosphereEstimator::Reset((raven::RavenIonosphereEstimatorActiveObject *)((char *)this + 2288));
  std::mutex::unlock((std::mutex *)((char *)this + 2224));
}

void sub_18D05EB7C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D05EB90(cnframework::ActiveObjectBase *a1)
{
  raven::RavenIntegrityEstimator::Reset((uint64_t)a1 + 496);
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

void raven::RavenSignalEnvironmentActiveObject::Reset(raven::RavenSignalEnvironmentActiveObject *this)
{
  if (*((_BYTE *)this + 496))
    *((_BYTE *)this + 496) = 0;
  if (*((_BYTE *)this + 616))
    *((_BYTE *)this + 616) = 0;
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void raven::RavenPressurePrefilterActiveObject::Reset(raven::RavenPressurePrefilterActiveObject *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  uint64_t v12;

  v2 = (void **)*((_QWORD *)this + 71);
  v3 = (void **)*((_QWORD *)this + 72);
  if (v3 == v2)
  {
    v6 = (_QWORD *)((char *)this + 600);
    v3 = (void **)*((_QWORD *)this + 71);
  }
  else
  {
    v4 = *((_QWORD *)this + 74);
    v5 = &v2[v4 / 0x1E];
    v6 = (_QWORD *)((char *)this + 600);
    v7 = (unint64_t)v2[(*((_QWORD *)this + 75) + v4) / 0x1E] + 136 * ((*((_QWORD *)this + 75) + v4) % 0x1E);
    if ((char *)*v5 + 136 * (v4 % 0x1E) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v5 + 136 * (v4 % 0x1E));
      do
      {
        v9 = *v8;
        v8 += 17;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v5 == 4080)
        {
          v10 = (void (***)(void))v5[1];
          ++v5;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v3 = (void **)*((_QWORD *)this + 72);
      v2 = (void **)*((_QWORD *)this + 71);
    }
  }
  *v6 = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*((_QWORD *)this + 71) + 8);
      *((_QWORD *)this + 71) = v2;
      v11 = *((_QWORD *)this + 72) - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v12 = 15;
    goto LABEL_15;
  }
  if (v11 >> 3 == 2)
  {
    v12 = 30;
LABEL_15:
    *((_QWORD *)this + 74) = v12;
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18D05ED38(uint64_t a1)
{
  raven::RavenSolutionSelector::Reset((raven::RavenSolutionSelector *)(a1 + 480));
  cnframework::ActiveObjectBase::ResetCurrentTime((cnframework::ActiveObjectBase *)a1);
  cnframework::ActiveObjectBase::ResetEventQueue((cnframework::ActiveObjectBase *)a1);
}

void sub_18D05ED68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::GnssMeasurementPreprocessor::Reset((raven::GnssMeasurementPreprocessor *)(a1 + 488), a2, a3, a4, a5, a6, a7, a8);
  cnframework::ActiveObjectBase::ResetCurrentTime((cnframework::ActiveObjectBase *)a1);
  cnframework::ActiveObjectBase::ResetEventQueue((cnframework::ActiveObjectBase *)a1);
}

void raven::RavenDeltaVIOEstimateActiveObject::Reset(raven::RavenDeltaVIOEstimateActiveObject *this)
{
  _BYTE *v2;
  _BYTE *v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE v18[72];

  *((_BYTE *)this + 496) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  if (*((_BYTE *)this + 536))
    *((_BYTE *)this + 536) = 0;
  if (*((_BYTE *)this + 552))
    *((_BYTE *)this + 552) = 0;
  if (*((_BYTE *)this + 568))
    *((_BYTE *)this + 568) = 0;
  if (*((_BYTE *)this + 584))
    *((_BYTE *)this + 584) = 0;
  if (*((_BYTE *)this + 608))
    *((_BYTE *)this + 608) = 0;
  if (*((_BYTE *)this + 624))
    *((_BYTE *)this + 624) = 0;
  v16 = 0x100000003;
  v14 = &unk_1E25C7790;
  v17 = v18;
  v15 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  sub_18D053AA8((uint64_t)this + 632, (uint64_t)&v14);
  if (*((_BYTE *)this + 704))
    *((_BYTE *)this + 704) = 0;
  v2 = (char *)this + 5616;
  if (*((_BYTE *)this + 720))
    *((_BYTE *)this + 720) = 0;
  *((_BYTE *)this + 736) = 0;
  *((_QWORD *)this + 91) = 0;
  if (*((_BYTE *)this + 3176))
    *((_BYTE *)this + 3176) = 0;
  if (*v2)
    *v2 = 0;
  v3 = (char *)this + 9848;
  if (*((_BYTE *)this + 6728))
  {
    *((_QWORD *)this + 703) = &off_1E25C2C98;
    *((_QWORD *)this + 823) = &unk_1E25C5E70;
    *((_QWORD *)this + 809) = &unk_1E25C5E70;
    *((_QWORD *)this + 795) = &unk_1E25C5E70;
    *((_QWORD *)this + 787) = &unk_1E25C5E70;
    *((_QWORD *)this + 768) = &unk_1E25C5E70;
    *((_QWORD *)this + 754) = &unk_1E25C5E70;
    *((_QWORD *)this + 740) = &unk_1E25C5E70;
    *((_QWORD *)this + 732) = &unk_1E25C5E70;
    *((_BYTE *)this + 6728) = 0;
  }
  if (*((_BYTE *)this + 7824))
  {
    *((_QWORD *)this + 962) = &unk_1E25C5E70;
    *((_QWORD *)this + 948) = &unk_1E25C5E70;
    *((_QWORD *)this + 934) = &unk_1E25C5E70;
    *((_QWORD *)this + 926) = &unk_1E25C5E70;
    *((_QWORD *)this + 907) = &unk_1E25C5E70;
    *((_QWORD *)this + 893) = &unk_1E25C5E70;
    *((_QWORD *)this + 879) = &unk_1E25C5E70;
    *((_QWORD *)this + 871) = &unk_1E25C5E70;
    *((_BYTE *)this + 7824) = 0;
  }
  sub_18D05F140((uint64_t)this + 7832);
  sub_18D05F140((uint64_t)this + 8272);
  sub_18D05F140((uint64_t)this + 8712);
  sub_18D05F140((uint64_t)this + 9152);
  v16 = 0x100000003;
  v14 = &unk_1E25C7790;
  v17 = v18;
  v15 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  sub_18D053AA8((uint64_t)this + 9592, (uint64_t)&v14);
  v16 = 0x100000003;
  v14 = &unk_1E25C7790;
  v17 = v18;
  v15 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  sub_18D053AA8((uint64_t)this + 9656, (uint64_t)&v14);
  v16 = 0x300000003;
  v14 = &unk_1E25C78E0;
  v17 = v18;
  v15 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  sub_18D053AA8((uint64_t)this + 9720, (uint64_t)&v14);
  if (*v3)
    *v3 = 0;
  if (*((_BYTE *)this + 9872))
    *((_BYTE *)this + 9872) = 0;
  v4 = (void **)*((_QWORD *)this + 1237);
  v5 = *((_QWORD *)this + 1238) - (_QWORD)v4;
  if (v5)
  {
    v6 = *((_QWORD *)this + 1240);
    v7 = &v4[v6 >> 4];
    v8 = (char *)*v7;
    v9 = (char *)*v7 + 1088 * (v6 & 0xF);
    v10 = (_QWORD *)((char *)this + 9928);
    v11 = *(uint64_t *)((char *)v4 + (((*((_QWORD *)this + 1241) + v6) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 1088 * ((*((_DWORD *)this + 2482) + (int)v6) & 0xF);
    while (v9 != (char *)v11)
    {
      *((_QWORD *)v9 + 120) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 106) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 92) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 84) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 65) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 51) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 37) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 29) = &unk_1E25C5E70;
      v9 += 1088;
      if (v9 - v8 == 17408)
      {
        v12 = (char *)v7[1];
        ++v7;
        v8 = v12;
        v9 = v12;
      }
    }
  }
  else
  {
    v10 = (_QWORD *)((char *)this + 9928);
  }
  *v10 = 0;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v4 = (void **)(*((_QWORD *)this + 1237) + 8);
      *((_QWORD *)this + 1237) = v4;
      v5 = *((_QWORD *)this + 1238) - (_QWORD)v4;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    v13 = 8;
    goto LABEL_42;
  }
  if (v5 >> 3 == 2)
  {
    v13 = 16;
LABEL_42:
    *((_QWORD *)this + 1240) = v13;
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18D05F140(uint64_t a1)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[72];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  v4 = 0x100000003;
  v2 = &unk_1E25C7790;
  v5 = v6;
  v3 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v2, 0.0);
  sub_18D053AA8(a1 + 32, (uint64_t)&v2);
  v4 = 0x300000003;
  v2 = &unk_1E25C78E0;
  v5 = v6;
  v3 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v2, 0.0);
  sub_18D053AA8(a1 + 96, (uint64_t)&v2);
  v4 = 0x300000003;
  v2 = &unk_1E25C78E0;
  v5 = v6;
  v3 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v2, 0.0);
  sub_18D053AA8(a1 + 208, (uint64_t)&v2);
  v4 = 0x300000003;
  v2 = &unk_1E25C78E0;
  v5 = v6;
  v3 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v2, 0.0);
  sub_18D053AA8(a1 + 320, (uint64_t)&v2);
  *(_BYTE *)(a1 + 432) = 0;
}

void raven::RavenUserGaitTrackerActiveObject::Reset(cnprint::CNPrinter *this)
{
  *(_OWORD *)((char *)this + 712) = 0uLL;
  *(_OWORD *)((char *)this + 696) = 0uLL;
  *((_QWORD *)this + 97) = 0;
  *(_OWORD *)((char *)this + 760) = 0uLL;
  *(_OWORD *)((char *)this + 744) = 0uLL;
  *(_OWORD *)((char *)this + 728) = 0uLL;
  *((_QWORD *)this + 98) = 0x7FF8000000000000;
  *((_QWORD *)this + 99) = 0;
  *((_QWORD *)this + 100) = 0x3FF0000000000000;
  *((_QWORD *)this + 109) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 904) = 0uLL;
  *(_OWORD *)((char *)this + 888) = 0uLL;
  *((_QWORD *)this + 121) = 0;
  *(_OWORD *)((char *)this + 952) = 0uLL;
  *(_OWORD *)((char *)this + 936) = 0uLL;
  *(_OWORD *)((char *)this + 920) = 0uLL;
  *((_QWORD *)this + 122) = 0x7FF8000000000000;
  *((_QWORD *)this + 123) = 0;
  *((_QWORD *)this + 124) = 0x3FF0000000000000;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 127) = 0;
  *((_BYTE *)this + 1120) = 0;
  if (*((_BYTE *)this + 1128))
    *((_BYTE *)this + 1128) = 0;
  *((_DWORD *)this + 283) = 0;
  *((_QWORD *)this + 143) = *((_QWORD *)this + 142);
  *((_QWORD *)this + 146) = *((_QWORD *)this + 145);
  sub_18D05F398(this);
}

void sub_18D05F398(cnprint::CNPrinter *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    v11 = 12;
    v10 = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v9 >= 0)
      v7 = __p;
    else
      LOBYTE(v7) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "Resetting %s", v2, v3, v4, v5, v6, (char)v7);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

void sub_18D05F438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *raven::RavenUserGaitTrackerActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenUserGaitTrackerActiveObject");
}

void raven::RavenIMUPreprocessorActiveObject::Reset(raven::RavenIMUPreprocessorActiveObject *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  unint64_t v15;
  void **v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  void (***v21)(void);
  unint64_t v22;
  uint64_t v23;

  if (!*((_BYTE *)this + 480))
    goto LABEL_32;
  v2 = (void **)*((_QWORD *)this + 72);
  v3 = (void **)*((_QWORD *)this + 73);
  if (v3 == v2)
  {
    v6 = (_QWORD *)((char *)this + 608);
    v3 = (void **)*((_QWORD *)this + 72);
  }
  else
  {
    v4 = *((_QWORD *)this + 75);
    v5 = &v2[v4 / 0x1A];
    v6 = (_QWORD *)((char *)this + 608);
    v7 = (unint64_t)v2[(*((_QWORD *)this + 76) + v4) / 0x1A] + 152 * ((*((_QWORD *)this + 76) + v4) % 0x1A);
    if ((char *)*v5 + 152 * (v4 % 0x1A) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v5 + 152 * (v4 % 0x1A));
      do
      {
        v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v5 == 3952)
        {
          v10 = (void (***)(void))v5[1];
          ++v5;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v3 = (void **)*((_QWORD *)this + 73);
      v2 = (void **)*((_QWORD *)this + 72);
    }
  }
  *v6 = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*((_QWORD *)this + 72) + 8);
      *((_QWORD *)this + 72) = v2;
      v11 = *((_QWORD *)this + 73) - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v12 = 13;
    goto LABEL_16;
  }
  if (v11 >> 3 == 2)
  {
    v12 = 26;
LABEL_16:
    *((_QWORD *)this + 75) = v12;
  }
  v13 = (void **)*((_QWORD *)this + 87);
  v14 = (void **)*((_QWORD *)this + 88);
  if (v14 == v13)
  {
    v17 = (_QWORD *)((char *)this + 728);
    v14 = (void **)*((_QWORD *)this + 87);
  }
  else
  {
    v15 = *((_QWORD *)this + 90);
    v16 = &v13[v15 / 0x1A];
    v17 = (_QWORD *)((char *)this + 728);
    v18 = (unint64_t)v13[(*((_QWORD *)this + 91) + v15) / 0x1A] + 152 * ((*((_QWORD *)this + 91) + v15) % 0x1A);
    if ((char *)*v16 + 152 * (v15 % 0x1A) != (void *)v18)
    {
      v19 = (void (***)(void))((char *)*v16 + 152 * (v15 % 0x1A));
      do
      {
        v20 = *v19;
        v19 += 19;
        (*v20)();
        if ((char *)v19 - (_BYTE *)*v16 == 3952)
        {
          v21 = (void (***)(void))v16[1];
          ++v16;
          v19 = v21;
        }
      }
      while (v19 != (void (***)(void))v18);
      v14 = (void **)*((_QWORD *)this + 88);
      v13 = (void **)*((_QWORD *)this + 87);
    }
  }
  *v17 = 0;
  v22 = (char *)v14 - (char *)v13;
  if (v22 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v13 = (void **)(*((_QWORD *)this + 87) + 8);
      *((_QWORD *)this + 87) = v13;
      v22 = *((_QWORD *)this + 88) - (_QWORD)v13;
    }
    while (v22 > 0x10);
  }
  if (v22 >> 3 == 1)
  {
    v23 = 13;
    goto LABEL_31;
  }
  if (v22 >> 3 == 2)
  {
    v23 = 26;
LABEL_31:
    *((_QWORD *)this + 90) = v23;
  }
LABEL_32:
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18D05F6B4(int64x2_t *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  int64x2_t *v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  uint64_t v12;

  this[31].i64[0] = 0;
  this[31].i64[1] = 0;
  this[32] = vdupq_n_s64(0x7FF8000000000000uLL);
  this[33].i8[0] = 0;
  v2 = (void **)this[34].i64[0];
  v3 = (void **)this[34].i64[1];
  if (v3 == v2)
  {
    v6 = this + 36;
    v3 = (void **)this[34].i64[0];
  }
  else
  {
    v4 = this[35].u64[1];
    v5 = &v2[v4 / 0x1C];
    v6 = this + 36;
    v7 = (unint64_t)v2[(this[36].i64[0] + v4) / 0x1C] + 144 * ((this[36].i64[0] + v4) % 0x1C);
    if ((char *)*v5 + 144 * (v4 % 0x1C) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v5 + 144 * (v4 % 0x1C));
      do
      {
        v9 = *v8;
        v8 += 18;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v5 == 4032)
        {
          v10 = (void (***)(void))v5[1];
          ++v5;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v3 = (void **)this[34].i64[1];
      v2 = (void **)this[34].i64[0];
    }
  }
  v6->i64[0] = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(this[34].i64[0] + 8);
      this[34].i64[0] = (uint64_t)v2;
      v11 = this[34].i64[1] - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v12 = 14;
    goto LABEL_15;
  }
  if (v11 >> 3 == 2)
  {
    v12 = 28;
LABEL_15:
    this[35].i64[1] = v12;
  }
  cnframework::ActiveObjectBase::ResetCurrentTime((cnframework::ActiveObjectBase *)this);
  cnframework::ActiveObjectBase::ResetEventQueue((cnframework::ActiveObjectBase *)this);
}

void sub_18D05F810(cnframework::ActiveObjectBase *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  __int16 v10;

  if ((*(unsigned int (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)a1 + 104))(a1))
  {
    v10 = 12;
    v9 = 2;
    v2 = cnprint::CNLogFormatter::FormatGeneral((const void **)a1 + 62, "Resetting");
    if (*((char *)a1 + 519) >= 0)
      LOBYTE(v8) = v2;
    else
      v8 = *((_QWORD *)a1 + 62);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v10, &v9, "%s", v3, v4, v5, v6, v7, v8);
    raven::RavenPNTEstimator::Reset((cnframework::ActiveObjectBase *)((char *)a1 + 544));
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

uint64_t sub_18D05F8A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 480);
}

void raven::RavenSolutionPostprocessor::Reset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  double v15;
  unsigned __int8 v16;
  __int16 v17;

  if (*(_BYTE *)(a1 + 1296) && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    v17 = 12;
    v16 = 1;
    v15 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "t,%.3lf,RavenSolutionPostprocesso,clamping stopped due to reset", v4, v5, v6, v7, v8, SLOBYTE(v15));
  }
  *(_BYTE *)(a1 + 1296) = 0;
  v9 = *(void ***)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 56) = 0;
  v11 = v10 - (_QWORD)v9;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      v12 = *(_QWORD *)(a1 + 32);
      v9 = (void **)(*(_QWORD *)(a1 + 24) + 8);
      *(_QWORD *)(a1 + 24) = v9;
      v11 = v12 - (_QWORD)v9;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 8;
  }
  else
  {
    if (v11 >> 3 != 2)
      goto LABEL_11;
    v13 = 16;
  }
  *(_QWORD *)(a1 + 48) = v13;
LABEL_11:
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 520) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0x7FF8000000000000;
  v14 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 544) = v14;
  *(int64x2_t *)(a1 + 560) = v14;
  *(int64x2_t *)(a1 + 576) = v14;
  *(int64x2_t *)(a1 + 592) = v14;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 624) = v14;
  *(int64x2_t *)(a1 + 640) = v14;
  *(int64x2_t *)(a1 + 656) = v14;
  *(int64x2_t *)(a1 + 672) = v14;
  *(int64x2_t *)(a1 + 688) = v14;
  *(int64x2_t *)(a1 + 704) = v14;
  *(_QWORD *)(a1 + 720) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 728) = 0;
  *(int64x2_t *)(a1 + 736) = v14;
  *(int64x2_t *)(a1 + 752) = v14;
  *(int64x2_t *)(a1 + 768) = v14;
  *(int64x2_t *)(a1 + 784) = v14;
  *(_QWORD *)(a1 + 800) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 808) = 0;
  *(int64x2_t *)(a1 + 816) = v14;
  *(int64x2_t *)(a1 + 832) = v14;
  *(int64x2_t *)(a1 + 848) = v14;
  *(int64x2_t *)(a1 + 864) = v14;
  *(_QWORD *)(a1 + 880) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 888) = 0;
  *(int64x2_t *)(a1 + 896) = v14;
  *(int64x2_t *)(a1 + 912) = v14;
  *(int64x2_t *)(a1 + 928) = v14;
  *(int64x2_t *)(a1 + 944) = v14;
  *(int64x2_t *)(a1 + 960) = v14;
  *(int64x2_t *)(a1 + 976) = v14;
  *(int64x2_t *)(a1 + 992) = v14;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1016) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1024) = v14;
  *(int64x2_t *)(a1 + 1040) = v14;
  *(int64x2_t *)(a1 + 1056) = v14;
  *(int64x2_t *)(a1 + 1072) = v14;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1096) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1104) = v14;
  *(int64x2_t *)(a1 + 1120) = v14;
  *(int64x2_t *)(a1 + 1136) = v14;
  *(int64x2_t *)(a1 + 1152) = v14;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1176) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1184) = v14;
  *(int64x2_t *)(a1 + 1200) = v14;
  *(int64x2_t *)(a1 + 1216) = v14;
  *(int64x2_t *)(a1 + 1232) = v14;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1256) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1264) = v14;
  *(int64x2_t *)(a1 + 1280) = v14;
  if (*(_BYTE *)(a1 + 424))
    *(_BYTE *)(a1 + 424) = 0;
  if (*(_BYTE *)(a1 + 1376))
    *(_BYTE *)(a1 + 1376) = 0;
}

void raven::RavenSolutionActiveObject::Reset(raven::RavenSolutionActiveObject *this)
{
  if (*((_BYTE *)this + 480))
  {
    std::mutex::lock((std::mutex *)((char *)this + 11128));
    *((_BYTE *)this + 600) = 0;
    sub_18D040C34((uint64_t)this + 608);
    *((_BYTE *)this + 3041) = 0;
    std::mutex::unlock((std::mutex *)((char *)this + 11128));
  }
  *((_QWORD *)this + 72) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 73) = 0x7FF8000000000000;
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18D05FAD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void raven::RavenMovingStateEstimator::Reset(raven::RavenMovingStateEstimator *this)
{
  _OWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 518) = 0;
  *((_QWORD *)this + 519) = 0x7FF8000000000000;
  *((_BYTE *)this + 736) = 0;
  *((_OWORD *)this + 54) = 0u;
  *(_OWORD *)((char *)this + 836) = 0u;
  *(_OWORD *)((char *)this + 852) = 0u;
  v2 = (_OWORD *)((char *)this + 232);
  *(_OWORD *)((char *)this + 740) = 0u;
  *(_OWORD *)((char *)this + 756) = 0u;
  *(_OWORD *)((char *)this + 769) = 0u;
  *(_OWORD *)((char *)this + 788) = 0u;
  *(_OWORD *)((char *)this + 804) = 0u;
  *(_OWORD *)((char *)this + 817) = 0u;
  do
  {
    *(_BYTE *)v2 = 0;
    *(_OWORD *)((char *)v2 + 100) = 0uLL;
    *(_OWORD *)((char *)v2 + 116) = 0uLL;
    v2[8] = 0uLL;
    *(_OWORD *)((char *)v2 + 4) = 0uLL;
    *(_OWORD *)((char *)v2 + 20) = 0uLL;
    *(_OWORD *)((char *)v2 + 33) = 0uLL;
    *(_OWORD *)((char *)v2 + 52) = 0uLL;
    *(_OWORD *)((char *)v2 + 68) = 0uLL;
    *(_OWORD *)((char *)v2 + 81) = 0uLL;
    v2 += 9;
  }
  while (v2 != (_OWORD *)((char *)this + 520));
  *((_QWORD *)this + 65) = 0;
  *((_BYTE *)this + 528) = 0;
  *((_OWORD *)this + 41) = 0u;
  *(_OWORD *)((char *)this + 628) = 0u;
  *(_OWORD *)((char *)this + 644) = 0u;
  *(_OWORD *)((char *)this + 532) = 0u;
  *(_OWORD *)((char *)this + 548) = 0u;
  *(_OWORD *)((char *)this + 561) = 0u;
  *(_OWORD *)((char *)this + 580) = 0u;
  *(_OWORD *)((char *)this + 596) = 0u;
  *(_OWORD *)((char *)this + 609) = 0u;
  if (*((_BYTE *)this + 936))
    *((_BYTE *)this + 936) = 0;
  if (*((_BYTE *)this + 1016))
    *((_BYTE *)this + 1016) = 0;
  *((_BYTE *)this + 672) = 0;
  *((_DWORD *)this + 176) = 0;
  v3 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 90) = v3;
  *((_QWORD *)this + 85) = 0;
  *((_OWORD *)this + 43) = xmmword_18D314830;
  v4 = *((_QWORD *)this + 91) - v3;
  if (v4 >= 0x28)
  {
    *(_QWORD *)(v3 + 32) = 0;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *((_QWORD *)this + 90) = v3 + 40;
  }
  else
  {
    v5 = (char *)this + 728;
    if (v4 >> 1 <= 0xA)
      v6 = 10;
    else
      v6 = v4 >> 1;
    v7 = (char *)sub_18D164CD4((uint64_t)v5, v6);
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *((_QWORD *)v7 + 4) = 0;
    v8 = v7 + 40;
    v10 = &v7[4 * v9];
    v11 = (char *)*((_QWORD *)this + 90);
    v12 = (char *)*((_QWORD *)this + 89);
    while (v11 != v12)
    {
      v13 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v7 - 1) = v13;
      v7 -= 4;
    }
    *((_QWORD *)this + 89) = v7;
    *((_QWORD *)this + 90) = v8;
    *((_QWORD *)this + 91) = v10;
    if (v12)
      operator delete(v12);
  }
  *((_BYTE *)this + 672) = 1;
  *((_WORD *)this + 520) = 0;
  if (*((_BYTE *)this + 64))
    *((_BYTE *)this + 64) = 0;
  if (*((_BYTE *)this + 136))
    *((_BYTE *)this + 136) = 0;
  if (*((_BYTE *)this + 208))
    *((_BYTE *)this + 208) = 0;
  if (*((_BYTE *)this + 1240))
    *((_BYTE *)this + 1240) = 0;
  if (*((_BYTE *)this + 1392))
    *((_BYTE *)this + 1392) = 0;
  if (*((_BYTE *)this + 1544))
    *((_BYTE *)this + 1544) = 0;
  if (*((_BYTE *)this + 3984))
    *((_BYTE *)this + 3984) = 0;
}

double raven::RavenSupervisor::OnReset(raven::RavenSupervisor *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 824) = 0u;
  return result;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::ActivityStateEvent *a2)
{
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  if (!*(_BYTE *)this)
    return 0xFFFFFFFFLL;
  v9 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
  v10 = v4;
  v8[0] = *((_BYTE *)a2 + 104);
  raven::RavenPositionContextEstimator::HandleEvidence((uint64_t)this, v8, v5, v6);
  return 0;
}

void raven::RavenActivityStateEstimatorActiveObject::HandleEvent(raven::RavenActivityStateEstimatorActiveObject *this, const raven::TimeMarkEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  __int128 v11;
  __int128 v12;
  int8x16_t v13;
  int8x16_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  const void *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint64_t v65;
  int v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  cnprint::CNPrinter *v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  double v106;
  double v107;
  double v108;
  void *v109[2];
  char v110;
  unsigned __int8 v111;
  __int16 v112;
  _BYTE v113[104];
  int8x16_t v114;
  __int128 v115;
  int8x16_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  char v127;
  void (**v128)(raven::MapsRouteHintEvent *__hidden);
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int16 v141;
  void *__p;
  void *v143;
  uint64_t v144;
  char v145;
  double v146;
  uint64_t v147;
  char v148;

  if (!*((_BYTE *)this + 480))
    return;
  v10 = (char *)this + 1408;
  if (!*((_BYTE *)this + 1408))
  {
    v38 = *((_QWORD *)this + 61);
    *(_QWORD *)&v113[16] = 0x7FF8000000000000;
    *(_QWORD *)v113 = v38;
    *(_QWORD *)&v113[8] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v113[16] = v39;
    if (!raven::RavenActivityStateEstimator::Initialize((uint64_t)v10, (uint64_t *)v113, v40, v41, v42, v43, v44, v45))
    {
      LOWORD(v109[0]) = 12;
      LOBYTE(v112) = 4;
      (*(void (**)(double *__return_ptr, raven::RavenActivityStateEstimatorActiveObject *))(*(_QWORD *)this + 16))(&v146, this);
      if (v148 >= 0)
        v105 = &v146;
      else
        LOBYTE(v105) = LOBYTE(v146);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v109, (unsigned __int8 *)&v112, "%s: Could not initialize activity state estimator", v100, v101, v102, v103, v104, (char)v105);
LABEL_41:
      if (v148 < 0)
        operator delete(*(void **)&v146);
      return;
    }
LABEL_16:
    if (*((_BYTE *)this + 608))
    {
      *(_QWORD *)v113 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)&v113[8] = v46;
      v52 = raven::RavenActivityStateEstimator::Update((uint64_t)v10, (uint64_t)v113, (_BYTE *)this + 600, v47, v48, v49, v50, v51);
      if (!v52 && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v52) <= 1)
      {
        LOWORD(v146) = 12;
        LOBYTE(v109[0]) = 1;
        v53 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        v55 = v54 + (double)v53;
        (*(void (**)(_BYTE *__return_ptr, raven::RavenActivityStateEstimatorActiveObject *))(*(_QWORD *)this + 16))(v113, this);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v146, (unsigned __int8 *)v109, "t,%.3lf,%s: Could not update estimator with latest ActivityInputEvent", v56, v57, v58, v59, v60, SLOBYTE(v55));
        if ((v113[23] & 0x80000000) != 0)
          operator delete(*(void **)v113);
      }
    }
    if (*((_BYTE *)this + 1400))
    {
      if (*((_BYTE *)this + 1232))
      {
        *(_QWORD *)v113 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v113[8] = v61;
        v146 = COERCE_DOUBLE((*(uint64_t (**)(char *))(*((_QWORD *)this + 134) + 16))((char *)this + 1072));
        v147 = v62;
        v65 = CNTimeSpan::operator-((uint64_t)v113, &v146, v63, v64);
        v66 = *((_DWORD *)this + 307) - *((_DWORD *)this + 349);
        v146 = v67 + (double)v65;
        LODWORD(v147) = v66;
        *(_QWORD *)v113 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v113[8] = v68;
        v69 = raven::RavenActivityStateEstimator::Update((uint64_t)v10, (uint64_t)v113, (uint64_t)&v146);
        if ((v69 & 1) == 0 && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v69) <= 1)
        {
          LOWORD(v109[0]) = 12;
          LOBYTE(v112) = 1;
          v70 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
          v72 = v71 + (double)v70;
          (*(void (**)(_BYTE *__return_ptr, raven::RavenActivityStateEstimatorActiveObject *))(*(_QWORD *)this + 16))(v113, this);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v109, (unsigned __int8 *)&v112, "t,%.3lf,%s: Could not update estimator with step count data", v73, v74, v75, v76, v77, SLOBYTE(v72));
          if ((v113[23] & 0x80000000) != 0)
            operator delete(*(void **)v113);
        }
      }
    }
    memset(&v113[8], 0, 17);
    *(_QWORD *)v113 = &unk_1E25C2AB0;
    memset(&v113[32], 0, 17);
    memset(&v113[56], 0, 17);
    *(_OWORD *)&v113[80] = 0uLL;
    *(_QWORD *)&v113[96] = 0x7FF8000000000000;
    v114.i8[0] = 0;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0u;
    v114.i64[1] = 0x3FF0000000000000;
    *(_QWORD *)&v119 = 0;
    v78 = raven::RavenActivityStateEstimator::PopulateActivityStateEvent((uint64_t)v10, (const raven::TimeMarkEvent *)((char *)a2 + 8), (uint64_t)v113);
    if ((v78 & 1) != 0)
    {
      sub_18D0605F4((uint64_t)this, (uint64_t)v113);
      if (v114.u8[0] != *((unsigned __int8 *)this + 1808))
      {
        if (cnprint::CNPrinter::GetLogLevel(v79) <= 1)
        {
          v112 = 12;
          v111 = 1;
          v80 = *(_QWORD *)&v113[8];
          v81 = *(double *)&v113[16];
          sub_18D29C7B0(&v146, *((_BYTE *)this + 1808));
          sub_18D29C7B0(v109, v114.i8[0]);
          v107 = v81 + (double)v80;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v112, &v111, "t,%.3lf,activity state change,prev_state,%s,new_state,%s", v82, v83, v84, v85, v86, SLOBYTE(v107));
          if (v110 < 0)
            operator delete(v109[0]);
          if (v148 < 0)
            operator delete(*(void **)&v146);
        }
        v87 = v117;
        *((int8x16_t *)this + 115) = v116;
        *((_OWORD *)this + 116) = v87;
        *((_OWORD *)this + 117) = v118;
        v88 = *(_OWORD *)&v113[88];
        *((_OWORD *)this + 111) = *(_OWORD *)&v113[72];
        *((_OWORD *)this + 112) = v88;
        v89 = v115;
        *((int8x16_t *)this + 113) = v114;
        *((_OWORD *)this + 114) = v89;
        v90 = *(_OWORD *)&v113[24];
        *((_OWORD *)this + 107) = *(_OWORD *)&v113[8];
        *((_OWORD *)this + 108) = v90;
        v91 = *(_OWORD *)&v113[56];
        *((_OWORD *)this + 109) = *(_OWORD *)&v113[40];
        *((_QWORD *)this + 236) = v119;
        *((_OWORD *)this + 110) = v91;
      }
      return;
    }
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v78) > 1)
      return;
    LOWORD(v109[0]) = 12;
    LOBYTE(v112) = 1;
    v92 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    v94 = v93;
    (*(void (**)(double *__return_ptr, raven::RavenActivityStateEstimatorActiveObject *))(*(_QWORD *)this + 16))(&v146, this);
    v108 = v94 + (double)v92;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v109, (unsigned __int8 *)&v112, "t,%.3lf,%s: Could not populate ActivityStateEvent", v95, v96, v97, v98, v99, SLOBYTE(v108));
    goto LABEL_41;
  }
  v113[96] = 0;
  v127 = 0;
  LOBYTE(v128) = 0;
  v145 = 0;
  v11 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)&v113[32] = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)&v113[48] = v11;
  v12 = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)&v113[64] = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)&v113[80] = v12;
  v13 = *(int8x16_t *)((char *)a2 + 8);
  v14 = *(int8x16_t *)((char *)a2 + 24);
  *(int8x16_t *)v113 = v13;
  *(int8x16_t *)&v113[16] = v14;
  if (*((_BYTE *)this + 824))
  {
    v15 = *((_OWORD *)this + 50);
    v124 = *((_OWORD *)this + 49);
    v125 = v15;
    v16 = *((_OWORD *)this + 47);
    v123 = *((_OWORD *)this + 48);
    v17 = *((_OWORD *)this + 43);
    v119 = *((_OWORD *)this + 44);
    v18 = *((_OWORD *)this + 46);
    v120 = *((_OWORD *)this + 45);
    v121 = v18;
    v122 = v16;
    v14 = *((int8x16_t *)this + 39);
    v115 = *((_OWORD *)this + 40);
    v13 = *((int8x16_t *)this + 41);
    v19 = *((_OWORD *)this + 42);
    v116 = v13;
    v117 = v19;
    v118 = v17;
    v20 = *((_QWORD *)this + 102);
    *(_QWORD *)&v113[96] = &unk_1E25C2BD8;
    v126 = v20;
    v114 = v14;
    v127 = 1;
  }
  if (*((_BYTE *)this + 1064))
  {
    v128 = &off_1E25C2AE0;
    v141 = *((_WORD *)this + 516);
    v21 = *(_OWORD *)((char *)this + 984);
    v22 = *(_OWORD *)((char *)this + 1016);
    v139 = *(_OWORD *)((char *)this + 1000);
    v140 = v22;
    v23 = *(_OWORD *)((char *)this + 920);
    v24 = *(_OWORD *)((char *)this + 952);
    v135 = *(_OWORD *)((char *)this + 936);
    v136 = v24;
    v137 = *(_OWORD *)((char *)this + 968);
    v138 = v21;
    v25 = *(_OWORD *)((char *)this + 856);
    v26 = *(_OWORD *)((char *)this + 888);
    v131 = *(_OWORD *)((char *)this + 872);
    v132 = v26;
    v133 = *(_OWORD *)((char *)this + 904);
    v134 = v23;
    v129 = *(_OWORD *)((char *)this + 840);
    v130 = v25;
    v27 = (const void *)*((_QWORD *)this + 130);
    v28 = *((_QWORD *)this + 131);
    v143 = 0;
    __p = 0;
    v144 = 0;
    sub_18D20EC90(&__p, v27, v28, 0xCCCCCCCCCCCCCCCDLL * ((v28 - (uint64_t)v27) >> 3));
    v145 = 1;
  }
  v29 = raven::RavenActivityStateEstimator::Predict((uint64_t)v10, (uint64_t)v113, v13, v14, a3, a4, a5, a6, a7, a8);
  if (!v29)
  {
    LOWORD(v109[0]) = 12;
    LOBYTE(v112) = 4;
    v30 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    v32 = v31;
    (*(void (**)(double *__return_ptr, raven::RavenActivityStateEstimatorActiveObject *))(*(_QWORD *)this + 16))(&v146, this);
    v106 = v32 + (double)v30;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v109, (unsigned __int8 *)&v112, "t,%.3lf,%s: Could not predict estimator", v33, v34, v35, v36, v37, SLOBYTE(v106));
    if (v148 < 0)
      operator delete(*(void **)&v146);
  }
  if (v145)
  {
    v128 = &off_1E25C2AE0;
    if (__p)
    {
      v143 = __p;
      operator delete(__p);
    }
  }
  if (v29)
    goto LABEL_16;
}

void sub_18D060450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_18D060500(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[192];
  _QWORD v13[3];
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v8 = *a2;
  sub_18D06632C((uint64_t)v12, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v13[1] = 0;
  v13[2] = 0;
  v13[0] = &unk_1E25C2AB0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0x7FF8000000000000;
  LOBYTE(v24) = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  *((_QWORD *)&v24 + 1) = 0x3FF0000000000000;
  v29 = 0;
  if (!raven::ActivityStateChecker::HandleEvent(*(raven::ActivityStateChecker **)(v8 + 2056), (const raven::ActivityStateEvent *)v12, (raven::ActivityStateEvent *)v13))
  {
    v10 = v27;
    *(_OWORD *)(v8 + 600) = v26;
    *(_OWORD *)(v8 + 616) = v10;
    *(_OWORD *)(v8 + 632) = v28;
    *(_QWORD *)(v8 + 648) = v29;
    v11 = v25;
    *(_OWORD *)(v8 + 568) = v24;
    *(_OWORD *)(v8 + 584) = v11;
    sub_18D0605F4(v8, (uint64_t)v13);
  }
}

void sub_18D0605F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D21AC78(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D0606CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D0606E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D06081C(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D0607C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D060800(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D06080C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "ActivityStateEvent");
}

uint64_t *sub_18D06081C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C18A0;
  *(_QWORD *)(v4 + 8) = &unk_1E25C2AB0;
  v5 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 160) = v5;
  *(_OWORD *)(v4 + 176) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(v4 + 192) = *(_QWORD *)(a2 + 184);
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 128) = v7;
  v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v8;
  v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v9;
  v10 = *a1;
  *a1 = v4;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t raven::RavenActivityStateEstimator::PopulateActivityStateEvent(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t MostProbableState;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  double v27;
  double v28;
  _BYTE v29[24];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned int v36;

  *(_QWORD *)&v29[16] = 0;
  *((_QWORD *)&v31 + 1) = 0;
  *(_DWORD *)(a3 + 105) = 0;
  *(_DWORD *)(a3 + 108) = 0;
  memset(v29, 0, 17);
  BYTE8(v31) = 0;
  v30 = 0;
  *(_QWORD *)&v31 = 0;
  v32 = 0uLL;
  v33 = 0uLL;
  v34 = 0;
  *(_OWORD *)(a3 + 24) = *(unint64_t *)&v29[16];
  *(_OWORD *)(a3 + 8) = 0uLL;
  v3 = v31;
  v4 = v32;
  *(_OWORD *)(a3 + 72) = v33;
  *(_OWORD *)(a3 + 56) = v4;
  *(_OWORD *)(a3 + 40) = v3;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0x7FF8000000000000;
  *(_BYTE *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 184) = 0;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  if (!*(_BYTE *)a1)
    return 0;
  v7 = a2[1];
  *(_OWORD *)(a3 + 8) = *a2;
  *(_OWORD *)(a3 + 24) = v7;
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[5];
  *(_OWORD *)(a3 + 72) = a2[4];
  *(_OWORD *)(a3 + 88) = v10;
  *(_OWORD *)(a3 + 40) = v8;
  *(_OWORD *)(a3 + 56) = v9;
  v36 = 0;
  MostProbableState = raven::RavenActivityStateEstimator::GetMostProbableState(a1, &v36);
  v17 = MostProbableState;
  if ((MostProbableState & 1) != 0)
  {
    switch(v36)
    {
      case 0u:
        *(_BYTE *)(a3 + 104) = 0;
        break;
      case 1u:
        v23 = 1;
        goto LABEL_18;
      case 2u:
        v23 = 2;
        goto LABEL_18;
      case 3u:
        v23 = 3;
        goto LABEL_18;
      case 4u:
        v23 = 4;
        goto LABEL_18;
      case 5u:
        v23 = 5;
        goto LABEL_18;
      case 6u:
        v23 = 6;
        goto LABEL_18;
      case 7u:
        v23 = 7;
        goto LABEL_18;
      case 8u:
        v23 = 8;
        goto LABEL_18;
      case 9u:
        v23 = 9;
LABEL_18:
        *(_BYTE *)(a3 + 104) = v23;
        break;
      case 0xAu:
        *(_WORD *)v29 = 12;
        v35 = 4;
        v28 = *(double *)(a1 + 288) + (double)*(uint64_t *)(a1 + 280);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v29, &v35, "ActivityStateEstimator,time,%.3lf,invalid state", v12, v13, v14, v15, v16, SLOBYTE(v28));
        break;
      default:
        break;
    }
    v30 = 0x10000000ALL;
    *(_QWORD *)v29 = &unk_1E25C6020;
    *(_OWORD *)&v29[8] = xmmword_18D31CEF0;
    *(_QWORD *)&v31 = (char *)&v31 + 8;
    if (*(_DWORD *)(a1 + 264))
      v24 = a1 + 144;
    else
      v24 = a1 + 24;
    sub_18D053AA8((uint64_t)v29, v24);
    v25 = (_QWORD *)v31;
    *(_QWORD *)(a3 + 112) = *(_QWORD *)v31;
    *(_QWORD *)(a3 + 120) = v25[1];
    *(_QWORD *)(a3 + 128) = v25[2];
    *(_QWORD *)(a3 + 136) = v25[3];
    *(_QWORD *)(a3 + 144) = v25[4];
    *(_QWORD *)(a3 + 152) = v25[5];
    *(_QWORD *)(a3 + 160) = v25[6];
    *(_QWORD *)(a3 + 168) = v25[7];
    *(_QWORD *)(a3 + 176) = v25[8];
    *(_QWORD *)(a3 + 184) = v25[9];
  }
  else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)MostProbableState) <= 1)
  {
    *(_WORD *)v29 = 12;
    v35 = 1;
    v27 = *(double *)(a1 + 288) + (double)*(uint64_t *)(a1 + 280);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v29, &v35, "ActivityStateEstimator,time,%.3lf,could not find most probable state", v18, v19, v20, v21, v22, SLOBYTE(v27));
  }
  return v17;
}

uint64_t raven::RavenActivityStateEstimator::GetMostProbableState(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  double v6;
  BOOL v7;
  BOOL v8;
  uint64_t result;
  void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v12 = 0x10000000ALL;
  v10 = &unk_1E25C6020;
  v11 = xmmword_18D31CEF0;
  v13 = &v14;
  if (*(_DWORD *)(a1 + 264))
    v3 = a1 + 144;
  else
    v3 = a1 + 24;
  sub_18D053AA8((uint64_t)&v10, v3);
  if (!DWORD2(v11))
    goto LABEL_19;
  v4 = 0;
  v5 = -1;
  v6 = -INFINITY;
  do
  {
    if (*(double *)&v13[v4] > v6)
    {
      v6 = *(double *)&v13[v4];
      v5 = v4;
    }
    ++v4;
  }
  while (DWORD2(v11) != v4);
  v7 = v5 < 0xA && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  if (v7 && (v6 >= 0.0 ? (v8 = v6 > 1.0) : (v8 = 1), !v8))
  {
    result = 1;
  }
  else
  {
LABEL_19:
    v5 = 0;
    result = 0;
  }
  *a2 = v5;
  return result;
}

void raven::RavenPositionContextEstimator::UpdatePositionContextStateEvent(raven::RavenPositionContextEstimator *this)
{
  double StateProbability;
  double v3;
  char v4;
  int v5;
  int v6;

  *((_OWORD *)this + 19) = *(_OWORD *)((char *)this + 152);
  v6 = 0;
  StateProbability = raven::RavenPositionContextEstimator::GetStateProbability((uint64_t)this, &v6);
  v5 = 1;
  v3 = raven::RavenPositionContextEstimator::GetStateProbability((uint64_t)this, &v5);
  *((double *)this + 51) = StateProbability;
  *((double *)this + 52) = v3;
  v4 = 2 * (v3 >= 0.95);
  if (StateProbability >= 0.95)
    v4 = 1;
  *((_BYTE *)this + 400) = v4;
}

double raven::RavenPositionContextEstimator::GetStateProbability(uint64_t a1, int *a2)
{
  uint64_t v3;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (!*(_BYTE *)a1)
    return NAN;
  v7 = 0x100000002;
  v5 = &unk_1E25C7520;
  v6 = xmmword_18D319330;
  v8 = &v9;
  if (*(_DWORD *)(a1 + 136))
    v3 = a1 + 80;
  else
    v3 = a1 + 24;
  sub_18D053AA8((uint64_t)&v5, v3);
  return *(double *)&v8[*a2];
}

void raven::RavenPositionContextEstimator::HandleEvidence(uint64_t a1, _BYTE *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6;
  double v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  __int16 v20;
  double v21[2];

  v6 = CNTimeSpan::operator-((uint64_t)(a2 + 8), (_QWORD *)(a1 + 152), a3, a4);
  *(_QWORD *)&v21[0] = v6;
  v21[1] = v7;
  if (v6 < 0 || (*(double *)v8.i64 = v7, v7 < 0.0))
  {
    v6 = CNTimeSpan::operator-(v21, v8, v9);
    v8.i64[0] = v10;
  }
  if (v6 != 10)
  {
    if (v6)
    {
      if (v6 < 11)
        goto LABEL_16;
      goto LABEL_10;
    }
    if ((v8.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      goto LABEL_16;
  }
  if (*(double *)v8.i64 <= 0.0)
    goto LABEL_16;
LABEL_10:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
  {
    v20 = 12;
    v19 = 1;
    v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::HandleEvidence(ActivityStateEvidence),last estimate is too old, re-initialize the HMM");
    if (*(char *)(a1 + 447) >= 0)
      LOBYTE(v17) = v11;
    else
      v17 = *(_QWORD *)(a1 + 424);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v12, v13, v14, v15, v16, v17);
  }
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 2480);
  raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel((raven::RavenPositionContextEstimator *)a1);
LABEL_16:
  if (*a2 != 5 || *(_BYTE *)(a1 + 176) && *(double *)(a1 + 168) >= 5.0)
  {
    raven::RavenPositionContextEstimator::HmmPredictAndUpdate(a1, (uint64_t)a2);
    if (!v18)
      raven::RavenPositionContextEstimator::UpdatePositionContextStateEvent((raven::RavenPositionContextEstimator *)a1);
  }
}

__n128 raven::RavenPositionContextEstimator::HmmPredictAndUpdate(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __n128 result;
  _BYTE v24[56];
  unsigned __int8 v25[56];
  _WORD v26[28];
  double v27;
  unsigned __int8 v28;
  __int128 v29;
  double v30;
  double v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t (**v40)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _OWORD v42[2];

  if (*(_BYTE *)(a1 + 1) && *(_BYTE *)a1)
  {
    v4 = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 2496);
    v42[0] = *(_OWORD *)(a2 + 8);
    v42[1] = v4;
    if (sub_18D063BF8(a1 + 16, (uint64_t)v42))
    {
      v26[0] = 12;
      v25[0] = 4;
      v9 = a1 - 88;
      cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to predict,code,%d");
LABEL_5:
      if (*(char *)(a1 + 447) >= 0)
        LOBYTE(v15) = v9;
      else
        v15 = *(_QWORD *)(a1 + 424);
LABEL_19:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v26, v25, "%s", v10, v11, v12, v13, v14, v15);
      return result;
    }
    v39 = 0x100000001;
    v16 = (__n128 *)(a2 + 8);
    v37 = &unk_1E25C6920;
    *(_QWORD *)&v17 = 0x100000001;
    *((_QWORD *)&v17 + 1) = 0x100000001;
    v38 = v17;
    v40 = &v41;
    v41 = sub_18D064858;
    v34 = 0x100000001;
    v32 = &unk_1E25C69E0;
    v33 = v17;
    v35 = &v36;
    v29 = *(_OWORD *)(a2 + 8);
    v28 = *(_BYTE *)(a1 + 288);
    v27 = -1.0;
    if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupActivityStateProbabilityGivenOutdoor(a1 + 472, (unsigned __int8 *)a2, &v28, &v27, v5, v6, v7, v8))
    {
      v26[0] = 12;
      v25[0] = 4;
      v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupActivityStateProbabilityGivenOutdoor failed");
    }
    else if (v27 < 0.0 || v27 > 1.0 || (*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v26[0] = 12;
      v25[0] = 4;
      v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupActivityStateProbabilityGivenOutdoor returned invalid probability");
    }
    else
    {
      v31 = v27;
      v27 = -1.0;
      if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupActivityStateProbabilityGivenIndoor(a1 + 472, (unsigned __int8 *)a2, &v28, &v27, v18, v19, v20, v21))
      {
        v26[0] = 12;
        v25[0] = 4;
        v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupActivityStateProbabilityGivenIndoor failed");
      }
      else
      {
        if (v27 >= 0.0 && v27 <= 1.0 && (*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v30 = v27;
          *v35 = (uint64_t)&v29;
          sub_18D061314(a1 + 16, (uint64_t)v26);
          sub_18D061444((uint64_t)v25, (uint64_t)&v37);
          sub_18D061360((uint64_t)v24, (uint64_t)&v32);
          if (!sub_18D064284(a1 + 16, (uint64_t)v26, 1, (uint64_t)v25, (uint64_t)v24))
          {
            result = *v16;
            *(__n128 *)(a1 + 152) = *v16;
            return result;
          }
          v26[0] = 12;
          v25[0] = 4;
          v9 = a1 - 88;
          cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to update,code,%d");
          goto LABEL_5;
        }
        v26[0] = 12;
        v25[0] = 4;
        v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupActivityStateProbabilityGivenIndoor returned invalid probability");
      }
    }
    if (*(char *)(a1 + 447) >= 0)
      LOBYTE(v15) = v22;
    else
      v15 = *(_QWORD *)(a1 + 424);
    goto LABEL_19;
  }
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupActivityStateProbabilityGivenOutdoor(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  double v12;
  unsigned __int8 v13;
  __int16 v14;
  unsigned __int8 v15;
  __int16 v16;

  v9 = *a2;
  if (v9 < 0xB)
  {
    v10 = *a3;
    if (v10 < 8)
    {
      result = 0;
      v12 = dbl_18D318120[v9] * dbl_18D318170[2 * v10 + 1];
      goto LABEL_7;
    }
    v14 = 12;
    v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "LookupActivityStateProbabilityGivenOutdoor(),latent probability index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v10);
  }
  else
  {
    v16 = 12;
    v15 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "LookupActivityStateProbabilityGivenOutdoor(),index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v9);
  }
  result = 0xFFFFFFFFLL;
  v12 = -1.0;
LABEL_7:
  *a4 = v12;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupActivityStateProbabilityGivenIndoor(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  double v12;
  unsigned __int8 v13;
  __int16 v14;
  unsigned __int8 v15;
  __int16 v16;

  v9 = *a2;
  if (v9 < 0xB)
  {
    v10 = *a3;
    if (v10 < 8)
    {
      result = 0;
      v12 = dbl_18D3181E0[v9] * dbl_18D318170[2 * v10];
      goto LABEL_7;
    }
    v14 = 12;
    v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "LookupActivityStateProbabilityGivenIndoor(),latent probability index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v10);
  }
  else
  {
    v16 = 12;
    v15 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "LookupActivityStateProbabilityGivenIndoor(),index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v9);
  }
  result = 0xFFFFFFFFLL;
  v12 = -1.0;
LABEL_7:
  *a4 = v12;
  return result;
}

double sub_18D061314@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000002;
  *(_QWORD *)a2 = &unk_1E25C7520;
  *(_OWORD *)(a2 + 8) = xmmword_18D319330;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 120))
    v2 = a1 + 64;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

uint64_t sub_18D061360(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;

  *(_QWORD *)(result + 24) = 0x100000002;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E25C74C0;
  *(_QWORD *)(result + 8) = 0;
  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  v4 = v3 * v2;
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v7 = "this->max_num_rows_ >= A.NumRows()";
    v8 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v7 = "this->max_num_cols_ >= A.NumCols()";
    v8 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v8, v7);
  }
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = 8 * v4;
    do
    {
      *(_QWORD *)(*(_QWORD *)(result + 32) + v5) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v5);
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_18D061430(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5DB0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D061444(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;

  *(_QWORD *)(result + 24) = 0x100000002;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E25C7430;
  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  v4 = v3 * v2;
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v7 = "this->max_num_rows_ >= A.NumRows()";
    v8 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v7 = "this->max_num_cols_ >= A.NumCols()";
    v8 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v8, v7);
  }
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = 8 * v4;
    do
    {
      *(_QWORD *)(*(_QWORD *)(result + 32) + v5) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v5);
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_18D061510(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5BA0;
  _Unwind_Resume(a1);
}

BOOL raven::RavenActivityStateEstimator::Predict(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  double v12;
  BOOL v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  double v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  __int128 v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  double v55;
  uint64_t v56;
  uint64_t **v57;
  double v58;
  uint64_t **v59;
  uint64_t v60;
  double v61;
  double v62;
  __int128 *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 *v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  double v70;
  uint64_t v71;
  uint64_t **v72;
  double v73;
  uint64_t **v74;
  uint64_t v75;
  double v76;
  double v77;
  __int128 *v78;
  __int128 *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  double v85;
  uint64_t v86;
  uint64_t **v87;
  double v88;
  uint64_t **v89;
  uint64_t v90;
  double v91;
  double v92;
  __int128 *v93;
  __int128 *v94;
  __int128 *v95;
  __int128 *v96;
  __int128 *v97;
  __int128 *v98;
  __int128 *v99;
  double v100;
  uint64_t v101;
  uint64_t **v102;
  double v103;
  uint64_t **v104;
  uint64_t v105;
  double v106;
  double v107;
  __int128 *v108;
  __int128 *v109;
  __int128 *v110;
  __int128 *v111;
  __int128 *v112;
  __int128 *v113;
  __int128 *v114;
  double v115;
  uint64_t v116;
  uint64_t **v117;
  double v118;
  uint64_t **v119;
  uint64_t v120;
  double v121;
  double v122;
  __int128 *v123;
  __int128 *v124;
  __int128 *v125;
  __int128 *v126;
  __int128 *v127;
  __int128 *v128;
  __int128 *v129;
  double v130;
  uint64_t v131;
  uint64_t **v132;
  double v133;
  uint64_t **v134;
  uint64_t v135;
  double v136;
  double v137;
  __int128 *v138;
  __int128 *v139;
  __int128 *v140;
  __int128 *v141;
  __int128 *v142;
  __int128 *v143;
  __int128 *v144;
  double v145;
  uint64_t v146;
  uint64_t **v147;
  double v148;
  uint64_t **v149;
  uint64_t v150;
  double v151;
  double v152;
  __int128 *v153;
  __int128 *v154;
  __int128 *v155;
  __int128 *v156;
  __int128 *v157;
  __int128 *v158;
  __int128 *v159;
  double v160;
  uint64_t v161;
  uint64_t **v162;
  double v163;
  uint64_t **v164;
  uint64_t v165;
  double v166;
  double v167;
  __int128 *v168;
  __int128 *v169;
  __int128 *v170;
  __int128 *v171;
  __int128 *v172;
  __int128 *v173;
  __int128 *v174;
  double v175;
  uint64_t v176;
  uint64_t **v177;
  double v178;
  uint64_t **v179;
  uint64_t v180;
  double v181;
  double v182;
  __int128 *v183;
  __int128 *v184;
  __int128 *v185;
  __int128 *v186;
  __int128 *v187;
  __int128 *v188;
  double v189;
  uint64_t v190;
  uint64_t **v191;
  double v192;
  uint64_t **v193;
  uint64_t v194;
  double v195;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int8x16_t v202;
  int8x16_t v203;
  double v204;
  double v205;
  double v206;
  unsigned int v207;
  int v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  BOOL v212;
  int v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  float64x2_t v217;
  cnprint::CNPrinter *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  cnprint::CNPrinter *v225;
  double v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  float64x2_t v232;
  uint64_t v233;
  int32x4_t v234;
  double v235;
  uint64_t i;
  double v237;
  double v239;
  uint64_t j;
  double v241;
  double v243;
  uint64_t k;
  double v245;
  double v247;
  uint64_t m;
  double v249;
  double v251;
  uint64_t n;
  double v253;
  double v255;
  uint64_t ii;
  double v257;
  double v259;
  uint64_t jj;
  double v261;
  double v263;
  uint64_t kk;
  double v265;
  double v267;
  uint64_t mm;
  double v269;
  double v271;
  uint64_t nn;
  double v273;
  unint64_t v275;
  BOOL v276;
  double *v277;
  double v278;
  double *v279;
  unint64_t v280;
  double v281;
  double v283;
  float64x2_t v284;
  double v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  double v296;
  const char *v297;
  uint64_t v298;
  char v299;
  double v300;
  double v301;
  double v302;
  double v303;
  unsigned int v304;
  unint64_t v305;
  uint64_t v306;
  int v307;
  _OWORD *v308;
  uint64_t v309;
  uint64_t v310;
  double v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  double v363;
  uint64_t v364;
  double v365;
  void *v366;
  __int128 v367;
  uint64_t v368;
  double *v369;
  uint64_t v370;
  __int128 *v371;
  __int128 v372;
  uint64_t v373;
  double *v374;
  _OWORD v375[50];
  uint64_t *v376;
  __int128 v377;
  uint64_t v378;
  _BYTE *v379;
  _BYTE v380[96];

  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v371) = 12;
      LOBYTE(v312) = 1;
      v300 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v371, (unsigned __int8 *)&v312, "WARNING: ActivityStateEstimator,time,%.3lf,predicting uninitialized", v36, v37, v38, v39, v40, SLOBYTE(v300));
    }
    return 0;
  }
  v11 = a1;
  a4.i64[0] = *(_QWORD *)(a2 + 8);
  *(double *)a3.i64 = *(double *)a4.i64 + (double)*(uint64_t *)a2;
  v12 = fabs(*(double *)a3.i64);
  v14 = (unint64_t)(*(_QWORD *)&v12 - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(*(_QWORD *)&v12 - 1) < 0xFFFFFFFFFFFFFLL
     || COERCE__INT64(*(double *)a4.i64 + (double)*(uint64_t *)a2) == 0;
  if (!v14)
  {
    LOWORD(v371) = 12;
    LOBYTE(v312) = 4;
    v301 = *(double *)(a1 + 288) + (double)*(uint64_t *)(a1 + 280);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v371, (unsigned __int8 *)&v312, "ActivityStateEstimator,time,%.3lf,invalid prediction time,%.3lf", a6, a7, a8, a9, a10, SLOBYTE(v301));
    return 0;
  }
  v15 = *(_QWORD *)(a1 + 280);
  v16 = *(double *)(a1 + 288);
  v371 = (__int128 *)v15;
  *(double *)&v372 = v16;
  v17 = CNTimeSpan::operator-(a2, &v371, a3, a4);
  v364 = v17;
  v365 = v18;
  *(double *)v25.i64 = v18;
  if (v17)
  {
    if ((v17 & 0x8000000000000000) == 0)
      goto LABEL_12;
LABEL_28:
    LOWORD(v371) = 12;
    LOBYTE(v312) = 4;
    v302 = v16 + (double)v15;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v371, (unsigned __int8 *)&v312, "ActivityStateEstimator,time,%.3lf,negative prediction interval,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v302));
    return 0;
  }
  if (v18 < 0.0)
    goto LABEL_28;
LABEL_12:
  v26 = *(unsigned __int8 *)(a2 + 200) - 2;
  if (*(_BYTE *)(a2 + 304))
    v27 = v26 >= 8;
  else
    v27 = 1;
  v28 = !v27;
  v29 = *(unsigned __int8 *)(a2 + 544);
  if (*(_BYTE *)(a2 + 544))
  {
    v30 = CNTimeSpan::operator-(a2 + 416, (_QWORD *)a2, v25, v24);
    v371 = (__int128 *)v30;
    *(double *)&v372 = v31;
    if (v30 < 0 || (*(double *)v32.i64 = v31, v31 < 0.0))
    {
      v30 = CNTimeSpan::operator-((double *)&v371, v32, v33);
      v32.i64[0] = v34;
    }
    if (*(double *)v32.i64 + (double)v30 <= 6.0)
    {
      v29 = *(unsigned __int8 *)(a2 + 512) - 1 < 6;
      v35 = *(unsigned __int8 *)(a2 + 513) - 1 < 6;
      goto LABEL_32;
    }
    v29 = 0;
  }
  v35 = 0;
LABEL_32:
  v308 = (_OWORD *)(v11 + 280);
  v43 = *(_OWORD *)(v11 + 280);
  v363 = *(double *)(v11 + 272);
  v314 = unk_18D33A3F8;
  v315 = xmmword_18D33A408;
  v316 = unk_18D33A418;
  v317 = xmmword_18D33A428;
  v312 = v43;
  v313 = xmmword_18D33A3E8;
  v320 = xmmword_18D33A138;
  v321 = unk_18D33A148;
  v318 = xmmword_18D33A118;
  v319 = unk_18D33A128;
  v324 = unk_18D33A178;
  v325 = xmmword_18D33A188;
  v326 = unk_18D33A198;
  v327 = xmmword_18D33A1A8;
  v322 = xmmword_18D33A158;
  v323 = xmmword_18D33A168;
  v330 = xmmword_18D33A1D8;
  v331 = unk_18D33A1E8;
  v328 = xmmword_18D33A1B8;
  v329 = unk_18D33A1C8;
  v332 = xmmword_18D33A1F8;
  v333 = xmmword_18D33A208;
  v336 = unk_18D33A238;
  v337 = xmmword_18D33A248;
  v334 = unk_18D33A218;
  v335 = xmmword_18D33A228;
  v340 = xmmword_18D33A278;
  v341 = unk_18D33A288;
  v338 = xmmword_18D33A258;
  v339 = unk_18D33A268;
  v342 = xmmword_18D33A298;
  v343 = xmmword_18D33A2A8;
  v346 = unk_18D33A2D8;
  v347 = xmmword_18D33A2E8;
  v344 = unk_18D33A2B8;
  v345 = xmmword_18D33A2C8;
  v350 = xmmword_18D33A318;
  v351 = unk_18D33A328;
  v348 = xmmword_18D33A2F8;
  v349 = unk_18D33A308;
  v352 = xmmword_18D33A338;
  v353 = xmmword_18D33A348;
  v357 = xmmword_18D33A388;
  v356 = unk_18D33A378;
  v354 = unk_18D33A358;
  v355 = xmmword_18D33A368;
  v362 = unk_18D33A3D8;
  v361 = xmmword_18D33A3C8;
  v360 = xmmword_18D33A3B8;
  v358 = xmmword_18D33A398;
  v359 = unk_18D33A3A8;
  if (((v28 | v29) & 1) != 0 || v35)
  {
    v372 = 0uLL;
    v371 = &v372;
    if (v28)
    {
      switch(v26)
      {
        case 0u:
          sub_18D2B2868((uint64_t *)&v371, 2, 2);
          break;
        case 1u:
          sub_18D2B2868((uint64_t *)&v371, 3, 3);
          break;
        case 2u:
          sub_18D2B2868((uint64_t *)&v371, 4, 4);
          break;
        case 3u:
          sub_18D2B2868((uint64_t *)&v371, 6, 6);
          break;
        case 4u:
          sub_18D2B2868((uint64_t *)&v371, 7, 7);
          break;
        case 5u:
          sub_18D2B2868((uint64_t *)&v371, 2, 2);
          sub_18D2B2868((uint64_t *)&v371, 3, 3);
          break;
        case 6u:
        case 7u:
          sub_18D2B2868((uint64_t *)&v371, 1, 1);
          break;
        default:
          break;
      }
    }
    else
    {
      v376 = (uint64_t *)&v371;
      if (v29)
        sub_18D2B2618((uint64_t *)&v376, *(_BYTE *)(a2 + 512));
      if (v35)
        sub_18D2B2618((uint64_t *)&v376, *(_BYTE *)(a2 + 513));
    }
    if (!*((_QWORD *)&v372 + 1))
      goto LABEL_331;
    v44 = (double)*((unint64_t *)&v372 + 1);
    v45 = 0.975 / (double)*((unint64_t *)&v372 + 1);
    v46 = (uint64_t)v371;
    if (v371 == &v372)
    {
      v55 = 1.0;
    }
    else
    {
      v47 = 0.0;
      v48 = (uint64_t)v371;
      do
      {
        v49 = *(__int128 **)(v48 + 8);
        v50 = (__int128 *)v48;
        if (v49)
        {
          do
          {
            v51 = v49;
            v49 = *(__int128 **)v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v51 = (__int128 *)*((_QWORD *)v50 + 2);
            v14 = *(_QWORD *)v51 == (_QWORD)v50;
            v50 = v51;
          }
          while (!v14);
        }
        v47 = v47 + *((double *)&v313 + *(int *)(v48 + 28));
        v48 = (uint64_t)v51;
      }
      while (v51 != &v372);
      if (vabdd_f64(1.0, v47) < 2.22044605e-16)
      {
        v52 = (uint64_t)v371;
        do
        {
          *((double *)&v313 + *(unsigned int *)(v52 + 28)) = 1.0 / v44;
          v53 = *(__int128 **)(v52 + 8);
          if (v53)
          {
            do
            {
              v54 = v53;
              v53 = *(__int128 **)v53;
            }
            while (v53);
          }
          else
          {
            do
            {
              v54 = *(__int128 **)(v52 + 16);
              v14 = *(_QWORD *)v54 == v52;
              v52 = (uint64_t)v54;
            }
            while (!v14);
          }
          v52 = (uint64_t)v54;
        }
        while (v54 != &v372);
        goto LABEL_71;
      }
      v55 = 1.0 - v47;
    }
    v56 = 0;
    v57 = (uint64_t **)v372;
    v58 = 0.025 / v55;
    do
    {
      if (!v57)
      {
LABEL_68:
        v61 = v58 * *((double *)&v313 + v56);
        goto LABEL_70;
      }
      v59 = v57;
      while (1)
      {
        v60 = *((int *)v59 + 7);
        if (v56 >= v60)
          break;
LABEL_67:
        v59 = (uint64_t **)*v59;
        if (!v59)
          goto LABEL_68;
      }
      if (v56 > v60)
      {
        ++v59;
        goto LABEL_67;
      }
      v61 = v45;
LABEL_70:
      *((double *)&v313 + v56++) = v61;
    }
    while (v56 != 10);
LABEL_71:
    if ((__int128 *)v46 == &v372)
    {
      v70 = 1.0;
    }
    else
    {
      v62 = 0.0;
      v63 = (__int128 *)v46;
      do
      {
        v64 = (__int128 *)*((_QWORD *)v63 + 1);
        v65 = v63;
        if (v64)
        {
          do
          {
            v66 = v64;
            v64 = *(__int128 **)v64;
          }
          while (v64);
        }
        else
        {
          do
          {
            v66 = (__int128 *)*((_QWORD *)v65 + 2);
            v14 = *(_QWORD *)v66 == (_QWORD)v65;
            v65 = v66;
          }
          while (!v14);
        }
        v62 = v62 + *((double *)&v318 + *((int *)v63 + 7));
        v63 = v66;
      }
      while (v66 != &v372);
      if (vabdd_f64(1.0, v62) < 2.22044605e-16)
      {
        v67 = (__int128 *)v46;
        do
        {
          *((double *)&v318 + *((unsigned int *)v67 + 7)) = 1.0 / v44;
          v68 = (__int128 *)*((_QWORD *)v67 + 1);
          if (v68)
          {
            do
            {
              v69 = v68;
              v68 = *(__int128 **)v68;
            }
            while (v68);
          }
          else
          {
            do
            {
              v69 = (__int128 *)*((_QWORD *)v67 + 2);
              v14 = *(_QWORD *)v69 == (_QWORD)v67;
              v67 = v69;
            }
            while (!v14);
          }
          v67 = v69;
        }
        while (v69 != &v372);
        goto LABEL_100;
      }
      v70 = 1.0 - v62;
    }
    v71 = 0;
    v72 = (uint64_t **)v372;
    v73 = 0.025 / v70;
LABEL_91:
    if (!v72)
    {
LABEL_97:
      v76 = v73 * *((double *)&v318 + v71);
      goto LABEL_99;
    }
    v74 = v72;
    while (1)
    {
      v75 = *((int *)v74 + 7);
      if (v71 >= v75)
      {
        if (v71 <= v75)
        {
          v76 = v45;
LABEL_99:
          *((double *)&v318 + v71++) = v76;
          if (v71 == 10)
          {
LABEL_100:
            if ((__int128 *)v46 == &v372)
            {
              v85 = 1.0;
            }
            else
            {
              v77 = 0.0;
              v78 = (__int128 *)v46;
              do
              {
                v79 = (__int128 *)*((_QWORD *)v78 + 1);
                v80 = v78;
                if (v79)
                {
                  do
                  {
                    v81 = v79;
                    v79 = *(__int128 **)v79;
                  }
                  while (v79);
                }
                else
                {
                  do
                  {
                    v81 = (__int128 *)*((_QWORD *)v80 + 2);
                    v14 = *(_QWORD *)v81 == (_QWORD)v80;
                    v80 = v81;
                  }
                  while (!v14);
                }
                v77 = v77 + *((double *)&v323 + *((int *)v78 + 7));
                v78 = v81;
              }
              while (v81 != &v372);
              if (vabdd_f64(1.0, v77) < 2.22044605e-16)
              {
                v82 = (__int128 *)v46;
                do
                {
                  *((double *)&v323 + *((unsigned int *)v82 + 7)) = 1.0 / v44;
                  v83 = (__int128 *)*((_QWORD *)v82 + 1);
                  if (v83)
                  {
                    do
                    {
                      v84 = v83;
                      v83 = *(__int128 **)v83;
                    }
                    while (v83);
                  }
                  else
                  {
                    do
                    {
                      v84 = (__int128 *)*((_QWORD *)v82 + 2);
                      v14 = *(_QWORD *)v84 == (_QWORD)v82;
                      v82 = v84;
                    }
                    while (!v14);
                  }
                  v82 = v84;
                }
                while (v84 != &v372);
                goto LABEL_129;
              }
              v85 = 1.0 - v77;
            }
            v86 = 0;
            v87 = (uint64_t **)v372;
            v88 = 0.025 / v85;
LABEL_120:
            if (!v87)
            {
LABEL_126:
              v91 = v88 * *((double *)&v323 + v86);
              goto LABEL_128;
            }
            v89 = v87;
            while (1)
            {
              v90 = *((int *)v89 + 7);
              if (v86 >= v90)
              {
                if (v86 <= v90)
                {
                  v91 = v45;
LABEL_128:
                  *((double *)&v323 + v86++) = v91;
                  if (v86 != 10)
                    goto LABEL_120;
LABEL_129:
                  if ((__int128 *)v46 == &v372)
                  {
                    v100 = 1.0;
                  }
                  else
                  {
                    v92 = 0.0;
                    v93 = (__int128 *)v46;
                    do
                    {
                      v94 = (__int128 *)*((_QWORD *)v93 + 1);
                      v95 = v93;
                      if (v94)
                      {
                        do
                        {
                          v96 = v94;
                          v94 = *(__int128 **)v94;
                        }
                        while (v94);
                      }
                      else
                      {
                        do
                        {
                          v96 = (__int128 *)*((_QWORD *)v95 + 2);
                          v14 = *(_QWORD *)v96 == (_QWORD)v95;
                          v95 = v96;
                        }
                        while (!v14);
                      }
                      v92 = v92 + *((double *)&v328 + *((int *)v93 + 7));
                      v93 = v96;
                    }
                    while (v96 != &v372);
                    if (vabdd_f64(1.0, v92) < 2.22044605e-16)
                    {
                      v97 = (__int128 *)v46;
                      do
                      {
                        *((double *)&v328 + *((unsigned int *)v97 + 7)) = 1.0 / v44;
                        v98 = (__int128 *)*((_QWORD *)v97 + 1);
                        if (v98)
                        {
                          do
                          {
                            v99 = v98;
                            v98 = *(__int128 **)v98;
                          }
                          while (v98);
                        }
                        else
                        {
                          do
                          {
                            v99 = (__int128 *)*((_QWORD *)v97 + 2);
                            v14 = *(_QWORD *)v99 == (_QWORD)v97;
                            v97 = v99;
                          }
                          while (!v14);
                        }
                        v97 = v99;
                      }
                      while (v99 != &v372);
                      goto LABEL_158;
                    }
                    v100 = 1.0 - v92;
                  }
                  v101 = 0;
                  v102 = (uint64_t **)v372;
                  v103 = 0.025 / v100;
LABEL_149:
                  if (!v102)
                  {
LABEL_155:
                    v106 = v103 * *((double *)&v328 + v101);
                    goto LABEL_157;
                  }
                  v104 = v102;
                  while (1)
                  {
                    v105 = *((int *)v104 + 7);
                    if (v101 >= v105)
                    {
                      if (v101 <= v105)
                      {
                        v106 = v45;
LABEL_157:
                        *((double *)&v328 + v101++) = v106;
                        if (v101 == 10)
                        {
LABEL_158:
                          if ((__int128 *)v46 == &v372)
                          {
                            v115 = 1.0;
                          }
                          else
                          {
                            v107 = 0.0;
                            v108 = (__int128 *)v46;
                            do
                            {
                              v109 = (__int128 *)*((_QWORD *)v108 + 1);
                              v110 = v108;
                              if (v109)
                              {
                                do
                                {
                                  v111 = v109;
                                  v109 = *(__int128 **)v109;
                                }
                                while (v109);
                              }
                              else
                              {
                                do
                                {
                                  v111 = (__int128 *)*((_QWORD *)v110 + 2);
                                  v14 = *(_QWORD *)v111 == (_QWORD)v110;
                                  v110 = v111;
                                }
                                while (!v14);
                              }
                              v107 = v107 + *((double *)&v333 + *((int *)v108 + 7));
                              v108 = v111;
                            }
                            while (v111 != &v372);
                            if (vabdd_f64(1.0, v107) < 2.22044605e-16)
                            {
                              v112 = (__int128 *)v46;
                              do
                              {
                                *((double *)&v333 + *((unsigned int *)v112 + 7)) = 1.0 / v44;
                                v113 = (__int128 *)*((_QWORD *)v112 + 1);
                                if (v113)
                                {
                                  do
                                  {
                                    v114 = v113;
                                    v113 = *(__int128 **)v113;
                                  }
                                  while (v113);
                                }
                                else
                                {
                                  do
                                  {
                                    v114 = (__int128 *)*((_QWORD *)v112 + 2);
                                    v14 = *(_QWORD *)v114 == (_QWORD)v112;
                                    v112 = v114;
                                  }
                                  while (!v14);
                                }
                                v112 = v114;
                              }
                              while (v114 != &v372);
                              goto LABEL_187;
                            }
                            v115 = 1.0 - v107;
                          }
                          v116 = 0;
                          v117 = (uint64_t **)v372;
                          v118 = 0.025 / v115;
LABEL_178:
                          if (!v117)
                          {
LABEL_184:
                            v121 = v118 * *((double *)&v333 + v116);
                            goto LABEL_186;
                          }
                          v119 = v117;
                          while (1)
                          {
                            v120 = *((int *)v119 + 7);
                            if (v116 >= v120)
                            {
                              if (v116 <= v120)
                              {
                                v121 = v45;
LABEL_186:
                                *((double *)&v333 + v116++) = v121;
                                if (v116 != 10)
                                  goto LABEL_178;
LABEL_187:
                                if ((__int128 *)v46 == &v372)
                                {
                                  v130 = 1.0;
                                }
                                else
                                {
                                  v122 = 0.0;
                                  v123 = (__int128 *)v46;
                                  do
                                  {
                                    v124 = (__int128 *)*((_QWORD *)v123 + 1);
                                    v125 = v123;
                                    if (v124)
                                    {
                                      do
                                      {
                                        v126 = v124;
                                        v124 = *(__int128 **)v124;
                                      }
                                      while (v124);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v126 = (__int128 *)*((_QWORD *)v125 + 2);
                                        v14 = *(_QWORD *)v126 == (_QWORD)v125;
                                        v125 = v126;
                                      }
                                      while (!v14);
                                    }
                                    v122 = v122 + *((double *)&v338 + *((int *)v123 + 7));
                                    v123 = v126;
                                  }
                                  while (v126 != &v372);
                                  if (vabdd_f64(1.0, v122) < 2.22044605e-16)
                                  {
                                    v127 = (__int128 *)v46;
                                    do
                                    {
                                      *((double *)&v338 + *((unsigned int *)v127 + 7)) = 1.0 / v44;
                                      v128 = (__int128 *)*((_QWORD *)v127 + 1);
                                      if (v128)
                                      {
                                        do
                                        {
                                          v129 = v128;
                                          v128 = *(__int128 **)v128;
                                        }
                                        while (v128);
                                      }
                                      else
                                      {
                                        do
                                        {
                                          v129 = (__int128 *)*((_QWORD *)v127 + 2);
                                          v14 = *(_QWORD *)v129 == (_QWORD)v127;
                                          v127 = v129;
                                        }
                                        while (!v14);
                                      }
                                      v127 = v129;
                                    }
                                    while (v129 != &v372);
                                    goto LABEL_216;
                                  }
                                  v130 = 1.0 - v122;
                                }
                                v131 = 0;
                                v132 = (uint64_t **)v372;
                                v133 = 0.025 / v130;
LABEL_207:
                                if (!v132)
                                {
LABEL_213:
                                  v136 = v133 * *((double *)&v338 + v131);
                                  goto LABEL_215;
                                }
                                v134 = v132;
                                while (1)
                                {
                                  v135 = *((int *)v134 + 7);
                                  if (v131 >= v135)
                                  {
                                    if (v131 <= v135)
                                    {
                                      v136 = v45;
LABEL_215:
                                      *((double *)&v338 + v131++) = v136;
                                      if (v131 == 10)
                                      {
LABEL_216:
                                        if ((__int128 *)v46 == &v372)
                                        {
                                          v145 = 1.0;
                                        }
                                        else
                                        {
                                          v137 = 0.0;
                                          v138 = (__int128 *)v46;
                                          do
                                          {
                                            v139 = (__int128 *)*((_QWORD *)v138 + 1);
                                            v140 = v138;
                                            if (v139)
                                            {
                                              do
                                              {
                                                v141 = v139;
                                                v139 = *(__int128 **)v139;
                                              }
                                              while (v139);
                                            }
                                            else
                                            {
                                              do
                                              {
                                                v141 = (__int128 *)*((_QWORD *)v140 + 2);
                                                v14 = *(_QWORD *)v141 == (_QWORD)v140;
                                                v140 = v141;
                                              }
                                              while (!v14);
                                            }
                                            v137 = v137 + *((double *)&v343 + *((int *)v138 + 7));
                                            v138 = v141;
                                          }
                                          while (v141 != &v372);
                                          if (vabdd_f64(1.0, v137) < 2.22044605e-16)
                                          {
                                            v142 = (__int128 *)v46;
                                            do
                                            {
                                              *((double *)&v343 + *((unsigned int *)v142 + 7)) = 1.0 / v44;
                                              v143 = (__int128 *)*((_QWORD *)v142 + 1);
                                              if (v143)
                                              {
                                                do
                                                {
                                                  v144 = v143;
                                                  v143 = *(__int128 **)v143;
                                                }
                                                while (v143);
                                              }
                                              else
                                              {
                                                do
                                                {
                                                  v144 = (__int128 *)*((_QWORD *)v142 + 2);
                                                  v14 = *(_QWORD *)v144 == (_QWORD)v142;
                                                  v142 = v144;
                                                }
                                                while (!v14);
                                              }
                                              v142 = v144;
                                            }
                                            while (v144 != &v372);
                                            goto LABEL_245;
                                          }
                                          v145 = 1.0 - v137;
                                        }
                                        v146 = 0;
                                        v147 = (uint64_t **)v372;
                                        v148 = 0.025 / v145;
LABEL_236:
                                        if (!v147)
                                        {
LABEL_242:
                                          v151 = v148 * *((double *)&v343 + v146);
                                          goto LABEL_244;
                                        }
                                        v149 = v147;
                                        while (1)
                                        {
                                          v150 = *((int *)v149 + 7);
                                          if (v146 >= v150)
                                          {
                                            if (v146 <= v150)
                                            {
                                              v151 = v45;
LABEL_244:
                                              *((double *)&v343 + v146++) = v151;
                                              if (v146 != 10)
                                                goto LABEL_236;
LABEL_245:
                                              if ((__int128 *)v46 == &v372)
                                              {
                                                v160 = 1.0;
                                              }
                                              else
                                              {
                                                v152 = 0.0;
                                                v153 = (__int128 *)v46;
                                                do
                                                {
                                                  v154 = (__int128 *)*((_QWORD *)v153 + 1);
                                                  v155 = v153;
                                                  if (v154)
                                                  {
                                                    do
                                                    {
                                                      v156 = v154;
                                                      v154 = *(__int128 **)v154;
                                                    }
                                                    while (v154);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v156 = (__int128 *)*((_QWORD *)v155 + 2);
                                                      v14 = *(_QWORD *)v156 == (_QWORD)v155;
                                                      v155 = v156;
                                                    }
                                                    while (!v14);
                                                  }
                                                  v152 = v152 + *((double *)&v348 + *((int *)v153 + 7));
                                                  v153 = v156;
                                                }
                                                while (v156 != &v372);
                                                if (vabdd_f64(1.0, v152) < 2.22044605e-16)
                                                {
                                                  v157 = (__int128 *)v46;
                                                  do
                                                  {
                                                    *((double *)&v348 + *((unsigned int *)v157 + 7)) = 1.0 / v44;
                                                    v158 = (__int128 *)*((_QWORD *)v157 + 1);
                                                    if (v158)
                                                    {
                                                      do
                                                      {
                                                        v159 = v158;
                                                        v158 = *(__int128 **)v158;
                                                      }
                                                      while (v158);
                                                    }
                                                    else
                                                    {
                                                      do
                                                      {
                                                        v159 = (__int128 *)*((_QWORD *)v157 + 2);
                                                        v14 = *(_QWORD *)v159 == (_QWORD)v157;
                                                        v157 = v159;
                                                      }
                                                      while (!v14);
                                                    }
                                                    v157 = v159;
                                                  }
                                                  while (v159 != &v372);
                                                  goto LABEL_274;
                                                }
                                                v160 = 1.0 - v152;
                                              }
                                              v161 = 0;
                                              v162 = (uint64_t **)v372;
                                              v163 = 0.025 / v160;
LABEL_265:
                                              if (!v162)
                                              {
LABEL_271:
                                                v166 = v163 * *((double *)&v348 + v161);
                                                goto LABEL_273;
                                              }
                                              v164 = v162;
                                              while (1)
                                              {
                                                v165 = *((int *)v164 + 7);
                                                if (v161 >= v165)
                                                {
                                                  if (v161 <= v165)
                                                  {
                                                    v166 = v45;
LABEL_273:
                                                    *((double *)&v348 + v161++) = v166;
                                                    if (v161 == 10)
                                                    {
LABEL_274:
                                                      if ((__int128 *)v46 == &v372)
                                                      {
                                                        v175 = 1.0;
                                                      }
                                                      else
                                                      {
                                                        v167 = 0.0;
                                                        v168 = (__int128 *)v46;
                                                        do
                                                        {
                                                          v169 = (__int128 *)*((_QWORD *)v168 + 1);
                                                          v170 = v168;
                                                          if (v169)
                                                          {
                                                            do
                                                            {
                                                              v171 = v169;
                                                              v169 = *(__int128 **)v169;
                                                            }
                                                            while (v169);
                                                          }
                                                          else
                                                          {
                                                            do
                                                            {
                                                              v171 = (__int128 *)*((_QWORD *)v170 + 2);
                                                              v14 = *(_QWORD *)v171 == (_QWORD)v170;
                                                              v170 = v171;
                                                            }
                                                            while (!v14);
                                                          }
                                                          v167 = v167 + *((double *)&v353 + *((int *)v168 + 7));
                                                          v168 = v171;
                                                        }
                                                        while (v171 != &v372);
                                                        if (vabdd_f64(1.0, v167) < 2.22044605e-16)
                                                        {
                                                          v172 = (__int128 *)v46;
                                                          do
                                                          {
                                                            *((double *)&v353 + *((unsigned int *)v172 + 7)) = 1.0 / v44;
                                                            v173 = (__int128 *)*((_QWORD *)v172 + 1);
                                                            if (v173)
                                                            {
                                                              do
                                                              {
                                                                v174 = v173;
                                                                v173 = *(__int128 **)v173;
                                                              }
                                                              while (v173);
                                                            }
                                                            else
                                                            {
                                                              do
                                                              {
                                                                v174 = (__int128 *)*((_QWORD *)v172 + 2);
                                                                v14 = *(_QWORD *)v174 == (_QWORD)v172;
                                                                v172 = v174;
                                                              }
                                                              while (!v14);
                                                            }
                                                            v172 = v174;
                                                          }
                                                          while (v174 != &v372);
                                                          goto LABEL_303;
                                                        }
                                                        v175 = 1.0 - v167;
                                                      }
                                                      v176 = 0;
                                                      v177 = (uint64_t **)v372;
                                                      v178 = 0.025 / v175;
LABEL_294:
                                                      if (!v177)
                                                      {
LABEL_300:
                                                        v181 = v178 * *((double *)&v353 + v176);
                                                        goto LABEL_302;
                                                      }
                                                      v179 = v177;
                                                      while (1)
                                                      {
                                                        v180 = *((int *)v179 + 7);
                                                        if (v176 >= v180)
                                                        {
                                                          if (v176 <= v180)
                                                          {
                                                            v181 = v45;
LABEL_302:
                                                            *((double *)&v353 + v176++) = v181;
                                                            if (v176 != 10)
                                                              goto LABEL_294;
LABEL_303:
                                                            if ((__int128 *)v46 == &v372)
                                                            {
                                                              v189 = 1.0;
                                                            }
                                                            else
                                                            {
                                                              v182 = 0.0;
                                                              v183 = (__int128 *)v46;
                                                              do
                                                              {
                                                                v184 = (__int128 *)*((_QWORD *)v183 + 1);
                                                                v185 = v183;
                                                                if (v184)
                                                                {
                                                                  do
                                                                  {
                                                                    v186 = v184;
                                                                    v184 = *(__int128 **)v184;
                                                                  }
                                                                  while (v184);
                                                                }
                                                                else
                                                                {
                                                                  do
                                                                  {
                                                                    v186 = (__int128 *)*((_QWORD *)v185 + 2);
                                                                    v14 = *(_QWORD *)v186 == (_QWORD)v185;
                                                                    v185 = v186;
                                                                  }
                                                                  while (!v14);
                                                                }
                                                                v182 = v182 + *((double *)&v358 + *((int *)v183 + 7));
                                                                v183 = v186;
                                                              }
                                                              while (v186 != &v372);
                                                              if (vabdd_f64(1.0, v182) < 2.22044605e-16)
                                                              {
                                                                do
                                                                {
                                                                  *((double *)&v358 + *(unsigned int *)(v46 + 28)) = 1.0 / v44;
                                                                  v187 = *(__int128 **)(v46 + 8);
                                                                  if (v187)
                                                                  {
                                                                    do
                                                                    {
                                                                      v188 = v187;
                                                                      v187 = *(__int128 **)v187;
                                                                    }
                                                                    while (v187);
                                                                  }
                                                                  else
                                                                  {
                                                                    do
                                                                    {
                                                                      v188 = *(__int128 **)(v46 + 16);
                                                                      v14 = *(_QWORD *)v188 == v46;
                                                                      v46 = (uint64_t)v188;
                                                                    }
                                                                    while (!v14);
                                                                  }
                                                                  v46 = (uint64_t)v188;
                                                                }
                                                                while (v188 != &v372);
                                                                goto LABEL_331;
                                                              }
                                                              v189 = 1.0 - v182;
                                                            }
                                                            v190 = 0;
                                                            v191 = (uint64_t **)v372;
                                                            v192 = 0.025 / v189;
LABEL_322:
                                                            if (!v191)
                                                            {
LABEL_328:
                                                              v195 = v192 * *((double *)&v358 + v190);
                                                              goto LABEL_330;
                                                            }
                                                            v193 = v191;
                                                            while (1)
                                                            {
                                                              v194 = *((int *)v193 + 7);
                                                              if (v190 >= v194)
                                                              {
                                                                if (v190 <= v194)
                                                                {
                                                                  v195 = v45;
LABEL_330:
                                                                  *((double *)&v358 + v190++) = v195;
                                                                  if (v190 == 10)
                                                                  {
LABEL_331:
                                                                    sub_18D05B5E4((_QWORD *)v372);
                                                                    goto LABEL_332;
                                                                  }
                                                                  goto LABEL_322;
                                                                }
                                                                ++v193;
                                                              }
                                                              v193 = (uint64_t **)*v193;
                                                              if (!v193)
                                                                goto LABEL_328;
                                                            }
                                                          }
                                                          ++v179;
                                                        }
                                                        v179 = (uint64_t **)*v179;
                                                        if (!v179)
                                                          goto LABEL_300;
                                                      }
                                                    }
                                                    goto LABEL_265;
                                                  }
                                                  ++v164;
                                                }
                                                v164 = (uint64_t **)*v164;
                                                if (!v164)
                                                  goto LABEL_271;
                                              }
                                            }
                                            ++v149;
                                          }
                                          v149 = (uint64_t **)*v149;
                                          if (!v149)
                                            goto LABEL_242;
                                        }
                                      }
                                      goto LABEL_207;
                                    }
                                    ++v134;
                                  }
                                  v134 = (uint64_t **)*v134;
                                  if (!v134)
                                    goto LABEL_213;
                                }
                              }
                              ++v119;
                            }
                            v119 = (uint64_t **)*v119;
                            if (!v119)
                              goto LABEL_184;
                          }
                        }
                        goto LABEL_149;
                      }
                      ++v104;
                    }
                    v104 = (uint64_t **)*v104;
                    if (!v104)
                      goto LABEL_155;
                  }
                }
                ++v89;
              }
              v89 = (uint64_t **)*v89;
              if (!v89)
                goto LABEL_126;
            }
          }
          goto LABEL_91;
        }
        ++v74;
      }
      v74 = (uint64_t **)*v74;
      if (!v74)
        goto LABEL_97;
    }
  }
LABEL_332:
  v196 = atomic_load((unsigned __int8 *)&qword_1ECF244F8);
  if ((v196 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF244F8))
  {
    qword_1ECF24500 = 10;
    unk_1ECF24508 = 0;
    __cxa_guard_release(&qword_1ECF244F8);
  }
  if (sub_18D03F608((double *)&v364, (double *)&qword_1ECF24500))
  {
    LOWORD(v371) = 12;
    LOBYTE(v376) = 4;
    v303 = *(double *)(v11 + 288) + (double)*(uint64_t *)(v11 + 280);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v371, (unsigned __int8 *)&v376, "ActivityStateEstimator,time,%.3lf,resetting because prediction interval too large,%.3lf", v197, v198, v199, v200, v201, SLOBYTE(v303));
    v41 = 0;
    *(_BYTE *)v11 = 0;
    *(_QWORD *)(v11 + 280) = 0;
    *(_QWORD *)(v11 + 288) = 0x7FF8000000000000;
    return v41;
  }
  v204 = *(double *)(*(_QWORD *)(v11 + 8) + 872);
  *(double *)v202.i64 = v204 + v204;
  v310 = 0;
  v311 = 0.0;
  CNTimeSpan::SetTimeSpan(&v310, 0, v202, v203);
  if (!v364)
  {
    v205 = v365;
    if ((*(_QWORD *)&v365 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_341;
  }
  if (!v310)
  {
    v206 = v311;
    if ((*(_QWORD *)&v311 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v205 = v365;
LABEL_345:
      if (v205 > v206)
      {
LABEL_346:
        v207 = vcvtpd_u64_f64((v205 + (double)v364) / v204);
        if (!v207)
        {
LABEL_347:
          *v308 = *(_OWORD *)a2;
          return 1;
        }
        goto LABEL_349;
      }
      goto LABEL_348;
    }
  }
  if (v364 == v310)
  {
    v205 = v365;
LABEL_341:
    v206 = v311;
    goto LABEL_345;
  }
  if (v364 >= v310)
  {
    v205 = v365;
    goto LABEL_346;
  }
LABEL_348:
  v207 = 1;
LABEL_349:
  v41 = 0;
  v208 = 0;
  v306 = v11 + 24;
  v309 = v11 + 144;
  v209 = *(_DWORD *)(v11 + 264) == 0;
  v304 = v207;
  while (1)
  {
    v307 = v208;
    if (v209)
      sub_18D053AA8(v309, v306);
    v210 = *(_DWORD *)(v11 + 152);
    v211 = *(_DWORD *)(v11 + 156);
    if (v210)
      v212 = v211 == 0;
    else
      v212 = 1;
    v213 = v212;
    if (v210 <= v211)
      v214 = *(_DWORD *)(v11 + 156);
    else
      v214 = *(_DWORD *)(v11 + 152);
    if (v213)
      v215 = 0;
    else
      v215 = v214;
    v305 = v215;
    if (v213 == 1)
    {
      v216 = v11;
      v378 = 0x10000000ALL;
      v376 = (uint64_t *)&unk_1E25C6020;
      v379 = v380;
      v377 = xmmword_18D314820;
      sub_18D04BE88((uint64_t)&v376, 1.0);
      v373 = 0x10000000ALL;
      v371 = (__int128 *)&unk_1E25C6020;
      *(_QWORD *)&v217.f64[1] = 0xA0000000ALL;
      v372 = xmmword_18D31CEF0;
      v374 = (double *)v375;
      v217.f64[0] = INFINITY;
      sub_18D064EF4((uint64_t)&v376, (uint64_t)&v371, v217);
      sub_18D053AA8(v309, (uint64_t)&v371);
    }
    else
    {
      v224 = *(double *)(v11 + 272);
      v373 = 0x10000000ALL;
      v371 = (__int128 *)&unk_1E25C6020;
      v372 = xmmword_18D31CEF0;
      v374 = (double *)v375;
      v225 = (cnprint::CNPrinter *)sub_18D06403C(v309, 1, (uint64_t)&v371);
      v226 = *v374;
      if (fabs(*v374 + -1.0) <= v224)
      {
        if ((v214 & 0x80000000) != 0)
          goto LABEL_499;
        v216 = v11;
        sub_18D064F78((uint64_t)&v371, v309);
        v234 = vdupq_lane_s32((int32x2_t)(v214 | 0x100000000), 0);
        v234.i32[1] = 1;
        v372 = (__int128)v234;
        v233 = v309;
      }
      else
      {
        if (cnprint::CNPrinter::GetLogLevel(v225) <= 1)
        {
          LOWORD(v371) = 2;
          LOBYTE(v376) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v371, (unsigned __int8 *)&v376, "WARNING: HMM prediction passed a non-normalized probability vector.", v227, v228, v229, v230, v231, v299);
        }
        if ((v214 & 0x80000000) != 0)
LABEL_499:
          __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
        v216 = v11;
        sub_18D064F78((uint64_t)&v376, v309);
        v232 = (float64x2_t)vdupq_lane_s32((int32x2_t)(v214 | 0x100000000), 0);
        HIDWORD(v232.f64[0]) = 1;
        v377 = (__int128)v232;
        v373 = 0x10000000ALL;
        v371 = (__int128 *)&unk_1E25C6020;
        *(_QWORD *)&v232.f64[1] = 0xA0000000ALL;
        v372 = xmmword_18D31CEF0;
        v374 = (double *)v375;
        v232.f64[0] = 1.0 / v226;
        sub_18D064EF4((uint64_t)&v376, (uint64_t)&v371, v232);
        v233 = v309;
      }
      sub_18D053AA8(v233, (uint64_t)&v371);
    }
    *(_DWORD *)(v216 + 264) = 1;
    v373 = 0xA0000000ALL;
    v371 = (__int128 *)&unk_1E25C5FC0;
    v372 = xmmword_18D319A40;
    v374 = (double *)v375;
    if ((*(_QWORD *)&v363 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v363 <= 0.0 || v363 >= 1.0)
    {
      LOWORD(v376) = 12;
      LOBYTE(v366) = 4;
      v285 = *((double *)&v312 + 1) + (double)(uint64_t)v312;
LABEL_491:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v376, (unsigned __int8 *)&v366, "time,%.3lf,t-function failure on line %d: %s() %s", v219, v220, v221, v222, v223, SLOBYTE(v285));
      goto LABEL_492;
    }
    v235 = 0.0;
    for (i = 16; i != 96; i += 8)
    {
      v237 = *(double *)((char *)&v312 + i);
      if ((*(_QWORD *)&v237 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_481;
      if (v237 < 0.0 || v237 > 1.0)
        goto LABEL_481;
      v235 = v235 + v237;
    }
    if (fabs(v235 + -1.0) > v363)
    {
LABEL_481:
      LOWORD(v376) = 12;
      LOBYTE(v366) = 4;
      v285 = *((double *)&v312 + 1) + (double)(uint64_t)v312;
      goto LABEL_491;
    }
    v239 = 0.0;
    for (j = 96; j != 176; j += 8)
    {
      v241 = *(double *)((char *)&v312 + j);
      if ((*(_QWORD *)&v241 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_482;
      if (v241 < 0.0 || v241 > 1.0)
        goto LABEL_482;
      v239 = v239 + v241;
    }
    if (fabs(v239 + -1.0) > v363)
    {
LABEL_482:
      LOWORD(v376) = 12;
      LOBYTE(v366) = 4;
      v285 = *((double *)&v312 + 1) + (double)(uint64_t)v312;
      goto LABEL_491;
    }
    v243 = 0.0;
    for (k = 176; k != 256; k += 8)
    {
      v245 = *(double *)((char *)&v312 + k);
      if ((*(_QWORD *)&v245 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_489;
      if (v245 < 0.0 || v245 > 1.0)
        goto LABEL_489;
      v243 = v243 + v245;
    }
    if (fabs(v243 + -1.0) > v363)
    {
LABEL_489:
      LOWORD(v376) = 12;
      LOBYTE(v366) = 4;
      v285 = *((double *)&v312 + 1) + (double)(uint64_t)v312;
      goto LABEL_491;
    }
    v247 = 0.0;
    for (m = 256; m != 336; m += 8)
    {
      v249 = *(double *)((char *)&v312 + m);
      if ((*(_QWORD *)&v249 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_494;
      if (v249 < 0.0 || v249 > 1.0)
        goto LABEL_494;
      v247 = v247 + v249;
    }
    if (fabs(v247 + -1.0) > v363)
    {
LABEL_494:
      v297 = "invalid transition probabilities from running state";
      v298 = 119;
      goto LABEL_497;
    }
    v251 = 0.0;
    for (n = 336; n != 416; n += 8)
    {
      v253 = *(double *)((char *)&v312 + n);
      if ((*(_QWORD *)&v253 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_495;
      if (v253 < 0.0 || v253 > 1.0)
        goto LABEL_495;
      v251 = v251 + v253;
    }
    if (fabs(v251 + -1.0) > v363)
    {
LABEL_495:
      v297 = "invalid transition probabilities from cycling state";
      v298 = 124;
      goto LABEL_497;
    }
    v255 = 0.0;
    for (ii = 416; ii != 496; ii += 8)
    {
      v257 = *(double *)((char *)&v312 + ii);
      if ((*(_QWORD *)&v257 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_496;
      if (v257 < 0.0 || v257 > 1.0)
        goto LABEL_496;
      v255 = v255 + v257;
    }
    if (fabs(v255 + -1.0) > v363)
    {
LABEL_496:
      v297 = "invalid transition probabilities from driving state";
      v298 = 129;
      goto LABEL_497;
    }
    v11 = v216;
    v259 = 0.0;
    for (jj = 496; jj != 576; jj += 8)
    {
      v261 = *(double *)((char *)&v312 + jj);
      if ((*(_QWORD *)&v261 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_498;
      if (v261 < 0.0 || v261 > 1.0)
        goto LABEL_498;
      v259 = v259 + v261;
    }
    if (fabs(v259 + -1.0) > v363)
    {
LABEL_498:
      v297 = "invalid transition probabilities from swimming state";
      v298 = 134;
      goto LABEL_497;
    }
    v263 = 0.0;
    for (kk = 576; kk != 656; kk += 8)
    {
      v265 = *(double *)((char *)&v312 + kk);
      if ((*(_QWORD *)&v265 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_500;
      if (v265 < 0.0 || v265 > 1.0)
        goto LABEL_500;
      v263 = v263 + v265;
    }
    if (fabs(v263 + -1.0) > v363)
    {
LABEL_500:
      v297 = "invalid transition probabilities from wheelschair state";
      v298 = 139;
      goto LABEL_497;
    }
    v267 = 0.0;
    for (mm = 656; mm != 736; mm += 8)
    {
      v269 = *(double *)((char *)&v312 + mm);
      if ((*(_QWORD *)&v269 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_501;
      if (v269 < 0.0 || v269 > 1.0)
        goto LABEL_501;
      v267 = v267 + v269;
    }
    if (fabs(v267 + -1.0) > v363)
    {
LABEL_501:
      v297 = "invalid transition probabilities from highspeed state";
      v298 = 144;
      goto LABEL_497;
    }
    v271 = 0.0;
    for (nn = 736; nn != 816; nn += 8)
    {
      v273 = *(double *)((char *)&v312 + nn);
      if ((*(_QWORD *)&v273 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_502;
      if (v273 < 0.0 || v273 > 1.0)
        goto LABEL_502;
      v271 = v271 + v273;
    }
    if (fabs(v271 + -1.0) > v363)
    {
LABEL_502:
      v297 = "invalid transition probabilities from airborne state";
      v298 = 149;
LABEL_497:
      sub_18D2ACEF0((uint64_t)&v312, (uint64_t)v297, (uint64_t)"t_ActivityState", v298, v220, v221, v222, v223);
LABEL_492:
      LOWORD(v376) = 2;
      LOBYTE(v366) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v376, (unsigned __int8 *)&v366, "ERROR: HMM transition probability function failed.", v286, v287, v288, v289, v290, v299);
      goto LABEL_493;
    }
    *(_QWORD *)((char *)&v372 + 4) = 0x640000000ALL;
    HIDWORD(v372) = 10;
    v375[2] = v315;
    v375[3] = v316;
    v375[4] = v317;
    v375[0] = v313;
    v375[1] = v314;
    v375[7] = v320;
    v375[8] = v321;
    v375[9] = v322;
    v375[5] = v318;
    v375[6] = v319;
    v375[13] = v326;
    v375[14] = v327;
    v375[10] = v323;
    v375[11] = v324;
    v375[12] = v325;
    v375[18] = v331;
    v375[19] = v332;
    v375[15] = v328;
    v375[16] = v329;
    v375[17] = v330;
    v375[23] = v336;
    v375[24] = v337;
    v375[21] = v334;
    v375[22] = v335;
    v375[20] = v333;
    v375[28] = v341;
    v375[29] = v342;
    v375[26] = v339;
    v375[27] = v340;
    v375[25] = v338;
    v375[33] = v346;
    v375[34] = v347;
    v375[31] = v344;
    v375[32] = v345;
    v375[30] = v343;
    v375[38] = v351;
    v375[39] = v352;
    v375[36] = v349;
    v375[37] = v350;
    v375[35] = v348;
    v375[43] = v356;
    v375[44] = v357;
    v375[41] = v354;
    v375[42] = v355;
    v375[40] = v353;
    v375[48] = v361;
    v375[49] = v362;
    v375[46] = v359;
    v375[47] = v360;
    v375[45] = v358;
    if ((_DWORD)v305)
    {
      v275 = 0;
      v276 = 0;
      v277 = (double *)v375;
LABEL_469:
      v278 = 0.0;
      v279 = v277;
      v280 = v305;
      while (1)
      {
        v281 = *v279;
        if (*v279 < 0.0 || v281 > 1.0)
          break;
        v278 = v278 + v281;
        ++v279;
        if (!--v280)
        {
          if (fabs(v278 + -1.0) <= *(double *)(v216 + 272))
          {
            ++v275;
            v277 += 10;
            v276 = v275 >= v305;
            if (v275 != v305)
              goto LABEL_469;
          }
          break;
        }
      }
      if (!v276)
        break;
    }
    v378 = 0x10000000ALL;
    v376 = (uint64_t *)&unk_1E25C6020;
    v377 = xmmword_18D31CEF0;
    v379 = v380;
    sub_18D053B2C((uint64_t)&v371, v309, (uint64_t)&v376);
    sub_18D053AA8(v306, (uint64_t)&v376);
    v368 = 0x10000000ALL;
    v366 = &unk_1E25C6020;
    v367 = xmmword_18D31CEF0;
    v369 = (double *)&v370;
    v209 = 1;
    sub_18D06403C(v306, 1, (uint64_t)&v366);
    v283 = *v369;
    v378 = 0x10000000ALL;
    v376 = (uint64_t *)&unk_1E25C6020;
    v284.f64[0] = 1.0 / v283;
    v377 = xmmword_18D31CEF0;
    v379 = v380;
    sub_18D064EF4(v306, (uint64_t)&v376, v284);
    sub_18D053AA8(v306, (uint64_t)&v376);
    *(_DWORD *)(v216 + 264) = 0;
    v208 = v307 + 1;
    v41 = v307 + 1 >= v304;
    if (v307 + 1 == v304)
      goto LABEL_347;
  }
  if (cnprint::CNPrinter::GetLogLevel(v218) <= 1)
  {
    LOWORD(v376) = 2;
    LOBYTE(v366) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v376, (unsigned __int8 *)&v366, "ERROR: HMM transition probability matrix is invalid.", v291, v292, v293, v294, v295, v299);
  }
LABEL_493:
  LOWORD(v371) = 12;
  LOBYTE(v376) = 4;
  v296 = *(double *)(v216 + 288) + (double)*(uint64_t *)(v216 + 280);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v371, (unsigned __int8 *)&v376, "ActivityStateEstimator,time,%.3lf,failed to predict,code,%d,iteration,%u", v291, v292, v293, v294, v295, SLOBYTE(v296));
  return v41;
}

void sub_18D06318C(_Unwind_Exception *a1)
{
  sub_18D05B5E4((_QWORD *)STACK[0x518]);
  _Unwind_Resume(a1);
}

BOOL raven::RavenActivityStateEstimator::Update(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  __int128 v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  unsigned __int8 v31;
  __int16 v32;
  _OWORD v33[6];
  _OWORD __b[5];

  if (*(_BYTE *)a1)
  {
    v10 = xmmword_18D33A000;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    switch(*a3)
    {
      case 0:
        memset_pattern16(__b, &unk_18D33A0E0, 0x50uLL);
        v11 = __b[0];
        v12 = (int64x2_t)__b[1];
        v13 = (int64x2_t)__b[2];
        v14 = (int64x2_t)__b[3];
        v10 = __b[4];
        break;
      case 1:
        v14 = vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
        v13 = (int64x2_t)xmmword_18D33A0A0;
        v12 = (int64x2_t)xmmword_18D33A0B0;
        v11 = xmmword_18D33A0C0;
        goto LABEL_8;
      case 2:
        v14 = vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
        v13 = (int64x2_t)xmmword_18D33A070;
        v12 = (int64x2_t)xmmword_18D33A080;
        v11 = xmmword_18D33A090;
LABEL_8:
        v10 = (__int128)v14;
        break;
      case 3:
        v13 = vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
        v12 = (int64x2_t)xmmword_18D33A060;
        goto LABEL_19;
      case 4:
        v13 = (int64x2_t)xmmword_18D33A050;
        goto LABEL_12;
      case 5:
        v13 = (int64x2_t)xmmword_18D33A040;
LABEL_12:
        v12 = vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
        v14 = v12;
        v10 = (__int128)v12;
        break;
      case 6:
        v14 = (int64x2_t)xmmword_18D33A030;
        goto LABEL_15;
      case 7:
        v14 = (int64x2_t)xmmword_18D33A000;
LABEL_15:
        v10 = 0uLL;
        break;
      case 8:
        break;
      case 9:
        v13 = vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
        v12 = (int64x2_t)xmmword_18D33A010;
        v11 = xmmword_18D33A020;
LABEL_19:
        v14 = v13;
        v10 = (__int128)v13;
        break;
      case 0xA:
        LOWORD(v33[0]) = 12;
        LOBYTE(__b[0]) = 4;
        v30 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v33, (unsigned __int8 *)__b, "ActivityStateEstimator,time,%.3lf,invalid activity input type,%d", a4, a5, a6, a7, a8, SLOBYTE(v30));
        return 0;
      default:
        v12 = 0uLL;
        v13 = 0uLL;
        v14 = 0uLL;
        break;
    }
    v33[0] = *(_OWORD *)a2;
    v33[1] = v11;
    v33[2] = v12;
    v33[3] = v13;
    v33[4] = v14;
    v33[5] = v10;
    v21 = sub_18D064988(a1 + 16, (uint64_t)v33);
    v20 = v21 == 0;
    if (v21)
    {
      v32 = 12;
      v31 = 4;
      v27 = *(double *)(a1 + 288) + (double)*(uint64_t *)(a1 + 280);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "ActivityStateEstimator,time,%.3lf,failed RavenActivityInput update,code,%d", v22, v23, v24, v25, v26, SLOBYTE(v27));
    }
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v33[0]) = 12;
      LOBYTE(__b[0]) = 1;
      v29 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v33, (unsigned __int8 *)__b, "WARNING: ActivityStateEstimator,time,%.3lf,trying to update uninitialized estimator", v15, v16, v17, v18, v19, SLOBYTE(v29));
    }
    return 0;
  }
  return v20;
}

uint64_t raven::ActivityStateChecker::HandleEvent(raven::ActivityStateChecker *this, const raven::ActivityStateEvent *a2, raven::ActivityStateEvent *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  unsigned int v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  unsigned __int8 v162;
  __int16 v163;

  if (!*((_BYTE *)this + 8))
  {
    v163 = 12;
    v162 = 4;
    v29 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v145 = v30 + (double)v29;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf,ActivityStateChecker, not configured", v31, v32, v33, v34, v35, SLOBYTE(v145));
    return 0xFFFFFFFFLL;
  }
  v3 = *(_OWORD *)((char *)a2 + 8);
  v4 = *(_OWORD *)((char *)a2 + 24);
  v5 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)a3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 40) = v5;
  *(_OWORD *)((char *)a3 + 24) = v4;
  *(_OWORD *)((char *)a3 + 8) = v3;
  v6 = *(_OWORD *)((char *)a2 + 72);
  v7 = *(_OWORD *)((char *)a2 + 88);
  v8 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a3 + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 104) = v8;
  *(_OWORD *)((char *)a3 + 88) = v7;
  *(_OWORD *)((char *)a3 + 72) = v6;
  v9 = *(_OWORD *)((char *)a2 + 136);
  v10 = *(_OWORD *)((char *)a2 + 152);
  v11 = *(_OWORD *)((char *)a2 + 168);
  *((_QWORD *)a3 + 23) = *((_QWORD *)a2 + 23);
  *(_OWORD *)((char *)a3 + 168) = v11;
  *(_OWORD *)((char *)a3 + 152) = v10;
  *(_OWORD *)((char *)a3 + 136) = v9;
  if (*((unsigned __int8 *)a2 + 104) >= 0xAu)
  {
    v163 = 12;
    v162 = 4;
    v36 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v146 = v37 + (double)v36;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, Warning: ActivityStateChecker,Invalid type detected in activity state integrity check.", v38, v39, v40, v41, v42, SLOBYTE(v146));
    return 0xFFFFFFFFLL;
  }
  v12 = *((double *)a2 + 14);
  if (v12 < 0.0 || (*((_QWORD *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v12 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v43 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v147 = v44 + (double)v43;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_unknown_", v45, v46, v47, v48, v49, SLOBYTE(v147));
    return 0xFFFFFFFFLL;
  }
  v13 = *((double *)a2 + 15);
  if (v13 < 0.0 || (*((_QWORD *)a2 + 15) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v13 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v50 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v148 = v51 + (double)v50;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_moving_", v52, v53, v54, v55, v56, SLOBYTE(v148));
    return 0xFFFFFFFFLL;
  }
  v14 = *((double *)a2 + 16);
  if (v14 < 0.0 || (*((_QWORD *)a2 + 16) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v14 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v57 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v149 = v58 + (double)v57;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_walking_", v59, v60, v61, v62, v63, SLOBYTE(v149));
    return 0xFFFFFFFFLL;
  }
  v15 = *((double *)a2 + 17);
  if (v15 < 0.0 || (*((_QWORD *)a2 + 17) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v15 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v64 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v150 = v65 + (double)v64;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_running_", v66, v67, v68, v69, v70, SLOBYTE(v150));
    return 0xFFFFFFFFLL;
  }
  v16 = *((double *)a2 + 18);
  if (v16 < 0.0 || (*((_QWORD *)a2 + 18) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v16 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v71 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v151 = v72 + (double)v71;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_cycling_", v73, v74, v75, v76, v77, SLOBYTE(v151));
    return 0xFFFFFFFFLL;
  }
  v17 = *((double *)a2 + 19);
  if (v17 < 0.0 || (*((_QWORD *)a2 + 19) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v17 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v78 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v152 = v79 + (double)v78;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_driving_", v80, v81, v82, v83, v84, SLOBYTE(v152));
    return 0xFFFFFFFFLL;
  }
  v18 = *((double *)a2 + 20);
  if (v18 < 0.0 || (*((_QWORD *)a2 + 20) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v18 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v85 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v153 = v86 + (double)v85;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_swimming_", v87, v88, v89, v90, v91, SLOBYTE(v153));
    return 0xFFFFFFFFLL;
  }
  v19 = *((double *)a2 + 21);
  if (v19 < 0.0 || (*((_QWORD *)a2 + 21) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v19 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v92 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v154 = v93 + (double)v92;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_wheelchair_", v94, v95, v96, v97, v98, SLOBYTE(v154));
    return 0xFFFFFFFFLL;
  }
  v20 = *((double *)a2 + 22);
  if (v20 < 0.0 || (*((_QWORD *)a2 + 22) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v20 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v99 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v155 = v100 + (double)v99;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_highspeed_", v101, v102, v103, v104, v105, SLOBYTE(v155));
    return 0xFFFFFFFFLL;
  }
  v21 = *((double *)a2 + 23);
  if (v21 < 0.0 || (*((_QWORD *)a2 + 23) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v21 > 1.0)
  {
    v163 = 12;
    v162 = 4;
    v106 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v156 = v107 + (double)v106;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,Invalid probability_airborne_", v108, v109, v110, v111, v112, SLOBYTE(v156));
    return 0xFFFFFFFFLL;
  }
  if (fabs(v12 + v13 + v14 + v15 + v16 + v17 + v18 + v19 + v20 + v21 + -1.0) > 0.000000015)
  {
    v163 = 12;
    v162 = 4;
    v22 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v144 = v23 + (double)v22;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, ActivityStateChecker,activity state probabilities do not add to 1.0,sum error,%.3e", v24, v25, v26, v27, v28, SLOBYTE(v144));
    return 0xFFFFFFFFLL;
  }
  if (!*((_BYTE *)this + 9))
    return 0;
  result = (uint64_t)sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D338328);
  if (result)
  {
    if (*(_BYTE *)(result + 1368))
    {
      v115 = *((unsigned __int8 *)a2 + 104);
      if (v115 > 9)
      {
        v163 = 12;
        v162 = 4;
        v130 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
        v159 = v131 + (double)v130;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf,ActivityStateChecker,Invalid activity type detected,%u", v132, v133, v134, v135, v136, SLOBYTE(v159));
        return 0xFFFFFFFFLL;
      }
      if (((1 << v115) & 0x3F3) == 0)
      {
        if (v115 == 2)
        {
          if (*(double *)(result + 1376) > sqrt(*(double *)(result + 1408)) + 5.11)
          {
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
            {
              v163 = 12;
              v162 = 1;
              v116 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
              v157 = v117 + (double)v116;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, Warning: ActivityStateChecker,Speed too large to raise walking activity state,user_speed_,%.2lf", v118, v119, v120, v121, v122, SLOBYTE(v157));
            }
LABEL_65:
            result = 0;
            *((_BYTE *)a3 + 104) = 1;
            return result;
          }
        }
        else if (*(double *)(result + 1376) > sqrt(*(double *)(result + 1408)) + 13.47)
        {
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
          {
            v163 = 12;
            v162 = 1;
            v137 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
            v160 = v138 + (double)v137;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, Warning: ActivityStateChecker,Speed too large to raise running activity state,user_speed_,%.2lf", v139, v140, v141, v142, v143, SLOBYTE(v160));
          }
          goto LABEL_65;
        }
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
    {
      v163 = 12;
      v162 = 1;
      v123 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
      v158 = v124 + (double)v123;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v163, &v162, "t,%.3lf, Warning: ActivityStateChecker,User speed invalid. Exiting with check passed return value.", v125, v126, v127, v128, v129, SLOBYTE(v158));
    }
    return 0;
  }
  return result;
}

uint64_t sub_18D063BF8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  float64x2_t v10;
  double v11;
  cnprint::CNPrinter *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  cnprint::CNPrinter *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  BOOL v35;
  double *v36;
  double v37;
  double *v38;
  unint64_t v39;
  double v40;
  double v42;
  float64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  void *v55;
  __int128 v56;
  uint64_t v57;
  double *v58;
  _BYTE v59[32];
  void *v60;
  __int128 v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE v64[16];

  if (!*(_DWORD *)(a1 + 120))
    sub_18D053AA8(a1 + 64, a1 + 8);
  v4 = *(_DWORD *)(a1 + 72);
  v5 = *(_DWORD *)(a1 + 76);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  v7 = v6;
  if (v4 <= v5)
    v8 = *(_DWORD *)(a1 + 76);
  else
    v8 = *(_DWORD *)(a1 + 72);
  if (v7)
    v9 = 0;
  else
    v9 = v8;
  if (v7 == 1)
  {
    v62 = 0x100000002;
    v60 = &unk_1E25C7520;
    v63 = v64;
    v61 = xmmword_18D314820;
    sub_18D04BE88((uint64_t)&v60, 1.0);
    v57 = 0x100000002;
    v55 = &unk_1E25C7520;
    *(_QWORD *)&v10.f64[1] = 0x200000002;
    v56 = xmmword_18D319330;
    v58 = (double *)v59;
    v10.f64[0] = INFINITY;
LABEL_22:
    sub_18D064EF4((uint64_t)&v60, (uint64_t)&v55, v10);
    goto LABEL_25;
  }
  v11 = *(double *)(a1 + 128);
  v57 = 0x100000002;
  v55 = &unk_1E25C7520;
  v49 = xmmword_18D319330;
  v56 = xmmword_18D319330;
  v58 = (double *)v59;
  v12 = (cnprint::CNPrinter *)sub_18D06403C(a1 + 64, 1, (uint64_t)&v55);
  v13 = *v58;
  if (fabs(*v58 + -1.0) > v11)
  {
    if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
    {
      LOWORD(v55) = 2;
      LOBYTE(v60) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, (unsigned __int8 *)&v60, "WARNING: HMM prediction passed a non-normalized probability vector.", v14, v15, v16, v17, v18, 2);
    }
    if ((v8 & 0x80000000) == 0)
    {
      sub_18D064724((uint64_t)&v60, a1 + 64);
      v19 = vdupq_lane_s32((int32x2_t)(v8 | 0x100000000), 0);
      v19.i32[1] = 1;
      v61 = (__int128)v19;
      v57 = 0x100000002;
      v55 = &unk_1E25C7520;
      *(_QWORD *)&v10.f64[1] = 0x200000002;
      v56 = v49;
      v58 = (double *)v59;
      v10.f64[0] = 1.0 / v13;
      goto LABEL_22;
    }
LABEL_43:
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  if ((v8 & 0x80000000) != 0)
    goto LABEL_43;
  sub_18D064724((uint64_t)&v55, a1 + 64);
  v20 = vdupq_lane_s32((int32x2_t)(v8 | 0x100000000), 0);
  v20.i32[1] = 1;
  v56 = (__int128)v20;
LABEL_25:
  sub_18D053AA8(a1 + 64, (uint64_t)&v55);
  *(_DWORD *)(a1 + 120) = 1;
  v57 = 0x200000002;
  v55 = &unk_1E25C75B0;
  v56 = xmmword_18D319340;
  v58 = (double *)v59;
  v27 = (cnprint::CNPrinter *)sub_18D064154(a2, (uint64_t)&v55, v21, v22, v23, v24, v25, v26);
  if ((_DWORD)v27)
  {
    LOWORD(v60) = 2;
    LOBYTE(v50) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, (unsigned __int8 *)&v50, "ERROR: HMM transition probability function failed.", v28, v29, v30, v31, v32, v49);
    return 27;
  }
  else
  {
    if (!(_DWORD)v9)
      goto LABEL_39;
    v34 = 0;
    v35 = 0;
    v36 = v58;
LABEL_29:
    v37 = 0.0;
    v38 = v36;
    v39 = v9;
    while (1)
    {
      v40 = *v38;
      if (*v38 < 0.0 || v40 > 1.0)
        break;
      v37 = v37 + v40;
      ++v38;
      if (!--v39)
      {
        if (fabs(v37 + -1.0) <= *(double *)(a1 + 128))
        {
          ++v34;
          v36 += SHIDWORD(v56);
          v35 = v34 >= v9;
          if (v34 != v9)
            goto LABEL_29;
        }
        break;
      }
    }
    if (!v35)
    {
      if (cnprint::CNPrinter::GetLogLevel(v27) <= 1)
      {
        LOWORD(v60) = 2;
        LOBYTE(v50) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, (unsigned __int8 *)&v50, "ERROR: HMM transition probability matrix is invalid.", v44, v45, v46, v47, v48, v49);
      }
      return 28;
    }
    else
    {
LABEL_39:
      v62 = 0x100000002;
      v60 = &unk_1E25C7520;
      v61 = xmmword_18D319330;
      v63 = v64;
      sub_18D053B2C((uint64_t)&v55, a1 + 64, (uint64_t)&v60);
      sub_18D053AA8(a1 + 8, (uint64_t)&v60);
      v52 = 0x100000002;
      v50 = &unk_1E25C7520;
      v51 = xmmword_18D319330;
      v53 = (double *)&v54;
      sub_18D06403C(a1 + 8, 1, (uint64_t)&v50);
      v42 = *v53;
      v62 = 0x100000002;
      v60 = &unk_1E25C7520;
      v43.f64[0] = 1.0 / v42;
      v61 = xmmword_18D319330;
      v63 = v64;
      sub_18D064EF4(a1 + 8, (uint64_t)&v60, v43);
      sub_18D053AA8(a1 + 8, (uint64_t)&v60);
      result = 0;
      *(_DWORD *)(a1 + 120) = 0;
    }
  }
  return result;
}

uint64_t sub_18D06403C(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  int32x2_t v13;
  int32x4_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  double *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  double *v26;
  uint64_t v27;

  if (a2 == 1)
  {
    v3 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v3;
    *(_DWORD *)(a3 + 16) = v3;
    *(_DWORD *)(a3 + 20) = 1;
    v4 = *(unsigned int *)(result + 12);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = *(unsigned int *)(result + 8);
      v7 = *(_QWORD *)(result + 32);
      v8 = *(_QWORD *)(a3 + 32);
      v9 = 1;
      do
      {
        v10 = *(double *)(v7 + 8 * (v6 * v5));
        v11 = v9;
        v12 = v6 - 1;
        if (v6 >= 2)
        {
          do
          {
            v10 = v10 + *(double *)(v7 + 8 * v11++);
            --v12;
          }
          while (v12);
        }
        *(double *)(v8 + 8 * v5++) = v10;
        v9 += v6;
      }
      while (v5 != v4);
    }
  }
  else
  {
    v13.i32[1] = 1;
    v13.i32[0] = *(_DWORD *)(result + 8);
    v14 = vdupq_lane_s32(v13, 0);
    v14.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v14;
    v15 = *(unsigned int *)(result + 8);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)(result + 32);
      v17 = *(_QWORD **)(a3 + 32);
      v18 = *(unsigned int *)(result + 8);
      do
      {
        v19 = *v16++;
        *v17++ = v19;
        --v18;
      }
      while (v18);
    }
    v20 = *(_DWORD *)(result + 12);
    if (v20 >= 2)
    {
      v21 = *(_QWORD *)(result + 32);
      v22 = *(double **)(a3 + 32);
      v23 = 1;
      v24 = v15;
      do
      {
        v25 = v24;
        v26 = v22;
        v27 = v15;
        if ((_DWORD)v15)
        {
          do
          {
            *v26 = *(double *)(v21 + 8 * v25) + *v26;
            ++v26;
            ++v25;
            --v27;
          }
          while (v27);
        }
        ++v23;
        v24 += v15;
      }
      while (v23 != v20);
    }
  }
  return result;
}

uint64_t sub_18D064154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  BOOL v9;
  double v10;
  uint64_t result;
  double *v13;
  double v14;
  double v15;
  unsigned __int8 v16;
  __int16 v17;
  unsigned __int8 v18;
  __int16 v19;

  v8 = *(double *)(a1 + 16);
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && (v8 >= 0.0 ? (v9 = v8 <= 1.0) : (v9 = 0), v9))
  {
    v10 = *(double *)(a1 + 24);
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v10 >= 0.0 && v10 <= 1.0)
    {
      result = 0;
      *(_OWORD *)(a2 + 8) = xmmword_18D319340;
      v13 = *(double **)(a2 + 32);
      *v13 = v8;
      v13[1] = 1.0 - v8;
      v13[2] = 1.0 - v10;
      v13[3] = v10;
      return result;
    }
    v19 = 12;
    v18 = 4;
    v15 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "time,%.3lf,t-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
  }
  else
  {
    v17 = 12;
    v16 = 4;
    v14 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "time,%.3lf,t-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v14));
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D064284(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  double v9;
  BOOL v10;
  float64x2_t v11;
  cnprint::CNPrinter *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t (*v22)(_QWORD, void **);
  cnprint::CNPrinter *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  char v30;
  uint64_t v31;
  double v32;
  _BYTE *v33;
  double v34;
  char v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  double v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  double *v55;
  uint64_t v56;
  int v57;
  double v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t result;
  char *v62;
  char v63;
  uint64_t v64;
  void *v65;
  __int128 v66;
  uint64_t v67;
  double *v68;
  double v69[2];
  unsigned __int8 v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[16];
  void *v76;
  __int128 v77;
  uint64_t v78;
  double *v79;
  _BYTE v80[24];

  v9 = *(double *)(a1 + 128);
  if (*(_DWORD *)(a2 + 8))
    v10 = *(_DWORD *)(a2 + 12) == 0;
  else
    v10 = 1;
  if (v10)
  {
    v73 = 0x100000002;
    v71 = &unk_1E25C7520;
    v74 = v75;
    v72 = xmmword_18D319330;
    sub_18D04BE88((uint64_t)&v71, 1.0);
    v78 = 0x100000002;
    v76 = &unk_1E25C7520;
    *(_QWORD *)&v11.f64[1] = 0x200000002;
    v77 = xmmword_18D319330;
    v79 = (double *)v80;
    v11.f64[0] = 0.5;
  }
  else
  {
    v78 = 0x100000002;
    v76 = &unk_1E25C7520;
    v77 = xmmword_18D319330;
    v79 = (double *)v80;
    v13 = (cnprint::CNPrinter *)sub_18D06403C(a2, 1, (uint64_t)&v76);
    v14 = *v79;
    if (fabs(*v79 + -1.0) <= v9)
    {
      sub_18D064724((uint64_t)&v76, a2);
      v77 = xmmword_18D319330;
      sub_18D053AA8(a1 + 8, (uint64_t)&v76);
      goto LABEL_13;
    }
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v76) = 2;
      LOBYTE(v71) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v71, "WARNING: HMM update passed a non-normalized probability vector.", v15, v16, v17, v18, v19, v63);
    }
    sub_18D064724((uint64_t)&v71, a2);
    *(_QWORD *)&v11.f64[1] = 0x200000002;
    v72 = xmmword_18D319330;
    v78 = 0x100000002;
    v76 = &unk_1E25C7520;
    v77 = xmmword_18D319330;
    v79 = (double *)v80;
    v11.f64[0] = 1.0 / v14;
  }
  sub_18D064EF4((uint64_t)&v71, (uint64_t)&v76, v11);
  sub_18D053AA8(a1 + 8, (uint64_t)&v76);
LABEL_13:
  v64 = a1 + 8;
  sub_18D064724((uint64_t)&v76, a1 + 8);
  v20 = 0;
  v21 = xmmword_18D319330;
  while (1)
  {
    v22 = *(uint64_t (**)(_QWORD, void **))(*(_QWORD *)(a4 + 32) + 8 * v20);
    v73 = 0x100000002;
    v71 = &unk_1E25C7520;
    v72 = v21;
    v74 = v75;
    v23 = (cnprint::CNPrinter *)v22(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8 * v20), &v71);
    if ((_DWORD)v23)
      break;
    v30 = 0;
    v31 = 0;
    v32 = 0.0;
    v33 = v74;
    do
    {
      v34 = *(double *)&v74[8 * v31];
      if (v34 < 0.0 || v34 > 1.0)
      {
        LOWORD(v65) = 2;
        v70 = 4;
        v62 = "ERROR: HMM emission probability matrix is invalid.";
LABEL_41:
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, &v70, v62, v24, v25, v26, v27, v28, v64);
        return 30;
      }
      v36 = v30;
      v32 = v32 + v34;
      v30 = 1;
      v31 = 1;
    }
    while ((v36 & 1) == 0);
    if (fabs(v32) <= v9)
    {
      LOWORD(v65) = 2;
      v70 = 4;
      v62 = "ERROR: HMM emission probability matrix is null matrix";
      goto LABEL_41;
    }
    v37 = 0;
    v38 = v79;
    do
    {
      v38[v37] = *(double *)&v33[v37 * 8] * v38[v37];
      ++v37;
    }
    while (v37 != 2);
    v39 = DWORD1(v77);
    if (DWORD1(v77))
    {
      v40 = 0;
      v41 = v77;
      v42 = v77 - 1;
      v43 = 1;
      do
      {
        v44 = v38[v41 * v40];
        v45 = v43;
        v46 = v42;
        if (v41 >= 2)
        {
          do
          {
            v44 = v44 + v38[v45++];
            --v46;
          }
          while (v46);
        }
        v69[v40++] = v44;
        v43 += v41;
      }
      while (v40 != v39);
    }
    v29.n128_f64[0] = v69[0];
    if (fabs(v69[0]) < 2.22044605e-16)
    {
      if (cnprint::CNPrinter::GetLogLevel(v23) <= 1)
      {
        LOWORD(v65) = 2;
        v70 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, &v70, "HMM state is null vector after update; revert to input state",
          v47,
          v48,
          v49,
          v50,
          v51,
          v64);
      }
      v29 = sub_18D053AA8((uint64_t)&v76, v64);
      v52 = DWORD1(v77);
      if (DWORD1(v77))
      {
        v53 = 0;
        v54 = v77;
        v55 = v79;
        v56 = v77 - 1;
        v57 = 1;
        do
        {
          v58 = v55[v54 * v53];
          v59 = v57;
          v60 = v56;
          if (v54 >= 2)
          {
            do
            {
              v58 = v58 + v55[v59++];
              --v60;
            }
            while (v60);
          }
          v69[v53++] = v58;
          v57 += v54;
        }
        while (v53 != v52);
      }
      v29.n128_f64[0] = v69[0];
    }
    v67 = 0x100000002;
    v65 = &unk_1E25C7520;
    v66 = xmmword_18D319330;
    v68 = v69;
    v29.n128_f64[0] = 1.0 / v29.n128_f64[0];
    sub_18D064EF4((uint64_t)&v76, (uint64_t)&v65, (float64x2_t)v29);
    sub_18D053AA8((uint64_t)&v76, (uint64_t)&v65);
    v21 = xmmword_18D319330;
    if (++v20 == a3)
    {
      sub_18D053AA8(a1 + 64, (uint64_t)&v76);
      result = 0;
      *(_DWORD *)(a1 + 120) = 1;
      return result;
    }
  }
  LOWORD(v65) = 2;
  v70 = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, &v70, "ERROR: HMM emission function failed.", v24, v25, v26, v27, v28, v64);
  return 29;
}

__n128 sub_18D064724(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x100000002;
  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C7520;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D064844(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D064858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  BOOL v9;
  double v10;
  uint64_t v12;
  uint64_t v14;
  double v15;
  double v16;
  unsigned __int8 v17;
  __int16 v18;
  unsigned __int8 v19;
  __int16 v20;

  v8 = *(double *)(a1 + 16);
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && (v8 >= 0.0 ? (v9 = v8 <= 1.0) : (v9 = 0), v9))
  {
    v10 = *(double *)(a1 + 24);
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v10 >= 0.0 && v10 <= 1.0)
    {
      v12 = 0;
      *(_OWORD *)(a2 + 8) = xmmword_18D319330;
      v14 = *(_QWORD *)(a2 + 32);
      *(double *)v14 = v8;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1 + 24);
      return v12;
    }
    v20 = 12;
    v19 = 4;
    v16 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v16));
  }
  else
  {
    v18 = 12;
    v17 = 4;
    v15 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D064988(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  cnprint::CNPrinter *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  int32x4_t v19;
  float64x2_t v20;
  int32x4_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  cnprint::CNPrinter *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t result;
  double v31;
  double *v32;
  double *v33;
  uint64_t v34;
  double v35;
  double *v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  int v43;
  __int128 v44;
  double v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  int v58;
  double v59;
  unsigned int v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[32];
  _QWORD *v65;
  uint64_t (**v66)();
  __int128 v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD v70[11];
  __int128 v71;
  uint64_t v72;
  uint64_t (**v73)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v75;
  __int128 v76;
  uint64_t v77;
  double *v78;
  double v79[10];
  unsigned __int8 v80;
  void *v81;
  __int128 v82;
  uint64_t v83;
  double *v84;
  _BYTE v85[80];
  void *v86;
  __int128 v87;
  uint64_t v88;
  double *v89;
  _BYTE v90[80];

  if (*(_DWORD *)(a1 + 248) == 1)
    sub_18D053AA8(a1 + 8, a1 + 128);
  v72 = 0x100000001;
  v70[10] = &off_1E25C68C0;
  *(_QWORD *)&v4 = 0x100000001;
  *((_QWORD *)&v4 + 1) = 0x100000001;
  v71 = v4;
  v73 = &v74;
  v74 = sub_18D0650AC;
  v68 = 0x10000000ALL;
  v66 = &off_1E25C5FF0;
  v67 = v4;
  v69 = v70;
  v70[0] = a2;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  sub_18D04DB40((uint64_t)v64, (uint64_t)&v66);
  if (v5 <= v6)
    v7 = v6;
  else
    v7 = v5;
  if (v6)
    v8 = v5 == 0;
  else
    v8 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = v7;
  v10 = *(double *)(a1 + 256);
  if (!*(_DWORD *)(a1 + 16) || !*(_DWORD *)(a1 + 20))
  {
    if ((v9 & 0x80000000) != 0)
      __assert_rtn("Ones", "cnmatrix.h", 2317, "nr >= 0");
    v83 = 0x10000000ALL;
    v81 = &unk_1E25C6020;
    v84 = (double *)v85;
    *(_QWORD *)&v82 = v9 | 0x100000000;
    v18 = 1.0 / (double)(int)v9;
    DWORD2(v82) = v9;
    HIDWORD(v82) = v9;
    sub_18D04BE88((uint64_t)&v81, 1.0);
    v88 = 0x10000000ALL;
    v86 = &unk_1E25C6020;
    v20 = (float64x2_t)xmmword_18D31CEF0;
    goto LABEL_21;
  }
  v88 = 0x10000000ALL;
  v86 = &unk_1E25C6020;
  v62 = xmmword_18D31CEF0;
  v87 = xmmword_18D31CEF0;
  v89 = (double *)v90;
  v11 = (cnprint::CNPrinter *)sub_18D06403C(a1 + 8, 1, (uint64_t)&v86);
  v12 = *v89;
  if (fabs(*v89 + -1.0) > v10)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v86) = 2;
      LOBYTE(v81) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v86, (unsigned __int8 *)&v81, "WARNING: HMM update passed a non-normalized probability vector.", v13, v14, v15, v16, v17, 10);
    }
    if ((v9 & 0x80000000) == 0)
    {
      v18 = 1.0 / v12;
      sub_18D064F78((uint64_t)&v81, a1 + 8);
      v19 = vdupq_lane_s32((int32x2_t)(v9 | 0x100000000), 0);
      v19.i32[1] = 1;
      v82 = (__int128)v19;
      v88 = 0x10000000ALL;
      v86 = &unk_1E25C6020;
      v20 = (float64x2_t)v62;
LABEL_21:
      v87 = (__int128)v20;
      v89 = (double *)v90;
      v20.f64[0] = v18;
      sub_18D064EF4((uint64_t)&v81, (uint64_t)&v86, v20);
      goto LABEL_24;
    }
LABEL_60:
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  if ((v9 & 0x80000000) != 0)
    goto LABEL_60;
  sub_18D064F78((uint64_t)&v86, a1 + 8);
  v21 = vdupq_lane_s32((int32x2_t)(v9 | 0x100000000), 0);
  v21.i32[1] = 1;
  v87 = (__int128)v21;
LABEL_24:
  sub_18D053AA8(a1 + 8, (uint64_t)&v86);
  sub_18D064F78((uint64_t)&v86, a1 + 8);
  v22 = *v73;
  v83 = 0x10000000ALL;
  v81 = &unk_1E25C6020;
  v63 = xmmword_18D31CEF0;
  v82 = xmmword_18D31CEF0;
  v84 = (double *)v85;
  v23 = (cnprint::CNPrinter *)((uint64_t (*)(_QWORD, void **))v22)(*v65, &v81);
  if ((_DWORD)v23)
  {
    LOWORD(v75) = 2;
    v80 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v75, &v80, "ERROR: HMM emission function failed.", v24, v25, v26, v27, v28, 10);
    return 29;
  }
  if ((_DWORD)v9)
  {
    v31 = 0.0;
    v32 = v84;
    v33 = v84;
    v34 = v9;
    do
    {
      v35 = *v33;
      if (*v33 < 0.0 || v35 > 1.0)
      {
        LOWORD(v75) = 2;
        v80 = 4;
        v48 = "ERROR: HMM emission probability matrix is invalid.";
        goto LABEL_46;
      }
      v31 = v31 + v35;
      ++v33;
      --v34;
    }
    while (v34);
    if (fabs(v31) > v10)
    {
      v37 = v89;
      do
      {
        v38 = *v32++;
        v29.n128_f64[0] = v38 * *v37;
        *v37++ = v29.n128_f64[0];
        --v9;
      }
      while (v9);
      goto LABEL_39;
    }
  }
  else if (v10 < 0.0)
  {
LABEL_39:
    v39 = DWORD1(v87);
    if (DWORD1(v87))
    {
      v40 = 0;
      v41 = v87;
      v42 = v89;
      v43 = 1;
      v44 = xmmword_18D31CEF0;
      do
      {
        v45 = v42[(v41 * v40)];
        v46 = v43;
        v47 = v41 - 1;
        if (v41 >= 2)
        {
          do
          {
            v45 = v45 + v42[v46++];
            --v47;
          }
          while (v47);
        }
        v79[v40++] = v45;
        v43 += v41;
      }
      while (v40 != v39);
      v29.n128_f64[0] = v79[0];
    }
    else
    {
      v44 = xmmword_18D31CEF0;
    }
    if (fabs(v29.n128_f64[0]) < 2.22044605e-16)
    {
      if (cnprint::CNPrinter::GetLogLevel(v23) <= 1)
      {
        LOWORD(v75) = 2;
        v80 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v75, &v80, "HMM state is null vector after update; revert to input state",
          v49,
          v50,
          v51,
          v52,
          v53,
          10);
      }
      v29 = sub_18D053AA8((uint64_t)&v86, a1 + 8);
      v54 = DWORD1(v87);
      if (DWORD1(v87))
      {
        v55 = 0;
        v56 = v87;
        v57 = v89;
        v58 = 1;
        v44 = v63;
        do
        {
          v59 = v57[(v56 * v55)];
          v60 = v58;
          v61 = v56 - 1;
          if (v56 >= 2)
          {
            do
            {
              v59 = v59 + v57[v60++];
              --v61;
            }
            while (v61);
          }
          v79[v55++] = v59;
          v58 += v56;
        }
        while (v55 != v54);
        v29.n128_f64[0] = v79[0];
      }
      else
      {
        v44 = v63;
      }
    }
    v77 = 0x10000000ALL;
    v75 = &unk_1E25C6020;
    v76 = v44;
    v78 = v79;
    v29.n128_f64[0] = 1.0 / v29.n128_f64[0];
    sub_18D064EF4((uint64_t)&v86, (uint64_t)&v75, (float64x2_t)v29);
    sub_18D053AA8((uint64_t)&v86, (uint64_t)&v75);
    sub_18D053AA8(a1 + 128, (uint64_t)&v86);
    result = 0;
    *(_DWORD *)(a1 + 248) = 1;
    return result;
  }
  LOWORD(v75) = 2;
  v80 = 4;
  v48 = "ERROR: HMM emission probability matrix is null matrix";
LABEL_46:
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v75, &v80, v48, v24, v25, v26, v27, v28, 10);
  return 30;
}

float64x2_t sub_18D064EF4(uint64_t a1, uint64_t a2, float64x2_t result)
{
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t v15;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v4;
  if ((int)v5 > 3)
  {
    v9 = (v5 - 2);
    v10 = *(float64x2_t **)(a1 + 32);
    v11 = *(float64x2_t **)(a2 + 32);
    v12 = (float64x2_t *)((char *)v10 + 8 * v9);
    v13 = (v5 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v10++;
      *v14++ = vmulq_n_f64(v15, result.f64[0]);
      --v13;
    }
    while (v13);
    result = vmulq_n_f64(*v12, result.f64[0]);
    *(float64x2_t *)((char *)v11 + 8 * v9) = result;
  }
  else if ((int)v5 >= 1)
  {
    v6 = *(double **)(a1 + 32);
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v6++;
      *v7++ = v8 * result.f64[0];
      --v5;
    }
    while (v5);
  }
  return result;
}

__n128 sub_18D064F78(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x10000000ALL;
  *(_QWORD *)(a1 + 24) = 0x10000000ALL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6020;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0xAu)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D065098(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D0650AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  uint64_t v13;
  uint64_t v18;
  BOOL v21;
  uint64_t v22;
  BOOL v25;
  uint64_t v26;
  BOOL v29;
  uint64_t v30;
  BOOL v33;
  uint64_t v34;
  BOOL v37;
  uint64_t v38;
  BOOL v41;
  uint64_t v42;
  BOOL v45;
  uint64_t v46;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  const char *v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unsigned __int8 v60;
  __int16 v61;
  unsigned __int8 v62;
  __int16 v63;
  unsigned __int8 v64;
  __int16 v65;
  unsigned __int8 v66;
  __int16 v67;
  unsigned __int8 v68;
  __int16 v69;

  v8 = *(double *)(a1 + 16);
  if ((*(uint64_t *)&v8 <= -1 || ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v8 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFLL) != 0
    || v8 > 1.0)
  {
    v61 = 12;
    v60 = 4;
    v55 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v61, &v60, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v55));
    return 0xFFFFFFFFLL;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if ((v13 <= -1 || ((v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v13 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v13 & 0x7FFFFFFFFFFFFFFFLL) != 0
    || *(double *)(a1 + 24) > 1.0)
  {
    v63 = 12;
    v62 = 4;
    v56 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, &v62, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v56));
    return 0xFFFFFFFFLL;
  }
  v18 = *(_QWORD *)(a1 + 32);
  v21 = v18 > -1 && ((v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(v18 - 1) < 0xFFFFFFFFFFFFFLL
     || (v18 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v21 || *(double *)(a1 + 32) > 1.0)
  {
    v65 = 12;
    v64 = 4;
    v57 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, &v64, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v57));
    return 0xFFFFFFFFLL;
  }
  v22 = *(_QWORD *)(a1 + 40);
  v25 = v22 > -1 && ((v22 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(v22 - 1) < 0xFFFFFFFFFFFFFLL
     || (v22 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v25 || *(double *)(a1 + 40) > 1.0)
  {
    v67 = 12;
    v66 = 4;
    v58 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, &v66, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v58));
    return 0xFFFFFFFFLL;
  }
  v26 = *(_QWORD *)(a1 + 48);
  v29 = v26 > -1 && ((v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(v26 - 1) < 0xFFFFFFFFFFFFFLL
     || (v26 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v29 || *(double *)(a1 + 48) > 1.0)
  {
    v69 = 12;
    v68 = 4;
    v59 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, &v68, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v59));
    return 0xFFFFFFFFLL;
  }
  v30 = *(_QWORD *)(a1 + 56);
  v33 = v30 > -1 && ((v30 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(v30 - 1) < 0xFFFFFFFFFFFFFLL
     || (v30 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v33 || *(double *)(a1 + 56) > 1.0)
  {
    v53 = "invalid likelihood (driving state)";
    v54 = 115;
LABEL_138:
    sub_18D2ACFAC(a1, (uint64_t)v53, (uint64_t)"e_ActivityState", v54, a5, a6, a7, a8);
    return 0xFFFFFFFFLL;
  }
  v34 = *(_QWORD *)(a1 + 64);
  v37 = v34 > -1 && ((v34 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(v34 - 1) < 0xFFFFFFFFFFFFFLL
     || (v34 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v37 || *(double *)(a1 + 64) > 1.0)
  {
    v53 = "invalid likelihood (swimming state)";
    v54 = 121;
    goto LABEL_138;
  }
  v38 = *(_QWORD *)(a1 + 72);
  v41 = v38 > -1 && ((v38 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(v38 - 1) < 0xFFFFFFFFFFFFFLL
     || (v38 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v41 || *(double *)(a1 + 72) > 1.0)
  {
    v53 = "invalid likelihood (wheelchair state)";
    v54 = 127;
    goto LABEL_138;
  }
  v42 = *(_QWORD *)(a1 + 80);
  v45 = v42 > -1 && ((v42 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(v42 - 1) < 0xFFFFFFFFFFFFFLL
     || (v42 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v45 || *(double *)(a1 + 80) > 1.0)
  {
    v53 = "invalid likelihood (highspeed state)";
    v54 = 133;
    goto LABEL_138;
  }
  v46 = *(_QWORD *)(a1 + 88);
  v49 = v46 > -1 && ((v46 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(v46 - 1) < 0xFFFFFFFFFFFFFLL
     || (v46 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v49 || *(double *)(a1 + 88) > 1.0)
  {
    v53 = "invalid likelihood (airborne state)";
    v54 = 139;
    goto LABEL_138;
  }
  v50 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_18D31CEF0;
  v51 = *(_QWORD *)(a2 + 32);
  *(double *)v51 = v8;
  *(_QWORD *)(v51 + 8) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v51 + 16) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v51 + 24) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v51 + 32) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v51 + 40) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v51 + 48) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v51 + 56) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v51 + 64) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v51 + 72) = *(_QWORD *)(a1 + 88);
  return v50;
}

void sub_18D0655B4(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t CurrentTime;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD v27[24];
  void *__p;
  char v29;
  unsigned __int8 v30;
  __int16 v31;
  __int128 v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void (**v42)(cnnavigation::KlobucharModelParameters *__hidden);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48[3];
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t *v66[3];
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _BYTE v75[24];
  int v76;

  v8 = *a2;
  sub_18D06632C((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(_QWORD *)&v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((_QWORD *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::ActivityStateEvent *)v27))
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      memset(v75, 0, sizeof(v75));
      v76 = 0;
      v66[1] = 0;
      v66[2] = 0;
      v66[0] = (uint64_t *)off_1E25C3EC8;
      v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66))
        sub_18D166F34((uint64_t)v8, (uint64_t)v66);
      v48[1] = 0;
      v48[2] = 0;
      v48[0] = (uint64_t)&unk_1E25C2E08;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v57 = 0;
      v56 = 0;
      v58 = 0x7FF8000000000000;
      v59 = 0;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v65 = 0;
      v63 = 0;
      v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18D065CE8((uint64_t)v8, v48);
      }
      *((_QWORD *)&v32 + 1) = 0;
      v33 = 0.0;
      *(_QWORD *)&v32 = &off_1E25C30B0;
      LOBYTE(v34) = 0;
      *((_QWORD *)&v34 + 1) = 0;
      *(_QWORD *)&v35 = 0;
      BYTE8(v35) = 0;
      v36 = 0uLL;
      LOBYTE(v37) = 0;
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0;
      v39 = 0x7FF8000000000000;
      v40 = 0;
      v41 = 0;
      v42 = &off_1E25B99F8;
      v43 = 0u;
      v44 = 0u;
      v45 = xmmword_18D30B590;
      v46 = xmmword_18D30B5A0;
      v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        v12 = v11;
        v37 = 0u;
        v36 = 0u;
        v35 = 0u;
        v34 = 0u;
        *((_QWORD *)&v32 + 1) = CurrentTime;
        v33 = v11;
        v38 = 0;
        v39 = 0x7FF8000000000000;
        v31 = 12;
        v30 = 2;
        sub_18D0778AC(&__p, "KlobucharParametersEvent");
        v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0)
          operator delete(__p);
        sub_18D2170B8((uint64_t)v8, (uint64_t *)&v32);
      }
      v66[0] = (uint64_t *)off_1E25C3EC8;
      *(_QWORD *)&v32 = &v75[4];
      sub_18D07C7AC((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      v18 = (*(uint64_t (**)(_QWORD *))(v27[0] + 16))(v27);
      v20 = v19 + (double)v18;
      (*(void (**)(__int128 *__return_ptr, _QWORD *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
  }
}

void sub_18D0658CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  uint64_t v48;

  if (a40 < 0)
    operator delete(__p);
  *(_QWORD *)(v48 - 184) = v47 + 16;
  a42 = (void *)(v48 - 88);
  sub_18D07C7AC((void ***)&a42);
  _Unwind_Resume(a1);
}

BOOL raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent(raven::GnssMeasurementPreprocessor *this, raven::GNSSUTCParametersEvent *a2)
{
  _BOOL8 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  __int16 v20;

  if (*(_BYTE *)this)
  {
    result = cnnavigation::GNSSUTCParameters::IsValid((raven::GnssMeasurementPreprocessor *)((char *)this + 248));
    if (result)
    {
      v5 = *(_OWORD *)((char *)this + 152);
      v6 = *(_OWORD *)((char *)this + 168);
      *(_OWORD *)((char *)a2 + 40) = *(_OWORD *)((char *)this + 184);
      *(_OWORD *)((char *)a2 + 24) = v6;
      *(_OWORD *)((char *)a2 + 8) = v5;
      v7 = *(_OWORD *)((char *)this + 200);
      v8 = *(_OWORD *)((char *)this + 216);
      v9 = *(_OWORD *)((char *)this + 232);
      *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)((char *)this + 248);
      *(_OWORD *)((char *)a2 + 88) = v9;
      *(_OWORD *)((char *)a2 + 72) = v8;
      *(_OWORD *)((char *)a2 + 56) = v7;
      v10 = *(_OWORD *)((char *)this + 264);
      v11 = *(_OWORD *)((char *)this + 280);
      v12 = *(_OWORD *)((char *)this + 296);
      *((_DWORD *)a2 + 42) = *((_DWORD *)this + 78);
      *(_OWORD *)((char *)a2 + 152) = v12;
      *(_OWORD *)((char *)a2 + 136) = v11;
      *(_OWORD *)((char *)a2 + 120) = v10;
      return 1;
    }
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v20 = 12;
      v19 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "#gmp,GetGpsUTCParametersEvent,not configured", v13, v14, v15, v16, v17, v18);
    }
    return 0;
  }
  return result;
}

BOOL cnnavigation::GNSSUTCParameters::IsValid(cnnavigation::GNSSUTCParameters *this)
{
  int v1;
  int v2;

  if (!*(_BYTE *)this)
    return 0;
  if (fabs(*((double *)this + 1)) >= 0.000001)
    return 0;
  if (fabs(*((double *)this + 2)) >= 0.000001)
    return 0;
  v1 = *((_DWORD *)this + 10);
  if ((v1 + 500) > 0x3E8)
    return 0;
  v2 = v1 - *((_DWORD *)this + 16);
  if (v2 < 0)
    v2 = -v2;
  return v2 < 2;
}

uint64_t raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements(uint64_t **this, uint64_t **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  __int16 v15;

  if (!*(_BYTE *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this) <= 1)
    {
      v15 = 12;
      v14 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "#gmp,GetPreprocessedGnssMeasurements,not configured", v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  if (!*((_BYTE *)this + 16))
    return 0;
  v3 = *((_OWORD *)this + 2);
  *(_OWORD *)(a2 + 3) = *((_OWORD *)this + 3);
  *(_OWORD *)(a2 + 1) = v3;
  v4 = *((_OWORD *)this + 4);
  v5 = *((_OWORD *)this + 5);
  v6 = *((_OWORD *)this + 6);
  a2[11] = this[14];
  *(_OWORD *)(a2 + 9) = v6;
  *(_OWORD *)(a2 + 7) = v5;
  *(_OWORD *)(a2 + 5) = v4;
  if (this + 3 != a2)
    sub_18D189238((uint64_t)(a2 + 12), this[15], this[16], ((char *)this[16] - (char *)this[15]) >> 4);
  *((_BYTE *)this + 16) = 0;
  return 1;
}

uint64_t raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent(raven::GnssMeasurementPreprocessor *this, raven::KlobucharParametersEvent *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 v15;
  __int16 v16;

  if (!*(_BYTE *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v16 = 12;
      v15 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "#gmp,KlobucharParametersEvent,not configured", v9, v10, v11, v12, v13, v14);
    }
    return 0;
  }
  if (!*((_BYTE *)this + 520))
    return 0;
  v3 = *(_OWORD *)((char *)this + 328);
  v4 = *(_OWORD *)((char *)this + 344);
  *(_OWORD *)((char *)a2 + 40) = *(_OWORD *)((char *)this + 360);
  *(_OWORD *)((char *)a2 + 24) = v4;
  *(_OWORD *)((char *)a2 + 8) = v3;
  v5 = *(_OWORD *)((char *)this + 376);
  v6 = *(_OWORD *)((char *)this + 392);
  v7 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)((char *)this + 424);
  *(_OWORD *)((char *)a2 + 88) = v7;
  *(_OWORD *)((char *)a2 + 72) = v6;
  *(_OWORD *)((char *)a2 + 56) = v5;
  cnnavigation::KlobucharModelParameters::operator=((uint64_t)a2 + 120, (uint64_t)this + 440);
  if (*((_BYTE *)this + 520))
  {
    *((_QWORD *)this + 40) = &off_1E25C30B0;
    *((_BYTE *)this + 520) = 0;
  }
  return 1;
}

void raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime(cnprint::CNPrinter *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  __int16 v9;

  if (*(_BYTE *)a1)
  {
    *((_OWORD *)a1 + 137) = *a2;
  }
  else if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    v9 = 12;
    v8 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v9, &v8, "#gmp,UpdateCurrentFrameworkTime(CNTime), not configured", v2, v3, v4, v5, v6, v7);
  }
}

BOOL raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::ActivityStateEvent *a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  unsigned __int8 v14;
  __int16 v15;

  v2 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    v3 = *(_OWORD *)((char *)a2 + 120);
    *(_OWORD *)((char *)this + 888) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)this + 904) = v3;
    v4 = *(_OWORD *)((char *)a2 + 136);
    v5 = *(_OWORD *)((char *)a2 + 152);
    v6 = *(_OWORD *)((char *)a2 + 168);
    *((_QWORD *)this + 121) = *((_QWORD *)a2 + 23);
    *(_OWORD *)((char *)this + 936) = v5;
    *(_OWORD *)((char *)this + 952) = v6;
    *(_OWORD *)((char *)this + 920) = v4;
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v15 = 12;
    v14 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "#gmp,HandleEvent(ActivityState),not configured", v7, v8, v9, v10, v11, v13);
  }
  return v2 != 0;
}

void sub_18D065CE8(uint64_t a1, uint64_t *a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  char *v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v6 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v6;
  v7 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E25C1AB0;
  *(_QWORD *)(v8 + 8) = &unk_1E25C2E08;
  v9 = *(_OWORD *)(a2 + 15);
  v10 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(v8 + 144) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(v8 + 160) = v10;
  *(_DWORD *)(v8 + 176) = *((_DWORD *)a2 + 42);
  v11 = *(_OWORD *)(a2 + 7);
  v12 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v8 + 96) = v12;
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(v8 + 128) = v9;
  v13 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v8 + 32) = v13;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v8 + 64) = v11;
  v14 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v8;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v15 + 16))(a2);
  *((_QWORD *)v4 + 8) = v16;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v29, a2);
  if (v4[95] < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v29;
  *((_QWORD *)v4 + 11) = v30;
  v27 = v4 + 24;
  v28 = (std::__shared_weak_count *)v4;
  v17 = *(_QWORD *)(a1 + 344);
  v25 = v4 + 24;
  v26 = (std::__shared_weak_count *)v4;
  do
    v18 = __ldxr(v5);
  while (__stxr(v18 + 1, v5));
  (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)v17 + 16))(v17, &v25, a1);
  v19 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_18D065F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D065F70(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D065F7C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "GNSSUTCParametersEvent");
}

void sub_18D065F8C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[24];
  void *v25[2];
  char v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  __int16 v29;

  v8 = *a2;
  sub_18D06632C((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::ActivityStateEvent *)v24);
  if (v10)
  {
    v29 = 12;
    v28 = 2;
    v27[0] = (*(uint64_t (**)(_QWORD *, double))(v24[0] + 16))(v24, v9);
    v27[1] = v11;
    (*(void (**)(void **__return_ptr, _QWORD *))(v24[0] + 24))(v25, v24);
    if (v26 >= 0)
      v17 = v25;
    else
      v17 = (void **)v25[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v23) = v8 - 16;
    else
      v23 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    if (v26 < 0)
      operator delete(v25[0]);
  }
}

void sub_18D066074(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

__n128 raven::RavenEstimator::HandleActivityStateEvent(raven::RavenEstimator *this, const raven::ActivityStateEvent *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  if (*((_BYTE *)this + 57))
  {
    if (*((_BYTE *)this + 1208))
    {
      v4 = *(_OWORD *)((char *)a2 + 8);
      v5 = *(_OWORD *)((char *)a2 + 24);
      v6 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1256) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 1272) = v6;
      *(_OWORD *)((char *)this + 1224) = v4;
      *(_OWORD *)((char *)this + 1240) = v5;
      v7 = *(_OWORD *)((char *)a2 + 72);
      v8 = *(_OWORD *)((char *)a2 + 88);
      v9 = *(_OWORD *)((char *)a2 + 120);
      *(_OWORD *)((char *)this + 1320) = *(_OWORD *)((char *)a2 + 104);
      *(_OWORD *)((char *)this + 1336) = v9;
      *(_OWORD *)((char *)this + 1288) = v7;
      *(_OWORD *)((char *)this + 1304) = v8;
      result = *(__n128 *)((char *)a2 + 136);
      v11 = *(_OWORD *)((char *)a2 + 152);
      v12 = *(_OWORD *)((char *)a2 + 168);
      *((_QWORD *)this + 175) = *((_QWORD *)a2 + 23);
      *(_OWORD *)((char *)this + 1368) = v11;
      *(_OWORD *)((char *)this + 1384) = v12;
      *(__n128 *)((char *)this + 1352) = result;
    }
    else
    {
      *((_QWORD *)this + 152) = &unk_1E25C2AB0;
      v25 = *(_OWORD *)((char *)a2 + 8);
      v26 = *(_OWORD *)((char *)a2 + 24);
      v27 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1256) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 1272) = v27;
      *(_OWORD *)((char *)this + 1224) = v25;
      *(_OWORD *)((char *)this + 1240) = v26;
      v28 = *(_OWORD *)((char *)a2 + 72);
      v29 = *(_OWORD *)((char *)a2 + 88);
      v30 = *(_OWORD *)((char *)a2 + 120);
      *(_OWORD *)((char *)this + 1320) = *(_OWORD *)((char *)a2 + 104);
      *(_OWORD *)((char *)this + 1336) = v30;
      *(_OWORD *)((char *)this + 1288) = v28;
      *(_OWORD *)((char *)this + 1304) = v29;
      result = *(__n128 *)((char *)a2 + 136);
      v31 = *(_OWORD *)((char *)a2 + 152);
      v32 = *(_OWORD *)((char *)a2 + 168);
      *((_QWORD *)this + 175) = *((_QWORD *)a2 + 23);
      *(_OWORD *)((char *)this + 1368) = v31;
      *(_OWORD *)((char *)this + 1384) = v32;
      *(__n128 *)((char *)this + 1352) = result;
      *((_BYTE *)this + 1208) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v36 = 12;
    v35 = 1;
    v34[0] = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v34[1] = v13;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v34, "Estimator not configured, failed to handle ActivityStateEvent.", v14, v15, v16, v17, v18, v33);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v24) = (_BYTE)this - 72;
    else
      v24 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v19, v20, v21, v22, v23, v24);
  }
  return result;
}

double sub_18D06620C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v8 = *a2;
  sub_18D06632C((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 688))
  {
    *(_QWORD *)(v8 + 680) = v22;
    *(_OWORD *)(v8 + 632) = v19;
    *(_OWORD *)(v8 + 648) = v20;
    *(_OWORD *)(v8 + 664) = v21;
    *(_OWORD *)(v8 + 568) = v15;
    *(_OWORD *)(v8 + 584) = v16;
    *(_OWORD *)(v8 + 600) = v17;
    *(_OWORD *)(v8 + 616) = v18;
    *(_OWORD *)(v8 + 504) = v11;
    *(_OWORD *)(v8 + 520) = v12;
    *(_OWORD *)(v8 + 536) = v13;
    result = *(double *)&v14;
    *(_OWORD *)(v8 + 552) = v14;
  }
  else
  {
    *(_QWORD *)(v8 + 496) = &unk_1E25C2AB0;
    *(_QWORD *)(v8 + 680) = v22;
    *(_OWORD *)(v8 + 632) = v19;
    *(_OWORD *)(v8 + 648) = v20;
    *(_OWORD *)(v8 + 664) = v21;
    *(_OWORD *)(v8 + 568) = v15;
    *(_OWORD *)(v8 + 584) = v16;
    *(_OWORD *)(v8 + 600) = v17;
    *(_OWORD *)(v8 + 616) = v18;
    *(_OWORD *)(v8 + 504) = v11;
    *(_OWORD *)(v8 + 520) = v12;
    *(_OWORD *)(v8 + 536) = v13;
    result = *(double *)&v14;
    *(_OWORD *)(v8 + 552) = v14;
    *(_BYTE *)(v8 + 688) = 1;
  }
  return result;
}

__n128 sub_18D06632C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned __int8 v34;
  __int16 v35;
  std::bad_cast v36;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven18ActivityStateEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven18ActivityStateEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v36.__vftable = 0;
        std::bad_cast::bad_cast(&v36);
        v36.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 160);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v28 + 144);
    *(_OWORD *)(a1 + 152) = v29;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v28 + 176);
    v30 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v30;
    v31 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v31;
    v32 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v32;
    result = *(__n128 *)(v28 + 48);
    v33 = *(_OWORD *)(v28 + 64);
    *(__n128 *)(a1 + 40) = result;
    *(_QWORD *)a1 = &unk_1E25C2AB0;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(v28 + 192);
    *(_OWORD *)(a1 + 56) = v33;
  }
  else
  {
    v35 = 3;
    v34 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2AB0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
  }
  return result;
}

void sub_18D0664E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void *sub_18D0664FC()
{
}

double raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::ActivityStateEvent *a2)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  double result;
  char v8;

  v4 = *((unsigned __int8 *)this + 2536);
  if (v4 == 1)
  {
    v5 = *((unsigned __int8 *)a2 + 104);
    if ((((_BYTE)v5 - 4) & 0xFA) != 0 || (v5 <= 7 ? (v6 = v5 == 5) : (v6 = 1), !v6))
    {
      v8 = 0;
      raven::RavenPNTEstimator::SetStateParameterization((uint64_t)this, (uint64_t)&v8);
    }
  }
  else if (v4 == 2)
  {
    __assert_rtn("HandleEvent", "ravenpntestimator.cpp", 1885, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
  }
  *(_QWORD *)&result = raven::RavenEstimator::HandleActivityStateEvent(this, a2).n128_u64[0];
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::LogEntry::Clear(CoreNavigation::CLP::LogEntry::LogEntry *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;

  result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::Clear((CoreNavigation::CLP::LogEntry::LogEntry *)((char *)this + 8));
  LOBYTE(v3) = *((_BYTE *)this + 52);
  if ((_BYTE)v3)
  {
    if ((*((_BYTE *)this + 52) & 1) != 0)
    {
      v4 = *((_QWORD *)this + 4);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 44))
        {
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
        }
        *(_DWORD *)(v4 + 44) = 0;
        v3 = *((_DWORD *)this + 13);
      }
    }
    if ((v3 & 2) != 0)
    {
      result = *((_QWORD *)this + 5);
      if (result)
        result = CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::Clear(result);
    }
  }
  *((_DWORD *)this + 13) = 0;
  return result;
}

uint64_t raven::RavenIntegrityEstimator::Reset(uint64_t this)
{
  uint64_t v1;
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[16];
  _QWORD v23[4];
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[15];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[3];
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)this)
  {
    v1 = this;
    v2 = *(unsigned __int8 *)(this + 288);
    if (*(_BYTE *)(this + 288))
    {
      v3 = *(_OWORD *)(this + 384);
      v52 = *(_OWORD *)(this + 368);
      v53 = v3;
      v54 = *(_BYTE *)(this + 400);
      v4 = *(_OWORD *)(this + 320);
      v48 = *(_OWORD *)(this + 304);
      v49 = v4;
      v5 = *(_OWORD *)(this + 352);
      v50 = *(_OWORD *)(this + 336);
      v51 = v5;
    }
    bzero(v22, 0x608uLL);
    v24 = 1065353216;
    *((_QWORD *)&v25 + 1) = 0x3FF0000000000000;
    LOBYTE(v30) = 0;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    memset(v29, 0, 25);
    *((_QWORD *)&v30 + 1) = 0x3FF0000000000000;
    v31 = 0uLL;
    v32 = 0;
    v34 = 0uLL;
    v33 = &unk_1E25C38D8;
    LOBYTE(v35) = 0;
    *((_QWORD *)&v35 + 1) = 0;
    *(_QWORD *)&v36 = 0;
    BYTE8(v36) = 0;
    v37 = 0uLL;
    LOBYTE(v38) = 0;
    *((_QWORD *)&v38 + 1) = 0;
    *(_QWORD *)&v39 = 0;
    *((_QWORD *)&v39 + 1) = 0x7FF8000000000000;
    v40 = 0uLL;
    LOBYTE(v41) = 0;
    *((_QWORD *)&v41 + 1) = 0;
    *(_QWORD *)&v42 = 0;
    BYTE8(v42) = 0;
    v43 = 0uLL;
    LOBYTE(v44) = 0;
    *((_QWORD *)&v44 + 1) = 0;
    *(_QWORD *)&v45[0] = 0;
    *(int64x2_t *)((char *)v45 + 8) = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)((char *)&v45[1] + 8) = *(_OWORD *)((char *)v45 + 8);
    v46 = 0;
    v47 = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    sub_18D066AC0((_QWORD *)(v1 + 32));
    v23[0] = 0;
    v6 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (v6)
      operator delete(v6);
    v7 = v28;
    *(_OWORD *)(v1 + 104) = v27;
    *(_OWORD *)(v1 + 120) = v7;
    *(_OWORD *)(v1 + 136) = v29[0];
    v8 = v26;
    *(_OWORD *)(v1 + 72) = v25;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
    v23[1] = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 64) = 1065353216;
    *(_QWORD *)(v1 + 152) = *(_QWORD *)&v29[1];
    *(_OWORD *)(v1 + 88) = v8;
    if (*(_BYTE *)(v1 + 160))
      *(_BYTE *)(v1 + 160) = 0;
    if (*(_BYTE *)(v1 + 288))
      *(_BYTE *)(v1 + 288) = 0;
    v9 = v31;
    *(_OWORD *)(v1 + 408) = v30;
    *(_OWORD *)(v1 + 424) = v9;
    v10 = v45[0];
    *(_OWORD *)(v1 + 616) = v44;
    *(_OWORD *)(v1 + 632) = v10;
    *(_OWORD *)(v1 + 648) = v45[1];
    *(_OWORD *)(v1 + 660) = *(_OWORD *)((char *)&v45[1] + 12);
    v11 = v41;
    *(_OWORD *)(v1 + 552) = v40;
    *(_OWORD *)(v1 + 568) = v11;
    v12 = v43;
    *(_OWORD *)(v1 + 584) = v42;
    *(_OWORD *)(v1 + 600) = v12;
    v13 = v37;
    *(_OWORD *)(v1 + 488) = v36;
    *(_OWORD *)(v1 + 504) = v13;
    v14 = v39;
    *(_OWORD *)(v1 + 520) = v38;
    *(_OWORD *)(v1 + 536) = v14;
    v15 = v35;
    *(_OWORD *)(v1 + 456) = v34;
    *(_QWORD *)(v1 + 440) = v32;
    *(_OWORD *)(v1 + 472) = v15;
    if (*(_BYTE *)(v1 + 680))
      *(_BYTE *)(v1 + 680) = 0;
    if (*(_BYTE *)(v1 + 800))
      *(_BYTE *)(v1 + 800) = 0;
    if (*(_BYTE *)(v1 + 1168))
      *(_BYTE *)(v1 + 1168) = 0;
    if (*(_BYTE *)(v1 + 1536))
      *(_BYTE *)(v1 + 1536) = 0;
    sub_18D04344C((uint64_t)v23);
    if (*(_BYTE *)(v1 + 288))
    {
      if (v2)
      {
        v16 = v53;
        *(_OWORD *)(v1 + 368) = v52;
        *(_OWORD *)(v1 + 384) = v16;
        *(_BYTE *)(v1 + 400) = v54;
        v17 = v49;
        *(_OWORD *)(v1 + 304) = v48;
        *(_OWORD *)(v1 + 320) = v17;
        v18 = v51;
        *(_OWORD *)(v1 + 336) = v50;
        *(_OWORD *)(v1 + 352) = v18;
      }
      else
      {
        *(_BYTE *)(v1 + 288) = 0;
      }
    }
    else if (v2)
    {
      *(_QWORD *)(v1 + 296) = &unk_1E25C2CC8;
      v19 = v53;
      *(_OWORD *)(v1 + 368) = v52;
      *(_OWORD *)(v1 + 384) = v19;
      *(_BYTE *)(v1 + 400) = v54;
      v20 = v49;
      *(_OWORD *)(v1 + 304) = v48;
      *(_OWORD *)(v1 + 320) = v20;
      v21 = v51;
      *(_OWORD *)(v1 + 336) = v50;
      *(_OWORD *)(v1 + 352) = v21;
      *(_BYTE *)(v1 + 288) = 1;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1560) + 32))(*(_QWORD *)(v1 + 1560));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1576) + 32))(*(_QWORD *)(v1 + 1576));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1584) + 32))(*(_QWORD *)(v1 + 1584));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1592) + 32))(*(_QWORD *)(v1 + 1592));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1600) + 32))(*(_QWORD *)(v1 + 1600));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1608) + 32))(*(_QWORD *)(v1 + 1608));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1616) + 32))(*(_QWORD *)(v1 + 1616));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1624) + 32))(*(_QWORD *)(v1 + 1624));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1632) + 32))(*(_QWORD *)(v1 + 1632));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1640) + 32))(*(_QWORD *)(v1 + 1640));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1648) + 32))(*(_QWORD *)(v1 + 1648));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1656) + 32))(*(_QWORD *)(v1 + 1656));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1688) + 32))(*(_QWORD *)(v1 + 1688));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 1696) + 32))(*(_QWORD *)(v1 + 1696));
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 1680) + 32))(*(_QWORD *)(v1 + 1680));
  }
  return this;
}

void raven::GNSSPreprocessedMeasurementsChecker::Reset(void ***this)
{
  void **v2;
  void **i;

  if (this[7])
  {
    sub_18D03C8FC(this[6]);
    this[6] = 0;
    v2 = this[5];
    if (v2)
    {
      for (i = 0; i != v2; i = (void **)((char *)i + 1))
        this[4][(_QWORD)i] = 0;
    }
    this[7] = 0;
  }
  if (*((_BYTE *)this + 192))
    *((_BYTE *)this + 192) = 0;
}

_QWORD *raven::RavenSolutionSelector::Reset(raven::RavenSolutionSelector *this)
{
  _QWORD *result;

  sub_18D066AC0((_QWORD *)this + 51);
  sub_18D066AC0((_QWORD *)this + 2);
  sub_18D066AC0((_QWORD *)this + 7);
  result = sub_18D066AC0((_QWORD *)this + 12);
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0xFFF0000000000000;
  if (*((_BYTE *)this + 464))
    *((_BYTE *)this + 464) = 0;
  if (*((_BYTE *)this + 472))
    *((_BYTE *)this + 472) = 0;
  if (*((_BYTE *)this + 168))
    *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 160) = 0;
  return result;
}

_QWORD *sub_18D066AC0(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t raven::PositionChecker::Reset(uint64_t this)
{
  if (*(_BYTE *)(this + 120))
    *(_BYTE *)(this + 120) = 0;
  return this;
}

void raven::RavenSolutionSelectorActiveObject::~RavenSolutionSelectorActiveObject(raven::RavenSolutionSelectorActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C3FD8;
  if (*((_BYTE *)this + 952))
    *((_BYTE *)this + 952) = 0;
  sub_18D04344C((uint64_t)this + 888);
  if (*((_BYTE *)this + 648))
    *((_BYTE *)this + 648) = 0;
  sub_18D04344C((uint64_t)this + 576);
  sub_18D04344C((uint64_t)this + 536);
  sub_18D04344C((uint64_t)this + 496);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  raven::RavenSolutionSelectorActiveObject::~RavenSolutionSelectorActiveObject(this);
  JUMPOUT(0x18D78B5D4);
}

__n128 raven::RavenMovingStateEstimator::HandleEvent(__n128 *this, const raven::ActivityStateEvent *a2)
{
  _BYTE *v4;
  unsigned __int8 v5;
  unsigned int v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 result;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;

  v4 = (char *)a2 + 104;
  if (*((_BYTE *)a2 + 104) == 5)
  {
    v5 = this[87].n128_u8[0];
    if (v5)
    {
      v6 = this[84].n128_u8[8];
      v5 = v6 > 3 || (v6 & 0xF) == 1;
    }
  }
  else
  {
    v5 = 0;
  }
  this[65].n128_u8[0] = v5;
  if (sub_18D066D48((double *)a2 + 13) > 0.95)
    this[65].n128_u8[1] = (*v4 < 0xAuLL) & (0xCu >> *v4);
  if (this[77].n128_u8[8])
  {
    v7 = *(__n128 *)((char *)a2 + 8);
    v8 = *(__n128 *)((char *)a2 + 24);
    v9 = *(__n128 *)((char *)a2 + 40);
    this[69] = *(__n128 *)((char *)a2 + 56);
    this[68] = v9;
    this[67] = v8;
    this[66] = v7;
    v10 = *(__n128 *)((char *)a2 + 72);
    v11 = *(__n128 *)((char *)a2 + 88);
    v12 = *(__n128 *)((char *)a2 + 104);
    this[73] = *(__n128 *)((char *)a2 + 120);
    this[72] = v12;
    this[71] = v11;
    this[70] = v10;
    result = *(__n128 *)((char *)a2 + 136);
    v14 = *(__n128 *)((char *)a2 + 152);
    v15 = *(__n128 *)((char *)a2 + 168);
    this[77].n128_u64[0] = *((_QWORD *)a2 + 23);
    this[76] = v15;
    this[75] = v14;
    this[74] = result;
  }
  else
  {
    this[65].n128_u64[1] = (unint64_t)&unk_1E25C2AB0;
    v16 = *(__n128 *)((char *)a2 + 8);
    v17 = *(__n128 *)((char *)a2 + 24);
    v18 = *(__n128 *)((char *)a2 + 40);
    this[69] = *(__n128 *)((char *)a2 + 56);
    this[68] = v18;
    this[67] = v17;
    this[66] = v16;
    v19 = *(__n128 *)((char *)a2 + 72);
    v20 = *(__n128 *)((char *)a2 + 88);
    v21 = *(__n128 *)((char *)a2 + 104);
    this[73] = *(__n128 *)((char *)a2 + 120);
    this[72] = v21;
    this[71] = v20;
    this[70] = v19;
    result = *(__n128 *)((char *)a2 + 136);
    v22 = *(__n128 *)((char *)a2 + 152);
    v23 = *(__n128 *)((char *)a2 + 168);
    this[77].n128_u64[0] = *((_QWORD *)a2 + 23);
    this[76] = v23;
    this[75] = v22;
    this[74] = result;
    this[77].n128_u8[8] = 1;
  }
  return result;
}

double sub_18D066D48(double *a1)
{
  double *v1;
  double result;

  switch(*(_BYTE *)a1)
  {
    case 0:
      v1 = a1 + 1;
      goto LABEL_12;
    case 1:
      v1 = a1 + 2;
      goto LABEL_12;
    case 2:
      v1 = a1 + 3;
      goto LABEL_12;
    case 3:
      v1 = a1 + 4;
      goto LABEL_12;
    case 4:
      v1 = a1 + 5;
      goto LABEL_12;
    case 5:
      v1 = a1 + 6;
      goto LABEL_12;
    case 6:
      v1 = a1 + 7;
      goto LABEL_12;
    case 7:
      v1 = a1 + 8;
      goto LABEL_12;
    case 8:
      v1 = a1 + 9;
      goto LABEL_12;
    case 9:
      v1 = a1 + 10;
LABEL_12:
      result = *v1;
      break;
    default:
      return result;
  }
  return result;
}

void cnframework::Supervisor::Pause(cnframework::Supervisor *this)
{
  std::mutex *v2;
  cnprint::CNPrinter *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *__p[2];
  char v11;
  unsigned __int8 v12;
  __int16 v13;

  v2 = (std::mutex *)((char *)this + 680);
  std::mutex::lock((std::mutex *)((char *)this + 680));
  *((_BYTE *)this + 672) = 0;
  std::mutex::unlock(v2);
  if (cnprint::CNPrinter::GetLogLevel(v3) <= 1)
  {
    v13 = 3;
    v12 = 1;
    (*(void (**)(void **__return_ptr, cnframework::Supervisor *))(*(_QWORD *)this + 40))(__p, this);
    if (v11 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "%s calling Supervisor::Pause", v4, v5, v6, v7, v8, (char)v9);
    if (v11 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D066E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D066E88(cnframework::ActiveObjectBase *this)
{
  if (*((_BYTE *)this + 480))
    *((_BYTE *)this + 480) = 0;
  *((_DWORD *)this + 162) = 0;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  if (*((_BYTE *)this + 656))
    *((_BYTE *)this + 656) = 0;
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void raven::RavenMapVectorActiveObject::Reset(raven::RavenMapVectorActiveObject *this)
{
  _BYTE *v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (char *)this + 4112;
  if (*((_BYTE *)this + 1064))
    *((_BYTE *)this + 1064) = 0;
  *((_QWORD *)this + 517) = 0x7FF0000000000000;
  *((_QWORD *)this + 518) = 0;
  *((_QWORD *)this + 519) = 0x7FF8000000000000;
  *((_BYTE *)this + 4160) = 0;
  if (*((_BYTE *)this + 688))
    *((_BYTE *)this + 688) = 0;
  if (*((_BYTE *)this + 696))
    *((_BYTE *)this + 696) = 0;
  if (*((_BYTE *)this + 1352))
    *((_BYTE *)this + 1352) = 0;
  if (*((_BYTE *)this + 1376))
    *((_BYTE *)this + 1376) = 0;
  if (*((_BYTE *)this + 1528))
    *((_BYTE *)this + 1528) = 0;
  if (*((_BYTE *)this + 904))
    *((_BYTE *)this + 904) = 0;
  if (*v2)
    *v2 = 0;
  *((_BYTE *)this + 4120) = 0;
  v3 = (void **)*((_QWORD *)this + 522);
  v4 = *((_QWORD *)this + 523);
  *((_QWORD *)this + 526) = 0;
  v5 = v4 - (_QWORD)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v3 = (void **)(*((_QWORD *)this + 522) + 8);
      *((_QWORD *)this + 522) = v3;
      v5 = *((_QWORD *)this + 523) - (_QWORD)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_23;
  }
  if (v5 >> 3 == 2)
  {
    v6 = 512;
LABEL_23:
    *((_QWORD *)this + 525) = v6;
  }
  *(_OWORD *)((char *)this + 4216) = 0u;
  *((_QWORD *)this + 529) = 0x7FF8000000000000;
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void raven::RavenUserSpeedActiveObject::Reset(raven::RavenUserSpeedActiveObject *this)
{
  if (*((_BYTE *)this + 688))
    *((_BYTE *)this + 688) = 0;
  if (*((_BYTE *)this + 1224))
    *((_BYTE *)this + 1224) = 0;
  if (*((_BYTE *)this + 1056))
    *((_BYTE *)this + 1056) = 0;
  if (*((_BYTE *)this + 1352))
    *((_BYTE *)this + 1352) = 0;
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void raven::RavenDeviceAttitudeActiveObject::Reset(raven::RavenDeviceAttitudeActiveObject *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  unint64_t v16;
  void **v17;
  _QWORD *v18;
  unint64_t v19;
  void (***v20)(void);
  void (**v21)(void);
  void (***v22)(void);
  unint64_t v23;
  uint64_t v24;
  void **v30;
  void **v31;
  unint64_t v32;
  void **v33;
  _QWORD *v34;
  unint64_t v35;
  void (***v36)(void);
  void (**v37)(void);
  void (***v38)(void);
  unint64_t v39;
  uint64_t v40;
  void **v41;
  void **v42;
  unint64_t v43;
  void **v44;
  _QWORD *v45;
  unint64_t v46;
  void (***v47)(void);
  void (**v48)(void);
  void (***v49)(void);
  unint64_t v50;
  uint64_t v51;
  void **v52;
  void **v53;
  unint64_t v54;
  void **v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  void **v62;
  void **v63;
  unint64_t v64;
  void **v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  void **v72;
  void **v73;
  unint64_t v74;
  void **v75;
  _QWORD *v76;
  unint64_t v77;
  void (***v78)(void);
  void (**v79)(void);
  void (***v80)(void);
  unint64_t v81;
  uint64_t v82;
  void **v83;
  void **v84;
  unint64_t v85;
  void **v86;
  _QWORD *v87;
  unint64_t v88;
  void (***v89)(void);
  void (**v90)(void);
  void (***v91)(void);
  unint64_t v92;
  uint64_t v93;

  v2 = (void **)*((_QWORD *)this + 63);
  v3 = (void **)*((_QWORD *)this + 64);
  if (v3 == v2)
  {
    v6 = (_QWORD *)((char *)this + 536);
    v3 = (void **)*((_QWORD *)this + 63);
  }
  else
  {
    v4 = *((_QWORD *)this + 66);
    v5 = &v2[v4 / 0x1A];
    v6 = (_QWORD *)((char *)this + 536);
    v7 = (unint64_t)v2[(*((_QWORD *)this + 67) + v4) / 0x1A] + 152 * ((*((_QWORD *)this + 67) + v4) % 0x1A);
    if ((char *)*v5 + 152 * (v4 % 0x1A) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v5 + 152 * (v4 % 0x1A));
      do
      {
        v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v5 == 3952)
        {
          v10 = (void (***)(void))v5[1];
          ++v5;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)*((_QWORD *)this + 63);
      v3 = (void **)*((_QWORD *)this + 64);
    }
  }
  *v6 = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v12 = *((_QWORD *)this + 64);
      v2 = (void **)(*((_QWORD *)this + 63) + 8);
      *((_QWORD *)this + 63) = v2;
      v11 = v12 - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 13;
  }
  else
  {
    if (v11 >> 3 != 2)
      goto LABEL_16;
    v13 = 26;
  }
  *((_QWORD *)this + 66) = v13;
LABEL_16:
  *((int64x2_t *)this + 34) = vdupq_n_s64(0x3FB999999999999AuLL);
  *((_QWORD *)this + 70) = 0x3FB999999999999ALL;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  v14 = (void **)*((_QWORD *)this + 864);
  v15 = (void **)*((_QWORD *)this + 865);
  if (v15 == v14)
  {
    v18 = (_QWORD *)((char *)this + 6944);
    v15 = (void **)*((_QWORD *)this + 864);
  }
  else
  {
    v16 = *((_QWORD *)this + 867);
    v17 = &v14[v16 / 0x1A];
    v18 = (_QWORD *)((char *)this + 6944);
    v19 = (unint64_t)v14[(*((_QWORD *)this + 868) + v16) / 0x1A] + 152 * ((*((_QWORD *)this + 868) + v16) % 0x1A);
    if ((char *)*v17 + 152 * (v16 % 0x1A) != (void *)v19)
    {
      v20 = (void (***)(void))((char *)*v17 + 152 * (v16 % 0x1A));
      do
      {
        v21 = *v20;
        v20 += 19;
        (*v21)();
        if ((char *)v20 - (_BYTE *)*v17 == 3952)
        {
          v22 = (void (***)(void))v17[1];
          ++v17;
          v20 = v22;
        }
      }
      while (v20 != (void (***)(void))v19);
      v15 = (void **)*((_QWORD *)this + 865);
      v14 = (void **)*((_QWORD *)this + 864);
    }
  }
  *v18 = 0;
  v23 = (char *)v15 - (char *)v14;
  if (v23 >= 0x11)
  {
    do
    {
      operator delete(*v14);
      v14 = (void **)(*((_QWORD *)this + 864) + 8);
      *((_QWORD *)this + 864) = v14;
      v23 = *((_QWORD *)this + 865) - (_QWORD)v14;
    }
    while (v23 > 0x10);
  }
  if (v23 >> 3 == 1)
  {
    v24 = 13;
  }
  else
  {
    if (v23 >> 3 != 2)
      goto LABEL_31;
    v24 = 26;
  }
  *((_QWORD *)this + 867) = v24;
LABEL_31:
  *((_QWORD *)this + 869) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 435) = _Q0;
  if (*((_BYTE *)this + 1432))
    *((_BYTE *)this + 1432) = 0;
  *((_WORD *)this + 3488) = 0;
  *((_BYTE *)this + 6979) = 0;
  *(_OWORD *)((char *)this + 7336) = 0u;
  if (*((_BYTE *)this + 7496))
    *((_BYTE *)this + 7496) = 0;
  *((_DWORD *)this + 1894) = 0;
  *((_OWORD *)this + 474) = xmmword_18D31CEA0;
  *((_OWORD *)this + 475) = 0uLL;
  *((_OWORD *)this + 476) = 0uLL;
  *((_OWORD *)this + 477) = 0uLL;
  *((_OWORD *)this + 478) = 0uLL;
  *((_OWORD *)this + 479) = 0uLL;
  *((_OWORD *)this + 480) = 0uLL;
  *((_OWORD *)this + 481) = 0uLL;
  *((_OWORD *)this + 482) = 0uLL;
  v30 = (void **)*((_QWORD *)this + 967);
  v31 = (void **)*((_QWORD *)this + 968);
  if (v31 == v30)
  {
    v34 = (_QWORD *)((char *)this + 7768);
    v31 = (void **)*((_QWORD *)this + 967);
  }
  else
  {
    v32 = *((_QWORD *)this + 970);
    v33 = &v30[v32 / 0x1A];
    v34 = (_QWORD *)((char *)this + 7768);
    v35 = (unint64_t)v30[(*((_QWORD *)this + 971) + v32) / 0x1A] + 152 * ((*((_QWORD *)this + 971) + v32) % 0x1A);
    if ((char *)*v33 + 152 * (v32 % 0x1A) != (void *)v35)
    {
      v36 = (void (***)(void))((char *)*v33 + 152 * (v32 % 0x1A));
      do
      {
        v37 = *v36;
        v36 += 19;
        (*v37)();
        if ((char *)v36 - (_BYTE *)*v33 == 3952)
        {
          v38 = (void (***)(void))v33[1];
          ++v33;
          v36 = v38;
        }
      }
      while (v36 != (void (***)(void))v35);
      v31 = (void **)*((_QWORD *)this + 968);
      v30 = (void **)*((_QWORD *)this + 967);
    }
  }
  *v34 = 0;
  v39 = (char *)v31 - (char *)v30;
  if (v39 >= 0x11)
  {
    do
    {
      operator delete(*v30);
      v30 = (void **)(*((_QWORD *)this + 967) + 8);
      *((_QWORD *)this + 967) = v30;
      v39 = *((_QWORD *)this + 968) - (_QWORD)v30;
    }
    while (v39 > 0x10);
  }
  if (v39 >> 3 == 1)
  {
    v40 = 13;
  }
  else
  {
    if (v39 >> 3 != 2)
      goto LABEL_50;
    v40 = 26;
  }
  *((_QWORD *)this + 970) = v40;
LABEL_50:
  v41 = (void **)*((_QWORD *)this + 973);
  v42 = (void **)*((_QWORD *)this + 974);
  if (v42 == v41)
  {
    v45 = (_QWORD *)((char *)this + 7816);
    v42 = (void **)*((_QWORD *)this + 973);
  }
  else
  {
    v43 = *((_QWORD *)this + 976);
    v44 = &v41[v43 / 0x1A];
    v45 = (_QWORD *)((char *)this + 7816);
    v46 = (unint64_t)v41[(*((_QWORD *)this + 977) + v43) / 0x1A] + 152 * ((*((_QWORD *)this + 977) + v43) % 0x1A);
    if ((char *)*v44 + 152 * (v43 % 0x1A) != (void *)v46)
    {
      v47 = (void (***)(void))((char *)*v44 + 152 * (v43 % 0x1A));
      do
      {
        v48 = *v47;
        v47 += 19;
        (*v48)();
        if ((char *)v47 - (_BYTE *)*v44 == 3952)
        {
          v49 = (void (***)(void))v44[1];
          ++v44;
          v47 = v49;
        }
      }
      while (v47 != (void (***)(void))v46);
      v42 = (void **)*((_QWORD *)this + 974);
      v41 = (void **)*((_QWORD *)this + 973);
    }
  }
  *v45 = 0;
  v50 = (char *)v42 - (char *)v41;
  if (v50 >= 0x11)
  {
    do
    {
      operator delete(*v41);
      v41 = (void **)(*((_QWORD *)this + 973) + 8);
      *((_QWORD *)this + 973) = v41;
      v50 = *((_QWORD *)this + 974) - (_QWORD)v41;
    }
    while (v50 > 0x10);
  }
  if (v50 >> 3 == 1)
  {
    v51 = 13;
  }
  else
  {
    if (v50 >> 3 != 2)
      goto LABEL_65;
    v51 = 26;
  }
  *((_QWORD *)this + 976) = v51;
LABEL_65:
  v52 = (void **)*((_QWORD *)this + 979);
  v53 = (void **)*((_QWORD *)this + 980);
  if (v53 == v52)
  {
    v57 = (_QWORD *)((char *)this + 7864);
    v53 = (void **)*((_QWORD *)this + 979);
  }
  else
  {
    v54 = *((_QWORD *)this + 982);
    v55 = &v52[v54 >> 4];
    v56 = (char *)*v55 + 2432 * (v54 & 0xF);
    v57 = (_QWORD *)((char *)this + 7864);
    v58 = *(uint64_t *)((char *)v52 + (((*((_QWORD *)this + 983) + v54) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 2432 * ((*((_DWORD *)this + 1966) + (int)v54) & 0xF);
    if (v56 != (char *)v58)
    {
      do
      {
        (**(void (***)(char *))v56)(v56);
        v56 += 2432;
        if (v56 - (_BYTE *)*v55 == 38912)
        {
          v59 = (char *)v55[1];
          ++v55;
          v56 = v59;
        }
      }
      while (v56 != (char *)v58);
      v53 = (void **)*((_QWORD *)this + 980);
      v52 = (void **)*((_QWORD *)this + 979);
    }
  }
  *v57 = 0;
  v60 = (char *)v53 - (char *)v52;
  if (v60 >= 0x11)
  {
    do
    {
      operator delete(*v52);
      v52 = (void **)(*((_QWORD *)this + 979) + 8);
      *((_QWORD *)this + 979) = v52;
      v60 = *((_QWORD *)this + 980) - (_QWORD)v52;
    }
    while (v60 > 0x10);
  }
  if (v60 >> 3 == 1)
  {
    v61 = 8;
  }
  else
  {
    if (v60 >> 3 != 2)
      goto LABEL_79;
    v61 = 16;
  }
  *((_QWORD *)this + 982) = v61;
LABEL_79:
  v62 = (void **)*((_QWORD *)this + 985);
  v63 = (void **)*((_QWORD *)this + 986);
  if (v63 == v62)
  {
    v67 = (_QWORD *)((char *)this + 7912);
    v63 = (void **)*((_QWORD *)this + 985);
  }
  else
  {
    v64 = *((_QWORD *)this + 988);
    v65 = &v62[v64 >> 4];
    v66 = (char *)*v65 + 2432 * (v64 & 0xF);
    v67 = (_QWORD *)((char *)this + 7912);
    v68 = *(uint64_t *)((char *)v62 + (((*((_QWORD *)this + 989) + v64) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 2432 * ((*((_DWORD *)this + 1978) + (int)v64) & 0xF);
    if (v66 != (char *)v68)
    {
      do
      {
        (**(void (***)(char *))v66)(v66);
        v66 += 2432;
        if (v66 - (_BYTE *)*v65 == 38912)
        {
          v69 = (char *)v65[1];
          ++v65;
          v66 = v69;
        }
      }
      while (v66 != (char *)v68);
      v63 = (void **)*((_QWORD *)this + 986);
      v62 = (void **)*((_QWORD *)this + 985);
    }
  }
  *v67 = 0;
  v70 = (char *)v63 - (char *)v62;
  if (v70 >= 0x11)
  {
    do
    {
      operator delete(*v62);
      v62 = (void **)(*((_QWORD *)this + 985) + 8);
      *((_QWORD *)this + 985) = v62;
      v70 = *((_QWORD *)this + 986) - (_QWORD)v62;
    }
    while (v70 > 0x10);
  }
  if (v70 >> 3 == 1)
  {
    v71 = 8;
  }
  else
  {
    if (v70 >> 3 != 2)
      goto LABEL_93;
    v71 = 16;
  }
  *((_QWORD *)this + 988) = v71;
LABEL_93:
  raven::RavenDeviceAttitudeActiveObject::ResetWahbaSolver(this);
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
  v72 = (void **)*((_QWORD *)this + 997);
  v73 = (void **)*((_QWORD *)this + 998);
  if (v73 == v72)
  {
    v76 = (_QWORD *)((char *)this + 8008);
    v73 = (void **)*((_QWORD *)this + 997);
  }
  else
  {
    v74 = *((_QWORD *)this + 1000);
    v75 = &v72[v74 / 0x1A];
    v76 = (_QWORD *)((char *)this + 8008);
    v77 = (unint64_t)v72[(*((_QWORD *)this + 1001) + v74) / 0x1A]
        + 152 * ((*((_QWORD *)this + 1001) + v74) % 0x1A);
    if ((char *)*v75 + 152 * (v74 % 0x1A) != (void *)v77)
    {
      v78 = (void (***)(void))((char *)*v75 + 152 * (v74 % 0x1A));
      do
      {
        v79 = *v78;
        v78 += 19;
        (*v79)();
        if ((char *)v78 - (_BYTE *)*v75 == 3952)
        {
          v80 = (void (***)(void))v75[1];
          ++v75;
          v78 = v80;
        }
      }
      while (v78 != (void (***)(void))v77);
      v73 = (void **)*((_QWORD *)this + 998);
      v72 = (void **)*((_QWORD *)this + 997);
    }
  }
  *v76 = 0;
  v81 = (char *)v73 - (char *)v72;
  if (v81 >= 0x11)
  {
    do
    {
      operator delete(*v72);
      v72 = (void **)(*((_QWORD *)this + 997) + 8);
      *((_QWORD *)this + 997) = v72;
      v81 = *((_QWORD *)this + 998) - (_QWORD)v72;
    }
    while (v81 > 0x10);
  }
  if (v81 >> 3 == 1)
  {
    v82 = 13;
  }
  else
  {
    if (v81 >> 3 != 2)
      goto LABEL_108;
    v82 = 26;
  }
  *((_QWORD *)this + 1000) = v82;
LABEL_108:
  v83 = (void **)*((_QWORD *)this + 991);
  v84 = (void **)*((_QWORD *)this + 992);
  if (v84 == v83)
  {
    v87 = (_QWORD *)((char *)this + 7960);
    v84 = (void **)*((_QWORD *)this + 991);
  }
  else
  {
    v85 = *((_QWORD *)this + 994);
    v86 = &v83[v85 / 0x1A];
    v87 = (_QWORD *)((char *)this + 7960);
    v88 = (unint64_t)v83[(*((_QWORD *)this + 995) + v85) / 0x1A] + 152 * ((*((_QWORD *)this + 995) + v85) % 0x1A);
    if ((char *)*v86 + 152 * (v85 % 0x1A) != (void *)v88)
    {
      v89 = (void (***)(void))((char *)*v86 + 152 * (v85 % 0x1A));
      do
      {
        v90 = *v89;
        v89 += 19;
        (*v90)();
        if ((char *)v89 - (_BYTE *)*v86 == 3952)
        {
          v91 = (void (***)(void))v86[1];
          ++v86;
          v89 = v91;
        }
      }
      while (v89 != (void (***)(void))v88);
      v84 = (void **)*((_QWORD *)this + 992);
      v83 = (void **)*((_QWORD *)this + 991);
    }
  }
  *v87 = 0;
  v92 = (char *)v84 - (char *)v83;
  if (v92 >= 0x11)
  {
    do
    {
      operator delete(*v83);
      v83 = (void **)(*((_QWORD *)this + 991) + 8);
      *((_QWORD *)this + 991) = v83;
      v92 = *((_QWORD *)this + 992) - (_QWORD)v83;
    }
    while (v92 > 0x10);
  }
  if (v92 >> 3 == 1)
  {
    v93 = 13;
    goto LABEL_122;
  }
  if (v92 >> 3 == 2)
  {
    v93 = 26;
LABEL_122:
    *((_QWORD *)this + 994) = v93;
  }
  *((_BYTE *)this + 8400) = 0;
}

void cnframework::ActiveObjectBase::ResetCurrentTime(cnframework::ActiveObjectBase *this)
{
  int v2;
  std::mutex *v3;

  v2 = *((unsigned __int8 *)this + 168);
  if (*((_BYTE *)this + 168))
  {
    v3 = 0;
  }
  else
  {
    v3 = (std::mutex *)((char *)this + 280);
    std::mutex::lock((std::mutex *)((char *)this + 280));
  }
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0x7FF8000000000000;
  *((_QWORD *)this + 27) = 0;
  *((_BYTE *)this + 169) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0x7FF8000000000000;
  if (!v2)
    std::mutex::unlock(v3);
}

void raven::RavenDeviceAttitudeActiveObject::ResetWahbaSolver(raven::RavenDeviceAttitudeActiveObject *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  *((_OWORD *)this + 469) = 0u;
  v2 = (void **)*((_QWORD *)this + 1038);
  v3 = (void **)*((_QWORD *)this + 1039);
  if (v3 == v2)
  {
    v6 = (_QWORD *)((char *)this + 8336);
    v3 = (void **)*((_QWORD *)this + 1038);
  }
  else
  {
    v4 = *((_QWORD *)this + 1041);
    v5 = &v2[v4 / 0x14];
    v6 = (_QWORD *)((char *)this + 8336);
    v7 = (unint64_t)v2[(*((_QWORD *)this + 1042) + v4) / 0x14] + 200 * ((*((_QWORD *)this + 1042) + v4) % 0x14);
    if ((char *)*v5 + 200 * (v4 % 0x14) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v5 + 200 * (v4 % 0x14));
      do
      {
        v9 = *v8;
        v8 += 25;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v5 == 4000)
        {
          v10 = (void (***)(void))v5[1];
          ++v5;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v3 = (void **)*((_QWORD *)this + 1039);
      v2 = (void **)*((_QWORD *)this + 1038);
    }
  }
  *v6 = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*((_QWORD *)this + 1038) + 8);
      *((_QWORD *)this + 1038) = v2;
      v11 = *((_QWORD *)this + 1039) - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v12 = 10;
  }
  else
  {
    if (v11 >> 3 != 2)
      goto LABEL_16;
    v12 = 20;
  }
  *((_QWORD *)this + 1041) = v12;
LABEL_16:
  *((_WORD *)this + 4172) = 1;
  v13 = (void **)*((_QWORD *)this + 1045);
  v14 = *((_QWORD *)this + 1046);
  *((_QWORD *)this + 1049) = 0;
  v15 = v14 - (_QWORD)v13;
  if (v15 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v13 = (void **)(*((_QWORD *)this + 1045) + 8);
      *((_QWORD *)this + 1045) = v13;
      v15 = *((_QWORD *)this + 1046) - (_QWORD)v13;
    }
    while (v15 > 0x10);
  }
  if (v15 >> 3 == 1)
  {
    v16 = 64;
  }
  else
  {
    if (v15 >> 3 != 2)
      return;
    v16 = 128;
  }
  *((_QWORD *)this + 1048) = v16;
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *a1)
{
  raven::AccelerometerEvent *v2;
  raven::RavenGnssAssistanceFileEvent *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  char v12;
  unsigned __int8 v13;
  __int16 v14;
  _BYTE v15[56];

  CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v15);
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString() & 1) != 0)
  {
    v10 = raven::RavenSupervisor::RaiseEventsFrom(a1, (const CoreNavigation::CLP::LogEntry::LogEntry *)v15, v2, v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "Failed to parse incoming LogEntry", (uint64_t)v3, v4, v5, v6, v7, v12);
    v10 = 0;
  }
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v15);
  return v10;
}

void sub_18D067C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::LogEntry *a2, raven::AccelerometerEvent *a3, raven::RavenGnssAssistanceFileEvent *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  raven::RavenSupervisor *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const CoreNavigation::CLP::LogEntry::PrivateData::Accel *v16;
  uint64_t v17;
  uint64_t v18;
  const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *v19;
  uint64_t v20;
  const CoreNavigation::CLP::LogEntry::PrivateData::Baro *v21;
  uint64_t v22;
  const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *v23;
  uint64_t v24;
  const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion *v25;
  uint64_t v26;
  const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *v27;
  uint64_t v28;
  const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *v29;
  uint64_t v30;
  const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *v31;
  uint64_t v32;
  const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *v33;
  uint64_t v34;
  const CoreNavigation::CLP::LogEntry::PrivateData::Gyro *v35;
  uint64_t v36;
  const CoreNavigation::CLP::LogEntry::PrivateData::Location *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *v41;
  uint64_t v42;
  const CoreNavigation::CLP::LogEntry::PrivateData::MapVector *v43;
  uint64_t v44;
  const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *v45;
  uint64_t v46;
  const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *v47;
  uint64_t v48;
  const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *v49;
  uint64_t v50;
  const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *v51;
  uint64_t v52;
  const CoreNavigation::CLP::LogEntry::PrivateData::StepCount *v53;
  uint64_t v54;
  const std::string **v55;
  uint64_t v56;
  const CoreNavigation::CLP::LogEntry::PrivateData::Timer *v57;
  uint64_t v58;
  const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *v59;
  uint64_t v60;
  const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *v61;
  uint64_t v62;
  uint64_t v63;
  const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *v64;
  int v65;
  const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *v66;
  const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult *v67;
  uint64_t v68;
  uint64_t v69;
  const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *v70;
  const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *v71;
  int v73;

  v11 = this;
  v12 = (char *)this + 8481;
  if (!*((_BYTE *)this + 8491))
    goto LABEL_5;
  v13 = *((_QWORD *)a2 + 5);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v13 + 316) & 1) != 0)
  {
    v15 = *((_QWORD *)a2 + 5);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v16 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Accel **)(v15 + 8);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v16 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Accel **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                        + 8);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v16, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v14 = 1;
  }
  else
  {
LABEL_5:
    v14 = 0;
  }
  v17 = *((_QWORD *)a2 + 5);
  v18 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v18 + 318) & 0x10) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v19 = *(const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification **)(v17 + 168);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v19 = *(const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 168);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v19, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 2;
  }
  v20 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v20 + 316) & 4) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v21 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Baro **)(v17 + 24);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v21 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Baro **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                       + 24);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v21, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 4;
  }
  v22 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v22 + 317) & 1) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel **)(v17 + 72);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                        + 72);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v23, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 5;
  }
  v24 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v24 + 318) & 0x80) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v25 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion **)(v17 + 192);
    if (!v25)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v25 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                               + 192);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v25, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 6;
  }
  v26 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v26 + 318) & 1) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v27 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample **)(v17 + 136);
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v27 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                     + 136);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v27, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 7;
  }
  v28 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v28 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v28 + 319) & 2) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v29 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData **)(v17 + 208);
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v29 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                     + 208);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v29, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 8;
  }
  v30 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v30 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v30 + 319) & 1) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v31 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction **)(v17 + 200);
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v31 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                             + 200);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v31, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 9;
  }
  v32 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v32 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v32 + 317) & 0x10) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v33 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents **)(v17 + 104);
    if (!v33)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v33 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 104);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v33, a3, (uint64_t)a4, a5, a6, a7, a8);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 10;
  }
  if (v12[10])
  {
    v34 = v17;
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v34 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
      v17 = *((_QWORD *)a2 + 5);
    }
    if ((*(_BYTE *)(v34 + 316) & 2) != 0)
    {
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
        v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
      }
      v35 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Gyro **)(v17 + 16);
      if (!v35)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
        v35 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Gyro **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                         + 16);
      }
      raven::RavenSupervisor::RaiseEventsFrom(v11, v35, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
      v17 = *((_QWORD *)a2 + 5);
      v14 = 11;
    }
  }
  v36 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v36 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v17 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v36 + 316) & 8) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v37 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Location **)(v17 + 32);
    if (!v37)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v37 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Location **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                           + 32);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v37, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v17 = *((_QWORD *)a2 + 5);
    v14 = 12;
  }
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v17 + 317) & 0x20) != 0)
  {
    v38 = *((_QWORD *)a2 + 5);
    if (!v38)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v38 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    if (!*(_QWORD *)(v38 + 112))
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
    v14 = 13;
  }
  v39 = *((_QWORD *)a2 + 5);
  v40 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v40 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v40 + 318) & 0x20) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v41 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint **)(v39 + 176);
    if (!v41)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v41 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                       + 176);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v41, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 15;
  }
  v42 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v42 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v42 + 317) & 2) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v43 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MapVector **)(v39 + 80);
    if (!v43)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v43 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MapVector **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                            + 80);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v43, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 16;
  }
  v44 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v44 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v44 + 316) & 0x10) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v45 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionState **)(v39 + 40);
    if (!v45)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v45 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionState **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                              + 40);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v45, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 17;
  }
  v46 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v46 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v46 + 316) & 0x20) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v47 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver **)(v39 + 48);
    if (!v47)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v47 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                      + 48);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v47, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 18;
  }
  v48 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v48 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v48 + 316) & 0x40) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v49 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry **)(v39 + 56);
    if (!v49)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v49 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                              + 56);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v49, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 19;
  }
  v50 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v50 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v50 + 317) & 8) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v51 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment **)(v39 + 96);
    if (!v51)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v51 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                    + 96);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v51, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 22;
  }
  v52 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v52 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v52 + 317) & 0x80) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v53 = *(const CoreNavigation::CLP::LogEntry::PrivateData::StepCount **)(v39 + 128);
    if (!v53)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v53 = *(const CoreNavigation::CLP::LogEntry::PrivateData::StepCount **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                            + 128);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v53, a3);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 23;
  }
  v54 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v54 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v54 + 320) & 0x20) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v55 = *(const std::string ***)(v39 + 304);
    if (!v55)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v55 = *(const std::string ***)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                   + 304);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v55);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 20;
  }
  v56 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v56 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v56 + 316) & 0x80) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v57 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Timer **)(v39 + 64);
    if (!v57)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v57 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Timer **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                        + 64);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v57, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 24;
  }
  v58 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v58 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v58 + 318) & 2) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v59 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification **)(v39 + 144);
    if (!v59)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v59 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                           + 144);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v59, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 25;
  }
  v60 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v60 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v39 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v60 + 318) & 8) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v61 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint **)(v39 + 160);
    if (!v61)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v61 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                 + 160);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v61, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v39 = *((_QWORD *)a2 + 5);
    v14 = 26;
  }
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v39 + 320) & 4) != 0)
  {
    v62 = *((_QWORD *)a2 + 5);
    if (!v62)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v62 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v63 = *(_QWORD *)(v62 + 280);
    if (!v63)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v63 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 280);
    }
    v64 = (const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)*((_QWORD *)a2 + 4);
    if (!v64)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v64 = *(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp **)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_
                                                                        + 32);
    }
    v65 = *(_DWORD *)(v63 + 40);
    if ((v65 & 1) != 0)
    {
      v73 = *(_DWORD *)(v63 + 32);
      raven::RavenSupervisor::RaiseEventsFrom((uint64_t)v11, (cnprint::CNPrinter *)&v73, (uint64_t)v64, a9, a10);
      v65 = *(_DWORD *)(v63 + 40);
      v14 = 3;
      if ((v65 & 2) == 0)
      {
LABEL_199:
        if ((v65 & 8) == 0)
          goto LABEL_212;
        goto LABEL_207;
      }
    }
    else if ((v65 & 2) == 0)
    {
      goto LABEL_199;
    }
    if (*v12)
    {
      v66 = *(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation **)(v63 + 8);
      if (!v66)
      {
        CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionLogEntry_2eproto(this);
        v66 = *(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation **)(CoreNavigation::CLP::LogEntry::Vision::LogEntry::default_instance_
                                                                             + 8);
      }
      raven::RavenSupervisor::RaiseEventsFrom(v11, v66);
      v65 = *(_DWORD *)(v63 + 40);
    }
    v14 = 27;
    if ((v65 & 8) != 0)
    {
LABEL_207:
      if (v12[1])
      {
        v67 = *(const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult **)(v63 + 24);
        if (!v67)
        {
          CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionLogEntry_2eproto(this);
          v67 = *(const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult **)(CoreNavigation::CLP::LogEntry::Vision::LogEntry::default_instance_
                                                                                      + 24);
        }
        raven::RavenSupervisor::RaiseEventsFrom(v11, v67, v64);
      }
      v14 = 28;
    }
  }
LABEL_212:
  v68 = *((_QWORD *)a2 + 5);
  v69 = v68;
  if (!v68)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v69 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v68 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v69 + 319) & 0x40) != 0)
  {
    if (!v68)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v68 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v70 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents **)(v68 + 248);
    if (!v70)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v70 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 248);
    }
    v71 = (const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)*((_QWORD *)a2 + 4);
    if (!v71)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v71 = *(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp **)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_
                                                                        + 32);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v70, v71, a4);
    v68 = *((_QWORD *)a2 + 5);
    v14 = 29;
  }
  if (!v68)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v68 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v68 + 317) & 0x40) != 0)
  {
    cnframework::Supervisor::Reset(v11);
    return 21;
  }
  return v14;
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Timer *a2, raven::TimerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  uint64_t v39;

  v30 = 0uLL;
  v29 = &unk_1E25C20F8;
  LOBYTE(v31) = 0;
  *((_QWORD *)&v31 + 1) = 0;
  *(_QWORD *)&v32 = 0;
  BYTE8(v32) = 0;
  v33 = 0uLL;
  LOBYTE(v34) = 0;
  *((_QWORD *)&v34 + 1) = 0;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = 0x7FF8000000000000;
  if (raven::ConvertProtobufToTimerEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Timer *)&v29, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    v11 = (char *)operator new(0x60uLL);
    *((_QWORD *)v11 + 1) = 0;
    v12 = (unint64_t *)(v11 + 8);
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &unk_1E25CCE50;
    *((_QWORD *)v11 + 3) = &unk_1E25B8C58;
    v13 = MEMORY[0x1E0DE4F20];
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = v13;
    v14 = (void **)(v11 + 72);
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    sub_18D0778AC((_QWORD *)v11 + 9, "");
    v11[32] = 1;
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E25C14E0;
    *(_QWORD *)(v15 + 8) = &unk_1E25C20F8;
    v16 = v33;
    *(_OWORD *)(v15 + 48) = v32;
    *(_OWORD *)(v15 + 64) = v16;
    v17 = v35;
    *(_OWORD *)(v15 + 80) = v34;
    *(_OWORD *)(v15 + 96) = v17;
    v18 = v31;
    *(_OWORD *)(v15 + 16) = v30;
    *(_OWORD *)(v15 + 32) = v18;
    v19 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v29;
    *((_QWORD *)v11 + 6) = *(v29 - 1);
    *((_QWORD *)v11 + 7) = ((uint64_t (*)(uint64_t))v20[2])((uint64_t)&v29);
    *((_QWORD *)v11 + 8) = v21;
    ((void (*)(_QWORD *@<X8>))v29[3])(&v38);
    if (v11[95] < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = v38;
    *((_QWORD *)v11 + 11) = v39;
    v36 = v11 + 24;
    v37 = (std::__shared_weak_count *)v11;
    *(_QWORD *)&v38 = v11 + 24;
    *((_QWORD *)&v38 + 1) = v11;
    do
      v22 = __ldxr(v12);
    while (__stxr(v22 + 1, v12));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v38, (uint64_t)this + 16);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_18D068A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  sub_18D07C868(v14 - 88);
  sub_18D07C868((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D068AB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D068ABC@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TimerEvent");
}

uint64_t raven::ConvertProtobufToTimerEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Timer *a2, raven::TimerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;

  if ((*((_BYTE *)this + 20) & 1) == 0)
    return 0;
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Timer::default_instance_ + 8);
  }
  return raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t raven::ConvertProtobufToRavenTime(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  unsigned int v10;
  int8x16_t v14;
  int8x16_t v15;
  char v17;
  unsigned __int8 v18;
  __int128 v19;

  v10 = *(_DWORD *)(a1 + 36);
  if ((v10 & 4) != 0)
  {
    a9.i64[0] = *(_QWORD *)(a1 + 24);
    v19 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v19, 0, a9, a10);
    v15.i64[1] = *((_QWORD *)&v19 + 1);
    *(_OWORD *)a2 = v19;
    if ((a3 & 1) != 0 && (*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      v15.i64[0] = *(_QWORD *)(a1 + 8);
      v19 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v19, 0, v15, v14);
      *(_OWORD *)(a2 + 24) = v19;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      *(_BYTE *)(a2 + 16) = 0;
    }
  }
  else
  {
    LOWORD(v19) = 12;
    v18 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "ConvertProtobufToRavenTime,mach continuous time not present", a4, a5, a6, a7, a8, v17);
  }
  return (v10 >> 2) & 1;
}

void CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry(CoreNavigation::CLP::LogEntry::LogEntry *this)
{
  *(_QWORD *)this = &off_1E25C0AD8;
  CoreNavigation::CLP::LogEntry::LogEntry::SharedDtor(this);
  MEMORY[0x18D78AF80]((char *)this + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry(this);
  JUMPOUT(0x18D78B5D4);
}

CoreNavigation::CLP::LogEntry::LogEntry *CoreNavigation::CLP::LogEntry::LogEntry::LogEntry(CoreNavigation::CLP::LogEntry::LogEntry *this)
{
  *(_QWORD *)this = &off_1E25C0AD8;
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::ExtensionSet((CoreNavigation::CLP::LogEntry::LogEntry *)((char *)this + 8));
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_18D068C54(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::LogEntry::SharedDtor(CoreNavigation::CLP::LogEntry::LogEntry *this)
{
  uint64_t v2;
  uint64_t v3;

  CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::LogEntry *)CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 4);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 5);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

void CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp::~LogEntry_TimeStamp(CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *this)
{
  CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp::~LogEntry_TimeStamp(this);
  JUMPOUT(0x18D78B5D4);
}

{
  *(_QWORD *)this = &off_1E25BE6C0;
  CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(CoreNavigation::CLP::LogEntry *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E0DE8448] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto_impl;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18D068D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::~PrivateDataCapture(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::~PrivateDataCapture(this);
  JUMPOUT(0x18D78B5D4);
}

{
  *(_QWORD *)this = &off_1E25BBD08;
  CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *)CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 7);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 9);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 10);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 11);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 12);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 13);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *((_QWORD *)this + 14);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *((_QWORD *)this + 15);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *((_QWORD *)this + 16);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = *((_QWORD *)this + 17);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *((_QWORD *)this + 18);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *((_QWORD *)this + 19);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = *((_QWORD *)this + 20);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = *((_QWORD *)this + 21);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = *((_QWORD *)this + 22);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = *((_QWORD *)this + 23);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = *((_QWORD *)this + 24);
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = *((_QWORD *)this + 25);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = *((_QWORD *)this + 26);
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = *((_QWORD *)this + 27);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = *((_QWORD *)this + 28);
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = *((_QWORD *)this + 29);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = *((_QWORD *)this + 30);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = *((_QWORD *)this + 31);
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *((_QWORD *)this + 32);
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *((_QWORD *)this + 33);
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = *((_QWORD *)this + 34);
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *((_QWORD *)this + 35);
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = *((_QWORD *)this + 36);
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = *((_QWORD *)this + 37);
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = *((_QWORD *)this + 38);
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
}

void CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E0DE8448] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto_impl;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18D06918C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Timer::~Timer(CoreNavigation::CLP::LogEntry::PrivateData::Timer *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::Timer::~Timer(this);
  JUMPOUT(0x18D78B5D4);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E25BD658;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::Timer *)CoreNavigation::CLP::LogEntry::PrivateData::Timer::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp(CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp(this);
  JUMPOUT(0x18D78B5D4);
}

{
  *(_QWORD *)this = &off_1E25BDBF8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E0DE8448] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto_impl;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18D0692DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Timer::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::Timer *this)
{
  uint64_t v2;

  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::Timer *)CoreNavigation::CLP::LogEntry::PrivateData::Timer::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::MovingStateEvent *a2)
{
  int v4;
  uint64_t result;
  cnprint::CNPrinter *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  unsigned __int8 v17;
  __int16 v18;
  _QWORD v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  uint64_t v47;
  char v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  uint64_t v53;

  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  raven::RavenEstimator::HandleMovingStateEvent(this, a2);
  if (v4)
    return 0xFFFFFFFFLL;
  result = raven::RavenEstimator::IsZUPTAppropriate(this, a2);
  if ((_DWORD)result)
  {
    v19[1] = 0;
    v19[2] = 0;
    v19[0] = &unk_1E25C2278;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v30 = 0;
    v31 = 0;
    v29 = 0x7FF8000000000000;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0x7FF8000000000000;
    v42 = 0;
    v43 = vdupq_n_s64(0x7FF8000000000000uLL);
    v44 = v43;
    v45 = v43;
    v46 = v43;
    v47 = 0x7FF8000000000000;
    v48 = 0;
    v49 = v43;
    v50 = v43;
    v51 = v43;
    v52 = v43;
    v53 = 0x7FF8000000000000;
    if (!(*(unsigned int (**)(raven::RavenConvergenceEstimator *, const raven::MovingStateEvent *, _QWORD *))(*(_QWORD *)this + 184))(this, a2, v19))
    {
      (*(void (**)(raven::RavenConvergenceEstimator *, _QWORD *))(*(_QWORD *)this + 320))(this, v19);
      v6 = (cnprint::CNPrinter *)(*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
      v7 = *((unsigned __int8 *)this + 232);
      *((_QWORD *)this + 30) = v6;
      *((_QWORD *)this + 31) = v8;
      if (!v7)
        *((_BYTE *)this + 232) = 1;
      if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
      {
        v18 = 12;
        v17 = 1;
        v16[0] = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
        v16[1] = v9;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v16, "Raising ZUPT velocity event");
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v15) = (_BYTE)this - 72;
        else
          v15 = *((_QWORD *)this + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "%s", v10, v11, v12, v13, v14, v15);
      }
    }
    return 0;
  }
  return result;
}

__n128 raven::RavenEstimator::HandleMovingStateEvent(raven::RavenEstimator *this, const raven::MovingStateEvent *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];
  unsigned __int8 v29;
  __int16 v30;

  if (*((_BYTE *)this + 57))
  {
    if (*((_BYTE *)this + 1776))
    {
      *((_OWORD *)this + 112) = *(_OWORD *)((char *)a2 + 8);
      v4 = *(_OWORD *)((char *)a2 + 24);
      v5 = *(_OWORD *)((char *)a2 + 40);
      v6 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 116) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 115) = v6;
      *((_OWORD *)this + 114) = v5;
      *((_OWORD *)this + 113) = v4;
      result = *(__n128 *)((char *)a2 + 88);
      v8 = *(_OWORD *)((char *)a2 + 104);
      v9 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 240) = *((_QWORD *)a2 + 17);
      *((_OWORD *)this + 119) = v9;
      *((_OWORD *)this + 118) = v8;
      *((__n128 *)this + 117) = result;
    }
    else
    {
      *((_QWORD *)this + 223) = &unk_1E25C26E8;
      *((_OWORD *)this + 112) = *(_OWORD *)((char *)a2 + 8);
      v22 = *(_OWORD *)((char *)a2 + 24);
      v23 = *(_OWORD *)((char *)a2 + 40);
      v24 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 116) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 115) = v24;
      *((_OWORD *)this + 114) = v23;
      *((_OWORD *)this + 113) = v22;
      result = *(__n128 *)((char *)a2 + 88);
      v25 = *(_OWORD *)((char *)a2 + 104);
      v26 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 240) = *((_QWORD *)a2 + 17);
      *((_OWORD *)this + 119) = v26;
      *((_OWORD *)this + 118) = v25;
      *((__n128 *)this + 117) = result;
      *((_BYTE *)this + 1776) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v30 = 12;
    v29 = 1;
    v28[0] = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v28[1] = v10;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v28, "Estimator not configured, failed to handle MovingStateEvent.", v11, v12, v13, v14, v15, v27);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v21) = (_BYTE)this - 72;
    else
      v21 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v16, v17, v18, v19, v20, v21);
  }
  return result;
}

BOOL raven::RavenEstimator::IsZUPTAppropriate(raven::RavenEstimator *this, const raven::MovingStateEvent *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _QWORD v14[2];
  unsigned __int8 v15;

  v2 = *((_QWORD *)this + 146);
  if (v2 && *(_BYTE *)(v2 + 33))
  {
    if (*((unsigned __int8 *)a2 + 104) - 1 <= 1
      && *((double *)a2 + 15) + *((double *)a2 + 16) >= *(double *)(v2 + 248))
    {
      v14[0] = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
      v14[1] = v4;
      return raven::RavenEstimator::IsTimeForZUPT((uint64_t)this, (uint64_t)v14);
    }
  }
  else
  {
    LOWORD(v14[0]) = 12;
    v15 = 4;
    v6 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v13 = v7 + (double)v6;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v14, &v15, "t,%.3lf, Raven parameters not configured.", v8, v9, v10, v11, v12, SLOBYTE(v13));
  }
  return 0;
}

void raven::RavenIonosphereEstimatorActiveObject::HandleEvent(raven::RavenIonosphereEstimatorActiveObject *this, const raven::TimeMarkEvent *a2)
{
  std::mutex *v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v11;
  void **v12;
  _QWORD *v13;
  uint64_t shared_weak_owners;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  std::__shared_weak_count_vtbl *v38;
  void **v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  _BYTE v53[820];
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  uint64_t v57;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 481))
    {
      v4 = (std::mutex *)((char *)this + 2224);
      std::mutex::lock((std::mutex *)((char *)this + 2224));
      raven::RavenIonosphereEstimator::HandleEvent((raven::RavenIonosphereEstimatorActiveObject *)((char *)this + 2288), a2);
      if (!*((_BYTE *)this + 2160)
        || (*(_QWORD *)&v56 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 166) + 16))((char *)this + 1328),
            *((_QWORD *)&v56 + 1) = v5,
            v54 = 1,
            v55 = 0,
            v52 = (_QWORD *)CNTimeSpan::operator+((uint64_t)&v56, &v54, v6, v7),
            *(_QWORD *)v53 = v8,
            sub_18D069E98((double *)a2 + 1, (double *)&v52)))
      {
        v52 = &unk_1E25C4150;
        *(_WORD *)&v53[96] = 0;
        *(_QWORD *)&v53[104] = 0;
        *(_QWORD *)&v53[112] = 0;
        *(int64x2_t *)&v53[120] = vdupq_n_s64(0x7FF8000000000000uLL);
        *(_QWORD *)&v53[136] = 0x7FF8000000000000;
        *(_QWORD *)&v53[144] = 0;
        *(_OWORD *)&v53[160] = *(_OWORD *)&v53[120];
        *(_OWORD *)&v53[176] = *(_OWORD *)&v53[120];
        *(_OWORD *)&v53[192] = *(_OWORD *)&v53[120];
        *(_OWORD *)&v53[208] = *(_OWORD *)&v53[120];
        *(_OWORD *)&v53[224] = *(_OWORD *)&v53[120];
        *(_OWORD *)&v53[240] = *(_OWORD *)&v53[120];
        *(_QWORD *)&v53[152] = 0;
        *(_QWORD *)&v53[256] = 0x7FF8000000000000;
        *(_QWORD *)&v53[264] = 0x7FF8000000000000;
        memset(&v53[272], 0, 88);
        *(_QWORD *)&v53[360] = 0x7FF8000000000000;
        v53[368] = 0;
        memset(&v53[376], 0, 48);
        *(_OWORD *)&v53[32] = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)&v53[48] = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)&v53[64] = *(_OWORD *)((char *)a2 + 72);
        *(_OWORD *)&v53[80] = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)v53 = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)&v53[16] = *(_OWORD *)((char *)a2 + 24);
        if (!raven::RavenIonosphereEstimator::PopulateEvent((raven::RavenIonosphereEstimatorActiveObject *)((char *)this + 2288), (raven::ThinShellIonosphereParametersEvent *)&v52))
        {
          v9 = (std::__shared_weak_count *)operator new(0x60uLL);
          v9->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          v9->__shared_weak_owners_ = 0;
          v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
          v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
          v11 = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
          LOBYTE(v9[1].__shared_owners_) = 0;
          v9[1].__shared_weak_owners_ = 0;
          v9[2].__vftable = v11;
          v12 = (void **)&v9[3].__vftable;
          v9[2].__shared_owners_ = 0;
          v9[2].__shared_weak_owners_ = 0;
          sub_18D0778AC(&v9[3].__vftable, "");
          LOBYTE(v9[1].__shared_owners_) = 1;
          v13 = (_QWORD *)operator new();
          *v13 = &off_1E25C1DB0;
          v13[1] = &unk_1E25C4150;
          memcpy(v13 + 2, v53, 0x334uLL);
          shared_weak_owners = v9[1].__shared_weak_owners_;
          v9[1].__shared_weak_owners_ = (uint64_t)v13;
          if (shared_weak_owners)
            (*(void (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 8))(shared_weak_owners);
          v15 = v52;
          v9[2].__vftable = (std::__shared_weak_count_vtbl *)*(v52 - 1);
          v9[2].__shared_owners_ = ((uint64_t (*)(uint64_t))v15[2])((uint64_t)&v52);
          v9[2].__shared_weak_owners_ = v16;
          ((void (*)(_QWORD *@<X8>))v52[3])(&v56);
          if (SHIBYTE(v9[3].__shared_weak_owners_) < 0)
            operator delete(*v12);
          *(_OWORD *)v12 = v56;
          v9[3].__shared_weak_owners_ = v57;
          v54 = (uint64_t)&v9[1];
          v55 = v9;
          v17 = *((_QWORD *)this + 43);
          *(_QWORD *)&v56 = v9 + 1;
          *((_QWORD *)&v56 + 1) = v9;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          v4 = (std::mutex *)((char *)this + 2224);
          (*(void (**)(uint64_t, __int128 *, raven::RavenIonosphereEstimatorActiveObject *))(*(_QWORD *)v17 + 16))(v17, &v56, this);
          v19 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
          if (*((_QWORD *)&v56 + 1))
          {
            v20 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v22 = v55;
          if (v55)
          {
            v23 = (unint64_t *)&v55->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          if (*((_BYTE *)this + 2160))
          {
            memcpy((char *)this + 1336, v53, 0x334uLL);
          }
          else
          {
            *((_QWORD *)this + 166) = &unk_1E25C4150;
            memcpy((char *)this + 1336, v53, 0x334uLL);
            *((_BYTE *)this + 2160) = 1;
          }
        }
      }
      if (!*((_BYTE *)this + 1320)
        || (*(_QWORD *)&v56 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 61) + 16))((char *)this + 488),
            *((_QWORD *)&v56 + 1) = v32,
            v54 = 1,
            v55 = 0,
            v52 = (_QWORD *)CNTimeSpan::operator+((uint64_t)&v56, &v54, v33, v34),
            *(_QWORD *)v53 = v35,
            sub_18D069E98((double *)a2 + 1, (double *)&v52)))
      {
        v52 = &unk_1E25C4350;
        *(_WORD *)&v53[96] = 0;
        memset(&v53[104], 0, 17);
        memset(&v53[128], 0, 17);
        memset(&v53[152], 0, 17);
        *(_QWORD *)&v53[176] = 0;
        *(_QWORD *)&v53[184] = 0;
        *(int64x2_t *)&v53[192] = vdupq_n_s64(0x7FF8000000000000uLL);
        *(_OWORD *)&v53[208] = *(_OWORD *)&v53[192];
        *(_OWORD *)&v53[224] = *(_OWORD *)&v53[192];
        *(_OWORD *)&v53[240] = *(_OWORD *)&v53[192];
        *(_QWORD *)&v53[256] = 0x7FF8000000000000;
        *(_QWORD *)&v53[264] = 0x7FF8000000000000;
        memset(&v53[272], 0, 88);
        *(_QWORD *)&v53[360] = 0x7FF8000000000000;
        v53[368] = 0;
        memset(&v53[376], 0, 48);
        *(_OWORD *)&v53[32] = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)&v53[48] = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)&v53[64] = *(_OWORD *)((char *)a2 + 72);
        *(_OWORD *)&v53[80] = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)v53 = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)&v53[16] = *(_OWORD *)((char *)a2 + 24);
        if (!raven::RavenIonosphereEstimator::PopulateEvent((int8x16_t *)this + 143, (int8x16_t *)&v52))
        {
          v36 = (std::__shared_weak_count *)operator new(0x60uLL);
          v36->__shared_owners_ = 0;
          v37 = (unint64_t *)&v36->__shared_owners_;
          v36->__shared_weak_owners_ = 0;
          v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
          v36[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
          v38 = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
          LOBYTE(v36[1].__shared_owners_) = 0;
          v36[1].__shared_weak_owners_ = 0;
          v36[2].__vftable = v38;
          v39 = (void **)&v36[3].__vftable;
          v36[2].__shared_owners_ = 0;
          v36[2].__shared_weak_owners_ = 0;
          sub_18D0778AC(&v36[3].__vftable, "");
          LOBYTE(v36[1].__shared_owners_) = 1;
          v40 = (_QWORD *)operator new();
          *v40 = &off_1E25C1E10;
          v40[1] = &unk_1E25C4350;
          memcpy(v40 + 2, v53, 0x334uLL);
          v41 = v36[1].__shared_weak_owners_;
          v36[1].__shared_weak_owners_ = (uint64_t)v40;
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          v42 = v52;
          v36[2].__vftable = (std::__shared_weak_count_vtbl *)*(v52 - 1);
          v36[2].__shared_owners_ = ((uint64_t (*)(uint64_t))v42[2])((uint64_t)&v52);
          v36[2].__shared_weak_owners_ = v43;
          ((void (*)(_QWORD *@<X8>))v52[3])(&v56);
          if (SHIBYTE(v36[3].__shared_weak_owners_) < 0)
            operator delete(*v39);
          *(_OWORD *)v39 = v56;
          v36[3].__shared_weak_owners_ = v57;
          v54 = (uint64_t)&v36[1];
          v55 = v36;
          v44 = *((_QWORD *)this + 43);
          *(_QWORD *)&v56 = v36 + 1;
          *((_QWORD *)&v56 + 1) = v36;
          do
            v45 = __ldxr(v37);
          while (__stxr(v45 + 1, v37));
          (*(void (**)(uint64_t, __int128 *, raven::RavenIonosphereEstimatorActiveObject *))(*(_QWORD *)v44 + 16))(v44, &v56, this);
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
          if (*((_QWORD *)&v56 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v49 = v55;
          if (v55)
          {
            v50 = (unint64_t *)&v55->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if (*((_BYTE *)this + 1320))
          {
            memcpy((char *)this + 496, v53, 0x334uLL);
          }
          else
          {
            *((_QWORD *)this + 61) = &unk_1E25C4350;
            memcpy((char *)this + 496, v53, 0x334uLL);
            *((_BYTE *)this + 1320) = 1;
          }
        }
      }
      std::mutex::unlock(v4);
    }
  }
  else
  {
    LOWORD(v52) = 12;
    LOBYTE(v56) = 2;
    v25 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 271, "RavenIonosphereEstimatorActiveObject: not configured");
    if (*((char *)this + 2191) >= 0)
      LOBYTE(v31) = v25;
    else
      v31 = *((_QWORD *)this + 271);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, (unsigned __int8 *)&v56, "%s", v26, v27, v28, v29, v30, v31);
  }
}

void sub_18D069DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  uint64_t v10;

  sub_18D07C868(v10 - 112);
  sub_18D07C868(v10 - 128);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

BOOL sub_18D069E98(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  BOOL v5;

  v2 = *a1;
  if (!*(_QWORD *)a1)
  {
    v3 = a1[1];
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_7:
      v5 = v3 < a2[1];
      return !v5;
    }
  }
  v4 = *a2;
  if (*(_QWORD *)a2 || ((_QWORD)a2[1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    if (*(_QWORD *)&v2 != *(_QWORD *)&v4)
      return *(_QWORD *)&v2 > *(_QWORD *)&v4;
    v3 = a1[1];
    goto LABEL_7;
  }
  v5 = a1[1] < a2[1];
  return !v5;
}

uint64_t sub_18D069F08(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18D069F14(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t raven::RavenIonosphereEstimator::HandleEvent(raven::RavenIonosphereEstimator *this, const raven::TimeMarkEvent *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v8;
  int8x16_t v9;
  cnprint::CNPrinter *v10;
  int8x16_t v11;
  double v12;
  int8x16_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  cnprint::CNPrinter *updated;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  _BOOL8 EstimatorPredictAndUpdateArguments;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unsigned __int8 v50;
  int8x16_t v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;

  v2 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 29) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 30) = v2;
  v3 = *(_OWORD *)((char *)a2 + 40);
  v4 = *(_OWORD *)((char *)a2 + 56);
  v5 = *(_OWORD *)((char *)a2 + 88);
  *((_OWORD *)this + 33) = *(_OWORD *)((char *)a2 + 72);
  *((_OWORD *)this + 34) = v5;
  *((_OWORD *)this + 31) = v3;
  *((_OWORD *)this + 32) = v4;
  if (!*((_BYTE *)this + 8))
    return 32;
  if (!*((_BYTE *)this + 9))
    return 0;
  v55.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
  v55.i64[1] = v8;
  v51 = *((int8x16_t *)this + 2);
  v10 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v55, &v51, v51, v9);
  *(double *)v13.i64 = v12 + (double)(uint64_t)v10;
  if (*(double *)v13.i64 >= 0.0)
  {
    v25 = *((_QWORD *)this + 476);
    *(double *)v13.i64 = *(double *)v13.i64 / *(double *)(v25 + 2568);
    v11.i64[0] = 1.0;
    if (*(double *)v13.i64 > 1.0)
    {
      if (!*((_BYTE *)this + 80))
        goto LABEL_17;
      v26 = CNTimeSpan::operator-((uint64_t)this + 464, (_QWORD *)this + 8, v13, v11);
      v51.i64[0] = v26;
      *(double *)&v51.i64[1] = v27;
      if (v26 < 0 || (*(double *)v28.i64 = v27, v27 < 0.0))
      {
        v26 = CNTimeSpan::operator-((double *)v51.i64, v28, v29);
        v28.i64[0] = v30;
      }
      if (*(double *)v28.i64 + (double)v26 >= *(double *)(v25 + 3136))
      {
LABEL_17:
        updated = (cnprint::CNPrinter *)raven::RavenIonosphereEstimator::UpdateEstimatorParametersViaPolyfitToKlobucharModel(this);
        if ((_DWORD)updated && cnprint::CNPrinter::GetLogLevel(updated) <= 1)
        {
          v51.i16[0] = 12;
          v54.i8[0] = 1;
          v32 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 477, "Warning: UpdateEstimatorParametersViaPolyfitToKlobucharModel failed, continuing without updating parameters");
          if (*((char *)this + 3839) >= 0)
            LOBYTE(v38) = v32;
          else
            v38 = *((_QWORD *)this + 477);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, (unsigned __int8 *)&v54, "%s", v33, v34, v35, v36, v37, v38);
        }
      }
      *(_OWORD *)((char *)this + 3396) = 0u;
      *(_OWORD *)((char *)this + 3368) = 0u;
      *(_OWORD *)((char *)this + 3384) = 0u;
      *(_OWORD *)((char *)this + 3336) = 0u;
      *(_OWORD *)((char *)this + 3352) = 0u;
      *(_OWORD *)((char *)this + 3304) = 0u;
      *(_OWORD *)((char *)this + 3320) = 0u;
      *(_OWORD *)((char *)this + 3272) = 0u;
      *(_OWORD *)((char *)this + 3288) = 0u;
      *(_OWORD *)((char *)this + 3240) = 0u;
      *(_OWORD *)((char *)this + 3256) = 0u;
      *(_OWORD *)((char *)this + 3208) = 0u;
      *(_OWORD *)((char *)this + 3224) = 0u;
      *(_OWORD *)((char *)this + 3176) = 0u;
      *(_OWORD *)((char *)this + 3192) = 0u;
      *(_OWORD *)((char *)this + 3144) = 0u;
      *(_OWORD *)((char *)this + 3160) = 0u;
      *(_OWORD *)((char *)this + 3112) = 0u;
      *(_OWORD *)((char *)this + 3128) = 0u;
      *(_OWORD *)((char *)this + 3080) = 0u;
      *(_OWORD *)((char *)this + 3096) = 0u;
      *(_OWORD *)((char *)this + 3048) = 0u;
      *(_OWORD *)((char *)this + 3064) = 0u;
      *(_OWORD *)((char *)this + 3016) = 0u;
      *(_OWORD *)((char *)this + 3032) = 0u;
      v39 = *((int8x16_t *)this + 2);
      v53 = v55;
      v54 = v39;
      v51 = 0uLL;
      v52 = 0x7FF8000000000000;
      EstimatorPredictAndUpdateArguments = raven::RavenIonosphereEstimator::GetEstimatorPredictAndUpdateArguments((uint64_t)this, (uint64_t)&v54, &v53, (uint64_t)&v51, *(double *)v55.i64, v39);
      if (EstimatorPredictAndUpdateArguments)
      {
        v24 = raven::RavenIonosphereEstimator::PredictAndUpdate((uint64_t)this, (uint64_t)&v51);
        v49 = v24;
        sub_18D057F50(&v49);
        return v24;
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)EstimatorPredictAndUpdateArguments) <= 1)
      {
        LOWORD(v49) = 12;
        v50 = 1;
        v41 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)&v55, "Could not get predict and update arguments");
        if (*((char *)this + 3839) >= 0)
          LOBYTE(v47) = v41;
        else
          v47 = *((_QWORD *)this + 477);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v49, &v50, "%s", v42, v43, v44, v45, v46, v47);
      }
    }
    return 0;
  }
  if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
  {
    v54.i16[0] = 12;
    v53.i8[0] = 1;
    v51.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    v51.i64[1] = v14;
    v15 = *((double *)this + 5) + (double)*((uint64_t *)this + 4);
    v16 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)&v51, "Estimator time is greater than event time,%.3lf > %.3lf", v15, v17 + (double)v16);
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v23) = (_BYTE)this - 24;
    else
      v23 = *((_QWORD *)this + 477);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v53, "%s", v18, v19, v20, v21, v22, v23);
  }
  return 64;
}

void raven::RavenSolutionActiveObject::HandleEvent(raven::RavenSolutionActiveObject *this, const raven::RavenSolutionEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _BYTE v12[8];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  _BYTE v33[804];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  uint64_t v84;
  uint64_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  uint64_t v90;
  uint64_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  uint64_t v102;
  uint64_t v103;
  int64x2_t v104;
  int64x2_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  char v136;

  raven::RavenSolutionActiveObject::WriteRavenSolutionToProtobuf((cnlogging::ProtobufOutputStream **)this, a2);
  if (*((_BYTE *)a2 + 208) == 4)
  {
    sub_18D0409EC((uint64_t)v12);
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v14 = 0u;
    v13 = 0u;
    v18 = 0;
    v19 = 0x7FF8000000000000;
    v20 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0;
    v27 = 0x7FF8000000000000;
    v28 = 0;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    v32 = 0;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    *(_QWORD *)&v33[796] = 0x7FF8000000000000;
    v34 = 0x7FF8000000000000;
    v35 = 0;
    v36 = 0x7FF8000000000000;
    bzero(v33, 0x318uLL);
    v47 = 0;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    v42 = 0u;
    v48 = 0x7FF8000000000000;
    v49 = 0;
    v50 = 0x7FF8000000000000;
    v51 = vdupq_n_s64(0x7FF8000000000000uLL);
    v52 = v51;
    v53 = v51;
    v54 = v51;
    v55 = 0;
    v56 = 0x7FF8000000000000;
    v57 = v51;
    v58 = v51;
    v59 = v51;
    v60 = v51;
    v61 = v51;
    v62 = v51;
    v63 = 0x7FF8000000000000;
    v64 = 0;
    v65 = v51;
    v66 = v51;
    v67 = v51;
    v68 = v51;
    v69 = 0x7FF8000000000000;
    v70 = 0;
    v71 = v51;
    v72 = v51;
    v73 = v51;
    v74 = v51;
    v75 = 0x7FF8000000000000;
    v76 = 0;
    v77 = v51;
    v78 = v51;
    v79 = v51;
    v80 = v51;
    v81 = v51;
    v82 = v51;
    v83 = v51;
    v84 = 0;
    v85 = 0x7FF8000000000000;
    v86 = v51;
    v87 = v51;
    v88 = v51;
    v89 = v51;
    v90 = 0;
    v91 = 0x7FF8000000000000;
    v92 = v51;
    v93 = v51;
    v94 = v51;
    v95 = v51;
    v96 = 0;
    v97 = 0x7FF8000000000000;
    v98 = v51;
    v99 = v51;
    v100 = v51;
    v101 = v51;
    v102 = 0;
    v103 = 0x7FF8000000000000;
    v104 = v51;
    v105 = v51;
    v111 = 0;
    v110 = 0u;
    v109 = 0u;
    v108 = 0u;
    v107 = 0u;
    v106 = 0u;
    v112 = 0x7FF8000000000000;
    v113 = 0;
    v114 = 0x3FF0000000000000;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    v123 = 0u;
    v124 = 0u;
    v125 = 0;
    v126 = 0x7FF8000000000000;
    v127 = 0;
    v128 = 0x3FF0000000000000;
    v129 = 0u;
    v130 = 0u;
    v131 = 0x3FF0000000000000;
    v132 = 0u;
    v133 = 0u;
    v134 = 0x3FE0000000000000;
    v135 = 0x3FE0000000000000;
    v136 = 0;
    if (*(_BYTE *)(*((_QWORD *)this + 74) + 3720))
    {
      v11[0] = cnframework::ActiveObjectBase::GetCurrentTime(this);
      v11[1] = v4;
      raven::RavenSolutionActiveObject::GetRavenSolution((uint64_t)this, (uint64_t)v11, (uint64_t)v12);
    }
    std::mutex::lock((std::mutex *)((char *)this + 11128));
    if (*((_BYTE *)a2 + 209) == 2)
    {
      if (!*((_BYTE *)this + 600) || sub_18D069E98((double *)a2 + 146, (double *)this + 222))
        memcpy((char *)this + 616, (char *)a2 + 8, 0x971uLL);
      *((_BYTE *)this + 600) = 1;
    }
    raven::RavenPredictor::HandleEvent((raven::RavenSolutionActiveObject *)((char *)this + 3040), a2, v5, v6, v7, v8, v9, v10);
    std::mutex::unlock((std::mutex *)((char *)this + 11128));
  }
}

void sub_18D06A508(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void raven::RavenSolutionActiveObject::WriteRavenSolutionToProtobuf(cnlogging::ProtobufOutputStream **this, const raven::RavenSolutionEvent *a2)
{
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput *v4;
  uint64_t v5;
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (*((_BYTE *)this[74] + 3693) && this[1382])
  {
    CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v11);
    v14 |= 1u;
    v5 = v12;
    if (!v12)
    {
      v5 = operator new();
      *(_QWORD *)v5 = &off_1E25BE6C0;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_QWORD *)(v5 + 40) = 0;
      v12 = v5;
    }
    v6 = *(_DWORD *)(v5 + 44);
    *(double *)(v5 + 8) = *((double *)a2 + 5) + (double)*((uint64_t *)a2 + 4);
    v7 = *((double *)a2 + 2) + (double)*((uint64_t *)a2 + 1);
    *(_DWORD *)(v5 + 44) = v6 | 5;
    *(double *)(v5 + 24) = v7;
    v14 |= 2u;
    v8 = v13;
    if (!v13)
    {
      v8 = operator new();
      *(_QWORD *)v8 = &off_1E25BBD08;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_OWORD *)(v8 + 56) = 0u;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 120) = 0u;
      *(_OWORD *)(v8 + 136) = 0u;
      *(_OWORD *)(v8 + 152) = 0u;
      *(_OWORD *)(v8 + 168) = 0u;
      *(_OWORD *)(v8 + 184) = 0u;
      *(_OWORD *)(v8 + 200) = 0u;
      *(_OWORD *)(v8 + 216) = 0u;
      *(_OWORD *)(v8 + 232) = 0u;
      *(_OWORD *)(v8 + 248) = 0u;
      *(_OWORD *)(v8 + 8) = 0u;
      *(_OWORD *)(v8 + 264) = 0u;
      *(_OWORD *)(v8 + 280) = 0u;
      *(_OWORD *)(v8 + 296) = 0u;
      *(_OWORD *)(v8 + 308) = 0u;
      v13 = v8;
    }
    *(_DWORD *)(v8 + 320) |= 2u;
    v9 = *(_QWORD *)(v8 + 272);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      *(_DWORD *)(v9 + 28) |= 1u;
      if (v10)
      {
LABEL_12:
        raven::ConvertRavenSolutionEventToProtobuf(a2, (const raven::RavenSolutionEvent *)v10, v4);
        cnlogging::ProtobufOutputStream::append(this[1382], (const wireless_diagnostics::google::protobuf::MessageLite *)v11);
        cnlogging::ProtobufOutputStream::flush(this[1382]);
        CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v11);
        return;
      }
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = &off_1E25BFF20;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v8 + 272) = v9;
      *(_DWORD *)(v9 + 28) |= 1u;
    }
    v10 = operator new();
    *(_QWORD *)v10 = &off_1E25BF6B0;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_QWORD *)(v10 + 56) = 0;
    *(_QWORD *)(v9 + 8) = v10;
    goto LABEL_12;
  }
}

void sub_18D06A758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::SolutionChecker::PerformSpeedCheck(raven::SolutionChecker *this, raven::RavenSolutionEvent *a2, BOOL *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  cnprint::CNPrinter *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  cnprint::CNPrinter *v23;
  cnprint::CNPrinter *v24;
  uint64_t **v25;
  double v26;
  BOOL v27;
  double v28;
  double v31;
  double v34;
  double *v38;
  double v39;
  uint64_t LogLevel;
  int8x16_t v41;
  int8x16_t v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  int8x16_t v92;
  int8x16_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  cnprint::CNPrinter *__p;
  double v119[2];
  unsigned __int8 v120;
  unsigned __int8 v121;
  cnprint::CNPrinter *v122;
  cnprint::CNPrinter *v123;
  uint64_t v124;
  _BYTE v125[9];

  v125[0] = *((_BYTE *)a2 + 208);
  if (!*((_BYTE *)a2 + 1344))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v122) = 12;
      LOBYTE(v119[0]) = 1;
      v16 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v112 = v17 + (double)v16;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v122, (unsigned __int8 *)v119, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test has speed marked invalid. Exiting with check passed return value. Continuing with remaining checks.", v18, v19, v20, v21, v22, SLOBYTE(v112));
    }
    v14 = 0;
    *a3 = 1;
    return v14;
  }
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v6 = raven::SolutionChecker::GetListOfEstimatorsToCheckAgainst((uint64_t)this, v125, (unint64_t *)&v122);
  if (v6)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
    {
      LOWORD(v119[0]) = 12;
      v121 = 1;
      v7 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v111 = v8 + (double)v7;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v121, "t,%.3lf,SolutionChecker: Could not find any RavenSolutions to perform the speed check against. Exiting with check passed return value.", v9, v10, v11, v12, v13, SLOBYTE(v111));
    }
    v14 = 0;
    *a3 = 0;
    v15 = v122;
    if (v122)
      goto LABEL_60;
    return v14;
  }
  v23 = v123;
  __p = v122;
  if (v122 == v123)
  {
LABEL_51:
    v14 = 0;
    v15 = __p;
    *a3 = 1;
    if (__p)
      goto LABEL_60;
    return v14;
  }
  v24 = v122;
  while (1)
  {
    v121 = 0;
    v121 = *(_BYTE *)v24;
    v25 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), &v121);
    if (!v25)
      sub_18D077838("unordered_map::at: key not found");
    v26 = *((double *)v25 + 172);
    if (*((_BYTE *)v25 + 1368))
      v27 = ((unint64_t)v25[172] & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL;
    else
      v27 = 0;
    if (!v27 || v26 < 0.0)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
      {
        LOWORD(v119[0]) = 12;
        v120 = 1;
        v53 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v113 = v54 + (double)v53;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against has an invalid speed,validity,%d,speed,%.2lf. Cannot proceed with speed check. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v55, v56, v57, v58, v59, SLOBYTE(v113));
      }
      goto LABEL_55;
    }
    v28 = *((double *)v25 + 176);
    if ((*(uint64_t *)&v28 <= -1 || ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(*(_QWORD *)&v28 - 1) >= 0xFFFFFFFFFFFFFLL)
    {
      LOWORD(v119[0]) = 12;
      v120 = 4;
      v61 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v114 = v62 + (double)v61;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against has a non-finite or non-positive user speed covariance diagonal term, pss, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v63, v64, v65, v66, v67, SLOBYTE(v114));
      v60 = 0;
      v14 = 0;
      *((_BYTE *)a2 + 209) = 1;
      goto LABEL_59;
    }
    v31 = *((double *)a2 + 173);
    if ((*(uint64_t *)&v31 <= -1 || ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(*(_QWORD *)&v31 - 1) >= 0xFFFFFFFFFFFFFLL)
    {
      LOWORD(v119[0]) = 12;
      v120 = 4;
      v68 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v115 = v69 + (double)v68;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test has a non-finite or non-positive user speed covariance diagonal term, pss, %.2lf. Exiting with check failed return value.", v70, v71, v72, v73, v74, SLOBYTE(v115));
      goto LABEL_58;
    }
    v34 = *((double *)a2 + 169);
    if ((*(uint64_t *)&v34 <= -1 || ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(*(_QWORD *)&v34 - 1) >= 0xFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      LOWORD(v119[0]) = 12;
      v120 = 4;
      v75 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v116 = v76 + (double)v75;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test has an invalid speed value despite being marked as valid,%.2lf. Exiting with check failed return value.", v77, v78, v79, v80, v81, SLOBYTE(v116));
LABEL_58:
      v60 = 0;
      v14 = 0xFFFFFFFFLL;
      goto LABEL_59;
    }
    v38 = (double *)((char *)this + 88);
    if (v121 != 1)
    {
      v38 = (double *)((char *)this + 80);
      if (v121 != 2)
      {
        LOWORD(v119[0]) = 12;
        v120 = 4;
        v83 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v117 = v84 + (double)v83;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: invalid estimator to check against during speed check, exiting with check passed return value and continuing other checks", v85, v86, v87, v88, v89, SLOBYTE(v117));
        v14 = 0;
        v60 = 1;
        goto LABEL_59;
      }
    }
    v39 = *v38;
    LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25);
    v43 = vabdd_f64(v26, v34);
    v44 = v43 / sqrt(v28 + v31);
    if (!(_DWORD)LogLevel)
    {
      LOWORD(v119[0]) = 12;
      v120 = 0;
      v45 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v47 = v46 + (double)v45;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. speed_difference_from_solution_to_check_against check results, difference, %.2lf, tolerance, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_var, %.2lf, sol_var, %.2lf.", v48, v49, v50, v51, v52, SLOBYTE(v47));
    }
    if (v43 > v39)
    {
      v41.i64[0] = *((_QWORD *)this + 8);
      if (v44 > *(double *)v41.i64)
        break;
    }
    v24 = (cnprint::CNPrinter *)((char *)v24 + 1);
    if (v24 == v23)
      goto LABEL_51;
  }
  v90 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v90 + 1520))
  {
    LogLevel = CNTimeSpan::operator-((uint64_t)a2 + 8, (_QWORD *)(v90 + 1528), v41, v42);
    *(_QWORD *)&v119[0] = LogLevel;
    v119[1] = v91;
    if (LogLevel < 0 || (*(double *)v92.i64 = v91, v91 < 0.0))
    {
      LogLevel = CNTimeSpan::operator-(v119, v92, v93);
      v92.i64[0] = v94;
    }
    if (*(double *)v92.i64 + (double)LogLevel < 10.0)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
      {
        LOWORD(v119[0]) = 12;
        v120 = 1;
        v95 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v97 = v96 + (double)v95;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. speed_difference_from_solution_to_check_against check failed after recently exiting tunnel, difference, %.2lf,tolerance, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_user_speed_unc, %.2lf, sol_user_speed_unc, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v98, v99, v100, v101, v102, SLOBYTE(v97));
      }
LABEL_55:
      v60 = 0;
      v14 = 0;
      *((_BYTE *)a2 + 209) = 1;
      goto LABEL_59;
    }
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
  {
    LOWORD(v119[0]) = 12;
    v120 = 1;
    v103 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v105 = v104 + (double)v103;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. speed_difference_from_solution_to_check_against check failed, difference, %.2lf, tolerance, %.2lf, consistency, %.2lf, threshold, %.2lf, user_speed_uncertainty_of_solution_to_check_against, %.2lf, sol_user_speed_unc, %.2lf. Exiting with check failed return value.", v106, v107, v108, v109, v110, SLOBYTE(v105));
  }
  v60 = 0;
  v14 = 0xFFFFFFFFLL;
LABEL_59:
  v15 = __p;
  *a3 = v60;
  if (__p)
LABEL_60:
    operator delete(v15);
  return v14;
}

void sub_18D06ADAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL raven::SolutionChecker::GetListOfEstimatorsToCheckAgainst(uint64_t a1, _BYTE *a2, unint64_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  _BYTE *v30;
  char v31;
  unsigned __int8 v33;
  unsigned __int8 v34;

  if (*a2 != 1)
  {
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
    v34 = 1;
    if (sub_18D041348(v6, &v34))
    {
      v8 = (_BYTE *)a3[1];
      v7 = a3[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = *a3;
        v11 = &v8[-*a3];
        v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0)
          goto LABEL_44;
        v13 = v7 - v10;
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (unint64_t)operator new(v14);
        else
          v15 = 0;
        v16 = (char *)(v15 + v14);
        v11[v15] = 1;
        v9 = (uint64_t)&v11[v15 + 1];
        if (v8 == (_BYTE *)v10)
        {
          v15 += (unint64_t)v11;
        }
        else
        {
          v17 = &v8[~v10];
          do
          {
            v18 = *--v8;
            (v17--)[v15] = v18;
          }
          while (v8 != (_BYTE *)v10);
        }
        *a3 = v15;
        a3[1] = v9;
        a3[2] = (unint64_t)v16;
        if (v10)
          operator delete((void *)v10);
      }
      else
      {
        *v8 = 1;
        v9 = (uint64_t)(v8 + 1);
      }
      a3[1] = v9;
    }
    if (*a2 == 3)
    {
      v19 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
      v33 = 2;
      if (sub_18D041348(v19, &v33))
      {
        v21 = (_BYTE *)a3[1];
        v20 = a3[2];
        if ((unint64_t)v21 < v20)
        {
          *v21 = 2;
          v22 = (uint64_t)(v21 + 1);
LABEL_42:
          a3[1] = v22;
          return *a3 == a3[1];
        }
        v23 = *a3;
        v24 = &v21[-*a3];
        v25 = (unint64_t)(v24 + 1);
        if ((uint64_t)(v24 + 1) >= 0)
        {
          v26 = v20 - v23;
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
            v27 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
            v28 = (unint64_t)operator new(v27);
          else
            v28 = 0;
          v29 = (char *)(v28 + v27);
          v24[v28] = 2;
          v22 = (uint64_t)&v24[v28 + 1];
          if (v21 == (_BYTE *)v23)
          {
            v28 += (unint64_t)v24;
          }
          else
          {
            v30 = &v21[~v23];
            do
            {
              v31 = *--v21;
              (v30--)[v28] = v31;
            }
            while (v21 != (_BYTE *)v23);
          }
          *a3 = v28;
          a3[1] = v22;
          a3[2] = (unint64_t)v29;
          if (v23)
            operator delete((void *)v23);
          goto LABEL_42;
        }
LABEL_44:
        sub_18D07AFE4();
      }
    }
  }
  return *a3 == a3[1];
}

uint64_t raven::RavenPNTEstimator::HandleTimeMarkEvent(raven::RavenPNTEstimator *this, const raven::TimeMarkEvent *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  double v15;
  double *v16;
  cnprint::CNPrinter *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  BOOL v75;
  int v76;
  __n128 v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  double v95;
  double v96;
  int8x16_t v97;
  cnprint::CNPrinter *v98;
  int8x16_t v99;
  double v100;
  double v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  int8x16_t v117;
  int8x16_t v118;
  uint64_t v119;
  int8x16_t v120;
  BOOL v121;
  int v122;
  double v123;
  BOOL v124;
  char v125;
  double v126;
  int8x16_t v127;
  int8x16_t v128;
  uint64_t v129;
  double v130;
  int8x16_t v131;
  _BOOL4 v132;
  _OWORD *v133;
  _BOOL8 EstimatorPredictAndUpdateArguments;
  char v135;
  uint64_t v136;
  int8x16_t v137;
  uint64_t v138;
  double v139;
  int8x16_t v140;
  int8x16_t v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BOOL4 v151;
  double v152;
  double MaximumComfortableTurningRate;
  uint64_t v154;
  double v155;
  double v156;
  double *v157;
  int v158;
  uint64_t v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  uint64_t v174;
  float64x2_t v175;
  uint64_t v176;
  double v177;
  int8x16_t v178;
  uint64_t v179;
  uint64_t v180;
  double *v181;
  uint64_t v182;
  double v183;
  double v184;
  double *v185;
  double v186;
  uint64_t v187;
  double *v188;
  double v189;
  double v190;
  double v191;
  double *v192;
  double *v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  float64x2_t v204;
  double v205;
  double v206;
  uint64_t v207;
  double *v208;
  double *v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  unsigned __int8 v217;
  double v218;
  double v219;
  __int128 v220;
  double v221;
  __n128 v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  int8x16_t v226;
  cnprint::CNPrinter *v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __n128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  double v249;
  uint64_t v250;
  uint64_t v251;
  double v252;
  double *v253;
  double v254;
  uint64_t v255;
  double *v256;
  double v257;
  double v258;
  double v259;
  __n128 v260;
  int8x16_t v261;
  uint64_t v262;
  double *v263;
  double v264;
  double v265;
  uint64_t v266;
  double v267;
  double v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  double v277;
  uint64_t v278;
  double v279;
  int8x16_t v280;
  int8x16_t v281;
  int8x16_t v282;
  double *v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  uint64_t v293;
  double *v294;
  double *v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double *v303;
  int v304;
  cnprint::CNPrinter *v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  double v315;
  double *v316;
  double v317;
  double v318;
  float64x2_t *v319;
  uint64_t v320;
  uint64_t v321;
  double v322;
  char v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char v331;
  cnstatistics *v332;
  uint64_t v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  uint64_t (**v339)(uint64_t, __n128);
  uint64_t v340;
  void *v341;
  int64x2_t v342;
  int v343;
  _BYTE __p[24];
  uint64_t v345;
  double *v346;
  _QWORD v347[2];
  __int128 v348;
  __int128 v349;
  char *v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  int64x2_t v354;
  uint64_t v355;
  _BYTE v356[24];
  uint64_t v357;
  __int128 *v358;
  __int128 v359;
  uint64_t v360;
  char v361[32];
  double *v362;
  void *v363;
  __int128 v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  void *v368;
  __int128 v369;
  uint64_t v370;
  double *v371;
  uint64_t v372;
  _BYTE v373[64];
  void *v374;
  __int128 v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  unsigned __int8 v379[64];
  void *v380;
  __int128 v381;
  uint64_t v382;
  double *v383;
  __int128 v384;
  uint64_t v385;
  _QWORD v386[3];
  int64x2_t v387;
  uint64_t v388;
  void *v389;
  __int128 v390;
  int64x2_t v391;
  uint64_t v392;
  _QWORD v393[4];
  _QWORD v394[4];
  double v395[14];
  void *v396;
  __int128 v397;
  uint64_t v398;
  double *v399;
  int64x2_t v400;
  uint64_t v401;
  void *v402;
  __int128 v403;
  uint64_t v404;
  float64x2_t *v405;
  uint64_t v406;
  void *v407;
  __int128 v408;
  uint64_t v409;
  double *v410;
  __int128 v411;
  uint64_t v412;
  void *v413;
  __int128 v414;
  uint64_t v415;
  double *v416;
  double v417;
  unint64_t v418;
  unint64_t v419;
  void *v420;
  __int128 v421;
  uint64_t v422;
  double *v423;
  _BYTE v424[72];
  uint64_t v425;
  __int128 v426;
  uint64_t v427;
  double *v428;
  uint64_t v429;
  _BYTE v430[24];
  int64x2_t v431;
  int64x2_t v432;
  int64x2_t v433;
  int64x2_t v434;
  int64x2_t v435;
  int64x2_t v436;
  int64x2_t v437;
  int64x2_t v438;
  int64x2_t v439;
  int64x2_t v440;
  void *v441;
  uint64_t v442;
  char v443;
  char v444;
  _BYTE v445[24];
  uint64_t v446;
  _QWORD *v447;
  _QWORD v448[13];

  v448[10] = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 136) = v2;
  v3 = *(_OWORD *)((char *)a2 + 40);
  v4 = *(_OWORD *)((char *)a2 + 56);
  v5 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 200) = v5;
  *(_OWORD *)((char *)this + 184) = v4;
  *(_OWORD *)((char *)this + 168) = v3;
  if (!*((_BYTE *)this + 57))
    return 32;
  if (*((_BYTE *)this + 58))
  {
    v8 = 0;
    goto LABEL_4;
  }
  *(_QWORD *)__p = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&__p[8] = v23;
  raven::RavenPNTEstimator::GetInitializationArgs((uint64_t)this, (int8x16_t *)__p, v430, v24);
  if (!v444)
    return 0;
  if (raven::RavenPNTEstimator::Initialize((uint64_t)this, (__n128 *)v430))
  {
    LOWORD(v420) = 12;
    LOBYTE(v396) = 4;
    *(_QWORD *)__p = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&__p[8] = v25;
    v26 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)__p, "Failed to initialize");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v32) = v26;
    else
      v32 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v420, (unsigned __int8 *)&v396, "%s", v27, v28, v29, v30, v31, v32);
    v33 = 0;
    v8 = 32;
  }
  else
  {
    if (!*((_BYTE *)this + 19432))
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    if (*((_BYTE *)this + 19656)
      || (raven::RavenPNTEstimator::InflateDevicePositionUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1440), 0), raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1448), 0), !raven::RavenPNTEstimator::UpdateFullStateEstimate(this, v59)))
    {
      LOWORD(v396) = 12;
      v445[0] = 3;
      v420 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)&v421 = v44;
      sub_18D0778AC(__p, off_1E25CD3A0[v443]);
      if (__p[23] >= 0)
        v45 = __p;
      else
        v45 = *(const char **)__p;
      v46 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v420, "Estimator initialized from %s solution with validity time %.3lf", v45, *(double *)&v430[8] + (double)*(uint64_t *)v430);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v52) = v46;
      else
        v52 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v396, v445, "%s", v47, v48, v49, v50, v51, v52);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v8 = 0;
      v33 = 1;
    }
    else
    {
      LOWORD(v420) = 12;
      LOBYTE(v396) = 4;
      *(_QWORD *)__p = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)&__p[8] = v60;
      v61 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)__p, "Could not update full states upon receipt of unreliable attitude event");
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v67) = v61;
      else
        v67 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v420, (unsigned __int8 *)&v396, "%s", v62, v63, v64, v65, v66, v67);
      raven::RavenPNTEstimator::Reset(this);
      v33 = 0;
      v8 = 1;
    }
  }
  if (v444)
  {
    v68 = v442;
    v441 = &unk_1E25C7160;
    v442 = 0;
    if (v68)
      MEMORY[0x18D78B5BC](v68, 0x1000C8000313F17);
  }
  if ((v33 & 1) != 0)
  {
LABEL_4:
    v398 = 0x100000003;
    v396 = &unk_1E25C7790;
    v399 = (double *)&v400;
    v397 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v396, 0.0);
    v431.i64[0] = 0x300000003;
    *(_QWORD *)v430 = &unk_1E25C78E0;
    v431.i64[1] = (uint64_t)&v432;
    *(_OWORD *)&v430[8] = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)v430, 0.0);
    v9 = 72;
    if (*((_BYTE *)this + 2536) == 1)
      v9 = 1368;
    v10 = *(double *)(*((_QWORD *)this + 146) + v9) * *(double *)(*((_QWORD *)this + 146) + v9);
    v11 = v431.i64[1];
    *(double *)v431.i64[1] = v10;
    v12 = *(_DWORD *)&v430[20];
    *(double *)(v11 + 8 * (*(_DWORD *)&v430[20] + 1)) = v10;
    *(double *)(v11 + 8 * (2 * v12 + 2)) = v10;
    sub_18D1C7988(__p, 8);
    v350 = 0;
    v349 = 0u;
    v348 = 0u;
    *(_QWORD *)__p = off_1E25C4A30;
    v13 = (char *)this + 2536;
    v347[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    v347[1] = v14;
    *(_QWORD *)&v348 = (char *)this + 2696;
    *((_QWORD *)&v348 + 1) = (char *)this + 14600;
    *(_QWORD *)&v349 = (char *)this + 14616;
    *((_QWORD *)&v349 + 1) = (char *)this + 2536;
    v350 = (char *)this + 2576;
    *(_QWORD *)&v395[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    v395[1] = v15;
    if (*((_BYTE *)this + 2536) != 1
      || (v16 = (double *)*((_QWORD *)this + 1831),
          sqrt(v16[22] * v16[22] + v16[21] * v16[21] + v16[23] * v16[23]) > *(double *)(*((_QWORD *)this + 146) + 1360))
      && !raven::RavenPNTEstimator::IsUserStationary(this))
    {
      if ((*(_DWORD *)&v430[8] & 0x80000000) != 0)
        __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
      v422 = 0x100000003;
      v420 = &unk_1E25C7790;
      v423 = (double *)v424;
      *(_QWORD *)&v421 = *(unsigned int *)&v430[8] | 0x100000000;
      DWORD2(v421) = *(_DWORD *)&v430[8];
      HIDWORD(v421) = *(_DWORD *)&v430[8];
      v17 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v420, 0.0);
      if (!*((_BYTE *)this + 61288))
      {
        if (cnprint::CNPrinter::GetLogLevel(v17) <= 1)
        {
          *(_WORD *)v445 = 2;
          v356[0] = 1;
          v335 = v395[1] + (double)*(uint64_t *)&v395[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v445, v356, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v34, v35, v36, v37, v38, SLOBYTE(v335));
        }
        goto LABEL_72;
      }
      if (*((_DWORD *)this + 16806) == 174)
      {
        *(_WORD *)v445 = 2;
        v356[0] = 2;
        v334 = v395[1] + (double)*(uint64_t *)&v395[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v445, v356, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v18, v19, v20, v21, v22, SLOBYTE(v334));
LABEL_72:
        *(_WORD *)v445 = 12;
        v356[0] = 4;
        v420 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v421 = v85;
        v86 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v420, "Could not add measurement - device-to-user position");
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v92) = v86;
        else
          v92 = *((_QWORD *)this + 311);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v445, v356, "%s", v87, v88, v89, v90, v91, v92);
        goto LABEL_76;
      }
      if (*((_BYTE *)this + 61289))
      {
        if (cnprint::CNPrinter::GetLogLevel(v17) <= 1)
        {
          *(_WORD *)v445 = 2;
          v356[0] = 1;
          v336 = v395[1] + (double)*(uint64_t *)&v395[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v445, v356, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v39, v40, v41, v42, v43, SLOBYTE(v336));
        }
        goto LABEL_72;
      }
      v53 = sub_18D03FE4C(v395, (double *)this + 7662);
      if (v53)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v53) <= 1)
        {
          *(_WORD *)v445 = 2;
          v356[0] = 1;
          v337 = v395[1] + (double)*(uint64_t *)&v395[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v445, v356, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v54, v55, v56, v57, v58, SLOBYTE(v337));
        }
        goto LABEL_72;
      }
      *(_OWORD *)v445 = 0uLL;
      sub_18D1D3AC4((void (**)(int))v445, (uint64_t)__p);
      v339 = (uint64_t (**)(uint64_t, __n128))sub_18D1C7B34((uint64_t *)this + 7666, (void (**)(uint64_t))v445);
      sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v445);
      v69 = *((int *)this + 16806);
      v70 = (v69 + 1);
      if (*((_QWORD *)this + 7668) != v70)
      {
        *(_WORD *)v445 = 2;
        v356[0] = 4;
        v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)__p + 16))((uint64_t)__p);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v445, v356, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v80, v81, v82, v83, v84, v79);
        goto LABEL_72;
      }
      *((_DWORD *)this + 16806) = v70;
      *((_DWORD *)this + 15340) = v70;
      *((_DWORD *)this + 15341) = 1;
      *((_DWORD *)this + 15342) = v70;
      *((_DWORD *)this + 15343) = v70;
      *((_DWORD *)this + 16046) = v70;
      *((_DWORD *)this + 16047) = 1;
      *((_DWORD *)this + 16048) = v70;
      *((_DWORD *)this + 16049) = v70;
      *((_DWORD *)this + 16230) = v70;
      *((_DWORD *)this + 16231) = 1;
      *((_DWORD *)this + 16232) = v70;
      *((_DWORD *)this + 16233) = v70;
      *((_DWORD *)this + 16588) = v70;
      *((_DWORD *)this + 16589) = 1;
      *((_DWORD *)this + 16590) = v70;
      *((_DWORD *)this + 16591) = v70;
      *((_DWORD *)this + 16600) = v70;
      *((_DWORD *)this + 16601) = 1;
      *((_DWORD *)this + 16602) = v70;
      *((_DWORD *)this + 16603) = v70;
      *((_DWORD *)this + 16784) = v70;
      *((_DWORD *)this + 16785) = 1;
      *((_DWORD *)this + 16786) = v70;
      *((_DWORD *)this + 16787) = v70;
      *((_DWORD *)this + 16796) = v70;
      *((_DWORD *)this + 16797) = 1;
      *((_DWORD *)this + 16798) = v70;
      *((_DWORD *)this + 16799) = v70;
      *((_DWORD *)this + 16810) = v70;
      *((_DWORD *)this + 16811) = 1;
      *((_DWORD *)this + 16812) = v70;
      *((_DWORD *)this + 16813) = v70;
      *((_DWORD *)this + 17168) = v70;
      *((_DWORD *)this + 17169) = 1;
      *((_DWORD *)this + 17170) = v70;
      *((_DWORD *)this + 17171) = v70;
      *(_OWORD *)(*((_QWORD *)this + 7673) + 16 * v69) = *(_OWORD *)v395;
      if (v397 <= DWORD1(v397))
        v71 = DWORD1(v397);
      else
        v71 = v397;
      if (DWORD1(v397))
        v72 = (_DWORD)v397 == 0;
      else
        v72 = 1;
      if (v72)
        v73 = 0;
      else
        v73 = v71;
      *(_DWORD *)(*((_QWORD *)this + 8026) + 4 * v69) = v73;
      sub_18D053AA8(*((_QWORD *)this + 8297) + (v69 << 6), (uint64_t)&v396);
      if (v421 <= DWORD1(v421))
        v74 = DWORD1(v421);
      else
        v74 = v421;
      if (DWORD1(v421))
        v75 = (_DWORD)v421 == 0;
      else
        v75 = 1;
      if (v75)
        v76 = 0;
      else
        v76 = v74;
      *(_DWORD *)(*((_QWORD *)this + 8303) + 4 * v69) = v76;
      sub_18D053AA8(*((_QWORD *)this + 8395) + (v69 << 6), (uint64_t)&v420);
      v77 = sub_18D053AA8(*((_QWORD *)this + 8401) + 112 * (int)v69, (uint64_t)v430);
      *(_QWORD *)(*((_QWORD *)this + 8408) + 8 * v69) = sub_18D1AF6F8;
      if (*v339)
        v78 = (*v339)(3, v77);
      else
        v78 = 0;
      *(_QWORD *)(*((_QWORD *)this + 8587) + 8 * v69) = v78;
    }
LABEL_76:
    *(_QWORD *)__p = &unk_1E25B8EE0;
    if (SHIBYTE(v346) < 0)
      operator delete(*(void **)&__p[16]);
    if (*((_BYTE *)this + 1624))
    {
      v93 = *((unsigned __int8 *)this + 1736);
      if ((v93 > 3 || v93 == 1) && *((_BYTE *)this + 1208) && ((*((_BYTE *)this + 1320) - 4) & 0xFA) == 0)
      {
        *(_QWORD *)v430 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v430[8] = v136;
        *(_OWORD *)__p = *((_OWORD *)this + 5);
        v138 = CNTimeSpan::operator-((uint64_t)v430, __p, *(int8x16_t *)__p, v137);
        v338 = v139;
        v340 = v138;
        v427 = 0x100000003;
        v425 = (uint64_t)&unk_1E25C7790;
        v428 = (double *)&v429;
        v426 = xmmword_18D313070;
        sub_18D04BE88((uint64_t)&v425, 0.0);
        v422 = 0x300000003;
        v420 = &unk_1E25C78E0;
        v423 = (double *)v424;
        v421 = xmmword_18D30BB60;
        sub_18D04BE88((uint64_t)&v420, 0.0);
        if (!*((_BYTE *)this + 1208))
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        if (*((_BYTE *)this + 1320) != 5
          || !*((_BYTE *)this + 2368)
          || *((unsigned __int8 *)this + 2480) - 3 > 1)
        {
          goto LABEL_121;
        }
        if (*v13 == 1)
          goto LABEL_132;
        if (raven::RavenPNTEstimator::IsUserStationary(this))
        {
LABEL_121:
          v142 = *v13;
          if (!*v13)
          {
            v152 = *(double *)(*((_QWORD *)this + 1831) + 192);
            MaximumComfortableTurningRate = raven::RavenPNTEstimator::GetMaximumComfortableTurningRate(this, v140, v141);
            v154 = *((_QWORD *)this + 146);
            v155 = *(double *)(v154 + 304) / fmax(fabs(v152), 0.000000015);
            if (v155 < MaximumComfortableTurningRate)
              MaximumComfortableTurningRate = v155;
            v156 = MaximumComfortableTurningRate
                 * *(double *)(v154 + 72)
                 * (MaximumComfortableTurningRate
                  * *(double *)(v154 + 72));
            v157 = v423;
            *v423 = v156;
            v158 = HIDWORD(v421);
            v157[HIDWORD(v421) + 1] = v156;
            v157[2 * v158 + 2] = v156;
            goto LABEL_182;
          }
          if (v142 != 1)
          {
            if (v142 == 2)
              __assert_rtn("HandleTimeMarkEvent", "ravenpntestimator.cpp", 4378, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
            goto LABEL_182;
          }
LABEL_132:
          if (*((_BYTE *)this + 1776))
            v151 = *((unsigned __int8 *)this + 1888) - 3 < 0xFFFFFFFE;
          else
            v151 = 1;
          v415 = 0x100000003;
          v413 = &unk_1E25C7790;
          v414 = xmmword_18D313070;
          v416 = &v417;
          v159 = *((_QWORD *)this + 1831);
          v417 = *(double *)(v159 + 24);
          v418 = *(_QWORD *)(v159 + 32);
          v419 = *(_QWORD *)(v159 + 40);
          v160 = *(double *)(v159 + 48);
          v161 = *(double *)(v159 + 56);
          v162 = *(double *)(v159 + 64);
          v163 = *(double *)(v159 + 72);
          v164 = sqrt(v161 * v161 + v160 * v160 + v162 * v162 + v163 * v163);
          v165 = 1.0;
          v166 = 0.0;
          v167 = 0.0;
          v168 = 0.0;
          v169 = 0.0;
          v170 = 1.0;
          if (fabs(v164) >= 2.22044605e-16)
          {
            v167 = v160 / v164;
            v168 = v161 / v164;
            v169 = v162 / v164;
            v170 = v163 / v164;
          }
          *(double *)v394 = v167;
          *(double *)&v394[1] = v168;
          *(double *)&v394[2] = v169;
          *(double *)&v394[3] = v170;
          v171 = sqrt(v168 * v168 + v167 * v167 + v169 * v169 + v170 * v170);
          v172 = 0.0;
          v173 = 0.0;
          if (fabs(v171) >= 2.22044605e-16)
          {
            v166 = -v167 / v171;
            v172 = -v168 / v171;
            v173 = -v169 / v171;
            v165 = v170 / v171;
          }
          *(double *)v393 = v166;
          *(double *)&v393[1] = v172;
          *(double *)&v393[2] = v173;
          *(double *)&v393[3] = v165;
          cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v394, (uint64_t)v430);
          cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v393, (uint64_t)__p);
          v409 = 0x100000003;
          v407 = &unk_1E25C7790;
          v408 = xmmword_18D313070;
          v410 = (double *)&v411;
          v174 = *((_QWORD *)this + 1831);
          v411 = *(_OWORD *)(v174 + 200);
          v175.f64[1] = *((float64_t *)&v411 + 1);
          v412 = *(_QWORD *)(v174 + 216);
          v175.f64[0] = *(float64_t *)(v174 + 192);
          sub_18D1B27A8((uint64_t)&v407, (uint64_t)&v402, v175);
          v391.i64[0] = 0x100000003;
          v389 = &unk_1E25C7790;
          v391.i64[1] = (uint64_t)&v392;
          v390 = xmmword_18D313070;
          sub_18D04BE88((uint64_t)&v389, 0.0);
          v386[0] = &unk_1E25C2C38;
          v386[1] = 0;
          v387 = vdupq_n_s64(0x7FF8000000000000uLL);
          v386[2] = 0;
          v388 = 0x7FF8000000000000;
          v396 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
          *(_QWORD *)&v397 = v176;
          if (!sub_18D190038((uint64_t)this + 44440, (double *)&v396, (uint64_t)v386, v177, v178))
          {
            v179 = v391.i64[1];
            *(int64x2_t *)v391.i64[1] = v387;
            *(_QWORD *)(v179 + 16) = v388;
          }
          v382 = 0x100000003;
          v380 = &unk_1E25C7790;
          v381 = xmmword_18D313070;
          v383 = (double *)&v384;
          v180 = *((_QWORD *)this + 1831);
          v384 = *(_OWORD *)(v180 + 168);
          v385 = *(_QWORD *)(v180 + 184);
          sub_18D192C7C((uint64_t)v430, (uint64_t)&v413, (uint64_t)v379);
          v376 = 0x100000003;
          v374 = &unk_1E25C7790;
          v375 = xmmword_18D313070;
          v377 = &v378;
          sub_18D1CB7D0((uint64_t)&v389, (uint64_t)&v380, (uint64_t)&v374);
          sub_18D1B2810((uint64_t)v373, (uint64_t)&v402, (uint64_t)&v374);
          v370 = 0x100000003;
          v368 = &unk_1E25C7790;
          v369 = xmmword_18D313070;
          v371 = (double *)&v372;
          sub_18D0540FC((uint64_t)v379, (uint64_t)&v374, (uint64_t)&v368);
          v365 = 0x100000003;
          v363 = &unk_1E25C7790;
          v364 = xmmword_18D313070;
          v366 = &v367;
          sub_18D0540FC((uint64_t)v379, (uint64_t)v373, (uint64_t)&v363);
          sub_18D1B2880((uint64_t)v361, (uint64_t)&v363);
          v181 = (double *)*((_QWORD *)this + 146);
          v182 = DWORD2(v390);
          v183 = 0.0;
          v184 = 0.0;
          if (SDWORD2(v390) >= 1)
          {
            v185 = (double *)v391.i64[1];
            do
            {
              v186 = *v185++;
              v184 = v184 + v186 * v186;
              --v182;
            }
            while (v182);
          }
          v187 = DWORD2(v381);
          if (SDWORD2(v381) >= 1)
          {
            v183 = 0.0;
            v188 = v383;
            do
            {
              v189 = *v188++;
              v183 = v183 + v189 * v189;
              --v187;
            }
            while (v187);
          }
          v190 = v181[45] * v181[45]
               + v181[46]
               * *(double *)(*((_QWORD *)this + 1831) + 192)
               * (v181[46]
                * *(double *)(*((_QWORD *)this + 1831) + 192))
               + v184 * v183;
          if (v190 <= v181[47] * v181[47])
            v190 = v181[47] * v181[47];
          v191 = v190;
          v398 = 0x300000003;
          v396 = &unk_1E25C78E0;
          v399 = (double *)&v400;
          v397 = xmmword_18D30BB60;
          sub_18D04BE88((uint64_t)&v396, 0.0);
          v192 = v362;
          v193 = v399;
          *v399 = *v362 * *v362;
          v194 = SHIDWORD(v397);
          v195 = SHIDWORD(v397) + 1;
          v193[v195] = v192[1] * v192[1];
          v196 = v192[2] * v192[2];
          v197 = 2 * v194 + 2;
          v193[v197] = v196;
          v198 = *v193;
          if (*v193 <= v191)
            v198 = v191;
          *v193 = v198;
          v199 = v193[v195];
          if (v199 <= v191)
            v199 = v191;
          v193[v195] = v199;
          v200 = v193[v197];
          if (v200 <= v191)
            v200 = v191;
          v193[v197] = v200;
          sub_18D166008((uint64_t)__p, (uint64_t)&v396, (uint64_t)v395);
          sub_18D16606C((uint64_t)__p, (uint64_t)v356);
          sub_18D166008((uint64_t)v395, (uint64_t)v356, (uint64_t)v445);
          sub_18D053AA8((uint64_t)&v420, (uint64_t)v445);
          sub_18D192CE4((uint64_t)&v368);
          v201 = v204.f64[0];
          v202 = *(double *)(*((_QWORD *)this + 1831) + 192);
          v203 = vabdd_f64(v204.f64[0], v202);
          v204.f64[0] = (v203 + v203) * (v203 / fmax(v204.f64[0], 0.5)) * 10.0;
          v205 = 0.1;
          if (v204.f64[0] >= 0.1)
            v205 = v204.f64[0];
          if (v204.f64[0] <= 10.0)
            v206 = v205;
          else
            v206 = 10.0;
          *((double *)this + 320) = v206;
          v207 = DWORD2(v369);
          if (SDWORD2(v369) < 1)
          {
            v204.f64[0] = 0.0;
          }
          else
          {
            v208 = v371;
            v204.f64[0] = 0.0;
            v209 = v410;
            do
            {
              v210 = *v208++;
              v211 = v210;
              v212 = *v209++;
              v204.f64[0] = v204.f64[0] + v211 * v212;
              --v207;
            }
            while (v207);
          }
          sub_18D1B27A8((uint64_t)&v407, (uint64_t)v395, v204);
          v446 = 0x100000003;
          *(_QWORD *)v445 = &unk_1E25C7790;
          *(_OWORD *)&v445[8] = xmmword_18D313070;
          v447 = v448;
          sub_18D0540FC((uint64_t)&v368, (uint64_t)v395, (uint64_t)v445);
          sub_18D192CE4((uint64_t)v445);
          v214 = v213;
          v215 = fmax(v201, 0.625);
          v216 = fmax(v201, 20.0);
          v217 = atomic_load((unsigned __int8 *)&qword_1ECF23068);
          if ((v217 & 1) == 0)
          {
            v332 = (cnstatistics *)__cxa_guard_acquire(&qword_1ECF23068);
            if ((_DWORD)v332)
            {
              cnstatistics::InverseGamma(v332, 0.95, 0.5, 2.0);
              qword_1ECF23060 = v333;
              __cxa_guard_release(&qword_1ECF23068);
            }
          }
          if (!v151)
          {
            *(_QWORD *)&v220 = 0x100000001;
            *((_QWORD *)&v220 + 1) = 0x100000001;
            v426 = v220;
            if (!*((_BYTE *)this + 1776) || (v221 = 0.0, *((unsigned __int8 *)this + 1888) - 1 >= 2))
              v221 = v201;
            v343 = 0;
            *v428 = v221;
            v421 = v220;
            *v423 = fmax((v221 - v202) * (v221 - v202), 1.0);
            v341 = sub_18D1AE8AC;
LABEL_183:
            sub_18D1C7988(v430, 10);
            v434 = 0u;
            v433 = 0u;
            v435.i64[0] = 0;
            *(_QWORD *)v430 = off_1E25C4A58;
            v435.i64[1] = (uint64_t)&unk_1E25C2C38;
            v436 = 0uLL;
            v437 = vdupq_n_s64(0x7FF8000000000000uLL);
            v438.i64[0] = 0x7FF8000000000000;
            v438.i32[2] = 0;
            if (v343)
            {
              sub_18D1C7988(__p, 10);
              v349 = 0u;
              v348 = 0u;
              *(_QWORD *)__p = off_1E25C4A58;
              v350 = 0;
              v351 = &unk_1E25C2C38;
              v352 = 0;
              v353 = 0;
              v354 = vdupq_n_s64(0x7FF8000000000000uLL);
              v355 = 0x7FF8000000000000;
              v222 = sub_18D1D4C38((uint64_t)v430, (uint64_t)v430, (uint64_t)__p);
              v351 = &unk_1E25B8DB8;
              *(_QWORD *)__p = &unk_1E25B8EE0;
              if (SHIBYTE(v346) < 0)
                operator delete(*(void **)&__p[16]);
              if (v438.i32[2])
                sub_18D1C55B4();
              v432.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *, __n128))(*(_QWORD *)a2 + 16))(a2, v222);
              v432.i64[1] = v223;
              v433.i64[0] = (uint64_t)this + 2696;
              v433.i64[1] = (uint64_t)this + 14600;
              v434.i64[0] = (uint64_t)this + 14616;
              v434.i64[1] = (uint64_t)this + 2536;
              v435.i64[0] = (uint64_t)this + 2576;
              *(_QWORD *)__p = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
              *(_QWORD *)&__p[8] = v224;
              v227 = (cnprint::CNPrinter *)sub_18D190038((uint64_t)this + 44440, (double *)__p, (uint64_t)&v435.i64[1], v225, v226);
              if ((_DWORD)v227)
              {
                if (cnprint::CNPrinter::GetLogLevel(v227) <= 1)
                {
                  LOWORD(v396) = 12;
                  v445[0] = 1;
                  *(_QWORD *)__p = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
                  *(_QWORD *)&__p[8] = v228;
                  v229 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)__p, "Could not get rate gyro measurements for device-user %s measurement", "velocity");
                  if (*((char *)this + 2511) >= 0)
                    LOBYTE(v235) = v229;
                  else
                    v235 = *((_QWORD *)this + 311);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v396, v445, "%s", v230, v231, v232, v233, v234, v235);
                }
                sub_18D1C55EC((uint64_t)v430);
                return v8;
              }
            }
            else
            {
              sub_18D1C7988(__p, 26);
              v350 = 0;
              v349 = 0u;
              v348 = 0u;
              *(_QWORD *)__p = off_1E25C3108;
              v236 = sub_18D1D4D98((uint64_t)v430, (uint64_t)v430, (uint64_t)__p);
              *(_QWORD *)__p = &unk_1E25B8EE0;
              if (SHIBYTE(v346) < 0)
                operator delete(*(void **)&__p[16]);
              if (v438.i32[2] != 1)
                sub_18D1C55B4();
              v432.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *, __n128))(*(_QWORD *)a2 + 16))(a2, v236);
              v432.i64[1] = v237;
              v433.i64[0] = (uint64_t)this + 2696;
              v433.i64[1] = (uint64_t)this + 14600;
              v434.i64[0] = (uint64_t)this + 14616;
              v434.i64[1] = (uint64_t)this + 2536;
              v435.i64[0] = (uint64_t)this + 2576;
            }
            *(_QWORD *)__p = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
            *(_QWORD *)&__p[8] = v238;
            if (v343)
            {
              if (v438.i32[2])
                sub_18D1C55B4();
              if (!sub_18D1B40B8((uint64_t)this + 61288, (double *)__p, (uint64_t)&v425, (uint64_t)&v420, (uint64_t)v341, (uint64_t)v430))goto LABEL_210;
              *(_WORD *)v445 = 12;
              LOBYTE(v395[0]) = 4;
              v396 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
              *(_QWORD *)&v397 = v239;
              v240 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v396, "Could not add measurement - device-to-user velocity");
              if (*((char *)this + 2511) >= 0)
                LOBYTE(v246) = v240;
              else
                v246 = *((_QWORD *)this + 311);
            }
            else
            {
              if (v438.i32[2] != 1)
                sub_18D1C55B4();
              if (!sub_18D1AEE1C((uint64_t)this + 61288, (double *)__p, (uint64_t)&v425, (uint64_t)&v420, (uint64_t)v341, (uint64_t)v430))goto LABEL_210;
              *(_WORD *)v445 = 12;
              LOBYTE(v395[0]) = 4;
              v396 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
              *(_QWORD *)&v397 = v247;
              v248 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v396, "Could not add measurement - user speed from device");
              if (*((char *)this + 2511) >= 0)
                LOBYTE(v246) = v248;
              else
                v246 = *((_QWORD *)this + 311);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v445, (unsigned __int8 *)v395, "%s", v241, v242, v243, v244, v245, v246);
LABEL_210:
            sub_18D1C55EC((uint64_t)v430);
            goto LABEL_81;
          }
          v218 = *((double *)this + 321);
          if (v214 * v214 / v191 >= *(double *)&qword_1ECF23060
            || v214 / v215 >= 0.0874886635
            || v203 / v216 >= 0.363970234)
          {
            v219 = fmin(v218 * 1.25892541, 100.0);
          }
          else
          {
            v219 = fmax(v218 * 0.977237221, 0.01);
          }
          *((double *)this + 321) = v219;
LABEL_182:
          v341 = sub_18D1B28D8;
          v343 = 1;
          goto LABEL_183;
        }
        v345 = 0x300000003;
        *(_QWORD *)__p = &unk_1E25C78E0;
        v346 = (double *)v347;
        *(_OWORD *)&__p[8] = xmmword_18D30BB60;
        v249 = 0.0;
        sub_18D04BE88((uint64_t)__p, 0.0);
        v357 = 0x100000003;
        *(_QWORD *)v356 = &unk_1E25C7790;
        *(_OWORD *)&v356[8] = xmmword_18D313070;
        v358 = &v359;
        v250 = *((_QWORD *)this + 1831);
        v359 = *(_OWORD *)(v250 + 200);
        v360 = *(_QWORD *)(v250 + 216);
        v431.i64[0] = 0x100000003;
        *(_QWORD *)v430 = &unk_1E25C7790;
        *(_OWORD *)&v430[8] = xmmword_18D313070;
        v431.i64[1] = (uint64_t)&v432;
        v398 = 0x100000003;
        v396 = &unk_1E25C7790;
        v397 = xmmword_18D313070;
        v399 = (double *)&v400;
        v446 = 0x100000003;
        *(_QWORD *)v445 = &unk_1E25C7790;
        v447 = v448;
        *(_OWORD *)&v445[8] = xmmword_18D313070;
        sub_18D04BE88((uint64_t)v445, 0.0);
        sub_18D053AA8((uint64_t)&v396, (uint64_t)v445);
        *v399 = sqrt(*(double *)(*((_QWORD *)this + 1864) + 200 * *((int *)this + 3725) + 200));
        v446 = 0x100000003;
        *(_QWORD *)v445 = &unk_1E25C7790;
        *(_OWORD *)&v445[8] = xmmword_18D313070;
        v447 = v448;
        sub_18D1CB7D0((uint64_t)v356, (uint64_t)&v396, (uint64_t)v445);
        sub_18D053AA8((uint64_t)v430, (uint64_t)v445);
        v251 = *(unsigned int *)&v430[16];
        v252 = 0.0;
        if (*(int *)&v430[16] >= 1)
        {
          v253 = (double *)v431.i64[1];
          do
          {
            v254 = *v253++;
            v252 = v252 + v254 * v254;
            --v251;
          }
          while (v251);
        }
        v446 = 0x100000003;
        *(_QWORD *)v445 = &unk_1E25C7790;
        v447 = v448;
        *(_OWORD *)&v445[8] = xmmword_18D313070;
        sub_18D04BE88((uint64_t)v445, 0.0);
        sub_18D053AA8((uint64_t)&v396, (uint64_t)v445);
        v399[1] = sqrt(*(double *)(*((_QWORD *)this + 1864) + 208 * *((int *)this + 3725) + 208));
        v446 = 0x100000003;
        *(_QWORD *)v445 = &unk_1E25C7790;
        *(_OWORD *)&v445[8] = xmmword_18D313070;
        v447 = v448;
        sub_18D1CB7D0((uint64_t)v356, (uint64_t)&v396, (uint64_t)v445);
        sub_18D053AA8((uint64_t)v430, (uint64_t)v445);
        v255 = *(unsigned int *)&v430[16];
        if (*(int *)&v430[16] >= 1)
        {
          v249 = 0.0;
          v256 = (double *)v431.i64[1];
          do
          {
            v257 = *v256++;
            v249 = v249 + v257 * v257;
            --v255;
          }
          while (v255);
        }
        v258 = v252 + v249;
        v446 = 0x100000003;
        *(_QWORD *)v445 = &unk_1E25C7790;
        v447 = v448;
        *(_OWORD *)&v445[8] = xmmword_18D313070;
        v259 = 0.0;
        sub_18D04BE88((uint64_t)v445, 0.0);
        sub_18D053AA8((uint64_t)&v396, (uint64_t)v445);
        v399[2] = sqrt(*(double *)(*((_QWORD *)this + 1864) + 216 * *((int *)this + 3725) + 216));
        v446 = 0x100000003;
        *(_QWORD *)v445 = &unk_1E25C7790;
        *(_OWORD *)&v445[8] = xmmword_18D313070;
        v447 = v448;
        sub_18D1CB7D0((uint64_t)v356, (uint64_t)&v396, (uint64_t)v445);
        v260 = sub_18D053AA8((uint64_t)v430, (uint64_t)v445);
        v262 = *(unsigned int *)&v430[16];
        if (*(int *)&v430[16] >= 1)
        {
          v263 = (double *)v431.i64[1];
          do
          {
            v264 = *v263++;
            v259 = v259 + v264 * v264;
            --v262;
          }
          while (v262);
        }
        v265 = fmin(sqrt(v258 + v259), 1.57079633);
        v266 = *((_QWORD *)this + 1831);
        v267 = *(double *)(v266 + 168);
        v261.i64[0] = *(_QWORD *)(v266 + 176);
        v260.n128_u64[0] = *(_QWORD *)(v266 + 184);
        v268 = sqrt(*(double *)v261.i64 * *(double *)v261.i64 + v267 * v267 + v260.n128_f64[0] * v260.n128_f64[0]);
        if (fabs(v268) < 2.22044605e-16)
        {
          LOWORD(v396) = 12;
          v445[0] = 4;
          *(_QWORD *)v430 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
          *(_QWORD *)&v430[8] = v269;
          v270 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v430, "Position vector has zero magnitude");
          if (*((char *)this + 2511) >= 0)
            LOBYTE(v276) = v270;
          else
            v276 = *((_QWORD *)this + 311);
LABEL_253:
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v396, v445, "%s", v271, v272, v273, v274, v275, v276);
          return v8 | 1;
        }
        v415 = 0x100000003;
        v413 = &unk_1E25C7790;
        v414 = xmmword_18D313070;
        v416 = &v417;
        *(double *)v261.i64 = *(double *)v261.i64 / v268;
        v417 = v267 / v268;
        v418 = v261.i64[0];
        v260.n128_f64[0] = v260.n128_f64[0] / v268;
        v419 = v260.n128_u64[0];
        v277 = raven::RavenPNTEstimator::GetMaximumComfortableTurningRate(this, (int8x16_t)v260, v261);
        v389 = &unk_1E25C2C38;
        v390 = 0uLL;
        v391 = vdupq_n_s64(0x7FF8000000000000uLL);
        v392 = 0x7FF8000000000000;
        *(_QWORD *)v430 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v430[8] = v278;
        if (!sub_18D190038((uint64_t)this + 44440, (double *)v430, (uint64_t)&v389, v279, v280))
        {
          v398 = 0x100000003;
          v396 = &unk_1E25C7790;
          v397 = xmmword_18D313070;
          v399 = (double *)&v400;
          v400 = v391;
          v401 = v392;
          v283 = (double *)*((_QWORD *)this + 1831);
          v284 = v283[6];
          v285 = v283[7];
          v286 = v283[8];
          v287 = v283[9];
          v288 = sqrt(v285 * v285 + v284 * v284 + v286 * v286 + v287 * v287);
          if (fabs(v288) >= 2.22044605e-16)
          {
            v290 = v284 / v288;
            v291 = v285 / v288;
            v292 = v286 / v288;
            v289 = v287 / v288;
          }
          else
          {
            v289 = 1.0;
            v290 = 0.0;
            v291 = 0.0;
            v292 = 0.0;
          }
          *(double *)v445 = v290;
          *(double *)&v445[8] = v291;
          *(double *)&v445[16] = v292;
          v446 = *(_QWORD *)&v289;
          sub_18D162AB8((cnrotation::CNRotation *)v445, (uint64_t)&v413, (uint64_t)v430);
          v293 = DWORD2(v397);
          if (SDWORD2(v397) < 1)
          {
            v277 = 0.0;
          }
          else
          {
            v294 = v399;
            v277 = 0.0;
            v295 = (double *)v431.i64[1];
            do
            {
              v296 = *v294++;
              v297 = v296;
              v298 = *v295++;
              v277 = v277 + v297 * v298;
              --v293;
            }
            while (v293);
          }
        }
        *(double *)v281.i64 = fabs(v277) * 3.28425;
        v282.i64[0] = 0x3FA999999999999ALL;
        v299 = fmax(*(double *)v281.i64, 0.05);
        v300 = v338 + (double)v340;
        v301 = v300 * raven::RavenPNTEstimator::GetComfortableAcceleration(this, v281, v282);
        v302 = v265 * v301 * (v265 * v301);
        v303 = v346;
        *v346 = v302 + 0.0025 + v299 * v299;
        v304 = *(_DWORD *)&__p[20];
        v303[*(_DWORD *)&__p[20] + 1] = v301 * v301 + 0.0025;
        v303[2 * v304 + 2] = v302 * 0.0025 + 0.0025;
        if (!cnprint::CNPrinter::GetLogLevel(v305))
        {
          LOWORD(v396) = 12;
          v445[0] = 0;
          *(_QWORD *)v430 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
          *(_QWORD *)&v430[8] = v306;
          v307 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v430, "uesr-device vel,speed,%.3lf,dt,%.2f,across,%.3lf,along,%.3lf,up,%.3lf,omega,%.3lf,acc,%.2lf,vib,%.2lf,dot,%.2lf,turn,%.2lf", *(double *)(*((_QWORD *)this + 1831) + 192), v300, sqrt(*v346), sqrt(v346[*(_DWORD *)&__p[20] + 1]), sqrt(v346[2 * *(_DWORD *)&__p[20] + 2]), v277 * 57.2957795, v301, 0.05, sqrt(v302), v299);
          if (*((char *)this + 2511) >= 0)
            LOBYTE(v313) = v307;
          else
            v313 = *((_QWORD *)this + 311);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v396, v445, "%s", v308, v309, v310, v311, v312, v313);
        }
        sub_18D04DA0C((uint64_t)&v407, (uint64_t)v356);
        v404 = 0x100000003;
        v402 = &unk_1E25C7790;
        v403 = xmmword_18D313070;
        v405 = (float64x2_t *)&v406;
        sub_18D1CB7D0((uint64_t)&v407, (uint64_t)&v413, (uint64_t)&v402);
        v314 = DWORD2(v403);
        v315 = 0.0;
        if (SDWORD2(v403) >= 1)
        {
          v316 = (double *)v405;
          do
          {
            v317 = *v316++;
            v315 = v315 + v317 * v317;
            --v314;
          }
          while (v314);
        }
        v318 = sqrt(v315);
        if (v318 < 0.000000015)
        {
          LOWORD(v396) = 12;
          v445[0] = 4;
          *(_QWORD *)v430 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
          *(_QWORD *)&v430[8] = v330;
          v331 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v430, "Cross product has zero magnitude");
          if (*((char *)this + 2511) >= 0)
            LOBYTE(v276) = v331;
          else
            v276 = *((_QWORD *)this + 311);
          goto LABEL_253;
        }
        v319 = v405;
        *v405 = vdivq_f64(*v405, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v318, 0));
        v319[1].f64[0] = v319[1].f64[0] / v318;
        v398 = 0x300000003;
        v396 = &unk_1E25C78E0;
        v397 = xmmword_18D30BB60;
        v399 = (double *)&v400;
        sub_18D1AFFC0(":", (uint64_t)&v396, 0, (uint64_t)v430);
        sub_18D16182C((uint64_t)v430, (uint64_t)&v402);
        sub_18D1AFFC0(":", (uint64_t)&v396, 1, (uint64_t)v430);
        sub_18D16182C((uint64_t)v430, (uint64_t)&v407);
        sub_18D1AFFC0(":", (uint64_t)&v396, 2, (uint64_t)v430);
        sub_18D16182C((uint64_t)v430, (uint64_t)&v413);
        sub_18D166008((uint64_t)&v396, (uint64_t)__p, (uint64_t)v445);
        sub_18D16606C((uint64_t)&v396, (uint64_t)v395);
        sub_18D166008((uint64_t)v445, (uint64_t)v395, (uint64_t)v430);
        sub_18D053AA8((uint64_t)&v420, (uint64_t)v430);
        sub_18D1C7988(v430, 11);
        v434 = 0u;
        v433 = 0u;
        v435 = 0uLL;
        *(_QWORD *)v430 = off_1E25C4B48;
        v432.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        v432.i64[1] = v320;
        v433.i64[0] = (uint64_t)this + 2696;
        v433.i64[1] = (uint64_t)this + 14600;
        v434.i64[0] = (uint64_t)this + 14616;
        v434.i64[1] = (uint64_t)this + 2536;
        v435.i64[0] = (uint64_t)this + 2576;
        *(_QWORD *)v445 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v445[8] = v321;
        *(double *)&v435.i64[1] = v338 + (double)v340;
        if (sub_18D1B233C((uint64_t)this + 61288, (double *)v445, (uint64_t)&v425, (uint64_t)&v420, (uint64_t)v430))
        {
          LOWORD(v380) = 12;
          v379[0] = 4;
          *(_QWORD *)&v395[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
          v395[1] = v322;
          v323 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v395, "Could not add measurement - device-to-user velocity");
          if (*((char *)this + 2511) >= 0)
            LOBYTE(v329) = v323;
          else
            v329 = *((_QWORD *)this + 311);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v380, v379, "%s", v324, v325, v326, v327, v328, v329);
        }
        *(_QWORD *)v430 = &unk_1E25B8EE0;
        if (v431.i8[15] < 0)
          operator delete(*(void **)&v430[16]);
      }
    }
LABEL_81:
    v94 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    v96 = v95;
    *(_QWORD *)__p = v94;
    *(double *)&__p[8] = v95;
    *(_OWORD *)v430 = *((_OWORD *)this + 5);
    v98 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)__p, v430, *(int8x16_t *)v430, v97);
    v101 = v100 + (double)(uint64_t)v98;
    if (v101 >= 0.0)
    {
      v114 = *((_QWORD *)this + 146);
      v99.i64[0] = *(_QWORD *)(v114 + 872);
      v115 = vcvtpd_s64_f64(v101 / *(double *)v99.i64);
      *(_OWORD *)((char *)this + 328) = 0u;
      *(_OWORD *)((char *)this + 344) = 0u;
      *(_OWORD *)((char *)this + 360) = 0u;
      *(_OWORD *)((char *)this + 376) = 0u;
      *(_OWORD *)((char *)this + 392) = 0u;
      *(_OWORD *)((char *)this + 408) = 0u;
      *(_OWORD *)((char *)this + 424) = 0u;
      *(_OWORD *)((char *)this + 440) = 0u;
      *(_OWORD *)((char *)this + 456) = 0u;
      *(_OWORD *)((char *)this + 472) = 0u;
      *(_OWORD *)((char *)this + 488) = 0u;
      *(_OWORD *)((char *)this + 504) = 0u;
      *(_OWORD *)((char *)this + 520) = 0u;
      *(_OWORD *)((char *)this + 536) = 0u;
      *(_OWORD *)((char *)this + 552) = 0u;
      *(_OWORD *)((char *)this + 568) = 0u;
      *(_OWORD *)((char *)this + 584) = 0u;
      *(_OWORD *)((char *)this + 600) = 0u;
      *(_OWORD *)((char *)this + 616) = 0u;
      *(_OWORD *)((char *)this + 632) = 0u;
      *(_OWORD *)((char *)this + 648) = 0u;
      *(_OWORD *)((char *)this + 664) = 0u;
      *(_OWORD *)((char *)this + 680) = 0u;
      *(_OWORD *)((char *)this + 696) = 0u;
      *(_OWORD *)((char *)this + 708) = 0u;
      v116 = *(_QWORD *)(v114 + 872);
      *(_QWORD *)&v421 = 0;
      v420 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v420, 0, (int8x16_t)v116, v99);
      v117.i64[0] = *(_QWORD *)(v114 + 880);
      *(_QWORD *)&v397 = 0;
      v396 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v396, 0, v117, v118);
      v121 = __OFSUB__(v115, 1);
      v122 = v115 - 1;
      if (v122 < 0 == v121)
      {
        v123 = v96;
        if (v94)
          v124 = 1;
        else
          v124 = (*(_QWORD *)&v96 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        v125 = v124;
        v342 = vdupq_n_s64(0x7FF8000000000000uLL);
        while (1)
        {
          if (((*(_OWORD *)v445 = *((_OWORD *)this + 5),
                 *(_QWORD *)&v395[0] = CNTimeSpan::operator+((uint64_t)v445, &v420, *(int8x16_t *)v445, v120),
                 v395[1] = v126,
                 (v129 = CNTimeSpan::operator+((uint64_t)v395, &v396, v127, v128)) != 0)
             || (*(_QWORD *)&v130 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            && (v125 & 1) != 0)
          {
            v132 = v129 == v94 ? v123 <= v130 : v129 > v94;
          }
          else
          {
            v132 = v123 <= v130;
          }
          v133 = v132 ? __p : v395;
          *(_OWORD *)v356 = *v133;
          *(_OWORD *)v430 = 0uLL;
          v431 = v342;
          v432 = v342;
          v433 = v342;
          v434 = v342;
          v435 = v342;
          v436 = v342;
          v437 = v342;
          v438 = v342;
          v439 = v342;
          v440 = v342;
          EstimatorPredictAndUpdateArguments = raven::RavenPNTEstimator::GetEstimatorPredictAndUpdateArguments((int8x16_t *)this, (uint64_t)v445, (int8x16_t *)v356, (uint64_t)v430, *(double *)v342.i64, v131);
          if (!EstimatorPredictAndUpdateArguments)
            break;
          v425 = raven::RavenPNTEstimator::PredictAndUpdate((uint64_t)this, (__n128 *)v430);
          v8 |= v425;
          if ((sub_18D057F50(&v425) & 1) != 0)
            return v8;
          if (v122)
            v135 = v132;
          else
            v135 = 1;
          --v122;
          if ((v135 & 1) != 0)
            goto LABEL_130;
        }
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)EstimatorPredictAndUpdateArguments) <= 1)
        {
          LOWORD(v425) = 12;
          LOBYTE(v413) = 1;
          v143 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)__p, "Could not get predict and update arguments");
          if (*((char *)this + 2511) >= 0)
            LOBYTE(v149) = (_BYTE)v143;
          else
            v149 = *v143;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v425, (unsigned __int8 *)&v413, "%s", v144, v145, v146, v147, v148, v149);
        }
      }
LABEL_130:
      raven::RavenEstimator::StoreHistoricalSolution(this, v119);
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v98) <= 1)
      {
        LOWORD(v420) = 12;
        LOBYTE(v396) = 1;
        *(_QWORD *)v430 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        *(_QWORD *)&v430[8] = v102;
        v104 = *((_QWORD *)this + 10);
        v103 = *((double *)this + 11);
        v105 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        v107 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v430, "Estimator time is greater than event time,%.3lf > %.3lf", v103 + (double)v104, v106 + (double)v105);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v113) = (_BYTE)v107;
        else
          v113 = *v107;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v420, (unsigned __int8 *)&v396, "%s", v108, v109, v110, v111, v112, v113);
      }
      return v8 | 0x40;
    }
  }
  return v8;
}

void sub_18D06D35C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF23068);
  _Unwind_Resume(a1);
}

uint64_t sub_18D06D58C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void raven::RavenPNTEstimator::GetInitializationArgs(uint64_t a1@<X0>, int8x16_t *a2@<X1>, _BYTE *a3@<X8>, int8x16_t a4@<Q1>)
{
  uint64_t v6;
  int8x16_t v7;
  uint64_t v9;
  void *v10;
  int8x16_t v11;
  int8x16_t v12;
  double v13;
  void *v14;
  cnprint::CNPrinter *v15;
  void **v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  cnprint::CNPrinter *v28;
  void **v29;
  char v30;
  int v31;
  double v32;
  int8x16_t v33;
  cnprint::CNPrinter *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  cnprint::CNPrinter *v51;
  void **v52;
  char v53;
  cnprint::CNPrinter *v54;
  void **v55;
  char v56;
  cnprint::CNPrinter *v57;
  void **v58;
  char v59;
  uint64_t v60;
  void *v61;
  int8x16_t v62;
  int8x16_t v63;
  double v64;
  void *v65;
  double v66;
  double v67;
  _QWORD *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  int8x16_t v88;
  int8x16_t v89;
  int v90;
  int v91;
  _QWORD *v92;
  int v93;
  int v94;
  double v95;
  _BOOL4 v96;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  _QWORD *v100;
  double v101;
  int v102;
  _QWORD *v103;
  _QWORD *v104;
  double v105;
  _BOOL4 v111;
  uint64_t v112;
  int v113;
  double v114;
  uint64_t v115;
  int v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  double v136;
  double v137;
  double v138;
  double v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE v150[136];
  _BYTE v151[112];
  _BYTE v152[56];
  void *__p;
  __int128 v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  _QWORD v169[5];
  uint64_t v170;
  void *v171;
  __int128 v172;
  uint64_t v173;
  double *v174;
  uint64_t v175;
  void *v176;
  __int128 v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  void *v195[2];
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  double v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  int8x16_t v206;
  uint64_t v207;
  float64x2_t v208;
  __int128 v209;
  uint64_t v210;
  double v211;
  double v212;
  double v213;
  double v214;
  void *v215;
  uint64_t v216;
  char v217;
  _QWORD v218[2];
  int v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD v222[3];
  int64x2_t v223;
  uint64_t v224;
  _QWORD v225[6];
  __int128 v226;
  uint64_t v227;
  _OWORD v228[2];

  v6 = a1 + 19432;
  *a3 = 0;
  a3[296] = 0;
  v227 = a1;
  v7 = *a2;
  v228[0] = *a2;
  if (!*(_BYTE *)(a1 + 19664))
  {
    v15 = (cnprint::CNPrinter *)sub_18D0778AC(v195, "no previous solution");
    if (cnprint::CNPrinter::GetLogLevel(v15) > 1)
      goto LABEL_77;
    LOWORD(__p) = 12;
    LOBYTE(v176) = 1;
    v16 = v195;
    if (SBYTE7(v196) < 0)
      v16 = (void **)v195[0];
    v17 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v228, "Could not initialize - %s", (const char *)v16);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v23) = v17;
    else
      v23 = *(_QWORD *)(a1 + 2488);
LABEL_55:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v176, "%s", v18, v19, v20, v21, v22, v23);
    goto LABEL_77;
  }
  v9 = CNTimeSpan::operator-((uint64_t)a2, (_QWORD *)(a1 + 20840), v7, a4);
  v195[0] = (void *)v9;
  v195[1] = v10;
  if (v9 < 0 || (v13 = *(double *)&v10, *(double *)&v10 < 0.0))
  {
    v14 = (void *)CNTimeSpan::operator-((double *)v195, v11, v12);
    v13 = v24;
  }
  else
  {
    v14 = (void *)v9;
  }
  v25 = *(_QWORD *)(a1 + 1168);
  v11.i64[0] = *(_QWORD *)(v25 + 896);
  __p = 0;
  *(_QWORD *)&v154 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&__p, 0, v11, v12);
  if (!v14 && (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_17:
    v26.i64[0] = v154;
    goto LABEL_18;
  }
  if (__p || (v26.i64[0] = v154, ((unint64_t)v154 & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000))
  {
    if (v14 != __p)
    {
      if ((uint64_t)v14 > (uint64_t)__p)
        goto LABEL_19;
      goto LABEL_26;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (*(double *)v26.i64 < v13)
  {
LABEL_19:
    v28 = (cnprint::CNPrinter *)sub_18D0778AC(v195, "solution too old");
    if (cnprint::CNPrinter::GetLogLevel(v28) > 1)
      goto LABEL_77;
    LOWORD(__p) = 12;
    LOBYTE(v176) = 1;
    v29 = v195;
    if (SBYTE7(v196) < 0)
      v29 = (void **)v195[0];
    v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v228, "Could not initialize - %s", (const char *)v29);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v23) = v30;
    else
      v23 = *(_QWORD *)(a1 + 2488);
    goto LABEL_55;
  }
LABEL_26:
  if (*(_BYTE *)(v6 + 449) != 2)
  {
    v51 = (cnprint::CNPrinter *)sub_18D0778AC(v195, "previous solution unhealthy");
    if (cnprint::CNPrinter::GetLogLevel(v51) > 1)
      goto LABEL_77;
    LOWORD(__p) = 12;
    LOBYTE(v176) = 1;
    v52 = v195;
    if (SBYTE7(v196) < 0)
      v52 = (void **)v195[0];
    v53 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v228, "Could not initialize - %s", (const char *)v52);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v23) = v53;
    else
      v23 = *(_QWORD *)(a1 + 2488);
    goto LABEL_55;
  }
  if (!*(_BYTE *)(v6 + 448))
  {
    v57 = (cnprint::CNPrinter *)sub_18D0778AC(v195, "previous solution uninitialized");
    if (cnprint::CNPrinter::GetLogLevel(v57) > 1)
      goto LABEL_77;
    LOWORD(__p) = 12;
    LOBYTE(v176) = 1;
    v58 = v195;
    if (SBYTE7(v196) < 0)
      v58 = (void **)v195[0];
    v59 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v228, "Could not initialize - %s", (const char *)v58);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v23) = v59;
    else
      v23 = *(_QWORD *)(a1 + 2488);
    goto LABEL_55;
  }
  if (!*(_BYTE *)(v6 + 1704) || !*(_BYTE *)(v6 + 1784))
  {
    v54 = (cnprint::CNPrinter *)sub_18D0778AC(v195, "previous solution missing device pos/vel");
    if (cnprint::CNPrinter::GetLogLevel(v54) > 1)
      goto LABEL_77;
    LOWORD(__p) = 12;
    LOBYTE(v176) = 1;
    v55 = v195;
    if (SBYTE7(v196) < 0)
      v55 = (void **)v195[0];
    v56 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v228, "Could not initialize - %s", (const char *)v55);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v23) = v56;
    else
      v23 = *(_QWORD *)(a1 + 2488);
    goto LABEL_55;
  }
  if (!*(_BYTE *)(v6 + 1864))
  {
    if (!*(_BYTE *)v6)
    {
      sub_18D0778AC(v195, "previous solution missing attitude");
      sub_18D06EB48((cnprint::CNPrinter *)&v227, (uint64_t)v195);
      goto LABEL_77;
    }
    v60 = CNTimeSpan::operator-(a1 + 20840, (_QWORD *)(a1 + 19448), v26, v27);
    v195[0] = (void *)v60;
    v195[1] = v61;
    if (v60 < 0 || (v64 = *(double *)&v61, *(double *)&v61 < 0.0))
    {
      v65 = (void *)CNTimeSpan::operator-((double *)v195, v62, v63);
      v64 = v66;
    }
    else
    {
      v65 = (void *)v60;
    }
    v62.i64[0] = *(_QWORD *)(v25 + 904);
    __p = 0;
    *(_QWORD *)&v154 = 0;
    CNTimeSpan::SetTimeSpan((uint64_t *)&__p, 0, v62, v63);
    if (v65 || (*(_QWORD *)&v64 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if (!__p)
      {
        v67 = *(double *)&v154;
        if (((unint64_t)v154 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
LABEL_70:
          if (v67 >= v64)
            goto LABEL_31;
LABEL_76:
          sub_18D0778AC(v195, "previous solution information out of synch");
          sub_18D06EB48((cnprint::CNPrinter *)&v227, (uint64_t)v195);
LABEL_77:
          if (SBYTE7(v196) < 0)
            operator delete(v195[0]);
          return;
        }
      }
      if (v65 != __p)
      {
        if ((uint64_t)v65 <= (uint64_t)__p)
          goto LABEL_31;
        goto LABEL_76;
      }
    }
    v67 = *(double *)&v154;
    goto LABEL_70;
  }
LABEL_31:
  if (*(_DWORD *)(v6 + 8168) != 350)
  {
    sub_18D0778AC(v195, "accelerometer cache not yet full");
    sub_18D06EB48((cnprint::CNPrinter *)&v227, (uint64_t)v195);
    goto LABEL_77;
  }
  if (*(_DWORD *)(a1 + 44448) != 350)
  {
    sub_18D0778AC(v195, "gyro cache not yet full");
    sub_18D06EB48((cnprint::CNPrinter *)&v227, (uint64_t)v195);
    goto LABEL_77;
  }
  v226 = *(_OWORD *)(a1 + 20840);
  v225[1] = 0;
  v225[2] = 0;
  v225[0] = &unk_1E25C3050;
  v222[0] = &unk_1E25C2C38;
  v222[1] = 0;
  v223 = vdupq_n_s64(0x7FF8000000000000uLL);
  v222[2] = 0;
  v224 = 0x7FF8000000000000;
  v31 = sub_18D190038(a1 + 44440, (double *)&v226, (uint64_t)v222, *(double *)v223.i64, v27);
  if (v31 | sub_18D190980(a1 + 27592, (double *)&v226, (uint64_t)v225, v32, v33))
  {
    sub_18D099F88((uint64_t)v195);
    sub_18D076A18(v195, (uint64_t)"missing sensor data at desired initialization time,gyro,", 56);
    v68 = (_QWORD *)std::ostream::operator<<();
    sub_18D076A18(v68, (uint64_t)",accel,", 7);
    std::ostream::operator<<();
    sub_18D076DE8((uint64_t)&v195[1], &__p);
    sub_18D06EB48((cnprint::CNPrinter *)&v227, (uint64_t)&__p);
    if (SHIBYTE(v154) < 0)
      operator delete(__p);
    sub_18D09A074((uint64_t)v195);
  }
  else
  {
    sub_18D1912C8((uint64_t)v218);
    v34 = (cnprint::CNPrinter *)sub_18D1912F4((int64x2_t *)v195);
    *(_OWORD *)v195 = v226;
    if (!*(_BYTE *)(v6 + 232))
      goto LABEL_130;
    v217 = *(_BYTE *)(v6 + 448);
    v196 = *(_OWORD *)(v6 + 1712);
    v197 = *(_QWORD *)(a1 + 21160);
    v35 = v220;
    *v220 = *(_QWORD *)(a1 + 21168);
    v36 = v219;
    v35[v219] = *(_QWORD *)(a1 + 21176);
    v35[2 * v36] = *(_QWORD *)(a1 + 21184);
    v35[1] = *(_QWORD *)(a1 + 21176);
    v35[(int)v36 + 1] = *(_QWORD *)(a1 + 21192);
    v37 = &v35[2 * (int)v36];
    v37[1] = *(_QWORD *)(a1 + 21200);
    v35[2] = *(_QWORD *)(a1 + 21184);
    v35[(int)v36 + 2] = *(_QWORD *)(a1 + 21200);
    v37[2] = *(_QWORD *)(a1 + 21208);
    v198 = *(_OWORD *)(v6 + 1792);
    v199 = *(double *)(a1 + 21240);
    LODWORD(v37) = 3 * v36;
    v35[3 * (int)v36 + 3] = *(_QWORD *)(a1 + 21248);
    v38 = 4 * v36;
    v35[(int)((4 * v36) | 3)] = *(_QWORD *)(a1 + 21256);
    LODWORD(v36) = 5 * v36;
    v35[(int)v36 + 3] = *(_QWORD *)(a1 + 21264);
    v35[(int)v37 + 4] = *(_QWORD *)(a1 + 21256);
    v35[v38 + 4] = *(_QWORD *)(a1 + 21272);
    v35[(int)v36 + 4] = *(_QWORD *)(a1 + 21280);
    v35[(int)v37 + 5] = *(_QWORD *)(a1 + 21264);
    v35[v38 + 5] = *(_QWORD *)(a1 + 21280);
    v35[(int)v36 + 5] = *(_QWORD *)(a1 + 21288);
    v178 = 0x400000004;
    v176 = &unk_1E25C7FA0;
    v177 = xmmword_18D313080;
    v179 = &v180;
    if (*(_BYTE *)(v6 + 1864))
    {
      v39 = *(double *)(a1 + 21304);
      v40 = *(double *)(a1 + 21312);
      *(double *)&v200 = v39;
      *((double *)&v200 + 1) = v40;
      v41 = *(double *)(a1 + 21320);
      v42 = *(double *)(a1 + 21328);
      *(double *)&v201 = v41;
      *((double *)&v201 + 1) = v42;
      v43 = *(_QWORD *)(a1 + 21344);
      v44 = *(_QWORD *)(a1 + 21352);
      v45 = *(_QWORD *)(a1 + 21360);
      v180 = *(_QWORD *)(a1 + 21336);
      v181 = v43;
      v46 = *(_QWORD *)(a1 + 21368);
      v184 = v43;
      v185 = v46;
      v47 = *(_QWORD *)(a1 + 21376);
      v188 = v44;
      v189 = v47;
      v48 = *(_QWORD *)(a1 + 21384);
      v192 = v45;
      v193 = v48;
      v49 = *(_QWORD *)(a1 + 21392);
      v182 = v44;
      v183 = v45;
      v186 = v47;
      v187 = v48;
      v50 = *(_OWORD *)(v6 + 1968);
      v190 = v49;
      v191 = v50;
      v194 = v50;
    }
    else
    {
      if (!*(_BYTE *)v6)
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      v69 = *(_OWORD *)(v6 + 128);
      v200 = *(_OWORD *)(v6 + 112);
      v201 = v69;
      *(_QWORD *)&v69 = *(_QWORD *)(a1 + 19584);
      v70 = *(_QWORD *)(a1 + 19592);
      v71 = *(_QWORD *)(a1 + 19600);
      v180 = *(_QWORD *)(a1 + 19576);
      v181 = v69;
      v72 = *(_QWORD *)(a1 + 19608);
      v184 = v69;
      v185 = v72;
      v73 = *(_QWORD *)(a1 + 19616);
      v188 = v70;
      v189 = v73;
      *(_QWORD *)&v69 = *(_QWORD *)(a1 + 19624);
      v192 = v71;
      v193 = v69;
      v74 = *(_QWORD *)(a1 + 19632);
      v182 = v70;
      v183 = v71;
      v186 = v73;
      v187 = v69;
      v75 = *(_OWORD *)(v6 + 208);
      v190 = v74;
      v191 = v75;
      v194 = v75;
      if (!cnprint::CNPrinter::GetLogLevel(v34))
      {
        LOWORD(__p) = 12;
        LOBYTE(v171) = 0;
        v76 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)a2, "Set the initial attitude based on the last attitude event");
        if (*(char *)(a1 + 2511) >= 0)
          LOBYTE(v82) = v76;
        else
          v82 = *(_QWORD *)(a1 + 2488);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v171, "%s", v77, v78, v79, v80, v81, v82);
      }
      v40 = *((double *)&v200 + 1);
      v39 = *(double *)&v200;
      v42 = *((double *)&v201 + 1);
      v41 = *(double *)&v201;
    }
    v83 = sqrt(v40 * v40 + v39 * v39 + v41 * v41 + v42 * v42);
    if (fabs(v83) >= 2.22044605e-16)
    {
      v85 = v39 / v83;
      v86 = v40 / v83;
      v87 = v41 / v83;
      v84 = v42 / v83;
    }
    else
    {
      v84 = 1.0;
      v85 = 0.0;
      v86 = 0.0;
      v87 = 0.0;
    }
    v155 = 0x300000004;
    __p = &unk_1E25C7F70;
    v154 = xmmword_18D3130A0;
    v156 = &v157;
    v157 = *(_QWORD *)&v84;
    v158 = v87;
    v161 = -v87;
    v162 = v84;
    v165 = v86;
    v166 = -v85;
    v159 = -v86;
    v160 = -v85;
    v163 = v85;
    v164 = -v86;
    v167 = v84;
    v168 = -v87;
    sub_18D191348((uint64_t)&__p, (uint64_t)&v171);
    sub_18D191418((uint64_t)&v171, (uint64_t)&v176, (uint64_t)&__p);
    sub_18D191480((uint64_t)v169, (uint64_t)&v171);
    sub_18D1913B4((uint64_t)&__p, (uint64_t)v169, (uint64_t)v150);
    v155 = 0x300000001;
    __p = &unk_1E25C6C50;
    v156 = &v157;
    v154 = xmmword_18D314670;
    v157 = 0x700000006;
    LODWORD(v158) = 8;
    sub_18D16169C((uint64_t)&__p, (uint64_t)v169);
    sub_18D04F764((uint64_t)&__p, (uint64_t)v218, (uint64_t)v169, (uint64_t)v169);
    sub_18D16171C((uint64_t)&__p, (uint64_t)v150);
    if (!*(_BYTE *)(v6 + 232))
LABEL_130:
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    if (*(_BYTE *)(v6 + 1984))
    {
      v202 = *(_OWORD *)(a1 + 21424);
      v203 = *(_QWORD *)(a1 + 21440);
      v90 = v219;
      v91 = 9 * v219;
      v92 = v220;
      v220[9 * v219 + 9] = *(_QWORD *)(a1 + 21448);
      v93 = 10 * v90;
      v92[v93 + 9] = *(_QWORD *)(a1 + 21456);
      v94 = 11 * v90;
      v92[v94 + 9] = *(_QWORD *)(a1 + 21464);
      v92[v91 + 10] = *(_QWORD *)(a1 + 21456);
      v92[v93 + 10] = *(_QWORD *)(a1 + 21472);
      v92[v94 + 10] = *(_QWORD *)(a1 + 21480);
      v92[v91 + 11] = *(_QWORD *)(a1 + 21464);
      v92[v93 + 11] = *(_QWORD *)(a1 + 21480);
      v95 = *(double *)(a1 + 21488);
    }
    else
    {
      v202 = 0uLL;
      v203 = 0;
      v96 = raven::RavenPNTEstimator::UseHighAccelerationParameters((raven::RavenPNTEstimator *)a1, v88, v89);
      v97 = 744;
      if (v96)
        v97 = 752;
      v95 = *(double *)(*(_QWORD *)(a1 + 1168) + v97) * *(double *)(*(_QWORD *)(a1 + 1168) + v97);
      v90 = v219;
      v92 = v220;
      *(double *)&v220[9 * v219 + 9] = v95;
      *(double *)&v92[10 * v90 + 10] = v95;
      v94 = 11 * v90;
    }
    *(double *)&v92[v94 + 11] = v95;
    if (*(_BYTE *)(v6 + 2064))
    {
      v204 = *(_OWORD *)(a1 + 21504);
      v205 = *(_QWORD *)(a1 + 21520);
      v92[12 * v90 + 12] = *(_QWORD *)(a1 + 21528);
      v92[13 * v90 + 12] = *(_QWORD *)(a1 + 21536);
      v98 = 14 * v90;
      v92[14 * v90 + 12] = *(_QWORD *)(a1 + 21544);
      v99 = &v92[12 * v90];
      v99[13] = *(_QWORD *)(a1 + 21536);
      v100 = &v92[13 * v90];
      v100[13] = *(_QWORD *)(a1 + 21552);
      v92[14 * v90 + 13] = *(_QWORD *)(a1 + 21560);
      v99[14] = *(_QWORD *)(a1 + 21544);
      v100[14] = *(_QWORD *)(a1 + 21560);
      v101 = *(double *)(a1 + 21568);
    }
    else
    {
      v204 = 0uLL;
      v205 = 0;
      v101 = *(double *)(*(_QWORD *)(a1 + 1168) + 728) * *(double *)(*(_QWORD *)(a1 + 1168) + 728);
      *(double *)&v92[12 * v90 + 12] = v101;
      *(double *)&v92[13 * v90 + 13] = v101;
      v98 = 14 * v90;
    }
    *(double *)&v92[v98 + 14] = v101;
    if (*(_BYTE *)(v6 + 2144))
    {
      v206 = *(int8x16_t *)(a1 + 21584);
      v207 = *(_QWORD *)(a1 + 21600);
      v92[15 * v90 + 15] = *(_QWORD *)(a1 + 21608);
      v92[16 * (uint64_t)v90 + 15] = *(_QWORD *)(a1 + 21616);
      v102 = 17 * v90;
      v92[17 * v90 + 15] = *(_QWORD *)(a1 + 21624);
      v103 = &v92[15 * v90];
      v103[16] = *(_QWORD *)(a1 + 21616);
      v104 = &v92[16 * v90];
      v104[16] = *(_QWORD *)(a1 + 21632);
      v92[17 * v90 + 16] = *(_QWORD *)(a1 + 21640);
      v103[17] = *(_QWORD *)(a1 + 21624);
      v104[17] = *(_QWORD *)(a1 + 21640);
      v105 = *(double *)(a1 + 21648);
    }
    else
    {
      __asm { FMOV            V0.2D, #1.0 }
      v206 = _Q0;
      v207 = 0x3FF0000000000000;
      v111 = raven::RavenPNTEstimator::UseHighAccelerationParameters((raven::RavenPNTEstimator *)a1, _Q0, v89);
      v112 = 768;
      if (v111)
        v112 = 776;
      v105 = *(double *)(*(_QWORD *)(a1 + 1168) + v112) * *(double *)(*(_QWORD *)(a1 + 1168) + v112);
      *(double *)&v92[15 * v90 + 15] = v105;
      *(double *)&v92[16 * (uint64_t)v90 + 16] = v105;
      v102 = 17 * v90;
    }
    *(double *)&v92[v102 + 17] = v105;
    if (*(_BYTE *)(v6 + 2224))
    {
      v208 = vmulq_f64(*(float64x2_t *)(a1 + 21664), (float64x2_t)vdupq_n_s64(0x412E848000000000uLL));
      *(double *)&v92[18 * v90 + 18] = *(double *)(a1 + 21680) * 1.0e12;
      v113 = 19 * v90;
      *(double *)&v92[19 * v90 + 18] = *(double *)(a1 + 21688) * 1.0e12;
      *(double *)&v92[18 * v90 + 19] = *(double *)(a1 + 21688) * 1.0e12;
      v114 = *(double *)(a1 + 21696) * 1.0e12;
    }
    else
    {
      v208 = 0uLL;
      v115 = *(_QWORD *)(a1 + 1168);
      v114 = *(double *)(v115 + 1264) * *(double *)(v115 + 1264);
      *(double *)&v92[18 * v90 + 18] = *(double *)(v115 + 1256) * *(double *)(v115 + 1256);
      v113 = 19 * v90;
    }
    *(double *)&v92[v113 + 19] = v114;
    if (*(_BYTE *)(v6 + 1504))
    {
      v209 = *(_OWORD *)(a1 + 20944);
      v210 = *(_QWORD *)(a1 + 20960);
      v92[20 * v90 + 20] = *(_QWORD *)(a1 + 20968);
      v92[21 * v90 + 20] = *(_QWORD *)(a1 + 20976);
      v116 = 22 * v90;
      v92[22 * v90 + 20] = *(_QWORD *)(a1 + 20984);
      v117 = &v92[20 * v90];
      v117[21] = *(_QWORD *)(a1 + 20976);
      v118 = &v92[21 * v90];
      v118[21] = *(_QWORD *)(a1 + 20992);
      v92[22 * v90 + 21] = *(_QWORD *)(a1 + 21000);
      v117[22] = *(_QWORD *)(a1 + 20984);
      v118[22] = *(_QWORD *)(a1 + 21000);
      v119 = (_QWORD *)(a1 + 21008);
    }
    else
    {
      v209 = v196;
      v210 = v197;
      v92[20 * v90 + 20] = *(_QWORD *)(a1 + 21168);
      v92[21 * v90 + 20] = *(_QWORD *)(a1 + 21176);
      v92[22 * v90 + 20] = *(_QWORD *)(a1 + 21184);
      v120 = &v92[20 * v90];
      v120[21] = *(_QWORD *)(a1 + 21176);
      v121 = &v92[21 * v90];
      v121[21] = *(_QWORD *)(a1 + 21192);
      v92[22 * v90 + 21] = *(_QWORD *)(a1 + 21200);
      v119 = (_QWORD *)(a1 + 21208);
      v120[22] = *(_QWORD *)(a1 + 21184);
      v121[22] = *(_QWORD *)(a1 + 21200);
      v116 = 22 * v90;
    }
    v92[v116 + 22] = *v119;
    if (*(_BYTE *)(v6 + 1584) && *(_BYTE *)(v6 + 1585))
    {
      v123 = *(double *)(a1 + 21032);
      v211 = *(double *)(a1 + 21024);
      v122 = v211;
      v212 = v123;
      v125 = *(double *)(a1 + 21048);
      v213 = *(double *)(a1 + 21040);
      v124 = v213;
      v214 = v125;
      v173 = 0x400000003;
      v171 = &unk_1E25C7940;
      v174 = (double *)&v175;
      v172 = xmmword_18D3130B0;
      sub_18D04BE88((uint64_t)&v171, 0.0);
      v126 = v174;
      *v174 = v123;
      v127 = HIDWORD(v172);
      v126[SHIDWORD(v172)] = v122;
      v126[1] = v124;
      v126[2] = v125;
      v126[(2 * v127) | 1] = v122;
      v126[3 * v127 + 2] = v122;
      v178 = 0x400000004;
      v176 = &unk_1E25C7FA0;
      v177 = xmmword_18D313080;
      v179 = &v180;
      if (!*(_BYTE *)(v6 + 232))
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      v128 = *(_QWORD *)(a1 + 21064);
      v129 = *(_QWORD *)(a1 + 21072);
      v130 = *(_QWORD *)(a1 + 21080);
      v180 = *(_QWORD *)(a1 + 21056);
      v181 = v128;
      v131 = *(_QWORD *)(a1 + 21088);
      v184 = v128;
      v185 = v131;
      v132 = *(_QWORD *)(a1 + 21096);
      v188 = v129;
      v189 = v132;
      v133 = *(_QWORD *)(a1 + 21104);
      v192 = v130;
      v193 = v133;
      v134 = *(_QWORD *)(a1 + 21112);
      v182 = v129;
      v183 = v130;
      v186 = v132;
      v187 = v133;
      v135 = *(_OWORD *)(a1 + 21120);
      v190 = v134;
      v191 = v135;
      v194 = v135;
      v155 = 0x300000001;
      __p = &unk_1E25C6C50;
      v156 = &v157;
      v154 = xmmword_18D314670;
      v157 = 0x1800000017;
      LODWORD(v158) = 25;
      sub_18D16169C((uint64_t)&__p, (uint64_t)v152);
      sub_18D191418((uint64_t)&v171, (uint64_t)&v176, (uint64_t)v169);
      sub_18D191480((uint64_t)v150, (uint64_t)&v171);
      sub_18D1913B4((uint64_t)v169, (uint64_t)v150, (uint64_t)v151);
      sub_18D04F764((uint64_t)&__p, (uint64_t)v218, (uint64_t)v152, (uint64_t)v152);
      sub_18D16171C((uint64_t)&__p, (uint64_t)v151);
    }
    else
    {
      v136 = sqrt(*((double *)&v198 + 1) * *((double *)&v198 + 1) + *(double *)&v198 * *(double *)&v198 + v199 * v199);
      v211 = v136;
      if (v136 <= 0.000000015)
      {
        v137 = 0.577350269;
        v138 = 0.577350269;
        v139 = 0.577350269;
      }
      else
      {
        v137 = *(double *)&v198 / v136;
        v138 = *((double *)&v198 + 1) / v136;
        v139 = v199 / v136;
      }
      v212 = v137;
      v213 = v138;
      v214 = v139;
      v92[23 * v90 + 23] = *(_QWORD *)(a1 + 21248);
      v92[24 * v90 + 23] = *(_QWORD *)(a1 + 21256);
      v92[25 * v90 + 23] = *(_QWORD *)(a1 + 21264);
      v140 = &v92[23 * v90];
      v140[24] = *(_QWORD *)(a1 + 21256);
      v141 = &v92[24 * v90];
      v141[24] = *(_QWORD *)(a1 + 21272);
      v142 = &v92[25 * v90];
      v142[24] = *(_QWORD *)(a1 + 21280);
      v140[25] = *(_QWORD *)(a1 + 21264);
      v141[25] = *(_QWORD *)(a1 + 21280);
      v142[25] = *(_QWORD *)(a1 + 21288);
    }
    sub_18D1917AC((uint64_t)v169, (uint64_t)v218);
    sub_18D1916B0((uint64_t)&v171, (uint64_t)v169);
    sub_18D19162C((uint64_t)&v176, (uint64_t)&v171);
    sub_18D1914F0((uint64_t)&__p, (uint64_t)&v176);
    v143 = sub_18D053AA8((uint64_t)&v215, (uint64_t)&__p);
    v144 = v157;
    __p = &unk_1E25C7160;
    v157 = 0;
    if (v144)
      MEMORY[0x18D78B5BC](v144, 0x1000C8000313F17, v143);
    __p = &unk_1E25C5E70;
    v145 = v180;
    v176 = &unk_1E25C7160;
    v180 = 0;
    if (v145)
      MEMORY[0x18D78B5BC](v145, 0x1000C8000313F17, v143);
    v176 = &unk_1E25C5E70;
    v146 = v175;
    v171 = &unk_1E25C7160;
    v175 = 0;
    if (v146)
      MEMORY[0x18D78B5BC](v146, 0x1000C8000313F17, v143);
    v171 = &unk_1E25C5E70;
    v147 = v170;
    v169[0] = &unk_1E25C7160;
    v170 = 0;
    if (v147)
      MEMORY[0x18D78B5BC](v147, 0x1000C8000313F17, v143);
    sub_18D191898((uint64_t)a3, (uint64_t)v195);
    v148 = v216;
    v215 = &unk_1E25C7160;
    v216 = 0;
    if (v148)
      MEMORY[0x18D78B5BC](v148, 0x1000C8000313F17);
    v149 = v221;
    v218[0] = &unk_1E25C7160;
    v221 = 0;
    if (v149)
      MEMORY[0x18D78B5BC](v149, 0x1000C8000313F17);
  }
}

void sub_18D06E924(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;

  v3 = STACK[0x518];
  STACK[0x4F0] = (unint64_t)&unk_1E25C7160;
  STACK[0x518] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  v4 = STACK[0x558];
  STACK[0x530] = (unint64_t)&unk_1E25C7160;
  STACK[0x558] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  sub_18D1C5064(v1);
  _Unwind_Resume(a1);
}

void sub_18D06EB48(cnprint::CNPrinter *a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int16 v14;

  v4 = *(_QWORD *)a1;
  if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    v14 = 12;
    v13 = 1;
    if (*(char *)(a2 + 23) >= 0)
      v5 = (const char *)a2;
    else
      v5 = *(const char **)a2;
    v6 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)a1 + 8, "Could not initialize - %s", v5);
    if (*(char *)(v4 + 2511) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *(_QWORD *)(v4 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
  }
}

uint64_t **raven::RavenSolutionPostprocessor::PushToClampingHistory(uint64_t **this, const raven::RavenSolutionEvent *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  int8x16_t v70;
  int8x16_t v71;
  uint64_t *v72;
  unint64_t v73;
  void **v74;
  unint64_t v75;
  uint64_t *v76;
  void **v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int v80;
  char *v81;
  _QWORD *v82;
  char v83;
  char *v84;
  unint64_t v85;
  char **v86;
  char *v87;
  unint64_t v88;
  void **v89;
  char *v90;
  uint64_t *v91;
  char *v92;
  uint64_t *v93;
  _BYTE *v94;
  uint64_t **v95;
  char **v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t *v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  unint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  int64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t **v154;
  uint64_t *v155;
  uint64_t *v156;
  char *v157;
  char *v158;

  if (*((_BYTE *)a2 + 209) != 2 || !*((_BYTE *)a2 + 1264))
    return this;
  v3 = this[4];
  v4 = this[3];
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
    v6 = 0;
  else
    v6 = 2 * ((char *)v3 - (char *)v4) - 1;
  v7 = (unint64_t)this[6];
  v154 = this;
  v8 = (unint64_t)this[7] + v7;
  if (v6 != v8)
  {
    v9 = this;
    goto LABEL_63;
  }
  if (v7 < 0x10)
  {
    v24 = v5 >> 3;
    v25 = this[5];
    v26 = this[2];
    if (v5 >> 3 < (unint64_t)(v25 - v26))
    {
      v27 = operator new(0x3600uLL);
      v28 = (uint64_t)v27;
      if (v25 == v3)
      {
        v9 = v154;
        if (v4 == v26)
        {
          if (v3 == v4)
            v114 = 1;
          else
            v114 = ((char *)v25 - (char *)v4) >> 2;
          v115 = 2 * v114;
          v116 = (uint64_t *)sub_18D07BF3C(v114);
          v4 = (uint64_t *)((char *)v116 + ((v115 + 6) & 0xFFFFFFFFFFFFFFF8));
          v118 = (char *)v154[3];
          v119 = v4;
          v120 = (char *)v154[4] - v118;
          if (v120)
          {
            v119 = (uint64_t *)((char *)v4 + (v120 & 0xFFFFFFFFFFFFFFF8));
            v121 = 8 * (v120 >> 3);
            v122 = (uint64_t *)((char *)v116 + ((v115 + 6) & 0xFFFFFFFFFFFFFFF8));
            do
            {
              v123 = *(_QWORD *)v118;
              v118 += 8;
              *v122++ = v123;
              v121 -= 8;
            }
            while (v121);
          }
          v124 = v154[2];
          v154[2] = v116;
          v154[3] = v4;
          v154[4] = v119;
          v154[5] = &v116[v117];
          if (v124)
          {
            operator delete(v124);
            v4 = v154[3];
          }
        }
        *(v4 - 1) = v28;
        v125 = v154[3];
        v126 = v154[4];
        v154[3] = v125 - 1;
        v127 = *(v125 - 1);
        v154[3] = v125;
        if (v126 == v154[5])
        {
          v128 = v154[2];
          v129 = (char *)v125 - (char *)v128;
          if (v125 <= v128)
          {
            v141 = (char *)v126 - (char *)v128;
            v49 = v141 == 0;
            v142 = v141 >> 2;
            if (v49)
              v143 = 1;
            else
              v143 = v142;
            v144 = (uint64_t *)sub_18D07BF3C(v143);
            v146 = &v144[v143 >> 2];
            v147 = (char *)v154[3];
            v126 = v146;
            v148 = (char *)v154[4] - v147;
            if (v148)
            {
              v126 = (uint64_t *)((char *)v146 + (v148 & 0xFFFFFFFFFFFFFFF8));
              v149 = 8 * (v148 >> 3);
              v150 = &v144[v143 >> 2];
              do
              {
                v151 = *(_QWORD *)v147;
                v147 += 8;
                *v150++ = v151;
                v149 -= 8;
              }
              while (v149);
            }
            v152 = v154[2];
            v154[2] = v144;
            v154[3] = v146;
            v154[4] = v126;
            v154[5] = &v144[v145];
            if (v152)
            {
              operator delete(v152);
              v126 = v154[4];
            }
          }
          else
          {
            v130 = v129 >> 3;
            v16 = v129 >> 3 < -1;
            v131 = (v129 >> 3) + 2;
            if (v16)
              v132 = v131;
            else
              v132 = v130 + 1;
            v133 = -(v132 >> 1);
            v134 = v132 >> 1;
            v135 = &v125[-v134];
            v136 = (char *)v126 - (char *)v125;
            if (v126 != v125)
            {
              memmove(&v125[-v134], v125, (char *)v126 - (char *)v125);
              v125 = v154[3];
            }
            v126 = (uint64_t *)((char *)v135 + v136);
            v154[3] = &v125[v133];
            v154[4] = (uint64_t *)((char *)v135 + v136);
          }
        }
        *v126 = v127;
      }
      else
      {
        *v3 = (uint64_t)v27;
        v9 = v154;
      }
      goto LABEL_61;
    }
    if (v25 == v26)
      v29 = 1;
    else
      v29 = ((char *)v25 - (char *)v26) >> 2;
    v30 = (char *)sub_18D07BF3C(v29);
    v32 = v31;
    v33 = operator new(0x3600uLL);
    v34 = &v30[8 * v24];
    v35 = &v30[8 * v32];
    if (v24 == v32)
    {
      v36 = 8 * v24;
      if (v5 < 1)
      {
        v137 = v36 >> 2;
        if (v3 == v4)
          v138 = 1;
        else
          v138 = v137;
        v9 = v154;
        v139 = (char *)sub_18D07BF3C(v138);
        v34 = &v139[8 * (v138 >> 2)];
        v35 = &v139[8 * v140];
        if (v30)
          operator delete(v30);
        v30 = v139;
        goto LABEL_30;
      }
      v37 = v36 >> 3;
      if (v37 >= -1)
        v38 = v37 + 1;
      else
        v38 = v37 + 2;
      v34 -= 8 * (v38 >> 1);
    }
    v9 = v154;
LABEL_30:
    *(_QWORD *)v34 = v33;
    v39 = v34 + 8;
    for (i = v9[4]; i != v9[3]; --i)
    {
      if (v34 == v30)
      {
        if (v39 >= v35)
        {
          if (v35 == v30)
            v45 = 1;
          else
            v45 = (v35 - v30) >> 2;
          v46 = (char *)sub_18D07BF3C(v45);
          v48 = v46;
          v34 = &v46[(2 * v45 + 6) & 0xFFFFFFFFFFFFFFF8];
          v50 = v39 - v30;
          v49 = v39 == v30;
          v39 = v34;
          if (!v49)
          {
            v39 = &v34[v50 & 0xFFFFFFFFFFFFFFF8];
            v51 = 8 * (v50 >> 3);
            v52 = v34;
            v53 = (uint64_t *)v30;
            do
            {
              v54 = *v53++;
              *(_QWORD *)v52 = v54;
              v52 += 8;
              v51 -= 8;
            }
            while (v51);
          }
          v35 = &v46[8 * v47];
          if (v30)
            operator delete(v30);
          v30 = v48;
        }
        else
        {
          v41 = (v35 - v39) >> 3;
          if (v41 >= -1)
            v42 = v41 + 1;
          else
            v42 = v41 + 2;
          v43 = v42 >> 1;
          v34 = &v30[8 * (v42 >> 1)];
          v44 = v30;
          if (v39 != v30)
          {
            memmove(v34, v30, v39 - v30);
            v44 = v39;
          }
          v39 = &v44[8 * v43];
        }
      }
      v55 = *(i - 1);
      *((_QWORD *)v34 - 1) = v55;
      v34 -= 8;
    }
    v56 = v9[2];
    v9[2] = (uint64_t *)v30;
    v9[3] = (uint64_t *)v34;
    v9[4] = (uint64_t *)v39;
    v9[5] = (uint64_t *)v35;
    if (v56)
      operator delete(v56);
    goto LABEL_62;
  }
  v9 = this;
  this[6] = (uint64_t *)(v7 - 16);
  v12 = *v4;
  v10 = v4 + 1;
  v11 = v12;
  this[3] = v10;
  if (v3 == this[5])
  {
    v13 = this[2];
    v14 = (char *)v10 - (char *)v13;
    if (v10 <= v13)
    {
      v57 = (char *)v3 - (char *)v13;
      v49 = v57 == 0;
      v58 = v57 >> 2;
      if (v49)
        v59 = 1;
      else
        v59 = v58;
      v60 = (uint64_t *)sub_18D07BF3C(v59);
      v62 = &v60[v59 >> 2];
      v63 = (char *)v154[3];
      v3 = v62;
      v64 = (char *)v154[4] - v63;
      if (v64)
      {
        v3 = (uint64_t *)((char *)v62 + (v64 & 0xFFFFFFFFFFFFFFF8));
        v65 = 8 * (v64 >> 3);
        v66 = &v60[v59 >> 2];
        do
        {
          v67 = *(_QWORD *)v63;
          v63 += 8;
          *v66++ = v67;
          v65 -= 8;
        }
        while (v65);
      }
      v68 = v154[2];
      v154[2] = v60;
      v154[3] = v62;
      v154[4] = v3;
      v154[5] = &v60[v61];
      if (v68)
      {
        operator delete(v68);
        v3 = v154[4];
      }
    }
    else
    {
      v15 = v14 >> 3;
      v16 = v14 >> 3 < -1;
      v17 = (v14 >> 3) + 2;
      if (v16)
        v18 = v17;
      else
        v18 = v15 + 1;
      v19 = -(v18 >> 1);
      v20 = v18 >> 1;
      v21 = &v10[-v20];
      v22 = (char *)v3 - (char *)v10;
      if (v3 != v10)
      {
        memmove(&v10[-v20], v10, (char *)v3 - (char *)v10);
        v3 = v154[3];
      }
      v23 = &v3[v19];
      v3 = (uint64_t *)((char *)v21 + v22);
      v154[3] = v23;
      v154[4] = (uint64_t *)((char *)v21 + v22);
    }
  }
  *v3 = v11;
LABEL_61:
  ++v9[4];
LABEL_62:
  v4 = v9[3];
  v8 = (unint64_t)v9[6] + (_QWORD)v9[7];
LABEL_63:
  v69 = (char *)a2 + 1168;
  memcpy((void *)(*(uint64_t *)((char *)v4 + ((v8 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 864 * (v8 & 0xF)), v69, 0x360uLL);
  v72 = v9[7];
  v9[7] = (uint64_t *)((char *)v72 + 1);
  if ((unint64_t)v72 + 1 <= 0x1E)
  {
    v74 = (void **)v9[3];
    v73 = (unint64_t)v9[6];
  }
  else
  {
    v73 = (unint64_t)v9[6] + 1;
    v9[6] = (uint64_t *)v73;
    v9[7] = v72;
    v74 = (void **)v9[3];
    if (v73 >= 0x20)
    {
      operator delete(*v74);
      v74 = (void **)(v9[3] + 1);
      v9[3] = (uint64_t *)v74;
      v73 = (unint64_t)(v9[6] - 2);
      v9[6] = (uint64_t *)v73;
    }
  }
  v75 = v73 >> 4;
  v76 = (uint64_t *)&v74[v73 >> 4];
  v77 = (void **)v9[4];
  if (v77 == v74)
  {
    v80 = 0;
LABEL_79:
    v84 = 0;
    v83 = 1;
    goto LABEL_80;
  }
  v78 = (_QWORD *)(*v76 + 864 * (v73 & 0xF));
  v79 = *(uint64_t *)((char *)v74 + ((((unint64_t)v9[7] + v73) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 864 * ((*((_DWORD *)v9 + 14) + (int)v73) & 0xF);
  if (v78 == (_QWORD *)v79)
  {
    v80 = 0;
  }
  else
  {
    v80 = 0;
    do
    {
      v156 = (uint64_t *)CNTimeSpan::operator-((uint64_t)v69, v78, v70, v71);
      v157 = v81;
      if (!sub_18D03F608((double *)&v156, (double *)v9 + 163))
        break;
      v78 += 108;
      if ((_QWORD *)((char *)v78 - *v76) == (_QWORD *)13824)
      {
        v82 = (_QWORD *)v76[1];
        ++v76;
        v78 = v82;
      }
      ++v80;
    }
    while (v78 != (_QWORD *)v79);
    v73 = (unint64_t)v9[6];
    v74 = (void **)v9[3];
    v77 = (void **)v9[4];
    v75 = v73 >> 4;
  }
  v76 = (uint64_t *)&v74[v75];
  if (v77 == v74)
    goto LABEL_79;
  v83 = 0;
  v84 = (char *)(*v76 + 864 * (v73 & 0xF));
LABEL_80:
  v156 = v76;
  v157 = v84;
  sub_18D16AFD8(&v156, v80);
  if (v157 == v84)
    v85 = 0;
  else
    v85 = 0x84BDA12F684BDA13 * ((uint64_t)&v157[-*v156] >> 5)
        + 2 * ((char *)v156 - (char *)v76)
        + 0x7B425ED097B425EDLL * ((uint64_t)&v84[-*v76] >> 5);
  v86 = (char **)&v74[v73 >> 4];
  if ((v83 & 1) != 0)
    v87 = 0;
  else
    v87 = &(*v86)[864 * (v73 & 0xF)];
  v153 = v85;
  if (v84 == v87)
    v88 = 0;
  else
    v88 = 0x84BDA12F684BDA13 * ((uint64_t)&v84[-*v76] >> 5)
        + 2 * ((char *)v76 - (char *)v86)
        + 0x7B425ED097B425EDLL * ((v87 - *v86) >> 5);
  v156 = (uint64_t *)&v74[v73 >> 4];
  v157 = v87;
  sub_18D16AFD8(&v156, v88);
  if (v153 < 1)
  {
    v95 = v154;
  }
  else
  {
    v89 = (void **)v156;
    v90 = v157;
    v91 = v154[7];
    if (v88 <= ((unint64_t)v91 - v153) >> 1)
    {
      sub_18D16AFD8(&v156, v153);
      if (v86 == (char **)v89)
      {
        sub_18D16B054(&v156, v87, v90, v156, v157);
        v95 = v154;
      }
      else
      {
        v97 = (char *)*v89;
        v96 = (char **)(v89 - 1);
        sub_18D16B054(&v156, v97, v90, v156, v157);
        v98 = v157;
        v99 = v158;
        if (v96 == v86)
        {
          v95 = v154;
        }
        else
        {
          v95 = v154;
          do
          {
            v100 = *v96--;
            sub_18D16B054(&v156, v100, v100 + 13824, v98, v99);
            v98 = v157;
            v99 = v158;
          }
          while (v96 != v86);
        }
        sub_18D16B054(&v156, v87, *v86 + 13824, v98, v99);
      }
      v112 = (uint64_t)v95[7] - v153;
      v73 = (unint64_t)v95[6] + v153;
      v95[6] = (uint64_t *)v73;
      v95[7] = (uint64_t *)v112;
      v74 = (void **)v95[3];
      if (v73 >= 0x20)
      {
        do
        {
          operator delete(*v74);
          v74 = (void **)(v95[3] + 1);
          v95[3] = (uint64_t *)v74;
          v73 = (unint64_t)(v95[6] - 2);
          v95[6] = (uint64_t *)v73;
        }
        while (v73 > 0x1F);
      }
    }
    else
    {
      sub_18D16AFD8(&v156, v153);
      v92 = v157;
      v93 = (uint64_t *)&v74[((unint64_t)v91 + v73) >> 4];
      if ((v83 & 1) != 0)
        v94 = 0;
      else
        v94 = (_BYTE *)(*v93 + 864 * (((_BYTE)v91 + (_BYTE)v73) & 0xF));
      v95 = v154;
      if (v93 != v156)
      {
        v101 = v156 + 1;
        sub_18D16B144(&v156, v157, (_BYTE *)(*v156 + 13824), v89, v90);
        v89 = (void **)v157;
        v90 = v158;
        if (v101 != v93)
        {
          v102 = *(_BYTE **)v157;
          v155 = v93;
          do
          {
            v103 = 0;
            v104 = *v101;
            for (++v89; ; ++v89)
            {
              v105 = 0x84BDA12F684BDA13 * ((v102 - v90 + 13824) >> 5);
              if ((uint64_t)(0x84BDA12F684BDA13 * ((13824 - 864 * v103) >> 5)) >= v105)
                v106 = v105;
              else
                v106 = 0x84BDA12F684BDA13 * ((13824 - 864 * v103) >> 5);
              if (v106)
                memmove(v90, (const void *)(v104 + 864 * v103), 864 * v106);
              v103 += v106;
              if (v103 == 16)
                break;
              v107 = *v89;
              v102 = v107;
              v90 = v107;
            }
            v90 += 864 * v106;
            v102 = *(v89 - 1);
            if (v102 + 13824 == v90)
            {
              v102 = *v89;
              v90 = (char *)*v89;
            }
            else
            {
              --v89;
            }
            v93 = v155;
            ++v101;
          }
          while (v101 != v155);
          v95 = v154;
        }
        v92 = (char *)*v93;
      }
      sub_18D16B144(&v156, v92, v94, v89, v90);
      v74 = (void **)v95[3];
      v108 = (uint64_t)v95[4];
      v109 = 2 * (v108 - (_QWORD)v74) - 1;
      if ((void **)v108 == v74)
        v109 = 0;
      v73 = (unint64_t)v95[6];
      v110 = (uint64_t)v95[7] - v153;
      v95[7] = (uint64_t *)v110;
      if (v109 - (v73 + v110) >= 0x20)
      {
        do
        {
          operator delete(*(void **)(v108 - 8));
          v74 = (void **)v95[3];
          v108 = (uint64_t)(v95[4] - 1);
          v111 = 2 * (v108 - (_QWORD)v74) - 1;
          v95[4] = (uint64_t *)v108;
          if ((void **)v108 == v74)
            v111 = 0;
          v73 = (unint64_t)v95[6];
        }
        while (v111 - ((unint64_t)v95[7] + v73) > 0x1F);
      }
    }
  }
  if (v95[4] == (uint64_t *)v74)
    v113 = 0;
  else
    v113 = (char *)v74[v73 >> 4] + 864 * (v73 & 0xF);
  v156 = (uint64_t *)&v74[v73 >> 4];
  v157 = v113;
  return sub_18D16AFD8(&v156, v88);
}

void sub_18D06F630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;
  operator delete(v3);
  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t CoreNavigation::CLP::LogEntry::LogEntry::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::LogEntry *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  CoreNavigation::CLP::LogEntry::LogEntry *v3;
  wireless_diagnostics::google::protobuf::internal::ExtensionSet *v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;

  v3 = this;
  v4 = (CoreNavigation::CLP::LogEntry::LogEntry *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
        {
          this = (CoreNavigation::CLP::LogEntry::LogEntry *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          v6 = (uint64_t)this;
          *((_DWORD *)a2 + 8) = (_DWORD)this;
          if (!(_DWORD)this)
            return 1;
        }
        else
        {
          v6 = *v5;
          *((_DWORD *)a2 + 8) = v6;
          *((_QWORD *)a2 + 1) = v5 + 1;
          if (!(_DWORD)v6)
            return 1;
        }
        if (v6 >> 3 != 1)
          break;
        v7 = v6 & 7;
        if (v7 != 2)
          goto LABEL_18;
        *((_DWORD *)v3 + 13) |= 1u;
        v8 = *((_QWORD *)v3 + 4);
        if (!v8)
        {
          v8 = operator new();
          *(_QWORD *)v8 = &off_1E25BE6C0;
          *(_OWORD *)(v8 + 8) = 0u;
          *(_OWORD *)(v8 + 24) = 0u;
          *(_QWORD *)(v8 + 40) = 0;
          *((_QWORD *)v3 + 4) = v8;
        }
        v23 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))return 0;
        }
        else
        {
          v23 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)a2 + 14);
        v11 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)v8, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = (CoreNavigation::CLP::LogEntry::LogEntry *)wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v12 = *((_DWORD *)a2 + 14);
        v13 = __OFSUB__(v12, 1);
        v14 = v12 - 1;
        if (v14 < 0 == v13)
          *((_DWORD *)a2 + 14) = v14;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 34)
        {
          *((_QWORD *)a2 + 1) = v15 + 1;
          goto LABEL_33;
        }
      }
      if (v6 >> 3 != 4)
        break;
      v7 = v6 & 7;
      if (v7 != 2)
        goto LABEL_18;
LABEL_33:
      *((_DWORD *)v3 + 13) |= 2u;
      v16 = *((_QWORD *)v3 + 5);
      if (!v16)
      {
        v16 = operator new();
        *(_QWORD *)v16 = &off_1E25BBD08;
        *(_OWORD *)(v16 + 24) = 0u;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *(_OWORD *)(v16 + 72) = 0u;
        *(_OWORD *)(v16 + 88) = 0u;
        *(_OWORD *)(v16 + 104) = 0u;
        *(_OWORD *)(v16 + 120) = 0u;
        *(_OWORD *)(v16 + 136) = 0u;
        *(_OWORD *)(v16 + 152) = 0u;
        *(_OWORD *)(v16 + 168) = 0u;
        *(_OWORD *)(v16 + 184) = 0u;
        *(_OWORD *)(v16 + 200) = 0u;
        *(_OWORD *)(v16 + 216) = 0u;
        *(_OWORD *)(v16 + 232) = 0u;
        *(_OWORD *)(v16 + 248) = 0u;
        *(_OWORD *)(v16 + 8) = 0u;
        *(_OWORD *)(v16 + 264) = 0u;
        *(_OWORD *)(v16 + 280) = 0u;
        *(_OWORD *)(v16 + 296) = 0u;
        *(_OWORD *)(v16 + 308) = 0u;
        *((_QWORD *)v3 + 5) = v16;
      }
      v24 = 0;
      v17 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24))
          return 0;
      }
      else
      {
        v24 = *v17;
        *((_QWORD *)a2 + 1) = v17 + 1;
      }
      v18 = *((_DWORD *)a2 + 14);
      v19 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v18 + 1;
      if (v18 >= v19)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *)v16, a2)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      this = (CoreNavigation::CLP::LogEntry::LogEntry *)wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v20 = *((_DWORD *)a2 + 14);
      v13 = __OFSUB__(v20, 1);
      v21 = v20 - 1;
      if (v21 < 0 == v13)
        *((_DWORD *)a2 + 14) = v21;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v7 = v6 & 7;
LABEL_18:
    if (v7 == 4)
      return 1;
    if ((v6 & 0xFFFFFFF8) == 0x10)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      this = (CoreNavigation::CLP::LogEntry::LogEntry *)wireless_diagnostics::google::protobuf::internal::ExtensionSet::ParseField(v4, v6, a2, (const wireless_diagnostics::google::protobuf::MessageLite *)CoreNavigation::CLP::LogEntry::LogEntry::default_instance_);
      if ((this & 1) == 0)
        return 0;
    }
    else
    {
      this = (CoreNavigation::CLP::LogEntry::LogEntry *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)v6);
      if ((this & 1) == 0)
        return 0;
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t result;
  unint64_t v15;

  while (2)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v4 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v6 = TagFallback & 7;
        if (v6 != 1)
          goto LABEL_24;
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v15) & 1) == 0)
          return 0;
        *((_QWORD *)this + 1) = v15;
        *((_DWORD *)this + 11) |= 1u;
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 != 17)
          continue;
        *((_QWORD *)a2 + 1) = v7 + 1;
        goto LABEL_14;
      case 2u:
        v6 = TagFallback & 7;
        if (v6 != 1)
          goto LABEL_24;
LABEL_14:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v15) & 1) == 0)
          return 0;
        *((_QWORD *)this + 2) = v15;
        *((_DWORD *)this + 11) |= 2u;
        v8 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 != 25)
          continue;
        *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_19:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v15) & 1) != 0)
        {
          *((_QWORD *)this + 3) = v15;
          *((_DWORD *)this + 11) |= 4u;
          v10 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v10 < v9 && *v10 == 32)
          {
            v11 = v10 + 1;
            *((_QWORD *)a2 + 1) = v11;
LABEL_28:
            v15 = 0;
            if ((unint64_t)v11 >= v9 || *v11 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v15);
              if (!(_DWORD)result)
                return result;
              v12 = v15;
              v13 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
              v9 = *((_QWORD *)a2 + 2);
            }
            else
            {
              v12 = *v11;
              v13 = (unsigned __int8 *)(v11 + 1);
              *((_QWORD *)a2 + 1) = v13;
            }
            *((_QWORD *)this + 4) = v12;
            *((_DWORD *)this + 11) |= 8u;
            if (v13 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              result = 1;
              *((_BYTE *)a2 + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v6 = TagFallback & 7;
        if (v6 == 1)
          goto LABEL_19;
        goto LABEL_24;
      case 4u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_28;
      default:
        v6 = TagFallback & 7;
LABEL_24:
        if (v6 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  unsigned int v6;
  int v7;
  uint64_t v8;
  char *v9;
  CoreNavigation::CLP::LogEntry::Raven::LogEntry *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  CoreNavigation::CLP::LogEntry::TropicalSavanna::LogEntry *v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry *v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  _BYTE *v56;
  uint64_t v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  char *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  _BYTE *v91;
  CoreNavigation::CLP::LogEntry::PrivateData::Timer *v92;
  char *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  char *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  _BYTE *v105;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  _BYTE *v119;
  uint64_t v120;
  char *v121;
  int v122;
  int v123;
  int v124;
  int v125;
  _BYTE *v126;
  uint64_t v127;
  char *v128;
  int v129;
  int v130;
  int v131;
  int v132;
  _BYTE *v133;
  uint64_t v134;
  char *v135;
  int v136;
  int v137;
  int v138;
  int v139;
  _BYTE *v140;
  CoreNavigation::CLP::LogEntry::PrivateData::Reset *v141;
  char *v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned __int8 *v147;
  uint64_t v148;
  char *v149;
  int v150;
  int v151;
  int v152;
  int v153;
  unsigned __int8 *v154;
  uint64_t v155;
  char *v156;
  int v157;
  int v158;
  int v159;
  int v160;
  unsigned __int8 *v161;
  uint64_t v162;
  char *v163;
  int v164;
  int v165;
  int v166;
  int v167;
  unsigned __int8 *v168;
  uint64_t v169;
  char *v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned __int8 *v175;
  uint64_t v176;
  char *v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned __int8 *v182;
  uint64_t v183;
  char *v184;
  int v185;
  int v186;
  int v187;
  int v188;
  unsigned __int8 *v189;
  uint64_t v190;
  char *v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unsigned __int8 *v196;
  uint64_t v197;
  char *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unsigned __int8 *v203;
  uint64_t v204;
  char *v205;
  int v206;
  int v207;
  int v208;
  int v209;
  unsigned __int8 *v210;
  uint64_t v211;
  char *v212;
  int v213;
  int v214;
  int v215;
  int v216;
  unsigned __int8 *v217;
  uint64_t v218;
  char *v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unsigned __int8 *v224;
  uint64_t v225;
  char *v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unsigned __int8 *v231;
  uint64_t v232;
  char *v233;
  int v234;
  int v235;
  int v236;
  int v237;
  unsigned __int8 *v238;
  uint64_t v239;
  char *v240;
  int v241;
  int v242;
  int v243;
  int v244;
  unsigned __int8 *v245;
  uint64_t v246;
  char *v247;
  int v248;
  int v249;
  int v250;
  int v251;
  unsigned __int8 *v252;
  uint64_t v253;
  char *v254;
  int v255;
  int v256;
  int v257;
  int v258;
  unsigned __int8 *v259;
  uint64_t v260;
  char *v261;
  int v262;
  int v263;
  int v264;
  int v265;
  unsigned __int8 *v266;
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *v267;
  char *v268;
  int v269;
  int v270;
  int v271;
  int v272;
  unsigned __int8 *v273;
  uint64_t result;
  unsigned int v275;

  while (2)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v4 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    v6 = TagFallback >> 3;
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_93;
        *((_DWORD *)this + 79) |= 1u;
        v8 = *((_QWORD *)this + 1);
        if (!v8)
        {
          v8 = operator new();
          *(_QWORD *)(v8 + 40) = 0;
          *(_QWORD *)v8 = &off_1E25BD4F0;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          *(_DWORD *)(v8 + 32) = 0;
          *((_QWORD *)this + 1) = v8;
        }
        v275 = 0;
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v9;
          *((_QWORD *)a2 + 1) = v9 + 1;
        }
        v45 = *((_DWORD *)a2 + 14);
        v46 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v45 + 1;
        if (v45 >= v46)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Accel::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::Accel *)v8, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v47 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v47, 1);
        v48 = v47 - 1;
        if (v48 < 0 == v15)
          *((_DWORD *)a2 + 14) = v48;
        v49 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v49 >= *((_QWORD *)a2 + 2) || *v49 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v49 + 1;
LABEL_175:
        *((_DWORD *)this + 79) |= 2u;
        v50 = *((_QWORD *)this + 2);
        if (!v50)
        {
          v50 = operator new();
          *(_QWORD *)(v50 + 40) = 0;
          *(_QWORD *)v50 = &off_1E25BD400;
          *(_QWORD *)(v50 + 8) = 0;
          *(_QWORD *)(v50 + 16) = 0;
          *(_QWORD *)(v50 + 24) = 0;
          *(_DWORD *)(v50 + 32) = 0;
          *((_QWORD *)this + 2) = v50;
        }
        v275 = 0;
        v51 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v51 >= *((_QWORD *)a2 + 2) || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v51;
          *((_QWORD *)a2 + 1) = v51 + 1;
        }
        v52 = *((_DWORD *)a2 + 14);
        v53 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v52 + 1;
        if (v52 >= v53)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Gyro::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::Gyro *)v50, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v54 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v54, 1);
        v55 = v54 - 1;
        if (v55 < 0 == v15)
          *((_DWORD *)a2 + 14) = v55;
        v56 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v56 >= *((_QWORD *)a2 + 2) || *v56 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v56 + 1;
LABEL_189:
        *((_DWORD *)this + 79) |= 4u;
        v57 = *((_QWORD *)this + 3);
        if (!v57)
        {
          v57 = operator new();
          *(_QWORD *)(v57 + 40) = 0;
          *(_QWORD *)v57 = &off_1E25BD388;
          *(_QWORD *)(v57 + 8) = 0;
          *(_QWORD *)(v57 + 16) = 0;
          *(_QWORD *)(v57 + 24) = 0;
          *(_DWORD *)(v57 + 32) = 0;
          *((_QWORD *)this + 3) = v57;
        }
        v275 = 0;
        v58 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v58 >= *((_QWORD *)a2 + 2) || *v58 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v58;
          *((_QWORD *)a2 + 1) = v58 + 1;
        }
        v59 = *((_DWORD *)a2 + 14);
        v60 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v59 + 1;
        if (v59 >= v60)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Baro::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::Baro *)v57, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v61 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v61, 1);
        v62 = v61 - 1;
        if (v62 < 0 == v15)
          *((_DWORD *)a2 + 14) = v62;
        v63 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v63 >= *((_QWORD *)a2 + 2) || *v63 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v63 + 1;
LABEL_203:
        *((_DWORD *)this + 79) |= 8u;
        v64 = *((_QWORD *)this + 4);
        if (!v64)
        {
          v64 = operator new();
          *(_QWORD *)v64 = &off_1E25BD928;
          *(_QWORD *)(v64 + 8) = 0;
          *(_QWORD *)(v64 + 16) = 0;
          *(_QWORD *)(v64 + 24) = 0;
          *(_QWORD *)(v64 + 29) = 0;
          *(_OWORD *)(v64 + 40) = 0u;
          *(_OWORD *)(v64 + 56) = 0u;
          *(_OWORD *)(v64 + 72) = 0u;
          *(_OWORD *)(v64 + 88) = 0u;
          *((_QWORD *)this + 4) = v64;
        }
        v275 = 0;
        v65 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v65 >= *((_QWORD *)a2 + 2) || *v65 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v65;
          *((_QWORD *)a2 + 1) = v65 + 1;
        }
        v66 = *((_DWORD *)a2 + 14);
        v67 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v66 + 1;
        if (v66 >= v67)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Location::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::Location *)v64, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v68 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v68, 1);
        v69 = v68 - 1;
        if (v69 < 0 == v15)
          *((_DWORD *)a2 + 14) = v69;
        v70 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v70 >= *((_QWORD *)a2 + 2) || *v70 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v70 + 1;
LABEL_217:
        *((_DWORD *)this + 79) |= 0x10u;
        v71 = *((_QWORD *)this + 5);
        if (!v71)
        {
          v71 = operator new();
          *(_QWORD *)v71 = &off_1E25BA160;
          *(_QWORD *)(v71 + 8) = 0;
          *(_QWORD *)(v71 + 16) = 0;
          *(_QWORD *)(v71 + 24) = 0;
          *(_DWORD *)(v71 + 32) = 0;
          *((_QWORD *)this + 5) = v71;
        }
        v275 = 0;
        v72 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v72 >= *((_QWORD *)a2 + 2) || *v72 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v72;
          *((_QWORD *)a2 + 1) = v72 + 1;
        }
        v73 = *((_DWORD *)a2 + 14);
        v74 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v73 + 1;
        if (v73 >= v74)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MotionState::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)v71, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v75 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v75, 1);
        v76 = v75 - 1;
        if (v76 < 0 == v15)
          *((_DWORD *)a2 + 14) = v76;
        v77 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v77 >= *((_QWORD *)a2 + 2) || *v77 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v77 + 1;
LABEL_231:
        *((_DWORD *)this + 79) |= 0x20u;
        v78 = *((_QWORD *)this + 6);
        if (!v78)
        {
          v78 = operator new();
          *(_QWORD *)v78 = &off_1E25BC0C8;
          *(_QWORD *)(v78 + 8) = 0;
          *(_QWORD *)(v78 + 16) = 0;
          *(_QWORD *)(v78 + 24) = 0;
          *(_DWORD *)(v78 + 32) = 0;
          *((_QWORD *)this + 6) = v78;
        }
        v275 = 0;
        v79 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v79 >= *((_QWORD *)a2 + 2) || *v79 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v79;
          *((_QWORD *)a2 + 1) = v79 + 1;
        }
        v80 = *((_DWORD *)a2 + 14);
        v81 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v80 + 1;
        if (v80 >= v81)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *)v78, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v82 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v82, 1);
        v83 = v82 - 1;
        if (v83 < 0 == v15)
          *((_DWORD *)a2 + 14) = v83;
        v84 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v84 >= *((_QWORD *)a2 + 2) || *v84 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v84 + 1;
LABEL_245:
        *((_DWORD *)this + 79) |= 0x40u;
        v85 = *((_QWORD *)this + 7);
        if (!v85)
        {
          v85 = operator new();
          *(_QWORD *)v85 = &off_1E25BA1D8;
          *(_QWORD *)(v85 + 8) = 0;
          *(_QWORD *)(v85 + 16) = 0;
          *(_QWORD *)(v85 + 24) = 0;
          *(_DWORD *)(v85 + 32) = 0;
          *((_QWORD *)this + 7) = v85;
        }
        v275 = 0;
        v86 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v86 >= *((_QWORD *)a2 + 2) || *v86 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v86;
          *((_QWORD *)a2 + 1) = v86 + 1;
        }
        v87 = *((_DWORD *)a2 + 14);
        v88 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v87 + 1;
        if (v87 >= v88)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *)v85, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v89 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v89, 1);
        v90 = v89 - 1;
        if (v90 < 0 == v15)
          *((_DWORD *)a2 + 14) = v90;
        v91 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v91 >= *((_QWORD *)a2 + 2) || *v91 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v91 + 1;
LABEL_259:
        *((_DWORD *)this + 79) |= 0x80u;
        v92 = (CoreNavigation::CLP::LogEntry::PrivateData::Timer *)*((_QWORD *)this + 8);
        if (!v92)
        {
          v92 = (CoreNavigation::CLP::LogEntry::PrivateData::Timer *)operator new();
          *((_QWORD *)v92 + 1) = 0;
          *((_QWORD *)v92 + 2) = 0;
          *(_QWORD *)v92 = &off_1E25BD658;
          *((_QWORD *)this + 8) = v92;
        }
        v275 = 0;
        v93 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v93 >= *((_QWORD *)a2 + 2) || *v93 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v93;
          *((_QWORD *)a2 + 1) = v93 + 1;
        }
        v94 = *((_DWORD *)a2 + 14);
        v95 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v94 + 1;
        if (v94 >= v95)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Timer::MergePartialFromCodedStream(v92, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v96 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v96, 1);
        v97 = v96 - 1;
        if (v97 < 0 == v15)
          *((_DWORD *)a2 + 14) = v97;
        v98 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v98 >= *((_QWORD *)a2 + 2) || *v98 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v98 + 1;
LABEL_273:
        *((_DWORD *)this + 79) |= 0x100u;
        v99 = *((_QWORD *)this + 9);
        if (!v99)
        {
          v99 = operator new();
          *(_QWORD *)v99 = &off_1E25BC488;
          *(_OWORD *)(v99 + 8) = 0u;
          *(_OWORD *)(v99 + 24) = 0u;
          *(_OWORD *)(v99 + 40) = 0u;
          *((_QWORD *)this + 9) = v99;
        }
        v275 = 0;
        v100 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v100 >= *((_QWORD *)a2 + 2) || *v100 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v100;
          *((_QWORD *)a2 + 1) = v100 + 1;
        }
        v101 = *((_DWORD *)a2 + 14);
        v102 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v101 + 1;
        if (v101 >= v102)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *)v99, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v103 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v103, 1);
        v104 = v103 - 1;
        if (v104 < 0 == v15)
          *((_DWORD *)a2 + 14) = v104;
        v105 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v105 >= *((_QWORD *)a2 + 2) || *v105 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v105 + 1;
LABEL_287:
        *((_DWORD *)this + 79) |= 0x200u;
        v106 = *((_QWORD *)this + 10);
        if (!v106)
        {
          v106 = operator new();
          *(_QWORD *)v106 = &off_1E25BDA90;
          *(_QWORD *)(v106 + 8) = 0;
          *(_QWORD *)(v106 + 16) = 0;
          *(_QWORD *)(v106 + 24) = 0;
          *(_DWORD *)(v106 + 32) = 0;
          *((_QWORD *)this + 10) = v106;
        }
        v275 = 0;
        v107 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v107 >= *((_QWORD *)a2 + 2) || *v107 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v107;
          *((_QWORD *)a2 + 1) = v107 + 1;
        }
        v108 = *((_DWORD *)a2 + 14);
        v109 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v108 + 1;
        if (v108 >= v109)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MapVector::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::MapVector *)v106, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v110 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v110, 1);
        v111 = v110 - 1;
        if (v111 < 0 == v15)
          *((_DWORD *)a2 + 14) = v111;
        v112 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v112 >= *((_QWORD *)a2 + 2) || *v112 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v112 + 1;
LABEL_301:
        *((_DWORD *)this + 79) |= 0x400u;
        v113 = *((_QWORD *)this + 11);
        if (!v113)
        {
          v113 = operator new();
          *(_QWORD *)v113 = &off_1E25BA2C8;
          *(_QWORD *)(v113 + 56) = 0;
          *(_DWORD *)(v113 + 52) = 0;
          *(_OWORD *)(v113 + 8) = 0u;
          *(_OWORD *)(v113 + 24) = 0u;
          *(_OWORD *)(v113 + 34) = 0u;
          *((_QWORD *)this + 11) = v113;
        }
        v275 = 0;
        v114 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v114 >= *((_QWORD *)a2 + 2) || *v114 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v114;
          *((_QWORD *)a2 + 1) = v114 + 1;
        }
        v115 = *((_DWORD *)a2 + 14);
        v116 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v115 + 1;
        if (v115 >= v116)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::DeviceStatus::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::DeviceStatus *)v113, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v117 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v117, 1);
        v118 = v117 - 1;
        if (v118 < 0 == v15)
          *((_DWORD *)a2 + 14) = v118;
        v119 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v119 >= *((_QWORD *)a2 + 2) || *v119 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v119 + 1;
LABEL_315:
        *((_DWORD *)this + 79) |= 0x800u;
        v120 = *((_QWORD *)this + 12);
        if (!v120)
        {
          v120 = operator new();
          *(_QWORD *)v120 = &off_1E25BB948;
          *(_QWORD *)(v120 + 8) = 0;
          *(_OWORD *)(v120 + 16) = xmmword_18D30F420;
          *(_DWORD *)(v120 + 32) = 0;
          *((_QWORD *)this + 12) = v120;
        }
        v275 = 0;
        v121 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v121 >= *((_QWORD *)a2 + 2) || *v121 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v121;
          *((_QWORD *)a2 + 1) = v121 + 1;
        }
        v122 = *((_DWORD *)a2 + 14);
        v123 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v122 + 1;
        if (v122 >= v123)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *)v120, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v124 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v124, 1);
        v125 = v124 - 1;
        if (v125 < 0 == v15)
          *((_DWORD *)a2 + 14) = v125;
        v126 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v126 >= *((_QWORD *)a2 + 2) || *v126 != 106)
          continue;
        *((_QWORD *)a2 + 1) = v126 + 1;
LABEL_329:
        *((_DWORD *)this + 79) |= 0x1000u;
        v127 = *((_QWORD *)this + 13);
        if (!v127)
        {
          v127 = operator new();
          *(_QWORD *)v127 = &off_1E25BD130;
          *(_QWORD *)(v127 + 48) = 0;
          *(_QWORD *)(v127 + 56) = 0;
          *(_DWORD *)(v127 + 64) = 0;
          *(_QWORD *)(v127 + 128) = 0;
          *(_OWORD *)(v127 + 8) = 0u;
          *(_OWORD *)(v127 + 24) = 0u;
          *(_DWORD *)(v127 + 40) = 0;
          *(_OWORD *)(v127 + 72) = 0u;
          *(_OWORD *)(v127 + 88) = 0u;
          *(_OWORD *)(v127 + 104) = 0u;
          *(_DWORD *)(v127 + 120) = 0;
          *((_QWORD *)this + 13) = v127;
        }
        v275 = 0;
        v128 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v128 >= *((_QWORD *)a2 + 2) || *v128 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v128;
          *((_QWORD *)a2 + 1) = v128 + 1;
        }
        v129 = *((_DWORD *)a2 + 14);
        v130 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v129 + 1;
        if (v129 >= v130)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)v127, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v131 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v131, 1);
        v132 = v131 - 1;
        if (v132 < 0 == v15)
          *((_DWORD *)a2 + 14) = v132;
        v133 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v133 >= *((_QWORD *)a2 + 2) || *v133 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v133 + 1;
LABEL_343:
        *((_DWORD *)this + 79) |= 0x2000u;
        v134 = *((_QWORD *)this + 14);
        if (!v134)
        {
          v134 = operator new();
          *(_QWORD *)(v134 + 40) = 0;
          *(_QWORD *)v134 = &off_1E25BA340;
          *(_QWORD *)(v134 + 8) = 0;
          *(_QWORD *)(v134 + 16) = 0;
          *(_QWORD *)(v134 + 24) = 0;
          *(_DWORD *)(v134 + 32) = 0;
          *((_QWORD *)this + 14) = v134;
        }
        v275 = 0;
        v135 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v135 >= *((_QWORD *)a2 + 2) || *v135 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v135;
          *((_QWORD *)a2 + 1) = v135 + 1;
        }
        v136 = *((_DWORD *)a2 + 14);
        v137 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v136 + 1;
        if (v136 >= v137)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Magnetometer::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::Magnetometer *)v134, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v138 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v138, 1);
        v139 = v138 - 1;
        if (v139 < 0 == v15)
          *((_DWORD *)a2 + 14) = v139;
        v140 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v140 >= *((_QWORD *)a2 + 2) || *v140 != 122)
          continue;
        *((_QWORD *)a2 + 1) = v140 + 1;
LABEL_357:
        *((_DWORD *)this + 79) |= 0x4000u;
        v141 = (CoreNavigation::CLP::LogEntry::PrivateData::Reset *)*((_QWORD *)this + 15);
        if (!v141)
        {
          v141 = (CoreNavigation::CLP::LogEntry::PrivateData::Reset *)operator new();
          *((_QWORD *)v141 + 1) = 0;
          *((_QWORD *)v141 + 2) = 0;
          *(_QWORD *)v141 = &off_1E25BD5E0;
          *((_QWORD *)this + 15) = v141;
        }
        v275 = 0;
        v142 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v142 >= *((_QWORD *)a2 + 2) || *v142 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v142;
          *((_QWORD *)a2 + 1) = v142 + 1;
        }
        v143 = *((_DWORD *)a2 + 14);
        v144 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v143 + 1;
        if (v143 >= v144)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Reset::MergePartialFromCodedStream(v141, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v145 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v145, 1);
        v146 = v145 - 1;
        if (v146 < 0 == v15)
          *((_DWORD *)a2 + 14) = v146;
        v147 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v147 <= 1 || *v147 != 130 || v147[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v147 + 2;
LABEL_372:
        *((_DWORD *)this + 79) |= 0x8000u;
        v148 = *((_QWORD *)this + 16);
        if (!v148)
        {
          v148 = operator new();
          *(_QWORD *)v148 = &off_1E25BDB08;
          *(_QWORD *)(v148 + 8) = 0;
          *(_QWORD *)(v148 + 16) = 0;
          *(_QWORD *)(v148 + 24) = 0;
          *(_DWORD *)(v148 + 32) = 0;
          *((_QWORD *)this + 16) = v148;
        }
        v275 = 0;
        v149 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v149 >= *((_QWORD *)a2 + 2) || *v149 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v149;
          *((_QWORD *)a2 + 1) = v149 + 1;
        }
        v150 = *((_DWORD *)a2 + 14);
        v151 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v150 + 1;
        if (v150 >= v151)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::StepCount::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::StepCount *)v148, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v152 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v152, 1);
        v153 = v152 - 1;
        if (v153 < 0 == v15)
          *((_DWORD *)a2 + 14) = v153;
        v154 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v154 <= 1 || *v154 != 154 || v154[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v154 + 2;
LABEL_387:
        *((_DWORD *)this + 79) |= 0x10000u;
        v155 = *((_QWORD *)this + 17);
        if (!v155)
        {
          v155 = operator new();
          *(_QWORD *)(v155 + 8) = 0;
          *(_QWORD *)(v155 + 16) = 0;
          *(_QWORD *)v155 = &off_1E25BBAB0;
          *(_BYTE *)(v155 + 24) = 0;
          *(_OWORD *)(v155 + 28) = 0u;
          *(_OWORD *)(v155 + 44) = 0u;
          *((_QWORD *)this + 17) = v155;
        }
        v275 = 0;
        v156 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v156 >= *((_QWORD *)a2 + 2) || *v156 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v156;
          *((_QWORD *)a2 + 1) = v156 + 1;
        }
        v157 = *((_DWORD *)a2 + 14);
        v158 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v157 + 1;
        if (v157 >= v158)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)v155, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v159 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v159, 1);
        v160 = v159 - 1;
        if (v160 < 0 == v15)
          *((_DWORD *)a2 + 14) = v160;
        v161 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v161 <= 1 || *v161 != 170 || v161[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v161 + 2;
LABEL_402:
        *((_DWORD *)this + 79) |= 0x20000u;
        v162 = *((_QWORD *)this + 18);
        if (!v162)
        {
          v162 = operator new();
          *(_QWORD *)v162 = &off_1E25BCB90;
          *(_QWORD *)(v162 + 8) = 0;
          *(_QWORD *)(v162 + 16) = 0;
          *(_QWORD *)(v162 + 24) = 0;
          *(_DWORD *)(v162 + 32) = 0;
          *((_QWORD *)this + 18) = v162;
        }
        v275 = 0;
        v163 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v163 >= *((_QWORD *)a2 + 2) || *v163 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v163;
          *((_QWORD *)a2 + 1) = v163 + 1;
        }
        v164 = *((_DWORD *)a2 + 14);
        v165 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v164 + 1;
        if (v164 >= v165)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *)v162, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v166 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v166, 1);
        v167 = v166 - 1;
        if (v167 < 0 == v15)
          *((_DWORD *)a2 + 14) = v167;
        v168 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v168 <= 1 || *v168 != 178 || v168[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v168 + 2;
LABEL_417:
        *((_DWORD *)this + 79) |= 0x40000u;
        v169 = *((_QWORD *)this + 19);
        if (!v169)
        {
          v169 = operator new();
          *(_QWORD *)v169 = &off_1E25BB3A8;
          *(_DWORD *)(v169 + 52) = 0;
          *(_DWORD *)(v169 + 56) = 0;
          *(_OWORD *)(v169 + 8) = 0u;
          *(_OWORD *)(v169 + 24) = 0u;
          *(_OWORD *)(v169 + 33) = 0u;
          *((_QWORD *)this + 19) = v169;
        }
        v275 = 0;
        v170 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v170 >= *((_QWORD *)a2 + 2) || *v170 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v170;
          *((_QWORD *)a2 + 1) = v170 + 1;
        }
        v171 = *((_DWORD *)a2 + 14);
        v172 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v171 + 1;
        if (v171 >= v172)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::WifiNotification::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::WifiNotification *)v169, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v173 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v173, 1);
        v174 = v173 - 1;
        if (v174 < 0 == v15)
          *((_DWORD *)a2 + 14) = v174;
        v175 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v175 <= 1 || *v175 != 186 || v175[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v175 + 2;
LABEL_432:
        *((_DWORD *)this + 79) |= 0x80000u;
        v176 = *((_QWORD *)this + 20);
        if (!v176)
        {
          v176 = operator new();
          *(_QWORD *)v176 = &off_1E25BAB38;
          *(_QWORD *)(v176 + 8) = 0;
          *(_QWORD *)(v176 + 16) = 0;
          *(_QWORD *)(v176 + 24) = 0;
          *(_DWORD *)(v176 + 32) = 0;
          *((_QWORD *)this + 20) = v176;
        }
        v275 = 0;
        v177 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v177 >= *((_QWORD *)a2 + 2) || *v177 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v177;
          *((_QWORD *)a2 + 1) = v177 + 1;
        }
        v178 = *((_DWORD *)a2 + 14);
        v179 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v178 + 1;
        if (v178 >= v179)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *)v176, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v180 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v180, 1);
        v181 = v180 - 1;
        if (v181 < 0 == v15)
          *((_DWORD *)a2 + 14) = v181;
        v182 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v182 <= 1 || *v182 != 194 || v182[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v182 + 2;
LABEL_447:
        *((_DWORD *)this + 79) |= 0x100000u;
        v183 = *((_QWORD *)this + 21);
        if (!v183)
        {
          v183 = operator new();
          *(_QWORD *)v183 = &off_1E25BD0B8;
          *(_OWORD *)(v183 + 8) = 0u;
          *(_OWORD *)(v183 + 24) = 0u;
          *(_OWORD *)(v183 + 37) = 0u;
          *(_QWORD *)(v183 + 64) = 0;
          *(_QWORD *)(v183 + 72) = 0;
          *(_QWORD *)(v183 + 56) = 0;
          *(_DWORD *)(v183 + 80) = 0;
          *((_QWORD *)this + 21) = v183;
        }
        v275 = 0;
        v184 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v184 >= *((_QWORD *)a2 + 2) || *v184 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v184;
          *((_QWORD *)a2 + 1) = v184 + 1;
        }
        v185 = *((_DWORD *)a2 + 14);
        v186 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v185 + 1;
        if (v185 >= v186)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)v183, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v187 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v187, 1);
        v188 = v187 - 1;
        if (v188 < 0 == v15)
          *((_DWORD *)a2 + 14) = v188;
        v189 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v189 <= 1 || *v189 != 202 || v189[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v189 + 2;
LABEL_462:
        *((_DWORD *)this + 79) |= 0x200000u;
        v190 = *((_QWORD *)this + 22);
        if (!v190)
        {
          v190 = operator new();
          *(_QWORD *)v190 = &off_1E25BC2A8;
          *(_QWORD *)(v190 + 56) = 0;
          *(_OWORD *)(v190 + 8) = 0u;
          *(_OWORD *)(v190 + 24) = 0u;
          *(_OWORD *)(v190 + 36) = 0u;
          *((_QWORD *)this + 22) = v190;
        }
        v275 = 0;
        v191 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v191 >= *((_QWORD *)a2 + 2) || *v191 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v191;
          *((_QWORD *)a2 + 1) = v191 + 1;
        }
        v192 = *((_DWORD *)a2 + 14);
        v193 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v192 + 1;
        if (v192 >= v193)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *)v190, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v194 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v194, 1);
        v195 = v194 - 1;
        if (v195 < 0 == v15)
          *((_DWORD *)a2 + 14) = v195;
        v196 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v196 <= 1 || *v196 != 210 || v196[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v196 + 2;
LABEL_477:
        *((_DWORD *)this + 79) |= 0x400000u;
        v197 = *((_QWORD *)this + 23);
        if (!v197)
        {
          v197 = operator new();
          *(_QWORD *)(v197 + 40) = 0;
          *(_QWORD *)v197 = &off_1E25BD838;
          *(_QWORD *)(v197 + 8) = 0;
          *(_QWORD *)(v197 + 16) = 0;
          *(_QWORD *)(v197 + 24) = 0;
          *(_DWORD *)(v197 + 32) = 0;
          *((_QWORD *)this + 23) = v197;
        }
        v275 = 0;
        v198 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v198 >= *((_QWORD *)a2 + 2) || *v198 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v198;
          *((_QWORD *)a2 + 1) = v198 + 1;
        }
        v199 = *((_DWORD *)a2 + 14);
        v200 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v199 + 1;
        if (v199 >= v200)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Compass::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::Compass *)v197, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v201 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v201, 1);
        v202 = v201 - 1;
        if (v202 < 0 == v15)
          *((_DWORD *)a2 + 14) = v202;
        v203 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v203 <= 1 || *v203 != 218 || v203[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v203 + 2;
LABEL_492:
        *((_DWORD *)this + 79) |= 0x800000u;
        v204 = *((_QWORD *)this + 24);
        if (!v204)
        {
          v204 = operator new();
          *(_QWORD *)(v204 + 40) = 0;
          *(_QWORD *)v204 = &off_1E25BA250;
          *(_QWORD *)(v204 + 8) = 0;
          *(_QWORD *)(v204 + 16) = 0;
          *(_QWORD *)(v204 + 24) = 0;
          *(_DWORD *)(v204 + 32) = 0;
          *((_QWORD *)this + 24) = v204;
        }
        v275 = 0;
        v205 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v205 >= *((_QWORD *)a2 + 2) || *v205 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v205;
          *((_QWORD *)a2 + 1) = v205 + 1;
        }
        v206 = *((_DWORD *)a2 + 14);
        v207 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v206 + 1;
        if (v206 >= v207)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion *)v204, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v208 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v208, 1);
        v209 = v208 - 1;
        if (v209 < 0 == v15)
          *((_DWORD *)a2 + 14) = v209;
        v210 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v210 <= 1 || *v210 != 226 || v210[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v210 + 2;
LABEL_507:
        *((_DWORD *)this + 79) |= 0x1000000u;
        v211 = *((_QWORD *)this + 25);
        if (!v211)
        {
          v211 = operator new();
          *(_QWORD *)v211 = &off_1E25BCDE8;
          *(_OWORD *)(v211 + 8) = 0u;
          *(_OWORD *)(v211 + 24) = 0u;
          *((_QWORD *)this + 25) = v211;
        }
        v275 = 0;
        v212 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v212 >= *((_QWORD *)a2 + 2) || *v212 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v212;
          *((_QWORD *)a2 + 1) = v212 + 1;
        }
        v213 = *((_DWORD *)a2 + 14);
        v214 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v213 + 1;
        if (v213 >= v214)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *)v211, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v215 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v215, 1);
        v216 = v215 - 1;
        if (v216 < 0 == v15)
          *((_DWORD *)a2 + 14) = v216;
        v217 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v217 <= 1 || *v217 != 234 || v217[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v217 + 2;
LABEL_522:
        *((_DWORD *)this + 79) |= 0x2000000u;
        v218 = *((_QWORD *)this + 26);
        if (!v218)
        {
          v218 = operator new();
          *(_QWORD *)v218 = &off_1E25BBB28;
          *(_QWORD *)(v218 + 8) = 0;
          *(_QWORD *)(v218 + 16) = 0;
          *(_QWORD *)(v218 + 24) = 0;
          *(_DWORD *)(v218 + 32) = 0;
          *(_OWORD *)(v218 + 40) = 0u;
          *(_OWORD *)(v218 + 56) = 0u;
          *((_QWORD *)this + 26) = v218;
        }
        v275 = 0;
        v219 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v219 >= *((_QWORD *)a2 + 2) || *v219 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v219;
          *((_QWORD *)a2 + 1) = v219 + 1;
        }
        v220 = *((_DWORD *)a2 + 14);
        v221 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v220 + 1;
        if (v220 >= v221)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *)v218, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v222 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v222, 1);
        v223 = v222 - 1;
        if (v223 < 0 == v15)
          *((_DWORD *)a2 + 14) = v223;
        v224 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v224 <= 1 || *v224 != 242 || v224[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v224 + 2;
LABEL_537:
        *((_DWORD *)this + 79) |= 0x4000000u;
        v225 = *((_QWORD *)this + 27);
        if (!v225)
        {
          v225 = operator new();
          *(_BYTE *)(v225 + 40) = 0;
          *(_DWORD *)(v225 + 44) = 0;
          *(_DWORD *)(v225 + 48) = 0;
          *(_QWORD *)v225 = &off_1E25BCC80;
          *(_QWORD *)(v225 + 8) = 0;
          *(_QWORD *)(v225 + 16) = 0;
          *(_QWORD *)(v225 + 24) = 0;
          *(_DWORD *)(v225 + 32) = 0;
          *((_QWORD *)this + 27) = v225;
        }
        v275 = 0;
        v226 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v226 >= *((_QWORD *)a2 + 2) || *v226 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v226;
          *((_QWORD *)a2 + 1) = v226 + 1;
        }
        v227 = *((_DWORD *)a2 + 14);
        v228 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v227 + 1;
        if (v227 >= v228)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *)v225, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v229 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v229, 1);
        v230 = v229 - 1;
        if (v230 < 0 == v15)
          *((_DWORD *)a2 + 14) = v230;
        v231 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v231 <= 1 || *v231 != 250 || v231[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v231 + 2;
LABEL_552:
        *((_DWORD *)this + 79) |= 0x8000000u;
        v232 = *((_QWORD *)this + 28);
        if (!v232)
        {
          v232 = operator new();
          *(_QWORD *)v232 = &off_1E25B9E90;
          *(_OWORD *)(v232 + 8) = 0u;
          *(_OWORD *)(v232 + 24) = 0u;
          *(_DWORD *)(v232 + 40) = 0;
          *((_QWORD *)this + 28) = v232;
        }
        v275 = 0;
        v233 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v233 >= *((_QWORD *)a2 + 2) || *v233 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v233;
          *((_QWORD *)a2 + 1) = v233 + 1;
        }
        v234 = *((_DWORD *)a2 + 14);
        v235 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v234 + 1;
        if (v234 >= v235)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::WatchState::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::WatchState *)v232, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v236 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v236, 1);
        v237 = v236 - 1;
        if (v237 < 0 == v15)
          *((_DWORD *)a2 + 14) = v237;
        v238 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v238 <= 1 || *v238 != 130 || v238[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v238 + 2;
LABEL_567:
        *((_DWORD *)this + 79) |= 0x10000000u;
        v239 = *((_QWORD *)this + 29);
        if (!v239)
        {
          v239 = operator new();
          *(_QWORD *)v239 = &off_1E25BC050;
          *(_QWORD *)(v239 + 8) = 0;
          *(_QWORD *)(v239 + 16) = 0;
          *(_QWORD *)(v239 + 24) = 0;
          *(_DWORD *)(v239 + 32) = 0;
          *((_QWORD *)this + 29) = v239;
        }
        v275 = 0;
        v240 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v240 >= *((_QWORD *)a2 + 2) || *v240 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v240;
          *((_QWORD *)a2 + 1) = v240 + 1;
        }
        v241 = *((_DWORD *)a2 + 14);
        v242 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v241 + 1;
        if (v241 >= v242)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator *)v239, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v243 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v243, 1);
        v244 = v243 - 1;
        if (v244 < 0 == v15)
          *((_DWORD *)a2 + 14) = v244;
        v245 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v245 <= 1 || *v245 != 138 || v245[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v245 + 2;
LABEL_582:
        *((_DWORD *)this + 79) |= 0x20000000u;
        v246 = *((_QWORD *)this + 30);
        if (!v246)
        {
          v246 = operator new();
          *(_QWORD *)v246 = &off_1E25BA3B8;
          *(_OWORD *)(v246 + 8) = 0u;
          *(_OWORD *)(v246 + 24) = 0u;
          *(_OWORD *)(v246 + 40) = 0u;
          *(_OWORD *)(v246 + 56) = 0u;
          *((_QWORD *)this + 30) = v246;
        }
        v275 = 0;
        v247 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v247 >= *((_QWORD *)a2 + 2) || *v247 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v247;
          *((_QWORD *)a2 + 1) = v247 + 1;
        }
        v248 = *((_DWORD *)a2 + 14);
        v249 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v248 + 1;
        if (v248 >= v249)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit *)v246, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v250 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v250, 1);
        v251 = v250 - 1;
        if (v251 < 0 == v15)
          *((_DWORD *)a2 + 14) = v251;
        v252 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v252 <= 1 || *v252 != 146 || v252[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v252 + 2;
LABEL_597:
        *((_DWORD *)this + 79) |= 0x40000000u;
        v253 = *((_QWORD *)this + 31);
        if (!v253)
        {
          v253 = operator new();
          *(_QWORD *)v253 = &off_1E25BF098;
          *(_QWORD *)(v253 + 48) = 0;
          *(_QWORD *)(v253 + 56) = 0;
          *(_DWORD *)(v253 + 64) = 0;
          *(_QWORD *)(v253 + 72) = 0;
          *(_OWORD *)(v253 + 8) = 0u;
          *(_OWORD *)(v253 + 24) = 0u;
          *(_DWORD *)(v253 + 40) = 0;
          *((_QWORD *)this + 31) = v253;
        }
        v275 = 0;
        v254 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v254 >= *((_QWORD *)a2 + 2) || *v254 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v254;
          *((_QWORD *)a2 + 1) = v254 + 1;
        }
        v255 = *((_DWORD *)a2 + 14);
        v256 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v255 + 1;
        if (v255 >= v256)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)v253, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v257 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v257, 1);
        v258 = v257 - 1;
        if (v258 < 0 == v15)
          *((_DWORD *)a2 + 14) = v258;
        v259 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v259 <= 1 || *v259 != 154 || v259[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v259 + 2;
LABEL_612:
        *((_DWORD *)this + 79) |= 0x80000000;
        v260 = *((_QWORD *)this + 32);
        if (!v260)
        {
          v260 = operator new();
          *(_QWORD *)v260 = &off_1E25B0EE0;
          *(_DWORD *)(v260 + 56) = 0;
          *(_QWORD *)(v260 + 48) = 0;
          *(_OWORD *)(v260 + 8) = 0u;
          *(_OWORD *)(v260 + 24) = 0u;
          *(_QWORD *)(v260 + 37) = 0;
          *((_QWORD *)this + 32) = v260;
        }
        v275 = 0;
        v261 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v261 >= *((_QWORD *)a2 + 2) || *v261 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v261;
          *((_QWORD *)a2 + 1) = v261 + 1;
        }
        v262 = *((_DWORD *)a2 + 14);
        v263 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v262 + 1;
        if (v262 >= v263)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::OutdoorUpdate::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::OutdoorUpdate *)v260, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v264 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v264, 1);
        v265 = v264 - 1;
        if (v265 < 0 == v15)
          *((_DWORD *)a2 + 14) = v265;
        v266 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v266 <= 1 || *v266 != 194 || v266[1] != 62)
          continue;
        *((_QWORD *)a2 + 1) = v266 + 2;
LABEL_627:
        *((_DWORD *)this + 80) |= 1u;
        v267 = (CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)*((_QWORD *)this + 33);
        if (!v267)
        {
          v267 = (CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)operator new();
          *((_QWORD *)v267 + 1) = 0;
          *((_QWORD *)v267 + 2) = 0;
          *(_QWORD *)v267 = &off_1E25BDE50;
          *((_QWORD *)this + 33) = v267;
        }
        v275 = 0;
        v268 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v268 >= *((_QWORD *)a2 + 2) || *v268 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v268;
          *((_QWORD *)a2 + 1) = v268 + 1;
        }
        v269 = *((_DWORD *)a2 + 14);
        v270 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v269 + 1;
        if (v269 >= v270)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergePartialFromCodedStream(v267, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v271 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v271, 1);
        v272 = v271 - 1;
        if (v272 < 0 == v15)
          *((_DWORD *)a2 + 14) = v272;
        v273 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v273 <= 1 || *v273 != 242 || v273[1] != 62)
          continue;
        *((_QWORD *)a2 + 1) = v273 + 2;
LABEL_15:
        *((_DWORD *)this + 80) |= 2u;
        v10 = (CoreNavigation::CLP::LogEntry::Raven::LogEntry *)*((_QWORD *)this + 34);
        if (!v10)
        {
          v10 = (CoreNavigation::CLP::LogEntry::Raven::LogEntry *)operator new();
          *(_QWORD *)v10 = &off_1E25BFF20;
          *((_QWORD *)v10 + 1) = 0;
          *((_QWORD *)v10 + 2) = 0;
          *((_QWORD *)v10 + 3) = 0;
          *((_QWORD *)this + 34) = v10;
        }
        v275 = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v11;
          *((_QWORD *)a2 + 1) = v11 + 1;
        }
        v12 = *((_DWORD *)a2 + 14);
        v13 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v12 + 1;
        if (v12 >= v13)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::Raven::LogEntry::MergePartialFromCodedStream(v10, a2)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v14 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)a2 + 14) = v16;
        v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v17 <= 1 || *v17 != 250 || v17[1] != 62)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 2;
LABEL_106:
        *((_DWORD *)this + 80) |= 4u;
        v18 = *((_QWORD *)this + 35);
        if (!v18)
        {
          v18 = operator new();
          *(_QWORD *)(v18 + 32) = 0xFFFFFFFFLL;
          *(_DWORD *)(v18 + 40) = 0;
          *(_QWORD *)v18 = &off_1E25C09E8;
          *(_QWORD *)(v18 + 8) = 0;
          *(_QWORD *)(v18 + 16) = 0;
          *(_QWORD *)(v18 + 24) = 0;
          *((_QWORD *)this + 35) = v18;
        }
        v275 = 0;
        v19 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v19;
          *((_QWORD *)a2 + 1) = v19 + 1;
        }
        v20 = *((_DWORD *)a2 + 14);
        v21 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v20 + 1;
        if (v20 >= v21)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::Vision::LogEntry::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::Vision::LogEntry *)v18, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v22 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v22, 1);
        v23 = v22 - 1;
        if (v23 < 0 == v15)
          *((_DWORD *)a2 + 14) = v23;
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v24 <= 1 || *v24 != 146 || v24[1] != 63)
          continue;
        *((_QWORD *)a2 + 1) = v24 + 2;
LABEL_121:
        *((_DWORD *)this + 80) |= 8u;
        v25 = (CoreNavigation::CLP::LogEntry::TropicalSavanna::LogEntry *)*((_QWORD *)this + 36);
        if (!v25)
        {
          v25 = (CoreNavigation::CLP::LogEntry::TropicalSavanna::LogEntry *)operator new();
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = 0;
          *(_QWORD *)v25 = &off_1E25BDD60;
          *((_QWORD *)this + 36) = v25;
        }
        v275 = 0;
        v26 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v26;
          *((_QWORD *)a2 + 1) = v26 + 1;
        }
        v27 = *((_DWORD *)a2 + 14);
        v28 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v27 + 1;
        if (v27 >= v28)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::TropicalSavanna::LogEntry::MergePartialFromCodedStream(v25, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v29 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v29, 1);
        v30 = v29 - 1;
        if (v30 < 0 == v15)
          *((_DWORD *)a2 + 14) = v30;
        v31 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v31 <= 1 || *v31 != 178 || v31[1] != 63)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 2;
LABEL_136:
        *((_DWORD *)this + 80) |= 0x10u;
        v32 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *)*((_QWORD *)this + 37);
        if (!v32)
        {
          v32 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *)operator new();
          *((_QWORD *)v32 + 1) = 0;
          *((_QWORD *)v32 + 2) = 0;
          *(_QWORD *)v32 = &off_1E25BF5C0;
          *((_QWORD *)this + 37) = v32;
        }
        v275 = 0;
        v33 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v33;
          *((_QWORD *)a2 + 1) = v33 + 1;
        }
        v34 = *((_DWORD *)a2 + 14);
        v35 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v34 + 1;
        if (v34 >= v35)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::MergePartialFromCodedStream(v32, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v36 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v36, 1);
        v37 = v36 - 1;
        if (v37 < 0 == v15)
          *((_DWORD *)a2 + 14) = v37;
        v38 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v38 <= 1 || *v38 != 194 || v38[1] != 63)
          continue;
        *((_QWORD *)a2 + 1) = v38 + 2;
LABEL_151:
        *((_DWORD *)this + 80) |= 0x20u;
        v39 = (CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry *)*((_QWORD *)this + 38);
        if (!v39)
        {
          v39 = (CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry *)operator new();
          *(_QWORD *)v39 = &off_1E25BEA08;
          *((_QWORD *)v39 + 1) = 0;
          *((_QWORD *)v39 + 2) = 0;
          *((_QWORD *)v39 + 3) = MEMORY[0x1E0DE8338];
          *((_QWORD *)v39 + 4) = 0;
          *((_QWORD *)this + 38) = v39;
        }
        v275 = 0;
        v40 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v275))return 0;
        }
        else
        {
          v275 = *v40;
          *((_QWORD *)a2 + 1) = v40 + 1;
        }
        v41 = *((_DWORD *)a2 + 14);
        v42 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v41 + 1;
        if (v41 >= v42)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry::MergePartialFromCodedStream(v39, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v43 = *((_DWORD *)a2 + 14);
        v15 = __OFSUB__(v43, 1);
        v44 = v43 - 1;
        if (v44 < 0 == v15)
          *((_DWORD *)a2 + 14) = v44;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_175;
        goto LABEL_93;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_189;
        goto LABEL_93;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_203;
        goto LABEL_93;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_217;
        goto LABEL_93;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_231;
        goto LABEL_93;
      case 7u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_245;
        goto LABEL_93;
      case 8u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_259;
        goto LABEL_93;
      case 9u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_273;
        goto LABEL_93;
      case 0xAu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_287;
        goto LABEL_93;
      case 0xBu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_301;
        goto LABEL_93;
      case 0xCu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_315;
        goto LABEL_93;
      case 0xDu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_329;
        goto LABEL_93;
      case 0xEu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_343;
        goto LABEL_93;
      case 0xFu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_357;
        goto LABEL_93;
      case 0x10u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_372;
        goto LABEL_93;
      case 0x11u:
      case 0x12u:
      case 0x14u:
LABEL_23:
        v7 = TagFallback & 7;
        goto LABEL_93;
      case 0x13u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_387;
        goto LABEL_93;
      case 0x15u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_402;
        goto LABEL_93;
      case 0x16u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_417;
        goto LABEL_93;
      case 0x17u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_432;
        goto LABEL_93;
      case 0x18u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_447;
        goto LABEL_93;
      case 0x19u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_462;
        goto LABEL_93;
      case 0x1Au:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_477;
        goto LABEL_93;
      case 0x1Bu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_492;
        goto LABEL_93;
      case 0x1Cu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_507;
        goto LABEL_93;
      case 0x1Du:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_522;
        goto LABEL_93;
      case 0x1Eu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_537;
        goto LABEL_93;
      case 0x1Fu:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_552;
        goto LABEL_93;
      case 0x20u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_567;
        goto LABEL_93;
      case 0x21u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_582;
        goto LABEL_93;
      case 0x22u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_597;
        goto LABEL_93;
      case 0x23u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_612;
LABEL_93:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
      default:
        switch(v6)
        {
          case 0x3EEu:
            v7 = TagFallback & 7;
            if (v7 == 2)
              goto LABEL_15;
            goto LABEL_93;
          case 0x3EFu:
            v7 = TagFallback & 7;
            if (v7 == 2)
              goto LABEL_106;
            goto LABEL_93;
          case 0x3F0u:
          case 0x3F1u:
          case 0x3F3u:
          case 0x3F4u:
          case 0x3F5u:
          case 0x3F7u:
            goto LABEL_23;
          case 0x3F2u:
            v7 = TagFallback & 7;
            if (v7 == 2)
              goto LABEL_121;
            goto LABEL_93;
          case 0x3F6u:
            v7 = TagFallback & 7;
            if (v7 == 2)
              goto LABEL_136;
            goto LABEL_93;
          case 0x3F8u:
            v7 = TagFallback & 7;
            if (v7 == 2)
              goto LABEL_151;
            goto LABEL_93;
          default:
            if (v6 != 1000)
              goto LABEL_23;
            v7 = TagFallback & 7;
            if (v7 == 2)
              goto LABEL_627;
            goto LABEL_93;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Timer::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::Timer *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;
  unsigned int v14;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *((_DWORD *)this + 5) |= 1u;
      v6 = *((_QWORD *)this + 1);
      if (!v6)
      {
        v6 = operator new();
        *(_QWORD *)v6 = &off_1E25BDBF8;
        *(_OWORD *)(v6 + 8) = 0u;
        *(_OWORD *)(v6 + 24) = 0u;
        *((_QWORD *)this + 1) = v6;
      }
      v14 = 0;
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v14))
          return 0;
      }
      else
      {
        v14 = *v7;
        *((_QWORD *)a2 + 1) = v7 + 1;
      }
      v8 = *((_DWORD *)a2 + 14);
      v9 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v8 + 1;
      if (v8 >= v9)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)v6, a2)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v10 = *((_DWORD *)a2 + 14);
      v11 = __OFSUB__(v10, 1);
      v12 = v10 - 1;
      if (v12 < 0 == v11)
        *((_DWORD *)a2 + 14) = v12;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t result;
  unint64_t v11;

  do
  {
    while (1)
    {
      while (1)
      {
        v4 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v4 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_27;
        v11 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
          return 0;
        *((_QWORD *)this + 1) = v11;
        *((_DWORD *)this + 9) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && *v8 == 17)
        {
          *((_QWORD *)a2 + 1) = v8 + 1;
LABEL_17:
          v11 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
            return 0;
          *((_QWORD *)this + 2) = v11;
          *((_DWORD *)this + 9) |= 2u;
          v9 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v9 < *((_QWORD *)a2 + 2) && *v9 == 25)
          {
            *((_QWORD *)a2 + 1) = v9 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v6 == 2)
      {
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v6 != 3)
      {
        v7 = TagFallback & 7;
        goto LABEL_27;
      }
      v7 = TagFallback & 7;
      if (v7 == 1)
        break;
LABEL_27:
      if (v7 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
LABEL_21:
    v11 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0)
      return 0;
    *((_QWORD *)this + 3) = v11;
    *((_DWORD *)this + 9) |= 4u;
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t sub_18D072BFC(uint64_t a1)
{
  void *v2;

  sub_18D03C8FC(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_18D072C48(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenPositionContextEstimatorActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::bad_cast v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[32];
  unsigned __int8 v40;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven21GnssAvailabilityEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven21GnssAvailabilityEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v33.__vftable = 0;
      std::bad_cast::bad_cast(&v33);
      v33.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = (_OWORD *)*((_QWORD *)this + 2);
    v33.__vftable = (std::bad_cast_vtbl *)&unk_1E25C2DA0;
    v29 = v27[2];
    v28 = v27[3];
    v34 = v27[1];
    v35 = v29;
    v36 = v28;
    v31 = v27[5];
    v30 = v27[6];
    v32 = *(_OWORD *)((char *)v27 + 106);
    v37 = v27[4];
    *(_OWORD *)&v39[10] = v32;
    *(_OWORD *)v39 = v30;
    v38 = v31;
  }
  else
  {
    LOWORD(v33.__vftable) = 3;
    v40 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v40, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v35 = 0uLL;
    v38 = 0uLL;
    *(_OWORD *)&v39[16] = 0u;
    v34 = 0uLL;
    v33.__vftable = (std::bad_cast_vtbl *)&unk_1E25C2DA0;
    v36 = 0uLL;
    v37 = 0uLL;
    *(_QWORD *)v39 = 0;
    *(_QWORD *)&v39[8] = 0x7FF8000000000000;
  }
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v9, (const raven::GnssAvailabilityEvent *)&v33);
}

void sub_18D072DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  std::exception::~exception(&a11);
  _Unwind_Resume(a1);
}

void sub_18D072DF0(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenPositionContextEstimatorActiveObject *v8;
  _QWORD v9[304];

  v8 = *a2;
  sub_18D0408A8(v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v9);
}

void sub_18D072E44(uint64_t a1, uint64_t a2)
{
  _BYTE **v2;
  _BYTE *v3;
  cnframework::GenericEvent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _QWORD v16[304];
  void *__p[2];
  char v18;
  unsigned __int8 v19;
  __int16 v20;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = *v2;
  sub_18D0408A8(v16, v4, (uint64_t)v4, v5, v6, v7, v8, v9);
  if (v3[1976])
  {
    sub_18D0409EC((uint64_t)__p);
    if (!raven::RavenSolutionPostprocessor::PostprocessRavenSolution((raven::RavenSolutionPostprocessor *)(v3 + 480), (const raven::RavenSolutionEvent *)v16, (raven::RavenSolutionEvent *)__p))sub_18D05CEF4((uint64_t)v3, (uint64_t *)__p);
  }
  else
  {
    v20 = 12;
    v19 = 2;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)v3 + 16))(__p, v3);
    if (v18 >= 0)
      v15 = __p;
    else
      LOBYTE(v15) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "Warning: %s Active Object not configured", v10, v11, v12, v13, v14, (char)v15);
    if (v18 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D072F28(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x99F]) < 0)
    operator delete((void *)STACK[0x988]);
  _Unwind_Resume(a1);
}

void sub_18D0730D0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC628;
}

void sub_18D0730E0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC2B8;
}

void sub_18D0730F0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC050;
}

void sub_18D073100(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB9C8;
}

void sub_18D073110(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB970;
}

void sub_18D073120(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAE70;
}

void sub_18D073130(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA058;
}

void sub_18D073140(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9870;
}

void sub_18D073150(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8D18;
}

_QWORD *sub_18D073160@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenAccelerationDecompositionActiveObject");
}

_QWORD *sub_18D073170@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenPositionContextEstimatorActiveObject");
}

_QWORD *raven::RavenActivityStateEstimatorActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenActivityStateEstimatorActiveObject");
}

_QWORD *sub_18D073190@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenSolutionPostprocessorActiveObject");
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupGnssAvailabilityStateProbabilityGivenOutdoor(uint64_t a1, unsigned __int8 *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t result;
  double v11;
  unsigned __int8 v12;
  __int16 v13;

  v9 = *a2;
  if (v9 < 4)
  {
    result = 0;
    v11 = dbl_18D3180F0[v9];
  }
  else
  {
    v13 = 12;
    v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "LookupGnssAvailabilityStateProbabilityGivenOutdoor(),index out of bound,%lu", a4, a5, a6, a7, a8, v9);
    result = 0xFFFFFFFFLL;
    v11 = -1.0;
  }
  *a3 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupGnssAvailabilityStateProbabilityGivenIndoor(uint64_t a1, unsigned __int8 *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t result;
  double v11;
  unsigned __int8 v12;
  __int16 v13;

  v9 = *a2;
  if (v9 < 4)
  {
    result = 0;
    v11 = dbl_18D318108[v9];
  }
  else
  {
    v13 = 12;
    v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "LookupGnssAvailabilityStateProbabilityGivenIndoor(),index out of bound,%lu", a4, a5, a6, a7, a8, v9);
    result = 0xFFFFFFFFLL;
    v11 = -1.0;
  }
  *a3 = v11;
  return result;
}

_QWORD *sub_18D073290@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenPassThroughEstimatorActiveObject");
}

_QWORD *raven::RavenMovingStateEstimatorActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenMovingStateEstimatorActiveObject");
}

_QWORD *sub_18D0732B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenConvergenceEstimatorActiveObject");
}

_QWORD *sub_18D0732C0@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenMountStateEstimatorActiveObject");
}

_QWORD *raven::RavenIonosphereEstimatorActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenIonosphereEstimatorActiveObject");
}

_QWORD *sub_18D0732E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenIntegrityEstimatorActiveObject");
}

_QWORD *sub_18D0732F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenSignalEnvironmentActiveObject");
}

_QWORD *sub_18D073300@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenPressurePrefilterActiveObject");
}

_QWORD *sub_18D073310@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenSolutionSelectorActiveObject");
}

_QWORD *sub_18D073320@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenGnssPreprocessor");
}

_QWORD *raven::RavenDeltaVIOEstimateActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenDeltaVIOEstimateActiveObject");
}

_QWORD *raven::RavenIMUPreprocessorActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenIMUPreprocessorActiveObject");
}

_QWORD *sub_18D073350@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenDeviceAttitudeActiveObject");
}

_QWORD *sub_18D073360@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenDeltaAltitudeActiveObject");
}

_QWORD *sub_18D073370@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenPNTEstimatorActiveObject");
}

_QWORD *raven::RavenUserSpeedActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenUserSpeedActiveObject");
}

_QWORD *raven::RavenMapVectorActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenMapVectorActiveObject");
}

_QWORD *raven::RavenSolutionActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenSolutionActiveObject");
}

_QWORD *sub_18D0733B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenTimerActiveObject");
}

uint64_t sub_18D0733C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D0733CC@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "GnssAvailabilityEvent");
}

BOOL sub_18D0733DC(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a1 + 96))
  {
    *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
    v3 = *(_QWORD **)(a2 + 32);
    *v3 = *(_QWORD *)(a1 + 128);
    v3[3] = *(_QWORD *)(a1 + 136);
    v3[6] = *(_QWORD *)(a1 + 144);
    v3[1] = *(_QWORD *)(a1 + 136);
    v3[4] = *(_QWORD *)(a1 + 152);
    v3[7] = *(_QWORD *)(a1 + 160);
    v3[2] = *(_QWORD *)(a1 + 144);
    v3[5] = *(_QWORD *)(a1 + 160);
    v3[8] = *(_QWORD *)(a1 + 168);
  }
  return v2 != 0;
}

void *sub_18D073448()
{
}

uint64_t sub_18D073454(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int i;

  v3 = *(_DWORD *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v3 * v2;
  *(_DWORD *)(a2 + 20) = v2;
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_DWORD *)(result + 20);
    v7 = *(_QWORD *)(result + 32);
    v8 = *(_QWORD *)(a2 + 32);
    do
    {
      v9 = v4;
      v10 = v5;
      for (i = v3; i; --i)
      {
        *(_QWORD *)(v8 + 8 * v10) = *(_QWORD *)(v7 + 8 * v9);
        v10 += v2;
        ++v9;
      }
      ++v5;
      v4 += v6;
    }
    while (v5 != v2);
  }
  return result;
}

void raven::RavenAccelerationDecompositionActiveObject::~RavenAccelerationDecompositionActiveObject(raven::RavenAccelerationDecompositionActiveObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E25C4970;
  sub_18D16C7E0((_QWORD *)this + 2260);
  *((_QWORD *)this + 2181) = &unk_1E25B9C28;
  *((_QWORD *)this + 2241) = &unk_1E25C5E70;
  *((_QWORD *)this + 2220) = &unk_1E25C5E70;
  *((_QWORD *)this + 2211) = &unk_1E25C5E70;
  *((_QWORD *)this + 2198) = &unk_1E25C5E70;
  *((_QWORD *)this + 2189) = &unk_1E25C5E70;
  v2 = 16800;
  do
  {
    *(_QWORD *)((char *)this + v2 + 496) = &unk_1E25B8DB8;
    v2 -= 48;
  }
  while (v2);
  *((_QWORD *)this + 62) = &unk_1E25B90C0;
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  raven::RavenAccelerationDecompositionActiveObject::~RavenAccelerationDecompositionActiveObject(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenPositionContextEstimatorActiveObject::~RavenPositionContextEstimatorActiveObject(void **this)
{
  *this = &off_1E25C4888;
  if (*((char *)this + 1047) < 0)
    operator delete(this[128]);
  if (*((char *)this + 1023) < 0)
    operator delete(this[125]);
  this[74] = &off_1E25B8E90;
  this[82] = &unk_1E25C5E70;
  this[75] = &unk_1E25C5E70;
  if (*((char *)this + 567) < 0)
    operator delete(this[68]);
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

{
  raven::RavenPositionContextEstimatorActiveObject::~RavenPositionContextEstimatorActiveObject(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenPositionContextEstimatorActiveObject::HandleEvent(raven::RavenPositionContextEstimatorActiveObject *this, const raven::GnssAvailabilityEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  unsigned __int8 v11;
  __int16 v12;

  if (*((_BYTE *)this + 480))
  {
    raven::RavenPositionContextEstimator::HandleEvent((raven::RavenPositionContextEstimatorActiveObject *)((char *)this + 576), a2);
  }
  else
  {
    v12 = 12;
    v11 = 2;
    v10[0] = (*(uint64_t (**)(const raven::GnssAvailabilityEvent *))(*(_QWORD *)a2 + 16))(a2);
    v10[1] = v3;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 520, (uint64_t)v10, "RavenPositionContextEstimatorActiveObject is not configured.");
    if (*((char *)this + 543) >= 0)
      LOBYTE(v9) = (_BYTE)this + 8;
    else
      v9 = *((_QWORD *)this + 65);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "%s", v4, v5, v6, v7, v8, v9);
  }
}

void raven::RavenPositionContextEstimatorActiveObject::HandleEvent(raven::RavenPositionContextEstimatorActiveObject *this, const raven::RavenSolutionEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  unsigned __int8 v11;
  __int16 v12;

  if (*((_BYTE *)this + 480))
  {
    *((_QWORD *)this + 93) = *((_QWORD *)a2 + 169);
    *((_BYTE *)this + 752) = *((_BYTE *)a2 + 1344);
  }
  else
  {
    v12 = 12;
    v11 = 2;
    v10[0] = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v10[1] = v3;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 520, (uint64_t)v10, "RavenPositionContextEstimatorActiveObject is not configured.");
    if (*((char *)this + 543) >= 0)
      LOBYTE(v9) = (_BYTE)this + 8;
    else
      v9 = *((_QWORD *)this + 65);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "%s", v4, v5, v6, v7, v8, v9);
  }
}

void sub_18D073724(cnframework::ActiveObjectBase *a1)
{
  *(_QWORD *)a1 = &off_1E25C4788;
  sub_18D07BDF4((_QWORD *)a1 + 80);
  sub_18D07BD60((_QWORD *)a1 + 74);
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

void sub_18D073760(cnframework::ActiveObjectBase *this)
{
  void *v2;

  *(_QWORD *)this = &unk_1E25C4718;
  *((_QWORD *)this + 178) = &unk_1E25B8E18;
  *((_QWORD *)this + 194) = &unk_1E25C5E70;
  *((_QWORD *)this + 179) = &unk_1E25C5E70;
  if (*((_BYTE *)this + 1064))
  {
    *((_QWORD *)this + 104) = &off_1E25C2AE0;
    v2 = (void *)*((_QWORD *)this + 130);
    if (v2)
    {
      *((_QWORD *)this + 131) = v2;
      operator delete(v2);
    }
  }
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

void raven::RavenSolutionPostprocessorActiveObject::~RavenSolutionPostprocessorActiveObject(raven::RavenSolutionPostprocessorActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C46A8;
  if (*((_BYTE *)this + 1856))
    *((_BYTE *)this + 1856) = 0;
  sub_18D188EA8((_QWORD *)this + 62);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  raven::RavenSolutionPostprocessorActiveObject::~RavenSolutionPostprocessorActiveObject(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t raven::ConvertProtobufToGnssAvailabilityEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *a2, raven::GnssAvailabilityEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  unsigned __int8 v33;
  __int16 v34;
  unsigned __int8 v35;
  __int16 v36;

  if ((*((_BYTE *)this + 36) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    *((_QWORD *)a2 + 13) = *((_QWORD *)this + 2);
    if ((*((_DWORD *)this + 7) - 1) >= 3)
    {
      result = cnprint::CNPrinter::GetLogLevel(0);
      if (result <= 1)
      {
        v36 = 12;
        v35 = 1;
        v16 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *))(*(_QWORD *)a2 + 16))(a2);
        v31 = v17 + (double)v16;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "t,%.3lf,WARNING: Gnss Availability Prediction, unknown measurement source", v18, v19, v20, v21, v22, SLOBYTE(v31));
      }
      v15 = 0;
    }
    else
    {
      v15 = *((_BYTE *)this + 28);
    }
    *((_BYTE *)a2 + 113) = v15;
    v23 = *((_DWORD *)this + 6) - 1;
    if (v23 >= 3)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
      {
        v34 = 12;
        v33 = 1;
        v24 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *))(*(_QWORD *)a2 + 16))(a2);
        v32 = v25 + (double)v24;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,WARNING: Gnss Availability Prediction, unknown state", v26, v27, v28, v29, v30, SLOBYTE(v32));
      }
      LOBYTE(v23) = 0;
    }
    *((_BYTE *)a2 + 112) = v23;
    return 1;
  }
  return result;
}

void sub_18D07396C(void **this)
{
  char *v2;
  void *v3;

  v2 = (char *)this + 4719;
  *this = &unk_1E25C4588;
  if (*((char *)this + 4743) < 0)
    operator delete(this[590]);
  if (*v2 < 0)
    operator delete(this[587]);
  this[566] = &unk_1E25B8EB8;
  this[575] = &unk_1E25C5E70;
  this[567] = &unk_1E25C5E70;
  v3 = this[156];
  if (v3)
  {
    this[157] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 535) < 0)
    operator delete(this[64]);
  if (*((char *)this + 511) < 0)
    operator delete(this[61]);
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

void raven::RavenConvergenceEstimatorActiveObject::~RavenConvergenceEstimatorActiveObject(raven::RavenConvergenceEstimatorActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C4500;
  sub_18D20AB14((uint64_t *)this + 375);
  sub_18D074630((void **)this);
}

{
  *(_QWORD *)this = &off_1E25C4500;
  sub_18D20AB14((uint64_t *)this + 375);
  sub_18D074630((void **)this);
}

{
  *(_QWORD *)this = &off_1E25C4500;
  sub_18D20AB14((uint64_t *)this + 375);
  sub_18D074630((void **)this);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D073A4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25C43F8;
  sub_18D2B1FCC(a1 + 2288);
  std::mutex::~mutex((std::mutex *)(a1 + 2224));
  if (*(char *)(a1 + 2215) < 0)
    operator delete(*(void **)(a1 + 2192));
  if (*(char *)(a1 + 2191) < 0)
    operator delete(*(void **)(a1 + 2168));
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D073ABC(_QWORD *a1)
{
  *a1 = &off_1E25C41F8;
  sub_18D072BFC((uint64_t)(a1 + 4));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D073AFC(_QWORD *a1)
{
  _BYTE *v2;

  v2 = a1 + 841;
  *a1 = &unk_1E25C3EF8;
  sub_18D20B918(a1 + 1236);
  a1[1215] = &unk_1E25C5E70;
  a1[1207] = &unk_1E25C5E70;
  a1[1199] = &unk_1E25C5E70;
  a1[1184] = &unk_1E25C5E70;
  a1[1170] = &unk_1E25C5E70;
  a1[1156] = &unk_1E25C5E70;
  a1[1148] = &unk_1E25C5E70;
  a1[1129] = &unk_1E25C5E70;
  a1[1115] = &unk_1E25C5E70;
  a1[1101] = &unk_1E25C5E70;
  a1[1093] = &unk_1E25C5E70;
  a1[1074] = &unk_1E25C5E70;
  a1[1060] = &unk_1E25C5E70;
  a1[1046] = &unk_1E25C5E70;
  a1[1038] = &unk_1E25C5E70;
  a1[1019] = &unk_1E25C5E70;
  a1[1005] = &unk_1E25C5E70;
  a1[991] = &unk_1E25C5E70;
  a1[983] = &unk_1E25C5E70;
  if (v2[1096])
  {
    a1[962] = &unk_1E25C5E70;
    a1[948] = &unk_1E25C5E70;
    a1[934] = &unk_1E25C5E70;
    a1[926] = &unk_1E25C5E70;
    a1[907] = &unk_1E25C5E70;
    a1[893] = &unk_1E25C5E70;
    a1[879] = &unk_1E25C5E70;
    a1[871] = &unk_1E25C5E70;
  }
  if (*v2)
  {
    a1[703] = &off_1E25C2C98;
    a1[823] = &unk_1E25C5E70;
    a1[809] = &unk_1E25C5E70;
    a1[795] = &unk_1E25C5E70;
    a1[787] = &unk_1E25C5E70;
    a1[768] = &unk_1E25C5E70;
    a1[754] = &unk_1E25C5E70;
    a1[740] = &unk_1E25C5E70;
    a1[732] = &unk_1E25C5E70;
  }
  a1[79] = &unk_1E25C5E70;
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

void sub_18D073C04(cnframework::ActiveObjectBase *a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E25C3E20;
  v2 = (void *)*((_QWORD *)a1 + 145);
  if (v2)
  {
    *((_QWORD *)a1 + 146) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)a1 + 142);
  if (v3)
  {
    *((_QWORD *)a1 + 143) = v3;
    operator delete(v3);
  }
  sub_18D073724(a1);
}

void sub_18D073C50(cnframework::ActiveObjectBase *a1)
{
  sub_18D073C04(a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D073C74()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D073C88()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t raven::RavenDeviceAttitudeActiveObject::DownSamplingAccelGyroSamples(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  double v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  double v22;
  uint64_t v23;
  double v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  double v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  double v69;
  uint64_t v70;
  double v71;
  BOOL v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  double v76;
  BOOL v77;
  unint64_t v78;
  double *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int64x2_t v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[24];
  int64x2_t v97;
  char v98;
  uint64_t v99;
  __int16 v100;
  _BYTE v101[4];
  __int128 v102;
  _DWORD v103[7];
  _BYTE v104[4];
  __int128 v105;
  _DWORD v106[7];
  _BYTE v107[4];
  __int128 v108;
  _DWORD v109[7];
  void *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[2];

  v1 = this;
  v107[0] = 0;
  v108 = 0u;
  memset(v109, 0, sizeof(v109));
  v104[0] = 0;
  v105 = 0u;
  memset(v106, 0, sizeof(v106));
  v101[0] = 0;
  v102 = 0u;
  memset(v103, 0, sizeof(v103));
  v2 = *(_QWORD *)(this + 7768);
  if (v2)
  {
    v89 = vdupq_n_s64(0x7FF8000000000000uLL);
    while (1)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 7736) + 8 * ((v2 + *(_QWORD *)(v1 + 7760) - 1) / 0x1AuLL))
         + 152 * ((v2 + *(_QWORD *)(v1 + 7760) - 1) % 0x1AuLL);
      v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 16))(v3);
      v6 = v5;
      v7 = v5;
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 7736) + 8 * (*(_QWORD *)(v1 + 7760) / 0x1AuLL))
         + 152 * (*(_QWORD *)(v1 + 7760) % 0x1AuLL);
      v110 = (void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v8 + 16))(v8);
      *(_QWORD *)&v111 = v9;
      v10.i64[0] = *(_QWORD *)(*(_QWORD *)(v1 + 488) + 1144);
      v90 = 0;
      *(_QWORD *)&v91 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v90, 0, v10, v11);
      this = CNTimeSpan::operator+((uint64_t)&v110, &v90, v12, v13);
      if (v4)
        v15 = 1;
      else
        v15 = (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v15 && (this || (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v4 != this)
      {
        if (v4 <= this)
          break;
      }
      else if (v7 < v14)
      {
        break;
      }
      v107[0] = 0;
      v108 = 0u;
      memset(v109, 0, sizeof(v109));
      v104[0] = 0;
      v105 = 0u;
      memset(v106, 0, sizeof(v106));
      v101[0] = 0;
      v102 = 0u;
      memset(v103, 0, sizeof(v103));
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 7736) + 8 * (*(_QWORD *)(v1 + 7760) / 0x1AuLL))
          + 152 * (*(_QWORD *)(v1 + 7760) % 0x1AuLL);
      v110 = (void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 16))(v16);
      *(_QWORD *)&v111 = v17;
      v18.i64[0] = *(_QWORD *)(*(_QWORD *)(v1 + 488) + 1144);
      v90 = 0;
      *(_QWORD *)&v91 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v90, 0, v18, v19);
      v23 = CNTimeSpan::operator+((uint64_t)&v110, &v90, v20, v21);
      v24 = v22;
      v90 = &unk_1E25C2A50;
      v91 = 0uLL;
      LOBYTE(v92) = 0;
      *((_QWORD *)&v92 + 1) = 0;
      *(_QWORD *)&v93 = 0;
      BYTE8(v93) = 0;
      v94 = 0uLL;
      LOBYTE(v95) = 0;
      *((_QWORD *)&v95 + 1) = 0;
      *(_QWORD *)v96 = 0;
      *(int64x2_t *)&v96[8] = v89;
      v97 = v89;
      v98 = 0;
      v99 = 0x7FF8000000000000;
      if (v23)
        v25 = 1;
      else
        v25 = (*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v26 = v25;
      v100 = 0;
      while (1)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v1 + 7736) + 8 * (*(_QWORD *)(v1 + 7760) / 0x1AuLL))
            + 152 * (*(_QWORD *)(v1 + 7760) % 0x1AuLL);
        v28 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 16))(v27);
        v30 = v28 || (*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if (v30 && (v26 & 1) != 0 && v28 != v23)
          break;
        if (v29 >= v24)
          goto LABEL_32;
LABEL_31:
        v31 = *(_QWORD *)(v1 + 7736);
        v32 = *(_QWORD *)(v1 + 7760);
        v33 = v32 / 0x1A;
        v34 = 152 * (v32 % 0x1A);
        v35 = *(_QWORD *)(v31 + 8 * v33) + v34;
        v36 = *(_OWORD *)(v35 + 24);
        v91 = *(_OWORD *)(v35 + 8);
        v92 = v36;
        v37 = *(_OWORD *)(v35 + 56);
        v38 = *(_OWORD *)(v35 + 88);
        v39 = *(_OWORD *)(v35 + 40);
        v95 = *(_OWORD *)(v35 + 72);
        *(_OWORD *)v96 = v38;
        v93 = v39;
        v94 = v37;
        sub_18D1648E4((uint64_t)v107, (double *)(*(_QWORD *)(v31 + 8 * v33) + v34 + 104), 1.0);
        sub_18D1648E4((uint64_t)v104, (double *)(*(_QWORD *)(*(_QWORD *)(v1 + 7736) + 8 * (*(_QWORD *)(v1 + 7760) / 0x1AuLL))+ 152 * (*(_QWORD *)(v1 + 7760) % 0x1AuLL)+ 112), 1.0);
        sub_18D1648E4((uint64_t)v101, (double *)(*(_QWORD *)(*(_QWORD *)(v1 + 7736) + 8 * (*(_QWORD *)(v1 + 7760) / 0x1AuLL))+ 152 * (*(_QWORD *)(v1 + 7760) % 0x1AuLL)+ 120), 1.0);
        sub_18D20D7C8((int64x2_t *)(v1 + 7728));
      }
      if (v28 < v23)
        goto LABEL_31;
LABEL_32:
      *(_QWORD *)&v96[16] = *(_QWORD *)&v109[1];
      v97.i64[0] = *(_QWORD *)&v106[1];
      v97.i64[1] = *(_QWORD *)&v103[1];
      v100 = 769;
      sub_18D20D3B8((_QWORD *)(v1 + 496), (uint64_t)&v90);
      if (sub_18D295E20(v1, (_QWORD *)(v1 + 496), 3.0))
      {
        while (1)
        {
          v40 = *(_QWORD *)(v1 + 528);
          v41 = *(_QWORD *)(*(_QWORD *)(v1 + 504) + 8 * (v40 / 0x1A));
          v110 = &unk_1E25C2A50;
          v42 = v41 + 152 * (v40 % 0x1A);
          v43 = *(_OWORD *)(v42 + 88);
          v44 = *(_OWORD *)(v42 + 104);
          v45 = *(_OWORD *)(v42 + 120);
          *(_OWORD *)((char *)v118 + 10) = *(_OWORD *)(v42 + 130);
          v117 = v44;
          v118[0] = v45;
          v116 = v43;
          v46 = *(_OWORD *)(v42 + 24);
          v47 = *(_OWORD *)(v42 + 40);
          v48 = *(_OWORD *)(v42 + 72);
          v114 = *(_OWORD *)(v42 + 56);
          v115 = v48;
          v112 = v46;
          v113 = v47;
          v111 = *(_OWORD *)(v42 + 8);
          sub_18D20D7C8((int64x2_t *)(v1 + 496));
          if (!sub_18D295E20(v1, (_QWORD *)(v1 + 496), 3.0))
            break;
          if (!sub_18D295E20(v1, (_QWORD *)(v1 + 496), 3.0))
            goto LABEL_37;
        }
        sub_18D16BEE8(v1 + 496, (uint64_t)&v110);
      }
LABEL_37:
      v2 = *(_QWORD *)(v1 + 7768);
    }
  }
  v49 = *(_QWORD *)(v1 + 7816);
  if (v49)
  {
LABEL_39:
    v50 = *(_QWORD *)(*(_QWORD *)(v1 + 7784) + 8 * ((v49 + *(_QWORD *)(v1 + 7808) - 1) / 0x1AuLL))
        + 152 * ((v49 + *(_QWORD *)(v1 + 7808) - 1) % 0x1AuLL);
    v51 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v50 + 16))(v50);
    v53 = v52;
    v54 = v52;
    v55 = *(_QWORD *)(*(_QWORD *)(v1 + 7784) + 8 * (*(_QWORD *)(v1 + 7808) / 0x1AuLL))
        + 152 * (*(_QWORD *)(v1 + 7808) % 0x1AuLL);
    v110 = (void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v55 + 16))(v55);
    *(_QWORD *)&v111 = v56;
    v57.i64[0] = *(_QWORD *)(*(_QWORD *)(v1 + 488) + 1144);
    v90 = 0;
    *(_QWORD *)&v91 = 0;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v90, 0, v57, v58);
    this = CNTimeSpan::operator+((uint64_t)&v110, &v90, v59, v60);
    if (v51)
      v62 = 1;
    else
      v62 = (*(_QWORD *)&v53 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (v62 && (this || (*(_QWORD *)&v61 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v51 != this)
    {
      if (v51 <= this)
        return this;
    }
    else if (v54 < v61)
    {
      return this;
    }
    v107[0] = 0;
    v108 = 0u;
    memset(v109, 0, sizeof(v109));
    v104[0] = 0;
    v105 = 0u;
    memset(v106, 0, sizeof(v106));
    v101[0] = 0;
    v102 = 0u;
    memset(v103, 0, sizeof(v103));
    v63 = *(_QWORD *)(*(_QWORD *)(v1 + 7784) + 8 * (*(_QWORD *)(v1 + 7808) / 0x1AuLL))
        + 152 * (*(_QWORD *)(v1 + 7808) % 0x1AuLL);
    v110 = (void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v63 + 16))(v63);
    *(_QWORD *)&v111 = v64;
    v65.i64[0] = *(_QWORD *)(*(_QWORD *)(v1 + 488) + 1144);
    v90 = 0;
    *(_QWORD *)&v91 = 0;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v90, 0, v65, v66);
    v70 = CNTimeSpan::operator+((uint64_t)&v110, &v90, v67, v68);
    v71 = v69;
    v91 = 0uLL;
    LOBYTE(v92) = 0;
    *((_QWORD *)&v92 + 1) = 0;
    *(_QWORD *)&v93 = 0;
    BYTE8(v93) = 0;
    v94 = 0uLL;
    LOBYTE(v95) = 0;
    *((_QWORD *)&v95 + 1) = 0;
    *(_QWORD *)v96 = 0;
    v90 = &unk_1E25C21E8;
    *(_QWORD *)&v96[8] = 0x7FF8000000000000;
    v98 = 0;
    if (v70)
      v72 = 1;
    else
      v72 = (*(_QWORD *)&v69 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    v73 = v72;
    v99 = 0x7FF8000000000000;
    while (1)
    {
      v74 = *(_QWORD *)(*(_QWORD *)(v1 + 7784) + 8 * (*(_QWORD *)(v1 + 7808) / 0x1AuLL))
          + 152 * (*(_QWORD *)(v1 + 7808) % 0x1AuLL);
      v75 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v74 + 16))(v74);
      if (v75)
        v77 = 1;
      else
        v77 = (*(_QWORD *)&v76 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v77 && (v73 & 1) != 0 && v75 != v70)
      {
        if (v75 >= v70)
        {
LABEL_68:
          *(_QWORD *)&v96[16] = *(_QWORD *)&v109[1];
          v97.i64[0] = *(_QWORD *)&v106[1];
          v97.i64[1] = *(_QWORD *)&v103[1];
          if (*(_BYTE *)(v1 + 8400))
          {
            v79 = *(double **)(v1 + 8048);
            *(double *)&v96[16] = *(double *)&v109[1] - *v79;
            *(double *)v97.i64 = *(double *)&v106[1] - v79[1];
            *(double *)&v97.i64[1] = *(double *)&v103[1] - v79[2];
          }
          v100 = 769;
          sub_18D293A28((void **)(v1 + 6904), (uint64_t)&v90);
          if (sub_18D295E20(v1, (_QWORD *)(v1 + 6904), 3.0))
          {
            while (1)
            {
              v80 = *(_QWORD *)(v1 + 6936);
              v81 = *(_QWORD *)(*(_QWORD *)(v1 + 6912) + 8 * (v80 / 0x1A));
              v110 = &unk_1E25C21E8;
              v82 = v81 + 152 * (v80 % 0x1A);
              v83 = *(_OWORD *)(v82 + 88);
              v84 = *(_OWORD *)(v82 + 104);
              v85 = *(_OWORD *)(v82 + 120);
              *(_OWORD *)((char *)v118 + 10) = *(_OWORD *)(v82 + 130);
              v117 = v84;
              v118[0] = v85;
              v116 = v83;
              v86 = *(_OWORD *)(v82 + 24);
              v87 = *(_OWORD *)(v82 + 40);
              v88 = *(_OWORD *)(v82 + 72);
              v114 = *(_OWORD *)(v82 + 56);
              v115 = v88;
              v112 = v86;
              v113 = v87;
              v111 = *(_OWORD *)(v82 + 8);
              sub_18D293988(v1 + 6904);
              if (!sub_18D295E20(v1, (_QWORD *)(v1 + 6904), 3.0))
                break;
              if (!sub_18D295E20(v1, (_QWORD *)(v1 + 6904), 3.0))
                goto LABEL_75;
            }
            sub_18D16C5F4(v1 + 6904, (uint64_t)&v110);
          }
LABEL_75:
          v49 = *(_QWORD *)(v1 + 7816);
          goto LABEL_39;
        }
      }
      else if (v76 >= v71)
      {
        goto LABEL_68;
      }
      v78 = *(_QWORD *)(*(_QWORD *)(v1 + 7784) + 8 * (*(_QWORD *)(v1 + 7808) / 0x1AuLL))
          + 152 * (*(_QWORD *)(v1 + 7808) % 0x1AuLL);
      v93 = *(_OWORD *)(v78 + 40);
      v94 = *(_OWORD *)(v78 + 56);
      v95 = *(_OWORD *)(v78 + 72);
      *(_OWORD *)v96 = *(_OWORD *)(v78 + 88);
      v91 = *(_OWORD *)(v78 + 8);
      v92 = *(_OWORD *)(v78 + 24);
      sub_18D1648E4((uint64_t)v107, (double *)(v78 + 104), 1.0);
      sub_18D1648E4((uint64_t)v104, (double *)(*(_QWORD *)(*(_QWORD *)(v1 + 7784) + 8 * (*(_QWORD *)(v1 + 7808) / 0x1AuLL))+ 152 * (*(_QWORD *)(v1 + 7808) % 0x1AuLL)+ 112), 1.0);
      sub_18D1648E4((uint64_t)v101, (double *)(*(_QWORD *)(*(_QWORD *)(v1 + 7784) + 8 * (*(_QWORD *)(v1 + 7808) / 0x1AuLL))+ 152 * (*(_QWORD *)(v1 + 7808) % 0x1AuLL)+ 120), 1.0);
      sub_18D293988(v1 + 7776);
    }
  }
  return this;
}

void sub_18D0745E0(void **this)
{
  *this = &unk_1E25C3B08;
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  if (*((char *)this + 519) < 0)
    operator delete(this[62]);
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

void sub_18D074630(void **this)
{
  *this = &unk_1E25C3A80;
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  if (*((char *)this + 519) < 0)
    operator delete(this[62]);
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

void sub_18D074680(void **this)
{
  *this = &unk_1E25C39F8;
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  if (*((char *)this + 519) < 0)
    operator delete(this[62]);
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

__n128 raven::RavenPositionContextEstimator::HmmPredictAndUpdate(uint64_t a1, __n128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __int128 v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __n128 result;
  _BYTE v27[56];
  unsigned __int8 v28[56];
  _WORD v29[28];
  double v30;
  __n128 v31;
  double v32;
  double v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __n128 **v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t (**v42)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _OWORD v44[2];

  if (*(_BYTE *)(a1 + 1) && *(_BYTE *)a1)
  {
    v4 = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 2496);
    v44[0] = a2[1];
    v44[1] = v4;
    if (sub_18D063BF8(a1 + 16, (uint64_t)v44))
    {
      v29[0] = 12;
      v28[0] = 4;
      v10 = a1 - 88;
      cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to predict,code,%d");
LABEL_5:
      if (*(char *)(a1 + 447) >= 0)
        LOBYTE(v16) = v10;
      else
        v16 = *(_QWORD *)(a1 + 424);
LABEL_19:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v29, v28, "%s", v11, v12, v13, v14, v15, v16);
      return result;
    }
    v17 = a2 + 1;
    v41 = 0x100000001;
    v39 = &unk_1E25C6920;
    *(_QWORD *)&v18 = 0x100000001;
    *((_QWORD *)&v18 + 1) = 0x100000001;
    v40 = v18;
    v42 = &v43;
    v43 = sub_18D064858;
    v36 = 0x100000001;
    v34 = &unk_1E25C69E0;
    v35 = v18;
    v37 = (__n128 **)&v38;
    v31 = a2[1];
    v30 = -1.0;
    v19 = &a2->n128_u8[8];
    if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupGnssAvailabilityStateProbabilityGivenOutdoor(a1 + 472, v19, &v30, v5, v6, v7, v8, v9))
    {
      v29[0] = 12;
      v28[0] = 4;
      v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupGnssAvailabilityStateProbabilityGivenOutdoor failed");
    }
    else if (v30 < 0.0 || v30 > 1.0 || (*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v29[0] = 12;
      v28[0] = 4;
      v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupGnssAvailabilityStateProbabilityGivenOutdoor returned invalid probability");
    }
    else
    {
      v33 = v30;
      v30 = -1.0;
      if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupGnssAvailabilityStateProbabilityGivenIndoor(a1 + 472, v19, &v30, v20, v21, v22, v23, v24))
      {
        v29[0] = 12;
        v28[0] = 4;
        v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupGnssAvailabilityStateProbabilityGivenIndoor failed");
      }
      else
      {
        if (v30 >= 0.0 && v30 <= 1.0 && (*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v32 = v30;
          *v37 = &v31;
          sub_18D061314(a1 + 16, (uint64_t)v29);
          sub_18D061444((uint64_t)v28, (uint64_t)&v39);
          sub_18D061360((uint64_t)v27, (uint64_t)&v34);
          if (!sub_18D064284(a1 + 16, (uint64_t)v29, 1, (uint64_t)v28, (uint64_t)v27))
          {
            result = *v17;
            *(__n128 *)(a1 + 152) = *v17;
            return result;
          }
          v29[0] = 12;
          v28[0] = 4;
          v10 = a1 - 88;
          cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to update,code,%d");
          goto LABEL_5;
        }
        v29[0] = 12;
        v28[0] = 4;
        v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupGnssAvailabilityStateProbabilityGivenIndoor returned invalid probability");
      }
    }
    if (*(char *)(a1 + 447) >= 0)
      LOBYTE(v16) = v25;
    else
      v16 = *(_QWORD *)(a1 + 424);
    goto LABEL_19;
  }
  return result;
}

void raven::RavenPositionContextEstimator::HandleEvidence(uint64_t a1, __n128 *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6;
  double v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  __int16 v20;
  double v21[2];

  v6 = CNTimeSpan::operator-((uint64_t)&a2[1], (_QWORD *)(a1 + 152), a3, a4);
  *(_QWORD *)&v21[0] = v6;
  v21[1] = v7;
  if (v6 < 0 || (*(double *)v8.i64 = v7, v7 < 0.0))
  {
    v6 = CNTimeSpan::operator-(v21, v8, v9);
    v8.i64[0] = v10;
  }
  if (v6 == 10)
    goto LABEL_7;
  if (!v6)
  {
    if ((v8.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      goto LABEL_16;
LABEL_7:
    if (*(double *)v8.i64 <= 0.0)
      goto LABEL_16;
    goto LABEL_10;
  }
  if (v6 < 11)
    goto LABEL_16;
LABEL_10:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
  {
    v20 = 12;
    v19 = 1;
    v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::HandleEvidence(AvailabilityEvidence),last estimate is too old, re-initialize the HMM");
    if (*(char *)(a1 + 447) >= 0)
      LOBYTE(v17) = v11;
    else
      v17 = *(_QWORD *)(a1 + 424);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v12, v13, v14, v15, v16, v17);
  }
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 2480);
  raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel((raven::RavenPositionContextEstimator *)a1);
LABEL_16:
  raven::RavenPositionContextEstimator::HmmPredictAndUpdate(a1, a2);
  if (!v18)
    raven::RavenPositionContextEstimator::UpdatePositionContextStateEvent((raven::RavenPositionContextEstimator *)a1);
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::GnssAvailabilityEvent *a2)
{
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_BYTE *)this)
    return 0xFFFFFFFFLL;
  v9 = (*(uint64_t (**)(const raven::GnssAvailabilityEvent *))(*(_QWORD *)a2 + 16))(a2);
  v10 = v4;
  v8.n128_u64[0] = *((_QWORD *)a2 + 13);
  v5.i64[0] = v8.n128_u64[0];
  v8.n128_u8[8] = *((_BYTE *)a2 + 112);
  raven::RavenPositionContextEstimator::HandleEvidence((uint64_t)this, &v8, v5, v6);
  return 0;
}

void sub_18D074B44()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D074B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;

  if (*(_BYTE *)(a1 + 2600))
    sub_18D04344C(a1 + 2560);
  v2 = *(_QWORD *)(a1 + 2544);
  *(_QWORD *)(a1 + 2544) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)(a1 + 2344) = &unk_1E25B9450;
  v3 = *(_QWORD *)(a1 + 1320);
  *(_QWORD *)(a1 + 1320) = 0;
  if (v3)
    sub_18D20B03C(a1 + 1320, v3);
  sub_18D20B088((uint64_t *)(a1 + 1312), 0);
  sub_18D03D9B4(a1 + 1288, *(_QWORD **)(a1 + 1296));
  sub_18D03D9B4(a1 + 1032, *(_QWORD **)(a1 + 1040));
  sub_18D03D9B4(a1 + 1008, *(_QWORD **)(a1 + 1016));
  sub_18D03D96C(a1 + 984, *(_QWORD **)(a1 + 992));
  if (*(_BYTE *)(a1 + 520))
    *(_QWORD *)(a1 + 320) = &off_1E25C30B0;
  *(_QWORD *)(a1 + 24) = off_1E25C3EC8;
  v5 = (void **)(a1 + 120);
  sub_18D07C7AC(&v5);
  return a1;
}

uint64_t raven::RavenSolutionPostprocessor::PostprocessRavenSolution(raven::RavenSolutionPostprocessor *this, const raven::RavenSolutionEvent *a2, raven::RavenSolutionEvent *a3)
{
  int8x16_t v6;
  int8x16_t v7;
  cnprint::CNPrinter *ShouldBeClamped;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v24;
  double v25;
  unsigned __int8 v26;
  __int16 v27;
  unsigned __int8 v28;
  __int16 v29;

  memcpy((char *)a3 + 8, (char *)a2 + 8, 0x971uLL);
  ShouldBeClamped = (cnprint::CNPrinter *)raven::RavenSolutionPostprocessor::ShouldBeClamped(this, a2, v6, v7);
  if ((_DWORD)ShouldBeClamped)
  {
    if (!*((_BYTE *)this + 1296) && cnprint::CNPrinter::GetLogLevel(ShouldBeClamped) <= 1)
    {
      v29 = 12;
      v28 = 1;
      v9 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v24 = v10 + (double)v9;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "t,%.3lf,RavenSolutionPostprocessor,clamping started", v11, v12, v13, v14, v15, SLOBYTE(v24));
    }
    *((_BYTE *)this + 1296) = 1;
    *((_QWORD *)a3 + 159) = *((_QWORD *)this + 67);
    *((_OWORD *)a3 + 80) = *((_OWORD *)this + 34);
    *((_OWORD *)a3 + 92) = *((_OWORD *)this + 46);
    *((_QWORD *)a3 + 186) = *((_QWORD *)this + 94);
    *((_QWORD *)a3 + 169) = 0;
    *((_QWORD *)a3 + 194) = 0;
    *((_QWORD *)a3 + 196) = 0;
    *((_QWORD *)a3 + 195) = 0;
    if (*((_BYTE *)this + 609))
    {
      *((_OWORD *)a3 + 85) = *((_OWORD *)this + 39);
      *((_QWORD *)a3 + 172) = *((_QWORD *)this + 80);
    }
  }
  else
  {
    if (*((_BYTE *)this + 1296) && cnprint::CNPrinter::GetLogLevel(ShouldBeClamped) <= 1)
    {
      v27 = 12;
      v26 = 1;
      v16 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v25 = v17 + (double)v16;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "t,%.3lf,RavenSolutionPostprocessor,clamping stopped", v18, v19, v20, v21, v22, SLOBYTE(v25));
    }
    *((_BYTE *)this + 1296) = 0;
  }
  memcpy((char *)this + 432, (char *)a3 + 1168, 0x360uLL);
  raven::RavenSolutionPostprocessor::PushToClampingHistory((uint64_t **)this, a2);
  raven::RavenSolutionPostprocessor::AdjustRavenSolutionUncertainties(this, (float64x2_t *)a3);
  return 0;
}

void raven::RavenTimerActiveObject::~RavenTimerActiveObject(raven::RavenTimerActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C2F58;
  if (*((_BYTE *)this + 656))
    *((_BYTE *)this + 656) = 0;
  if (*((_BYTE *)this + 480))
    *((_BYTE *)this + 480) = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C2F58;
  if (*((_BYTE *)this + 656))
    *((_BYTE *)this + 656) = 0;
  if (*((_BYTE *)this + 480))
    *((_BYTE *)this + 480) = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C2F58;
  if (*((_BYTE *)this + 656))
    *((_BYTE *)this + 656) = 0;
  if (*((_BYTE *)this + 480))
    *((_BYTE *)this + 480) = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074DE8()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074DFC()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074E10()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074E24()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074E38()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074E4C()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074E60()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074E74(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25C2748;
  if (*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = 0;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074EA0()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D074EB4()
{
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *a2, raven::GnssAvailabilityEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[26];
  char *v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  uint64_t v39;

  v30 = 0uLL;
  v29 = &unk_1E25C2DA0;
  LOBYTE(v31) = 0;
  *((_QWORD *)&v31 + 1) = 0;
  *(_QWORD *)&v32 = 0;
  BYTE8(v32) = 0;
  v33 = 0uLL;
  LOBYTE(v34) = 0;
  *((_QWORD *)&v34 + 1) = 0;
  *(_QWORD *)v35 = 0;
  *(_OWORD *)&v35[8] = xmmword_18D319350;
  *(_WORD *)&v35[24] = 0;
  if (raven::ConvertProtobufToGnssAvailabilityEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *)&v29, a3, a4, a5, a6, a7, a8, (int8x16_t)xmmword_18D319350, a10))
  {
    v11 = (char *)operator new(0x60uLL);
    *((_QWORD *)v11 + 1) = 0;
    v12 = (unint64_t *)(v11 + 8);
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &unk_1E25CCE50;
    *((_QWORD *)v11 + 3) = &unk_1E25B8C58;
    v13 = MEMORY[0x1E0DE4F20];
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = v13;
    v14 = (void **)(v11 + 72);
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    sub_18D0778AC((_QWORD *)v11 + 9, "");
    v11[32] = 1;
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E25C1A80;
    *(_QWORD *)(v15 + 8) = &unk_1E25C2DA0;
    v16 = *(_OWORD *)v35;
    *(_OWORD *)(v15 + 80) = v34;
    *(_OWORD *)(v15 + 96) = v16;
    *(_OWORD *)(v15 + 106) = *(_OWORD *)&v35[10];
    v17 = v31;
    *(_OWORD *)(v15 + 16) = v30;
    *(_OWORD *)(v15 + 32) = v17;
    v18 = v33;
    *(_OWORD *)(v15 + 48) = v32;
    *(_OWORD *)(v15 + 64) = v18;
    v19 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v29;
    *((_QWORD *)v11 + 6) = *(v29 - 1);
    *((_QWORD *)v11 + 7) = ((uint64_t (*)(uint64_t))v20[2])((uint64_t)&v29);
    *((_QWORD *)v11 + 8) = v21;
    ((void (*)(_QWORD *@<X8>))v29[3])(&v38);
    if (v11[95] < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = v38;
    *((_QWORD *)v11 + 11) = v39;
    v36 = v11 + 24;
    v37 = (std::__shared_weak_count *)v11;
    *(_QWORD *)&v38 = v11 + 24;
    *((_QWORD *)&v38 + 1) = v11;
    do
      v22 = __ldxr(v12);
    while (__stxr(v22 + 1, v12));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v38, (uint64_t)this + 16);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_18D075138(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 88);
  sub_18D07C868(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_18D07519C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25C2508;
  if (*(_BYTE *)(a1 + 120))
    *(_BYTE *)(a1 + 120) = 0;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D0751C8()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D0751DC()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t raven::RavenPredictor::HandleEvent(raven::RavenPredictor *this, const raven::RavenSolutionEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;
  uint64_t result;
  char v12;
  unsigned __int8 v13;
  __int16 v14;

  if (!*(_BYTE *)this)
  {
    v14 = 12;
    v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "Error: RavenPredictor::HandleEvent(RavenSolutionEvent) failed. Predictor is not configured.", a4, a5, a6, a7, a8, v12);
    return 0xFFFFFFFFLL;
  }
  v9 = *((_BYTE *)a2 + 208) == 4 && *((_BYTE *)a2 + 209) == 2;
  if (!v9 || !*((_BYTE *)a2 + 1464))
    return 0;
  if (!*((_BYTE *)this + 1))
  {
    *((_BYTE *)this + 1) = 1;
    goto LABEL_13;
  }
  result = sub_18D03F608((double *)a2 + 146, (double *)this + 831);
  if ((_DWORD)result)
  {
LABEL_13:
    memcpy((char *)this + 5488, (char *)a2 + 8, 0x971uLL);
    return 0;
  }
  return result;
}

void sub_18D0752A8(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 + 8) = off_1E25C3EC8;
  v1 = (void **)(a1 + 104);
  sub_18D07C7AC(&v1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D075300()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D075314(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E25C30B0;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D075338()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D07534C()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D075360()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D075374()
{
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(CoreNavigation::CLP::LogEntry::Raven *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E0DE8448] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto_impl;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18D0753F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::Raven::RavenOutput::~RavenOutput(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this)
{
  *(_QWORD *)this = &off_1E25BF6B0;
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::~RavenOutput(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::Raven::RavenOutput::SharedDtor(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::~GnssAvailabilityPrediction(CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E25BCDE8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *)CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::~GnssAvailabilityPrediction(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  unsigned int v19;
  uint64_t result;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24[2];

  while (2)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v4 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_19;
        *((_DWORD *)this + 9) |= 1u;
        v7 = *((_QWORD *)this + 1);
        if (!v7)
        {
          v7 = operator new();
          *(_QWORD *)v7 = &off_1E25BDBF8;
          *(_OWORD *)(v7 + 8) = 0u;
          *(_OWORD *)(v7 + 24) = 0u;
          *((_QWORD *)this + 1) = v7;
        }
        v24[0] = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24))return 0;
        }
        else
        {
          v24[0] = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        v13 = *((_DWORD *)a2 + 14);
        v14 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v13 + 1;
        if (v13 >= v14)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)v7, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v15 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)a2 + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v18 >= v9 || *v18 != 16)
          continue;
        v10 = v18 + 1;
        *((_QWORD *)a2 + 1) = v10;
        goto LABEL_32;
      case 2u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
LABEL_32:
        v24[0] = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
          if (!(_DWORD)result)
            return result;
          v19 = v24[0];
        }
        else
        {
          v19 = *v10;
          *((_QWORD *)a2 + 1) = v10 + 1;
        }
        if (v19 <= 3)
        {
          *((_DWORD *)this + 9) |= 2u;
          *((_DWORD *)this + 6) = v19;
        }
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 25)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_42:
        *(_QWORD *)v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v24) & 1) != 0)
        {
          *((_QWORD *)this + 2) = *(_QWORD *)v24;
          *((_DWORD *)this + 9) |= 4u;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v22 < v11 && *v22 == 32)
          {
            v12 = v22 + 1;
            *((_QWORD *)a2 + 1) = v12;
LABEL_46:
            v24[0] = 0;
            if ((unint64_t)v12 >= v11 || *v12 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
              if (!(_DWORD)result)
                return result;
              v23 = v24[0];
            }
            else
            {
              v23 = *v12;
              *((_QWORD *)a2 + 1) = v12 + 1;
            }
            if (v23 <= 3)
            {
              *((_DWORD *)this + 9) |= 8u;
              *((_DWORD *)this + 7) = v23;
            }
            if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              result = 1;
              *((_BYTE *)a2 + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v6 = TagFallback & 7;
        if (v6 == 1)
          goto LABEL_42;
        goto LABEL_19;
      case 4u:
        v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_46;
      default:
        v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

void CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *this)
{
  uint64_t v2;

  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *)CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t sub_18D0758F4(uint64_t a1, double a2, double a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0x300000003;
  *(_QWORD *)(a1 + 16) = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 24) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)a1 = &off_1E25B9560;
  sub_18D07597C(a1, a2, a3);
  return a1;
}

void sub_18D075958(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E25B9B80;
  v1[2] = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D07597C(uint64_t a1, double a2, double a3)
{
  __double2 v5;
  __double2 v6;
  double *v7;
  uint64_t v8;
  double *v9;

  v5 = __sincos_stret(a2);
  v6 = __sincos_stret(a3);
  v7 = *(double **)(a1 + 48);
  *v7 = -v6.__sinval;
  v8 = *(int *)(a1 + 36);
  v7[v8] = v6.__cosval;
  v7[2 * v8] = 0.0;
  v7[1] = -(v6.__cosval * v5.__sinval);
  v7[(int)v8 + 1] = -(v6.__sinval * v5.__sinval);
  v9 = &v7[2 * (int)v8];
  v9[1] = v5.__cosval;
  v7[2] = v5.__cosval * v6.__cosval;
  v7[(int)v8 + 2] = v5.__cosval * v6.__sinval;
  v9[2] = v5.__sinval;
  *(_BYTE *)(a1 + 8) = 1;
  return 1;
}

uint64_t sub_18D075A20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E25B9190;
  a1[199] = &unk_1E25C6F80;
  v2 = a1[204];
  a1[204] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  a1[199] = &unk_1E25C5E70;
  a1[171] = &unk_1E25C5E70;
  a1[165] = &unk_1E25C6FB0;
  v3 = a1[170];
  a1[170] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  a1[165] = &unk_1E25C5E70;
  return sub_18D056F68((uint64_t)a1);
}

void cnframework::Supervisor::~Supervisor(cnframework::Supervisor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  char v10;
  unsigned __int8 v11;
  __int16 v12;

  *(_QWORD *)this = off_1E25B8BC0;
  if (!*((_BYTE *)this + 816))
  {
    v12 = 3;
    v11 = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "Supervisor::~Supervisor called without Supervisor::TearDown", a4, a5, a6, a7, a8, v10);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 520));
  *((_QWORD *)this + 63) = *((_QWORD *)this + 62);
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 520));
  std::mutex::~mutex((std::mutex *)((char *)this + 752));
  std::mutex::~mutex((std::mutex *)((char *)this + 680));
  std::mutex::~mutex((std::mutex *)((char *)this + 608));
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 520));
  v9 = (void *)*((_QWORD *)this + 62);
  if (v9)
  {
    *((_QWORD *)this + 63) = v9;
    operator delete(v9);
  }
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::Supervisor *)((char *)this + 16));
}

void cnframework::Supervisor::TearDown(cnframework::Supervisor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  cnprint::CNPrinter *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *__p[2];
  char v22;
  unsigned __int8 v23;
  __int16 v24;

  v24 = 3;
  v23 = 2;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 40))(__p);
  if (v22 >= 0)
    v7 = __p;
  else
    LOBYTE(v7) = __p[0];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s calling Supervisor::TearDown", v2, v3, v4, v5, v6, (char)v7);
  if (v22 < 0)
    operator delete(__p[0]);
  cnframework::Supervisor::Pause(this);
  LOBYTE(__p[0]) = 0;
  cnframework::Supervisor::SetThreadingModel((uint64_t)this, (unsigned __int8 *)__p, v8, v9, v10, v11, v12, v13);
  *((_BYTE *)this + 816) = 1;
  if (cnprint::CNPrinter::GetLogLevel(v14) <= 1)
  {
    v24 = 3;
    v23 = 1;
    (*(void (**)(void **__return_ptr, cnframework::Supervisor *))(*(_QWORD *)this + 40))(__p, this);
    if (v22 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s torn down successfully", v15, v16, v17, v18, v19, (char)v20);
    if (v22 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D075C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cnframework::Supervisor::SetThreadingModel(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  void *__p[2];
  char v23;
  unsigned __int8 v24;
  __int16 v25;

  if (*a2 && *(_BYTE *)(a1 + 8))
  {
    LOWORD(__p[0]) = 3;
    LOBYTE(v25) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v25, "cannot switch into MultiThreaded due to configuration", a4, a5, a6, a7, a8, v21);
    __assert_rtn("SetThreadingModel", "supervisor.cpp", 95, "false && \"cannot switch into MultiThreaded due to configuration\"");
  }
  std::mutex::lock((std::mutex *)(a1 + 752));
  std::mutex::lock((std::mutex *)(a1 + 680));
  v10 = *(unsigned __int8 *)(a1 + 672);
  std::mutex::unlock((std::mutex *)(a1 + 680));
  if (v10)
    cnframework::Supervisor::Pause((cnframework::Supervisor *)a1);
  if (*(_BYTE *)(a1 + 8))
    v11 = 0;
  else
    v11 = atomic_load((unsigned __int8 *)(a1 + 744));
  v25 = 3;
  v24 = 2;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(__p, a1);
  if (v23 >= 0)
    v17 = __p;
  else
    LOBYTE(v17) = __p[0];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, &v24, "%s changing threading model from %u to %u", v12, v13, v14, v15, v16, (char)v17);
  if (v23 < 0)
    operator delete(__p[0]);
  v18 = *a2;
  if (v11 != v18)
    atomic_store(v18, (unsigned __int8 *)(a1 + 744));
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 520));
  v19 = *(uint64_t **)(a1 + 496);
  v20 = *(uint64_t **)(a1 + 504);
  while (v19 != v20)
    cnframework::ActiveObjectBase::SetThreadingModel(*v19++, a2);
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 520));
  if (v10)
    cnframework::Supervisor::Start((cnframework::Supervisor *)a1);
  std::mutex::unlock((std::mutex *)(a1 + 752));
}

void sub_18D075E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::mutex *v18;

  std::mutex::unlock(v18);
  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point *cnconsole::ProgressBar::ProgressBar(std::chrono::steady_clock::time_point *this)
{
  std::chrono::steady_clock::time_point v2;

  this[4].__d_.__rep_ = 0;
  this[1].__d_.__rep_ = 0;
  this[2].__d_.__rep_ = 0;
  this->__d_.__rep_ = 0;
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  this->__d_.__rep_ = v2.__d_.__rep_;
  this[1].__d_.__rep_ = v2.__d_.__rep_;
  this[2].__d_.__rep_ = v2.__d_.__rep_;
  return this;
}

{
  std::chrono::steady_clock::time_point v2;

  this[4].__d_.__rep_ = 0;
  this[1].__d_.__rep_ = 0;
  this[2].__d_.__rep_ = 0;
  this->__d_.__rep_ = 0;
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  this->__d_.__rep_ = v2.__d_.__rep_;
  this[1].__d_.__rep_ = v2.__d_.__rep_;
  this[2].__d_.__rep_ = v2.__d_.__rep_;
  return this;
}

std::chrono::steady_clock::time_point *cnconsole::ProgressBar::ProgressBar(std::chrono::steady_clock::time_point *this, double *a2)
{
  std::chrono::steady_clock::time_point v3;

  this->__d_.__rep_ = 0;
  this[1].__d_.__rep_ = 0;
  this[2].__d_.__rep_ = 0;
  this[4].__d_.__rep_ = *(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)a2;
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  this->__d_.__rep_ = v3.__d_.__rep_;
  this[1].__d_.__rep_ = v3.__d_.__rep_;
  this[2].__d_.__rep_ = v3.__d_.__rep_;
  return this;
}

{
  std::chrono::steady_clock::time_point v3;

  this->__d_.__rep_ = 0;
  this[1].__d_.__rep_ = 0;
  this[2].__d_.__rep_ = 0;
  this[4].__d_.__rep_ = *(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)a2;
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  this->__d_.__rep_ = v3.__d_.__rep_;
  this[1].__d_.__rep_ = v3.__d_.__rep_;
  this[2].__d_.__rep_ = v3.__d_.__rep_;
  return this;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep cnconsole::ProgressBar::Display(cnconsole::ProgressBar *this, uint64_t *a2, uint64_t *a3, char a4)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result;
  double v9;
  void *p_p;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p;
  uint64_t v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;

  result = std::chrono::steady_clock::now().__d_.__rep_;
  *((_QWORD *)this + 1) = result;
  v9 = *((double *)this + 4);
  if (v9 == 0.0 || (a4 & 1) != 0 || v9 > 0.0 && v9 <= (double)((result - *((_QWORD *)this + 2)) / 1000000000))
  {
    *((_QWORD *)this + 2) = result;
    sub_18D076238((uint64_t)v25);
    cnconsole::ProgressBar::DisplayElapsedTime(this, &__p);
    if ((v24 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v24 & 0x80u) == 0)
      v11 = v24;
    else
      v11 = v23;
    sub_18D076A18(&v26, (uint64_t)p_p, v11);
    if ((char)v24 < 0)
      operator delete(__p);
    cnconsole::ProgressBar::DisplayPercentage(&__p);
    if ((v24 & 0x80u) == 0)
      v12 = &__p;
    else
      v12 = __p;
    if ((v24 & 0x80u) == 0)
      v13 = v24;
    else
      v13 = v23;
    sub_18D076A18(&v26, (uint64_t)v12, v13);
    if ((char)v24 < 0)
      operator delete(__p);
    cnconsole::ProgressBar::DisplayProgressBar(a2, a3, &__p);
    if ((v24 & 0x80u) == 0)
      v14 = &__p;
    else
      v14 = __p;
    if ((v24 & 0x80u) == 0)
      v15 = v24;
    else
      v15 = v23;
    sub_18D076A18(&v26, (uint64_t)v14, v15);
    if ((char)v24 < 0)
      operator delete(__p);
    cnconsole::ProgressBar::DisplayBytesProcessed(&__p);
    if ((v24 & 0x80u) == 0)
      v16 = &__p;
    else
      v16 = __p;
    if ((v24 & 0x80u) == 0)
      v17 = v24;
    else
      v17 = v23;
    sub_18D076A18(&v26, (uint64_t)v16, v17);
    if ((char)v24 < 0)
      operator delete(__p);
    sub_18D076DE8((uint64_t)v27, &__p);
    if ((v24 & 0x80u) == 0)
      v18 = &__p;
    else
      v18 = __p;
    if ((v24 & 0x80u) == 0)
      v19 = v24;
    else
      v19 = v23;
    v20 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)v18, v19);
    sub_18D076A18(v20, (uint64_t)"\n", 1);
    if ((char)v24 < 0)
      operator delete(__p);
    v25[0] = *MEMORY[0x1E0DE4F50];
    v21 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v26 = v21;
    v27[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete((void *)v27[8]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x18D78B550](&v29);
  }
  return result;
}

void sub_18D0761EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_18D076980((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_18D076238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_18D07633C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x18D78B550](v1);
  _Unwind_Resume(a1);
}

uint64_t cnconsole::ProgressBar::DisplayElapsedTime@<X0>(cnconsole::ProgressBar *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD v9[10];
  char v10;
  uint64_t v11;

  sub_18D076238((uint64_t)v8);
  *((double *)this + 3) = (double)((*((_QWORD *)this + 1) - *(_QWORD *)this) / 1000000000);
  *(_QWORD *)((char *)&v8[3] + *(_QWORD *)(v8[0] - 24)) = 4;
  v4 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v4, (uint64_t)"m", 1);
  *(_QWORD *)((char *)&v8[3] + *(_QWORD *)(v8[0] - 24)) = 3;
  v5 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v5, (uint64_t)"s", 1);
  sub_18D076DE8((uint64_t)v9, a2);
  v8[0] = *MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v8[2] = v6;
  v9[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D78B550](&v11);
}

void sub_18D0764D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D076980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t cnconsole::ProgressBar::DisplayPercentage@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  sub_18D076238((uint64_t)v9);
  v5 = v9[0];
  *(_QWORD *)((char *)&v9[3] + *(_QWORD *)(v9[0] - 24)) = 6;
  *(_QWORD *)((char *)&v9[2] + *(_QWORD *)(v5 - 24)) = 1;
  *(_DWORD *)((char *)&v9[1] + *(_QWORD *)(v5 - 24)) |= 4u;
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v6, (uint64_t)"%", 1);
  sub_18D076DE8((uint64_t)v10, a1);
  v9[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v9[2] = v7;
  v10[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D78B550](&v12);
}

void sub_18D076610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D076980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t cnconsole::ProgressBar::DisplayProgressBar@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  int v17;
  double v18;
  uint64_t v19;
  _BYTE v21[2];
  unsigned __int16 v22;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;

  sub_18D076238((uint64_t)v23);
  v7 = ioctl(1, 0x40087468uLL, v21);
  v8 = v22;
  if (v7 == -1 || v22 - 1001 > 0xFFFFFC17)
  {
    if ((byte_1EE061458 & 1) == 0)
    {
      v9 = *a1;
      v10 = *a2;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v23[0] - 24)) = 3;
      sub_18D076A18(&v24, (uint64_t)"[", 1);
      v11 = (double)v9 / (double)v10;
      v12 = (double)(v8 - 40);
      v13 = round(v11 * v12);
      if (v13 > 0.0)
      {
        v14 = 1;
        do
        {
          sub_18D076A18(&v24, (uint64_t)"=", 1);
          v15 = (double)v14++;
        }
        while (v13 > v15);
      }
      v16 = v12 - v13;
      if (v16 > 0.0)
      {
        v17 = 1;
        do
        {
          sub_18D076A18(&v24, (uint64_t)".", 1);
          v18 = (double)v17++;
        }
        while (v16 > v18);
      }
      sub_18D076A18(&v24, (uint64_t)"]", 1);
    }
  }
  else
  {
    byte_1EE061458 = 1;
  }
  sub_18D076DE8((uint64_t)v25, a3);
  v23[0] = *MEMORY[0x1E0DE4F50];
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v24 = v19;
  v25[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete((void *)v25[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D78B550](&v27);
}

void sub_18D076804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18D076980((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cnconsole::ProgressBar::DisplayBytesProcessed@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  sub_18D076238((uint64_t)v10);
  v5 = v10[0];
  *(_QWORD *)((char *)&v10[3] + *(_QWORD *)(v10[0] - 24)) = 6;
  *(_QWORD *)((char *)&v10[2] + *(_QWORD *)(v5 - 24)) = 1;
  *(_DWORD *)((char *)&v10[1] + *(_QWORD *)(v5 - 24)) |= 4u;
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v6, (uint64_t)" / ", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v7, (uint64_t)" MB", 3);
  sub_18D076DE8((uint64_t)v11, a1);
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[2] = v8;
  v11[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D78B550](&v13);
}

void sub_18D07696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D076980((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18D076980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D78B550](a1 + 128);
  return a1;
}

void sub_18D076A08(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *sub_18D076A18(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x18D78B2C8](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_18D076B7C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x18D78B2D4](v13);
  return a1;
}

void sub_18D076B20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x18D78B2D4](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x18D076B00);
}

void sub_18D076B68(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_18D076B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_18D076CB8(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_18D076C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D076CB8(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_18D076D60();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_18D076D60()
{
  sub_18D076D74("basic_string");
}

void sub_18D076D74(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18D076DC4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E25B09D0, MEMORY[0x1E0DE42D0]);
}

void sub_18D076DB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18D076DC4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t sub_18D076DE8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = sub_18D076E84(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_18D076D60();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t sub_18D076E84(uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void cnconsole::filesystem::absolute(void **a1@<X0>, std::string *a2@<X8>)
{
  char v4;
  std::string::size_type v5;
  std::string *p_str;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  char v32;
  std::string v33;
  std::string __p;
  std::string __str;
  char v36;
  std::string __dst;
  char v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) < 0)
    sub_18D077798(&__str, *a1, (unint64_t)a1[1]);
  else
    __str = *(std::string *)a1;
  v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v5 = __str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (p_str->__r_.__value_.__s.__data_[0] != 126)
  {
LABEL_38:
    bzero(&__dst, 0x400uLL);
    if (v4 >= 0)
      v24 = &__str;
    else
      v24 = (std::string *)v5;
    realpath_DARWIN_EXTSN((const char *)v24, (char *)&__dst);
    sub_18D0778AC(&__p, (char *)&__dst);
    LOWORD(v33.__r_.__value_.__l.__data_) = 0;
    LOBYTE(v39[0]) = 2;
    if (*((char *)a1 + 23) >= 0)
      LOBYTE(v30) = (_BYTE)a1;
    else
      v30 = *a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, (unsigned __int8 *)v39, "Resolved '%s' to '%s'", v25, v26, v27, v28, v29, (char)v30);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_18D077798(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v31 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a2[1].__r_.__value_.__s.__data_[0] = 1;
      if (v31 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *a2 = __p;
      a2[1].__r_.__value_.__s.__data_[0] = 1;
    }
    v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    goto LABEL_49;
  }
  cnconsole::filesystem::getUserHomeDirectory((uint64_t)&__dst);
  if (v38)
    __p = __dst;
  else
    sub_18D0778AC(&__p, "");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_18D077798(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __dst = __p;
    std::string::basic_string(&v33, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v36);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v33;
    else
      v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      v20 = v33.__r_.__value_.__l.__size_;
    v21 = std::string::append(&__dst, (const std::string::value_type *)v19, v20);
    v22 = v21->__r_.__value_.__r.__words[0];
    v39[0] = v21->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = v22;
    __str.__r_.__value_.__l.__size_ = v39[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v39 + 7);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v23;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
    v33.__r_.__value_.__s.__data_[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__dst, (unsigned __int8 *)&v33, "Failed to deduce user home directory", v7, v8, v9, v10, v11, v32);
    LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
    v33.__r_.__value_.__s.__data_[0] = 4;
    if (*((char *)a1 + 23) >= 0)
      LOBYTE(v18) = (_BYTE)a1;
    else
      v18 = *a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__dst, (unsigned __int8 *)&v33, "Failed to convert relative path to absolute path: %s", v13, v14, v15, v16, v17, (char)v18);
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if (size)
  {
    v5 = __str.__r_.__value_.__r.__words[0];
    goto LABEL_38;
  }
LABEL_49:
  if (v4 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_18D0771D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

passwd *cnconsole::filesystem::getUserHomeDirectory@<X0>(uint64_t a1@<X8>)
{
  char *pw_dir;
  uid_t v4;
  passwd *result;
  __int128 v6;
  uint64_t v7;

  pw_dir = getenv("HOME");
  if (pw_dir || (v4 = getuid(), result = getpwuid(v4), (pw_dir = result->pw_dir) != 0))
  {
    result = (passwd *)sub_18D0778AC(&v6, pw_dir);
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

BOOL cnconsole::filesystem::exists(const char *a1)
{
  stat v2;

  memset(&v2, 0, sizeof(v2));
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return stat(a1, &v2) == 0;
}

BOOL cnconsole::filesystem::isFileWriteable(uint64_t a1)
{
  BOOL isFileReadable;
  int v3;
  std::error_code *v4;
  const std::__fs::filesystem::path *v5;
  uint64_t v7;
  _BYTE v8[408];
  _QWORD v9[20];

  v9[19] = *MEMORY[0x1E0C80C00];
  isFileReadable = cnconsole::filesystem::isFileReadable();
  sub_18D07752C(&v7);
  v3 = *(_DWORD *)&v8[*(_QWORD *)(v7 - 24) + 24];
  if (!v3)
  {
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&v8[*(_QWORD *)(v7 - 24) - 8], *(_DWORD *)&v8[*(_QWORD *)(v7 - 24) + 24] | 4);
    if (!isFileReadable)
    {
      if (*(char *)(a1 + 23) >= 0)
        v5 = (const std::__fs::filesystem::path *)a1;
      else
        v5 = *(const std::__fs::filesystem::path **)a1;
      remove(v5, v4);
    }
  }
  v7 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v8[*(_QWORD *)(v7 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x18D78B25C](v8);
  std::ostream::~ostream();
  MEMORY[0x18D78B550](v9);
  return v3 == 0;
}

void sub_18D077444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D077634(&a9);
  _Unwind_Resume(a1);
}

BOOL cnconsole::filesystem::isFileReadable()
{
  _BOOL8 v0;
  _QWORD v2[2];
  _BYTE v3[408];
  _QWORD v4[20];

  v4[19] = *MEMORY[0x1E0C80C00];
  sub_18D07768C(v2);
  v0 = *(_DWORD *)&v3[*(_QWORD *)(v2[0] - 24) + 16] == 0;
  v2[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x18D78B25C](v3);
  std::istream::~istream();
  MEMORY[0x18D78B550](v4);
  return v0;
}

_QWORD *sub_18D07752C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x18D78B250](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_18D0775FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D78B550](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D077634(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x18D78B25C](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x18D78B550](a1 + 52);
  return a1;
}

_QWORD *sub_18D07768C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x18D78B250](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_18D077760(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x18D78B550](v1 + 424);
  _Unwind_Resume(a1);
}

void *sub_18D077798(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_18D076D60();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_18D077824()
{
  sub_18D077838("basic_string");
}

void sub_18D077838(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18D077888(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E25B09D8, MEMORY[0x1E0DE42E0]);
}

void sub_18D077874(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18D077888(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

_QWORD *sub_18D0778AC(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_18D076D60();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

double cndft::SlidingDFT::SlidingDFT(cndft::SlidingDFT *this)
{
  double result;

  *(_BYTE *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

uint64_t cndft::SlidingDFT::GetConfiguration(uint64_t a1, _OWORD *a2)
{
  uint64_t result;

  if (!*(_BYTE *)a1)
    return 0xFFFFFFFFLL;
  result = 0;
  *a2 = *(_OWORD *)(a1 + 8);
  return result;
}

uint64_t cndft::SlidingDFT::IsConfigured(cndft::SlidingDFT *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t cndft::SlidingDFT::SetConfiguration(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15[2];

  result = 0xFFFFFFFFLL;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)a2 > 0.0)
  {
    v7 = *(_DWORD *)(a2 + 8);
    if (v7)
    {
      v8 = *(_DWORD *)(a2 + 12);
      if (v8)
      {
        if (v8 < v7 >> 1)
        {
          *(_BYTE *)a1 = 0;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
          v9 = 1.0;
          v10 = 1.0 / *(double *)(a1 + 8);
          LODWORD(a5) = *(_DWORD *)(a1 + 16);
          LODWORD(v9) = *(_DWORD *)(a1 + 20);
          v11 = (double)v9;
          v12 = (double)*(unint64_t *)&a5;
          *(double *)(a1 + 24) = v10;
          *(double *)(a1 + 32) = v10 * v11 / v12;
          v15[0] = 0.0 / v12;
          v15[1] = v11 * 6.28318531 / v12;
          sub_18D078064(v15);
          *(_QWORD *)(a1 + 40) = v13;
          *(_QWORD *)(a1 + 48) = v14;
          *(_BYTE *)a1 = 1;
          cndft::SlidingDFT::ResetDFT((cndft::SlidingDFT *)a1);
          return 0;
        }
      }
    }
  }
  return result;
}

void cndft::SlidingDFT::ResetDFT(cndft::SlidingDFT *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_BYTE *)this)
    return;
  v2 = (void **)*((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 12) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *((_QWORD *)this + 9);
      v2 = (void **)(*((_QWORD *)this + 8) + 8);
      *((_QWORD *)this + 8) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_8;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 512;
LABEL_8:
    *((_QWORD *)this + 11) = v6;
  }
  v7 = (void **)*((_QWORD *)this + 14);
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 18) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *((_QWORD *)this + 15);
      v7 = (void **)(*((_QWORD *)this + 14) + 8);
      *((_QWORD *)this + 14) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 128;
  }
  else
  {
    if (v9 >> 3 != 2)
      return;
    v11 = 256;
  }
  *((_QWORD *)this + 17) = v11;
}

BOOL cndft::SlidingDFT::IsValid(cndft::SlidingDFT *this)
{
  return *(_BYTE *)this && *((_QWORD *)this + 18) >= (unint64_t)*((unsigned int *)this + 4);
}

uint64_t cndft::SlidingDFT::AddSample(cndft::SlidingDFT *this, double a2)
{
  _QWORD *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double *v8;
  unint64_t v9;
  unint64_t v10;
  double v12[2];
  __n128 v13;
  double v14;

  v14 = a2;
  if (!*(_BYTE *)this)
    return 0xFFFFFFFFLL;
  v3 = (_QWORD *)((char *)this + 104);
  v4 = *((_QWORD *)this + 18);
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  if (v4)
  {
    v8 = (double *)(*(_QWORD *)(*((_QWORD *)this + 14)
                              + (((unint64_t)(v4 + *((_QWORD *)this + 17) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (v4 + *((_BYTE *)this + 136) - 1));
    v6 = *v8;
    v7 = v8[1] + 0.0;
  }
  if (*((_QWORD *)this + 12) >= (unint64_t)*((unsigned int *)this + 4))
    v5 = *(double *)(*(_QWORD *)(*((_QWORD *)this + 8) + ((*((_QWORD *)this + 11) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*((_QWORD *)this + 11) & 0x1FFLL));
  sub_18D077D00((_QWORD *)this + 7, &v14);
  v12[0] = v6 - v5 + v14;
  v12[1] = v7;
  v13.n128_u64[0] = sub_18D077E0C(v12, (double *)this + 5);
  v13.n128_u64[1] = v9;
  sub_18D077D84(v3, &v13);
  v10 = *((_QWORD *)this + 12);
  if (v10 != *((_QWORD *)this + 18))
  {
    cndft::SlidingDFT::ResetDFT(this);
    return 0xFFFFFFFFLL;
  }
  if (v10 > *((unsigned int *)this + 4))
  {
    ++*((_QWORD *)this + 11);
    *((_QWORD *)this + 12) = v10 - 1;
    sub_18D078C10((uint64_t)this + 56, 1);
    *(int64x2_t *)((char *)this + 136) = vaddq_s64(*(int64x2_t *)((char *)this + 136), (int64x2_t)xmmword_18D30B1A0);
    sub_18D078C6C((uint64_t)v3, 1);
  }
  return 0;
}

double sub_18D077D00(_QWORD *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_18D078130(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(double *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

__n128 sub_18D077D84(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_18D0788FC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

double sub_18D077E0C(double *a1, double *a2)
{
  return *a1 * *a2 - a1[1] * a2[1];
}

uint64_t cndft::SlidingDFT::Length(cndft::SlidingDFT *this)
{
  return *((unsigned int *)this + 36);
}

double cndft::SlidingDFT::GetDFTFrequency(cndft::SlidingDFT *this)
{
  if (*(_BYTE *)this)
    return *((double *)this + 4);
  else
    return NAN;
}

double cndft::SlidingDFT::operator[](uint64_t a1, unsigned int a2)
{
  double result;

  if (!*(_BYTE *)a1)
    return 0.0;
  result = 0.0;
  if (*(_QWORD *)(a1 + 144) > (unint64_t)a2)
    return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                 + (((*(_QWORD *)(a1 + 136) + (unint64_t)a2) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*(_BYTE *)(a1 + 136) + a2));
  return result;
}

void sub_18D078064(double *a1)
{
  long double v1;
  double v2;
  double v3;

  v1 = *a1;
  v2 = a1[1];
  if (v2 == 0.0)
  {
    exp(v1);
    return;
  }
  if (fabs(v1) == INFINITY)
  {
    if (v1 >= 0.0)
    {
      if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        return;
    }
    else if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v2 = 1.0;
    }
  }
  v3 = v2;
  exp(v1);
  __sincos_stret(v3);
}

void sub_18D078130(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18D0788C8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_18D078444(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_18D078558((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18D0788C8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_18D0788C8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_18D078674(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_18D078788((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_18D0783F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_18D078444(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_18D0788C8(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_18D078558(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_18D0788C8(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_18D078674(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_18D0788C8(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_18D078788(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_18D0788C8(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_18D0788A0()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *sub_18D0788C8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_18D0788A0();
  return operator new(8 * a2);
}

void sub_18D0788FC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18D0788C8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_18D078444(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_18D078558((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18D0788C8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_18D0788C8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_18D078674(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_18D078788((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_18D078BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18D078C10(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t sub_18D078C6C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t cnestimation::PeriodicityTracker::DFTPoint::DFTPoint(uint64_t a1, double a2, long double a3, long double a4)
{
  int64x2_t v5;
  double v12;

  *(_BYTE *)a1 = 0;
  v5 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 8) = v5;
  *(int64x2_t *)(a1 + 24) = v5;
  if ((*(uint64_t *)&a2 > -1 && ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(*(_QWORD *)&a2 - 1) < 0xFFFFFFFFFFFFFLL
     || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    *(double *)(a1 + 8) = a2;
    *(long double *)(a1 + 16) = a3;
    *(long double *)(a1 + 24) = a4;
    v12 = hypot(a3, a4);
    *(double *)(a1 + 32) = v12;
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v12 >= 0.0)
      *(_BYTE *)a1 = 1;
  }
  return a1;
}

double cnestimation::PeriodicityTracker::DFTPoint::DFTFrequency(cnestimation::PeriodicityTracker::DFTPoint *this)
{
  return *((double *)this + 1);
}

double cnestimation::PeriodicityTracker::DFTPoint::DFTMagnitude(cnestimation::PeriodicityTracker::DFTPoint *this)
{
  return *((double *)this + 4);
}

double cnestimation::PeriodicityTracker::DFTPoint::DFTValue(cnestimation::PeriodicityTracker::DFTPoint *this)
{
  return *((double *)this + 2);
}

uint64_t cnestimation::PeriodicityTracker::DFTPoint::IsValid(cnestimation::PeriodicityTracker::DFTPoint *this)
{
  return *(unsigned __int8 *)this;
}

cnestimation::PeriodicityTracker *cnestimation::PeriodicityTracker::PeriodicityTracker(cnestimation::PeriodicityTracker *this)
{
  int64x2_t v2;

  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)((char *)this + 8) = v2;
  *(int64x2_t *)((char *)this + 24) = v2;
  *(int64x2_t *)((char *)this + 40) = v2;
  *((_DWORD *)this + 14) = 0;
  *((_WORD *)this + 36) = 0;
  *((_QWORD *)this + 10) = 0x7FF8000000000000;
  *((_DWORD *)this + 22) = 0x80000000;
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *((_DWORD *)this + 47) = 0;
  cnestimation::PeriodicityTracker::Reset(this);
  return this;
}

{
  int64x2_t v2;

  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)((char *)this + 8) = v2;
  *(int64x2_t *)((char *)this + 24) = v2;
  *(int64x2_t *)((char *)this + 40) = v2;
  *((_DWORD *)this + 14) = 0;
  *((_WORD *)this + 36) = 0;
  *((_QWORD *)this + 10) = 0x7FF8000000000000;
  *((_DWORD *)this + 22) = 0x80000000;
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *((_DWORD *)this + 47) = 0;
  cnestimation::PeriodicityTracker::Reset(this);
  return this;
}

void cnestimation::PeriodicityTracker::Reset(cnestimation::PeriodicityTracker *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  cndft::SlidingDFT *v11;
  unint64_t v12;
  cndft::SlidingDFT *v13;

  *((_WORD *)this + 36) = 0;
  *((_QWORD *)this + 10) = 0x7FF8000000000000;
  *((_DWORD *)this + 22) = 0x80000000;
  v2 = (void **)*((_QWORD *)this + 13);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 17) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *((_QWORD *)this + 14);
      v2 = (void **)(*((_QWORD *)this + 13) + 8);
      *((_QWORD *)this + 13) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  *((_QWORD *)this + 16) = v6;
LABEL_8:
  v7 = *((_QWORD *)this + 19);
  if (*((_QWORD *)this + 20) != v7)
  {
    v8 = *((_QWORD *)this + 22);
    v9 = *((_QWORD *)this + 23);
    v10 = (_QWORD *)(v7 + 8 * (v8 / 0x1A));
    v11 = (cndft::SlidingDFT *)(*v10 + 152 * (v8 % 0x1A));
    v12 = *(_QWORD *)(v7 + 8 * ((v9 + v8) / 0x1A)) + 152 * ((v9 + v8) % 0x1A);
    while (v11 != (cndft::SlidingDFT *)v12)
    {
      cndft::SlidingDFT::ResetDFT(v11);
      v11 = (cndft::SlidingDFT *)((char *)v11 + 152);
      if ((cndft::SlidingDFT *)((char *)v11 - *v10) == (cndft::SlidingDFT *)3952)
      {
        v13 = (cndft::SlidingDFT *)v10[1];
        ++v10;
        v11 = v13;
      }
    }
  }
}

uint64_t cnestimation::PeriodicityTracker::Configure(uint64_t a1, double *a2)
{
  uint64_t result;
  double v5;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _QWORD v21[7];
  _QWORD v22[6];
  _QWORD v23[6];
  double v24;
  unsigned int v25;
  unsigned int v26;

  result = 0xFFFFFFFFLL;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *a2 > 0.0
    && ((_QWORD)a2[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && a2[1] > 0.0)
  {
    v5 = a2[2];
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v5 > 0.0)
    {
      v6 = a2[3];
      if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v6 > 0.0 && v5 < v6)
      {
        v7 = a2[4];
        if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && v7 > 0.0
          && v7 < 1.0
          && ((_QWORD)a2[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && a2[5] > 0.0
          && *((_DWORD *)a2 + 12))
        {
          *(_BYTE *)a1 = 0;
          v8 = *(_OWORD *)a2;
          v9 = *((_OWORD *)a2 + 1);
          v10 = *((_OWORD *)a2 + 2);
          *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 12);
          *(_OWORD *)(a1 + 40) = v10;
          *(_OWORD *)(a1 + 24) = v9;
          *(_OWORD *)(a1 + 8) = v8;
          v11 = vcvtpd_u64_f64(a2[1] / *a2);
          if (v11 <= 1)
            v12 = 1;
          else
            v12 = v11;
          *(_DWORD *)(a1 + 92) = v12;
          v13 = a2[5] * sqrt((double)v12);
          *(double *)(a1 + 64) = cnstatistics::InverseNormal((cnstatistics *)0xFFFFFFFFLL, 1.0 - a2[4], v13 * 1.25331414, v13);
          v24 = *a2;
          v25 = v12;
          v14 = v24 * (double)v12;
          v15 = a2[3];
          v16 = v14 * a2[2];
          v17 = vcvtmd_u64_f64(v16);
          v18 = vcvtpd_u64_f64(v14 * v15);
          v19 = v18 - v17;
          if (v18 < v17)
          {
LABEL_25:
            if (*(_QWORD *)(a1 + 184) == v19 + 1)
            {
              cnestimation::PeriodicityTracker::Reset((cnestimation::PeriodicityTracker *)a1);
              result = 0;
              *(_BYTE *)a1 = 1;
              return result;
            }
            cnestimation::PeriodicityTracker::Reset((cnestimation::PeriodicityTracker *)a1);
          }
          else
          {
            while (1)
            {
              v26 = v17;
              LOBYTE(v21[0]) = 0;
              *(_OWORD *)&v21[5] = 0u;
              memset(v22, 0, sizeof(v22));
              memset(v23, 0, sizeof(v23));
              v20 = cndft::SlidingDFT::SetConfiguration((uint64_t)v21, (uint64_t)&v24, 0.0, v16, v15);
              if (v20)
                cnestimation::PeriodicityTracker::Reset((cnestimation::PeriodicityTracker *)a1);
              else
                sub_18D079218((_QWORD *)(a1 + 144), (__int128 *)v21);
              sub_18D07AF50(v23);
              sub_18D07BD60(v22);
              if (v20)
                break;
              if (++v17 > v18)
                goto LABEL_25;
            }
          }
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return result;
}

void sub_18D0791FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_18D07AF50(v2);
  sub_18D07BD60(v1);
  _Unwind_Resume(a1);
}

void sub_18D079218(_QWORD *a1, __int128 *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  __int128 v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  __int128 *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  _QWORD *v108;
  __int128 v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  _OWORD *v122;
  __int128 v123;
  __int128 *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  int64_t v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t i;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  void *v180;
  char *v181;
  _QWORD *v182;
  __int128 v183;
  unint64_t v184;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 26 * v6 - 1;
  v8 = a1[4];
  if (v7 != a1[5] + v8)
    goto LABEL_38;
  v9 = v8 >= 0x1A;
  v10 = v8 - 26;
  if (v9)
  {
    a1[4] = v10;
    v13 = *(_QWORD *)v4;
    v11 = v4 + 8;
    v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1)
          v40 = 1;
        else
          v40 = (uint64_t)&v5[-*a1] >> 2;
        v41 = (char *)sub_18D07BF3C(v40);
        v43 = &v41[8 * (v40 >> 2)];
        v44 = (uint64_t *)a1[1];
        v5 = v43;
        v45 = a1[2] - (_QWORD)v44;
        if (v45)
        {
          v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = 8 * (v45 >> 3);
          v47 = &v41[8 * (v40 >> 2)];
          do
          {
            v48 = *v44++;
            *(_QWORD *)v47 = v48;
            v47 += 8;
            v46 -= 8;
          }
          while (v46);
        }
        v49 = (char *)*a1;
        *a1 = v41;
        a1[1] = v43;
        a1[2] = v5;
        a1[3] = &v41[8 * v42];
        if (v49)
        {
          operator delete(v49);
          v5 = (char *)a1[2];
        }
      }
      else
      {
        v15 = v14 >> 3;
        v16 = v14 >> 3 < -1;
        v17 = (v14 >> 3) + 2;
        if (v16)
          v18 = v17;
        else
          v18 = v15 + 1;
        v19 = -(v18 >> 1);
        v20 = v18 >> 1;
        v21 = &v11[-8 * v20];
        v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          v5 = (char *)a1[1];
        }
        v23 = &v5[8 * v19];
        v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(_QWORD *)v5 = v12;
  }
  else
  {
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >= v26 >> 3)
    {
      v29 = v26 >> 2;
      if (v24 == v25)
        v30 = 1;
      else
        v30 = v29;
      v31 = (char *)sub_18D07BF3C(v30);
      v33 = v32;
      v34 = operator new(0xF70uLL);
      v35 = &v31[8 * v6];
      v36 = &v31[8 * v33];
      if (v6 == v33)
      {
        v37 = 8 * v6;
        if (v5 - v4 < 1)
        {
          v148 = v34;
          v149 = v37 >> 2;
          if (v5 == v4)
            v150 = 1;
          else
            v150 = v149;
          v151 = (char *)sub_18D07BF3C(v150);
          v35 = &v151[8 * (v150 >> 2)];
          v36 = &v151[8 * v152];
          if (v31)
            operator delete(v31);
          v31 = v151;
          v34 = v148;
        }
        else
        {
          v38 = v37 >> 3;
          if (v38 >= -1)
            v39 = v38 + 1;
          else
            v39 = v38 + 2;
          v35 -= 8 * (v39 >> 1);
        }
      }
      *(_QWORD *)v35 = v34;
      v5 = v35 + 8;
      for (i = a1[2]; i != a1[1]; i -= 8)
      {
        if (v35 == v31)
        {
          if (v5 >= v36)
          {
            if (v36 == v31)
              v158 = 1;
            else
              v158 = (v36 - v31) >> 2;
            v159 = (char *)sub_18D07BF3C(v158);
            v161 = v159;
            v35 = &v159[(2 * v158 + 6) & 0xFFFFFFFFFFFFFFF8];
            v163 = v5 - v31;
            v162 = v5 == v31;
            v5 = v35;
            if (!v162)
            {
              v5 = &v35[v163 & 0xFFFFFFFFFFFFFFF8];
              v164 = 8 * (v163 >> 3);
              v165 = v35;
              v166 = v31;
              do
              {
                v167 = *(_QWORD *)v166;
                v166 += 8;
                *(_QWORD *)v165 = v167;
                v165 += 8;
                v164 -= 8;
              }
              while (v164);
            }
            v36 = &v159[8 * v160];
            if (v31)
              operator delete(v31);
            v31 = v161;
          }
          else
          {
            v154 = (v36 - v5) >> 3;
            if (v154 >= -1)
              v155 = v154 + 1;
            else
              v155 = v154 + 2;
            v156 = v155 >> 1;
            v35 = &v31[8 * (v155 >> 1)];
            v157 = v31;
            if (v5 != v31)
            {
              memmove(v35, v31, v5 - v31);
              v157 = v5;
            }
            v5 = &v157[8 * v156];
          }
        }
        v168 = *(_QWORD *)(i - 8);
        *((_QWORD *)v35 - 1) = v168;
        v35 -= 8;
      }
      v169 = (char *)*a1;
      *a1 = v31;
      a1[1] = v35;
      a1[2] = v5;
      a1[3] = v36;
      if (v169)
      {
        operator delete(v169);
        v5 = (char *)a1[2];
      }
      goto LABEL_37;
    }
    v27 = operator new(0xF70uLL);
    v28 = v27;
    if (v24 == v5)
    {
      if (v4 == v25)
      {
        if (v5 == v4)
          v126 = 1;
        else
          v126 = (v24 - v4) >> 2;
        v127 = 2 * v126;
        v128 = (char *)sub_18D07BF3C(v126);
        v4 = &v128[(v127 + 6) & 0xFFFFFFFFFFFFFFF8];
        v130 = (uint64_t *)a1[1];
        v131 = v4;
        v132 = a1[2] - (_QWORD)v130;
        if (v132)
        {
          v131 = &v4[v132 & 0xFFFFFFFFFFFFFFF8];
          v133 = 8 * (v132 >> 3);
          v134 = &v128[(v127 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            v135 = *v130++;
            *(_QWORD *)v134 = v135;
            v134 += 8;
            v133 -= 8;
          }
          while (v133);
        }
        v136 = (char *)*a1;
        *a1 = v128;
        a1[1] = v4;
        a1[2] = v131;
        a1[3] = &v128[8 * v129];
        if (v136)
        {
          operator delete(v136);
          v4 = (char *)a1[1];
        }
      }
      *((_QWORD *)v4 - 1) = v28;
      v137 = (char *)a1[1];
      v138 = (char *)a1[2];
      a1[1] = v137 - 8;
      v139 = *((_QWORD *)v137 - 1);
      a1[1] = v137;
      if (v138 == (char *)a1[3])
      {
        v140 = (uint64_t)&v137[-*a1];
        if ((unint64_t)v137 <= *a1)
        {
          if (v138 == (char *)*a1)
            v170 = 1;
          else
            v170 = (uint64_t)&v138[-*a1] >> 2;
          v171 = (char *)sub_18D07BF3C(v170);
          v173 = &v171[8 * (v170 >> 2)];
          v174 = (uint64_t *)a1[1];
          v138 = v173;
          v175 = a1[2] - (_QWORD)v174;
          if (v175)
          {
            v138 = &v173[v175 & 0xFFFFFFFFFFFFFFF8];
            v176 = 8 * (v175 >> 3);
            v177 = &v171[8 * (v170 >> 2)];
            do
            {
              v178 = *v174++;
              *(_QWORD *)v177 = v178;
              v177 += 8;
              v176 -= 8;
            }
            while (v176);
          }
          v179 = (char *)*a1;
          *a1 = v171;
          a1[1] = v173;
          a1[2] = v138;
          a1[3] = &v171[8 * v172];
          if (v179)
          {
            operator delete(v179);
            v138 = (char *)a1[2];
          }
        }
        else
        {
          v141 = v140 >> 3;
          v16 = v140 >> 3 < -1;
          v142 = (v140 >> 3) + 2;
          if (v16)
            v143 = v142;
          else
            v143 = v141 + 1;
          v144 = -(v143 >> 1);
          v145 = v143 >> 1;
          v146 = &v137[-8 * v145];
          v147 = v138 - v137;
          if (v138 != v137)
          {
            memmove(&v137[-8 * v145], v137, v138 - v137);
            v137 = (char *)a1[1];
          }
          v138 = &v146[v147];
          a1[1] = &v137[8 * v144];
          a1[2] = &v146[v147];
        }
      }
      *(_QWORD *)v138 = v139;
    }
    else
    {
      *(_QWORD *)v5 = v27;
    }
  }
  v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    v51 = 0;
  }
  else
  {
    v50 = a1[5] + a1[4];
    v51 = *(_QWORD *)&v4[8 * (v50 / 0x1A)] + 152 * (v50 % 0x1A);
  }
  v52 = *a2;
  v53 = a2[1];
  v54 = a2[2];
  *(_QWORD *)(v51 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v51 + 16) = v53;
  *(_OWORD *)(v51 + 32) = v54;
  *(_OWORD *)v51 = v52;
  *(_OWORD *)(v51 + 56) = 0u;
  *(_OWORD *)(v51 + 72) = 0u;
  *(_OWORD *)(v51 + 88) = 0u;
  v55 = *((_QWORD *)a2 + 11);
  v56 = *((_QWORD *)a2 + 8);
  v57 = (char *)(v56 + 8 * (v55 >> 9));
  if (*((_QWORD *)a2 + 9) == v56)
  {
    v58 = 0;
    v61 = 0;
    v60 = (char *)(v56 + 8 * ((*((_QWORD *)a2 + 12) + v55) >> 9));
  }
  else
  {
    v58 = (char *)(*(_QWORD *)v57 + 8 * (*((_QWORD *)a2 + 11) & 0x1FFLL));
    v59 = *((_QWORD *)a2 + 12) + v55;
    v60 = (char *)(v56 + 8 * (v59 >> 9));
    v61 = *(_QWORD *)v60 + 8 * (v59 & 0x1FF);
  }
  if ((char *)v61 != v58)
  {
    v62 = ((v61 - *(_QWORD *)v60) >> 3) + ((v60 - v57) << 6);
    v63 = (uint64_t)&v58[-*(_QWORD *)v57];
    v64 = v62 - (v63 >> 3);
    if (v62 != v63 >> 3)
    {
      if (((v64 + 1) & 0x1FF) != 0)
        v65 = ((unint64_t)(v64 + 1) >> 9) + 1;
      else
        v65 = (unint64_t)(v64 + 1) >> 9;
      if (v65)
      {
        v184 = v51 + 80;
        v181 = (char *)sub_18D0788C8(v51 + 80, v65);
        v182 = v181;
        *(_QWORD *)&v183 = v181;
        *((_QWORD *)&v183 + 1) = &v181[8 * v66];
        v67 = -(uint64_t)v65;
        do
        {
          v180 = operator new(0x1000uLL);
          sub_18D078674(&v181, &v180);
          v9 = __CFADD__(v67++, 1);
        }
        while (!v9);
        v68 = *(_QWORD **)(v51 + 72);
        v69 = -7 - (_QWORD)v68;
        while (v68 != *(_QWORD **)(v51 + 64))
        {
          --v68;
          v69 += 8;
          sub_18D078788((uint64_t)&v181, v68);
        }
        v70 = *(char **)(v51 + 56);
        v71 = v182;
        *(_QWORD *)(v51 + 56) = v181;
        *(_QWORD *)(v51 + 64) = v71;
        v181 = v70;
        v182 = v68;
        v72 = (_QWORD *)v183;
        v73 = *(_OWORD *)(v51 + 72);
        *(_OWORD *)(v51 + 72) = v183;
        v183 = v73;
        if (v68 != (_QWORD *)v73)
          *(_QWORD *)&v183 = v73 + (-(v73 + v69) & 0xFFFFFFFFFFFFFFF8);
        if (v70)
        {
          operator delete(v70);
          v74 = *(_QWORD *)(v51 + 88);
          v71 = *(_QWORD **)(v51 + 64);
          v75 = *(_QWORD **)(v51 + 72);
        }
        else
        {
          v74 = *(_QWORD *)(v51 + 88);
          v75 = v72;
        }
        v77 = *(_QWORD *)(v51 + 96);
        v79 = v77 + v74;
        v78 = &v71[(unint64_t)(v77 + v74) >> 9];
        if (v75 == v71)
          v76 = 0;
        else
          v76 = *v78 + 8 * (v79 & 0x1FF);
      }
      else
      {
        v76 = 0;
        v77 = 0;
        v78 = 0;
      }
      v80 = *v78;
      v81 = v64 + ((v76 - *v78) >> 3);
      if (v81 < 1)
      {
        v83 = 511 - v81;
        LOWORD(v81) = ~(511 - v81);
        v82 = &v78[-(v83 >> 9)];
      }
      else
      {
        v82 = &v78[(unint64_t)v81 >> 9];
      }
      v84 = *v82 + 8 * (v81 & 0x1FF);
      if (v76 != v84)
      {
        do
        {
          v85 = (_QWORD *)(v80 + 4096);
          if (v78 == v82)
            v85 = (_QWORD *)v84;
          if ((_QWORD *)v76 == v85)
          {
            v85 = (_QWORD *)v76;
          }
          else
          {
            v86 = *(char **)v57;
            v87 = (_QWORD *)v76;
            do
            {
              v88 = *(_QWORD *)v58;
              v58 += 8;
              *v87++ = v88;
              if (v58 - v86 == 4096)
              {
                v89 = (char *)*((_QWORD *)v57 + 1);
                v57 += 8;
                v86 = v89;
                v58 = v89;
              }
            }
            while (v87 != v85);
          }
          v77 += ((uint64_t)v85 - v76) >> 3;
          if (v78 == v82)
            break;
          v90 = v78[1];
          ++v78;
          v80 = v90;
          v76 = v90;
        }
        while (v90 != v84);
        *(_QWORD *)(v51 + 96) = v77;
      }
    }
  }
  *(_OWORD *)(v51 + 104) = 0u;
  *(_OWORD *)(v51 + 120) = 0u;
  *(_OWORD *)(v51 + 136) = 0u;
  v91 = *((_QWORD *)a2 + 17);
  v92 = *((_QWORD *)a2 + 14);
  v93 = (char *)(v92 + 8 * (v91 >> 8));
  if (*((_QWORD *)a2 + 15) == v92)
  {
    v94 = 0;
    v97 = 0;
    v96 = (char *)(v92 + 8 * ((*((_QWORD *)a2 + 18) + v91) >> 8));
  }
  else
  {
    v94 = (__int128 *)(*(_QWORD *)v93 + 16 * v91);
    v95 = *((_QWORD *)a2 + 18) + v91;
    v96 = (char *)(v92 + 8 * (v95 >> 8));
    v97 = *(_QWORD *)v96 + 16 * v95;
  }
  if ((__int128 *)v97 != v94)
  {
    v98 = ((v97 - *(_QWORD *)v96) >> 4) + 32 * (v96 - v93);
    v99 = (uint64_t)v94 - *(_QWORD *)v93;
    v100 = v98 - (v99 >> 4);
    if (v98 != v99 >> 4)
    {
      if ((_BYTE)v100 == 0xFF)
        v101 = (unint64_t)(v100 + 1) >> 8;
      else
        v101 = ((unint64_t)(v100 + 1) >> 8) + 1;
      if (v101)
      {
        v184 = v51 + 128;
        v181 = (char *)sub_18D0788C8(v51 + 128, v101);
        v182 = v181;
        *(_QWORD *)&v183 = v181;
        *((_QWORD *)&v183 + 1) = &v181[8 * v102];
        v103 = -(uint64_t)v101;
        do
        {
          v180 = operator new(0x1000uLL);
          sub_18D078674(&v181, &v180);
          v9 = __CFADD__(v103++, 1);
        }
        while (!v9);
        v104 = *(_QWORD **)(v51 + 120);
        v105 = -7 - (_QWORD)v104;
        while (v104 != *(_QWORD **)(v51 + 112))
        {
          --v104;
          v105 += 8;
          sub_18D078788((uint64_t)&v181, v104);
        }
        v106 = *(char **)(v51 + 104);
        v107 = v182;
        *(_QWORD *)(v51 + 104) = v181;
        *(_QWORD *)(v51 + 112) = v107;
        v181 = v106;
        v182 = v104;
        v108 = (_QWORD *)v183;
        v109 = *(_OWORD *)(v51 + 120);
        *(_OWORD *)(v51 + 120) = v183;
        v183 = v109;
        if (v104 != (_QWORD *)v109)
          *(_QWORD *)&v183 = v109 + (-(v109 + v105) & 0xFFFFFFFFFFFFFFF8);
        if (v106)
        {
          operator delete(v106);
          v110 = *(_QWORD *)(v51 + 136);
          v107 = *(_QWORD **)(v51 + 112);
          v111 = *(_QWORD **)(v51 + 120);
        }
        else
        {
          v110 = *(_QWORD *)(v51 + 136);
          v111 = v108;
        }
        v113 = *(_QWORD *)(v51 + 144);
        v115 = v113 + v110;
        v114 = &v107[(unint64_t)(v113 + v110) >> 8];
        if (v111 == v107)
          v112 = 0;
        else
          v112 = *v114 + 16 * v115;
      }
      else
      {
        v112 = 0;
        v113 = 0;
        v114 = 0;
      }
      v116 = *v114;
      v117 = v100 + ((v112 - *v114) >> 4);
      if (v117 < 1)
      {
        v119 = 255 - v117;
        LOBYTE(v117) = ~(-1 - v117);
        v118 = &v114[-(v119 >> 8)];
      }
      else
      {
        v118 = &v114[(unint64_t)v117 >> 8];
      }
      v120 = *v118 + 16 * v117;
      if (v112 != v120)
      {
        do
        {
          v121 = (_OWORD *)(v116 + 4096);
          if (v114 == v118)
            v121 = (_OWORD *)v120;
          if ((_OWORD *)v112 == v121)
          {
            v121 = (_OWORD *)v112;
          }
          else
          {
            v122 = (_OWORD *)v112;
            do
            {
              v123 = *v94++;
              *v122 = v123;
              if ((__int128 *)((char *)v94 - *(_QWORD *)v93) == (__int128 *)4096)
              {
                v124 = (__int128 *)*((_QWORD *)v93 + 1);
                v93 += 8;
                v94 = v124;
              }
              ++v122;
            }
            while (v122 != v121);
            v113 = *(_QWORD *)(v51 + 144);
          }
          v113 += ((uint64_t)v121 - v112) >> 4;
          *(_QWORD *)(v51 + 144) = v113;
          if (v114 == v118)
            break;
          v125 = v114[1];
          ++v114;
          v116 = v125;
          v112 = v125;
        }
        while (v125 != v120);
      }
    }
  }
  ++a1[5];
}

void sub_18D079BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  operator delete(v13);
  if (v12)
    operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t cnestimation::PeriodicityTracker::IsConfigured(cnestimation::PeriodicityTracker *this)
{
  return *(unsigned __int8 *)this;
}

BOOL cnestimation::PeriodicityTracker::IsValid(cnestimation::PeriodicityTracker *this)
{
  unint64_t v1;

  if (!*(_BYTE *)this)
    return 0;
  LODWORD(v1) = vcvtpd_u64_f64(*((double *)this + 2) / *((double *)this + 1));
  if (v1 <= 1)
    v1 = 1;
  else
    v1 = v1;
  return *((_QWORD *)this + 17) >= v1;
}

uint64_t cnestimation::PeriodicityTracker::AddSignalSample(cnestimation::PeriodicityTracker *this, double a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  long double v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  long double v32;
  double v38;
  double v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  char *v56;
  unsigned int v57;
  double v58;
  unsigned int v59;
  char *v60;
  unsigned int v61;
  double v62;
  double *v63;
  double v64;
  int64x2_t v65;
  double v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  char v72;
  char v73;
  BOOL v74;
  double v75;
  double v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  long double v92;
  uint64_t v93;
  _QWORD *v94;
  long double v95;
  BOOL v98;
  double v99;
  BOOL v101;
  unint64_t v102;
  double v103;
  int v104;
  int v105;
  double v106;
  unsigned int v107;
  double v108;
  BOOL v109;
  BOOL v110;
  unint64_t v111;
  BOOL v112;
  BOOL v113;
  double v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  double v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  double v129;
  double **v130;
  double *v131;
  double *v132;
  uint64_t v133;
  double v134;
  int v135;
  char v136;
  double *v137;
  signed int v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  _QWORD v155[4];
  uint64_t v156;
  BOOL v157[8];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162[8];
  int64x2_t v163;
  int64x2_t v164;
  double v165[3];

  v165[0] = a2;
  if (!*(_BYTE *)this)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_18:
    cnestimation::PeriodicityTracker::Reset(this);
    return 0xFFFFFFFFLL;
  }
  sub_18D077D00((_QWORD *)this + 12, v165);
  v3 = *((_QWORD *)this + 17);
  if (v3 > *((unsigned int *)this + 23))
  {
    ++*((_QWORD *)this + 16);
    *((_QWORD *)this + 17) = v3 - 1;
    sub_18D078C10((uint64_t)this + 96, 1);
  }
  v4 = *((_QWORD *)this + 19);
  if (*((_QWORD *)this + 20) == v4)
  {
    v5 = (unint64_t *)((char *)this + 184);
  }
  else
  {
    v5 = (unint64_t *)((char *)this + 184);
    v6 = *((_QWORD *)this + 22);
    v7 = (_QWORD *)(v4 + 8 * (v6 / 0x1A));
    v8 = *v7 + 152 * (v6 % 0x1A);
    v9 = *(_QWORD *)(v4 + 8 * ((*((_QWORD *)this + 23) + v6) / 0x1A)) + 152 * ((*((_QWORD *)this + 23) + v6) % 0x1A);
    if (v8 != v9)
    {
      v10 = 1;
      do
      {
        if (cndft::SlidingDFT::AddSample((cndft::SlidingDFT *)v8, v165[0]))
          goto LABEL_18;
        v11 = *(_QWORD *)(v8 + 144);
        if (*((_QWORD *)this + 17) != v11)
          goto LABEL_18;
        if (*(_BYTE *)v8)
          v12 = v11 >= *(unsigned int *)(v8 + 16);
        else
          v12 = 0;
        v8 += 152;
        if (v8 - *v7 == 3952)
        {
          v13 = v7[1];
          ++v7;
          v8 = v13;
        }
        v10 &= v12;
      }
      while (v8 != v9);
      if (!v10)
        return 0;
    }
  }
  v16 = *v5;
  if (*v5 < 3)
    return 0;
  if (v16 > 0x666666666666666)
    sub_18D07AFE4();
  v17 = (char *)sub_18D07AFF8(v16);
  v19 = v17;
  v20 = (*((_DWORD *)this + 34) - 1);
  v21 = *((_QWORD *)this + 19);
  if (*((_QWORD *)this + 20) != v21)
  {
    v22 = *((_QWORD *)this + 22);
    v23 = (_QWORD *)(v21 + 8 * (v22 / 0x1A));
    v24 = *v23 + 152 * (v22 % 0x1A);
    v25 = *(_QWORD *)(v21 + 8 * ((*((_QWORD *)this + 23) + v22) / 0x1A)) + 152 * ((*((_QWORD *)this + 23) + v22) % 0x1A);
    if (v24 != v25)
    {
      v26 = &v17[40 * v18];
      v27 = (unint64_t)v17;
      while (1)
      {
        v28 = 0.0;
        if (!*(_BYTE *)v24)
          break;
        v29 = *(_QWORD *)(v24 + 32);
        if (*(_QWORD *)(v24 + 144) <= v20)
        {
          v30 = v20;
          goto LABEL_33;
        }
        v30 = v20;
        v31 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 112)
                                   + (((*(_QWORD *)(v24 + 136) + v20) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*(_BYTE *)(v24 + 136) + v20));
        v32 = *(double *)v31;
        v28 = *((double *)v31 + 1);
LABEL_34:
        if ((v29 <= -1 || ((v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
          && (unint64_t)(v29 - 1) >= 0xFFFFFFFFFFFFFLL
          && (v29 & 0x7FFFFFFFFFFFFFFFLL) != 0
          || (*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_135;
        }
        v38 = hypot(v32, v28);
        v39 = v38;
        if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v38 < 0.0)
          goto LABEL_135;
        if (v27 >= (unint64_t)v26)
        {
          v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (_QWORD)v19) >> 3) + 1;
          if (v41 > 0x666666666666666)
            sub_18D07AFE4();
          if (0x999999999999999ALL * ((v26 - v19) >> 3) > v41)
            v41 = 0x999999999999999ALL * ((v26 - v19) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v26 - v19) >> 3) >= 0x333333333333333)
            v42 = 0x666666666666666;
          else
            v42 = v41;
          if (v42)
            v42 = (unint64_t)sub_18D07AFF8(v42);
          else
            v43 = 0;
          v44 = v42 + 8 * ((uint64_t)(v27 - (_QWORD)v19) >> 3);
          *(_BYTE *)v44 = 1;
          *(_QWORD *)(v44 + 8) = v29;
          *(long double *)(v44 + 16) = v32;
          *(long double *)(v44 + 24) = v28;
          *(double *)(v44 + 32) = v39;
          if ((char *)v27 == v19)
          {
            v48 = (char *)(v42 + 8 * ((uint64_t)(v27 - (_QWORD)v19) >> 3));
          }
          else
          {
            v45 = v42 + 8 * ((uint64_t)(v27 - (_QWORD)v19) >> 3);
            do
            {
              v46 = *(_OWORD *)(v27 - 40);
              v47 = *(_OWORD *)(v27 - 24);
              v48 = (char *)(v45 - 40);
              *(_QWORD *)(v45 - 8) = *(_QWORD *)(v27 - 8);
              *(_OWORD *)(v45 - 24) = v47;
              *(_OWORD *)(v45 - 40) = v46;
              v27 -= 40;
              v45 -= 40;
            }
            while ((char *)v27 != v19);
          }
          v26 = (char *)(v42 + 40 * v43);
          v27 = v44 + 40;
          if (v19)
            operator delete(v19);
          v19 = v48;
          v20 = v30;
        }
        else
        {
          *(_BYTE *)v27 = 1;
          v40 = v151;
          *(_DWORD *)(v27 + 4) = *(_DWORD *)((char *)&v151 + 3);
          *(_DWORD *)(v27 + 1) = v40;
          *(_QWORD *)(v27 + 8) = v29;
          *(long double *)(v27 + 16) = v32;
          *(long double *)(v27 + 24) = v28;
          *(double *)(v27 + 32) = v38;
          v27 += 40;
          v20 = v30;
        }
        v24 += 152;
        if (v24 - *v23 == 3952)
        {
          v49 = v23[1];
          ++v23;
          v24 = v49;
        }
        if (v24 == v25)
          goto LABEL_77;
      }
      v30 = v20;
      v29 = 0x7FF8000000000000;
LABEL_33:
      v32 = 0.0;
      goto LABEL_34;
    }
  }
  v27 = (unint64_t)v17;
LABEL_77:
  v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (_QWORD)v19) >> 3);
  v51 = 126 - 2 * __clz(v50);
  if ((char *)v27 == v19)
    v52 = 0;
  else
    v52 = v51;
  sub_18D07B03C((uint64_t)v19, v27, v52, 1);
  if ((v50 & 1) != 0)
  {
    v57 = v50 - 1;
    if ((((_DWORD)v50 - 1) & 2) == 0)
    {
      v53 = 0.5;
      v54 = (*(double *)&v19[40 * (v57 >> 2) - 8] + *(double *)&v19[40 * (v57 >> 2) + 32]) * 0.5;
      v55 = *(double *)&v19[40 * (v57 - (v57 >> 2)) + 32];
      v56 = &v19[40 * (v50 - (v57 >> 2))];
      goto LABEL_85;
    }
    v61 = (v57 >> 1) - 1;
    v54 = *(double *)&v19[40 * (v61 >> 1) + 32];
    v60 = &v19[40 * (v57 - (v61 >> 1))];
LABEL_88:
    v58 = *((double *)v60 + 4);
    goto LABEL_89;
  }
  if ((v50 & 2) != 0)
  {
    v59 = (v50 >> 1) - 1;
    v54 = *(double *)&v19[40 * (v59 >> 1) + 32];
    v60 = &v19[40 * (~(v59 >> 1) - 858993459 * ((uint64_t)(v27 - (_QWORD)v19) >> 3))];
    goto LABEL_88;
  }
  v53 = 0.5;
  v54 = (*(double *)&v19[40 * (v50 >> 2) - 8] + *(double *)&v19[40 * (v50 >> 2) + 32]) * 0.5;
  v55 = *(double *)&v19[40
                      * (~((-858993459 * ((uint64_t)(v27 - (_QWORD)v19) >> 3)) >> 2)
                       - 858993459 * ((uint64_t)(v27 - (_QWORD)v19) >> 3))
                      + 32];
  v56 = &v19[40 * (v50 - (v50 >> 2))];
LABEL_85:
  v58 = (v55 + *((double *)v56 + 4)) * v53;
LABEL_89:
  v62 = v58 + (v58 - v54) * 1.5;
  v64 = nextafter(1.0, INFINITY) + -1.0;
  v65 = vdupq_n_s64(0x7FF8000000000000uLL);
  v161 = 0x7FF8000000000000;
  v156 = 0x7FF8000000000000;
  if (v62 > v64)
    v64 = v62;
  v66 = v64;
  v162[0] = 0;
  v163 = v65;
  v164 = v65;
  v157[0] = 0;
  LOBYTE(v155[0]) = 0;
  v67 = *((_QWORD *)this + 19);
  if (*((_QWORD *)this + 20) == v67
    || (v68 = *((_QWORD *)this + 22),
        v69 = *(_QWORD *)(v67 + 8 * (v68 / 0x1A)) + 152 * (v68 % 0x1A),
        v70 = *(_QWORD *)(v67 + 8 * ((*v5 + v68) / 0x1A)) + 152 * ((*v5 + v68) % 0x1A),
        v69 == v70))
  {
LABEL_138:
    v14 = 0;
    *((_QWORD *)this + 10) = 0x7FF8000000000000;
    *((_WORD *)this + 36) = 0;
    *((_DWORD *)this + 22) = 0x80000000;
    if (!v19)
      return v14;
    goto LABEL_139;
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = *((double *)this + 8);
  v76 = v75 + v75;
  v77 = (_QWORD *)(v67 + 8 * (v68 / 0x1A));
  v78 = 0x7FF8000000000000;
  v79 = 0x7FF8000000000000;
  v80 = 0x7FF8000000000000;
  v81 = 0x7FF8000000000000;
  v82 = 0x7FF8000000000000;
  v83 = 0x7FF8000000000000;
  v84 = NAN;
  v85 = 0x7FF8000000000000;
  v86 = 0x7FF8000000000000;
  v87 = 0x7FF8000000000000;
  v88 = 0x7FF8000000000000;
  v89 = 0x7FF8000000000000;
  v90 = 0x7FF8000000000000;
  v91 = 0x7FF8000000000000;
  v139 = v64;
  do
  {
    v92 = 0.0;
    if (*(_BYTE *)v69)
    {
      v93 = *(_QWORD *)(v69 + 32);
      if (*(_QWORD *)(v69 + 144) > v20)
      {
        v94 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 112)
                                   + (((*(_QWORD *)(v69 + 136) + v20) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*(_BYTE *)(v69 + 136) + v20));
        v95 = *(double *)v94;
        v92 = *((double *)v94 + 1);
        goto LABEL_99;
      }
    }
    else
    {
      v93 = 0x7FF8000000000000;
    }
    v95 = 0.0;
LABEL_99:
    v98 = v93 > -1 && ((v93 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
       || (unint64_t)(v93 - 1) < 0xFFFFFFFFFFFFFLL
       || (v93 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (v98
      && (*(_QWORD *)&v95 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v92 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v148 = v79;
      v149 = v78;
      v146 = v81;
      v147 = v80;
      v144 = v83;
      v145 = v82;
      v142 = v84;
      v143 = v85;
      v140 = v87;
      v141 = v86;
      v99 = hypot(v95, v92);
      v87 = v140;
      v86 = v141;
      v84 = v142;
      v85 = v143;
      v83 = v144;
      v82 = v145;
      v81 = v146;
      v80 = v147;
      v79 = v148;
      v78 = v149;
      v76 = v75 + v75;
      v66 = v139;
      v101 = v99 >= 0.0 && (*(_QWORD *)&v99 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((v72 & 1) == 0)
        goto LABEL_122;
    }
    else
    {
      v101 = 0;
      v99 = NAN;
      v92 = NAN;
      v95 = NAN;
      v93 = 0x7FF8000000000000;
      if ((v72 & 1) == 0)
        goto LABEL_122;
    }
    LOBYTE(v155[0]) = v101;
    v156 = *(_QWORD *)&v99;
    v85 = *(_QWORD *)&v92;
    v86 = *(_QWORD *)&v95;
    v87 = v93;
LABEL_122:
    if (v71 && v84 - v99 > v76)
      break;
    v72 = 0;
    if (v99 > v66 && v99 > v75)
    {
      if (v71 && v99 <= v84)
      {
        v72 = 0;
        v73 = 1;
      }
      else
      {
        v73 = 1;
        v155[0] = 0;
        v156 = 0x7FF8000000000000;
        v85 = 0x7FF8000000000000;
        v78 = *(_QWORD *)&v92;
        v79 = *(_QWORD *)&v95;
        v80 = v93;
        v162[0] = v74;
        v164.i64[1] = v88;
        v81 = v89;
        v82 = v90;
        v83 = v91;
        v84 = v99;
        v157[0] = v101;
        v161 = *(_QWORD *)&v99;
        v71 = v101;
        v86 = 0x7FF8000000000000;
        v87 = 0x7FF8000000000000;
        v72 = 1;
      }
    }
    v69 += 152;
    if (v69 - *v77 == 3952)
    {
      v102 = v77[1];
      ++v77;
      v69 = v102;
    }
    v88 = *(_QWORD *)&v99;
    v89 = *(_QWORD *)&v92;
    v90 = *(_QWORD *)&v95;
    v91 = v93;
    v74 = v101;
  }
  while (v69 != v70);
  v155[1] = v87;
  v155[2] = v86;
  v155[3] = v85;
  v163.i64[0] = v83;
  v163.i64[1] = v82;
  v164.i64[0] = v81;
  v158 = v80;
  v159 = v79;
  v160 = v78;
  *(double *)&v154 = NAN;
  if ((v73 & 1) == 0)
    goto LABEL_138;
  if (cnestimation::PeriodicityTracker::InterpolateDFTPeak((cnestimation::PeriodicityTracker *)v162, (const cnestimation::PeriodicityTracker::DFTPoint *)v157, (const cnestimation::PeriodicityTracker::DFTPoint *)v155, (const cnestimation::PeriodicityTracker::DFTPoint *)&v154, v63))goto LABEL_135;
  v103 = *(double *)&v154;
  *((double *)this + 10) = *(double *)&v154;
  *((_WORD *)this + 36) = 256;
  v104 = *((_DWORD *)this + 22);
  if (v104 <= 0)
  {
    *((_DWORD *)this + 22) = 0x80000000;
  }
  else
  {
    v105 = v104 - 1;
    *((_DWORD *)this + 22) = v105;
    if (v105)
      goto LABEL_142;
    *((_BYTE *)this + 72) = 1;
  }
  if (fabs(v103) < 2.22044605e-16)
    goto LABEL_135;
  v106 = 1.0 / *((double *)this + 1);
  if (v106 * 0.5 <= v103)
    goto LABEL_135;
  v107 = vcvtpd_u64_f64(1.0 / v103 * v106);
  if (!v107)
    goto LABEL_135;
  v108 = v103 + v103;
  v109 = v108 < 0.0 || ((*(_QWORD *)&v108 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  v110 = v109 && (unint64_t)(*(_QWORD *)&v108 - 1) > 0xFFFFFFFFFFFFELL;
  if (v110
    || ((v111 = (unint64_t)(COERCE__INT64(fabs(1.0 / *((double *)this + 1))) - 0x10000000000000) >> 53,
         *(uint64_t *)&v106 > -1)
      ? (v112 = v111 >= 0x3FF)
      : (v112 = 1),
        v112 ? (v113 = (unint64_t)(*(_QWORD *)&v106 - 1) >= 0xFFFFFFFFFFFFFLL) : (v113 = 0),
        v113))
  {
LABEL_135:
    cnestimation::PeriodicityTracker::Reset(this);
    goto LABEL_136;
  }
  v114 = 1.0 / v106 / (1.0 / (v108 * 6.28318531) + 1.0 / v106);
  v152 = 0u;
  v153 = 0u;
  v151 = 0u;
  v115 = *((_QWORD *)this + 13);
  if (*((_QWORD *)this + 14) == v115
    || (v116 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17),
        v117 = (uint64_t *)(v115 + 8 * (v116 >> 9)),
        v118 = *v117,
        v119 = *v117 + 8 * (v116 & 0x1FF),
        v120 = *(_QWORD *)(v115 + ((*((_QWORD *)this + 16) >> 6) & 0x3FFFFFFFFFFFFF8))
             + 8 * (*((_QWORD *)this + 16) & 0x1FFLL),
        v119 == v120))
  {
    v126 = 0;
  }
  else
  {
    v121 = v107 + 1;
    v122 = 0.0;
    v123 = 1;
    do
    {
      v124 = v119;
      if (v119 == v118)
        v124 = *(v117 - 1) + 4096;
      if (!--v121)
        break;
      if ((v123 & 1) != 0)
        v122 = *(double *)(v124 - 8);
      else
        v122 = (1.0 - v114) * v122 + v114 * *(double *)(v124 - 8);
      v150 = v122;
      sub_18D07AB44((uint64_t)&v151, &v150);
      v118 = *v117;
      if (v119 == *v117)
      {
        v125 = *--v117;
        v118 = v125;
        v119 = v125 + 4096;
      }
      v123 = 0;
      v119 -= 8;
    }
    while (v119 != v120);
    v126 = *((_QWORD *)&v153 + 1);
  }
  if (v126 != v107 || (v127 = *((_DWORD *)this + 14)) == 0)
  {
    cnestimation::PeriodicityTracker::Reset(this);
    sub_18D07BD60(&v151);
LABEL_136:
    v14 = 0xFFFFFFFFLL;
    if (!v19)
      return v14;
    goto LABEL_139;
  }
  if (v127 == 2)
  {
    *(double *)&v128 = -INFINITY;
  }
  else if (v127 == 1)
  {
    *(double *)&v128 = INFINITY;
  }
  else
  {
    *(double *)&v128 = NAN;
  }
  v129 = *(double *)&v128;
  if ((_QWORD)v152 != *((_QWORD *)&v151 + 1))
  {
    v130 = (double **)(*((_QWORD *)&v151 + 1) + 8 * ((unint64_t)v153 >> 9));
    v131 = *v130;
    v132 = &(*v130)[v153 & 0x1FF];
    v133 = *(_QWORD *)(*((_QWORD *)&v151 + 1) + (((unint64_t)(v153 + v126) >> 6) & 0x3FFFFFFFFFFFFF8))
         + 8 * ((v153 + v126) & 0x1FF);
    if (v132 != (double *)v133)
    {
      v134 = 0.0;
      v135 = 1;
      v136 = 1;
      do
      {
        v134 = (1.0 - v114) * v134 + v114 * *v132;
        if ((v136 & 1) != 0)
          v134 = *v132;
        if (v127 == 1)
        {
          if (v129 < v134)
            goto LABEL_194;
        }
        else if (v127 != 2 || v129 > v134)
        {
          goto LABEL_194;
        }
        *((_DWORD *)this + 22) = v135;
        v129 = v134;
LABEL_194:
        if ((char *)++v132 - (char *)v131 == 4096)
        {
          v137 = v130[1];
          ++v130;
          v131 = v137;
          v132 = v137;
        }
        v136 = 0;
        ++v135;
      }
      while (v132 != (double *)v133);
    }
  }
  if (*((_BYTE *)this + 72))
  {
    v138 = *((_DWORD *)this + 22);
    if (v138 < (int)vcvtpd_s64_f64((double)v107 * 0.75))
      *((_DWORD *)this + 22) = v138 + v107;
  }
  sub_18D07BD60(&v151);
LABEL_142:
  v14 = 0;
  if (v19)
LABEL_139:
    operator delete(v19);
  return v14;
}

void sub_18D07A9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);
  sub_18D07BD60((uint64_t *)va);
  if (v15)
    operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t cnestimation::PeriodicityTracker::InterpolateDFTPeak(cnestimation::PeriodicityTracker *this, const cnestimation::PeriodicityTracker::DFTPoint *a2, const cnestimation::PeriodicityTracker::DFTPoint *a3, const cnestimation::PeriodicityTracker::DFTPoint *a4, double *a5)
{
  BOOL v5;
  double v9;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;
  __int128 v20;
  double v21[2];

  if (*(_BYTE *)this)
    v5 = *(_BYTE *)a2 == 0;
  else
    v5 = 1;
  if (v5 || *(_BYTE *)a3 == 0)
    return 0xFFFFFFFFLL;
  v9 = *((double *)a2 + 1);
  if (*((double *)this + 1) >= v9 || v9 >= *((double *)a3 + 1))
    return 0xFFFFFFFFLL;
  v12 = -*((double *)a2 + 3);
  v21[0] = *((double *)a2 + 2);
  v21[1] = v12;
  v20 = *((_OWORD *)this + 1);
  v13 = sub_18D077E0C((double *)&v20, v21);
  v20 = *((_OWORD *)a2 + 1);
  v14 = sub_18D077E0C((double *)&v20, v21);
  v20 = *((_OWORD *)a3 + 1);
  v15 = sub_18D077E0C((double *)&v20, v21);
  v16 = (v13 - v15) / (v13 + v14 * 2.0 + v15);
  v17 = fabs(v16);
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v17 < 2.22044605e-16)
    return 0xFFFFFFFFLL;
  result = 0;
  *(double *)a4 = *((double *)a2 + 1)
                + (sqrt(v16 * 8.0 * v16 + 1.0) + -1.0)
                / (v16
                 * 4.0)
                * 0.5
                * (*((double *)a3 + 1) - *((double *)this + 1));
  return result;
}

double sub_18D07AB44(uint64_t a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_18D07BF70((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  else
    v7 = *v6 + 8 * (v4 & 0x1FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  result = *a2;
  *(double *)(v7 - 8) = *a2;
  v9 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v9;
  return result;
}

uint64_t cnestimation::PeriodicityTracker::IsFeatureObservedInRecentTimeHistory(cnestimation::PeriodicityTracker *this, double a2, double *a3)
{
  char v4;
  unsigned int v9;
  unsigned int v10;
  unint64_t ObservedFeatureInRecentSamples;
  unsigned int LogLevel;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  __int16 v20;

  if (*(_BYTE *)this && *((_BYTE *)this + 73))
  {
    v4 = LOBYTE(a2);
    if (*(uint64_t *)&a2 > -1 && ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
      || (unint64_t)(*(_QWORD *)&a2 - 1) < 0xFFFFFFFFFFFFFLL
      || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      v9 = vcvtpd_u64_f64(a2 / *((double *)this + 1));
      if (v9 >= *((_DWORD *)this + 34))
        v10 = *((_DWORD *)this + 34);
      else
        v10 = v9;
      ObservedFeatureInRecentSamples = cnestimation::PeriodicityTracker::NumberOfSamplesToLastObservedFeatureInRecentSamples(this, v10);
      if (HIDWORD(ObservedFeatureInRecentSamples))
      {
        *a3 = -((double)(int)ObservedFeatureInRecentSamples * *((double *)this + 1));
        return 1;
      }
    }
    else
    {
      LogLevel = cnprint::CNPrinter::GetLogLevel(this);
      if (LogLevel <= 1)
      {
        v20 = 2;
        v19 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "PeriodicityTracker - invalid time interval for feature search,%.3lf", v14, v15, v16, v17, v18, v4);
      }
    }
  }
  return 0;
}

uint64_t cnestimation::PeriodicityTracker::IsSignalPeriodic(cnestimation::PeriodicityTracker *this)
{
  return *((unsigned __int8 *)this + 73);
}

uint64_t cnestimation::PeriodicityTracker::NumberOfSamplesToLastObservedFeatureInRecentSamples(cnestimation::PeriodicityTracker *this, unsigned int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  double *v22;
  double *v23;
  char *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  char *v29;
  double *v30;
  uint64_t v31;
  unsigned __int8 v33;
  __int16 v34;

  v2 = a2;
  v3 = *((_QWORD *)this + 17);
  if (v3 < a2)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v34 = 2;
      v33 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "WARNING: PeriodicityTracker search range exceeds signal length,num_samples,%u,length,%u", v4, v5, v6, v7, v8, v2);
    }
    goto LABEL_35;
  }
  if (a2 < 3)
  {
LABEL_35:
    v20 = 0;
    v26 = 0;
LABEL_36:
    v27 = 0;
    return v26 | v20 | v27;
  }
  v9 = *((_QWORD *)this + 16) + v3;
  v10 = *((_QWORD *)this + 13);
  v11 = (char *)(v10 + 8 * (v9 >> 9));
  v12 = *(_QWORD *)v11 + 8 * (v9 & 0x1FF);
  if (*((_QWORD *)this + 14) == v10)
    v13 = 0;
  else
    v13 = (double *)v12;
  v14 = ((uint64_t)v13 - *(_QWORD *)v11) >> 3;
  v15 = v14 - (int)a2;
  if (v15 < 1)
  {
    v17 = 511 - v15;
    LOWORD(v15) = ~(511 - v15);
    v16 = &v11[-8 * (v17 >> 9)];
  }
  else
  {
    v16 = &v11[8 * ((unint64_t)v15 >> 9)];
  }
  v18 = *(double **)v16;
  v19 = *(_QWORD *)v16 + 8 * (v15 & 0x1FF);
  v20 = *((unsigned int *)this + 14);
  if ((_DWORD)v20)
  {
    if ((_DWORD)v20 == 2)
    {
      if ((double *)v19 != v13)
      {
        v21 = v16;
        v22 = (double *)v19;
        v28 = (double *)v19;
        v29 = v16;
        while (1)
        {
          if ((char *)++v28 - (char *)v18 == 4096)
          {
            v30 = (double *)*((_QWORD *)v29 + 1);
            v29 += 8;
            v18 = v30;
            v28 = v30;
          }
          if (v28 == v13)
            break;
          if (*v22 < *v28)
          {
            v21 = v29;
            v22 = v28;
          }
        }
LABEL_33:
        if ((double *)v19 != v22)
        {
          v31 = ((uint64_t)v22 - *(_QWORD *)v21) >> 3;
          if (v31 + ((v21 - v16) << 6) != (v19 - *(_QWORD *)v16) >> 3)
          {
            if (v13 == v22)
            {
              LODWORD(v26) = -1;
            }
            else
            {
              v26 = ~v31 + ((v11 - v21) << 6) + v14;
              if (!v26)
              {
                v20 = 0;
                goto LABEL_36;
              }
            }
            v27 = v26 & 0xFFFFFF00;
            v26 = v26;
            v20 = 0x100000000;
            return v26 | v20 | v27;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      if ((_DWORD)v20 != 1)
      {
        v21 = v11;
        v22 = v13;
        goto LABEL_33;
      }
      if ((double *)v19 != v13)
      {
        v21 = v16;
        v22 = (double *)v19;
        v23 = (double *)v19;
        v24 = v16;
        while (1)
        {
          if ((char *)++v23 - (char *)v18 == 4096)
          {
            v25 = (double *)*((_QWORD *)v24 + 1);
            v24 += 8;
            v18 = v25;
            v23 = v25;
          }
          if (v23 == v13)
            break;
          if (*v23 < *v22)
          {
            v21 = v24;
            v22 = v23;
          }
        }
        goto LABEL_33;
      }
    }
    v21 = v16;
    v22 = (double *)v19;
    goto LABEL_33;
  }
  v26 = *((unsigned int *)this + 14);
  v27 = v26;
  return v26 | v20 | v27;
}

BOOL cnestimation::PeriodicityTracker::IsSecondLastSampleAnObservedFeature(cnestimation::PeriodicityTracker *this)
{
  return *(_BYTE *)this
      && *((_BYTE *)this + 73)
      && (unint64_t)cnestimation::PeriodicityTracker::NumberOfSamplesToLastObservedFeatureInRecentSamples(this, 3u) >> 32 != 0;
}

uint64_t cnestimation::PeriodicityTracker::IsLatestSampleAPredictedFeature(cnestimation::PeriodicityTracker *this)
{
  return *((unsigned __int8 *)this + 72);
}

double cnestimation::PeriodicityTracker::SignalFundamentalFrequency(cnestimation::PeriodicityTracker *this)
{
  if (*((_BYTE *)this + 73))
    return *((double *)this + 10);
  else
    return NAN;
}

double cnestimation::PeriodicityTracker::SignalSamplingPeriod(cnestimation::PeriodicityTracker *this)
{
  return *((double *)this + 1);
}

uint64_t sub_18D07AF50(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18D03CA50((uint64_t)a1);
}

void sub_18D07AFE4()
{
  sub_18D076D74("vector");
}

void *sub_18D07AFF8(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    sub_18D0788A0();
  return operator new(40 * a1);
}

void sub_18D07B03C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  double v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  double v30;
  double v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  __int128 v43;
  __int128 v44;
  double v45;
  double v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  __int128 *v53;
  __int128 *v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  BOOL v70;
  uint64_t v71;
  _OWORD *v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  double v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  double v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  double v109;
  double v110;
  _OWORD *v111;
  __int128 v112;
  double v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 8) < *(double *)(v8 + 32))
        {
          v142 = *(_QWORD *)(v8 + 32);
          v123 = *(_OWORD *)v8;
          v132 = *(_OWORD *)(v8 + 16);
          v50 = *(_OWORD *)(a2 - 40);
          v51 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v8 = v50;
          *(_OWORD *)(v8 + 16) = v51;
          *(_QWORD *)(a2 - 8) = v142;
          *(_OWORD *)(a2 - 24) = v132;
          *(_OWORD *)(a2 - 40) = v123;
        }
        return;
      case 3:
        sub_18D07B910((__int128 *)v8, (double *)(v8 + 40), (double *)(a2 - 40));
        return;
      case 4:
        sub_18D07BC94(v8, v8 + 40, v8 + 80, a2 - 40);
        return;
      case 5:
        v52 = (__int128 *)(v8 + 40);
        v53 = (__int128 *)(v8 + 80);
        v54 = (__int128 *)(v8 + 120);
        sub_18D07BC94(v8, v8 + 40, v8 + 80, v8 + 120);
        if (*(double *)(a2 - 8) < *(double *)(v8 + 152))
        {
          v55 = *v54;
          v133 = *(_OWORD *)(v8 + 136);
          v56 = *(_QWORD *)(v8 + 152);
          v57 = *(_OWORD *)(a2 - 24);
          v58 = *(_OWORD *)(a2 - 40);
          *(_QWORD *)(v8 + 152) = *(_QWORD *)(a2 - 8);
          *v54 = v58;
          *(_OWORD *)(v8 + 136) = v57;
          *(_OWORD *)(a2 - 24) = v133;
          *(_QWORD *)(a2 - 8) = v56;
          *(_OWORD *)(a2 - 40) = v55;
          if (*(double *)(v8 + 152) < *(double *)(v8 + 112))
          {
            v59 = *(_QWORD *)(v8 + 112);
            v61 = *v53;
            v60 = *(_OWORD *)(v8 + 96);
            v62 = *(_OWORD *)(v8 + 136);
            *v53 = *v54;
            *(_OWORD *)(v8 + 96) = v62;
            *(_QWORD *)(v8 + 112) = *(_QWORD *)(v8 + 152);
            *v54 = v61;
            *(_OWORD *)(v8 + 136) = v60;
            *(_QWORD *)(v8 + 152) = v59;
            if (*(double *)(v8 + 112) < *(double *)(v8 + 72))
            {
              v63 = *(_QWORD *)(v8 + 72);
              v65 = *v52;
              v64 = *(_OWORD *)(v8 + 56);
              v66 = *(_OWORD *)(v8 + 96);
              *v52 = *v53;
              *(_OWORD *)(v8 + 56) = v66;
              *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 112);
              *v53 = v65;
              *(_OWORD *)(v8 + 96) = v64;
              *(_QWORD *)(v8 + 112) = v63;
              if (*(double *)(v8 + 72) < *(double *)(v8 + 32))
              {
                v143 = *(_QWORD *)(v8 + 32);
                v124 = *(_OWORD *)v8;
                v134 = *(_OWORD *)(v8 + 16);
                v67 = *(_OWORD *)(v8 + 56);
                *(_OWORD *)v8 = *v52;
                *(_OWORD *)(v8 + 16) = v67;
                *(_QWORD *)(v8 + 32) = *(_QWORD *)(v8 + 72);
                *v52 = v124;
                *(_OWORD *)(v8 + 56) = v134;
                *(_QWORD *)(v8 + 72) = v143;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 959)
        {
          v68 = (_OWORD *)(v8 + 40);
          v70 = v8 == a2 || v68 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v70)
            {
              v71 = 0;
              v72 = (_OWORD *)v8;
              do
              {
                v73 = *((double *)v72 + 9);
                v74 = *((double *)v72 + 4);
                v72 = v68;
                if (v73 < v74)
                {
                  v125 = *v68;
                  v135 = v68[1];
                  v75 = v71;
                  while (1)
                  {
                    v76 = v8 + v75;
                    v77 = *(_OWORD *)(v8 + v75 + 16);
                    *(_OWORD *)(v76 + 40) = *(_OWORD *)(v8 + v75);
                    *(_OWORD *)(v76 + 56) = v77;
                    *(_QWORD *)(v76 + 72) = *(_QWORD *)(v8 + v75 + 32);
                    if (!v75)
                      break;
                    v75 -= 40;
                    if (v73 >= *(double *)(v76 - 8))
                    {
                      v78 = v8 + v75 + 40;
                      goto LABEL_78;
                    }
                  }
                  v78 = v8;
LABEL_78:
                  *(_OWORD *)v78 = v125;
                  *(_OWORD *)(v78 + 16) = v135;
                  *(double *)(v78 + 32) = v73;
                }
                v68 = (_OWORD *)((char *)v72 + 40);
                v71 += 40;
              }
              while ((_OWORD *)((char *)v72 + 40) != (_OWORD *)a2);
            }
          }
          else if (!v70)
          {
            do
            {
              v109 = *(double *)(a1 + 72);
              v110 = *(double *)(a1 + 32);
              a1 = (uint64_t)v68;
              if (v109 < v110)
              {
                v128 = *v68;
                v138 = v68[1];
                v111 = v68;
                do
                {
                  v112 = *(_OWORD *)((char *)v111 - 24);
                  *v111 = *(_OWORD *)((char *)v111 - 40);
                  v111[1] = v112;
                  *((_QWORD *)v111 + 4) = *((_QWORD *)v111 - 1);
                  v113 = *((double *)v111 - 6);
                  v111 = (_OWORD *)((char *)v111 - 40);
                }
                while (v109 < v113);
                *v111 = v128;
                v111[1] = v138;
                *((double *)v111 + 4) = v109;
              }
              v68 = (_OWORD *)((char *)v68 + 40);
            }
            while (a1 + 40 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v79 = (unint64_t)(v10 - 2) >> 1;
            v80 = v79;
            do
            {
              v81 = v80;
              if (v79 >= v80)
              {
                v82 = (2 * v80) | 1;
                v83 = v8 + 40 * v82;
                if (2 * v81 + 2 < v10 && *(double *)(v8 + 40 * v82 + 32) < *(double *)(v83 + 72))
                {
                  v83 += 40;
                  v82 = 2 * v81 + 2;
                }
                v84 = *(double *)(v8 + 40 * v81 + 32);
                if (*(double *)(v83 + 32) >= v84)
                {
                  v85 = v8 + 40 * v81;
                  v126 = *(_OWORD *)v85;
                  v136 = *(_OWORD *)(v85 + 16);
                  do
                  {
                    v86 = v85;
                    v85 = v83;
                    v87 = *(_OWORD *)v83;
                    v88 = *(_OWORD *)(v83 + 16);
                    *(_QWORD *)(v86 + 32) = *(_QWORD *)(v83 + 32);
                    *(_OWORD *)v86 = v87;
                    *(_OWORD *)(v86 + 16) = v88;
                    if (v79 < v82)
                      break;
                    v89 = (2 * v82) | 1;
                    v83 = v8 + 40 * v89;
                    v90 = 2 * v82 + 2;
                    if (v90 < v10 && *(double *)(v8 + 40 * v89 + 32) < *(double *)(v83 + 72))
                    {
                      v83 += 40;
                      v89 = v90;
                    }
                    v82 = v89;
                  }
                  while (*(double *)(v83 + 32) >= v84);
                  *(_OWORD *)v85 = v126;
                  *(_OWORD *)(v85 + 16) = v136;
                  *(double *)(v85 + 32) = v84;
                }
              }
              v80 = v81 - 1;
            }
            while (v81);
            v91 = v9 / 0x28uLL;
            do
            {
              v92 = 0;
              v144 = *(_QWORD *)(v8 + 32);
              v127 = *(_OWORD *)v8;
              v137 = *(_OWORD *)(v8 + 16);
              v93 = v8;
              do
              {
                v94 = v93;
                v95 = v92 + 1;
                v93 += 40 * (v92 + 1);
                v96 = 2 * v92;
                v92 = (2 * v92) | 1;
                v97 = v96 + 2;
                if (v97 < v91 && *(double *)(v94 + 40 * v95 + 32) < *(double *)(v93 + 72))
                {
                  v93 += 40;
                  v92 = v97;
                }
                v98 = *(_OWORD *)v93;
                v99 = *(_OWORD *)(v93 + 16);
                *(_QWORD *)(v94 + 32) = *(_QWORD *)(v93 + 32);
                *(_OWORD *)v94 = v98;
                *(_OWORD *)(v94 + 16) = v99;
              }
              while (v92 <= (uint64_t)((unint64_t)(v91 - 2) >> 1));
              a2 -= 40;
              if (v93 == a2)
              {
                *(_QWORD *)(v93 + 32) = v144;
                *(_OWORD *)v93 = v127;
                *(_OWORD *)(v93 + 16) = v137;
              }
              else
              {
                v100 = *(_OWORD *)a2;
                v101 = *(_OWORD *)(a2 + 16);
                *(_QWORD *)(v93 + 32) = *(_QWORD *)(a2 + 32);
                *(_OWORD *)v93 = v100;
                *(_OWORD *)(v93 + 16) = v101;
                *(_QWORD *)(a2 + 32) = v144;
                *(_OWORD *)a2 = v127;
                *(_OWORD *)(a2 + 16) = v137;
                v102 = v93 - v8 + 40;
                if (v102 >= 41)
                {
                  v103 = (v102 / 0x28uLL - 2) >> 1;
                  v104 = *(double *)(v93 + 32);
                  if (*(double *)(v8 + 40 * v103 + 32) < v104)
                  {
                    v116 = *(_OWORD *)v93;
                    v119 = *(_OWORD *)(v93 + 16);
                    do
                    {
                      v105 = v93;
                      v93 = v8 + 40 * v103;
                      v106 = *(_OWORD *)v93;
                      v107 = *(_OWORD *)(v93 + 16);
                      *(_QWORD *)(v105 + 32) = *(_QWORD *)(v93 + 32);
                      *(_OWORD *)v105 = v106;
                      *(_OWORD *)(v105 + 16) = v107;
                      if (!v103)
                        break;
                      v103 = (v103 - 1) >> 1;
                    }
                    while (*(double *)(v8 + 40 * v103 + 32) < v104);
                    *(_OWORD *)v93 = v116;
                    *(_OWORD *)(v93 + 16) = v119;
                    *(double *)(v93 + 32) = v104;
                  }
                }
              }
            }
            while (v91-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 40 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1401)
        {
          sub_18D07B910((__int128 *)v12, (double *)a1, (double *)(a2 - 40));
        }
        else
        {
          sub_18D07B910((__int128 *)a1, (double *)v12, (double *)(a2 - 40));
          v13 = 5 * v11;
          v14 = (double *)(a1 + 40 * v11 - 40);
          sub_18D07B910((__int128 *)(a1 + 40), v14, (double *)(a2 - 80));
          v15 = (double *)(a1 + 40 + 8 * v13);
          sub_18D07B910((__int128 *)(a1 + 80), v15, (double *)(a2 - 120));
          sub_18D07B910((__int128 *)v14, (double *)v12, v15);
          v139 = *(_QWORD *)(a1 + 32);
          v120 = *(_OWORD *)a1;
          v129 = *(_OWORD *)(a1 + 16);
          v16 = *(_OWORD *)v12;
          v17 = *(_OWORD *)(v12 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v12 + 32);
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(_QWORD *)(v12 + 32) = v139;
          *(_OWORD *)v12 = v120;
          *(_OWORD *)(v12 + 16) = v129;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(double *)(a1 + 32);
          if (*(double *)(a1 - 8) < v18)
            goto LABEL_11;
          v115 = *(_OWORD *)a1;
          v118 = *(_OWORD *)(a1 + 16);
          if (v18 >= *(double *)(a2 - 8))
          {
            v38 = a1 + 40;
            do
            {
              v8 = v38;
              if (v38 >= a2)
                break;
              v39 = *(double *)(v38 + 32);
              v38 += 40;
            }
            while (v18 >= v39);
          }
          else
          {
            v36 = a1;
            do
            {
              v8 = v36 + 40;
              v37 = *(double *)(v36 + 72);
              v36 += 40;
            }
            while (v18 >= v37);
          }
          v40 = a2;
          if (v8 < a2)
          {
            v41 = a2;
            do
            {
              v40 = v41 - 40;
              v42 = *(double *)(v41 - 8);
              v41 -= 40;
            }
            while (v18 < v42);
          }
          while (v8 < v40)
          {
            v141 = *(_QWORD *)(v8 + 32);
            v122 = *(_OWORD *)v8;
            v131 = *(_OWORD *)(v8 + 16);
            v43 = *(_OWORD *)v40;
            v44 = *(_OWORD *)(v40 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v40 + 32);
            *(_OWORD *)v8 = v43;
            *(_OWORD *)(v8 + 16) = v44;
            *(_QWORD *)(v40 + 32) = v141;
            *(_OWORD *)v40 = v122;
            *(_OWORD *)(v40 + 16) = v131;
            do
            {
              v45 = *(double *)(v8 + 72);
              v8 += 40;
            }
            while (v18 >= v45);
            do
            {
              v46 = *(double *)(v40 - 8);
              v40 -= 40;
            }
            while (v18 < v46);
          }
          v47 = (__int128 *)(v8 - 40);
          if (v8 - 40 != a1)
          {
            v48 = *v47;
            v49 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v48;
            *(_OWORD *)(a1 + 16) = v49;
          }
          a4 = 0;
          *v47 = v115;
          *(_OWORD *)(v8 - 24) = v118;
          *(double *)(v8 - 8) = v18;
          continue;
        }
        v18 = *(double *)(a1 + 32);
LABEL_11:
        v19 = 0;
        v114 = *(_OWORD *)a1;
        v117 = *(_OWORD *)(a1 + 16);
        do
        {
          v20 = *(double *)(a1 + v19 + 72);
          v19 += 40;
        }
        while (v20 < v18);
        v21 = a1 + v19;
        v22 = a2;
        if (v19 == 40)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = v25 - 40;
            v26 = *(double *)(v25 - 8);
            v25 -= 40;
            if (v26 < v18)
              goto LABEL_21;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 40;
            v24 = *(double *)(v22 - 8);
            v22 -= 40;
          }
          while (v24 >= v18);
        }
LABEL_21:
        v8 = v21;
        if (v21 < v23)
        {
          v27 = v23;
          do
          {
            v140 = *(_QWORD *)(v8 + 32);
            v121 = *(_OWORD *)v8;
            v130 = *(_OWORD *)(v8 + 16);
            v28 = *(_OWORD *)v27;
            v29 = *(_OWORD *)(v27 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v27 + 32);
            *(_OWORD *)v8 = v28;
            *(_OWORD *)(v8 + 16) = v29;
            *(_QWORD *)(v27 + 32) = v140;
            *(_OWORD *)v27 = v121;
            *(_OWORD *)(v27 + 16) = v130;
            do
            {
              v30 = *(double *)(v8 + 72);
              v8 += 40;
            }
            while (v30 < v18);
            do
            {
              v31 = *(double *)(v27 - 8);
              v27 -= 40;
            }
            while (v31 >= v18);
          }
          while (v8 < v27);
        }
        v32 = (__int128 *)(v8 - 40);
        if (v8 - 40 != a1)
        {
          v33 = *v32;
          v34 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v33;
          *(_OWORD *)(a1 + 16) = v34;
        }
        *v32 = v114;
        *(_OWORD *)(v8 - 24) = v117;
        *(double *)(v8 - 8) = v18;
        if (v21 < v23)
        {
LABEL_32:
          sub_18D07B03C(a1, v8 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = sub_18D07BA00(a1, v8 - 40);
        if (!sub_18D07BA00(v8, a2))
        {
          if (v35)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 40;
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 1) < *(double *)(v9 + 8))
        {
          v20 = *(double *)v9;
          *(double *)v9 = *(a2 - 2);
          *(a2 - 2) = v20;
          v21 = *(_QWORD *)(v9 + 8);
          *(double *)(v9 + 8) = *(a2 - 1);
          *((_QWORD *)a2 - 1) = v21;
        }
        return;
      case 3uLL:
        sub_18D214C2C((double *)v9, (double *)(v9 + 16), a2 - 2);
        return;
      case 4uLL:
        sub_18D215084((double *)v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        sub_18D21514C((double *)v9, (double *)(v9 + 16), (double *)(v9 + 32), (double *)(v9 + 48), a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_18D214B44(v9, a2);
          else
            sub_18D214BC4((_QWORD *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (double *)(v9 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            sub_18D214C2C((double *)(v9 + 16 * (v13 >> 1)), (double *)v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_18D214C2C((double *)v9, (double *)(v9 + 16 * (v13 >> 1)), a2 - 2);
            sub_18D214C2C((double *)(v9 + 16), v15 - 2, a2 - 4);
            sub_18D214C2C((double *)(v9 + 32), (double *)(v9 + 16 + 16 * v14), a2 - 6);
            sub_18D214C2C(v15 - 2, v15, (double *)(v9 + 16 + 16 * v14));
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(double *)(v9 - 8) >= *(double *)(v9 + 8))
          {
            v9 = sub_18D214D24((double *)v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v17 = sub_18D214E0C((double *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = sub_18D214EF4(v9, v17);
          v9 = v17 + 16;
          if (!sub_18D214EF4(v17 + 16, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_14:
            sub_18D2147F8(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 16;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (double *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if ((double *)v9 != a2)
          sub_18D215250(v9, a2, a2, a3);
        return;
    }
  }
}

__int128 *sub_18D07B910(__int128 *result, double *a2, double *a3)
{
  double v3;
  double v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v3 = a2[4];
  v4 = a3[4];
  if (v3 >= *((double *)result + 4))
  {
    if (v4 < v3)
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((_QWORD *)a2 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      if (a2[4] < *((double *)result + 4))
      {
        v15 = *result;
        v16 = result[1];
        v17 = *((_QWORD *)result + 4);
        v18 = *((_QWORD *)a2 + 4);
        v19 = *((_OWORD *)a2 + 1);
        *result = *(_OWORD *)a2;
        result[1] = v19;
        *((_QWORD *)result + 4) = v18;
        *((_QWORD *)a2 + 4) = v17;
        *(_OWORD *)a2 = v15;
        *((_OWORD *)a2 + 1) = v16;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v20 = *result;
      v21 = result[1];
      v22 = *((_QWORD *)result + 4);
      v23 = *((_QWORD *)a2 + 4);
      v24 = *((_OWORD *)a2 + 1);
      *result = *(_OWORD *)a2;
      result[1] = v24;
      *((_QWORD *)result + 4) = v23;
      *((_QWORD *)a2 + 4) = v22;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      if (a3[4] >= a2[4])
        return result;
      v5 = *(_OWORD *)a2;
      v6 = *((_OWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 4);
      v25 = *((_QWORD *)a3 + 4);
      v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((_QWORD *)a2 + 4) = v25;
    }
    else
    {
      v5 = *result;
      v6 = result[1];
      v7 = *((_QWORD *)result + 4);
      v8 = *((_QWORD *)a3 + 4);
      v9 = *((_OWORD *)a3 + 1);
      *result = *(_OWORD *)a3;
      result[1] = v9;
      *((_QWORD *)result + 4) = v8;
    }
    *((_QWORD *)a3 + 4) = v7;
    *(_OWORD *)a3 = v5;
    *((_OWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL sub_18D07BA00(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 8) < *(double *)(a1 + 32))
      {
        v6 = *(_OWORD *)a1;
        v7 = *(_OWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = *(_QWORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_OWORD *)(a2 - 40) = v6;
      }
      return result;
    case 3uLL:
      sub_18D07B910((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_18D07BC94(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      v20 = (__int128 *)(a1 + 40);
      v21 = (__int128 *)(a1 + 80);
      v22 = (__int128 *)(a1 + 120);
      sub_18D07BC94(a1, a1 + 40, a1 + 80, a1 + 120);
      if (*(double *)(a2 - 8) >= *(double *)(a1 + 152))
        return 1;
      v23 = *v22;
      v24 = *(_OWORD *)(a1 + 136);
      v25 = *(_QWORD *)(a1 + 152);
      v26 = *(_QWORD *)(a2 - 8);
      v27 = *(_OWORD *)(a2 - 24);
      *v22 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 136) = v27;
      *(_QWORD *)(a1 + 152) = v26;
      *(_QWORD *)(a2 - 8) = v25;
      *(_OWORD *)(a2 - 24) = v24;
      *(_OWORD *)(a2 - 40) = v23;
      if (*(double *)(a1 + 152) >= *(double *)(a1 + 112))
        return 1;
      v28 = *(_QWORD *)(a1 + 112);
      v30 = *v21;
      v29 = *(_OWORD *)(a1 + 96);
      v31 = *(_OWORD *)(a1 + 136);
      *v21 = *v22;
      *(_OWORD *)(a1 + 96) = v31;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 152);
      *v22 = v30;
      *(_OWORD *)(a1 + 136) = v29;
      *(_QWORD *)(a1 + 152) = v28;
      if (*(double *)(a1 + 112) >= *(double *)(a1 + 72))
        return 1;
      v32 = *(_QWORD *)(a1 + 72);
      v34 = *v20;
      v33 = *(_OWORD *)(a1 + 56);
      v35 = *(_OWORD *)(a1 + 96);
      *v20 = *v21;
      *(_OWORD *)(a1 + 56) = v35;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
      *v21 = v34;
      *(_OWORD *)(a1 + 96) = v33;
      *(_QWORD *)(a1 + 112) = v32;
      if (*(double *)(a1 + 72) >= *(double *)(a1 + 32))
        return 1;
      v36 = *(_QWORD *)(a1 + 32);
      v38 = *(_OWORD *)a1;
      v37 = *(_OWORD *)(a1 + 16);
      v39 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v20;
      *(_OWORD *)(a1 + 16) = v39;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
      *v20 = v38;
      *(_OWORD *)(a1 + 56) = v37;
      result = 1;
      *(_QWORD *)(a1 + 72) = v36;
      return result;
    default:
      v11 = a1 + 80;
      sub_18D07B910((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 32);
    if (v15 < *(double *)(v11 + 32))
    {
      v40 = *(_OWORD *)v12;
      v41 = *(_OWORD *)(v12 + 16);
      v16 = v13;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_OWORD *)(a1 + v16 + 96);
        *(_OWORD *)(v17 + 120) = *(_OWORD *)(a1 + v16 + 80);
        *(_OWORD *)(v17 + 136) = v18;
        *(_QWORD *)(v17 + 152) = *(_QWORD *)(a1 + v16 + 112);
        if (v16 == -80)
          break;
        v16 -= 40;
        if (v15 >= *(double *)(v17 + 72))
        {
          v19 = a1 + v16 + 120;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(_OWORD *)v19 = v40;
      *(_OWORD *)(v19 + 16) = v41;
      *(double *)(v19 + 32) = v15;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

__n128 sub_18D07BC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  sub_18D07B910((__int128 *)a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 32);
  if (result.n128_f64[0] < *(double *)(a3 + 32))
  {
    result = *(__n128 *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 32);
    v11 = *(_QWORD *)(a4 + 32);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    result.n128_u64[0] = *(_QWORD *)(a3 + 32);
    if (result.n128_f64[0] < *(double *)(a2 + 32))
    {
      result = *(__n128 *)a2;
      v13 = *(_OWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 32);
      v15 = *(_QWORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 32) = v15;
      *(_QWORD *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      result.n128_u64[0] = *(_QWORD *)(a2 + 32);
      if (result.n128_f64[0] < *(double *)(a1 + 32))
      {
        result = *(__n128 *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_QWORD *)(a2 + 32);
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 32) = v19;
        *(_QWORD *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

uint64_t sub_18D07BD60(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18D03CA50((uint64_t)a1);
}

uint64_t sub_18D07BDF4(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x1A];
    v7 = (unint64_t)*v6 + 152 * (v5 % 0x1A);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x1A] + 152 * ((a1[5] + v5) % 0x1A);
    if (v7 != v8)
    {
      do
      {
        sub_18D07AF50((_QWORD *)(v7 + 104));
        sub_18D07BD60((_QWORD *)(v7 + 56));
        v7 += 152;
        if (v7 - (_QWORD)*v6 == 3952)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 13;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 26;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_18D03CA50((uint64_t)a1);
}

void *sub_18D07BF3C(unint64_t a1)
{
  if (a1 >> 61)
    sub_18D0788A0();
  return operator new(8 * a1);
}

void sub_18D07BF70(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 6) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x200)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_18D0788C8(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_18D078674(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_18D0788C8((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 256;
      else
        v40 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_18D078444(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_18D078558((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 256;
      else
        v35 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_18D078558((uint64_t)a1, &__p);
  }
}

void sub_18D07C234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t cnframework::GenericEvent::GetEventTime(cnframework::GenericEvent *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t cnframework::GenericEvent::IsValid(cnframework::GenericEvent *this)
{
  return *((unsigned __int8 *)this + 8);
}

_QWORD *cnframework::GenericEvent::GetEventName@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  if (!*((_BYTE *)this + 8))
    return sub_18D0778AC(a2, "GenericEvent");
  if (*((char *)this + 71) < 0)
    return sub_18D077798(a2, (void *)this[6], this[7]);
  *(_OWORD *)a2 = *((_OWORD *)this + 3);
  a2[2] = this[8];
  return this;
}

void sub_18D07C2E8(uint64_t a1)
{
  sub_18D03FE08(a1);
  JUMPOUT(0x18D78B5D4);
}

double cnframework::ActiveObjectBase::ActiveObjectBase(uint64_t a1, _BYTE *a2)
{
  double result;

  *(_QWORD *)a1 = off_1E25B8C88;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 72) = 850045863;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_BYTE *)(a1 + 168) = *a2;
  *(_BYTE *)(a1 + 169) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 850045863;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 850045863;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 1018212795;
  *(_QWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  atomic_store(0, (unsigned __int8 *)(a1 + 352));
  return result;
}

uint64_t cnframework::ActiveObjectBase::GetThreadingModel(cnframework::ActiveObjectBase *this)
{
  if (*((_BYTE *)this + 168))
    return 0;
  else
    return atomic_load((unsigned __int8 *)this + 352);
}

void cnframework::ActiveObjectBase::SetEventDistributor(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *__p[2];
  char v17;
  unsigned __int8 v18;
  __int16 v19;

  if (a2)
  {
    if (a1[43])
    {
      v19 = 3;
      v18 = 3;
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 16))(__p, a1);
      if (v17 >= 0)
        v9 = __p;
      else
        LOBYTE(v9) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "Replacing previously-set event distributor in %s.", v4, v5, v6, v7, v8, (char)v9);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    a1[43] = a2;
  }
  else
  {
    v19 = 3;
    v18 = 5;
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 16))(__p, a1);
    if (v17 >= 0)
      v15 = __p;
    else
      LOBYTE(v15) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "Attempted to set null event distributor in %s.", v10, v11, v12, v13, v14, (char)v15);
    if (v17 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D07C4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cnframework::ActiveObjectBase::ResetDroppedEventStats(uint64_t this)
{
  *(_BYTE *)(this + 192) = 0;
  *(_QWORD *)(this + 200) = 0;
  *(_QWORD *)(this + 208) = 0x7FF8000000000000;
  *(_QWORD *)(this + 216) = 0;
  return this;
}

void cnframework::ActiveObjectBase::SetEventQueueDelay(cnframework::ActiveObjectBase *this, double a2)
{
  int v4;
  std::mutex *v5;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *__p[2];
  char v24;
  unsigned __int8 v25;
  __int16 v26;

  v4 = *((unsigned __int8 *)this + 168);
  if (*((_BYTE *)this + 168))
  {
    v5 = 0;
  }
  else
  {
    v5 = (std::mutex *)((char *)this + 280);
    std::mutex::lock((std::mutex *)((char *)this + 280));
  }
  if (*(uint64_t *)&a2 > -1 && ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(_QWORD *)&a2 - 1) < 0xFFFFFFFFFFFFFLL
    || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v26 = 3;
      v25 = 1;
      (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
      if (v24 >= 0)
        v16 = __p;
      else
        LOBYTE(v16) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "%s setting event queue delay to %.3lf", v11, v12, v13, v14, v15, (char)v16);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    *((_DWORD *)this + 68) = a2 > 0.0;
    __p[0] = 0;
    __p[1] = 0;
    *(double *)v9.i64 = a2;
    CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v9, v10);
    *((_OWORD *)this + 14) = *(_OWORD *)__p;
    if (!v4)
      goto LABEL_22;
  }
  else
  {
    v26 = 3;
    v25 = 5;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v24 >= 0)
      v22 = __p;
    else
      LOBYTE(v22) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "%s attempted to set event queue delay to %.3lf, defaulting to 0.0", v17, v18, v19, v20, v21, (char)v22);
    if (v24 < 0)
      operator delete(__p[0]);
    *((_DWORD *)this + 68) = 0;
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    if (!v4)
LABEL_22:
      std::mutex::unlock(v5);
  }
}

void sub_18D07C6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::mutex *v16;
  int v17;

  if (a16 < 0)
    operator delete(__p);
  if (!v17)
    std::mutex::unlock(v16);
  _Unwind_Resume(exception_object);
}

void cnframework::ActiveObjectBase::HandleAllEvents(cnframework::ActiveObjectBase *this)
{
  std::mutex *v2;
  std::condition_variable *v3;
  int v4;
  int8x16_t v5;
  int8x16_t v6;
  std::unique_lock<std::mutex> v7;

  if (!*((_BYTE *)this + 168))
  {
    v2 = (std::mutex *)((char *)this + 72);
    v3 = (std::condition_variable *)((char *)this + 432);
    do
    {
      v4 = atomic_load((unsigned __int8 *)this + 352);
      if (v4 != 1)
        break;
      v7.__m_ = v2;
      v7.__owns_ = 1;
      std::mutex::lock(v2);
      std::condition_variable::wait(v3, &v7);
      while (cnframework::ActiveObjectBase::HandleNextEventWithoutMutex(this, v5, v6))
        ;
      if (v7.__owns_)
        std::mutex::unlock(v7.__m_);
    }
    while (!*((_BYTE *)this + 168));
  }
}

void sub_18D07C790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_18D07C7AC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_18D07C868(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_18D07C81C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t sub_18D07C868(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_18D07C8C0(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  const void **v4;

  v4 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v4;
  *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  cnframework::ActiveObjectBase::HandleAllEvents((cnframework::ActiveObjectBase *)v4[1]);
  sub_18D07C928((uint64_t **)&v4);
  return 0;
}

void sub_18D07C914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D07C928((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_18D07C928(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x18D78B3A0]();
      MEMORY[0x18D78B5D4](v4, 0x20C4093837F09);
    }
    MEMORY[0x18D78B5D4](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void sub_18D07C990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v38 = v3;
    v39 = v4;
    v8 = v5 >> 1;
    v9 = a1 + 16 * (v5 >> 1);
    v10 = *(_QWORD *)v9;
    v11 = *(std::__shared_weak_count **)(v9 + 8);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = *(_QWORD *)(a2 - 16);
    v16 = *(std::__shared_weak_count **)(a2 - 8);
    v15 = a2 - 16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = cnframework::GenericEvent::operator>(v10, v14);
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      v19 = cnframework::GenericEvent::operator>(v10, v14);
    }
    if (!v11)
      goto LABEL_17;
    v21 = (unint64_t *)&v11->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v19)
        return;
    }
    else
    {
LABEL_17:
      if (!v19)
        return;
    }
    v37 = *(_OWORD *)v15;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    do
    {
      v23 = v9;
      sub_18D07CBBC(v15, (__int128 *)v9);
      if (!v8)
        break;
      v8 = (v8 - 1) >> 1;
      v9 = a1 + 16 * v8;
      v24 = *(_QWORD *)v9;
      v25 = *(std::__shared_weak_count **)(v9 + 8);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (*((_QWORD *)&v37 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v30 = cnframework::GenericEvent::operator>(v24, v37);
        do
          v31 = __ldaxr(v28);
        while (__stlxr(v31 - 1, v28));
        if (!v31)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
        }
      }
      else
      {
        v30 = cnframework::GenericEvent::operator>(v24, v37);
      }
      if (v25)
      {
        v32 = (unint64_t *)&v25->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v15 = v23;
    }
    while (v30);
    sub_18D07CBBC(v23, &v37);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
}

uint64_t sub_18D07CBBC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t sub_18D07CC20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_18D07CC84()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_1E25CCD08;
  __cxa_throw(exception, (struct type_info *)&unk_1E25B7D98, (void (*)(void *))std::exception::~exception);
}

void sub_18D07CCB8(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnframework::Supervisor::Supervisor(uint64_t a1, _BYTE *a2)
{
  double v3;

  *(_QWORD *)a1 = off_1E25B8BC0;
  *(_BYTE *)(a1 + 8) = *a2;
  v3 = cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 16, a2);
  *(_QWORD *)(a1 + 16) = &off_1E25B8D28;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  MEMORY[0x18D78B3DC](a1 + 520, v3);
  *(_BYTE *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 600) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 608) = 850045863;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 657) = 0u;
  *(_QWORD *)(a1 + 680) = 850045863;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 729) = 0u;
  *(_QWORD *)(a1 + 752) = 850045863;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 801) = 0u;
  atomic_store(0, (unsigned __int8 *)(a1 + 744));
  return a1;
}

void sub_18D07CDAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  cnframework::ActiveObjectBase *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 504) = v6;
    operator delete(v6);
  }
  cnframework::ActiveObjectBase::~ActiveObjectBase(v2);
  _Unwind_Resume(a1);
}

uint64_t cnframework::Supervisor::GetCurrentTime(cnframework::Supervisor *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 608);
  std::mutex::lock((std::mutex *)((char *)this + 608));
  v3 = *((_QWORD *)this + 74);
  std::mutex::unlock(v2);
  return v3;
}

uint64_t cnframework::Supervisor::GetThreadingModel(cnframework::Supervisor *this)
{
  if (*((_BYTE *)this + 8))
    return 0;
  else
    return atomic_load((unsigned __int8 *)this + 744);
}

uint64_t cnframework::Supervisor::IsRunning(cnframework::Supervisor *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 680);
  std::mutex::lock((std::mutex *)((char *)this + 680));
  v3 = *((unsigned __int8 *)this + 672);
  std::mutex::unlock(v2);
  return v3;
}

void cnframework::Supervisor::Start(cnframework::Supervisor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  cnprint::CNPrinter *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *__p[2];
  char v22;
  unsigned __int8 v23;
  __int16 v24;

  if (*((_BYTE *)this + 816))
  {
    v24 = 3;
    v23 = 4;
    (*(void (**)(void **__return_ptr, cnframework::Supervisor *))(*(_QWORD *)this + 40))(__p, this);
    if (v22 >= 0)
      v7 = __p;
    else
      LOBYTE(v7) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s called Supervisor::Start after Supervisor::TearDown", v2, v3, v4, v5, v6, (char)v7);
LABEL_17:
    if (v22 < 0)
      operator delete(__p[0]);
    return;
  }
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 520));
  if (*((_QWORD *)this + 62) == *((_QWORD *)this + 63))
  {
    v24 = 3;
    v23 = 4;
    (*(void (**)(void **__return_ptr, cnframework::Supervisor *))(*(_QWORD *)this + 40))(__p, this);
    if (v22 >= 0)
      v13 = __p;
    else
      LOBYTE(v13) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s called Supervisor::Start with no registered active objects", v8, v9, v10, v11, v12, (char)v13);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 520));
  std::mutex::lock((std::mutex *)((char *)this + 680));
  *((_BYTE *)this + 672) = 1;
  std::mutex::unlock((std::mutex *)((char *)this + 680));
  if (cnprint::CNPrinter::GetLogLevel(v14) <= 1)
  {
    v24 = 3;
    v23 = 1;
    (*(void (**)(void **__return_ptr, cnframework::Supervisor *))(*(_QWORD *)this + 40))(__p, this);
    if (v22 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s calling Supervisor::Start", v15, v16, v17, v18, v19, (char)v20);
    goto LABEL_17;
  }
}

void sub_18D07D008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::recursive_mutex *v16;

  if (a16 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v16);
  _Unwind_Resume(a1);
}

uint64_t cnframework::Supervisor::Initialize(cnframework::Supervisor *this)
{
  cnframework::Supervisor::Reset(this);
  return 1;
}

uint64_t cnframework::Supervisor::ExternalEventInputActiveObjectReference(cnframework::Supervisor *this)
{
  return (uint64_t)this + 16;
}

void cnframework::Supervisor::RegisterActiveObject(cnframework::ActiveObjectBase ***this, cnframework::ActiveObjectBase *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  std::recursive_mutex *v10;
  cnframework::ActiveObjectBase **i;
  unsigned __int8 v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  unint64_t v21;
  cnframework::ActiveObjectBase **v22;
  cnframework::ActiveObjectBase **v23;
  cnframework::ActiveObjectBase **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32[2];
  char v33;
  unsigned __int8 v34;
  __int16 v35;
  void *__p[2];
  char v37;

  if (*((_BYTE *)this + 816))
  {
    LOWORD(v32[0]) = 3;
    LOBYTE(v35) = 4;
    ((void (*)(void **__return_ptr, cnframework::ActiveObjectBase ***, cnframework::ActiveObjectBase *))(*this)[5])(__p, this, a2);
    if (v37 >= 0)
      v8 = __p;
    else
      LOBYTE(v8) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)&v35, "%s called Supervisor::RegisterActiveObject after Supervisor::TearDown", v3, v4, v5, v6, v7, (char)v8);
    if (v37 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = (std::recursive_mutex *)(this + 65);
    std::recursive_mutex::lock((std::recursive_mutex *)(this + 65));
    for (i = this[62]; i != this[63]; ++i)
    {
      if (*i == a2)
      {
        v35 = 3;
        v34 = 4;
        ((void (*)(void **__return_ptr, cnframework::ActiveObjectBase ***))(*this)[5])(__p, this);
        v13 = v37;
        v14 = (char)__p[0];
        (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)a2 + 16))(v32, a2);
        v20 = __p;
        if (v13 < 0)
          LOBYTE(v20) = v14;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s called Supervisor::RegisterActiveObject twice on %s.", v15, v16, v17, v18, v19, (char)v20);
        if (v33 < 0)
          operator delete(v32[0]);
        if (v37 < 0)
          operator delete(__p[0]);
        goto LABEL_38;
      }
    }
    cnframework::ActiveObjectBase::SetEventDistributor(a2, (uint64_t)this);
    if (*((_BYTE *)this + 8))
      v12 = 0;
    else
      v12 = atomic_load((unsigned __int8 *)this + 744);
    LOBYTE(__p[0]) = v12;
    cnframework::ActiveObjectBase::SetThreadingModel((uint64_t)a2, __p);
    v22 = this[63];
    v21 = (unint64_t)this[64];
    if ((unint64_t)v22 >= v21)
    {
      v24 = this[62];
      v25 = v22 - v24;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        sub_18D07AFE4();
      v27 = v21 - (_QWORD)v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 61)
          sub_18D0788A0();
        v29 = (char *)operator new(8 * v28);
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[8 * v25];
      *(_QWORD *)v30 = a2;
      v23 = (cnframework::ActiveObjectBase **)(v30 + 8);
      if (v22 != v24)
      {
        do
        {
          v31 = (uint64_t)*--v22;
          *((_QWORD *)v30 - 1) = v31;
          v30 -= 8;
        }
        while (v22 != v24);
        v22 = this[62];
      }
      this[62] = (cnframework::ActiveObjectBase **)v30;
      this[63] = v23;
      this[64] = (cnframework::ActiveObjectBase **)&v29[8 * v28];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v22 = a2;
      v23 = v22 + 1;
    }
    this[63] = v23;
LABEL_38:
    std::recursive_mutex::unlock(v10);
  }
}

void sub_18D07D2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::recursive_mutex *v24;

  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  std::recursive_mutex::unlock(v24);
  _Unwind_Resume(a1);
}

void sub_18D07D348(cnframework::ActiveObjectBase *a1)
{
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D07D36C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "ExternalEventInputActiveObject");
}

uint64_t cnframework::EventSubscription::EventSubscription(uint64_t this)
{
  *(_BYTE *)this = 1;
  *(_QWORD *)(this + 8) = MEMORY[0x1E0DE4F20];
  *(_BYTE *)(this + 16) = 1;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_BYTE *)this = 1;
  *(_QWORD *)(this + 8) = MEMORY[0x1E0DE4F20];
  *(_BYTE *)(this + 16) = 1;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t cnframework::EventSubscription::EventSubscription(uint64_t this, const std::type_info *a2, const cnframework::ActiveObjectBase *a3)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a3;
  return this;
}

{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a3;
  return this;
}

uint64_t cnframework::EventSubscription::EventSubscription(uint64_t this, const std::type_info *a2)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 1;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 1;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t cnframework::EventSubscription::EventSubscription(uint64_t this, const cnframework::ActiveObjectBase *a2)
{
  *(_BYTE *)this = 1;
  *(_QWORD *)(this + 8) = MEMORY[0x1E0DE4F20];
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a2;
  return this;
}

{
  *(_BYTE *)this = 1;
  *(_QWORD *)(this + 8) = MEMORY[0x1E0DE4F20];
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a2;
  return this;
}

BOOL cnframework::EventSubscription::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 result;

  if (*a1 != *a2)
    return 0;
  result = sub_18D07C81C(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  if (!result)
    return result;
  return a1[16] == a2[16] && *((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3);
}

uint64_t cnlogging::details::ByteUnstuffer::readAndUnstuff(uint64_t **this, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int v56;
  unsigned __int8 v57;

  a2[1] = *a2;
  v57 = 0;
  while (1)
  {
    result = cnlogging::details::ByteUnstuffer::readAndUnstuffU8(this, &v57);
    if (!(_DWORD)result)
      return result;
    v9 = (unsigned __int8 *)a2[1];
    v8 = a2[2];
    if ((unint64_t)v9 >= v8)
    {
      v12 = *a2;
      v13 = &v9[-*a2];
      v14 = (unint64_t)(v13 + 1);
      if ((uint64_t)(v13 + 1) < 0)
LABEL_72:
        sub_18D07AFE4();
      v15 = v8 - v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        result = (uint64_t)operator new(v16);
      else
        result = 0;
      v17 = (uint64_t)&v13[result];
      v13[result] = v57;
      v11 = (uint64_t)&v13[result + 1];
      if (v9 != (unsigned __int8 *)v12)
      {
        v18 = &v9[~v12];
        do
        {
          v19 = *--v9;
          (v18--)[result] = v19;
        }
        while (v9 != (unsigned __int8 *)v12);
        v9 = (unsigned __int8 *)*a2;
        v17 = result;
      }
      *a2 = v17;
      a2[1] = v11;
      a2[2] = result + v16;
      if (v9)
        operator delete(v9);
      v10 = v57;
    }
    else
    {
      v10 = v57;
      *v9 = v57;
      v11 = (uint64_t)(v9 + 1);
    }
    a2[1] = v11;
    if ((v10 & 0x80) == 0)
    {
      *a4 = 0;
      result = cnlogging::details::ByteUnstuffer::decodeLength(result, a2, 0, a4);
      if ((_DWORD)result)
      {
        v20 = (_BYTE *)a2[1];
        *a3 = &v20[-*a2];
        if (*a4)
        {
          v21 = 0;
          while (1)
          {
            result = cnlogging::details::ByteUnstuffer::readAndUnstuffU8(this, &v57);
            if (!(_DWORD)result)
              break;
            v23 = (unsigned __int8 *)a2[1];
            v22 = a2[2];
            if ((unint64_t)v23 >= v22)
            {
              v24 = *a2;
              v25 = &v23[-*a2];
              v26 = (unint64_t)(v25 + 1);
              if ((uint64_t)(v25 + 1) < 0)
                goto LABEL_72;
              v27 = v22 - v24;
              if (2 * v27 > v26)
                v26 = 2 * v27;
              if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
                v28 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v28 = v26;
              if (v28)
                v29 = (char *)operator new(v28);
              else
                v29 = 0;
              v30 = (char *)&v25[(_QWORD)v29];
              v31 = &v25[(_QWORD)v29];
              *v31 = v57;
              v20 = v31 + 1;
              if (v23 != (unsigned __int8 *)v24)
              {
                v32 = &v23[~v24];
                do
                {
                  v33 = *--v23;
                  (v32--)[(_QWORD)v29] = v33;
                }
                while (v23 != (unsigned __int8 *)v24);
                v23 = (unsigned __int8 *)*a2;
                v30 = v29;
              }
              *a2 = (uint64_t)v30;
              a2[1] = (uint64_t)v20;
              a2[2] = (uint64_t)&v29[v28];
              if (v23)
                operator delete(v23);
            }
            else
            {
              *v23 = v57;
              v20 = v23 + 1;
            }
            a2[1] = (uint64_t)v20;
            if (++v21 >= (unint64_t)*a4)
              goto LABEL_44;
          }
        }
        else
        {
LABEL_44:
          v34 = 0;
          v54 = (uint64_t)&v20[-*a2];
          while (1)
          {
            result = cnlogging::details::ByteUnstuffer::readAndUnstuffU8(this, &v57);
            if (!(_DWORD)result)
              break;
            v36 = (unsigned __int8 *)a2[1];
            v35 = a2[2];
            if ((unint64_t)v36 >= v35)
            {
              v38 = *a2;
              v39 = &v36[-*a2];
              v40 = (unint64_t)(v39 + 1);
              if ((uint64_t)(v39 + 1) < 0)
                goto LABEL_72;
              v41 = v35 - v38;
              if (2 * v41 > v40)
                v40 = 2 * v41;
              if (v41 >= 0x3FFFFFFFFFFFFFFFLL)
                v42 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
                result = (uint64_t)operator new(v42);
              else
                result = 0;
              v43 = (uint64_t)&v39[result];
              v44 = &v39[result];
              *v44 = v57;
              v37 = v44 + 1;
              if (v36 != (unsigned __int8 *)v38)
              {
                v45 = &v36[~v38];
                do
                {
                  v46 = *--v36;
                  (v45--)[result] = v46;
                }
                while (v36 != (unsigned __int8 *)v38);
                v36 = (unsigned __int8 *)*a2;
                v43 = result;
              }
              *a2 = v43;
              a2[1] = (uint64_t)v37;
              a2[2] = result + v42;
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v36 = v57;
              v37 = v36 + 1;
            }
            a2[1] = (uint64_t)v37;
            if (++v34 == 4)
            {
              v56 = 0;
              v47 = cnlogging::details::ByteUnstuffer::decodeChecksum(result, a2, v54, &v56);
              result = 0;
              if (v47)
              {
                v48 = *a4;
                if (*a4)
                {
                  v49 = 0;
                  v50 = (unsigned __int8 *)(*a2 + *a3);
                  v51 = 1;
                  do
                  {
                    v52 = *v50++;
                    v51 = (v51 + v52) % 0xFFF1;
                    v49 = (v51 + v49) % 0xFFF1;
                    --v48;
                  }
                  while (v48);
                  v53 = v51 | (v49 << 16);
                }
                else
                {
                  v53 = 1;
                }
                return v53 == v56;
              }
              return result;
            }
          }
        }
      }
      return result;
    }
  }
}

uint64_t cnlogging::details::ByteUnstuffer::readAndUnstuffU8(uint64_t **this, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  __int16 v12;

  v2 = *this;
  if (*((_DWORD *)*this + 2) == -1)
    return 0;
  v3 = v2[3];
  if (v3 < 0)
    return 0;
  v4 = v2[4];
  if (v3 >= v4)
    return 0;
  v5 = v2[2];
  if (!v5)
    return 0;
  v6 = *v2;
  if (v3 >= *v2)
    return 0;
  v7 = *(unsigned __int8 *)(v5 + v3);
  v8 = v3 + 1;
  v2[3] = v3 + 1;
  v9 = v7 | (*((_WORD *)this + 4) << 8);
  *((_WORD *)this + 4) = v9;
  if (v9 == 32381)
    return 0;
  if (v9 == 32349)
  {
    if (v8 >= v4 || v8 >= v6)
      return 0;
    v12 = *(unsigned __int8 *)(v5 + v8);
    v2[3] = v3 + 2;
    *((_WORD *)this + 4) = v12 | (v7 << 8);
    LOBYTE(v7) = v12;
  }
  *a2 = v7;
  return 1;
}

uint64_t cnlogging::details::ByteUnstuffer::decodeLength(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  _QWORD v13[2];
  __int128 v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[32];

  wireless_diagnostics::google::protobuf::io::ArrayInputStream::ArrayInputStream((wireless_diagnostics::google::protobuf::io::ArrayInputStream *)v19, (const void *)(*a2 + a3));
  v10 = v19;
  v11 = 0;
  v12 = 0;
  v13[0] = 0;
  *(_QWORD *)((char *)v13 + 6) = 0;
  v14 = xmmword_18D30B2C0;
  v5 = *MEMORY[0x1E0DE8248];
  v15 = 0;
  v16 = v5;
  v17 = 0;
  v18 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v10);
  v9 = 0;
  if ((unint64_t)v11 >= v12 || (char)*v11 < 0)
  {
    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v10, &v9))
    {
      v7 = 0;
      goto LABEL_7;
    }
    v6 = v9;
  }
  else
  {
    v6 = *v11++;
  }
  *a4 = v6;
  v7 = 1;
LABEL_7:
  MEMORY[0x18D78AE90](&v10);
  MEMORY[0x18D78AE18](v19);
  return v7;
}

uint64_t cnlogging::details::ByteUnstuffer::decodeChecksum(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  int v5;
  uint64_t LittleEndian32Fallback;
  _QWORD v8[3];
  _QWORD v9[2];
  __int128 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[32];

  wireless_diagnostics::google::protobuf::io::ArrayInputStream::ArrayInputStream((wireless_diagnostics::google::protobuf::io::ArrayInputStream *)v15, (const void *)(*a2 + a3));
  v8[0] = v15;
  v8[1] = 0;
  v8[2] = 0;
  v9[0] = 0;
  *(_QWORD *)((char *)v9 + 6) = 0;
  v10 = xmmword_18D30B2C0;
  v5 = *MEMORY[0x1E0DE8248];
  v11 = 0;
  v12 = v5;
  v13 = 0;
  v14 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v8);
  LittleEndian32Fallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v8, a4);
  MEMORY[0x18D78AE90](v8);
  MEMORY[0x18D78AE18](v15);
  return LittleEndian32Fallback;
}

uint64_t cnlogging::details::InputStreamSync::sync(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int64_t v12;
  uint64_t v13;

  v3 = *a3;
  if ((*a3 & 0x8000000000000000) == 0 && v3 <= *(_QWORD *)(*a1 + 32))
  {
    *(_QWORD *)(*a1 + 24) = v3;
    while (1)
    {
      v13 = 0;
      if ((cnlogging::details::InputStreamSync::findNextSentinelAndGetVersionByteIdx(a1, a2, &v13) & 1) == 0)
        break;
      v7 = *a1;
      v8 = v13;
      *(_QWORD *)(v7 + 24) = v13;
      if (*(_DWORD *)(v7 + 8) == -1)
        break;
      if (v8 < 0)
        break;
      if (v8 >= *(_QWORD *)(v7 + 32))
        break;
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9 || v8 >= *(_QWORD *)v7)
        break;
      v10 = *(unsigned __int8 *)(v9 + v8);
      *(_QWORD *)(v7 + 24) = v8 + 1;
      if (v10 == 1)
      {
        v11 = (unint64_t)v8 >= 2;
        v12 = v8 - 2;
        if (!v11)
          return 0;
        a1[1] = v12;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t cnlogging::details::InputStreamSync::findNextSentinelAndGetVersionByteIdx(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  char v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v21;

  v21 = 0;
  v6 = *a1;
  v7 = *(_QWORD *)(v6 + 24);
  if (a2 != 1 || (v8 = *(_QWORD *)(v6 + 32), v8 - v7 < 3))
  {
    v15 = 0;
    v12 = 0;
    if (v7 < 0)
      return v12;
    goto LABEL_13;
  }
  if (*(_DWORD *)(v6 + 8) == -1)
    return 0;
  v9 = 0;
  v10 = 1;
  v11 = *(_QWORD *)(v6 + 24);
  do
  {
    v12 = 0;
    if (v7 < 0)
      return v12;
    if (v11 >= v8)
      return v12;
    v12 = *(_QWORD *)(v6 + 16);
    if (!v12)
      return v12;
    v13 = v10;
    if (v11 >= *(_QWORD *)v6)
      return 0;
    v10 = 0;
    v14 = *(unsigned __int8 *)(v12 + v11++);
    *(_QWORD *)(v6 + 24) = v11;
    v9 = v14 | (v9 << 8);
  }
  while ((v13 & 1) != 0);
  v21 = v14;
  if (v9 == 32381)
  {
    *a3 = v7 + 2;
    v15 = 1;
LABEL_13:
    if (v7 > *(_QWORD *)(v6 + 32))
      return 0;
    *(_QWORD *)(v6 + 24) = v7;
    if ((v15 & 1) != 0)
      return 1;
    goto LABEL_16;
  }
  if (v7 > *(_QWORD *)(v6 + 32))
    return 0;
  *(_QWORD *)(v6 + 24) = v7;
LABEL_16:
  v16 = cnlogging::details::ByteReader::readNextByte(v6, a2, &v21);
  v12 = 0;
  if (!v16 || a2 > 1)
    return v12;
  v17 = 0;
  while (a2)
  {
    HIDWORD(v18) = v21;
    LODWORD(v18) = v17 << 16;
    v17 = v18 >> 24;
    if ((unsigned __int16)(v18 >> 24) == 32381)
    {
      v19 = *(_QWORD *)(*a1 + 24) + 3;
      goto LABEL_28;
    }
LABEL_23:
    if ((cnlogging::details::ByteReader::readNextByte(*a1, a2, &v21) & 1) == 0)
      return 0;
  }
  v17 = v21 | (v17 << 8);
  if ((unsigned __int16)v17 != 32381)
    goto LABEL_23;
  v19 = *(_QWORD *)(*a1 + 24);
LABEL_28:
  *a3 = v19;
  return 1;
}

BOOL cnlogging::details::InputStreamSync::isSynced(cnlogging::details::InputStreamSync *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return v1 != -1 && *(_QWORD *)(*(_QWORD *)this + 24) == v1 + 3;
}

BOOL cnlogging::details::InputStreamSync::getSyncIdx(cnlogging::details::InputStreamSync *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2 != -1)
    *a2 = v2;
  return v2 != -1;
}

uint64_t cnlogging::ProtobufInputStream::ProtobufInputStream(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1;
  *(_QWORD *)(a1 + 48) = -1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  cnlogging::ProtobufInputStream::open((cnlogging::details::MmapWrapper *)a1, a2);
  return a1;
}

void sub_18D07DDE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(char *)(v1 + 103) < 0)
    operator delete(*(void **)(v1 + 80));
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  cnlogging::details::ByteReader::~ByteReader((cnlogging::details::ByteReader *)v1);
  _Unwind_Resume(a1);
}

uint64_t cnlogging::ProtobufInputStream::open(cnlogging::details::MmapWrapper *this, const std::string *a2)
{
  uint64_t v4;

  if (*((_DWORD *)this + 2) != -1)
    cnlogging::details::MmapWrapper::close(this);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v4 = cnlogging::details::ByteReader::open(this, (uint64_t)a2);
  if ((v4 & 1) != 0)
  {
    std::string::operator=((std::string *)((char *)this + 80), a2);
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 6) = -1;
  }
  else if (*((char *)this + 103) < 0)
  {
    **((_BYTE **)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  else
  {
    *((_BYTE *)this + 80) = 0;
    *((_BYTE *)this + 103) = 0;
  }
  return v4;
}

void cnlogging::ProtobufInputStream::~ProtobufInputStream(void **this)
{
  void *v2;

  cnlogging::ProtobufInputStream::close(this);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  cnlogging::details::ByteReader::~ByteReader((cnlogging::details::ByteReader *)this);
}

_DWORD *cnlogging::ProtobufInputStream::close(_DWORD *this)
{
  _DWORD *v1;

  v1 = this;
  if (this[2] != -1)
    this = (_DWORD *)cnlogging::details::MmapWrapper::close((cnlogging::details::MmapWrapper *)this);
  *((_QWORD *)v1 + 3) = 0;
  *((_QWORD *)v1 + 4) = 0;
  if (*((char *)v1 + 103) < 0)
  {
    **((_BYTE **)v1 + 10) = 0;
    *((_QWORD *)v1 + 11) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 80) = 0;
    *((_BYTE *)v1 + 103) = 0;
  }
  *((_QWORD *)v1 + 13) = 0;
  *((_QWORD *)v1 + 14) = 0;
  *((_QWORD *)v1 + 6) = -1;
  return this;
}

uint64_t cnlogging::ProtobufInputStream::readNextProtobuf(cnlogging::ProtobufInputStream *this, wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  uint64_t *v4;
  uint64_t ProtobufAtCurrentIdxNoSync;
  uint64_t v6;
  uint64_t v8;

  if (*((_DWORD *)this + 2) == -1)
    return 0;
  v8 = *((_QWORD *)this + 14);
  v4 = (uint64_t *)((char *)this + 40);
  ProtobufAtCurrentIdxNoSync = 0;
  if (cnlogging::details::InputStreamSync::sync((uint64_t *)this + 5, 0, &v8))
  {
    do
    {
      ProtobufAtCurrentIdxNoSync = cnlogging::ProtobufInputStream::readProtobufAtCurrentIdxNoSync(this, a2);
      if ((ProtobufAtCurrentIdxNoSync & 1) != 0)
        break;
      v6 = *((_QWORD *)this + 6);
      if (v6 == -1)
        break;
      v8 = v6 + 1;
    }
    while ((cnlogging::details::InputStreamSync::sync(v4, 0, &v8) & 1) != 0);
  }
  return ProtobufAtCurrentIdxNoSync;
}

uint64_t cnlogging::ProtobufInputStream::readProtobufAtCurrentIdxNoSync(cnlogging::ProtobufInputStream *this, wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int16 v10;
  int v11[2];
  uint64_t v12;

  *(_QWORD *)v11 = 0;
  v12 = 0;
  v9 = (uint64_t *)this;
  v10 = 0;
  v4 = (_QWORD *)((char *)this + 56);
  v5 = cnlogging::details::ByteUnstuffer::readAndUnstuff(&v9, (uint64_t *)this + 7, &v12, (uint64_t *)v11);
  result = 0;
  if (v5)
  {
    result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(a2, (const void *)(*v4 + v12));
    if ((_DWORD)result)
    {
      v7 = *((_QWORD *)this + 6);
      if (v7 == -1)
      {
        return 0;
      }
      else
      {
        v8 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 13) = v7;
        *((_QWORD *)this + 14) = v8;
        return 1;
      }
    }
  }
  return result;
}

uint64_t cnlogging::ProtobufInputStream::readPrevProtobuf(cnlogging::ProtobufInputStream *this, wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (*((_DWORD *)this + 2) == -1)
    return 0;
  v3 = *((_QWORD *)this + 13);
  v4 = v3 < 1;
  v5 = v3 - 1;
  if (v4)
    return 0;
  v9 = v5;
  if (!cnlogging::details::InputStreamSync::sync((uint64_t *)this + 5, 1u, &v9))
    return 0;
  while (1)
  {
    result = cnlogging::ProtobufInputStream::readProtobufAtCurrentIdxNoSync(this, a2);
    if ((result & 1) != 0)
      break;
    v8 = *((_QWORD *)this + 6);
    if (v8 == -1)
      break;
    v9 = v8 - 1;
    if ((cnlogging::details::InputStreamSync::sync((uint64_t *)this + 5, 1u, &v9) & 1) == 0)
      return 0;
  }
  return result;
}

uint64_t cnlogging::ProtobufInputStream::readFirstProtobuf(cnlogging::ProtobufInputStream *this, wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  if (*((_DWORD *)this + 2) != -1 && (*((_QWORD *)this + 4) & 0x8000000000000000) == 0)
  {
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
  }
  return cnlogging::ProtobufInputStream::readNextProtobuf(this, a2);
}

uint64_t cnlogging::ProtobufInputStream::readLastProtobuf(cnlogging::ProtobufInputStream *this, wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  if (*((_DWORD *)this + 2) != -1)
  {
    v2 = *((_QWORD *)this + 4);
    if ((v2 & 0x8000000000000000) == 0)
    {
      *((_QWORD *)this + 3) = v2;
      *((_QWORD *)this + 13) = v2;
      *((_QWORD *)this + 14) = v2;
    }
  }
  return cnlogging::ProtobufInputStream::readPrevProtobuf(this, a2);
}

uint64_t cnlogging::ProtobufInputStream::readProtobufContainingIdx(cnlogging::ProtobufInputStream *this, uint64_t *a2, wireless_diagnostics::google::protobuf::MessageLite *a3)
{
  if (*((_DWORD *)this + 2) == -1
    || !cnlogging::details::InputStreamSync::sync((uint64_t *)this + 5, 1u, a2))
  {
    return 0;
  }
  else
  {
    return cnlogging::ProtobufInputStream::readProtobufAtCurrentIdxNoSync(this, a3);
  }
}

uint64_t cnlogging::ProtobufInputStream::reset(cnlogging::ProtobufInputStream *this)
{
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  return cnlogging::ProtobufInputStream::open(this, (const std::string *)((char *)this + 80));
}

uint64_t cnlogging::details::CNProtobufStreamChecksum::fletcher16(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned __int8 *v5;
  int v6;

  if (a3)
  {
    v3 = 0;
    v4 = 0;
    v5 = (unsigned __int8 *)(*a1 + a2);
    do
    {
      v6 = *v5++;
      v4 = (v4 + v6) % 0xFF;
      v3 = (v4 + v3) % 0xFF;
      --a3;
    }
    while (a3);
    return (unsigned __int16)(v4 | ((_WORD)v3 << 8));
  }
  else
  {
    return 0;
  }
}

uint64_t cnlogging::details::ByteReader::ByteReader(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  cnlogging::details::ByteReader::open((cnlogging::details::MmapWrapper *)a1, a2);
  return a1;
}

void sub_18D07E280(_Unwind_Exception *a1)
{
  cnlogging::details::MmapWrapper *v1;

  cnlogging::details::MmapWrapper::close(v1);
  _Unwind_Resume(a1);
}

uint64_t cnlogging::details::ByteReader::open(cnlogging::details::MmapWrapper *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  if (*((_DWORD *)this + 2) != -1)
  {
    cnlogging::details::MmapWrapper::close(this);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  result = cnlogging::details::MmapWrapper::open((uint64_t)this, a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)this;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = v5;
  }
  return result;
}

void cnlogging::details::ByteReader::~ByteReader(cnlogging::details::ByteReader *this)
{
  if (*((_DWORD *)this + 2) != -1)
    cnlogging::details::MmapWrapper::close(this);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  cnlogging::details::MmapWrapper::close(this);
}

_DWORD *cnlogging::details::ByteReader::close(_DWORD *this)
{
  _DWORD *v1;

  v1 = this;
  if (this[2] != -1)
    this = (_DWORD *)cnlogging::details::MmapWrapper::close((cnlogging::details::MmapWrapper *)this);
  *((_QWORD *)v1 + 3) = 0;
  *((_QWORD *)v1 + 4) = 0;
  return this;
}

uint64_t cnlogging::details::ByteReader::computeFileSize(cnlogging::details::ByteReader *this)
{
  *((_QWORD *)this + 4) = *(_QWORD *)this;
  return 1;
}

BOOL cnlogging::details::ByteReader::isOpen(cnlogging::details::ByteReader *this)
{
  return *((_DWORD *)this + 2) != -1;
}

uint64_t cnlogging::details::ByteReader::setReadIdx(cnlogging::details::ByteReader *this, const uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*a2 < 0 || v2 > *((_QWORD *)this + 4))
    return 0;
  *((_QWORD *)this + 3) = v2;
  return 1;
}

uint64_t cnlogging::details::ByteReader::readNextByte(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 8) == -1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 < 0)
    return 0;
  if (v3 >= *(_QWORD *)(a1 + 32))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || v3 >= *(_QWORD *)a1)
    return 0;
  v5 = *(_BYTE *)(v4 + v3);
  if (!a2)
  {
    v6 = 1;
    goto LABEL_11;
  }
  if (a2 != 1)
    return 0;
  v6 = -1;
LABEL_11:
  *(_QWORD *)(a1 + 24) = v6 + v3;
  *a3 = v5;
  return 1;
}

uint64_t cnlogging::details::ByteReader::readByteAtIdx(uint64_t a1, int a2, _QWORD *a3, _BYTE *a4)
{
  *(_QWORD *)(a1 + 24) = *a3;
  return cnlogging::details::ByteReader::readNextByte(a1, a2, a4);
}

uint64_t cnlogging::details::MmapWrapper::MmapWrapper(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = 0;
  cnlogging::details::MmapWrapper::open(a1, a2);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = 0;
  cnlogging::details::MmapWrapper::open(a1, a2);
  return a1;
}

uint64_t cnlogging::details::MmapWrapper::open(uint64_t a1, uint64_t a2)
{
  const char *v4;
  int v5;
  size_t st_size;
  void *v8;
  stat v9;

  cnlogging::details::MmapWrapper::close((cnlogging::details::MmapWrapper *)a1);
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = open(v4, 0);
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 != -1)
  {
    if (!fstat(v5, &v9))
    {
      st_size = v9.st_size;
      *(_QWORD *)a1 = v9.st_size;
      v8 = mmap(0, st_size, 1, 2, *(_DWORD *)(a1 + 8), 0);
      if (v8 != (void *)-1)
      {
        *(_QWORD *)(a1 + 16) = v8;
        return 1;
      }
    }
    cnlogging::details::MmapWrapper::close((cnlogging::details::MmapWrapper *)a1);
  }
  return 0;
}

void cnlogging::details::MmapWrapper::~MmapWrapper(cnlogging::details::MmapWrapper *this)
{
  cnlogging::details::MmapWrapper::close(this);
}

{
  cnlogging::details::MmapWrapper::close(this);
}

uint64_t cnlogging::details::MmapWrapper::close(cnlogging::details::MmapWrapper *this)
{
  void *v2;
  uint64_t result;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
    munmap(v2, *(_QWORD *)this);
  result = *((unsigned int *)this + 2);
  if ((_DWORD)result != -1)
    result = close(result);
  *((_DWORD *)this + 2) = -1;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t cnlogging::details::MmapWrapper::readByteAtIdx(cnlogging::details::MmapWrapper *this, const uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*((_DWORD *)this + 2) == -1)
    return 0;
  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return 0;
  v4 = *a2;
  if (*a2 < 0 || v4 >= *(_QWORD *)this)
    return 0;
  *a3 = *(_BYTE *)(v3 + v4);
  return 1;
}

uint64_t cnlogging::ProtobufOutputStream::ProtobufOutputStream(uint64_t a1, const std::string *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FB0];
  v7 = MEMORY[0x1E0DE4FB0] + 64;
  *(_QWORD *)(a1 + 416) = MEMORY[0x1E0DE4FB0] + 64;
  v8 = a1 + 8;
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 8));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v6 + 24;
  *(_QWORD *)(a1 + 416) = v7;
  MEMORY[0x18D78B250](v8);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  cnlogging::ProtobufOutputStream::open((cnlogging::ProtobufOutputStream *)a1, a2, a3);
  return a1;
}

void sub_18D07E6D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *(void **)(v1 + 592);
  if (v4)
  {
    *(_QWORD *)(v1 + 600) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 591) < 0)
    operator delete(*v2);
  sub_18D077634((_QWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t cnlogging::ProtobufOutputStream::open(cnlogging::ProtobufOutputStream *this, const std::string *a2, _DWORD *a3)
{
  if (*((_QWORD *)this + 16))
    cnlogging::ProtobufOutputStream::close(this);
  if (*((char *)this + 591) < 0)
  {
    **((_BYTE **)this + 71) = 0;
    *((_QWORD *)this + 72) = 0;
  }
  else
  {
    *((_BYTE *)this + 568) = 0;
    *((_BYTE *)this + 591) = 0;
  }
  if (*a3 > 1u)
    return 0;
  std::ofstream::open();
  if ((*((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) & 5) != 0)
    return 0;
  std::string::operator=((std::string *)((char *)this + 568), a2);
  return 1;
}

void cnlogging::ProtobufOutputStream::~ProtobufOutputStream(void **this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  cnlogging::ProtobufOutputStream::close((cnlogging::ProtobufOutputStream *)this);
  v2 = this[74];
  if (v2)
  {
    this[75] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 591) < 0)
    operator delete(this[71]);
  v3 = MEMORY[0x1E0DE4F48];
  v4 = *MEMORY[0x1E0DE4F48];
  *this = (void *)*MEMORY[0x1E0DE4F48];
  *(void **)((char *)this + *(_QWORD *)(v4 - 24)) = *(void **)(v3 + 24);
  MEMORY[0x18D78B25C](this + 1);
  std::ostream::~ostream();
  MEMORY[0x18D78B550](this + 52);
}

void cnlogging::ProtobufOutputStream::close(cnlogging::ProtobufOutputStream *this)
{
  if (*((_QWORD *)this + 16) && !std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) | 4);
  if (*((char *)this + 591) < 0)
  {
    **((_BYTE **)this + 71) = 0;
    *((_QWORD *)this + 72) = 0;
  }
  else
  {
    *((_BYTE *)this + 568) = 0;
    *((_BYTE *)this + 591) = 0;
  }
}

uint64_t cnlogging::ProtobufOutputStream::append(cnlogging::ProtobufOutputStream *this, const wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  char v11;
  char v12;

  if (!*((_QWORD *)this + 16))
    return 0;
  result = cnlogging::ProtobufOutputStream::populateBytesToStuff(this, a2);
  if ((_DWORD)result)
  {
    result = cnlogging::ProtobufOutputStream::writeSentinelAndVersion(this);
    if ((_DWORD)result)
    {
      v4 = *((_QWORD *)this + 74);
      v5 = *((_QWORD *)this + 75);
      if (v4 == v5)
      {
        return 1;
      }
      else
      {
        v6 = 0;
        v7 = v4 + 1;
        do
        {
          v8 = *(unsigned __int8 *)(v7 - 1);
          if (v6 && (v8 & 0xFFFFFFDF) == 0x5D)
          {
            v11 = 93;
            sub_18D076A18(this, (uint64_t)&v11, 1);
          }
          v12 = v8;
          sub_18D076A18(this, (uint64_t)&v12, 1);
          v9 = *(_DWORD *)((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) & 5;
          result = v9 == 0;
          v6 = v8 == 126;
          if (v9)
            v10 = 1;
          else
            v10 = v7 == v5;
          ++v7;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t cnlogging::ProtobufOutputStream::populateBytesToStuff(cnlogging::ProtobufOutputStream *this, const wireless_diagnostics::google::protobuf::MessageLite *a2)
{
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  _BYTE v17[32];
  _BYTE v18[32];

  if (!(*(unsigned int (**)(const wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)a2 + 40))(a2)
    || (*(int (**)(const wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)a2 + 72))(a2) < 1)
  {
    return 0;
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(const wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)a2 + 72))(a2);
  v5 = v4;
  if (v4 >= 0x80)
    v6 = (int)wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  else
    v6 = 1;
  v8 = v6 + v5;
  v9 = (unint64_t *)((char *)this + 592);
  v10 = (void *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 75) = v10;
  if (v8 != -4)
  {
    sub_18D07F0AC(v9, v8 + 4);
    v10 = (void *)*v9;
  }
  wireless_diagnostics::google::protobuf::io::ArrayOutputStream::ArrayOutputStream((wireless_diagnostics::google::protobuf::io::ArrayOutputStream *)v18, v10);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream();
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
  v7 = MEMORY[0x18D78B088](a2, v17);
  if ((v7 & 1) != 0)
  {
    if (v5)
    {
      v11 = 0;
      v12 = v5;
      v13 = (unsigned __int8 *)(*v9 + v6);
      v14 = 1;
      do
      {
        v15 = *v13++;
        v14 = (v14 + v15) % 0xFFF1;
        v11 = (v14 + v11) % 0xFFF1;
        --v12;
      }
      while (v12);
    }
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17);
  }
  MEMORY[0x18D78AEFC](v17);
  MEMORY[0x18D78AEA8](v18);
  return v7;
}

void sub_18D07EB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  MEMORY[0x18D78AEFC](&a9);
  MEMORY[0x18D78AEA8](&a13);
  _Unwind_Resume(a1);
}

BOOL cnlogging::ProtobufOutputStream::writeSentinelAndVersion(cnlogging::ProtobufOutputStream *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char v5;
  char v6;
  char v7;

  if (!*((_QWORD *)this + 16))
    return 0;
  v5 = 126;
  v2 = sub_18D076A18(this, (uint64_t)&v5, 1);
  v6 = 125;
  v3 = sub_18D076A18(v2, (uint64_t)&v6, 1);
  v7 = 1;
  sub_18D076A18(v3, (uint64_t)&v7, 1);
  return (*((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) & 5) == 0;
}

uint64_t cnlogging::ProtobufOutputStream::flush(cnlogging::ProtobufOutputStream *this)
{
  if (!*((_QWORD *)this + 16))
    return 0;
  std::ostream::flush();
  if ((*((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) & 5) != 0)
  {
    cnlogging::ProtobufOutputStream::close(this);
    return 0;
  }
  return 1;
}

uint64_t cnlogging::ProtobufOutputStream::writeToVector(unsigned __int8 **this, const wireless_diagnostics::google::protobuf::MessageLite *a2, unint64_t *a3, int a4)
{
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  char v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  _BYTE *v27;
  char v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  char *v37;
  _BYTE *v38;
  char v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  BOOL v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  unint64_t v51;
  char *v52;
  _BYTE *v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  char *v62;
  _BYTE *v63;
  char v64;
  unsigned int v66;

  if (!a4)
    a3[1] = *a3;
  v66 = cnlogging::ProtobufOutputStream::populateBytesToStuff((cnlogging::ProtobufOutputStream *)this, a2);
  if (!v66)
    return v66;
  v7 = (_BYTE *)a3[1];
  v6 = a3[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = *a3;
    v10 = &v7[-*a3];
    v11 = (unint64_t)(v10 + 1);
    if ((uint64_t)(v10 + 1) < 0)
      goto LABEL_101;
    v12 = v6 - v9;
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (unint64_t)operator new(v13);
    else
      v14 = 0;
    v15 = (char *)(v14 + v13);
    v10[v14] = 126;
    v8 = &v10[v14 + 1];
    if (v7 == (_BYTE *)v9)
    {
      v14 += (unint64_t)v10;
    }
    else
    {
      v16 = &v7[~v9];
      do
      {
        v17 = *--v7;
        (v16--)[v14] = v17;
      }
      while (v7 != (_BYTE *)v9);
      v7 = (_BYTE *)*a3;
    }
    *a3 = v14;
    a3[1] = (unint64_t)v8;
    a3[2] = (unint64_t)v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = 126;
    v8 = v7 + 1;
  }
  a3[1] = (unint64_t)v8;
  v18 = a3[2];
  if ((unint64_t)v8 < v18)
  {
    *v8 = 125;
    v19 = v8 + 1;
    goto LABEL_40;
  }
  v20 = *a3;
  v21 = &v8[-*a3];
  v22 = (unint64_t)(v21 + 1);
  if ((uint64_t)(v21 + 1) < 0)
    goto LABEL_101;
  v23 = v18 - v20;
  if (2 * v23 > v22)
    v22 = 2 * v23;
  if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
    v24 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v24 = v22;
  if (v24)
    v25 = (unint64_t)operator new(v24);
  else
    v25 = 0;
  v26 = (char *)(v25 + v24);
  v21[v25] = 125;
  v19 = &v21[v25 + 1];
  if (v8 == (_BYTE *)v20)
  {
    *a3 = (unint64_t)&v21[v25];
    a3[1] = (unint64_t)v19;
    a3[2] = (unint64_t)v26;
LABEL_39:
    operator delete(v8);
    goto LABEL_40;
  }
  v27 = &v8[~v20];
  do
  {
    v28 = *--v8;
    (v27--)[v25] = v28;
  }
  while (v8 != (_BYTE *)v20);
  v8 = (_BYTE *)*a3;
  *a3 = v25;
  a3[1] = (unint64_t)v19;
  a3[2] = (unint64_t)v26;
  if (v8)
    goto LABEL_39;
LABEL_40:
  a3[1] = (unint64_t)v19;
  v29 = a3[2];
  if ((unint64_t)v19 < v29)
  {
    *v19 = 1;
    v30 = v19 + 1;
    goto LABEL_58;
  }
  v31 = *a3;
  v32 = &v19[-*a3];
  v33 = (unint64_t)(v32 + 1);
  if ((uint64_t)(v32 + 1) < 0)
LABEL_101:
    sub_18D07AFE4();
  v34 = v29 - v31;
  if (2 * v34 > v33)
    v33 = 2 * v34;
  if (v34 >= 0x3FFFFFFFFFFFFFFFLL)
    v35 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v35 = v33;
  if (v35)
    v36 = (unint64_t)operator new(v35);
  else
    v36 = 0;
  v37 = (char *)(v36 + v35);
  v32[v36] = 1;
  v30 = &v32[v36 + 1];
  if (v19 == (_BYTE *)v31)
  {
    *a3 = (unint64_t)&v32[v36];
    a3[1] = (unint64_t)v30;
    a3[2] = (unint64_t)v37;
LABEL_57:
    operator delete(v19);
    goto LABEL_58;
  }
  v38 = &v19[~v31];
  do
  {
    v39 = *--v19;
    (v38--)[v36] = v39;
  }
  while (v19 != (_BYTE *)v31);
  v19 = (_BYTE *)*a3;
  *a3 = v36;
  a3[1] = (unint64_t)v30;
  a3[2] = (unint64_t)v37;
  if (v19)
    goto LABEL_57;
LABEL_58:
  a3[1] = (unint64_t)v30;
  v40 = this[74];
  v41 = this[75];
  if (v40 != v41)
  {
    v42 = 0;
    while (1)
    {
      v43 = *v40;
      v44 = a3[2];
      if (v42 && (v43 & 0xFFFFFFDF) == 0x5D)
        break;
LABEL_81:
      if ((unint64_t)v30 >= v44)
      {
        v56 = *a3;
        v57 = &v30[-*a3];
        v58 = (unint64_t)(v57 + 1);
        if ((uint64_t)(v57 + 1) < 0)
          goto LABEL_101;
        v59 = v44 - v56;
        if (2 * v59 > v58)
          v58 = 2 * v59;
        if (v59 >= 0x3FFFFFFFFFFFFFFFLL)
          v60 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v60 = v58;
        if (v60)
          v61 = (unint64_t)operator new(v60);
        else
          v61 = 0;
        v62 = (char *)(v61 + v60);
        v57[v61] = v43;
        v55 = (uint64_t)&v57[v61 + 1];
        if (v30 == (_BYTE *)v56)
        {
          *a3 = (unint64_t)&v57[v61];
          a3[1] = v55;
          a3[2] = (unint64_t)v62;
        }
        else
        {
          v63 = &v30[~v56];
          do
          {
            v64 = *--v30;
            (v63--)[v61] = v64;
          }
          while (v30 != (_BYTE *)v56);
          v30 = (_BYTE *)*a3;
          *a3 = v61;
          a3[1] = v55;
          a3[2] = (unint64_t)v62;
          if (!v30)
            goto LABEL_99;
        }
        operator delete(v30);
      }
      else
      {
        *v30 = v43;
        v55 = (uint64_t)(v30 + 1);
      }
LABEL_99:
      a3[1] = v55;
      v42 = v43 == 126;
      ++v40;
      v30 = (_BYTE *)v55;
      if (v40 == v41)
        return v66;
    }
    if ((unint64_t)v30 >= v44)
    {
      v46 = *a3;
      v47 = &v30[-*a3];
      v48 = (unint64_t)(v47 + 1);
      if ((uint64_t)(v47 + 1) < 0)
        goto LABEL_101;
      v49 = v44 - v46;
      if (2 * v49 > v48)
        v48 = 2 * v49;
      if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
        v50 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
        v51 = (unint64_t)operator new(v50);
      else
        v51 = 0;
      v52 = (char *)(v51 + v50);
      v47[v51] = 93;
      v45 = (uint64_t)&v47[v51 + 1];
      if (v30 == (_BYTE *)v46)
      {
        *a3 = (unint64_t)&v47[v51];
        a3[1] = v45;
        a3[2] = (unint64_t)v52;
      }
      else
      {
        v53 = &v30[~v46];
        do
        {
          v54 = *--v30;
          (v53--)[v51] = v54;
        }
        while (v30 != (_BYTE *)v46);
        v30 = (_BYTE *)*a3;
        *a3 = v51;
        a3[1] = v45;
        a3[2] = (unint64_t)v52;
        if (!v30)
          goto LABEL_80;
      }
      operator delete(v30);
    }
    else
    {
      *v30 = 93;
      v45 = (uint64_t)(v30 + 1);
    }
LABEL_80:
    a3[1] = v45;
    v44 = a3[2];
    v30 = (_BYTE *)v45;
    goto LABEL_81;
  }
  return v66;
}

void sub_18D07F0AC(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_18D07AFE4();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t cnnavigation::GNSSElAz(uint64_t a1, __int128 *a2, uint64_t a3, int a4, _QWORD *a5, _QWORD *a6)
{
  __int16 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[96];

  v7 = 0;
  v8 = 0u;
  v9 = 0u;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  return cnnavigation::details::GNSSElAz(a1, (uint64_t)&v7, a2, a3, a4, a5, a6, 0, (uint64_t)v14);
}

uint64_t cnnavigation::GNSSElAz(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, int a5, _QWORD *a6, _QWORD *a7)
{
  _BYTE v8[96];

  return cnnavigation::details::GNSSElAz(a1, a2, a3, a4, a5, a6, a7, 0, (uint64_t)v8);
}

uint64_t cnnavigation::GNSSElAz(uint64_t a1, __int128 *a2, uint64_t a3, int a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  __int16 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v8 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  return cnnavigation::details::GNSSElAz(a1, (uint64_t)&v8, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t cnnavigation::GNSSElAz(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, int a5, _QWORD *a6, _QWORD *a7, uint64_t a8)
{
  return cnnavigation::details::GNSSElAz(a1, a2, a3, a4, a5, a6, a7, 1, a8);
}

uint64_t cnnavigation::details::GNSSElAz(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, int a5, _QWORD *a6, _QWORD *a7, int a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v13 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  do
  {
    if ((*(_QWORD *)((_BYTE *)a3 + v13) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return 0xFFFFFFFFLL;
    v13 += 8;
  }
  while (v13 != 24);
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, __int128 *, uint64_t *))(*(_QWORD *)a4 + 56))(a4, a1, a2, &v16, &v22, &v20);
  if (!(_DWORD)result)
  {
    v22 = v16;
    v23 = v17;
    v20 = 0;
    v21 = 0;
    result = cnnavigation::SatElAz((uint64_t)&v18, (uint64_t)&v22, a5, (uint64_t)&v20, a8, a9);
    if (!(_DWORD)result)
    {
      v15 = v21;
      *a6 = v20;
      *a7 = v15;
    }
  }
  return result;
}

uint64_t cnnavigation::ThinShellIonosphereModel::GetIonosphericDelay(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t cnnavigation::ThinShellIonosphereModel::GetIonosphericDelay(cnnavigation::ThinShellIonosphereModel *this, int a2, double a3, const double *a4, const double *a5, double a6, double *a7)
{
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a4;
  v12 = *((_QWORD *)a4 + 2);
  v9 = *(_OWORD *)a5;
  v10 = *((_QWORD *)a5 + 2);
  v8 = 0xBFF921FB54442D18;
  return cnnavigation::ThinShellIonosphereModel::GetIonosphericDelay((uint64_t)this, (uint64_t)&v11, &v9, a7, (double *)&v8, a6);
}

uint64_t cnnavigation::ThinShellIonosphereModel::GetIonosphericDelay(uint64_t a1, uint64_t a2, __int128 *a3, double *a4, double *a5, double a6)
{
  uint64_t v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned __int8 *v19;
  cnprint::CNPrinter *v20;
  uint64_t result;
  double v22;
  double v23;
  cnprint::CNPrinter *LogLevel;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  cnprint::CNPrinter *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  unsigned __int8 v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float64x2_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _WORD v50[36];
  float64x2_t v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 72);
  v41 = 1;
  v42 = v11;
  v43 = 0u;
  v44 = 0u;
  v12 = *(float64x2_t *)a2;
  v45 = 0u;
  v46 = v12;
  v47 = *(_QWORD *)(a2 + 16);
  v48 = *a3;
  v49 = *((_QWORD *)a3 + 2);
  if (cnnavigation::details::IonospherePiercePoint::ComputeIonospherePiercePointCoordinates((cnnavigation::details::IonospherePiercePoint *)&v41))
  {
    v50[0] = 5;
    LOBYTE(v53) = 4;
    v18 = "#iono,ThinShellIonosphereModel::GetIonosphericDelay,failed to calculate IPP coordinates";
    v19 = (unsigned __int8 *)&v53;
LABEL_6:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, v19, v18, v13, v14, v15, v16, v17, v38);
    return 0xFFFFFFFFLL;
  }
  v53 = 0.0;
  v54 = 0.0;
  v55 = 0;
  v51 = *(float64x2_t *)a2;
  v52 = *(_QWORD *)(a2 + 16);
  v20 = (cnprint::CNPrinter *)cnnavigation::ECEFToLLA(&v51, v41, &v53, 0, (uint64_t)v50);
  if ((_DWORD)v20)
  {
    v50[0] = 5;
    v40 = 4;
    v18 = "#iono,ThinShellIonosphereModel::GetIonosphericDelay,conversion of current receiver position from ECEF to LLA failed";
LABEL_5:
    v19 = &v40;
    goto LABEL_6;
  }
  v22 = *((double *)&v44 + 1) - v53;
  v23 = *(double *)&v45 - v54;
  LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v20);
  if (!(_DWORD)LogLevel)
  {
    v50[0] = 5;
    v40 = 0;
    v39 = v22 * 57.2957795;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v40, "#iono,delta_latitude_deg,%.3lf,delta_longitude_deg,%.3lf,elevation_at_rx,%.3lf,azimuth_at_rx,%.3lf", v25, v26, v27, v28, v29, SLOBYTE(v39));
  }
  if (1.57079633 - *(double *)&v43 < *a5)
  {
    if (cnprint::CNPrinter::GetLogLevel(LogLevel))
      return 0xFFFFFFFFLL;
    v50[0] = 5;
    v40 = 0;
    v18 = "#iono,ThinShellIonosphereModel::GetIonosphericDelay,satellite elevation below threshold, not computing delay";
    goto LABEL_5;
  }
  if (*((double *)&v43 + 1) >= 1.57079633 || *((double *)&v43 + 1) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(LogLevel) > 1)
      return 0xFFFFFFFFLL;
    v50[0] = 5;
    v40 = 1;
    v18 = "#iono,WARNING: ThinShellIonosphereModel::GetIonosphericDelay,cannot proceed,sv_zenith_angle_at_ipp_rad is invalid";
    goto LABEL_5;
  }
  v30 = *(double *)(a1 + 80)
      + *(double *)(a1 + 88) * v22
      + *(double *)(a1 + 96) * v23
      + v22 * (*(double *)(a1 + 104) * 0.5) * v22
      + v22 * *(double *)(a1 + 112) * v23
      + v23 * (*(double *)(a1 + 120) * 0.5) * v23;
  v31 = 1.0 / cos(*((long double *)&v43 + 1));
  if (!cnprint::CNPrinter::GetLogLevel(v32))
  {
    v50[0] = 5;
    v40 = 0;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v40, "#iono,vtec_to_stec_mapping_function,%.3lf", v33, v34, v35, v36, v37, SLOBYTE(v31));
  }
  result = 0;
  *a4 = v30 * v31 * 1.0e16 * 40.308193 / (a6 * a6) / 299792458.0;
  return result;
}

__n128 cnnavigation::ThinShellIonosphereModel::UpdateParameters(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[1];
  *(_OWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 104) = a2[6];
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 168) = a2[10];
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  *(__n128 *)(a1 + 120) = result;
  return result;
}

uint64_t cnnavigation::ThinShellIonosphereModel::IsValid(cnnavigation::ThinShellIonosphereModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  v11 = 5;
  v10 = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "#iono,ThinShellIonosphereModel::IsValid,check for validity failed, requires time of interest", a4, a5, a6, a7, a8, v9);
  return 0;
}

BOOL cnnavigation::ThinShellIonosphereModel::IsValid(cnnavigation::ThinShellIonosphereModel *this, const cnnavigation::TAITime *a2, int8x16_t a3, int8x16_t a4)
{
  double v5;
  double v6;
  int8x16_t v7;
  int8x16_t v8;
  double v10[2];
  double v11[2];

  if (!*((_BYTE *)this + 8) || !*((_BYTE *)this + 9))
    return 0;
  v5 = COERCE_DOUBLE(CNTimeSpan::operator-((uint64_t)a2, (_QWORD *)this + 7, a3, a4));
  v11[0] = v5;
  v11[1] = v6;
  if ((*(_QWORD *)&v5 & 0x8000000000000000) != 0 || (*(double *)v7.i64 = v6, v6 < 0.0))
    v5 = COERCE_DOUBLE(CNTimeSpan::operator-(v11, v7, v8));
  v10[0] = v5;
  v10[1] = v6;
  return sub_18D05B574(v10, (double *)this + 23);
}

_QWORD *sub_18D07F85C(_QWORD *result)
{
  *result = &unk_1E25B9450;
  return result;
}

void sub_18D07F870(_QWORD *a1)
{
  *a1 = &unk_1E25B9450;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::GLONASSTimeToJulianTime(uint64_t a1, uint64_t a2)
{
  int v2;
  double v3;
  uint64_t result;
  double v5;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 < 1)
    return 0xFFFFFFFFLL;
  v3 = *(double *)(a1 + 8);
  result = 0xFFFFFFFFLL;
  if (v3 >= 0.0 && v3 < 86401.0)
  {
    result = 0;
    v5 = (v3 + 0.0) / 86400.0 + 0.375;
    *(_DWORD *)a2 = v2 + 2450082 + vcvtmd_s64_f64(v5);
    *(double *)(a2 + 8) = v5 - floor(v5);
  }
  return result;
}

uint64_t cnnavigation::GLONASSTimeToJulianTime(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  double v4;
  uint64_t result;
  double v6;

  v3 = *(_DWORD *)a1;
  if (*(int *)a1 < 1)
    return 0xFFFFFFFFLL;
  v4 = *(double *)(a1 + 8);
  result = 0xFFFFFFFFLL;
  if (v4 >= 0.0 && v4 < 86401.0)
  {
    result = 0;
    v6 = (v4 + a3) / 86400.0 + 0.375;
    *(_DWORD *)a2 = v3 + 2450082 + vcvtmd_s64_f64(v6);
    *(double *)(a2 + 8) = v6 - floor(v6);
  }
  return result;
}

uint64_t cnnavigation::JulianTimeToGLONASSTime(uint64_t a1, uint64_t a2)
{
  double v2;
  signed int v3;
  uint64_t result;

  v2 = *(double *)(a1 + 8) + -0.375;
  v3 = *(_DWORD *)a1 - 2450083 + vcvtmd_s64_f64(v2);
  if (v3 < 0)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_DWORD *)a2 = v3 + 1;
  *(double *)(a2 + 8) = (v2 - floor(v2)) * 86400.0;
  return result;
}

uint64_t cnnavigation::JulianTimeToGLONASSTime(uint64_t a1, uint64_t a2, double a3)
{
  double v3;
  signed int v4;
  uint64_t result;

  v3 = *(double *)(a1 + 8) + -0.375 + a3 / -86400.0;
  v4 = *(_DWORD *)a1 - 2450083 + vcvtmd_s64_f64(v3);
  if (v4 < 0)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_DWORD *)a2 = v4 + 1;
  *(double *)(a2 + 8) = (v3 - floor(v3)) * 86400.0;
  return result;
}

uint64_t cnnavigation::GLONASSSatelliteClockOffset(int a1, uint64_t a2, double *a3, double a4, double a5, double a6)
{
  uint64_t v7;

  return cnnavigation::GLONASSSatelliteClockOffset(a1, a2, a3, 0, (uint64_t)&v7, a4, a5, a6);
}

uint64_t cnnavigation::GLONASSSatelliteClockOffset(int a1, uint64_t a2, double *a3, int a4, uint64_t a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  uint64_t result;
  double v12;
  double v13;

  if (!*(_BYTE *)(a2 + 16))
    return 0xFFFFFFFFLL;
  if (a8 <= 0.0)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&a8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v8 = *(double *)(a2 + 112);
  v9 = fabs(a8 + -1602000000.0);
  v10 = fabs(a8 + -1246000000.0);
  if (v9 > 7875000.0 && v10 > 6125000.0)
    return 0xFFFFFFFFLL;
  v12 = *(double *)(a2 + 120)
      - v8 * (a6 - *(double *)(a2 + 24) + (double)(a1 - *(_DWORD *)(a2 + 20)) * 86400.0 + a7 - *(double *)(a2 + 32));
  v13 = 0.0;
  if (v9 >= v10)
    v13 = *(double *)(a2 + 128);
  *a3 = -(v13 + v12);
  result = 0;
  if (a4)
  {
    *(double *)a5 = v8;
    *(_QWORD *)(a5 + 8) = 0;
  }
  return result;
}

uint64_t cnnavigation::GLONASSSatelliteClockOffset(int a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7)
{
  return cnnavigation::GLONASSSatelliteClockOffset(a1, a2, a3, 1, a4, a5, a6, a7);
}

uint64_t cnnavigation::GLONASSSatelliteClockOffsetRate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (!*(_BYTE *)(a2 + 16))
    return 0xFFFFFFFFLL;
  result = 0;
  *a3 = *(_QWORD *)(a2 + 112);
  return result;
}

uint64_t cnnavigation::GLONASSSatelliteClockOffsetRate(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, _OWORD *a5)
{
  uint64_t result;

  if (!*(_BYTE *)(a2 + 16))
    return 0xFFFFFFFFLL;
  *a3 = *(_QWORD *)(a2 + 112);
  result = 0;
  if (a4)
    *a5 = xmmword_18D30B3F0;
  return result;
}

uint64_t cnnavigation::GLONASSSatelliteClockOffsetRate(uint64_t a1, uint64_t a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t result;

  if (!*(_BYTE *)(a2 + 16))
    return 0xFFFFFFFFLL;
  result = 0;
  *a3 = *(_QWORD *)(a2 + 112);
  *a4 = xmmword_18D30B3F0;
  return result;
}

uint64_t cnnavigation::GLONASSDopplerShift(int a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, double a8, double a9, double a10, double a11, double a12)
{
  _BYTE v13[80];

  return cnnavigation::GLONASSDopplerShift(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, a11, a12, (uint64_t)v13);
}

uint64_t cnnavigation::GLONASSDopplerShift(int a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, int a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14)
{
  double v24;
  uint64_t result;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v43;
  double v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51[2];
  float64x2_t v52;
  double v53;

  v24 = a9 - a12;
  v50 = 0;
  if (a8)
  {
    result = cnnavigation::GLONASSTimeOfFlight(a1, a2, a4, a5, a6, (double *)&v50, 1, v51, a9 - a12, a10, a11);
    if ((_DWORD)result)
      return result;
    v49 = 0.0;
    result = cnnavigation::GLONASSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, &v49, 1, v24, a10, a11, &v43);
  }
  else
  {
    result = cnnavigation::GLONASSTimeOfFlight(a1, a2, a4, a5, a6, (double *)&v50, 0, v51, a9 - a12, a10, a11);
    if ((_DWORD)result)
      return result;
    v49 = 0.0;
    result = cnnavigation::GLONASSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, &v49, 0, v24, a10, a11, v51);
  }
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a4 + 16))
    {
      v26 = v49;
      v27 = *(double *)(a4 + 112);
      v28 = 1.0 - a13 - v49;
      v29 = a13 + v49 * (1.0 - a13);
      v30 = 1.0 - v28 * v27;
      v31 = v28 * v27 - v29 / v30;
      *a7 = v31 * a11;
      result = 0;
      if (a8)
      {
        v32 = 1.0 - v29 / (v30 * v30);
        v33 = (v26 + -1.0) / v30;
        v34 = (a13 + -1.0) / v30;
        v35 = v28 * ((1.0 - v51[0]) * -0.0) - v27 * v43;
        v36 = v46;
        v37 = v28 * (v53 * 0.0) - v27 * v46;
        v38 = v48;
        v39 = -(v27 * v48);
        v40 = v34 * v43;
        v41 = v31 + a11 * (v34 * v44 + v32 * (v28 * (v51[1] * 0.0 + 0.0) - v27 * v44));
        *(double *)a14 = (v34 * v43 + v32 * v35) * a11;
        *(double *)(a14 + 8) = v41;
        *(float64x2_t *)(a14 + 16) = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v45, v34), vmlsq_lane_f64(vmulq_n_f64(vmulq_f64(v52, (float64x2_t)0), v28), v45, v27, 0), v32), a11);
        *(double *)(a14 + 32) = (v34 * v36 + v32 * v37) * a11;
        *(float64x2_t *)(a14 + 40) = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v47, v34), vmulq_n_f64(v47, -v27), v32), a11);
        *(double *)(a14 + 56) = (v34 * v38 + v32 * v39) * a11;
        *(double *)(a14 + 64) = (v32 * -v35 - v40) * a11;
        *(double *)(a14 + 72) = (v33 - v32 * v27) * a11;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t cnnavigation::GLONASSDopplerShift(int a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13)
{
  return cnnavigation::GLONASSDopplerShift(a1, a2, a3, a4, a5, a6, a7, 1, a9, a10, a11, a12, a13, a8);
}

__n128 cnnavigation::TAITime::TAITime(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 cnnavigation::TAITime::TAITime(__n128 *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *this = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *this = *a2;
  return result;
}

cnnavigation::TAITime *cnnavigation::TAITime::TAITime(cnnavigation::TAITime *this, const cnnavigation::BeiDouTime *a2, const cnnavigation::GNSSUTCParameters *a3)
{
  _BOOL4 IsValid;
  int8x16_t v7;
  int8x16_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  double v16;
  __int128 v18;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
  v9 = *(_DWORD *)a2;
  if (IsValid && *((_BYTE *)a3 + 1) == 4)
  {
    v10 = *((double *)a2 + 1);
    v18 = 0uLL;
    *(double *)v7.i64 = v10;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v18, 604800 * v9, v7, v8);
    v11 = *((double *)a3 + 1);
    v12 = *((double *)a3 + 2);
    v15 = CNTimeSpan::operator-((uint64_t)&v18, (_QWORD *)a3 + 3, v13, v14);
    *(double *)v7.i64 = v11 + v12 * (v16 + (double)v15);
  }
  else
  {
    v10 = *((double *)a2 + 1);
    v7.i64[0] = 0;
  }
  v8.i64[0] = 0xC12122FDA1CAC083;
  *(double *)v7.i64 = v10 - *(double *)v7.i64 + -561534.816;
  v18 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v18, 604800 * (v9 + 314), v7, v8);
  *(_OWORD *)this = v18;
  return this;
}

cnnavigation::TAITime *cnnavigation::TAITime::TAITime(cnnavigation::TAITime *this, const cnnavigation::BeiDouTime *a2)
{
  _OWORD v3[4];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  return cnnavigation::TAITime::TAITime(this, a2, (const cnnavigation::GNSSUTCParameters *)v3);
}

{
  _OWORD v3[4];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  return cnnavigation::TAITime::TAITime(this, a2, (const cnnavigation::GNSSUTCParameters *)v3);
}

_QWORD *cnnavigation::TAITime::TAITime(_QWORD *a1, double *a2)
{
  _OWORD v3[4];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  return cnnavigation::TAITime::TAITime(a1, a2, (cnnavigation::GNSSUTCParameters *)v3);
}

{
  _OWORD v3[4];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  return cnnavigation::TAITime::TAITime(a1, a2, (cnnavigation::GNSSUTCParameters *)v3);
}

cnnavigation::TAITime *cnnavigation::TAITime::TAITime(cnnavigation::TAITime *this, const cnnavigation::NavicTime *a2, const cnnavigation::GNSSUTCParameters *a3)
{
  _BOOL4 IsValid;
  int8x16_t v7;
  int8x16_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  double v16;
  __int128 v18;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
  v9 = *(_DWORD *)a2;
  if (IsValid && *((_BYTE *)a3 + 1) == 6)
  {
    v10 = *((double *)a2 + 1);
    v18 = 0uLL;
    *(double *)v7.i64 = v10;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v18, 604800 * v9, v7, v8);
    v11 = *((double *)a3 + 1);
    v12 = *((double *)a3 + 2);
    v15 = CNTimeSpan::operator-((uint64_t)&v18, (_QWORD *)a3 + 3, v13, v14);
    *(double *)v7.i64 = v11 + v12 * (v16 + (double)v15);
  }
  else
  {
    v10 = *((double *)a2 + 1);
    v7.i64[0] = 0;
  }
  v8.i64[0] = 0xC1212319A1CAC083;
  *(double *)v7.i64 = v10 - *(double *)v7.i64 + -561548.816;
  v18 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v18, 604800 * (v9 - 18), v7, v8);
  *(_OWORD *)this = v18;
  return this;
}

cnnavigation::TAITime *cnnavigation::TAITime::TAITime(cnnavigation::TAITime *this, const cnnavigation::NavicTime *a2)
{
  _OWORD v3[4];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  return cnnavigation::TAITime::TAITime(this, a2, (const cnnavigation::GNSSUTCParameters *)v3);
}

{
  _OWORD v3[4];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  return cnnavigation::TAITime::TAITime(this, a2, (const cnnavigation::GNSSUTCParameters *)v3);
}

_QWORD *cnnavigation::TAITime::TAITime(_QWORD *a1, int *a2, cnnavigation::GNSSUTCParameters *this)
{
  int8x16_t v6;
  int8x16_t v7;
  int v8;
  double v9;
  _BOOL4 v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int8x16_t v17;
  double v18;
  int8x16_t v19;
  __int128 v21;
  uint64_t v22[2];

  *a1 = 0;
  a1[1] = 0;
  if (cnnavigation::GNSSUTCParameters::IsValid(this) && *((_BYTE *)this + 1) == 2)
  {
    v8 = *a2;
    v6.i64[0] = *((_QWORD *)a2 + 1);
    v7.i64[0] = 0xC0EA55FA1CAC0831;
    v9 = *(double *)v6.i64 + -53935.816;
    v22[0] = 0;
    v22[1] = 0;
    CNTimeSpan::SetTimeSpan(v22, 86400 * v8 - 86400, v6, v7);
    v10 = sub_18D03F608((double *)v22, (double *)this + 6);
    v13 = 40;
    if (v10)
      v13 = 64;
    v14 = *(int *)((char *)this + v13);
    v15 = *((double *)this + 1);
    v16 = *((double *)this + 2);
    *(double *)v17.i64 = (double)CNTimeSpan::operator-((uint64_t)v22, (_QWORD *)this + 3, v11, v12);
    *(double *)v19.i64 = v9 - (v15 + v16 * (v18 + *(double *)v17.i64));
    v21 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v21, 86400 * v8 - 126316800 + v14 - 3, v19, v17);
    *(_OWORD *)a1 = v21;
  }
  else
  {
    a1[1] = 0x7FF8000000000000;
  }
  return a1;
}

_QWORD *cnnavigation::TAITime::TAITime(_QWORD *a1, double *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v5;
  __int128 v7;

  *a1 = 0;
  a1[1] = 0;
  v5 = 604800 * (*(int *)a2 - 1042);
  a4.i64[0] = 0xC1212319A1CAC083;
  *(double *)a3.i64 = a2[1] + -561548.816;
  v7 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v7, v5, a3, a4);
  *(_OWORD *)a1 = v7;
  return a1;
}

{
  uint64_t v5;
  __int128 v7;

  *a1 = 0;
  a1[1] = 0;
  v5 = 604800 * (*(int *)a2 - 1042);
  a4.i64[0] = 0xC1212319A1CAC083;
  *(double *)a3.i64 = a2[1] + -561548.816;
  v7 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v7, v5, a3, a4);
  *(_OWORD *)a1 = v7;
  return a1;
}

__n128 cnnavigation::TAITime::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t cnnavigation::TAITime::ToBeiDouTime(cnnavigation::TAITime *this, const cnnavigation::GNSSUTCParameters *a2)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  unsigned int v7;
  int8x16_t v8;
  int8x16_t v9;
  double v10;
  double v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17[2];

  v3 = *(_QWORD *)this / 604800;
  v4 = *((double *)this + 1) + (double)(*(_QWORD *)this - 604800 * (int)v3) + 561534.816;
  v5 = vcvtmd_s64_f64(v4 / 604800.0);
  v6 = v4 - (double)v5 * 604800.0;
  v7 = v3 + v5 - 314;
  if (cnnavigation::GNSSUTCParameters::IsValid(a2) && *((_BYTE *)a2 + 1) == 4)
  {
    v17[0] = 0;
    v17[1] = 0;
    *(double *)v8.i64 = v6;
    CNTimeSpan::SetTimeSpan(v17, 604800 * (int)v7, v8, v9);
    v10 = *((double *)a2 + 1);
    v11 = *((double *)a2 + 2);
    v14 = CNTimeSpan::operator-((uint64_t)v17, (_QWORD *)a2 + 3, v12, v13);
    v7 += vcvtmd_s64_f64((v6 + v10 + v11 * (v15 + (double)v14)) / 604800.0);
  }
  return v7;
}

uint64_t cnnavigation::TAITime::ToBeiDouTime(cnnavigation::TAITime *this)
{
  __int16 v2;
  __int128 v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = 0;
  v3 = 0u;
  v4 = 0u;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  return cnnavigation::TAITime::ToBeiDouTime(this, (const cnnavigation::GNSSUTCParameters *)&v2);
}

uint64_t cnnavigation::TAITime::ToGalileoTime(cnnavigation::TAITime *this, const cnnavigation::GNSSUTCParameters *a2)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  unsigned int v7;
  int8x16_t v8;
  int8x16_t v9;
  double v10;
  double v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17[2];

  v3 = *(_QWORD *)this / 604800;
  v4 = *((double *)this + 1) + (double)(*(_QWORD *)this - 604800 * (int)v3) + 561548.816;
  v5 = vcvtmd_s64_f64(v4 / 604800.0);
  v6 = v4 - (double)v5 * 604800.0;
  v7 = v3 + v5 + 18;
  if (cnnavigation::GNSSUTCParameters::IsValid(a2) && *((_BYTE *)a2 + 1) == 3)
  {
    v17[0] = 0;
    v17[1] = 0;
    *(double *)v8.i64 = v6;
    CNTimeSpan::SetTimeSpan(v17, 604800 * (int)v7, v8, v9);
    v10 = *((double *)a2 + 1);
    v11 = *((double *)a2 + 2);
    v14 = CNTimeSpan::operator-((uint64_t)v17, (_QWORD *)a2 + 3, v12, v13);
    v7 += vcvtmd_s64_f64((v6 + v10 + v11 * (v15 + (double)v14)) / 604800.0);
  }
  return v7;
}

uint64_t cnnavigation::TAITime::ToGalileoTime(cnnavigation::TAITime *this)
{
  __int16 v2;
  __int128 v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = 0;
  v3 = 0u;
  v4 = 0u;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  return cnnavigation::TAITime::ToGalileoTime(this, (const cnnavigation::GNSSUTCParameters *)&v2);
}

uint64_t cnnavigation::TAITime::ToNavicTime(cnnavigation::TAITime *this, const cnnavigation::GNSSUTCParameters *a2)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  unsigned int v7;
  int8x16_t v8;
  int8x16_t v9;
  double v10;
  double v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17[2];

  v3 = *(_QWORD *)this / 604800;
  v4 = *((double *)this + 1) + (double)(*(_QWORD *)this - 604800 * (int)v3) + 561548.816;
  v5 = vcvtmd_s64_f64(v4 / 604800.0);
  v6 = v4 - (double)v5 * 604800.0;
  v7 = v3 + v5 + 18;
  if (cnnavigation::GNSSUTCParameters::IsValid(a2) && *((_BYTE *)a2 + 1) == 6)
  {
    v17[0] = 0;
    v17[1] = 0;
    *(double *)v8.i64 = v6;
    CNTimeSpan::SetTimeSpan(v17, 604800 * (int)v7, v8, v9);
    v10 = *((double *)a2 + 1);
    v11 = *((double *)a2 + 2);
    v14 = CNTimeSpan::operator-((uint64_t)v17, (_QWORD *)a2 + 3, v12, v13);
    v7 += vcvtmd_s64_f64((v6 + v10 + v11 * (v15 + (double)v14)) / 604800.0);
  }
  return v7;
}

uint64_t cnnavigation::TAITime::ToNavicTime(cnnavigation::TAITime *this)
{
  __int16 v2;
  __int128 v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = 0;
  v3 = 0u;
  v4 = 0u;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  return cnnavigation::TAITime::ToNavicTime(this, (const cnnavigation::GNSSUTCParameters *)&v2);
}

uint64_t cnnavigation::TAITime::ToGLONASSTime(uint64_t a1, cnnavigation::GNSSUTCParameters *this, uint64_t a3)
{
  _BOOL4 IsValid;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  int8x16_t v14;
  int8x16_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  *(_DWORD *)a3 = 0x80000000;
  *(_QWORD *)(a3 + 8) = 0x7FF8000000000000;
  IsValid = cnnavigation::GNSSUTCParameters::IsValid(this);
  result = 0xFFFFFFFFLL;
  if (IsValid && *((_BYTE *)this + 1) == 2)
  {
    v10 = (int)*(_QWORD *)a1 / 86400;
    *(double *)v7.i64 = *(double *)(a1 + 8)
                      + (double)(*(_QWORD *)a1 - 86400 * v10)
                      + 53935.816
                      - (double)(*((_DWORD *)this + 10) - 3);
    v11 = vcvtmd_s64_f64(*(double *)v7.i64 / 86400.0);
    v12 = v11 + v10;
    *(double *)v8.i64 = (double)v11;
    *(double *)v7.i64 = *(double *)v7.i64 - (double)v11 * 86400.0;
    *(_DWORD *)a3 = v12 + 1462;
    *(_QWORD *)(a3 + 8) = v7.i64[0];
    v25 = 0;
    v26 = 0;
    CNTimeSpan::SetTimeSpan(&v25, 86400 * (v12 + 1461), v7, v8);
    v13 = sub_18D03F608((double *)&v25, (double *)this + 6);
    v16 = *(double *)(a3 + 8);
    if (v13)
    {
      v17 = *((int *)this + 16) - (uint64_t)*((int *)this + 10);
      *(double *)v14.i64 = (double)(int)v17;
      v16 = v16 - (double)(int)v17;
      *(double *)(a3 + 8) = v16;
      v24[0] = v17;
      v24[1] = 0;
      v25 = CNTimeSpan::operator+((uint64_t)&v25, v24, v14, v15);
      v26 = v18;
    }
    v19 = *((double *)this + 1);
    v20 = *((double *)this + 2);
    v21 = CNTimeSpan::operator-((uint64_t)&v25, (_QWORD *)this + 3, v14, v15);
    result = 0;
    v23 = v16 + v19 + v20 * (v22 + (double)v21);
    LODWORD(v21) = vcvtmd_s64_f64(v23 / 86400.0);
    *(_DWORD *)a3 += v21;
    *(double *)(a3 + 8) = v23 - (double)(int)v21 * 86400.0;
  }
  return result;
}

uint64_t cnnavigation::TAITime::ToGPSTime(cnnavigation::TAITime *this, const cnnavigation::GNSSUTCParameters *a2)
{
  uint64_t v3;
  double v4;
  int v5;
  double v6;
  unsigned int v7;
  int8x16_t v8;
  int8x16_t v9;
  double v10;
  double v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17[2];

  v3 = *(_QWORD *)this / 604800;
  v4 = *((double *)this + 1) + (double)(*(_QWORD *)this - 604800 * (int)v3) + 561548.816;
  v5 = vcvtmd_s64_f64(v4 / 604800.0);
  v6 = v4 - (double)v5 * 604800.0;
  v7 = v3 + v5 + 1042;
  if (cnnavigation::GNSSUTCParameters::IsValid(a2) && *((_BYTE *)a2 + 1) == 1)
  {
    v17[0] = 0;
    v17[1] = 0;
    *(double *)v8.i64 = v6;
    CNTimeSpan::SetTimeSpan(v17, 604800 * (int)v7, v8, v9);
    v10 = *((double *)a2 + 1);
    v11 = *((double *)a2 + 2);
    v14 = CNTimeSpan::operator-((uint64_t)v17, (_QWORD *)a2 + 3, v12, v13);
    v7 += vcvtmd_s64_f64((v6 + v10 + v11 * (v15 + (double)v14)) / 604800.0);
  }
  return v7;
}

uint64_t cnnavigation::TAITime::ToGPSTime(cnnavigation::TAITime *this)
{
  __int16 v2;
  __int128 v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = 0;
  v3 = 0u;
  v4 = 0u;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  return cnnavigation::TAITime::ToGPSTime(this, (const cnnavigation::GNSSUTCParameters *)&v2);
}

uint64_t cnnavigation::TAITime::ToJulianTime(cnnavigation::TAITime *a1, cnnavigation::GNSSUTCParameters *this, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  double v10;
  _BOOL4 v11;
  uint64_t v12;
  double v13;
  double v14;
  int8x16_t v15;
  int8x16_t v16;
  _BOOL4 v17;
  uint64_t v18;
  double v19;
  int8x16_t v20;
  int8x16_t v21;
  _BOOL4 v22;
  uint64_t v23;
  double v24;
  int8x16_t v25;
  int8x16_t v26;
  _BOOL4 v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  _BYTE v33[24];
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  if (!cnnavigation::GNSSUTCParameters::IsValid(this))
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  switch(*((_BYTE *)this + 1))
  {
    case 1:
      *(_WORD *)v33 = 0;
      *(_OWORD *)&v33[8] = 0u;
      v34 = 0u;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      *(_QWORD *)v33 = cnnavigation::TAITime::ToGPSTime(a1, (const cnnavigation::GNSSUTCParameters *)v33);
      *(_QWORD *)&v33[8] = v7;
      v31 = sub_18D080EA8((int *)v33, v8, v9);
      v32 = v10;
      v11 = sub_18D03FE4C((double *)&v31, (double *)this + 6);
      v12 = 64;
      if (v11)
        v12 = 40;
      if (cnnavigation::GPSTimeToJulianTime((double *)v33, *(_DWORD *)((char *)this + v12), a3))
        return 0xFFFFFFFFLL;
      goto LABEL_23;
    case 2:
      *(_DWORD *)v33 = 1;
      *(_QWORD *)&v33[8] = 0;
      if (cnnavigation::TAITime::ToGLONASSTime((uint64_t)a1, this, (uint64_t)v33)
        || *(int *)v33 < 1
        || *(double *)&v33[8] < 0.0
        || *(double *)&v33[8] >= 86401.0)
      {
        return 0xFFFFFFFFLL;
      }
      v13 = (*(double *)&v33[8] + 0.0) / 86400.0 + 0.375;
      *(_DWORD *)a3 = *(_DWORD *)v33 + 2450082 + vcvtmd_s64_f64(v13);
      *(double *)(a3 + 8) = v13 - floor(v13);
      goto LABEL_23;
    case 3:
      *(_WORD *)v33 = 0;
      *(_OWORD *)&v33[8] = 0u;
      v34 = 0u;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v31 = cnnavigation::TAITime::ToGalileoTime(a1, (const cnnavigation::GNSSUTCParameters *)v33);
      v32 = v14;
      *(double *)v15.i64 = (double)(uint64_t)floor(v14);
      *(double *)v16.i64 = v14 - *(double *)v15.i64;
      *(_OWORD *)v33 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v33, vcvtmd_s64_f64(v14) + 604800 * (int)v31, v16, v15);
      v17 = sub_18D03FE4C((double *)v33, (double *)this + 6);
      v18 = 64;
      if (v17)
        v18 = 40;
      if (cnnavigation::GalileoTimeToJulianTime((double *)&v31, *(_DWORD *)((char *)this + v18), a3))
        return 0xFFFFFFFFLL;
      goto LABEL_23;
    case 4:
      *(_WORD *)v33 = 0;
      *(_OWORD *)&v33[8] = 0u;
      v34 = 0u;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v31 = cnnavigation::TAITime::ToBeiDouTime(a1, (const cnnavigation::GNSSUTCParameters *)v33);
      v32 = v19;
      *(double *)v20.i64 = (double)(uint64_t)floor(v19);
      *(double *)v21.i64 = v19 - *(double *)v20.i64;
      *(_OWORD *)v33 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v33, vcvtmd_s64_f64(v19) + 604800 * (int)v31, v21, v20);
      v22 = sub_18D03FE4C((double *)v33, (double *)this + 6);
      v23 = 64;
      if (v22)
        v23 = 40;
      if (cnnavigation::BeiDouTimeToJulianTime((double *)&v31, *(_DWORD *)((char *)this + v23), a3))
        return 0xFFFFFFFFLL;
      goto LABEL_23;
    case 6:
      *(_WORD *)v33 = 0;
      *(_OWORD *)&v33[8] = 0u;
      v34 = 0u;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v31 = cnnavigation::TAITime::ToNavicTime(a1, (const cnnavigation::GNSSUTCParameters *)v33);
      v32 = v24;
      *(double *)v25.i64 = (double)(uint64_t)floor(v24);
      *(double *)v26.i64 = v24 - *(double *)v25.i64;
      *(_OWORD *)v33 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v33, vcvtmd_s64_f64(v24) + 604800 * (int)v31, v26, v25);
      v27 = sub_18D03FE4C((double *)v33, (double *)this + 6);
      v30 = 64;
      if (v27)
        v30 = 40;
      if (cnnavigation::NavicTimeToJulianTime((int *)&v31, *(_DWORD *)((char *)this + v30), a3, v28, v29))
        return 0xFFFFFFFFLL;
LABEL_23:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_18D080EA8(int *a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v3;
  uint64_t v5[2];

  a2.i64[0] = *((_QWORD *)a1 + 1);
  v3 = vcvtmd_s64_f64(*(double *)a2.i64) + 604800 * *a1;
  *(double *)a3.i64 = (double)(uint64_t)floor(*(double *)a2.i64);
  *(double *)a2.i64 = *(double *)a2.i64 - *(double *)a3.i64;
  v5[0] = 0;
  v5[1] = 0;
  CNTimeSpan::SetTimeSpan(v5, v3, a2, a3);
  return v5[0];
}

uint64_t cnnavigation::GPSTimeToJulianTime(double *a1, int a2, uint64_t a3)
{
  int v3;
  double v4;
  uint64_t result;
  int v6;
  double v7;

  v3 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v4 = a1[1];
  result = 0xFFFFFFFFLL;
  if (v4 >= 0.0 && v4 < 604800.0)
  {
    result = 0;
    v6 = vcvtmd_s64_f64(v4 / 86400.0);
    v7 = (v4 - (double)a2) / 86400.0 + 0.5 - (double)v6;
    *(_DWORD *)a3 = v6 - v3 + 8 * v3 + 2444244 + vcvtmd_s64_f64(v7);
    *(double *)(a3 + 8) = v7 - floor(v7);
  }
  return result;
}

double cnnavigation::DayOfYearTimeToJulianTime(double *a1, uint64_t a2)
{
  double result;
  double v5;
  int v6;
  double v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v8 = *(_DWORD *)a1;
  v9 = xmmword_18D30B4A0;
  v10 = 0;
  if (!cnnavigation::GregorianTimeToJulianTime((uint64_t)&v8, (uint64_t)&v6))
  {
    v5 = v7 + a1[1];
    *(_DWORD *)a2 = v6 + *((_DWORD *)a1 + 1) + vcvtmd_s64_f64(v5) - 1;
    result = v5 - floor(v5);
    *(double *)(a2 + 8) = result;
  }
  return result;
}

uint64_t cnnavigation::GregorianTimeToJulianTime(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v5;
  unsigned int v6;
  int v7;
  BOOL v10;
  int v14;
  double v15;
  _BOOL4 v17;
  int v18;
  double v19;
  int v20;
  int v21;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 < -4712)
    return 0xFFFFFFFFLL;
  v6 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  v10 = v7 < 12 && v5 == 1 && v6 == 1 && v2 == -4712;
  result = 0xFFFFFFFFLL;
  if (!v10 && v6 - 13 >= 0xFFFFFFF4 && (v5 - 32) >= 0xFFFFFFE1 && v7 <= 0x17)
  {
    v14 = *(_DWORD *)(a1 + 16);
    if (v14 <= 0x3B)
    {
      v15 = *(double *)(a1 + 24);
      if (v15 >= 0.0 && v15 < 60.0)
      {
        result = 0;
        v17 = v6 < 3;
        if (v6 < 3)
          v6 += 12;
        v18 = v5
            + (v2 - v17) / -100
            + (v2 - v17) / 400
            + (int)((double)(int)(v6 + 1) * 30.6001)
            + (int)((double)(v2 - v17 + 4716) * 365.25);
        v19 = v15 / 86400.0 + (double)(v7 - 12) / 24.0 + (double)v14 / 1440.0;
        if (v19 >= 0.0)
          v20 = -1524;
        else
          v20 = -1525;
        v21 = v18 + v20 + 2;
        if (v19 < 0.0)
          v19 = v19 + 1.0;
        *(_DWORD *)a2 = v21;
        *(double *)(a2 + 8) = v19;
      }
    }
  }
  return result;
}

double cnnavigation::JulianTimeToDayOfYearTime(uint64_t a1, uint64_t a2)
{
  double result;
  int v5;
  double v6;
  int v7;
  double v8;
  int v9;
  __int128 v10;
  uint64_t v11;

  result = cnnavigation::JulianTimeToGregorianTime(a1, (uint64_t)&v9);
  if (!v5)
  {
    v10 = xmmword_18D30B4A0;
    v11 = 0;
    if (!cnnavigation::GregorianTimeToJulianTime((uint64_t)&v9, (uint64_t)&v7))
    {
      *(_DWORD *)a2 = v9;
      v6 = *(double *)(a1 + 8) - v8;
      *(_DWORD *)(a2 + 4) = *(_DWORD *)a1 - v7 + vcvtmd_s64_f64(v6) + 1;
      result = v6 - floor(v6);
      *(double *)(a2 + 8) = result;
    }
  }
  return result;
}

double cnnavigation::JulianTimeToGregorianTime(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double result;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;

  v2 = *(double *)(a1 + 8);
  v3 = floor(v2);
  v4 = v3 + (double)*(int *)a1;
  result = v2 - v3;
  v6 = 0.5;
  if (result >= 0.5)
    v7 = 0.5;
  else
    v7 = -0.5;
  v8 = v4 + v7;
  if (v8 >= 0.0)
  {
    if (result >= 0.5)
      v6 = -0.5;
    v9 = result + v6;
    v10 = v8 + -1721119.5;
    v11 = floor((v10 * 4.0 + 3.0) / 146097.0);
    v12 = v10 - floor(v11 * 146097.0 * 0.25);
    v13 = floor((v12 * 100.0 + 99.0) / 36525.0);
    v14 = v12 - floor(v13 * 36525.0 / 100.0);
    v15 = v13 + v11 * 100.0;
    v16 = (v14 * 5.0 + 461.0) / 153.0;
    v17 = (int)v15;
    v18 = vcvtmd_s64_f64(v16);
    v19 = v14 - floor((floor(v16) * 153.0 + -457.0) / 5.0) + 1.0;
    if (v18 > 12)
    {
      v18 -= 12;
      ++v17;
    }
    v20 = v9 * 24.0;
    v21 = v9 - floor(v9 * 24.0) / 24.0;
    v22 = vcvtmd_s64_f64(v21 * 1440.0);
    *(_DWORD *)a2 = v17;
    *(_DWORD *)(a2 + 4) = v18;
    *(_DWORD *)(a2 + 8) = (int)v19;
    *(_DWORD *)(a2 + 12) = vcvtmd_s64_f64(v20);
    result = (v21 - floor(v21 * 1440.0) / 1440.0) * 86400.0;
    *(_DWORD *)(a2 + 16) = v22;
    *(double *)(a2 + 24) = result;
  }
  return result;
}

double cnnavigation::JulianTimeToiOSTime(uint64_t a1, uint64_t a2, double result)
{
  int v3;
  signed int v4;
  double v5;
  unint64_t v6;

  v3 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    result = *(double *)(a1 + 8);
    if (result + (double)v3 >= 0.0)
    {
      v4 = v3 - 2451910 + vcvtmd_s64_f64(result);
      v5 = (result - floor(result) + -0.5) * 86400.0;
      v6 = vcvtmd_s64_f64(v5) + 86400 * v4;
      result = v5 - floor(v5);
      *(_QWORD *)a2 = v6;
      *(double *)(a2 + 8) = result;
    }
  }
  return result;
}

double cnnavigation::DayOfYearTimeToiOSTime(double *a1, uint64_t a2)
{
  double result;
  int v4;
  _BYTE v5[16];

  result = cnnavigation::DayOfYearTimeToJulianTime(a1, (uint64_t)v5);
  if (!v4)
    return cnnavigation::JulianTimeToiOSTime((uint64_t)v5, a2, result);
  return result;
}

double cnnavigation::iOSTimeToDayOfYearTime(uint64_t a1, uint64_t a2)
{
  double result;
  _BYTE v4[16];

  if (!cnnavigation::iOSTimeToJulianTime(a1, (uint64_t)v4))
    return cnnavigation::JulianTimeToDayOfYearTime((uint64_t)v4, a2);
  return result;
}

_QWORD *cnnavigation::iOSTimeToLocalTime@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  tm *v3;
  char *v4;
  time_t v6;
  char v7[80];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(round(*(double *)(a1 + 8)) + (double)*(uint64_t *)a1) + 978307200;
  v3 = localtime(&v6);
  if (v3 && strftime(v7, 0x50uLL, "%Y-%m-%d %H:%M:%S%z", v3))
    v4 = v7;
  else
    v4 = (char *)&unk_18D349FC9;
  return sub_18D0778AC(a2, v4);
}

uint64_t cnnavigation::GPSPseudorange(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, double a7, double a8, double a9)
{
  float64x2_t v10[3];

  return cnnavigation::GPSPseudorange(a1, a2, a3, a4, a5, a6, 0, v10, a7, a8, a9);
}

uint64_t cnnavigation::GPSPseudorange(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int a7, float64x2_t *a8, double a9, double a10, double a11)
{
  int v17;
  double v18;
  double v19;
  uint64_t result;
  double v22;
  double v23;
  double v24;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36[2];
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;

  v17 = a1;
  v18 = a9 - a11;
  v38 = 0.0;
  if (cnnavigation::GPSTimeOfFlight(a1, a2, a3, a4, a5, &v38, (a7 & 1) != 0, v39.f64, a9 - a11, a10))
    return 0xFFFFFFFFLL;
  v37 = 0.0;
  v19 = v38;
  if (cnnavigation::GPSSatelliteClockOffset(v17, a3, &v37, a7, (uint64_t)v36, v18 - v38, a10))
    return 0xFFFFFFFFLL;
  *a6 = v37 * -299792458.0 + v19 * 299792458.0 + a11 * 299792458.0;
  result = 0;
  if (a7)
  {
    _D2 = v36[0];
    v22 = v41;
    v23 = v41 * v36[0];
    v24 = v36[0] * 299792458.0;
    _D7 = v39.f64[0];
    __asm { FMLS            D2, D2, V7.D[0] }
    _Q2.f64[1] = v36[1];
    v31 = (float64x2_t)vdupq_n_s64(0xC1B1DE784A000000);
    v32 = vmulq_f64(_Q2, v31);
    v33 = vmulq_f64(vmulq_n_f64(v40, -v36[0]), v31);
    v34 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
    v35 = vmlaq_f64(v33, v34, v40);
    *a8 = vmlaq_f64(v32, v34, v39);
    a8[1] = v35;
    a8[2].f64[0] = v23 * 299792458.0 + v22 * 299792458.0;
    a8[2].f64[1] = vmlad_n_f64(v24, -299792458.0, _D7) + 299792458.0;
  }
  return result;
}

uint64_t cnnavigation::GPSPseudorange(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, float64x2_t *a7, double a8, double a9, double a10)
{
  return cnnavigation::GPSPseudorange(a1, a2, a3, a4, a5, a6, 1, a7, a8, a9, a10);
}

double cnnavigation::GalileoEphemerides::GalileoSignalInSpaceAccuracy(cnnavigation::GalileoEphemerides *this)
{
  double v2;
  double v3;
  double v4;

  if ((_DWORD)this != 255)
  {
    if (this <= 0x31)
      return (double)this * 0.01;
    if (this <= 0x4A)
    {
      v2 = (double)((int)this - 50);
      v3 = 0.02;
      v4 = 0.5;
      return v4 + v2 * v3;
    }
    if (this <= 0x63)
    {
      v2 = (double)((int)this - 75);
      v3 = 0.04;
      v4 = 1.0;
      return v4 + v2 * v3;
    }
    if (this <= 0x7D)
    {
      v2 = (double)((int)this - 100);
      v3 = 0.16;
      v4 = 2.0;
      return v4 + v2 * v3;
    }
  }
  return NAN;
}

uint64_t cnnavigation::GalileoEphemerides::GNSSFindSat(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, double *a4, double *a5, double *a6)
{
  int v10;
  double v11;
  double v12;
  int v13;
  double v14;
  uint64_t result;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  long double v22;
  __double2 v23;
  double sinval;
  double cosval;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __double2 v31;
  double v32;
  __double2 v33;
  double v34;
  double v35;
  __double2 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;

  if (*(_BYTE *)(a1 + 32) != 3)
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 40))
    return 0xFFFFFFFFLL;
  v10 = cnnavigation::TAITime::ToGalileoTime(this, a3);
  v12 = *(double *)(a1 + 112);
  if (fabs(v12) < 2.22044605e-16 || (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v13 = v10;
  v14 = *(double *)(a1 + 104);
  result = 0xFFFFFFFFLL;
  if (v14 >= 0.0 && v14 < 1.0 && (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v16 = *(double *)(a1 + 136);
    v70 = *(double *)(a1 + 128);
    v71 = *(double *)(a1 + 144);
    v72 = *(double *)(a1 + 120);
    v85 = *(double *)(a1 + 152);
    v17 = *(double *)(a1 + 176);
    v80 = *(double *)(a1 + 160);
    v81 = *(double *)(a1 + 168);
    v82 = *(double *)(a1 + 184);
    v83 = *(double *)(a1 + 192);
    v84 = *(double *)(a1 + 200);
    v75 = *(double *)(a1 + 56);
    v79 = v12 * v12;
    v78 = *(double *)(a1 + 96) + 19964980.4 / (v12 * (v12 * v12));
    v68 = v11 - v75 + (double)(v13 - *(_DWORD *)(a1 + 48)) * 604800.0;
    v18 = *(double *)(a1 + 88) + v78 * v68;
    v19 = 10;
    v20 = v18;
    do
    {
      v21 = sin(v20);
      v20 = v18 + v14 * v21;
      --v19;
    }
    while (v19);
    v77 = sqrt(1.0 - v14 * v14);
    v74 = cos(v20);
    v22 = v16 + atan2(v77 * v21, v74 - v14);
    v23 = __sincos_stret(v22 + v22);
    sinval = v23.__sinval;
    cosval = v23.__cosval;
    v26 = v22 + v80 * v23.__cosval + v81 * v23.__sinval;
    v27 = 1.0 - v14 * v74;
    v76 = v17;
    v28 = v79 * v27 + v17 * v23.__cosval + v82 * v23.__sinval;
    v29 = v70 + v85 * v68 + v83 * v23.__cosval + v84 * v23.__sinval;
    v30 = v71 + -0.0000729211515;
    v69 = v72 + (v71 + -0.0000729211515) * v68 + v75 * -0.0000729211515;
    v31 = __sincos_stret(v26);
    v73 = v28 * v31.__cosval;
    v32 = v28 * v31.__sinval;
    v33 = __sincos_stret(v29);
    v36 = __sincos_stret(v69);
    v35 = v36.__cosval;
    v34 = v36.__sinval;
    result = 0;
    v37 = -(v33.__cosval * v32 * v36.__sinval);
    v38 = v77 * (v78 / v27) / v27;
    v39 = v78 / v27 * (v21 * (v14 * (-v78 / (v27 * v27))));
    v40 = v81 * cosval - v80 * sinval + v81 * cosval - v80 * sinval;
    v41 = v38 + v40 * v38;
    v42 = v82 * cosval - v76 * sinval + v82 * cosval - v76 * sinval;
    v43 = v14 * v79 * v21 * (v78 / v27) + v42 * v38;
    v44 = v84 * cosval - v83 * sinval + v84 * cosval - v83 * sinval;
    v45 = v85 + v44 * v38;
    v46 = v43 * v31.__cosval - v32 * v41;
    v47 = v77 * (v39 / v27 + v21 * (v14 * (-(v78 / v27) / (v27 * v27))) * (v78 / v27));
    v48 = v47 + v40 * v47 + v38 * ((-(v81 * v23.__sinval) - v80 * v23.__cosval) * 4.0) * v38;
    v49 = v73 * v41 + v43 * v31.__sinval;
    v50 = v14 * v79 * (v78 / v27 * (v74 * (v78 / v27)) + v21 * v39) + v42 * v47;
    v51 = v45 * (v33.__sinval * v32);
    v52 = v50 + v38 * ((-(v82 * v23.__sinval) - v76 * v23.__cosval) * 4.0) * v38;
    v53 = (v71 + -0.0000729211515) * (v36.__cosval * v73);
    v54 = v45 * (v33.__cosval * v32);
    v55 = v38 * (v38 * ((-(v84 * v23.__sinval) - v83 * v23.__cosval) * 4.0)) + v44 * v47;
    v56 = v52 * v31.__cosval - v31.__sinval * v43 * v41 - (v41 * (v73 * v41) + v31.__sinval * v43 * v41 + v32 * v48);
    v57 = v41 * (v31.__cosval * v43) + v52 * v31.__sinval + v41 * -(v32 * v41) + v31.__cosval * v43 * v41 + v73 * v48;
    v58 = v30 * v53 + v36.__sinval * v46 * v30;
    v59 = v45 * (v33.__sinval * v49);
    v60 = v36.__cosval * (v33.__cosval * v49);
    v61 = v33.__cosval * v57 * v34 - v59 * v34 + v60 * (v71 + -0.0000729211515);
    v62 = v34 * (v45 * v54) + v59 * v34 + v33.__sinval * v32 * v55 * v34 + v36.__cosval * v51 * (v71 + -0.0000729211515);
    v63 = v33.__cosval * v57 * v35 - v59 * v35;
    v64 = v53 + v46 * v36.__sinval + v33.__cosval * v49 * v35 - v51 * v35 + v37 * (v71 + -0.0000729211515);
    v65 = v35 * (v45 * v54) + v59 * v35 + v33.__sinval * v32 * v55 * v35;
    v66 = (v71 + -0.0000729211515) * -(v73 * v36.__sinval);
    v67 = v36.__cosval * (v33.__cosval * v32);
    *a4 = v73 * v36.__cosval - v33.__cosval * v32 * v36.__sinval;
    a4[1] = v67 + v73 * v36.__sinval;
    a4[2] = v33.__sinval * v32;
    *a5 = v66
        + v46 * v36.__cosval
        - v33.__cosval * v49 * v36.__sinval
        + v51 * v36.__sinval
        - v67 * (v71 + -0.0000729211515);
    a5[1] = v64;
    a5[2] = v54 + v49 * v33.__sinval;
    *a6 = v62
        + v56 * v36.__cosval
        - v36.__sinval * v46 * (v71 + -0.0000729211515)
        - v58
        - v61
        - (v60 * (v71 + -0.0000729211515)
         - v36.__cosval * v51 * (v71 + -0.0000729211515)
         + (v71 + -0.0000729211515) * v37 * (v71 + -0.0000729211515));
    a6[1] = v30 * v66
          + v36.__cosval * v46 * v30
          + (v71 + -0.0000729211515) * (v36.__cosval * v46)
          + v56 * v36.__sinval
          + v63
          - v36.__sinval * (v33.__cosval * v49) * v30
          - (v65
           + -(v51 * v36.__sinval) * v30)
          - (v30 * -(v51 * v36.__sinval)
           + v36.__sinval * (v33.__cosval * v49) * v30
           + v30 * v67 * v30);
    a6[2] = v33.__cosval * v49 * v45
          - v51 * v45
          + v33.__cosval * v32 * v55
          + v45 * (v33.__cosval * v49)
          + v57 * v33.__sinval;
  }
  return result;
}

uint64_t cnnavigation::GalileoEphemerides::GNSSSatelliteClockOffset(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, double *a4, int a5, double *a6, double a7)
{
  int v13;
  double v14;
  double v15;
  int v16;
  double v17;
  uint64_t result;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  long double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  int8x16_t v33;
  int8x16_t v34;
  double v35;
  double v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46[2];

  if (*(_BYTE *)(a1 + 32) != 3)
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 40))
    return 0xFFFFFFFFLL;
  v13 = cnnavigation::TAITime::ToGalileoTime(this, a3);
  v15 = *(double *)(a1 + 112);
  if (fabs(v15) < 2.22044605e-16 || (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v16 = v13;
  v17 = *(double *)(a1 + 104);
  result = 0xFFFFFFFFLL;
  if (v17 < 0.0 || v17 >= 1.0 || (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return result;
  v19 = v14;
  v20 = v14 - *(double *)(a1 + 72) + (double)(v16 - *(_DWORD *)(a1 + 64)) * 604800.0;
  v45 = *(double *)(a1 + 216);
  v44 = *(double *)(a1 + 224);
  v21 = *(double *)(a1 + 208) + v45 * v20 + v44 * (v20 * v20);
  v22 = *(double *)(a1 + 96) + 19964980.4 / (v15 * (v15 * v15));
  v23 = *(double *)(a1 + 88) + v22 * (v14 - *(double *)(a1 + 56) + (double)(v16 - *(_DWORD *)(a1 + 48)) * 604800.0);
  v24 = 10;
  v25 = v23;
  do
  {
    v25 = v23 + v17 * sin(v25);
    --v24;
  }
  while (v24);
  if (a7 <= 0.0 || (*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v26 = v15 * -4.44280731e-10;
  v27 = 1.0;
  v28 = 0.0;
  if (!*(_BYTE *)(a1 + 248))
  {
    if (*(_BYTE *)(a1 + 249) || fabs(a7 + -1207140000.0) <= 0.000000015)
    {
      if (*(_BYTE *)(a1 + 250) || fabs(a7 + -1176450000.0) <= 0.000000015)
        goto LABEL_22;
      v27 = 1575420000.0 / a7 * (1575420000.0 / a7);
      v29 = (double *)(a1 + 240);
    }
    else
    {
      v27 = 1575420000.0 / a7 * (1575420000.0 / a7);
      v29 = (double *)(a1 + 232);
    }
    v28 = *v29;
  }
LABEL_22:
  v30 = v21 + v15 * -4.44280731e-10 * (v25 - v23);
  v31 = v28 * v27;
  if (a5)
  {
    v21 = (v27 + v27) / a7 * v28;
    v43 = v45 + (v44 + v44) * v20 + v26 * (v22 / (1.0 - v17 * cos(v25))) - v26 * v22;
  }
  v32 = v30 - v31;
  if (cnnavigation::GNSSUTCParameters::IsValid(a3) && *((_BYTE *)a3 + 1) == 3)
  {
    v46[0] = 0;
    v46[1] = 0;
    *(double *)v33.i64 = v19;
    CNTimeSpan::SetTimeSpan(v46, 604800 * v16, v33, v34);
    v35 = *((double *)a3 + 1);
    v36 = *((double *)a3 + 2);
    v39 = CNTimeSpan::operator-((uint64_t)v46, (_QWORD *)a3 + 3, v37, v38);
    *a4 = v32 - (v35 + v36 * (v40 + (double)v39));
    if (a5)
    {
      v41 = *((double *)a3 + 2);
      v42 = 1.0 / (1.0 - v41);
      *a6 = (v43 - v41) * v42;
      a6[1] = v21 / v42;
    }
  }
  else
  {
    *a4 = v32;
    if (a5)
    {
      result = 0;
      *a6 = v43;
      a6[1] = v21;
      return result;
    }
  }
  return 0;
}

uint64_t cnnavigation::GalileoEphemerides::GNSSSatelliteClockOffsetRate(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, double *a4, int a5, uint64_t a6)
{
  int v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t result;

  if (*(_BYTE *)(a1 + 32) != 3)
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 40))
    return 0xFFFFFFFFLL;
  v11 = cnnavigation::TAITime::ToGalileoTime(this, a3);
  v13 = *(double *)(a1 + 112);
  if (fabs(v13) < 2.22044605e-16 || (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v14 = *(double *)(a1 + 104);
  v15 = v14 >= 0.0 && v14 < 1.0;
  if (!v15 || (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v16 = v12 - *(double *)(a1 + 72) + (double)(v11 - *(_DWORD *)(a1 + 64)) * 604800.0;
  v17 = *(double *)(a1 + 96) + 19964980.4 / (v13 * (v13 * v13));
  v18 = *(double *)(a1 + 88) + v17 * (v12 - *(double *)(a1 + 56) + (double)(v11 - *(_DWORD *)(a1 + 48)) * 604800.0);
  v19 = 10;
  v20 = v18;
  do
  {
    v21 = sin(v20);
    v20 = v18 + v14 * v21;
    --v19;
  }
  while (v19);
  v22 = *(double *)(a1 + 224) + *(double *)(a1 + 224);
  v23 = *(double *)(a1 + 216) + v22 * v16;
  v24 = 1.0 - v14 * cos(v18 + v14 * v21);
  v25 = v13 * -4.44280731e-10 * (v17 / v24 - v17);
  if ((a5 & 1) != 0)
    v13 = v13 * -4.44280731e-10 * (v17 / v24 * ((v18 - v20) * (v17 / v24)) / v24) + v13 * -4.44280731e-10 * -0.0 + v22;
  v26 = v25 + v23;
  if (cnnavigation::GNSSUTCParameters::IsValid(a3) && *((_BYTE *)a3 + 1) == 3)
  {
    v27 = *((double *)a3 + 2);
    v28 = 1.0 / (1.0 - v27);
    *a4 = (v26 - v27) * v28;
    if (a5)
    {
      v13 = v13 * (v28 * v28);
LABEL_21:
      result = 0;
      *(double *)a6 = v13;
      *(_QWORD *)(a6 + 8) = 0;
      return result;
    }
  }
  else
  {
    *a4 = v26;
    if (a5)
      goto LABEL_21;
  }
  return 0;
}

uint64_t sub_18D082194(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25B96A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  *(_QWORD *)a1 = off_1E25B93B0;
  return a1;
}

void sub_18D0821E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25B96A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  *(_QWORD *)a1 = off_1E25B93B0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::GLONASSEphemerides::GNSSFindSat(uint64_t a1, uint64_t a2, cnnavigation::GNSSUTCParameters *this, float64x2_t *a4, double *a5, double *a6)
{
  int8x16_t v11;
  int8x16_t v12;
  uint64_t result;
  int v14;
  double v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _BOOL4 IsValid;
  uint64_t v29;
  double v30;
  uint64_t i;
  uint64_t v32[2];
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  double v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v33 = 1;
  v34 = 0.0;
  if (cnnavigation::TAITime::ToGLONASSTime(a2, this, (uint64_t)&v33))
    return 0xFFFFFFFFLL;
  v14 = v33;
  v15 = v34;
  v32[0] = 0;
  v32[1] = 0;
  *(double *)v11.i64 = v34;
  CNTimeSpan::SetTimeSpan(v32, 86400 * (v33 - 1), v11, v12);
  v16 = sub_18D03F608((double *)v32, (double *)this + 6);
  v17 = 40;
  if (v16)
    v17 = 64;
  result = cnnavigation::GLONASSFindSat(v14, a1, v41.f64, &v38, &v35, v15, (double)*(int *)((char *)this + v17));
  if (!(_DWORD)result)
  {
    v18 = 0;
    v19 = v42 + 0.18;
    v20 = 0.0;
    v21 = v38 + v39 * 0.0 + v40 * 0.0;
    v22 = v39 + v38 * 0.0 + v40 * 0.0;
    v23 = v40 + v39 * 0.0 + v38 * 0.0;
    v24 = v36 * 0.0 + v35 * 0.0;
    v25 = v37;
    v26 = v35 + v36 * 0.0 + v37 * 0.0;
    v27 = v36 + v35 * 0.0 + v37 * 0.0;
    *a4 = vaddq_f64(v41, (float64x2_t)xmmword_18D30B550);
    a4[1].f64[0] = v19;
    *a5 = v21;
    a5[1] = v22;
    a5[2] = v23;
    *a6 = v26;
    a6[1] = v27;
    a6[2] = v25 + v24;
    do
    {
      v20 = v20 + a4->f64[v18] * a4->f64[v18];
      ++v18;
    }
    while (v18 != 3);
    if (sqrt(v20) < 6341752.3)
      return 0xFFFFFFFFLL;
    IsValid = cnnavigation::GNSSUTCParameters::IsValid(this);
    result = 0;
    if (IsValid && *((_BYTE *)this + 1) == 2)
    {
      v29 = 0;
      v30 = 1.0 / (1.0 - *((double *)this + 2));
      do
      {
        a5[v29] = v30 * a5[v29];
        ++v29;
      }
      while (v29 != 3);
      for (i = 0; i != 3; ++i)
        a6[i] = v30 * a6[i];
      return 0;
    }
  }
  return result;
}

uint64_t cnnavigation::GLONASSEphemerides::GNSSSatelliteClockOffset(uint64_t a1, uint64_t a2, cnnavigation::GNSSUTCParameters *this, double *a4, int a5, double *a6, double a7)
{
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  int v16;
  double v17;
  _BOOL4 v18;
  uint64_t v19;
  double v20;
  int8x16_t v21;
  int8x16_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v35[2];
  int v36;
  double v37;

  v36 = 1;
  v37 = 0.0;
  if (cnnavigation::TAITime::ToGLONASSTime(a2, this, (uint64_t)&v36))
    return 0xFFFFFFFFLL;
  v16 = v36;
  v17 = v37;
  v35[0] = 0;
  v35[1] = 0;
  *(double *)v13.i64 = v37;
  CNTimeSpan::SetTimeSpan(v35, 86400 * (v36 - 1), v13, v14);
  v18 = sub_18D03F608((double *)v35, (double *)this + 6);
  v19 = 40;
  if (v18)
    v19 = 64;
  v20 = (double)*(int *)((char *)this + v19);
  v34 = 0.0;
  v15 = cnnavigation::GLONASSSatelliteClockOffset(v16, a1, &v34, a5, (uint64_t)&v32, v17, v20, a7);
  if (!(_DWORD)v15)
  {
    if (cnnavigation::GNSSUTCParameters::IsValid(this) && *((_BYTE *)this + 1) == 2)
    {
      v23 = *((double *)this + 1);
      v24 = *((double *)this + 2);
      v25 = CNTimeSpan::operator-((uint64_t)v35, (_QWORD *)this + 3, v21, v22);
      *a4 = v34 - (v23 + v24 * (v26 + (double)v25));
      if (!a5)
        return v15;
      v27 = *((double *)this + 2);
      v28 = 1.0 / (1.0 - v27);
      v29 = v33;
      *a6 = (v32 - v27) * v28;
      v30 = v29 / v28;
    }
    else
    {
      *a4 = v34;
      if (!a5)
        return v15;
      v30 = v33;
      *a6 = v32;
    }
    a6[1] = v30;
  }
  return v15;
}

uint64_t cnnavigation::GLONASSEphemerides::GNSSSatelliteClockOffsetRate(uint64_t a1, uint64_t a2, cnnavigation::GNSSUTCParameters *this, double *a4, int a5, uint64_t a6)
{
  int8x16_t v11;
  int8x16_t v12;
  uint64_t result;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18[2];
  int v19;
  double v20;

  v19 = 1;
  v20 = 0.0;
  if (cnnavigation::TAITime::ToGLONASSTime(a2, this, (uint64_t)&v19))
    return 0xFFFFFFFFLL;
  *(double *)v11.i64 = v20;
  v18[0] = 0;
  v18[1] = 0;
  CNTimeSpan::SetTimeSpan(v18, 86400 * (v19 - 1), v11, v12);
  sub_18D03F608((double *)v18, (double *)this + 6);
  if (!*(_BYTE *)(a1 + 16))
    return 0xFFFFFFFFLL;
  v14 = *(double *)(a1 + 112);
  if (cnnavigation::GNSSUTCParameters::IsValid(this) && *((_BYTE *)this + 1) == 2)
  {
    v15 = *((double *)this + 2);
    v16 = 1.0 / (1.0 - v15);
    *a4 = (v14 - v15) * v16;
    if (a5)
    {
      v17 = v16 * v16 * -0.0;
LABEL_10:
      result = 0;
      *(double *)a6 = v17;
      *(_QWORD *)(a6 + 8) = 0;
      return result;
    }
  }
  else
  {
    *a4 = v14;
    if (a5)
    {
      v17 = -0.0;
      goto LABEL_10;
    }
  }
  return 0;
}

_QWORD *sub_18D082704(_QWORD *result)
{
  *result = off_1E25B93B0;
  return result;
}

void sub_18D082718(_QWORD *a1)
{
  *a1 = off_1E25B93B0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::GLONASSPseudorange(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, double a7, double a8, double a9, double a10)
{
  float64x2_t v11[3];

  return cnnavigation::GLONASSPseudorange(a1, a2, a3, a4, a5, a6, 0, v11, a7, a8, a9, a10);
}

uint64_t cnnavigation::GLONASSPseudorange(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int a7, float64x2_t *a8, double a9, double a10, double a11, double a12)
{
  double v20;
  uint64_t result;
  double v22;
  double v24;
  double v25;
  double v26;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38[2];
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;

  v20 = a9 - a12;
  v40 = 0.0;
  result = cnnavigation::GLONASSTimeOfFlight(a1, a2, a3, a4, a5, &v40, (a7 & 1) != 0, v41.f64, a9 - a12, a10, a11);
  if (!(_DWORD)result)
  {
    v39 = 0.0;
    v22 = v40;
    if (cnnavigation::GLONASSSatelliteClockOffset(a1, a3, &v39, a7, (uint64_t)v38, v20 - v40, a10, a11))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      *a6 = v39 * -299792458.0 + v22 * 299792458.0 + a12 * 299792458.0;
      result = 0;
      if (a7)
      {
        _D2 = v38[0];
        v24 = v43;
        v25 = v43 * v38[0];
        v26 = v38[0] * 299792458.0;
        _D7 = v41.f64[0];
        __asm { FMLS            D2, D2, V7.D[0] }
        _Q2.f64[1] = v38[1];
        v33 = (float64x2_t)vdupq_n_s64(0xC1B1DE784A000000);
        v34 = vmulq_f64(_Q2, v33);
        v35 = vmulq_f64(vmulq_n_f64(v42, -v38[0]), v33);
        v36 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
        v37 = vmlaq_f64(v35, v36, v42);
        *a8 = vmlaq_f64(v34, v36, v41);
        a8[1] = v37;
        a8[2].f64[0] = v25 * 299792458.0 + v24 * 299792458.0;
        a8[2].f64[1] = vmlad_n_f64(v26, -299792458.0, _D7) + 299792458.0;
      }
    }
  }
  return result;
}

uint64_t cnnavigation::GLONASSPseudorange(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, float64x2_t *a7, double a8, double a9, double a10, double a11)
{
  return cnnavigation::GLONASSPseudorange(a1, a2, a3, a4, a5, a6, 1, a7, a8, a9, a10, a11);
}

double cnnavigation::KlobucharModelParameters::KlobucharModelParameters(cnnavigation::KlobucharModelParameters *this)
{
  double result;

  *(_QWORD *)this = &off_1E25B99F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = xmmword_18D30B590;
  result = -0.0007;
  *(_OWORD *)((char *)this + 56) = xmmword_18D30B5A0;
  *((_BYTE *)this + 72) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25B99F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = xmmword_18D30B590;
  result = -0.0007;
  *(_OWORD *)((char *)this + 56) = xmmword_18D30B5A0;
  *((_BYTE *)this + 72) = 0;
  return result;
}

double cnnavigation::KlobucharModelParameters::KlobucharModelParameters(cnnavigation::KlobucharModelParameters *this, double *a2, double *a3)
{
  double result;

  *(_QWORD *)this = &off_1E25B99F8;
  *((double *)this + 1) = *a2;
  *((double *)this + 2) = a2[1];
  *((double *)this + 3) = a2[2];
  *((double *)this + 4) = a2[3];
  *((double *)this + 5) = *a3;
  *((double *)this + 6) = a3[1];
  *((double *)this + 7) = a3[2];
  result = a3[3];
  *((double *)this + 8) = result;
  *((_BYTE *)this + 72) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25B99F8;
  *((double *)this + 1) = *a2;
  *((double *)this + 2) = a2[1];
  *((double *)this + 3) = a2[2];
  *((double *)this + 4) = a2[3];
  *((double *)this + 5) = *a3;
  *((double *)this + 6) = a3[1];
  *((double *)this + 7) = a3[2];
  result = a3[3];
  *((double *)this + 8) = result;
  *((_BYTE *)this + 72) = 0;
  return result;
}

__n128 cnnavigation::KlobucharModelParameters::KlobucharModelParameters(cnnavigation::KlobucharModelParameters *this, const cnnavigation::KlobucharModelParameters *a2)
{
  __n128 result;

  *(_QWORD *)this = &off_1E25B99F8;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  result = *(__n128 *)((char *)a2 + 56);
  *(__n128 *)((char *)this + 56) = result;
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  return result;
}

{
  __n128 result;

  *(_QWORD *)this = &off_1E25B99F8;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  result = *(__n128 *)((char *)a2 + 56);
  *(__n128 *)((char *)this + 56) = result;
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  return result;
}

void cnnavigation::KlobucharModelParameters::~KlobucharModelParameters(cnnavigation::KlobucharModelParameters *this)
{
  JUMPOUT(0x18D78B5D4);
}

double cnnavigation::KlobucharIonosphereModel::KlobucharIonosphereModel(cnnavigation::KlobucharIonosphereModel *this)
{
  double result;

  *(_QWORD *)this = &off_1E25B99C0;
  *((_QWORD *)this + 1) = &off_1E25B99F8;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  result = 0.0008;
  *((_OWORD *)this + 3) = xmmword_18D30B590;
  *((_OWORD *)this + 4) = xmmword_18D30B5A0;
  *((_BYTE *)this + 80) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25B99C0;
  *((_QWORD *)this + 1) = &off_1E25B99F8;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  result = 0.0008;
  *((_OWORD *)this + 3) = xmmword_18D30B590;
  *((_OWORD *)this + 4) = xmmword_18D30B5A0;
  *((_BYTE *)this + 80) = 0;
  return result;
}

__n128 cnnavigation::KlobucharIonosphereModel::KlobucharIonosphereModel(__n128 *this, const cnnavigation::KlobucharModelParameters *a2)
{
  __n128 result;

  this->n128_u64[0] = (unint64_t)&off_1E25B99C0;
  this->n128_u64[1] = (unint64_t)&off_1E25B99F8;
  this[1] = *(__n128 *)((char *)a2 + 8);
  this[2] = *(__n128 *)((char *)a2 + 24);
  this[3] = *(__n128 *)((char *)a2 + 40);
  result = *(__n128 *)((char *)a2 + 56);
  this[4] = result;
  this[5].n128_u8[0] = *((_BYTE *)a2 + 72);
  return result;
}

{
  __n128 result;

  this->n128_u64[0] = (unint64_t)&off_1E25B99C0;
  this->n128_u64[1] = (unint64_t)&off_1E25B99F8;
  this[1] = *(__n128 *)((char *)a2 + 8);
  this[2] = *(__n128 *)((char *)a2 + 24);
  this[3] = *(__n128 *)((char *)a2 + 40);
  result = *(__n128 *)((char *)a2 + 56);
  this[4] = result;
  this[5].n128_u8[0] = *((_BYTE *)a2 + 72);
  return result;
}

void cnnavigation::KlobucharIonosphereModel::~KlobucharIonosphereModel(cnnavigation::KlobucharIonosphereModel *this)
{
  *(_QWORD *)this = &unk_1E25B9450;
}

{
  *(_QWORD *)this = &unk_1E25B9450;
}

{
  *(_QWORD *)this = &unk_1E25B9450;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::KlobucharIonosphereModel::GetIonosphericDelay(cnnavigation::KlobucharIonosphereModel *this, uint64_t a2, double a3, const double *a4, const double *a5, double a6, double *a7)
{
  uint64_t v8;

  return cnnavigation::KlobucharIonosphereModel::GetIonosphericDelay((uint64_t)this, a3, a6, a2, (uint64_t)a4, (uint64_t)a5, a7, 0, (uint64_t)&v8);
}

uint64_t cnnavigation::KlobucharIonosphereModel::GetIonosphericDelay(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, int a8, uint64_t a9)
{
  char v10;
  uint64_t v16;
  double v17;
  double v18;
  float64x2_t *v19;
  float64x2_t *v20;
  int v21;
  double v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  double v51;
  double cosval;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double __x;
  double v83;
  double v84;
  double v85;
  double v86;
  float64x2_t v87;
  double v88;
  float64x2_t v89;
  double v90;
  float64x2_t v91;
  double v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  double v96;
  float64x2_t v97;
  double v98;
  double v99[3];
  double v100;
  double v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 80))
    return 0xFFFFFFFFLL;
  v10 = a8;
  if (a8)
  {
    v16 = cnnavigation::SatElAz(a5, a6, 1, (uint64_t)&v100, 1, (uint64_t)&v91);
    if ((_DWORD)v16)
      return v16;
    v18 = v100;
    v17 = v101;
    v19 = &v87;
    v20 = (float64x2_t *)a5;
    v21 = 1;
  }
  else
  {
    v16 = cnnavigation::SatElAz(a5, a6, 1, (uint64_t)&v100, 0, (uint64_t)&v91);
    if ((_DWORD)v16)
      return v16;
    v18 = v100;
    v17 = v101;
    v19 = &v91;
    v20 = (float64x2_t *)a5;
    v21 = 0;
  }
  v16 = cnnavigation::ECEFToLLA(v20, 1, v99, v21, (uint64_t)v19);
  if (!(_DWORD)v16)
  {
    v85 = v18 / 3.14159265;
    v22 = v99[0] / 3.14159265;
    v23 = v99[1] / 3.14159265;
    v84 = v85 + 0.11;
    v24 = 0.0137 / (v85 + 0.11) + -0.022;
    v25 = __sincos_stret(v17);
    v26 = 0.416;
    if (v22 + v24 * v25.__cosval <= 0.416)
      v26 = v22 + v24 * v25.__cosval;
    if (v26 >= -0.416)
      v27 = v26;
    else
      v27 = -0.416;
    __x = v27 * 3.14159265;
    v81 = cos(v27 * 3.14159265);
    v28 = v23 + v25.__sinval * v24 / v81;
    v83 = v27;
    v29 = v27 + cos((v28 + -1.617) * 3.14159265) * 0.064;
    v30 = fmod(a2 + v28 * 43200.0, 86400.0);
    if (v30 < 0.0)
      v30 = v30 + 86400.0;
    if (v30 >= 86400.0)
      v31 = v30 + -86400.0;
    else
      v31 = v30;
    v32 = *(double *)(a1 + 48)
        + v29 * (*(double *)(a1 + 56) + *(double *)(a1 + 64) * v29 + *(double *)(a1 + 72) * v29 * v29);
    if (v32 < 72000.0)
      v32 = 72000.0;
    v33 = (v31 + -50400.0) * 6.28318531 / v32;
    v34 = *(double *)(a1 + 24) + *(double *)(a1 + 32) * v29 + *(double *)(a1 + 40) * v29 * v29;
    v35 = 0.0;
    if (*(double *)(a1 + 16) + v29 * v34 >= 0.0)
      v36 = *(double *)(a1 + 16) + v29 * v34;
    else
      v36 = 0.0;
    v37 = 0.53 - v85;
    v38 = (0.53 - v85) * ((0.53 - v85) * 16.0) * (0.53 - v85) + 1.0;
    if (fabs(v33) >= 1.57)
    {
      v41 = 1575420000.0 / a3 * (1575420000.0 / a3) * (v38 * 0.000000005);
      *a7 = v41;
      v43 = 0.0;
      if ((v10 & 1) == 0)
        return v16;
    }
    else
    {
      v39 = v33 * v33 * (v33 * v33 / 24.0 + -0.5) + 1.0;
      v40 = 1575420000.0 / a3 * (1575420000.0 / a3);
      v41 = v40 * (v38 * (v36 * v39 + 0.000000005));
      *a7 = v41;
      if ((v10 & 1) == 0)
        return v16;
      v42 = v40 * v38;
      v43 = v42 * v36 * v33 * (v33 * v33 / 6.0 + -1.0);
      v35 = v42 * v39;
    }
    v80 = v43;
    v86 = v35;
    v44 = 0.0;
    v45 = v36 < 0.0;
    v46 = 0.0;
    if (!v45)
      v46 = *(double *)(a1 + 24) + v29 * (v29 * (*(double *)(a1 + 40) * 3.0) + *(double *)(a1 + 32) * 2.0);
    v79 = v41 / v38;
    v77 = v46;
    v78 = v37 * (v37 * -48.0);
    v75 = (v31 + -50400.0) * -6.28318531 / (v32 * v32);
    v76 = 6.28318531 / v32;
    if (v32 >= 72000.0)
      v44 = *(double *)(a1 + 56) + v29 * (v29 * (*(double *)(a1 + 72) * 3.0) + *(double *)(a1 + 64) * 2.0);
    v47 = sin((v28 + -1.617) * 3.14159265) * -0.20106193;
    v48 = v25.__sinval * (v24 * 3.14159265) * tan(__x) / v81;
    v49 = fabs(v83) > 0.416;
    v50 = 0.0;
    if (v49)
      v51 = 0.0;
    else
      v51 = 0.318309886;
    if (v49)
      cosval = 0.0;
    else
      cosval = v25.__cosval;
    if (!v49)
      v50 = -(v24 * v25.__sinval);
    v53 = -0.0137 / (v84 * v84) * 0.318309886;
    v54 = v53 * cosval;
    v55 = v51 * v48;
    v56 = v54 * v48 + v25.__sinval / v81 * v53;
    v57 = v25.__cosval * v24 / v81 + v50 * v48;
    v58 = v55 * 43200.0;
    v59 = v56 * 43200.0;
    v60 = v57 * 43200.0;
    v61 = v51 + v47 * v55;
    v62 = v54 + v47 * v56;
    v63 = v50 + v47 * v57;
    v64 = v44 * v63;
    v65 = v77 * v61;
    v66 = v47 * 0.318309886 * v77;
    v67 = v77 * v62;
    v68 = v77 * v63;
    v69 = v75 * (v44 * v61) + v76 * v58;
    v70 = v75 * (v47 * 0.318309886 * v44) + v76 * 13750.9871;
    v71 = v75 * (v44 * v62) + v76 * v59;
    v72 = v75 * v64 + v76 * v60;
    *(double *)a9 = v76 * v80;
    v73 = v78 * 0.318309886 * v79;
    *(float64x2_t *)(a9 + 16) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v89, v70), v87, v69), v91, v71), v95, v72), v80), v91, v73), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v89, v66), v87, v65), v91, v67), v95, v68), v86);
    *(double *)(a9 + 32) = v80 * (v70 * v90 + v69 * v88 + v71 * v92 + v72 * v96)
                         + v73 * v92
                         + v86 * (v66 * v90 + v65 * v88 + v67 * v92 + v68 * v96);
    *(float64x2_t *)(a9 + 40) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v97, v72), v93, v71), v80), v93, v73), vmlaq_n_f64(vmulq_n_f64(v97, v68), v93, v67), v86);
    *(double *)(a9 + 56) = v80 * (v72 * v98 + v71 * v94) + v73 * v94 + v86 * (v68 * v98 + v67 * v94);
    *(double *)(a9 + 8) = -2.0 / a3 * *a7;
  }
  return v16;
}

uint64_t cnnavigation::KlobucharIonosphereModel::GetIonosphericDelay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6, double a7, double a8)
{
  return cnnavigation::KlobucharIonosphereModel::GetIonosphericDelay(a1, a7, a8, a2, a3, a4, a5, 1, a6);
}

uint64_t sub_18D083218(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

double cnnavigation::GLONASSAlmanac::GLONASSAlmanac(cnnavigation::GLONASSAlmanac *this)
{
  double result;

  *(_QWORD *)this = &off_1E25B92F0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = -1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0xBFF0000000000000;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25B92F0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = -1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0xBFF0000000000000;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return result;
}

double cnnavigation::GLONASSAlmanac::GLONASSAlmanac(cnnavigation::GLONASSAlmanac *this, const cnnavigation::GLONASSAlmanac *a2)
{
  double result;

  *(_QWORD *)this = &off_1E25B92F0;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  result = *((double *)a2 + 16);
  *((double *)this + 16) = result;
  return result;
}

void cnnavigation::GLONASSAlmanac::~GLONASSAlmanac(cnnavigation::GLONASSAlmanac *this)
{
  *(_QWORD *)this = &off_1E25B92F0;
}

{
  *(_QWORD *)this = &off_1E25B92F0;
}

{
  *(_QWORD *)this = &off_1E25B92F0;
  JUMPOUT(0x18D78B5D4);
}

double cnnavigation::GLONASSAlmanac::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1 != a2)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    result = *(double *)(a2 + 128);
    *(double *)(a1 + 128) = result;
  }
  return result;
}

uint64_t cnnavigation::GLONASSAlmanac::Deserialize(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  char v26;

  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 8, 4);
  v26 = 0;
  v23 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 40))(a2, &v26, 1);
  *(_BYTE *)(a1 + 16) = v26 == 1;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 12, 4);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 20, 4);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 24, 8);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 32, 8);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 40, 8);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 48, 8);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 56, 8);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 64, 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 72, 8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 80, 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 88, 8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 96, 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 104, 8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 112, 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 120, 8);
  v25 = 0;
  v11 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a2 + 40))(a2, &v25, 4);
  v12 = 0;
  if (v25 <= 1)
  {
    v12 = v24 & v23 & v22 & v21 & v20 & v19 & v18 & v17 & v16 & v15 & v4 & v5 & v6 & v7 & v8 & v9 & v10 & v11;
    *(_DWORD *)(a1 + 128) = v25;
  }
  v13 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a2 + 40))(a2, &v25, 4);
  if (v25 > 1)
    return 0;
  result = v12 & v13;
  *(_DWORD *)(a1 + 132) = v25;
  return result;
}

uint64_t cnnavigation::GLONASSAlmanac::Serialize(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;

  LODWORD(v25) = *(_DWORD *)(a1 + 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 4);
  LOBYTE(v25) = *(_BYTE *)(a1 + 16);
  v5 = v4 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 1);
  LODWORD(v25) = *(_DWORD *)(a1 + 12);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 4);
  LODWORD(v25) = *(_DWORD *)(a1 + 20);
  v7 = v5 & v6 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 4);
  v25 = *(_QWORD *)(a1 + 24);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 32);
  v9 = v8 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 40);
  v10 = v7 & v9 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 48);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 56);
  v12 = v11 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 64);
  v13 = v12 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 72);
  v14 = v10 & v13 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 80);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 88);
  v16 = v15 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 96);
  v17 = v16 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 104);
  v18 = v17 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 112);
  v19 = v14 & v18 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v25 = *(_QWORD *)(a1 + 120);
  v20 = v19 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 8);
  v21 = *(_DWORD *)(a1 + 128);
  if (v21 == 1)
  {
    LODWORD(v25) = 1;
    goto LABEL_5;
  }
  if (!v21)
  {
    LODWORD(v25) = 0;
LABEL_5:
    v22 = v20 & (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 4);
    goto LABEL_7;
  }
  v22 = 0;
LABEL_7:
  v23 = *(_DWORD *)(a1 + 132);
  if (!v23)
  {
    LODWORD(v25) = 0;
    return v22 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 4);
  }
  if (v23 == 1)
  {
    LODWORD(v25) = 1;
    return v22 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v25, 4);
  }
  return 0;
}

__n128 cnnavigation::GalileoEphemerisDatabase::GetEphemerides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;

  if (*(_BYTE *)(a2 + 24) == 3)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v3 = a1 + 8;
    v4 = v5;
    if (v5)
    {
      v7 = *(_DWORD *)(a2 + 28) + 3000;
      v8 = v3;
      do
      {
        v9 = *(_DWORD *)(v4 + 32);
        v10 = v9 < v7;
        if (v9 >= v7)
          v11 = (uint64_t *)v4;
        else
          v11 = (uint64_t *)(v4 + 8);
        if (!v10)
          v8 = v4;
        v4 = *v11;
      }
      while (*v11);
      if (v8 != v3 && v7 >= *(_DWORD *)(v8 + 32))
      {
        std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v8 + 48));
        *(_QWORD *)(a3 + 32) = *(_QWORD *)(v8 + 72);
        v12 = *(_OWORD *)(v8 + 240);
        v13 = *(_OWORD *)(v8 + 256);
        v14 = *(_OWORD *)(v8 + 272);
        *(_QWORD *)(a3 + 248) = *(_QWORD *)(v8 + 288);
        *(_OWORD *)(a3 + 232) = v14;
        *(_OWORD *)(a3 + 216) = v13;
        *(_OWORD *)(a3 + 200) = v12;
        v15 = *(_OWORD *)(v8 + 176);
        v16 = *(_OWORD *)(v8 + 192);
        v17 = *(_OWORD *)(v8 + 208);
        *(_OWORD *)(a3 + 184) = *(_OWORD *)(v8 + 224);
        *(_OWORD *)(a3 + 168) = v17;
        *(_OWORD *)(a3 + 152) = v16;
        *(_OWORD *)(a3 + 136) = v15;
        v18 = *(_OWORD *)(v8 + 112);
        v19 = *(_OWORD *)(v8 + 128);
        v20 = *(_OWORD *)(v8 + 144);
        *(_OWORD *)(a3 + 120) = *(_OWORD *)(v8 + 160);
        *(_OWORD *)(a3 + 104) = v20;
        *(_OWORD *)(a3 + 88) = v19;
        *(_OWORD *)(a3 + 72) = v18;
        result = *(__n128 *)(v8 + 80);
        *(_OWORD *)(a3 + 56) = *(_OWORD *)(v8 + 96);
        *(__n128 *)(a3 + 40) = result;
      }
    }
  }
  return result;
}

__n128 cnnavigation::GalileoEphemerisDatabase::SetEphemerides(uint64_t **this, const cnnavigation::GalileoEphemerides *a2)
{
  char *v2;
  _OWORD *v6;
  int v7;
  char *v8;
  char *v9;
  char **v10;
  char **v11;
  char *v12;
  char *v13;
  int v14;
  BOOL v15;
  char **v16;
  int v17;
  char *v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t *v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38[2];
  char v39;

  v2 = (char *)a2 + 40;
  if (*((_BYTE *)a2 + 32) == 3 && *((_BYTE *)a2 + 40) != 0)
  {
    v6 = (_OWORD *)((char *)a2 + 8);
    v7 = *((_DWORD *)a2 + 9) + 3000;
    v9 = (char *)(this + 1);
    v8 = (char *)this[1];
    v10 = (char **)(this + 1);
    v11 = (char **)(this + 1);
    if (v8)
    {
      v12 = (char *)(this + 1);
      v13 = (char *)this[1];
      do
      {
        v14 = *((_DWORD *)v13 + 8);
        v15 = v14 < v7;
        if (v14 >= v7)
          v16 = (char **)v13;
        else
          v16 = (char **)(v13 + 8);
        if (!v15)
          v12 = v13;
        v13 = *v16;
      }
      while (*v16);
      if (v12 == v9 || v7 < *((_DWORD *)v12 + 8))
      {
        while (1)
        {
          while (1)
          {
            v11 = (char **)v8;
            v17 = *((_DWORD *)v8 + 8);
            if (v17 <= v7)
              break;
            v8 = *v11;
            v10 = v11;
            if (!*v11)
              goto LABEL_23;
          }
          if (v17 >= v7)
            break;
          v8 = v11[1];
          if (!v8)
          {
            v10 = v11 + 1;
            goto LABEL_23;
          }
        }
      }
      else
      {
        result.n128_f64[0] = *((double *)a2 + 7)
                           - *((double *)v12 + 12)
                           + (double)(*((_DWORD *)a2 + 12) - *((_DWORD *)v12 + 22)) * 604800.0;
        if (result.n128_f64[0] > 0.0)
        {
          std::string::operator=((std::string *)v12 + 2, (const std::string *)((char *)a2 + 8));
          *((_QWORD *)v12 + 9) = *((_QWORD *)a2 + 4);
          v28 = *((_OWORD *)v2 + 10);
          v29 = *((_OWORD *)v2 + 11);
          v30 = *((_OWORD *)v2 + 12);
          *((_QWORD *)v12 + 36) = *((_QWORD *)v2 + 26);
          *((_OWORD *)v12 + 16) = v29;
          *((_OWORD *)v12 + 17) = v30;
          *((_OWORD *)v12 + 15) = v28;
          v31 = *((_OWORD *)v2 + 6);
          v32 = *((_OWORD *)v2 + 7);
          v33 = *((_OWORD *)v2 + 9);
          *((_OWORD *)v12 + 13) = *((_OWORD *)v2 + 8);
          *((_OWORD *)v12 + 14) = v33;
          *((_OWORD *)v12 + 11) = v31;
          *((_OWORD *)v12 + 12) = v32;
          v34 = *((_OWORD *)v2 + 2);
          v35 = *((_OWORD *)v2 + 3);
          v36 = *((_OWORD *)v2 + 5);
          *((_OWORD *)v12 + 9) = *((_OWORD *)v2 + 4);
          *((_OWORD *)v12 + 10) = v36;
          *((_OWORD *)v12 + 7) = v34;
          *((_OWORD *)v12 + 8) = v35;
          result = *(__n128 *)v2;
          v37 = *((_OWORD *)v2 + 1);
          *((_OWORD *)v12 + 5) = *(_OWORD *)v2;
          *((_OWORD *)v12 + 6) = v37;
        }
      }
    }
    else
    {
LABEL_23:
      v18 = (char *)operator new(0x128uLL);
      v38[0] = (uint64_t)v18;
      v38[1] = (uint64_t)v9;
      v39 = 0;
      *((_DWORD *)v18 + 8) = v7;
      *((_QWORD *)v18 + 5) = off_1E25B96A0;
      v19 = v18 + 48;
      if (*((char *)a2 + 31) < 0)
      {
        sub_18D077798(v19, *((void **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        *(_OWORD *)v19 = *v6;
        *((_QWORD *)v18 + 8) = *((_QWORD *)v2 - 2);
      }
      *((_QWORD *)v18 + 9) = *((_QWORD *)a2 + 4);
      v20 = *((_OWORD *)v2 + 11);
      *((_OWORD *)v18 + 15) = *((_OWORD *)v2 + 10);
      *((_OWORD *)v18 + 16) = v20;
      *((_OWORD *)v18 + 17) = *((_OWORD *)v2 + 12);
      *((_QWORD *)v18 + 36) = *((_QWORD *)v2 + 26);
      v21 = *((_OWORD *)v2 + 7);
      *((_OWORD *)v18 + 11) = *((_OWORD *)v2 + 6);
      *((_OWORD *)v18 + 12) = v21;
      v22 = *((_OWORD *)v2 + 9);
      *((_OWORD *)v18 + 13) = *((_OWORD *)v2 + 8);
      *((_OWORD *)v18 + 14) = v22;
      v23 = *((_OWORD *)v2 + 3);
      *((_OWORD *)v18 + 7) = *((_OWORD *)v2 + 2);
      *((_OWORD *)v18 + 8) = v23;
      v24 = *((_OWORD *)v2 + 5);
      *((_OWORD *)v18 + 9) = *((_OWORD *)v2 + 4);
      *((_OWORD *)v18 + 10) = v24;
      v25 = *((_OWORD *)v2 + 1);
      *((_OWORD *)v18 + 5) = *(_OWORD *)v2;
      *((_OWORD *)v18 + 6) = v25;
      v39 = 1;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = v11;
      *v10 = v18;
      v26 = (uint64_t *)**this;
      if (v26)
      {
        *this = v26;
        v18 = *v10;
      }
      sub_18D083D78(this[1], (uint64_t *)v18);
      this[2] = (uint64_t *)((char *)this[2] + 1);
      v38[0] = 0;
      sub_18D083F10(v38);
    }
  }
  return result;
}

void sub_18D083D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 40) = off_1E25B93B0;
  sub_18D083F10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void cnnavigation::GalileoEphemerisDatabase::Reset(char **this)
{
  char *v2;

  v2 = (char *)(this + 1);
  sub_18D083F6C(this[1]);
  *this = v2;
  this[2] = 0;
  *(_QWORD *)v2 = 0;
}

uint64_t *sub_18D083D78(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_18D083F10(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v1 + 40) = off_1E25B96A0;
      if (*(char *)(v1 + 71) < 0)
        operator delete(*(void **)(v1 + 48));
    }
    operator delete((void *)v1);
  }
}

void sub_18D083F6C(char *a1)
{
  if (a1)
  {
    sub_18D083F6C(*(_QWORD *)a1);
    sub_18D083F6C(*((_QWORD *)a1 + 1));
    *((_QWORD *)a1 + 5) = off_1E25B96A0;
    if (a1[71] < 0)
      operator delete(*((void **)a1 + 6));
    operator delete(a1);
  }
}

double cnnavigation::LinearizedGravityModel::LinearizedGravityModel(cnnavigation::LinearizedGravityModel *this)
{
  double result;

  *(_QWORD *)this = &off_1E25B98F0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 129) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25B98F0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 129) = 0u;
  return result;
}

uint64_t cnnavigation::LinearizedGravityModel::LinearizedGravityModel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E25B98F0;
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = a2[1];
  *(_QWORD *)(a1 + 24) = a2[2];
  v15 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3))
  {
    v4 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v5 = 0uLL;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    v6 = 0;
    v7 = 0uLL;
    v8 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 56) = v17;
    *(_OWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    v5 = v12;
    v7 = v13;
    v4 = 1;
    v8 = v14;
    v6 = 0x40C3880000000000;
  }
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 120) = v8;
  *(_QWORD *)(a1 + 136) = v6;
  *(_BYTE *)(a1 + 144) = v4;
  return a1;
}

void sub_18D08414C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25B9250;
  _Unwind_Resume(a1);
}

double cnnavigation::LinearizedGravityModel::LinearizedGravityModel(cnnavigation::LinearizedGravityModel *this, const cnnavigation::LinearizedGravityModel *a2)
{
  double result;

  *(_QWORD *)this = &off_1E25B98F0;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
  result = *((double *)a2 + 17);
  *((double *)this + 17) = result;
  *((_BYTE *)this + 144) = *((_BYTE *)a2 + 144);
  return result;
}

double cnnavigation::LinearizedGravityModel::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    result = *(double *)(a2 + 136);
    *(double *)(a1 + 136) = result;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  }
  return result;
}

uint64_t cnnavigation::LinearizedGravityModel::ComputeLinearizedGravityModel(uint64_t a1, double *a2, int a3, int a4, double *a5, double *a6, uint64_t a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  if (!*(_BYTE *)(a1 + 144))
    return 0xFFFFFFFFLL;
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  if (sqrt(v8 * v8 + v7 * v7 + v9 * v9) <= 0.00000001)
    return 0xFFFFFFFFLL;
  v10 = v7 - *(double *)(a1 + 8);
  v11 = v8 - *(double *)(a1 + 16);
  v12 = v9 - *(double *)(a1 + 24);
  if (sqrt(v11 * v11 + v10 * v10 + v12 * v12) > *(double *)(a1 + 136))
    return 0xFFFFFFFFLL;
  *a5 = *(double *)(a1 + 32)
      - (v11 * *(double *)(a1 + 48)
       + *(double *)(a1 + 40) * v10
       + *(double *)(a1 + 56) * v12)
      + (v11 * (v10 * *(double *)(a1 + 72))
       + v10 * *(double *)(a1 + 64) * v10
       + v10 * *(double *)(a1 + 80) * v12
       + v11 * *(double *)(a1 + 88) * v10
       + v11 * *(double *)(a1 + 96) * v11
       + v11 * *(double *)(a1 + 104) * v12
       + v12 * *(double *)(a1 + 112) * v10
       + v12 * *(double *)(a1 + 120) * v11
       + v12 * *(double *)(a1 + 128) * v12)
      * -0.5;
  if (a3)
  {
    v15 = *(double *)(a1 + 56);
    v16 = v11 * *(double *)(a1 + 72) + *(double *)(a1 + 64) * v10 + *(double *)(a1 + 80) * v12;
    v17 = v11 * *(double *)(a1 + 96) + *(double *)(a1 + 88) * v10 + *(double *)(a1 + 104) * v12;
    v18 = v11 * *(double *)(a1 + 120) + *(double *)(a1 + 112) * v10 + *(double *)(a1 + 128) * v12;
    v19 = *(double *)(a1 + 48) + v17;
    *a6 = *(double *)(a1 + 40) + v16;
    a6[1] = v19;
    a6[2] = v15 + v18;
  }
  v13 = 0;
  if (a4)
  {
    *(_OWORD *)a7 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a7 + 16) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a7 + 32) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a7 + 48) = *(_OWORD *)(a1 + 112);
    *(_QWORD *)(a7 + 64) = *(_QWORD *)(a1 + 128);
  }
  return v13;
}

uint64_t cnnavigation::LinearizedGravityModel::GetGravitationalPotential(cnnavigation::LinearizedGravityModel *this, double *a2, double *a3)
{
  _BYTE v4[72];
  double v5[4];

  v5[3] = *(double *)MEMORY[0x1E0C80C00];
  return cnnavigation::LinearizedGravityModel::ComputeLinearizedGravityModel((uint64_t)this, a2, 0, 0, a3, v5, (uint64_t)v4);
}

uint64_t cnnavigation::LinearizedGravityModel::GetGravitationalPotential(cnnavigation::LinearizedGravityModel *this, double *a2, double *a3, double *a4)
{
  _BYTE v5[72];

  return cnnavigation::LinearizedGravityModel::ComputeLinearizedGravityModel((uint64_t)this, a2, 1, 0, a3, a4, (uint64_t)v5);
}

uint64_t cnnavigation::LinearizedGravityModel::GetGravitationalPotential(uint64_t a1, double *a2, double *a3, double *a4, uint64_t a5)
{
  return cnnavigation::LinearizedGravityModel::ComputeLinearizedGravityModel(a1, a2, 1, 1, a3, a4, a5);
}

uint64_t cnnavigation::LinearizedGravityModel::GetGravitationalAcceleration(cnnavigation::LinearizedGravityModel *this, double *a2, double *a3)
{
  uint64_t v4;
  double v5;

  return cnnavigation::LinearizedGravityModel::ComputeLinearizedGravityModel((uint64_t)this, a2, 1, 0, &v5, a3, (uint64_t)&v4);
}

uint64_t cnnavigation::LinearizedGravityModel::GetGravitationalAcceleration(uint64_t a1, double *a2, double *a3, uint64_t a4)
{
  double v5;

  return cnnavigation::LinearizedGravityModel::ComputeLinearizedGravityModel(a1, a2, 1, 1, &v5, a3, a4);
}

double cnnavigation::LinearizedGravityModel::UpdateLinearization(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[4];
  double v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  if (!(*(unsigned int (**)(uint64_t, _QWORD *, uint64_t *, __int128 *, _OWORD *))(*(_QWORD *)a3 + 32))(a3, a2, &v12, &v13, v10))
  {
    *(_QWORD *)(a1 + 8) = *a2;
    *(_QWORD *)(a1 + 16) = a2[1];
    v6 = a2[2];
    *(_QWORD *)(a1 + 136) = 0x40C3880000000000;
    *(_BYTE *)(a1 + 144) = 1;
    v7 = v12;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 56) = v14;
    v8 = v10[1];
    *(_OWORD *)(a1 + 64) = v10[0];
    *(_OWORD *)(a1 + 80) = v8;
    v9 = v10[3];
    *(_OWORD *)(a1 + 96) = v10[2];
    *(_OWORD *)(a1 + 112) = v9;
    result = v11;
    *(double *)(a1 + 128) = v11;
  }
  return result;
}

uint64_t cnnavigation::LinearizedGravityModel::UpdateLinearization(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, double a5, double a6)
{
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = a2[1];
  *(_QWORD *)(a1 + 24) = a2[2];
  *(double *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = *a3;
  *(_QWORD *)(a1 + 48) = a3[1];
  *(_QWORD *)(a1 + 56) = a3[2];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a4 + 48);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a4 + 64);
  *(double *)(a1 + 136) = a5;
  *(_BYTE *)(a1 + 144) = 1;
  return 0;
}

_QWORD *sub_18D0845E0(_QWORD *result)
{
  *result = &unk_1E25B9250;
  return result;
}

void sub_18D0845F4(_QWORD *a1)
{
  *a1 = &unk_1E25B9250;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D084618(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t cnnavigation::ECEFToPZ9002(float64x2_t *this, double *a2, double *a3)
{
  double v3;

  v3 = this[1].f64[0];
  *(float64x2_t *)a2 = vaddq_f64(*this, (float64x2_t)xmmword_18D30B720);
  a2[2] = v3 + -0.18;
  return 0;
}

uint64_t cnnavigation::ECEFToPZ9002(float64x2_t *a1, float64x2_t *a2, int a3, _QWORD *a4)
{
  double v4;

  v4 = a1[1].f64[0];
  *a2 = vaddq_f64(*a1, (float64x2_t)xmmword_18D30B720);
  a2[1].f64[0] = v4 + -0.18;
  if (a3)
  {
    *a4 = 0x3FF0000000000000;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
    a4[4] = 0x3FF0000000000000;
    a4[5] = 0;
    a4[6] = 0;
    a4[7] = 0;
    a4[8] = 0x3FF0000000000000;
  }
  return 0;
}

uint64_t cnnavigation::ECEFToPZ9002(float64x2_t *a1, float64x2_t *a2, _QWORD *a3)
{
  double v3;

  v3 = a1[1].f64[0];
  *a2 = vaddq_f64(*a1, (float64x2_t)xmmword_18D30B720);
  a2[1].f64[0] = v3 + -0.18;
  *a3 = 0x3FF0000000000000;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0x3FF0000000000000;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0x3FF0000000000000;
  return 0;
}

uint64_t cnnavigation::PZ9002ToECEF(float64x2_t *this, double *a2, double *a3)
{
  double v3;

  v3 = this[1].f64[0];
  *(float64x2_t *)a2 = vaddq_f64(*this, (float64x2_t)xmmword_18D30B550);
  a2[2] = v3 + 0.18;
  return 0;
}

uint64_t cnnavigation::PZ9002ToECEF(float64x2_t *a1, float64x2_t *a2, int a3, _QWORD *a4)
{
  double v4;

  v4 = a1[1].f64[0];
  *a2 = vaddq_f64(*a1, (float64x2_t)xmmword_18D30B550);
  a2[1].f64[0] = v4 + 0.18;
  if (a3)
  {
    *a4 = 0x3FF0000000000000;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
    a4[4] = 0x3FF0000000000000;
    a4[5] = 0;
    a4[6] = 0;
    a4[7] = 0;
    a4[8] = 0x3FF0000000000000;
  }
  return 0;
}

uint64_t cnnavigation::PZ9002ToECEF(float64x2_t *a1, float64x2_t *a2, _QWORD *a3)
{
  double v3;

  v3 = a1[1].f64[0];
  *a2 = vaddq_f64(*a1, (float64x2_t)xmmword_18D30B550);
  a2[1].f64[0] = v3 + 0.18;
  *a3 = 0x3FF0000000000000;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0x3FF0000000000000;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0x3FF0000000000000;
  return 0;
}

uint64_t cnnavigation::GalileoTimeToJulianTime(double *a1, int a2, uint64_t a3)
{
  int v3;
  double v4;
  uint64_t result;
  int v6;
  double v7;

  v3 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v4 = a1[1];
  result = 0xFFFFFFFFLL;
  if (v4 >= 0.0 && v4 < 604800.0)
  {
    result = 0;
    v6 = vcvtmd_s64_f64(v4 / 86400.0);
    v7 = (v4 - (double)a2) / 86400.0 + 0.5 - (double)v6;
    *(_DWORD *)a3 = v6 - v3 + 8 * v3 + 2451412 + vcvtmd_s64_f64(v7);
    *(double *)(a3 + 8) = v7 - floor(v7);
  }
  return result;
}

double cnnavigation::JulianTimeToGalileoTime(uint64_t a1, int a2, uint64_t a3)
{
  double v3;
  double result;
  unsigned int v5;

  v3 = *(double *)(a1 + 8) + -0.5;
  result = v3 - floor(v3);
  v5 = *(_DWORD *)a1 - 2451412 + vcvtmd_s64_f64(v3);
  if ((v5 & 0x80000000) == 0)
  {
    *(_DWORD *)a3 = v5 / 7;
    result = result * 86400.0 + (double)(v5 % 7) * 86400.0 + (double)a2;
    *(double *)(a3 + 8) = result;
    if (result >= 604800.0)
    {
      *(_DWORD *)a3 = v5 / 7 + 1;
      result = result + -604800.0;
      *(double *)(a3 + 8) = result;
    }
  }
  return result;
}

uint64_t cnnavigation::GLONASSFindSat(int a1, uint64_t a2, double *a3, double *a4, double *a5, double a6, double a7)
{
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __double2 v16;
  int v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t i;
  double v28;
  __double2 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v45;
  double v46;
  double v47;
  int v48;
  double v50;
  double v52;
  double v54[3];
  double v55[3];
  double v56[3];
  double v57[3];
  double v58[3];
  double v59[3];
  _QWORD v60[3];
  double v61[3];
  double v62[3];
  _QWORD v63[3];
  double v64[3];
  double v65[3];
  double v66[3];
  double v67[3];
  double v68[3];
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 16))
    return 1;
  v8 = *(_DWORD *)(a2 + 20);
  v10 = *(double *)(a2 + 24);
  v9 = *(double *)(a2 + 32);
  v11 = *(double *)(a2 + 40);
  v12 = *(double *)(a2 + 48);
  v13 = *(double *)(a2 + 64);
  v14 = *(double *)(a2 + 72);
  v46 = *(double *)(a2 + 80);
  v47 = *(double *)(a2 + 56);
  v15 = (double)(v8 - 1) / 36525.0 + -0.04 + (v9 + -3.0) / 86400.0 / 36525.0;
  v41 = (v15 * 36000.7701 + 100.460618 + v15 * v15 * 0.00038793 + v15 * (v15 * v15) * -0.000000026) * 0.0174532925
      + (v10 + -10800.0) * 0.00007292115;
  v16 = __sincos_stret(v41);
  v17 = 0;
  v75 = v11 * v16.__cosval - v12 * v16.__sinval;
  v76 = v12 * v16.__cosval + v11 * v16.__sinval;
  v77 = v47;
  v72 = v13 * v16.__cosval - v14 * v16.__sinval + v76 * -0.00007292115;
  v73 = v14 * v16.__cosval + v13 * v16.__sinval + v75 * 0.00007292115;
  v74 = v46;
  v18 = a6 - v10 + (double)(a1 - v8) * 86400.0 + a7 - v9;
  v19 = vcvtpd_s64_f64(fabs(v18) / 60.0);
  if (v19 <= 1)
    v19 = 1;
  v45 = v19;
  v40 = a6 - v10 + (double)(a1 - v8) * 86400.0 + a7 - v9;
  v20 = v18 / (double)v19;
  v21 = v20 * 0.5;
  do
  {
    v48 = v17;
    v22 = v75;
    v23 = v76;
    v61[0] = v75;
    v61[1] = v76;
    v24 = v77;
    v61[2] = v77;
    v25 = v73;
    v52 = v72;
    *(double *)v60 = v72;
    *(double *)&v60[1] = v73;
    v50 = v74;
    *(double *)&v60[2] = v74;
    if (cnnavigation::details::dyn_GLONASS(v61, v60, a2, &v69, v68))
      return 2;
    v59[0] = v22 + v21 * v69;
    v59[1] = v23 + v21 * v70;
    v59[2] = v24 + v21 * v71;
    v58[0] = v52 + v21 * v68[0];
    v58[1] = v25 + v21 * v68[1];
    v58[2] = v50 + v21 * v68[2];
    if (cnnavigation::details::dyn_GLONASS(v59, v58, a2, v67, v66))
      return 2;
    v57[0] = v22 + v21 * v67[0];
    v57[1] = v23 + v21 * v67[1];
    v57[2] = v24 + v21 * v67[2];
    v56[0] = v52 + v21 * v66[0];
    v56[1] = v25 + v21 * v66[1];
    v56[2] = v50 + v21 * v66[2];
    if (cnnavigation::details::dyn_GLONASS(v57, v56, a2, v65, v64))
      return 2;
    v55[0] = v22 + v20 * v65[0];
    v55[1] = v23 + v20 * v65[1];
    v55[2] = v24 + v20 * v65[2];
    v54[0] = v52 + v20 * v64[0];
    v54[1] = v25 + v20 * v64[1];
    v54[2] = v50 + v20 * v64[2];
    if (cnnavigation::details::dyn_GLONASS(v55, v54, a2, v63, v62))
      return 2;
    for (i = 0; i != 3; ++i)
    {
      *(double *)((char *)&v75 + i * 8) = *(double *)((char *)&v75 + i * 8)
                                        + v20
                                        * (*(double *)((char *)&v69 + i * 8)
                                         + v67[i] * 2.0
                                         + v65[i] * 2.0
                                         + *(double *)&v63[i])
                                        / 6.0;
      *(double *)((char *)&v72 + i * 8) = *(double *)((char *)&v72 + i * 8)
                                        + v20 * (v68[i] + v66[i] * 2.0 + v64[i] * 2.0 + v62[i]) / 6.0;
    }
    v17 = v48 + 1;
  }
  while (v48 + 1 != v45);
  if (a5 && cnnavigation::details::dyn_GLONASS(&v75, &v72, a2, v68, &v69))
    return 2;
  v28 = v75;
  v29 = __sincos_stret(v41 + v40 * 0.00007292115);
  v30 = v77;
  v31 = v29.__cosval * v76 - v28 * v29.__sinval;
  *a3 = v29.__sinval * v76 + v28 * v29.__cosval;
  a3[1] = v31;
  a3[2] = v30;
  if (a4)
  {
    v32 = v72;
    v33 = v73;
    *a4 = v29.__sinval * v73 + v72 * v29.__cosval + v31 * 0.00007292115;
    v34 = v29.__cosval * v33 - v32 * v29.__sinval;
    v35 = v74;
    v36 = v34 + *a3 * -0.00007292115;
    a4[1] = v36;
    a4[2] = v35;
    if (a5)
    {
      v37 = v69;
      v38 = v70;
      *a5 = v29.__sinval * v70 + v69 * v29.__cosval + *a3 * 0.00000000531749412 + v36 * 0.0001458423;
      v39 = v71;
      a5[1] = v29.__cosval * v38 - v37 * v29.__sinval + a3[1] * 0.00000000531749412 + *a4 * -0.0001458423;
      a5[2] = v39;
    }
  }
  else if (a5)
  {
    return 3;
  }
  return 0;
}

uint64_t cnnavigation::details::dyn_GLONASS(double *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, double *a5)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __double2 v13;
  int v14;
  long double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __double2 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __double2 v36;
  uint64_t result;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;

  if (!*(_BYTE *)(a3 + 16))
    return 1;
  v8 = a1[2];
  v72 = a1[1];
  v73 = *a1;
  v9 = sqrt(v72 * v72 + v73 * v73 + v8 * v8);
  v67 = 3.98600442e14 / v9;
  v69 = v8;
  v65 = v9;
  v62 = v8 / v9;
  v70 = v62 * (v62 * 5.0);
  v71 = 6378136.0 / v9 * (6378136.0 / v9);
  v10 = ((double)(*(_DWORD *)(a3 + 20) - 1)
       + 7670.0
       + 27392.375
       + (*(double *)(a3 + 24) + 16.0 + *(double *)(a3 + 32)) / 86400.0)
      / 36525.0;
  v11 = v10 * 8328.6911 + -1.11518496;
  v60 = v10;
  v12 = v10 * 628.301946 + 6.25658377;
  v13 = __sincos_stret(v10 * -33.7571462 + 4.52360151);
  v14 = 10;
  v15 = v11;
  v16 = v12;
  do
  {
    v15 = v11 + sin(v15) * 0.054900489;
    v16 = v12 + sin(v16) * 0.016719;
    --v14;
  }
  while (v14);
  v17 = v67 / v65;
  v68 = v72 / v65 * (v67 / v65);
  v64 = v73 / v65 * v17;
  v66 = v62 * v17;
  v57 = v60 * 71.0180413 + 5.83515153;
  v63 = v60 * 0.0300052642 + 4.90822947;
  v18 = v13.__cosval * -v13.__cosval * 0.0040296679 + 1.0;
  v19 = v13.__sinval * v13.__cosval * 0.0040296679;
  v59 = v13.__cosval * 0.0896833182 * 0.917459783 + v18 * 0.39782854;
  v61 = v13.__cosval * 0.0896833182 * -0.39782854 + v18 * 0.917459783;
  v58 = v13.__sinval * 0.0896833182 * -0.917459783 + v19 * 0.39782854;
  v20 = __sincos_stret(v15);
  v21 = v20.__cosval * -0.054900489 + 1.0;
  v22 = v20.__sinval * 0.998491831 / v21;
  v23 = (v20.__cosval + -0.054900489) / v21;
  v24 = __sincos_stret(v16);
  v25 = v24.__cosval * -0.016719 + 1.0;
  v26 = v24.__sinval * 0.999860228 / v25;
  v27 = v21 * 384385243.0;
  v28 = (v24.__cosval + -0.016719) / v25;
  v29 = __sincos_stret(v57);
  v30 = v29.__sinval * v23 + v22 * v29.__cosval;
  v31 = v23 * v29.__cosval - v22 * v29.__sinval;
  v32 = (v13.__sinval * -v13.__sinval * 0.0040296679 + 1.0) * v31 + v30 * v19;
  v33 = (v13.__sinval * 0.0896833182 * 0.39782854 + v19 * 0.917459783) * v31 + v30 * v61;
  v34 = v58 * v31 + v30 * v59;
  v35 = v25 * 1.49598e11;
  v36 = __sincos_stret(v63);
  result = 0;
  v38 = v28 * v36.__cosval - v26 * v36.__sinval;
  v39 = v36.__sinval * v28 + v26 * v36.__cosval;
  v40 = v39 * 0.917459783;
  v41 = v39 * 0.39782854;
  v42 = 4.902835e12 / v27 / v27;
  v43 = v32 - v73 / v27;
  v44 = v33 - v72 / v27;
  v45 = v34 - v69 / v27;
  v46 = sqrt(v44 * v44 + v43 * v43 + v45 * v45);
  v47 = v38 - v73 / v35;
  v48 = v40 - v72 / v35;
  v49 = v41 - v69 / v35;
  v50 = sqrt(v48 * v48 + v47 * v47 + v49 * v49);
  v51 = 1.0 / v46 * (1.0 / v46 * (1.0 / v46));
  v52 = 1.0 / v50 * (1.0 / v50 * (1.0 / v50));
  v53 = v42 * -(v32 - v43 * v51);
  v54 = v42 * -(v33 - v44 * v51);
  v55 = v42 * -(v34 - v45 * v51);
  v56 = 1.325263e20 / v35 / v35;
  *a4 = *a2;
  a4[1] = a2[1];
  a4[2] = a2[2];
  *a5 = v53 + v56 * -(v38 - v47 * v52) - (v64 - v71 * (v64 * -0.001623939) * (1.0 - v70));
  a5[1] = v54 + v56 * -(v40 - v48 * v52) - (v68 - v71 * (v68 * -0.001623939) * (1.0 - v70));
  a5[2] = v55 + v56 * -(v41 - v49 * v52) - (v66 - v71 * (v66 * -0.001623939) * (3.0 - v70));
  return result;
}

uint64_t cnnavigation::details::dyn_GLONASS(float64x2_t *a1, _QWORD *a2, float64x2_t *a3, uint64_t a4, _QWORD *a5, float64x2_t *a6)
{
  uint64_t result;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  double v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;

  if (!*(_BYTE *)(a4 + 16))
    return 1;
  result = 0;
  v8 = a1[1].f64[0];
  v9 = a3[1].f64[0];
  *(double *)&v10 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(*a1, *a1).f64[1]), a1->f64[0], a1->f64[0])+ v8 * v8);
  v11 = 3.98600442e14 / *(double *)&v10 / *(double *)&v10;
  v12 = 6378136.0 / *(double *)&v10 * (6378136.0 / *(double *)&v10);
  v13 = vdivq_f64(*a1, (float64x2_t)vdupq_lane_s64(v10, 0));
  v14 = v8 / *(double *)&v10;
  v15 = v14 * (v14 * 5.0);
  v16 = vmulq_n_f64(v13, v11);
  v17 = v14 * v11;
  v18 = *a3;
  *a5 = *a2;
  a5[1] = a2[1];
  a5[2] = a2[2];
  *a6 = vaddq_f64(v18, vmlaq_n_f64(vnegq_f64(v16), vmulq_n_f64(vmulq_f64(v16, (float64x2_t)vdupq_n_s64(0xBF5A9B4B395321AALL)), v12), 1.0 - v15));
  a6[1].f64[0] = v9 - (v17 - v12 * (v17 * -0.001623939) * (3.0 - v15));
  return result;
}

uint64_t cnnavigation::GLONASSFindSat(cnnavigation *this, uint64_t a2, double a3, double a4, const cnnavigation::GLONASSAlmanac *a5, double *a6, double *a7, double *a8)
{
  double v11;
  long double v12;
  double v13;
  long double v14;
  long double v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  long double v27;
  long double v28;
  double v29;
  __double2 v30;
  double v31;
  double v32;
  double v33;
  __double2 v34;
  __double2 v35;
  double sinval;
  double v37;
  __double2 v38;
  __double2 v39;
  double v40;
  double v41;
  double v42;
  __double2 v43;
  double v44;
  __double2 v45;
  double v46;
  double v47;
  __double2 v48;
  __double2 v49;
  double v50;
  double v51;
  double v52;
  double v53;
  long double v54;
  long double v55;
  double v56;
  double v57;
  unsigned int v58;
  double v59;
  long double v60;
  double v61;
  double v62;
  long double v63;
  long double v64;
  long double v65;
  double v66;
  double v67;
  __double2 v68;
  __double2 v69;
  __double2 v70;
  double v71;
  double v72;
  double v73;
  long double v74;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  long double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double cosval;
  double v116;
  double v117;
  double v118;
  double v119;
  long double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  long double v133;

  if (!*(_BYTE *)(a2 + 16))
    return 1;
  v11 = *(double *)(a2 + 80) + 43200.0;
  v122 = a3 - *(double *)(a2 + 24) + (double)((int)this - *(_DWORD *)(a2 + 20)) * 86400.0 + a4 - *(double *)(a2 + 32);
  v104 = *(double *)(a2 + 64);
  v12 = *(double *)(a2 + 72) + 1.09955743;
  v123 = floor(v122 / v11);
  v112 = v11;
  v114 = *(double *)(a2 + 88);
  v118 = v11 + (v123 * 2.0 + 1.0) * v114;
  v13 = *(double *)(a2 + 96);
  v107 = *(double *)(a2 + 104);
  v109 = -v13;
  v14 = 1.0 - v13 * v13;
  v125 = v13;
  v15 = v13 * cos(v107) + 1.0;
  v120 = v12;
  v116 = sin(v12);
  v16 = 0;
  v17 = v14;
  v18 = (v116 * -2.5 * v116 + 2.0) * pow(v14, 1.5) / (v15 * v15) + v15 * (v15 * v15) / v14;
  v19 = 0.0;
  v20 = v118;
  v21 = v118;
  do
  {
    v22 = pow(v20 * v20 / 6.28318531 / 6.28318531 * 3.98600442e14, 0.333333333);
    v23 = v17 * v22;
    if (v16 > 8)
      break;
    v20 = v118 / (6378136.0 / v23 * (6378136.0 / v23 * -0.00162393863) * v18 + 1.0);
    v24 = vabdd_f64(v22, v19);
    ++v16;
    v19 = v22;
  }
  while (v24 >= 0.1);
  v25 = 6.28318531 / v118;
  v119 = cos(v120);
  v103 = -(6.28318531 / v21 * 0.00162393863 * 6378136.0 * 6378136.0 / v23 / v23 * v119 + 0.00007292115);
  v26 = v107
      + (v119 * -5.0 * v119 + 1.0) * (6.28318531 / v21 * 0.000811969313 * 6378136.0 * -6378136.0 / v23 / v23) * v122;
  v27 = tan(v26 * 0.5);
  v28 = atan2(sqrt(1.0 - v125) * v27, sqrt(v125 + 1.0)) * -2.0;
  v99 = v26 + v28 + v109 * sin(v28);
  v29 = v99 + v25 * (v122 - v112 * v123 + -(v114 * v123) * v123);
  v105 = 4.06806188e13 / v22 / v22 * 0.00162393863;
  v30 = __sincos_stret(v26);
  v31 = v125 * v30.__cosval;
  v32 = v125 * v30.__sinval;
  v33 = v116;
  v128 = v33 * -1.5 * v33 + 1.0;
  v132 = v128 * (v105 + v105);
  v34 = __sincos_stret(v29);
  v113 = v125 * v30.__sinval * v34.__sinval;
  cosval = v34.__cosval;
  v110 = v33 * (v33 * v105);
  v35 = __sincos_stret(v29 + v29);
  sinval = v35.__sinval;
  v37 = v35.__cosval;
  v130 = v125 * v30.__cosval * 3.5;
  v101 = v29;
  v38 = __sincos_stret(v29 * 3.0);
  v102 = v110
       * (v35.__cosval
        + v125 * v30.__cosval * -0.5 * v34.__cosval
        + v125 * v30.__sinval * 0.5 * v34.__sinval
        + v130 * v38.__cosval
        + v125 * v30.__sinval * 3.5 * v38.__sinval);
  v108 = v128 * v105;
  v124 = v125 * v30.__cosval * 1.5;
  v129 = v125 * v30.__sinval * 1.5;
  v39 = __sincos_stret(v29 * 4.0);
  v92 = v125 * v30.__cosval * -8.5;
  v91 = v125 * v30.__sinval * 8.5;
  v40 = v116;
  v90 = v40 * (v40 * (v105 * -0.25));
  v41 = v119;
  v94 = v41 * -(v105 * 0.5 * v41) * (v125 * v30.__cosval);
  v98 = v90
      * (v34.__sinval
       + v38.__sinval * -2.33333333
       + v125 * v30.__cosval * 5.0 * v35.__sinval
       + v31 * -8.5 * v39.__sinval
       + v32 * 8.5 * v39.__cosval
       + v32 * v37)
      + v108 * (v34.__sinval + v31 * 1.5 * sinval - v32 * 1.5 * v37)
      + v94 * sinval;
  v93 = v41 * (v41 * (v105 * 0.5)) * (v125 * v30.__sinval);
  v97 = v90
      * (v38.__cosval * -2.33333333
       - cosval
       + v32 * -5.0 * sinval
       + v31 * -8.5 * v39.__cosval
       - v32 * 8.5 * v39.__sinval
       + v31 * v37)
      + v108 * (cosval + v31 * 1.5 * v37 + v32 * 1.5 * sinval)
      + v93 * sinval;
  v100 = -v105;
  v42 = v125 * v30.__sinval * -2.5 * v34.__cosval + v130 * v34.__sinval + v35.__sinval * -0.5;
  v79 = v125 * v30.__cosval * 1.16666667;
  v87 = v125 * v30.__sinval * -1.75;
  v88 = v125 * v30.__cosval * 1.75;
  v86 = v125 * v30.__sinval * -0.291666667;
  v84 = v40 * (v40 * (v105 * 3.0));
  v85 = v125 * v30.__cosval * -0.291666667;
  v83 = v125 * v30.__sinval * -0.680555556;
  v76 = v125 * v30.__cosval;
  v82 = v125 * v30.__cosval * 0.680555556;
  v96 = v125 * v30.__sinval * 2.33333333;
  v78 = v125 * v30.__sinval * 1.16666667;
  v77 = v125 * v30.__sinval;
  v95 = v42 - v79 * v38.__sinval + v78 * v38.__cosval;
  v80 = v125 * v30.__cosval * 2.33333333;
  v81 = v41 * (v41 * v105);
  v89 = v84
      * (v31 * -0.291666667 * v34.__sinval
       + v32 * -0.291666667 * cosval
       + v32 * -0.680555556 * v38.__cosval
       + v31 * 0.680555556 * v38.__sinval
       + v35.__sinval * 0.25)
      + v132 * (v32 * -1.75 * cosval + v31 * 1.75 * v34.__sinval)
      + v81 * (v42 + v79 * v38.__sinval + v32 * 1.16666667 * v38.__cosval);
  v106 = v119 * (v116 * (v105 * 0.5));
  v43 = __sincos_stret(v99);
  v44 = v43.__cosval;
  v117 = v125 * v30.__sinval * v43.__sinval;
  v45 = __sincos_stret(v99 + v99);
  v46 = v45.__sinval;
  v47 = v45.__cosval;
  v48 = __sincos_stret(v99 * 3.0);
  v111 = v110
       * (v45.__cosval
        + v125 * v30.__cosval * -0.5 * v43.__cosval
        + v125 * v30.__sinval * 0.5 * v43.__sinval
        + v130 * v48.__cosval
        + v125 * v30.__sinval * 3.5 * v48.__sinval);
  v49 = __sincos_stret(v99 * 4.0);
  v121 = v120 + v106 * (v35.__cosval + v113 - v31 * v34.__cosval + v31 * 2.33333333 * v38.__cosval + v96 * v38.__sinval);
  v50 = v90
      * (v43.__sinval
       + v48.__sinval * -2.33333333
       + v125 * v30.__cosval * 5.0 * v45.__sinval
       + v92 * v49.__sinval
       + v91 * v49.__cosval
       + v125 * v30.__sinval * v47)
      + v108 * (v43.__sinval + v124 * v46 - v129 * v47)
      + v94 * v46;
  v51 = v90
      * (v48.__cosval * -2.33333333
       - v44
       + v125 * v30.__sinval * -5.0 * v46
       + v92 * v49.__cosval
       - v91 * v49.__sinval
       + v125 * v30.__cosval * v47)
      + v108 * (v44 + v124 * v47 + v129 * v46)
      + v93 * v46;
  v52 = v125 * v30.__sinval * -2.5 * v43.__cosval + v130 * v43.__sinval + v45.__sinval * -0.5;
  v126 = v52 - v79 * v48.__sinval;
  v53 = v84 * (v85 * v43.__sinval + v86 * v44 + v83 * v48.__cosval + v82 * v48.__sinval + v45.__sinval * 0.25)
      + v132 * (v87 * v44 + v88 * v43.__sinval)
      + v81 * (v52 + v79 * v48.__sinval + v78 * v48.__cosval);
  v54 = v77 + v98 - v50;
  v55 = v76 + v97 - v51;
  v56 = sqrt(v55 * v55 + v54 * v54);
  v57 = atan2(v54, v55);
  v58 = 0;
  v59 = v101 + v89 - v53 - v57;
  v60 = v59;
  do
  {
    v61 = v59 + v56 * sin(v60);
    if (v58 > 3)
      break;
    v62 = vabdd_f64(v61, v60);
    ++v58;
    v60 = v61;
  }
  while (v62 >= 0.000000001);
  v63 = tan(v61 * 0.5);
  v64 = atan2(sqrt(v56 + 1.0) * v63, sqrt(1.0 - v56));
  v65 = v64 + v64;
  v66 = v57 + v65;
  v67 = (v22 + v22 * (v102 + v132 * (v113 + v76 * v34.__cosval) - (v111 + v132 * (v117 + v76 * v43.__cosval))))
      * (1.0 - v56 * v56);
  v133 = v65;
  v131 = v56 * cos(v65) + 1.0;
  v68 = __sincos_stret(v66);
  v69 = __sincos_stret(v104 + v103 * v122 + v119 * v100 * v95 - v119 * v100 * (v126 + v78 * v48.__cosval));
  v70 = __sincos_stret(v121 - v106
                            * (v45.__cosval + v117 - v76 * v43.__cosval + v80 * v48.__cosval + v96 * v48.__sinval));
  v71 = v70.__cosval * -(v68.__sinval * v69.__sinval) + v68.__cosval * v69.__cosval;
  v72 = v67 / v131 * (v70.__cosval * (v69.__cosval * v68.__sinval) + v68.__cosval * v69.__sinval);
  *(double *)a5 = v67 / v131 * v71;
  *((double *)a5 + 1) = v72;
  *((double *)a5 + 2) = v67 / v131 * (v70.__sinval * v68.__sinval);
  if (a6)
  {
    v127 = v67 / v131 * v71;
    v73 = sqrt(3.98600442e14 / v67);
    v74 = v56 * v73 * sin(v133);
    *a6 = v74 * (v70.__cosval * -(v68.__sinval * v69.__sinval) + v68.__cosval * v69.__cosval)
        - v73 * v131 * (v70.__cosval * (v69.__sinval * v68.__cosval) + v68.__sinval * v69.__cosval)
        + v72 * 0.00007292115;
    a6[1] = v74 * (v70.__cosval * (v69.__cosval * v68.__sinval) + v68.__cosval * v69.__sinval)
          - v73 * v131 * (v70.__cosval * -(v68.__cosval * v69.__cosval) + v68.__sinval * v69.__sinval)
          + v127 * -0.00007292115;
    a6[2] = v70.__sinval * (v68.__cosval * (v73 * v131)) + v74 * v68.__sinval * v70.__sinval;
    if (a7)
    {
      *a7 = 0.0;
      a7[1] = 0.0;
      a7[2] = 0.0;
    }
  }
  else if (a7)
  {
    return 2;
  }
  return 0;
}

uint64_t cnnavigation::NullTroposphereModel::GetTroposphericDelay(cnnavigation::NullTroposphereModel *this, int a2, double a3, const double *a4, const double *a5, double *a6)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  if (a4)
  {
    if (a5)
    {
      result = 0;
      *a6 = 0.0;
    }
  }
  return result;
}

double cnnavigation::NullTroposphereModel::GetTroposphericDelay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  double result;

  if (a3)
  {
    if (a4)
    {
      *a5 = 0;
      *(_QWORD *)(a6 + 48) = 0;
      result = 0.0;
      *(_OWORD *)(a6 + 16) = 0u;
      *(_OWORD *)(a6 + 32) = 0u;
      *(_OWORD *)a6 = 0u;
    }
  }
  return result;
}

_QWORD *sub_18D085EA4(_QWORD *result)
{
  *result = &unk_1E25B9488;
  return result;
}

void sub_18D085EB8(_QWORD *a1)
{
  *a1 = &unk_1E25B9488;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D085EDC()
{
  return 1;
}

uint64_t *cnnavigation::GNSSData::GNSSData(uint64_t *a1, const std::string *a2, std::string *a3, std::string *a4)
{
  uint64_t v8;

  v8 = operator new();
  cnnavigation::NORADTLEEphemerides::NORADTLEEphemerides(v8, a2, a3, a4);
  *a1 = v8;
  return a1;
}

void sub_18D085F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1092C40658D4D87);
  _Unwind_Resume(a1);
}

void cnnavigation::GNSSData::~GNSSData(cnnavigation::GNSSData *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    sub_18D0860F4(v2);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    sub_18D0860F4(v2);
}

uint64_t cnnavigation::GNSSData::IsValid(cnnavigation::GNSSData *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 8);
}

uint64_t cnnavigation::GNSSData::Id(cnnavigation::GNSSData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 112);
}

uint64_t *cnnavigation::GNSSData::Description@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *this;
  if (*(char *)(*this + 111) < 0)
    return (uint64_t *)sub_18D077798((_BYTE *)a2, *(void **)(v2 + 88), *(_QWORD *)(v2 + 96));
  v3 = *(_OWORD *)(v2 + 88);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 104);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t cnnavigation::GNSSData::Map(cnnavigation::GNSSData *this, const cnnavigation::TAITime *a2, double *a3, double *a4, double *a5)
{
  __int16 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v6 = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return cnnavigation::GNSSData::Map(this, a2, (const cnnavigation::GNSSUTCParameters *)&v6, a3, a4, a5);
}

uint64_t cnnavigation::GNSSData::Map(cnnavigation::GNSSData *this, const cnnavigation::TAITime *a2, const cnnavigation::GNSSUTCParameters *a3, double *a4, double *a5, double *a6)
{
  uint64_t result;
  __int128 v12;
  _BYTE v13[96];

  result = cnnavigation::LLAToECEF(a4, 1, (double *)&v12, 0, (uint64_t)v13);
  if (!(_DWORD)result)
    return cnnavigation::details::GNSSElAz((uint64_t)a2, (uint64_t)a3, &v12, *(_QWORD *)this, 1, a5, a6, 0, (uint64_t)v13);
  return result;
}

void sub_18D0860F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25B9740;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)a1 = off_1E25B93B0;
  JUMPOUT(0x18D78B5D4);
}

double cnnavigation::BeiDouEphemerides::BeiDouAgeOfData(cnnavigation::BeiDouEphemerides *this)
{
  double v1;
  double v2;
  double result;

  if (this <= 0x18)
  {
    v1 = (double)this;
    v2 = 3600.0;
    return v1 * v2;
  }
  if (this <= 0x1E)
  {
    v1 = (double)((int)this - 23);
    v2 = 86400.0;
    return v1 * v2;
  }
  result = NAN;
  if ((_DWORD)this == 31)
    return INFINITY;
  return result;
}

double cnnavigation::BeiDouEphemerides::BeiDouUserRangeAccuracy(cnnavigation::BeiDouEphemerides *this)
{
  double result;

  if (this <= 5)
    return exp2((double)this * 0.5 + 1.0);
  if (this <= 0xE)
    return ldexp(1.0, (int)this - 2);
  result = NAN;
  if ((_DWORD)this == 15)
    return INFINITY;
  return result;
}

uint64_t cnnavigation::BeiDouEphemerides::GNSSFindSat(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, double *a4, double *a5, double *a6)
{
  int v10;
  double v11;
  double v12;
  BOOL v13;
  BOOL v14;
  int v16;
  double v17;
  uint64_t result;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __double2 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  __double2 v46;
  __double2 v47;
  __double2 v48;
  unsigned __int8 v49;
  double v50;
  unsigned __int8 v51;
  double sinval;
  double v53;
  double v54;
  double cosval;
  double v56;
  double v57;
  __double2 v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  int v69;
  unsigned int v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  int v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;

  if (*(_BYTE *)(a1 + 32) != 4)
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 40))
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 41))
    return 0xFFFFFFFFLL;
  v10 = cnnavigation::TAITime::ToBeiDouTime(this, a3);
  v12 = *(double *)(a1 + 120);
  if (fabs(v12) < 2.22044605e-16)
    return 0xFFFFFFFFLL;
  v13 = *(uint64_t *)&v12 <= -1 || ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
  v14 = v13 && (unint64_t)(*(_QWORD *)&v12 - 1) >= 0xFFFFFFFFFFFFFLL;
  if (v14 && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    return 0xFFFFFFFFLL;
  v16 = v10;
  v17 = *(double *)(a1 + 112);
  result = 0xFFFFFFFFLL;
  if (v17 >= 0.0 && v17 < 1.0 && (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v19 = *(double *)(a1 + 128);
    if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v20 = *(double *)(a1 + 104);
      if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v21 = *(double *)(a1 + 144);
        v22 = *(double *)(a1 + 152);
        v158 = *(double *)(a1 + 184);
        v156 = *(double *)(a1 + 160);
        v157 = *(double *)(a1 + 200);
        v159 = *(double *)(a1 + 216);
        v23 = *(unsigned __int8 *)(a1 + 41);
        switch(*(_BYTE *)(a1 + 41))
        {
          case 0:
            return result;
          case 1:
            if (v12 > 5353.22333 && v21 < 0.479965544)
              goto LABEL_29;
            return result;
          case 2:
            if (v12 > 5353.22333)
              goto LABEL_28;
            return result;
          case 3:
            if (v12 < 5353.22333)
            {
LABEL_28:
              if (v21 > 0.479965544)
                goto LABEL_29;
            }
            return result;
          default:
LABEL_29:
            v149 = *(double *)(a1 + 144);
            v150 = *(double *)(a1 + 136);
            v151 = *(double *)(a1 + 168);
            v153 = *(double *)(a1 + 208);
            v154 = *(double *)(a1 + 192);
            v155 = *(double *)(a1 + 176);
            v147 = *(double *)(a1 + 56);
            v24 = v11 - v147 + (double)(v16 - *(_DWORD *)(a1 + 48)) * 604800.0;
            v25 = v12 * v12;
            v143 = *(double *)(a1 + 96) + v20 * 0.5 * v24 + 19964980.4 / (v12 * (v12 * v12));
            v145 = v20 * 0.5;
            v26 = *(double *)(a1 + 88) + v143 * v24;
            v27 = 10;
            v28 = v26;
            do
            {
              v29 = sin(v28);
              v28 = v26 + v17 * v29;
              --v27;
            }
            while (v27);
            v30 = sqrt(1.0 - v17 * v17);
            v148 = cos(v28);
            v31 = v22 + atan2(v30 * v29, v148 - v17);
            v32 = __sincos_stret(v31 + v31);
            v33 = v25 + v19 * v24;
            if ((v23 - 1) < 2)
            {
              result = 0xFFFFFFFFLL;
              v35 = v154;
              v34 = v155;
              v37 = v151;
              v36 = v153;
              v39 = v149;
              v38 = v150;
              if (v33 < 0.0)
                return result;
              v40 = v147;
              if (v33 < 21081100.0)
                return result;
            }
            else
            {
              v35 = v154;
              v34 = v155;
              v37 = v151;
              v36 = v153;
              v39 = v149;
              v38 = v150;
              if (!v23)
                return 0xFFFFFFFFLL;
              v40 = v147;
              if (v23 == 3)
              {
                result = 0xFFFFFFFFLL;
                if (v33 < 0.0 || v33 < 13953050.0)
                  return result;
              }
            }
            v138 = v20;
            v142 = v30;
            v41 = v31 + v34 * v32.__cosval + v158 * v32.__sinval;
            v141 = -v17 * v148 + 1.0;
            v136 = v25 + v19 * v24;
            v42 = v33 * v141 + v35 * v32.__cosval;
            v43 = v39 + v37 * v24 + v36 * v32.__cosval + v159 * v32.__sinval;
            v44 = v156 + -0.00007292115;
            if (v23 == 1)
              v44 = v156;
            v139 = v44;
            v45 = v38 + v44 * v24 + v40 * -0.00007292115;
            v46 = __sincos_stret(v41);
            v47 = __sincos_stret(v43);
            v48 = __sincos_stret(v45);
            v49 = atomic_load((unsigned __int8 *)&qword_1ECF22D98);
            if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF22D98))
            {
              qword_1ECF22D90 = 0x3FEFE0D3B41815A2;
              __cxa_guard_release(&qword_1ECF22D98);
            }
            v50 = v42 + v157 * v32.__sinval;
            v51 = atomic_load((unsigned __int8 *)&qword_1ECF22DA8);
            sinval = v32.__sinval;
            if ((v51 & 1) == 0)
            {
              v119 = __cxa_guard_acquire(&qword_1ECF22DA8);
              sinval = v32.__sinval;
              if (v119)
              {
                qword_1ECF22DA0 = 0xBFB64FD6B8C28102;
                __cxa_guard_release(&qword_1ECF22DA8);
                sinval = v32.__sinval;
              }
            }
            v53 = v50 * v46.__cosval;
            v54 = v50 * v46.__sinval;
            cosval = 0.0;
            v56 = 0.0;
            if (v23 == 1)
            {
              v57 = sinval;
              v58 = __sincos_stret(v24 * 0.00007292115);
              cosval = v58.__cosval;
              v56 = v58.__sinval;
              v54 = v50 * v46.__sinval;
              v53 = v50 * v46.__cosval;
              sinval = v57;
            }
            v59 = -(v54 * v47.__cosval);
            v60 = v48.__sinval * v59;
            v61 = v47.__cosval * v54;
            v62 = v48.__cosval * (v47.__cosval * v54) + v53 * v48.__sinval;
            if (v23 == 1)
              v63 = v48.__sinval * v59 + v53 * v48.__cosval;
            else
              v63 = 0.0;
            if (v23 == 1)
              v64 = v48.__cosval * v61 + v53 * v48.__sinval;
            else
              v64 = 0.0;
            v65 = v47.__sinval * v54;
            if (v23 == 1)
              v66 = v47.__sinval * v54;
            else
              v66 = 0.0;
            v67 = *(double *)&qword_1ECF22D90;
            v140 = *(double *)&qword_1ECF22DA0;
            v68 = v66 * *(double *)&qword_1ECF22DA0 + *(double *)&qword_1ECF22D90 * v64;
            if (v23 != 1)
              v68 = 0.0;
            v129 = v68;
            v69 = *(unsigned __int8 *)(a1 + 41);
            v70 = v69 - 2;
            if ((v69 - 2) < 2)
            {
              *a4 = v53 * v48.__cosval - v61 * v48.__sinval;
              v71 = v47.__sinval * v54;
            }
            else
            {
              if (!*(_BYTE *)(a1 + 41))
                return 0xFFFFFFFFLL;
              if (v69 != 1)
              {
LABEL_66:
                v123 = v63;
                v124 = v56;
                v125 = cosval;
                v134 = v54;
                v135 = v48.__cosval * v61;
                v72 = v143 + v145 * v24;
                v73 = v72 / v141;
                v74 = v142 * (v72 / v141) / v141;
                v133 = v158 * v32.__cosval - v155 * sinval + v158 * v32.__cosval - v155 * sinval;
                v75 = v74 + v133 * v74;
                v76 = v17 * v136;
                v77 = v47.__cosval * v54;
                v130 = v157 * v32.__cosval - v154 * sinval + v157 * v32.__cosval - v154 * sinval;
                v78 = v19 * v141 + v17 * v136 * v29 * (v72 / v141) + v130 * v74;
                v146 = sinval;
                v79 = v159 * v32.__cosval - v153 * sinval + v159 * v32.__cosval - v153 * sinval;
                v80 = v151 + v79 * v74;
                v132 = v75 * -v54;
                v81 = v132 + v78 * v46.__cosval;
                v131 = v53 * v75;
                v82 = v53 * v75 + v78 * v46.__sinval;
                v83 = 0.00007292115;
                if (v23 != 1)
                  v83 = 0.0;
                v122 = v83;
                v84 = -(v53 * v48.__sinval);
                v127 = v156 * v84;
                v85 = v80 * v65;
                v86 = v156 * v84
                    + v81 * v48.__cosval
                    + -(v82 * v47.__cosval) * v48.__sinval
                    + v80 * v65 * v48.__sinval
                    + v48.__cosval * v59 * v156;
                v137 = v53;
                v87 = v48.__cosval * v53;
                v126 = v156 * (v48.__cosval * v53);
                v88 = v47.__cosval * v82;
                v152 = v65;
                v128 = -(v65 * v80);
                v89 = v126 + v81 * v48.__sinval + v47.__cosval * v82 * v48.__cosval + v128 * v48.__cosval + v60 * v156;
                if (v23 != 1)
                  v86 = 0.0;
                v120 = v86;
                if (v23 == 1)
                  v90 = v89;
                else
                  v90 = 0.0;
                v91 = v80 * v61;
                v92 = v80 * v61 + v82 * v47.__sinval;
                if (v23 == 1)
                  v93 = v80 * v61 + v82 * v47.__sinval;
                else
                  v93 = 0.0;
                v94 = v67;
                v95 = v93 * v140 + v67 * v90;
                if (v23 != 1)
                  v95 = 0.0;
                v121 = v95;
                v144 = v84;
                if (v70 >= 2)
                {
                  if (v69 != 1)
                    goto LABEL_85;
                  v92 = v92 * v67 - v140 * v90;
                  if (v23 != 1)
                    v92 = 0.0;
                  v97 = -(v124 * v122);
                  *a5 = v123 * v97 + v125 * v120 + v124 * v95 + v122 * v125 * v129;
                  v94 = v67;
                  v96 = -(v122 * v125 * v123) - v124 * v120 + v125 * v95 + v97 * v129;
                }
                else
                {
                  *a5 = v139 * v84
                      + v81 * v48.__cosval
                      - v88 * v48.__sinval
                      + v85 * v48.__sinval
                      + -(v61 * v48.__cosval) * v139;
                  v96 = v139 * v87
                      + v81 * v48.__sinval
                      + v88 * v48.__cosval
                      - v85 * v48.__cosval
                      + -(v61 * v48.__sinval) * v139;
                }
                a5[1] = v96;
                a5[2] = v92;
LABEL_85:
                v98 = -v17 * v148 + 1.0;
                v99 = (v141 * v138 - v72 * (v17 * v29 * v73)) / (v98 * v98);
                v100 = v17 * (v19 + v19) * v29 * v73 + v76 * (v73 * (v148 * v73) + v29 * v99);
                v101 = v142 * (v99 / v141 + v29 * (v17 * (-v73 / (v98 * v98))) * v73);
                v102 = v101 + v133 * v101 + v74 * ((-v155 * v32.__cosval - v158 * v146) * 4.0) * v74;
                v103 = v100 + v130 * v101 + v74 * ((-v154 * v32.__cosval - v157 * v146) * 4.0) * v74;
                v104 = v74 * (v74 * ((-v153 * v32.__cosval - v159 * v146) * 4.0)) + v79 * v101;
                v105 = v103 * v46.__cosval
                     - v46.__sinval * v78 * v75
                     - (v75 * v131
                      + v46.__sinval * v78 * v75
                      + v134 * v102);
                v106 = v75 * (v46.__cosval * v78)
                     + v103 * v46.__sinval
                     + v75 * v132
                     + v46.__cosval * v78 * v75
                     + v137 * v102;
                v107 = 0.0;
                v108 = v48.__sinval * v81;
                v109 = 0.0;
                v110 = 0.0;
                if (v23 == 1)
                {
                  v111 = v156;
                  v112 = v80 * (v47.__sinval * v82);
                  v109 = v48.__sinval * (v80 * v91)
                       + v112 * v48.__sinval
                       + v152 * v104 * v48.__sinval
                       + v48.__cosval * v85 * v111
                       + v105 * v48.__cosval
                       - v108 * v111
                       - (v111 * v126
                        + v108 * v111)
                       - (v47.__cosval * v106 * v48.__sinval
                        - v112 * v48.__sinval
                        + v48.__cosval * v88 * v111)
                       - (v48.__cosval * v88 * v111
                        - v48.__cosval * v85 * v111
                        + v111 * -(v77 * v48.__sinval) * v111);
                  v113 = v111 * v127
                       + v48.__cosval * v81 * v111
                       + v111 * (v48.__cosval * v81)
                       + v105 * v48.__sinval
                       + v47.__cosval * v106 * v48.__cosval
                       - v112 * v48.__cosval
                       - v48.__sinval * v88 * v111
                       - (v48.__cosval * (v80 * v91)
                        + v112 * v48.__cosval
                        + v152 * v104 * v48.__cosval
                        + v48.__sinval * v128 * v111)
                       - (v111 * (v48.__sinval * v128)
                        + v48.__sinval * v88 * v111
                        + v111 * v135 * v111);
                  v114 = v80 * v128 + v88 * v80 + v77 * v104 + v80 * v88 + v106 * v47.__sinval;
                  v107 = v114 * v140 + v94 * v113;
                  v110 = v114 * v94 - v140 * v113;
                }
                if (v70 >= 2)
                {
                  if (v69 != 1)
                    return 0;
                  v116 = -(v124 * v122);
                  v117 = -(v122 * v125 * v122);
                  v118 = v122 * (v122 * v124);
                  *a6 = v122 * v125 * v121
                      - v118 * v129
                      + v122 * v125 * v121
                      + v124 * v107
                      + v123 * v117
                      + v116 * v120
                      + v125 * v109
                      - v122 * v124 * v120;
                  a6[1] = v117 * v129
                        + v116 * v121
                        + v125 * v107
                        - v122 * v124 * v121
                        + v123 * v118
                        + -(v125 * v122) * v120
                        + -(v122 * v125 * v120)
                        - v124 * v109;
                }
                else
                {
                  v115 = v80 * (v47.__sinval * v82);
                  *a6 = v48.__sinval * (v80 * v91)
                      + v115 * v48.__sinval
                      + v152 * v104 * v48.__sinval
                      + v48.__cosval * v85 * v139
                      + v105 * v48.__cosval
                      - v108 * v139
                      - (v139 * (v139 * v87)
                       + v108 * v139)
                      - (v47.__cosval * v106 * v48.__sinval
                       - v115 * v48.__sinval
                       + v48.__cosval * v88 * v139)
                      - (v48.__cosval * v88 * v139
                       - v48.__cosval * v85 * v139
                       + v139 * -(v77 * v48.__sinval) * v139);
                  a6[1] = v139 * (v139 * v144)
                        + v48.__cosval * v81 * v139
                        + v139 * (v48.__cosval * v81)
                        + v105 * v48.__sinval
                        + v47.__cosval * v106 * v48.__cosval
                        - v115 * v48.__cosval
                        - v48.__sinval * v88 * v139
                        - (v48.__cosval * (v80 * v91)
                         + v115 * v48.__cosval
                         + v152 * v104 * v48.__cosval
                         + -(v85 * v48.__sinval) * v139)
                        - (v139 * -(v85 * v48.__sinval)
                         + v48.__sinval * v88 * v139
                         + v139 * v135 * v139);
                  v110 = v88 * v80 - v85 * v80 + v77 * v104 + v80 * v88 + v106 * v47.__sinval;
                }
                result = 0;
                a6[2] = v110;
                return result;
              }
              v71 = 0.0;
              if (v23 == 1)
                v71 = v65 * *(double *)&qword_1ECF22D90 - *(double *)&qword_1ECF22DA0 * v62;
              *a4 = v56 * v129 + cosval * v63;
              v62 = cosval * v129 - v56 * v63;
            }
            a4[1] = v62;
            a4[2] = v71;
            goto LABEL_66;
        }
      }
    }
  }
  return result;
}

uint64_t cnnavigation::BeiDouEphemerides::GNSSSatelliteClockOffset(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, double *a4, int a5, double *a6, long double a7)
{
  int v13;
  double v14;
  double v15;
  int v16;
  double v17;
  uint64_t result;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  long double v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  int8x16_t v38;
  int8x16_t v39;
  double v40;
  double v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53[2];

  if (*(_BYTE *)(a1 + 32) != 4)
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 40))
    return 0xFFFFFFFFLL;
  v13 = cnnavigation::TAITime::ToBeiDouTime(this, a3);
  v15 = *(double *)(a1 + 120);
  if (fabs(v15) < 2.22044605e-16 || (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v16 = v13;
  v17 = *(double *)(a1 + 112);
  result = 0xFFFFFFFFLL;
  if (v17 < 0.0)
    return result;
  if (v17 >= 1.0)
    return result;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return result;
  v19 = *(double *)(a1 + 128);
  if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return result;
  v20 = *(double *)(a1 + 104);
  if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return result;
  v21 = v14;
  v22 = v14 - *(double *)(a1 + 72) + (double)(v16 - *(_DWORD *)(a1 + 64)) * 604800.0;
  v23 = v14 - *(double *)(a1 + 56) + (double)(v16 - *(_DWORD *)(a1 + 48)) * 604800.0;
  v51 = *(double *)(a1 + 232);
  v50 = *(double *)(a1 + 240);
  v52 = *(double *)(a1 + 224) + v51 * v22 + v50 * (v22 * v22);
  v24 = v15 * v15;
  v49 = v20 * 0.5;
  v48 = *(double *)(a1 + 96) + v20 * 0.5 * v23 + 19964980.4 / (v15 * (v15 * v15));
  v25 = *(double *)(a1 + 88) + v48 * v23;
  v26 = 10;
  v27 = v25;
  do
  {
    v27 = v25 + v17 * sin(v27);
    --v26;
  }
  while (v26);
  v28 = v24 + v19 * v23;
  v29 = *(unsigned __int8 *)(a1 + 41);
  if ((v29 - 1) < 2)
  {
    result = 0xFFFFFFFFLL;
    if (v28 < 0.0)
      return result;
    v30 = 21081100.0;
LABEL_19:
    if (v28 < v30)
      return result;
    goto LABEL_20;
  }
  if (!*(_BYTE *)(a1 + 41))
    return 0xFFFFFFFFLL;
  if (v29 == 3)
  {
    result = 0xFFFFFFFFLL;
    if (v28 < 0.0)
      return result;
    v30 = 13953050.0;
    goto LABEL_19;
  }
LABEL_20:
  if (a7 <= 0.0 || (*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v31 = sqrt(v28);
  v32 = v27 - v25;
  v33 = v31 * -4.44280731e-10 * (v27 - v25);
  if (fabs(a7 + -1561098000.0) <= 0.000000015)
  {
    v35 = (double *)(a1 + 248);
    goto LABEL_32;
  }
  if (fabs(a7 + -1575420000.0) <= 0.000000015)
  {
    v35 = (double *)(a1 + 264);
    goto LABEL_32;
  }
  if (fabs(a7 + -1207140000.0) <= 0.000000015)
  {
    v35 = (double *)(a1 + 256);
    goto LABEL_32;
  }
  v34 = 0.0;
  if (fabs(a7 + -1176450000.0) <= 0.000000015)
  {
    v35 = (double *)(a1 + 280);
LABEL_32:
    v34 = *v35;
  }
  v36 = v52 + v33;
  if (a5)
    a7 = v51
       + (v50 + v50) * v22
       + v19 * (v32 * -2.22140365e-10 / v31)
       - v31 * -4.44280731e-10 * (v48 + v49 * v23)
       + v31 * -4.44280731e-10 * ((v48 + v49 * v23) / (1.0 - v17 * cos(v27)));
  v37 = v36 - v34;
  if (cnnavigation::GNSSUTCParameters::IsValid(a3) && *((_BYTE *)a3 + 1) == 4)
  {
    v53[0] = 0;
    v53[1] = 0;
    *(double *)v38.i64 = v21;
    CNTimeSpan::SetTimeSpan(v53, 604800 * v16, v38, v39);
    v40 = *((double *)a3 + 1);
    v41 = *((double *)a3 + 2);
    v44 = CNTimeSpan::operator-((uint64_t)v53, (_QWORD *)a3 + 3, v42, v43);
    *a4 = v37 - (v40 + v41 * (v45 + (double)v44));
    if (a5)
    {
      v46 = *((double *)a3 + 2);
      v47 = 1.0 / (1.0 - v46);
      *a6 = (a7 - v46) * v47;
      a6[1] = 0.0 / v47;
    }
  }
  else
  {
    *a4 = v37;
    if (a5)
    {
      result = 0;
      *a6 = a7;
      a6[1] = 0.0;
      return result;
    }
  }
  return 0;
}

uint64_t cnnavigation::BeiDouEphemerides::GNSSSatelliteClockOffsetRate(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, double *a4, int a5, uint64_t a6)
{
  int v11;
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  uint64_t result;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;

  if (*(_BYTE *)(a1 + 32) != 4)
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 40))
    return 0xFFFFFFFFLL;
  v11 = cnnavigation::TAITime::ToBeiDouTime(this, a3);
  v13 = *(double *)(a1 + 120);
  if (fabs(v13) < 2.22044605e-16 || (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v14 = *(double *)(a1 + 112);
  if (v14 < 0.0 || v14 >= 1.0)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v16 = *(double *)(a1 + 128);
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v17 = *(double *)(a1 + 104);
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v40 = v12 - *(double *)(a1 + 72) + (double)(v11 - *(_DWORD *)(a1 + 64)) * 604800.0;
  v18 = v12 - *(double *)(a1 + 56) + (double)(v11 - *(_DWORD *)(a1 + 48)) * 604800.0;
  v19 = v13 * v13;
  v20 = *(double *)(a1 + 96) + v17 * 0.5 * v18 + 19964980.4 / (v13 * (v13 * v13));
  v21 = *(double *)(a1 + 88) + v20 * v18;
  v22 = 10;
  v23 = v21;
  do
  {
    v24 = sin(v23);
    v23 = v21 + v14 * v24;
    --v22;
  }
  while (v22);
  v38 = *(double *)(a1 + 240);
  v39 = *(double *)(a1 + 232);
  v25 = cos(v21 + v14 * v24);
  v26 = v19 + v16 * v18;
  v27 = *(unsigned __int8 *)(a1 + 41);
  if ((v27 - 1) < 2)
  {
    result = 0xFFFFFFFFLL;
    if (v26 < 0.0)
      return result;
    v29 = 21081100.0;
LABEL_24:
    if (v26 < v29)
      return result;
    goto LABEL_25;
  }
  if (!*(_BYTE *)(a1 + 41))
    return 0xFFFFFFFFLL;
  if (v27 == 3)
  {
    result = 0xFFFFFFFFLL;
    if (v26 < 0.0)
      return result;
    v29 = 13953050.0;
    goto LABEL_24;
  }
LABEL_25:
  v30 = v20 + v17 * 0.5 * v18;
  v31 = 1.0 - v14 * v25;
  v32 = sqrt(v26);
  v33 = v30 / v31 - v30;
  v34 = (v23 - v21) * -2.22140365e-10;
  if (a5)
    v14 = v34 / v32 * 0.0
        - v32 * -4.44280731e-10 * v17
        + v32 * -4.44280731e-10 * ((v17 + (v21 - v23) * (v30 / v31) * (v30 / v31)) / v31)
        + 1.0 / v32 * (v33 * -2.22140365e-10) * v16
        + v16 * (1.0 / v32 * -2.22140365e-10) * (v30 / v31)
        - v16 * (1.0 / v32 * -2.22140365e-10) * v30
        + v38
        + v38;
  v35 = v16 * (1.0 / v32 * v34) + v32 * -4.44280731e-10 * v33 + v39 + (v38 + v38) * v40;
  if (cnnavigation::GNSSUTCParameters::IsValid(a3) && *((_BYTE *)a3 + 1) == 4)
  {
    v36 = *((double *)a3 + 2);
    v37 = 1.0 / (1.0 - v36);
    *a4 = (v35 - v36) * v37;
    if (a5)
    {
      v14 = v14 * (v37 * v37);
LABEL_32:
      result = 0;
      *(double *)a6 = v14;
      *(_QWORD *)(a6 + 8) = 0;
      return result;
    }
  }
  else
  {
    *a4 = v35;
    if (a5)
      goto LABEL_32;
  }
  return 0;
}

uint64_t sub_18D0874A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25B94C0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  *(_QWORD *)a1 = off_1E25B93B0;
  return a1;
}

void sub_18D0874F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25B94C0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  *(_QWORD *)a1 = off_1E25B93B0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::NavicTime::NavicTime(uint64_t this, int a2, double a3)
{
  *(_DWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

{
  *(_DWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

double cnnavigation::NavicTime::NavicTime(cnnavigation::NavicTime *this, double a2)
{
  int v2;
  double result;

  v2 = vcvtmd_s64_f64(a2 / 604800.0);
  *(_DWORD *)this = v2;
  result = a2 + (double)v2 * -604800.0;
  *((double *)this + 1) = result;
  return result;
}

{
  int v2;
  double result;

  v2 = vcvtmd_s64_f64(a2 / 604800.0);
  *(_DWORD *)this = v2;
  result = a2 + (double)v2 * -604800.0;
  *((double *)this + 1) = result;
  return result;
}

double cnnavigation::NavicTime::NavicTime(uint64_t a1, double *a2)
{
  double v2;
  uint64_t v3;
  double result;

  v2 = *a2;
  v3 = *(_QWORD *)a2 / 604800;
  *(_DWORD *)a1 = v3;
  result = a2[1] + (double)(*(_QWORD *)&v2 - 604800 * (int)v3);
  *(double *)(a1 + 8) = result;
  if (result < 0.0)
  {
    *(_DWORD *)a1 = v3 - 1;
    result = result + 604800.0;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

{
  double v2;
  uint64_t v3;
  double result;

  v2 = *a2;
  v3 = *(_QWORD *)a2 / 604800;
  *(_DWORD *)a1 = v3;
  result = a2[1] + (double)(*(_QWORD *)&v2 - 604800 * (int)v3);
  *(double *)(a1 + 8) = result;
  if (result < 0.0)
  {
    *(_DWORD *)a1 = v3 - 1;
    result = result + 604800.0;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t cnnavigation::NavicTime::operator CNTime(int *a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v3;
  uint64_t v5[2];

  a2.i64[0] = *((_QWORD *)a1 + 1);
  v3 = vcvtmd_s64_f64(*(double *)a2.i64) + 604800 * *a1;
  *(double *)a3.i64 = (double)(uint64_t)floor(*(double *)a2.i64);
  *(double *)a2.i64 = *(double *)a2.i64 - *(double *)a3.i64;
  v5[0] = 0;
  v5[1] = 0;
  CNTimeSpan::SetTimeSpan(v5, v3, a2, a3);
  return v5[0];
}

uint64_t cnnavigation::NavicTimeToJulianTime(int *a1, int a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v7;
  double v8;
  double v9;
  double v11;
  double v12;

  v7 = cnnavigation::NavicTime::operator CNTime(a1, a4, a5);
  LODWORD(v11) = v7 / 604800;
  v9 = v8 + (double)(v7 - 604800 * SLODWORD(v11));
  v12 = v9;
  if (v9 < 0.0)
  {
    LODWORD(v11) = v7 / 604800 - 1;
    v12 = v9 + 604800.0;
  }
  return cnnavigation::GalileoTimeToJulianTime(&v11, a2, a3);
}

uint64_t cnnavigation::JulianTimeToNavicTime(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  double v8;
  _BOOL4 v9;
  int v11;
  double v12;
  uint64_t v13;
  double v14;

  v11 = 0;
  v12 = 0.0;
  cnnavigation::JulianTimeToGalileoTime(a1, a2, (uint64_t)&v11);
  v5 = v4;
  *(double *)v6.i64 = (double)(uint64_t)floor(v12);
  *(double *)v7.i64 = v12 - *(double *)v6.i64;
  v13 = 0;
  v14 = 0.0;
  CNTimeSpan::SetTimeSpan(&v13, vcvtmd_s64_f64(v12) + 604800 * v11, v7, v6);
  v8 = v14 + (double)(v13 - 604800 * (int)(v13 / 604800));
  v9 = v8 < 0.0;
  if (v8 < 0.0)
    v8 = v8 + 604800.0;
  *(_DWORD *)a3 = v13 / 604800 - v9;
  *(double *)(a3 + 8) = v8;
  return v5;
}

uint64_t cnnavigation::ECEFToLLA(float64x2_t *a1, int a2, double *a3)
{
  _BYTE v4[72];

  return cnnavigation::ECEFToLLA(a1, a2, a3, 0, (uint64_t)v4);
}

uint64_t cnnavigation::ECEFToLLA(float64x2_t *a1, int a2, double *a3, uint64_t a4)
{
  return cnnavigation::ECEFToLLA(a1, a2, a3, 1, a4);
}

uint64_t cnnavigation::LLAToECEF(double *a1, int a2, double *a3)
{
  _BYTE v4[72];

  return cnnavigation::LLAToECEF(a1, a2, a3, 0, (uint64_t)v4);
}

uint64_t cnnavigation::LLAToECEF(double *a1, int a2, double *a3, int a4, uint64_t a5)
{
  double v9;
  double v10;
  __double2 v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  uint64_t result;
  double v26;

  v9 = a1[1];
  v10 = a1[2];
  v11 = __sincos_stret(*a1);
  v12 = __sincos_stret(v9);
  v13 = v11.__sinval * v12.__sinval;
  v14 = v11.__sinval * v12.__cosval;
  v15 = v11.__cosval * v12.__sinval;
  v16 = v11.__cosval * v12.__cosval;
  if (a2 == 1)
  {
    v20 = v11.__sinval * -0.00669437999 * v11.__sinval + 1.0;
    v21 = 6378137.0 / sqrt(v20);
    v22 = v10 + v21;
    *a3 = v16 * v22;
    a3[1] = v15 * v22;
    v23 = v22 + v21 * -0.00669437999;
    a3[2] = v11.__sinval * v23;
    if (a4)
    {
      v26 = v23;
      v24 = v11.__cosval * (v11.__sinval * 42697.6727) * pow(v20, -1.5);
      *(long double *)a5 = v24 * v16 - v22 * v14;
      *(double *)(a5 + 8) = -(v22 * v15);
      *(double *)(a5 + 16) = v16;
      *(long double *)(a5 + 24) = v24 * v15 - v22 * v13;
      *(double *)(a5 + 32) = v16 * v22;
      *(double *)(a5 + 40) = v15;
      v19 = v11.__cosval * v26 + v24 * 0.99330562 * v11.__sinval;
      goto LABEL_7;
    }
    return 0;
  }
  if (!a2)
  {
    v17 = v10 + 6371009.0;
    v18 = (v10 + 6371009.0) * v16;
    *a3 = v18;
    a3[1] = (v10 + 6371009.0) * v15;
    a3[2] = v11.__sinval * (v10 + 6371009.0);
    if (a4)
    {
      *(double *)a5 = -(v17 * v14);
      *(double *)(a5 + 8) = -(v17 * v15);
      *(double *)(a5 + 16) = v16;
      *(double *)(a5 + 24) = -(v17 * v13);
      *(double *)(a5 + 32) = v18;
      *(double *)(a5 + 40) = v15;
      v19 = v11.__cosval * v17;
LABEL_7:
      result = 0;
      *(double *)(a5 + 48) = v19;
      *(_QWORD *)(a5 + 56) = 0;
      *(double *)(a5 + 64) = v11.__sinval;
      return result;
    }
    return 0;
  }
  return 2;
}

uint64_t cnnavigation::LLAToECEF(double *a1, int a2, double *a3, uint64_t a4)
{
  return cnnavigation::LLAToECEF(a1, a2, a3, 1, a4);
}

double cnnavigation::ECEFToENU(float64x2_t *a1, int a2, int a3, float64x2_t *a4, int a5, uint64_t a6)
{
  void (**v7)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v8 = 0;
  v11 = 0x300000003;
  v9 = &unk_1E25C78E0;
  v10 = xmmword_18D30BB60;
  v12 = &v13;
  v7 = &off_1E25B9560;
  return cnnavigation::ECEFToENU(a1, a2, a3, a4, a5, a6, (uint64_t)&v7, COERCE_DOUBLE(0x300000003));
}

double cnnavigation::ECEFToENU(float64x2_t *a1, int a2, int a3, float64x2_t *a4, int a5, uint64_t a6, uint64_t a7, double result)
{
  double v12;
  __int128 v13;
  double v14;
  float64x2_t v15;
  double v16;
  float64x2_t v17;
  float64_t v18;
  float64x2_t v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
  {
    v17 = *a4;
    v18 = a4[1].f64[0];
    if (cnnavigation::LLAToECEF(v17.f64, a2, v19.f64, 0, (uint64_t)&v15))
      return result;
  }
  else
  {
    if (a3)
      return result;
    v19 = *a4;
    v20 = a4[1].f64[0];
    if (cnnavigation::ECEFToLLA(&v19, a2, v17.f64, 0, (uint64_t)&v15))
      return result;
  }
  if (a5 == 1)
  {
    v15 = *a1;
    v12 = a1[1].f64[0];
    goto LABEL_11;
  }
  if (!a5)
  {
    v15 = vsubq_f64(*a1, v19);
    v12 = a1[1].f64[0] - v20;
LABEL_11:
    v16 = v12;
    (*(void (**)(uint64_t, float64_t, float64_t))(*(_QWORD *)a7 + 16))(a7, v17.f64[0], v17.f64[1]);
    sub_18D056ECC(a7, v15.f64, (double *)&v13);
    *(_OWORD *)a6 = v13;
    result = v14;
    *(double *)(a6 + 16) = v14;
  }
  return result;
}

void cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian(cnnavigation::ECEFToENUJacobian *this)
{
  *(_QWORD *)this = off_1E25B9B80;
  *((_QWORD *)this + 2) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = off_1E25B9B80;
  *((_QWORD *)this + 2) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = off_1E25B9B80;
  *((_QWORD *)this + 2) = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::ENUToECEF(__int128 *a1, int a2, int a3, uint64_t a4, int a5, float64x2_t *a6)
{
  void (**v7)(cnnavigation::ENUToECEFJacobian *__hidden);
  char v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v8 = 0;
  v11 = 0x300000003;
  v9 = &unk_1E25C78E0;
  v10 = xmmword_18D30BB60;
  v12 = &v13;
  v7 = &off_1E25B9588;
  return cnnavigation::ENUToECEF(a1, a2, a3, a4, a5, a6, (uint64_t)&v7);
}

uint64_t cnnavigation::ENUToECEF(__int128 *a1, int a2, int a3, uint64_t a4, int a5, float64x2_t *a6, uint64_t a7)
{
  __n128 v11;
  double v12;
  double v13;
  uint64_t result;
  __n128 v15;
  __int128 v16;
  uint64_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  __n128 v21;
  float64x2_t v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
  {
    v12 = *(double *)a4;
    v20 = *(double *)a4;
    v15 = *(__n128 *)(a4 + 8);
    v21 = v15;
    if (cnnavigation::LLAToECEF(&v20, a2, v22.f64, 0, (uint64_t)&v18))
      return 0xFFFFFFFFLL;
    v11 = v15;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    v22 = *(float64x2_t *)a4;
    v23 = *(double *)(a4 + 16);
    if (cnnavigation::ECEFToLLA(&v22, a2, &v20, 0, (uint64_t)&v18))
      return 0xFFFFFFFFLL;
    v12 = v20;
    v11.n128_u64[0] = v21.n128_u64[0];
  }
  (*(void (**)(uint64_t, double, __n128))(*(_QWORD *)a7 + 16))(a7, v12, v11);
  v16 = *a1;
  v17 = *((_QWORD *)a1 + 2);
  sub_18D056ECC(a7, (double *)&v16, v18.f64);
  if (a5 == 1)
  {
    *a6 = v18;
    v13 = v19;
    goto LABEL_12;
  }
  if (a5)
    return 0xFFFFFFFFLL;
  *a6 = vaddq_f64(v18, v22);
  v13 = v19 + v23;
LABEL_12:
  result = 0;
  a6[1].f64[0] = v13;
  return result;
}

void cnnavigation::ENUToECEFJacobian::~ENUToECEFJacobian(cnnavigation::ENUToECEFJacobian *this)
{
  *(_QWORD *)this = off_1E25B9B80;
  *((_QWORD *)this + 2) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = off_1E25B9B80;
  *((_QWORD *)this + 2) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = off_1E25B9B80;
  *((_QWORD *)this + 2) = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::GeodeticLatLonIncrementsToNorthEastMetersPerRadian(cnnavigation *this, double a2, double a3, double *a4, double *a5)
{
  uint64_t v9;
  double v10;
  __double2 v11;
  uint64_t result;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  unsigned __int8 v26;
  __int16 v27;
  unsigned __int8 v28;
  __int16 v29;

  v9 = *(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL;
  v10 = fabs(a2);
  if (v9 > 0x7FEFFFFFFFFFFFFFLL || v10 > 1.57079633)
  {
    if (fabs(v10 + -1.57079633) < 2.22044605e-16)
    {
      result = 0;
      *(double *)this = a3 + 6399593.63;
      *a4 = 0.0;
      return result;
    }
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v29 = 5;
      v28 = 1;
      v25 = a2 * 57.2957795;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "Invalid latitude,deg,%.9lf", v19, v20, v21, v22, v23, SLOBYTE(v25));
    }
  }
  else
  {
    if (a3 >= -721.0 && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v11 = __sincos_stret(a2);
      result = 0;
      v13 = 1.0 / sqrt(v11.__sinval * v11.__sinval * -0.00669437999 + 1.0);
      *a4 = v11.__cosval * (v13 * 6378137.0 + a3);
      *(double *)this = v13 * v13 * (v13 * 6378137.0 * 0.99330562) + a3;
      return result;
    }
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v27 = 5;
      v26 = 1;
      v24 = a2 * 57.2957795;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "Invalid height above ellipsoid,deg,%.9lf", v14, v15, v16, v17, v18, SLOBYTE(v24));
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t cnnavigation::SatElAz(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;

  return cnnavigation::SatElAz(a1, a2, a3, a4, 0, (uint64_t)&v5);
}

uint64_t cnnavigation::SatElAz(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t result;
  double v12;
  __double2 v13;
  __double2 v14;
  double sinval;
  double cosval;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v39;
  float64x2_t v40;
  double v42;
  double v43;
  float64x2_t v45;
  double v52;
  double v53;
  float64_t v54;
  double v55;
  float64_t v56;
  float64_t v57;
  float64_t v60;
  double v63;
  double v64;
  float64x2_t v65;
  double v67;
  double v68;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  double v76;
  double v77;
  float64x2_t v78;
  double v79;
  double v80;
  float64x2_t v81;
  double v82;
  double v83;
  double v84;
  double v85[4];

  v85[3] = *(double *)MEMORY[0x1E0C80C00];
  result = cnnavigation::ECEFToLLA((float64x2_t *)a1, a3, v85, a5 != 0, (uint64_t)&v80);
  if (!(_DWORD)result)
  {
    v12 = v85[1];
    v13 = __sincos_stret(v85[0]);
    v14 = __sincos_stret(v12);
    sinval = v14.__sinval;
    cosval = v14.__cosval;
    v17 = *(double *)a2 - *(double *)a1;
    v18 = *(double *)(a2 + 8) - *(double *)(a1 + 8);
    v19 = *(double *)(a2 + 16) - *(double *)(a1 + 16);
    v20 = sqrt(v18 * v18 + v17 * v17 + v19 * v19);
    if (v20 <= 0.0)
      return 0xFFFFFFFFLL;
    v21 = v13.__sinval * v14.__sinval;
    v22 = v13.__sinval * v14.__cosval;
    v23.f64[0] = v14.__cosval;
    v23.f64[1] = v14.__sinval;
    v24 = vmulq_n_f64(v23, v13.__cosval);
    v25 = v17 / v20;
    v26 = v18 / v20;
    v27 = v19 / v20;
    v28 = v14.__cosval * v26 + -v14.__sinval * v25 + v27 * 0.0;
    v29 = -(v13.__sinval * v14.__sinval * v26) - v13.__sinval * v14.__cosval * v25 + v13.__cosval * v27;
    v30 = vmlad_n_f64(vmuld_lane_f64(v26, v24, 1), v25, v24.f64[0]) + v13.__sinval * v27;
    v31 = vabdd_f64(1.0, fabs(v30));
    v32 = v30 >= 0.0 ? 1 : 2;
    v33 = v31 <= 0.00000001 ? v32 : 0;
    v34 = v13.__cosval;
    if ((v33 - 1) >= 2)
    {
      if (v33)
      {
        result = 0xFFFFFFFFLL;
      }
      else
      {
        v78 = v24;
        v79 = v20;
        v77 = v30;
        *(long double *)a4 = 1.57079633 - acos(v30);
        v36 = atan2(v28, v29);
        *(double *)(a4 + 8) = v36;
        result = 0;
        if (v36 < 0.0)
          *(double *)(a4 + 8) = v36 + 6.28318531;
        cosval = v14.__cosval;
        v34 = v13.__cosval;
        v24 = v78;
        v20 = v79;
        v30 = v77;
        sinval = v14.__sinval;
      }
    }
    else
    {
      if (v30 <= 0.0)
      {
        v35 = 0.0;
        if (v30 < 0.0)
          v35 = -1.57079633;
      }
      else
      {
        v35 = 1.57079633;
      }
      result = 0;
      *(double *)a4 = v35;
      *(_QWORD *)(a4 + 8) = 0;
    }
    if (a5)
    {
      if ((v33 - 1) >= 2)
      {
        if (!v33)
        {
          v37 = *(double *)a2 - *(double *)a1;
          _D19 = -(v37 * v22);
          v39 = -(v37 * v24.f64[1]);
          v40 = vsubq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 8));
          _D20 = -(v40.f64[0] * v21);
          *(_QWORD *)&v42 = *(_OWORD *)&vmulq_f64(v24, v40);
          v43 = vmlad_n_f64(v80 * _D19 - v34 * cosval + v39 * v82 + _D20 * v80, v82, v42);
          _V17.D[1] = v81.f64[1];
          v45.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v39 * v83, _D19, v81.f64[0]) - v34 * sinval, _D20, v81.f64[0]), v83, v42);
          __asm
          {
            FMLA            D5, D19, V17.D[1]
            FMLA            D5, D20, V17.D[1]
          }
          v52 = vmlad_n_f64(_D5, v84, v42);
          v53 = -(v37 * cosval);
          v54 = -(v40.f64[0] * sinval);
          v55 = sinval + v53 * v82 + v54 * v82;
          v56 = v54 * v83 - (cosval - v53 * v83);
          v57 = v54 * v84 + v53 * v84;
          _D21 = -(v37 * v24.f64[0]);
          _D2 = -(v40.f64[0] * v24.f64[1]);
          v60 = -(v40.f64[0] * v22);
          __asm
          {
            FMLA            D23, D21, V17.D[1]
            FMLA            D23, D2, V17.D[1]
          }
          v45.f64[1] = v52 - v13.__sinval;
          v63 = vmuld_lane_f64(v34, v40, 1);
          v64 = v43 + v63 * v80;
          v65 = vmlaq_n_f64(v45, v81, v63);
          _D4 = -(v40.f64[1] * v13.__sinval);
          v67 = v22 + _D21 * v80 + v21 * v37 * v82 + _D2 * v80 + v60 * v82 + _D4 * v80;
          v68 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v21 * v37 * v83, _D21, v81.f64[0]) + v13.__sinval * sinval, _D2, v81.f64[0])+ v60 * v83, _D4, v81.f64[0]);
          __asm { FMLA            D2, D4, V17.D[1] }
          v70 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0);
          v71 = vdivq_f64(v40, v70);
          v72 = v13.__sinval / v20 - vmuld_lane_f64(v30, v71, 1) / v20;
          v73 = vaddq_f64(vdivq_f64(vmulq_n_f64(v71, v30), v70), vdivq_f64(v65, v70));
          v74 = 1.0 / sqrt(1.0 - v30 * v30);
          *(double *)a6 = v74 * (v30 * (v37 / v20) / v20 + v64 / v20);
          v75 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71.f64[0], 0);
          v75.f64[0] = v37 / v20;
          *(float64x2_t *)(a6 + 8) = vmulq_n_f64(v73, v74);
          *(float64x2_t *)(a6 + 24) = vmulq_n_f64(vaddq_f64(vdivq_f64(v24, v70), vdivq_f64(vmulq_n_f64(v75, -v30), v70)), v74);
          v75.f64[0] = v29 * v56 - v28 * v68;
          v76 = 1.0 / (v29 * v29 + v28 * v28);
          *(double *)(a6 + 40) = v74 * v72;
          *(double *)(a6 + 48) = v76 * (v29 * v55 - v28 * v67) / v20;
          *(double *)(a6 + 56) = v76 * v75.f64[0] / v20;
          *(double *)(a6 + 64) = v76 * (v29 * v57 - v28 * _D2) / v20;
          *(double *)(a6 + 72) = (v22 * v28 + v29 * -v14.__sinval) * v76 / v20;
          *(double *)(a6 + 80) = (v21 * v28 + v29 * cosval) * v76 / v20;
          *(double *)(a6 + 88) = -(v28 * v34) * v76 / v20;
          return result;
        }
        result = 0xFFFFFFFFLL;
      }
      else
      {
        *(_OWORD *)(a6 + 16) = 0u;
        *(_OWORD *)(a6 + 32) = 0u;
        *(_OWORD *)a6 = 0u;
      }
      *(_OWORD *)(a6 + 64) = 0u;
      *(_OWORD *)(a6 + 80) = 0u;
      *(_OWORD *)(a6 + 48) = 0u;
    }
  }
  return result;
}

uint64_t cnnavigation::SatElAz(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return cnnavigation::SatElAz(a1, a2, a3, a4, 1, a5);
}

uint64_t cnnavigation::SatEl(cnnavigation *this, const double *a2, const double *a3, double *a4, double *a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  uint64_t result;
  BOOL v13;

  v5 = *a3 - *(double *)this;
  v6 = a3[1] - *((double *)this + 1);
  v7 = a3[2] - *((double *)this + 2);
  v8 = sqrt(v6 * v6 + v5 * v5 + v7 * v7);
  if (v8 <= 0.0)
    return 0xFFFFFFFFLL;
  v10 = (v6 * a2[1] + *a2 * v5 + a2[2] * v7) / v8;
  if (1.0 - fabs(v10) <= 0.00000001)
  {
    v13 = v10 < 0.0;
    if (v10 <= 0.0)
    {
      v11 = -1.57079633;
      if (!v13)
        v11 = 0.0;
    }
    else
    {
      v11 = 1.57079633;
    }
  }
  else
  {
    v11 = 1.57079633 - acos(v10);
  }
  result = 0;
  *a4 = v11;
  return result;
}

uint64_t cnnavigation::UpUnitVector(float64x2_t *a1, int a2, double *a3)
{
  uint64_t v4;
  double v5;
  __double2 v6;
  __double2 v7;
  _BYTE v9[72];
  double v10[4];

  v10[3] = *(double *)MEMORY[0x1E0C80C00];
  v4 = cnnavigation::ECEFToLLA(a1, a2, v10, 0, (uint64_t)v9);
  if (!(_DWORD)v4)
  {
    v5 = v10[1];
    v6 = __sincos_stret(v10[0]);
    v7 = __sincos_stret(v5);
    *a3 = v6.__cosval * v7.__cosval;
    a3[1] = v6.__cosval * v7.__sinval;
    a3[2] = v6.__sinval;
  }
  return v4;
}

void cnnavigation::details::JacobianBase::~JacobianBase(cnnavigation::details::JacobianBase *this)
{
  *(_QWORD *)this = off_1E25B9B80;
  *((_QWORD *)this + 2) = &unk_1E25C5E70;
}

_QWORD *sub_18D0885C8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

BOOL cnnavigation::UTMCoordinate::IsValid(cnnavigation::UTMCoordinate *this)
{
  double v1;
  uint64_t v2;
  int v3;
  unsigned int v4;

  v1 = *(double *)this;
  if ((*(_QWORD *)this & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  v2 = 0;
  if (v1 >= -90.0 && v1 <= 90.0)
  {
    if ((*((_DWORD *)this + 5) - 1) > 0x3B)
    {
      v2 = 0;
      v4 = *((unsigned __int8 *)this + 16) - 65;
      if (v4 <= 0x19 && ((1 << v4) & 0x3000003) != 0)
        goto LABEL_12;
    }
    else
    {
      if ((*((_BYTE *)this + 16) - 89) < 0xEAu)
        return 0;
      v2 = 0;
      v3 = *((unsigned __int8 *)this + 16);
      if (v3 != 73 && v3 != 79)
      {
LABEL_12:
        if ((*((_QWORD *)this + 3) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*((_QWORD *)this + 4) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*((_QWORD *)this + 5) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          return (*((_QWORD *)this + 6) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        }
        return 0;
      }
    }
  }
  return v2;
}

void cnnavigation::UTMCoordinate::GridZoneDesignation(cnnavigation::UTMCoordinate *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char v5;
  std::string v6;

  if (cnnavigation::UTMCoordinate::IsValid(this))
  {
    v4 = *((_DWORD *)this + 5);
    v5 = *((_BYTE *)this + 16);
    if ((v4 - 61) < 0xFFFFFFC4
      || (v5 - 89) < 0xEAu
      || *((_BYTE *)this + 16) == 73
      || *((_BYTE *)this + 16) == 79)
    {
      *(_BYTE *)(a2 + 23) = 1;
      *(_BYTE *)a2 = v5;
      *(_BYTE *)(a2 + 1) = 0;
    }
    else
    {
      std::to_string(&v6, v4);
      std::string::push_back(&v6, *((_BYTE *)this + 16));
      *(std::string *)a2 = v6;
    }
  }
  else
  {
    sub_18D0778AC((_QWORD *)a2, "");
  }
}

void sub_18D088854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double cnnavigation::UTMCoordinate::Easting(cnnavigation::UTMCoordinate *this)
{
  return *((double *)this + 3) + *((double *)this + 4);
}

double cnnavigation::UTMCoordinate::Northing(cnnavigation::UTMCoordinate *this)
{
  return *((double *)this + 5) + *((double *)this + 6);
}

uint64_t cnnavigation::LatLonToUTM(cnnavigation *this, double a2, double a3, cnnavigation::UTMCoordinate *a4)
{
  int64x2_t v5;
  uint64_t result;
  double v8;
  int v9;
  double v10;
  BOOL v12;
  double v13;
  int v14;
  char v15;
  char v16;
  long double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  double v29;
  double v30;

  *((_BYTE *)this + 19) = 0;
  *(_WORD *)((char *)this + 17) = 0;
  v5 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)this = v5;
  *((_BYTE *)this + 16) = 45;
  *((_DWORD *)this + 5) = 0;
  *(int64x2_t *)((char *)this + 24) = v5;
  *(int64x2_t *)((char *)this + 40) = v5;
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0xFFFFFFFFLL;
  }
  result = 0xFFFFFFFFLL;
  if (a2 >= -90.0 && a2 <= 90.0)
  {
    v8 = a3 + floor((a3 + 180.0) * 0.00277777778) * -360.0;
    *(double *)this = a2;
    *((double *)this + 1) = v8;
    if (a2 > 84.0 || a2 < -80.0)
    {
      if (v8 >= 0.0)
        v15 = 90;
      else
        v15 = 89;
      if (v8 >= 0.0)
        v16 = 66;
      else
        v16 = 65;
      if (a2 < 0.0)
        v15 = v16;
      *((_BYTE *)this + 16) = v15;
      v17 = sin(fabs(a2 * 0.0174532925));
      v18 = sqrt((1.0 - v17) / (v17 + 1.0) * pow((v17 * 0.0818191908 + 1.0) / (v17 * -0.0818191908 + 1.0), 0.0818191908))
          * 12679.7364
          / 1.00335656;
      *((long double *)this + 3) = sin(v8 * 0.0174532925) * v18 * 1000.0;
      *((_QWORD *)this + 4) = 0x413E848000000000;
      v19 = 0.0;
      if (a2 * 0.0174532925 < 0.0)
        v19 = -1.0;
      if (a2 * 0.0174532925 > 0.0)
        v19 = 1.0;
      *((long double *)this + 5) = cos(v8 * 0.0174532925) * (v19 * -v18) * 1000.0;
      v20 = 2000000.0;
    }
    else
    {
      v9 = vcvtmd_s64_f64((v8 + 186.0) * 0.166666667);
      if (v9 >= 60)
        v9 = 60;
      if (v9 <= 1)
        v9 = 1;
      v10 = (double)(6 * v9 - 183);
      if ((v9 - 31) <= 6)
      {
        v12 = a2 >= 56.0 && (v9 - 31) < 2;
        v13 = 3.0;
        if (v8 >= 3.0)
          v14 = 32;
        else
          v14 = 31;
        if (v8 >= 3.0)
          v13 = 9.0;
        if (a2 < 64.0 && v12)
        {
          v10 = v13;
          v9 = v14;
        }
        if (a2 >= 72.0)
        {
          if (v8 >= 9.0)
          {
            if (v8 >= 21.0)
            {
              if (v8 >= 33.0)
                v10 = 39.0;
              else
                v10 = 27.0;
              if (v8 >= 33.0)
                v9 = 37;
              else
                v9 = 35;
            }
            else
            {
              v9 = 33;
              v10 = 15.0;
            }
          }
          else
          {
            v9 = 31;
            v10 = 3.0;
          }
        }
      }
      *((_DWORD *)this + 5) = v9;
      v21 = vcvtmd_s64_f64((a2 + 88.0) * 0.125);
      if (v21 >= 20)
        v21 = 20;
      if (v21 <= 1)
        v21 = 1;
      *((_BYTE *)this + 16) = aCdefghjklmnpqr[v21 - 1];
      v22 = __sincos_stret(a2 * 0.0174532925);
      v30 = 6378.137 / sqrt(v22.__sinval * -0.00669437999 * v22.__sinval + 1.0);
      v23 = v22.__sinval / v22.__cosval * (v22.__sinval / v22.__cosval);
      v24 = v22.__cosval * (v22.__cosval * 0.00673949674);
      v25 = v22.__cosval * (v8 * 0.0174532925 - v10 * 0.0174532925);
      v26 = v25 * (v25 * v25);
      v29 = sin(a2 * 0.0174532925 + a2 * 0.0174532925);
      v27 = sin(a2 * 0.0174532925 * 4.0);
      v28 = sin(a2 * 0.0174532925 * 6.0);
      *((double *)this + 3) = v30
                            * 0.9996
                            * (v25
                             + (v24 + 1.0 - v23) * 0.166666667 * v26
                             + (v23 * -18.0 + 5.0 + v23 * v23 + v24 * 72.0 + -0.390890811)
                             * 0.00833333333
                             * (v25
                              * v25
                              * v26))
                            * 1000.0;
      *((_QWORD *)this + 4) = 0x411E848000000000;
      *((long double *)this + 5) = ((v29 * -0.00251460706
                                   + a2 * 0.0174532925 * 0.998324298
                                   + v27 * 0.00000263904659
                                   + v28 * -0.00000000341804609)
                                  * 6378.137
                                  + v22.__sinval
                                  / v22.__cosval
                                  * v30
                                  * ((5.0 - v23 + v24 * 9.0 + v24 * v24 * 4.0)
                                   * 0.0416666667
                                   * (v25
                                    * v25
                                    * (v25
                                     * v25))
                                   + v25 * v25 * 0.5
                                   + (v23 * -58.0 + 61.0 + v23 * v23 + v24 * 600.0 + -2.22403392)
                                   * 0.00138888889
                                   * (v26
                                    * v26)))
                                 * 0.9996
                                 * 1000.0;
      v20 = 10000000.0;
      if (a2 >= 0.0)
        v20 = 0.0;
    }
    result = 0;
    *((double *)this + 6) = v20;
  }
  return result;
}

BOOL cnnavigation::MGRSCoordinate::IsValid(cnnavigation::MGRSCoordinate *this)
{
  double v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  double v9;
  double v10;

  v1 = *(double *)this;
  if ((*(_QWORD *)this & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  v2 = 0;
  if (v1 >= -90.0 && v1 <= 90.0)
  {
    if ((*((_DWORD *)this + 5) - 1) <= 0x3B)
    {
      if ((*((_BYTE *)this + 16) - 89) < 0xEAu)
        return 0;
      v2 = 0;
      v3 = *((unsigned __int8 *)this + 16);
      if (v3 == 73)
        return v2;
      if (v3 == 79)
        return v2;
      v2 = 0;
      v4 = *((unsigned __int8 *)this + 24);
      if (v4 == 73 || v4 == 79)
        return v2;
      v5 = *((unsigned __int8 *)this + 25) - 73;
      if (v5 < 0x12 && ((0x3C041u >> v5) & 1) != 0)
        return 0;
LABEL_20:
      v9 = *((double *)this + 4);
      if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v10 = *((double *)this + 5);
        if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v2 = 0;
          if (v9 >= 0.0 && v9 <= 100000.0)
            return v10 <= 100000.0 && v10 >= 0.0;
          return v2;
        }
      }
      return 0;
    }
    v2 = 0;
    v6 = *((unsigned __int8 *)this + 16) - 65;
    if (v6 <= 0x19 && ((1 << v6) & 0x3000003) != 0)
    {
      v7 = *((unsigned __int8 *)this + 24) - 68;
      if (v7 < 0x14 && ((0xC0E23u >> v7) & 1) != 0)
        return 0;
      v2 = 0;
      v8 = *((unsigned __int8 *)this + 25);
      if (v8 != 73 && v8 != 79)
        goto LABEL_20;
    }
  }
  return v2;
}

void cnnavigation::MGRSCoordinate::GridZoneDesignation(cnnavigation::MGRSCoordinate *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char v5;
  std::string v6;

  if (cnnavigation::MGRSCoordinate::IsValid(this))
  {
    v4 = *((_DWORD *)this + 5);
    v5 = *((_BYTE *)this + 16);
    if ((v4 - 61) < 0xFFFFFFC4
      || (v5 - 89) < 0xEAu
      || *((_BYTE *)this + 16) == 73
      || *((_BYTE *)this + 16) == 79)
    {
      *(_BYTE *)(a2 + 23) = 1;
      *(_BYTE *)a2 = v5;
      *(_BYTE *)(a2 + 1) = 0;
    }
    else
    {
      std::to_string(&v6, v4);
      std::string::push_back(&v6, *((_BYTE *)this + 16));
      *(std::string *)a2 = v6;
    }
  }
  else
  {
    sub_18D0778AC((_QWORD *)a2, "");
  }
}

void sub_18D089050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cnnavigation::MGRSCoordinate::OneHundredThousandMeterSquareDesignation(cnnavigation::MGRSCoordinate *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  std::string v5;

  if (cnnavigation::MGRSCoordinate::IsValid(this))
  {
    v4 = *((_BYTE *)this + 24);
    *((_BYTE *)&v5.__r_.__value_.__s + 23) = 1;
    LOWORD(v5.__r_.__value_.__l.__data_) = v4;
    std::string::push_back(&v5, *((_BYTE *)this + 25));
    *a2 = v5;
  }
  else
  {
    sub_18D0778AC(a2, "");
  }
}

void sub_18D0890E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double cnnavigation::MGRSCoordinate::Easting(cnnavigation::MGRSCoordinate *this)
{
  return *((double *)this + 4);
}

double cnnavigation::MGRSCoordinate::Northing(cnnavigation::MGRSCoordinate *this)
{
  return *((double *)this + 5);
}

uint64_t cnnavigation::LatLonToMGRS(cnnavigation *this, double a2, double a3, cnnavigation::MGRSCoordinate *a4)
{
  int64x2_t v6;
  uint64_t result;
  double v8;
  int v9;
  double v10;
  double v11;
  int v12;
  double v13;
  unsigned int v14;
  double v15;
  int v16;
  int v17;
  int v18;
  double v19;
  double v20;
  double *v21;
  int v22;
  int v23;
  int v24;
  double v25;
  double v26;
  unsigned int v27;
  int v28;
  int v29;
  int64x2_t v30;
  char v31;
  int v32;
  double v33;
  double v34;

  *((_BYTE *)this + 19) = 0;
  *(_WORD *)((char *)this + 17) = 0;
  *(_DWORD *)((char *)this + 26) = 0;
  *((_WORD *)this + 15) = 0;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)this = v6;
  *((_BYTE *)this + 16) = 45;
  *((_DWORD *)this + 5) = 0;
  *((_WORD *)this + 12) = 11565;
  *((int64x2_t *)this + 2) = v6;
  v30 = v6;
  v31 = 45;
  v32 = 0;
  v33 = NAN;
  v34 = NAN;
  if (cnnavigation::LatLonToUTM((cnnavigation *)&v30, a2, a3, a4))
    return 0xFFFFFFFFLL;
  v8 = *(double *)v30.i64;
  *(int64x2_t *)this = v30;
  *((_BYTE *)this + 16) = v31;
  v9 = v32;
  *((_DWORD *)this + 5) = v32;
  v10 = v33;
  v11 = floor(v33 * 0.00001);
  v12 = vcvtmd_s64_f64(v33 * 0.00001);
  if (a2 > 84.0 || a2 < -80.0)
  {
    v22 = v12 % 18;
    v23 = v12 % 18 + 18;
    if (v22 < 0)
      v22 = v23;
    v24 = v22 & ~(v22 >> 31);
    if (v24 >= 17)
      v24 = 17;
    *((_BYTE *)this + 24) = aAbcfghjklpqrst[v24];
    v25 = v34;
    v26 = floor(v34 * 0.00001);
    v27 = vcvtmd_s64_f64(v34 * 0.00001);
    if (v8 <= 0.0)
      v28 = 12;
    else
      v28 = 7;
    v29 = (v28 + v27) & ~((int)(v28 + v27) >> 31);
    if (v29 >= 23)
      v29 = 23;
    *((_BYTE *)this + 25) = aAbcdefghjklmnp_0[v29];
    v19 = v10 + v11 * -100000.0;
    v20 = v25 + v26 * -100000.0;
    v21 = (double *)&unk_18D30B000;
    if (v19 < 0.0)
      v19 = 0.0;
  }
  else
  {
    if ((v9 % 3) > 2)
      return 0xFFFFFFFFLL;
    if (v12 <= -4)
      v12 = -4;
    if (v12 >= 3)
      v12 = 3;
    *((_BYTE *)this + 24) = off_1E25CD1D0[v9 % 3][v12 + 4];
    v13 = v34;
    v14 = vcvtmd_s64_f64(v34 * 0.00001);
    v15 = floor(v34 * 0.00001);
    if ((v9 & 0x80000001) == 1)
      v16 = 0;
    else
      v16 = 5;
    v17 = (int)(v16 + v14) % 20 + ((int)(v16 + v14) % 20 < 0 ? 0x14 : 0);
    v18 = v17 & ~(v17 >> 31);
    if (v18 >= 19)
      v18 = 19;
    *((_BYTE *)this + 25) = aAbcdefghjklmnp[v18];
    v19 = v10 + v11 * -100000.0;
    v20 = v13 + v15 * -100000.0;
    if (v19 < 0.0)
      v19 = 0.0;
    v21 = (double *)&unk_18D30B000;
  }
  if (v19 > v21[361])
    v19 = v21[361];
  *((double *)this + 4) = v19;
  if (v20 < 0.0)
    v20 = 0.0;
  if (v20 > v21[361])
    v20 = v21[361];
  result = 0;
  *((double *)this + 5) = v20;
  return result;
}

void sub_18D08941C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D089440(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D08944C(uint64_t a1)
{
  char v1[9];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D0894A0(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = (v7 - 1);
        v9 = *(_QWORD *)(a1 + 32);
        v10 = 1;
        do
        {
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = *(_QWORD *)(v9 + 8 * v10);
            v13 = v10;
            do
            {
              v13 = (int)(v13 * (v4 + v2 - v6)) % (int)v8;
              v14 = *(_QWORD *)(v9 + 8 * v13);
              *(_QWORD *)(v9 + 8 * v13) = v12;
              *v11 = 1;
              v11 = &a2[v13];
              v12 = v14;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v8);
      }
    }
  }
}

uint64_t cnnavigation::GPSFindSat(int a1, uint64_t a2, double *a3, double *a4, double *a5, double a6)
{
  double v6;
  double v8;
  uint64_t result;
  double v10;
  double v11;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  __double2 v27;
  double v28;
  __double2 v29;
  __double2 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;

  if (!*(_BYTE *)(a2 + 12))
    return 1;
  v6 = *(double *)(a2 + 88);
  if (fabs(v6) < 2.22044605e-16 || (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v8 = *(double *)(a2 + 80);
  result = 0xFFFFFFFFLL;
  if (v8 >= 0.0 && v8 < 1.0 && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v10 = *(double *)(a2 + 96);
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v11 = *(double *)(a2 + 72);
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v15 = *(double *)(a2 + 24);
        v16 = *(double *)(a2 + 120);
        v78 = *(double *)(a2 + 112);
        v79 = *(double *)(a2 + 128);
        v80 = *(double *)(a2 + 104);
        v83 = *(double *)(a2 + 136);
        v89 = *(double *)(a2 + 152);
        v90 = *(double *)(a2 + 144);
        v87 = *(double *)(a2 + 168);
        v88 = *(double *)(a2 + 160);
        v86 = *(double *)(a2 + 176);
        v85 = *(double *)(a2 + 184);
        v17 = a6 - v15 + (double)(a1 - *(_DWORD *)(a2 + 16)) * 604800.0;
        v18 = v6 * v6;
        v76 = v11 * 0.5;
        v73 = *(double *)(a2 + 72);
        v74 = *(double *)(a2 + 64) + v11 * 0.5 * v17 + 19964981.8 / (v6 * (v6 * v6));
        v19 = *(double *)(a2 + 56) + v74 * v17;
        v20 = 10;
        v21 = v19;
        do
        {
          v22 = sin(v21);
          v21 = v19 + v8 * v22;
          --v20;
        }
        while (v20);
        v81 = sqrt(1.0 - v8 * v8);
        v82 = cos(v21);
        v23 = v16 + atan2(v81 * v22, v82 - v8);
        v24 = __sincos_stret(v23 + v23);
        v25 = v18 + v10 * v17;
        result = 0xFFFFFFFFLL;
        if (v25 >= 0.0 && v25 >= 13279855.0)
        {
          v72 = -v8 * v82 + 1.0;
          v26 = v25 * v72 + v88 * v24.__cosval + v87 * v24.__sinval;
          v70 = v79 + -0.0000729211515;
          v27 = __sincos_stret(v23 + v90 * v24.__cosval + v89 * v24.__sinval);
          v28 = v26 * v27.__cosval;
          v29 = __sincos_stret(v80 + (v79 + -0.0000729211515) * v17 + v15 * -0.0000729211515);
          v30 = __sincos_stret(v78 + v83 * v17 + v86 * v24.__cosval + v85 * v24.__sinval);
          v31 = -(v26 * v27.__sinval * v30.__cosval);
          v32 = v29.__sinval * v31;
          v71 = v30.__cosval * (v26 * v27.__sinval);
          *a3 = v29.__sinval * v31 + v26 * v27.__cosval * v29.__cosval;
          a3[1] = v29.__cosval * v71 + v26 * v27.__cosval * v29.__sinval;
          v33 = v30.__sinval * (v26 * v27.__sinval);
          a3[2] = v33;
          if (!a4)
            return 0;
          v34 = -((v25 * v72 + v88 * v24.__cosval + v87 * v24.__sinval) * v27.__sinval);
          v35 = v74 + v76 * v17;
          v36 = v35 / v72;
          v37 = v81 * (v35 / v72) / v72;
          v38 = v89 * v24.__cosval - v90 * v24.__sinval + v89 * v24.__cosval - v90 * v24.__sinval;
          v39 = v37 + v38 * v37;
          v40 = v87 * v24.__cosval - v88 * v24.__sinval + v87 * v24.__cosval - v88 * v24.__sinval;
          v41 = v10 * v72 + v8 * v25 * v22 * (v35 / v72) + v40 * v37;
          v42 = v85 * v24.__cosval - v86 * v24.__sinval + v85 * v24.__cosval - v86 * v24.__sinval;
          v43 = v83 + v42 * v37;
          v44 = v34 * v39;
          v45 = v34 * v39 + v41 * v27.__cosval;
          v46 = v28 * v39;
          v47 = v28 * v39 + v41 * v27.__sinval;
          v84 = v70 * -(v28 * v29.__sinval);
          v77 = -(v47 * v30.__cosval);
          v48 = v84 + v45 * v29.__cosval + v77 * v29.__sinval + v43 * v33 * v29.__sinval + v29.__cosval * v31 * v70;
          v49 = v70 * (v29.__cosval * v28);
          v50 = v30.__cosval * v47;
          v51 = v43 * (v30.__sinval * v34);
          *a4 = v48;
          a4[1] = v49 + v45 * v29.__sinval + v30.__cosval * v47 * v29.__cosval + v51 * v29.__cosval + v32 * v70;
          v52 = v43 * v71;
          a4[2] = v43 * v71 + v47 * v30.__sinval;
          if (a5)
          {
            result = 0;
            v75 = v43 * v33;
            v53 = v44;
            v54 = -v8 * v82 + 1.0;
            v55 = (v72 * v73 - v35 * (v8 * v22 * v36)) / (v54 * v54);
            v56 = v8 * (v10 + v10) * v22 * v36 + v8 * v25 * (v36 * (v82 * v36) + v22 * v55);
            v57 = v81 * (v55 / v72 + v22 * (v8 * (-v36 / (v54 * v54))) * v36);
            v58 = v57 + v38 * v57 + v37 * ((-v90 * v24.__cosval - v89 * v24.__sinval) * 4.0) * v37;
            v59 = v56 + v40 * v57 + v37 * ((-v88 * v24.__cosval - v87 * v24.__sinval) * 4.0) * v37;
            v60 = v37 * (v37 * ((-v86 * v24.__cosval - v85 * v24.__sinval) * 4.0)) + v42 * v57;
            v61 = v39 * -(v41 * v27.__sinval) + v59 * v27.__cosval;
            v62 = v27.__cosval * v41;
            v63 = v39 * (v27.__cosval * v41) + v59 * v27.__sinval;
            v64 = -(v46 + v41 * v27.__sinval);
            v65 = v61 - (v39 * v46 + v27.__sinval * v41 * v39 + v26 * v27.__sinval * v58);
            v66 = v63 + v39 * v53 + v62 * v39 + v26 * v27.__cosval * v58;
            v67 = v43 * (v30.__sinval * v64);
            v68 = v43 * (v30.__sinval * v47);
            v69 = v33 * v60;
            *a5 = v29.__sinval * (v43 * v52)
                + v68 * v29.__sinval
                + v69 * v29.__sinval
                + v29.__cosval * v75 * v70
                + v70 * -(v45 * v29.__sinval)
                + v65 * v29.__cosval
                - (v70 * v49
                 + v29.__sinval * v45 * v70)
                - (v29.__sinval * v67
                 + v30.__cosval * v66 * v29.__sinval
                 + v29.__cosval * v50 * v70)
                - (v70 * (v29.__cosval * v51)
                 + v29.__cosval * v50 * v70
                 + v70 * v32 * v70);
            a5[1] = v70 * v84
                  + v29.__cosval * v45 * v70
                  + v70 * (v29.__cosval * v45)
                  + v65 * v29.__sinval
                  + v29.__cosval * v67
                  + v30.__cosval * v66 * v29.__cosval
                  + v29.__sinval * v77 * v70
                  - (v29.__cosval * (v43 * v52)
                   + v68 * v29.__cosval
                   + v69 * v29.__cosval
                   + v29.__sinval * v51 * v70)
                  - (v70 * (v29.__sinval * v51)
                   + v29.__sinval * v50 * v70
                   + v70 * (v29.__cosval * (v30.__cosval * (v26 * v27.__sinval))) * v70);
            a5[2] = v43 * v51 + v50 * v43 + v71 * v60 + v43 * v50 + v66 * v30.__sinval;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

{
  double v6;
  double v7;
  BOOL v8;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;
  long double v21;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  __double2 v26;
  double v27;
  __double2 v28;
  __double2 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t result;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;

  if (!*(_BYTE *)(a2 + 32))
    return 1;
  v6 = *(double *)(a2 + 64);
  if (fabs(v6) < 2.22044605e-16 || (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v7 = *(double *)(a2 + 56);
  v8 = v7 >= 0.0 && v7 < 1.0;
  if (!v8 || (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v12 = *(double *)(a2 + 40);
  v13 = *(double *)(a2 + 88);
  v73 = *(double *)(a2 + 72);
  v70 = *(double *)(a2 + 80);
  v71 = *(double *)(a2 + 96);
  v14 = a6 - v12 + (double)(a1 - *(_DWORD *)(a2 + 36)) * 604800.0;
  v15 = v6 * v6;
  v69 = 19964981.8 / (v6 * (v6 * v6)) + 0.0;
  v16 = *(double *)(a2 + 48) + v69 * v14;
  v17 = 10;
  v18 = v16;
  do
  {
    v19 = sin(v18);
    v18 = v16 + v7 * v19;
    --v17;
  }
  while (v17);
  v20 = cos(v18);
  v74 = sqrt(1.0 - v7 * v7);
  v21 = v13 + atan2(v74 * v19, v20 - v7);
  v22 = __sincos_stret(v21 + v21);
  v23 = v21 + v22.__cosval * 0.0 + v22.__sinval * 0.0;
  v66 = v20;
  v67 = v15;
  v72 = 1.0 - v7 * v20;
  v24 = v15 * v72 + v22.__cosval * 0.0 + v22.__sinval * 0.0;
  v25 = v71 + -0.0000729211515;
  v26 = __sincos_stret(v23);
  v27 = v24 * v26.__cosval;
  v28 = __sincos_stret(v73 + (v71 + -0.0000729211515) * v14 + v12 * -0.0000729211515);
  v29 = __sincos_stret(v70 + 0.942477796);
  v30 = -(v24 * v26.__sinval * v29.__cosval);
  v31 = v28.__sinval * v30;
  v32 = v29.__cosval * (v24 * v26.__sinval);
  *a3 = v28.__sinval * v30 + v24 * v26.__cosval * v28.__cosval;
  a3[1] = v28.__cosval * v32 + v24 * v26.__cosval * v28.__sinval;
  v33 = v29.__sinval * (v24 * v26.__sinval);
  a3[2] = v33;
  if (!a4)
    return 0;
  v34 = -(v24 * v26.__sinval);
  v35 = v69 / v72;
  v36 = v74 * (v69 / v72) / v72;
  v37 = v22.__cosval * 0.0 + v22.__sinval * -0.0 + v22.__cosval * 0.0 + v22.__sinval * -0.0;
  v38 = v36 + v37 * v36;
  v39 = v7 * v67;
  v40 = v7 * v67 * v19 * (v69 / v72) + v37 * v36;
  v41 = v37 * v36 + 0.0;
  v42 = v34 * v38;
  v43 = v34 * v38 + v40 * v26.__cosval;
  v44 = v27 * v38;
  v45 = v27 * v38 + v40 * v26.__sinval;
  v46 = v41 * v33;
  v47 = v25 * -(v27 * v28.__sinval)
      + v43 * v28.__cosval
      + -(v45 * v29.__cosval) * v28.__sinval
      + v41 * v33 * v28.__sinval
      + v28.__cosval * v30 * v25;
  v48 = v25 * (v28.__cosval * v27);
  v49 = v29.__cosval * v45;
  v50 = v41 * (v29.__sinval * v34);
  *a4 = v47;
  a4[1] = v48 + v43 * v28.__sinval + v29.__cosval * v45 * v28.__cosval + v50 * v28.__cosval + v31 * v25;
  v51 = v41 * v32;
  a4[2] = v41 * v32 + v45 * v29.__sinval;
  if (!a5)
    return 0;
  result = 0;
  v68 = -(v45 * v29.__cosval);
  v53 = v72;
  v54 = v35 * (v19 * (v7 * (-v69 / (v53 * v53))));
  v55 = v74 * (v54 / v72 + v19 * (v7 * (-v35 / (v53 * v53))) * v35);
  v56 = v39 * (v35 * (v66 * v35) + v19 * v54);
  v57 = v36 * ((v22.__sinval * -0.0 + v22.__cosval * -0.0) * 4.0);
  v58 = v55 + v37 * v55 + v57 * v36;
  v59 = v56 + v37 * v55 + v57 * v36;
  v60 = v36 * v57 + v37 * v55;
  v61 = v38 * -(v40 * v26.__sinval)
      + v59 * v26.__cosval
      - (v38 * v44
       + v26.__sinval * v40 * v38
       + v24 * v26.__sinval * v58);
  v62 = v38 * (v26.__cosval * v40) + v59 * v26.__sinval + v38 * v42 + v26.__cosval * v40 * v38 + v27 * v58;
  v63 = v41 * (v29.__sinval * -(v44 + v40 * v26.__sinval));
  v64 = v41 * (v29.__sinval * v45);
  v65 = v33 * v60;
  *a5 = v28.__sinval * (v41 * v51)
      + v64 * v28.__sinval
      + v65 * v28.__sinval
      + v28.__cosval * v46 * v25
      + v25 * -(v43 * v28.__sinval)
      + v61 * v28.__cosval
      - (v25 * v48
       + v28.__sinval * v43 * v25)
      - (v28.__sinval * v63
       + v29.__cosval * v62 * v28.__sinval
       + v28.__cosval * v49 * v25)
      - (v25 * (v28.__cosval * v50)
       + v28.__cosval * v49 * v25
       + v25 * v31 * v25);
  a5[1] = v25 * (v25 * -(v27 * v28.__sinval))
        + v28.__cosval * v43 * v25
        + v25 * (v28.__cosval * v43)
        + v61 * v28.__sinval
        + v28.__cosval * v63
        + v29.__cosval * v62 * v28.__cosval
        + v28.__sinval * v68 * v25
        - (v28.__cosval * (v41 * v51)
         + v64 * v28.__cosval
         + v65 * v28.__cosval
         + v28.__sinval * v50 * v25)
        - (v25 * (v28.__sinval * v50)
         + v28.__sinval * v49 * v25
         + v25 * (v28.__cosval * (v29.__cosval * (v24 * v26.__sinval))) * v25);
  a5[2] = v41 * v50 + v49 * v41 + v32 * v60 + v41 * v49 + v62 * v29.__sinval;
  return result;
}

uint64_t cnnavigation::GLONASSTimeOfFlight(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, double a7, double a8, double a9)
{
  double v10[5];

  return cnnavigation::GLONASSTimeOfFlight(a1, a2, a3, a4, a5, a6, 0, v10, a7, a8, a9);
}

uint64_t cnnavigation::GLONASSTimeOfFlight(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int a7, double *a8, double a9, double a10, double a11)
{
  double v11;
  double v13;
  double v14;
  uint64_t result;
  double v23;
  double v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __double2 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  __double2 v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  __int128 v67;
  double v69;
  double v70;
  unsigned int v71;
  double v72;
  unsigned int v73;
  double v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  double v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  double v82[3];
  double v83[3];
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90[4];

  v11 = a10;
  v90[3] = *(double *)MEMORY[0x1E0C80C00];
  v13 = *a2;
  v14 = a2[2];
  v66 = a2[1];
  v90[0] = *a2 + -0.36;
  v90[1] = v66 + 0.08;
  v90[2] = v14 + 0.18;
  if (a1 < 1)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (a9 >= 0.0 && a9 < 86401.0)
  {
    v23 = 0.0;
    v24 = (a9 + 0.0) / 86400.0 + 0.375;
    v73 = a1 + 2450082 + vcvtmd_s64_f64(v24);
    v74 = v24 - floor(v24);
    v71 = 0;
    v72 = 0.0;
    result = cnnavigation::JulianTimeToGPSTime((uint64_t)&v73, (int)a10 + 10, (uint64_t)&v71);
    if (!(_DWORD)result)
    {
      v25 = v71;
      v65 = v72;
      *a6 = 0.0;
      v26 = 10;
      v27 = 0.00007292115;
      v64 = v13;
      while (1)
      {
        result = cnnavigation::GLONASSFindSat(a1, a3, (double *)&v79, 0, 0, a9 - v23, v11);
        if ((_DWORD)result)
          break;
        v28 = v11;
        v29 = v14;
        v30 = *a6;
        v31 = v27;
        v32 = __sincos_stret(*a6 * v27);
        v33 = v32.__sinval * *((double *)&v79 + 1) + v32.__cosval * *(double *)&v79;
        v34 = v32.__cosval * *((double *)&v79 + 1) - v32.__sinval * *(double *)&v79;
        v35 = *(double *)&v80;
        *(double *)&v75 = v33 + -0.36;
        *((double *)&v75 + 1) = v34 + 0.08;
        *(double *)&v76 = *(double *)&v80 + 0.18;
        v87 = 0.0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, double *, __int128 *, double *, double, double))(*(_QWORD *)a4 + 16))(a4, v25, v90, &v75, &v87, v65 - v30, a11);
        if ((_DWORD)result)
          break;
        v84 = 0.0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, double *, __int128 *, double *, double))(*(_QWORD *)a5 + 16))(a5, v25, v90, &v75, &v84, v65 - *a6);
        if ((_DWORD)result)
          break;
        v36 = v35 - v29;
        v14 = v29;
        v23 = sqrt((v34 - v66) * (v34 - v66) + (v33 - v64) * (v33 - v64) + v36 * v36) / 299792458.0 + v87 + v84;
        *a6 = v23;
        --v26;
        v27 = v31;
        v11 = v28;
        if (!v26)
        {
          if (!a7)
            return 0;
          result = cnnavigation::GLONASSFindSat(a1, a3, &v87, &v84, 0, a9 - v23, v28);
          if (!(_DWORD)result)
          {
            v37 = *a6;
            v38 = __sincos_stret(*a6 * v31);
            v39 = v38.__cosval * v88 - v38.__sinval * v87;
            v40 = v89;
            v63 = v38.__sinval * v88 + v38.__cosval * v87;
            v83[0] = v63 + -0.36;
            v83[1] = v39 + 0.08;
            v83[2] = v89 + 0.18;
            v70 = 0.0;
            v81 = 0u;
            *(_OWORD *)v82 = 0u;
            v79 = 0u;
            v80 = 0u;
            result = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, double *, __int128 *, double, double))(*(_QWORD *)a4 + 24))(a4, v25, v90, v83, &v70, &v79, v65 - v37, a11);
            if (!(_DWORD)result)
            {
              v67 = v79;
              v61 = *((double *)&v80 + 1);
              v62 = *(double *)&v80;
              v41 = *((double *)&v81 + 1);
              v42 = v82[1];
              v59 = *(double *)&v81;
              v60 = v82[0];
              v69 = 0.0;
              v78 = 0.0;
              v76 = 0u;
              v77 = 0u;
              v75 = 0u;
              result = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, double *, __int128 *, double))(*(_QWORD *)a5 + 24))(a5, v25, v90, v83, &v69, &v75, v65 - *a6);
              if (!(_DWORD)result)
              {
                v43 = sqrt((v39 - v66) * (v39 - v66) + (v63 - v64) * (v63 - v64) + (v40 - v14) * (v40 - v14));
                *a6 = v43 / 299792458.0 + v70 + v69;
                v44 = v42 + v60 * 0.0 + v41 * 0.0;
                v45 = v60 + v41 * 0.0 + v42 * 0.0;
                v46 = v41 + v60 * 0.0 + v42 * 0.0;
                v47 = *((double *)&v75 + 1) + *(double *)&v76 * 0.0 + *((double *)&v76 + 1) * 0.0;
                v48 = *(double *)&v76 + *((double *)&v75 + 1) * 0.0 + *((double *)&v76 + 1) * 0.0;
                v49 = *((double *)&v76 + 1) + *(double *)&v76 * 0.0 + *((double *)&v75 + 1) * 0.0;
                v50 = *(double *)&v77 + *((double *)&v77 + 1) * 0.0 + v78 * 0.0;
                v51 = *((double *)&v77 + 1) + *(double *)&v77 * 0.0 + v78 * 0.0;
                v52 = v78 + *((double *)&v77 + 1) * 0.0 + *(double *)&v77 * 0.0;
                v53 = (v63 - v64) / v43;
                v54 = (v39 - v66) / v43;
                v55 = (v40 - v14) / v43;
                v56 = (v38.__cosval * v88 + -v38.__sinval * v87) * v27 - v38.__cosval * v84 - v38.__sinval * v85;
                v57 = (v88 * -v38.__sinval - v38.__cosval * v87) * v27 + v38.__sinval * v84 - v38.__cosval * v85;
                v58 = 1.0
                    - (v50 * v56
                     - *(double *)&v75
                     + v51 * v57
                     - v52 * v86
                     + v46 * v56
                     - *(double *)&v67
                     + v45 * v57
                     - v44 * v86
                     + (v54 * v57 + v53 * v56 - v55 * v86) * 0.00000000333564095);
                *a8 = (*(double *)&v75
                     + v50 * (v38.__sinval * v85 + v38.__cosval * v84)
                     + v51 * (v38.__cosval * v85 + -v38.__sinval * v84)
                     + v52 * v86
                     + *(double *)&v67
                     + v46 * (v38.__sinval * v85 + v38.__cosval * v84)
                     + v45 * (v38.__cosval * v85 + -v38.__sinval * v84)
                     + v44 * v86
                     + (v54 * (v38.__cosval * v85 + -v38.__sinval * v84)
                      + v53 * (v38.__sinval * v85 + v38.__cosval * v84)
                      + v55 * v86)
                     * 0.00000000333564095)
                    / v58;
                a8[1] = *((double *)&v67 + 1) / v58;
                a8[2] = (v62 + v61 * 0.0 + v59 * 0.0 - v53 * 0.00000000333564095 + v47) / v58;
                a8[3] = (v61 + v62 * 0.0 + v59 * 0.0 - v54 * 0.00000000333564095 + v48) / v58;
                a8[4] = (v59 + v61 * 0.0 + v62 * 0.0 - v55 * 0.00000000333564095 + v49) / v58;
              }
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t cnnavigation::GLONASSTimeOfFlight(int a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, double *a7, double a8, double a9, double a10)
{
  return cnnavigation::GLONASSTimeOfFlight(a1, a2, a3, a4, a5, a6, 1, a7, a8, a9, a10);
}

uint64_t cnnavigation::GLONASSTimeOfFlightRate(int a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, double a8, double a9, double a10)
{
  double v11[8];

  return cnnavigation::GLONASSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, v11);
}

uint64_t cnnavigation::GLONASSTimeOfFlightRate(int a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, int a8, double a9, double a10, double a11, double *a12)
{
  uint64_t result;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  __double2 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  unsigned int v151;
  double v152;
  unsigned int v153;
  double v154;
  double v155[2];
  double v156;
  double v157;
  double v158;
  double v159;
  double v160[3];
  double v161[3];
  double v162[3];
  double v163;
  double v164;
  double v165;
  double v166[4];

  v166[3] = *(double *)MEMORY[0x1E0C80C00];
  v159 = 0.0;
  result = cnnavigation::GLONASSTimeOfFlight(a1, a2, a4, a5, a6, &v159, 1, v155, a9, a10, a11);
  if (!(_DWORD)result)
  {
    v24 = v155[0];
    v25 = v156;
    v26 = v157;
    v27 = v158;
    *a7 = v155[0] + v156 * *a3 + v157 * a3[1] + v158 * a3[2];
    if (a8)
    {
      v28 = *a2;
      v29 = a2[1];
      v30 = a2[2];
      v166[0] = *a2 + -0.36;
      v166[1] = v29 + 0.08;
      v166[2] = v30 + 0.18;
      result = 0xFFFFFFFFLL;
      if (a1 >= 1 && a9 >= 0.0 && a9 < 86401.0)
      {
        v133 = v30;
        v135 = v29;
        v137 = v28;
        v139 = v26;
        v140 = v25;
        v31 = (a9 + 0.0) / 86400.0 + 0.375;
        v153 = a1 + 2450082 + vcvtmd_s64_f64(v31);
        v154 = v31 - floor(v31);
        v151 = 0;
        v152 = 0.0;
        result = cnnavigation::JulianTimeToGPSTime((uint64_t)&v153, (int)a10 + 10, (uint64_t)&v151);
        if (!(_DWORD)result)
        {
          v32 = v151;
          v128 = v155[1];
          v129 = v159;
          v131 = v152;
          result = cnnavigation::GLONASSFindSat(a1, a4, &v163, v162, v161, a9 - v159, a10);
          if (!(_DWORD)result)
          {
            v33 = __sincos_stret(v129 * 0.00007292115);
            v34 = v164;
            v115 = v162[0];
            v116 = v163;
            v118 = v162[1];
            v119 = v33.__cosval * v164 - v33.__sinval * v163;
            v126 = *a7;
            v127 = v162[2];
            v121 = *a3;
            v122 = a3[1];
            v123 = a3[2];
            v124 = v161[0];
            v114 = v161[1];
            v120 = v161[2];
            v35 = v33.__sinval * v164 + v33.__cosval * v163;
            v160[0] = v35 + -0.36;
            v160[1] = v119 + 0.08;
            v36 = v165;
            v160[2] = v165 + 0.18;
            v150 = 0;
            v148 = 0u;
            v149 = 0u;
            v146 = 0u;
            v147 = 0u;
            v37 = v131 - v129;
            result = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, uint64_t *, __int128 *, double, double))(*(_QWORD *)a5 + 24))(a5, v32, v166, v160, &v150, &v146, v131 - v129, a11);
            if (!(_DWORD)result)
            {
              v113 = *(double *)&v147;
              v130 = *(double *)&v148;
              v132 = *((double *)&v147 + 1);
              v144 = 0;
              v145 = 0;
              v142 = 0u;
              v143 = 0u;
              v141 = 0u;
              result = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, uint64_t *, __int128 *, double))(*(_QWORD *)a6 + 24))(a6, v32, v166, v160, &v145, &v141, v37);
              if (!(_DWORD)result)
              {
                v38 = v33.__sinval * -0.00007292115 * v126;
                v39 = v33.__cosval * 0.00007292115 * -0.00007292115 * v126;
                v40 = v33.__sinval * 0.00007292115 * v126;
                v41 = v33.__cosval * 0.00007292115 * v126;
                v42 = v115 * v38 + v33.__cosval * v124 * (1.0 - v126) + v33.__sinval * v114 * (1.0 - v126) + v41 * v118;
                v43 = (1.0 - v126) * (v33.__sinval * v124)
                    + v33.__cosval * -0.00007292115 * v115 * (1.0 - v126)
                    + v33.__sinval * 0.00007292115 * 0.00007292115 * v126 * v116
                    + v41 * v115;
                v44 = v119 * 0.00007292115 - v33.__cosval * v115 - v33.__sinval * v118;
                v45 = v33.__cosval * v118 - v33.__sinval * v115;
                v46 = v33.__sinval * v118 + v33.__cosval * v115;
                v47 = v33.__cosval * -0.00007292115 * v126;
                v48 = (1.0 - v126) * -(v33.__cosval * v124)
                    + v33.__sinval * -0.00007292115 * v115 * (1.0 - v126)
                    + v39 * v116
                    + v40 * v115
                    + v33.__cosval * 0.00007292115 * v118 * (1.0 - v126)
                    + -(v33.__sinval * v114) * (1.0 - v126)
                    + v33.__sinval * 0.00007292115 * -0.00007292115 * v126 * v34
                    + v47 * v118;
                v125 = v115 * v47
                     + -(v33.__sinval * v124) * (1.0 - v126)
                     + v33.__cosval * v114 * (1.0 - v126)
                     + v38 * v118;
                v117 = v43
                     + v33.__sinval * -0.00007292115 * v118 * (1.0 - v126)
                     + -(v33.__cosval * v114) * (1.0 - v126)
                     + v39 * v34
                     + v40 * v118;
                v49 = (-(v33.__sinval * v34) - v33.__cosval * v116) * 0.00007292115
                    + v33.__sinval * v115
                    - v33.__cosval * v118;
                v50 = v35 - v137;
                v51 = v119 - v135;
                v52 = v36 - v133;
                v53 = v51 * v51 + v50 * v50;
                v54 = sqrt(v53 + v52 * v52);
                v136 = v33.__cosval * -0.00007292115 * v116
                     + v33.__sinval * v115
                     - v33.__cosval * v118
                     + v33.__sinval * -0.00007292115 * v34;
                v138 = v33.__sinval * -0.00007292115 * v116
                     - v33.__cosval * v115
                     - v33.__sinval * v118
                     + v33.__cosval * 0.00007292115 * v34;
                v55 = v54 * (v54 * v54);
                v56 = (v52 * v52 + v51 * v51) / v55;
                v57 = -(v50 * v51) / v55;
                v58 = -(v50 * (v36 - v133)) / v55;
                v59 = v127 - v24 * v127;
                v60 = v46 + v44 * v24;
                v61 = v46 + v44 * v126;
                v62 = v45 + v49 * v24;
                v134 = v50 / v54;
                v63 = v50 / v54 * (v42 + v48 * v24) + (v62 * v57 + v56 * v60 + v58 * v59) * v61;
                v64 = v49 * v57 + v56 * v44 - v58 * v127;
                v65 = v50 / v54 * v48;
                v66 = v128 * v65 + v128 * v64 * v61;
                v67 = v140 * v65 + -(v56 - v64 * v140) * v61;
                v68 = v139 * v65 + -(v57 - v64 * v139) * v61;
                v69 = v27 * v65 + -(v58 - v64 * v27) * v61;
                v70 = (v52 * v52 + v50 * v50) / v55;
                v71 = v45 + v49 * v126;
                v72 = v52;
                v73 = -(v51 * v52) / v55;
                v74 = v63 + (v62 * v70 + v57 * v60 + v73 * v59) * v71;
                v75 = v49 * v70 + v57 * v44 - v73 * v127;
                v76 = v66 + v128 * v75 * v71;
                v77 = v67 + -(v57 - v75 * v140) * v71;
                v78 = v68 + -(v70 - v75 * v139) * v71;
                v79 = v69 + -(v73 - v75 * v27) * v71;
                v80 = v53 / v55;
                v81 = v51 / v54;
                v82 = v74 + v51 / v54 * (v125 + v117 * v24);
                v83 = v127 - v127 * v126;
                v84 = v59;
                v85 = v82 + (v62 * v73 + v58 * v60 + v80 * v59) * v83;
                v86 = v49 * v73 + v58 * v44 - v80 * v127;
                v87 = v76 + v81 * v117 * v128 + v128 * v86 * v83;
                v88 = v77 + v81 * v117 * v140 + -(v58 - v86 * v140) * v83;
                v89 = v78 + v81 * v117 * v139 + -(v73 - v86 * v139) * v83;
                v90 = v79 + v81 * v117 * v27 + -(v80 - v86 * v27) * v83;
                v91 = v72 / v54;
                v92 = -(v120 * (1.0 - v126));
                v93 = v85
                    + v72 / v54 * ((1.0 - v126) * v120 + v92 * v24)
                    + (-(v57 * v62) - v56 * v60 - v58 * v84) * v121
                    + (-(v70 * v62) - v57 * v60 - v73 * v84) * v122;
                v94 = v91 * v92;
                v95 = -(v57 * v49) - v56 * v44 + v58 * v127;
                v96 = v87 + v94 * v128 + v128 * v95 * v121;
                v97 = v88 + v94 * v140 + (v56 + v95 * v140) * v121;
                v98 = v89 + v94 * v139 + (v57 + v95 * v139) * v121;
                v99 = v90 + v94 * v27 + (v58 + v95 * v27) * v121;
                v100 = -(v70 * v49) - v57 * v44 + v73 * v127;
                v101 = v93 + (-(v73 * v62) - v58 * v60 - v80 * v84) * v123;
                v102 = -(v73 * v49) - v58 * v44 + v80 * v127;
                v103 = v58 + v102 * v140;
                v104 = v73 + v102 * v139;
                v105 = v80 + v102 * v27;
                v106 = v96 + v128 * v100 * v122 + v128 * v102 * v123;
                v107 = v97 + (v57 + v100 * v140) * v122 + v103 * v123;
                v108 = v98 + (v70 + v100 * v139) * v122 + v104 * v123;
                v109 = *((double *)&v141 + 1) + *(double *)&v142 * 0.0 + *((double *)&v142 + 1) * 0.0;
                v110 = *(double *)&v142 + *((double *)&v141 + 1) * 0.0 + *((double *)&v142 + 1) * 0.0;
                v111 = *((double *)&v142 + 1) + *(double *)&v142 * 0.0 + *((double *)&v141 + 1) * 0.0;
                v112 = 1.0 - (v136 * v81 + v134 * v138 - v91 * v127) / 299792458.0;
                *a12 = v101 / 299792458.0 / v112;
                a12[1] = v106 / 299792458.0 / v112;
                a12[2] = v107 / 299792458.0 / v112;
                a12[3] = v108 / 299792458.0 / v112;
                a12[4] = (v99 + (v73 + v100 * v27) * v122 + v105 * v123) / 299792458.0 / v112;
                a12[5] = (v113 + v132 * 0.0 + v130 * 0.0 - v134 / 299792458.0 + v109) / v112;
                a12[6] = (v132 + v113 * 0.0 + v130 * 0.0 - v81 / 299792458.0 + v110) / v112;
                a12[7] = (v130 + v132 * 0.0 + v113 * 0.0 - v91 / 299792458.0 + v111) / v112;
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cnnavigation::GLONASSTimeOfFlightRate(int a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, double *a8, double a9, double a10, double a11)
{
  return cnnavigation::GLONASSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, a7, 1, a9, a10, a11, a8);
}

uint64_t cnnavigation::GPSSatelliteClockOffset(cnnavigation *this, uint64_t a2, double a3, double a4, const cnnavigation::GPSEphemerides *a5, double *a6)
{
  uint64_t v7;

  return cnnavigation::GPSSatelliteClockOffset((int)this, a2, (double *)a5, 0, (uint64_t)&v7, a3, a4);
}

uint64_t cnnavigation::GPSSatelliteClockOffset(int a1, uint64_t a2, double *a3, int a4, uint64_t a5, double a6, double a7)
{
  double v10;
  double v12;
  uint64_t result;
  double v14;
  double v15;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  long double v32;
  long double v33;
  double v34;
  double v35;

  if (a7 <= 0.0 || *(_BYTE *)(a2 + 12) == 0)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v10 = *(double *)(a2 + 88);
  if (fabs(v10) < 2.22044605e-16 || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v12 = *(double *)(a2 + 80);
  result = 0xFFFFFFFFLL;
  if (v12 >= 0.0 && v12 < 1.0 && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v14 = *(double *)(a2 + 96);
    if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v15 = *(double *)(a2 + 72);
      if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v19 = a6 - *(double *)(a2 + 40) + (double)(a1 - *(_DWORD *)(a2 + 32)) * 604800.0;
        v20 = a6 - *(double *)(a2 + 24) + (double)(a1 - *(_DWORD *)(a2 + 16)) * 604800.0;
        v35 = *(double *)(a2 + 192) + *(double *)(a2 + 200) * v19 + *(double *)(a2 + 208) * (v19 * v19);
        v21 = v10 * v10;
        v34 = v15 * 0.5;
        v22 = *(double *)(a2 + 64) + v15 * 0.5 * v20 + 19964981.8 / (v10 * (v10 * v10));
        v23 = *(double *)(a2 + 56) + v22 * v20;
        v24 = 10;
        v25 = v23;
        do
        {
          v25 = v23 + v12 * sin(v25);
          --v24;
        }
        while (v24);
        v26 = v21 + v14 * v20;
        result = 0xFFFFFFFFLL;
        if (v26 >= 0.0 && v26 >= 13279855.0)
        {
          v27 = sqrt(v26);
          v28 = v27 * -4.44280763e-10;
          if (fabs(a7 + -1575420000.0) <= 0.000000015)
          {
            v29 = *(double *)(a2 + 216) - *(double *)(a2 + 224);
            v30 = v35;
          }
          else
          {
            v29 = 0.0;
            v30 = v35;
            if (fabs(a7 + -1176450000.0) <= 0.000000015)
              v29 = *(double *)(a2 + 216) - *(double *)(a2 + 240);
          }
          *a3 = v30 + v27 * -4.44280763e-10 * (v25 - v23) - v29;
          if (a4)
          {
            v31 = *(double *)(a2 + 200) + (*(double *)(a2 + 208) + *(double *)(a2 + 208)) * v19;
            v32 = (v25 - v23) * -2.22140382e-10 / v27;
            v33 = cos(v25);
            result = 0;
            *(long double *)a5 = v14 * v32
                               - v28 * (v22 + v34 * v20)
                               + v28 * ((v22 + v34 * v20) / (1.0 - v12 * v33))
                               + v31;
            *(_QWORD *)(a5 + 8) = 0;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t cnnavigation::GPSSatelliteClockOffset(int a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6)
{
  return cnnavigation::GPSSatelliteClockOffset(a1, a2, a3, 1, a4, a5, a6);
}

uint64_t cnnavigation::GPSSatelliteClockOffsetRate(cnnavigation *this, uint64_t a2, double a3, double a4, const cnnavigation::GPSEphemerides *a5, double *a6)
{
  uint64_t v7;

  return cnnavigation::GPSSatelliteClockOffsetRate((int)this, a2, (double *)a5, 0, (uint64_t)&v7, a3);
}

uint64_t cnnavigation::GPSSatelliteClockOffsetRate(int a1, uint64_t a2, double *a3, int a4, uint64_t a5, double a6)
{
  double v7;
  double v8;
  double v10;
  double v11;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t result;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  if (!*(_BYTE *)(a2 + 12))
    return 0xFFFFFFFFLL;
  v7 = *(double *)(a2 + 88);
  if (fabs(v7) < 2.22044605e-16 || (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v8 = *(double *)(a2 + 80);
  if (v8 < 0.0 || v8 >= 1.0)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v10 = *(double *)(a2 + 96);
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v11 = *(double *)(a2 + 72);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v30 = a6 - *(double *)(a2 + 40) + (double)(a1 - *(_DWORD *)(a2 + 32)) * 604800.0;
  v15 = a6 - *(double *)(a2 + 24) + (double)(a1 - *(_DWORD *)(a2 + 16)) * 604800.0;
  v16 = v7 * v7;
  v17 = *(double *)(a2 + 64) + v11 * 0.5 * v15 + 19964981.8 / (v7 * (v7 * v7));
  v18 = *(double *)(a2 + 56) + v17 * v15;
  v19 = 10;
  v20 = v18;
  do
  {
    v21 = sin(v20);
    v20 = v18 + v8 * v21;
    --v19;
  }
  while (v19);
  v22 = cos(v18 + v8 * v21);
  v23 = v16 + v10 * v15;
  result = 0xFFFFFFFFLL;
  if (v23 >= 0.0 && v23 >= 13279855.0)
  {
    v25 = v17 + v11 * 0.5 * v15;
    v26 = 1.0 - v8 * v22;
    v27 = sqrt(v23);
    v28 = v25 / v26 - v25;
    v29 = (v20 - v18) * -2.22140382e-10;
    *a3 = v10 * (1.0 / v27 * v29)
        + v27 * -4.44280763e-10 * v28
        + *(double *)(a2 + 200)
        + (*(double *)(a2 + 208) + *(double *)(a2 + 208)) * v30;
    result = 0;
    if (a4)
    {
      *(double *)a5 = v29 / v27 * 0.0
                    - v27 * -4.44280763e-10 * v11
                    + v27 * -4.44280763e-10 * ((v11 + (v18 - v20) * (v25 / v26) * (v25 / v26)) / v26)
                    + 1.0 / v27 * (v28 * -2.22140382e-10) * v10
                    + v10 * (1.0 / v27 * -2.22140382e-10) * (v25 / v26)
                    - v10 * (1.0 / v27 * -2.22140382e-10) * v25
                    + *(double *)(a2 + 208)
                    + *(double *)(a2 + 208);
      *(_QWORD *)(a5 + 8) = 0;
    }
  }
  return result;
}

uint64_t cnnavigation::GPSSatelliteClockOffsetRate(int a1, uint64_t a2, double *a3, uint64_t a4, double a5)
{
  return cnnavigation::GPSSatelliteClockOffsetRate(a1, a2, a3, 1, a4, a5);
}

uint64_t cnnavigation::GPSSatelliteTime(cnnavigation *this, uint64_t a2, double a3, double a4, const cnnavigation::GPSEphemerides *a5, double *a6, double *a7)
{
  double v8;

  return cnnavigation::GPSSatelliteTime((int)this, a2, a5, a6, 0, &v8, a3, a4);
}

uint64_t cnnavigation::GPSSatelliteTime(int a1, uint64_t a2, _DWORD *a3, double *a4, int a5, double *a6, double a7, double a8)
{
  uint64_t result;
  double v15;
  int v16;
  double v17;
  double v18[2];
  double v19;

  v19 = 0.0;
  if (cnnavigation::GPSSatelliteClockOffset(a1, a2, &v19, a5, (uint64_t)v18, a7, a8))
    return 0xFFFFFFFFLL;
  v15 = v19 + a7;
  v16 = vcvtmd_s64_f64((v19 + a7) / 604800.0);
  *a3 = v16 + a1;
  *a4 = v15 - (double)v16 * 604800.0;
  result = 0;
  if (a5)
  {
    v17 = v18[1];
    *a6 = v18[0] + 1.0;
    a6[1] = v17;
  }
  return result;
}

uint64_t cnnavigation::GPSSatelliteTime(int a1, uint64_t a2, _DWORD *a3, double *a4, double *a5, double a6, double a7)
{
  return cnnavigation::GPSSatelliteTime(a1, a2, a3, a4, 1, a5, a6, a7);
}

double cnnavigation::LinearizedMagneticModel::LinearizedMagneticModel(cnnavigation::LinearizedMagneticModel *this)
{
  double result;

  *(_QWORD *)this = &off_1E25B9940;
  *((_DWORD *)this + 2) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_OWORD *)((char *)this + 217) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25B9940;
  *((_DWORD *)this + 2) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_OWORD *)((char *)this + 217) = 0u;
  return result;
}

uint64_t cnnavigation::LinearizedMagneticModel::LinearizedMagneticModel(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, double a5)
{
  char v6;
  __int128 v7;
  float64x2_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const double *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E25B9940;
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = a3[1];
  *(_QWORD *)(a1 + 40) = a3[2];
  *(_DWORD *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a5;
  v23 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4))
  {
    v6 = 0;
    v7 = 0uLL;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    v8 = 0uLL;
    *(_QWORD *)(a1 + 184) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v23;
    *(_OWORD *)(a1 + 56) = v24;
    *(_QWORD *)(a1 + 72) = v25;
    v9 = v15;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 96) = v9;
    v10 = v17;
    *(_OWORD *)(a1 + 112) = v16;
    *(_OWORD *)(a1 + 128) = v10;
    v11 = v19;
    *(_OWORD *)(a1 + 144) = v18;
    *(_OWORD *)(a1 + 160) = v11;
    v7 = v21;
    *(_OWORD *)(a1 + 176) = v20;
    v12 = (const double *)&unk_18D30BC60;
    v8 = vld1q_dup_f64(v12);
    v6 = 1;
    v8.f64[0] = v22;
  }
  *(_OWORD *)(a1 + 192) = v7;
  *(float64x2_t *)(a1 + 208) = v8;
  *(_BYTE *)(a1 + 232) = v6;
  return a1;
}

void sub_18D08B694(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E25B92A0;
  _Unwind_Resume(a1);
}

double cnnavigation::LinearizedMagneticModel::LinearizedMagneticModel(cnnavigation::LinearizedMagneticModel *this, const cnnavigation::LinearizedMagneticModel *a2)
{
  double result;

  *(_QWORD *)this = &off_1E25B9940;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)this + 13) = *((_OWORD *)a2 + 13);
  result = *((double *)a2 + 28);
  *((double *)this + 28) = result;
  *((_BYTE *)this + 232) = *((_BYTE *)a2 + 232);
  return result;
}

double cnnavigation::LinearizedMagneticModel::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    result = *(double *)(a2 + 224);
    *(double *)(a1 + 224) = result;
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  }
  return result;
}

uint64_t cnnavigation::LinearizedMagneticModel::ComputeLinearizedMagneticModel(uint64_t a1, int a2, double *a3, int a4, int a5, double *a6, double *a7, uint64_t a8, double a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  if (!*(_BYTE *)(a1 + 232))
    return 0xFFFFFFFFLL;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  if (sqrt(v10 * v10 + v9 * v9 + v11 * v11) <= 0.00000001)
    return 0xFFFFFFFFLL;
  v12 = a9 - *(double *)(a1 + 16) + (double)(a2 - *(_DWORD *)(a1 + 8)) * 604800.0;
  if (fabs(v12) > *(double *)(a1 + 224))
    return 0xFFFFFFFFLL;
  v13 = v9 - *(double *)(a1 + 24);
  v14 = v10 - *(double *)(a1 + 32);
  v15 = v11 - *(double *)(a1 + 40);
  if (sqrt(v14 * v14 + v13 * v13 + v15 * v15) > *(double *)(a1 + 216))
    return 0xFFFFFFFFLL;
  *a6 = *(double *)(a1 + 48)
      - (v14 * *(double *)(a1 + 64)
       + *(double *)(a1 + 56) * v13
       + *(double *)(a1 + 72) * v15
       + *(double *)(a1 + 80) * v12)
      + (v14 * (v13 * *(double *)(a1 + 96))
       + v13 * *(double *)(a1 + 88) * v13
       + v13 * *(double *)(a1 + 104) * v15
       + v13 * *(double *)(a1 + 112) * v12
       + v14 * *(double *)(a1 + 120) * v13
       + v14 * *(double *)(a1 + 128) * v14
       + v14 * *(double *)(a1 + 136) * v15
       + v14 * *(double *)(a1 + 144) * v12
       + v15 * *(double *)(a1 + 152) * v13
       + v15 * *(double *)(a1 + 160) * v14
       + v15 * *(double *)(a1 + 168) * v15
       + v15 * *(double *)(a1 + 176) * v12
       + v12 * *(double *)(a1 + 184) * v13
       + v12 * *(double *)(a1 + 192) * v14
       + v12 * *(double *)(a1 + 200) * v15
       + v12 * *(double *)(a1 + 208) * v12)
      * -0.5;
  if (a4)
  {
    v18 = *(double *)(a1 + 72);
    v19 = v14 * *(double *)(a1 + 160)
        + *(double *)(a1 + 152) * v13
        + *(double *)(a1 + 168) * v15
        + *(double *)(a1 + 176) * v12;
    v20 = *(double *)(a1 + 64)
        + v14 * *(double *)(a1 + 128)
        + *(double *)(a1 + 120) * v13
        + *(double *)(a1 + 136) * v15
        + *(double *)(a1 + 144) * v12;
    *a7 = *(double *)(a1 + 56)
        + v14 * *(double *)(a1 + 96)
        + *(double *)(a1 + 88) * v13
        + *(double *)(a1 + 104) * v15
        + *(double *)(a1 + 112) * v12;
    a7[1] = v20;
    a7[2] = v18 + v19;
  }
  v16 = 0;
  if (a5)
  {
    v21 = *(double *)(a1 + 184);
    v22 = *(double *)(a1 + 192);
    v23 = v14 * v22 + v21 * v13;
    v24 = *(double *)(a1 + 200);
    v25 = *(double *)(a1 + 208);
    *(double *)a8 = *(double *)(a1 + 80) + v23 + v24 * v15 + v25 * v12;
    *(_OWORD *)(a8 + 8) = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a8 + 24) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a8 + 40) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a8 + 56) = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a8 + 72) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a8 + 88) = *(_OWORD *)(a1 + 168);
    *(double *)(a8 + 104) = v21;
    *(double *)(a8 + 112) = v22;
    *(double *)(a8 + 120) = v24;
    *(double *)(a8 + 128) = v25;
  }
  return v16;
}

uint64_t cnnavigation::LinearizedMagneticModel::GetMagneticFieldPotential(cnnavigation::LinearizedMagneticModel *this, int a2, double a3, double *a4, double *a5)
{
  _BYTE v6[136];
  double v7[4];

  v7[3] = *(double *)MEMORY[0x1E0C80C00];
  return cnnavigation::LinearizedMagneticModel::ComputeLinearizedMagneticModel((uint64_t)this, a2, a4, 0, 0, a5, v7, (uint64_t)v6, a3);
}

uint64_t cnnavigation::LinearizedMagneticModel::GetMagneticFieldPotential(cnnavigation::LinearizedMagneticModel *this, int a2, double a3, double *a4, double *a5, double *a6)
{
  _BYTE v7[136];

  return cnnavigation::LinearizedMagneticModel::ComputeLinearizedMagneticModel((uint64_t)this, a2, a4, 1, 0, a5, a6, (uint64_t)v7, a3);
}

uint64_t cnnavigation::LinearizedMagneticModel::GetMagneticFieldPotential(uint64_t a1, int a2, double *a3, double *a4, double *a5, uint64_t a6, double a7)
{
  return cnnavigation::LinearizedMagneticModel::ComputeLinearizedMagneticModel(a1, a2, a3, 1, 1, a4, a5, a6, a7);
}

uint64_t cnnavigation::LinearizedMagneticModel::GetMagneticFieldVector(cnnavigation::LinearizedMagneticModel *this, int a2, double a3, double *a4, double *a5)
{
  uint64_t v6;
  double v7;

  return cnnavigation::LinearizedMagneticModel::ComputeLinearizedMagneticModel((uint64_t)this, a2, a4, 1, 0, &v7, a5, (uint64_t)&v6, a3);
}

uint64_t cnnavigation::LinearizedMagneticModel::GetMagneticFieldVector(uint64_t a1, int a2, double *a3, double *a4, uint64_t a5, double a6)
{
  double v7;

  return cnnavigation::LinearizedMagneticModel::ComputeLinearizedMagneticModel(a1, a2, a3, 1, 1, &v7, a4, a5, a6);
}

uint64_t cnnavigation::LinearizedMagneticModel::UpdateLinearization(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, double a5)
{
  int v7;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t *, __int128 *, _OWORD *))(*(_QWORD *)a4 + 32))(a4, a2, a3, &v17, &v18, v15);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = v7;
  *(double *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = a3[1];
  v10 = v17;
  *(_QWORD *)(a1 + 40) = a3[2];
  *(_QWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 72) = v19;
  v11 = v15[1];
  *(_OWORD *)(a1 + 80) = v15[0];
  *(_OWORD *)(a1 + 96) = v11;
  v12 = v15[3];
  *(_OWORD *)(a1 + 112) = v15[2];
  *(_OWORD *)(a1 + 128) = v12;
  v13 = v15[5];
  *(_OWORD *)(a1 + 144) = v15[4];
  *(_OWORD *)(a1 + 160) = v13;
  v14 = v15[7];
  *(_OWORD *)(a1 + 176) = v15[6];
  *(_OWORD *)(a1 + 192) = v14;
  *(_QWORD *)(a1 + 208) = v16;
  *(_OWORD *)(a1 + 216) = xmmword_18D30BC70;
  *(_BYTE *)(a1 + 232) = 1;
  return result;
}

uint64_t cnnavigation::LinearizedMagneticModel::UpdateLinearization(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = a3[1];
  *(_QWORD *)(a1 + 40) = a3[2];
  *(double *)(a1 + 48) = a9;
  *(_QWORD *)(a1 + 56) = *a4;
  *(_QWORD *)(a1 + 64) = a4[1];
  *(_QWORD *)(a1 + 72) = a4[2];
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a5 + 112);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a5 + 128);
  *(double *)(a1 + 216) = a7;
  *(double *)(a1 + 224) = a8;
  *(_BYTE *)(a1 + 232) = 1;
  return 0;
}

_QWORD *sub_18D08BCA4(_QWORD *result)
{
  *result = off_1E25B92A0;
  return result;
}

void sub_18D08BCB4(_QWORD *a1)
{
  *a1 = off_1E25B92A0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D08BCD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 232);
}

uint64_t cnnavigation::details::IonospherePiercePoint::ComputeIonospherePiercePointCoordinates(cnnavigation::details::IonospherePiercePoint *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  long double v14;
  long double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t result;
  double v28;
  long double v29;
  long double v30;
  double v31;
  __double2 v32;
  __double2 v33;
  long double v34;
  long double v35;
  double v36;
  long double v37;
  long double v38;
  long double v39;
  char v40;
  unsigned __int8 v41;
  void (**v42)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  double v49;
  double v50;
  long double v51;
  double v52;
  double v53;
  uint64_t v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v57 = *((float64x2_t *)this + 4);
  v58 = *((_QWORD *)this + 10);
  v55 = *(float64x2_t *)((char *)this + 88);
  v56 = *((_QWORD *)this + 13);
  v52 = 0.0;
  v53 = 0.0;
  v54 = 0;
  v2 = *(_DWORD *)this;
  if (cnnavigation::ECEFToLLA(&v57, *(_DWORD *)this, &v52, 0, (uint64_t)&v42))
  {
    LOWORD(v42) = 5;
    LOBYTE(v49) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, (unsigned __int8 *)&v49, "ComputeIonospherePiercePointCoordinates, conversion of current position from ECEF to LLA failed", v3, v4, v5, v6, v7, v40);
    return 0xFFFFFFFFLL;
  }
  v49 = 0.0;
  v50 = 0.0;
  v51 = 0.0;
  v43 = 0;
  v46 = 0x300000003;
  v44 = &unk_1E25C78E0;
  v45 = xmmword_18D30BB60;
  v47 = &v48;
  v42 = &off_1E25B9560;
  cnnavigation::ECEFToENU(&v55, v2, 0, &v57, 0, (uint64_t)&v49, (uint64_t)&v42, COERCE_DOUBLE(0x300000003));
  if (v13)
  {
    LOWORD(v42) = 5;
    v41 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "ComputeIonospherePiercePointCoordinates, conversion of current position from ECEF to ENU failed", v8, v9, v10, v11, v12, v40);
    return 0xFFFFFFFFLL;
  }
  v14 = v49;
  v15 = v50;
  v16 = v15 * v15 + v14 * v14;
  if (fabs(v16) >= 2.22044605e-16)
  {
    v23 = atan2(sqrt(v16), v51);
    *((double *)this + 2) = v23;
    v22 = atan2(v14, v15);
    *((double *)this + 4) = v22;
    if (v22 < 0.0)
    {
      v22 = v22 + 6.28318531;
      *((double *)this + 4) = v22;
    }
  }
  else
  {
    LOWORD(v42) = 5;
    v41 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "ComputeIonospherePiercePointCoordinates,WARNING: east_north_vector_length_squared is zero", v8, v9, v10, v11, v12, v40);
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 4) = 0;
    v22 = 0.0;
    v23 = 0.0;
  }
  v24 = sqrt(*((double *)this + 9) * 0.001 * (*((double *)this + 9) * 0.001)+ *((double *)this + 8) * 0.001 * (*((double *)this + 8) * 0.001)+ *((double *)this + 10) * 0.001 * (*((double *)this + 10) * 0.001));
  *((double *)this + 7) = v24;
  v25 = *((double *)this + 1);
  if (v25 < 0.0 || (v26 = v25 + 6371.009, v26 < v24))
  {
    LOWORD(v42) = 5;
    v41 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "ComputeIonospherePiercePointCoordinates,this->thin_shell_height_km < 0 or (Re_km + this->thin_shell_height_km) < this->receiver_radius_km_", v17, v18, v19, v20, v21, v40);
    return 0xFFFFFFFFLL;
  }
  v28 = v24 / v26;
  v29 = sin(v23);
  v30 = asin(v29 * v28);
  *((long double *)this + 3) = v30;
  v31 = v52;
  v32 = __sincos_stret(v23 - v30);
  v33 = __sincos_stret(v31);
  v34 = cos(v22);
  v35 = asin(v34 * (v32.__sinval * v33.__cosval) + v33.__sinval * v32.__cosval);
  *((long double *)this + 5) = v35;
  v36 = v53;
  if (fabs(fabs(v35) + -1.57079633) <= 0.000000015)
  {
    result = 0;
    *((double *)this + 6) = v53;
  }
  else
  {
    v37 = sin(v22) * v32.__sinval;
    v38 = cos(v35);
    v39 = asin(v37 / v38);
    result = 0;
    *((long double *)this + 6) = v36 + v39;
  }
  return result;
}

uint64_t cnnavigation::NullIonosphereModel::GetIonosphericDelay(cnnavigation::NullIonosphereModel *this, int a2, double a3, const double *a4, const double *a5, double a6, double *a7)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  if (a4)
  {
    if (a5)
    {
      result = 0;
      *a7 = 0.0;
    }
  }
  return result;
}

double cnnavigation::NullIonosphereModel::GetIonosphericDelay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _OWORD *a6)
{
  double result;

  if (a3)
  {
    if (a4)
    {
      *a5 = 0;
      result = 0.0;
      a6[2] = 0u;
      a6[3] = 0u;
      *a6 = 0u;
      a6[1] = 0u;
    }
  }
  return result;
}

_QWORD *sub_18D08C070(_QWORD *result)
{
  *result = &unk_1E25B9450;
  return result;
}

void sub_18D08C084(_QWORD *a1)
{
  *a1 = &unk_1E25B9450;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D08C0A8()
{
  return 1;
}

void cnnavigation::GNSSEphemerides::~GNSSEphemerides(cnnavigation::GNSSEphemerides *this)
{
  *(_QWORD *)this = off_1E25B93B0;
}

uint64_t cnnavigation::GNSSEphemerides::GNSSFindSat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v4[24];
  _BYTE v5[24];
  __int16 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v6 = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 56))(a1, a2, &v6, a3, v5, v4);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSFindSat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int16 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v6 = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, a2, &v6, a3, a4, &v5);
}

{
  uint64_t v5;
  _BYTE v6[24];

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)a1 + 56))(a1, a2, a3, a4, v6, &v5);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSFindSat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v6 = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v12 = 0;
  v10 = 0;
  v11 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, &v6, a3, a4, a5);
}

{
  _BYTE v6[24];

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 56))(a1, a2, a3, a4, a5, v6);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSSatelliteClockOffset(cnnavigation::GNSSEphemerides *this, const cnnavigation::TAITime *a2, double a3, double *a4)
{
  _BYTE v5[16];
  __int16 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v6 = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return (*(uint64_t (**)(cnnavigation::GNSSEphemerides *, const cnnavigation::TAITime *, __int16 *, double *, _QWORD, _BYTE *, double))(*(_QWORD *)this + 96))(this, a2, &v6, a4, 0, v5, a3);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSSatelliteClockOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v5 = 0;
  v6 = 0u;
  v7 = 0u;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, &v5, a3, 1, a4);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSSatelliteClockOffset(cnnavigation::GNSSEphemerides *this, const cnnavigation::TAITime *a2, const cnnavigation::GNSSUTCParameters *a3, double a4, double *a5)
{
  uint64_t v6;

  return (*(uint64_t (**)(cnnavigation::GNSSEphemerides *, const cnnavigation::TAITime *, const cnnavigation::GNSSUTCParameters *, double *, _QWORD, uint64_t *, double))(*(_QWORD *)this + 96))(this, a2, a3, a5, 0, &v6, a4);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSSatelliteClockOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, a3, a4, 1, a5);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSSatelliteClockOffsetRate(cnnavigation::GNSSEphemerides *this, const cnnavigation::TAITime *a2, double a3, double *a4)
{
  _BYTE v5[16];
  __int16 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v6 = 0;
  v7 = 0u;
  v8 = 0u;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return (*(uint64_t (**)(cnnavigation::GNSSEphemerides *, const cnnavigation::TAITime *, __int16 *, double *, _QWORD, _BYTE *, double))(*(_QWORD *)this + 136))(this, a2, &v6, a4, 0, v5, a3);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSSatelliteClockOffsetRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v5 = 0;
  v6 = 0u;
  v7 = 0u;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, &v5, a3, 1, a4);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSSatelliteClockOffsetRate(cnnavigation::GNSSEphemerides *this, const cnnavigation::TAITime *a2, const cnnavigation::GNSSUTCParameters *a3, double a4, double *a5)
{
  uint64_t v6;

  return (*(uint64_t (**)(cnnavigation::GNSSEphemerides *, const cnnavigation::TAITime *, const cnnavigation::GNSSUTCParameters *, double *, _QWORD, uint64_t *, double))(*(_QWORD *)this + 136))(this, a2, a3, a5, 0, &v6, a4);
}

uint64_t cnnavigation::GNSSEphemerides::GNSSSatelliteClockOffsetRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, a3, a4, 1, a5);
}

cnnavigation::SphericalHarmonicsIonosphereParameters *cnnavigation::SphericalHarmonicsIonosphereParameters::SphericalHarmonicsIonosphereParameters(cnnavigation::SphericalHarmonicsIonosphereParameters *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0x7FF8000000000000;
  bzero((char *)this + 48, 0x2000uLL);
  *((_QWORD *)this + 1030) = 0x7FF8000000000000;
  *((_BYTE *)this + 8248) = 0;
  if (a2 >= 0x10)
    __assert_rtn("SphericalHarmonicsIonosphereParameters", "sphericalharmonicsionospheremodel.cpp", 33, "this->max_degree_N_ <= SH_MAX_DEGREE_ORDER");
  if (a2 < a3)
    __assert_rtn("SphericalHarmonicsIonosphereParameters", "sphericalharmonicsionospheremodel.cpp", 34, "this->max_order_M_ <= this->max_degree_N_");
  v6 = (((a2 + 1) * (a2 + 2)) >> 1) - ((a2 - a3 + (a2 - a3) * (a2 - a3)) >> 1);
  *((_DWORD *)this + 2) = v6;
  *((_DWORD *)this + 3) = v6 - (a2 + 1);
  return this;
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereParameters::LoadModelParameters(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t **a5, uint64_t *a6, uint64_t **a7, uint64_t a8, double a9, double a10)
{
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  __int16 *v19;
  char *v20;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  BOOL v38;
  char v40;
  char v41;
  __int16 v42;
  unsigned __int8 v43;
  __int16 v44;
  unsigned __int8 v45;
  __int16 v46;
  char v47;
  __int16 v48;
  unsigned __int8 v49;
  __int16 v50;

  v10 = (double)*(uint64_t *)a2;
  v11 = 0xFFFFFFFFLL;
  if (COERCE__INT64(fabs(*(double *)(a2 + 8) + v10)) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(a2 + 8) + v10 >= 0.0)
  {
    v12 = (a4[1] - *a4) >> 3;
    v13 = *(unsigned int *)(a1 + 8);
    if (v12 == v13 && (a6[1] - *a6) >> 3 == v12)
    {
      v15 = a5[1] - *a5;
      v16 = *(unsigned int *)(a1 + 12);
      if (v15 == v16 && a7[1] - *a7 == v15)
      {
        v22 = 0;
        v23 = 0;
        v25 = *(_DWORD *)a1;
        v24 = *(_DWORD *)(a1 + 4);
        v26 = 0.0;
        do
        {
          if (v22 <= v25)
          {
            a8 = 0;
            v27 = *a4;
            v28 = *a6;
            while (1)
            {
              v29 = (v23 + a8);
              if (v29 > v13)
                return 0xFFFFFFFFLL;
              v30 = *(double *)(v27 + 8 * v29);
              if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                return 0xFFFFFFFFLL;
              v11 = 0xFFFFFFFFLL;
              if ((*(_QWORD *)(v28 + 8 * v29) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || *(double *)(v28 + 8 * v29) < 0.0)
              {
                return v11;
              }
              if ((v22 + (_DWORD)a8) | v22)
              {
                if (fabs(v30) > v26)
                {
                  v44 = 5;
                  v43 = 4;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "#shiono,LoadModelParameters,fabs(Cnm) coefficient > C0,verification failed,n,%d,m,%d,C_nm_tecu,%.3f,C0_tecu,%.3f", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v22 + a8);
                  return 0xFFFFFFFFLL;
                }
              }
              else if (v30 < 1.0 || (v26 = *(double *)(v27 + 8 * v29), v30 > 1000.0))
              {
                v46 = 5;
                v45 = 4;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v45, "#shiono,LoadModelParameters,C0 coefficient out of range,verification failed,C0_tecu,%.3f", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, SLOBYTE(v30));
                return 0xFFFFFFFFLL;
              }
              v31 = (unint64_t)(v22 + a8) << 7;
              *(double *)(a1 + 48 + 8 * v22 + v31) = v30;
              *(_QWORD *)(a1 + 4144 + 8 * v22 + v31) = *(_QWORD *)(v28 + 8 * v29);
              a8 = (a8 + 1);
              if (v22 + a8 > v25)
              {
                v23 += a8;
                break;
              }
            }
          }
          ++v22;
        }
        while (v22 <= v24);
        if (v24)
        {
          v32 = 0;
          v33 = 1;
          while (v33 > v25)
          {
LABEL_36:
            if (++v33 > v24)
              goto LABEL_45;
          }
          v34 = 0;
          a4 = *a5;
          a6 = *a7;
          a8 = a1 + 2096 + 8 * v33;
          while (1)
          {
            v35 = (v32 + v34);
            if (v35 > v16
              || (a4[v35] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            {
              return 0xFFFFFFFFLL;
            }
            v11 = 0xFFFFFFFFLL;
            if ((a6[v35] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)&a6[v35] < 0.0)
              return v11;
            v36 = (unint64_t)(v33 + v34) << 7;
            *(_QWORD *)(a8 + v36) = a4[v35];
            *(_QWORD *)(a1 + 6192 + 8 * v33 + v36) = a6[v35];
            ++v34;
            if (v33 + v34 > v25)
            {
              v32 += v34;
              goto LABEL_36;
            }
          }
        }
LABEL_45:
        if (a3
          && a9 >= 0.0
          && (*(_QWORD *)&a9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(_QWORD *)&a10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v37 = *(double *)(a2 + 8) + v10;
          v38 = ((*(_QWORD *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
             && (*(_QWORD *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL;
          if (!v38 || *(_QWORD *)&v37 == 0)
          {
            v11 = 0;
            *(_DWORD *)(a1 + 32) = a3;
            *(double *)(a1 + 40) = a9;
            *(double *)(a1 + 8240) = a10;
            *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
            *(_BYTE *)(a1 + 8248) = 1;
            return v11;
          }
        }
        v42 = 5;
        v41 = 4;
        v18 = "#shiono,LoadModelParameters,input parameters verification failed";
        v19 = &v42;
        v20 = &v41;
      }
      else
      {
        v48 = 5;
        v47 = 4;
        v40 = v15;
        v18 = "#shiono,LoadModelParameters,S terms mismatch,sin_terms,%lu,sigma_sin_terms,%lu,max_sin_terms,%d,";
        v19 = &v48;
        v20 = &v47;
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v19, (unsigned __int8 *)v20, v18, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v40);
    }
    else
    {
      v50 = 5;
      v49 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, &v49, "#shiono,LoadModelParameters,C terms mismatch,cos_terms,%lu,sigma_cos_terms,%lu,max_cos_terms,%d,", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, v12);
    }
    return 0xFFFFFFFFLL;
  }
  return v11;
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::GetIonosphericDelay(cnnavigation::SphericalHarmonicsIonosphereModel *this, uint64_t a2, long double a3, const double *a4, const double *a5, double a6, double *a7)
{
  _OWORD v8[4];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a4;
  v12 = *((_QWORD *)a4 + 2);
  v9 = *(_OWORD *)a5;
  v10 = *((_QWORD *)a5 + 2);
  return cnnavigation::SphericalHarmonicsIonosphereModel::GetIonosphericDelay(this, a3, a6, a2, &v11, &v9, a7, 0, v8);
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::GetIonosphericDelay(_QWORD *a1, long double a2, double a3, uint64_t a4, __int128 *a5, __int128 *a6, double *a7, int a8, _OWORD *a9)
{
  cnprint::CNPrinter *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  cnprint::CNPrinter *LogLevel;
  double v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  cnprint::CNPrinter *v30;
  double v31;
  __double2 v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double *v39;
  double *v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  double *v55;
  uint64_t v56;
  double v57;
  double v58;
  _QWORD *v59;
  double v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  double *v64;
  unint64_t v65;
  uint64_t *v66;
  double v67;
  _QWORD *v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  cnprint::CNPrinter *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *v91;
  int v92;
  __int128 *v93;
  double v94;
  unsigned __int8 v95;
  __int16 v96;
  _QWORD v97[256];
  uint64_t v98;
  _QWORD v99[240];
  uint64_t v100;
  _BYTE v101[112];
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[112];
  uint64_t v105;
  int v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;

  v17 = (cnprint::CNPrinter *)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((v17 & 1) != 0)
  {
    v23 = (uint64_t *)a1[3];
    if (v23)
    {
      v91 = a7;
      v92 = a8;
      v24 = 0;
      v94 = (fmod(a2, 86400.0) + -50400.0) * 3.14159265 / 43200.0;
      v26 = 0.0;
      v27 = 0uLL;
      v93 = a6;
      while (1)
      {
        v28 = v23[3];
        if (!v28 || !*(_BYTE *)(v28 + 8248))
          break;
        if (!*((_BYTE *)v23 + 2096))
        {
          if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
          {
            LOWORD(v97[0]) = 5;
            LOBYTE(v103) = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v97, (unsigned __int8 *)&v103, "#shiono,GetIonosphericDelay,layer_num,%u,Legendre normalization not initialized", v81, v82, v83, v84, v85, *(_DWORD *)(v23[3] + 32));
          }
          return 0xFFFFFFFFLL;
        }
        v29 = *(_QWORD *)(v28 + 40);
        v106 = 0;
        v107 = v29;
        v108 = v27;
        v109 = v27;
        v110 = v27;
        v111 = *a5;
        v112 = *((_QWORD *)a5 + 2);
        v113 = *a6;
        v114 = *((_QWORD *)a6 + 2);
        v30 = (cnprint::CNPrinter *)cnnavigation::details::IonospherePiercePoint::ComputeIonospherePiercePointCoordinates((cnnavigation::details::IonospherePiercePoint *)&v106);
        if ((_DWORD)v30)
        {
          if (cnprint::CNPrinter::GetLogLevel(v30) <= 1)
          {
            LOWORD(v97[0]) = 5;
            LOBYTE(v103) = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v97, (unsigned __int8 *)&v103, "#shiono,GetIonosphericDelay,layer_num,%u,failed to calculate IPP coordinates", v86, v87, v88, v89, v90, *(_DWORD *)(v23[3] + 32));
          }
          return 0xFFFFFFFFLL;
        }
        v31 = fmod(v94 + *(double *)&v110, 6.28318531);
        v105 = 0;
        memset(v104, 0, sizeof(v104));
        v102 = 0;
        memset(v101, 0, sizeof(v101));
        v103 = 0x3FF0000000000000;
        v100 = 0;
        v32 = __sincos_stret(v31);
        v33 = (_DWORD *)v23[3];
        v34 = v33[1];
        if ((_DWORD)v34)
        {
          if ((v34 + 1) > 2)
            v35 = (v34 + 1);
          else
            v35 = 2;
          v36 = v35 - 1;
          v37 = 1.0;
          v38 = 0.0;
          v39 = (double *)v104;
          v40 = (double *)v101;
          do
          {
            v41 = v38 * -v32.__sinval + v32.__cosval * v37;
            *v39++ = v41;
            v38 = v32.__sinval * v37 + v32.__cosval * v38;
            *v40++ = v38;
            v37 = v41;
            --v36;
          }
          while (v36);
        }
        bzero(&v98, 0x7F8uLL);
        v47 = sin(*((long double *)&v109 + 1));
        v48 = sqrt(1.0 - v47 * v47);
        v97[0] = 0x3FF0000000000000;
        *(double *)v99 = v47;
        *(double *)&v99[1] = v48;
        LODWORD(v49) = *v33 + 1;
        if (*v33 >= 2u)
        {
          v50 = 0;
          if (v49 <= 3)
            v51 = 3;
          else
            v51 = *v33 + 1;
          v52 = (v51 - 2);
          v53 = 1;
          v54 = 1;
          v55 = (double *)v99;
          v56 = 2;
          do
          {
            v57 = (double)v56 * 2.0 + -1.0;
            v58 = *(double *)&v97[16 * v56 - 17 + v56] * v57;
            v59 = &v97[16 * v56];
            *(double *)&v59[v56] = v48 * v58;
            *(double *)&v59[v56 - 1] = v47 * v58;
            if ((int)v56 - 2 >= 0)
            {
              v60 = v47 * v57;
              v61 = 2;
              v62 = v53;
              v63 = v54;
              v64 = v55;
              do
              {
                v64[16] = 1.0 / (double)v61++ * (v60 * *v64 - *(v64 - 16) * (double)v62);
                --v64;
                --v63;
                --v62;
              }
              while (v63 > 0);
            }
            ++v56;
            ++v50;
            v55 += 17;
            ++v54;
            v53 += 2;
          }
          while (v50 != v52);
        }
        v65 = 0;
        v66 = v23 + 6;
        if (v49 <= 1)
          v49 = 1;
        else
          v49 = v49;
        v67 = 0.0;
        v68 = v97;
        v69 = v33;
        do
        {
          v70 = 0;
          if (v65 >= v34)
            v71 = v34;
          else
            v71 = v65;
          v72 = 8 * v71 + 8;
          do
          {
            v67 = v67
                + (*(double *)&v69[v70 / 4 + 524] * *(double *)&v101[v70 - 8]
                 + *(double *)&v69[v70 / 4 + 12] * *(double *)&v104[v70 - 8])
                * (*(double *)&v68[v70 / 8]
                 * *(double *)&v66[v70 / 8]);
            v70 += 8;
          }
          while (v72 != v70);
          ++v65;
          v69 += 32;
          v66 += 16;
          v68 += 16;
        }
        while (v65 != v49);
        if (v67 <= 0.0)
        {
          v96 = 5;
          v95 = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v96, &v95, "#shiono,GetIonosphericDelay,layer_num,%u,WARNING:negative vtec,%.3lf,set to zero", v42, v43, v44, v45, v46, v33[8]);
          v67 = 0.0;
        }
        a6 = v93;
        if (*((double *)&v108 + 1) >= 1.57079633 || *((double *)&v108 + 1) < 0.0)
        {
          v96 = 5;
          v95 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v96, &v95, "#shiono,GetIonosphericDelay,layer_num,%u,invalid sv_zenith_angle_at_ipp_rad,%.3lf,rad", v42, v43, v44, v45, v46, *(_DWORD *)(v23[3] + 32));
          return 0xFFFFFFFFLL;
        }
        v26 = v26 + v67 * (1.0 / cos(*((long double *)&v108 + 1)));
        LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v73);
        if (!(_DWORD)LogLevel)
        {
          v96 = 5;
          v95 = 0;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v96, &v95, "#shiono,GetIonosphericDelay,successfully computed per-layer delay,layer_num,%u,gps_week,%d,gps_sec,%.2f,fc,%.2f,sv_at_rx_az_deg,%.2f,sv_at_rx_el_deg,%.2f,vtec,%.3f,vtec_to_stec_fcn,%.3f,stec,%.3f,iono_delay_ns,%.3f", v18, v19, v20, v21, v22, *(_DWORD *)(v23[3] + 32));
        }
        ++v24;
        v23 = (uint64_t *)*v23;
        v27 = 0uLL;
        if (!v23)
        {
          if (!v24)
            goto LABEL_45;
          if (a1[4] > (unint64_t)v24)
          {
            v74 = v24;
            goto LABEL_46;
          }
          *v91 = 1344536590.0 / (a3 * a3) * v26;
          result = 0;
          if (v92)
          {
            a9[2] = 0u;
            a9[3] = 0u;
            *a9 = 0u;
            a9[1] = 0u;
          }
          return result;
        }
      }
    }
    else
    {
LABEL_45:
      v74 = 0;
LABEL_46:
      LOWORD(v97[0]) = 5;
      LOBYTE(v103) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v97, (unsigned __int8 *)&v103, "#shiono,GetIonosphericDelay,unable to compute stec from all available layers,processed_layers,%u", v18, v19, v20, v21, v22, v74);
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    LOWORD(v97[0]) = 5;
    LOBYTE(v103) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v97, (unsigned __int8 *)&v103, "#shiono,GetIonosphericDelay,parameters not initialized or invalid,num_layers,%zu", v75, v76, v77, v78, v79, a1[4]);
  }
  return 0xFFFFFFFFLL;
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::GetIonosphericDelay(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, _OWORD *a6, long double a7, double a8)
{
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a3;
  v12 = *(_QWORD *)(a3 + 16);
  v9 = *(_OWORD *)a4;
  v10 = *(_QWORD *)(a4 + 16);
  return cnnavigation::SphericalHarmonicsIonosphereModel::GetIonosphericDelay(a1, a7, a8, a2, &v11, &v9, a5, 1, a6);
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::GetIonosphericDelay(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4, double *a5, long double a6, double a7)
{
  _OWORD v8[4];

  return cnnavigation::SphericalHarmonicsIonosphereModel::GetIonosphericDelay(a1, a6, a7, a2, a3, a4, a5, 0, v8);
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::UpdateParameters(cnnavigation::SphericalHarmonicsIonosphereModel *this, const cnnavigation::SphericalHarmonicsIonosphereParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t **v30;
  uint64_t *i;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  int8x8_t prime;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  cnnavigation::SphericalHarmonicsIonosphereModel::ParametersAndLegendreNormalizations *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  _QWORD *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  void *v78;
  char v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  _BYTE v82[2057];
  _QWORD v83[2];
  char v84;

  if (!*((_BYTE *)a2 + 8248))
  {
    LOWORD(v80) = 5;
    LOBYTE(v83[0]) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v80, (unsigned __int8 *)v83, "#shiono,UpdateParameters,parameters object is not valid", a4, a5, a6, a7, a8, v79);
    return 0xFFFFFFFFLL;
  }
  v11 = *(int8x8_t *)((char *)this + 16);
  if (!*(_QWORD *)&v11)
    goto LABEL_19;
  v12 = *((unsigned int *)a2 + 8);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = *((unsigned int *)a2 + 8);
    if (*(_QWORD *)&v11 <= v12)
      v14 = v12 % *(_QWORD *)&v11;
  }
  else
  {
    v14 = (v11.i32[0] - 1) & v12;
  }
  v16 = *(uint64_t ***)(*((_QWORD *)this + 1) + 8 * v14);
  if (!v16 || (v17 = *v16) == 0)
  {
LABEL_19:
    bzero(&v80, 0x819uLL);
    v19 = (std::__shared_weak_count *)operator new(0x2058uLL);
    v19->__shared_owners_ = 0;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCE88;
    memcpy(&v19[1], a2, 0x2040uLL);
    v80 = &v19[1].__vftable;
    v81 = v19;
    if (cnnavigation::SphericalHarmonicsIonosphereModel::ParametersAndLegendreNormalizations::ComputeLegendreNormalizations((cnnavigation::SphericalHarmonicsIonosphereModel::ParametersAndLegendreNormalizations *)&v80, v20, v21, v22, v23, v24, v25, v26))
    {
      v15 = 0xFFFFFFFFLL;
LABEL_109:
      v75 = v81;
      if (v81)
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v77 = __ldaxr(p_shared_owners);
        while (__stlxr(v77 - 1, p_shared_owners));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      return v15;
    }
    v27 = *((unsigned int *)a2 + 8);
    v28 = *((_QWORD *)this + 2);
    if (v28)
    {
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        v8 = *((unsigned int *)a2 + 8);
        if (v28 <= v27)
          v8 = v27 % v28;
      }
      else
      {
        v8 = ((_DWORD)v28 - 1) & v27;
      }
      v30 = *(uint64_t ***)(*((_QWORD *)this + 1) + 8 * v8);
      if (v30)
      {
        for (i = *v30; i; i = (uint64_t *)*i)
        {
          v32 = i[1];
          if (v32 == v27)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v27)
              goto LABEL_100;
          }
          else
          {
            if (v29.u32[0] > 1uLL)
            {
              if (v32 >= v28)
                v32 %= v28;
            }
            else
            {
              v32 &= v28 - 1;
            }
            if (v32 != v8)
              break;
          }
        }
      }
    }
    v33 = operator new(0x838uLL);
    v34 = (_QWORD *)((char *)this + 24);
    v83[0] = v33;
    v83[1] = (char *)this + 24;
    *v33 = 0;
    v33[1] = v27;
    *((_DWORD *)v33 + 4) = v27;
    bzero(v33 + 3, 0x820uLL);
    v84 = 1;
    v35 = (float)(unint64_t)(*((_QWORD *)this + 4) + 1);
    v36 = *((float *)this + 10);
    if (v28 && (float)(v36 * (float)v28) >= v35)
    {
      v27 = v8;
      goto LABEL_90;
    }
    v37 = 1;
    if (v28 >= 3)
      v37 = (v28 & (v28 - 1)) != 0;
    v38 = v37 | (2 * v28);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = (int8x8_t)v39;
    else
      prime = (int8x8_t)v38;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v28 = *((_QWORD *)this + 2);
    }
    if (*(_QWORD *)&prime <= v28)
    {
      if (*(_QWORD *)&prime >= v28)
        goto LABEL_86;
      v47 = vcvtps_u32_f32((float)*((unint64_t *)this + 4) / *((float *)this + 10));
      if (v28 < 3 || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
      {
        v47 = std::__next_prime(v47);
      }
      else
      {
        v49 = 1 << -(char)__clz(v47 - 1);
        if (v47 >= 2)
          v47 = v49;
      }
      if (*(_QWORD *)&prime <= v47)
        prime = (int8x8_t)v47;
      if (*(_QWORD *)&prime >= v28)
      {
        v28 = *((_QWORD *)this + 2);
        goto LABEL_86;
      }
      if (!*(_QWORD *)&prime)
      {
        v78 = (void *)*((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = 0;
        if (v78)
          operator delete(v78);
        v28 = 0;
        *((_QWORD *)this + 2) = 0;
        goto LABEL_86;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      sub_18D0788A0();
    v41 = operator new(8 * *(_QWORD *)&prime);
    v42 = (void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v41;
    if (v42)
      operator delete(v42);
    v43 = 0;
    *((int8x8_t *)this + 2) = prime;
    do
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v43++) = 0;
    while (*(_QWORD *)&prime != v43);
    v44 = (_QWORD *)*v34;
    if (*v34)
    {
      v45 = v44[1];
      v46 = (uint8x8_t)vcnt_s8(prime);
      v46.i16[0] = vaddlv_u8(v46);
      if (v46.u32[0] > 1uLL)
      {
        if (v45 >= *(_QWORD *)&prime)
          v45 %= *(_QWORD *)&prime;
      }
      else
      {
        v45 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v45) = v34;
      v63 = (_QWORD *)*v44;
      if (*v44)
      {
        do
        {
          v64 = v63[1];
          if (v46.u32[0] > 1uLL)
          {
            if (v64 >= *(_QWORD *)&prime)
              v64 %= *(_QWORD *)&prime;
          }
          else
          {
            v64 &= *(_QWORD *)&prime - 1;
          }
          if (v64 != v45)
          {
            v65 = *((_QWORD *)this + 1);
            if (!*(_QWORD *)(v65 + 8 * v64))
            {
              *(_QWORD *)(v65 + 8 * v64) = v44;
              goto LABEL_82;
            }
            *v44 = *v63;
            *v63 = **(_QWORD **)(*((_QWORD *)this + 1) + 8 * v64);
            **(_QWORD **)(*((_QWORD *)this + 1) + 8 * v64) = v63;
            v63 = v44;
          }
          v64 = v45;
LABEL_82:
          v44 = v63;
          v63 = (_QWORD *)*v63;
          v45 = v64;
        }
        while (v63);
      }
    }
    v28 = (unint64_t)prime;
LABEL_86:
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v28 <= v27)
        v27 %= v28;
    }
    else
    {
      v27 = ((_DWORD)v28 - 1) & v27;
    }
LABEL_90:
    v66 = *(_QWORD **)(*((_QWORD *)this + 1) + 8 * v27);
    i = (uint64_t *)v83[0];
    if (v66)
    {
      *(_QWORD *)v83[0] = *v66;
    }
    else
    {
      *(_QWORD *)v83[0] = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = i;
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v27) = v34;
      if (!*i)
        goto LABEL_99;
      v67 = *(_QWORD *)(*i + 8);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v67 >= v28)
          v67 %= v28;
      }
      else
      {
        v67 &= v28 - 1;
      }
      v66 = (_QWORD *)(*((_QWORD *)this + 1) + 8 * v67);
    }
    *v66 = i;
LABEL_99:
    v83[0] = 0;
    ++*((_QWORD *)this + 4);
    sub_18D08DAD0((uint64_t)v83);
LABEL_100:
    v69 = v80;
    v68 = v81;
    if (v81)
    {
      v70 = (unint64_t *)&v81->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = (std::__shared_weak_count *)i[4];
    i[3] = (uint64_t)v69;
    i[4] = (uint64_t)v68;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    memcpy(i + 5, v82, 0x809uLL);
    v15 = 0;
    goto LABEL_109;
  }
  while (1)
  {
    v18 = v17[1];
    if (v18 == v12)
      break;
    if (v13.u32[0] > 1uLL)
    {
      if (v18 >= *(_QWORD *)&v11)
        v18 %= *(_QWORD *)&v11;
    }
    else
    {
      v18 &= *(_QWORD *)&v11 - 1;
    }
    if (v18 != v14)
      goto LABEL_19;
LABEL_18:
    v17 = (uint64_t *)*v17;
    if (!v17)
      goto LABEL_19;
  }
  if (*((_DWORD *)v17 + 4) != (_DWORD)v12)
    goto LABEL_18;
  v50 = operator new(0x2058uLL);
  v50[1] = 0;
  v50[2] = 0;
  *v50 = &off_1E25CCE88;
  memcpy(v50 + 3, a2, 0x2040uLL);
  v17[3] = (uint64_t)(v50 + 3);
  v58 = (cnnavigation::SphericalHarmonicsIonosphereModel::ParametersAndLegendreNormalizations *)(v17 + 3);
  v59 = (std::__shared_weak_count *)*((_QWORD *)v58 + 1);
  *((_QWORD *)v58 + 1) = v50;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  return cnnavigation::SphericalHarmonicsIonosphereModel::ParametersAndLegendreNormalizations::ComputeLegendreNormalizations(v58, v51, v52, v53, v54, v55, v56, v57);
}

void sub_18D08D5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_18D08DAD0(v2 - 88);
  sub_18D07C868((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::ParametersAndLegendreNormalizations::ComputeLegendreNormalizations(cnnavigation::SphericalHarmonicsIonosphereModel::ParametersAndLegendreNormalizations *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  int v11;
  uint64_t i;
  cnprint::CNPrinter *v14;
  uint64_t v15;
  unsigned int v16;
  double *v17;
  uint64_t v18;
  uint64_t j;
  unsigned int v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  unsigned __int8 v29;
  __int16 v30;
  unsigned __int8 v31;
  __int16 v32;
  unsigned __int8 v33;
  __int16 v34;

  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_BYTE *)(v8 + 8248))
  {
    if (!*((_BYTE *)this + 2072))
      goto LABEL_11;
    v10 = *((_DWORD *)this + 4);
    if (v10)
    {
      v11 = *((_DWORD *)this + 5);
      if (v11)
      {
        if (*(_DWORD *)v8 == v10 && *(_DWORD *)(v8 + 4) == v11)
          return 0;
        v32 = 5;
        v31 = 2;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "#shiono,ComputeLegendreNormalizations,layer_num,%u,re-computing normalizations,old_N,%u,old_M,%u,new_N,%u,new_M,%u", a4, a5, a6, a7, a8, *(_DWORD *)(v8 + 32));
        v8 = *(_QWORD *)this;
LABEL_11:
        v28 = *(_QWORD *)v8;
        *((_QWORD *)this + 2) = *(_QWORD *)v8;
        for (i = 24; i != 2072; i += 128)
          memset_pattern16((char *)this + i, &unk_18D30BDF0, 0x80uLL);
        v15 = 0;
        v16 = 1;
        do
        {
          v17 = (double *)((char *)this + 128 * v15 + 24);
          *v17 = sqrt((double)v15 * 2.0 + 1.0);
          if (v15)
          {
            if (v16 <= 2)
              v18 = 2;
            else
              v18 = v16;
            for (j = 1; j != v18; ++j)
            {
              v20 = v15 - j + 1;
              v21 = 1.0;
              while (v20 <= (int)j + (int)v15)
                v21 = v21 * (double)v20++;
              v17[j] = sqrt(((double)v15 * 4.0 + 2.0) / v21);
            }
          }
          ++v15;
          ++v16;
        }
        while (v28 + 1 != (_DWORD)v15);
        *((_BYTE *)this + 2072) = 1;
        if (cnprint::CNPrinter::GetLogLevel(v14) < 2)
        {
          v30 = 5;
          v29 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "#shiono,ComputeLegendreNormalizations,layer_num,%u,computed normalizations,N,%u,M,%u", v22, v23, v24, v25, v26, *(_DWORD *)(*(_QWORD *)this + 32));
        }
        return 0;
      }
    }
    v34 = 5;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "#shiono,ComputeLegendreNormalizations,layer_num,%u,unknown state: normalizations initialized with degree and order set to zero", a4, a5, a6, a7, a8, *(_DWORD *)(v8 + 32));
    *((_BYTE *)this + 2072) = 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::SetDataAgeThreshold(cnnavigation::SphericalHarmonicsIonosphereModel *this, const CNTimeSpan *a2)
{
  double v4;
  double v5;
  BOOL v6;
  uint64_t result;
  double v9[2];

  v9[0] = 0.0;
  v9[1] = 0.0;
  if (sub_18D03FE4C((double *)a2, v9))
    return 0xFFFFFFFFLL;
  v4 = *((double *)a2 + 1) + (double)*(uint64_t *)a2;
  v5 = fabs(v4);
  v6 = (unint64_t)(*(_QWORD *)&v5 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(_QWORD *)&v5 - 1) >= 0xFFFFFFFFFFFFFLL;
  if (v6 && *(_QWORD *)&v4 != 0)
    return 0xFFFFFFFFLL;
  result = 0;
  *((_OWORD *)this + 3) = *(_OWORD *)a2;
  return result;
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::GetDataAgeThreshold(cnnavigation::SphericalHarmonicsIonosphereModel *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::GetApplicabilityTime(cnnavigation::SphericalHarmonicsIonosphereModel *this)
{
  _QWORD *v2;
  uint64_t v3;

  if (!(*(unsigned int (**)(cnnavigation::SphericalHarmonicsIonosphereModel *))(*(_QWORD *)this + 32))(this))
    return 0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  while (1)
  {
    v3 = v2[3];
    if (v3)
    {
      if (*(_BYTE *)(v3 + 8248))
        break;
    }
    v2 = (_QWORD *)*v2;
    if (!v2)
      return 0;
  }
  return *(_QWORD *)(v3 + 16);
}

BOOL cnnavigation::SphericalHarmonicsIonosphereModel::IsValid(cnnavigation::SphericalHarmonicsIonosphereModel *this)
{
  _QWORD *v1;
  _BOOL8 result;
  uint64_t v3;

  if (!*((_QWORD *)this + 4))
    return 0;
  v1 = (_QWORD *)((char *)this + 24);
  do
  {
    v1 = (_QWORD *)*v1;
    result = v1 == 0;
    if (!v1)
      break;
    v3 = v1[3];
    if (!v3)
      break;
  }
  while (*(_BYTE *)(v3 + 8248));
  return result;
}

uint64_t cnnavigation::SphericalHarmonicsIonosphereModel::IsValid(cnnavigation::SphericalHarmonicsIonosphereModel *this, const cnnavigation::TAITime *a2)
{
  uint64_t result;
  double v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  double v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t ApplicabilityTime;
  double v13;
  double v14[2];

  result = (*(uint64_t (**)(cnnavigation::SphericalHarmonicsIonosphereModel *))(*(_QWORD *)this + 32))(this);
  if ((_DWORD)result)
  {
    ApplicabilityTime = cnnavigation::SphericalHarmonicsIonosphereModel::GetApplicabilityTime(this);
    v13 = v5;
    v8 = CNTimeSpan::operator-((uint64_t)a2, &ApplicabilityTime, v6, v7);
    *(_QWORD *)&v14[0] = v8;
    v14[1] = v9;
    if (v8 < 0 || (*(double *)v10.i64 = v9, v9 < 0.0))
      v8 = CNTimeSpan::operator-(v14, v10, v11);
    ApplicabilityTime = v8;
    v13 = v9;
    return sub_18D05B574((double *)&ApplicabilityTime, (double *)this + 6);
  }
  return result;
}

_QWORD *sub_18D08D984(_QWORD *a1)
{
  *a1 = &off_1E25B9B08;
  sub_18D08DA14((uint64_t)(a1 + 1));
  *a1 = &unk_1E25B9450;
  return a1;
}

void sub_18D08D9C4(_QWORD *a1)
{
  *a1 = &off_1E25B9B08;
  sub_18D08DA14((uint64_t)(a1 + 1));
  *a1 = &unk_1E25B9450;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D08DA14(uint64_t a1)
{
  void *v2;

  sub_18D08DA4C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_18D08DA4C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_18D07C868((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_18D08DA88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D08DA98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCE88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D08DAD0(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_18D07C868((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

uint64_t cnnavigation::WGS84GravityModel::ComputeWGS84GravityModel(uint64_t a1, float64x2_t *a2, int a3, int a4, double *a5, float64x2_t *a6, uint64_t a7)
{
  float64x2_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  uint64_t result;
  double v16;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v33;
  float64x2_t v35;

  v7 = *a2;
  v8 = a2[1].f64[0];
  v9 = a2->f64[1];
  v10 = sqrt(vmlad_n_f64(vmuld_lane_f64(v9, *a2, 1), v7.f64[0], v7.f64[0]) + v8 * v8);
  if (v10 <= 0.00000001)
    return 0xFFFFFFFFLL;
  v11 = 6378137.0 / v10;
  _D0 = v8 / v10;
  *a5 = -3.98600442e14 / v10
      + 6378137.0 / v10 * (6378137.0 / v10 * (3.98600442e14 / v10 * 0.000541314911)) * (_D0 * 3.0 * _D0 + -1.0);
  v13 = -(3.98600442e14 / v10);
  if (a3)
  {
    v14 = v11 * (v11 * 0.00162394473);
    *a6 = vmulq_n_f64(vdivq_f64(v7, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0)), v13 / v10 * (v14 * (_D0 * -5.0 * _D0 + 1.0) + 1.0));
    a6[1].f64[0] = _D0 * (v13 / v10 * (v14 * (_D0 * -5.0 * _D0 + 3.0) + 1.0));
  }
  result = 0;
  if (a4)
  {
    v16 = v7.f64[0] / v10;
    _D3 = v9 / v10;
    v18 = 3.98600442e14 / (v10 * (v10 * v10));
    v19 = -v18;
    v20 = v11 * (v11 * 0.0568380656);
    v21 = v13 / v10 * (v11 * (v11 * 0.00162394473) * (_D0 * -5.0 * _D0 + 1.0) + 1.0) / v10;
    v22 = v11 * (v11 * 0.0162394473);
    v23 = v18 * (_D0 * (v16 * v22));
    *(double *)&v24 = v18 * (_D0 * (_D3 * v22));
    v25 = vmulq_n_f64(vmulq_n_f64((float64x2_t)xmmword_18D30BE30, v11), v11);
    v26 = -(v18 * (v16 * v25.f64[0] + v16 * -3.0 + _D0 * (v16 * v20) * _D0));
    v27.f64[0] = _D3;
    v27.f64[1] = _D0;
    __asm { FMOV            V18.2D, #-3.0 }
    v33 = vmlaq_f64(vmulq_f64(v27, v25), _Q18, v27);
    _Q16 = vmulq_n_f64(v27, v20);
    *(_QWORD *)&v35.f64[0] = vdupq_lane_s64(*(uint64_t *)&_D0, 0).u64[0];
    _Q2 = vmulq_n_f64(vmlaq_n_f64(v33, vmulq_n_f64(_Q16, _D0), _D0), v19);
    *(double *)a7 = v21 + v26 * v16;
    *(double *)(a7 + 8) = v26 * _D3 + 0.0;
    *(double *)(a7 + 16) = v23 + v26 * _D0;
    *(double *)(a7 + 24) = vmlad_n_f64(0.0, v16, _Q2.f64[0]);
    *(double *)(a7 + 32) = vmlad_n_f64(v21, _D3, _Q2.f64[0]);
    v35.f64[1] = v16;
    *(float64x2_t *)(a7 + 40) = vmlaq_f64((float64x2_t)v24, v35, _Q2);
    __asm
    {
      FMLA            D16, D3, V2.D[1]
      FMLA            D19, D0, V2.D[1]
    }
    *(float64_t *)(a7 + 56) = _Q16.f64[0];
    *(_QWORD *)(a7 + 64) = _D19;
  }
  return result;
}

uint64_t cnnavigation::WGS84GravityModel::GetGravitationalPotential(cnnavigation::WGS84GravityModel *this, const double *a2, double *a3)
{
  double v3;
  double v4;
  uint64_t result;

  v3 = a2[2];
  v4 = sqrt(a2[1] * a2[1] + *a2 * *a2 + v3 * v3);
  if (v4 <= 0.00000001)
    return 0xFFFFFFFFLL;
  result = 0;
  *a3 = -3.98600442e14 / v4
      + 6378137.0 / v4 * (6378137.0 / v4 * (3.98600442e14 / v4 * 0.000541314911)) * (v3 / v4 * 3.0 * (v3 / v4) + -1.0);
  return result;
}

uint64_t cnnavigation::WGS84GravityModel::GetGravitationalPotential(cnnavigation::WGS84GravityModel *this, float64x2_t *a2, double *a3, float64x2_t *a4)
{
  _BYTE v5[72];

  return cnnavigation::WGS84GravityModel::ComputeWGS84GravityModel((uint64_t)this, a2, 1, 0, a3, a4, (uint64_t)v5);
}

uint64_t cnnavigation::WGS84GravityModel::GetGravitationalPotential(uint64_t a1, float64x2_t *a2, double *a3, float64x2_t *a4, uint64_t a5)
{
  return cnnavigation::WGS84GravityModel::ComputeWGS84GravityModel(a1, a2, 1, 1, a3, a4, a5);
}

uint64_t cnnavigation::WGS84GravityModel::GetGravitationalAcceleration(cnnavigation::WGS84GravityModel *this, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v4;
  double v5;

  return cnnavigation::WGS84GravityModel::ComputeWGS84GravityModel((uint64_t)this, a2, 1, 0, &v5, a3, (uint64_t)&v4);
}

uint64_t cnnavigation::WGS84GravityModel::GetGravitationalAcceleration(uint64_t a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4)
{
  double v5;

  return cnnavigation::WGS84GravityModel::ComputeWGS84GravityModel(a1, a2, 1, 1, &v5, a3, a4);
}

_QWORD *sub_18D08DE64(_QWORD *result)
{
  *result = &unk_1E25B9250;
  return result;
}

void sub_18D08DE78(_QWORD *a1)
{
  *a1 = &unk_1E25B9250;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D08DE9C()
{
  return 1;
}

double cnnavigation::GPSEphemerides::GpsUserRangeAccuracyFromURANED_EDValue(cnnavigation::GPSEphemerides *this)
{
  if (((_DWORD)this + 15) <= 0x14)
    return exp2((double)(int)this * 0.5 + 1.0);
  if (((_DWORD)this - 6) > 8)
    return NAN;
  return ldexp(1.0, (int)this - 2);
}

uint64_t cnnavigation::GPSEphemerides::GNSSFindSat(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  double v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  _BOOL4 IsValid;
  uint64_t v20;
  double v21;
  uint64_t i;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v11 = cnnavigation::TAITime::ToGPSTime(this, a3);
  result = cnnavigation::GPSFindSat(v11, a1, (double *)&v27, (double *)&v25, (double *)&v23, v12);
  if (!(_DWORD)result)
  {
    v14 = 0;
    v15 = v28;
    *(_OWORD *)a4 = v27;
    *(_QWORD *)(a4 + 16) = v15;
    v16 = v26;
    *(_OWORD *)a5 = v25;
    *(_QWORD *)(a5 + 16) = v16;
    v17 = v24;
    *(_OWORD *)a6 = v23;
    v18 = 0.0;
    *(_QWORD *)(a6 + 16) = v17;
    do
    {
      v18 = v18 + *(double *)(a4 + v14) * *(double *)(a4 + v14);
      v14 += 8;
    }
    while (v14 != 24);
    if (sqrt(v18) >= 6341752.3)
    {
      IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
      result = 0;
      if (IsValid && *((_BYTE *)a3 + 1) == 1)
      {
        v20 = 0;
        v21 = 1.0 / (1.0 - *((double *)a3 + 2));
        do
        {
          *(double *)(a5 + v20) = v21 * *(double *)(a5 + v20);
          v20 += 8;
        }
        while (v20 != 24);
        for (i = 0; i != 24; i += 8)
          *(double *)(a6 + i) = v21 * *(double *)(a6 + i);
        return 0;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t cnnavigation::GPSEphemerides::GNSSSatelliteClockOffset(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, double *a4, int a5, double *a6, double a7)
{
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  int8x16_t v18;
  int8x16_t v19;
  double v20;
  double v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30[2];
  double v31[3];
  double v32;

  v13 = cnnavigation::TAITime::ToGPSTime(this, a3);
  v15 = v14;
  v32 = 0.0;
  v16 = cnnavigation::GPSSatelliteClockOffset(v13, a1, &v32, a5, (uint64_t)v31, v14, a7);
  if (!(_DWORD)v16)
  {
    if (cnnavigation::GNSSUTCParameters::IsValid(a3) && *((_BYTE *)a3 + 1) == 1)
    {
      v30[0] = 0;
      v30[1] = 0;
      *(double *)v18.i64 = v15;
      CNTimeSpan::SetTimeSpan(v30, 604800 * v13, v18, v19);
      v20 = *((double *)a3 + 1);
      v21 = *((double *)a3 + 2);
      v24 = CNTimeSpan::operator-((uint64_t)v30, (_QWORD *)a3 + 3, v22, v23);
      *a4 = v32 - (v20 + v21 * (v25 + (double)v24));
      if (a5)
      {
        v26 = *((double *)a3 + 2);
        v27 = 1.0 / (1.0 - v26);
        v28 = (v31[0] - v26) * v27;
        v29 = v31[1] / v27;
        *a6 = v28;
        a6[1] = v29;
      }
    }
    else
    {
      *a4 = v32;
      if (a5)
        *(_OWORD *)a6 = *(_OWORD *)v31;
    }
  }
  return v16;
}

uint64_t cnnavigation::GPSEphemerides::GNSSSatelliteClockOffsetRate(uint64_t a1, cnnavigation::TAITime *this, cnnavigation::GNSSUTCParameters *a3, double *a4, int a5, double *a6)
{
  int v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19[2];
  double v20;

  v11 = cnnavigation::TAITime::ToGPSTime(this, a3);
  v20 = 0.0;
  v13 = cnnavigation::GPSSatelliteClockOffsetRate(v11, a1, &v20, a5, (uint64_t)v19, v12);
  if (!(_DWORD)v13)
  {
    if (cnnavigation::GNSSUTCParameters::IsValid(a3) && *((_BYTE *)a3 + 1) == 1)
    {
      v14 = *((double *)a3 + 2);
      v15 = 1.0 / (1.0 - v14);
      *a4 = (v20 - v14) * v15;
      if (a5)
      {
        v16 = v15 * v15 * v19[0];
LABEL_8:
        v17 = v19[1];
        *a6 = v16;
        a6[1] = v17;
      }
    }
    else
    {
      *a4 = v20;
      if (a5)
      {
        v16 = v19[0];
        goto LABEL_8;
      }
    }
  }
  return v13;
}

_QWORD *sub_18D08E274(_QWORD *result)
{
  *result = off_1E25B93B0;
  return result;
}

void sub_18D08E288(_QWORD *a1)
{
  *a1 = off_1E25B93B0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6, int8x16_t a7)
{
  _BYTE v8[40];
  __int16 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  return cnnavigation::GNSSTimeOfFlight(a1, (uint64_t)&v9, a2, a3, 1, a4, 1, a5, a7, (int8x16_t)0, a6, 0, (uint64_t)v8);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, int a7, uint64_t *a8, int8x16_t a9, int8x16_t a10, double *a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t result;
  double v27;
  int v28;
  double v29;
  double v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  float64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  double v37;
  double v38;
  __double2 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  _BOOL4 v60;
  double v61;
  BOOL v62;
  int8x16_t v63;
  int8x16_t v64;
  float64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL4 v70;
  _BOOL4 v71;
  double v72;
  BOOL v73;
  unint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  _BOOL4 IsValid;
  double v84;
  int v85;
  double v86;
  double v87;
  _BOOL4 v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  float64x2_t v135;
  _BOOL4 v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  float64x2_t v151;
  int8x16_t v152;
  int8x16_t v153;
  double v154;
  double v155;
  double v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float64x2_t v161;
  double v162;
  double v163;
  double v164;
  double v165;
  _QWORD v166[6];

  v166[3] = *MEMORY[0x1E0C80C00];
  if (*(double *)a9.i64 > 0.0 && (a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v20 = 0;
    v21 = a12;
    while ((*(_QWORD *)(a3 + v20) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v20 += 8;
      if (v20 == 24)
      {
        v23 = *(double *)(a3 + 8);
        v24 = *(double *)(a3 + 16);
        v166[0] = *(_QWORD *)a3;
        v22 = *(double *)v166;
        *(double *)&v166[1] = v23;
        *(double *)&v166[2] = v24;
        v25 = sqrt(v23 * v23 + v22 * v22 + v24 * v24);
        if (v25 < 6341752.3)
          return 0xFFFFFFFFLL;
        v117 = *(double *)a9.i64;
        *a11 = 0.0;
        v27 = 0.0;
        v28 = 11;
        v29 = INFINITY;
        a10.i64[0] = 0x3F131DA7D7CB8D5BLL;
        v129 = v25;
        v126 = v23;
        v127 = v22;
        while (1)
        {
          v30 = vabdd_f64(v27, v29);
          v31 = v30 < 3.33564095e-13 ? v21 : 0;
          if (v31 == 1)
          {
            v163 = 0.0;
            v164 = 0.0;
            *(double *)a9.i64 = v27;
            CNTimeSpan::SetTimeSpan((uint64_t *)&v163, 0, a9, a10);
            *(_QWORD *)&v151.f64[0] = CNTimeSpan::operator-(a1, &v163, v32, v33);
            v151.f64[1] = v34;
            result = (*(uint64_t (**)(uint64_t, float64x2_t *, uint64_t, double *, double *, __int128 *))(*(_QWORD *)a4 + 56))(a4, &v151, a2, &v144, &v141, &v147);
          }
          else
          {
            v161 = 0uLL;
            *(double *)a9.i64 = v27;
            CNTimeSpan::SetTimeSpan((uint64_t *)&v161, 0, a9, a10);
            v163 = COERCE_DOUBLE(CNTimeSpan::operator-(a1, &v161, v35, v36));
            v164 = v37;
            result = (*(uint64_t (**)(uint64_t, double *, uint64_t, double *, __int128 *, float64x2_t *))(*(_QWORD *)a4 + 56))(a4, &v163, a2, &v144, &v147, &v151);
          }
          if ((_DWORD)result)
            break;
          v38 = *a11;
          v39 = __sincos_stret(*a11 * 0.0000729211515);
          v40 = v39.__sinval * v145 + v39.__cosval * v144;
          v41 = v39.__cosval * v145 - v39.__sinval * v144;
          v163 = v40;
          v164 = v41;
          v165 = v146;
          v42 = v40 - v22;
          v43 = v41 - v23;
          v44 = v146 - v24;
          v45 = sqrt(v43 * v43 + v42 * v42 + v44 * v44);
          v46 = (v25 / v45 - (v23 * (v41 / v45) + v22 * (v40 / v45) + v24 * (v146 / v45))) / v45;
          v151 = 0uLL;
          v132 = v30;
          v134 = v45;
          v119 = v146 - v24;
          v121 = v41 - v23;
          v122 = v40 - v22;
          v131 = v38;
          if (v46 >= 0.0)
          {
            if (v46 <= 1.0)
            {
              v135.f64[0] = *(double *)a3 + v46 * v42;
              v135.f64[1] = *(double *)(a3 + 8) + v46 * v43;
              v151 = v135;
              v47 = *(double *)(a3 + 16) + v46 * v44;
            }
            else
            {
              v151.f64[0] = v39.__sinval * v145 + v39.__cosval * v144;
              v151.f64[1] = v39.__cosval * v145 - v39.__sinval * v144;
              v135 = v151;
              v47 = v146;
            }
          }
          else
          {
            v151.f64[0] = v22;
            v151.f64[1] = v23;
            v135.f64[0] = v22;
            v135.f64[1] = v23;
            v47 = v24;
          }
          v48 = sqrt(v41 * v41 + v40 * v40 + v146 * v146);
          *(double *)v152.i64 = v47;
          v138 = v48;
          v49 = v48 <= v25;
          v120 = v39.__sinval * v145 + v39.__cosval * v144;
          if (v48 <= v25)
            v50 = v22;
          else
            v50 = v39.__sinval * v145 + v39.__cosval * v144;
          if (v48 <= v25)
            v51 = v23;
          else
            v51 = v39.__cosval * v145 - v39.__sinval * v144;
          v161.f64[0] = v50;
          v161.f64[1] = v51;
          v52 = v24;
          if (!v49)
            v24 = v146;
          v162 = v24;
          v158 = 0;
          v159 = 0;
          v155 = 0.0;
          v156 = 0.0;
          v157 = 0.0;
          result = cnnavigation::ECEFToLLA(&v151, 1, (double *)&v158, 0, (uint64_t)&v147);
          if ((_DWORD)result)
            break;
          v160 = 0;
          result = cnnavigation::LLAToECEF((double *)&v158, 1, &v155, 0, (uint64_t)&v147);
          if ((_DWORD)result)
            break;
          v118 = v41;
          v53 = v155;
          v54 = v156;
          v55 = v157;
          result = cnnavigation::ECEFToLLA(&v161, 1, (double *)&v158, 0, (uint64_t)&v147);
          if ((_DWORD)result)
            break;
          v160 = 0;
          result = cnnavigation::LLAToECEF((double *)&v158, 1, &v155, 0, (uint64_t)&v147);
          if ((_DWORD)result)
            break;
          v56 = sqrt(v135.f64[1] * v135.f64[1] + v135.f64[0] * v135.f64[0] + v47 * v47);
          v57 = v56 - sqrt(v54 * v54 + v53 * v53 + v55 * v55);
          v58 = sqrt(v51 * v51 + v50 * v50 + v24 * v24) - sqrt(v156 * v156 + v155 * v155 + v157 * v157);
          v155 = 0.0;
          a10 = 0uLL;
          v149 = 0u;
          v150 = 0u;
          v147 = 0u;
          v148 = 0u;
          v60 = v57 < 350000.0 && a5 != 0;
          if (v58 <= 350000.0)
            v60 = 0;
          v61 = 0.0;
          v137 = 0.0;
          v136 = v60;
          v24 = v52;
          v25 = v129;
          if (v60)
          {
            v62 = v56 < v138;
            if (v56 >= v129)
              v62 = 0;
            result = 0xFFFFFFFFLL;
            if (v138 < v129 || v62)
              return result;
            v137 = (350000.0 - v57) / (v138 - v129);
            *(double *)a10.i64 = v131;
            *(double *)a9.i64 = v131 * v137;
            v161 = 0uLL;
            CNTimeSpan::SetTimeSpan((uint64_t *)&v161, 0, a9, a10);
            *(_QWORD *)&v151.f64[0] = CNTimeSpan::operator-(a1, &v161, v63, v64);
            v151.f64[1] = v65;
            v67 = cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)&v151, (const cnnavigation::GNSSUTCParameters *)a2);
            v68 = *a6;
            result = v31
                   ? (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD *, double *, double *, __int128 *, double, double))(v68 + 24))(a6, v67, v166, &v163, &v155, &v147, v66, v117): (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD *, double *, double *, double, double))(v68 + 16))(a6, v67, v166, &v163, &v155, v66, v117);
            a10 = 0uLL;
            if ((_DWORD)result)
              return result;
            if (a5 == 2)
              v155 = -v155;
          }
          v140 = 0.0;
          v154 = 0.0;
          v152 = a10;
          v153 = a10;
          v151 = (float64x2_t)a10;
          v70 = v57 < 8500.0 && a7 != 0;
          v71 = v58 > 8500.0 && v70;
          v72 = 0.0;
          if (v71)
          {
            v73 = v56 < v138;
            if (v56 >= v129)
              v73 = 0;
            result = 0xFFFFFFFFLL;
            if (v138 < v129 || v73)
              return result;
            *(double *)a10.i64 = (8500.0 - v57) / (v138 - v129);
            v74 = a10.u64[0];
            *(double *)a9.i64 = *(double *)a10.i64 * *a11;
            v158 = 0;
            v159 = 0;
            CNTimeSpan::SetTimeSpan(&v158, 0, a9, a10);
            *(_QWORD *)&v161.f64[0] = CNTimeSpan::operator-(a1, &v158, v75, v76);
            v161.f64[1] = v77;
            v79 = cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)&v161, (const cnnavigation::GNSSUTCParameters *)a2);
            v80 = *a8;
            result = v31
                   ? (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD *, double *, double *, float64x2_t *, double))(v80 + 24))(a8, v79, v166, &v163, &v140, &v151, v78): (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD *, double *, double *, double))(v80 + 16))(a8, v79, v166, &v163, &v140, v78);
            if ((_DWORD)result)
              return result;
            v72 = *(double *)&v74;
            v61 = v140;
          }
          v29 = *a11;
          v27 = v61 + v134 / 299792458.0 + v155;
          *a11 = v27;
          if (v31)
          {
            if (fabs(v134) <= 0.000000015)
            {
              *(_QWORD *)(a13 + 32) = 0;
              *(_OWORD *)a13 = 0u;
              *(_OWORD *)(a13 + 16) = 0u;
            }
            else
            {
              v116 = v72;
              v81 = v122 / v134;
              v82 = v143;
              v124 = (v39.__cosval * v145 + -v39.__sinval * v144) * 0.0000729211515;
              v139 = v124 - v39.__cosval * v141 - v39.__sinval * v142;
              v123 = (v145 * -v39.__sinval - v39.__cosval * v144) * 0.0000729211515;
              v130 = v123 + v39.__sinval * v141 - v39.__cosval * v142;
              v133 = v39.__sinval * v142 + v39.__cosval * v141;
              v125 = v39.__cosval * v142 + -v39.__sinval * v141;
              IsValid = cnnavigation::GNSSUTCParameters::IsValid((cnnavigation::GNSSUTCParameters *)a2);
              v84 = 1.0;
              if (IsValid)
              {
                v85 = a7;
                v86 = v119;
                v87 = v120;
                v88 = v136;
                if (*(_BYTE *)(a2 + 1) == 1)
                  v84 = 1.0 / (1.0 - *(double *)(a2 + 16));
              }
              else
              {
                v85 = a7;
                v86 = v119;
                v87 = v120;
                v88 = v136;
              }
              v89 = v86 / v134;
              v90 = -v82;
              v91 = v127 / v129;
              v92 = v126 / v129;
              v93 = v24 / v129;
              v94 = v87 / v138;
              v95 = v138 - v129;
              v96 = 0.0;
              v97 = 0.0;
              v98 = 0.0;
              v99 = 0.0;
              v100 = 0.0;
              v101 = 0.0;
              v102 = 0.0;
              v103 = v118 / v138;
              v104 = 0.0;
              if (v88)
              {
                if (a5 == 2)
                  v97 = -1.0;
                if (a5 == 1)
                  v97 = 1.0;
                v105 = -(350000.0 - v57) / (v95 * v95);
                v100 = *(double *)&v148 + *(double *)&v147 * (v91 * v105 * v27);
                v98 = v84
                    * (*(double *)&v147
                     + *((double *)&v149 + 1) * v133
                     + *(double *)&v150 * v125
                     + *((double *)&v150 + 1) * v82);
                v99 = v84
                    * -((v137 + (v103 * v105 * v123 + v94 * v105 * v124) * v27)
                      * (*(double *)&v147
                       + *((double *)&v149 + 1) * v139
                       + *(double *)&v150 * v130
                       + *((double *)&v150 + 1) * v90));
                v104 = v84 * *((double *)&v147 + 1);
                v101 = *((double *)&v148 + 1) + *(double *)&v147 * (v92 * v105 * v27);
                v102 = *(double *)&v149 + *(double *)&v147 * (v93 * v105 * v27);
              }
              v106 = -v89;
              v107 = v121 / v134 * v130 + v81 * v139 - v89 * v82;
              v108 = v121 / v134 * v125 + v81 * v133 + v89 * v82;
              v109 = 0.0;
              v110 = 0.0;
              v111 = 0.0;
              v112 = 0.0;
              v113 = 0.0;
              if (v71)
              {
                if (v85 == 1)
                  v96 = 1.0;
                v114 = -(8500.0 - v57) / (v95 * v95);
                v109 = v84 * (v151.f64[0] + *(double *)v153.i64 * v133 + *(double *)&v153.i64[1] * v125 + v154 * v82);
                v110 = v84
                     * -((v116 + (v103 * v114 * v123 + v94 * v114 * v124) * v27)
                       * (v151.f64[0] + *(double *)v153.i64 * v139 + *(double *)&v153.i64[1] * v130 + v154 * v90));
                v111 = v151.f64[1] + v151.f64[0] * (v91 * v114 * v27);
                v112 = *(double *)v152.i64 + v151.f64[0] * (v92 * v114 * v27);
                v113 = *(double *)&v152.i64[1] + v151.f64[0] * (v93 * v114 * v27);
              }
              v115 = 1.0 - (v97 * v99 + v107 * 0.00000000333564095 + v96 * v110);
              *(double *)a13 = (v97 * v98 + v108 * 0.00000000333564095 + v96 * v109) / v115;
              *(double *)(a13 + 8) = v97 * v104 / v115;
              *(double *)(a13 + 16) = (v97 * v100 + -v81 * 0.00000000333564095 + v96 * v111) / v115;
              *(double *)(a13 + 24) = (v97 * v101 + -(v121 / v134) * 0.00000000333564095 + v96 * v112) / v115;
              *(double *)(a13 + 32) = (v97 * v102 + v106 * 0.00000000333564095 + v96 * v113) / v115;
            }
            return 0;
          }
          v23 = v126;
          *(double *)a10.i64 = v132;
          v22 = v127;
          if (v132 < 3.33564095e-13)
            return 0;
          --v28;
          v21 = a12;
          if (!v28)
            return 0xFFFFFFFFLL;
        }
        return result;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6, uint64_t a7, int8x16_t a8)
{
  __int16 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  return cnnavigation::GNSSTimeOfFlight(a1, (uint64_t)&v9, a2, a3, 1, a4, 1, a5, a8, (int8x16_t)0, a6, 1u, a7);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6, double *a7, int8x16_t a8)
{
  _BYTE v9[40];
  __int16 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  return cnnavigation::GNSSTimeOfFlight(a1, (uint64_t)&v10, a2, a3, a4, a5, 1, a6, a8, (int8x16_t)0, a7, 0, (uint64_t)v9);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6, double *a7, uint64_t a8, int8x16_t a9)
{
  __int16 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  return cnnavigation::GNSSTimeOfFlight(a1, (uint64_t)&v10, a2, a3, a4, a5, 1, a6, a9, (int8x16_t)0, a7, 1u, a8);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, int8x16_t a8, int8x16_t a9)
{
  _BYTE v10[40];

  return cnnavigation::GNSSTimeOfFlight(a1, a2, a3, a4, 1, a5, 1, a6, a8, a9, a7, 0, (uint64_t)v10);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  return cnnavigation::GNSSTimeOfFlight(a1, a2, a3, a4, 1, a5, 1, a6, a9, a10, a7, 1u, a8);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, uint64_t *a7, double *a8, int8x16_t a9, int8x16_t a10)
{
  _BYTE v11[40];

  return cnnavigation::GNSSTimeOfFlight(a1, a2, a3, a4, a5, a6, 1, a7, a9, a10, a8, 0, (uint64_t)v11);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, uint64_t *a7, double *a8, int8x16_t a9, int8x16_t a10, uint64_t a11)
{
  return cnnavigation::GNSSTimeOfFlight(a1, a2, a3, a4, a5, a6, 1, a7, a9, a10, a8, 1u, a11);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, int a7, uint64_t *a8, int8x16_t a9, int8x16_t a10, double *a11)
{
  _BYTE v12[40];

  return cnnavigation::GNSSTimeOfFlight(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, (uint64_t)v12);
}

uint64_t cnnavigation::GNSSTimeOfFlight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, int a7, uint64_t *a8, int8x16_t a9, int8x16_t a10, double *a11, uint64_t a12)
{
  return cnnavigation::GNSSTimeOfFlight(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 1u, a12);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, double a8)
{
  _BYTE v9[64];
  __int16 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  return cnnavigation::GNSSTimeOfFlightRate(a1, (const cnnavigation::GNSSUTCParameters *)&v10, a2, a3, a4, 1, a5, 1, a8, (int8x16_t)0, a6, a7, 0, (uint64_t)v9);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, int a6, uint64_t *a7, int a8, double a9, int8x16_t a10, uint64_t *a11, double *a12, char a13, uint64_t a14)
{
  uint64_t i;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t result;
  int8x16_t v29;
  int8x16_t v30;
  double v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  __double2 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  int8x16_t v56;
  double v57;
  double v58;
  double v59;
  int8x16_t v60;
  BOOL v61;
  int8x16_t v62;
  int8x16_t v63;
  float64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  int8x16_t v70;
  BOOL v71;
  double v72;
  int8x16_t v73;
  int8x16_t v74;
  float64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  float64x2_t v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  uint64_t v183;
  _QWORD v184[3];
  _QWORD v185[3];
  double v186;
  double v187;
  double v188;
  __int128 v189;
  __int128 v190;
  double v191;
  double v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  float64x2_t v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  double v201;
  double v202;
  double v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  float64x2_t v207;
  double v208;
  _QWORD v209[3];
  _QWORD v210[5];

  v210[3] = *MEMORY[0x1E0C80C00];
  if (a9 <= 0.0 || (*(_QWORD *)&a9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  for (i = 0; i != 24; i += 8)
  {
    if ((*(_QWORD *)(a3 + i) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return 0xFFFFFFFFLL;
  }
  v25 = *(double *)(a3 + 8);
  v26 = *(double *)(a3 + 16);
  v210[0] = *(_QWORD *)a3;
  v24 = *(double *)v210;
  *(double *)&v210[1] = v25;
  *(double *)&v210[2] = v26;
  v27 = sqrt(v25 * v25 + v24 * v24 + v26 * v26);
  if (v27 < 6341752.3)
    return 0xFFFFFFFFLL;
  v192 = 0.0;
  v191 = 0.0;
  v189 = 0u;
  v190 = 0u;
  result = cnnavigation::GNSSTimeOfFlight(a1, (uint64_t)a2, a3, a5, a6, a7, a8, a11, (int8x16_t)*(unint64_t *)&a9, a10, &v192, 1u, (uint64_t)&v189);
  if ((_DWORD)result)
    return result;
  v31 = *(double *)&v189;
  v32 = v190;
  v33 = v191;
  v30.i64[0] = (uint64_t)a4[2];
  *a12 = *(double *)&v189 + *(double *)&v190 * *a4 + *((double *)&v190 + 1) * a4[1] + v191 * *(double *)v30.i64;
  if (!a13)
    return 0;
  v181 = v33;
  v34 = *((double *)&v189 + 1);
  v35 = v192;
  v197 = 0uLL;
  *(double *)v29.i64 = v192;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v197, 0, v29, v30);
  *(_QWORD *)&v193 = CNTimeSpan::operator-(a1, &v197, v36, v37);
  *((_QWORD *)&v193 + 1) = v38;
  result = (*(uint64_t (**)(uint64_t, __int128 *, const cnnavigation::GNSSUTCParameters *, double *, _QWORD *, _QWORD *))(*(_QWORD *)a5 + 56))(a5, &v193, a2, &v186, v185, v184);
  if ((_DWORD)result)
    return result;
  v180 = v34;
  v39 = __sincos_stret(v35 * 0.0000729211515);
  v40 = v39.__sinval * v187 + v39.__cosval * v186;
  v41 = v39.__cosval * v187 - v39.__sinval * v186;
  *(double *)v209 = v40;
  *(double *)&v209[1] = v41;
  *(double *)&v209[2] = v188;
  v42 = v40 - v24;
  v43 = v41 - v25;
  v44 = v188 - v26;
  v45 = sqrt(v43 * v43 + v42 * v42 + v44 * v44);
  if (fabs(v45) <= 0.000000015)
  {
    *(_OWORD *)(a14 + 32) = 0u;
    *(_OWORD *)(a14 + 48) = 0u;
    *(_OWORD *)a14 = 0u;
    *(_OWORD *)(a14 + 16) = 0u;
    return 0;
  }
  v46 = sqrt(v41 * v41 + v40 * v40 + v188 * v188);
  v153 = *a12;
  v47 = *a4;
  v48 = a4[1];
  v49 = a4[2];
  v160 = *(double *)v184;
  v161 = *(double *)&v184[1];
  v50 = (v27 / v45 - (v25 * (v41 / v45) + v24 * (v40 / v45) + v26 * (v188 / v45))) / v45;
  v197 = 0uLL;
  v158 = v48;
  v159 = v49;
  v167 = v186;
  v168 = v187;
  v157 = v47;
  v164 = v41 - v25;
  v166 = v188 - v26;
  v179 = v45;
  v155 = *(double *)v185;
  v156 = *(double *)&v184[2];
  v154 = *(double *)&v185[1];
  v162 = v43 * v43;
  v152 = v40 - v24;
  v149 = *(double *)&v185[2];
  if (v50 >= 0.0)
  {
    if (v50 <= 1.0)
    {
      v169.f64[0] = *(double *)a3 + v50 * v42;
      v169.f64[1] = *(double *)(a3 + 8) + v50 * v43;
      v197 = v169;
      v51 = *(double *)(a3 + 16) + v50 * v44;
    }
    else
    {
      v197.f64[0] = v39.__sinval * v187 + v39.__cosval * v186;
      v197.f64[1] = v39.__cosval * v187 - v39.__sinval * v186;
      v169 = v197;
      v51 = v188;
    }
  }
  else
  {
    v197.f64[0] = v24;
    v197.f64[1] = v25;
    v169.f64[0] = v24;
    v169.f64[1] = v25;
    v51 = v26;
  }
  v177 = v51;
  *(double *)&v198 = v51;
  v182 = v46;
  if (v46 <= v27)
    v52 = v24;
  else
    v52 = v39.__sinval * v187 + v39.__cosval * v186;
  v150 = v39.__cosval * v187 - v39.__sinval * v186;
  if (v46 <= v27)
    v53 = v25;
  else
    v53 = v39.__cosval * v187 - v39.__sinval * v186;
  if (v46 <= v27)
    v54 = v26;
  else
    v54 = v188;
  v173 = v52;
  v175 = v54;
  v207.f64[0] = v52;
  v207.f64[1] = v53;
  v55 = v53;
  v208 = v54;
  v204 = 0;
  v205 = 0;
  v202 = 0.0;
  v201 = 0.0;
  v203 = 0.0;
  result = cnnavigation::ECEFToLLA(&v197, 1, (double *)&v204, 0, (uint64_t)&v193);
  if ((_DWORD)result)
    return result;
  v206 = 0;
  result = cnnavigation::LLAToECEF((double *)&v204, 1, &v201, 0, (uint64_t)&v193);
  if ((_DWORD)result)
    return result;
  v142 = v202;
  v144 = v203;
  v147 = v201;
  result = cnnavigation::ECEFToLLA(&v207, 1, (double *)&v204, 0, (uint64_t)&v193);
  if ((_DWORD)result)
    return result;
  v206 = 0;
  result = cnnavigation::LLAToECEF((double *)&v204, 1, &v201, 0, (uint64_t)&v193);
  if ((_DWORD)result)
    return result;
  v138 = v24 / v27;
  v139 = v25 / v27;
  v140 = v182 - v27;
  *(double *)v56.i64 = sqrt(v202 * v202 + v201 * v201 + v203 * v203);
  v57 = sqrt(v169.f64[1] * v169.f64[1] + v169.f64[0] * v169.f64[0] + v177 * v177);
  v58 = v57 - sqrt(v142 * v142 + v147 * v147 + v144 * v144);
  v59 = sqrt(v55 * v55 + v173 * v173 + v175 * v175) - *(double *)v56.i64;
  v201 = 0.0;
  v60.i64[1] = 0;
  v195 = 0u;
  v196 = 0u;
  v193 = 0u;
  v194 = 0u;
  v148 = 0.0;
  v176 = 0.0;
  v178 = 0.0;
  v170 = v59;
  v172 = 0.0;
  v174 = 0.0;
  v145 = v26 / v27;
  if (a6)
  {
    v56.i64[0] = 0;
    v176 = 0.0;
    v178 = 0.0;
    v172 = 0.0;
    v174 = 0.0;
    if (v58 < 350000.0)
    {
      v56.i64[0] = 0;
      v176 = 0.0;
      v178 = 0.0;
      v172 = 0.0;
      v174 = 0.0;
      if (v59 > 350000.0)
      {
        *(double *)v56.i64 = v182;
        v61 = v57 < v182;
        if (v57 >= v27)
          v61 = 0;
        result = 0xFFFFFFFFLL;
        if (v182 < v27)
          return result;
        if (v61)
          return result;
        *(double *)v60.i64 = v35 * ((350000.0 - v58) / v140);
        v207 = 0uLL;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v207, 0, v60, v56);
        *(_QWORD *)&v197.f64[0] = CNTimeSpan::operator-(a1, &v207, v62, v63);
        v197.f64[1] = v64;
        v65 = cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)&v197, a2);
        result = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD *, _QWORD *, double *, __int128 *, double, double))(*a7 + 24))(a7, v65, v210, v209, &v201, &v193, v66, a9);
        if ((_DWORD)result)
          return result;
        v67 = 0.0;
        if (a6 == 2)
          v67 = -1.0;
        if (a6 == 1)
          v68 = 1.0;
        else
          v68 = v67;
        v69 = -(350000.0 - v58) / (v140 * v140);
        v176 = *(double *)&v194 + *(double *)&v193 * (v35 * (v138 * v69));
        v178 = v68;
        *(double *)v56.i64 = *((double *)&v194 + 1) + *(double *)&v193 * (v35 * (v139 * v69));
        v172 = *(double *)v56.i64;
        v174 = *(double *)&v195 + *(double *)&v193 * (v35 * (v145 * v69));
      }
    }
  }
  v183 = 0;
  v200 = 0;
  v70.i64[1] = 0;
  v198 = 0u;
  v199 = 0u;
  v197 = 0u;
  if (!a8 || v58 >= 8500.0)
  {
    v80 = 0.0;
    v143 = 0.0;
    v137 = 0.0;
LABEL_59:
    v136 = v80;
    goto LABEL_60;
  }
  v143 = 0.0;
  v136 = 0.0;
  v137 = 0.0;
  if (v170 <= 8500.0)
  {
LABEL_60:
    v146 = v39.__cosval * 0.0000729211515 * -0.0000729211515 * v153;
    v141 = v39.__sinval * 0.0000729211515 * v153;
    v81 = v150 * 0.0000729211515;
    v151 = v39.__sinval * 0.0000729211515 * 0.0000729211515;
    v82 = v179 * (v179 * v179);
    v83 = v166;
    v84 = -(v152 * v164) / v82;
    v85 = (v168 * -v39.__sinval - v39.__cosval * v167) * 0.0000729211515 + v39.__sinval * v155 - v39.__cosval * v154;
    v86 = v81 - v39.__cosval * v155 - v39.__sinval * v154;
    v87 = v39.__sinval * v154 + v39.__cosval * v155;
    v88 = -(v152 * v166) / v82;
    v134 = v39.__cosval * 0.0000729211515 * v153;
    v135 = (v83 * v83 + v162) / v82;
    v89 = (1.0 - v153) * -(v39.__cosval * v160)
        + v39.__sinval * -0.0000729211515 * v155 * (1.0 - v153)
        + v146 * v167
        + v141 * v155
        + v39.__cosval * 0.0000729211515 * v154 * (1.0 - v153)
        + v161 * -v39.__sinval * (1.0 - v153)
        + -(v151 * v153) * v168
        + -v134 * v154;
    v90 = v149 - v31 * v149;
    v91 = v87 + v86 * v31;
    v171 = v39.__cosval * v154 + -v39.__sinval * v155 + v85 * v31;
    v92 = v87 + v86 * v153;
    v93 = v152
        / v179
        * (v155 * -v141
         + v39.__cosval * v160 * (1.0 - v153)
         + v39.__sinval * v161 * (1.0 - v153)
         + v134 * v154
         + v89 * v31)
        + (v84 * v171 + v135 * v91 + v88 * v90) * v92;
    v94 = v84 * v85 + v135 * v86 - v88 * v149;
    v95 = v152 / v179 * v89;
    v96 = v180 * v95 + v180 * v94 * v92;
    v97 = *(double *)&v32 * v95 + -(v135 - v94 * *(double *)&v32) * v92;
    v98 = *((double *)&v32 + 1) * v95 + -(v84 - v94 * *((double *)&v32 + 1)) * v92;
    v99 = v181 * v95 + -(v88 - v94 * v181) * v92;
    v100 = (v83 * v83 + v152 * v152) / v82;
    v101 = -(v164 * v166) / v82;
    v132 = v85;
    v102 = v39.__cosval * v154 + -v39.__sinval * v155 + v85 * v153;
    v133 = v93 + (v100 * v171 + v84 * v91 + v101 * v90) * v102;
    v103 = v100 * v85 + v84 * v86 - v101 * v149;
    v104 = v97 + -(v84 - v103 * *(double *)&v32) * v102;
    v105 = v98 + -(v100 - v103 * *((double *)&v32 + 1)) * v102;
    v106 = v99 + -(v101 - v103 * v181) * v102;
    v107 = (v152 * v152 + v162) / v82;
    v108 = (1.0 - v153) * (v39.__sinval * v160)
         + v39.__cosval * -0.0000729211515 * v155 * (1.0 - v153)
         + v151 * v153 * v167
         + v134 * v155
         + -(v39.__sinval * 0.0000729211515 * v154) * (1.0 - v153)
         + -(v39.__cosval * v161) * (1.0 - v153)
         + v146 * v168
         + v141 * v154;
    v165 = v164 / v179;
    v109 = v133
         + v165
         * (v155 * -v134
          + v160 * -v39.__sinval * (1.0 - v153)
          + v39.__cosval * v161 * (1.0 - v153)
          + -v141 * v154
          + v108 * v31);
    v110 = v165 * v108;
    v111 = v96 + v180 * v103 * v102 + v110 * v180;
    v112 = v104 + v110 * *(double *)&v32;
    v113 = v105 + v110 * *((double *)&v32 + 1);
    v114 = v106 + v110 * v181;
    v115 = v149 - v149 * v153;
    v116 = v101 * v132 + v88 * v86 - v107 * v149;
    v163 = v111 + v180 * v116 * v115;
    v117 = v112 + -(v88 - v116 * *(double *)&v32) * v115;
    v118 = v113 + -(v101 - v116 * *((double *)&v32 + 1)) * v115;
    v119 = v114 + -(v107 - v116 * v181) * v115;
    v120 = -(v156 * (1.0 - v153));
    v121 = v109 + (v101 * v171 + v88 * v91 + v107 * v90) * v115 + v166 / v179 * ((1.0 - v153) * v156 + v120 * v31);
    v122 = v166 / v179 * v120;
    v123 = v163 + v122 * v180;
    v124 = v117 + v122 * *(double *)&v32;
    v125 = v118 + v122 * *((double *)&v32 + 1);
    v126 = v119 + v122 * v181;
    v127 = v121 + (-(v84 * v171) - v135 * v91 - v88 * v90) * v157;
    v128 = -(v84 * v132) - v135 * v86 + v88 * v149;
    v129 = -(v100 * v132) - v84 * v86 + v101 * v149;
    v130 = -(v101 * v132) - v88 * v86 + v107 * v149;
    v131 = (v165
          * (v39.__sinval * v155
           - v39.__cosval * 0.0000729211515 * v167
           - v39.__cosval * v154
           - v39.__sinval * 0.0000729211515 * v168)
          + v152
          / v179
          * (-(v39.__sinval * 0.0000729211515 * v167)
           - v39.__cosval * v155
           + -v39.__sinval * v154
           + v39.__cosval * 0.0000729211515 * v168)
          - v166 / v179 * v149)
         / -299792458.0
         + 1.0;
    *(double *)a14 = (v127
                    + (-(v100 * v171) - v84 * v91 - v101 * v90) * v158
                    + (-(v101 * v171) - v88 * v91 - v107 * v90) * v159)
                   / 299792458.0
                   / v131;
    *(double *)(a14 + 8) = (v123 + v180 * v128 * v157 + v180 * v129 * v158 + v180 * v130 * v159) / 299792458.0 / v131;
    *(double *)(a14 + 16) = (v124
                           + (v135 + v128 * *(double *)&v32) * v157
                           + (v84 + v129 * *(double *)&v32) * v158
                           + (v88 + v130 * *(double *)&v32) * v159)
                          / 299792458.0
                          / v131;
    *(double *)(a14 + 24) = (v125
                           + (v84 + v128 * *((double *)&v32 + 1)) * v157
                           + (v100 + v129 * *((double *)&v32 + 1)) * v158
                           + (v101 + v130 * *((double *)&v32 + 1)) * v159)
                          / 299792458.0
                          / v131;
    *(double *)(a14 + 32) = (v126
                           + (v88 + v128 * v181) * v157
                           + (v101 + v129 * v181) * v158
                           + (v107 + v130 * v181) * v159)
                          / 299792458.0
                          / v131;
    *(double *)(a14 + 40) = (v152 / v179 / -299792458.0 + v178 * v176 + v148 * v143) / v131;
    *(double *)(a14 + 48) = (v165 / -299792458.0 + v178 * v172 + v148 * v137) / v131;
    *(double *)(a14 + 56) = (v166 / v179 / -299792458.0 + v178 * v174 + v148 * v136) / v131;
    return 0;
  }
  v71 = v57 < v182;
  if (v57 >= v27)
    v71 = 0;
  result = 0xFFFFFFFFLL;
  if (v182 >= v27 && !v71)
  {
    v72 = v192;
    *(double *)v70.i64 = (8500.0 - v58) / v140 * v192;
    v204 = 0;
    v205 = 0;
    CNTimeSpan::SetTimeSpan(&v204, 0, v70, v56);
    *(_QWORD *)&v207.f64[0] = CNTimeSpan::operator-(a1, &v204, v73, v74);
    v207.f64[1] = v75;
    v76 = cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)&v207, a2);
    result = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD *, _QWORD *, uint64_t *, float64x2_t *, double))(*a11 + 24))(a11, v76, v210, v209, &v183, &v197, v77);
    if (!(_DWORD)result)
    {
      v78 = 0.0;
      if (a8 == 1)
        v78 = 1.0;
      v148 = v78;
      v79 = -(8500.0 - v58) / (v140 * v140);
      v143 = v197.f64[1] + v197.f64[0] * (v138 * v79 * v72);
      v137 = *(double *)&v198 + v197.f64[0] * (v139 * v79 * v72);
      v80 = *((double *)&v198 + 1) + v197.f64[0] * (v145 * v79 * v72);
      goto LABEL_59;
    }
  }
  return result;
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, uint64_t a8, double a9)
{
  __int16 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  return cnnavigation::GNSSTimeOfFlightRate(a1, (const cnnavigation::GNSSUTCParameters *)&v10, a2, a3, a4, 1, a5, 1, a9, (int8x16_t)0, a6, a7, 1, a8);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, int a5, uint64_t *a6, uint64_t *a7, double *a8, double a9)
{
  _BYTE v10[64];
  __int16 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  return cnnavigation::GNSSTimeOfFlightRate(a1, (const cnnavigation::GNSSUTCParameters *)&v11, a2, a3, a4, a5, a6, 1, a9, (int8x16_t)0, a7, a8, 0, (uint64_t)v10);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, int a5, uint64_t *a6, uint64_t *a7, double *a8, double a9, uint64_t a10)
{
  __int16 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  return cnnavigation::GNSSTimeOfFlightRate(a1, (const cnnavigation::GNSSUTCParameters *)&v11, a2, a3, a4, a5, a6, 1, a9, (int8x16_t)0, a7, a8, 1, a10);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, double *a8, double a9, int8x16_t a10)
{
  _BYTE v11[64];

  return cnnavigation::GNSSTimeOfFlightRate(a1, a2, a3, a4, a5, 1, a6, 1, a9, a10, a7, a8, 0, (uint64_t)v11);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, double *a8, double a9, int8x16_t a10, uint64_t a11)
{
  return cnnavigation::GNSSTimeOfFlightRate(a1, a2, a3, a4, a5, 1, a6, 1, a9, a10, a7, a8, 1, a11);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, int a6, uint64_t *a7, uint64_t *a8, double a9, int8x16_t a10, double *a11)
{
  _BYTE v12[64];

  return cnnavigation::GNSSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, a7, 1, a9, a10, a8, a11, 0, (uint64_t)v12);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, int a6, uint64_t *a7, uint64_t *a8, double a9, int8x16_t a10, double *a11, uint64_t a12)
{
  return cnnavigation::GNSSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, a7, 1, a9, a10, a8, a11, 1, a12);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, int a6, uint64_t *a7, int a8, double a9, int8x16_t a10, uint64_t *a11, double *a12)
{
  _BYTE v13[64];

  return cnnavigation::GNSSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, (uint64_t)v13);
}

uint64_t cnnavigation::GNSSTimeOfFlightRate(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, int a6, uint64_t *a7, int a8, double a9, int8x16_t a10, uint64_t *a11, double *a12, uint64_t a13)
{
  return cnnavigation::GNSSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 1, a13);
}

uint64_t cnnavigation::ParameterizedTroposphereModelParameters::ParameterizedTroposphereModelParameters(uint64_t this)
{
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = &unk_1E25B95B0;
  *(_BYTE *)(this + 40) = 0;
  *(_QWORD *)this = &off_1E25B9B40;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = &unk_1E25B95B0;
  *(_BYTE *)(this + 40) = 0;
  *(_QWORD *)this = &off_1E25B9B40;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t cnnavigation::ParameterizedTroposphereModelParameters::ParameterizedTroposphereModelParameters(uint64_t result, int a2, int a3, int a4, int a5)
{
  *(_DWORD *)(result + 8) = a4;
  *(_QWORD *)result = &off_1E25B9B40;
  *(_DWORD *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &unk_1E25B95B0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = a4;
  *(_QWORD *)result = &off_1E25B9B40;
  *(_DWORD *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &unk_1E25B95B0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

uint64_t cnnavigation::ParameterizedTroposphereModelParameters::ParameterizedTroposphereModelParameters(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  *(_QWORD *)result = &off_1E25B9B40;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)(result + 24) = a6;
  *(_QWORD *)(result + 32) = &unk_1E25B95B0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

{
  *(_QWORD *)result = &off_1E25B9B40;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)(result + 24) = a6;
  *(_QWORD *)(result + 32) = &unk_1E25B95B0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

__n128 cnnavigation::ParameterizedTroposphereModelParameters::ParameterizedTroposphereModelParameters(cnnavigation::ParameterizedTroposphereModelParameters *this, const cnnavigation::ParameterizedTroposphereModelParameters *a2)
{
  __n128 result;

  *(_QWORD *)this = &off_1E25B9B40;
  result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = &unk_1E25B95B0;
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  return result;
}

{
  __n128 result;

  *(_QWORD *)this = &off_1E25B9B40;
  result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = &unk_1E25B95B0;
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  return result;
}

__n128 cnnavigation::ParameterizedTroposphereModelParameters::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 != a2)
  {
    result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  }
  return result;
}

uint64_t cnnavigation::ParameterizedTroposphereModel::ParameterizedTroposphereModel(uint64_t this)
{
  *(_QWORD *)this = &off_1E25B9A80;
  *(_QWORD *)(this + 8) = &off_1E25B9B40;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = &unk_1E25B95B0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E25B9A80;
  *(_QWORD *)(this + 8) = &off_1E25B9B40;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = &unk_1E25B95B0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 48) = 0;
  return this;
}

__n128 cnnavigation::ParameterizedTroposphereModel::ParameterizedTroposphereModel(__n128 *this, const cnnavigation::ParameterizedTroposphereModelParameters *a2)
{
  __n128 result;

  this->n128_u64[0] = (unint64_t)&off_1E25B9A80;
  this->n128_u64[1] = (unint64_t)&off_1E25B9B40;
  result = *(__n128 *)((char *)a2 + 8);
  this[1] = result;
  this[2].n128_u64[0] = *((_QWORD *)a2 + 3);
  this[2].n128_u64[1] = (unint64_t)&unk_1E25B95B0;
  this[3].n128_u8[0] = *((_BYTE *)a2 + 40);
  return result;
}

{
  __n128 result;

  this->n128_u64[0] = (unint64_t)&off_1E25B9A80;
  this->n128_u64[1] = (unint64_t)&off_1E25B9B40;
  result = *(__n128 *)((char *)a2 + 8);
  this[1] = result;
  this[2].n128_u64[0] = *((_QWORD *)a2 + 3);
  this[2].n128_u64[1] = (unint64_t)&unk_1E25B95B0;
  this[3].n128_u8[0] = *((_BYTE *)a2 + 40);
  return result;
}

uint64_t cnnavigation::ParameterizedTroposphereModel::GetCurrentWeather(uint64_t a1, uint64_t a2)
{
  int v3;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  long double v20;
  double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  long double __x;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[2];
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[2];
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;
  _OWORD v84[2];
  uint64_t v85;
  _OWORD v86[2];
  uint64_t v87;
  _OWORD v88[2];
  uint64_t v89;
  _OWORD v90[2];
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 48))
    return 1;
  v3 = *(unsigned __int8 *)(a2 + 64);
  if (*(_BYTE *)(a2 + 64))
  {
    *(_OWORD *)(a2 + 456) = 0u;
    *(_OWORD *)(a2 + 472) = 0u;
    *(_OWORD *)(a2 + 424) = 0u;
    *(_OWORD *)(a2 + 440) = 0u;
    *(_OWORD *)(a2 + 392) = 0u;
    *(_OWORD *)(a2 + 408) = 0u;
    *(_OWORD *)(a2 + 360) = 0u;
    *(_OWORD *)(a2 + 376) = 0u;
    *(_OWORD *)(a2 + 328) = 0u;
    *(_OWORD *)(a2 + 344) = 0u;
  }
  if (*(_DWORD *)(a1 + 24))
    return 1;
  v5 = *(double *)(a2 + 72);
  v6 = *(double *)(a2 + 88);
  v90[0] = xmmword_18D30BEB0;
  v90[1] = xmmword_18D30BEC0;
  v91 = 0x3FF4F1A6C638D03FLL;
  v88[0] = xmmword_18D30BED0;
  v88[1] = xmmword_18D30BEE0;
  v89 = 0x408FA80000000000;
  v86[0] = xmmword_18D30BEF0;
  v86[1] = xmmword_18D30BF00;
  v87 = 0x40707A6666666666;
  v84[0] = xmmword_18D30BF10;
  v84[1] = xmmword_18D30BF20;
  v85 = 0x4054A00000000000;
  v82[0] = xmmword_18D30BF30;
  v82[1] = xmmword_18D30BF40;
  v83 = 0x3F728E0C9D9D3459;
  v80[0] = xmmword_18D30BF50;
  v80[1] = xmmword_18D30BF60;
  v81 = 0x3FF8CCCCCCCCCCCDLL;
  v77 = 0;
  v78 = xmmword_18D30BF70;
  v79 = xmmword_18D30BF80;
  v75 = xmmword_18D30BF90;
  v76 = xmmword_18D30BFA0;
  v71[0] = 0;
  v71[1] = 0;
  v72 = xmmword_18D30BFB0;
  v73 = 0x4004000000000000;
  v74 = 0;
  v68 = 0;
  v69 = xmmword_18D30BFC0;
  v70 = xmmword_18D30BFD0;
  v65 = 0;
  v66 = xmmword_18D30BFE0;
  v67 = xmmword_18D30BFF0;
  v7 = (v5 + -28.0 + v5 + -28.0) * 3.14159265 / 365.25;
  if (v6 < 0.0)
    v7 = v7 + 3.14159265;
  __x = v7;
  v8 = fabs(v6);
  v60 = 0.0;
  if (v8 <= 0.261799388)
  {
    v63 = 2.77;
    v62 = 0.0063;
    v61 = 75.0;
    v12 = 299.65;
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
    v13 = 0.0;
    v56 = 0.0;
    v57 = 0.0;
    v58 = 0.0;
    v11 = 1013.25;
  }
  else
  {
    if (v8 < 1.30899694)
    {
      v9 = 0;
      while (1)
      {
        v10 = *(double *)((char *)v90 + v9);
        if (v8 > v10 && v8 <= *(double *)((char *)v90 + v9 + 8))
          break;
        v9 += 8;
        if (v9 == 32)
        {
          v11 = 0.0;
          v12 = 0.0;
          v13 = 0.0;
          v61 = 0.0;
          v62 = 0.0;
          v63 = 0.0;
          v14 = 0.0;
          v15 = 0.0;
          v16 = 0.0;
          v17 = 0.0;
          v18 = 0.0;
          v60 = 0.0;
LABEL_15:
          v56 = 0.0;
          v57 = 0.0;
          v58 = 0.0;
          goto LABEL_18;
        }
      }
      v35 = (v8 - v10) / 0.261799388;
      v36 = *(double *)((char *)v88 + v9 + 8) - *(double *)((char *)v88 + v9);
      v11 = *(double *)((char *)v88 + v9) + v36 * v35;
      v37 = *(double *)((char *)v86 + v9 + 8) - *(double *)((char *)v86 + v9);
      v12 = *(double *)((char *)v86 + v9) + v37 * v35;
      v38 = *(double *)((char *)v84 + v9 + 8) - *(double *)((char *)v84 + v9);
      v39 = *(double *)((char *)v84 + v9) + v38 * v35;
      v40 = *(double *)((char *)v82 + v9 + 8) - *(double *)((char *)v82 + v9);
      v41 = *(double *)((char *)v82 + v9) + v40 * v35;
      v42 = *(double *)((char *)v80 + v9 + 8) - *(double *)((char *)v80 + v9);
      v43 = *(double *)((char *)v80 + v9) + v42 * v35;
      v44 = *(double *)((char *)&v77 + v9 + 8) - *(double *)((char *)&v77 + v9);
      v14 = *(double *)((char *)&v77 + v9) + v44 * v35;
      v45 = *(double *)((char *)&v74 + v9 + 8) - *(double *)((char *)&v74 + v9);
      v15 = *(double *)((char *)&v74 + v9) + v45 * v35;
      v46 = *(double *)&v71[v9 / 8 + 1] - *(double *)&v71[v9 / 8];
      v16 = *(double *)&v71[v9 / 8] + v46 * v35;
      v47 = *(double *)((char *)&v68 + v9 + 8) - *(double *)((char *)&v68 + v9);
      v17 = *(double *)((char *)&v68 + v9) + v47 * v35;
      v48 = (double *)((char *)&v65 + v9);
      v49 = v48[1] - *v48;
      v18 = *v48 + v49 * v35;
      v62 = v41;
      v63 = v43;
      v61 = v39;
      if (!v3)
      {
        v13 = 0.0;
        goto LABEL_15;
      }
      v50 = dbl_18D30C000[v6 < 0.0];
      v60 = v50 * v36;
      v56 = v50 * v37;
      v57 = v50 * v38;
      v58 = v50 * v40;
      v59 = v50 * v42;
      v51 = v50 * v44;
      v52 = v50 * v45;
      v53 = v50 * v46;
      v54 = v50 * v47;
      v13 = v50 * v49;
      goto LABEL_19;
    }
    v16 = 2.5;
    v15 = 14.5;
    v14 = -0.5;
    v18 = 0.3;
    v17 = 0.00062;
    v63 = 1.55;
    v62 = 0.00453;
    v61 = 82.5;
    v12 = 263.65;
    v13 = 0.0;
    v56 = 0.0;
    v57 = 0.0;
    v58 = 0.0;
    v11 = 1013.0;
  }
LABEL_18:
  v59 = 0.0;
  v51 = 0.0;
  v52 = 0.0;
  v53 = 0.0;
  v54 = 0.0;
LABEL_19:
  v55 = v13;
  v19 = cos(__x);
  *(double *)(a2 + 280) = (v11 - v14 * v19) * 100.0;
  *(double *)(a2 + 288) = v12 - v15 * v19;
  *(double *)(a2 + 296) = v61 - v16 * v19;
  *(double *)(a2 + 304) = v62 - v17 * v19;
  *(double *)(a2 + 312) = v63 - v18 * v19;
  if (v3)
  {
    v20 = sin(__x);
    v21 = *(double *)(a2 + 128);
    v22 = v20 * (v14 * 100.0) * 0.0172024238 * v21;
    v23 = v20 * v15 * 0.0172024238 * v21;
    v24 = v20 * v16 * 0.0172024238 * v21;
    v25 = v20 * v17 * 0.0172024238 * v21;
    v26 = v20 * v18 * 0.0172024238 * v21;
    v27 = (v60 - v51 * v19) * 100.0;
    v28 = *(double *)(a2 + 160);
    v29 = *(double *)(a2 + 168);
    *(long double *)(a2 + 328) = v22;
    *(double *)(a2 + 336) = v27 * v28;
    v30 = *(double *)(a2 + 176);
    *(double *)(a2 + 344) = v27 * v29;
    *(double *)(a2 + 352) = v27 * v30;
    v31 = v56 - v52 * v19;
    *(long double *)(a2 + 360) = v23;
    *(double *)(a2 + 368) = v31 * v28;
    *(double *)(a2 + 376) = v31 * v29;
    *(double *)(a2 + 384) = v31 * v30;
    v32 = v57 - v53 * v19;
    *(long double *)(a2 + 392) = v24;
    *(double *)(a2 + 400) = v32 * v28;
    *(double *)(a2 + 408) = v32 * v29;
    *(double *)(a2 + 416) = v32 * v30;
    v33 = v58 - v54 * v19;
    *(long double *)(a2 + 424) = v25;
    *(double *)(a2 + 432) = v33 * v28;
    *(double *)(a2 + 440) = v33 * v29;
    *(double *)(a2 + 448) = v33 * v30;
    v34 = v59 - v55 * v19;
    *(long double *)(a2 + 456) = v26;
    *(double *)(a2 + 464) = v34 * v28;
    *(double *)(a2 + 472) = v34 * v29;
    *(double *)(a2 + 480) = v34 * v30;
  }
  return 0;
}

uint64_t cnnavigation::ParameterizedTroposphereModel::GetOrthometricHeight(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t result;
  double v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  double v31;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a2 + 64);
  if (*(_BYTE *)(a2 + 64))
  {
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
  }
  v5 = *(_DWORD *)(a1 + 28);
  if (v5 != 1)
  {
    if (!v5)
    {
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 104);
      result = 0;
      if (v4)
      {
        *(_OWORD *)(a2 + 136) = *(_OWORD *)(a2 + 208);
        v7 = *(double *)(a2 + 224);
LABEL_7:
        *(double *)(a2 + 152) = v7;
        return result;
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    return 0xFFFFFFFFLL;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8))
    return 0xFFFFFFFFLL;
  v35 = *(_OWORD *)(a2 + 88);
  v36 = 0;
  v9 = cnnavigation::LLAToECEF((double *)&v35, 1, v34.f64, 0, (uint64_t)&v24);
  if ((_DWORD)v9)
    return 0xFFFFFFFFLL;
  v10 = v34;
  if (cnnavigation::WGS84GravityModel::ComputeWGS84GravityModel(v9, &v34, 1, 0, v30.f64, &v32, (uint64_t)&v24))return 0xFFFFFFFFLL;
  v23 = 0.0;
  if ((*(unsigned int (**)(_QWORD, float64x2_t *, double *, float64x2_t *, float64x2_t *))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), &v34, &v23, &v30, &v24))
  {
    return 0xFFFFFFFFLL;
  }
  v11 = v30;
  v12 = v30.f64[1];
  v13 = v31;
  v14 = sqrt(vmlad_n_f64(vmuld_lane_f64(v30.f64[1], v30, 1), v11.f64[0], v11.f64[0]) + v13 * v13);
  v15 = v23
      - ((v10.f64[1] * 0.0000729211515 * (v10.f64[1] * 0.0000729211515)
        + v10.f64[0] * 0.0000729211515 * (v10.f64[0] * 0.0000729211515))
       * 0.5
       + -62636851.7);
  *(double *)(a2 + 80) = *(double *)(a2 + 104) - (-0.528 - v15 / v14);
  if (*(_BYTE *)(a2 + 64))
  {
    result = 0;
    v16 = -1.0 / v14;
    v17 = 1.0 / v14;
    v18 = v15 / (v14 * v14);
    v19 = v11.f64[0] / v14;
    v20 = v12 / v14;
    v21 = v13 / v14;
    v22 = -(v33 * v17) - v16 * v13 + v18 * (v20 * v27 + v19 * v25 + v21 * v29);
    *(float64x2_t *)(a2 + 136) = vsubq_f64(*(float64x2_t *)(a2 + 208), vmlaq_n_f64(vmlsq_lane_f64(vmulq_n_f64(vnegq_f64(v32), v17), v11, v16, 0), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v26, v20), v24, v19), v28, v21), v18));
    v7 = *(double *)(a2 + 224) - v22;
    goto LABEL_7;
  }
  return 0;
}

uint64_t cnnavigation::ParameterizedTroposphereModel::GetMappingFunctions(uint64_t a1, uint64_t a2)
{
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  long double v29;
  long double v30;
  uint64_t result;
  double v32;
  double v33;
  double v34;
  double v35;
  long double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  long double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  long double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  int v91;
  double v92;
  long double v93;
  long double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  long double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  long double v115;
  double v116;
  double v117;
  double v118;
  long double v119;
  long double v120;
  long double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double *v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  long double __x;
  double __xb;
  double __xa;
  double v185;
  double v186;
  long double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  long double v195;
  double v196;
  double v197;
  double v198;
  _OWORD v199[2];
  uint64_t v200;
  _OWORD v201[2];
  uint64_t v202;
  _OWORD v203[2];
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  _OWORD v214[2];
  uint64_t v215;
  _OWORD v216[2];
  uint64_t v217;
  _OWORD v218[2];
  uint64_t v219;
  _OWORD v220[2];
  uint64_t v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 48))
    return 1;
  v3 = *(_DWORD *)(a1 + 20);
  if (v3 != 1)
  {
    if (!v3)
    {
      v4 = *(double *)(a2 + 280) / 100.0 + -1000.0;
      v5 = *(double *)(a2 + 288) + -273.15 + -15.0;
      v6 = sqrt(*(double *)(a2 + 320) / 100.0);
      v7 = v4 * 0.0000001316 + 0.001237 + v5 * 0.000001378 + v6 * 0.000008057;
      v8 = v4 * 0.0000001946 + 0.003333 + v5 * 0.000000104 + v6 * 0.00001747;
      v9 = v4 * 0.0000002471 + 0.0005236 + v5 * -0.0000001724 + v6 * 0.00001328;
      v191 = v6;
      v10 = v4 * 0.0000007384 + 0.001705 + v5 * 0.0000003767 + v6 * 0.00002147;
      v11 = v8 / 1.078 + 1.0;
      v12 = v7 / v11 + 1.0;
      __x = *(double *)(a2 + 112);
      v13 = sin(__x);
      v14 = v13 + 0.078;
      v15 = v8;
      v16 = v13 + v8 / (v13 + 0.078);
      v17 = v13 + v7 / v16;
      v18 = v12 / v17;
      *(double *)(a2 + 520) = v12 / v17;
      v19 = v10 / 1.05917 + 1.0;
      v20 = v13 + 0.05917;
      v188 = v10;
      v21 = v13 + v10 / (v13 + 0.05917);
      v22 = v13 + v9 / v21;
      v23 = (v9 / v19 + 1.0) / v22;
      *(double *)(a2 + 528) = v23;
      if (*(_BYTE *)(a2 + 64))
      {
        v24 = v18 / v12;
        v178 = v22;
        v25 = -v18 / v17;
        v26 = 1.0 / v11;
        v167 = -v7;
        v27 = v15;
        v28 = v7 * -1.078 / ((v15 + 1.0 + 0.078) * (v15 + 1.0 + 0.078));
        v29 = __x;
        v176 = v19;
        __xb = v23;
        v171 = v21;
        v173 = v20;
        v169 = v9 / v19 + 1.0;
        v30 = cos(v29);
        result = 0;
        v32 = v167 / (v16 * v16);
        v33 = (v25 * (v32 / v14 * 0.0000001946 + 1.0 / v16 * 0.0000001316)
             + v24 * (v28 * 0.0000001946 + v26 * 0.0000001316))
            * 0.01;
        v34 = v25 * (v32 / v14 * 0.000000104 + 1.0 / v16 * 0.000001378) + v24 * (v28 * 0.000000104 + v26 * 0.000001378);
        v35 = (v25 * (0.000008735 / v191 * (v32 / v14) + 1.0 / v16 * (0.0000040285 / v191))
             + v24 * (0.000008735 / v191 * v28 + v26 * (0.0000040285 / v191)))
            * 0.01;
        v36 = v25 * (v30 + v30 * v32 * (1.0 - v27 / (v14 * v14)));
        v37 = *(double *)(a2 + 360);
        v38 = *(double *)(a2 + 368);
        v40 = *(double *)(a2 + 328);
        v39 = *(double *)(a2 + 336);
        v41 = *(double *)(a2 + 488);
        v42 = *(double *)(a2 + 496);
        *(double *)(a2 + 536) = v34 * v37 + v33 * v40 + v35 * v41;
        v43 = -v9 / (v171 * v171);
        v44 = v30 + v30 * v43 * (1.0 - v188 / (v173 * v173));
        v45 = *(double *)(a2 + 232);
        v46 = *(double *)(a2 + 240);
        *(long double *)(a2 + 544) = v34 * v38 + v33 * v39 + v35 * v42 + v36 * v45;
        v47 = v9 * -1.05917 / ((v188 + 1.0 + 0.05917) * (v188 + 1.0 + 0.05917));
        v48 = v43 / v173;
        v49 = -__xb / v178;
        v50 = v49 * (v48 * 0.0000007384 + 1.0 / v171 * 0.0000002471)
            + __xb / v169 * (v47 * 0.0000007384 + 1.0 / v176 * 0.0000002471);
        v51 = v49 * (v48 * 0.0000003767 + 1.0 / v171 * -0.0000001724)
            + __xb / v169 * (v47 * 0.0000003767 + 1.0 / v176 * -0.0000001724);
        v53 = *(double *)(a2 + 376);
        v52 = *(double *)(a2 + 384);
        v54 = *(double *)(a2 + 344);
        v55 = *(double *)(a2 + 352);
        v56 = v49 * (0.000010735 / v191 * v48 + 1.0 / v171 * (0.00000664 / v191))
            + __xb / v169 * (0.000010735 / v191 * v47 + 1.0 / v176 * (0.00000664 / v191));
        v57 = *(double *)(a2 + 504);
        v58 = *(double *)(a2 + 512);
        *(long double *)(a2 + 552) = v34 * v53 + v33 * v54 + v35 * v57 + v36 * v46;
        v59 = v34 * v52 + v33 * v55 + v35 * v58;
        v60 = v51 * v37 + v50 * 0.01 * v40;
        v61 = v51 * v38 + v50 * 0.01 * v39;
        v62 = *(double *)(a2 + 248);
        v63 = *(double *)(a2 + 256);
        *(long double *)(a2 + 560) = v59 + v36 * v62;
        *(long double *)(a2 + 568) = v36 * v63;
        v64 = v60 + v56 * 0.01 * v41;
        v65 = *(double *)(a2 + 264);
        v66 = *(double *)(a2 + 272);
        *(long double *)(a2 + 576) = v36 * v65;
        *(long double *)(a2 + 584) = v36 * v66;
        v67 = v49 * v44;
        *(double *)(a2 + 592) = v64;
        *(long double *)(a2 + 600) = v61 + v56 * 0.01 * v42 + v67 * v45;
        *(long double *)(a2 + 608) = v51 * v53 + v50 * 0.01 * v54 + v56 * 0.01 * v57 + v67 * v46;
        *(long double *)(a2 + 616) = v51 * v52 + v50 * 0.01 * v55 + v56 * 0.01 * v58 + v67 * v62;
        *(long double *)(a2 + 624) = v67 * v63;
        *(long double *)(a2 + 632) = v67 * v65;
        *(long double *)(a2 + 640) = v67 * v66;
        return result;
      }
      return 0;
    }
    return 1;
  }
  v68 = *(double *)(a2 + 112);
  v70 = *(double *)(a2 + 80);
  v69 = *(double *)(a2 + 88);
  v71 = *(double *)(a2 + 72);
  v220[0] = xmmword_18D30BEB0;
  v220[1] = xmmword_18D30BEC0;
  v221 = 0x3FF4F1A6C638D03FLL;
  v218[0] = xmmword_18D30C010;
  v218[1] = xmmword_18D30C020;
  v219 = 0x3F53BC74F8C0EA98;
  v216[0] = xmmword_18D30C030;
  v216[1] = xmmword_18D30C040;
  v217 = 0x3F67C6F718FD5C4ALL;
  v214[0] = xmmword_18D30C050;
  v214[1] = xmmword_18D30C060;
  v215 = 0x3FB0733DFAB76BBDLL;
  v211 = 0;
  v212 = xmmword_18D30C070;
  v213 = xmmword_18D30C080;
  v208 = 0;
  v209 = xmmword_18D30C090;
  v210 = xmmword_18D30C0A0;
  v206 = xmmword_18D30C0B0;
  v207 = xmmword_18D30C0C0;
  v203[0] = xmmword_18D30C0D0;
  v203[1] = xmmword_18D30C0E0;
  v204 = 0x3F4432E1470BE6ECLL;
  v205 = 0;
  v201[0] = xmmword_18D30C0F0;
  v201[1] = xmmword_18D30C100;
  v202 = 0x3F5CD5970A6DF91FLL;
  v199[0] = xmmword_18D30C110;
  v199[1] = xmmword_18D30C120;
  v200 = 0x3FAC065CAA3EC72ALL;
  v72 = (v71 + -28.0 + v71 + -28.0) * 3.14159265 / 365.25;
  if (v69 >= 0.0)
    v73 = v72;
  else
    v73 = v72 + 3.14159265;
  v74 = fabs(v69);
  v194 = v70;
  v195 = v68;
  if (v74 <= 0.261799388)
  {
    v181 = 0.0;
    v82 = 0.0012769934;
    v81 = 0.0029153695;
    v80 = 0.062610505;
    v198 = 0.00058021897;
    v197 = 0.0014275268;
    v179 = 0.0;
    v180 = 0.0;
    v175 = 0.0;
    v177 = 0.0;
    v174 = 0.0;
    v189 = 0.043472961;
    v170 = 0.0;
    v172 = 0.0;
    v168 = 0.0;
    v77 = 0.0;
    v78 = 0.0;
    v79 = 0.0;
  }
  else if (v74 >= 1.30899694)
  {
    v181 = 0.0;
    v82 = 0.0012045996;
    v81 = 0.0029024912;
    v80 = 0.064258455;
    v79 = 0.000041202191;
    v78 = 0.00011723375;
    v77 = 0.0017037206;
    v198 = 0.00061641693;
    v197 = 0.0017599082;
    v179 = 0.0;
    v180 = 0.0;
    v175 = 0.0;
    v177 = 0.0;
    v172 = 0.0;
    v174 = 0.0;
    v168 = 0.0;
    v170 = 0.0;
    v189 = 0.054736038;
  }
  else
  {
    v75 = 0;
    while (1)
    {
      v76 = *(double *)((char *)v220 + v75);
      if (v74 > v76 && v74 <= *(double *)((char *)v220 + v75 + 8))
        break;
      v75 += 8;
      if (v75 == 32)
      {
        v180 = 0.0;
        v181 = 0.0;
        v177 = 0.0;
        v179 = 0.0;
        v174 = 0.0;
        v175 = 0.0;
        v170 = 0.0;
        v172 = 0.0;
        v168 = 0.0;
        v189 = 0.0;
        v197 = 0.0;
        v198 = 0.0;
        v77 = 0.0;
        v78 = 0.0;
        v79 = 0.0;
        v80 = 0.0;
        v81 = 0.0;
        v82 = 0.0;
        goto LABEL_19;
      }
    }
    v140 = (v74 - v76) / 0.261799388;
    v141 = *(double *)((char *)v218 + v75 + 8) - *(double *)((char *)v218 + v75);
    v82 = *(double *)((char *)v218 + v75) + v141 * v140;
    v142 = *(double *)((char *)v216 + v75 + 8) - *(double *)((char *)v216 + v75);
    v81 = *(double *)((char *)v216 + v75) + v142 * v140;
    v143 = *(double *)((char *)v214 + v75 + 8) - *(double *)((char *)v214 + v75);
    v80 = *(double *)((char *)v214 + v75) + v143 * v140;
    v144 = *(double *)((char *)&v211 + v75 + 8) - *(double *)((char *)&v211 + v75);
    v79 = *(double *)((char *)&v211 + v75) + v144 * v140;
    v145 = *(double *)((char *)&v208 + v75 + 8) - *(double *)((char *)&v208 + v75);
    v78 = *(double *)((char *)&v208 + v75) + v145 * v140;
    v146 = *(double *)((char *)&v205 + v75 + 8) - *(double *)((char *)&v205 + v75);
    v77 = *(double *)((char *)&v205 + v75) + v146 * v140;
    v147 = *(double *)((char *)v203 + v75 + 8) - *(double *)((char *)v203 + v75);
    v148 = *(double *)((char *)v201 + v75 + 8) - *(double *)((char *)v201 + v75);
    v197 = *(double *)((char *)v201 + v75) + v148 * v140;
    v198 = *(double *)((char *)v203 + v75) + v147 * v140;
    v149 = (double *)((char *)v199 + v75);
    v150 = v149[1] - *v149;
    v189 = *v149 + v150 * v140;
    if (*(_BYTE *)(a2 + 64))
    {
      v151 = dbl_18D30C000[v69 < 0.0];
      v168 = v151 * v141;
      v170 = v151 * v142;
      v172 = v151 * v143;
      v174 = v151 * v144;
      v175 = v151 * v145;
      v177 = v151 * v146;
      v179 = v151 * v147;
      v180 = v151 * v148;
      v181 = v151 * v150;
    }
    else
    {
      v180 = 0.0;
      v181 = 0.0;
      v177 = 0.0;
      v179 = 0.0;
      v174 = 0.0;
      v175 = 0.0;
      v170 = 0.0;
      v172 = 0.0;
      v168 = 0.0;
    }
  }
LABEL_19:
  v187 = v73;
  v83 = cos(v73);
  v185 = v79;
  v186 = v78;
  v84 = v82 - v79 * v83;
  v85 = v81 - v78 * v83;
  __xa = v77;
  v192 = v80 - v77 * v83;
  v86 = sin(v195);
  v87 = v86 + 0.00549 / (v86 + 0.00114);
  v88 = v86 + 0.0000253 / v87;
  v89 = 1.0 / v86 + -1.00002516 / v88;
  v90 = v194 * v89 / 1000.0;
  v91 = *(unsigned __int8 *)(a2 + 64);
  if (*(_BYTE *)(a2 + 64))
  {
    v158 = v194 * v89 / 1000.0;
    v160 = v85;
    v92 = v89 / 1000.0;
    v93 = cos(v195);
    v94 = v194
        / 1000.0
        * (-v93 / (v86 * v86)
         + 1.00002516
         / (v88
          * v88)
         * (v93 + v93 * (-0.0000253 / (v87 * v87)) * (-0.00549 / ((v86 + 0.00114) * (v86 + 0.00114)) + 1.0)));
    v162 = v94 * *(double *)(a2 + 232) + v92 * *(double *)(a2 + 136);
    v163 = v94 * *(double *)(a2 + 240) + v92 * *(double *)(a2 + 144);
    v95 = v94 * *(double *)(a2 + 248) + v92 * *(double *)(a2 + 152);
    v90 = v158;
    v85 = v160;
    v166 = v94 * *(double *)(a2 + 256);
    v164 = v95;
    v165 = v94 * *(double *)(a2 + 264);
    v194 = v94 * *(double *)(a2 + 272);
  }
  v96 = v192;
  v97 = v192 + 1.0;
  v98 = v84 / (v85 / (v192 + 1.0) + 1.0) + 1.0;
  v99 = v86 + v192;
  v100 = v86 + v85 / (v86 + v192);
  v101 = v86 + v84 / v100;
  *(double *)(a2 + 520) = v90 + v98 / v101;
  v102 = v189 + 1.0;
  v103 = v197 / (v189 + 1.0) + 1.0;
  v104 = v86 + v189;
  v105 = v86 + v197 / (v86 + v189);
  *(double *)(a2 + 528) = (v198 / v103 + 1.0) / (v86 + v198 / v105);
  if (v91)
  {
    v190 = 1.0 / v101;
    v193 = v102;
    v159 = -v98 / (v101 * v101);
    v161 = v103;
    v106 = v96 + v85 + 1.0;
    v107 = v97 / v106;
    v108 = v106 * v106;
    v152 = -(v84 * v97) / v108;
    v153 = v107;
    v156 = v86 + v198 / v105;
    v157 = v85 * v84 / v108;
    v109 = v195;
    v196 = v104;
    v155 = v198 / v103 + 1.0;
    v110 = cos(v109);
    v111 = v99 * v99;
    v112 = -v84 / (v100 * v100);
    v154 = v110 + v110 * v112 * (1.0 - v85 / (v99 * v99));
    v113 = v112 / v99;
    v114 = v85 * (v84 / (v100 * v100)) / v111;
    v115 = sin(v187);
    v116 = v168 - v174 * v83;
    v117 = v170 - v175 * v83;
    v118 = *(double *)(a2 + 128);
    v119 = v115 * v185 * 0.0172024238 * v118;
    v120 = v115 * v186 * 0.0172024238 * v118;
    v121 = v115 * __xa * 0.0172024238 * v118;
    v122 = v117 * v152 + v153 * v116;
    v123 = v117 * v113 + 1.0 / v100 * v116;
    v124 = -v155 / (v156 * v156);
    v125 = v159 * (v123 + v114 * (v172 - v177 * v83)) + v190 * (v122 + v157 * (v172 - v177 * v83));
    *(long double *)(a2 + 536) = v159 * (v113 * v120 + 1.0 / v100 * v119 + v114 * v121)
                               + v190 * (v152 * v120 + v153 * v119 + v157 * v121)
                               + 0.0;
    v126 = *(double *)(a2 + 232);
    v127 = *(double *)(a2 + 240);
    v128 = *(double *)(a2 + 160);
    v129 = *(double *)(a2 + 168);
    *(double *)(a2 + 544) = v162 + v159 * v154 * v126 + v125 * v128;
    *(double *)(a2 + 552) = v163 + v159 * v154 * v127 + v125 * v129;
    v130 = *(double *)(a2 + 176);
    v131 = *(double *)(a2 + 248);
    v132 = *(double *)(a2 + 256);
    *(double *)(a2 + 560) = v164 + v159 * v154 * v131 + v125 * v130;
    *(double *)(a2 + 568) = v166 + v159 * v154 * v132;
    v133 = *(double *)(a2 + 264);
    v134 = *(double *)(a2 + 272);
    *(double *)(a2 + 576) = v165 + v159 * v154 * v133;
    *(double *)(a2 + 584) = v194 + v159 * v154 * v134;
    v135 = v196;
    v136 = -v198 / (v105 * v105);
    v137 = v110 + v110 * v136 * (1.0 - v197 / (v135 * v135));
    v138 = v124 * (v180 * (v136 / v196) + 1.0 / v105 * v179 + v197 * (v198 / (v105 * v105)) / (v135 * v135) * v181)
         + 1.0
         / v156
         * (v180 * (-v198 / (v161 * v161) / v193)
          + 1.0 / v161 * v179
          + v197 * (v198 / (v161 * v161)) / (v193 * v193) * v181);
    v139 = v124 * v137;
    *(_QWORD *)(a2 + 592) = 0;
    *(double *)(a2 + 600) = v139 * v126 + v138 * v128;
    *(double *)(a2 + 608) = v139 * v127 + v138 * v129;
    *(double *)(a2 + 616) = v139 * v131 + v138 * v130;
    *(double *)(a2 + 624) = v139 * v132;
    *(double *)(a2 + 632) = v139 * v133;
    *(double *)(a2 + 640) = v139 * v134;
  }
  return 0;
}

uint64_t cnnavigation::ParameterizedTroposphereModel::GetZenithDelays(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  long double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  long double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  long double v61;
  long double v62;
  long double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double __x;
  double __xa;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;

  if (!*(_BYTE *)(a1 + 48) || *(_DWORD *)(a1 + 16))
    return 1;
  v4 = *(double *)(a2 + 80);
  v5 = *(double *)(a2 + 88);
  v97 = *(double *)(a2 + 288);
  v6 = *(double *)(a2 + 280) / 100.0;
  v7 = v4 / 1000.0;
  v8 = *(double *)(a2 + 304);
  v9 = *(double *)(a2 + 320) / 100.0;
  if (fabs(v8) <= nextafter(1.0, INFINITY) + -1.0)
  {
    v65 = cos(v5 + v5) * -0.0026 + 1.0 + v7 * -0.00028;
    v66 = v6 * 0.002277 / v65;
    v67 = (1255.0 / v97 + 0.05) * 0.002277;
    if (*(_BYTE *)(a2 + 64))
    {
      v68 = v66 / v65;
      v69 = sin(v5 + v5) * (v66 / v65 * -0.0052);
      v70 = v66 / v6 * 0.01 * *(double *)(a2 + 328);
      v71 = v68 * 0.00028 * 0.001;
      v72 = v71 * *(double *)(a2 + 152) + v66 / v6 * 0.01 * *(double *)(a2 + 352) + v69 * *(double *)(a2 + 176);
      v73 = -2.857635 / (v97 * v97) * v9;
      *(_QWORD *)(a2 + 696) = 0;
      *(_QWORD *)(a2 + 712) = 0;
      *(_QWORD *)(a2 + 704) = 0;
      *(_QWORD *)(a2 + 752) = 0;
      *(_QWORD *)(a2 + 768) = 0;
      *(_QWORD *)(a2 + 760) = 0;
      *(double *)(a2 + 664) = v70 / 299792458.0;
      v74 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 136), v71), *(float64x2_t *)(a2 + 336), v66 / v6 * 0.01), *(float64x2_t *)(a2 + 160), v69);
      v75 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
      *(float64x2_t *)(a2 + 672) = vdivq_f64(v74, v75);
      *(double *)(a2 + 688) = v72 / 299792458.0;
      v76 = vdivq_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 488), v67 * 0.01), *(float64x2_t *)(a2 + 360), v73), v75);
      v77 = vdivq_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 504), v67 * 0.01), *(float64x2_t *)(a2 + 376), v73), v75);
      *(float64x2_t *)(a2 + 720) = v76;
      *(float64x2_t *)(a2 + 736) = v77;
    }
    result = 0;
    *(double *)(a2 + 648) = v66 / 299792458.0;
    v64 = v9 * v67 / 299792458.0;
    goto LABEL_12;
  }
  v10 = v97 - v8 * v4;
  if (v10 >= 0.0)
  {
    v11 = *(double *)(a2 + 312) + 1.0;
    v12 = v10 / v97;
    v93 = v97 - v8 * v4;
    v13 = v6 * pow(v10 / v97, 0.0341631126 / v8);
    v95 = 0.0341631126 / v8;
    __x = v12;
    v14 = v12;
    v15 = v13;
    v89 = 0.0341631126 / v8 * v11;
    v91 = v9;
    v16 = v9 * pow(v14, v89);
    v87 = tan(v5);
    v17 = atan(v87 * 0.99330562);
    v83 = v17 + v17;
    v18 = cos(v17 + v17) * -0.00266 + 1.0 + v7 * -0.00028;
    v19 = v18 * 9.784;
    v92 = v11;
    v20 = v11 * (v18 * 9.784);
    v21 = 0.0022768 / v18;
    v22 = v15 * (0.0022768 / v18);
    v90 = v16;
    v96 = v16 * ((377600.0 / (v93 * (1.0 - v8 * 287.053763 / v20)) + 16.5220718) * 0.000001 * 287.053763) / v20;
    if (*(_BYTE *)(a2 + 64))
    {
      v81 = v15 * (-0.0022768 / (v18 * v18));
      v23 = v95 * v15 / v93;
      v24 = __x;
      __xa = v22;
      v82 = v19;
      v78 = v93 * (1.0 - v8 * 287.053763 / v20);
      v79 = log(v24);
      v80 = -v95 / v8;
      v25 = sin(v83);
      v26 = (v23 - v95 * v15 / v97) * v21;
      v27 = v15 / v6 * v21 * 0.01;
      v28 = *(double *)(a2 + 368);
      v84 = *(double *)(a2 + 360);
      v29 = *(double *)(a2 + 376);
      v30 = *(double *)(a2 + 384);
      v88 = (v87 * v87 + 1.0) * 0.99330562 / (v87 * 0.99330562 * v87 + 1.0);
      v31 = v90 * (-0.3776 / (v78 * v78) * 287.053763) / v20;
      v32 = v78 / v93 * v31;
      v33 = v89 * v90 / v93 * (v96 / v90);
      v34 = v31 * (v93 * -287.053763 / v20) - v4 * v32 - v33 * v4 + v92 * (v79 * v90) * (v96 / v90) * v80;
      v35 = (v80 * (v79 * v15) - v23 * v4) * v21;
      v36 = -v96 / v20;
      v37 = v8 * v93 * 287.053763 / (v20 * v20);
      v38 = v33 * -v8
          + v31 * (v92 * v37 * 9.784 * -0.00028 * 0.001 - v8 * (v78 / v93))
          + v92 * v36 * 9.784 * -0.00028 * 0.001;
      v39 = v81 * -0.00028 * 0.001 - v8 * (v23 * v21);
      v41 = *(double *)(a2 + 424);
      v40 = *(double *)(a2 + 432);
      v94 = v26 * v84 + v27 * *(double *)(a2 + 328) + v35 * v41;
      v42 = v26 * v28 + v27 * *(double *)(a2 + 336) + v35 * v40;
      v43 = *(double *)(a2 + 440);
      v44 = *(double *)(a2 + 448);
      v45 = v26 * v29 + v27 * *(double *)(a2 + 344) + v35 * v43;
      v46 = v26 * v30 + v27 * *(double *)(a2 + 352) + v35 * v44;
      v47 = v88 * (v25 * 0.00532 * v81);
      v49 = *(double *)(a2 + 152);
      v48 = *(double *)(a2 + 160);
      v50 = *(double *)(a2 + 168);
      v51 = *(double *)(a2 + 176);
      v52 = v33 + v32 - v89 * v90 / v97 * (v96 / v90);
      v53 = v90 / v91 * (v96 / v90) * 0.01;
      v54 = v82 * v36 + v82 * (v37 * v31) + v95 * (v79 * v90) * (v96 / v90);
      v55 = v53 * *(double *)(a2 + 488) + v52 * v84 + v34 * v41 + v54 * *(double *)(a2 + 456);
      v56 = v53 * *(double *)(a2 + 496) + v52 * v28 + v34 * v40 + v54 * *(double *)(a2 + 464);
      v57 = v53 * *(double *)(a2 + 504) + v52 * v29 + v34 * v43;
      v58 = v53 * *(double *)(a2 + 512) + v52 * v30 + v34 * v44 + v54 * *(double *)(a2 + 480);
      v59 = *(double *)(a2 + 136);
      v60 = *(double *)(a2 + 144);
      v61 = v88 * (v25 * 0.00532 * (v92 * (v36 + v31 * v37) * 9.784));
      v62 = v57 + v54 * *(double *)(a2 + 472) + v38 * v60 + v61 * v50;
      *(double *)(a2 + 664) = v94 / 299792458.0;
      *(long double *)(a2 + 672) = (v42 + v47 * v48 + v39 * v59) / 299792458.0;
      *(long double *)(a2 + 680) = (v45 + v47 * v50 + v39 * v60) / 299792458.0;
      *(long double *)(a2 + 688) = (v46 + v47 * v51 + v39 * v49) / 299792458.0;
      *(double *)(a2 + 720) = v55 / 299792458.0;
      *(long double *)(a2 + 728) = (v56 + v38 * v59 + v61 * v48) / 299792458.0;
      v63 = v62 / 299792458.0;
      v22 = __xa;
      *(long double *)(a2 + 736) = v63;
      *(long double *)(a2 + 744) = (v58 + v38 * v49 + v61 * v51) / 299792458.0;
      *(_QWORD *)(a2 + 704) = 0;
      *(_QWORD *)(a2 + 696) = 0;
      *(_QWORD *)(a2 + 712) = 0;
      *(_QWORD *)(a2 + 752) = 0;
      *(_QWORD *)(a2 + 768) = 0;
      *(_QWORD *)(a2 + 760) = 0;
    }
    result = 0;
    *(double *)(a2 + 648) = v22 / 299792458.0;
    v64 = v96 / 299792458.0;
LABEL_12:
    *(double *)(a2 + 656) = v64;
    return result;
  }
  *(_OWORD *)(a2 + 648) = 0u;
  result = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    *(_OWORD *)(a2 + 744) = 0uLL;
    *(_OWORD *)(a2 + 760) = 0uLL;
    *(_OWORD *)(a2 + 712) = 0uLL;
    *(_OWORD *)(a2 + 728) = 0uLL;
    *(_OWORD *)(a2 + 680) = 0uLL;
    *(_OWORD *)(a2 + 696) = 0uLL;
    *(_OWORD *)(a2 + 664) = 0uLL;
  }
  return result;
}

uint64_t cnnavigation::ParameterizedTroposphereModel::GetTroposphericDelay(cnnavigation::ParameterizedTroposphereModel *this, int a2, double a3, const double *a4, const double *a5, double *a6)
{
  float64x2_t v7[3];

  return cnnavigation::ParameterizedTroposphereModel::GetTroposphericDelay((uint64_t)this, a2, (uint64_t)a4, (uint64_t)a5, a6, 0, v7, a3);
}

uint64_t cnnavigation::ParameterizedTroposphereModel::GetTroposphericDelay(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double *a5, char a6, float64x2_t *a7, double a8)
{
  uint64_t result;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  int v25;
  double v26;
  float64x2_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  long double v32;
  double v33[3];
  _QWORD v34[6];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  double v65;
  double v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 48))
    return 1;
  v25 = a2;
  v26 = a8;
  v27 = *(float64x2_t *)a3;
  v28 = *(_QWORD *)(a3 + 16);
  v29 = *(_OWORD *)a4;
  v30 = *(_QWORD *)(a4 + 16);
  v31 = a6;
  v32 = fmod((a8 + -432000.0) / 86400.0 + ((double)a2 + -1564.0) * 7.0, 365.25);
  if ((a6 & 1) != 0)
  {
    v34[2] = 0x3EE845C8A0CE5129;
    result = cnnavigation::ECEFToLLA((float64x2_t *)a3, 1, v33, 1, (uint64_t)&v75);
    v35 = v75;
    v36 = v76;
    v37 = v77;
    v38 = v78;
    v39 = v79;
    if ((_DWORD)result)
      return result;
  }
  else
  {
    result = cnnavigation::ECEFToLLA((float64x2_t *)a3, 1, v33, 0, (uint64_t)&v75);
    if ((_DWORD)result)
      return result;
  }
  if (v31)
  {
    result = cnnavigation::SatElAz(a3, a4, 1, (uint64_t)v34, 1, (uint64_t)&v75);
    v40 = v75;
    v41 = v76;
    v42 = v77;
    if ((_DWORD)result)
      return result;
  }
  else
  {
    result = cnnavigation::SatElAz(a3, a4, 1, (uint64_t)v34, 0, (uint64_t)&v75);
    if ((_DWORD)result)
      return result;
  }
  if (cnnavigation::ParameterizedTroposphereModel::GetOrthometricHeight(a1, (uint64_t)&v25))
    return 0xFFFFFFFFLL;
  if (cnnavigation::ParameterizedTroposphereModel::GetCurrentWeather(a1, (uint64_t)&v25))
    return 1;
  if (v31)
  {
    sub_18D09239C(&v46, (double *)&v75, v43, v44, v45);
    v53 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v49, *((double *)&v75 + 1)), v47, *(double *)&v75), v51, *(double *)&v76);
    v54 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v50, *((double *)&v75 + 1)), v48, *(double *)&v75), v52, *(double *)&v76);
  }
  else
  {
    v15 = v44;
    v16 = v45;
    v17 = v43 / 100.0;
    v46 = (v17 * 0.00000314 + 1.00062 + (v15 + -273.15) * 0.00000056 * (v15 + -273.15))
        * (v16
         / 100.0
         * (exp(v44 * -0.019121316 + v44 * 0.000012378847 * v44 + 33.9371105 + -6343.1645 / v44)
          * 0.01))
        * 100.0;
  }
  if (cnnavigation::ParameterizedTroposphereModel::GetZenithDelays(a1, (uint64_t)&v25)
    || cnnavigation::ParameterizedTroposphereModel::GetMappingFunctions(a1, (uint64_t)&v25))
  {
    return 1;
  }
  v18 = v55;
  v19 = v65;
  v20 = v56;
  v21 = v66;
  *a5 = v56 * v66 + v55 * v65;
  result = 0;
  if (v31)
  {
    v22 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64(v58, v19), v68, v18), vmlaq_n_f64(vmulq_n_f64(v62, v21), v72, v20));
    v23 = v69;
    v24 = v59;
    *a7 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64(v57, v19), v67, v18), vmlaq_n_f64(vmulq_n_f64(v61, v21), v71, v20));
    a7[1] = v22;
    a7[2] = vaddq_f64(vmlaq_n_f64(vmulq_n_f64(v24, v19), v23, v18), vmlaq_n_f64(vmulq_n_f64(v63, v21), v73, v20));
    a7[3].f64[0] = v19 * v60 + v18 * v70 + v21 * v64 + v20 * v74;
  }
  return result;
}

uint64_t cnnavigation::ParameterizedTroposphereModel::GetTroposphericDelay(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double *a5, float64x2_t *a6, double a7)
{
  return cnnavigation::ParameterizedTroposphereModel::GetTroposphericDelay(a1, a2, a3, a4, a5, 1, a6, a7);
}

void sub_18D09239C(double *a1, double *a2, double a3, double a4, double a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v9 = a3 / 100.0;
  v10 = exp(a4 * -0.019121316 + a4 * 0.000012378847 * a4 + 33.9371105 + -6343.1645 / a4) * 0.01;
  v11 = v9 * 0.00000314 + 1.00062 + (a4 + -273.15) * 0.00000056 * (a4 + -273.15);
  v12 = v11 * (a5 / 100.0 * v10);
  *a1 = v12 * 100.0;
  if (a2)
  {
    v13 = v11 * v10 / 100.0;
    v14 = v12 / v11;
    *a2 = v14 * 100.0 * 0.00000314 * 0.01;
    a2[1] = ((a4 + -273.15) * 0.00000112 * v14
           + v12 / v10 * ((a4 * 0.000024757694 + -0.019121316 + 6343.1645 / (a4 * a4)) * v10))
          * 100.0;
    a2[2] = v13 * 100.0;
  }
}

_QWORD *sub_18D0924E4(_QWORD *result)
{
  result[5] = &unk_1E25B9250;
  *result = &unk_1E25B9488;
  result[1] = &off_1E25B9B40;
  return result;
}

void sub_18D092510(_QWORD *a1)
{
  a1[5] = &unk_1E25B9250;
  *a1 = &unk_1E25B9488;
  a1[1] = &off_1E25B9B40;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D09254C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

_QWORD *sub_18D092554(_QWORD *result)
{
  *result = &off_1E25B9B40;
  result[4] = &unk_1E25B9250;
  return result;
}

void sub_18D092574(_QWORD *a1)
{
  *a1 = &off_1E25B9B40;
  a1[4] = &unk_1E25B9250;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::GNSSDopplerShift(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, int a7, double *a8, int8x16_t a9, int8x16_t a10, double a11)
{
  _BYTE v12[80];
  __int16 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v13 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  return cnnavigation::GNSSDopplerShift(a1, (const cnnavigation::GNSSUTCParameters *)&v13, a2, a3, a4, a5, a6, a7, a9, a10, a11, a8, 0, (uint64_t)v12);
}

uint64_t cnnavigation::GNSSDopplerShift(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, int a8, int8x16_t a9, int8x16_t a10, double a11, double *a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int v34;
  uint64_t result;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  double v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  __n128 v60;
  uint64_t v61[2];
  _QWORD v62[2];
  double v63;
  __int128 v64;
  float64x2_t v65;
  float64x2_t v66[2];
  double v67;
  __int128 v68;
  float64x2_t v69;
  double v70;
  double v71;
  _QWORD v72[2];
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (*(double *)a9.i64 <= 0.0 || (a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v75 = v17;
  v76 = v16;
  v77 = v14;
  v78 = v15;
  v27 = 0;
  while ((*(_QWORD *)(a3 + v27) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v27 += 8;
    if (v27 == 24)
    {
      v28 = 0;
      while ((*(_QWORD *)&a4[v28] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if (++v28 == 3)
        {
          if ((a10.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&a11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            return 0xFFFFFFFFLL;
          }
          v60 = (__n128)a9;
          v73 = 0.0;
          v74 = 0.0;
          a9.i64[0] = a10.i64[0];
          CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, a9, a10);
          v72[0] = CNTimeSpan::operator-(a1, &v73, v29, v30);
          v72[1] = v31;
          v71 = 0.0;
          v70 = 0.0;
          v69 = 0u;
          v68 = 0u;
          if (a8)
          {
            v33 = (int8x16_t)v60;
            if (a8 != 1)
              return 0xFFFFFFFFLL;
            v34 = 2;
          }
          else
          {
            v34 = 1;
            v33 = (int8x16_t)v60;
          }
          if (a13)
          {
            result = cnnavigation::GNSSTimeOfFlight((uint64_t)v72, (uint64_t)a2, a3, a5, v34, a6, 1, a7, v33, v32, &v71, 1u, (uint64_t)&v68);
            if ((_DWORD)result)
              return result;
            v67 = 0.0;
            memset(v66, 0, sizeof(v66));
            v64 = 0u;
            v65 = 0u;
            result = cnnavigation::GNSSTimeOfFlightRate((uint64_t)v72, a2, a3, a4, a5, v34, a6, 1, v60.n128_f64[0], v36, a7, &v67, 1, (uint64_t)&v64);
          }
          else
          {
            result = cnnavigation::GNSSTimeOfFlight((uint64_t)v72, (uint64_t)a2, a3, a5, v34, a6, 1, a7, v33, v32, &v71, 0, (uint64_t)&v73);
            if ((_DWORD)result)
              return result;
            v67 = 0.0;
            memset(v66, 0, sizeof(v66));
            v64 = 0u;
            v65 = 0u;
            result = cnnavigation::GNSSTimeOfFlightRate((uint64_t)v72, a2, a3, a4, a5, v34, a6, 1, v60.n128_f64[0], v39, a7, &v67, 0, (uint64_t)&v73);
          }
          if (!(_DWORD)result)
          {
            v40 = v67;
            v63 = 0.0;
            *(double *)v37.i64 = v71;
            v61[0] = 0;
            v61[1] = 0;
            CNTimeSpan::SetTimeSpan(v61, 0, v37, v38);
            v62[0] = CNTimeSpan::operator-((uint64_t)v72, v61, v41, v42);
            v62[1] = v43;
            result = (*(uint64_t (**)(uint64_t, _QWORD *, const cnnavigation::GNSSUTCParameters *, double *, _QWORD, double *, __n128))(*(_QWORD *)a5 + 136))(a5, v62, a2, &v63, a13, &v73, v60);
            if (!(_DWORD)result)
            {
              v44 = v63;
              v45 = 1.0 - a11 - v40;
              v46 = a11 + v40 * (1.0 - a11);
              v47 = 1.0 - v45 * v63;
              v48 = v45 * v63 - v46 / v47;
              *a12 = v48 * v60.n128_f64[0];
              if (a13)
              {
                v49 = 1.0 - v46 / (v47 * v47);
                v50 = (v40 + -1.0) / v47;
                v51 = (a11 + -1.0) / v47;
                v52 = *(double *)&v64;
                v53 = v45 * (v73 * (1.0 - *(double *)&v68)) - v44 * *(double *)&v64;
                v54 = -v73;
                v55 = v66[0].f64[0];
                v56 = v45 * -(v73 * v70) - v44 * v66[0].f64[0];
                v57 = v66[1].f64[1];
                v58 = -(v44 * v66[1].f64[1]);
                v59 = v48
                    + v60.n128_f64[0]
                    * (v51 * *((double *)&v64 + 1)
                     + v49 * (v45 * (v74 - v73 * *((double *)&v68 + 1)) - v44 * *((double *)&v64 + 1)));
                *(double *)a14 = (v51 * *(double *)&v64 + v49 * v53) * v60.n128_f64[0];
                *(double *)(a14 + 8) = v59;
                *(float64x2_t *)(a14 + 16) = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, v51), vmlsq_lane_f64(vmulq_n_f64(vmulq_n_f64(v69, v54), v45), v65, v44, 0), v49), v60.n128_f64[0]);
                *(double *)(a14 + 32) = (v51 * v55 + v49 * v56) * v60.n128_f64[0];
                *(float64x2_t *)(a14 + 40) = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)((char *)v66 + 8), v51), vmulq_n_f64(*(float64x2_t *)((char *)v66 + 8), -v44), v49), v60.n128_f64[0]);
                *(double *)(a14 + 56) = (v51 * v57 + v49 * v58) * v60.n128_f64[0];
                *(double *)(a14 + 64) = (v49 * -v53 - v51 * v52) * v60.n128_f64[0];
                *(double *)(a14 + 72) = (v50 - v49 * v44) * v60.n128_f64[0];
              }
            }
          }
          return result;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t cnnavigation::GNSSDopplerShift(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, int a7, double *a8, int8x16_t a9, int8x16_t a10, double a11, uint64_t a12)
{
  __int16 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v13 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  return cnnavigation::GNSSDopplerShift(a1, (const cnnavigation::GNSSUTCParameters *)&v13, a2, a3, a4, a5, a6, a7, a9, a10, a11, a8, 1u, a12);
}

uint64_t cnnavigation::GNSSDopplerShift(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, int a8, int8x16_t a9, int8x16_t a10, double a11, double *a12)
{
  _BYTE v13[80];

  return cnnavigation::GNSSDopplerShift(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, (uint64_t)v13);
}

uint64_t cnnavigation::GNSSDopplerShift(uint64_t a1, const cnnavigation::GNSSUTCParameters *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, int a8, int8x16_t a9, int8x16_t a10, double a11, double *a12, uint64_t a13)
{
  return cnnavigation::GNSSDopplerShift(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 1u, a13);
}

uint64_t cnnavigation::GPSDopplerShift(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, double a8, double a9, double a10, double a11)
{
  _BYTE v12[80];

  return cnnavigation::GPSDopplerShift(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, a11, (uint64_t)v12);
}

uint64_t cnnavigation::GPSDopplerShift(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, int a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  double v22;
  uint64_t result;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v42[2];
  double v43;
  double v44;
  double v45;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  double v49;
  double v50;
  double v51;
  double v52[2];
  float64x2_t v53;
  double v54;

  v22 = a9 - a11;
  v51 = 0.0;
  if (a8)
  {
    result = cnnavigation::GPSTimeOfFlight(a1, a2, a4, a5, a6, &v51, 1, v52, a9 - a11, a10);
    if ((_DWORD)result)
      return result;
    v50 = 0.0;
    result = cnnavigation::GPSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, &v50, 1, v22, a10, &v44);
  }
  else
  {
    result = cnnavigation::GPSTimeOfFlight(a1, a2, a4, a5, a6, &v51, 0, v52, a9 - a11, a10);
    if ((_DWORD)result)
      return result;
    v50 = 0.0;
    result = cnnavigation::GPSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, &v50, 0, v22, a10, v52);
  }
  if (!(_DWORD)result)
  {
    v24 = v50;
    v43 = 0.0;
    if (cnnavigation::GPSSatelliteClockOffsetRate(a1, a4, &v43, a8, (uint64_t)v42, v22 - v51))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      v25 = v43;
      v26 = 1.0 - a12 - v24;
      v27 = a12 + v24 * (1.0 - a12);
      v28 = 1.0 - v26 * v43;
      v29 = v26 * v43 - v27 / v28;
      *a7 = v29 * a10;
      result = 0;
      if (a8)
      {
        v30 = 1.0 - v27 / (v28 * v28);
        v31 = (v24 + -1.0) / v28;
        v32 = (a12 + -1.0) / v28;
        v33 = v26 * (v42[0] * (1.0 - v52[0])) - v25 * v44;
        v34 = -v42[0];
        v35 = v47;
        v36 = v26 * -(v42[0] * v54) - v25 * v47;
        v37 = v49;
        v38 = -(v25 * v49);
        v39 = v32 * v44;
        v40 = v29 + a10 * (v32 * v45 + v30 * (v26 * (v42[1] - v42[0] * v52[1]) - v25 * v45));
        *(double *)a13 = (v32 * v44 + v30 * v33) * a10;
        *(double *)(a13 + 8) = v40;
        *(float64x2_t *)(a13 + 16) = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v46, v32), vmlsq_lane_f64(vmulq_n_f64(vmulq_n_f64(v53, v34), v26), v46, v25, 0), v30), a10);
        *(double *)(a13 + 32) = (v32 * v35 + v30 * v36) * a10;
        *(float64x2_t *)(a13 + 40) = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v48, v32), vmulq_n_f64(v48, -v25), v30), a10);
        *(double *)(a13 + 56) = (v32 * v37 + v30 * v38) * a10;
        *(double *)(a13 + 64) = (v30 * -v33 - v39) * a10;
        *(double *)(a13 + 72) = (v31 - v30 * v25) * a10;
      }
    }
  }
  return result;
}

uint64_t cnnavigation::GPSDopplerShift(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  return cnnavigation::GPSDopplerShift(a1, a2, a3, a4, a5, a6, a7, 1, a9, a10, a11, a12, a8);
}

uint64_t cnnavigation::NORADTLEEphemerides::NORADTLEEphemerides(uint64_t a1, const std::string *a2, std::string *a3, std::string *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E25B9740;
  *(_BYTE *)(a1 + 8) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 16), "");
  sub_18D0778AC((_QWORD *)(a1 + 40), "");
  sub_18D0778AC((_QWORD *)(a1 + 64), "");
  sub_18D0778AC((_QWORD *)(a1 + 88), "");
  *(_DWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 128), "");
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 457) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_QWORD *)(a1 + 960) = 0;
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  cnnavigation::NORADTLEEphemerides::LoadNORADTLEFromStrings(a1, a2, a3, a4, v8, v9, v10, v11);
  return a1;
}

void sub_18D092F38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 111) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = off_1E25B93B0;
  _Unwind_Resume(exception_object);
}

BOOL cnnavigation::NORADTLEEphemerides::LoadNORADTLEFromStrings(uint64_t a1, const std::string *a2, std::string *__str, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  std::string::size_type size;
  int v14;
  std::string::size_type v15;
  int v16;
  std::string::size_type v17;
  char *v18;
  _BOOL8 v19;
  int v21;
  std::string::size_type v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v29;
  std::string::size_type v30;
  std::string *v31;
  std::string *p_stra;
  uint64_t v33;
  unsigned int v34;
  int v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  uint64_t v39;
  void **v40;
  unsigned int v41;
  int v42;
  double v43;
  std::string::size_type v44;
  std::string *v45;
  std::string *v46;
  uint64_t v47;
  std::string::size_type v48;
  std::string *v49;
  std::string *v50;
  uint64_t v51;
  double v52;
  int v53;
  std::string::size_type v54;
  std::string *v55;
  std::string *v56;
  uint64_t v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  uint64_t v61;
  double v62;
  int v63;
  int v64;
  unsigned int v65;
  char v66;
  unsigned int v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  float64x2_t v75;
  float64x2_t v76;
  char v77;
  std::string v78;
  std::string v79;
  std::string __stra;
  char v81;

  v12 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size != 69)
    {
      LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
      v79.__r_.__value_.__s.__data_[0] = 3;
      LOBYTE(v12) = size;
      goto LABEL_9;
    }
  }
  else if (v12 != 69)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
LABEL_9:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__stra, (unsigned __int8 *)&v79, "LoadNORADTLEFromStrings unexpected TLE line 1 length %zu", (uint64_t)a4, a5, a6, a7, a8, v12);
    return 0;
  }
  v14 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
  {
    v15 = a4->__r_.__value_.__l.__size_;
    if (v15 != 69)
    {
      LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
      v79.__r_.__value_.__s.__data_[0] = 3;
      LOBYTE(v14) = v15;
      goto LABEL_15;
    }
  }
  else if (v14 != 69)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
LABEL_15:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__stra, (unsigned __int8 *)&v79, "LoadNORADTLEFromStrings unexpected TLE line 2 length %zu", (uint64_t)a4, a5, a6, a7, a8, v14);
    return 0;
  }
  if ((v12 & 0x80) == 0)
  {
    v16 = __str->__r_.__value_.__s.__data_[0];
    if (v16 == 49)
    {
      v17 = __str->__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }
LABEL_19:
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    v77 = v16;
    v18 = "LoadNORADTLEFromStrings unexpected TLE line 1 character 1: %c";
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__stra, (unsigned __int8 *)&v79, v18, (uint64_t)a4, a5, a6, a7, a8, v77);
    return 0;
  }
  v17 = __str->__r_.__value_.__r.__words[0];
  v16 = *(unsigned __int8 *)__str->__r_.__value_.__l.__data_;
  if (v16 != 49)
    goto LABEL_19;
LABEL_17:
  if ((*(_BYTE *)(v17 + 68) - 58) <= 0xF5u)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__stra, (unsigned __int8 *)&v79, "LoadNORADTLEFromStrings unexpected TLE line 1 character %u: %c", (uint64_t)a4, a5, a6, a7, a8, 69);
    return 0;
  }
  if ((v14 & 0x80) == 0)
  {
    v21 = a4->__r_.__value_.__s.__data_[0];
    if (v21 == 50)
    {
      v22 = a4->__r_.__value_.__r.__words[0];
      goto LABEL_27;
    }
LABEL_29:
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__stra, (unsigned __int8 *)&v79, "LoadNORADTLEFromStrings unexpected TLE line 2 character 1: %c", (uint64_t)a4, a5, a6, a7, a8, v21);
    return 0;
  }
  v22 = a4->__r_.__value_.__r.__words[0];
  v21 = *(unsigned __int8 *)a4->__r_.__value_.__l.__data_;
  if (v21 != 50)
    goto LABEL_29;
LABEL_27:
  if ((*(_BYTE *)(v22 + 68) - 58) <= 0xF5u)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__stra, (unsigned __int8 *)&v79, "LoadNORADTLEFromStrings unexpected TLE line 2 character %u: %c", (uint64_t)a4, a5, a6, a7, a8, 69);
    return 0;
  }
  std::string::basic_string(&__stra, __str, 2uLL, 5uLL, (std::allocator<char> *)&v79);
  std::string::basic_string(&v79, a4, 2uLL, 5uLL, (std::allocator<char> *)&v78);
  v23 = sub_18D093E10((unsigned __int8 *)&__stra, (unsigned __int8 *)&v79);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  if (!v23)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    v18 = "LoadNORADTLEFromStrings lines 1 & 2 satellite number mismatch";
    goto LABEL_20;
  }
  v24 = cnnavigation::NORADTLEEphemerides::TLECheckSum(__str);
  if (v24 >= 0xB)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    v18 = "LoadNORADTLEFromStrings TLE line 1 checksum computation failed.";
    goto LABEL_20;
  }
  v25 = *(char *)(__str->__r_.__value_.__r.__words[0] + 68);
  if (v24 + 48 != v25)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__stra, (unsigned __int8 *)&v79, "LoadNORADTLEFromStrings TLE line 1 checksum mismatch: %c vs. %c.", (uint64_t)a4, a5, a6, a7, a8, v25);
    return 0;
  }
  v26 = cnnavigation::NORADTLEEphemerides::TLECheckSum(a4);
  if (v26 >= 0xB)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    v18 = "LoadNORADTLEFromStrings TLE line 2 checksum computation failed.";
    goto LABEL_20;
  }
  v27 = *(char *)(a4->__r_.__value_.__r.__words[0] + 68);
  if (v26 + 48 != v27)
  {
    LOWORD(__stra.__r_.__value_.__l.__data_) = 5;
    v79.__r_.__value_.__s.__data_[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__stra, (unsigned __int8 *)&v79, "LoadNORADTLEFromStrings TLE line 2 checksum mismatch: %c vs. %c.", (uint64_t)a4, a5, a6, a7, a8, v27);
    return 0;
  }
  *(_BYTE *)(a1 + 8) = 0;
  std::string::operator=((std::string *)(a1 + 88), a2);
  sub_18D0778AC(&__stra, "");
  sub_18D0778AC(&v79, "");
  std::string::basic_string(&v78, __str, 2uLL, 5uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(_DWORD *)(a1 + 112) = std::stoul(&__stra, 0, 10);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    v28 = *(unsigned __int8 *)(__str->__r_.__value_.__r.__words[0] + 7);
  else
    v28 = __str->__r_.__value_.__s.__data_[7];
  v29 = v28 == 85 || v28 == 117;
  *(_BYTE *)(a1 + 116) = !v29;
  std::string::basic_string(&v78, __str, 9uLL, 2uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  v30 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  v31 = (std::string *)v78.__r_.__value_.__r.__words[0];
  p_stra = &__stra;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v30 = v78.__r_.__value_.__l.__size_;
    p_stra = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  if (!v30)
    goto LABEL_62;
  v33 = 0;
  while (p_stra->__r_.__value_.__s.__data_[v33] == 32)
  {
    if (v30 == ++v33)
      goto LABEL_62;
  }
  if (v33 == -1)
  {
LABEL_62:
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      __stra.__r_.__value_.__l.__size_ = 1;
    }
    else
    {
      *((_BYTE *)&__stra.__r_.__value_.__s + 23) = 1;
      v31 = &__stra;
    }
    LOWORD(v31->__r_.__value_.__l.__data_) = 48;
  }
  v34 = std::stoul(&__stra, 0, 10);
  if (v34 >= 0x39)
    v35 = 1900;
  else
    v35 = 2000;
  *(_DWORD *)(a1 + 120) = v35 + v34;
  std::string::basic_string(&v78, __str, 0xBuLL, 3uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  v36 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  v37 = (std::string *)v78.__r_.__value_.__r.__words[0];
  v38 = &__stra;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v36 = v78.__r_.__value_.__l.__size_;
    v38 = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  if (!v36)
    goto LABEL_79;
  v39 = 0;
  while (v38->__r_.__value_.__s.__data_[v39] == 32)
  {
    if (v36 == ++v39)
      goto LABEL_79;
  }
  if (v39 == -1)
  {
LABEL_79:
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      __stra.__r_.__value_.__l.__size_ = 1;
    }
    else
    {
      *((_BYTE *)&__stra.__r_.__value_.__s + 23) = 1;
      v37 = &__stra;
    }
    LOWORD(v37->__r_.__value_.__l.__data_) = 48;
  }
  *(_DWORD *)(a1 + 124) = std::stoul(&__stra, 0, 10);
  std::string::basic_string(&v78, __str, 0xEuLL, 3uLL, (std::allocator<char> *)&v81);
  v40 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*v40);
  *(_OWORD *)v40 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 144) = *((_QWORD *)&v78.__r_.__value_.__l + 2);
  std::string::basic_string(&v78, __str, 0x12uLL, 2uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  v41 = std::stoul(&__stra, 0, 10);
  if (v41 >= 0x39)
    v42 = 1900;
  else
    v42 = 2000;
  *(_DWORD *)(a1 + 152) = v42 + v41;
  std::string::basic_string(&v78, __str, 0x14uLL, 0xCuLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(double *)(a1 + 160) = std::stod(&__stra, 0);
  std::string::basic_string(&v78, __str, 0x21uLL, 0xAuLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  v43 = std::stod(&__stra, 0);
  *(double *)(a1 + 232) = v43 + v43;
  std::string::basic_string(&v78, __str, 0x2CuLL, 6uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  v44 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  v45 = (std::string *)v78.__r_.__value_.__r.__words[0];
  v46 = &__stra;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v44 = v78.__r_.__value_.__l.__size_;
    v46 = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  if (!v44)
    goto LABEL_104;
  v47 = 0;
  while (v46->__r_.__value_.__s.__data_[v47] == 32)
  {
    if (v44 == ++v47)
      goto LABEL_104;
  }
  if (v47 == -1)
  {
LABEL_104:
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      __stra.__r_.__value_.__l.__size_ = 1;
    }
    else
    {
      *((_BYTE *)&__stra.__r_.__value_.__s + 23) = 1;
      v45 = &__stra;
    }
    LOWORD(v45->__r_.__value_.__l.__data_) = 48;
  }
  std::string::basic_string(&v78, __str, 0x32uLL, 2uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v79 = v78;
  v48 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  v49 = (std::string *)v78.__r_.__value_.__r.__words[0];
  v50 = &v79;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v48 = v78.__r_.__value_.__l.__size_;
    v50 = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  if (!v48)
    goto LABEL_118;
  v51 = 0;
  while (v50->__r_.__value_.__s.__data_[v51] == 32)
  {
    if (v48 == ++v51)
      goto LABEL_118;
  }
  if (v51 == -1)
  {
LABEL_118:
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      v79.__r_.__value_.__l.__size_ = 1;
    }
    else
    {
      *((_BYTE *)&v79.__r_.__value_.__s + 23) = 1;
      v49 = &v79;
    }
    LOWORD(v49->__r_.__value_.__l.__data_) = 48;
  }
  v52 = std::stod(&__stra, 0);
  v53 = std::stoi(&v79, 0, 10);
  *(double *)(a1 + 240) = v52 * 6.0 * __exp10((double)(v53 - 5));
  std::string::basic_string(&v78, __str, 0x35uLL, 6uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  v54 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  v55 = (std::string *)v78.__r_.__value_.__r.__words[0];
  v56 = &__stra;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v54 = v78.__r_.__value_.__l.__size_;
    v56 = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  if (!v54)
    goto LABEL_132;
  v57 = 0;
  while (v56->__r_.__value_.__s.__data_[v57] == 32)
  {
    if (v54 == ++v57)
      goto LABEL_132;
  }
  if (v57 == -1)
  {
LABEL_132:
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      __stra.__r_.__value_.__l.__size_ = 1;
    }
    else
    {
      *((_BYTE *)&__stra.__r_.__value_.__s + 23) = 1;
      v55 = &__stra;
    }
    LOWORD(v55->__r_.__value_.__l.__data_) = 48;
  }
  std::string::basic_string(&v78, __str, 0x3BuLL, 2uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v79 = v78;
  v58 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  v59 = (std::string *)v78.__r_.__value_.__r.__words[0];
  v60 = &v79;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v58 = v78.__r_.__value_.__l.__size_;
    v60 = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  if (!v58)
    goto LABEL_146;
  v61 = 0;
  while (v60->__r_.__value_.__s.__data_[v61] == 32)
  {
    if (v58 == ++v61)
      goto LABEL_146;
  }
  if (v61 == -1)
  {
LABEL_146:
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      v79.__r_.__value_.__l.__size_ = 1;
    }
    else
    {
      *((_BYTE *)&v79.__r_.__value_.__s + 23) = 1;
      v59 = &v79;
    }
    LOWORD(v59->__r_.__value_.__l.__data_) = 48;
  }
  v62 = std::stod(&__stra, 0);
  v63 = std::stoi(&v79, 0, 10);
  *(double *)(a1 + 192) = v62 * __exp10((double)(v63 - 5));
  v64 = *(char *)(__str->__r_.__value_.__r.__words[0] + 62);
  v65 = v64 - 49;
  v66 = v64 - 48;
  if (v65 >= 5)
    v66 = 0;
  *(_BYTE *)(a1 + 117) = v66;
  std::string::basic_string(&v78, __str, 0x40uLL, 4uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(_DWORD *)(a1 + 188) = std::stoul(&__stra, 0, 10);
  std::string::basic_string(&v78, a4, 8uLL, 8uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(double *)(a1 + 208) = std::stod(&__stra, 0);
  std::string::basic_string(&v78, a4, 0x11uLL, 8uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(double *)(a1 + 256) = std::stod(&__stra, 0);
  std::string::basic_string(&v78, a4, 0x1AuLL, 7uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(double *)(a1 + 200) = std::stod(&__stra, 0) * 0.0000001;
  std::string::basic_string(&v78, a4, 0x22uLL, 8uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(double *)(a1 + 248) = std::stod(&__stra, 0);
  std::string::basic_string(&v78, a4, 0x2BuLL, 8uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(double *)(a1 + 216) = std::stod(&__stra, 0);
  std::string::basic_string(&v78, a4, 0x34uLL, 0xBuLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(double *)(a1 + 224) = std::stod(&__stra, 0);
  std::string::basic_string(&v78, a4, 0x3FuLL, 5uLL, (std::allocator<char> *)&v81);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  __stra = v78;
  *(_DWORD *)(a1 + 184) = std::stoul(&__stra, 0, 10);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  v67 = *(_DWORD *)(a1 + 152);
  v68 = *(double *)(a1 + 160);
  __stra.__r_.__value_.__r.__words[0] = __PAIR64__(vcvtmd_s64_f64(v68), v67);
  *(double *)&__stra.__r_.__value_.__l.__size_ = v68 - floor(v68);
  cnnavigation::DayOfYearTimeToJulianTime((double *)&__stra, a1 + 168);
  v19 = v74 == 0;
  if (v74)
  {
    LOWORD(v79.__r_.__value_.__l.__data_) = 5;
    v78.__r_.__value_.__s.__data_[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v79, (unsigned __int8 *)&v78, "LoadNORADTLEFromStrings failed time conversion: doy,%d,%d,%.3lf", v69, v70, v71, v72, v73, v67);
  }
  else
  {
    v75 = *(float64x2_t *)(a1 + 224);
    v76 = vmulq_f64(*(float64x2_t *)(a1 + 208), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    *(double *)(a1 + 256) = *(double *)(a1 + 256) * 0.0174532925;
    *(float64x2_t *)(a1 + 208) = v76;
    *(float64x2_t *)(a1 + 224) = vmulq_f64(v75, (float64x2_t)xmmword_18D30C900);
    *(float64x2_t *)(a1 + 240) = vmulq_f64(*(float64x2_t *)(a1 + 240), (float64x2_t)xmmword_18D30C910);
    *(_BYTE *)(a1 + 8) = 1;
  }
  return v19;
}

#error "18D093D98: call analysis failed (funcsize=38)"

void sub_18D093DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t cnnavigation::NORADTLEEphemerides::IsValid(cnnavigation::NORADTLEEphemerides *this)
{
  return *((unsigned __int8 *)this + 8);
}

BOOL sub_18D093E10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t cnnavigation::NORADTLEEphemerides::TLECheckSum(std::string *__str)
{
  std::string::size_type size;
  std::string::size_type v2;
  std::string *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  std::string v9;
  char v10;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size != 69)
    return 0xFFFFFFFFLL;
  std::string::basic_string(&v9, __str, 0, 0x44uLL, (std::allocator<char> *)&v10);
  v2 = v9.__r_.__value_.__l.__size_;
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v9;
  else
    v3 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if (v2)
  {
    v4 = 0;
    do
    {
      v5 = v3->__r_.__value_.__s.__data_[0];
      v6 = v4 + v5 - 48;
      if (v5 == 45)
        ++v4;
      if ((v5 - 48) < 0xA)
        v4 = v6;
      v3 = (std::string *)((char *)v3 + 1);
      --v2;
    }
    while (v2);
  }
  else
  {
    v4 = 0;
  }
  v7 = (v4 % 10);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v7;
}

char *cnnavigation::NORADTLEEphemerides::SatelliteName@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[111] < 0)
    return (char *)sub_18D077798((_BYTE *)a2, *((void **)this + 11), *((_QWORD *)this + 12));
  *(_OWORD *)a2 = *(_OWORD *)(this + 88);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 13);
  return this;
}

uint64_t cnnavigation::NORADTLEEphemerides::SatelliteNumber(cnnavigation::NORADTLEEphemerides *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t cnnavigation::NORADTLEEphemerides::GNSSFindSat(cnnavigation::NORADTLEEphemerides *a1, double *a2, cnnavigation::GNSSUTCParameters *this, __int128 *a4, __int128 *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  cnprint::CNPrinter *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t i;
  uint64_t v58;
  _BOOL4 v59;
  char v60;
  double v61;
  __int128 v62;
  unsigned __int8 v63;
  __int16 v64;
  double v65[3];
  _BYTE v66[16];
  double v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;

  if (!*((_BYTE *)a1 + 8))
    return 0xFFFFFFFFLL;
  if (cnnavigation::GNSSUTCParameters::IsValid(this))
  {
    if (cnnavigation::TAITime::ToJulianTime((cnnavigation::TAITime *)a2, this, (uint64_t)v66))
    {
      LOWORD(v67) = 5;
      LOBYTE(v65[0]) = 3;
      v61 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)v65, "NORADTLEEphemerides::GNSSFindSat failed JulianTime (UTC) conversion tai,%.3lf,sv,%hhu,t_ls,%.3lf,curr_ls,%d,fut_ls,%d", v17, v18, v19, v20, v21, SLOBYTE(v61));
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    LOWORD(v67) = 5;
    LOBYTE(v65[0]) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)v65, "NORADTLEEphemerides::GNSSFindSat called with invalid UTC model", v12, v13, v14, v15, v16, v60);
    LOWORD(v67) = 0;
    v68 = 0u;
    v69 = 0u;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    *(_QWORD *)&v65[0] = cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)a2, (const cnnavigation::GNSSUTCParameters *)&v67);
    v65[1] = v22;
    if (cnnavigation::GPSTimeToJulianTime(v65, 0, (uint64_t)v66))
    {
      LOWORD(v67) = 5;
      LOBYTE(v64) = 3;
      *(double *)&v62 = a2[1] + (double)*(uint64_t *)a2;
      v28 = "NORADTLEEphemerides::GNSSFindSat failed JulianTime conversion tai,%.3lf";
      v29 = (cnprint::CNPrinter *)&v67;
      v30 = (unsigned __int8 *)&v64;
LABEL_7:
      cnprint::CNPrinter::Print(v29, v30, v28, v23, v24, v25, v26, v27, v62);
      return 0xFFFFFFFFLL;
    }
  }
  v33 = cnnavigation::NORADTLEEphemerides::InitializeSGP4(a1);
  if ((_DWORD)v33)
  {
    v31 = v33;
    LOWORD(v67) = 5;
    LOBYTE(v65[0]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)v65, "NORADTLEEphemerides::GNSSFindSat InitializeSGP4 failed,code,%d", v34, v35, v36, v37, v38, v33);
  }
  else
  {
    v39 = cnnavigation::NORADTLEEphemerides::SGP4((uint64_t)a1, (uint64_t)v66, (uint64_t)&v67, v65, v35, v36, v37, v38);
    if ((_DWORD)v39)
    {
      v31 = v39;
      v64 = 5;
      v63 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "NORADTLEEphemerides::GNSSFindSat SGP4 failed,code,%d", v40, v41, v42, v43, v44, v39);
    }
    else
    {
      v46 = cnnavigation::NORADTLEEphemerides::ECIToECEF(v39, (uint64_t)v66, &v67);
      v47 = 0;
      *(double *)a4 = v46;
      *((_QWORD *)a4 + 1) = v48;
      *((_QWORD *)a4 + 2) = v49;
      do
      {
        *(double *)((char *)a4 + v47) = *(double *)((char *)a4 + v47) * 1000.0;
        v47 += 8;
      }
      while (v47 != 24);
      v50 = cnnavigation::NORADTLEEphemerides::ECIToECEF(v45, (uint64_t)v66, v65);
      v51 = 0;
      *(double *)a5 = v50;
      *((_QWORD *)a5 + 1) = v52;
      *((_QWORD *)a5 + 2) = v53;
      do
      {
        *(double *)((char *)a5 + v51) = *(double *)((char *)a5 + v51) * 1000.0;
        v51 += 8;
      }
      while (v51 != 24);
      v54 = 0;
      v55 = *((double *)a5 + 1);
      *(double *)a5 = *(double *)a5 + *((double *)a4 + 1) * 0.0000729211515;
      *((double *)a5 + 1) = v55 + *(double *)a4 * -0.0000729211515;
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      v56 = 0.0;
      do
      {
        if ((*(_QWORD *)((_BYTE *)a4 + v54) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          v64 = 5;
          v63 = 3;
          v62 = *a4;
          v28 = "NORADTLEEphemerides::GNSSFindSat invalid SV position %.3lf,%.3lf,%.3lf";
          goto LABEL_24;
        }
        v56 = v56 + *(double *)((char *)a4 + v54) * *(double *)((char *)a4 + v54);
        v54 += 8;
      }
      while (v54 != 24);
      if (sqrt(v56) < 6341752.3)
      {
        v64 = 5;
        v63 = 3;
        v62 = *a4;
        v28 = "NORADTLEEphemerides::GNSSFindSat decayed SV position %.3lf,%.3lf,%.3lf";
LABEL_24:
        v29 = (cnprint::CNPrinter *)&v64;
        v30 = &v63;
        goto LABEL_7;
      }
      for (i = 0; i != 24; i += 8)
      {
        if ((*(_QWORD *)((_BYTE *)a5 + i) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || *(double *)((char *)a5 + i) > 299792458.0)
        {
          v64 = 5;
          v63 = 3;
          v62 = *a5;
          v28 = "NORADTLEEphemerides::GNSSFindSat invalid SV velocity %.3lf,%.3lf,%.3lf";
          goto LABEL_24;
        }
      }
      v58 = 0;
      while (1)
      {
        v59 = (a6[v58] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((a6[v58] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          break;
        if (++v58 == 3)
          return (v59 - 1);
      }
      v64 = 5;
      v63 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "NORADTLEEphemerides::GNSSFindSat invalid SV acceleration %.3lf,%.3lf,%.3lf", v23, v24, v25, v26, v27, 0);
      return (v59 - 1);
    }
  }
  return v31;
}

uint64_t cnnavigation::NORADTLEEphemerides::InitializeSGP4(cnnavigation::NORADTLEEphemerides *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __double2 v14;
  long double v15;
  double v16;
  long double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  __double2 v51;
  __double2 v52;
  double v53;
  double v54;
  double v55;
  __double2 v56;
  double v57;
  double v58;
  double v59;
  long double v60;
  __double2 v61;
  char v62;
  double sinval;
  char v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  char v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  long double v100;
  double v101;
  double v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  _BOOL4 v107;
  _BOOL4 v108;
  _BOOL4 v109;
  BOOL v110;
  int v111;
  double v112;
  _BOOL4 v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  double v123;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  float64x2_t v138;
  double v139;
  double v140;
  float64x2_t v146;
  float64x2_t v147;
  float64_t v148;
  float64x2_t v150;
  float64x2_t v152;
  float64_t v153;
  float64x2_t v155;
  float64x2_t v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  __double2 v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double cosval;
  double v220;
  double v221;
  __double2 v222;
  double v223;
  double v224;
  double v225;
  double __x;
  double __xa;
  double __xc;
  double __xb;
  double v230;
  double v231;
  double v232;
  _BYTE __src[455];
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  _OWORD v237[13];
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  memset(v237, 0, 207);
  memset(__src, 0, sizeof(__src));
  v236 = 0;
  v234 = 0u;
  v235 = 0u;
  *((_WORD *)this + 132) = 0;
  v2 = v237[11];
  *(_OWORD *)((char *)this + 426) = v237[10];
  *(_OWORD *)((char *)this + 442) = v2;
  *(_OWORD *)((char *)this + 457) = *(_OWORD *)((char *)&v237[11] + 15);
  v3 = v237[7];
  *(_OWORD *)((char *)this + 362) = v237[6];
  *(_OWORD *)((char *)this + 378) = v3;
  v4 = v237[9];
  *(_OWORD *)((char *)this + 394) = v237[8];
  *(_OWORD *)((char *)this + 410) = v4;
  v5 = v237[3];
  *(_OWORD *)((char *)this + 298) = v237[2];
  *(_OWORD *)((char *)this + 314) = v5;
  v6 = v237[5];
  *(_OWORD *)((char *)this + 330) = v237[4];
  *(_OWORD *)((char *)this + 346) = v6;
  v7 = v237[1];
  *(_OWORD *)((char *)this + 266) = v237[0];
  *(_OWORD *)((char *)this + 282) = v7;
  memcpy((char *)this + 473, __src, 0x1BFuLL);
  v8 = *((_DWORD *)this + 42);
  v9 = *((double *)this + 32);
  __x = *((double *)this + 31);
  *((double *)this + 115) = __x;
  v11 = *((double *)this + 25);
  v10 = *((double *)this + 26);
  *((double *)this + 116) = v11;
  *((double *)this + 117) = v10;
  v12 = *((double *)this + 28);
  v221 = v9;
  v224 = *((double *)this + 27);
  *((double *)this + 118) = v224;
  *((double *)this + 120) = v9;
  v174 = v11;
  v208 = v11 * v11;
  v13 = sqrt(1.0 - v11 * v11);
  v172 = v10;
  v14 = __sincos_stret(v10);
  v197 = v14.__cosval * v14.__cosval;
  v15 = pow(0.0743669161 / v12, 0.666666667);
  v209 = v13;
  v16 = (v14.__cosval * v14.__cosval * 3.0 + -1.0) * 0.000811962 / ((1.0 - v208) * v13);
  v17 = 1.0
      - v16 / (v15 * v15) * (v16 / (v15 * v15))
      - v16 / (v15 * v15) * (v16 / (v15 * v15) * (v16 / (v15 * v15) * 134.0) / 81.0 + 0.333333333);
  v18 = v12 / (v16 / (v15 * v17 * (v15 * v17)) + 1.0);
  *((double *)this + 119) = v18;
  v19 = pow(0.0743669161 / v18, 0.666666667);
  v230 = -(v197 * -5.0 + 1.0) - v197 - v197;
  *((double *)this + 35) = v230;
  v20 = (double)(v8 - 2451545) / 36525.0;
  v21 = *((double *)this + 22);
  v22 = fmod(v20 * v20 * 0.093104 + v20 * (v20 * v20) * -0.0000062 + v20 * 3164400180.0 + 67310.5484, 86400.0);
  v218 = v21;
  *((long double *)this + 97) = fmod(v22 * 0.0000727220522+ ((v21 / 36525.0 + v20) * 5.9006e-11+ 1.00273791+ (v21 / 36525.0 + v20) * (v21 / 36525.0 + v20) * -5.9e-15)* 6.28318531* v21, 6.28318531);
  v211 = 1.0 - v208;
  if (1.0 - v208 < 0.0 && v18 < 0.0)
    return cnnavigation::NORADTLEEphemerides::SGP4((uint64_t)this, (uint64_t)this + 168, (uint64_t)__src, (double *)v237, v23, v24, v25, v26);
  v27 = (1.0 - v174) * v19;
  *((_BYTE *)this + 265) = v27 < 1.03449284;
  v28 = (v27 + -1.0) * 6378.135;
  v173 = v18;
  if (v28 >= 156.0)
  {
    v32 = 1.01222928;
    v31 = 0.00000000188027916;
  }
  else
  {
    v29 = v28 + -78.0;
    if (v28 < 98.0)
      v29 = 20.0;
    v30 = (120.0 - v29) / 6378.135 * ((120.0 - v29) / 6378.135);
    v31 = v30 * v30;
    v32 = v29 / 6378.135 + 1.0;
  }
  v198 = 1.0 / ((1.0 - v208) * v19 * ((1.0 - v208) * v19));
  v170 = v32;
  v33 = 1.0 / (v19 - v32);
  v34 = v174 * v19 * v33;
  *((double *)this + 43) = v34;
  v35 = v34 * v34;
  v37 = vabdd_f64(1.0, v34 * v34);
  v38 = v31 * (v33 * v33 * (v33 * v33));
  v39 = v38 / pow(v37, 3.5);
  v203 = *((double *)this + 24);
  v36 = v174 * v34;
  v213 = v203
       * (v173
        * v39
        * ((v35 * 3.0 * (v35 + 8.0) + 8.0) * (v230 * (v33 * 0.000405981 / v37))
         + v19 * (v35 * 1.5 + 1.0 + v174 * v34 * (v35 + 4.0))));
  *((double *)this + 36) = v213;
  v40 = 0.0;
  if (v174 > 0.0001)
    v40 = v14.__sinval * (v173 * (v33 * (v38 * -2.0) * -0.00234506972)) / v174;
  v195 = v40;
  *((double *)this + 52) = 1.0 - v197;
  v215 = v174 * v19 * v33;
  v41 = v39;
  v169 = v33;
  v171 = v19;
  *((long double *)this + 37) = v211
                              * (v19
                               * ((v173 + v173)
                                * v39))
                              * (v174 * (v35 * 2.0 + 0.5)
                               + v34 * (v35 * 0.5 + 2.0)
                               + v33
                               * -0.001082616
                               / (v19
                                * v37)
                               * (cos(__x + __x) * ((1.0 - v197) * 0.75 * (v35 * 2.0 - v36 * (v35 + 1.0)))
                                + v230 * -3.0 * (v36 * -2.0 + 1.0 + v35 * (v36 * -0.5 + 1.5))));
  *((double *)this + 38) = ((v35 + v36) * 2.75 + 1.0 + v36 * v35) * (v211 * (v19 * (v41 + v41)));
  v42 = v14.__cosval * v14.__cosval;
  v43 = v173 * (v198 * 0.001623924);
  v44 = v198 * (v43 * 0.5 * 0.001082616);
  v45 = v173 * (v198 * (v198 * 0.000000776235937));
  v46 = (v197 * -114.0 + 7.0 + v42 * v42 * 395.0) * (v44 * 0.0625)
      + v43 * -0.5 * (v197 * -5.0 + 1.0)
      + v45 * (v197 * -36.0 + 3.0 + v42 * v42 * 49.0);
  *((double *)this + 44) = v46;
  v47 = -(v43 * v14.__cosval);
  v48 = ((v197 * -7.0 + 3.0) * (v45 + v45) + v44 * 0.5 * (v197 * -19.0 + 4.0)) * v14.__cosval - v43 * v14.__cosval;
  v168 = v173 + v209 * (v43 * 0.5) * v230 + v209 * (v44 * 0.0625) * (v197 * -78.0 + 13.0 + v42 * v42 * 137.0);
  *((double *)this + 54) = v168;
  *((double *)this + 55) = v48;
  v206 = cos(__x);
  *((double *)this + 45) = v206 * (v203 * v195);
  v49 = 0.0;
  if (v174 > 0.0001)
    v49 = v203 * (v38 * -0.666666667) / v36;
  *((double *)this + 58) = v211 * 3.5 * v47 * v213;
  *((double *)this + 48) = v213 * 1.5;
  v167 = v14.__cosval + 1.0;
  if (fabs(v14.__cosval + 1.0) <= 1.5e-12)
    v50 = 1.5e-12;
  else
    v50 = v14.__cosval + 1.0;
  *((double *)this + 56) = v14.__sinval * 0.00058626743 * (v14.__cosval * 5.0 + 3.0) / v50;
  *((double *)this + 57) = v49;
  *((double *)this + 34) = v14.__sinval * 0.00117253486;
  v51 = __sincos_stret(v224);
  *((double *)this + 42) = (v215 * v51.__cosval + 1.0) * ((v215 * v51.__cosval + 1.0) * (v215 * v51.__cosval + 1.0));
  *((_QWORD *)this + 46) = *(_QWORD *)&v51.__sinval;
  *((double *)this + 53) = v197 * 7.0 + -1.0;
  if (6.28318531 / v173 >= 225.0)
  {
    v164 = v48 + v46;
    *((_WORD *)this + 132) = 257;
    v52 = __sincos_stret(v221);
    v53 = sin(__x);
    v54 = v218 + (double)v8 + -2433281.5 + 18261.5;
    v55 = fmod(v54 * -0.00092422029 + 4.523602, 6.28318531);
    v56 = __sincos_stret(v55);
    v57 = sqrt(1.0 - (v56.__cosval * -0.03568096 + 0.91375164) * (v56.__cosval * -0.03568096 + 0.91375164));
    v58 = v56.__sinval * 0.089683511 / v57;
    v59 = sqrt(1.0 - v58 * v58);
    v166 = v54;
    v231 = 0.39785416;
    v176 = v57;
    __xa = 0.91744867;
    v60 = atan2(v56.__sinval * 0.39785416 / v57, v56.__sinval * (v58 * 0.91744867) + v59 * v56.__cosval);
    v165 = v54 * 0.001944368 + 5.8351514;
    v61 = __sincos_stret(v165 + v60 - v55);
    v62 = 0;
    sinval = v14.__sinval;
    v201 = v174 * -15.0;
    v204 = -v14.__sinval;
    v222 = v52;
    v175.__sinval = v52.__sinval * v59 - v52.__cosval * v58;
    v175.__cosval = v52.__sinval * v58 + v59 * v52.__cosval;
    *((_OWORD *)this + 40) = 0u;
    *((_OWORD *)this + 41) = 0u;
    *((_QWORD *)this + 84) = 0;
    v194 = 0.0;
    v64 = 1;
    cosval = 0.1945905;
    v65 = -0.98088458;
    v181 = 0.0;
    v182 = 0.0;
    v190 = 0.0;
    v192 = 0.0;
    v193 = 0.0;
    v185 = 0.0;
    v179 = 0.0;
    v199 = 1.0 / v173;
    v216 = 0.0000029864797;
    v183 = 0.0;
    v184 = 0.0;
    v187 = 0.0;
    v188 = 0.0;
    v180 = 0.0;
    v177 = 0.0;
    v178 = 0.0;
    v189 = 0.0;
    v186 = 0.0;
    v191 = 0.0;
    v196 = 0.0;
    do
    {
      v66 = v222.__sinval * (__xa * v65) + cosval * v222.__cosval;
      v67 = v222.__sinval * (__xa * cosval) - v65 * v222.__cosval;
      v68 = v222.__cosval * (__xa * v65) - cosval * v222.__sinval;
      v69 = v222.__cosval * (__xa * cosval) + v65 * v222.__sinval;
      v70 = sinval * (v231 * v65) + v14.__cosval * v68;
      v71 = sinval * (v231 * cosval) + v14.__cosval * v69;
      v72 = v14.__cosval * (v231 * v65) + v204 * v68;
      v73 = v14.__cosval * (v231 * cosval) + v204 * v69;
      v74 = v53 * v70 + v66 * v206;
      v75 = v53 * v71 + v67 * v206;
      v76 = v206 * v70 - v66 * v53;
      v77 = v206 * v71 - v67 * v53;
      v78 = v76 * (v76 * -3.0) + v74 * 12.0 * v74;
      v79 = v77 * (v76 * -6.0) + v74 * 24.0 * v75;
      v80 = v77 * (v77 * -3.0) + v75 * 12.0 * v75;
      v81 = v208 * v78 + (v70 * v70 + v66 * v66) * 3.0;
      v82 = v208 * v79 + (v70 * v71 + v66 * v67) * 6.0;
      v83 = v208 * v80 + (v71 * v71 + v67 * v67) * 3.0;
      v84 = v208 * (v53 * v72 * (v76 * -6.0) + v74 * -24.0 * (v206 * v72)) + v66 * -6.0 * v72;
      v214 = v208 * ((v53 * v72 * v77 + v76 * (v53 * v73)) * -6.0 + (v206 * v73 * v74 + v75 * (v206 * v72)) * -24.0)
           + (v67 * v72 + v66 * v73) * -6.0;
      v85 = v208 * (v206 * v72 * (v76 * -6.0) + v74 * 24.0 * (v53 * v72)) + v70 * 6.0 * v72;
      v86 = v62;
      v87 = v208 * ((v206 * v73 * v76 + v77 * (v206 * v72)) * -6.0 + (v53 * v73 * v74 + v75 * (v53 * v72)) * 24.0)
          + (v70 * v73 + v71 * v72) * 6.0;
      v88 = v78;
      v89 = v208 * (v206 * v73 * (v77 * -6.0) + v75 * 24.0 * (v53 * v73)) + v71 * 6.0 * v73;
      v90 = v81 + v81 + v211 * v78;
      v91 = v83 + v83 + v211 * v80;
      v92 = v199 * v216;
      v93 = v75 * v77 + v74 * v76;
      v94 = v74 * v77 + v75 * v76;
      v95 = v199 * v216 * -0.5 / v209;
      v96 = v75 * v77 - v74 * v76;
      v97 = v209 * (v199 * v216);
      if ((v64 & 1) != 0)
      {
        v65 = v61.__sinval;
        cosval = v61.__cosval;
        v216 = 0.00000047968065;
        __xa = v56.__cosval * -0.03568096 + 0.91375164;
        v231 = v176;
        v222 = v175;
        v194 = v77 * (v77 * -3.0) + v75 * 12.0 * v75;
        v196 = v201 * v97;
        v191 = v95;
        v192 = v208 * (v206 * v73 * (v77 * -6.0) + v75 * 24.0 * (v53 * v73)) + v71 * 6.0 * v73;
        v186 = v92;
        v187 = v91;
        v189 = v97;
        v183 = v93;
        v184 = v84;
        v177 = v94;
        v178 = v96;
        v188 = v90;
        v179 = v214;
        v180 = v82 + v82 + v211 * v79;
        v185 = v208 * (v53 * v73 * (v77 * -6.0) + v75 * -24.0 * (v206 * v73)) + v67 * -6.0 * v73;
        v193 = v85;
        v181 = v79;
        v182 = v87;
        v190 = v88;
      }
      v64 = 0;
      v62 = 1;
      sinval = v14.__sinval;
    }
    while ((v86 & 1) == 0);
    v225 = v97;
    v220 = v90;
    v223 = v88;
    v98 = v85;
    v210 = v84;
    v205 = v96;
    v207 = v208 * (v53 * v73 * (v77 * -6.0) + v75 * -24.0 * (v206 * v73)) + v67 * -6.0 * v73;
    v99 = v89;
    v217 = v91;
    __xc = v87;
    v232 = v93;
    v200 = v201 * v97;
    v202 = v94;
    v212 = v82 + v82 + v211 * v79;
    *((long double *)this + 110) = fmod(v166 * 0.2299715 + 4.7199672 - v165, 6.28318531);
    v100 = fmod(v166 * 0.017201977 + 6.2565837, 6.28318531);
    v101 = v95;
    *((long double *)this + 111) = v100;
    *((double *)this + 85) = (v196 + v196) * v177;
    *((double *)this + 86) = (v196 + v196) * v178;
    *((double *)this + 92) = (v191 + v191) * v179;
    *((double *)this + 93) = (v191 + v191) * (v185 - v184);
    *((double *)this + 94) = v186 * -2.0 * v180;
    *((double *)this + 95) = v186 * -2.0 * (v187 - v188);
    v102 = v208 * -9.0 + -21.0;
    *((double *)this + 96) = v102 * (v186 * -2.0) * 0.01675;
    v103 = vmulq_n_f64((float64x2_t)xmmword_18D30C920, v189);
    *((double *)this + 87) = v181 * v103.f64[0];
    v104 = (float64x2_t)vdupq_lane_s64(0x3F9126E978D4FDF4, 0);
    v104.f64[0] = v194 - v190;
    *((float64x2_t *)this + 44) = vmulq_f64(v103, v104);
    *((double *)this + 90) = v191 * -2.0 * v182;
    *((double *)this + 91) = v191 * -2.0 * (v192 - v193);
    *((double *)this + 79) = (v200 + v200) * v202;
    *((double *)this + 78) = (v200 + v200) * v205;
    *((double *)this + 104) = (v95 + v95) * v214;
    *((double *)this + 105) = (v95 + v95) * (v207 - v210);
    *((double *)this + 106) = v92 * -2.0 * v212;
    *((double *)this + 107) = v92 * -2.0 * (v217 - v220);
    *((double *)this + 108) = v102 * (v92 * -2.0) * 0.0549;
    v105 = vmulq_n_f64((float64x2_t)xmmword_18D30C920, v225);
    *((double *)this + 99) = v79 * v105.f64[0];
    v106 = (float64x2_t)vdupq_lane_s64(0x3FAC1BDA5119CE07, 0);
    v106.f64[0] = v80 - v223;
    *((float64x2_t *)this + 50) = vmulq_f64(v105, v106);
    *((double *)this + 102) = v95 * -2.0 * __xc;
    __xb = v98;
    *((double *)this + 103) = v95 * -2.0 * (v99 - v98);
    v107 = v173 > 0.0034906585 && v173 < 0.0052359877;
    v108 = v173 >= 0.00826;
    if (v173 > 0.00924)
      v108 = 0;
    v109 = v174 >= 0.5;
    v110 = v108 && v109;
    if (v108 && v109)
      v111 = 2;
    else
      v111 = v107;
    *((_BYTE *)this + 472) = v111;
    v112 = v191 * -0.0000119459 * (v193 + v192);
    v113 = v172 < 0.052359877;
    if (v172 > 3.08923278)
      v113 = 1;
    if (v113)
      v112 = 0.0;
    v114 = 1.0;
    if (fabs(v14.__sinval) >= 2.22044605e-16)
      v114 = v14.__sinval;
    v115 = v112 / v114;
    *((double *)this + 70) = v196 * 0.0000119459 * v183 + v200 * 0.00015835218 * v232;
    *((double *)this + 74) = v191 * 0.0000119459 * (v184 + v185) + v95 * 0.00015835218 * (v210 + v207);
    v116 = v186 * -0.0000119459 * (v188 + v187 + -14.0 + v208 * -6.0)
         + v92 * -0.00015835218 * (v220 + v217 + -14.0 + v208 * -6.0);
    *((double *)this + 75) = v116;
    v117 = v225 * 0.00015835218 * (v223 + v80 + -6.0)
         + v189 * 0.0000119459 * (v190 + v194 + -6.0)
         - v14.__cosval * (v112 / v114);
    *((double *)this + 77) = v117;
    *((double *)this + 76) = v112 / v114;
    if (v14.__sinval != 0.0)
    {
      v118 = v101 * -0.00015835218 * (__xb + v99);
      if (v113)
        v118 = 0.0;
      v117 = v117 + -v14.__cosval / v14.__sinval * v118;
      *((double *)this + 77) = v117;
      v115 = v118 / v14.__sinval + v115;
      *((double *)this + 76) = v115;
    }
    v119 = fmod(*((double *)this + 97) + 0.0, 6.28318531);
    if (v111)
    {
      v120 = v119;
      v121 = pow(v173 / 0.0743669161, 0.666666667);
      if (!v110)
      {
        if (!v107)
        {
          v130 = *((double *)this + 109);
          v133 = *((double *)this + 119);
LABEL_54:
          *((double *)this + 113) = v130;
          *((double *)this + 114) = v133;
          *((_QWORD *)this + 112) = 0;
          goto LABEL_55;
        }
        v129 = v121 * (v173 * (v173 * 3.0) * v121);
        *((double *)this + 72) = (v208 * (v208 * 0.8125 + -2.5) + 1.0)
                               * (v167
                                * v167
                                * 0.75
                                * (v129 + v129))
                               * 0.0000017891679;
        *((double *)this + 73) = v121
                               * ((v208 * (v208 * 6.60937 + -6.0) + 1.0)
                                * (v167
                                 * (v167
                                  * (v167
                                   * 1.875))
                                 * (v129
                                  * 3.0))
                                * 0.00000022123015);
        *((double *)this + 71) = v121
                               * ((v208 * 2.0 + 1.0)
                                * ((v167 * -0.75 + v14.__sinval * (v14.__sinval * 0.9375) * (v14.__cosval * 3.0 + 1.0))
                                 * v129)
                                * 0.0000021460748);
        v130 = fmod(*((double *)this + 118) + *((double *)this + 120) + *((double *)this + 115) - v120, 6.28318531);
        *((double *)this + 109) = v130;
        v131 = v115 + v168 + v164 + -0.00437526909 + v116 + v117;
LABEL_53:
        v133 = *((double *)this + 119);
        *((double *)this + 98) = v131 - v133;
        goto LABEL_54;
      }
      v122 = *((uint64_t *)this + 116);
      v123 = v208 * *(double *)&v122;
      if (*(double *)&v122 <= 0.65)
      {
        v124 = *(double *)&v122 * -13.247 + 3.616 + v208 * 16.29;
        v125 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D30C940, (float64x2_t)xmmword_18D30C930, *(double *)&v122), (float64x2_t)xmmword_18D30C950, v208), (float64x2_t)xmmword_18D30C960, v123);
        v126 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D30C980, (float64x2_t)xmmword_18D30C970, *(double *)&v122), (float64x2_t)xmmword_18D30C990, v208), (float64x2_t)xmmword_18D30C9A0, v123);
        v127 = *(double *)&v122 * 3017.977 + -532.114 + v208 * -5740.032;
        v128 = 3708.276;
      }
      else
      {
        v124 = *(double *)&v122 * 331.819 + -72.099 + v208 * -508.738 + v123 * 266.724;
        v125 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D30C9C0, (float64x2_t)xmmword_18D30C9B0, *(double *)&v122), (float64x2_t)xmmword_18D30C9D0, v208), (float64x2_t)xmmword_18D30C9E0, v123);
        v126 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18D30CA00, (float64x2_t)xmmword_18D30C9F0, *(double *)&v122), (float64x2_t)xmmword_18D30CA10, v208), (float64x2_t)xmmword_18D30CA20, v123);
        if (*(double *)&v122 <= 0.715)
        {
          v132 = *(double *)&v122 * -4664.75 + 1464.74 + v208 * 3763.64;
          goto LABEL_49;
        }
        v127 = *(double *)&v122 * 29936.92 + -5149.66 + v208 * -54087.36;
        v128 = 31324.56;
      }
      v132 = v127 + v123 * v128;
LABEL_49:
      v134 = (float64x2_t)vdupq_lane_s64(v122, 0);
      v135 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v208, 0);
      v136 = (*(double *)&v122 + -0.64) * -0.44 + -0.306;
      v137 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v123, 0);
      if (*(double *)&v122 >= 0.7)
      {
        v138 = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)xmmword_18D30CA40, (float64x2_t)xmmword_18D30CA30, v134), (float64x2_t)xmmword_18D30CA50, v135), (float64x2_t)xmmword_18D30CA60, v137);
        v139 = *(double *)&v122 * 170470.89 + -40023.88 + v208 * -242699.48;
        v140 = 115605.82;
      }
      else
      {
        v138 = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)xmmword_18D30CA80, (float64x2_t)xmmword_18D30CA70, v134), (float64x2_t)xmmword_18D30CA90, v135), (float64x2_t)xmmword_18D30CAA0, v137);
        v139 = *(double *)&v122 * 4690.25 + -853.666 + v208 * -8624.77;
        v140 = 5341.4;
      }
      __asm { FMOV            V24.2D, #1.0 }
      v146 = vmlaq_n_f64(_Q24, (float64x2_t)xmmword_18D30CAB0, v14.__cosval);
      v147.f64[0] = v146.f64[1] + v197;
      v148 = v146.f64[0] + v197 * -5.0;
      __asm { FMOV            V19.2D, #-8.0 }
      v150 = vmlaq_n_f64((float64x2_t)xmmword_18D30CAD0, _Q19, v14.__cosval);
      __asm { FMOV            V27.2D, #8.0 }
      v152 = vmlaq_n_f64((float64x2_t)xmmword_18D30CAE0, _Q27, v14.__cosval);
      _Q27.f64[0] = v173 * v173 * 3.0 * (v121 * v121);
      v153 = _Q27.f64[0] * 0.0000017891679;
      _Q27.f64[0] = v121 * _Q27.f64[0];
      __asm { FMOV            V30.2D, #-3.0 }
      v155 = vmlaq_n_f64(v146, _Q30, v197);
      v147.f64[1] = v14.__sinval * v14.__sinval;
      v156 = vmulq_f64(v147, (float64x2_t)xmmword_18D30CAF0);
      v147.f64[0] = v14.__sinval * v14.__sinval * 35.0;
      *((float64_t *)this + 60) = v153 * v156.f64[0] * v136;
      *((double *)this + 61) = v14.__sinval * v14.__sinval * 1.5 * v153 * v124;
      *((float64x2_t *)this + 31) = vmulq_f64(vmulq_n_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_18D30CAC0, v14.__sinval), v155), _Q27.f64[0] * 0.00000037393792), v125);
      *((float64x2_t *)this + 32) = vmulq_f64(vmulq_n_f64(vmulq_f64(v147, v156), (v121 * _Q27.f64[0] + v121 * _Q27.f64[0]) * 0.0000000073636953), v126);
      v157 = v121 * (v121 * _Q27.f64[0]);
      *((double *)this + 66) = v14.__sinval
                             * 9.84375
                             * ((v14.__cosval * 4.0 + -2.0 + v197 * 6.0) * 0.33333333
                              + v14.__sinval * v14.__sinval * v148)
                             * (v157
                              * 0.00000011428639)
                             * v132;
      *((double *)this + 67) = v14.__sinval
                             * (vmuld_lane_f64(6.56250012, v155, 1)
                              + v14.__sinval * v14.__sinval * 4.92187512 * (v14.__cosval * -4.0 + -2.0 + v197 * 10.0))
                             * (v157
                              * 0.00000011428639)
                             * (v139 + v123 * v140);
      *((float64x2_t *)this + 34) = vmulq_f64(vmulq_n_f64(vmulq_n_f64(vmlaq_n_f64(v150, vmlaq_n_f64(v152, (float64x2_t)xmmword_18D30CB00, v197), v197), v14.__sinval * 29.53125), (v157 + v157) * 0.0000000021765803), v138);
      v130 = fmod(*((double *)this + 118) + *((double *)this + 120) * 2.0 + v120 * -2.0, 6.28318531);
      *((double *)this + 109) = v130;
      v131 = v116 + *((double *)this + 54) + (*((double *)this + 55) + *((double *)this + 76) + -0.00437526909) * 2.0;
      goto LABEL_53;
    }
  }
LABEL_55:
  if (!*((_BYTE *)this + 265))
  {
    v158 = *((double *)this + 36);
    v159 = v171 * 4.0 * v169 * (v158 * v158);
    v160 = v158 * (v169 * v159) / 3.0;
    v161 = (v170 + v171 * 17.0) * v160;
    *((double *)this + 39) = v159;
    *((double *)this + 40) = v161;
    v162 = v158 * ((v170 * 31.0 + v171 * 221.0) * (v169 * (v171 * (v160 * 0.5))));
    *((double *)this + 41) = v162;
    *((double *)this + 49) = v159 + v158 * v158 * 2.0;
    *((double *)this + 50) = (v158 * (v158 * v158 * 10.0 + v159 * 12.0) + v161 * 3.0) * 0.25;
    *((double *)this + 51) = (v158 * 12.0 * v161
                            + v162 * 3.0
                            + v159 * v159 * 6.0
                            + v158 * v158 * 15.0 * (v158 * v158 + v159 * 2.0))
                           * 0.2;
  }
  return cnnavigation::NORADTLEEphemerides::SGP4((uint64_t)this, (uint64_t)this + 168, (uint64_t)__src, (double *)v237, v23, v24, v25, v26);
}

uint64_t cnnavigation::NORADTLEEphemerides::SGP4(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  long double v25;
  long double v26;
  long double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v36;
  int v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  __double2 v47;
  double v48;
  __double2 v49;
  double v50;
  __double2 v51;
  double v52;
  double v53;
  double v54;
  __double2 v55;
  double v56;
  __double2 v57;
  double v58;
  double v59;
  __double2 v60;
  double v61;
  double v62;
  __double2 v63;
  double v64;
  double v65;
  __double2 v66;
  double v67;
  double v68;
  __double2 v69;
  double v70;
  __double2 v71;
  double v72;
  double v73;
  __double2 v74;
  double v75;
  __double2 v76;
  double v77;
  double v78;
  __double2 v79;
  double v80;
  double v81;
  double v82;
  double v83;
  long double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  long double v91;
  double v92;
  double v93;
  long double v94;
  long double v95;
  long double v96;
  __double2 v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  long double v106;
  long double v107;
  __double2 v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __double2 v128;
  __double2 v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  uint64_t result;
  __double2 v141;
  double v142;
  double v143;
  BOOL v145;
  __double2 v146;
  double v147;
  __double2 v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  unsigned int v156;
  double v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __double2 v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  long double v174;
  long double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  __double2 v196;
  __double2 v197;
  __double2 v198;
  double v199;
  double v200;
  float64x2_t v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double __x;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double cosval;
  double v228;
  double sinval;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  long double v242;
  unsigned __int8 v243;
  __int16 v244;
  unsigned __int8 v245;
  __int16 v246;
  unsigned __int8 v247;
  __int16 v248;
  unsigned __int8 v249;
  __int16 v250;
  unsigned __int8 v251;
  __int16 v252;

  v11 = (*(double *)(a2 + 8) - *(double *)(a1 + 176) + (double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 168))) * 1440.0;
  *(double *)(a1 + 376) = v11;
  v12 = *(double *)(a1 + 944) + *(double *)(a1 + 432) * v11;
  v217 = *(double *)(a1 + 352);
  v218 = *(double *)(a1 + 920);
  v13 = v218 + v217 * v11;
  v14 = *(double *)(a1 + 960) + *(double *)(a1 + 440) * v11;
  v15 = v11 * v11;
  v16 = *(double *)(a1 + 464);
  v17 = 1.0 - *(double *)(a1 + 288) * v11;
  v18 = *(double *)(a1 + 192);
  v19 = v11 * (v18 * *(double *)(a1 + 296));
  v20 = v11 * v11 * *(double *)(a1 + 384);
  v234 = v11;
  if (!*(_BYTE *)(a1 + 265))
  {
    v215 = v11 * v11 * *(double *)(a1 + 384);
    v21 = v11 * *(double *)(a1 + 360);
    v22 = v12;
    v23 = v13;
    v24 = *(double *)(a1 + 344);
    v211 = v17;
    v213 = v19;
    v241 = v14;
    v25 = cos(v22);
    v26 = v21
        + *(double *)(a1 + 456) * -(*(double *)(a1 + 336) - (v24 * v25 + 1.0) * (v24 * v25 + 1.0) * (v24 * v25 + 1.0));
    v27 = v22 + v26;
    v13 = v23 - v26;
    v28 = v234 * (v234 * v15);
    v29 = v211 - *(double *)(a1 + 312) * v15 - *(double *)(a1 + 320) * (v234 * v15) - *(double *)(a1 + 328) * v28;
    v30 = v18 * *(double *)(a1 + 304);
    v19 = v213 + v30 * (sin(v27) - *(double *)(a1 + 368));
    v14 = v241;
    v17 = v29;
    v12 = v27;
    v20 = v215 + *(double *)(a1 + 392) * (v234 * v15) + v28 * (*(double *)(a1 + 400) + v234 * *(double *)(a1 + 408));
    v11 = v234;
  }
  v216 = v20;
  v31 = v14 + v16 * v15;
  v32 = *(double *)(a1 + 952);
  v33 = *(double *)(a1 + 928);
  v34 = *(double *)(a1 + 936);
  v35 = *(unsigned __int8 *)(a1 + 264);
  if (*(_BYTE *)(a1 + 264))
  {
    v208 = *(double *)(a1 + 952);
    v212 = v17;
    v214 = v19;
    v36 = fmod(*(double *)(a1 + 776) + v11 * 0.00437526909, 6.28318531);
    v34 = v34 + *(double *)(a1 + 592) * v11;
    v13 = v13 + *(double *)(a1 + 616) * v11;
    v37 = *(unsigned __int8 *)(a1 + 472);
    v209 = v33 + *(double *)(a1 + 560) * v11;
    __x = v31 + *(double *)(a1 + 608) * v11;
    if (*(_BYTE *)(a1 + 472))
    {
      v204 = v36;
      v205 = v13;
      v206 = v34;
      v38 = *(double *)(a1 + 896);
      v39 = fabs(v38);
      if (v39 < 2.22044605e-16 || ((v40 = fabs(v11), v11 * v38 > 0.0) ? (v41 = v40 < v39) : (v41 = 1), v41))
      {
        *(_QWORD *)(a1 + 896) = 0;
        *(double *)(a1 + 912) = v208;
        *(_QWORD *)(a1 + 904) = *(_QWORD *)(a1 + 872);
        v38 = 0.0;
      }
      v238 = dbl_18D30CB10[v11 > 0.0];
      v42 = 0.0;
      v43 = 0.0;
      v44 = 0.0;
      while (1)
      {
        if (v37 == 2)
        {
          v52 = v218 + v217 * v38;
          v53 = *(double *)(a1 + 904);
          v220 = v53 + v53;
          v54 = *(double *)(a1 + 480);
          v231 = v54;
          v55 = __sincos_stret(v52 + v52 + v53 + -5.7686396);
          v56 = *(double *)(a1 + 488);
          v230 = v56;
          v57 = __sincos_stret(v53 + -5.7686396);
          v58 = v56 * v57.__sinval + v54 * v55.__sinval;
          v59 = *(double *)(a1 + 496);
          v225 = v59;
          v219 = v52 + v53;
          v60 = __sincos_stret(v52 + v53 + -0.95240898);
          v61 = *(double *)(a1 + 504);
          v223 = v61;
          v62 = v53 - v52;
          v63 = __sincos_stret(v62 + -0.95240898);
          v64 = v58 + v59 * v60.__sinval + v61 * v63.__sinval;
          v65 = *(double *)(a1 + 512);
          v222 = v65;
          v66 = __sincos_stret(v52 + v52 + v220 + -1.8014998);
          v67 = v64 + v65 * v66.__sinval;
          v68 = *(double *)(a1 + 520);
          v221 = v68;
          v69 = __sincos_stret(v220 + -1.8014998);
          v70 = *(double *)(a1 + 528);
          v71 = __sincos_stret(v219 + -1.050833);
          v72 = v67 + v68 * v69.__sinval + v70 * v71.__sinval;
          v73 = *(double *)(a1 + 536);
          v74 = __sincos_stret(v62 + -1.050833);
          v75 = *(double *)(a1 + 544);
          v76 = __sincos_stret(v52 + v220 + -4.4108898);
          v77 = v72 + v73 * v74.__sinval + v75 * v76.__sinval;
          v78 = *(double *)(a1 + 552);
          v79 = __sincos_stret(v220 - v52 + -4.4108898);
          v43 = v77 + v78 * v79.__sinval;
          v42 = *(double *)(a1 + 912) + *(double *)(a1 + 784);
          v11 = v234;
          v44 = (v230 * v57.__cosval
               + v231 * v55.__cosval
               + v225 * v60.__cosval
               + v223 * v63.__cosval
               + v70 * v71.__cosval
               + v73 * v74.__cosval
               + (v69.__cosval * v221 + v222 * v66.__cosval + v75 * v76.__cosval + v78 * v79.__cosval) * 2.0)
              * v42;
        }
        else if (v37 == 1)
        {
          v45 = *(double *)(a1 + 568);
          v46 = *(double *)(a1 + 904);
          v47 = __sincos_stret(v46 + -0.13130908);
          v48 = *(double *)(a1 + 576);
          v49 = __sincos_stret(v46 + -2.8843198 + v46 + -2.8843198);
          v50 = *(double *)(a1 + 584);
          v51 = __sincos_stret((v46 + -0.37448087) * 3.0);
          v43 = v48 * v49.__sinval + v45 * v47.__sinval + v50 * v51.__sinval;
          v42 = *(double *)(a1 + 912) + *(double *)(a1 + 784);
          v11 = v234;
          v44 = v42 * ((v48 + v48) * v49.__cosval + v45 * v47.__cosval + v50 * 3.0 * v51.__cosval);
        }
        if (vabdd_f64(v11, v38) < 720.0)
          break;
        *(double *)(a1 + 904) = *(double *)(a1 + 904) + v42 * v238 + v43 * 259200.0;
        *(double *)(a1 + 912) = *(double *)(a1 + 912) + v43 * v238 + v44 * 259200.0;
        v38 = v238 + v38;
        *(double *)(a1 + 896) = v38;
      }
      v80 = v11 - v38;
      v81 = *(double *)(a1 + 904) + v42 * (v11 - v38) + (v11 - v38) * (v43 * 0.5) * (v11 - v38);
      if (v37 == 2)
      {
        v13 = v205;
        v12 = v81 + __x * -2.0 + v204 * 2.0;
        v34 = v206;
      }
      else
      {
        v13 = v205;
        v34 = v206;
        if (v37 != 1)
        {
          v252 = 5;
          v251 = 3;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v252, &v251, "SGP4 encountered unexpected resonance type %hhu", (uint64_t)a4, a5, a6, a7, a8, v37);
          return 4294967291;
        }
        v12 = v204 + v81 - __x - v205;
      }
      v32 = v208;
      v82 = v208 + *(double *)(a1 + 912) + v43 * v80 + v80 * (v44 * 0.5) * v80 - v208;
    }
    else
    {
      v12 = v12 + *(double *)(a1 + 600) * v11;
      v32 = v208;
      v82 = v208;
    }
    v17 = v212;
    v19 = v214;
  }
  else
  {
    v209 = *(double *)(a1 + 928);
    __x = v31;
    v82 = *(double *)(a1 + 952);
  }
  if (v82 <= 0.0)
  {
    v250 = 5;
    v249 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v250, &v249, "SGP4 encountered invalid mean motion %lg", (uint64_t)a4, a5, a6, a7, a8, SLOBYTE(v82));
    return 4294967294;
  }
  v83 = v19;
  v84 = v17 * (v17 * pow(0.0743669161 / v82, 0.666666667));
  v235 = pow(v84, 1.5);
  v90 = v209 - v83;
  if (v209 - v83 >= 1.0 || v90 < -0.001)
  {
    v248 = 5;
    v247 = 3;
    v202 = v209 - v83;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v248, &v247, "SGP4 encountered invalid eccentricity %lg", v85, v86, v87, v88, v89, SLOBYTE(v202));
    return 0xFFFFFFFFLL;
  }
  v232 = v84;
  v233 = fmax(v90, 0.000001);
  v91 = __x + v13 + v12 + v32 * v216;
  v92 = fmod(__x, 6.28318531);
  v93 = fmod(v13, 6.28318531);
  v94 = fmod(v91, 6.28318531);
  v242 = v92;
  v239 = fmod(v94 - v93 - v92, 6.28318531);
  if (v35)
  {
    v228 = v93;
    v95 = *(double *)(a1 + 888) + v11 * 0.0000119459;
    v96 = sin(v95);
    v97 = __sincos_stret(v95 + v96 * 0.0335);
    v98 = v97.__sinval * 0.5 * v97.__sinval + -0.25;
    v99 = v97.__cosval * (v97.__sinval * -0.5);
    v100 = *(double *)(a1 + 688) * v99 + *(double *)(a1 + 680) * v98;
    v101 = *(double *)(a1 + 744) * v99 + *(double *)(a1 + 736) * v98;
    v102 = *(double *)(a1 + 760) * v99 + *(double *)(a1 + 752) * v98 + *(double *)(a1 + 768) * v97.__sinval;
    v103 = v99 * *(double *)(a1 + 704) + *(double *)(a1 + 696) * v98 + *(double *)(a1 + 712) * v97.__sinval;
    v104 = v11;
    v105 = v99 * *(double *)(a1 + 728) + *(double *)(a1 + 720) * v98;
    v106 = *(double *)(a1 + 880) + v104 * 0.00015835218;
    v107 = sin(v106);
    v108 = __sincos_stret(v106 + v107 * 0.1098);
    v109 = v108.__sinval * 0.5 * v108.__sinval + -0.25;
    v110 = v108.__cosval * (v108.__sinval * -0.5);
    v111 = *(double *)(a1 + 624) * v110 + *(double *)(a1 + 632) * v109;
    v112 = *(double *)(a1 + 840) * v110 + *(double *)(a1 + 832) * v109;
    v113 = *(double *)(a1 + 856) * v110 + *(double *)(a1 + 848) * v109 + *(double *)(a1 + 864) * v108.__sinval;
    v114 = v110 * *(double *)(a1 + 800) + *(double *)(a1 + 792) * v109 + *(double *)(a1 + 808) * v108.__sinval;
    v115 = v110 * *(double *)(a1 + 824) + *(double *)(a1 + 816) * v109;
    v116 = v100 + v111;
    v117 = v101 + v112 - *(double *)(a1 + 664);
    v118 = v102 + v113 - *(double *)(a1 + 672);
    v119 = v103 + v114 - *(double *)(a1 + 648);
    v120 = v105 + v115 - *(double *)(a1 + 656);
    v121 = v34 + v117;
    v122 = v233 + v116 - *(double *)(a1 + 640);
    v128 = __sincos_stret(v121);
    if (v121 >= 0.2)
    {
      v139 = v228 + v119 - v128.__cosval * (v120 / v128.__sinval);
      v138 = v242 + v120 / v128.__sinval;
      v239 = v239 + v118;
    }
    else
    {
      v129 = __sincos_stret(v242);
      v224 = v129.__cosval * v128.__sinval + v129.__cosval * (v117 * v128.__cosval) - v120 * v129.__sinval;
      v226 = v129.__sinval * v128.__sinval + v129.__sinval * (v117 * v128.__cosval) + v120 * v129.__cosval;
      v130 = fmod(v242, 6.28318531);
      if (v130 >= 0.0)
        v131 = v130;
      else
        v131 = v130 + 6.28318531;
      v132 = v119;
      v133 = v118;
      v134 = v239;
      v135 = v228 + v239 + v128.__cosval * v131 + v133 + v132 + -(v117 * v131) * v128.__sinval;
      v136 = atan2(v226, v224);
      v137 = -0.0;
      if (vabdd_f64(v131, v136) > 3.14159265)
        v137 = dbl_18D30CB20[v136 < v131];
      v138 = v136 + v137;
      v239 = v239 + v133;
      v139 = v135 - (v134 + v133) - v128.__cosval * v138;
    }
    if (v122 < 0.0 || v122 > 1.0)
    {
      v246 = 5;
      v245 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v246, &v245, "SGP4 encountered invalid eccentricity %lg", v123, v124, v125, v126, v127, SLOBYTE(v122));
      return 4294967293;
    }
    v145 = v121 < 0.0;
    if (v121 >= 0.0)
    {
      v93 = v139;
    }
    else
    {
      v121 = -v121;
      v93 = v139 + -3.14159265;
    }
    if (v145)
      v138 = v138 + 3.14159265;
    v242 = v138;
    v146 = __sincos_stret(v121);
    v142 = v146.__sinval * 0.00117253486;
    *(double *)(a1 + 272) = v146.__sinval * 0.00117253486;
    v147 = v146.__sinval * 0.00058626743 * (v146.__cosval * 5.0 + 3.0);
    v207 = v121;
    cosval = v146.__cosval;
    sinval = v146.__sinval;
    if (fabs(v146.__cosval + 1.0) <= 1.5e-12)
      v143 = v147 / 1.5e-12;
    else
      v143 = v147 / (v146.__cosval + 1.0);
    *(double *)(a1 + 448) = v143;
  }
  else
  {
    v207 = v34;
    v141 = __sincos_stret(v34);
    cosval = v141.__cosval;
    sinval = v141.__sinval;
    v142 = *(double *)(a1 + 272);
    v143 = *(double *)(a1 + 448);
    v122 = v233;
  }
  v236 = 0.0743669161 / v235;
  v148 = __sincos_stret(v93);
  v149 = v122 * v148.__cosval;
  v150 = 1.0 / (v232 * (1.0 - v122 * v122));
  v151 = v122;
  v152 = v150 * v142;
  v153 = v93;
  v154 = v150 * v142 + v151 * v148.__sinval;
  v155 = fmod(v242 + v153 + v239 + v150 * v143 * v149 - v242, 6.28318531);
  v156 = 0;
  v157 = -(v152 + v151 * v148.__sinval);
  v158 = v155;
  do
  {
    v164 = __sincos_stret(v158);
    v165 = (v155 + v157 * v164.__cosval + v149 * v164.__sinval - v158)
         / (1.0 - v164.__cosval * v149 - v164.__sinval * v154);
    v166 = fabs(v165);
    if (v166 >= 0.95)
    {
      v167 = 1.0;
      if (v165 <= 0.0)
      {
        v167 = -1.0;
        if (v165 >= 0.0)
          v167 = 0.0;
      }
      v165 = v167 * 0.95;
      v166 = fabs(v167 * 0.95);
    }
    if (v156 > 8)
      break;
    v158 = v158 + v165;
    ++v156;
  }
  while (v166 >= 1.0e-12);
  v168 = 1.0 - (v154 * v154 + v149 * v149);
  v169 = v232 * v168;
  if (v232 * v168 >= 0.0)
  {
    v170 = v164.__cosval * v157 + v149 * v164.__sinval;
    v171 = v232 * (1.0 - (v154 * v164.__sinval + v149 * v164.__cosval));
    v240 = sqrt(v232) * v170 / v171;
    v172 = sqrt(v168);
    v173 = v170 / (v172 + 1.0);
    v174 = (v164.__sinval - v154 - v149 * v173) * (v232 / v171);
    v175 = (v164.__cosval - v149 + v154 * v173) * (v232 / v171);
    v176 = sqrt(v169) / v171;
    v177 = atan2(v174, v175);
    v178 = v174 * (v175 + v175);
    v179 = v174 * -2.0 * v174 + 1.0;
    v180 = 1.0 / v169 * 0.000541308;
    v181 = 1.0 / v169 * v180;
    if (v35)
    {
      v183 = cosval;
      v182 = sinval;
      v184 = v183 * v183 * 3.0 + -1.0;
      *(double *)(a1 + 280) = v184;
      v185 = 1.0 - v183 * v183;
      v186 = v183 * v183 * 7.0 + -1.0;
      *(double *)(a1 + 416) = v185;
      *(double *)(a1 + 424) = v186;
      v187 = v207;
    }
    else
    {
      v184 = *(double *)(a1 + 280);
      v185 = *(double *)(a1 + 416);
      v186 = *(double *)(a1 + 424);
      v187 = v207;
      v183 = cosval;
      v182 = sinval;
    }
    v188 = v236;
    v237 = v179 * (v180 * 0.5 * v185) + v171 * (-(v181 * 1.5 * v172) * v184 + 1.0);
    v189 = v177 + v181 * -0.25 * v186 * v178;
    v190 = v183 * (v181 * 1.5);
    v191 = v242 + v190 * v178;
    v192 = v187 + v182 * v190 * v179;
    v193 = v188 * v180;
    v194 = v240 - v178 * (v193 * v185) / 0.0743669161;
    v195 = v176 + v193 * (v184 * 1.5 + v185 * v179) / 0.0743669161;
    v196 = __sincos_stret(v189);
    v197 = __sincos_stret(v191);
    v198 = __sincos_stret(v192);
    result = 0;
    v199 = -(v197.__sinval * v198.__cosval);
    v200 = v197.__cosval * v196.__cosval + v199 * v196.__sinval;
    v201.f64[0] = v197.__sinval * v196.__cosval + v197.__cosval * v198.__cosval * v196.__sinval;
    *(double *)a3 = v237 * v200 * 6378.135;
    v201.f64[1] = v198.__sinval * v196.__sinval;
    *(float64x2_t *)(a3 + 8) = vmulq_f64(vmulq_n_f64(v201, v237), (float64x2_t)vdupq_n_s64(0x40B8EA228F5C28F6uLL));
    *a4 = ((v199 * v196.__cosval - v197.__cosval * v196.__sinval) * v195 + v194 * v200) * 7.90537051;
    a4[1] = ((v197.__cosval * v198.__cosval * v196.__cosval - v197.__sinval * v196.__sinval) * v195 + v194 * v201.f64[0])
          * 7.90537051;
    a4[2] = (v198.__sinval * v196.__cosval * v195 + v194 * (v198.__sinval * v196.__sinval)) * 7.90537051;
  }
  else
  {
    v244 = 5;
    v243 = 3;
    v203 = v232 * v168;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v244, &v243, "SGP4 encountered invalid pL %lg", v159, v160, v161, v162, v163, SLOBYTE(v203));
    return 4294967292;
  }
  return result;
}

double cnnavigation::NORADTLEEphemerides::ECIToECEF(uint64_t a1, uint64_t a2, double *a3)
{
  double v4;
  double v5;
  long double v6;
  double v7;
  __double2 v8;

  v4 = (double)(*(_DWORD *)a2 - 2451545) / 36525.0;
  v5 = *(double *)(a2 + 8);
  v6 = fmod(v4 * v4 * 0.093104 + v4 * (v4 * v4) * -0.0000062 + v4 * 3164400180.0 + 67310.5484, 86400.0);
  v7 = fmod(v6 * 0.0000727220522+ ((v5 / 36525.0 + v4) * 5.9006e-11 + 1.00273791 + (v5 / 36525.0 + v4) * (v5 / 36525.0 + v4) * -5.9e-15)* 6.28318531* v5, 6.28318531);
  v8 = __sincos_stret(v7);
  return a3[1] * v8.__sinval + v8.__cosval * *a3;
}

uint64_t cnnavigation::NORADTLEEphemerides::GNSSSatelliteClockOffset(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 8))
    return 0xFFFFFFFFLL;
  result = 0;
  *a4 = 0;
  *a6 = 0;
  a6[1] = 0;
  return result;
}

uint64_t cnnavigation::NORADTLEEphemerides::GNSSSatelliteClockOffsetRate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 8))
    return 0xFFFFFFFFLL;
  result = 0;
  *a4 = 0;
  *a6 = 0;
  a6[1] = 0;
  return result;
}

double cnnavigation::NORADTLEEphemerides::GreenwichHourAngle(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  long double v4;

  v2 = (double)(*(_DWORD *)a2 - 2451545) / 36525.0;
  v3 = *(double *)(a2 + 8);
  v4 = fmod(v2 * v2 * 0.093104 + v2 * (v2 * v2) * -0.0000062 + v2 * 3164400180.0 + 67310.5484, 86400.0)
     * 0.0000727220522
     + ((v3 / 36525.0 + v2) * 5.9006e-11 + 1.00273791 + (v3 / 36525.0 + v2) * (v3 / 36525.0 + v2) * -5.9e-15)
     * 6.28318531
     * v3;
  return fmod(v4, 6.28318531);
}

uint64_t sub_18D096C78(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25B9740;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)a1 = off_1E25B93B0;
  return a1;
}

void sub_18D096D04(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25B9740;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)a1 = off_1E25B93B0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t cnnavigation::GNSSCarrierPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6, int8x16_t a7, int8x16_t a8, double a9)
{
  float64x2_t v10[3];
  __int16 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  return cnnavigation::GNSSCarrierPhase(a1, (uint64_t)&v11, a2, a3, a4, a5, a6, 0, a7, a8, a9, v10);
}

uint64_t cnnavigation::GNSSCarrierPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, int a8, int8x16_t a9, int8x16_t a10, double a11, float64x2_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v24;
  uint64_t i;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t v32;
  uint64_t result;
  int8x16_t v34;
  int8x16_t v35;
  double v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  __n128 v52;
  uint64_t v53[2];
  uint64_t v54;
  uint64_t v55;
  double v56[2];
  double v57;
  __int128 v58;
  float64x2_t v59;
  double v60;
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if (*(double *)a9.i64 <= 0.0 || (a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v65 = v17;
  v66 = v16;
  v67 = v15;
  v68 = v14;
  v69 = v12;
  v70 = v13;
  v24 = *(double *)a10.i64;
  for (i = 0; i != 24; i += 8)
  {
    if ((*(_QWORD *)(a3 + i) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      return 0xFFFFFFFFLL;
  }
  if ((a10.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&a11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0xFFFFFFFFLL;
  }
  v52 = (__n128)a9;
  v63 = 0;
  v64 = 0;
  a9.i64[0] = a10.i64[0];
  CNTimeSpan::SetTimeSpan(&v63, 0, a9, a10);
  v62[0] = CNTimeSpan::operator-(a1, &v63, v29, v30);
  v62[1] = v31;
  v60 = 0.0;
  v61 = 0;
  v58 = 0u;
  v59 = 0u;
  if (a8)
  {
    result = cnnavigation::GNSSTimeOfFlight((uint64_t)v62, a2, a3, a4, 2, a5, 1, a6, (int8x16_t)v52, v32, (double *)&v61, 1u, (uint64_t)&v58);
    if ((_DWORD)result)
      return result;
    v57 = 0.0;
    v36 = *(double *)&v61;
    v54 = 0;
    v55 = 0;
    v34.i64[0] = v61;
    CNTimeSpan::SetTimeSpan(&v54, 0, v34, v35);
    v63 = CNTimeSpan::operator-((uint64_t)v62, &v54, v37, v38);
    v64 = v39;
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, double *, uint64_t, double *, __n128))(*(_QWORD *)a4 + 96))(a4, &v63, a2, &v57, 1, v56, v52);
  }
  else
  {
    result = cnnavigation::GNSSTimeOfFlight((uint64_t)v62, a2, a3, a4, 2, a5, 1, a6, (int8x16_t)v52, v32, (double *)&v61, 0, (uint64_t)&v63);
    if ((_DWORD)result)
      return result;
    v57 = 0.0;
    v36 = *(double *)&v61;
    v53[0] = 0;
    v53[1] = 0;
    v40.i64[0] = v61;
    CNTimeSpan::SetTimeSpan(v53, 0, v40, v41);
    v54 = CNTimeSpan::operator-((uint64_t)v62, v53, v42, v43);
    v55 = v44;
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, double *, _QWORD, uint64_t *, __n128))(*(_QWORD *)a4 + 96))(a4, &v54, a2, &v57, 0, &v63, v52);
  }
  if (!(_DWORD)result)
  {
    v45 = a11 + v52.n128_f64[0] * (v36 - v57 + v24);
    *a7 = v45;
    if (a8)
    {
      v46 = v56[0];
      v47 = -v56[0];
      v48 = *(double *)&v58;
      v49 = v60;
      v50 = v60 * v56[0];
      v51 = (v45 - a11) / v52.n128_f64[0] + v52.n128_f64[0] * *((double *)&v58 + 1) - v52.n128_f64[0] * v56[1];
      a12->f64[0] = v52.n128_f64[0] * *(double *)&v58 - v52.n128_f64[0] * (v56[0] - v56[0] * *(double *)&v58);
      a12->f64[1] = v51;
      a12[1] = vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(v59, v47), -v52.n128_f64[0]), v59, v52.n128_f64[0]);
      a12[2].f64[0] = v50 * v52.n128_f64[0] + v52.n128_f64[0] * v49;
      a12[2].f64[1] = v46 * v52.n128_f64[0] - v52.n128_f64[0] * v48 + v52.n128_f64[0];
    }
  }
  return result;
}

uint64_t cnnavigation::GNSSCarrierPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6, float64x2_t *a7, int8x16_t a8, int8x16_t a9, double a10)
{
  __int16 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  return cnnavigation::GNSSCarrierPhase(a1, (uint64_t)&v11, a2, a3, a4, a5, a6, 1, a8, a9, a10, a7);
}

uint64_t cnnavigation::GNSSCarrierPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, int8x16_t a8, int8x16_t a9, double a10)
{
  float64x2_t v11[3];

  return cnnavigation::GNSSCarrierPhase(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, v11);
}

uint64_t cnnavigation::GNSSCarrierPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, float64x2_t *a8, int8x16_t a9, int8x16_t a10, double a11)
{
  return cnnavigation::GNSSCarrierPhase(a1, a2, a3, a4, a5, a6, a7, 1, a9, a10, a11, a8);
}

uint64_t cnnavigation::BeiDouTime::BeiDouTime(uint64_t this, int a2, double a3)
{
  *(_DWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

{
  *(_DWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

double cnnavigation::BeiDouTime::BeiDouTime(cnnavigation::BeiDouTime *this, double a2)
{
  int v2;
  double result;

  v2 = vcvtmd_s64_f64(a2 / 604800.0);
  *(_DWORD *)this = v2;
  result = a2 + (double)v2 * -604800.0;
  *((double *)this + 1) = result;
  return result;
}

{
  int v2;
  double result;

  v2 = vcvtmd_s64_f64(a2 / 604800.0);
  *(_DWORD *)this = v2;
  result = a2 + (double)v2 * -604800.0;
  *((double *)this + 1) = result;
  return result;
}

double cnnavigation::BeiDouTime::BeiDouTime(uint64_t a1, double *a2)
{
  double v2;
  uint64_t v3;
  double result;

  v2 = *a2;
  v3 = *(_QWORD *)a2 / 604800;
  *(_DWORD *)a1 = v3;
  result = a2[1] + (double)(*(_QWORD *)&v2 - 604800 * (int)v3);
  *(double *)(a1 + 8) = result;
  if (result < 0.0)
  {
    *(_DWORD *)a1 = v3 - 1;
    result = result + 604800.0;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

{
  double v2;
  uint64_t v3;
  double result;

  v2 = *a2;
  v3 = *(_QWORD *)a2 / 604800;
  *(_DWORD *)a1 = v3;
  result = a2[1] + (double)(*(_QWORD *)&v2 - 604800 * (int)v3);
  *(double *)(a1 + 8) = result;
  if (result < 0.0)
  {
    *(_DWORD *)a1 = v3 - 1;
    result = result + 604800.0;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t cnnavigation::BeiDouTime::operator CNTime(int *a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v3;
  uint64_t v5[2];

  a2.i64[0] = *((_QWORD *)a1 + 1);
  v3 = vcvtmd_s64_f64(*(double *)a2.i64) + 604800 * *a1;
  *(double *)a3.i64 = (double)(uint64_t)floor(*(double *)a2.i64);
  *(double *)a2.i64 = *(double *)a2.i64 - *(double *)a3.i64;
  v5[0] = 0;
  v5[1] = 0;
  CNTimeSpan::SetTimeSpan(v5, v3, a2, a3);
  return v5[0];
}

uint64_t cnnavigation::BeiDouTimeToJulianTime(double *a1, int a2, uint64_t a3)
{
  int v3;
  double v4;
  uint64_t result;
  int v6;
  double v7;

  v3 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v4 = a1[1];
  result = 0xFFFFFFFFLL;
  if (v4 >= 0.0 && v4 < 604800.0)
  {
    result = 0;
    v6 = vcvtmd_s64_f64(v4 / 86400.0);
    v7 = (v4 - (double)a2) / 86400.0 + 0.5 - (double)v6;
    *(_DWORD *)a3 = v6 - v3 + 8 * v3 + 2453736 + vcvtmd_s64_f64(v7);
    *(double *)(a3 + 8) = v7 - floor(v7);
  }
  return result;
}

double cnnavigation::JulianTimeToBeiDouTime(uint64_t a1, int a2, uint64_t a3)
{
  double v3;
  double result;
  unsigned int v5;

  v3 = *(double *)(a1 + 8) + -0.5;
  result = v3 - floor(v3);
  v5 = *(_DWORD *)a1 - 2453736 + vcvtmd_s64_f64(v3);
  if ((v5 & 0x80000000) == 0)
  {
    *(_DWORD *)a3 = v5 / 7;
    result = result * 86400.0 + (double)(v5 % 7) * 86400.0 + (double)a2;
    *(double *)(a3 + 8) = result;
    if (result >= 604800.0)
    {
      *(_DWORD *)a3 = v5 / 7 + 1;
      result = result + -604800.0;
      *(double *)(a3 + 8) = result;
    }
  }
  return result;
}

uint64_t cnnavigation::GNSSPseudorange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6, int8x16_t a7, int8x16_t a8)
{
  float64x2_t v9[3];
  __int16 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  return cnnavigation::GNSSPseudorange(a1, (uint64_t)&v10, a2, a3, a4, a5, a6, 0, a7, a8, v9);
}

uint64_t cnnavigation::GNSSPseudorange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, int a8, int8x16_t a9, int8x16_t a10, float64x2_t *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v23;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t result;
  int8x16_t v34;
  int8x16_t v35;
  double v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  double v41;
  double v42;
  double v43;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  int8x16_t v55;
  int8x16_t v56;
  double v57;
  int8x16_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61[2];
  uint64_t v62;
  uint64_t v63;
  double v64[2];
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (*(double *)a9.i64 <= 0.0)
    return 0xFFFFFFFFLL;
  v73 = v16;
  v74 = v15;
  v75 = v14;
  v76 = v13;
  v77 = v11;
  v78 = v12;
  v17 = *(double *)a9.i64;
  if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v23 = *(double *)a10.i64;
    v27 = 0;
    while ((*(_QWORD *)(a3 + v27) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v27 += 8;
      if (v27 == 24)
      {
        if ((a10.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          return 0xFFFFFFFFLL;
        v71 = 0;
        v72 = 0;
        a9.i64[0] = a10.i64[0];
        CNTimeSpan::SetTimeSpan(&v71, 0, a9, a10);
        v70[0] = CNTimeSpan::operator-(a1, &v71, v28, v29);
        v70[1] = v30;
        v68 = 0.0;
        v69 = 0.0;
        v32.i64[1] = 0;
        v66 = 0u;
        v67 = 0u;
        if (a8)
        {
          *(double *)v32.i64 = v17;
          result = cnnavigation::GNSSTimeOfFlight((uint64_t)v70, a2, a3, a4, 1, a5, 1, a6, v32, v31, &v69, 1u, (uint64_t)&v66);
          if (!(_DWORD)result)
          {
            v65 = 0.0;
            v36 = v69;
            v62 = 0;
            v63 = 0;
            *(double *)v34.i64 = v69;
            CNTimeSpan::SetTimeSpan(&v62, 0, v34, v35);
            v71 = CNTimeSpan::operator-((uint64_t)v70, &v62, v37, v38);
            v72 = v39;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, double *, uint64_t, double *, double))(*(_QWORD *)a4 + 96))(a4, &v71, a2, &v65, 1, v64, v17);
            if (!(_DWORD)result)
            {
              *a7 = (v36 - v65 + v23) * 299792458.0;
              _D1 = v64[0];
              v41 = v68;
              v42 = v68 * v64[0];
              v43 = v64[0] * 299792458.0;
              _D6 = v66.f64[0];
              __asm { FMLS            D1, D1, V6.D[0] }
              _Q1.f64[1] = v64[1];
              v50 = (float64x2_t)vdupq_n_s64(0xC1B1DE784A000000);
              v51 = vmulq_f64(_Q1, v50);
              v52 = vmulq_f64(vmulq_n_f64(v67, -v64[0]), v50);
              v53 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
              v54 = vmlaq_f64(v52, v53, v67);
              *a11 = vmlaq_f64(v51, v53, v66);
              a11[1] = v54;
              a11[2].f64[0] = v42 * 299792458.0 + v41 * 299792458.0;
              a11[2].f64[1] = vmlad_n_f64(v43, -299792458.0, _D6) + 299792458.0;
            }
          }
        }
        else
        {
          *(double *)v32.i64 = v17;
          result = cnnavigation::GNSSTimeOfFlight((uint64_t)v70, a2, a3, a4, 1, a5, 1, a6, v32, v31, &v69, 0, (uint64_t)&v71);
          if (!(_DWORD)result)
          {
            v65 = 0.0;
            v57 = v69;
            v61[0] = 0;
            v61[1] = 0;
            *(double *)v55.i64 = v69;
            CNTimeSpan::SetTimeSpan(v61, 0, v55, v56);
            v62 = CNTimeSpan::operator-((uint64_t)v70, v61, v58, v59);
            v63 = v60;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, double *, _QWORD, uint64_t *, double))(*(_QWORD *)a4 + 96))(a4, &v62, a2, &v65, 0, &v71, v17);
            if (!(_DWORD)result)
              *a7 = (v57 - v65 + v23) * 299792458.0;
          }
        }
        return result;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t cnnavigation::GNSSPseudorange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6, float64x2_t *a7, int8x16_t a8, int8x16_t a9)
{
  __int16 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  return cnnavigation::GNSSPseudorange(a1, (uint64_t)&v10, a2, a3, a4, a5, a6, 1, a8, a9, a7);
}

uint64_t cnnavigation::GNSSPseudorange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, int8x16_t a8, int8x16_t a9)
{
  float64x2_t v10[3];

  return cnnavigation::GNSSPseudorange(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, v10);
}

uint64_t cnnavigation::GNSSPseudorange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double *a7, float64x2_t *a8, int8x16_t a9, int8x16_t a10)
{
  return cnnavigation::GNSSPseudorange(a1, a2, a3, a4, a5, a6, a7, 1, a9, a10, a8);
}

uint64_t cnnavigation::BeiDouEphemerisDatabase::GetEphemerides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;

  if (*(_BYTE *)(a2 + 24) != 4)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return 0xFFFFFFFFLL;
  v7 = *(_DWORD *)(a2 + 28) + 4000;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || v7 < *(_DWORD *)(v8 + 32))
    return 0xFFFFFFFFLL;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v8 + 48));
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v8 + 72);
  memcpy((void *)(a3 + 40), (const void *)(v8 + 80), 0x10CuLL);
  return 0;
}

uint64_t cnnavigation::BeiDouEphemerisDatabase::SetEphemerides(uint64_t **this, const cnnavigation::BeiDouEphemerides *a2)
{
  char *v2;
  _OWORD *v7;
  int v8;
  char *v9;
  char *v10;
  char **v11;
  char **v12;
  char *v13;
  char *v14;
  int v15;
  BOOL v16;
  char **v17;
  int v18;
  char *v19;
  _BYTE *v20;
  uint64_t *v21;
  uint64_t v22[2];
  char v23;

  v2 = (char *)a2 + 40;
  if (*((_BYTE *)a2 + 32) != 4 || *((_BYTE *)a2 + 40) == 0)
    return 0xFFFFFFFFLL;
  v7 = (_OWORD *)((char *)a2 + 8);
  v8 = *((_DWORD *)a2 + 9) + 4000;
  v10 = (char *)(this + 1);
  v9 = (char *)this[1];
  v11 = (char **)(this + 1);
  v12 = (char **)(this + 1);
  if (!v9)
  {
LABEL_23:
    v19 = (char *)operator new(0x160uLL);
    v22[0] = (uint64_t)v19;
    v22[1] = (uint64_t)v10;
    v23 = 0;
    *((_DWORD *)v19 + 8) = v8;
    *((_QWORD *)v19 + 5) = off_1E25B94C0;
    v20 = v19 + 48;
    if (*((char *)a2 + 31) < 0)
    {
      sub_18D077798(v20, *((void **)a2 + 1), *((_QWORD *)a2 + 2));
    }
    else
    {
      *(_OWORD *)v20 = *v7;
      *((_QWORD *)v19 + 8) = *((_QWORD *)v2 - 2);
    }
    *((_QWORD *)v19 + 9) = *((_QWORD *)a2 + 4);
    memcpy(v19 + 80, v2, 0x10CuLL);
    v23 = 1;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = v12;
    *v11 = v19;
    v21 = (uint64_t *)**this;
    if (v21)
    {
      *this = v21;
      v19 = *v11;
    }
    sub_18D083D78(this[1], (uint64_t *)v19);
    this[2] = (uint64_t *)((char *)this[2] + 1);
    v22[0] = 0;
    sub_18D097B38(v22);
    return 0;
  }
  v13 = (char *)(this + 1);
  v14 = (char *)this[1];
  do
  {
    v15 = *((_DWORD *)v14 + 8);
    v16 = v15 < v8;
    if (v15 >= v8)
      v17 = (char **)v14;
    else
      v17 = (char **)(v14 + 8);
    if (!v16)
      v13 = v14;
    v14 = *v17;
  }
  while (*v17);
  if (v13 == v10 || v8 < *((_DWORD *)v13 + 8))
  {
    while (1)
    {
      while (1)
      {
        v12 = (char **)v9;
        v18 = *((_DWORD *)v9 + 8);
        if (v18 <= v8)
          break;
        v9 = *v12;
        v11 = v12;
        if (!*v12)
          goto LABEL_23;
      }
      if (v18 >= v8)
        return 0;
      v9 = v12[1];
      if (!v9)
      {
        v11 = v12 + 1;
        goto LABEL_23;
      }
    }
  }
  if (*((double *)a2 + 7) - *((double *)v13 + 12) + (double)(*((_DWORD *)a2 + 12) - *((_DWORD *)v13 + 22)) * 604800.0 <= 0.0)
    return 0xFFFFFFFFLL;
  std::string::operator=((std::string *)v13 + 2, (const std::string *)((char *)a2 + 8));
  *((_QWORD *)v13 + 9) = *((_QWORD *)a2 + 4);
  memcpy(v13 + 80, v2, 0x10CuLL);
  return 0;
}

void sub_18D097AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 40) = off_1E25B93B0;
  sub_18D097B38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void cnnavigation::BeiDouEphemerisDatabase::Reset(char **this)
{
  char *v2;

  v2 = (char *)(this + 1);
  sub_18D097B94(this[1]);
  *this = v2;
  this[2] = 0;
  *(_QWORD *)v2 = 0;
}

void sub_18D097B38(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v1 + 40) = off_1E25B94C0;
      if (*(char *)(v1 + 71) < 0)
        operator delete(*(void **)(v1 + 48));
    }
    operator delete((void *)v1);
  }
}

void sub_18D097B94(char *a1)
{
  if (a1)
  {
    sub_18D097B94(*(_QWORD *)a1);
    sub_18D097B94(*((_QWORD *)a1 + 1));
    *((_QWORD *)a1 + 5) = off_1E25B94C0;
    if (a1[71] < 0)
      operator delete(*((void **)a1 + 6));
    operator delete(a1);
  }
}

uint64_t cnnavigation::GPSTimeOfFlight(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, double a7, double a8)
{
  double v9[5];

  return cnnavigation::GPSTimeOfFlight(a1, a2, a3, a4, a5, a6, 0, v9, a7, a8);
}

uint64_t cnnavigation::GPSTimeOfFlight(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int a7, double *a8, double a9, double a10)
{
  double v20;
  int v21;
  uint64_t result;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __double2 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  double v58[3];
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v46 = a2[1];
  v47 = *a2;
  v45 = a2[2];
  *a6 = 0.0;
  v20 = 0.0;
  v21 = 10;
  while (1)
  {
    result = cnnavigation::GPSFindSat(a1, a3, (double *)&v54, 0, 0, a9 - v20);
    if ((_DWORD)result)
      break;
    v23 = *a6;
    v24 = __sincos_stret(*a6 * 0.0000729211515);
    v25 = v24.__sinval * *((double *)&v54 + 1) + v24.__cosval * *(double *)&v54;
    v26 = v24.__cosval * *((double *)&v54 + 1) - v24.__sinval * *(double *)&v54;
    v27 = *(double *)&v55;
    *(double *)&v50 = v25;
    *((double *)&v50 + 1) = v26;
    *(_QWORD *)&v51 = v55;
    v62 = 0.0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, double *, __int128 *, double *, double, double))(*(_QWORD *)a4 + 16))(a4, a1, a2, &v50, &v62, a9 - v23, a10);
    if ((_DWORD)result)
      break;
    v59 = 0.0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, double *, __int128 *, double *, double))(*(_QWORD *)a5 + 16))(a5, a1, a2, &v50, &v59, a9 - *a6);
    if ((_DWORD)result)
      break;
    v20 = sqrt((v26 - v46) * (v26 - v46) + (v25 - v47) * (v25 - v47) + (v27 - v45) * (v27 - v45)) / 299792458.0
        + v62
        + v59;
    *a6 = v20;
    if (!--v21)
    {
      if (!a7)
        return 0;
      result = cnnavigation::GPSFindSat(a1, a3, &v62, &v59, 0, a9 - v20);
      if (!(_DWORD)result)
      {
        v28 = *a6;
        v29 = __sincos_stret(*a6 * 0.0000729211515);
        v30 = v64;
        v43 = v29.__cosval * v63 - v29.__sinval * v62;
        v44 = v29.__sinval * v63 + v29.__cosval * v62;
        v58[0] = v44;
        v58[1] = v43;
        v58[2] = v64;
        v49 = 0.0;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        result = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, double *, __int128 *, double, double))(*(_QWORD *)a4 + 24))(a4, a1, a2, v58, &v49, &v54, a9 - v28, a10);
        if (!(_DWORD)result)
        {
          v48 = 0.0;
          v53 = 0.0;
          v51 = 0u;
          v52 = 0u;
          v50 = 0u;
          result = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, double *, __int128 *, double))(*(_QWORD *)a5 + 24))(a5, a1, a2, v58, &v48, &v50, a9 - *a6);
          if (!(_DWORD)result)
          {
            v31 = sqrt((v43 - v46) * (v43 - v46) + (v44 - v47) * (v44 - v47) + (v30 - v45) * (v30 - v45));
            *a6 = v31 / 299792458.0 + v49 + v48;
            v32 = (v44 - v47) / v31;
            v33 = (v43 - v46) / v31;
            v34 = (v30 - v45) / v31;
            v35 = (v29.__cosval * v63 + -v29.__sinval * v62) * 0.0000729211515 - v29.__cosval * v59 - v29.__sinval * v60;
            v36 = (v63 * -v29.__sinval - v29.__cosval * v62) * 0.0000729211515 + v29.__sinval * v59 - v29.__cosval * v60;
            v37 = *(double *)&v56;
            v38 = *((double *)&v50 + 1);
            v39 = 1.0
                - (*((double *)&v56 + 1) * v35
                 - *(double *)&v54
                 + *(double *)&v57 * v36
                 - *((double *)&v57 + 1) * v61
                 + (v33 * v36 + v32 * v35 - v34 * v61) * 0.00000000333564095
                 + v35 * *(double *)&v52
                 - *(double *)&v50
                 + *((double *)&v52 + 1) * v36
                 - v53 * v61);
            v40 = *((double *)&v54 + 1) / v39;
            *a8 = (*(double *)&v54
                 + *((double *)&v56 + 1) * (v29.__sinval * v60 + v29.__cosval * v59)
                 + *(double *)&v57 * (v29.__cosval * v60 + -v29.__sinval * v59)
                 + *((double *)&v57 + 1) * v61
                 + (v33 * (v29.__cosval * v60 + -v29.__sinval * v59)
                  + v32 * (v29.__sinval * v60 + v29.__cosval * v59)
                  + v34 * v61)
                 * 0.00000000333564095
                 + *(double *)&v50
                 + *(double *)&v52 * (v29.__sinval * v60 + v29.__cosval * v59)
                 + *((double *)&v52 + 1) * (v29.__cosval * v60 + -v29.__sinval * v59)
                 + v53 * v61)
                / v39;
            a8[1] = v40;
            v41 = *((double *)&v51 + 1);
            v42 = (*(double *)&v51 + *((double *)&v55 + 1) - v33 * 0.00000000333564095) / v39;
            a8[2] = (v38 + *(double *)&v55 - v32 * 0.00000000333564095) / v39;
            a8[3] = v42;
            a8[4] = (v41 + v37 - v34 * 0.00000000333564095) / v39;
          }
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t cnnavigation::GPSTimeOfFlight(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, double *a7, double a8, double a9)
{
  return cnnavigation::GPSTimeOfFlight(a1, a2, a3, a4, a5, a6, 1, a7, a8, a9);
}

uint64_t cnnavigation::GPSTimeOfFlightRate(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, double a8, double a9)
{
  double v10[8];

  return cnnavigation::GPSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, v10);
}

uint64_t cnnavigation::GPSTimeOfFlightRate(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, int a8, double a9, double a10, double *a11)
{
  uint64_t result;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __double2 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  double v135[2];
  double v136;
  double v137;
  double v138;
  double v139;
  double v140[3];
  double v141[3];
  double v142[3];
  double v143;
  double v144;
  double v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v139 = 0.0;
  result = cnnavigation::GPSTimeOfFlight(a1, a2, a4, a5, a6, &v139, 1, v135, a9, a10);
  if (!(_DWORD)result)
  {
    v22 = v135[0];
    v23 = v136;
    v24 = v137;
    v25 = v138;
    *a7 = v135[0] + v136 * *a3 + v137 * a3[1] + v138 * a3[2];
    if (a8)
    {
      v122 = v22;
      v123 = v24;
      v124 = v23;
      v26 = v135[1];
      v28 = *a2;
      v27 = a2[1];
      v29 = a2[2];
      v30 = v139;
      v31 = a9 - v139;
      result = cnnavigation::GPSFindSat(a1, a4, &v143, v142, v141, v31);
      if (!(_DWORD)result)
      {
        v104 = v29;
        v105 = v28;
        v106 = v25;
        v32 = __sincos_stret(v30 * 0.0000729211515);
        v33 = v143;
        v34 = v144;
        v35 = v145;
        v36 = v32.__cosval * v144 - v32.__sinval * v143;
        v140[0] = v32.__sinval * v144 + v32.__cosval * v143;
        v140[1] = v36;
        v140[2] = v145;
        v111 = v142[1];
        v119 = *a7;
        v120 = v140[0];
        v116 = a3[1];
        v117 = v142[2];
        v118 = a3[2];
        v103 = v141[0];
        v107 = v141[1];
        v108 = v142[0];
        v114 = v141[2];
        v115 = *a3;
        v134 = 0;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        result = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, uint64_t *, __int128 *, double, double))(*(_QWORD *)a5 + 24))(a5, a1, a2, v140, &v134, &v130, v31, a10);
        if (!(_DWORD)result)
        {
          v37 = v120;
          v128 = 0;
          v129 = 0;
          v126 = 0u;
          v127 = 0u;
          v125 = 0u;
          result = (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, uint64_t *, __int128 *, double))(*(_QWORD *)a6 + 24))(a6, a1, a2, v140, &v129, &v125, v31);
          if (!(_DWORD)result)
          {
            v38 = v120 - v105;
            v39 = v35 - v104;
            v40 = 1.0 - v119;
            v41 = v32.__sinval * -0.0000729211515 * v119;
            v42 = v32.__cosval * 0.0000729211515 * -0.0000729211515 * v119;
            v43 = v32.__sinval * 0.0000729211515 * v119;
            v44 = v36 - v27;
            v45 = v32.__cosval * 0.0000729211515 * v119;
            v46 = v108 * v41 + v32.__cosval * v103 * (1.0 - v119) + v32.__sinval * v107 * (1.0 - v119) + v45 * v111;
            v47 = (1.0 - v119) * (v32.__sinval * v103)
                + v32.__cosval * -0.0000729211515 * v108 * (1.0 - v119)
                + v32.__sinval * 0.0000729211515 * 0.0000729211515 * v119 * v33
                + v45 * v108;
            v48 = v36 * 0.0000729211515 - v32.__cosval * v108 - v32.__sinval * v111;
            v49 = (-(v32.__sinval * v34) - v32.__cosval * v33) * 0.0000729211515 + v32.__sinval * v108;
            v50 = v32.__cosval * v111 - v32.__sinval * v108;
            v51 = v32.__sinval * -0.0000729211515 * v33 - v32.__cosval * v108 - v32.__sinval * v111;
            v52 = v32.__cosval * -0.0000729211515 * v33 + v32.__sinval * v108;
            v53 = v32.__sinval * v111 + v32.__cosval * v108;
            v54 = v32.__cosval * -0.0000729211515 * v119;
            v55 = (1.0 - v119) * -(v32.__cosval * v103)
                + v32.__sinval * -0.0000729211515 * v108 * (1.0 - v119)
                + v42 * v33
                + v43 * v108
                + v32.__cosval * 0.0000729211515 * v111 * (1.0 - v119)
                + -(v32.__sinval * v107) * (1.0 - v119)
                + v32.__sinval * 0.0000729211515 * -0.0000729211515 * v119 * v34
                + v54 * v111;
            v56 = v108 * v54 + -(v32.__sinval * v103) * v40 + v32.__cosval * v107 * v40 + v41 * v111;
            v57 = v44 * v44 + v38 * v38;
            v109 = v47
                 + v32.__sinval * -0.0000729211515 * v111 * v40
                 + -(v32.__cosval * v107) * v40
                 + v42 * v34
                 + v43 * v111;
            v110 = v56;
            v58 = sqrt(v57 + v39 * v39);
            v59 = v49 - v32.__cosval * v111;
            v60 = v52 - v32.__cosval * v111;
            v121 = v51 + v32.__cosval * 0.0000729211515 * v34;
            v61 = v58 * (v58 * v58);
            v62 = (v39 * v39 + v44 * v44) / v61;
            v63 = -((v37 - v105) * (v36 - v27)) / v61;
            v64 = -((v37 - v105) * (v35 - v104)) / v61;
            v65 = v117 - v122 * v117;
            v66 = v53 + v48 * v122;
            v67 = v53 + v48 * v119;
            v68 = v50 + v59 * v122;
            v69 = (v37 - v105) / v58;
            v112 = v69;
            v113 = v60 + v32.__sinval * -0.0000729211515 * v34;
            v70 = v69 * (v46 + v55 * v122) + (v63 * v68 + v62 * v66 + v64 * v65) * v67;
            v71 = v59 * v63 + v62 * v48 - v64 * v117;
            v72 = v69 * v55;
            v73 = v26 * v72 + v26 * v71 * v67;
            v74 = v124 * v72 + -(v62 - v71 * v124) * v67;
            v75 = v123 * v72 + -(v63 - v71 * v123) * v67;
            v76 = v106 * v72 + -(v64 - v71 * v106) * v67;
            v77 = (v39 * v39 + v38 * v38) / v61;
            v78 = v50 + v59 * v119;
            v79 = -((v36 - v27) * (v35 - v104)) / v61;
            v80 = v70 + (v77 * v68 + v63 * v66 + v79 * v65) * v78;
            v81 = v59 * v77 + v63 * v48 - v79 * v117;
            v82 = v73 + v26 * v81 * v78;
            v83 = v74 + -(v63 - v81 * v124) * v78;
            v84 = v75 + -(v77 - v81 * v123) * v78;
            v85 = v76 + -(v79 - v81 * v106) * v78;
            v86 = (v36 - v27) / v58;
            v87 = (v35 - v104) / v58;
            v88 = v57 / v61;
            v89 = -(v114 * (1.0 - v119));
            v90 = v117 - v117 * v119;
            v91 = v80
                + v86 * (v110 + v109 * v122)
                + (v79 * v68 + v64 * v66 + v57 / v61 * v65) * v90
                + v87 * ((1.0 - v119) * v114 + v89 * v122)
                + (-(v63 * v68) - v62 * v66 - v64 * v65) * v115
                + (-(v77 * v68) - v63 * v66 - v79 * v65) * v116;
            v92 = v59 * v79 + v64 * v48 - v88 * v117;
            v93 = v87 * v89;
            v94 = -(v63 * v59) - v62 * v48 + v64 * v117;
            v95 = v83 + v86 * v109 * v124 + -(v64 - v92 * v124) * v90 + v93 * v124 + (v62 + v94 * v124) * v115;
            v96 = -(v77 * v59) - v63 * v48 + v79 * v117;
            v97 = -(v79 * v59) - v64 * v48 + v88 * v117;
            v98 = 1.0 - (v86 * v113 + v69 * v121 - v87 * v117) / 299792458.0;
            *a11 = (v91 + (-(v79 * v68) - v64 * v66 - v88 * v65) * v118) / 299792458.0 / v98;
            a11[1] = (v82
                    + v86 * v109 * v26
                    + v26 * v92 * v90
                    + v93 * v26
                    + v26 * v94 * v115
                    + v26 * v96 * v116
                    + v26 * v97 * v118)
                   / 299792458.0
                   / v98;
            a11[2] = (v95 + (v63 + v96 * v124) * v116 + (v64 + v97 * v124) * v118) / 299792458.0 / v98;
            a11[3] = (v84
                    + v86 * v109 * v123
                    + -(v79 - v92 * v123) * v90
                    + v93 * v123
                    + (v63 + v94 * v123) * v115
                    + (v77 + v96 * v123) * v116
                    + (v79 + v97 * v123) * v118)
                   / 299792458.0
                   / v98;
            v99 = *((double *)&v131 + 1);
            v100 = *(double *)&v126;
            v101 = (*(double *)&v131 - v112 / 299792458.0 + *((double *)&v125 + 1)) / v98;
            a11[4] = (v85
                    + v86 * v109 * v106
                    + -(v88 - v92 * v106) * v90
                    + v93 * v106
                    + (v64 + v94 * v106) * v115
                    + (v79 + v96 * v106) * v116
                    + (v88 + v97 * v106) * v118)
                   / 299792458.0
                   / v98;
            a11[5] = v101;
            v102 = (*(double *)&v132 - v87 / 299792458.0 + *((double *)&v126 + 1)) / v98;
            a11[6] = (v99 - v86 / 299792458.0 + v100) / v98;
            a11[7] = v102;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cnnavigation::GPSTimeOfFlightRate(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, double *a8, double a9, double a10)
{
  return cnnavigation::GPSTimeOfFlightRate(a1, a2, a3, a4, a5, a6, a7, 1, a9, a10, a8);
}

cnprint::CNPrinter *cnprint::CNPrinter::CNPrinter(cnprint::CNPrinter *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  const char *v8;
  void **v9;
  os_log_t v10;
  const char *v11;
  void **v12;
  os_log_t v13;
  const char *v14;
  void **v15;
  os_log_t v16;
  const char *v17;
  void **v18;
  os_log_t v19;
  const char *v20;
  void **v21;
  os_log_t v22;
  const char *v23;
  void **v24;
  os_log_t v25;
  const char *v26;
  void **v27;
  os_log_t v28;
  const char *v29;
  void **v30;
  os_log_t v31;
  const char *v32;
  void **v33;
  os_log_t v34;
  const char *v35;
  void **v36;
  os_log_t v37;
  const char *v38;
  void **v39;
  os_log_t v40;
  void *__p[2];
  char v43;
  __int16 v44;

  v2 = sub_18D0778AC(this, "com.apple.corenavigation");
  *((_DWORD *)v2 + 6) = 250;
  std::timed_mutex::timed_mutex((std::timed_mutex *)(v2 + 4));
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_BYTE *)this + 152) = 1;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 23) = 0;
  sub_18D0778AC((_QWORD *)this + 24, "");
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *((_QWORD *)this + 27) = v3;
  v5 = MEMORY[0x1E0DE4FB0];
  v6 = MEMORY[0x1E0DE4FB0] + 64;
  *((_QWORD *)this + 79) = MEMORY[0x1E0DE4FB0] + 64;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 216) = v4;
  v7 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 27) - 24) + 216);
  std::ios_base::init(v7, (char *)this + 224);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *((_QWORD *)this + 27) = v5 + 24;
  *((_QWORD *)this + 79) = v6;
  MEMORY[0x18D78B250]((char *)this + 224);
  *((_BYTE *)this + 152) = 1;
  *((_QWORD *)this + 20) = *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFF8 | 1;
  v44 = 0;
  v8 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v8 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = os_log_create(v8, (const char *)v9);
  sub_18D099EC0((uint64_t *)this + 21, 0, 0, (uint64_t)v10);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 1;
  v11 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v11 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = os_log_create(v11, (const char *)v12);
  sub_18D099EC0((uint64_t *)this + 21, 1u, 1, (uint64_t)v13);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 2;
  v14 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v14 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  v16 = os_log_create(v14, (const char *)v15);
  sub_18D099EC0((uint64_t *)this + 21, 2u, 2, (uint64_t)v16);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 3;
  v17 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v17 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  v19 = os_log_create(v17, (const char *)v18);
  sub_18D099EC0((uint64_t *)this + 21, 3u, 3, (uint64_t)v19);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 4;
  v20 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v20 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  v22 = os_log_create(v20, (const char *)v21);
  sub_18D099EC0((uint64_t *)this + 21, 4u, 4, (uint64_t)v22);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 5;
  v23 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v23 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  v25 = os_log_create(v23, (const char *)v24);
  sub_18D099EC0((uint64_t *)this + 21, 5u, 5, (uint64_t)v25);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 8;
  v26 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v26 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  v28 = os_log_create(v26, (const char *)v27);
  sub_18D099EC0((uint64_t *)this + 21, 8u, 8, (uint64_t)v28);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 10;
  v29 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v29 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v30 = __p;
  else
    v30 = (void **)__p[0];
  v31 = os_log_create(v29, (const char *)v30);
  sub_18D099EC0((uint64_t *)this + 21, 0xAu, 10, (uint64_t)v31);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 11;
  v32 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v32 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v33 = __p;
  else
    v33 = (void **)__p[0];
  v34 = os_log_create(v32, (const char *)v33);
  sub_18D099EC0((uint64_t *)this + 21, 0xBu, 11, (uint64_t)v34);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 12;
  v35 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v35 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v36 = __p;
  else
    v36 = (void **)__p[0];
  v37 = os_log_create(v35, (const char *)v36);
  sub_18D099EC0((uint64_t *)this + 21, 0xCu, 12, (uint64_t)v37);
  if (v43 < 0)
    operator delete(__p[0]);
  v44 = 13;
  v38 = (const char *)this;
  if (*((char *)this + 23) < 0)
    v38 = *(const char **)this;
  cnprint::CNPrinter::GetLogCategoryString(&v44, __p);
  if (v43 >= 0)
    v39 = __p;
  else
    v39 = (void **)__p[0];
  v40 = os_log_create(v38, (const char *)v39);
  sub_18D099EC0((uint64_t *)this + 21, 0xDu, 13, (uint64_t)v40);
  if (v43 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_18D098CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  _QWORD *v17;
  _QWORD **v18;

  if (a16 < 0)
    operator delete(__p);
  sub_18D077634(v17);
  if (*(char *)(v16 + 215) < 0)
    operator delete(*a9);
  sub_18D05B5E4(*v18);
  MEMORY[0x18D78B1C0](a10);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(a1);
}

void sub_18D098D5C()
{
  uint64_t v0;

  std::ostream::~ostream();
  MEMORY[0x18D78B550](v0);
  JUMPOUT(0x18D098D20);
}

void sub_18D098D80()
{
  JUMPOUT(0x18D098D34);
}

void sub_18D098D88()
{
  JUMPOUT(0x18D098D44);
}

uint64_t *cnprint::CNPrinter::GetLogCategoryString@<X0>(_WORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  int v4;
  const char *v5;
  uint64_t v6;
  const char *v7;

  result = sub_18D0778AC(a2, "error");
  switch(*a1)
  {
    case 0:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 7;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 7;
      }
      *(_DWORD *)((char *)result + 3) = 1818325605;
      v4 = 1701733735;
      goto LABEL_48;
    case 1:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 18;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 18;
      }
      *((_WORD *)result + 8) = 31090;
      *(_OWORD *)result = *(_OWORD *)"cnbuildinggeometry";
      result = (uint64_t *)((char *)result + 18);
      goto LABEL_62;
    case 2:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 12;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 12;
      }
      *((_DWORD *)result + 2) = 1852795252;
      v5 = "cnestimation";
      goto LABEL_54;
    case 3:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 11;
      }
      *(_DWORD *)((char *)result + 7) = 1802661751;
      *result = *(_QWORD *)"cnframework";
      result = (uint64_t *)((char *)result + 11);
      goto LABEL_62;
    case 4:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 8;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 8;
      }
      v6 = 0x78697274616D6E63;
      goto LABEL_61;
    case 5:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 12;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 12;
      }
      *((_DWORD *)result + 2) = 1852795252;
      v5 = "cnnavigation";
      goto LABEL_54;
    case 6:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 14;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 14;
      }
      qmemcpy(result, "cnplatforminfo", 14);
      result = (uint64_t *)((char *)result + 14);
      goto LABEL_62;
    case 7:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 10;
      }
      *((_WORD *)result + 4) = 27491;
      v7 = "cnplayback";
      goto LABEL_51;
    case 8:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 7;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 7;
      }
      *(_DWORD *)((char *)result + 3) = 1953393010;
      v4 = 1919970915;
LABEL_48:
      *(_DWORD *)result = v4;
      result = (uint64_t *)((char *)result + 7);
      goto LABEL_62;
    case 9:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 10;
      }
      *((_WORD *)result + 4) = 26229;
      v7 = "cnprototuf";
LABEL_51:
      *result = *(_QWORD *)v7;
      result = (uint64_t *)((char *)result + 10);
      goto LABEL_62;
    case 0xA:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 12;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 12;
      }
      *((_DWORD *)result + 2) = 1935894900;
      v5 = "cnstatistics";
LABEL_54:
      *result = *(_QWORD *)v5;
      result = (uint64_t *)((char *)result + 12);
      goto LABEL_62;
    case 0xB:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 8;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 8;
      }
      v6 = 0x726F746365766E63;
      goto LABEL_61;
    case 0xC:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 5;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 5;
      }
      *((_BYTE *)result + 4) = 110;
      *(_DWORD *)result = 1702257010;
      result = (uint64_t *)((char *)result + 5);
      goto LABEL_62;
    case 0xD:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 8;
        result = (uint64_t *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 8;
      }
      v6 = 0x6E75726B63617274;
LABEL_61:
      *result++ = v6;
LABEL_62:
      *(_BYTE *)result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_18D09910C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)(a1 + 216) = *MEMORY[0x1E0DE4F48];
  v4 = a1 + 216;
  *(_QWORD *)(a1 + 216 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x18D78B25C](a1 + 224);
  std::ostream::~ostream();
  MEMORY[0x18D78B550](v4 + 416);
  if (*(char *)(v4 - 1) < 0)
    operator delete(*(void **)(a1 + 192));
  sub_18D05B5E4(*(_QWORD **)(a1 + 176));
  MEMORY[0x18D78B1C0](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *cnprint::CNPrinter::GetLogLevelString@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  int v4;
  int v5;
  int v6;

  result = sub_18D0778AC(a2, "None");
  switch(*a1)
  {
    case 0:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 7;
        result = (_QWORD *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 7;
      }
      *(_DWORD *)((char *)result + 3) = 1702063970;
      v4 = 1651664214;
      goto LABEL_28;
    case 1:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 5;
        result = (_QWORD *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 5;
      }
      *((_BYTE *)result + 4) = 103;
      v6 = 1969382724;
      goto LABEL_33;
    case 2:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 4;
        result = (_QWORD *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 4;
      }
      v5 = 1868983881;
      goto LABEL_25;
    case 3:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 7;
        result = (_QWORD *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 7;
      }
      *(_DWORD *)((char *)result + 3) = 1953264993;
      v4 = 1634100548;
LABEL_28:
      *(_DWORD *)result = v4;
      result = (_QWORD *)((char *)result + 7);
      goto LABEL_34;
    case 4:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 5;
        result = (_QWORD *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 5;
      }
      *((_BYTE *)result + 4) = 114;
      v6 = 1869771333;
      goto LABEL_33;
    case 5:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 5;
        result = (_QWORD *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 5;
      }
      *((_BYTE *)result + 4) = 116;
      v6 = 1819631942;
LABEL_33:
      *(_DWORD *)result = v6;
      result = (_QWORD *)((char *)result + 5);
      goto LABEL_34;
    default:
      if (*a1 != 255)
        return result;
      if (*((char *)result + 23) < 0)
      {
        result[1] = 4;
        result = (_QWORD *)*result;
      }
      else
      {
        *((_BYTE *)result + 23) = 4;
      }
      v5 = 1701736270;
LABEL_25:
      *(_DWORD *)result = v5;
      result = (_QWORD *)((char *)result + 4);
LABEL_34:
      *(_BYTE *)result = 0;
      return result;
  }
}

BOOL sub_18D099368(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

void cnprint::CNPrinter::PrintInternal(uint64_t a1, _WORD *a2, unsigned __int8 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  cnprint::CNPrinter::PrintCore(a1, a2, a3, a4, &a9);
}

void cnprint::CNPrinter::DisableLogStream(cnprint::CNPrinter *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  __int16 v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10;

  cnprint::CNPrinter::GetCNPrinter(a1);
  v2 = dword_1EE061900;
  v10 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v2;
  if (sub_18D03DE74((uint64_t)&stru_1EE061908, &v10))
  {
    v9 = 8;
    v8 = 2;
    cnprint::CNPrinter::PrintInternal((uint64_t)&unk_1EE0618E8, &v9, &v8, "Disabling log stream %zu", v3, v4, v5, v6, *(_QWORD *)a1);
    v7 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 3uLL)
      sub_18D077838("bitset set argument out of range");
    qword_1EE061988 &= ~(1 << v7);
    if (v7 == 1 && qword_1EE061A40 && !std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&qword_1EE0619C0 + *(_QWORD *)(qword_1EE0619C0 - 24)), *(_DWORD *)((char *)&qword_1EE0619C0 + *(_QWORD *)(qword_1EE0619C0 - 24) + 32) | 4);
    std::timed_mutex::unlock(&stru_1EE061908);
  }
}

void cnprint::CNPrinter::EnableLogStream(cnprint::CNPrinter *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  __int16 v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10;

  cnprint::CNPrinter::GetCNPrinter(a1);
  v2 = dword_1EE061900;
  v10 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v2;
  if (sub_18D03DE74((uint64_t)&stru_1EE061908, &v10))
  {
    v7 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 3uLL)
      sub_18D077838("bitset set argument out of range");
    qword_1EE061988 |= 1 << v7;
    v9 = 8;
    v8 = 2;
    cnprint::CNPrinter::PrintInternal((uint64_t)&unk_1EE0618E8, &v9, &v8, "Enabling log stream %zu", v3, v4, v5, v6, v7);
    std::timed_mutex::unlock(&stru_1EE061908);
  }
}

unint64_t cnprint::CNPrinter::IsLogStreamEnabled(cnprint::CNPrinter *a1)
{
  unsigned int v2;
  unint64_t v3;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5;

  cnprint::CNPrinter::GetCNPrinter(a1);
  v2 = dword_1EE061900;
  v5 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v2;
  if (!sub_18D03DE74((uint64_t)&stru_1EE061908, &v5))
    return 0;
  if (*(_QWORD *)a1 >= 3uLL)
    sub_18D077838("bitset test argument out of range");
  v3 = ((unint64_t)qword_1EE061988 >> *(_QWORD *)a1) & 1;
  std::timed_mutex::unlock(&stru_1EE061908);
  return v3;
}

void cnprint::CNPrinter::GetFileLogStreamName(cnprint::CNPrinter *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4;

  cnprint::CNPrinter::GetCNPrinter(this);
  v3 = dword_1EE061900;
  v4 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v3;
  if ((sub_18D03DE74((uint64_t)&stru_1EE061908, &v4) & 1) != 0)
  {
    if (byte_1EE0619BF < 0)
    {
      sub_18D077798((_BYTE *)a2, (void *)xmmword_1EE0619A8, *((unint64_t *)&xmmword_1EE0619A8 + 1));
    }
    else
    {
      *(_OWORD *)a2 = xmmword_1EE0619A8;
      *(_QWORD *)(a2 + 16) = unk_1EE0619B8;
    }
    std::timed_mutex::unlock(&stru_1EE061908);
  }
  else
  {
    sub_18D0778AC((_QWORD *)a2, "");
  }
}

void cnprint::CNPrinter::Print(cnprint::CNPrinter *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (*((char *)a3 + 23) >= 0)
    LOBYTE(v8) = (_BYTE)a3;
  else
    v8 = *a3;
  cnprint::CNPrinter::Print(a1, a2, "%s", a4, a5, a6, a7, a8, v8);
}

void cnprint::CNPrinter::SetFileLogStreamName(cnprint::CNPrinter *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  unsigned __int8 v13;
  __int16 v14;
  unsigned __int8 v15;
  __int16 v16;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v17;

  cnprint::CNPrinter::GetCNPrinter(a1);
  v2 = dword_1EE061900;
  v17 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v2;
  if (sub_18D03DE74((uint64_t)&stru_1EE061908, &v17))
  {
    if (qword_1EE061A40)
    {
      v16 = 8;
      v15 = 2;
      if (byte_1EE0619BF >= 0)
        v7 = &xmmword_1EE0619A8;
      else
        LOBYTE(v7) = xmmword_1EE0619A8;
      cnprint::CNPrinter::PrintInternal((uint64_t)&unk_1EE0618E8, &v16, &v15, "Closing file log stream %s", v3, v4, v5, v6, (char)v7);
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)&qword_1EE0619C0 + *(_QWORD *)(qword_1EE0619C0 - 24)), *(_DWORD *)((char *)&qword_1EE0619C0 + *(_QWORD *)(qword_1EE0619C0 - 24) + 32) | 4);
    }
    std::string::operator=((std::string *)&xmmword_1EE0619A8, (const std::string *)a1);
    v14 = 8;
    v13 = 2;
    if (byte_1EE0619BF >= 0)
      v12 = &xmmword_1EE0619A8;
    else
      LOBYTE(v12) = xmmword_1EE0619A8;
    cnprint::CNPrinter::PrintInternal((uint64_t)&unk_1EE0618E8, &v14, &v13, "Setting file log stream %s", v8, v9, v10, v11, (char)v12);
    std::timed_mutex::unlock(&stru_1EE061908);
  }
}

void cnprint::CNPrinter::SetLogLevel(cnprint::CNPrinter *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  cnprint::CNPrinter::GetCNPrinter(a1);
  v2 = dword_1EE061900;
  __p[0] = (void *)(std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v2);
  if (sub_18D03DE74((uint64_t)&stru_1EE061908, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)__p))
  {
    byte_1EE061980 = *(_BYTE *)a1;
    v11 = 8;
    v10 = 2;
    cnprint::CNPrinter::GetLogLevelString(a1, __p);
    if (v9 >= 0)
      v7 = __p;
    else
      LOBYTE(v7) = __p[0];
    cnprint::CNPrinter::PrintInternal((uint64_t)&unk_1EE0618E8, &v11, &v10, "Setting log level %s", v3, v4, v5, v6, (char)v7);
    if (v9 < 0)
      operator delete(__p[0]);
    std::timed_mutex::unlock(&stru_1EE061908);
  }
}

void sub_18D09997C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cnprint::CNPrinter::WillPrint(cnprint::CNPrinter *a1)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7;

  cnprint::CNPrinter::GetCNPrinter(a1);
  v2 = dword_1EE061900;
  v7 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v2;
  result = sub_18D03DE74((uint64_t)&stru_1EE061908, &v7);
  if ((_DWORD)result)
  {
    v4 = byte_1EE061980;
    std::timed_mutex::unlock(&stru_1EE061908);
    v5 = *(unsigned __int8 *)a1;
    return v5 >= v4 && v5 != 255;
  }
  return result;
}

uint64_t sub_18D099A1C@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = sub_18D099E3C(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

std::string *cnprint::CNLogFormatter::SetLogPrefix(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

char *cnprint::CNLogFormatter::GetLogPrefix@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[47] < 0)
    return (char *)sub_18D077798((_BYTE *)a2, *((void **)this + 3), *((_QWORD *)this + 4));
  *(_OWORD *)a2 = *(_OWORD *)(this + 24);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 5);
  return this;
}

const void **cnprint::CNLogFormatter::FormatGeneral(const void **a1, uint64_t a2)
{
  const char *v2;

  if (*(char *)(a2 + 23) >= 0)
    v2 = (const char *)a2;
  else
    v2 = *(const char **)a2;
  return cnprint::CNLogFormatter::FormatGeneral(a1, "%s", v2);
}

uint64_t cnprint::CNLogFormatter::FormatGeneral(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v3;

  if (*(char *)(a3 + 23) >= 0)
    v3 = (const char *)a3;
  else
    v3 = *(const char **)a3;
  return cnprint::CNLogFormatter::FormatGeneral(a1, a2, "%s", v3);
}

cnprint::CNLogFormatter *cnprint::CNLogFormatter::FormatWarning(cnprint::CNLogFormatter *this, char *a2, ...)
{
  size_t v4;
  void **v5;
  char *v6;
  _QWORD v8[2];
  void *__p[2];
  char v10;
  va_list v11;
  va_list va;

  va_start(va, a2);
  va_copy(v11, va);
  if (*((char *)this + 47) >= 0)
    v4 = *((unsigned __int8 *)this + 47);
  else
    v4 = *((_QWORD *)this + 4);
  v5 = __p;
  sub_18D099E3C((uint64_t)__p, v4 + 10);
  if (v10 < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*((char *)this + 47) >= 0)
      v6 = (char *)this + 24;
    else
      v6 = (char *)*((_QWORD *)this + 3);
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, " WARNING: ");
  v8[0] = 0;
  v8[1] = 0;
  cnprint::CNLogFormatter::FormatCore((uint64_t)this, (const void **)__p, (uint64_t)v8, 0, a2, v11);
  if (v10 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_18D099C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cnprint::CNLogFormatter::FormatWarning(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  size_t v12;
  void **v13;
  const void *v14;
  void *__p[2];
  char v17;
  va_list v18;

  v18 = (va_list)&a9;
  if (*(char *)(a1 + 47) >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = __p;
  sub_18D099E3C((uint64_t)__p, v12 + 10);
  if (v17 < 0)
    v13 = (void **)__p[0];
  if (v12)
  {
    if (*(char *)(a1 + 47) >= 0)
      v14 = (const void *)(a1 + 24);
    else
      v14 = *(const void **)(a1 + 24);
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, " WARNING: ");
  cnprint::CNLogFormatter::FormatCore(a1, (const void **)__p, a2, 1, a3, v18);
  if (v17 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_18D099D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

cnprint::CNLogFormatter *cnprint::CNLogFormatter::FormatWarning(cnprint::CNLogFormatter *a1, uint64_t a2)
{
  const char *v2;

  if (*(char *)(a2 + 23) >= 0)
    v2 = (const char *)a2;
  else
    v2 = *(const char **)a2;
  return cnprint::CNLogFormatter::FormatWarning(a1, "%s", v2);
}

uint64_t cnprint::CNLogFormatter::FormatWarning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (*(char *)(a3 + 23) >= 0)
    v8 = a3;
  else
    v8 = *(_QWORD *)a3;
  return cnprint::CNLogFormatter::FormatWarning(a1, a2, "%s", a4, a5, a6, a7, a8, v8);
}

std::string *sub_18D099E08(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_18D05E7C4(a1, __s, v4);
}

uint64_t sub_18D099E3C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_18D076D60();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_18D099EC0(uint64_t *result, unsigned __int16 a2, __int16 a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  unsigned int v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = result;
  v8 = (uint64_t **)(result + 1);
  v7 = result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (_QWORD *)v7;
        v10 = *(unsigned __int16 *)(v7 + 32);
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = (uint64_t **)v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = (uint64_t **)(v9 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = result + 1;
LABEL_9:
    v11 = operator new(0x30uLL);
    v11[16] = a3;
    *((_QWORD *)v11 + 5) = a4;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v9;
    *v8 = (uint64_t *)v11;
    v12 = *(_QWORD *)*v6;
    if (v12)
    {
      *v6 = v12;
      v13 = *v8;
    }
    else
    {
      v13 = (uint64_t *)v11;
    }
    result = sub_18D083D78((uint64_t *)v6[1], v13);
    ++v6[2];
  }
  return result;
}

uint64_t sub_18D099F88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_18D09A04C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D78B550](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D09A074(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D78B550](a1 + 112);
  return a1;
}

void CNPlatformInfo::CNPlatformInfo(CNPlatformInfo *this, const CoreNavigation::CLP::LogEntry::Raven::RavenPlatformInfo *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 v14;
  __int16 v15;
  unsigned __int8 v16;
  __int16 v17;

  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = 0;
  v4 = (std::string *)((char *)this + 8);
  sub_18D0778AC((_QWORD *)this + 1, "");
  sub_18D0778AC((_QWORD *)this + 4, "");
  *((_QWORD *)this + 7) = 0;
  v10 = *((_DWORD *)a2 + 4);
  v11 = 0;
  switch(v10)
  {
    case 0:
      v17 = 6;
      v16 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "ConvertProtobufToPlatformInfoObject encountered the HW_PROTOBUF_DEFAULT type that it cannot convert: %d", v5, v6, v7, v8, v9, 0);
      goto LABEL_3;
    case 1:
      goto LABEL_4;
    case 2:
      v11 = 1;
      goto LABEL_4;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 50:
    case 55:
    case 57:
    case 58:
      v15 = 0;
      v14 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "ConvertProtobufToPlatformInfoObject encountered an unhandled hardware type: %d", v5, v6, v7, v8, v9, v10);
LABEL_3:
      v11 = 0;
      goto LABEL_4;
    case 8:
      v11 = 2;
      goto LABEL_4;
    case 9:
      v11 = 3;
      goto LABEL_4;
    case 10:
      v11 = 4;
      goto LABEL_4;
    case 11:
      v11 = 5;
      goto LABEL_4;
    case 12:
      v11 = 6;
      goto LABEL_4;
    case 13:
      v11 = 7;
      goto LABEL_4;
    case 14:
      v11 = 8;
      goto LABEL_4;
    case 15:
      v11 = 9;
      goto LABEL_4;
    case 16:
      v11 = 10;
      goto LABEL_4;
    case 17:
      v11 = 11;
      goto LABEL_4;
    case 18:
      v11 = 12;
      goto LABEL_4;
    case 19:
      v11 = 13;
      goto LABEL_4;
    case 20:
      v11 = 14;
      goto LABEL_4;
    case 21:
      v11 = 15;
      goto LABEL_4;
    case 22:
      v11 = 16;
      goto LABEL_4;
    case 23:
      v11 = 17;
      goto LABEL_4;
    case 24:
      v11 = 18;
      goto LABEL_4;
    case 25:
      v11 = 19;
      goto LABEL_4;
    case 26:
      v11 = 20;
      goto LABEL_4;
    case 27:
      v11 = 21;
      goto LABEL_4;
    case 28:
      v11 = 22;
      goto LABEL_4;
    case 29:
      v11 = 23;
      goto LABEL_4;
    case 30:
      v11 = 24;
      goto LABEL_4;
    case 31:
      v11 = 25;
      goto LABEL_4;
    case 32:
      v11 = 26;
      goto LABEL_4;
    case 33:
      v11 = 27;
      goto LABEL_4;
    case 34:
      v11 = 28;
      goto LABEL_4;
    case 35:
      v11 = 29;
      goto LABEL_4;
    case 36:
      v11 = 30;
      goto LABEL_4;
    case 37:
      v11 = 31;
      goto LABEL_4;
    case 38:
      v11 = 32;
      goto LABEL_4;
    case 39:
      v11 = 33;
      goto LABEL_4;
    case 40:
      v11 = 34;
      goto LABEL_4;
    case 41:
      v11 = 35;
      goto LABEL_4;
    case 42:
      v11 = 36;
      goto LABEL_4;
    case 43:
      v11 = 37;
      goto LABEL_4;
    case 44:
      v11 = 38;
      goto LABEL_4;
    case 45:
      v11 = 39;
      goto LABEL_4;
    case 46:
      v11 = 42;
      goto LABEL_4;
    case 47:
      v11 = 40;
      goto LABEL_4;
    case 51:
      v11 = 41;
      goto LABEL_4;
    case 52:
      v11 = 43;
      goto LABEL_4;
    case 53:
      v11 = 44;
      goto LABEL_4;
    case 54:
      v11 = 45;
      goto LABEL_4;
    case 56:
      v11 = 46;
      goto LABEL_4;
    case 59:
      v11 = 47;
      goto LABEL_4;
    case 60:
      v11 = 48;
      goto LABEL_4;
    case 61:
      v11 = 49;
      goto LABEL_4;
    case 62:
      v11 = 50;
      goto LABEL_4;
    case 63:
      v11 = 51;
      goto LABEL_4;
    case 64:
      v11 = 52;
      goto LABEL_4;
    case 65:
      v11 = 53;
      goto LABEL_4;
    case 66:
      v11 = 56;
      goto LABEL_4;
    case 67:
      v11 = 57;
      goto LABEL_4;
    case 68:
      v11 = 54;
      goto LABEL_4;
    case 69:
      v11 = 55;
      goto LABEL_4;
    case 70:
      v11 = 58;
      goto LABEL_4;
    case 71:
      v11 = 59;
      goto LABEL_4;
    case 72:
      v11 = 60;
      goto LABEL_4;
    case 73:
      v11 = 61;
      goto LABEL_4;
    case 74:
      v11 = 62;
      goto LABEL_4;
    case 75:
      v11 = 63;
      goto LABEL_4;
    case 76:
      v11 = 64;
      goto LABEL_4;
    case 77:
      v11 = 65;
      goto LABEL_4;
    case 78:
      v11 = 66;
      goto LABEL_4;
    case 79:
      v11 = 67;
      goto LABEL_4;
    case 80:
      v11 = 68;
      goto LABEL_4;
    case 81:
      v11 = 69;
      goto LABEL_4;
    case 82:
      v11 = 70;
      goto LABEL_4;
    case 83:
      v11 = 71;
      goto LABEL_4;
    case 84:
      v11 = 72;
      goto LABEL_4;
    case 85:
      v11 = 73;
      goto LABEL_4;
    case 86:
      v11 = 74;
      goto LABEL_4;
    case 100:
      v11 = 75;
LABEL_4:
      *(_WORD *)this = v11;
      break;
    default:
      break;
  }
  *((_BYTE *)this + 2) = *((_BYTE *)a2 + 20);
  std::string::operator=(v4, *((const std::string **)a2 + 3));
  std::string::operator=((std::string *)((char *)this + 32), *((const std::string **)a2 + 4));
  v12 = *((_DWORD *)a2 + 10);
  if (v12 <= 3)
    *((_DWORD *)this + 14) = v12;
  v13 = *((_DWORD *)a2 + 11);
  if (v13 <= 2)
    *((_DWORD *)this + 15) = v13;
}

void sub_18D09A480(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t CNPlatformInfo::CNPlatformInfo(uint64_t a1, __int16 a2, char a3, __int128 *a4, __int128 *a5, int a6, int a7)
{
  __int128 v11;
  _BYTE *v12;
  __int128 v13;

  *(_WORD *)a1 = a2;
  *(_BYTE *)(a1 + 2) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_18D077798((_BYTE *)(a1 + 8), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 8) = v11;
  }
  v12 = (_BYTE *)(a1 + 32);
  if (*((char *)a5 + 23) < 0)
  {
    sub_18D077798(v12, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v13 = *a5;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a5 + 2);
    *(_OWORD *)v12 = v13;
  }
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 60) = a7;
  return a1;
}

void sub_18D09A55C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

BOOL CNPlatformInfo::IsHardwareSupportedGnssL1L5(CNPlatformInfo *this)
{
  return *((_DWORD *)this + 15) == 2;
}

uint64_t CNPlatformInfo::GetGnssChipset(CNPlatformInfo *this)
{
  unsigned int v1;

  v1 = *(unsigned __int16 *)this - 2;
  if (v1 > 0x49)
    return 0;
  else
    return dword_18D30CBE0[(__int16)v1];
}

BOOL CNPlatformInfo::IsValid(CNPlatformInfo *this)
{
  return *(unsigned __int16 *)this >= 2u && *((_DWORD *)this + 14) && *((_DWORD *)this + 15) != 0;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_ShutdownFile_CoreNavigationCLPRayTracingTilesAvailability_2eproto(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *this)
{
  uint64_t result;

  if (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_);
  result = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_;
  if (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_
                                              + 8))(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_);
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto_impl(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);

  wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreNavigation/shared/cnprotobuf/CoreNavigationCLPRayTracingTilesAvailability.pb.cc", a4);
  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E25BF5C0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_ = (uint64_t)v4;
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E25BF368;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::default_instance_ = (uint64_t)v5;
  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E25BF3E0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::default_instance_ = (uint64_t)v6;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E25BF548;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 36) = 0u;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_ = v7;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E25BF2F0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_ = (uint64_t)v8;
  v9 = (_QWORD *)operator new();
  *v9 = &off_1E25BF278;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_ = (uint64_t)v9;
  v10 = (_QWORD *)operator new();
  *(_QWORD *)((char *)v10 + 36) = 0;
  *v10 = &off_1E25BF458;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_ = (uint64_t)v10;
  v11 = operator new();
  *(_QWORD *)(v11 + 48) = 0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_ = v11;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  v12 = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_;
  *(_DWORD *)(v11 + 40) = 0;
  *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_ + 8) = v11;
  *(_QWORD *)(v12 + 8) = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::default_instance_;
  v13 = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_;
  v14 = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_;
  *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_ + 8) = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_;
  *(_QWORD *)(v13 + 16) = v14;
  *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_
            + 8) = v13;
  v15 = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::default_instance_;
  *(_QWORD *)v11 = &off_1E25BF4D0;
  *(_QWORD *)(v11 + 8) = v15;
  *(_QWORD *)(v11 + 16) = v12;
  return wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_ShutdownFile_CoreNavigationCLPRayTracingTilesAvailability_2eproto, v16);
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::LogEntry(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E25BF5C0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E25BF5C0;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::AvailabilityFileTimestamp(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E25BF368;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E25BF368;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::AvailabilityFileCommonHeader(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E25BF3E0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E25BF3E0;
  return this;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::RayTracingTilesAvailabilityHeader(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF548;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF548;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::LatLonGeodetic(_QWORD *this)
{
  *this = &off_1E25BF2F0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E25BF2F0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::BoundingBox(_QWORD *this)
{
  *this = &off_1E25BF278;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E25BF278;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::RegionSpecificAvailableTiles(uint64_t this)
{
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)this = &off_1E25BF458;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)this = &off_1E25BF458;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::RayTracingTilesAvailabilityData(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF4D0;
  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF4D0;
  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::InitAsDefaultInstance(uint64_t this)
{
  uint64_t v1;

  v1 = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_;
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_;
  *(_QWORD *)(this + 16) = v1;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::InitAsDefaultInstance(uint64_t this)
{
  uint64_t v1;

  v1 = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_;
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::default_instance_;
  *(_QWORD *)(this + 16) = v1;
  return this;
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E0DE8448] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto_impl;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18D09AA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::LogEntry(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E25BF5C0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::MergeFrom(this, a2);
  return this;
}

void sub_18D09AAD0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::MergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *a2)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *v3;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *v4;
  const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *v5;
  _BYTE v6[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    *((_DWORD *)v3 + 5) |= 1u;
    v4 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)*((_QWORD *)v3 + 1);
    if (!v4)
    {
      this = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *)operator new();
      v4 = this;
      *(_QWORD *)this = &off_1E25BF4D0;
      *((_QWORD *)this + 6) = 0;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *((_DWORD *)this + 10) = 0;
      *((_QWORD *)v3 + 1) = this;
    }
    v5 = (const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)*((_QWORD *)a2 + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
      v5 = *(const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_ + 8);
    }
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::MergeFrom(v4, v5);
  }
}

void sub_18D09ABD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::~LogEntry(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E25BF5C0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::~LogEntry(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::SharedDtor(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this)
{
  uint64_t v2;

  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::New(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E25BF5C0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if ((*(_BYTE *)(this + 20) & 1) != 0)
  {
    this = *(_QWORD *)(this + 8);
    if (this)
      this = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::Clear(this);
  }
  *(_DWORD *)(v1 + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 52);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 52) & 1) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 20))
          *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 20) = 0;
        v2 = *(_DWORD *)(this + 52);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
        this = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::Clear(this);
    }
  }
  if (*(int *)(v1 + 32) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;
  unsigned int v14;

  while (1)
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *((_DWORD *)this + 5) |= 1u;
      v6 = *((_QWORD *)this + 1);
      if (!v6)
      {
        v6 = operator new();
        *(_QWORD *)v6 = &off_1E25BF4D0;
        *(_QWORD *)(v6 + 48) = 0;
        *(_OWORD *)(v6 + 8) = 0u;
        *(_OWORD *)(v6 + 24) = 0u;
        *(_DWORD *)(v6 + 40) = 0;
        *((_QWORD *)this + 1) = v6;
      }
      v14 = 0;
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v14))
          return 0;
      }
      else
      {
        v14 = *v7;
        *((_QWORD *)a2 + 1) = v7 + 1;
      }
      v8 = *((_DWORD *)a2 + 14);
      v9 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v8 + 1;
      if (v8 >= v9)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)v6, a2)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v10 = *((_DWORD *)a2 + 14);
      v11 = __OFSUB__(v10, 1);
      v12 = v10 - 1;
      if (v12 < 0 == v11)
        *((_DWORD *)a2 + 14) = v12;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if ((*(_BYTE *)(this + 20) & 1) != 0)
  {
    v5 = *(_QWORD *)(this + 8);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)this);
      v5 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_ + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::ByteSize(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this)
{
  uint64_t result;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v3 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)*((_QWORD *)this + 1);
    if (!v3)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(0);
      v3 = *(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::default_instance_ + 8);
    }
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::ByteSize(v3);
    v5 = (int)v4;
    if (v4 >= 0x80)
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    else
      v6 = 1;
    result = (v5 + v6 + 1);
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::MergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *a2)
{
  uint64_t v4;
  uint64_t v5;
  const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *v14;
  const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *v15;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *v16;
  const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *v17;
  _BYTE v18[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  v4 = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)((char *)this + 24));
  if (*((int *)a2 + 8) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles **)(*((_QWORD *)a2 + 3) + 8 * v5);
      v7 = *((_DWORD *)this + 9);
      v8 = *((int *)this + 8);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)((char *)this + 24));
          v7 = *((_DWORD *)this + 9);
        }
        *((_DWORD *)this + 9) = v7 + 1;
        v10 = operator new();
        *(_DWORD *)(v10 + 36) = 0;
        *(_DWORD *)(v10 + 40) = 0;
        *(_QWORD *)v10 = &off_1E25BF458;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        v11 = *((_QWORD *)this + 3);
        v12 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 3);
        *((_DWORD *)this + 8) = v8 + 1;
        v10 = *(_QWORD *)(v9 + 8 * v8);
      }
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::MergeFrom((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *)v10, v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 8));
  }
  LOBYTE(v13) = *((_BYTE *)a2 + 52);
  if ((_BYTE)v13)
  {
    if ((*((_BYTE *)a2 + 52) & 1) != 0)
    {
      *((_DWORD *)this + 13) |= 1u;
      v14 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *)*((_QWORD *)this + 1);
      if (!v14)
      {
        v4 = operator new();
        v14 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *)v4;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(v4 + 16) = 0;
        *(_QWORD *)v4 = &off_1E25BF3E0;
        *((_QWORD *)this + 1) = v4;
      }
      v15 = (const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *)*((_QWORD *)a2 + 1);
      if (!v15)
      {
        CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)v4);
        v15 = *(const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_ + 8);
      }
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::MergeFrom(v14, v15);
      v13 = *((_DWORD *)a2 + 13);
    }
    if ((v13 & 2) != 0)
    {
      *((_DWORD *)this + 13) |= 2u;
      v16 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)*((_QWORD *)this + 2);
      if (!v16)
      {
        v4 = operator new();
        v16 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)v4;
        *(_QWORD *)v4 = &off_1E25BF548;
        *(_OWORD *)(v4 + 8) = 0u;
        *(_OWORD *)(v4 + 24) = 0u;
        *(_OWORD *)(v4 + 36) = 0u;
        *((_QWORD *)this + 2) = v4;
      }
      v17 = (const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)*((_QWORD *)a2 + 2);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)v4);
        v17 = *(const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_ + 16);
      }
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::MergeFrom(v16, v17);
    }
  }
}

void sub_18D09B2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::CopyFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *))(*(_QWORD *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::IsInitialized(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *a2)
{
  uint64_t v2;

  if (a2 != (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.RayTracingTilesAvailability.LogEntry");
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::AvailabilityFileTimestamp(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E25BF368;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::MergeFrom(this, a2);
  return this;
}

void sub_18D09B3F4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::MergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *a2)
{
  double result;
  _BYTE v5[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_DWORD *)this + 5) |= 1u;
    *((double *)this + 1) = result;
  }
  return result;
}

void sub_18D09B490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::~AvailabilityFileTimestamp(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this)
{
  *(_QWORD *)this = &off_1E25BF368;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::~AvailabilityFileTimestamp(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::default_instance(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::New(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E25BF368;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  uint64_t result;
  unint64_t v7;

  do
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v4 + 1;
      }
      if ((_DWORD)TagFallback != 9)
        break;
      v7 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v7) & 1) == 0)
        return 0;
      *((_QWORD *)this + 1) = v7;
      *((_DWORD *)this + 5) |= 1u;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if ((*(_BYTE *)(this + 20) & 1) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::ByteSize(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this)
{
  uint64_t v1;

  v1 = ((int)(*((_DWORD *)this + 5) << 31) >> 31) & 9;
  *((_DWORD *)this + 4) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::CopyFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::IsInitialized(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::Swap(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *this, CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *a2)
{
  double result;
  int v3;
  int v4;

  if (a2 != this)
  {
    result = *((double *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((double *)a2 + 1) = result;
    v3 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
    v4 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
  }
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.RayTracingTilesAvailability.AvailabilityFileTimestamp");
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::AvailabilityFileCommonHeader(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E25BF3E0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::MergeFrom(this, a2);
  return this;
}

void sub_18D09B7EC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::MergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *a2)
{
  int v4;
  int v5;
  int v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 20);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 20) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_DWORD *)a2 + 3);
      *((_DWORD *)this + 5) |= 2u;
      *((_DWORD *)this + 3) = v6;
    }
  }
}

void sub_18D09B8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::~AvailabilityFileCommonHeader(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this)
{
  *(_QWORD *)this = &off_1E25BF3E0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::~AvailabilityFileCommonHeader(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::default_instance(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::New(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E25BF3E0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v6;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *v4 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)a2 + 1) = v12;
      }
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        v10 = v12 + 1;
        *((_QWORD *)a2 + 1) = v10;
LABEL_24:
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v13 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v10;
          v13 = (unsigned __int8 *)(v10 + 1);
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 5) |= 2u;
        if (v13 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::ByteSize(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;

  v2 = *((_BYTE *)this + 20);
  if (v2)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v4 >= 0x80)
      {
        v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0)
          goto LABEL_14;
      }
      else
      {
        v3 = 2;
        if ((v2 & 2) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      v3 = 0;
      if ((*((_BYTE *)this + 20) & 2) == 0)
        goto LABEL_14;
    }
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v5 >= 0x80)
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    else
      v6 = 2;
    v3 = (v6 + v3);
  }
  else
  {
    v3 = 0;
  }
LABEL_14:
  *((_DWORD *)this + 4) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::CopyFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *))(*(_QWORD *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::IsInitialized(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::Swap(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *this, CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.RayTracingTilesAvailability.AvailabilityFileCommonHeader");
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::SharedCtor(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::RayTracingTilesAvailabilityHeader(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *a2)
{
  *(_QWORD *)this = &off_1E25BF548;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::MergeFrom(this, a2);
  return this;
}

void sub_18D09BD94(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::MergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *a2)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *v3;
  int v4;
  int v5;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *v6;
  const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BYTE v14[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 48);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 48) & 1) != 0)
    {
      *((_DWORD *)v3 + 12) |= 1u;
      v6 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *)*((_QWORD *)v3 + 1);
      if (!v6)
      {
        this = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)operator new();
        v6 = this;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        *(_QWORD *)this = &off_1E25BF368;
        *((_QWORD *)v3 + 1) = this;
      }
      v7 = (const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *)*((_QWORD *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
        v7 = *(const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_ + 8);
      }
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::MergeFrom(v6, v7);
      v4 = *((_DWORD *)a2 + 12);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_20;
      }
    }
    else if ((*((_BYTE *)a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *((_DWORD *)a2 + 4);
    *((_DWORD *)v3 + 12) |= 2u;
    *((_DWORD *)v3 + 4) = v8;
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
LABEL_20:
    v9 = *((_DWORD *)a2 + 5);
    *((_DWORD *)v3 + 12) |= 4u;
    *((_DWORD *)v3 + 5) = v9;
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
LABEL_21:
    v10 = *((_DWORD *)a2 + 6);
    *((_DWORD *)v3 + 12) |= 8u;
    *((_DWORD *)v3 + 6) = v10;
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_23;
    }
LABEL_22:
    v11 = *((_DWORD *)a2 + 7);
    *((_DWORD *)v3 + 12) |= 0x10u;
    *((_DWORD *)v3 + 7) = v11;
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 0x20) == 0)
    {
LABEL_10:
      if ((v4 & 0x40) == 0)
        goto LABEL_11;
      goto LABEL_24;
    }
LABEL_23:
    v12 = *((_DWORD *)a2 + 8);
    *((_DWORD *)v3 + 12) |= 0x20u;
    *((_DWORD *)v3 + 8) = v12;
    v4 = *((_DWORD *)a2 + 12);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0)
        return;
      goto LABEL_12;
    }
LABEL_24:
    v13 = *((_DWORD *)a2 + 9);
    *((_DWORD *)v3 + 12) |= 0x40u;
    *((_DWORD *)v3 + 9) = v13;
    if ((*((_DWORD *)a2 + 12) & 0x80) == 0)
      return;
LABEL_12:
    v5 = *((_DWORD *)a2 + 10);
    *((_DWORD *)v3 + 12) |= 0x80u;
    *((_DWORD *)v3 + 10) = v5;
  }
}

void sub_18D09BF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::~RayTracingTilesAvailabilityHeader(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E25BF548;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::~RayTracingTilesAvailabilityHeader(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::SharedDtor(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this)
{
  uint64_t v2;

  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::New(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BF548;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 36) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::Clear(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 48))
  {
    if ((*(_BYTE *)(this + 48) & 1) != 0)
    {
      v1 = *(_QWORD *)(this + 8);
      if (v1)
      {
        if (*(_BYTE *)(v1 + 20))
          *(_QWORD *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_DWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 32) = 0;
  }
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  uint64_t TagFallback;
  int v13;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t result;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  unsigned int v38;

  v4 = (unsigned int *)((char *)this + 16);
  v5 = (unsigned int *)((char *)this + 20);
  v6 = (unsigned int *)((char *)this + 24);
  v7 = (unsigned int *)((char *)this + 28);
  v8 = (unsigned int *)((char *)this + 32);
  v9 = (unsigned int *)((char *)this + 36);
  v10 = (unsigned int *)((char *)this + 40);
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_28;
        *((_DWORD *)this + 12) |= 1u;
        v14 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *)*((_QWORD *)this + 1);
        if (!v14)
        {
          v14 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp *)operator new();
          *((_QWORD *)v14 + 1) = 0;
          *((_QWORD *)v14 + 2) = 0;
          *(_QWORD *)v14 = &off_1E25BF368;
          *((_QWORD *)this + 1) = v14;
        }
        v38 = 0;
        v15 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v38))return 0;
        }
        else
        {
          v38 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        v24 = *((_DWORD *)a2 + 14);
        v25 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileTimestamp::MergePartialFromCodedStream(v14, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v26 = *((_DWORD *)a2 + 14);
        v27 = __OFSUB__(v26, 1);
        v28 = v26 - 1;
        if (v28 < 0 == v27)
          *((_DWORD *)a2 + 14) = v28;
        v29 = (_BYTE *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v29 >= v16 || *v29 != 16)
          continue;
        v17 = v29 + 1;
        *((_QWORD *)a2 + 1) = v17;
        goto LABEL_41;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
LABEL_41:
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v4 = *v17;
          v30 = v17 + 1;
          *((_QWORD *)a2 + 1) = v30;
        }
        *((_DWORD *)this + 12) |= 2u;
        if ((unint64_t)v30 >= v16 || *v30 != 24)
          continue;
        v18 = v30 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_49:
        if ((unint64_t)v18 >= v16 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v18;
          v32 = v18 + 1;
          *((_QWORD *)a2 + 1) = v32;
        }
        *((_DWORD *)this + 12) |= 4u;
        if ((unint64_t)v32 >= v16 || *v32 != 32)
          continue;
        v19 = v32 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_57:
        if ((unint64_t)v19 >= v16 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v6 = *v19;
          v33 = v19 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *((_DWORD *)this + 12) |= 8u;
        if ((unint64_t)v33 >= v16 || *v33 != 40)
          continue;
        v20 = v33 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_65:
        if ((unint64_t)v20 >= v16 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v34 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v20;
          v34 = v20 + 1;
          *((_QWORD *)a2 + 1) = v34;
        }
        *((_DWORD *)this + 12) |= 0x10u;
        if ((unint64_t)v34 >= v16 || *v34 != 48)
          continue;
        v21 = v34 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_73:
        if ((unint64_t)v21 >= v16 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v8 = *v21;
          v35 = v21 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 12) |= 0x20u;
        if ((unint64_t)v35 >= v16 || *v35 != 56)
          continue;
        v22 = v35 + 1;
        *((_QWORD *)a2 + 1) = v22;
LABEL_81:
        if ((unint64_t)v22 >= v16 || *v22 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v9 = *v22;
          v36 = v22 + 1;
          *((_QWORD *)a2 + 1) = v36;
        }
        *((_DWORD *)this + 12) |= 0x40u;
        if ((unint64_t)v36 >= v16 || *v36 != 64)
          continue;
        v23 = v36 + 1;
        *((_QWORD *)a2 + 1) = v23;
LABEL_89:
        if ((unint64_t)v23 >= v16 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v10);
          if (!(_DWORD)result)
            return result;
          v37 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v10 = *v23;
          v37 = (unsigned __int8 *)(v23 + 1);
          *((_QWORD *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 12) |= 0x80u;
        if (v37 != (unsigned __int8 *)v16 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_49;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_57;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_65;
      case 6u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_73;
      case 7u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v22 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_81;
      case 8u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_89;
      default:
        v13 = TagFallback & 7;
LABEL_28:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 48);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)this);
      v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_
                     + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = v5[12];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  v6 = v5[12];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  v6 = v5[12];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], (uint64_t)a2, a4);
  v6 = v5[12];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], (uint64_t)a2, a4);
  v6 = v5[12];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], (uint64_t)a2, a4);
  v6 = v5[12];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[10], (uint64_t)a2, a4);
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], (uint64_t)a2, a4);
  if ((v5[12] & 0x80) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[10], (uint64_t)a2, a4);
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::ByteSize(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;

  LOBYTE(v2) = *((_BYTE *)this + 48);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_44;
  }
  if ((*((_BYTE *)this + 48) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 48) & 2) == 0)
      goto LABEL_13;
    goto LABEL_9;
  }
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
    v4 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::default_instance_
                   + 8);
  }
  v5 = ((int)(*(_DWORD *)(v4 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(v4 + 16) = v5;
  v3 = v5 | 2u;
  v2 = *((_DWORD *)this + 12);
  if ((v2 & 2) != 0)
  {
LABEL_9:
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
      v2 = *((_DWORD *)this + 12);
    }
    else
    {
      v7 = 2;
    }
    v3 = (v7 + v3);
  }
LABEL_13:
  if ((v2 & 4) != 0)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      v2 = *((_DWORD *)this + 12);
    }
    else
    {
      v9 = 2;
    }
    v3 = (v9 + v3);
    if ((v2 & 8) == 0)
    {
LABEL_15:
      if ((v2 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_28;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_15;
  }
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v10 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
    v2 = *((_DWORD *)this + 12);
  }
  else
  {
    v11 = 2;
  }
  v3 = (v11 + v3);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_28:
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
    v2 = *((_DWORD *)this + 12);
  }
  else
  {
    v13 = 2;
  }
  v3 = (v13 + v3);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_32:
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
    v2 = *((_DWORD *)this + 12);
  }
  else
  {
    v15 = 2;
  }
  v3 = (v15 + v3);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_44;
    goto LABEL_40;
  }
LABEL_36:
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
  if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
    v2 = *((_DWORD *)this + 12);
  }
  else
  {
    v17 = 2;
  }
  v3 = (v17 + v3);
  if ((v2 & 0x80) != 0)
  {
LABEL_40:
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v18 >= 0x80)
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    else
      v19 = 2;
    v3 = (v19 + v3);
  }
LABEL_44:
  *((_DWORD *)this + 11) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::CopyFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *))(*(_QWORD *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::IsInitialized(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *a2)
{
  uint64_t v2;

  if (a2 != (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v2;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.RayTracingTilesAvailability.RayTracingTilesAvailabilityHeader");
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::LatLonGeodetic(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *a2)
{
  *(_QWORD *)this = &off_1E25BF2F0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergeFrom(this, a2);
  return this;
}

void sub_18D09CAD4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *a2)
{
  double result;
  int v5;
  _BYTE v6[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      result = *((double *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      *((double *)this + 1) = result;
      v5 = *((_DWORD *)a2 + 7);
    }
    if ((v5 & 2) != 0)
    {
      result = *((double *)a2 + 2);
      *((_DWORD *)this + 7) |= 2u;
      *((double *)this + 2) = result;
    }
  }
  return result;
}

void sub_18D09CB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::~LatLonGeodetic(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this)
{
  *(_QWORD *)this = &off_1E25BF2F0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::~LatLonGeodetic(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::New(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E25BF2F0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 28))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  _BYTE *v7;
  uint64_t result;
  unint64_t v9;

  do
  {
    while (1)
    {
      while (1)
      {
        v4 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v4 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v6 = TagFallback & 7;
        if (v6 != 1)
          goto LABEL_21;
        v9 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v9) & 1) == 0)
          return 0;
        *((_QWORD *)this + 1) = v9;
        *((_DWORD *)this + 7) |= 1u;
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v7 < *((_QWORD *)a2 + 2) && *v7 == 17)
        {
          *((_QWORD *)a2 + 1) = v7 + 1;
          goto LABEL_15;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        v6 = TagFallback & 7;
        goto LABEL_21;
      }
      v6 = TagFallback & 7;
      if (v6 == 1)
        break;
LABEL_21:
      if (v6 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
LABEL_15:
    v9 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v9) & 1) == 0)
      return 0;
    *((_QWORD *)this + 2) = v9;
    *((_DWORD *)this + 7) |= 2u;
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 28);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v4 + 16), a3);
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::ByteSize(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((unsigned __int8 *)this + 28);
  if (*((_BYTE *)this + 28))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::CopyFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::IsInitialized(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::Swap(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *this, CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *a2)
{
  uint64_t v2;
  double result;
  int v4;
  int v5;

  if (a2 != this)
  {
    v2 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    result = *((double *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((double *)a2 + 2) = result;
    v4 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v4;
    v5 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v5;
  }
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.RayTracingTilesAvailability.LatLonGeodetic");
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::BoundingBox(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *a2)
{
  *(_QWORD *)this = &off_1E25BF278;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::MergeFrom(this, a2);
  return this;
}

void sub_18D09CFC4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::MergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *a2)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *v3;
  double result;
  int v5;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *v6;
  const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *v7;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *v8;
  const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *v9;
  _BYTE v10[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      *((_DWORD *)v3 + 7) |= 1u;
      v6 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *)*((_QWORD *)v3 + 1);
      if (!v6)
      {
        this = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)operator new();
        v6 = this;
        *(_QWORD *)this = &off_1E25BF2F0;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)v3 + 1) = this;
      }
      v7 = (const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *)*((_QWORD *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
        v7 = *(const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_
                                                                                                  + 8);
      }
      result = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergeFrom(v6, v7);
      v5 = *((_DWORD *)a2 + 7);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 7) |= 2u;
      v8 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *)*((_QWORD *)v3 + 2);
      if (!v8)
      {
        this = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)operator new();
        v8 = this;
        *(_QWORD *)this = &off_1E25BF2F0;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)v3 + 2) = this;
      }
      v9 = (const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *)*((_QWORD *)a2 + 2);
      if (!v9)
      {
        CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
        v9 = *(const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_
                                                                                                  + 16);
      }
      return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergeFrom(v8, v9);
    }
  }
  return result;
}

void sub_18D09D128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::~BoundingBox(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this)
{
  *(_QWORD *)this = &off_1E25BF278;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::~BoundingBox(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::SharedDtor(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this)
{
  uint64_t v2;
  uint64_t v3;

  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::New(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E25BF278;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  LOBYTE(v1) = *(_BYTE *)(this + 28);
  if ((_BYTE)v1)
  {
    if ((*(_BYTE *)(this + 28) & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 28))
        {
          *(_QWORD *)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 28) = 0;
        v1 = *(_DWORD *)(this + 28);
      }
    }
    if ((v1 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 28))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 28) = 0;
      }
    }
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  _BYTE *v14;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v4 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v4 >= *((_QWORD *)a2 + 2) || *v4 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v4 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_17;
        *((_DWORD *)this + 7) |= 1u;
        v7 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *)*((_QWORD *)this + 1);
        if (!v7)
        {
          v7 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *)operator new();
          *(_QWORD *)v7 = &off_1E25BF2F0;
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 3) = 0;
          *((_QWORD *)this + 1) = v7;
        }
        v22 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v22))return 0;
        }
        else
        {
          v22 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        v9 = *((_DWORD *)a2 + 14);
        v10 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v9 + 1;
        if (v9 >= v10)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergePartialFromCodedStream(v7, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v11 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v11, 1);
        v13 = v11 - 1;
        if (v13 < 0 == v12)
          *((_DWORD *)a2 + 14) = v13;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 < *((_QWORD *)a2 + 2) && *v14 == 18)
        {
          *((_QWORD *)a2 + 1) = v14 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v6 = TagFallback & 7;
      if (v6 != 2)
        goto LABEL_17;
LABEL_29:
      *((_DWORD *)this + 7) |= 2u;
      v15 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *)*((_QWORD *)this + 2);
      if (!v15)
      {
        v15 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic *)operator new();
        *(_QWORD *)v15 = &off_1E25BF2F0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = 0;
        *((_QWORD *)this + 2) = v15;
      }
      v23 = 0;
      v16 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23))
          return 0;
      }
      else
      {
        v23 = *v16;
        *((_QWORD *)a2 + 1) = v16 + 1;
      }
      v17 = *((_DWORD *)a2 + 14);
      v18 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v17 + 1;
      if (v17 >= v18)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LatLonGeodetic::MergePartialFromCodedStream(v15, a2)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v19 = *((_DWORD *)a2 + 14);
      v12 = __OFSUB__(v19, 1);
      v20 = v19 - 1;
      if (v20 < 0 == v12)
        *((_DWORD *)a2 + 14) = v20;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v6 = TagFallback & 7;
LABEL_17:
    if (v6 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      return this;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(this + 8);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)this);
    v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_ + 8);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)this);
      v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_ + 16);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::ByteSize(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  if (!*((_BYTE *)this + 28))
  {
    v2 = 0;
    goto LABEL_20;
  }
  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_20;
    goto LABEL_13;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
    v3 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_ + 8);
  }
  v4 = *(unsigned __int8 *)(v3 + 28);
  if (*(_BYTE *)(v3 + 28))
  {
    if ((v4 & 2) != 0)
      v4 = ((v4 << 31 >> 31) & 9) + 9;
    else
      v4 = (v4 << 31 >> 31) & 9;
  }
  *(_DWORD *)(v3 + 24) = v4;
  v2 = (v4 + 2);
  if ((*((_DWORD *)this + 7) & 2) != 0)
  {
LABEL_13:
    v5 = *((_QWORD *)this + 2);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
      v5 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::default_instance_ + 16);
    }
    v6 = *(unsigned __int8 *)(v5 + 28);
    if (*(_BYTE *)(v5 + 28))
    {
      if ((v6 & 2) != 0)
        v6 = ((v6 << 31 >> 31) & 9) + 9;
      else
        v6 = (v6 << 31 >> 31) & 9;
    }
    *(_DWORD *)(v5 + 24) = v6;
    v2 = (v2 + v6 + 2);
  }
LABEL_20:
  *((_DWORD *)this + 6) = v2;
  return v2;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::CopyFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::IsInitialized(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.RayTracingTilesAvailability.BoundingBox");
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::RegionSpecificAvailableTiles(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *a2)
{
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *(_QWORD *)this = &off_1E25BF458;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::MergeFrom(this, a2);
  return this;
}

void sub_18D09D830(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 2);
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::MergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *a2)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *v3;
  double result;
  int v5;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *v6;
  const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *v7;
  _BYTE v8[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    sub_18D09EC0C((_DWORD *)v3 + 4, *((_DWORD *)v3 + 6) + v5);
    this = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *)memcpy((void *)(*((_QWORD *)v3 + 2) + 8 * *((int *)v3 + 6)), *((const void **)a2 + 2), 8 * *((int *)a2 + 6));
    *((_DWORD *)v3 + 6) += *((_DWORD *)a2 + 6);
  }
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    *((_DWORD *)v3 + 10) |= 1u;
    v6 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)*((_QWORD *)v3 + 1);
    if (!v6)
    {
      this = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *)operator new();
      v6 = this;
      *(_QWORD *)this = &off_1E25BF278;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)v3 + 1) = this;
    }
    v7 = (const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)*((_QWORD *)a2 + 1);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
      v7 = *(const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_
                                                                                             + 8);
    }
    return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::MergeFrom(v6, v7);
  }
  return result;
}

void sub_18D09D984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::~RegionSpecificAvailableTiles(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E25BF458;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::~RegionSpecificAvailableTiles(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::SharedDtor(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this)
{
  uint64_t v2;

  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::New(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_1E25BF458;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
  {
    this = *(_QWORD *)(this + 8);
    if (this)
      this = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::Clear(this);
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  _DWORD *v4;
  char *v5;
  uint64_t TagFallback;
  int v7;
  char *v8;
  unint64_t v9;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *v10;
  char *v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23[2];
  unsigned int v24;

  v4 = (_DWORD *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v5 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v7 = TagFallback & 7;
      if (v7 != 2)
        goto LABEL_19;
      *((_DWORD *)this + 10) |= 1u;
      v10 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)*((_QWORD *)this + 1);
      if (!v10)
      {
        v10 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)operator new();
        *(_QWORD *)v10 = &off_1E25BF278;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = 0;
        *((_QWORD *)this + 1) = v10;
      }
      v23[0] = 0;
      v11 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)v23))return 0;
      }
      else
      {
        v23[0] = *v11;
        *((_QWORD *)a2 + 1) = v11 + 1;
      }
      v13 = *((_DWORD *)a2 + 14);
      v14 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v13 + 1;
      if (v13 >= v14)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::MergePartialFromCodedStream(v10, a2)|| !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v15 = *((_DWORD *)a2 + 14);
      v16 = __OFSUB__(v15, 1);
      v17 = v15 - 1;
      if (v17 < 0 == v16)
        *((_DWORD *)a2 + 14) = v17;
      v18 = (_BYTE *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v18 < v9 && *v18 == 18)
      {
        v8 = v18 + 1;
        *((_QWORD *)a2 + 1) = v8;
LABEL_33:
        v24 = 0;
        if ((unint64_t)v8 >= v9 || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24))return 0;
        }
        else
        {
          v24 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) >= 1)
        {
          *(_QWORD *)v23 = 0;
          v19 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v23))return 0;
          }
          else
          {
            *(_QWORD *)v23 = *v19;
            *((_QWORD *)a2 + 1) = v19 + 1;
          }
          v20 = *((_DWORD *)this + 6);
          if (v20 == *((_DWORD *)this + 7))
          {
            sub_18D09EC0C(v4, v20 + 1);
            v20 = *((_DWORD *)this + 6);
          }
          v21 = *(_QWORD *)v23;
          v22 = *((_QWORD *)this + 2);
          *((_DWORD *)this + 6) = v20 + 1;
          *(_QWORD *)(v22 + 8 * v20) = v21;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
LABEL_47:
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        result = sub_18D09DE18(1, 0x12u, a2, v4);
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
      }
      if (v7 == 2)
      {
        v8 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_33;
      }
    }
    else
    {
      v7 = TagFallback & 7;
    }
LABEL_19:
    if (v7 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t sub_18D09DE18(int a1, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, _DWORD *a4)
{
  char *v7;
  uint64_t result;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  char *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[48];

  v21 = 0;
  v7 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v21);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v21 = *v7;
    *((_QWORD *)this + 1) = v7 + 1;
  }
  v9 = a4[2];
  v10 = a4[3];
  if (v9 == v10)
  {
    sub_18D09EC0C(a4, v9 + 1);
    v9 = a4[2];
    v10 = a4[3];
  }
  v11 = v21;
  v12 = *(_QWORD *)a4;
  v13 = v9 + 1;
  a4[2] = v9 + 1;
  *(_QWORD *)(v12 + 8 * v9) = v11;
  if (v10 - (v9 + 1) >= 1)
  {
    v14 = v10 - v9;
    do
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
          return 1;
        v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((int)v15 - (int)v18 < 2 || (a2 & 0x7F | 0x80) != *v18 || v18[1] != (a2 >> 7))
          return 1;
        v17 = (char *)(v18 + 2);
      }
      else
      {
        v16 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v16 >= v15 || *v16 != a2)
          return 1;
        v17 = (char *)(v16 + 1);
      }
      *((_QWORD *)this + 1) = v17;
      if ((unint64_t)v17 >= v15 || *v17 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v21);
        if (!(_DWORD)result)
          return result;
        v13 = a4[2];
      }
      else
      {
        v21 = *v17;
        *((_QWORD *)this + 1) = v17 + 1;
      }
      if (v13 >= a4[3])
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
        v13 = a4[2];
      }
      v19 = v21;
      v20 = *(_QWORD *)a4;
      a4[2] = v13 + 1;
      *(_QWORD *)(v20 + 8 * v13) = v19;
      --v14;
      ++v13;
    }
    while (v14 > 1);
  }
  return 1;
}

void sub_18D09DFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
  {
    v6 = *(_QWORD *)(this + 8);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)this);
      v6 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_
                     + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2);
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2);
    if (*(int *)(v5 + 24) >= 1)
    {
      v7 = 0;
      do
      {
        this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a2);
        ++v7;
      }
      while (v7 < *(int *)(v5 + 24));
    }
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::ByteSize(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this)
{
  int v2;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t result;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v3 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox *)*((_QWORD *)this + 1);
    if (!v3)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(0);
      v3 = *(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::default_instance_
                                                                                       + 8);
    }
    v2 = CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::BoundingBox::ByteSize(v3) + 2;
  }
  else
  {
    v2 = 0;
  }
  if (*((int *)this + 6) < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v4 = 0;
    LODWORD(v5) = 0;
    do
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(*((_QWORD *)this + 2) + 8 * v4++))
                                                                           + v5);
    while (v4 < *((int *)this + 6));
    if ((int)v5 > 0)
    {
      if (v5 >= 0x80)
        v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      else
        v6 = 2;
      v2 += v6;
    }
  }
  result = (v2 + (_DWORD)v5);
  *((_DWORD *)this + 8) = (_DWORD)v5;
  *((_DWORD *)this + 9) = result;
  return result;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::CopyFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *a2)
{
  double result;

  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *))(*(_QWORD *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::IsInitialized(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::Swap(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *this, CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  if (a2 != this)
  {
    v2 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    result = *((double *)a2 + 3);
    *((_QWORD *)a2 + 2) = v3;
    v5 = *((_QWORD *)this + 3);
    *((double *)this + 3) = result;
    *((_QWORD *)a2 + 3) = v5;
    LODWORD(v3) = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v3;
    LODWORD(v3) = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
  }
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.RayTracingTilesAvailability.RegionSpecificAvailableTiles");
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::SharedCtor(_QWORD *this)
{
  this[6] = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::RayTracingTilesAvailabilityData(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *a2)
{
  *(_QWORD *)this = &off_1E25BF4D0;
  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::MergeFrom(this, a2);
  return this;
}

void sub_18D09E308(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_18D09ECA4(v1 + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::~RayTracingTilesAvailabilityData(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this)
{
  *(_QWORD *)this = &off_1E25BF4D0;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::SharedDtor(this);
  sub_18D09ECA4((uint64_t *)this + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::~RayTracingTilesAvailabilityData(this);
  JUMPOUT(0x18D78B5D4);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::SharedDtor(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this)
{
  uint64_t v2;
  uint64_t v3;

  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(this);
  return CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::New(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BF4D0;
  *(_QWORD *)(v1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v4;
  char *v5;
  uint64_t TagFallback;
  unsigned int v7;
  int v8;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t result;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;

  v4 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)((char *)this + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 0)
          {
            TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = *v5;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((_QWORD *)a2 + 1) = v5 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v8 = TagFallback & 7;
          if (v8 != 2)
            goto LABEL_21;
          *((_DWORD *)this + 13) |= 1u;
          v9 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *)*((_QWORD *)this + 1);
          if (!v9)
          {
            v9 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *)operator new();
            *((_QWORD *)v9 + 1) = 0;
            *((_QWORD *)v9 + 2) = 0;
            *(_QWORD *)v9 = &off_1E25BF3E0;
            *((_QWORD *)this + 1) = v9;
          }
          v37 = 0;
          v10 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37))return 0;
          }
          else
          {
            v37 = *v10;
            *((_QWORD *)a2 + 1) = v10 + 1;
          }
          v11 = *((_DWORD *)a2 + 14);
          v12 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v11 + 1;
          if (v11 >= v12)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::MergePartialFromCodedStream(v9, a2)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v13 = *((_DWORD *)a2 + 14);
          v14 = __OFSUB__(v13, 1);
          v15 = v13 - 1;
          if (v15 < 0 == v14)
            *((_DWORD *)a2 + 14) = v15;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v16 < *((_QWORD *)a2 + 2) && *v16 == 18)
          {
            *((_QWORD *)a2 + 1) = v16 + 1;
            goto LABEL_33;
          }
        }
        if (v7 != 2)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_21;
LABEL_33:
        *((_DWORD *)this + 13) |= 2u;
        v17 = *((_QWORD *)this + 2);
        if (!v17)
        {
          v17 = operator new();
          *(_QWORD *)v17 = &off_1E25BF548;
          *(_OWORD *)(v17 + 8) = 0u;
          *(_OWORD *)(v17 + 24) = 0u;
          *(_OWORD *)(v17 + 36) = 0u;
          *((_QWORD *)this + 2) = v17;
        }
        v38 = 0;
        v18 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v38))return 0;
        }
        else
        {
          v38 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)v17, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v21 = *((_DWORD *)a2 + 14);
        v14 = __OFSUB__(v21, 1);
        v22 = v21 - 1;
        if (v22 < 0 == v14)
          *((_DWORD *)a2 + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 < *((_QWORD *)a2 + 2) && *v23 == 26)
          goto LABEL_46;
      }
      if (v7 != 3)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_21;
      while (1)
      {
        v24 = *((_DWORD *)this + 9);
        v25 = *((int *)this + 8);
        if ((int)v25 >= v24)
        {
          if (v24 == *((_DWORD *)this + 10))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            v24 = *((_DWORD *)this + 9);
          }
          *((_DWORD *)this + 9) = v24 + 1;
          v27 = operator new();
          *(_DWORD *)(v27 + 36) = 0;
          *(_DWORD *)(v27 + 40) = 0;
          *(_QWORD *)v27 = &off_1E25BF458;
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 16) = 0;
          *(_QWORD *)(v27 + 24) = 0;
          v28 = *((_QWORD *)this + 3);
          v29 = *((int *)this + 8);
          *((_DWORD *)this + 8) = v29 + 1;
          *(_QWORD *)(v28 + 8 * v29) = v27;
        }
        else
        {
          v26 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 8) = v25 + 1;
          v27 = *(_QWORD *)(v26 + 8 * v25);
        }
        v39 = 0;
        v30 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39))return 0;
        }
        else
        {
          v39 = *v30;
          *((_QWORD *)a2 + 1) = v30 + 1;
        }
        v31 = *((_DWORD *)a2 + 14);
        v32 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v31 + 1;
        if (v31 >= v32)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles *)v27, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v33 = *((_DWORD *)a2 + 14);
        v14 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v14)
          *((_DWORD *)a2 + 14) = v34;
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        v35 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v23 >= v35 || *v23 != 26)
          break;
LABEL_46:
        *((_QWORD *)a2 + 1) = v23 + 1;
      }
      if (v23 == v35 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_21:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)this);
      v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_
                     + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 52);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability *)this);
      v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_
                     + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    v9 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::ByteSize(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this)
{
  int v2;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;

  if (!*((_BYTE *)this + 52))
  {
    v2 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v3 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader *)*((_QWORD *)this + 1);
  if (!v3)
  {
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(0);
    v3 = *(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_ + 8);
  }
  v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::AvailabilityFileCommonHeader::ByteSize(v3);
  v5 = (int)v4;
  if (v4 >= 0x80)
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  else
    v6 = 1;
  v2 = v5 + v6 + 1;
  if ((*((_DWORD *)this + 13) & 2) != 0)
  {
LABEL_12:
    v7 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader *)*((_QWORD *)this + 2);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::protobuf_AddDesc_CoreNavigationCLPRayTracingTilesAvailability_2eproto(0);
      v7 = *(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader **)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::default_instance_ + 16);
    }
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityHeader::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v2 += v9 + v10 + 1;
  }
LABEL_18:
  v11 = *((_DWORD *)this + 8);
  v12 = (v11 + v2);
  if (v11 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles::ByteSize(*(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RegionSpecificAvailableTiles **)(*((_QWORD *)this + 3) + 8 * v13));
      v15 = (int)v14;
      if (v14 >= 0x80)
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      else
        v16 = 1;
      v12 = (v15 + v12 + v16);
      ++v13;
    }
    while (v13 < *((int *)this + 8));
  }
  *((_DWORD *)this + 12) = v12;
  return v12;
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::CopyFrom(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this, const CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *))(*(_QWORD *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::IsInitialized(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::Swap(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *this, CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *a2)
{
  CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    v5 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v5;
    this = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v6 = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    v7 = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v7;
  }
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::RayTracingTilesAvailabilityData::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "CoreNavigation.CLP.LogEntry.RayTracingTilesAvailability.RayTracingTilesAvailabilityData");
}

uint64_t sub_18D09EBCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18D09EBD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18D09EBDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18D09EBE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_18D09EBEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_18D09EBF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_18D09EBFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18D09EC04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

_DWORD *sub_18D09EC0C(_DWORD *result, int a2)
{
  int v2;
  _DWORD *v3;
  const void *v4;
  int v5;

  v2 = result[3];
  if (v2 < a2)
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = 2 * v2;
    if (v5 <= a2)
      v5 = a2;
    if (v5 <= 4)
      v5 = 4;
    result[3] = v5;
    result = (_DWORD *)operator new[]();
    *(_QWORD *)v3 = result;
    if (v4)
    {
      memcpy(result, v4, 8 * (int)v3[2]);
      JUMPOUT(0x18D78B5BCLL);
    }
  }
  return result;
}

uint64_t sub_18D09ECA4(uint64_t *a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  result = *a1;
  if (*a1)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::protobuf_ShutdownFile_CoreNavigationCLPRavenOutput_2eproto(CoreNavigation::CLP::LogEntry::Raven *this)
{
  uint64_t result;

  if (CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::TimeStruct::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::TimeStruct::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::TimeStruct::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8))(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::NrParameters::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::NrParameters::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::NrParameters::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::NrBiases::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::NrBiases::default_instance_ + 8))(CoreNavigation::CLP::LogEntry::Raven::NrBiases::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::UserPosition::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::UserPosition::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::UserPosition::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::UserVelocity::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::UserVelocity::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::UserVelocity::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::DevicePosition::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::DevicePosition::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::DevicePosition::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::default_instance_);
  if (CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::default_instance_
                                    + 8))(CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::default_instance_);
  result = CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::default_instance_;
  if (CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::default_instance_
                                              + 8))(CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::default_instance_);
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto_impl(CoreNavigation::CLP::LogEntry::Raven *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreNavigation/shared/cnprotobuf/CoreNavigationCLPRavenOutput.pb.cc", a4);
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E25BF6B0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 56) = 0;
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E25BF638;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = 0;
  CoreNavigation::CLP::LogEntry::Raven::TimeStruct::default_instance_ = (uint64_t)v5;
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E25C0010;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ = v6;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E25BFCC8;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_DWORD *)(v7 + 40) = 0;
  CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::default_instance_ = v7;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E25BFB60;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_DWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_DWORD *)(v8 + 128) = 0;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_DWORD *)(v8 + 168) = 0;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 68) = 0u;
  CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::default_instance_ = v8;
  v9 = operator new();
  *(_QWORD *)v9 = &off_1E25BFA70;
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 144) = 0;
  *(_DWORD *)(v9 + 152) = 0;
  *(_QWORD *)(v9 + 216) = 0;
  *(_QWORD *)(v9 + 224) = 0;
  *(_DWORD *)(v9 + 232) = 0;
  *(_QWORD *)(v9 + 240) = 0;
  *(_QWORD *)(v9 + 248) = 0;
  *(_DWORD *)(v9 + 256) = 0;
  *(_QWORD *)(v9 + 264) = 0;
  *(_QWORD *)(v9 + 272) = 0;
  *(_DWORD *)(v9 + 280) = 0;
  *(_QWORD *)(v9 + 288) = 0;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 116) = 0u;
  *(_DWORD *)(v9 + 208) = 0;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ = v9;
  v10 = operator new();
  *(_QWORD *)v10 = &off_1E25BFAE8;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ = v10;
  v11 = operator new();
  *(_QWORD *)v11 = &off_1E25BF728;
  *(_QWORD *)(v11 + 156) = 0;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_WORD *)(v11 + 152) = 0;
  CoreNavigation::CLP::LogEntry::Raven::NrParameters::default_instance_ = v11;
  v12 = operator new();
  *(_QWORD *)v12 = &off_1E25BFF98;
  *(_QWORD *)(v12 + 92) = 0;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_WORD *)(v12 + 88) = 0;
  CoreNavigation::CLP::LogEntry::Raven::NrBiases::default_instance_ = v12;
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E25BF9F8;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_QWORD *)(v13 + 88) = 0;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ = v13;
  v14 = operator new();
  *(_QWORD *)v14 = &off_1E25BF7A0;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_QWORD *)(v14 + 88) = 0;
  CoreNavigation::CLP::LogEntry::Raven::UserPosition::default_instance_ = v14;
  v15 = operator new();
  *(_QWORD *)v15 = &off_1E25BF818;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  CoreNavigation::CLP::LogEntry::Raven::UserVelocity::default_instance_ = v15;
  v16 = operator new();
  *(_QWORD *)v16 = &off_1E25BF908;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_QWORD *)(v16 + 88) = 0;
  CoreNavigation::CLP::LogEntry::Raven::DevicePosition::default_instance_ = v16;
  v17 = operator new();
  *(_QWORD *)v17 = &off_1E25BF980;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_QWORD *)(v17 + 88) = 0;
  CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::default_instance_ = v17;
  v18 = operator new();
  *(_QWORD *)v18 = &off_1E25BF890;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::default_instance_ = v18;
  v19 = operator new();
  *(_QWORD *)v19 = &off_1E25BFC50;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_QWORD *)(v19 + 88) = 0;
  CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::default_instance_ = v19;
  v20 = operator new();
  *(_QWORD *)v20 = &off_1E25BFD40;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_QWORD *)(v20 + 88) = 0;
  CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::default_instance_ = v20;
  v21 = operator new();
  *(_QWORD *)v21 = &off_1E25BFE30;
  *(_OWORD *)(v21 + 8) = 0u;
  *(_OWORD *)(v21 + 24) = 0u;
  *(_OWORD *)(v21 + 40) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_QWORD *)(v21 + 88) = 0;
  CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::default_instance_ = v21;
  v22 = operator new();
  CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::default_instance_ = v22;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  v23 = (_QWORD *)CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_;
  v24 = CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_;
  v25 = CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_;
  *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 8) = CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_;
  v23[2] = v25;
  v26 = (_QWORD *)CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_;
  v27 = CoreNavigation::CLP::LogEntry::Raven::NrParameters::default_instance_;
  v23[3] = CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_;
  v23[4] = v27;
  v28 = CoreNavigation::CLP::LogEntry::Raven::NrBiases::default_instance_;
  v29 = CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::default_instance_;
  v23[5] = CoreNavigation::CLP::LogEntry::Raven::NrBiases::default_instance_;
  v23[6] = v29;
  v30 = (_QWORD *)CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  v31 = CoreNavigation::CLP::LogEntry::Raven::TimeStruct::default_instance_;
  *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStruct::default_instance_;
  v30[2] = v31;
  v30[3] = v31;
  v30[4] = v31;
  *(_QWORD *)(v29 + 8) = v30;
  *(_QWORD *)(v24 + 8) = v30;
  *(_QWORD *)(v25 + 8) = v30;
  *(_QWORD *)(v27 + 8) = v30;
  *(_QWORD *)(v28 + 8) = v30;
  v32 = CoreNavigation::CLP::LogEntry::Raven::UserPosition::default_instance_;
  v26[1] = v30;
  v26[2] = v32;
  v33 = CoreNavigation::CLP::LogEntry::Raven::UserVelocity::default_instance_;
  v34 = CoreNavigation::CLP::LogEntry::Raven::DevicePosition::default_instance_;
  v26[3] = CoreNavigation::CLP::LogEntry::Raven::UserVelocity::default_instance_;
  v26[4] = v34;
  v35 = CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::default_instance_;
  v36 = CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::default_instance_;
  v26[5] = CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::default_instance_;
  v26[6] = v36;
  v37 = CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::default_instance_;
  v38 = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::default_instance_;
  v26[7] = CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::default_instance_;
  v26[8] = v38;
  v39 = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::default_instance_;
  v26[9] = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::default_instance_;
  v26[10] = v22;
  *(_QWORD *)(v32 + 8) = v30;
  *(_QWORD *)(v33 + 8) = v30;
  *(_QWORD *)(v34 + 8) = v30;
  *(_QWORD *)(v35 + 8) = v30;
  *(_QWORD *)(v36 + 8) = v30;
  *(_QWORD *)(v37 + 8) = v30;
  *(_QWORD *)(v38 + 8) = v30;
  *(_QWORD *)(v39 + 8) = v30;
  *(_QWORD *)v22 = &off_1E25BFEA8;
  *(_QWORD *)(v22 + 8) = v30;
  return wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)CoreNavigation::CLP::LogEntry::Raven::protobuf_ShutdownFile_CoreNavigationCLPRavenOutput_2eproto, (void (*)(void))v39);
}

double CoreNavigation::CLP::LogEntry::Raven::RavenOutput::RavenOutput(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF6B0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF6B0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::Raven::TimeStruct::TimeStruct(_QWORD *this)
{
  *this = &off_1E25BF638;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E25BF638;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::Raven::TimeStamp::TimeStamp(CoreNavigation::CLP::LogEntry::Raven::TimeStamp *this)
{
  double result;

  *(_QWORD *)this = &off_1E25C0010;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25C0010;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount(CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFCC8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFCC8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::NrEstimatorHealth(CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFB60;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFB60;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::EstimatorHealth(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFA70;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_QWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *((_DWORD *)this + 52) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 10) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFA70;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_QWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *((_DWORD *)this + 52) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 10) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::EstimatorActivity(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFAE8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFAE8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::NrParameters::NrParameters(CoreNavigation::CLP::LogEntry::Raven::NrParameters *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF728;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_WORD *)this + 76) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF728;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_WORD *)this + 76) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::NrBiases::NrBiases(CoreNavigation::CLP::LogEntry::Raven::NrBiases *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFF98;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_WORD *)this + 44) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFF98;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_WORD *)this + 44) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::EstimatorState::EstimatorState(CoreNavigation::CLP::LogEntry::Raven::EstimatorState *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF9F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF9F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::UserPosition::UserPosition(CoreNavigation::CLP::LogEntry::Raven::UserPosition *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF7A0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF7A0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::UserVelocity::UserVelocity(CoreNavigation::CLP::LogEntry::Raven::UserVelocity *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF818;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF818;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::DevicePosition::DevicePosition(CoreNavigation::CLP::LogEntry::Raven::DevicePosition *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF908;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF908;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::DeviceVelocity(CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF980;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF980;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::DeviceAttitude(CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BF890;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BF890;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::DeviceRateGyroBias(CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFC50;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFC50;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::DeviceAccelerometerBias(CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFD40;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFD40;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::DeviceAccelerometerScaleFactor(CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFE30;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFE30;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::DeviceReceiverClockDiscrepancy(CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy *this)
{
  double result;

  *(_QWORD *)this = &off_1E25BFEA8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E25BFEA8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

_QWORD *CoreNavigation::CLP::LogEntry::Raven::RavenOutput::InitAsDefaultInstance(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_;
  this[2] = v1;
  v2 = CoreNavigation::CLP::LogEntry::Raven::NrParameters::default_instance_;
  this[3] = CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_;
  this[4] = v2;
  v3 = CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::default_instance_;
  this[5] = CoreNavigation::CLP::LogEntry::Raven::NrBiases::default_instance_;
  this[6] = v3;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::Raven::TimeStamp::InitAsDefaultInstance(_QWORD *this)
{
  uint64_t v1;

  v1 = CoreNavigation::CLP::LogEntry::Raven::TimeStruct::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::Raven::TimeStruct::default_instance_;
  this[2] = v1;
  this[3] = v1;
  this[4] = v1;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::NrParameters::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::NrBiases::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

_QWORD *CoreNavigation::CLP::LogEntry::Raven::EstimatorState::InitAsDefaultInstance(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = CoreNavigation::CLP::LogEntry::Raven::UserPosition::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  this[2] = v1;
  v2 = CoreNavigation::CLP::LogEntry::Raven::DevicePosition::default_instance_;
  this[3] = CoreNavigation::CLP::LogEntry::Raven::UserVelocity::default_instance_;
  this[4] = v2;
  v3 = CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::default_instance_;
  this[5] = CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::default_instance_;
  this[6] = v3;
  v4 = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::default_instance_;
  this[7] = CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::default_instance_;
  this[8] = v4;
  v5 = CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::default_instance_;
  this[9] = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::default_instance_;
  this[10] = v5;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::UserPosition::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::UserVelocity::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::DevicePosition::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::InitAsDefaultInstance(uint64_t this)
{
  *(_QWORD *)(this + 8) = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_;
  return this;
}

double CoreNavigation::CLP::LogEntry::Raven::RavenOutput::SharedCtor(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this)
{
  double result;

  *((_QWORD *)this + 7) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::Raven::RavenOutput *CoreNavigation::CLP::LogEntry::Raven::RavenOutput::RavenOutput(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this, const CoreNavigation::CLP::LogEntry::Raven::RavenOutput *a2)
{
  *(_QWORD *)this = &off_1E25BF6B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::MergeFrom(this, a2);
  return this;
}

void sub_18D09FB7C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::Raven::RavenOutput::MergeFrom(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this, const CoreNavigation::CLP::LogEntry::Raven::RavenOutput *a2)
{
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput *v3;
  int v4;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *v5;
  const CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *v6;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *v7;
  const CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *v8;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorState *v9;
  const CoreNavigation::CLP::LogEntry::Raven::EstimatorState *v10;
  CoreNavigation::CLP::LogEntry::Raven::NrParameters *v11;
  const CoreNavigation::CLP::LogEntry::Raven::NrParameters *v12;
  CoreNavigation::CLP::LogEntry::Raven::NrBiases *v13;
  const CoreNavigation::CLP::LogEntry::Raven::NrBiases *v14;
  CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth *v15;
  const CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth *v16;
  _BYTE v17[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 60);
  if (!(_BYTE)v4)
    return;
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    *((_DWORD *)v3 + 15) |= 1u;
    v5 = (CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)*((_QWORD *)v3 + 1);
    if (!v5)
    {
      this = (CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)operator new();
      v5 = this;
      *(_QWORD *)this = &off_1E25BFA70;
      *((_QWORD *)this + 17) = 0;
      *((_QWORD *)this + 18) = 0;
      *((_DWORD *)this + 38) = 0;
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
      *((_DWORD *)this + 58) = 0;
      *((_QWORD *)this + 30) = 0;
      *((_QWORD *)this + 31) = 0;
      *((_DWORD *)this + 64) = 0;
      *((_QWORD *)this + 33) = 0;
      *((_QWORD *)this + 34) = 0;
      *((_DWORD *)this + 70) = 0;
      *((_QWORD *)this + 36) = 0;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)((char *)this + 104) = 0u;
      *(_OWORD *)((char *)this + 116) = 0u;
      *((_DWORD *)this + 52) = 0;
      *((_OWORD *)this + 11) = 0u;
      *((_OWORD *)this + 12) = 0u;
      *((_OWORD *)this + 10) = 0u;
      *((_QWORD *)v3 + 1) = this;
    }
    v6 = (const CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)*((_QWORD *)a2 + 1);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
      v6 = *(const CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                           + 8);
    }
    CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::MergeFrom(v5, v6);
    v4 = *((_DWORD *)a2 + 15);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0)
        goto LABEL_7;
      goto LABEL_21;
    }
  }
  else if ((*((_BYTE *)a2 + 60) & 2) == 0)
  {
    goto LABEL_6;
  }
  *((_DWORD *)v3 + 15) |= 2u;
  v7 = (CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *)*((_QWORD *)v3 + 2);
  if (!v7)
  {
    this = (CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)operator new();
    v7 = this;
    *(_QWORD *)this = &off_1E25BFAE8;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *(_OWORD *)((char *)this + 152) = 0u;
    *(_OWORD *)((char *)this + 168) = 0u;
    *(_OWORD *)((char *)this + 184) = 0u;
    *(_OWORD *)((char *)this + 200) = 0u;
    *(_OWORD *)((char *)this + 216) = 0u;
    *((_QWORD *)v3 + 2) = this;
  }
  v8 = (const CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *)*((_QWORD *)a2 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v8 = *(const CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                           + 16);
  }
  CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::MergeFrom(v7, v8);
  v4 = *((_DWORD *)a2 + 15);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
LABEL_26:
    *((_DWORD *)v3 + 15) |= 8u;
    v11 = (CoreNavigation::CLP::LogEntry::Raven::NrParameters *)*((_QWORD *)v3 + 4);
    if (!v11)
    {
      this = (CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)operator new();
      v11 = this;
      *(_QWORD *)this = &off_1E25BF728;
      *((_DWORD *)this + 39) = 0;
      *((_DWORD *)this + 40) = 0;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)((char *)this + 104) = 0u;
      *(_OWORD *)((char *)this + 120) = 0u;
      *(_OWORD *)((char *)this + 136) = 0u;
      *((_WORD *)this + 76) = 0;
      *((_QWORD *)v3 + 4) = this;
    }
    v12 = (const CoreNavigation::CLP::LogEntry::Raven::NrParameters *)*((_QWORD *)a2 + 4);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
      v12 = *(const CoreNavigation::CLP::LogEntry::Raven::NrParameters **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                         + 32);
    }
    CoreNavigation::CLP::LogEntry::Raven::NrParameters::MergeFrom(v11, v12);
    v4 = *((_DWORD *)a2 + 15);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0)
        return;
      goto LABEL_36;
    }
    goto LABEL_31;
  }
LABEL_21:
  *((_DWORD *)v3 + 15) |= 4u;
  v9 = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)*((_QWORD *)v3 + 3);
  if (!v9)
  {
    this = (CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)operator new();
    v9 = this;
    *(_QWORD *)this = &off_1E25BF9F8;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)v3 + 3) = this;
  }
  v10 = (const CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)*((_QWORD *)a2 + 3);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v10 = *(const CoreNavigation::CLP::LogEntry::Raven::EstimatorState **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                         + 24);
  }
  CoreNavigation::CLP::LogEntry::Raven::EstimatorState::MergeFrom(v9, v10);
  v4 = *((_DWORD *)a2 + 15);
  if ((v4 & 8) != 0)
    goto LABEL_26;
LABEL_8:
  if ((v4 & 0x10) == 0)
    goto LABEL_9;
LABEL_31:
  *((_DWORD *)v3 + 15) |= 0x10u;
  v13 = (CoreNavigation::CLP::LogEntry::Raven::NrBiases *)*((_QWORD *)v3 + 5);
  if (!v13)
  {
    this = (CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)operator new();
    v13 = this;
    *(_QWORD *)this = &off_1E25BFF98;
    *((_DWORD *)this + 23) = 0;
    *((_DWORD *)this + 24) = 0;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *((_WORD *)this + 44) = 0;
    *((_QWORD *)v3 + 5) = this;
  }
  v14 = (const CoreNavigation::CLP::LogEntry::Raven::NrBiases *)*((_QWORD *)a2 + 5);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v14 = *(const CoreNavigation::CLP::LogEntry::Raven::NrBiases **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                   + 40);
  }
  CoreNavigation::CLP::LogEntry::Raven::NrBiases::MergeFrom(v13, v14);
  if ((*((_DWORD *)a2 + 15) & 0x20) != 0)
  {
LABEL_36:
    *((_DWORD *)v3 + 15) |= 0x20u;
    v15 = (CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth *)*((_QWORD *)v3 + 6);
    if (!v15)
    {
      this = (CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)operator new();
      v15 = this;
      *(_QWORD *)this = &off_1E25BFB60;
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
      *((_DWORD *)this + 26) = 0;
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
      *((_DWORD *)this + 32) = 0;
      *(_OWORD *)((char *)this + 136) = 0u;
      *(_OWORD *)((char *)this + 152) = 0u;
      *((_DWORD *)this + 42) = 0;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_OWORD *)((char *)this + 68) = 0u;
      *((_QWORD *)v3 + 6) = this;
    }
    v16 = (const CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth *)*((_QWORD *)a2 + 6);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
      v16 = *(const CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                              + 48);
    }
    CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::MergeFrom(v15, v16);
  }
}

void sub_18D09FFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this)
{
  CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
  return CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::RavenOutput::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

double CoreNavigation::CLP::LogEntry::Raven::RavenOutput::New(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E25BF6B0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::RavenOutput::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 60);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 60) & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::Clear(this);
        v2 = *(_DWORD *)(v1 + 60);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(v1 + 16);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::Clear(this);
        v2 = *(_DWORD *)(v1 + 60);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::EstimatorState::Clear(this);
        v2 = *(_DWORD *)(v1 + 60);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::NrParameters::Clear(this);
        v2 = *(_DWORD *)(v1 + 60);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 40);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::NrBiases::Clear(this);
        v2 = *(_DWORD *)(v1 + 60);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 48);
      if (this)
        this = CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_DWORD *)(this + 292);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::Clear(this);
        v2 = *(_DWORD *)(v1 + 292);
      }
    }
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
  }
  if (*(int *)(v1 + 120) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 8 * v3);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *(int *)(v1 + 120));
  }
  *(_DWORD *)(v1 + 120) = 0;
  if (*(int *)(v1 + 144) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * v5);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 144));
  }
  *(_DWORD *)(v1 + 144) = 0;
  if (*(int *)(v1 + 200) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 192) + 8 * v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 200));
  }
  *(_DWORD *)(v1 + 200) = 0;
  if (*(int *)(v1 + 224) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v1 + 216) + 8 * v9);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      ++v9;
    }
    while (v9 < *(int *)(v1 + 224));
  }
  *(_DWORD *)(v1 + 224) = 0;
  if (*(int *)(v1 + 248) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v1 + 240) + 8 * v11);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      ++v11;
    }
    while (v11 < *(int *)(v1 + 248));
  }
  *(_DWORD *)(v1 + 248) = 0;
  if (*(int *)(v1 + 272) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v1 + 264) + 8 * v13);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      ++v13;
    }
    while (v13 < *(int *)(v1 + 272));
  }
  *(_DWORD *)(v1 + 272) = 0;
  *(_DWORD *)(v1 + 292) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::Clear(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 228);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::Clear(this);
        v2 = *(_DWORD *)(v1 + 228);
      }
    }
    *(_QWORD *)(v1 + 48) = 0;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_DWORD *)(v1 + 136) = 0;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
    *(_QWORD *)(v1 + 104) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_QWORD *)(v1 + 112) = 0;
    *(_QWORD *)(v1 + 120) = 0;
    *(_QWORD *)(v1 + 128) = 0;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_QWORD *)(v1 + 176) = 0;
  }
  if (HIBYTE(v2))
  {
    *(_DWORD *)(v1 + 140) = 0;
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 200) = 0u;
    *(_QWORD *)(v1 + 216) = 0;
  }
  *(_DWORD *)(v1 + 228) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::EstimatorState::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 92);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(v1 + 16);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::UserPosition::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::UserVelocity::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::DevicePosition::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 40);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 48);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 56);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      this = *(_QWORD *)(v1 + 64);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      this = *(_QWORD *)(v1 + 72);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::Clear(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      this = *(_QWORD *)(v1 + 80);
      if (this)
        this = CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 92) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::NrParameters::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 160);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::Clear(this);
        v2 = *(_DWORD *)(v1 + 160);
      }
    }
    *(_WORD *)(v1 + 152) = 0;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_QWORD *)(v1 + 48) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 120) = 0u;
  }
  *(_DWORD *)(v1 + 160) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::NrBiases::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 96);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::Clear(this);
        v2 = *(_DWORD *)(v1 + 96);
      }
    }
    *(_WORD *)(v1 + 88) = 0;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_QWORD *)(v1 + 48) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
  }
  *(_DWORD *)(v1 + 96) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v2 = *(_DWORD *)(this + 168);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) != 0)
    {
      this = *(_QWORD *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::Clear(this);
        v2 = *(_DWORD *)(v1 + 168);
      }
    }
    *(_OWORD *)(v1 + 44) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
  }
  if ((v2 & 0x3FC00) != 0)
  {
    *(_DWORD *)(v1 + 60) = 0;
    *(_QWORD *)(v1 + 144) = 0;
    *(_QWORD *)(v1 + 152) = 0;
    *(_QWORD *)(v1 + 136) = 0;
    *(_DWORD *)(v1 + 160) = 0;
  }
  if (*(int *)(v1 + 72) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 8 * v3);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *(int *)(v1 + 72));
  }
  *(_DWORD *)(v1 + 72) = 0;
  if (*(int *)(v1 + 96) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * v5);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 96));
  }
  *(_DWORD *)(v1 + 96) = 0;
  if (*(int *)(v1 + 120) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 8 * v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 120));
  }
  *(_DWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 168) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::RavenOutput::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char *v4;
  uint64_t TagFallback;
  int v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t result;
  unsigned int v50;

  while (1)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v4 < *((_QWORD *)a2 + 2) && (*v4 & 0x80000000) == 0)
    {
      TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v4 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_23;
        *((_DWORD *)this + 15) |= 1u;
        v7 = *((_QWORD *)this + 1);
        if (!v7)
        {
          v7 = operator new();
          *(_QWORD *)v7 = &off_1E25BFA70;
          *(_QWORD *)(v7 + 136) = 0;
          *(_QWORD *)(v7 + 144) = 0;
          *(_DWORD *)(v7 + 152) = 0;
          *(_QWORD *)(v7 + 216) = 0;
          *(_QWORD *)(v7 + 224) = 0;
          *(_DWORD *)(v7 + 232) = 0;
          *(_QWORD *)(v7 + 240) = 0;
          *(_QWORD *)(v7 + 248) = 0;
          *(_DWORD *)(v7 + 256) = 0;
          *(_QWORD *)(v7 + 264) = 0;
          *(_QWORD *)(v7 + 272) = 0;
          *(_DWORD *)(v7 + 280) = 0;
          *(_QWORD *)(v7 + 288) = 0;
          *(_OWORD *)(v7 + 8) = 0u;
          *(_OWORD *)(v7 + 24) = 0u;
          *(_OWORD *)(v7 + 40) = 0u;
          *(_OWORD *)(v7 + 56) = 0u;
          *(_OWORD *)(v7 + 72) = 0u;
          *(_OWORD *)(v7 + 88) = 0u;
          *(_OWORD *)(v7 + 104) = 0u;
          *(_OWORD *)(v7 + 116) = 0u;
          *(_DWORD *)(v7 + 208) = 0;
          *(_OWORD *)(v7 + 176) = 0u;
          *(_OWORD *)(v7 + 192) = 0u;
          *(_OWORD *)(v7 + 160) = 0u;
          *((_QWORD *)this + 1) = v7;
        }
        v50 = 0;
        v8 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))return 0;
        }
        else
        {
          v50 = *v8;
          *((_QWORD *)a2 + 1) = v8 + 1;
        }
        v9 = *((_DWORD *)a2 + 14);
        v10 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v9 + 1;
        if (v9 >= v10)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)v7, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v11 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v11, 1);
        v13 = v11 - 1;
        if (v13 < 0 == v12)
          *((_DWORD *)a2 + 14) = v13;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
        goto LABEL_35;
      case 2u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_23;
LABEL_35:
        *((_DWORD *)this + 15) |= 2u;
        v15 = *((_QWORD *)this + 2);
        if (!v15)
        {
          v15 = operator new();
          *(_QWORD *)v15 = &off_1E25BFAE8;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_OWORD *)(v15 + 56) = 0u;
          *(_OWORD *)(v15 + 72) = 0u;
          *(_OWORD *)(v15 + 88) = 0u;
          *(_OWORD *)(v15 + 104) = 0u;
          *(_OWORD *)(v15 + 120) = 0u;
          *(_OWORD *)(v15 + 136) = 0u;
          *(_OWORD *)(v15 + 152) = 0u;
          *(_OWORD *)(v15 + 168) = 0u;
          *(_OWORD *)(v15 + 184) = 0u;
          *(_OWORD *)(v15 + 200) = 0u;
          *(_OWORD *)(v15 + 216) = 0u;
          *((_QWORD *)this + 2) = v15;
        }
        v50 = 0;
        v16 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))return 0;
        }
        else
        {
          v50 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)a2 + 14);
        v18 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v17 + 1;
        if (v17 >= v18)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *)v15, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v19 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v19, 1);
        v20 = v19 - 1;
        if (v20 < 0 == v12)
          *((_DWORD *)a2 + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_49:
        *((_DWORD *)this + 15) |= 4u;
        v22 = *((_QWORD *)this + 3);
        if (!v22)
        {
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E25BF9F8;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 40) = 0u;
          *(_OWORD *)(v22 + 56) = 0u;
          *(_OWORD *)(v22 + 72) = 0u;
          *(_QWORD *)(v22 + 88) = 0;
          *((_QWORD *)this + 3) = v22;
        }
        v50 = 0;
        v23 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))return 0;
        }
        else
        {
          v50 = *v23;
          *((_QWORD *)a2 + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)a2 + 14);
        v25 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::Raven::EstimatorState::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)v22, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v26 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v12)
          *((_DWORD *)a2 + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_63:
        *((_DWORD *)this + 15) |= 8u;
        v29 = *((_QWORD *)this + 4);
        if (!v29)
        {
          v29 = operator new();
          *(_QWORD *)v29 = &off_1E25BF728;
          *(_DWORD *)(v29 + 156) = 0;
          *(_DWORD *)(v29 + 160) = 0;
          *(_OWORD *)(v29 + 8) = 0u;
          *(_OWORD *)(v29 + 24) = 0u;
          *(_OWORD *)(v29 + 40) = 0u;
          *(_OWORD *)(v29 + 56) = 0u;
          *(_OWORD *)(v29 + 72) = 0u;
          *(_OWORD *)(v29 + 88) = 0u;
          *(_OWORD *)(v29 + 104) = 0u;
          *(_OWORD *)(v29 + 120) = 0u;
          *(_OWORD *)(v29 + 136) = 0u;
          *(_WORD *)(v29 + 152) = 0;
          *((_QWORD *)this + 4) = v29;
        }
        v50 = 0;
        v30 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))return 0;
        }
        else
        {
          v50 = *v30;
          *((_QWORD *)a2 + 1) = v30 + 1;
        }
        v31 = *((_DWORD *)a2 + 14);
        v32 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v31 + 1;
        if (v31 >= v32)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::Raven::NrParameters::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::Raven::NrParameters *)v29, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v33 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v12)
          *((_DWORD *)a2 + 14) = v34;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 1;
LABEL_77:
        *((_DWORD *)this + 15) |= 0x10u;
        v36 = *((_QWORD *)this + 5);
        if (!v36)
        {
          v36 = operator new();
          *(_QWORD *)v36 = &off_1E25BFF98;
          *(_DWORD *)(v36 + 92) = 0;
          *(_DWORD *)(v36 + 96) = 0;
          *(_OWORD *)(v36 + 8) = 0u;
          *(_OWORD *)(v36 + 24) = 0u;
          *(_OWORD *)(v36 + 40) = 0u;
          *(_OWORD *)(v36 + 56) = 0u;
          *(_OWORD *)(v36 + 72) = 0u;
          *(_WORD *)(v36 + 88) = 0;
          *((_QWORD *)this + 5) = v36;
        }
        v50 = 0;
        v37 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))return 0;
        }
        else
        {
          v50 = *v37;
          *((_QWORD *)a2 + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)a2 + 14);
        v39 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v38 + 1;
        if (v38 >= v39)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::Raven::NrBiases::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::Raven::NrBiases *)v36, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v40 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v40, 1);
        v41 = v40 - 1;
        if (v41 < 0 == v12)
          *((_DWORD *)a2 + 14) = v41;
        v42 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v42 >= *((_QWORD *)a2 + 2) || *v42 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v42 + 1;
LABEL_91:
        *((_DWORD *)this + 15) |= 0x20u;
        v43 = *((_QWORD *)this + 6);
        if (!v43)
        {
          v43 = operator new();
          *(_QWORD *)v43 = &off_1E25BFB60;
          *(_QWORD *)(v43 + 88) = 0;
          *(_QWORD *)(v43 + 96) = 0;
          *(_DWORD *)(v43 + 104) = 0;
          *(_QWORD *)(v43 + 112) = 0;
          *(_QWORD *)(v43 + 120) = 0;
          *(_DWORD *)(v43 + 128) = 0;
          *(_OWORD *)(v43 + 136) = 0u;
          *(_OWORD *)(v43 + 152) = 0u;
          *(_DWORD *)(v43 + 168) = 0;
          *(_OWORD *)(v43 + 8) = 0u;
          *(_OWORD *)(v43 + 24) = 0u;
          *(_OWORD *)(v43 + 40) = 0u;
          *(_OWORD *)(v43 + 56) = 0u;
          *(_OWORD *)(v43 + 68) = 0u;
          *((_QWORD *)this + 6) = v43;
        }
        v50 = 0;
        v44 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v44 >= *((_QWORD *)a2 + 2) || *v44 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))return 0;
        }
        else
        {
          v50 = *v44;
          *((_QWORD *)a2 + 1) = v44 + 1;
        }
        v45 = *((_DWORD *)a2 + 14);
        v46 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v45 + 1;
        if (v45 >= v46)
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::MergePartialFromCodedStream((CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth *)v43, a2)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        v47 = *((_DWORD *)a2 + 14);
        v12 = __OFSUB__(v47, 1);
        v48 = v47 - 1;
        if (v48 < 0 == v12)
          *((_DWORD *)a2 + 14) = v48;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_49;
        goto LABEL_23;
      case 4u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_63;
        goto LABEL_23;
      case 5u:
        v6 = TagFallback & 7;
        if (v6 == 2)
          goto LABEL_77;
        goto LABEL_23;
      case 6u:
        v6 = TagFallback & 7;
        if (v6 != 2)
          goto LABEL_23;
        goto LABEL_91;
      default:
        v6 = TagFallback & 7;
LABEL_23:
        if (v6 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::RavenOutput::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = this;
  v6 = *(_DWORD *)(this + 60);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)this);
      v7 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 60);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)this);
    v8 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_14:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)this);
    v9 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_17:
  v10 = *(_QWORD *)(v5 + 32);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)this);
    v10 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 32);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      return this;
    goto LABEL_23;
  }
LABEL_20:
  v11 = *(_QWORD *)(v5 + 40);
  if (!v11)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)this);
    v11 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 40);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  if ((*(_DWORD *)(v5 + 60) & 0x20) != 0)
  {
LABEL_23:
    v12 = *(_QWORD *)(v5 + 48);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)this);
      v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 48);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v12, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::Raven::RavenOutput::ByteSize(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this)
{
  int v2;
  uint64_t v3;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  CoreNavigation::CLP::LogEntry::Raven::EstimatorState *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  CoreNavigation::CLP::LogEntry::Raven::NrParameters *v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  int v19;
  CoreNavigation::CLP::LogEntry::Raven::NrBiases *v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;
  CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth *v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  int v27;

  LOBYTE(v2) = *((_BYTE *)this + 60);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_47;
  }
  if ((*((_BYTE *)this + 60) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 60) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = (CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)*((_QWORD *)this + 1);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(0);
    v4 = *(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                   + 8);
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::ByteSize(v4);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  else
    v7 = 1;
  v3 = (v6 + v7 + 1);
  v2 = *((_DWORD *)this + 15);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    v8 = (CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *)*((_QWORD *)this + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(0);
      v8 = *(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                       + 16);
    }
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::ByteSize(v8);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    else
      v11 = 1;
    v3 = (v3 + v10 + v11 + 1);
    v2 = *((_DWORD *)this + 15);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    v12 = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)*((_QWORD *)this + 3);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(0);
      v12 = *(CoreNavigation::CLP::LogEntry::Raven::EstimatorState **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                     + 24);
    }
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::Raven::EstimatorState::ByteSize(v12);
    v14 = (int)v13;
    if (v13 >= 0x80)
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    else
      v15 = 1;
    v3 = (v3 + v14 + v15 + 1);
    v2 = *((_DWORD *)this + 15);
    if ((v2 & 8) == 0)
    {
LABEL_20:
      if ((v2 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_35;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  v16 = (CoreNavigation::CLP::LogEntry::Raven::NrParameters *)*((_QWORD *)this + 4);
  if (!v16)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(0);
    v16 = *(CoreNavigation::CLP::LogEntry::Raven::NrParameters **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                 + 32);
  }
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::Raven::NrParameters::ByteSize(v16);
  v18 = (int)v17;
  if (v17 >= 0x80)
    v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
  else
    v19 = 1;
  v3 = (v3 + v18 + v19 + 1);
  v2 = *((_DWORD *)this + 15);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_41;
  }
LABEL_35:
  v20 = (CoreNavigation::CLP::LogEntry::Raven::NrBiases *)*((_QWORD *)this + 5);
  if (!v20)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(0);
    v20 = *(CoreNavigation::CLP::LogEntry::Raven::NrBiases **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                             + 40);
  }
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::Raven::NrBiases::ByteSize(v20);
  v22 = (int)v21;
  if (v21 >= 0x80)
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21);
  else
    v23 = 1;
  v3 = (v3 + v22 + v23 + 1);
  if ((*((_DWORD *)this + 15) & 0x20) != 0)
  {
LABEL_41:
    v24 = (CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth *)*((_QWORD *)this + 6);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(0);
      v24 = *(CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth **)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_
                                                                        + 48);
    }
    v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::Raven::NrEstimatorHealth::ByteSize(v24);
    v26 = (int)v25;
    if (v25 >= 0x80)
      v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25);
    else
      v27 = 1;
    v3 = (v3 + v26 + v27 + 1);
  }
LABEL_47:
  *((_DWORD *)this + 14) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::Raven::RavenOutput::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::Raven::RavenOutput *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::MergeFrom(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *this, const CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *a2)
{
  uint64_t v4;
  const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double result;
  uint64_t v46;
  const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  CoreNavigation::CLP::LogEntry::Raven::TimeStamp *v55;
  const CoreNavigation::CLP::LogEntry::Raven::TimeStamp *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v63);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 112));
  if (*((int *)a2 + 30) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*((_QWORD *)a2 + 14) + 8 * v4);
      v6 = *((_DWORD *)this + 31);
      v7 = *((int *)this + 30);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 112));
          v6 = *((_DWORD *)this + 31);
        }
        *((_DWORD *)this + 31) = v6 + 1;
        v9 = operator new();
        *(_QWORD *)v9 = &off_1E25BFCC8;
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_DWORD *)(v9 + 40) = 0;
        v10 = *((_QWORD *)this + 14);
        v11 = *((int *)this + 30);
        *((_DWORD *)this + 30) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
      }
      else
      {
        v8 = *((_QWORD *)this + 14);
        *((_DWORD *)this + 30) = v7 + 1;
        v9 = *(_QWORD *)(v8 + 8 * v7);
      }
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MergeFrom((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v9, v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 30));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 136));
  if (*((int *)a2 + 36) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*((_QWORD *)a2 + 17) + 8 * v12);
      v14 = *((_DWORD *)this + 37);
      v15 = *((int *)this + 36);
      if ((int)v15 >= v14)
      {
        if (v14 == *((_DWORD *)this + 38))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 136));
          v14 = *((_DWORD *)this + 37);
        }
        *((_DWORD *)this + 37) = v14 + 1;
        v17 = operator new();
        *(_QWORD *)v17 = &off_1E25BFCC8;
        *(_OWORD *)(v17 + 8) = 0u;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_DWORD *)(v17 + 40) = 0;
        v18 = *((_QWORD *)this + 17);
        v19 = *((int *)this + 36);
        *((_DWORD *)this + 36) = v19 + 1;
        *(_QWORD *)(v18 + 8 * v19) = v17;
      }
      else
      {
        v16 = *((_QWORD *)this + 17);
        *((_DWORD *)this + 36) = v15 + 1;
        v17 = *(_QWORD *)(v16 + 8 * v15);
      }
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MergeFrom((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v17, v13);
      ++v12;
    }
    while (v12 < *((int *)a2 + 36));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 192));
  if (*((int *)a2 + 50) >= 1)
  {
    v20 = 0;
    do
    {
      v21 = *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*((_QWORD *)a2 + 24) + 8 * v20);
      v22 = *((_DWORD *)this + 51);
      v23 = *((int *)this + 50);
      if ((int)v23 >= v22)
      {
        if (v22 == *((_DWORD *)this + 52))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 192));
          v22 = *((_DWORD *)this + 51);
        }
        *((_DWORD *)this + 51) = v22 + 1;
        v25 = operator new();
        *(_QWORD *)v25 = &off_1E25BFCC8;
        *(_OWORD *)(v25 + 8) = 0u;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_DWORD *)(v25 + 40) = 0;
        v26 = *((_QWORD *)this + 24);
        v27 = *((int *)this + 50);
        *((_DWORD *)this + 50) = v27 + 1;
        *(_QWORD *)(v26 + 8 * v27) = v25;
      }
      else
      {
        v24 = *((_QWORD *)this + 24);
        *((_DWORD *)this + 50) = v23 + 1;
        v25 = *(_QWORD *)(v24 + 8 * v23);
      }
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MergeFrom((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v25, v21);
      ++v20;
    }
    while (v20 < *((int *)a2 + 50));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 216));
  if (*((int *)a2 + 56) >= 1)
  {
    v28 = 0;
    do
    {
      v29 = *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*((_QWORD *)a2 + 27) + 8 * v28);
      v30 = *((_DWORD *)this + 57);
      v31 = *((int *)this + 56);
      if ((int)v31 >= v30)
      {
        if (v30 == *((_DWORD *)this + 58))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 216));
          v30 = *((_DWORD *)this + 57);
        }
        *((_DWORD *)this + 57) = v30 + 1;
        v33 = operator new();
        *(_QWORD *)v33 = &off_1E25BFCC8;
        *(_OWORD *)(v33 + 8) = 0u;
        *(_OWORD *)(v33 + 24) = 0u;
        *(_DWORD *)(v33 + 40) = 0;
        v34 = *((_QWORD *)this + 27);
        v35 = *((int *)this + 56);
        *((_DWORD *)this + 56) = v35 + 1;
        *(_QWORD *)(v34 + 8 * v35) = v33;
      }
      else
      {
        v32 = *((_QWORD *)this + 27);
        *((_DWORD *)this + 56) = v31 + 1;
        v33 = *(_QWORD *)(v32 + 8 * v31);
      }
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MergeFrom((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v33, v29);
      ++v28;
    }
    while (v28 < *((int *)a2 + 56));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 240));
  if (*((int *)a2 + 62) >= 1)
  {
    v36 = 0;
    do
    {
      v37 = *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*((_QWORD *)a2 + 30) + 8 * v36);
      v38 = *((_DWORD *)this + 63);
      v39 = *((int *)this + 62);
      if ((int)v39 >= v38)
      {
        if (v38 == *((_DWORD *)this + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 240));
          v38 = *((_DWORD *)this + 63);
        }
        *((_DWORD *)this + 63) = v38 + 1;
        v41 = operator new();
        *(_QWORD *)v41 = &off_1E25BFCC8;
        *(_OWORD *)(v41 + 8) = 0u;
        *(_OWORD *)(v41 + 24) = 0u;
        *(_DWORD *)(v41 + 40) = 0;
        v42 = *((_QWORD *)this + 30);
        v43 = *((int *)this + 62);
        *((_DWORD *)this + 62) = v43 + 1;
        *(_QWORD *)(v42 + 8 * v43) = v41;
      }
      else
      {
        v40 = *((_QWORD *)this + 30);
        *((_DWORD *)this + 62) = v39 + 1;
        v41 = *(_QWORD *)(v40 + 8 * v39);
      }
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MergeFrom((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v41, v37);
      ++v36;
    }
    while (v36 < *((int *)a2 + 62));
  }
  v44 = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 264));
  if (*((int *)a2 + 68) >= 1)
  {
    v46 = 0;
    do
    {
      v47 = *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*((_QWORD *)a2 + 33) + 8 * v46);
      v48 = *((int *)this + 68);
      v49 = *((_DWORD *)this + 69);
      if ((int)v48 >= v49)
      {
        if (v49 == *((_DWORD *)this + 70))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth *)((char *)this + 264));
          v49 = *((_DWORD *)this + 69);
        }
        *((_DWORD *)this + 69) = v49 + 1;
        v51 = operator new();
        *(_QWORD *)v51 = &off_1E25BFCC8;
        *(_OWORD *)(v51 + 8) = 0u;
        *(_OWORD *)(v51 + 24) = 0u;
        *(_DWORD *)(v51 + 40) = 0;
        v52 = *((_QWORD *)this + 33);
        v53 = *((int *)this + 68);
        *((_DWORD *)this + 68) = v53 + 1;
        *(_QWORD *)(v52 + 8 * v53) = v51;
      }
      else
      {
        v50 = *((_QWORD *)this + 33);
        *((_DWORD *)this + 68) = v48 + 1;
        v51 = *(_QWORD *)(v50 + 8 * v48);
      }
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MergeFrom((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v51, v47);
      ++v46;
    }
    while (v46 < *((int *)a2 + 68));
  }
  v54 = *((_DWORD *)a2 + 73);
  if (!(_BYTE)v54)
    goto LABEL_70;
  if ((v54 & 1) != 0)
  {
    *((_DWORD *)this + 73) |= 1u;
    v55 = (CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)*((_QWORD *)this + 1);
    if (!v55)
    {
      v44 = operator new();
      v55 = (CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)v44;
      *(_QWORD *)v44 = &off_1E25C0010;
      *(_OWORD *)(v44 + 8) = 0u;
      *(_OWORD *)(v44 + 24) = 0u;
      *(_OWORD *)(v44 + 40) = 0u;
      *((_QWORD *)this + 1) = v44;
    }
    v56 = (const CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)*((_QWORD *)a2 + 1);
    if (!v56)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)v44);
      v56 = *(const CoreNavigation::CLP::LogEntry::Raven::TimeStamp **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_
                                                                      + 8);
    }
    result = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::MergeFrom(v55, v56);
    v54 = *((_DWORD *)a2 + 73);
  }
  if ((v54 & 2) != 0)
  {
    v57 = *((_DWORD *)a2 + 4);
    if (v57 >= 7)
      __assert_rtn("set_estimator_type", "CoreNavigationCLPRavenOutput.pb.h", 5162, "::CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth_EstimatorType_IsValid(value)");
    *((_DWORD *)this + 73) |= 2u;
    *((_DWORD *)this + 4) = v57;
    v54 = *((_DWORD *)a2 + 73);
  }
  if ((v54 & 4) != 0)
  {
    v58 = *((_DWORD *)a2 + 5);
    if (v58 >= 4)
      __assert_rtn("set_health", "CoreNavigationCLPRavenOutput.pb.h", 5185, "::CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth_EstimatorHealthType_IsValid(value)");
    *((_DWORD *)this + 73) |= 4u;
    *((_DWORD *)this + 5) = v58;
    v54 = *((_DWORD *)a2 + 73);
  }
  if ((v54 & 8) != 0)
  {
    result = *((double *)a2 + 3);
    *((_DWORD *)this + 73) |= 8u;
    *((double *)this + 3) = result;
    v54 = *((_DWORD *)a2 + 73);
    if ((v54 & 0x10) == 0)
    {
LABEL_66:
      if ((v54 & 0x20) == 0)
        goto LABEL_67;
LABEL_97:
      v61 = *((_QWORD *)a2 + 5);
      *((_DWORD *)this + 73) |= 0x20u;
      *((_QWORD *)this + 5) = v61;
      v54 = *((_DWORD *)a2 + 73);
      if ((v54 & 0x40) == 0)
      {
LABEL_68:
        if ((v54 & 0x80) == 0)
          goto LABEL_70;
        goto LABEL_69;
      }
      goto LABEL_98;
    }
  }
  else if ((v54 & 0x10) == 0)
  {
    goto LABEL_66;
  }
  result = *((double *)a2 + 4);
  *((_DWORD *)this + 73) |= 0x10u;
  *((double *)this + 4) = result;
  v54 = *((_DWORD *)a2 + 73);
  if ((v54 & 0x20) != 0)
    goto LABEL_97;
LABEL_67:
  if ((v54 & 0x40) == 0)
    goto LABEL_68;
LABEL_98:
  v62 = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 73) |= 0x40u;
  *((_QWORD *)this + 6) = v62;
  v54 = *((_DWORD *)a2 + 73);
  if ((v54 & 0x80) != 0)
  {
LABEL_69:
    v59 = *((_QWORD *)a2 + 7);
    *((_DWORD *)this + 73) |= 0x80u;
    *((_QWORD *)this + 7) = v59;
    v54 = *((_DWORD *)a2 + 73);
  }
LABEL_70:
  if ((v54 & 0xFF00) == 0)
    goto LABEL_78;
  if ((v54 & 0x100) != 0)
  {
    result = *((double *)a2 + 8);
    *((_DWORD *)this + 73) |= 0x100u;
    *((double *)this + 8) = result;
    v54 = *((_DWORD *)a2 + 73);
    if ((v54 & 0x200) == 0)
    {
LABEL_73:
      if ((v54 & 0x400) == 0)
        goto LABEL_74;
      goto LABEL_87;
    }
  }
  else if ((v54 & 0x200) == 0)
  {
    goto LABEL_73;
  }
  result = *((double *)a2 + 9);
  *((_DWORD *)this + 73) |= 0x200u;
  *((double *)this + 9) = result;
  v54 = *((_DWORD *)a2 + 73);
  if ((v54 & 0x400) == 0)
  {
LABEL_74:
    if ((v54 & 0x800) == 0)
      goto LABEL_75;
    goto LABEL_88;
  }
LABEL_87:
  result = *((double *)a2 + 10);
  *((_DWORD *)this + 73) |= 0x400u;
  *((double *)this + 10) = result;
  v54 = *((_DWORD *)a2 + 73);
  if ((v54 & 0x800) == 0)
  {
LABEL_75:
    if ((v54 & 0x1000) == 0)
      goto LABEL_76;
    goto LABEL_89;
  }
LABEL_88:
  result = *((double *)a2 + 11);
  *((_DWORD *)this + 73) |= 0x800u;
  *((double *)this + 11) = result;
  v54 = *((_DWORD *)a2 + 73);
  if ((v54 & 0x1000) == 0)
  {
LABEL_76:
    if ((v54 & 0x2000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
LABEL_89:
  result = *((double *)a2 + 12);
  *((_DWORD *)this + 73) |= 0x1000u;
  *((double *)this + 12) = result;
  v54 = *((_DWORD *)a2 + 73);
  if ((v54 & 0x2000) != 0)
  {
LABEL_77:
    result = *((double *)a2 + 13);
    *((_DWORD *)this + 73) |= 0x2000u;
    *((double *)this + 13) = result;
    v54 = *((_DWORD *)a2 + 73);
  }
LABEL_78:
  if ((v54 & 0xFF0000) == 0)
    return result;
  if ((v54 & 0x10000) != 0)
  {
    result = *((double *)a2 + 20);
    *((_DWORD *)this + 73) |= 0x10000u;
    *((double *)this + 20) = result;
    v54 = *((_DWORD *)a2 + 73);
    if ((v54 & 0x20000) == 0)
    {
LABEL_81:
      if ((v54 & 0x40000) == 0)
        goto LABEL_82;
      goto LABEL_93;
    }
  }
  else if ((v54 & 0x20000) == 0)
  {
    goto LABEL_81;
  }
  result = *((double *)a2 + 21);
  *((_DWORD *)this + 73) |= 0x20000u;
  *((double *)this + 21) = result;
  v54 = *((_DWORD *)a2 + 73);
  if ((v54 & 0x40000) == 0)
  {
LABEL_82:
    if ((v54 & 0x80000) == 0)
      return result;
    goto LABEL_83;
  }
LABEL_93:
  result = *((double *)a2 + 22);
  *((_DWORD *)this + 73) |= 0x40000u;
  *((double *)this + 22) = result;
  if ((*((_DWORD *)a2 + 73) & 0x80000) != 0)
  {
LABEL_83:
    v60 = *((_QWORD *)a2 + 23);
    *((_DWORD *)this + 73) |= 0x80000u;
    *((_QWORD *)this + 23) = v60;
  }
  return result;
}

void sub_18D0A1AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::MergeFrom(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *this, const CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *a2)
{
  CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *v3;
  unsigned int v4;
  CoreNavigation::CLP::LogEntry::Raven::TimeStamp *v5;
  const CoreNavigation::CLP::LogEntry::Raven::TimeStamp *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BYTE v36[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v36);
  }
  v4 = *((_DWORD *)a2 + 57);
  if (!(_BYTE)v4)
    goto LABEL_29;
  if ((v4 & 1) != 0)
  {
    *((_DWORD *)v3 + 57) |= 1u;
    v5 = (CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)*((_QWORD *)v3 + 1);
    if (!v5)
    {
      this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity *)operator new();
      v5 = this;
      *(_QWORD *)this = &off_1E25C0010;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *((_QWORD *)v3 + 1) = this;
    }
    v6 = (const CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)*((_QWORD *)a2 + 1);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
      v6 = *(const CoreNavigation::CLP::LogEntry::Raven::TimeStamp **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_
                                                                     + 8);
    }
    CoreNavigation::CLP::LogEntry::Raven::TimeStamp::MergeFrom(v5, v6);
    v4 = *((_DWORD *)a2 + 57);
  }
  if ((v4 & 2) != 0)
  {
    v7 = *((_DWORD *)a2 + 6);
    if (v7 >= 0xA)
      __assert_rtn("set_estimated_user_activity", "CoreNavigationCLPRavenOutput.pb.h", 5734, "::CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity_UserActivityType_IsValid(value)");
    *((_DWORD *)v3 + 57) |= 2u;
    *((_DWORD *)v3 + 6) = v7;
    v4 = *((_DWORD *)a2 + 57);
  }
  if ((v4 & 4) != 0)
  {
    v8 = *((_QWORD *)a2 + 2);
    *((_DWORD *)v3 + 57) |= 4u;
    *((_QWORD *)v3 + 2) = v8;
    v4 = *((_DWORD *)a2 + 57);
  }
  if ((v4 & 8) != 0)
  {
    v9 = *((_DWORD *)a2 + 7);
    if (v9 >= 4)
      __assert_rtn("set_estimated_moving_state", "CoreNavigationCLPRavenOutput.pb.h", 5779, "::CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity_MovingStateType_IsValid(value)");
    *((_DWORD *)v3 + 57) |= 8u;
    *((_DWORD *)v3 + 7) = v9;
    v4 = *((_DWORD *)a2 + 57);
  }
  if ((v4 & 0x10) == 0)
  {
    if ((v4 & 0x20) == 0)
      goto LABEL_20;
LABEL_24:
    v11 = *((_QWORD *)a2 + 5);
    *((_DWORD *)v3 + 57) |= 0x20u;
    *((_QWORD *)v3 + 5) = v11;
    v4 = *((_DWORD *)a2 + 57);
    if ((v4 & 0x40) == 0)
    {
LABEL_21:
      if ((v4 & 0x80) == 0)
        goto LABEL_29;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  v10 = *((_QWORD *)a2 + 4);
  *((_DWORD *)v3 + 57) |= 0x10u;
  *((_QWORD *)v3 + 4) = v10;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x20) != 0)
    goto LABEL_24;
LABEL_20:
  if ((v4 & 0x40) == 0)
    goto LABEL_21;
LABEL_25:
  v12 = *((_DWORD *)a2 + 12);
  if (v12 >= 0xA)
    __assert_rtn("set_user_fitness_session", "CoreNavigationCLPRavenOutput.pb.h", 5846, "::CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity_UserFitnessSessionType_IsValid(value)");
  *((_DWORD *)v3 + 57) |= 0x40u;
  *((_DWORD *)v3 + 12) = v12;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x80) != 0)
  {
LABEL_27:
    v13 = *((_DWORD *)a2 + 13);
    if (v13 >= 4)
      __assert_rtn("set_estimated_mount_state", "CoreNavigationCLPRavenOutput.pb.h", 5869, "::CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity_MountStateType_IsValid(value)");
    *((_DWORD *)v3 + 57) |= 0x80u;
    *((_DWORD *)v3 + 13) = v13;
    v4 = *((_DWORD *)a2 + 57);
  }
LABEL_29:
  if ((v4 & 0xFF00) == 0)
    goto LABEL_41;
  if ((v4 & 0x100) != 0)
  {
    v14 = *((_DWORD *)a2 + 34);
    if (v14 >= 3)
      __assert_rtn("set_estimated_position_context_state", "CoreNavigationCLPRavenOutput.pb.h", 5892, "::CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity_PositionContextStateType_IsValid(value)");
    *((_DWORD *)v3 + 57) |= 0x100u;
    *((_DWORD *)v3 + 34) = v14;
    v4 = *((_DWORD *)a2 + 57);
  }
  if ((v4 & 0x200) != 0)
  {
    v24 = *((_QWORD *)a2 + 7);
    *((_DWORD *)v3 + 57) |= 0x200u;
    *((_QWORD *)v3 + 7) = v24;
    v4 = *((_DWORD *)a2 + 57);
    if ((v4 & 0x400) == 0)
    {
LABEL_35:
      if ((v4 & 0x800) == 0)
        goto LABEL_36;
      goto LABEL_69;
    }
  }
  else if ((v4 & 0x400) == 0)
  {
    goto LABEL_35;
  }
  v25 = *((_QWORD *)a2 + 8);
  *((_DWORD *)v3 + 57) |= 0x400u;
  *((_QWORD *)v3 + 8) = v25;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0)
      goto LABEL_37;
    goto LABEL_70;
  }
LABEL_69:
  v26 = *((_QWORD *)a2 + 9);
  *((_DWORD *)v3 + 57) |= 0x800u;
  *((_QWORD *)v3 + 9) = v26;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x2000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_70:
  v27 = *((_QWORD *)a2 + 10);
  *((_DWORD *)v3 + 57) |= 0x1000u;
  *((_QWORD *)v3 + 10) = v27;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x2000) == 0)
  {
LABEL_38:
    if ((v4 & 0x4000) == 0)
      goto LABEL_39;
    goto LABEL_72;
  }
LABEL_71:
  v28 = *((_QWORD *)a2 + 11);
  *((_DWORD *)v3 + 57) |= 0x2000u;
  *((_QWORD *)v3 + 11) = v28;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x4000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_72:
  v29 = *((_QWORD *)a2 + 12);
  *((_DWORD *)v3 + 57) |= 0x4000u;
  *((_QWORD *)v3 + 12) = v29;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x8000) != 0)
  {
LABEL_40:
    v15 = *((_QWORD *)a2 + 13);
    *((_DWORD *)v3 + 57) |= 0x8000u;
    *((_QWORD *)v3 + 13) = v15;
    v4 = *((_DWORD *)a2 + 57);
  }
LABEL_41:
  if ((v4 & 0xFF0000) == 0)
    goto LABEL_51;
  if ((v4 & 0x10000) != 0)
  {
    v17 = *((_QWORD *)a2 + 14);
    *((_DWORD *)v3 + 57) |= 0x10000u;
    *((_QWORD *)v3 + 14) = v17;
    v4 = *((_DWORD *)a2 + 57);
    if ((v4 & 0x20000) == 0)
    {
LABEL_44:
      if ((v4 & 0x40000) == 0)
        goto LABEL_45;
      goto LABEL_61;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_44;
  }
  v18 = *((_QWORD *)a2 + 15);
  *((_DWORD *)v3 + 57) |= 0x20000u;
  *((_QWORD *)v3 + 15) = v18;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x40000) == 0)
  {
LABEL_45:
    if ((v4 & 0x80000) == 0)
      goto LABEL_46;
    goto LABEL_62;
  }
LABEL_61:
  v19 = *((_QWORD *)a2 + 16);
  *((_DWORD *)v3 + 57) |= 0x40000u;
  *((_QWORD *)v3 + 16) = v19;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x80000) == 0)
  {
LABEL_46:
    if ((v4 & 0x100000) == 0)
      goto LABEL_47;
    goto LABEL_63;
  }
LABEL_62:
  v20 = *((_QWORD *)a2 + 18);
  *((_DWORD *)v3 + 57) |= 0x80000u;
  *((_QWORD *)v3 + 18) = v20;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x100000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200000) == 0)
      goto LABEL_48;
    goto LABEL_64;
  }
LABEL_63:
  v21 = *((_QWORD *)a2 + 19);
  *((_DWORD *)v3 + 57) |= 0x100000u;
  *((_QWORD *)v3 + 19) = v21;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x200000) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0)
      goto LABEL_49;
    goto LABEL_65;
  }
LABEL_64:
  v22 = *((_QWORD *)a2 + 20);
  *((_DWORD *)v3 + 57) |= 0x200000u;
  *((_QWORD *)v3 + 20) = v22;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x400000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_50;
  }
LABEL_65:
  v23 = *((_QWORD *)a2 + 21);
  *((_DWORD *)v3 + 57) |= 0x400000u;
  *((_QWORD *)v3 + 21) = v23;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x800000) != 0)
  {
LABEL_50:
    v16 = *((_QWORD *)a2 + 22);
    *((_DWORD *)v3 + 57) |= 0x800000u;
    *((_QWORD *)v3 + 22) = v16;
    v4 = *((_DWORD *)a2 + 57);
  }
LABEL_51:
  if (!HIBYTE(v4))
    return;
  if ((v4 & 0x1000000) != 0)
  {
    v30 = *((_QWORD *)a2 + 23);
    *((_DWORD *)v3 + 57) |= 0x1000000u;
    *((_QWORD *)v3 + 23) = v30;
    v4 = *((_DWORD *)a2 + 57);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_54:
      if ((v4 & 0x4000000) == 0)
        goto LABEL_55;
      goto LABEL_76;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_54;
  }
  v31 = *((_QWORD *)a2 + 24);
  *((_DWORD *)v3 + 57) |= 0x2000000u;
  *((_QWORD *)v3 + 24) = v31;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_55:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_56;
    goto LABEL_77;
  }
LABEL_76:
  v32 = *((_QWORD *)a2 + 25);
  *((_DWORD *)v3 + 57) |= 0x4000000u;
  *((_QWORD *)v3 + 25) = v32;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_56:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_57;
LABEL_78:
    v34 = *((_QWORD *)a2 + 27);
    *((_DWORD *)v3 + 57) |= 0x10000000u;
    *((_QWORD *)v3 + 27) = v34;
    if ((*((_DWORD *)a2 + 57) & 0x20000000) == 0)
      return;
    goto LABEL_79;
  }
LABEL_77:
  v33 = *((_QWORD *)a2 + 26);
  *((_DWORD *)v3 + 57) |= 0x8000000u;
  *((_QWORD *)v3 + 26) = v33;
  v4 = *((_DWORD *)a2 + 57);
  if ((v4 & 0x10000000) != 0)
    goto LABEL_78;
LABEL_57:
  if ((v4 & 0x20000000) == 0)
    return;
LABEL_79:
  v35 = *((_DWORD *)a2 + 35);
  if (v35 >= 8)
    __assert_rtn("set_estimated_signal_environment", "CoreNavigationCLPRavenOutput.pb.h", 6355, "::CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity_SignalEnvironmentType_IsValid(value)");
  *((_DWORD *)v3 + 57) |= 0x20000000u;
  *((_DWORD *)v3 + 35) = v35;
}

void sub_18D0A204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::Raven::EstimatorState::MergeFrom(CoreNavigation::CLP::LogEntry::Raven::EstimatorState *this, const CoreNavigation::CLP::LogEntry::Raven::EstimatorState *a2)
{
  CoreNavigation::CLP::LogEntry::Raven::EstimatorState *v3;
  double result;
  int v5;
  CoreNavigation::CLP::LogEntry::Raven::TimeStamp *v6;
  const CoreNavigation::CLP::LogEntry::Raven::TimeStamp *v7;
  CoreNavigation::CLP::LogEntry::Raven::UserPosition *v8;
  const CoreNavigation::CLP::LogEntry::Raven::UserPosition *v9;
  CoreNavigation::CLP::LogEntry::Raven::UserVelocity *v10;
  const CoreNavigation::CLP::LogEntry::Raven::UserVelocity *v11;
  CoreNavigation::CLP::LogEntry::Raven::DevicePosition *v12;
  const CoreNavigation::CLP::LogEntry::Raven::DevicePosition *v13;
  CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity *v14;
  const CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity *v15;
  CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude *v16;
  const CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude *v17;
  CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias *v18;
  const CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias *v19;
  CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias *v20;
  const CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias *v21;
  CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor *v22;
  const CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor *v23;
  CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy *v24;
  const CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy *v25;
  _BYTE v26[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  v5 = *((_DWORD *)a2 + 23);
  if (!(_BYTE)v5)
    goto LABEL_53;
  if ((v5 & 1) != 0)
  {
    *((_DWORD *)v3 + 23) |= 1u;
    v6 = (CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)*((_QWORD *)v3 + 1);
    if (!v6)
    {
      this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
      v6 = this;
      *(_QWORD *)this = &off_1E25C0010;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *((_QWORD *)v3 + 1) = this;
    }
    v7 = (const CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)*((_QWORD *)a2 + 1);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
      v7 = *(const CoreNavigation::CLP::LogEntry::Raven::TimeStamp **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                     + 8);
    }
    result = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::MergeFrom(v6, v7);
    v5 = *((_DWORD *)a2 + 23);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  *((_DWORD *)v3 + 23) |= 2u;
  v8 = (CoreNavigation::CLP::LogEntry::Raven::UserPosition *)*((_QWORD *)v3 + 2);
  if (!v8)
  {
    this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
    v8 = this;
    *(_QWORD *)this = &off_1E25BF7A0;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)v3 + 2) = this;
  }
  v9 = (const CoreNavigation::CLP::LogEntry::Raven::UserPosition *)*((_QWORD *)a2 + 2);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v9 = *(const CoreNavigation::CLP::LogEntry::Raven::UserPosition **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                      + 16);
  }
  result = CoreNavigation::CLP::LogEntry::Raven::UserPosition::MergeFrom(v8, v9);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_23:
  *((_DWORD *)v3 + 23) |= 4u;
  v10 = (CoreNavigation::CLP::LogEntry::Raven::UserVelocity *)*((_QWORD *)v3 + 3);
  if (!v10)
  {
    this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
    v10 = this;
    *(_QWORD *)this = &off_1E25BF818;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
    *((_QWORD *)v3 + 3) = this;
  }
  v11 = (const CoreNavigation::CLP::LogEntry::Raven::UserVelocity *)*((_QWORD *)a2 + 3);
  if (!v11)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v11 = *(const CoreNavigation::CLP::LogEntry::Raven::UserVelocity **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                       + 24);
  }
  result = CoreNavigation::CLP::LogEntry::Raven::UserVelocity::MergeFrom(v10, v11);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_28:
  *((_DWORD *)v3 + 23) |= 8u;
  v12 = (CoreNavigation::CLP::LogEntry::Raven::DevicePosition *)*((_QWORD *)v3 + 4);
  if (!v12)
  {
    this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
    v12 = this;
    *(_QWORD *)this = &off_1E25BF908;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)v3 + 4) = this;
  }
  v13 = (const CoreNavigation::CLP::LogEntry::Raven::DevicePosition *)*((_QWORD *)a2 + 4);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v13 = *(const CoreNavigation::CLP::LogEntry::Raven::DevicePosition **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                         + 32);
  }
  result = CoreNavigation::CLP::LogEntry::Raven::DevicePosition::MergeFrom(v12, v13);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_38:
    *((_DWORD *)v3 + 23) |= 0x20u;
    v16 = (CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude *)*((_QWORD *)v3 + 6);
    if (!v16)
    {
      this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
      v16 = this;
      *(_QWORD *)this = &off_1E25BF890;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)((char *)this + 104) = 0u;
      *(_OWORD *)((char *)this + 120) = 0u;
      *((_QWORD *)v3 + 6) = this;
    }
    v17 = (const CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude *)*((_QWORD *)a2 + 6);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
      v17 = *(const CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                           + 48);
    }
    result = CoreNavigation::CLP::LogEntry::Raven::DeviceAttitude::MergeFrom(v16, v17);
    v5 = *((_DWORD *)a2 + 23);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_53;
      goto LABEL_48;
    }
    goto LABEL_43;
  }
LABEL_33:
  *((_DWORD *)v3 + 23) |= 0x10u;
  v14 = (CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity *)*((_QWORD *)v3 + 5);
  if (!v14)
  {
    this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
    v14 = this;
    *(_QWORD *)this = &off_1E25BF980;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)v3 + 5) = this;
  }
  v15 = (const CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity *)*((_QWORD *)a2 + 5);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v15 = *(const CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                         + 40);
  }
  result = CoreNavigation::CLP::LogEntry::Raven::DeviceVelocity::MergeFrom(v14, v15);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 0x20) != 0)
    goto LABEL_38;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_43:
  *((_DWORD *)v3 + 23) |= 0x40u;
  v18 = (CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias *)*((_QWORD *)v3 + 7);
  if (!v18)
  {
    this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
    v18 = this;
    *(_QWORD *)this = &off_1E25BFC50;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)v3 + 7) = this;
  }
  v19 = (const CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias *)*((_QWORD *)a2 + 7);
  if (!v19)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v19 = *(const CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                             + 56);
  }
  result = CoreNavigation::CLP::LogEntry::Raven::DeviceRateGyroBias::MergeFrom(v18, v19);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 0x80) != 0)
  {
LABEL_48:
    *((_DWORD *)v3 + 23) |= 0x80u;
    v20 = (CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias *)*((_QWORD *)v3 + 8);
    if (!v20)
    {
      this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
      v20 = this;
      *(_QWORD *)this = &off_1E25BFD40;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_OWORD *)((char *)this + 72) = 0u;
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)v3 + 8) = this;
    }
    v21 = (const CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias *)*((_QWORD *)a2 + 8);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
      v21 = *(const CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                                    + 64);
    }
    result = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerBias::MergeFrom(v20, v21);
    v5 = *((_DWORD *)a2 + 23);
  }
LABEL_53:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      *((_DWORD *)v3 + 23) |= 0x100u;
      v22 = (CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor *)*((_QWORD *)v3 + 9);
      if (!v22)
      {
        this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
        v22 = this;
        *(_QWORD *)this = &off_1E25BFE30;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *(_OWORD *)((char *)this + 56) = 0u;
        *(_OWORD *)((char *)this + 72) = 0u;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)v3 + 9) = this;
      }
      v23 = (const CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor *)*((_QWORD *)a2 + 9);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
        v23 = *(const CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                                             + 72);
      }
      result = CoreNavigation::CLP::LogEntry::Raven::DeviceAccelerometerScaleFactor::MergeFrom(v22, v23);
      v5 = *((_DWORD *)a2 + 23);
    }
    if ((v5 & 0x200) != 0)
    {
      *((_DWORD *)v3 + 23) |= 0x200u;
      v24 = (CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy *)*((_QWORD *)v3 + 10);
      if (!v24)
      {
        this = (CoreNavigation::CLP::LogEntry::Raven::EstimatorState *)operator new();
        v24 = this;
        *(_QWORD *)this = &off_1E25BFEA8;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)v3 + 10) = this;
      }
      v25 = (const CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy *)*((_QWORD *)a2 + 10);
      if (!v25)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
        v25 = *(const CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy **)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_
                                                                                             + 80);
      }
      return CoreNavigation::CLP::LogEntry::Raven::DeviceReceiverClockDiscrepancy::MergeFrom(v24, v25);
    }
  }
  return result;
}

void sub_18D0A262C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::Raven::NrParameters::MergeFrom(CoreNavigation::CLP::LogEntry::Raven::NrParameters *this, const CoreNavigation::CLP::LogEntry::Raven::NrParameters *a2)
{
  CoreNavigation::CLP::LogEntry::Raven::NrParameters *v3;
  double result;
  int v5;
  CoreNavigation::CLP::LogEntry::Raven::TimeStamp *v6;
  const CoreNavigation::CLP::LogEntry::Raven::TimeStamp *v7;
  char v8;
  char v9;
  _BYTE v10[48];

  v3 = this;
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  v5 = *((_DWORD *)a2 + 40);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    *((_DWORD *)v3 + 40) |= 1u;
    v6 = (CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)*((_QWORD *)v3 + 1);
    if (!v6)
    {
      this = (CoreNavigation::CLP::LogEntry::Raven::NrParameters *)operator new();
      v6 = this;
      *(_QWORD *)this = &off_1E25C0010;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *((_QWORD *)v3 + 1) = this;
    }
    v7 = (const CoreNavigation::CLP::LogEntry::Raven::TimeStamp *)*((_QWORD *)a2 + 1);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
      v7 = *(const CoreNavigation::CLP::LogEntry::Raven::TimeStamp **)(CoreNavigation::CLP::LogEntry::Raven::NrParameters::default_instance_
                                                                     + 8);
    }
    result = CoreNavigation::CLP::LogEntry::Raven::TimeStamp::MergeFrom(v6, v7);
    v5 = *((_DWORD *)a2 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_36;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  result = *((double *)a2 + 2);
  *((_DWORD *)v3 + 40) |= 2u;
  *((double *)v3 + 2) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  result = *((double *)a2 + 3);
  *((_DWORD *)v3 + 40) |= 4u;
  *((double *)v3 + 3) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 4);
  *((_DWORD *)v3 + 40) |= 8u;
  *((double *)v3 + 4) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_39:
    v9 = *((_BYTE *)a2 + 153);
    *((_DWORD *)v3 + 40) |= 0x20u;
    *((_BYTE *)v3 + 153) = v9;
    v5 = *((_DWORD *)a2 + 40);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_38:
  v8 = *((_BYTE *)a2 + 152);
  *((_DWORD *)v3 + 40) |= 0x10u;
  *((_BYTE *)v3 + 152) = v8;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_39;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_40:
  result = *((double *)a2 + 5);
  *((_DWORD *)v3 + 40) |= 0x40u;
  *((double *)v3 + 5) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    result = *((double *)a2 + 6);
    *((_DWORD *)v3 + 40) |= 0x80u;
    *((double *)v3 + 6) = result;
    v5 = *((_DWORD *)a2 + 40);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    goto LABEL_23;
  if ((v5 & 0x100) != 0)
  {
    result = *((double *)a2 + 7);
    *((_DWORD *)v3 + 40) |= 0x100u;
    *((double *)v3 + 7) = result;
    v5 = *((_DWORD *)a2 + 40);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_44;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  result = *((double *)a2 + 8);
  *((_DWORD *)v3 + 40) |= 0x200u;
  *((double *)v3 + 8) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 9);
  *((_DWORD *)v3 + 40) |= 0x400u;
  *((double *)v3 + 9) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 10);
  *((_DWORD *)v3 + 40) |= 0x800u;
  *((double *)v3 + 10) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  result = *((double *)a2 + 11);
  *((_DWORD *)v3 + 40) |= 0x1000u;
  *((double *)v3 + 11) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  result = *((double *)a2 + 12);
  *((_DWORD *)v3 + 40) |= 0x2000u;
  *((double *)v3 + 12) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_48:
  result = *((double *)a2 + 13);
  *((_DWORD *)v3 + 40) |= 0x4000u;
  *((double *)v3 + 13) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x8000) != 0)
  {
LABEL_22:
    result = *((double *)a2 + 14);
    *((_DWORD *)v3 + 40) |= 0x8000u;
    *((double *)v3 + 14) = result;
    v5 = *((_DWORD *)a2 + 40);
  }
LABEL_23:
  if ((v5 & 0xFF0000) == 0)
    return result;
  if ((v5 & 0x10000) != 0)
  {
    result = *((double *)a2 + 15);
    *((_DWORD *)v3 + 40) |= 0x10000u;
    *((double *)v3 + 15) = result;
    v5 = *((_DWORD *)a2 + 40);
    if ((v5 & 0x20000) == 0)
    {
LABEL_26:
      if ((v5 & 0x40000) == 0)
        goto LABEL_27;
      goto LABEL_52;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_26;
  }
  result = *((double *)a2 + 16);
  *((_DWORD *)v3 + 40) |= 0x20000u;
  *((double *)v3 + 16) = result;
  v5 = *((_DWORD *)a2 + 40);
  if ((v5 & 0x40000) == 0)
  {
LABEL_27:
    if ((v5 & 0x80000) == 0)
      return result;
    goto LABEL_28;
  }
LABEL_52:
  result = *((double *)a2 + 17);
  *((_DWORD *)v3 + 40) |= 0x40000u;
  *((double *)v3 + 17) = result;
  if ((*((_DWORD *)a2 + 40) & 0x80000) == 0)
    return result;
LABEL_28:
  result = *((double *)a2 + 18);
  *((_DWORD *)v3 + 40) |= 0x80000u;
  *((double *)v3 + 18) = result;
  return result;
}

