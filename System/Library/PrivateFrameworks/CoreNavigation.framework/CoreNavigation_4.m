void sub_18D1C3250(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C3264(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0x4022000000000000;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 280) = 0x100000008;
  *(_QWORD *)(a1 + 256) = &unk_1E25C86C0;
  *(_OWORD *)(a1 + 264) = xmmword_18D319940;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  *(_QWORD *)(a1 + 384) = 0x800000008;
  *(_QWORD *)(a1 + 360) = &unk_1E25C87E0;
  *(_OWORD *)(a1 + 368) = xmmword_18D319930;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  *(_QWORD *)(a1 + 936) = 0x100000008;
  *(_QWORD *)(a1 + 912) = &unk_1E25C86C0;
  *(_OWORD *)(a1 + 920) = xmmword_18D319940;
  *(_QWORD *)(a1 + 944) = a1 + 952;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1032) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1097) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1120) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1192) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1200) = a1 + 1208;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1224) = a1 + 1232;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1248) = a1 + 1256;
  *(_BYTE *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1376) = 1065353216;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_DWORD *)(a1 + 1416) = 1065353216;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_DWORD *)(a1 + 1456) = 1065353216;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_DWORD *)(a1 + 1496) = 1065353216;
  *(_WORD *)(a1 + 1504) = 0;
  *(_BYTE *)(a1 + 1506) = 0;
  v2 = (_QWORD *)(a1 + 1512);
  v3 = (uint64_t *)(a1 + 1928);
  v4 = MEMORY[0x1E0DE4FB0];
  v5 = MEMORY[0x1E0DE4FB0] + 64;
  *(_QWORD *)(a1 + 1928) = MEMORY[0x1E0DE4FB0] + 64;
  v6 = a1 + 1520;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *(_QWORD *)(a1 + 1512) = v7;
  *(_QWORD *)(a1 + 1512 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)(a1 + 1512 + *(_QWORD *)(*(_QWORD *)(a1 + 1512) - 24));
  std::ios_base::init(v9, (void *)(a1 + 1520));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *v2 = v4 + 24;
  *v3 = v5;
  MEMORY[0x18D78B250](v6);
  *(_QWORD *)(a1 + 2080) = 0;
  *(_DWORD *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 2096) = 0;
  *(_BYTE *)(a1 + 2192) = 0;
  *(_BYTE *)(a1 + 2200) = 0;
  *(_BYTE *)(a1 + 2304) = 0;
  *(_BYTE *)(a1 + 2312) = 0;
  *(_BYTE *)(a1 + 2416) = 0;
  *(_BYTE *)(a1 + 2424) = 1;
  *(_QWORD *)(a1 + 2432) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 2440) = 0;
  *(_QWORD *)(a1 + 2448) = 0x7FF8000000000000;
  return a1;
}

void sub_18D1C34F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  std::ostream::~ostream();
  MEMORY[0x18D78B550](v14);
  sub_18D04B08C(v13);
  sub_18D04B08C(v11 + 1216);
  sub_18D04B100(v12);
  sub_18D04B100(v11 + 1136);
  sub_18D03D9B4(v11 + 1040, *(_QWORD **)(v10 + 1256));
  sub_18D03D9B4(v11 + 1016, *(_QWORD **)(v10 + 1232));
  sub_18D03D9B4(v11 + 992, *(_QWORD **)(v10 + 1208));
  *(_QWORD *)(v10 + 912) = &unk_1E25C5E70;
  *(_QWORD *)(v10 + 360) = &unk_1E25C5E70;
  *(_QWORD *)(v10 + 256) = &unk_1E25C5E70;
  sub_18D178B20(v11);
  v15 = *(void **)(v10 + 48);
  if (v15)
  {
    *(_QWORD *)(v10 + 56) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_18D1C35AC(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C35D0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C35DC(uint64_t a1)
{
  char v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

_QWORD *sub_18D1C3628(_QWORD *result)
{
  *result = &unk_1E25C5DE0;
  return result;
}

_QWORD *sub_18D1C363C(_QWORD *result)
{
  *result = &unk_1E25C5CC0;
  return result;
}

_QWORD *sub_18D1C3650(_QWORD *a1)
{
  *a1 = &unk_1E25C82D0;
  sub_18D1C3A48(a1 + 5);
  *a1 = &unk_1E25C5A50;
  return a1;
}

_QWORD *sub_18D1C3698(_QWORD *a1)
{
  *a1 = &unk_1E25C82A0;
  sub_18D1C3D98(a1 + 5);
  *a1 = &unk_1E25C5A20;
  return a1;
}

_QWORD *sub_18D1C36E0(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1C36F4(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1C3708(_QWORD *result)
{
  *result = &unk_1E25C58D0;
  return result;
}

_QWORD *sub_18D1C371C(_QWORD *result)
{
  *result = &unk_1E25C5DE0;
  return result;
}

_QWORD *sub_18D1C3730(_QWORD *result)
{
  *result = &unk_1E25C5CC0;
  return result;
}

_QWORD *sub_18D1C3744(_QWORD *a1)
{
  *a1 = &unk_1E25C6410;
  sub_18D1C3A48(a1 + 5);
  *a1 = &unk_1E25C5A50;
  return a1;
}

_QWORD *sub_18D1C378C(_QWORD *a1)
{
  *a1 = &unk_1E25C63E0;
  sub_18D1C3D98(a1 + 5);
  *a1 = &unk_1E25C5A20;
  return a1;
}

_QWORD *sub_18D1C37D4(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1C37E8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1C37FC(_QWORD *result)
{
  *result = &unk_1E25C58D0;
  return result;
}

void sub_18D1C3810(_QWORD *a1)
{
  *a1 = &unk_1E25C5DE0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C3834(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C3840(uint64_t a1)
{
  char v1[87];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D164F74(a1, v1);
}

void sub_18D1C3894(_QWORD *a1)
{
  *a1 = &unk_1E25C5CC0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C38B8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C38C4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[87];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D1C39C4(_QWORD *a1)
{
  *a1 = &unk_1E25C82D0;
  sub_18D1C3A48(a1 + 5);
  *a1 = &unk_1E25C5A50;
  JUMPOUT(0x18D78B5D4);
}

uint64_t *sub_18D1C3A1C(uint64_t a1)
{
  uint64_t *result;

  result = sub_18D1C3AA4(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t *sub_18D1C3A48(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = 112 * v2;
      v4 = v1 - 112;
      do
      {
        *(_QWORD *)(v4 + v3) = &unk_1E25C5E70;
        v3 -= 112;
      }
      while (v3);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

uint64_t *sub_18D1C3AA4(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = (_OWORD *)operator new[]();
  v3 = (uint64_t)(v2 + 1);
  *v2 = xmmword_18D319AB0;
  v4 = (char *)v2 + 56;
  v5 = 9744;
  do
  {
    *((_QWORD *)v4 - 2) = 0x300000003;
    *((_QWORD *)v4 - 5) = &unk_1E25C78E0;
    *((_OWORD *)v4 - 2) = xmmword_18D30BB60;
    *((_QWORD *)v4 - 1) = v4;
    v4 += 112;
    v5 -= 112;
  }
  while (v5);
  return sub_18D1C3B24((uint64_t *)(a1 + 40), v3);
}

uint64_t *sub_18D1C3B24(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 112 * v3;
      v5 = v2 - 112;
      do
      {
        *(_QWORD *)(v5 + v4) = &unk_1E25C5E70;
        v4 -= 112;
      }
      while (v4);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

void sub_18D1C3B78(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new[]();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 79) = 0;
  sub_18D1C3C08(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1C3BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5BC](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18D1C3C08(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  _BYTE v14[112];
  _BYTE v15[120];

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = v4 + v2 - v6;
        v9 = (v7 - 1);
        v10 = 1;
        do
        {
          sub_18D159B20((uint64_t)v15, *(_QWORD *)(a1 + 32) + 112 * v10);
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = v10;
            do
            {
              v12 = v12 * v8 % (int)v9;
              v13 = 112 * v12;
              sub_18D159B20((uint64_t)v14, *(_QWORD *)(a1 + 32) + v13);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + v13, (uint64_t)v15);
              *v11 = 1;
              sub_18D053AA8((uint64_t)v15, (uint64_t)v14);
              v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

void sub_18D1C3D14(_QWORD *a1)
{
  *a1 = &unk_1E25C82A0;
  sub_18D1C3D98(a1 + 5);
  *a1 = &unk_1E25C5A20;
  JUMPOUT(0x18D78B5D4);
}

uint64_t *sub_18D1C3D6C(uint64_t a1)
{
  uint64_t *result;

  result = sub_18D1C3DF0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t *sub_18D1C3D98(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = v2 << 6;
      v4 = v1 - 64;
      do
      {
        *(_QWORD *)(v4 + v3) = &unk_1E25C5E70;
        v3 -= 64;
      }
      while (v3);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

uint64_t *sub_18D1C3DF0(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = (_OWORD *)operator new[]();
  v3 = (uint64_t)(v2 + 1);
  *v2 = xmmword_18D319AC0;
  v4 = (char *)v2 + 56;
  v5 = 5568;
  do
  {
    *((_QWORD *)v4 - 2) = 0x100000003;
    *((_QWORD *)v4 - 5) = &unk_1E25C7790;
    *((_OWORD *)v4 - 2) = xmmword_18D313070;
    *((_QWORD *)v4 - 1) = v4;
    v4 += 64;
    v5 -= 64;
  }
  while (v5);
  return sub_18D1C3E74((uint64_t *)(a1 + 40), v3);
}

uint64_t *sub_18D1C3E74(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = v3 << 6;
      v5 = v2 - 64;
      do
      {
        *(_QWORD *)(v5 + v4) = &unk_1E25C5E70;
        v4 -= 64;
      }
      while (v4);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

void sub_18D1C3EC4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new[]();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 79) = 0;
  sub_18D1C3F54(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1C3F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5BC](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18D1C3F54(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE v13[64];
  _BYTE v14[64];

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = v4 + v2 - v6;
        v9 = (v7 - 1);
        v10 = 1;
        do
        {
          sub_18D04DA0C((uint64_t)v14, *(_QWORD *)(a1 + 32) + (v10 << 6));
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = v10;
            do
            {
              v12 = v12 * v8 % (int)v9;
              sub_18D04DA0C((uint64_t)v13, *(_QWORD *)(a1 + 32) + ((uint64_t)v12 << 6));
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + ((uint64_t)v12 << 6), (uint64_t)v14);
              *v11 = 1;
              sub_18D053AA8((uint64_t)v14, (uint64_t)v13);
              v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

void sub_18D1C4058(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C407C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C4088(uint64_t a1)
{
  char v1[87];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

void sub_18D1C40D4(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C40F8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C4104(uint64_t a1)
{
  char v1[87];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1C4150(_QWORD *a1)
{
  *a1 = &unk_1E25C58D0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4174(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C4180(uint64_t a1)
{
  char v1[87];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D1C41D4(a1, v1);
}

void sub_18D1C41D4(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = (v7 - 1);
        v9 = 1;
        do
        {
          v14 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16 * v9);
          v10 = &a2[v9];
          if (!a2[v9])
          {
            v11 = v9;
            do
            {
              v11 = (int)(v11 * (v4 + v2 - v6)) % (int)v8;
              v12 = *(_QWORD *)(a1 + 32);
              v13 = *(_OWORD *)(v12 + 16 * v11);
              *(_OWORD *)(v12 + 16 * v11) = v14;
              *v10 = 1;
              v14 = v13;
              v10 = &a2[v11];
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v8);
      }
    }
  }
}

void sub_18D1C42A8(_QWORD *a1)
{
  *a1 = &unk_1E25C5DE0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C42CC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C42D8(uint64_t a1)
{
  char v1[174];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D164F74(a1, v1);
}

void sub_18D1C4324(_QWORD *a1)
{
  *a1 = &unk_1E25C5CC0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4348(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C4354(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[174];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D1C4454(_QWORD *a1)
{
  *a1 = &unk_1E25C6410;
  sub_18D1C3A48(a1 + 5);
  *a1 = &unk_1E25C5A50;
  JUMPOUT(0x18D78B5D4);
}

uint64_t *sub_18D1C44AC(uint64_t a1)
{
  uint64_t *result;

  result = sub_18D1C44D8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t *sub_18D1C44D8(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = (_OWORD *)operator new[]();
  v3 = (uint64_t)(v2 + 1);
  *v2 = xmmword_18D319AD0;
  v4 = (char *)v2 + 56;
  v5 = 19488;
  do
  {
    *((_QWORD *)v4 - 2) = 0x300000003;
    *((_QWORD *)v4 - 5) = &unk_1E25C78E0;
    *((_OWORD *)v4 - 2) = xmmword_18D30BB60;
    *((_QWORD *)v4 - 1) = v4;
    v4 += 112;
    v5 -= 112;
  }
  while (v5);
  return sub_18D1C3B24((uint64_t *)(a1 + 40), v3);
}

void sub_18D1C4558(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new[]();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 158) = 0u;
  sub_18D1C3C08(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1C45CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5BC](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18D1C45F0(_QWORD *a1)
{
  *a1 = &unk_1E25C63E0;
  sub_18D1C3D98(a1 + 5);
  *a1 = &unk_1E25C5A20;
  JUMPOUT(0x18D78B5D4);
}

uint64_t *sub_18D1C4648(uint64_t a1)
{
  uint64_t *result;

  result = sub_18D1C4674(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t *sub_18D1C4674(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = (_OWORD *)operator new[]();
  v3 = (uint64_t)(v2 + 1);
  *v2 = xmmword_18D319AE0;
  v4 = (char *)v2 + 56;
  v5 = 11136;
  do
  {
    *((_QWORD *)v4 - 2) = 0x100000003;
    *((_QWORD *)v4 - 5) = &unk_1E25C7790;
    *((_OWORD *)v4 - 2) = xmmword_18D313070;
    *((_QWORD *)v4 - 1) = v4;
    v4 += 64;
    v5 -= 64;
  }
  while (v5);
  return sub_18D1C3E74((uint64_t *)(a1 + 40), v3);
}

void sub_18D1C46F8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new[]();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 158) = 0u;
  sub_18D1C3F54(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1C476C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5BC](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18D1C4790(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C47B4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C47C0(uint64_t a1)
{
  char v1[174];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

void sub_18D1C480C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4830(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C483C(uint64_t a1)
{
  char v1[174];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1C4888(_QWORD *a1)
{
  *a1 = &unk_1E25C58D0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C48AC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C48B8(uint64_t a1)
{
  char v1[174];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D1C41D4(a1, v1);
}

uint64_t (**sub_18D1C4904(uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*result)
    return (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*result)(0, result, 0, 0, 0);
  return result;
}

void sub_18D1C4938(_QWORD *a1)
{
  uint64_t v1;

  v1 = 2100;
  do
  {
    a1[v1] = &unk_1E25B8DB8;
    v1 -= 6;
  }
  while (v1 * 8);
  *a1 = &unk_1E25B90C0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4978(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  if (!*(_DWORD *)(a1 + 8))
    return 0xFFFFFFFFLL;
  result = 0;
  v4 = a1 + 48 * *(unsigned int *)(a1 + 40);
  v5 = *(_OWORD *)(v4 + 56);
  v6 = *(_OWORD *)(v4 + 72);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v4 + 88);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_18D1C49B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  if (!*(_DWORD *)(a1 + 8))
    return 0xFFFFFFFFLL;
  result = 0;
  v4 = a1 + 48 * *(unsigned int *)(a1 + 44);
  v5 = *(_OWORD *)(v4 + 56);
  v6 = *(_OWORD *)(v4 + 72);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v4 + 88);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

void sub_18D1C4A00(_QWORD *a1)
{
  uint64_t v1;

  v1 = 2100;
  do
  {
    a1[v1] = &unk_1E25B8DE8;
    v1 -= 6;
  }
  while (v1 * 8);
  *a1 = &unk_1E25B9108;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4A40(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  if (!*(_DWORD *)(a1 + 8))
    return 0xFFFFFFFFLL;
  result = 0;
  v4 = a1 + 48 * *(unsigned int *)(a1 + 40);
  v5 = *(_OWORD *)(v4 + 56);
  v6 = *(_OWORD *)(v4 + 72);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v4 + 88);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_18D1C4A80(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  if (!*(_DWORD *)(a1 + 8))
    return 0xFFFFFFFFLL;
  result = 0;
  v4 = a1 + 48 * *(unsigned int *)(a1 + 44);
  v5 = *(_OWORD *)(v4 + 56);
  v6 = *(_OWORD *)(v4 + 72);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v4 + 88);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

_QWORD *sub_18D1C4AC8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1C4ADC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C6FB0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D1C4B3C(_QWORD *a1)
{
  sub_18D075A20(a1);
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1C4B60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x10000001ALL;
  *(_QWORD *)a2 = &unk_1E25C70A0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319790;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1108))
    v2 = a1 + 848;
  else
    v2 = a1 + 304;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

void sub_18D1C4BAC(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4BD0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C4BDC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[23];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1C4CD0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C6FB0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4D40(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1C4D6C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_18D1C4D6C(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x12B0uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1C4DD4(uint64_t a1)
{
  void *v2;

  v2 = (void *)operator new[]();
  bzero(v2, 0x256uLL);
  sub_18D0894A0(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1C4E38(uint64_t a1)
{
  sub_18D056F68(a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1C4E5C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4E80(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C4E8C(uint64_t a1)
{
  char v1[26];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1C4ED8(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    if (v3 != v2)
    {
      v4 = v3 - 2320;
      do
      {
        *(_QWORD *)v4 = &unk_1E25C5E70;
        *((_QWORD *)v4 - 366) = &unk_1E25C5E70;
        *((_QWORD *)v4 - 390) = &unk_1E25C5E70;
        v5 = v4 - 3136;
        v4 -= 5456;
      }
      while (v5 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_18D1C4F34(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_18D1C4F74(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C4FC4(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_18D1C5004(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C5064(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 296))
  {
    *(_QWORD *)(a1 + 240) = &unk_1E25C7160;
    v2 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 280) = 0;
    if (v2)
      MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 240) = &unk_1E25C5E70;
  }
  return a1;
}

uint64_t sub_18D1C50CC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E25B8F80;
  if (*(char *)(a1 + 1751) < 0)
    operator delete(*(void **)(a1 + 1728));
  if (*(char *)(a1 + 1727) < 0)
    operator delete(*(void **)(a1 + 1704));
  v3 = (void **)(a1 + 1680);
  sub_18D1C59AC(&v3);
  v3 = (void **)(a1 + 1656);
  sub_18D1C59AC(&v3);
  v3 = (void **)(a1 + 1632);
  sub_18D1C59AC(&v3);
  *(_QWORD *)(a1 + 1424) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 872) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 768) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 664) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 112) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 8) = &unk_1E25C5E70;
  return a1;
}

void sub_18D1C5174(_QWORD *a1)
{
  *a1 = &off_1E25B91D0;
  a1[301] = &unk_1E25C5E70;
  a1[288] = &unk_1E25C5E70;
  a1[219] = &unk_1E25C5E70;
  sub_18D1C50CC((uint64_t)a1);
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1C51BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000008;
  *(_QWORD *)a2 = &unk_1E25C86C0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319940;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540))
    v2 = a1 + 1424;
  else
    v2 = a1 + 664;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

double sub_18D1C5208@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x800000008;
  *(_QWORD *)a2 = &unk_1E25C87E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319930;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540))
    v2 = a1 + 872;
  else
    v2 = a1 + 112;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

void sub_18D1C5254(uint64_t a1)
{
  sub_18D1C50CC(a1);
  JUMPOUT(0x18D78B5D4);
}

char *sub_18D1C5278(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xC0300C0300C04)
    sub_18D07AFE4();
  result = (char *)sub_18D1C2CD4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[5456 * v4];
  return result;
}

uint64_t sub_18D1C52CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_18D1C2DCC((_OWORD *)(a3 + v6), (_OWORD *)(a1 + v6));
      v6 += 5456;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_18D1C533C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (v1)
  {
    v3 = -v1;
    v4 = (_QWORD *)(v2 + v1);
    do
    {
      v4[390] = &unk_1E25C5E70;
      v4[24] = &unk_1E25C5E70;
      *v4 = &unk_1E25C5E70;
      v4 -= 682;
      v3 += 5456;
    }
    while (v3);
  }
  _Unwind_Resume(a1);
}

_OWORD *sub_18D1C5378(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  _OWORD *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *a3 = *v5;
      sub_18D053AA8((uint64_t)(a3 + 1), (uint64_t)(v5 + 1));
      sub_18D053AA8((uint64_t)(a3 + 13), (uint64_t)(v5 + 13));
      sub_18D053AA8((uint64_t)(a3 + 196), (uint64_t)(v5 + 196));
      a3 += 341;
      v5 += 341;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_18D1C53F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25C2FF8;
  sub_18D07C868(a1 + 552);
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D1C5494(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_18D1C54F4(uint64_t a1)
{
  *(_QWORD *)(a1 + 96) = &unk_1E25C5E70;
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1C5554(uint64_t a1)
{
  *(_QWORD *)(a1 + 96) = &unk_1E25B8DB8;
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1C55B4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_18D1C55EC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E25CD390[v2])(&v4, a1);
  *(_DWORD *)(a1 + 144) = -1;
  return a1;
}

void sub_18D1C5644(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 96) = &unk_1E25B8DB8;
  *(_QWORD *)a2 = &unk_1E25B8EE0;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void sub_18D1C5678(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &unk_1E25B8EE0;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

uint64_t *sub_18D1C569C(uint64_t *a1, char *__s, size_t a3, unsigned __int8 a4, unsigned __int8 a5)
{
  size_t v10;
  unint64_t v11;

  *a1 = 0;
  v10 = strlen(__s);
  if (v10 >= a3)
    v11 = a3;
  else
    v11 = v10;
  sub_18D1C5704(a1, (unsigned __int8 *)__s, v11, a4, a5);
  return a1;
}

void sub_18D1C5704(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 a4, unsigned __int8 a5)
{
  unint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;

  if (a3)
  {
    v5 = a3;
    v6 = a2;
    do
    {
      v8 = *v6++;
      v7 = v8;
      if (v8 != a4 && v7 != a5)
        sub_18D1C57C0("bitset string ctor has invalid argument");
      --v5;
    }
    while (v5);
  }
  v10 = 14;
  if (a3 < 0xE)
    v10 = a3;
  if (!v10)
    goto LABEL_17;
  v11 = 0;
  v12 = *a1;
  v13 = v10;
  do
  {
    v14 = v12 & ~(1 << v11);
    v12 |= 1 << v11;
    if (a2[v13 - 1] != a5)
      v12 = v14;
    *a1 = v12;
    ++v11;
    --v13;
  }
  while (v13);
  if (a3 <= 0xD)
  {
LABEL_17:
    v15 = a1;
    v16 = v10;
    sub_18D1C5834((uint64_t)&v15, 14 - v10);
  }
}

void sub_18D1C57C0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18D1C5810(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E25B09E8, MEMORY[0x1E0DE4360]);
}

void sub_18D1C57FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18D1C5810(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

void sub_18D1C5834(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_18D1C58E0(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

void sub_18D1C59AC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18D1C59EC((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_18D1C59EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_18D1C5A38(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C5A5C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C5A68(uint64_t a1)
{
  char v1[28];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1C5AB4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C7370;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C5B24(uint64_t a1)
{
  uint64_t result;

  result = sub_18D04A684(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1C5B50(uint64_t a1)
{
  void *v2;

  v2 = (void *)operator new[]();
  bzero(v2, 0x310uLL);
  sub_18D0894A0(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1C5BB0(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1A00000017;
  *(_QWORD *)a1 = &unk_1E25C6FB0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319B00;
  sub_18D1C4D6C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1C5C08(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1C5C44(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C5C68(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C5C74(uint64_t a1)
{
  char v1[64];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1C5CC0(_QWORD *a1)
{
  *a1 = &unk_1E25B90A0;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1C5CE4(_QWORD *a1)
{
  a1[322] = &unk_1E25B9250;
  *a1 = &unk_1E25B9250;
  a1[1] = &unk_1E25B9B60;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C5D18()
{
  return sub_18D1C5E2C();
}

uint64_t sub_18D1C5D74()
{
  return sub_18D1C5E2C();
}

uint64_t sub_18D1C5DA4()
{
  return sub_18D1C5E2C();
}

uint64_t sub_18D1C5DBC()
{
  return sub_18D1C5E2C();
}

uint64_t sub_18D1C5DF0()
{
  return sub_18D1C5E2C();
}

uint64_t sub_18D1C5E24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_18D1C5E2C()
{
  uint64_t v0;
  double *v1;
  int v2;
  int v3;
  double *v4;
  double *v5;
  _BYTE *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  int v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t result;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  int v24;
  double v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  double *v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  _BYTE *v59;
  double *v60;
  double v61;
  double v62;
  _BYTE *v63;
  double v64;
  _BYTE *v65;
  uint64_t v66;
  double v67;
  int v68;
  double *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  double *v77;
  _OWORD *v78;
  double *v79;
  double *v80;
  double *v81;
  double *v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  int v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  int v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  uint64_t v143;
  _OWORD *v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  _OWORD *v148;
  _OWORD *v149;
  uint64_t v150;
  double v151;
  uint64_t v152;
  double v153;
  double v154;
  __int128 *v155;
  _OWORD *v156;
  _OWORD *v157;
  _OWORD *v158;
  double v159;
  uint64_t i;
  double v161;
  uint64_t v162;
  double *v163;
  double v164;
  uint64_t j;
  double v166;
  uint64_t v167;
  _OWORD *v168;
  __int128 *v169;
  _OWORD *v170;
  _OWORD *v171;
  _OWORD *v172;
  uint64_t v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  __int128 v182;
  __int128 v183;
  double *v184;
  double *v185;
  double *v186;
  double v187;
  uint64_t v188;
  double __x;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  int v205;
  double v206;
  double v207;
  int v208;
  int v209;
  double v210;
  _OWORD v211[4];
  uint64_t v212;
  __int128 v213;
  _OWORD v214[2];
  __int128 v215;
  uint64_t v216;
  _OWORD v217[4];
  uint64_t v218;
  _OWORD v219[4];
  uint64_t v220;
  _OWORD v221[4];
  uint64_t v222;
  _OWORD v223[4];
  uint64_t v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  _BYTE v240[88];
  _QWORD v241[21];
  _BYTE v242[625];
  _BYTE v243[968];
  _OWORD v244[10];
  _BYTE v245[792];
  _BYTE v246[88];
  double v247[21];
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD v251[10];
  _QWORD v252[11];
  _QWORD v253[11];
  _QWORD v254[11];
  _QWORD v255[11];
  _QWORD v256[11];
  _OWORD v257[6];
  _OWORD v258[6];
  _OWORD v259[6];
  _OWORD v260[6];
  _QWORD v261[11];
  _QWORD v262[13];

  v0 = MEMORY[0x1E0C80A78]();
  v262[11] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(v0 + 16))
    return 0xFFFFFFFFLL;
  v7 = (uint64_t)v6;
  v8 = v5;
  v9 = v4;
  v10 = v3;
  v11 = v1;
  v12 = v0;
  if (*(_DWORD *)(v0 + 2568) == 1)
  {
    v13 = v0 + 2576;
    if ((v2 & 1) != 0 || (v3 & 1) != 0)
    {
      if ((v3 & 1) != 0)
      {
        v14 = 1;
        v15 = 1;
      }
      else
      {
        v6 = v246;
        v14 = 1;
        v15 = 0;
      }
    }
    else
    {
      v5 = (double *)v243;
      v6 = v246;
      v14 = 0;
      v15 = 0;
    }
    result = cnnavigation::LinearizedGravityModel::ComputeLinearizedGravityModel(v13, v1, v14, v15, v4, v5, (uint64_t)v6);
    if (!(_DWORD)result)
      return result;
    v2 = 1;
    v10 = 1;
  }
  v17 = *v11;
  v18 = v11[1];
  v19 = v11[2];
  v20 = sqrt(v18 * v18 + v17 * v17 + v19 * v19);
  if (v20 <= 0.00000001)
    return 0xFFFFFFFFLL;
  v21 = *(unsigned int *)(v12 + 2728);
  v22 = v17 / v20;
  v262[0] = 0x3FF0000000000000;
  *(double *)&v262[1] = v22;
  v23 = v18 / v20;
  v261[0] = 0;
  *(double *)&v261[1] = v23;
  v24 = v2 | v10;
  if (v2 | v10)
  {
    v260[0] = xmmword_18D319B10;
    v259[0] = 0u;
    v258[0] = 0u;
    v257[0] = xmmword_18D319B10;
  }
  if (v10)
  {
    v256[1] = 0;
    v256[0] = 0;
    v255[1] = 0;
    v255[0] = 0;
    v254[1] = 0;
    v254[0] = 0;
    v253[1] = 0;
    v253[0] = 0;
    v252[1] = 0;
    v252[0] = 0;
    v251[0] = 0;
    v250 = 0;
  }
  v25 = v19 / v20;
  if ((int)v21 >= 2)
  {
    v26 = 0;
    v27 = -v23;
    v28 = v23;
    v29 = v22;
    do
    {
      v30 = v28 * v27 + v22 * v29;
      *(double *)&v262[v26 / 8 + 2] = v30;
      v28 = v23 * v29 + v22 * v28;
      *(double *)&v261[v26 / 8 + 2] = v28;
      if (v24)
      {
        v31 = *(double *)((char *)v260 + v26 + 8);
        v32 = *(double *)((char *)v258 + v26 + 8);
        *(double *)((char *)&v260[1] + v26) = v29 + v22 * v31 + v27 * v32;
        v33 = *(double *)((char *)v259 + v26 + 8);
        v34 = *(double *)((char *)v257 + v26 + 8);
        v35 = *(double *)&v261[v26 / 8 + 1];
        *(double *)((char *)&v259[1] + v26) = v34 * v27 + v22 * v33 - v35;
        *(double *)((char *)&v258[1] + v26) = v35 + v22 * v32 + v23 * v31;
        *(double *)((char *)&v257[1] + v26) = v29 + v23 * v33 + v22 * v34;
      }
      if (v10)
      {
        v36 = *(double *)&v256[v26 / 8 + 1];
        v37 = *(double *)((char *)v260 + v26 + 8);
        v38 = *(double *)&v253[v26 / 8 + 1];
        *(double *)&v256[v26 / 8 + 2] = v37 + v37 + v22 * v36 + v27 * v38;
        v39 = *(double *)&v255[v26 / 8 + 1];
        v40 = *(double *)((char *)v259 + v26 + 8);
        v41 = *(double *)&v252[v26 / 8 + 1];
        v42 = *(double *)((char *)v258 + v26 + 8);
        *(double *)&v255[v26 / 8 + 2] = v40 + v22 * v39 + v27 * v41 - v42;
        v43 = *(double *)&v254[v26 / 8 + 1];
        v44 = *(double *)&v251[v26 / 8];
        v45 = *(double *)((char *)v257 + v26 + 8);
        *(double *)&v254[v26 / 8 + 2] = v44 * v27 + v22 * v43 + v45 * -2.0;
        *(double *)&v253[v26 / 8 + 2] = v42 + v42 + v22 * v38 + v23 * v36;
        *(double *)&v252[v26 / 8 + 2] = v37 + v45 + v22 * v41 + v23 * v39;
        *(double *)&v251[v26 / 8 + 1] = v23 * v43 + v22 * v44 + v40 * 2.0;
      }
      v26 += 8;
      v29 = v30;
    }
    while (8 * v21 - 8 != v26);
  }
  v47 = *(double *)(v12 + 24);
  v46 = *(double *)(v12 + 32);
  v247[11] = 1.22474487;
  v247[10] = v25 * 1.73205081;
  if ((v24 & 1) != 0)
    v244[5] = xmmword_18D319B20;
  if (v10)
  {
    v241[11] = 0;
    v241[10] = 0;
  }
  v184 = v9;
  v185 = v11;
  v186 = v8;
  v48 = 1.0 / v20;
  if ((int)v21 >= 2)
  {
    v49 = 0;
    v50 = 0;
    v51 = v242;
    v52 = v245;
    v53 = (double *)&v249;
    v54 = 2;
    do
    {
      v55 = (double)(int)v54 + (double)(int)v54;
      v56 = sqrt(1.0 / v55 + 1.0);
      v57 = sqrt(v55);
      v58 = v54 - 1;
      v59 = &v246[88 * v54];
      v60 = (double *)&v59[8 * v54 - 8];
      v61 = *(v60 - 11) * v56;
      *(double *)&v59[8 * v54] = v61;
      *v60 = v25 * v57 * v61;
      if (v24)
      {
        v62 = v56 * *(double *)&v243[88 * v58 + 8 * v58];
        v63 = &v243[88 * v54];
        *(double *)&v63[8 * v54] = v62;
        *(double *)&v63[8 * v58] = v57 * (v61 + v25 * v62);
      }
      if (v10)
      {
        v64 = v56 * *(double *)&v240[88 * v58 + 8 * v58];
        v65 = &v240[88 * v54];
        *(double *)&v65[8 * v54] = v64;
        *(double *)&v65[8 * v58] = v57 * (v25 * v64 + *(double *)&v243[88 * v54 + 8 * v54] * 2.0);
      }
      v66 = 0;
      v67 = *(double *)&v246[96 * v50 + 184];
      v68 = 2;
      v69 = v53;
      do
      {
        v70 = sqrt((double)v68 * (double)(v49 + (int)v66 + 3));
        v71 = sqrt((double)(v49 + (int)v66 + 4) * (double)(v68 - 1));
        v72 = *v69;
        v73 = *v69 * ((v25 * v25 + -1.0) * v71 / v70) + (v25 + v25) * (double)((int)v50 + (int)v66 + 1) / v70 * v67;
        *(v69 - 2) = v73;
        if (v24)
          *(double *)&v52[8 * v66] = v67 * v70;
        if (v10)
          *(double *)&v51[8 * v66] = v72 * (v71 * v70);
        --v66;
        ++v68;
        --v69;
        v67 = v73;
      }
      while (v50 + v66 + 1 > 0);
      ++v54;
      ++v50;
      v51 += 96;
      v52 += 96;
      v53 += 12;
      v49 += 2;
    }
    while (v50 != (_DWORD)v21 - 1);
  }
  v187 = v48 * v47;
  v74 = 1.0;
  v204 = 1.0 / v20;
  if ((v21 & 0x80000000) != 0)
  {
    v191 = 0.0;
    v192 = 0.0;
    v193 = 0.0;
    v194 = 0.0;
    v190 = 0.0;
    v195 = 0.0;
    v196 = 0.0;
    v197 = 0.0;
    v198 = 0.0;
    v199 = 0.0;
    v200 = 0.0;
    v201 = 0.0;
    v202 = 0.0;
    v203 = 0.0;
  }
  else
  {
    v75 = 0;
    __x = v48 * v46;
    v76 = v21 + 1;
    v77 = (double *)v241;
    v78 = v244;
    v79 = v247;
    do
    {
      v80 = v79;
      v81 = (double *)v78;
      v82 = v77;
      v83 = v21;
      if ((_DWORD)v21)
      {
        do
        {
          *v80 = *v80 * 1.41421356;
          if (v24)
            *v81 = *v81 * 1.41421356;
          if (v10)
            *v82 = *v82 * 1.41421356;
          ++v82;
          ++v81;
          ++v80;
          --v83;
        }
        while (v83);
      }
      ++v75;
      v77 += 11;
      v78 = (_OWORD *)((char *)v78 + 88);
      v79 += 11;
    }
    while (v75 != v76);
    v191 = 0.0;
    v192 = 0.0;
    v193 = 0.0;
    v194 = 0.0;
    v190 = 0.0;
    v195 = 0.0;
    v196 = 0.0;
    v197 = 0.0;
    v198 = 0.0;
    v199 = 0.0;
    v200 = 0.0;
    v201 = 0.0;
    v202 = 0.0;
    v203 = 0.0;
    if ((int)v21 >= 2)
    {
      v84 = v245;
      v85 = v242;
      v86 = &v248;
      v74 = 1.0;
      v202 = 0.0;
      v203 = 0.0;
      v87 = 6;
      v200 = 0.0;
      v201 = 0.0;
      v88 = 2;
      v89 = 24;
      v198 = 0.0;
      v199 = 0.0;
      v196 = 0.0;
      v197 = 0.0;
      v194 = 0.0;
      v195 = 0.0;
      v90 = 6;
      v190 = 0.0;
      v191 = 0.0;
      v192 = 0.0;
      v193 = 0.0;
      v188 = v76;
      do
      {
        v208 = v90;
        v210 = v74;
        v91 = 0;
        v92 = 0.0;
        v209 = v87;
        v93 = 0.0;
        v94 = 0.0;
        v95 = 0.0;
        v96 = v12 + 528 + ((4 * v87) & 0x3FFFFFFF8);
        v97 = v88++;
        v98 = 0.0;
        v99 = 0.0;
        v100 = 0.0;
        v101 = 0.0;
        v102 = 0.0;
        v103 = 0.0;
        do
        {
          v104 = *(double *)(v96 + v91);
          v105 = *(double *)(v96 + v91 + 504);
          v106 = v105 * *(double *)&v261[v91 / 8] + v104 * *(double *)&v262[v91 / 8];
          v107 = *(double *)&v86[v91 / 8];
          if (v24)
          {
            v102 = v102 + *(double *)&v84[v91] * v106;
            v101 = v101 + v107 * (v105 * *(double *)((char *)v258 + v91) + v104 * *(double *)((char *)v260 + v91));
            v100 = v100 + v107 * (v105 * *(double *)((char *)v257 + v91) + v104 * *(double *)((char *)v259 + v91));
          }
          if (v10)
          {
            v99 = v99 + *(double *)&v85[v91] * v106;
            v98 = v98 + v107 * (v105 * *(double *)&v253[v91 / 8] + v104 * *(double *)&v256[v91 / 8]);
            v108 = *(double *)&v84[v91];
            v95 = v95 + v107 * (v105 * *(double *)&v251[v91 / 8 - 1] + v104 * *(double *)&v254[v91 / 8]);
            v94 = v94 + v108 * (v105 * *(double *)((char *)v258 + v91) + v104 * *(double *)((char *)v260 + v91));
            v93 = v93 + v108 * (v105 * *(double *)((char *)v257 + v91) + v104 * *(double *)((char *)v259 + v91));
            v92 = v92 + v107 * (v105 * *(double *)&v252[v91 / 8] + v104 * *(double *)&v255[v91 / 8]);
          }
          v103 = v103 + v107 * v106;
          v91 += 8;
        }
        while (v89 != v91);
        v206 = v92;
        v207 = v100;
        v205 = v97;
        v109 = pow(__x, (double)v97);
        if ((v24 & 1) != 0)
        {
          v193 = v193 + v109 * v102;
          v191 = v191 + v204 * (v204 * -(v109 * (double)(int)v88)) * v103;
          v192 = v192 + v109 * v101;
          v110 = v207;
          v190 = v190 + v109 * v207;
          v111 = v209;
        }
        else
        {
          v111 = v209;
          v110 = v207;
        }
        if (v10)
        {
          v194 = v194 + v204 * (v204 * (v204 * (v109 * (double)((v205 + 2) * (int)v88)))) * v103;
          v195 = v195 + v109 * v99;
          v196 = v196 + v109 * v98;
          v197 = v197 + v109 * v95;
          v198 = v198 + v109 * v94;
          v199 = v199 + v109 * v93;
          v112 = v204 * (v204 * -(v109 * (double)(int)v88));
          v200 = v200 + v109 * v206;
          v201 = v201 + v112 * v102;
          v202 = v202 + v112 * v101;
          v203 = v203 + v112 * v110;
        }
        v74 = v210 + v109 * v103;
        v89 += 8;
        v84 += 88;
        v85 += 88;
        v86 += 11;
        v87 = (v111 + v208);
        v90 = v208 + 2;
      }
      while (v88 != v188);
    }
  }
  *v184 = -(v187 * v74);
  v113 = 0.0;
  v114 = 0.0;
  v115 = 0.0;
  v116 = 0.0;
  if ((v24 & 1) != 0)
  {
    v116 = v191 * *(double *)(v12 + 24) + -v187 * v204;
    v113 = v187 * v193;
    v114 = v187 * v192;
    v115 = v187 * v190;
  }
  v117 = 0.0;
  v118 = 0.0;
  v119 = 0.0;
  v120 = 0.0;
  v121 = 0.0;
  v122 = 0.0;
  v123 = 0.0;
  v124 = 0.0;
  v125 = 0.0;
  v126 = 0.0;
  v127 = 0.0;
  if (v10)
  {
    v128 = *(double *)(v12 + 24);
    v118 = v194 * v128 + v204 * (v187 + v187) * v204;
    v119 = v187 * v195;
    v120 = v187 * v196;
    v121 = v187 * v197;
    v122 = v187 * v198;
    v123 = v187 * v199;
    v124 = v187 * v200;
    v125 = v201 * v128;
    v126 = v202 * v128;
    v127 = v203 * v128;
  }
  v238 = 0.0;
  v237 = 0.0;
  v239 = 0.0;
  v235 = 0.0;
  v234 = 0.0;
  v236 = 0.0;
  v232 = 0.0;
  v231 = 0.0;
  v129 = 0.0;
  v233 = 0.0;
  v130 = 0.0;
  v131 = 0.0;
  v132 = 0.0;
  v229 = 0.0;
  v228 = 0.0;
  v133 = 0.0;
  v134 = 0.0;
  v230 = 0.0;
  v135 = 0.0;
  v136 = 0.0;
  v137 = 0.0;
  v226 = 0.0;
  v225 = 0.0;
  v138 = 0.0;
  v139 = 0.0;
  v227 = 0.0;
  if (v24)
  {
    v140 = *v185;
    v141 = v185[1];
    v139 = v204 * *v185;
    v135 = v204 * v141;
    v237 = v139;
    v238 = v204 * v141;
    v142 = v185[2];
    v131 = v204 * v142;
    v239 = v204 * v142;
    v234 = v204 * -(v139 * v204);
    v235 = v204 * -(v204 * v141 * v204);
    v236 = v204 * -(v204 * v142 * v204);
    v138 = v204 + v140 * v234;
    v134 = v140 * v235;
    v231 = v138;
    v232 = v140 * v235;
    v130 = v140 * v236;
    v233 = v140 * v236;
    v137 = v141 * v234;
    v133 = v204 + v141 * v235;
    v228 = v141 * v234;
    v229 = v133;
    v129 = v141 * v236;
    v230 = v129;
    v136 = v234 * v142;
    v132 = v142 * v235;
    v225 = v234 * v142;
    v226 = v142 * v235;
    v117 = v204 + v142 * v236;
    v227 = v117;
  }
  *v186 = v114 * v138 + v116 * v139 + v115 * v137 + v113 * v136;
  v186[1] = v114 * v134 + v116 * v135 + v115 * v133 + v113 * v132;
  v186[2] = v114 * v130 + v116 * v131 + v115 * v129 + v113 * v117;
  v224 = 0;
  memset(v223, 0, sizeof(v223));
  v222 = 0;
  memset(v221, 0, sizeof(v221));
  v220 = 0;
  memset(v219, 0, sizeof(v219));
  v218 = 0;
  memset(v217, 0, sizeof(v217));
  v216 = 0;
  v215 = 0u;
  v213 = 0u;
  memset(v214, 0, sizeof(v214));
  if (v10)
  {
    v143 = 0;
    v144 = v223;
    do
    {
      v145 = 0;
      v146 = v185[v143];
      do
      {
        *(double *)((char *)v144 + v145) = v146 * *(double *)((char *)&v234 + v145);
        v145 += 8;
      }
      while (v145 != 24);
      *((double *)v223 + 3 * v143 + v143) = v204 + *((double *)v223 + 3 * v143 + v143);
      ++v143;
      v144 = (_OWORD *)((char *)v144 + 24);
    }
    while (v143 != 3);
    v147 = 0;
    v148 = v221;
    v149 = v223;
    do
    {
      v150 = 0;
      v151 = v204 * -2.0 * *(&v234 + v147);
      do
      {
        *(double *)((char *)v148 + v150) = v204 * -(*(double *)((char *)v149 + v150) * v204)
                                         + v151 * *(double *)((char *)&v237 + v150);
        v150 += 8;
      }
      while (v150 != 24);
      ++v147;
      v148 = (_OWORD *)((char *)v148 + 24);
      v149 = (_OWORD *)((char *)v149 + 24);
    }
    while (v147 != 3);
    v152 = 0;
    v153 = *v185;
    v154 = v185[1];
    v155 = &v213;
    v156 = v217;
    v157 = v219;
    v158 = v221;
    v159 = v185[2];
    do
    {
      for (i = 0; i != 24; i += 8)
      {
        v161 = *(double *)((char *)v158 + i);
        *(double *)((char *)v157 + i) = v153 * v161;
        *(double *)((char *)v156 + i) = v154 * v161;
        *(double *)((char *)v155 + i) = v159 * v161;
      }
      ++v152;
      v155 = (__int128 *)((char *)v155 + 24);
      v156 = (_OWORD *)((char *)v156 + 24);
      v157 = (_OWORD *)((char *)v157 + 24);
      v158 = (_OWORD *)((char *)v158 + 24);
    }
    while (v152 != 3);
    v162 = 0;
    v163 = &v234;
    do
    {
      v164 = *v163++;
      *(double *)((char *)v219 + v162) = v164 + *(double *)((char *)v219 + v162);
      *(double *)((char *)v217 + v162 + 8) = v164 + *(double *)((char *)v217 + v162 + 8);
      *(double *)((char *)v214 + v162) = v164 + *(double *)((char *)v214 + v162);
      v162 += 24;
    }
    while (v162 != 72);
    for (j = 0; j != 24; j += 8)
    {
      v166 = *(double *)((char *)&v234 + j);
      *(double *)((char *)v219 + j) = v166 + *(double *)((char *)v219 + j);
      *(double *)((char *)&v217[1] + j + 8) = v166 + *(double *)((char *)&v217[1] + j + 8);
      *(double *)((char *)&v215 + j) = v166 + *(double *)((char *)&v215 + j);
    }
    v167 = 0;
    v168 = v211;
    v169 = &v213;
    v170 = v217;
    v171 = v219;
    v172 = v223;
    do
    {
      v173 = 0;
      v174 = *(&v237 + v167);
      v175 = *(&v231 + v167);
      v176 = *(&v228 + v167);
      v177 = *(&v225 + v167);
      v178 = v126 * v175 + v118 * v174 + v127 * v176 + v125 * v177;
      v179 = v120 * v175 + v126 * v174 + v124 * v176 + v122 * v177;
      v180 = v124 * v175 + v127 * v174 + v121 * v176 + v123 * v177;
      v181 = v122 * v175 + v125 * v174 + v123 * v176 + v119 * v177;
      do
      {
        *(double *)((char *)v168 + v173) = v179 * *(double *)((char *)&v231 + v173)
                                         + v178 * *(double *)((char *)&v237 + v173)
                                         + v180 * *(double *)((char *)&v228 + v173)
                                         + v181 * *(double *)((char *)&v225 + v173)
                                         + v116 * *(double *)((char *)v172 + v173)
                                         + v114 * *(double *)((char *)v171 + v173)
                                         + v115 * *(double *)((char *)v170 + v173)
                                         + v113 * *(double *)((char *)v169 + v173);
        v173 += 8;
      }
      while (v173 != 24);
      ++v167;
      v168 = (_OWORD *)((char *)v168 + 24);
      v169 = (__int128 *)((char *)v169 + 24);
      v170 = (_OWORD *)((char *)v170 + 24);
      v171 = (_OWORD *)((char *)v171 + 24);
      v172 = (_OWORD *)((char *)v172 + 24);
    }
    while (v167 != 3);
    v182 = v211[1];
    *(_OWORD *)v7 = v211[0];
    *(_OWORD *)(v7 + 16) = v182;
    v183 = v211[3];
    *(_OWORD *)(v7 + 32) = v211[2];
    *(_OWORD *)(v7 + 48) = v183;
    *(_QWORD *)(v7 + 64) = v212;
  }
  if (*(_DWORD *)(v12 + 2568) == 1)
    cnnavigation::LinearizedGravityModel::UpdateLinearization(v12 + 2576, v185, v186, v7, *(double *)(v12 + 40), *v184);
  return 0;
}

uint64_t sub_18D1C6D74(uint64_t a1)
{
  uint64_t i;
  _QWORD *v3;
  const char *v5;
  int v6;

  *(_QWORD *)(a1 + 24) = 0x1000000AELL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C63B0;
  *(_QWORD *)(a1 + 8) = 0;
  for (i = 40; i != 2824; i += 16)
  {
    v3 = (_QWORD *)(a1 + i);
    *v3 = 0;
    v3[1] = 0;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    v5 = "this->max_num_rows_ > 0";
    v6 = 394;
    goto LABEL_8;
  }
  if (!*(_DWORD *)(a1 + 28))
  {
    v5 = "this->max_num_cols_ > 0";
    v6 = 395;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v6, v5);
  }
  *(_OWORD *)(a1 + 8) = xmmword_18D3197E0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_18D1C6E30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C58D0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C6E44(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1000000AELL;
  *(_QWORD *)a1 = &unk_1E25C63E0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197E0;
  sub_18D1C4674(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1C6EAC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_18D1C3D98(v2);
  *v1 = &unk_1E25C5A20;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C6ED4(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1000000AELL;
  *(_QWORD *)a1 = &unk_1E25C6410;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197E0;
  sub_18D1C44D8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1C6F3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_18D1C3A48(v2);
  *v1 = &unk_1E25C5A50;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C6F64(uint64_t a1)
{
  uint64_t i;
  _QWORD *v3;
  const char *v5;
  int v6;

  *(_QWORD *)(a1 + 24) = 0x100000057;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C8270;
  *(_QWORD *)(a1 + 8) = 0;
  for (i = 40; i != 1432; i += 16)
  {
    v3 = (_QWORD *)(a1 + i);
    *v3 = 0;
    v3[1] = 0;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    v5 = "this->max_num_rows_ > 0";
    v6 = 394;
    goto LABEL_8;
  }
  if (!*(_DWORD *)(a1 + 28))
  {
    v5 = "this->max_num_cols_ > 0";
    v6 = 395;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v6, v5);
  }
  *(_OWORD *)(a1 + 8) = xmmword_18D3197F0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_18D1C7020(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C58D0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C7034(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x100000057;
  *(_QWORD *)a1 = &unk_1E25C82A0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197F0;
  sub_18D1C3DF0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1C709C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_18D1C3D98(v2);
  *v1 = &unk_1E25C5A20;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C70C4(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x100000057;
  *(_QWORD *)a1 = &unk_1E25C82D0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197F0;
  sub_18D1C3AA4(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1C712C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_18D1C3A48(v2);
  *v1 = &unk_1E25C5A50;
  _Unwind_Resume(a1);
}

void sub_18D1C7154(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C6F80;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C71C4(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1C71F0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_18D1C71F0(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x1088uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1C7258(uint64_t a1)
{
  void *v2;

  v2 = (void *)operator new[]();
  bzero(v2, 0x211uLL);
  sub_18D0894A0(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1C72B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C7160;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C7328(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1C7354(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_18D1C7354(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x1520uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1C73BC(uint64_t a1)
{
  void *v2;

  v2 = (void *)operator new[]();
  bzero(v2, 0x2A4uLL);
  sub_18D0894A0(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

double sub_18D1C741C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double result;
  unsigned __int8 v10;
  __int16 v11;

  v11 = 12;
  v10 = 4;
  v8 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v8));
  return result;
}

uint64_t sub_18D1C7470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t v11;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD v22[3];
  _OWORD v23[6];
  uint64_t (**v24)();
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD v28[3];
  _OWORD v29[2];

  for (i = 10; i != 29; ++i)
    *((_DWORD *)&v18 + i) = i - 10;
  v11 = 0;
  v28[1] = v22[1];
  v28[2] = v22[2];
  v24 = &off_1E25C66E0;
  v27 = v28;
  v26 = 0x100000013;
  v29[0] = v23[0];
  *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)((char *)v23 + 12);
  v25 = xmmword_18D319860;
  v28[0] = v22[0];
  v20 = 0x100000013;
  v18 = &unk_1E25C66B0;
  v19 = xmmword_18D319860;
  v21 = v22;
  do
  {
    *((_QWORD *)v22 + v11) = *(_QWORD *)(a3 + 8 * *((int *)v28 + v11));
    ++v11;
  }
  while (v11 != 19);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a4 + 56))(a4, a2, &v18))
    return 0xFFFFFFFFLL;
  v15 = 0x100000013;
  v13 = &unk_1E25C66B0;
  v14 = xmmword_18D319860;
  v16 = &v17;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a4 + 72))(a4, a1, a5, &v13))
    return 0xFFFFFFFFLL;
  sub_18D053AA8(a6, (uint64_t)&v13);
  return 0;
}

double *sub_18D1C75E8(double *result, double *a2, uint64_t a3, uint64_t a4)
{
  double *v4;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;

  *(_OWORD *)(a3 + 8) = xmmword_18D319860;
  v4 = *(double **)(a3 + 32);
  *v4 = *result + *a2;
  v4[1] = result[1] + a2[1];
  v4[2] = result[2] + a2[2];
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)a4 = _Q0;
  *(_QWORD *)(a4 + 16) = 0x3FF0000000000000;
  v4[3] = result[3] + a2[3];
  v4[4] = result[4] + a2[4];
  v4[5] = result[5] + a2[5];
  *(_OWORD *)(a4 + 24) = _Q0;
  *(_QWORD *)(a4 + 40) = 0x3FF0000000000000;
  v10 = result[6];
  v11 = result[7];
  v12 = result[8];
  v13 = result[9];
  v14 = a2[6];
  v15 = a2[7];
  v16 = a2[8];
  v17 = v15 * v15 + v14 * v14 + v16 * v16;
  if (v17 <= 1.0)
  {
    v18 = sqrt(1.0 - v17);
  }
  else
  {
    v18 = 1.0 / sqrt(v17 + 1.0);
    v14 = v14 * v18;
    v15 = v15 * v18;
    v16 = v16 * v18;
  }
  v19 = v11 * v16 + v18 * v10 - v15 * v12 + v14 * v13;
  v20 = v11 * v18 - v16 * v10 + v14 * v12 + v15 * v13;
  v21 = v15 * v10 - v14 * v11 + v18 * v12 + v16 * v13;
  v22 = -(v15 * v11) - v14 * v10 - v16 * v12 + v18 * v13;
  v23 = sqrt(v20 * v20 + v19 * v19 + v21 * v21 + v22 * v22);
  v24 = 1.0;
  v25 = 0.0;
  v26 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  v29 = 1.0;
  if (fabs(v23) >= 2.22044605e-16)
  {
    v26 = v19 / v23;
    v27 = v20 / v23;
    v28 = v21 / v23;
    v29 = v22 / v23;
  }
  v4[6] = v26;
  v4[7] = v27;
  v4[8] = v28;
  v4[9] = v29;
  v30 = sqrt(v11 * v11 + v10 * v10 + v12 * v12 + v13 * v13);
  v31 = 0.0;
  v32 = 0.0;
  if (fabs(v30) >= 2.22044605e-16)
  {
    v25 = v10 / v30;
    v31 = v11 / v30;
    v32 = v12 / v30;
    v24 = v13 / v30;
  }
  *(double *)(a4 + 48) = v24;
  *(double *)(a4 + 56) = -v32;
  *(double *)(a4 + 64) = v31;
  *(double *)(a4 + 72) = v32;
  *(double *)(a4 + 80) = v24;
  *(double *)(a4 + 88) = -v25;
  *(double *)(a4 + 96) = -v31;
  *(double *)(a4 + 104) = v25;
  *(double *)(a4 + 112) = v24;
  *(double *)(a4 + 120) = -v25;
  *(double *)(a4 + 128) = -v31;
  *(double *)(a4 + 136) = -v32;
  v4[10] = result[10] + a2[9];
  v4[11] = result[11] + a2[10];
  v4[12] = result[12] + a2[11];
  *(_OWORD *)(a4 + 144) = _Q0;
  *(_QWORD *)(a4 + 160) = 0x3FF0000000000000;
  v4[13] = result[13] + a2[12];
  v4[14] = result[14] + a2[13];
  v4[15] = result[15] + a2[14];
  *(_OWORD *)(a4 + 168) = _Q0;
  *(_QWORD *)(a4 + 184) = 0x3FF0000000000000;
  v4[16] = result[16] + a2[15];
  v4[17] = result[17] + a2[16];
  v4[18] = result[18] + a2[17];
  *(_OWORD *)(a4 + 192) = _Q0;
  *(_QWORD *)(a4 + 208) = 0x3FF0000000000000;
  return result;
}

void sub_18D1C7864(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C7888(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C7894(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[78];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_QWORD *sub_18D1C7988(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_18D0778AC(__p, "");
  sub_18D1C7A64((uint64_t)a1, a2, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = &unk_1E25C30E0;
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_18D1C79F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D1C7A14(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C7A64(uint64_t a1, int a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v7;

  *(_QWORD *)a1 = &unk_1E25B8EE0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_18D077798(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v7 = *(_QWORD *)(a3 + 16);
  }
  sub_18D1A1738(a1, a2, (__int128 *)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_18D1C7B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 39) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D1C7B34(uint64_t *a1, void (**a2)(uint64_t))
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;

  v4 = operator new(0x30uLL);
  *v4 = 0;
  v4[1] = 0;
  result = sub_18D1C7B94(v4 + 2, a2);
  v6 = *a1;
  *v4 = *a1;
  v4[1] = a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

_QWORD *sub_18D1C7B94(_QWORD *a1, void (**a2)(uint64_t))
{
  *a1 = 0;
  a1[1] = 0;
  if (*a2)
    (*a2)(2);
  return a1;
}

__n128 sub_18D1C7BD8(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x60uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C3960;
  *a1 = sub_18D1C7C9C;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1C7C88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1C7C9C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1C7CD0()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D1C7D64(uint64_t a1, __int128 *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  int8x16_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  double *v26;
  double *v27;
  uint64_t result;
  uint64_t *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE v46[48];
  void *v47;
  __int128 v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE v51[288];
  void *v52;
  __int128 v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE v56[288];
  void *v57;
  __int128 v58;
  uint64_t v59;
  double *v60;
  __int128 v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  void *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  _BYTE v70[48];
  __int128 v71;

  v71 = *a2;
  v68 = 0x100000006;
  v66 = &unk_1E25C8120;
  v67 = xmmword_18D319950;
  v7 = (uint64_t *)v70;
  v69 = (uint64_t *)v70;
  if (a4)
  {
    if (a4 != 1)
    {
      if (a4 == 2)
        __assert_rtn("IntegrateUserStateEstimate", "ravenpntestimatorhelper.h", 1714, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      goto LABEL_11;
    }
    v59 = 0x100000003;
    v57 = &unk_1E25C7790;
    v58 = xmmword_18D313070;
    v60 = (double *)&v61;
    v44 = 0x100000003;
    v42 = &unk_1E25C7790;
    v45 = v46;
    v43 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&v42, 0.0);
    v39 = 0x100000003;
    v37 = COERCE_DOUBLE(&unk_1E25C7790);
    v38 = xmmword_18D313070;
    v40 = &v41;
    v54 = 0x300000003;
    v52 = &unk_1E25C78E0;
    v53 = xmmword_18D30BB60;
    v55 = v56;
    v49 = 0x300000003;
    v47 = &unk_1E25C78E0;
    v48 = xmmword_18D30BB60;
    v50 = v51;
    v18 = *(double **)(a3 + 32);
    v19 = v60;
    *v60 = v18[21];
    v19[1] = v18[22];
    v19[2] = v18[23];
    if (sub_18D1C8450((uint64_t)&v57, (uint64_t)&v42, 0, (uint64_t)&v37, (uint64_t)&v52, (uint64_t)&v47, v20, v21))return 0xFFFFFFFFLL;
    v24 = v40;
    v25 = v69;
    *v69 = *v40;
    v25[1] = v24[1];
    v25[2] = v24[2];
    v26 = *(double **)(a3 + 32);
    v27 = v60;
    *v60 = v26[24] * v26[25];
    v27[1] = v26[24] * v26[26];
    v27[2] = v26[24] * v26[27];
    if (sub_18D1C8450((uint64_t)&v57, (uint64_t)&v42, 0, (uint64_t)&v37, (uint64_t)&v52, (uint64_t)&v47, v22, v23))return 0xFFFFFFFFLL;
    v29 = v40;
    v7 = v69;
    v69[3] = *v40;
    v7[4] = v29[1];
    v7[5] = v29[2];
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 32);
    v61 = *(_OWORD *)(v8 + 168);
    v9.i64[1] = *((_QWORD *)&v61 + 1);
    v10 = *(double *)(v8 + 192);
    v11 = *(double *)(v8 + 208);
    v12 = v10 * *(double *)(v8 + 200);
    v62 = *(_QWORD *)(v8 + 184);
    v63 = v12;
    v13 = *(double *)(v8 + 216);
    v59 = 0x100000006;
    v57 = &unk_1E25C8120;
    v58 = xmmword_18D319950;
    v60 = (double *)&v61;
    v64 = v10 * v11;
    v65 = v10 * v13;
    v9.i64[0] = 0x600000006;
    v54 = 0x600000006;
    v52 = &unk_1E25C81B0;
    v53 = xmmword_18D314680;
    v55 = v56;
    v49 = 0x600000006;
    v47 = &unk_1E25C81B0;
    v48 = xmmword_18D314680;
    v50 = v51;
    v14 = CNTimeSpan::operator-(a1, &v71, v9, (int8x16_t)xmmword_18D314680);
    v37 = v15 + (double)v14;
    v44 = 0x100000006;
    v42 = &unk_1E25C8120;
    v45 = v46;
    v43 = xmmword_18D319950;
    sub_18D04BE88((uint64_t)&v42, 0.0);
    if (sub_18D1C8214((uint64_t)&v57, (uint64_t)&v42, (uint64_t *)&v37, (uint64_t)&v66, (uint64_t)&v52, (uint64_t)&v47, v16, v17))return 0xFFFFFFFFLL;
    v7 = v69;
  }
LABEL_11:
  *(_OWORD *)(a5 + 8) = xmmword_18D319810;
  v30 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)v30 = *v7;
  *(_QWORD *)(v30 + 8) = v7[1];
  *(_QWORD *)(v30 + 16) = v7[2];
  v32 = *((double *)v7 + 3);
  v31 = *((double *)v7 + 4);
  v33 = *((double *)v7 + 5);
  v34 = sqrt(v31 * v31 + v32 * v32 + v33 * v33);
  *(double *)(v30 + 24) = v34;
  result = 0;
  if (fabs(v34) <= 0.000000015)
  {
    v36 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(v30 + 32) = *(_QWORD *)(v36 + 200);
    *(_QWORD *)(v30 + 40) = *(_QWORD *)(v36 + 208);
    v35 = *(double *)(v36 + 216);
  }
  else
  {
    *(double *)(v30 + 32) = v32 / v34;
    *(double *)(v30 + 40) = v31 / v34;
    v35 = v33 / v34;
  }
  *(double *)(v30 + 48) = v35;
  return result;
}

double sub_18D1C8130(uint64_t a1, int a2, double *a3)
{
  int *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double result;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(a1 + 136);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
    v5 = *(double **)(a1 + 32);
    v6 = a2;
    do
    {
      v7 = *a3++;
      result = v7;
      v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_18D1C81A0(_QWORD *result)
{
  result[13] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1C81C4(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C81E8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C81F4(uint64_t a1)
{
  char v1[7];

  sub_18D0894A0(a1, v1);
}

uint64_t sub_18D1C8214(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  char v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE v39[288];
  void *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 6;
  if (v12
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 6) : (v18 = 0),
        v18))
  {
    v24 = *a3;
    v47 = 0x600000006;
    v45 = &unk_1E25C81B0;
    v48 = &v49;
    v46 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v45, 0.0);
    v25 = 0;
    v26 = HIDWORD(v46);
    v27 = HIDWORD(v46) + 1;
    v28 = 6;
    v29 = v48;
    do
    {
      v29[v25] = 0x3FF0000000000000;
      v25 += v27;
      --v28;
    }
    while (v28);
    v29[3 * v26] = v24;
    v29[(4 * v26) | 1] = v24;
    v29[5 * v26 + 2] = v24;
    v42 = 0x100000006;
    v40 = &unk_1E25C8120;
    v41 = xmmword_18D319950;
    v43 = &v44;
    sub_18D053B2C((uint64_t)&v45, a1, (uint64_t)&v40);
    v37 = 0x100000006;
    v35 = &unk_1E25C8120;
    v36 = xmmword_18D319950;
    v38 = v39;
    sub_18D053FA4((uint64_t)&v40, a2, (uint64_t)&v35);
    sub_18D053AA8(a4, (uint64_t)&v35);
    sub_18D053AA8(a5, (uint64_t)&v45);
    v37 = 0x600000006;
    v35 = &unk_1E25C81B0;
    v38 = v39;
    v36 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v35, 0.0);
    v30 = 0;
    v31 = HIDWORD(v36) + 1;
    v32 = 6;
    v33 = v38;
    do
    {
      *(_QWORD *)&v33[8 * v30] = 0x3FF0000000000000;
      v30 += v31;
      --v32;
    }
    while (v32);
    sub_18D053AA8(a6, (uint64_t)&v35);
    return 0;
  }
  else
  {
    LOWORD(v45) = 12;
    LOBYTE(v35) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, (unsigned __int8 *)&v35, "f_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v34);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18D1C8450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  char v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE v31[79];
  unsigned __int8 v32;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 3;
  if (v12
    && ((v13 = *(_DWORD *)(a2 + 8), v14 = *(_DWORD *)(a2 + 12), v13 <= v14)
      ? (v15 = *(_DWORD *)(a2 + 12))
      : (v15 = *(_DWORD *)(a2 + 8)),
        v13 ? (v16 = v14 == 0) : (v16 = 1),
        !v16 ? (v17 = v15 == 3) : (v17 = 0),
        v17))
  {
    v29 = 0x100000003;
    v27 = &unk_1E25C7790;
    v28 = xmmword_18D313070;
    v30 = v31;
    sub_18D053FA4(a1, a2, (uint64_t)&v27);
    sub_18D053AA8(a4, (uint64_t)&v27);
    v29 = 0x300000003;
    v27 = &unk_1E25C78E0;
    v30 = v31;
    v28 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v27, 0.0);
    v22 = HIDWORD(v28) + 1;
    v23 = v30;
    *v30 = 0x3FF0000000000000;
    v23[v22] = 0x3FF0000000000000;
    v23[2 * v22] = 0x3FF0000000000000;
    sub_18D053AA8(a5, (uint64_t)&v27);
    v29 = 0x300000003;
    v27 = &unk_1E25C78E0;
    v30 = v31;
    v28 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v27, 0.0);
    v24 = HIDWORD(v28) + 1;
    v25 = v30;
    *v30 = 0x3FF0000000000000;
    v25[v24] = 0x3FF0000000000000;
    v25[2 * v24] = 0x3FF0000000000000;
    sub_18D053AA8(a6, (uint64_t)&v27);
    return 0;
  }
  else
  {
    LOWORD(v27) = 12;
    v32 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v32, "f_ThreeStateNearlyConstant called with inadequate matrices.", a4, a5, a6, a7, a8, v26);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D1C85F0(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C8614(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C8620(uint64_t a1)
{
  char v1[6];

  sub_18D0894A0(a1, v1);
}

uint64_t sub_18D1C8640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000007;
  *(_OWORD *)(a1 + 8) = xmmword_18D319810;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C56F0;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 128) = 0x100000007;
  *(_QWORD *)(a1 + 104) = &off_1E25C8210;
  *(_OWORD *)(a1 + 112) = xmmword_18D319810;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  sub_18D053D7C(a1 + 104, a3);
  v6 = *(_DWORD *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 136);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1C86F0(_QWORD *a1)
{
  a1[13] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1C8724(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C8748(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C8754(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[7];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1C881C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1C886C(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x60uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C3760;
  *a1 = sub_18D1C8930;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1C891C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1C8930(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1C8964()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D1C89F8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000004;
  *(_QWORD *)a1 = &unk_1E25C7E80;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D1C8A54(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1C8A68(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D1C8A7C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 168);
        v8 = *(int **)(result + 208);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 264) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D1C8B64(_QWORD *result)
{
  result[29] = &unk_1E25C5EA0;
  result[22] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

double sub_18D1C8B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x100000004;
  *(_QWORD *)a1 = &unk_1E25C7E50;
  *(_OWORD *)(a1 + 8) = xmmword_18D313090;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1C8BE8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C8BFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v4;
  void *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  int v10;

  v8 = 0x100000001;
  v6 = &unk_1E25C6A70;
  *(_QWORD *)&v4 = 0x100000001;
  *((_QWORD *)&v4 + 1) = 0x100000001;
  v7 = v4;
  v9 = &v10;
  v10 = a4;
  return sub_18D1C9370(a1, a2, a3, (uint64_t)&v6);
}

void sub_18D1C8C4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x100000004;
  *(_QWORD *)a3 = &unk_1E25C7E50;
  *(_OWORD *)(a3 + 8) = xmmword_18D313090;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D1C8CA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1C8CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)a1 = &unk_1E25C7FA0;
  *(_OWORD *)(a1 + 8) = xmmword_18D313080;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1C8D0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1C8D20(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 72);
        v8 = *(int **)(result + 112);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 168) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D1C8E08(_QWORD *result)
{
  result[17] = &unk_1E25C5EA0;
  result[10] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1C8E30(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 436, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 437, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 136);
        v8 = *(int **)(result + 176);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 232) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D1C8F18(_QWORD *result)
{
  result[25] = &unk_1E25C5EA0;
  result[18] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1C8F40(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 436, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 437, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 112);
        v8 = *(int **)(result + 152);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 208) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void sub_18D1C9028(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C904C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C9058(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[4];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1C9120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5630;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 96) = 0x100000003;
  *(_QWORD *)(a1 + 72) = &unk_1E25C77C0;
  *(_OWORD *)(a1 + 80) = xmmword_18D313070;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  sub_18D053D7C(a1 + 72, a3);
  v6 = *(_DWORD *)(a1 + 80);
  v5 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 104);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1C91D8(_QWORD *a1)
{
  a1[9] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C920C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_OWORD *)(a1 + 8) = xmmword_18D313080;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5180;
  *(_QWORD *)(a1 + 168) = a2;
  *(_QWORD *)(a1 + 200) = 0x100000004;
  *(_QWORD *)(a1 + 176) = &unk_1E25C7E80;
  *(_OWORD *)(a1 + 184) = xmmword_18D313090;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 256) = 0x100000004;
  *(_QWORD *)(a1 + 232) = &unk_1E25C7E80;
  *(_OWORD *)(a1 + 240) = xmmword_18D313090;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  sub_18D053D7C(a1 + 176, a3);
  sub_18D053D7C(a1 + 232, a4);
  v7 = *(unsigned int *)(a1 + 192);
  v8 = *(unsigned int *)(a1 + 248);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(a2 + 20);
    v12 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v13 = *(int **)(a1 + 208);
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v10) * v11;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v9;
        v17 = v7;
        do
        {
          v18 = *v13++;
          *(_QWORD *)(v15 + 8 * v16++) = *(_QWORD *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18D1C9338(_QWORD *a1)
{
  a1[29] = &unk_1E25C5EA0;
  a1[22] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C9370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0x100000004;
  *(_OWORD *)(a1 + 8) = xmmword_18D313090;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5120;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 104) = 0x100000004;
  *(_QWORD *)(a1 + 80) = &unk_1E25C7E80;
  *(_OWORD *)(a1 + 88) = xmmword_18D313090;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 160) = 0x100000001;
  *(_QWORD *)(a1 + 136) = &unk_1E25C6A70;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  sub_18D053D7C(a1 + 80, a3);
  sub_18D053D7C(a1 + 136, a4);
  v8 = *(unsigned int *)(a1 + 96);
  v9 = *(unsigned int *)(a1 + 152);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v8)
      {
        v14 = *(int **)(a1 + 112);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v11) * v12;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v10;
        v18 = v8;
        do
        {
          v19 = *v14++;
          *(_QWORD *)(v16 + 8 * v17++) = *(_QWORD *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18D1C94A8(_QWORD *a1)
{
  a1[17] = &unk_1E25C5EA0;
  a1[10] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

float64x2_t sub_18D1C94E0(uint64_t a1, uint64_t a2, float64x2_t result)
{
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  float64x2_t *v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  float64x2_t *v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v3;
  v6 = v5 - 1;
  if ((int)v5 >= 1)
  {
    v7 = *(float64x2_t **)(a1 + 32);
    v8 = *(double **)(a2 + 32);
    v9 = (double *)v7;
    v10 = v8;
    v11 = v5;
    do
    {
      v12 = *v9++;
      *v10++ = v12 * result.f64[0];
      --v11;
    }
    while (v11);
    if ((int)v5 > 3)
    {
      v14 = (v5 - 2);
      v15 = (float64x2_t *)((char *)v7 + 8 * v14);
      v16 = v6 >> 1;
      v17 = (float64x2_t *)v8;
      do
      {
        v18 = *v7++;
        *v17++ = vmulq_n_f64(v18, result.f64[0]);
        --v16;
      }
      while (v16);
      result = vmulq_n_f64(*v15, result.f64[0]);
      *(float64x2_t *)&v8[v14] = result;
    }
    else
    {
      do
      {
        v13 = v7->f64[0];
        v7 = (float64x2_t *)((char *)v7 + 8);
        *v8++ = v13 * result.f64[0];
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t sub_18D1C9578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)(a1 + 24) = 0x300000004;
  *(_OWORD *)(a1 + 8) = xmmword_18D3130A0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5150;
  *(_QWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 168) = 0x100000004;
  *(_QWORD *)(a1 + 144) = &unk_1E25C7E80;
  *(_OWORD *)(a1 + 152) = xmmword_18D313090;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 200) = &unk_1E25C77C0;
  *(_QWORD *)(a1 + 224) = 0x100000003;
  *(_OWORD *)(a1 + 208) = xmmword_18D313070;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  sub_18D053D7C(a1 + 144, a3);
  sub_18D053D7C(a1 + 200, a4);
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *(unsigned int *)(a1 + 216);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(a2 + 20);
    v12 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v13 = *(int **)(a1 + 176);
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * v10) * v11;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v9;
        v17 = v7;
        do
        {
          v18 = *v13++;
          *(_QWORD *)(v15 + 8 * v16++) = *(_QWORD *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18D1C96C4(_QWORD *a1)
{
  a1[25] = &unk_1E25C5EA0;
  a1[18] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C96FC(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x1A0000001ALL;
  *(_QWORD *)a1 = &unk_1E25C7160;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1C7354(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1C9750(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1C978C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;

  if (a1 != a2)
  {
    v4 = 0;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v5 = 292;
    do
    {
      v6 = (_DWORD *)(a1 + v5);
      *(v6 - 63) = *(_DWORD *)(a2 + v5 - 252);
      *v6 = *(_DWORD *)(a2 + v5);
      v7 = (_QWORD *)(a1 + v4);
      v7[68] = *(_QWORD *)(a2 + v4 + 544);
      v7[131] = *(_QWORD *)(a2 + v4 + 1048);
      v7[194] = *(_QWORD *)(a2 + v4 + 1552);
      v7[257] = *(_QWORD *)(a2 + v4 + 2056);
      v4 += 8;
      v5 += 4;
    }
    while (v4 != 504);
    *(_DWORD *)(a1 + 2560) = *(_DWORD *)(a2 + 2560);
    cnnavigation::LinearizedGravityModel::operator=(a1 + 2568, a2 + 2568);
    *(_DWORD *)(a1 + 2720) = *(_DWORD *)(a2 + 2720);
  }
  return a1;
}

uint64_t sub_18D1C9844(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  __int128 v16;
  const char *v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0x1A0000001ALL;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C7160;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (a1 == a2)
  {
    v18 = "this != &(A)";
    v19 = 603;
    goto LABEL_18;
  }
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = v5 * v4;
  *(_DWORD *)(a1 + 20) = v4;
  sub_18D1C7354(a1);
  v6 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  if (!v6)
  {
    v18 = "this->allocated_data_ != NULL";
    v19 = 615;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 24) < *(_DWORD *)(a2 + 8))
  {
    v18 = "this->max_num_rows_ >= A.num_rows_";
    v19 = 616;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 28) < *(_DWORD *)(a2 + 12))
  {
    v18 = "this->max_num_cols_ >= A.num_cols_";
    v19 = 617;
LABEL_18:
    __assert_rtn("CNMatrix", "cnmatrix.h", v19, v18);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v11 = (v7 - 2);
    v12 = *(__int128 **)(a2 + 32);
    v13 = (v7 - 1) >> 1;
    v14 = v12;
    v15 = v6;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
    *(_OWORD *)&v6[v11] = *(__int128 *)((char *)v12 + 8 * v11);
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 16);
    if ((int)v8 >= 1)
    {
      v9 = *(uint64_t **)(a2 + 32);
      do
      {
        v10 = *v9++;
        *v6++ = v10;
        --v8;
      }
      while (v8);
    }
  }
  return a1;
}

void sub_18D1C998C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1C99C8(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1A0000001ALL;
  *(_QWORD *)a1 = &unk_1E25C7160;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319890;
  sub_18D1C7354(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1C9A1C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D1C9A58(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1C9A6C(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C9A90(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C9A9C(uint64_t a1)
{
  char v1[26];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

void sub_18D1C9AE8(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1C9B0C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1C9B18(uint64_t a1)
{
  char v1[104];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

uint64_t sub_18D1C9B64(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x1C0000001CLL;
  *(_QWORD *)a1 = &unk_1E25C7370;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D04A684(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1C9BB8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1C9BF4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, BOOL *a8, double a9)
{
  uint64_t i;
  uint64_t j;
  void *v26;
  __int128 v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD v30[3];
  _OWORD v31[14];
  void *v32;
  __int128 v33;
  uint64_t v34;
  double *v35;
  _OWORD v36[9];
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD v41[3];
  _OWORD v42[2];

  v28 = 0x10000001CLL;
  v26 = &unk_1E25C72B0;
  v29 = v30;
  v27 = xmmword_18D319780;
  sub_18D04BE88((uint64_t)&v26, 0.0);
  sub_18D053AA8(a6, (uint64_t)&v26);
  for (i = 10; i != 29; ++i)
    *((_DWORD *)&v26 + i) = i - 10;
  v41[1] = v30[1];
  v41[2] = v30[2];
  v39 = 0x100000013;
  v37 = &off_1E25C66E0;
  v40 = v41;
  v42[0] = v31[0];
  *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v31 + 12);
  v38 = xmmword_18D319860;
  v41[0] = v30[0];
  v34 = 0x100000013;
  v32 = &unk_1E25C66B0;
  v33 = xmmword_18D319860;
  v35 = (double *)v36;
  sub_18D1C75E8(*(double **)(a1 + 32), *(double **)(a2 + 32), (uint64_t)&v32, a7);
  sub_18D1D86F8((uint64_t)&v26, a6, (uint64_t)&v37);
  sub_18D1C9EF8((uint64_t)&v26, SDWORD2(v33), v35);
  if (a4)
  {
    *(_QWORD *)&v30[0] = 0x1400000013;
    v39 = 0x100000002;
    v37 = (uint64_t (**)())&unk_1E25C7550;
    v38 = xmmword_18D319330;
    v40 = v41;
    *(_QWORD *)&v41[0] = 0x1400000013;
    v34 = 0x100000002;
    v32 = &unk_1E25C7520;
    v35 = (double *)v36;
    v33 = xmmword_18D319330;
    v36[0] = vaddq_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 32) + 152), *(float64x2_t *)(*(_QWORD *)(a2 + 32) + 144));
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a7 + 216) = _Q0;
    sub_18D1CB1FC((uint64_t)&v26, a6, (uint64_t)&v37);
    sub_18D1C9F68((uint64_t)&v26, SDWORD2(v33), v35);
  }
  if (a5)
  {
    for (j = 10; j != 17; ++j)
      *((_DWORD *)&v26 + j) = j + 11;
    v39 = 0x100000007;
    v37 = &off_1E25C8210;
    v40 = v41;
    v38 = xmmword_18D319810;
    v41[0] = v30[0];
    *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)((char *)v30 + 12);
    v34 = 0x100000007;
    v32 = &unk_1E25C81E0;
    v33 = xmmword_18D319810;
    v35 = (double *)v36;
    if (sub_18D1C9FFC(a1, a2, a3, (uint64_t)&v32, a7, a8, a9))
      return 0xFFFFFFFFLL;
    sub_18D1C8640((uint64_t)&v26, a6, (uint64_t)&v37);
    sub_18D1C8130((uint64_t)&v26, SDWORD2(v33), v35);
  }
  return 0;
}

double sub_18D1C9EF8(uint64_t a1, int a2, double *a3)
{
  int *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double result;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(a1 + 232);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 32);
    v5 = *(double **)(a1 + 32);
    v6 = a2;
    do
    {
      v7 = *a3++;
      result = v7;
      v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

double sub_18D1C9F68(uint64_t a1, int a2, double *a3)
{
  int *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double result;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(a1 + 96);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
    v5 = *(double **)(a1 + 32);
    v6 = a2;
    do
    {
      v7 = *a3++;
      result = v7;
      v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_18D1C9FD8(_QWORD *result)
{
  result[8] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1C9FFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, BOOL *a6, double a7)
{
  uint64_t result;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  double *v88;
  float64x2_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double *v94;
  double v95;
  double v96;
  double *v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v109;
  double v110;
  double v111;
  double *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  _BYTE v122[64];
  void *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  void *v128;
  __int128 v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  void *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  void *v138;
  __int128 v139;
  uint64_t v140;
  _BYTE *v141;
  _BYTE v142[88];
  void *v143;
  __int128 v144;
  uint64_t v145;
  double *v146;
  uint64_t v147;
  void *v148;
  __int128 v149;
  uint64_t v150;
  _QWORD *v151;
  _BYTE v152[72];
  void *v153;
  __int128 v154;
  uint64_t v155;
  _QWORD *v156;
  _BYTE v157[72];
  void *v158;
  __int128 v159;
  uint64_t v160;
  _QWORD *v161;
  _BYTE v162[72];
  void *v163;
  __int128 v164;
  uint64_t v165;
  _QWORD *v166;
  _BYTE v167[72];
  void *v168;
  __int128 v169;
  uint64_t v170;
  double *v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  void *v181;
  __int128 v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE v185[72];
  void *v186;
  __int128 v187;
  uint64_t v188;
  _BYTE *v189;
  _BYTE v190[72];
  void *v191;
  __int128 v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  void *v196;
  __int128 v197;
  uint64_t v198;
  float64_t *v199;
  _QWORD v200[12];
  void *v201;
  __int128 v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  _QWORD v206[2];
  int v207;
  int v208;
  uint64_t v209;
  _BYTE *v210;
  _BYTE v211[72];
  _QWORD v212[2];
  int v213;
  int v214;
  uint64_t v215;
  _BYTE *v216;
  _BYTE v217[72];
  void *v218;
  __int128 v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  void *v223;
  __int128 v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  _BYTE v228[20];
  int v229;
  _QWORD *v230;
  float64x2_t v231;
  double v232;
  float64_t v233;
  void *v234;
  __int128 v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  int v239;
  void *v240;
  __int128 v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  int v245;
  void *v246;
  __int128 v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  int v251;
  void *v252;
  __int128 v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  int v257;
  void *v258;
  __int128 v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  int v263;
  void *v264;
  __int128 v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  int v269;

  if ((*(uint64_t *)&a7 <= -1 || ((*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&a7 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)(a4 + 8) = xmmword_18D319810;
  if (a3)
  {
    if (a3 == 1)
    {
      v266 = 0x100000003;
      v264 = &unk_1E25C77C0;
      v265 = xmmword_18D313070;
      v269 = 2;
      v267 = &v268;
      v268 = 0x100000000;
      v260 = 0x100000003;
      v258 = &unk_1E25C77C0;
      v259 = xmmword_18D313070;
      v263 = 23;
      v261 = &v262;
      v262 = 0x1600000015;
      v254 = 0x100000003;
      v252 = &unk_1E25C77C0;
      v253 = xmmword_18D313070;
      v257 = 2;
      v255 = &v256;
      v256 = 0x100000000;
      v248 = 0x100000003;
      v246 = &unk_1E25C77C0;
      v247 = xmmword_18D313070;
      v251 = 22;
      v249 = &v250;
      v250 = 0x1500000014;
      v242 = 0x100000003;
      v240 = &unk_1E25C77C0;
      v241 = xmmword_18D313070;
      v245 = 2;
      v243 = &v244;
      v244 = 0x100000000;
      v200[0] = 0x500000004;
      v236 = 0x100000003;
      v234 = &unk_1E25C77C0;
      v235 = xmmword_18D313070;
      v239 = 6;
      v237 = &v238;
      v238 = 0x500000004;
      v35 = *(double **)(a1 + 32);
      v36 = v35[6];
      v37 = v35[7];
      v38 = v35[8];
      v39 = v35[9];
      v40 = sqrt(v37 * v37 + v36 * v36 + v38 * v38 + v39 * v39);
      v41 = 1.0;
      v42 = 0.0;
      v43 = 0.0;
      v44 = 0.0;
      v45 = 0.0;
      v46 = 1.0;
      if (fabs(v40) >= 2.22044605e-16)
      {
        v43 = v36 / v40;
        v44 = v37 / v40;
        v45 = v38 / v40;
        v46 = v39 / v40;
      }
      v47 = sqrt(v44 * v44 + v43 * v43 + v45 * v45 + v46 * v46);
      v48 = 0.0;
      v49 = 0.0;
      if (fabs(v47) >= 2.22044605e-16)
      {
        v42 = -v43 / v47;
        v48 = -v44 / v47;
        v49 = -v45 / v47;
        v41 = v46 / v47;
      }
      v231.f64[0] = v42;
      v231.f64[1] = v48;
      v232 = v49;
      v233 = v41;
      cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v231, (uint64_t)v228);
      v50 = (DWORD1(v259) * v259);
      v198 = 0x100000003;
      v196 = &unk_1E25C7790;
      *(_QWORD *)&v197 = v259;
      *((_QWORD *)&v197 + 1) = __PAIR64__(v259, v50);
      v51 = v200;
      v199 = (float64_t *)v200;
      if ((_DWORD)v50)
      {
        v52 = v261;
        v53 = *(_QWORD *)(a1 + 32);
        do
        {
          v54 = *(int *)v52;
          v52 = (uint64_t *)((char *)v52 + 4);
          *v51++ = *(_QWORD *)(v53 + 8 * v54);
          --v50;
        }
        while (v50);
      }
      v55 = (DWORD1(v247) * v247);
      v140 = 0x100000003;
      v138 = &unk_1E25C7790;
      *(_QWORD *)&v139 = v247;
      *((_QWORD *)&v139 + 1) = __PAIR64__(v247, v55);
      v56 = v142;
      v141 = v142;
      if ((_DWORD)v55)
      {
        v57 = v249;
        v58 = *(_QWORD *)(a2 + 32);
        do
        {
          v59 = *(int *)v57;
          v57 = (uint64_t *)((char *)v57 + 4);
          *v56++ = *(_QWORD *)(v58 + 8 * v59);
          --v55;
        }
        while (v55);
      }
      v225 = 0x100000003;
      v223 = &unk_1E25C7790;
      v224 = xmmword_18D313070;
      v226 = &v227;
      sub_18D053FA4((uint64_t)&v196, (uint64_t)&v138, (uint64_t)&v223);
      v60 = (DWORD1(v265) * v265);
      v215 = 0x100000003;
      v212[0] = &unk_1E25C7790;
      v212[1] = v265;
      v213 = v60;
      v214 = v265;
      v61 = v217;
      v216 = v217;
      if ((_DWORD)v60)
      {
        v62 = v267;
        v63 = *(_QWORD *)(a1 + 32);
        do
        {
          v64 = *(int *)v62;
          v62 = (uint64_t *)((char *)v62 + 4);
          *v61++ = *(_QWORD *)(v63 + 8 * v64);
          --v60;
        }
        while (v60);
      }
      v65 = (DWORD1(v253) * v253);
      v209 = 0x100000003;
      v206[0] = &unk_1E25C7790;
      v206[1] = v253;
      v207 = v65;
      v208 = v253;
      v66 = v211;
      v210 = v211;
      if ((_DWORD)v65)
      {
        v67 = v255;
        v68 = *(_QWORD *)(a2 + 32);
        do
        {
          v69 = *(int *)v67;
          v67 = (uint64_t *)((char *)v67 + 4);
          *v66++ = *(_QWORD *)(v68 + 8 * v69);
          --v65;
        }
        while (v65);
      }
      v220 = 0x100000003;
      v218 = &unk_1E25C7790;
      v219 = xmmword_18D313070;
      v221 = &v222;
      sub_18D053FA4((uint64_t)v212, (uint64_t)v206, (uint64_t)&v218);
      v203 = 0x100000003;
      v201 = &unk_1E25C7790;
      v202 = xmmword_18D313070;
      v204 = &v205;
      sub_18D053B2C((uint64_t)v228, (uint64_t)&v223, (uint64_t)&v201);
      v140 = 0x100000003;
      v138 = &unk_1E25C7790;
      v139 = xmmword_18D313070;
      v141 = v142;
      sub_18D053FA4((uint64_t)&v218, (uint64_t)&v201, (uint64_t)&v138);
      sub_18D1C9120((uint64_t)&v196, a4, (uint64_t)&v240);
      sub_18D1BE7FC((uint64_t)&v196, (uint64_t)&v138);
      cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v231, (uint64_t)&v218);
      cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v231, (uint64_t)v212);
      cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v231, (uint64_t)v206);
      cnrotation::CNRotation::dRdq4(&v231, (uint64_t)&v201);
      v70.f64[0] = v233;
      v198 = 0x300000004;
      v196 = &unk_1E25C7F70;
      v197 = xmmword_18D3130A0;
      v199 = (float64_t *)v200;
      *(float64_t *)v200 = v233;
      *(double *)&v200[1] = v232;
      *(double *)&v200[4] = -v232;
      *(float64_t *)&v200[5] = v233;
      v200[8] = *(_QWORD *)&v231.f64[1];
      *(double *)&v200[9] = -v231.f64[0];
      *(double *)&v200[2] = -v231.f64[1];
      *(double *)&v200[3] = -v231.f64[0];
      v200[6] = *(_QWORD *)&v231.f64[0];
      *(double *)&v200[7] = -v231.f64[1];
      *(float64_t *)&v200[10] = v233;
      *(double *)&v200[11] = -v232;
      v183 = 0x300000003;
      v181 = &unk_1E25C78E0;
      v182 = xmmword_18D30BB60;
      v184 = v185;
      v71 = sub_18D1C94E0((uint64_t)&v218, (uint64_t)&v181, v70);
      v71.f64[0] = v199[1];
      v170 = 0x300000003;
      v168 = &unk_1E25C78E0;
      v169 = xmmword_18D30BB60;
      v171 = &v172;
      sub_18D1C94E0((uint64_t)v212, (uint64_t)&v168, v71);
      v188 = 0x300000003;
      v186 = &unk_1E25C78E0;
      v187 = xmmword_18D30BB60;
      v189 = v190;
      v72 = sub_18D053FA4((uint64_t)&v181, (uint64_t)&v168, (uint64_t)&v186);
      v72.f64[0] = v199[2];
      v165 = 0x300000003;
      v163 = &unk_1E25C78E0;
      v164 = xmmword_18D30BB60;
      v166 = v167;
      sub_18D1C94E0((uint64_t)v206, (uint64_t)&v163, v72);
      v140 = 0x300000003;
      v138 = &unk_1E25C78E0;
      v139 = xmmword_18D30BB60;
      v141 = v142;
      v73 = sub_18D053FA4((uint64_t)&v186, (uint64_t)&v163, (uint64_t)&v138);
      v73.f64[0] = v199[3];
      v160 = 0x300000003;
      v158 = &unk_1E25C78E0;
      v159 = xmmword_18D30BB60;
      v161 = v162;
      sub_18D1C94E0((uint64_t)&v201, (uint64_t)&v158, v73);
      v193 = 0x300000003;
      v191 = &unk_1E25C78E0;
      v192 = xmmword_18D30BB60;
      v194 = &v195;
      v74 = sub_18D053FA4((uint64_t)&v138, (uint64_t)&v158, (uint64_t)&v191);
      v74.f64[0] = v199[SHIDWORD(v197)];
      v170 = 0x300000003;
      v168 = &unk_1E25C78E0;
      v169 = xmmword_18D30BB60;
      v171 = &v172;
      v75 = sub_18D1C94E0((uint64_t)&v218, (uint64_t)&v168, v74);
      v75.f64[0] = v199[SHIDWORD(v197) + 1];
      v165 = 0x300000003;
      v163 = &unk_1E25C78E0;
      v164 = xmmword_18D30BB60;
      v166 = v167;
      sub_18D1C94E0((uint64_t)v212, (uint64_t)&v163, v75);
      v183 = 0x300000003;
      v181 = &unk_1E25C78E0;
      v182 = xmmword_18D30BB60;
      v184 = v185;
      v76 = sub_18D053FA4((uint64_t)&v168, (uint64_t)&v163, (uint64_t)&v181);
      v76.f64[0] = v199[SHIDWORD(v197) + 2];
      v160 = 0x300000003;
      v158 = &unk_1E25C78E0;
      v159 = xmmword_18D30BB60;
      v161 = v162;
      sub_18D1C94E0((uint64_t)v206, (uint64_t)&v158, v76);
      v140 = 0x300000003;
      v138 = &unk_1E25C78E0;
      v139 = xmmword_18D30BB60;
      v141 = v142;
      v77 = sub_18D053FA4((uint64_t)&v181, (uint64_t)&v158, (uint64_t)&v138);
      v77.f64[0] = v199[SHIDWORD(v197) + 3];
      v155 = 0x300000003;
      v153 = &unk_1E25C78E0;
      v154 = xmmword_18D30BB60;
      v156 = v157;
      sub_18D1C94E0((uint64_t)&v201, (uint64_t)&v153, v77);
      v188 = 0x300000003;
      v186 = &unk_1E25C78E0;
      v187 = xmmword_18D30BB60;
      v189 = v190;
      v78 = sub_18D053FA4((uint64_t)&v138, (uint64_t)&v153, (uint64_t)&v186);
      v78.f64[0] = v199[2 * SHIDWORD(v197)];
      v165 = 0x300000003;
      v163 = &unk_1E25C78E0;
      v164 = xmmword_18D30BB60;
      v166 = v167;
      v79 = sub_18D1C94E0((uint64_t)&v218, (uint64_t)&v163, v78);
      v79.f64[0] = v199[2 * SHIDWORD(v197) + 1];
      v160 = 0x300000003;
      v158 = &unk_1E25C78E0;
      v159 = xmmword_18D30BB60;
      v161 = v162;
      sub_18D1C94E0((uint64_t)v212, (uint64_t)&v158, v79);
      v170 = 0x300000003;
      v168 = &unk_1E25C78E0;
      v169 = xmmword_18D30BB60;
      v171 = &v172;
      v80 = sub_18D053FA4((uint64_t)&v163, (uint64_t)&v158, (uint64_t)&v168);
      v80.f64[0] = v199[2 * SHIDWORD(v197) + 2];
      v155 = 0x300000003;
      v153 = &unk_1E25C78E0;
      v154 = xmmword_18D30BB60;
      v156 = v157;
      sub_18D1C94E0((uint64_t)v206, (uint64_t)&v153, v80);
      v140 = 0x300000003;
      v138 = &unk_1E25C78E0;
      v139 = xmmword_18D30BB60;
      v141 = v142;
      v81 = sub_18D053FA4((uint64_t)&v168, (uint64_t)&v153, (uint64_t)&v138);
      v81.f64[0] = v199[2 * SHIDWORD(v197) + 3];
      v150 = 0x300000003;
      v148 = &unk_1E25C78E0;
      v149 = xmmword_18D30BB60;
      v151 = v152;
      sub_18D1C94E0((uint64_t)&v201, (uint64_t)&v148, v81);
      v183 = 0x300000003;
      v181 = &unk_1E25C78E0;
      v182 = xmmword_18D30BB60;
      v184 = v185;
      sub_18D053FA4((uint64_t)&v138, (uint64_t)&v148, (uint64_t)&v181);
      v160 = 0x100000003;
      v158 = &unk_1E25C7790;
      v159 = xmmword_18D313070;
      v161 = v162;
      sub_18D053B2C((uint64_t)&v191, (uint64_t)&v223, (uint64_t)&v158);
      v155 = 0x100000003;
      v153 = &unk_1E25C7790;
      v154 = xmmword_18D313070;
      v156 = v157;
      sub_18D053B2C((uint64_t)&v186, (uint64_t)&v223, (uint64_t)&v153);
      v150 = 0x100000003;
      v148 = &unk_1E25C7790;
      v149 = xmmword_18D313070;
      v151 = v152;
      sub_18D053B2C((uint64_t)&v181, (uint64_t)&v223, (uint64_t)&v148);
      *(_QWORD *)(a5 + 232) = 0x3FF0000000000000;
      v82 = v161;
      *(_QWORD *)(a5 + 240) = *v161;
      v83 = v156;
      *(_QWORD *)(a5 + 248) = *v156;
      v84 = v151;
      *(_QWORD *)(a5 + 256) = *v151;
      v85 = v230;
      *(_QWORD *)(a5 + 264) = *v230;
      v86 = v229;
      *(_QWORD *)(a5 + 272) = v85[v229];
      *(_QWORD *)(a5 + 280) = v85[2 * v86];
      *(_QWORD *)(a5 + 288) = 0x3FF0000000000000;
      *(_QWORD *)(a5 + 296) = v82[1];
      *(_QWORD *)(a5 + 304) = v83[1];
      *(_QWORD *)(a5 + 312) = v84[1];
      *(_QWORD *)(a5 + 320) = v85[1];
      *(_QWORD *)(a5 + 328) = v85[(int)v86 + 1];
      v87 = &v85[2 * (int)v86];
      *(_QWORD *)(a5 + 336) = v87[1];
      *(_QWORD *)(a5 + 344) = 0x3FF0000000000000;
      *(_QWORD *)(a5 + 352) = v82[2];
      *(_QWORD *)(a5 + 360) = v83[2];
      *(_QWORD *)(a5 + 368) = v84[2];
      *(_QWORD *)(a5 + 376) = v85[2];
      *(_QWORD *)(a5 + 384) = v85[(int)v86 + 2];
      *(_QWORD *)(a5 + 392) = v87[2];
      v145 = 0x100000003;
      v143 = &unk_1E25C7790;
      v144 = xmmword_18D313070;
      v146 = (double *)&v147;
      v88 = *(double **)(a1 + 32);
      v89.f64[0] = v88[25];
      v90 = v88[26];
      v91 = v88[27];
      v92 = sqrt(v90 * v90 + v89.f64[0] * v89.f64[0] + v91 * v91);
      if (fabs(v92) <= 0.000000015)
        return 0xFFFFFFFFLL;
      v93 = v88[24];
      v170 = 0x100000003;
      v168 = &unk_1E25C7790;
      v169 = xmmword_18D313070;
      v171 = &v172;
      v172 = v89.f64[0];
      v173 = v90;
      v174 = v91;
      v140 = 0x100000003;
      v138 = &unk_1E25C7790;
      v139 = xmmword_18D313070;
      v141 = v142;
      v89.f64[0] = 1.0 / v92;
      sub_18D064EF4((uint64_t)&v168, (uint64_t)&v138, v89);
      sub_18D053AA8((uint64_t)&v143, (uint64_t)&v138);
      *(double *)(*(_QWORD *)(a4 + 32) + 24) = v93 * v92;
      v165 = 0x100000003;
      v163 = &unk_1E25C7790;
      v164 = xmmword_18D313070;
      v166 = v167;
      sub_18D053B2C((uint64_t)v228, (uint64_t)&v143, (uint64_t)&v163);
      sub_18D1C9120((uint64_t)&v138, a4, (uint64_t)&v234);
      sub_18D1BE7FC((uint64_t)&v138, (uint64_t)&v163);
      v94 = *(double **)(a1 + 32);
      v96 = v94[24];
      v95 = v94[25];
      v97 = *(double **)(a2 + 32);
      v98 = v97[23] + v96 * v95;
      v100 = v94[26];
      v99 = v94[27];
      v101 = v97[24] + v96 * v100;
      v102 = v97[25] + v96 * v99;
      v103 = sqrt(v101 * v101 + v98 * v98 + v102 * v102);
      *a6 = v103 < a7;
      if (fabs(v103) <= 0.000000015)
      {
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)(a5 + 400) = _Q0;
        *(_QWORD *)(a5 + 416) = 0x3FF0000000000000;
        *(_OWORD *)(a5 + 424) = 0u;
        *(_OWORD *)(a5 + 440) = 0u;
        *(_OWORD *)(a5 + 456) = 0u;
        *(_OWORD *)(a5 + 472) = 0u;
        *(_OWORD *)(a5 + 488) = 0u;
        *(_OWORD *)(a5 + 504) = 0u;
        *(_OWORD *)(a5 + 520) = 0u;
        *(_OWORD *)(a5 + 536) = 0u;
        *(_OWORD *)(a5 + 552) = 0u;
      }
      else
      {
        v104 = 1.0 / v103;
        v105 = v98 * (1.0 / v103);
        v106 = v101 * (1.0 / v103);
        v107 = v102 * (1.0 / v103);
        _NF = v103 < a7;
        if (v103 >= a7)
          v109 = v106;
        else
          v109 = v100;
        if (_NF)
          v110 = v95;
        else
          v110 = v105;
        if (_NF)
          v111 = v99;
        else
          v111 = v107;
        v112 = v146;
        *v146 = v110;
        v112[1] = v109;
        v112[2] = v111;
        v170 = 0x300000003;
        v168 = &unk_1E25C78E0;
        v169 = xmmword_18D30BB60;
        v171 = &v172;
        v172 = v104 * (1.0 - v110 * v110);
        v173 = v104 * -(v109 * v110);
        v178 = v104 * -(v110 * v111);
        v179 = v104 * -(v109 * v111);
        v175 = v104 * -(v110 * v109);
        v174 = v104 * -(v111 * v110);
        v176 = v104 * (1.0 - v109 * v109);
        v177 = v104 * -(v111 * v109);
        v180 = v104 * (1.0 - v111 * v111);
        v135 = 0x100000003;
        v133 = &unk_1E25C7790;
        v134 = xmmword_18D313070;
        v136 = &v137;
        sub_18D053B2C((uint64_t)&v191, (uint64_t)&v143, (uint64_t)&v133);
        v130 = 0x100000003;
        v128 = &unk_1E25C7790;
        v129 = xmmword_18D313070;
        v131 = &v132;
        sub_18D053B2C((uint64_t)&v186, (uint64_t)&v143, (uint64_t)&v128);
        v125 = 0x100000003;
        v123 = &unk_1E25C7790;
        v124 = xmmword_18D313070;
        v126 = &v127;
        sub_18D053B2C((uint64_t)&v181, (uint64_t)&v143, (uint64_t)&v123);
        v165 = 0x300000003;
        v163 = &unk_1E25C78E0;
        v164 = xmmword_18D30BB60;
        v166 = v167;
        sub_18D053B2C((uint64_t)v228, (uint64_t)&v168, (uint64_t)&v163);
        *(double *)(a5 + 400) = v110;
        *(double *)(a5 + 408) = v109;
        *(double *)(a5 + 416) = v111;
        v113 = v136;
        *(_QWORD *)(a5 + 424) = *v136;
        v114 = v131;
        *(_QWORD *)(a5 + 432) = *v131;
        v115 = v126;
        *(_QWORD *)(a5 + 440) = *v126;
        v116 = v166;
        *(_QWORD *)(a5 + 448) = *v166;
        v117 = SHIDWORD(v164);
        *(_QWORD *)(a5 + 456) = v116[SHIDWORD(v164)];
        *(_QWORD *)(a5 + 464) = v116[2 * v117];
        *(_QWORD *)(a5 + 472) = v113[1];
        *(_QWORD *)(a5 + 480) = v114[1];
        *(_QWORD *)(a5 + 488) = v115[1];
        *(_QWORD *)(a5 + 496) = v116[1];
        *(_QWORD *)(a5 + 504) = v116[(int)v117 + 1];
        v118 = &v116[2 * (int)v117];
        *(_QWORD *)(a5 + 512) = v118[1];
        *(_QWORD *)(a5 + 520) = v113[2];
        *(_QWORD *)(a5 + 528) = v114[2];
        *(_QWORD *)(a5 + 536) = v115[2];
        *(_QWORD *)(a5 + 544) = v116[2];
        *(_QWORD *)(a5 + 552) = v116[(int)v117 + 2];
        *(_QWORD *)(a5 + 560) = v118[2];
        if (!*a6)
        {
          *(double *)(*(_QWORD *)(a4 + 32) + 24) = v103;
          sub_18D192C7C((uint64_t)v228, (uint64_t)&v143, (uint64_t)v122);
          sub_18D1C9120((uint64_t)&v138, a4, (uint64_t)&v234);
          sub_18D1BE7FC((uint64_t)&v138, (uint64_t)v122);
        }
      }
    }
    else if (a3 == 2)
    {
      __assert_rtn("GetEarthFixedUserStateEstimate", "ravenpntestimatorhelper.h", 1110, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
    }
    return 0;
  }
  v17 = *(double **)(a1 + 32);
  v18 = *(double **)(a2 + 32);
  v19 = *(double **)(a4 + 32);
  *v19 = v17[21] + v18[20];
  v19[1] = v17[22] + v18[21];
  v19[2] = v17[23] + v18[22];
  *(_OWORD *)(a5 + 248) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_QWORD *)(a5 + 264) = 0x3FF0000000000000;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(_QWORD *)(a5 + 320) = 0;
  *(_QWORD *)(a5 + 328) = 0x3FF0000000000000;
  *(_OWORD *)(a5 + 336) = 0u;
  *(_OWORD *)(a5 + 352) = 0u;
  *(_OWORD *)(a5 + 368) = 0u;
  *(_QWORD *)(a5 + 384) = 0;
  *(_QWORD *)(a5 + 392) = 0x3FF0000000000000;
  v21 = v17[25];
  v20 = v17[26];
  v22 = v17[27];
  v23 = sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  if (fabs(v23) <= 0.000000015)
    return 0xFFFFFFFFLL;
  v24 = 1.0 / v23;
  v25 = v23 * v17[24];
  v26 = v21 * (1.0 / v23);
  v19[3] = v25;
  v19[4] = v26;
  v27 = v20 * v24;
  v28 = v22 * v24;
  v19[5] = v27;
  v19[6] = v28;
  v29 = v17[24];
  v30 = v18[23] + v29 * v17[25];
  v31 = v18[24] + v29 * v17[26];
  v32 = v18[25] + v29 * v17[27];
  v33 = sqrt(v31 * v31 + v30 * v30 + v32 * v32);
  *a6 = v33 < a7;
  if (fabs(v33) > 0.000000015)
  {
    v34 = 1.0 / v33;
    if (v33 >= a7)
    {
      v27 = v31 * (1.0 / v33);
      v26 = v30 * (1.0 / v33);
      v28 = v32 * (1.0 / v33);
    }
    *(double *)(a5 + 400) = v26;
    *(double *)(a5 + 408) = v27;
    *(double *)(a5 + 416) = v28;
    *(_QWORD *)(a5 + 432) = 0;
    *(_QWORD *)(a5 + 440) = 0;
    *(_QWORD *)(a5 + 424) = 0;
    *(double *)(a5 + 448) = v34 * (1.0 - v26 * v26);
    *(double *)(a5 + 456) = v34 * -(v26 * v27);
    *(double *)(a5 + 464) = v34 * -(v26 * v28);
    *(_QWORD *)(a5 + 480) = 0;
    *(_QWORD *)(a5 + 488) = 0;
    *(_QWORD *)(a5 + 472) = 0;
    *(double *)(a5 + 496) = v34 * -(v27 * v26);
    *(double *)(a5 + 504) = v34 * (1.0 - v27 * v27);
    *(double *)(a5 + 512) = v34 * -(v27 * v28);
    *(_QWORD *)(a5 + 520) = 0;
    *(_QWORD *)(a5 + 536) = 0;
    *(_QWORD *)(a5 + 528) = 0;
    *(double *)(a5 + 544) = v34 * -(v28 * v26);
    *(double *)(a5 + 552) = v34 * -(v28 * v27);
    *(double *)(a5 + 560) = v34 * (1.0 - v28 * v28);
    if (v33 >= a7)
    {
      result = 0;
      v19[3] = v33;
      v19[4] = v30 * (1.0 / v33);
      v19[5] = v31 * (1.0 / v33);
      v19[6] = v32 * (1.0 / v33);
      return result;
    }
    return 0;
  }
  result = 0;
  *(_QWORD *)(a5 + 416) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a5 + 400) = _Q0;
  *(_OWORD *)(a5 + 424) = 0u;
  *(_OWORD *)(a5 + 440) = 0u;
  *(_OWORD *)(a5 + 456) = 0u;
  *(_OWORD *)(a5 + 472) = 0u;
  *(_OWORD *)(a5 + 488) = 0u;
  *(_OWORD *)(a5 + 504) = 0u;
  *(_OWORD *)(a5 + 520) = 0u;
  *(_OWORD *)(a5 + 536) = 0u;
  *(_OWORD *)(a5 + 552) = 0u;
  return result;
}

uint64_t sub_18D1CB1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_OWORD *)(a1 + 8) = xmmword_18D319330;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5600;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 88) = 0x100000002;
  *(_QWORD *)(a1 + 64) = &unk_1E25C7550;
  *(_OWORD *)(a1 + 72) = xmmword_18D319330;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  sub_18D053D7C(a1 + 64, a3);
  v6 = *(_DWORD *)(a1 + 72);
  v5 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 96);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1CB2B4(_QWORD *a1)
{
  a1[8] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1CB2E8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CB30C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CB318(uint64_t a1)
{
  char v1[2];

  sub_18D159878(a1, v1);
}

void sub_18D1CB338(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7340;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CB3A4(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1CB4C0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1CB3CC(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x2D8uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1CB4C0(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x16C0uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

uint64_t sub_18D1CB528(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1A0000001CLL;
  *(_QWORD *)a1 = &off_1E25C7340;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3198B0;
  sub_18D1CB4C0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1CB57C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1CB5B8(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x1C0000001ALL;
  *(_QWORD *)a1 = &off_1E25C7190;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1CB4C0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1CB60C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1CB648(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7190;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CB6B4(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1CB4C0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1CB6DC(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x2D8uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

double sub_18D1CB7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  double result;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 16) = v4 * v3;
  *(_DWORD *)(a3 + 20) = v3;
  v5 = *(double **)(a1 + 32);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = *(double **)(a2 + 32);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = *(double **)(a3 + 32);
  *v13 = v7 * v12 - v8 * v11;
  v13[1] = v8 * v10 - v6 * v12;
  result = v6 * v11 - v7 * v10;
  v13[2] = result;
  return result;
}

uint64_t sub_18D1CB820(uint64_t a1)
{
  int v1;
  int v2;
  int v3;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = v1 - 1;
  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 349)
    v3 = 0;
  else
    v3 = v2 + 1;
  *(_DWORD *)(a1 + 40) = v3;
  sub_18D1CB864(a1);
  return 0;
}

uint64_t sub_18D1CB864(uint64_t result)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  double v9;
  double v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v1 = result;
  v2 = 0.0;
  if (*(_DWORD *)(result + 8) >= 2u)
  {
    v3 = result + 48 + 48 * *(unsigned int *)(result + 44);
    v12[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v12[1] = v4;
    v5 = v1 + 48 + 48 * *(unsigned int *)(v1 + 40);
    v11[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v11[1] = v6;
    result = CNTimeSpan::operator-((uint64_t)v12, v11, v7, v8);
    v10 = v9 + (double)result;
    if (fabs(v10) >= 2.22044605e-16)
      v2 = (double)(*(_DWORD *)(v1 + 8) - 1) / v10;
  }
  *(double *)(v1 + 32) = v2;
  return result;
}

uint64_t sub_18D1CB920(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 8))
    return 0xFFFFFFFFLL;
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 25) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  sub_18D053AA8(a2 + 48, a1 + 64);
  sub_18D053AA8(a2 + 240, a1 + 256);
  result = 0;
  *(_BYTE *)(a2 + 432) = *(_BYTE *)(a1 + 448);
  *(_QWORD *)(a2 + 440) = *(_QWORD *)(a1 + 5944);
  return result;
}

void sub_18D1CB98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x1C00000003;
  *(_QWORD *)a1 = &off_1E25C7880;
  *(_OWORD *)(a1 + 8) = xmmword_18D3199E0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1CB9E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1CB9F8(uint64_t a1)
{
  uint64_t result;
  int v3;
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0x1C00000003;
  *(_QWORD *)a1 = &off_1E25C7880;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D319B30;
  result = sub_18D04BE88(a1, 0.0);
  v3 = *(_DWORD *)(a1 + 20) + 1;
  v4 = *(_QWORD **)(a1 + 32);
  *v4 = 0x3FF0000000000000;
  v4[v3] = 0x3FF0000000000000;
  v4[2 * v3] = 0x3FF0000000000000;
  return result;
}

void sub_18D1CBA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x1A00000003;
  *(_QWORD *)a1 = &off_1E25C7850;
  *(_OWORD *)(a1 + 8) = xmmword_18D319800;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1CBAC0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1CBAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x1A00000003;
  *(_QWORD *)a1 = &off_1E25C7850;
  *(_OWORD *)(a1 + 8) = xmmword_18D319800;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1CBB2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1CBB40(uint64_t a1)
{
  uint64_t result;
  int v3;
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0x1A00000003;
  *(_QWORD *)a1 = &off_1E25C7850;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D319910;
  result = sub_18D04BE88(a1, 0.0);
  v3 = *(_DWORD *)(a1 + 20) + 1;
  v4 = *(_QWORD **)(a1 + 32);
  *v4 = 0x3FF0000000000000;
  v4[v3] = 0x3FF0000000000000;
  v4[2 * v3] = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18D1CBBB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;

  v2 = 18;
  v3 = sub_18D1C96FC(a1, 18, 18);
  *(_OWORD *)(v3 + 8) = xmmword_18D319A90;
  result = sub_18D04BE88(v3, 0.0);
  v5 = 0;
  v6 = *(_DWORD *)(a1 + 20) + 1;
  v7 = *(_QWORD *)(a1 + 32);
  do
  {
    *(_QWORD *)(v7 + 8 * v5) = 0x3FF0000000000000;
    v5 += v6;
    --v2;
  }
  while (v2);
  return result;
}

void sub_18D1CBC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1CBC70(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1CBC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1CBCE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1CBCF4(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1CBD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x1A00000001;
  *(_QWORD *)a1 = &off_1E25C6B30;
  *(_OWORD *)(a1 + 8) = xmmword_18D3198F0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1CBD60(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1CBD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int i;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD v13[4];

  v3 = *(_DWORD *)(a2 + 8);
  v11 = 0x100000003;
  v6 = &unk_1E25C77C0;
  v7 = v3;
  v8 = 1;
  v9 = v3;
  v10 = v3;
  v12 = v13;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      v13[i] = i;
  }
  return sub_18D1CC2A4(a1, a2, (uint64_t)&v6, a3);
}

_QWORD *sub_18D1CBDE8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7130;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D1CBE44(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x170000001ALL;
  *(_QWORD *)a1 = &off_1E25C7130;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319B40;
  sub_18D1C4D6C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1CBE98(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1CBED4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7130;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CBF40(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1C4D6C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1CBF68(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x256uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1CC05C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CC080(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CC08C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[84];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1CC180(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CC1A4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CC1B0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[26];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1CC2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0x1A00000003;
  *(_OWORD *)(a1 + 8) = xmmword_18D319800;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5000;
  *(_QWORD *)(a1 + 664) = a2;
  v7 = a1 + 672;
  *(_QWORD *)(a1 + 696) = 0x100000003;
  *(_QWORD *)(a1 + 672) = &unk_1E25C77C0;
  *(_OWORD *)(v7 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 704) = a1 + 712;
  *(_QWORD *)(a1 + 752) = 0x10000001ALL;
  *(_QWORD *)(a1 + 728) = &unk_1E25C70D0;
  *(_OWORD *)(a1 + 736) = xmmword_18D319790;
  *(_QWORD *)(a1 + 760) = a1 + 768;
  sub_18D053D7C(v7, a3);
  sub_18D053D7C(a1 + 728, a4);
  v8 = *(unsigned int *)(a1 + 688);
  v9 = *(unsigned int *)(a1 + 744);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v8)
      {
        v14 = *(int **)(a1 + 704);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 760) + 4 * v11) * v12;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v10;
        v18 = v8;
        do
        {
          v19 = *v14++;
          *(_QWORD *)(v16 + 8 * v17++) = *(_QWORD *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18D1CC3F4(_QWORD *a1)
{
  a1[91] = &unk_1E25C5EA0;
  a1[84] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1CC42C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1CC47C(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  double result;

  v4 = (char *)operator new(0x68uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C4380;
  result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18D1CC548;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1CC534(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1CC548(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1CC57C()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D1CC610@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  if ((a1 & 0x80000000) != 0)
    __assert_rtn("Eye", "cnmatrix.h", 2135, "nr >= 0");
  if ((a2 & 0x80000000) != 0)
    __assert_rtn("Eye", "cnmatrix.h", 2136, "nc >= 0");
  *(_QWORD *)(a3 + 24) = 0x100000001;
  *(_QWORD *)a3 = &unk_1E25C6A40;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;
  result = sub_18D04BE88(a3, 0.0);
  if (a1 >= a2)
    v7 = a2;
  else
    v7 = a1;
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a3 + 20) + 1;
    v10 = *(_QWORD *)(a3 + 32);
    do
    {
      *(_QWORD *)(v10 + 8 * v8) = 0x3FF0000000000000;
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_18D1CC6EC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1CC73C(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  double result;

  v4 = (char *)operator new(0x68uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C3738;
  result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18D1CC808;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1CC7F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1CC808(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1CC83C()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

double sub_18D1CC8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x1200000003;
  *(_QWORD *)a1 = &off_1E25C7730;
  *(_OWORD *)(a1 + 8) = xmmword_18D319910;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1CC928(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1CC93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x1A00000003;
  *(_QWORD *)a1 = &off_1E25C7850;
  *(_OWORD *)(a1 + 8) = xmmword_18D319800;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1CC994(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1CC9A8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

double sub_18D1CC9BC(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x1200000003;
  *(_QWORD *)(a1 + 24) = 0x1200000003;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C7730;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0x12u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1CCA78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1CCA8C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CCAB0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CCABC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[54];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1CCBB0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1CCC00(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  double result;

  v4 = (char *)operator new(0x68uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C43A8;
  result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18D1CCCCC;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1CCCB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1CCCCC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1CCD00()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_18D1CCD94(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (*(_BYTE *)a1)
  {
    v2 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = v2;
    v3 = *(_OWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 96) = v5;
    *(_OWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 64) = v4;
    if (a1 + 8 != a2)
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 120);
    }
    v6 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 160) = v6;
    result = *(__n128 *)(a2 + 168);
    v8 = *(_OWORD *)(a2 + 184);
    v9 = *(_OWORD *)(a2 + 200);
    *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 216);
    *(_OWORD *)(a1 + 192) = v8;
    *(_OWORD *)(a1 + 208) = v9;
    *(__n128 *)(a1 + 176) = result;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = &unk_1E25C2158;
    v10 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 16) = v10;
    v11 = *(_OWORD *)(a2 + 40);
    v12 = *(_OWORD *)(a2 + 56);
    v13 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 48) = v11;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    if (a1 + 8 != a2)
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 120);
    }
    v14 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 160) = v14;
    result = *(__n128 *)(a2 + 168);
    v15 = *(_OWORD *)(a2 + 184);
    v16 = *(_OWORD *)(a2 + 200);
    *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 216);
    *(_OWORD *)(a1 + 192) = v15;
    *(_OWORD *)(a1 + 208) = v16;
    *(__n128 *)(a1 + 176) = result;
    *(_BYTE *)a1 = 1;
  }
  return result;
}

void sub_18D1CCEA4(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CCEC8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CCED4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[28];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1CCFC8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CCFEC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CCFF8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[28];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1CD0EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  uint64_t j;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_DWORD *)(result + 12);
  v5 = *(unsigned int *)(a2 + 8);
  v6 = v5 + v3;
  *(_DWORD *)(a3 + 8) = v5 + v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 16) = (v5 + v3) * v4;
  *(_DWORD *)(a3 + 20) = v5 + v3;
  if (v4)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(result + 32);
    v10 = *(_QWORD *)(a3 + 32);
    v11 = v3;
    v12 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v3)
      {
        for (i = 0; i != v3; ++i)
          *(_DWORD *)(v10 + 4 * (v7 + i)) = *(_DWORD *)(v9
                                                                      + 4 * ((int)i + v8 * *(_DWORD *)(result + 20)));
      }
      if ((_DWORD)v5)
      {
        for (j = 0; j != v5; ++j)
          *(_DWORD *)(v10 + 4 * (v11 + j)) = *(_DWORD *)(v12 + 4
                                                                             * ((int)j + v8 * *(_DWORD *)(a2 + 20)));
      }
      ++v8;
      v7 += v6;
      v11 += v6;
    }
    while (v8 != v4);
  }
  return result;
}

void sub_18D1CD188(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CD1AC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CD1B8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[56];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1CD2AC(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CD2D0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CD2DC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[84];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1CD3D0(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int v7;
  const char *v8;
  int v9;

  *(_QWORD *)(result + 24) = 0x10000001CLL;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E25C72E0;
  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = v2;
  v4 = (v2 * v3);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v3;
  v5 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Cu)
  {
    v8 = "this->max_num_rows_ >= A.NumRows()";
    v9 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v8 = "this->max_num_cols_ >= A.NumCols()";
    v9 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  if ((int)v4 >= 1)
  {
    v6 = *(int **)(a2 + 32);
    do
    {
      v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18D1CD48C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1CD4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0x10000001CLL;
  *(_OWORD *)(a1 + 8) = xmmword_18D319780;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C55D0;
  v5 = a1 + 272;
  *(_QWORD *)(a1 + 296) = 0x10000001CLL;
  *(_QWORD *)(a1 + 264) = a2;
  *(_QWORD *)(a1 + 272) = &off_1E25C72E0;
  *(_OWORD *)(a1 + 280) = xmmword_18D319780;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  sub_18D053D7C(a1 + 272, a3);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    v9 = *(int **)(a1 + 304);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD **)(a1 + 32);
    do
    {
      v12 = *v9++;
      *v11++ = *(_QWORD *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18D1CD560(_QWORD *a1)
{
  a1[34] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1CD594(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x100000008;
  *(_QWORD *)(a1 + 24) = 0x100000008;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C86C0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1CD654(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1CD668(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v4 = (_QWORD *)sub_18D04A5F4(a1);
  *v4 = &off_1E25C4EE0;
  v4[6] = a2;
  v4[10] = 0x10000001CLL;
  v4[7] = &off_1E25C72E0;
  *(_OWORD *)(a1 + 64) = xmmword_18D319780;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 232) = 0x10000001CLL;
  *(_QWORD *)(a1 + 208) = &off_1E25C72E0;
  *(_OWORD *)(a1 + 216) = xmmword_18D319780;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  sub_18D053D7C((uint64_t)(v4 + 7), (uint64_t)&unk_1EE061730);
  sub_18D053D7C(a1 + 208, (uint64_t)&unk_1EE061730);
  v5 = *(unsigned int *)(a1 + 72);
  v6 = *(unsigned int *)(a1 + 224);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  *(_DWORD *)(a1 + 16) = v6 * v5;
  *(_DWORD *)(a1 + 20) = v5;
  if (!*(_QWORD *)(a1 + 40))
    __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_DWORD *)(a2 + 20);
    v10 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v5)
      {
        v11 = *(int **)(a1 + 88);
        v12 = *(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * v8) * v9;
        v13 = *(_QWORD *)(a1 + 32);
        v14 = v7;
        v15 = v5;
        do
        {
          v16 = *v11++;
          *(_QWORD *)(v13 + 8 * v14++) = *(_QWORD *)(v10 + 8 * (v16 + v12));
          --v15;
        }
        while (v15);
      }
      ++v8;
      v7 += v5;
    }
    while (v8 != v6);
  }
  return a1;
}

void sub_18D1CD7A8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v1[26] = &unk_1E25C5EA0;
  v1[7] = &unk_1E25C5EA0;
  *v1 = &unk_1E25C7370;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1CD808(_QWORD *a1)
{
  uint64_t v2;

  a1[26] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C7370;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D1CD88C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1CD8A0(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

void sub_18D1CD8B4(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CD8D8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CD8E4(uint64_t a1)
{
  char v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

void sub_18D1CD930(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CD954(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CD960(uint64_t a1)
{
  char v1[32];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

uint64_t sub_18D1CD9AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 24) = 0x600000006;
  *(_QWORD *)a2 = &unk_1E25C81B0;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  return sub_18D073454(a1, a2);
}

void sub_18D1CDA00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1CDA14(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D1CDA28(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 328);
        v8 = *(int **)(result + 368);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 432) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D1CDB10(_QWORD *result)
{
  result[50] = &unk_1E25C5EA0;
  result[42] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1CDB38(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 72);
        v8 = *(int **)(result + 112);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 160) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D1CDC20(_QWORD *result)
{
  result[16] = &unk_1E25C5EA0;
  result[10] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1CDC48(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CDC6C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CDC78(uint64_t a1)
{
  char v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

void sub_18D1CDCC4(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CDCE8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CDCF4(uint64_t a1)
{
  char v1[6];

  sub_18D159878(a1, v1);
}

uint64_t sub_18D1CDD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_OWORD *)(a1 + 8) = xmmword_18D314680;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C51E0;
  *(_QWORD *)(a1 + 360) = 0x100000006;
  *(_QWORD *)(a1 + 328) = a2;
  *(_QWORD *)(a1 + 336) = &unk_1E25C8150;
  *(_OWORD *)(a1 + 344) = xmmword_18D319950;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 424) = 0x100000006;
  *(_QWORD *)(a1 + 400) = &unk_1E25C8150;
  *(_OWORD *)(a1 + 408) = xmmword_18D319950;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  sub_18D053D7C(a1 + 336, a3);
  sub_18D053D7C(a1 + 400, a4);
  v7 = *(unsigned int *)(a1 + 352);
  v8 = *(unsigned int *)(a1 + 416);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(a2 + 20);
    v12 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v13 = *(int **)(a1 + 368);
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 432) + 4 * v10) * v11;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v9;
        v17 = v7;
        do
        {
          v18 = *v13++;
          *(_QWORD *)(v15 + 8 * v16++) = *(_QWORD *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18D1CDE44(_QWORD *a1)
{
  a1[50] = &unk_1E25C5EA0;
  a1[42] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CDE7C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int v7;
  const char *v8;
  int v9;

  *(_QWORD *)(result + 24) = 0x100000002;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E25C7550;
  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = v2;
  v4 = (v2 * v3);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v3;
  v5 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v8 = "this->max_num_rows_ >= A.NumRows()";
    v9 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v8 = "this->max_num_cols_ >= A.NumCols()";
    v9 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  if ((int)v4 >= 1)
  {
    v6 = *(int **)(a2 + 32);
    do
    {
      v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18D1CDF3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1CDF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)(a1 + 24) = 0x200000002;
  *(_OWORD *)(a1 + 8) = xmmword_18D319340;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C4F70;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 104) = 0x100000002;
  *(_QWORD *)(a1 + 80) = &unk_1E25C7550;
  *(_OWORD *)(a1 + 88) = xmmword_18D319330;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 152) = 0x100000002;
  *(_QWORD *)(a1 + 128) = &unk_1E25C7550;
  *(_OWORD *)(a1 + 136) = xmmword_18D319330;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  sub_18D053D7C(a1 + 80, a3);
  sub_18D053D7C(a1 + 128, a4);
  v7 = *(unsigned int *)(a1 + 96);
  v8 = *(unsigned int *)(a1 + 144);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(a2 + 20);
    v12 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v13 = *(int **)(a1 + 112);
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v10) * v11;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v9;
        v17 = v7;
        do
        {
          v18 = *v13++;
          *(_QWORD *)(v15 + 8 * v16++) = *(_QWORD *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18D1CE080(_QWORD *a1)
{
  a1[16] = &unk_1E25C5EA0;
  a1[10] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1CE0B8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CE0DC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CE0E8(uint64_t a1)
{
  char v1[4];

  sub_18D159878(a1, v1);
}

void sub_18D1CE108(_QWORD *a1)
{
  *a1 = &unk_1E25C5D50;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CE12C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CE138(uint64_t a1)
{
  char v1[2];

  sub_18D164F74(a1, v1);
}

void sub_18D1CE160(_QWORD *a1)
{
  *a1 = &unk_1E25C5E10;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CE184(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CE190(uint64_t a1)
{
  char v1[2];

  sub_18D164F74(a1, v1);
}

_QWORD *sub_18D1CE1B8(_QWORD *result)
{
  result[14] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1CE1DC(_QWORD *result)
{
  result[79] = &unk_1E25C5EA0;
  result[70] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1CE204@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a4 + 24) = 0x800000008;
  *(_QWORD *)a4 = &unk_1E25C87E0;
  *(_DWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 12) = v5;
  *(_DWORD *)(a4 + 16) = v5 * v4;
  *(_DWORD *)(a4 + 20) = v4;
  v6 = a4 + 40;
  *(_QWORD *)(a4 + 32) = a4 + 40;
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a3 + 32);
    do
    {
      if (v4)
      {
        v11 = 0;
        v12 = *(_DWORD *)(result + 20) * *(_DWORD *)(v10 + 4 * v8);
        v13 = *(_QWORD *)(result + 32);
        do
        {
          *(_QWORD *)(v6 + 8 * (v7 + v11)) = *(_QWORD *)(v13
                                                                       + 8
                                                                       * (*(_DWORD *)(v9 + 4 * v11) + v12));
          ++v11;
        }
        while (v4 != v11);
      }
      ++v8;
      v7 += v4;
    }
    while (v8 != v5);
  }
  return result;
}

uint64_t sub_18D1CE298@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t i;
  void *v11;
  int32x4_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD v15[8];

  if (strcmp(__s1, ":"))
    __assert_rtn("operator()", "cnmatrix.h", 1194, "strcmp(c, \":\") == 0");
  v7 = *(unsigned int *)(a2 + 12);
  v13 = 0x100000008;
  v11 = &unk_1E25C86F0;
  if ((v7 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v8 = vdupq_lane_s32((int32x2_t)(v7 | 0x100000000), 0);
  v8.i32[1] = 1;
  v12 = v8;
  v14 = v15;
  if ((_DWORD)v7)
  {
    for (i = 0; i != v7; ++i)
      v15[i] = i;
  }
  return sub_18D053C48(a4, a2, a3, (uint64_t)&v11);
}

_QWORD *sub_18D1CE394(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1CE3A8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1CE3BC(_QWORD *result)
{
  uint64_t i;

  for (i = 74; i != -64; i -= 69)
    result[i] = &unk_1E25C5E70;
  *result = &unk_1E25C5B10;
  return result;
}

_QWORD *sub_18D1CE3F0(_QWORD *result)
{
  uint64_t i;

  for (i = 18; i != -8; i -= 13)
    result[i] = &unk_1E25C5E70;
  *result = &unk_1E25C5AE0;
  return result;
}

uint64_t sub_18D1CE424(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int32x2_t v11;
  int32x4_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int i;
  unint64_t v21;
  int v22;

  if (a2 == 1)
  {
    v3 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v3;
    *(_DWORD *)(a3 + 16) = v3;
    *(_DWORD *)(a3 + 20) = 1;
    if (*(_DWORD *)(result + 12))
    {
      v4 = 0;
      v5 = *(_QWORD *)(result + 32);
      v6 = *(_QWORD *)(a3 + 32);
      do
      {
        v7 = *(unsigned int *)(result + 8);
        v8 = *(_DWORD *)(v5 + 4 * (v7 * v4));
        if (v7 >= 2)
        {
          v9 = v7 - 1;
          v10 = v7 * v4 + 1;
          do
          {
            v8 += *(_DWORD *)(v5 + 4 * v10++);
            --v9;
          }
          while (v9);
        }
        *(_DWORD *)(v6 + 4 * v4++) = v8;
      }
      while (v4 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v11.i32[1] = 1;
    v11.i32[0] = *(_DWORD *)(result + 8);
    v12 = vdupq_lane_s32(v11, 0);
    v12.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v12;
    if (*(_DWORD *)(result + 8))
    {
      v13 = 0;
      v14 = *(_QWORD *)(result + 32);
      v15 = *(_QWORD *)(a3 + 32);
      do
      {
        *(_DWORD *)(v15 + 4 * v13) = *(_DWORD *)(v14 + 4 * v13);
        ++v13;
        v16 = *(unsigned int *)(result + 8);
      }
      while (v13 < v16);
    }
    else
    {
      LODWORD(v16) = 0;
    }
    v17 = *(_DWORD *)(result + 12);
    if (v17 >= 2)
    {
      v18 = *(_QWORD *)(result + 32);
      v19 = *(_QWORD *)(a3 + 32);
      for (i = 1; i < v17; ++i)
      {
        if ((_DWORD)v16)
        {
          v21 = 0;
          v22 = v16 * i;
          do
          {
            *(_DWORD *)(v19 + 4 * v21) += *(_DWORD *)(v18 + 4 * (v22 + v21));
            ++v21;
            v16 = *(unsigned int *)(result + 8);
          }
          while (v21 < v16);
          v17 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

void sub_18D1CE548(_QWORD *a1)
{
  uint64_t i;

  for (i = 18; i != -8; i -= 13)
    a1[i] = &unk_1E25C5E70;
  *a1 = &unk_1E25C5AE0;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1CE58C(uint64_t a1)
{
  char v1[2];

  sub_18D1CE5B4(a1, v1);
}

void sub_18D1CE5B4(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE v13[104];
  _BYTE v14[104];

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = v4 + v2 - v6;
        v9 = (v7 - 1);
        v10 = 1;
        do
        {
          sub_18D054198((uint64_t)v14, *(_QWORD *)(a1 + 32) + 104 * v10);
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = v10;
            do
            {
              v12 = v12 * v8 % (int)v9;
              sub_18D054198((uint64_t)v13, *(_QWORD *)(a1 + 32) + 104 * v12);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + 104 * v12, (uint64_t)v14);
              *v11 = 1;
              sub_18D053AA8((uint64_t)v14, (uint64_t)v13);
              v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

void sub_18D1CE6B8(_QWORD *a1)
{
  uint64_t i;

  for (i = 74; i != -64; i -= 69)
    a1[i] = &unk_1E25C5E70;
  *a1 = &unk_1E25C5B10;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1CE6FC(uint64_t a1)
{
  char v1[2];

  sub_18D1CE724(a1, v1);
}

void sub_18D1CE724(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE v13[552];
  _BYTE v14[552];

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = v4 + v2 - v6;
        v9 = (v7 - 1);
        v10 = 1;
        do
        {
          sub_18D0549D0((uint64_t)v14, *(_QWORD *)(a1 + 32) + 552 * v10);
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = v10;
            do
            {
              v12 = v12 * v8 % (int)v9;
              sub_18D0549D0((uint64_t)v13, *(_QWORD *)(a1 + 32) + 552 * v12);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + 552 * v12, (uint64_t)v14);
              *v11 = 1;
              sub_18D053AA8((uint64_t)v14, (uint64_t)v13);
              v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

void sub_18D1CE828(_QWORD *a1)
{
  a1[14] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1CE85C(_QWORD *a1)
{
  a1[79] = &unk_1E25C5EA0;
  a1[70] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1CE894(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CE8B8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CE8C4(uint64_t a1)
{
  char v1[128];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1CE910(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1CE934(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1CE940(uint64_t a1)
{
  char v1[256];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

uint64_t sub_18D1CE994(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 104))
  {
    sub_18D053AA8(a1, a2);
  }
  else
  {
    sub_18D054198(a1, a2);
    *(_BYTE *)(a1 + 104) = 1;
  }
  return a1;
}

void sub_18D1CE9D8(_QWORD *a1)
{
  _QWORD *v2;
  void *p_p;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  void *v90;
  uint64_t v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  void *__p;
  uint64_t v96;
  unsigned __int8 v97;

  sub_18D0778AC(&__p, "\n");
  v2 = sub_18D076A18(a1, (uint64_t)"                                 Innovation Test Code Information", 65);
  if ((v97 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v97 & 0x80u) == 0)
    v4 = v97;
  else
    v4 = v96;
  sub_18D076A18(v2, (uint64_t)p_p, v4);
  v5 = sub_18D076A18(a1, (uint64_t)"            Format: Result-Reason, {low-P(LOS) reason -> lower case}, {high-P(LOS) reason -> upper case}", 104);
  if ((v97 & 0x80u) == 0)
    v6 = &__p;
  else
    v6 = __p;
  if ((v97 & 0x80u) == 0)
    v7 = v97;
  else
    v7 = v96;
  v8 = sub_18D076A18(v5, (uint64_t)v6, v7);
  v9 = sub_18D076A18(v8, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0)
    v10 = &__p;
  else
    v10 = __p;
  if ((v97 & 0x80u) == 0)
    v11 = v97;
  else
    v11 = v96;
  v12 = sub_18D076A18(v9, (uint64_t)v10, v11);
  v13 = sub_18D076A18(v12, (uint64_t)"| Innovation Test Code  |                          Reason                                                                    |", 126);
  if ((v97 & 0x80u) == 0)
    v14 = &__p;
  else
    v14 = __p;
  if ((v97 & 0x80u) == 0)
    v15 = v97;
  else
    v15 = v96;
  v16 = sub_18D076A18(v13, (uint64_t)v14, v15);
  v17 = sub_18D076A18(v16, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0)
    v18 = &__p;
  else
    v18 = __p;
  if ((v97 & 0x80u) == 0)
    v19 = v97;
  else
    v19 = v96;
  v20 = sub_18D076A18(v17, (uint64_t)v18, v19);
  v21 = sub_18D076A18(v20, (uint64_t)"|        Unk            |  Unknown test result                                                                               |", 126);
  if ((v97 & 0x80u) == 0)
    v22 = &__p;
  else
    v22 = __p;
  if ((v97 & 0x80u) == 0)
    v23 = v97;
  else
    v23 = v96;
  v24 = sub_18D076A18(v21, (uint64_t)v22, v23);
  v25 = sub_18D076A18(v24, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0)
    v26 = &__p;
  else
    v26 = __p;
  if ((v97 & 0x80u) == 0)
    v27 = v97;
  else
    v27 = v96;
  v28 = sub_18D076A18(v25, (uint64_t)v26, v27);
  v29 = sub_18D076A18(v28, (uint64_t)"|        Err            |  Error in innovation test                                                                          |", 126);
  if ((v97 & 0x80u) == 0)
    v30 = &__p;
  else
    v30 = __p;
  if ((v97 & 0x80u) == 0)
    v31 = v97;
  else
    v31 = v96;
  v32 = sub_18D076A18(v29, (uint64_t)v30, v31);
  v33 = sub_18D076A18(v32, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0)
    v34 = &__p;
  else
    v34 = __p;
  if ((v97 & 0x80u) == 0)
    v35 = v97;
  else
    v35 = v96;
  v36 = sub_18D076A18(v33, (uint64_t)v34, v35);
  v37 = sub_18D076A18(v36, (uint64_t)"|        I-P            |  Ignored measurement due to low [P]robability of being LOS                                         |", 126);
  if ((v97 & 0x80u) == 0)
    v38 = &__p;
  else
    v38 = __p;
  if ((v97 & 0x80u) == 0)
    v39 = v97;
  else
    v39 = v96;
  v40 = sub_18D076A18(v37, (uint64_t)v38, v39);
  v41 = sub_18D076A18(v40, (uint64_t)"|        I-D            |  Ignored measurement due to [D]ependency check                                                     |", 126);
  if ((v97 & 0x80u) == 0)
    v42 = &__p;
  else
    v42 = __p;
  if ((v97 & 0x80u) == 0)
    v43 = v97;
  else
    v43 = v96;
  v44 = sub_18D076A18(v41, (uint64_t)v42, v43);
  v45 = sub_18D076A18(v44, (uint64_t)"|        I-5            |  Ignored measurement by L1 vs L[5] post filter logic                                               |", 126);
  if ((v97 & 0x80u) == 0)
    v46 = &__p;
  else
    v46 = __p;
  if ((v97 & 0x80u) == 0)
    v47 = v97;
  else
    v47 = v96;
  v48 = sub_18D076A18(v45, (uint64_t)v46, v47);
  v49 = sub_18D076A18(v48, (uint64_t)"|        I-i            |  Ignored because the low-P(LOS) measurement had a high [i]nnovation magnitude                      |", 126);
  if ((v97 & 0x80u) == 0)
    v50 = &__p;
  else
    v50 = __p;
  if ((v97 & 0x80u) == 0)
    v51 = v97;
  else
    v51 = v96;
  v52 = sub_18D076A18(v49, (uint64_t)v50, v51);
  v53 = sub_18D076A18(v52, (uint64_t)"|        I-r            |  Ignored because the low-P(LOS) measurement had a normalized innovation test result of [r]eject    |", 126);
  if ((v97 & 0x80u) == 0)
    v54 = &__p;
  else
    v54 = __p;
  if ((v97 & 0x80u) == 0)
    v55 = v97;
  else
    v55 = v96;
  v56 = sub_18D076A18(v53, (uint64_t)v54, v55);
  v57 = sub_18D076A18(v56, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0)
    v58 = &__p;
  else
    v58 = __p;
  if ((v97 & 0x80u) == 0)
    v59 = v97;
  else
    v59 = v96;
  v60 = sub_18D076A18(v57, (uint64_t)v58, v59);
  v61 = sub_18D076A18(v60, (uint64_t)"|        R-I            |  Rejected measurement because the [I]nnovation test result was a Reject                            |", 126);
  if ((v97 & 0x80u) == 0)
    v62 = &__p;
  else
    v62 = __p;
  if ((v97 & 0x80u) == 0)
    v63 = v97;
  else
    v63 = v96;
  v64 = sub_18D076A18(v61, (uint64_t)v62, v63);
  v65 = sub_18D076A18(v64, (uint64_t)"|        R-5            |  Rejected measurement by L1 vs L[5] post filter logic                                              |", 126);
  if ((v97 & 0x80u) == 0)
    v66 = &__p;
  else
    v66 = __p;
  if ((v97 & 0x80u) == 0)
    v67 = v97;
  else
    v67 = v96;
  v68 = sub_18D076A18(v65, (uint64_t)v66, v67);
  v69 = sub_18D076A18(v68, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0)
    v70 = &__p;
  else
    v70 = __p;
  if ((v97 & 0x80u) == 0)
    v71 = v97;
  else
    v71 = v96;
  v72 = sub_18D076A18(v69, (uint64_t)v70, v71);
  v73 = sub_18D076A18(v72, (uint64_t)"|        W-I            |  Reweighted measurement because the [I]nnovation test result was a Reweight                        |", 126);
  if ((v97 & 0x80u) == 0)
    v74 = &__p;
  else
    v74 = __p;
  if ((v97 & 0x80u) == 0)
    v75 = v97;
  else
    v75 = v96;
  v76 = sub_18D076A18(v73, (uint64_t)v74, v75);
  v77 = sub_18D076A18(v76, (uint64_t)"|        W-u            |  Reweighted low-P(LOS) measurement because the innovation test result was [u]se as is              |", 126);
  if ((v97 & 0x80u) == 0)
    v78 = &__p;
  else
    v78 = __p;
  if ((v97 & 0x80u) == 0)
    v79 = v97;
  else
    v79 = v96;
  v80 = sub_18D076A18(v77, (uint64_t)v78, v79);
  v81 = sub_18D076A18(v80, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0)
    v82 = &__p;
  else
    v82 = __p;
  if ((v97 & 0x80u) == 0)
    v83 = v97;
  else
    v83 = v96;
  v84 = sub_18D076A18(v81, (uint64_t)v82, v83);
  v85 = sub_18D076A18(v84, (uint64_t)"|         *             |  Use the measurement as is with the given measurement uncertainty                                  |", 126);
  if ((v97 & 0x80u) == 0)
    v86 = &__p;
  else
    v86 = __p;
  if ((v97 & 0x80u) == 0)
    v87 = v97;
  else
    v87 = v96;
  v88 = sub_18D076A18(v85, (uint64_t)v86, v87);
  v89 = sub_18D076A18(v88, (uint64_t)"----------------------------------------------------------------------------------------------------------------------------- ", 126);
  if ((v97 & 0x80u) == 0)
    v90 = &__p;
  else
    v90 = __p;
  if ((v97 & 0x80u) == 0)
    v91 = v97;
  else
    v91 = v96;
  v92 = sub_18D076A18(v89, (uint64_t)v90, v91);
  if ((v97 & 0x80u) == 0)
    v93 = &__p;
  else
    v93 = __p;
  if ((v97 & 0x80u) == 0)
    v94 = v97;
  else
    v94 = v96;
  sub_18D076A18(v92, (uint64_t)v93, v94);
  if ((char)v97 < 0)
    operator delete(__p);
}

void sub_18D1CEE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D1CEEAC(uint64_t a1@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x800000008;
  *(_QWORD *)a3 = &unk_1E25C87E0;
  *(_OWORD *)(a3 + 8) = xmmword_18D319930;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D05C654(a1, a3, a2);
}

void sub_18D1CEF00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D1CEF14(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x100000013;
  *(_QWORD *)(a1 + 24) = 0x100000013;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C66B0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1CF034(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1CF048(uint64_t a1, __int128 *a2, __int128 *a3)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v6 = sub_18D1C7988((_QWORD *)a1, 18);
  if (*((char *)a2 + 23) < 0)
  {
    sub_18D077798((_BYTE *)v6 + 56, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    v6[9] = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v6 + 7) = v7;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  v11 = a2[7];
  v12 = a2[8];
  v13 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  v14 = a2[11];
  v15 = a2[12];
  v16 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  v17 = (_BYTE *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18D077798(v17, *((void **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v18 = *(__int128 *)((char *)a2 + 248);
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 33);
    *(_OWORD *)v17 = v18;
  }
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 34);
  v19 = *(__int128 *)((char *)a2 + 280);
  v20 = *(__int128 *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v20;
  *(_OWORD *)(a1 + 336) = v19;
  v21 = *(__int128 *)((char *)a2 + 328);
  v22 = *(__int128 *)((char *)a2 + 344);
  v23 = *(__int128 *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v23;
  *(_OWORD *)(a1 + 384) = v21;
  *(_OWORD *)(a1 + 400) = v22;
  v24 = *(__int128 *)((char *)a2 + 392);
  v25 = *(__int128 *)((char *)a2 + 408);
  v26 = *(__int128 *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(__int128 *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v26;
  *(_OWORD *)(a1 + 448) = v24;
  *(_OWORD *)(a1 + 464) = v25;
  v27 = *a3;
  v28 = a3[1];
  *(_QWORD *)(a1 + 544) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 512) = v27;
  *(_OWORD *)(a1 + 528) = v28;
  *(_QWORD *)a1 = off_1E25C2FF8;
  *(_OWORD *)(a1 + 552) = 0u;
  return a1;
}

void sub_18D1CF1B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)(v1 + 296) = off_1E25B93B0;
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &unk_1E25B8EE0;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

_BYTE *sub_18D1CF20C(void (**a1)(int a1), uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _BYTE *result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = operator new(0x238uLL);
  v5 = v4;
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  v4[2] = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798((_BYTE *)v4 + 16, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)v5 = &unk_1E25C30E0;
  *(_OWORD *)(v5 + 10) = *(_OWORD *)(a2 + 40);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18D077798((_BYTE *)v5 + 56, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v5 + 14) = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v5 + 9) = *(_QWORD *)(a2 + 72);
  }
  *((_QWORD *)v5 + 10) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 58) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 62) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 42) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 46) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 50) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 54) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 26) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 30) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 34) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 38) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 66) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 70) = v6;
  *((_QWORD *)v5 + 37) = &unk_1E25B9850;
  result = v5 + 76;
  if (*(char *)(a2 + 327) < 0)
  {
    result = sub_18D077798(result, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 304);
    *((_QWORD *)v5 + 40) = *(_QWORD *)(a2 + 320);
  }
  *((_QWORD *)v5 + 41) = *(_QWORD *)(a2 + 328);
  v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  v13 = *(_OWORD *)(a2 + 512);
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  *((_OWORD *)v5 + 32) = v13;
  v14 = *(_OWORD *)(a2 + 528);
  *((_QWORD *)v5 + 68) = *(_QWORD *)(a2 + 544);
  *((_OWORD *)v5 + 33) = v14;
  *(_QWORD *)v5 = off_1E25C2FF8;
  *((_QWORD *)v5 + 69) = *(_QWORD *)(a2 + 552);
  v15 = *(_QWORD *)(a2 + 560);
  *((_QWORD *)v5 + 70) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *a1 = sub_18D1CF468;
  a1[1] = (void (*)(int))v5;
  return result;
}

void sub_18D1CF40C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  uint64_t v4;

  v1[37] = off_1E25B93B0;
  if (*((char *)v1 + 79) < 0)
    operator delete(*v3);
  *v1 = v4 + 16;
  if (*((char *)v1 + 39) < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1CF468(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1CF49C()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D1CF530(uint64_t a1, __int128 *a2, __int128 *a3)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v6 = sub_18D1C7988((_QWORD *)a1, 17);
  if (*((char *)a2 + 23) < 0)
  {
    sub_18D077798((_BYTE *)v6 + 56, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    v6[9] = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v6 + 7) = v7;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  v11 = a2[7];
  v12 = a2[8];
  v13 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  v14 = a2[11];
  v15 = a2[12];
  v16 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  v17 = (_BYTE *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18D077798(v17, *((void **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v18 = *(__int128 *)((char *)a2 + 248);
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 33);
    *(_OWORD *)v17 = v18;
  }
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 34);
  v19 = *(__int128 *)((char *)a2 + 280);
  v20 = *(__int128 *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v20;
  *(_OWORD *)(a1 + 336) = v19;
  v21 = *(__int128 *)((char *)a2 + 328);
  v22 = *(__int128 *)((char *)a2 + 344);
  v23 = *(__int128 *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v23;
  *(_OWORD *)(a1 + 384) = v21;
  *(_OWORD *)(a1 + 400) = v22;
  v24 = *(__int128 *)((char *)a2 + 392);
  v25 = *(__int128 *)((char *)a2 + 408);
  v26 = *(__int128 *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(__int128 *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v26;
  *(_OWORD *)(a1 + 448) = v24;
  *(_OWORD *)(a1 + 464) = v25;
  v27 = *a3;
  v28 = a3[1];
  *(_QWORD *)(a1 + 544) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 512) = v27;
  *(_OWORD *)(a1 + 528) = v28;
  *(_QWORD *)a1 = off_1E25C3570;
  return a1;
}

void sub_18D1CF694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)(v1 + 296) = off_1E25B93B0;
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &unk_1E25B8EE0;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void sub_18D1CF6E8(uint64_t a1)
{
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1CF778(void (**a1)(int a1), uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;

  v4 = operator new(0x228uLL);
  v5 = v4;
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  v4[2] = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798((_BYTE *)v4 + 16, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)v5 = &unk_1E25C30E0;
  *(_OWORD *)(v5 + 10) = *(_OWORD *)(a2 + 40);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18D077798((_BYTE *)v5 + 56, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v5 + 14) = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v5 + 9) = *(_QWORD *)(a2 + 72);
  }
  *((_QWORD *)v5 + 10) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 58) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 62) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 42) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 46) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 50) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 54) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 26) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 30) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 34) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 38) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 66) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 70) = v6;
  *((_QWORD *)v5 + 37) = &unk_1E25B9850;
  v7 = v5 + 76;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18D077798(v7, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)(a2 + 304);
    *((_QWORD *)v5 + 40) = *(_QWORD *)(a2 + 320);
  }
  *((_QWORD *)v5 + 41) = *(_QWORD *)(a2 + 328);
  v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  v13 = *(_OWORD *)(a2 + 512);
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  *((_OWORD *)v5 + 32) = v13;
  result = *(__n128 *)(a2 + 528);
  *((__n128 *)v5 + 33) = result;
  *((_QWORD *)v5 + 68) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)v5 = off_1E25C3570;
  *a1 = sub_18D1CF9AC;
  a1[1] = (void (*)(int))v5;
  return result;
}

void sub_18D1CF950(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  uint64_t v4;

  v1[37] = off_1E25B93B0;
  if (*((char *)v1 + 79) < 0)
    operator delete(*v3);
  *v1 = v4 + 16;
  if (*((char *)v1 + 39) < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1CF9AC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1CF9E0()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

void sub_18D1CFA74(uint64_t a1)
{
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

uint64_t *sub_18D1CFB04(_QWORD *a1, double *a2, int a3, int8x16_t a4, int8x16_t a5)
{
  _QWORD **v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  double v16;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  double *v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD v44[73];
  _QWORD v45[5];
  uint64_t v46;
  char v47;
  uint64_t v48;
  double v49;

  v6 = (_QWORD **)*a1;
  if (!a3)
    goto LABEL_34;
  v9 = (uint64_t *)(v6 + 1);
  v8 = *v6;
  if (*v6 == v6 + 1)
    goto LABEL_28;
LABEL_3:
  v10 = v8;
  v11 = (uint64_t)(v8 + 4);
  while (1)
  {
    v12 = (uint64_t *)v8[1];
    v13 = v8;
    if (v12)
    {
      do
      {
        v8 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v8 = (uint64_t *)v13[2];
        v14 = *v8 == (_QWORD)v13;
        v13 = v8;
      }
      while (!v14);
    }
    if (v8 == v9)
      break;
    v15 = CNTimeSpan::operator-((uint64_t)(v8 + 4), a2, a4, a5);
    *(_QWORD *)&v38 = v15;
    *((double *)&v38 + 1) = v16;
    if (v15 < 0 || (v19 = v16, v16 < 0.0))
    {
      v20 = CNTimeSpan::operator-((double *)&v38, v17, v18);
      v19 = v21;
    }
    else
    {
      v20 = v15;
    }
    v22 = CNTimeSpan::operator-(v11, a2, v17, v18);
    v48 = v22;
    v49 = v23;
    if (v22 < 0 || (*(double *)a4.i64 = v23, v23 < 0.0))
    {
      v22 = CNTimeSpan::operator-((double *)&v48, a4, a5);
      a4.i64[0] = v24;
      if (v20)
        goto LABEL_20;
    }
    else if (v20)
    {
      goto LABEL_20;
    }
    if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_23:
      if (v19 < *(double *)a4.i64)
        goto LABEL_3;
    }
    else
    {
LABEL_20:
      if (!v22 && (a4.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v20 == v22)
        goto LABEL_23;
      if (v20 < v22)
        goto LABEL_3;
    }
  }
  v8 = v10;
LABEL_28:
  if (v9 == v8)
  {
LABEL_34:
    bzero(&v38, 0x398uLL);
    v41 = 0x10000001CLL;
    v39 = &unk_1E25C72B0;
    v40 = xmmword_18D319780;
    v42 = &v43;
    v44[0] = 0x7FF8000000000000;
    *(int64x2_t *)&v44[1] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v44[3] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[5] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[7] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[9] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[11] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[13] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[15] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[17] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[19] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[21] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[23] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[25] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[27] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[29] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[31] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[33] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[35] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[37] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[39] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[41] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[43] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[45] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[47] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[49] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[51] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[53] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[55] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[57] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[59] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[61] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[63] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[65] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[67] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[69] = *(_OWORD *)&v44[1];
    *(_OWORD *)&v44[71] = 0u;
    sub_18D1C99C8((uint64_t)v45);
    v47 = 0;
    v30 = v6 + 1;
    v29 = v6[1];
    if (v29)
    {
      while (1)
      {
        while (1)
        {
          v31 = (uint64_t **)v29;
          v32 = (double *)(v29 + 4);
          if (!sub_18D03FE4C(a2, (double *)v29 + 4))
            break;
          v29 = *v31;
          v30 = v31;
          if (!*v31)
            goto LABEL_42;
        }
        if (!sub_18D03FE4C(v32, a2))
          break;
        v30 = v31 + 1;
        v29 = v31[1];
        if (!v29)
          goto LABEL_42;
      }
      v8 = *v30;
      if (*v30)
        goto LABEL_45;
    }
    else
    {
      v31 = v6 + 1;
    }
LABEL_42:
    v8 = (uint64_t *)operator new(0x3C8uLL);
    v33 = v38;
    *((_OWORD *)v8 + 2) = *(_OWORD *)a2;
    *((_OWORD *)v8 + 3) = v33;
    sub_18D1D8C14((uint64_t)(v8 + 8), (uint64_t)&v39);
    memcpy(v8 + 41, v44, 0x248uLL);
    sub_18D1C9844((uint64_t)(v8 + 114), (uint64_t)v45);
    *((_BYTE *)v8 + 960) = v47;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v31;
    *v30 = v8;
    v34 = (_QWORD *)**v6;
    v35 = v8;
    if (v34)
    {
      *v6 = v34;
      v35 = *v30;
    }
    sub_18D083D78(v6[1], v35);
    v6[2] = (_QWORD *)((char *)v6[2] + 1);
LABEL_45:
    v45[0] = &unk_1E25C7160;
    v36 = v46;
    v46 = 0;
    if (v36)
      MEMORY[0x18D78B5BC](v36, 0x1000C8000313F17);
    return v8;
  }
  v25 = CNTimeSpan::operator-((uint64_t)(v8 + 4), a2, a4, a5);
  v48 = v25;
  v49 = v26;
  if (v25 < 0 || (*(double *)v27.i64 = v26, v26 < 0.0))
    v25 = CNTimeSpan::operator-((double *)&v48, v27, v28);
  *(_QWORD *)&v38 = v25;
  *((double *)&v38 + 1) = v26;
  if (!sub_18D03FE4C((double *)&v38, (double *)&qword_1ECF23208))
  {
    v6 = (_QWORD **)*a1;
    goto LABEL_34;
  }
  return v8;
}

void sub_18D1CFF4C(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  unint64_t v4;

  *v2 = &unk_1E25C5E70;
  operator delete(v1);
  STACK[0x368] = (unint64_t)&unk_1E25C7160;
  v4 = STACK[0x390];
  STACK[0x390] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1CFFB0(uint64_t *a1, uint64_t a2, double *a3, float64x2_t *a4, uint64_t a5, double a6, int8x16_t a7)
{
  uint64_t v7;
  float64x2_t *v8;
  double *v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t v12;
  int8x16_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  double v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  double *v53;
  __n128 v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  int v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t i;
  uint64_t j;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _BYTE v87[264];
  __int128 v88;
  _BYTE v89[24];
  uint64_t v90;
  double *v91;
  _QWORD v92[46];
  uint64_t (**v93)();
  uint64_t v94;
  uint64_t v95[5];
  uint64_t v96;
  uint64_t (**v97)();
  __int128 v98;
  uint64_t v99;
  double *v100;
  _BYTE v101[208];
  uint64_t (**v102)();
  __int128 v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD v107[4];
  __int128 v108;
  uint64_t (**v109)();
  __int128 v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD v113[28];
  char v114;
  void *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  BOOL v120;
  _OWORD __src[36];
  void *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  void *v127;
  __int128 v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;

  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = (__int128 *)a2;
  v11 = a1;
  if (*(_BYTE *)(a5 + 912))
    goto LABEL_2;
  v30 = a1[1];
  v88 = *(_OWORD *)*(_QWORD *)(v30 + 520);
  sub_18D1D6E1C((uint64_t)v87, *(_QWORD *)(v30 + 528));
  v31 = v11[1];
  v84 = *v11;
  v85 = v11;
  v32 = *(_QWORD *)(v31 + 512);
  v33 = *(_QWORD *)(v31 + 560);
  v34 = **(unsigned __int8 **)(v31 + 536);
  v35 = v31 + 88;
  v36 = *(_QWORD *)(v31 + 544);
  *((_QWORD *)&__src[1] + 1) = 0x10000001CLL;
  *(_QWORD *)&__src[0] = &unk_1E25C72B0;
  *(_QWORD *)&__src[2] = (char *)&__src[2] + 8;
  *(_OWORD *)((char *)__src + 8) = xmmword_18D319780;
  sub_18D04BE88((uint64_t)__src, 0.0);
  sub_18D053AA8(v7 + 16, (uint64_t)__src);
  v129 = 0x10000001CLL;
  v127 = &unk_1E25C72B0;
  v130 = &v131;
  v128 = xmmword_18D319780;
  sub_18D04BE88((uint64_t)&v127, 0.0);
  v37 = (_QWORD *)v35;
  if (sub_18D1D0D6C(v35, &v88, (uint64_t)v87, v32, v36, v34, 1, 0, (uint64_t)&v127))
    goto LABEL_6;
  v79 = v7 + 16;
  v80 = v7;
  v124 = 0x10000001CLL;
  v122 = &unk_1E25C72B0;
  v125 = &v126;
  v123 = xmmword_18D319780;
  sub_18D04BE88((uint64_t)&v122, 0.0);
  __src[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  __src[1] = __src[0];
  __src[2] = __src[0];
  __src[3] = __src[0];
  __src[4] = __src[0];
  __src[5] = __src[0];
  __src[6] = __src[0];
  __src[7] = __src[0];
  __src[8] = __src[0];
  __src[9] = __src[0];
  __src[10] = __src[0];
  __src[11] = __src[0];
  __src[12] = __src[0];
  __src[13] = __src[0];
  __src[14] = __src[0];
  __src[15] = __src[0];
  __src[16] = __src[0];
  __src[17] = __src[0];
  __src[18] = __src[0];
  __src[19] = __src[0];
  __src[20] = __src[0];
  __src[21] = __src[0];
  __src[22] = __src[0];
  __src[23] = __src[0];
  __src[24] = __src[0];
  __src[25] = __src[0];
  __src[26] = __src[0];
  __src[27] = __src[0];
  __src[28] = __src[0];
  __src[29] = __src[0];
  __src[30] = __src[0];
  __src[31] = __src[0];
  __src[32] = __src[0];
  __src[33] = __src[0];
  __src[34] = __src[0];
  *(_QWORD *)&__src[35] = 0x7FF8000000000000;
  v120 = 0;
  if (sub_18D1C9BF4((uint64_t)&v127, v84, 0, 1, 0, (uint64_t)&v122, (uint64_t)__src, &v120, 0.000000015))
    goto LABEL_6;
  v10 = (__int128 *)a2;
  v46 = CNTimeSpan::operator-(a2, v37, v43, v44);
  if (fabs(v47 + (double)v46) <= 0.000000015)
  {
    v48 = v37;
    sub_18D053AA8(v79, (uint64_t)&v122);
    memcpy((void *)(v7 + 280), __src, 0x238uLL);
    v8 = a4;
    v9 = a3;
    v11 = v85;
  }
  else
  {
    v117 = 0x10000001CLL;
    v115 = &unk_1E25C72B0;
    v118 = &v119;
    v116 = xmmword_18D319780;
    sub_18D04BE88((uint64_t)&v115, 0.0);
    if (sub_18D1D0D6C(a2, &v88, (uint64_t)v87, v32, v36, v34, 1, 0, (uint64_t)&v115))
      goto LABEL_6;
    v48 = v37;
    sub_18D1D6A24((uint64_t)&v114, v84);
    v50 = 26;
    sub_18D1C96FC((uint64_t)v89, 26, 26);
    *(_OWORD *)&v89[8] = xmmword_18D319890;
    sub_18D04BE88((uint64_t)v89, 0.0);
    v51 = 0;
    v52 = *(_DWORD *)&v89[20] + 1;
    v53 = v91;
    do
    {
      v53[v51] = 1.0;
      v51 += v52;
      --v50;
    }
    while (v50);
    v86 = v7 + 864;
    v49 = v7 + 864;
    v54 = sub_18D053AA8(v7 + 864, (uint64_t)v89);
    v55 = v92[0];
    *(_QWORD *)v89 = &unk_1E25C7160;
    v92[0] = 0;
    if (v55)
      MEMORY[0x18D78B5BC](v55, 0x1000C8000313F17, v54);
    v56 = atomic_load((unsigned __int8 *)&qword_1ECF23140);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23140))
    {
      v90 = 0x1300000001;
      *(_QWORD *)v89 = &off_1E25C6830;
      v91 = (double *)v92;
      *(_OWORD *)&v89[8] = xmmword_18D319900;
      for (i = 10; i != 29; ++i)
        *(_DWORD *)&v89[4 * i] = i - 10;
      sub_18D1B9FA8((uint64_t)&unk_1ECF23A58, (uint64_t)v89);
      __cxa_atexit((void (*)(void *))sub_18D1BE790, &unk_1ECF23A58, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF23140);
      v10 = (__int128 *)a2;
    }
    v78 = v7 + 280;
    sub_18D1D86F8((uint64_t)v89, (uint64_t)&v122, (uint64_t)&unk_1ECF23A58);
    sub_18D1D6E1C((uint64_t)&v109, (uint64_t)v89);
    v107[0] = v33;
    v107[1] = v37;
    v107[2] = &v109;
    v107[3] = v36;
    v108 = *v10;
    v57 = atomic_load((unsigned __int8 *)&qword_1ECF23148);
    if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23148))
    {
      v90 = 0x1A00000001;
      *(_QWORD *)v89 = &off_1E25C6B60;
      v91 = (double *)v92;
      *(_OWORD *)&v89[8] = xmmword_18D3198D0;
      for (j = 10; j != 28; ++j)
        *(_DWORD *)&v89[4 * j] = j - 10;
      sub_18D1B741C((uint64_t)&unk_1ECF23E00, (uint64_t)v89);
      __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1ECF23E00, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF23148);
      v10 = (__int128 *)a2;
    }
    v104 = 0x100000017;
    v102 = &off_1E25C6F20;
    v105 = &v106;
    v103 = xmmword_18D3198E0;
    sub_18D04BE88((uint64_t)&v102, 0.0);
    v99 = 0x10000001ALL;
    v97 = (uint64_t (**)())&unk_1E25C70A0;
    v98 = xmmword_18D319790;
    v100 = (double *)v101;
    sub_18D1C99C8((uint64_t)v95);
    sub_18D1CBE44((uint64_t)&v93);
    sub_18D1B63F0((uint64_t)v89, *(_QWORD *)(v84 + 32), (uint64_t)&unk_1ECF23E00);
    v58 = sub_18D1BB3E0((uint64_t)v89, (uint64_t)&v102);
    if (!v58)
    {
      sub_18D1D1680((uint64_t)v89, (uint64_t)&v114, (uint64_t)&unk_1ECF23E00);
      sub_18D1D1080((uint64_t)v89, SDWORD2(v98), v100);
      sub_18D1D1778((uint64_t)v89, v49, (uint64_t)&unk_1ECF23E00, (uint64_t)&unk_1ECF23E00);
      sub_18D1D1114((uint64_t)v89, (uint64_t)v95);
      v92[20] = &unk_1E25C5EA0;
      v92[2] = &unk_1E25C5EA0;
      v61 = v92[0];
      *(_QWORD *)v89 = &unk_1E25C7160;
      v92[0] = 0;
      if (v61)
        MEMORY[0x18D78B5BC](v61, 0x1000C8000313F17);
    }
    v62 = v94;
    v93 = &off_1E25C7130;
    v94 = 0;
    if (v62)
      MEMORY[0x18D78B5BC](v62, 0x1000C8000313F17);
    v63 = v96;
    v95[0] = (uint64_t)&unk_1E25C7160;
    v96 = 0;
    if (v63)
      MEMORY[0x18D78B5BC](v63, 0x1000C8000313F17);
    if (v58)
      goto LABEL_6;
    v64 = CNTimeSpan::operator-((uint64_t)v10, v37, v59, v60);
    *(double *)v95 = v65 + (double)v64;
    v99 = 0x100000017;
    v97 = &off_1E25C6F20;
    v100 = (double *)v101;
    v98 = xmmword_18D319330;
    sub_18D04BE88((uint64_t)&v97, 0.0);
    v90 = 0x10000001ALL;
    *(_QWORD *)v89 = &unk_1E25C70A0;
    *(_OWORD *)&v89[8] = xmmword_18D319790;
    v91 = (double *)v92;
    sub_18D1C99C8((uint64_t)&v102);
    sub_18D1CBE44((uint64_t)v107);
    v66 = atomic_load((unsigned __int8 *)&qword_1ECF23150);
    if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23150))
    {
      v111 = 0x1A00000001;
      v109 = &off_1E25C6B60;
      v112 = v113;
      v110 = xmmword_18D319920;
      v113[0] = 0x1300000012;
      sub_18D1B741C((uint64_t)&unk_1ECF23E90, (uint64_t)&v109);
      __cxa_atexit((void (*)(void *))sub_18D1B6390, &unk_1ECF23E90, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF23150);
      v10 = (__int128 *)a2;
    }
    sub_18D1B63F0((uint64_t)&v109, *(_QWORD *)(v84 + 32), (uint64_t)&unk_1ECF23E90);
    if (sub_18D1BBCBC((uint64_t)&v109, (uint64_t)&v97, v95, (uint64_t)v89, (uint64_t)&v102, (uint64_t)v107, v67, v68))
    {
      v69 = *((_QWORD *)&v108 + 1);
      v107[0] = &off_1E25C7130;
      *((_QWORD *)&v108 + 1) = 0;
      if (v69)
        MEMORY[0x18D78B5BC](v69, 0x1000C8000313F17);
      v70 = v106;
      v102 = (uint64_t (**)())&unk_1E25C7160;
      v106 = 0;
      if (v70)
        MEMORY[0x18D78B5BC](v70, 0x1000C8000313F17);
LABEL_6:
      v11 = v85;
LABEL_7:
      v45 = v11[1];
      LOWORD(__src[0]) = 12;
      v89[0] = 4;
      v77 = *(double *)(v45 + 48) + (double)*(uint64_t *)(v45 + 40);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, v89, "time,%.3lf,h-function failure on line %d: %s() %s", v38, v39, v40, v41, v42, SLOBYTE(v77));
      return 0xFFFFFFFFLL;
    }
    v71 = atomic_load((unsigned __int8 *)&qword_1ECF23158);
    if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF23158))
    {
      v111 = 0x200000001;
      v109 = (uint64_t (**)())&unk_1E25C6BF0;
      v112 = v113;
      v110 = xmmword_18D319920;
      v113[0] = 0x1300000012;
      sub_18D1B82C8((uint64_t)&v109, (uint64_t)&unk_1ECF23278);
      __cxa_atexit((void (*)(void *))sub_18D1B8348, &unk_1ECF23278, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF23158);
      v10 = (__int128 *)a2;
    }
    sub_18D1CB1FC((uint64_t)&v109, (uint64_t)&v114, (uint64_t)&unk_1ECF23278);
    sub_18D1C9F68((uint64_t)&v109, *(int *)&v89[16], v91);
    v8 = a4;
    v9 = a3;
    sub_18D1CDF50((uint64_t)&v109, v86, (uint64_t)&unk_1ECF23278, (uint64_t)&unk_1ECF23278);
    sub_18D1CDB38((uint64_t)&v109, (uint64_t)&v102);
    v72 = *((_QWORD *)&v108 + 1);
    v107[0] = &off_1E25C7130;
    *((_QWORD *)&v108 + 1) = 0;
    if (v72)
      MEMORY[0x18D78B5BC](v72, 0x1000C8000313F17);
    v73 = v106;
    v102 = (uint64_t (**)())&unk_1E25C7160;
    v106 = 0;
    if (v73)
      MEMORY[0x18D78B5BC](v73, 0x1000C8000313F17);
    v89[0] = 0;
    v11 = v85;
    v7 = v80;
    if (sub_18D1C9BF4((uint64_t)&v115, (uint64_t)&v114, 0, 1, 0, v79, v78, v89, 0.000000015))
      goto LABEL_7;
  }
  *(_OWORD *)v7 = *v10;
  *(_OWORD *)(v7 + 848) = *v48;
  *(_BYTE *)(v7 + 912) = 1;
LABEL_2:
  v12 = *(_QWORD *)(v7 + 48);
  *(_OWORD *)v89 = *(_OWORD *)v12;
  v13.i64[1] = *(_QWORD *)&v89[8];
  *(_QWORD *)&v89[16] = *(_QWORD *)(v12 + 16);
  v13.i64[0] = *(_QWORD *)(v12 + 152);
  a7.i64[0] = 0x3EB0C6F7A0B5ED8DLL;
  *(double *)&v14 = *(double *)v13.i64 * 0.000001;
  v15 = v11[1];
  *(double *)v16.i64 = (double)CNTimeSpan::operator-((uint64_t)v10, (_QWORD *)(v15 + 88), v13, a7);
  *(double *)v18.i64 = v17 + *(double *)v16.i64;
  *(_QWORD *)&v123 = 0;
  v122 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v122, 0, v18, v16);
  v127 = (void *)CNTimeSpan::operator+(v15 + 136, &v122, v19, v20);
  *(_QWORD *)&v128 = v21;
  v22.i64[0] = *(_QWORD *)(v15 + 192);
  v115 = &unk_1E25B97E0;
  v109 = (uint64_t (**)())&unk_1E25B9818;
  LOWORD(__src[0]) = 0;
  *(_OWORD *)((char *)__src + 8) = 0u;
  *(_OWORD *)((char *)&__src[1] + 8) = 0u;
  DWORD2(__src[2]) = 0;
  memset(&__src[3], 0, 20);
  result = cnnavigation::GNSSCarrierPhase((uint64_t)&v127, (uint64_t)__src, (uint64_t)v89, v15 + 296, (uint64_t *)&v115, (uint64_t *)&v109, v9, 1, v22, (int8x16_t)v14, 0.0, v8);
  if (!(_DWORD)result)
    return result;
  v29 = v11[1];
  LOWORD(__src[0]) = 12;
  LOBYTE(v127) = 4;
  v76 = *(double *)(v29 + 48) + (double)*(uint64_t *)(v29 + 40);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v127, "time,%.3lf,h-function failure on line %d: %s() %s", v24, v25, v26, v27, v28, SLOBYTE(v76));
  return 0xFFFFFFFFLL;
}

void sub_18D1D0B88(_Unwind_Exception *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;

  __cxa_guard_abort(&qword_1ECF23158);
  v4 = STACK[0x5A8];
  STACK[0x580] = v1;
  STACK[0x5A8] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  v5 = STACK[0x4C8];
  STACK[0x4A0] = v2 + 16;
  STACK[0x4C8] = 0;
  if (v5)
    MEMORY[0x18D78B5BC](v5, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_18D1D0D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x1A00000001;
  *(_QWORD *)a1 = &off_1E25C6B30;
  *(_OWORD *)(a1 + 8) = xmmword_18D3198F0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D0D58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D0D6C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, int a8, uint64_t a9)
{
  uint64_t i;
  uint64_t j;
  void *v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD v24[3];
  _OWORD v25[14];
  void *v26;
  __int128 v27;
  uint64_t v28;
  double *v29;
  _BYTE v30[152];
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD v35[3];
  _OWORD v36[2];

  v22 = 0x10000001CLL;
  v20 = &unk_1E25C72B0;
  v23 = v24;
  v21 = xmmword_18D319780;
  sub_18D04BE88((uint64_t)&v20, 0.0);
  sub_18D053AA8(a9, (uint64_t)&v20);
  for (i = 10; i != 29; ++i)
    *((_DWORD *)&v20 + i) = i - 10;
  v35[1] = v24[1];
  v35[2] = v24[2];
  v33 = 0x100000013;
  v31 = &off_1E25C66E0;
  v34 = v35;
  v36[0] = v25[0];
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v25 + 12);
  v32 = xmmword_18D319860;
  v35[0] = v24[0];
  v28 = 0x100000013;
  v26 = &unk_1E25C66B0;
  v27 = xmmword_18D319860;
  v29 = (double *)v30;
  if (sub_18D1C7470(a1, (uint64_t)a2, *(_QWORD *)(a3 + 32), a4, a5, (uint64_t)&v26))
    return 0xFFFFFFFFLL;
  sub_18D1D86F8((uint64_t)&v20, a9, (uint64_t)&v31);
  sub_18D1C9EF8((uint64_t)&v20, SDWORD2(v27), v29);
  if ((a7 & 1) != 0)
  {
    *(_QWORD *)&v24[0] = 0x1400000013;
    v33 = 0x100000002;
    v31 = (uint64_t (**)())&unk_1E25C7550;
    v32 = xmmword_18D319330;
    v34 = v35;
    *(_QWORD *)&v35[0] = 0x1400000013;
    v28 = 0x100000002;
    v26 = &unk_1E25C7520;
    v27 = xmmword_18D319330;
    v29 = (double *)v30;
    if (sub_18D1D12F4(a1, a2, a3, (uint64_t)&v26))
      return 0xFFFFFFFFLL;
    sub_18D1CB1FC((uint64_t)&v20, a9, (uint64_t)&v31);
    sub_18D1C9F68((uint64_t)&v20, SDWORD2(v27), v29);
  }
  if (!a8)
    return 0;
  for (j = 10; j != 17; ++j)
    *((_DWORD *)&v20 + j) = j + 11;
  v33 = 0x100000007;
  v31 = &off_1E25C8210;
  v34 = v35;
  v32 = xmmword_18D319810;
  v35[0] = v24[0];
  *(_OWORD *)((char *)v35 + 12) = *(_OWORD *)((char *)v24 + 12);
  v28 = 0x100000007;
  v26 = &unk_1E25C81E0;
  v27 = xmmword_18D319810;
  v29 = (double *)v30;
  if (!sub_18D1C7D64(a1, a2, a3, a6, (uint64_t)&v26))
  {
    sub_18D1C8640((uint64_t)&v20, a9, (uint64_t)&v31);
    sub_18D1C8130((uint64_t)&v20, SDWORD2(v27), v29);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

double sub_18D1D1080(uint64_t a1, int a2, double *a3)
{
  int *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double result;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(a1 + 288);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 32);
    v5 = *(double **)(a1 + 32);
    v6 = a2;
    do
    {
      v7 = *a3++;
      result = v7;
      v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_18D1D10F0(_QWORD *result)
{
  result[32] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1D1114(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 48);
        v8 = *(int **)(result + 88);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 232) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D1D11FC(_QWORD *a1)
{
  uint64_t v2;

  a1[25] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C7160;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D1D1270(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000006;
  *(_QWORD *)a1 = &unk_1E25C8150;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D1D12CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1D12E0(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D1D12F4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  int8x16_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];
  double v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v33 = 0x1400000013;
  v42 = 0x100000002;
  v40 = &unk_1E25C7550;
  v41 = xmmword_18D319330;
  v43 = &v44;
  v44 = 0x1400000013;
  v39 = *a2;
  v6.i64[1] = *((_QWORD *)&v39 + 1);
  v36 = 0x100000002;
  v34 = &unk_1E25C7520;
  v35 = xmmword_18D319330;
  v37 = &v38;
  v6.i64[0] = 0x200000002;
  v31 = 0x200000002;
  v29 = &unk_1E25C75B0;
  v30 = xmmword_18D319340;
  v32 = &v33;
  v26 = 0x200000002;
  v24 = &unk_1E25C75B0;
  v25 = xmmword_18D319340;
  v27 = &v28;
  v7 = CNTimeSpan::operator-(a1, &v39, v6, (int8x16_t)xmmword_18D319340);
  v23 = v8 + (double)v7;
  v20 = 0x100000002;
  v18 = &unk_1E25C7520;
  v19 = xmmword_18D319330;
  v21 = v22;
  v9 = *(_QWORD *)(a3 + 32);
  v22[0] = *(_QWORD *)(v9 + 8 * (int)v44);
  v22[1] = *(_QWORD *)(v9 + 8 * SHIDWORD(v44));
  v15 = 0x100000002;
  v13 = &unk_1E25C7520;
  v16 = &v17;
  v14 = xmmword_18D319330;
  sub_18D04BE88((uint64_t)&v13, 0.0);
  if (sub_18D1D1490((uint64_t)&v18, (uint64_t)&v13, (uint64_t *)&v23, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v24, v10, v11))return 0xFFFFFFFFLL;
  sub_18D053AA8(a4, (uint64_t)&v34);
  return 0;
}

uint64_t sub_18D1D1490(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  int v28;
  _QWORD *v29;
  char v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE v35[32];
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 2;
  if (v12
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 2) : (v18 = 0),
        v18))
  {
    v24 = *a3;
    v43 = 0x200000002;
    v41 = &unk_1E25C75B0;
    v44 = &v45;
    v42 = xmmword_18D319340;
    sub_18D04BE88((uint64_t)&v41, 0.0);
    v25 = SHIDWORD(v42);
    v26 = HIDWORD(v42) + 1;
    v27 = v44;
    *v44 = 0x3FF0000000000000;
    v27[v26] = 0x3FF0000000000000;
    v27[v25] = v24;
    v38 = 0x100000002;
    v36 = &unk_1E25C7520;
    v37 = xmmword_18D319330;
    v39 = &v40;
    sub_18D053B2C((uint64_t)&v41, a1, (uint64_t)&v36);
    v33 = 0x100000002;
    v31 = &unk_1E25C7520;
    v32 = xmmword_18D319330;
    v34 = v35;
    sub_18D053FA4((uint64_t)&v36, a2, (uint64_t)&v31);
    sub_18D053AA8(a4, (uint64_t)&v31);
    sub_18D053AA8(a5, (uint64_t)&v41);
    v33 = 0x200000002;
    v31 = &unk_1E25C75B0;
    v34 = v35;
    v32 = xmmword_18D319340;
    sub_18D04BE88((uint64_t)&v31, 0.0);
    v28 = HIDWORD(v32) + 1;
    v29 = v34;
    *v34 = 0x3FF0000000000000;
    v29[v28] = 0x3FF0000000000000;
    sub_18D053AA8(a6, (uint64_t)&v31);
    return 0;
  }
  else
  {
    LOWORD(v41) = 12;
    LOBYTE(v31) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v31, "f_TwoStateOscillator called with inadequate matrices.", a4, a5, a6, a7, a8, v30);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18D1D1680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_OWORD *)(a1 + 8) = xmmword_18D319790;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5570;
  v5 = a1 + 256;
  *(_QWORD *)(a1 + 280) = 0x10000001ALL;
  *(_QWORD *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = &unk_1E25C70D0;
  *(_OWORD *)(a1 + 264) = xmmword_18D319790;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  sub_18D053D7C(a1 + 256, a3);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a1 + 268);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    v9 = *(int **)(a1 + 288);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD **)(a1 + 32);
    do
    {
      v12 = *v9++;
      *v11++ = *(_QWORD *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18D1D1744(_QWORD *a1)
{
  a1[32] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D1778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;

  v8 = (_QWORD *)sub_18D1C99C8(a1);
  *v8 = &off_1E25C4E80;
  v8[6] = a2;
  v8[10] = 0x10000001ALL;
  v8[7] = &unk_1E25C70D0;
  *(_OWORD *)(a1 + 64) = xmmword_18D319790;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 224) = 0x10000001ALL;
  *(_QWORD *)(a1 + 200) = &unk_1E25C70D0;
  *(_OWORD *)(a1 + 208) = xmmword_18D319790;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  sub_18D053D7C((uint64_t)(v8 + 7), a3);
  sub_18D053D7C(a1 + 200, a4);
  v9 = *(unsigned int *)(a1 + 72);
  v10 = *(unsigned int *)(a1 + 216);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (!*(_QWORD *)(a1 + 40))
    __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v9)
      {
        v15 = *(int **)(a1 + 88);
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * v12) * v13;
        v17 = *(_QWORD *)(a1 + 32);
        v18 = v11;
        v19 = v9;
        do
        {
          v20 = *v15++;
          *(_QWORD *)(v17 + 8 * v18++) = *(_QWORD *)(v14 + 8 * (v20 + v16));
          --v19;
        }
        while (v19);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return a1;
}

void sub_18D1D18C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v1[25] = &unk_1E25C5EA0;
  v1[7] = &unk_1E25C5EA0;
  *v1 = &unk_1E25C7160;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1D1924(_QWORD *a1)
{
  uint64_t v2;

  a1[25] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C7160;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1D19A8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D19CC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D19D8(uint64_t a1)
{
  char v1[6];

  sub_18D159878(a1, v1);
}

__n128 sub_18D1D19F8(void (**a1)(int a1), uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;

  v4 = operator new(0x238uLL);
  v5 = v4;
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  v4[2] = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798((_BYTE *)v4 + 16, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)v5 = &unk_1E25C30E0;
  *(_OWORD *)(v5 + 10) = *(_OWORD *)(a2 + 40);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18D077798((_BYTE *)v5 + 56, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v5 + 14) = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v5 + 9) = *(_QWORD *)(a2 + 72);
  }
  *((_QWORD *)v5 + 10) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 58) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 62) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 42) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 46) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 50) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 54) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 26) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 30) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 34) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 38) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 66) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 70) = v6;
  *((_QWORD *)v5 + 37) = &unk_1E25B9850;
  v7 = v5 + 76;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18D077798(v7, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)(a2 + 304);
    *((_QWORD *)v5 + 40) = *(_QWORD *)(a2 + 320);
  }
  *((_QWORD *)v5 + 41) = *(_QWORD *)(a2 + 328);
  v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  v13 = *(_OWORD *)(a2 + 512);
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  *((_OWORD *)v5 + 32) = v13;
  *((_OWORD *)v5 + 33) = *(_OWORD *)(a2 + 528);
  *((_QWORD *)v5 + 68) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)v5 = off_1E25C4048;
  result = *(__n128 *)(a2 + 552);
  *(__n128 *)(v5 + 138) = result;
  *a1 = sub_18D1D1C3C;
  a1[1] = (void (*)(int))v5;
  return result;
}

void sub_18D1D1BE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  uint64_t v4;

  v1[37] = off_1E25B93B0;
  if (*((char *)v1 + 79) < 0)
    operator delete(*v3);
  *v1 = v4 + 16;
  if (*((char *)v1 + 39) < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D1C3C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D1C70()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D1D1D04(uint64_t a1)
{
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = v2;
  v3 = (double *)(a1 + 8);
  if (*(_DWORD *)(a1 + 24) == 1)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return sub_18D1D1D50((uint64_t)v3, v3, (double *)&v6, (double *)&v5);
}

uint64_t sub_18D1D1D50(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v14;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  long double v23;
  double v24;
  double v26;
  long double v27;
  double v28;
  double v29;
  double v30;
  long double v31;
  long double v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  __int16 v40;
  unsigned __int8 v41;
  __int16 v42;

  v5 = *a2;
  if (*a2 < 0.0 || v5 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v42 = 2;
      v41 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "WARNING: DiscreteEventDetector::Update called with bad xbar %.3lf.", v7, v8, v9, v10, v11, *(_QWORD *)a2);
    }
    return 0xFFFFFFFFLL;
  }
  v14 = fabs(*a4);
  if (fabs(*a3) < 2.22044605e-16 && v14 < 2.22044605e-16)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v40 = 2;
      v39 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "WARNING: DiscreteEventDetector::Update called with bad pzgx,%.3lf,pzgnx,%.3lf.", v34, v35, v36, v37, v38, *(_QWORD *)a3);
    }
    return 0xFFFFFFFFLL;
  }
  *(double *)a1 = v5;
  v17 = 0.0;
  v18 = fmax(1.0 - v5, 0.0);
  v19 = fabs(*a3);
  v20 = fabs(v5) < 2.22044605e-16 || v19 < 2.22044605e-16;
  v21 = 0.0;
  if (!v20)
  {
    v22 = log(*a3);
    v23 = log(v5);
    v21 = exp(v23 + v22);
  }
  v24 = fabs(*a4);
  if (fabs(v18) >= 2.22044605e-16 && v24 >= 2.22044605e-16)
  {
    v26 = log(*a4);
    v27 = log(v18);
    v17 = exp(v27 + v26);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v28 = 0.0;
  if (fabs(v21) >= 2.22044605e-16)
  {
    v29 = v21 + v17;
    v28 = 0.0;
    if (fabs(v29) >= 2.22044605e-16)
    {
      v30 = log(*a3);
      v31 = log(v5) + v30;
      v32 = log(v29);
      v28 = exp(v31 - v32);
    }
  }
  result = 0;
  *(double *)(a1 + 8) = fmin(v28, 1.0);
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

void sub_18D1D1FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D2000(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1D2014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1D206C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D2080(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v3;
  void *v5;
  __int128 v6;
  uint64_t v7;
  int *v8;
  int v9;

  v7 = 0x100000001;
  v5 = &unk_1E25C6A70;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v6 = v3;
  v8 = &v9;
  v9 = a3;
  return sub_18D163258(a1, a2, (uint64_t)&unk_1ECF234D8, (uint64_t)&v5);
}

double sub_18D1D20D8(_QWORD *a1)
{
  _QWORD *v1;
  double result;

  v1 = sub_18D1C7988(a1, 20);
  *(_OWORD *)(v1 + 9) = 0u;
  *(_OWORD *)(v1 + 7) = 0u;
  *v1 = off_1E25C4A80;
  v1[15] = 0x100000003;
  v1[11] = 0;
  v1[12] = &unk_1E25C7790;
  *(_QWORD *)&result = 0x100000003;
  *(_OWORD *)(v1 + 13) = xmmword_18D313070;
  v1[16] = v1 + 17;
  v1[20] = 0;
  v1[21] = 0;
  v1[22] = 0;
  v1[23] = 0x3FF0000000000000;
  return result;
}

void sub_18D1D2144(void (**a1)(int a1), uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;

  v4 = operator new(0xC0uLL);
  v5 = v4;
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  v4[2] = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798((_BYTE *)v4 + 16, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v5 + 10) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v5 + 14) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v5 + 18) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v5 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v5 = off_1E25C4A80;
  sub_18D04DA0C((uint64_t)(v5 + 24), a2 + 96);
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  if (v5 != (_DWORD *)a2)
  {
    v6 = *(_OWORD *)(a2 + 176);
    *((_OWORD *)v5 + 10) = *(_OWORD *)(a2 + 160);
    *((_OWORD *)v5 + 11) = v6;
  }
  *a1 = sub_18D1D2258;
  a1[1] = (void (*)(int))v5;
}

void sub_18D1D2224(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D2258(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D228C()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D1D2320(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E25B9BA8;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  sub_18D1CEF14(a1 + 64, a2 + 64);
  sub_18D1CEF14(a1 + 256, a2 + 256);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  v6 = *(_OWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v6;
  sub_18D1CEF14(a1 + 480, a2 + 480);
  sub_18D1C277C(a1 + 672, a2 + 672);
  sub_18D1C28AC(a1 + 3600, a2 + 3600);
  *(_QWORD *)a1 = &unk_1E25C3648;
  *(_QWORD *)(a1 + 5920) = 0;
  *(_QWORD *)(a1 + 5936) = 0;
  *(_QWORD *)(a1 + 5928) = 0;
  v7 = *(_QWORD *)(a2 + 5920);
  v8 = *(_QWORD *)(a2 + 5928);
  if (v8 != v7)
  {
    sub_18D1C5278((_QWORD *)(a1 + 5920), 0xCFF3FCFF3FCFF3FDLL * ((v8 - v7) >> 4));
    *(_QWORD *)(a1 + 5928) = sub_18D1C52CC(v7, v8, *(_QWORD *)(a1 + 5928));
  }
  *(_QWORD *)(a1 + 5944) = *(_QWORD *)(a2 + 5944);
  return a1;
}

void sub_18D1D2470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v10[741] = v11;
  sub_18D1C4ED8(&a9);
  *v10 = v12 + 16;
  v10[450] = &unk_1E25C5E70;
  v10[84] = &unk_1E25C5E70;
  v10[60] = &unk_1E25C5E70;
  v10[32] = &unk_1E25C5E70;
  *v9 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D2514(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1D2564(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  double result;

  v4 = (char *)operator new(0x68uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C44D8;
  result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18D1D2630;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D261C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D2630(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D2664()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

void sub_18D1D26F8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1D2748(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;

  v4 = (char *)operator new(0x118uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 72) = v6;
  *(_QWORD *)v4 = off_1E25C49E0;
  v7 = *(_OWORD *)(a2 + 240);
  *((_OWORD *)v4 + 14) = *(_OWORD *)(a2 + 224);
  *((_OWORD *)v4 + 15) = v7;
  *((_OWORD *)v4 + 16) = *(_OWORD *)(a2 + 256);
  v4[272] = *(_BYTE *)(a2 + 272);
  v8 = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v4 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v4 + 11) = v8;
  v9 = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v4 + 13) = v9;
  v10 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v4 + 7) = v10;
  result = *(__n128 *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  *((__n128 *)v4 + 8) = result;
  *((_OWORD *)v4 + 9) = v12;
  *a1 = sub_18D1D2844;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D2830(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D2844(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D2878()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D1D290C(uint64_t a1, double a2, double a3)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0x300000003;
  *(_QWORD *)(a1 + 16) = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 24) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)a1 = &off_1E25B9588;
  sub_18D05164C(a1, a2, a3);
  return a1;
}

void sub_18D1D2970(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E25B9B80;
  v1[2] = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D2994(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1D29E4(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v4 = (char *)operator new(0x110uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C4A08;
  v6 = *(_OWORD *)(a2 + 240);
  *((_OWORD *)v4 + 14) = *(_OWORD *)(a2 + 224);
  *((_OWORD *)v4 + 15) = v6;
  *((_OWORD *)v4 + 16) = *(_OWORD *)(a2 + 256);
  v7 = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v4 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v4 + 11) = v7;
  v8 = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v4 + 13) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v4 + 7) = v9;
  result = *(__n128 *)(a2 + 144);
  *((_OWORD *)v4 + 8) = *(_OWORD *)(a2 + 128);
  *((__n128 *)v4 + 9) = result;
  *a1 = sub_18D1D2AD8;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D2AC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D2AD8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D2B0C()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

double sub_18D1D2BA0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  double result;

  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D30BB60;
  sub_18D04BE88(a1, 0.0);
  v4 = *(_QWORD **)(a1 + 32);
  *v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a1 + 20);
  v4[v5 + 1] = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 40);
  *(double *)&v4[2 * v5 + 2] = result;
  return result;
}

uint64_t sub_18D1D2C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  void *v5;
  __int128 v6;
  uint64_t v7;
  int *v8;
  int v9;

  v7 = 0x100000001;
  v5 = &unk_1E25C6A70;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v6 = v3;
  v8 = &v9;
  v9 = 0;
  return sub_18D1D2ED0(a1, a2, (uint64_t)&v5, a3);
}

uint64_t sub_18D1D2C74(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 248);
        v8 = *(int **)(result + 288);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 336) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D1D2D5C(_QWORD *result)
{
  result[38] = &unk_1E25C5EA0;
  result[32] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1D2D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x300000001;
  *(_QWORD *)a1 = &unk_1E25C6C20;
  *(_OWORD *)(a1 + 8) = xmmword_18D314670;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D2DE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D2DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x400000001;
  *(_QWORD *)a1 = &unk_1E25C6CE0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319840;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D2E50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1D2E64(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1D2E78(uint64_t a1)
{
  __int128 v2;
  uint64_t result;

  *(_QWORD *)(a1 + 24) = 0x100000001;
  *(_QWORD *)a1 = &unk_1E25C6A40;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 8) = v2;
  result = sub_18D04BE88(a1, 0.0);
  **(_QWORD **)(a1 + 32) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18D1D2ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0x1A00000001;
  *(_OWORD *)(a1 + 8) = xmmword_18D3198F0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C4D00;
  *(_QWORD *)(a1 + 280) = 0x100000001;
  *(_QWORD *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = &unk_1E25C6A70;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 264) = v7;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  *(_QWORD *)(a1 + 328) = 0x10000001ALL;
  *(_QWORD *)(a1 + 304) = &unk_1E25C70D0;
  *(_OWORD *)(a1 + 312) = xmmword_18D319790;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  sub_18D053D7C(a1 + 256, a3);
  sub_18D053D7C(a1 + 304, a4);
  v8 = *(unsigned int *)(a1 + 272);
  v9 = *(unsigned int *)(a1 + 320);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v8)
      {
        v14 = *(int **)(a1 + 288);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 336) + 4 * v11) * v12;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v10;
        v18 = v8;
        do
        {
          v19 = *v14++;
          *(_QWORD *)(v16 + 8 * v17++) = *(_QWORD *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18D1D3018(_QWORD *a1)
{
  a1[38] = &unk_1E25C5EA0;
  a1[32] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1D3050(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D3074(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D3080(uint64_t a1)
{
  char v1[4];

  sub_18D0894A0(a1, v1);
}

void sub_18D1D30A0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1D30F0(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x78uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C4AA8;
  result = *(__n128 *)(a2 + 96);
  *((__n128 *)v4 + 6) = result;
  *((_QWORD *)v4 + 14) = *(_QWORD *)(a2 + 112);
  *a1 = sub_18D1D31C4;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D31B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D31C4(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D31F8()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

double sub_18D1D328C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1D32E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D32FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D3358(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1D336C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  double result;
  double *v6;
  int *v7;
  uint64_t v8;

  v2 = dword_1EE061588;
  v3 = *(_DWORD *)algn_1EE06158C;
  v4 = (*(_DWORD *)algn_1EE06158C * dword_1EE061588);
  *(_QWORD *)&result = 0x10000001ALL;
  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_QWORD *)a1 = &unk_1E25C70A0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 20) = v2;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if ((_DWORD)v4)
  {
    v7 = (int *)qword_1EE0615A0;
    do
    {
      v8 = *v7++;
      result = *(double *)(a2 + 8 * v8);
      *v6++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

double sub_18D1D33CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x1A00000003;
  *(_QWORD *)a1 = &off_1E25C7850;
  *(_OWORD *)(a1 + 8) = xmmword_18D319800;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1D3424(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D3438(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1D3488(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  double result;

  v4 = (char *)operator new(0x68uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C43D0;
  result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18D1D3554;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D3540(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D3554(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D3588()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

void sub_18D1D361C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1D366C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1D36BC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1D370C(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x60uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C3938;
  *a1 = sub_18D1D37D0;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D37BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D37D0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D3804()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

void sub_18D1D3898(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1D38E8(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x60uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C3108;
  *a1 = sub_18D1D39AC;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D3998(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D39AC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D39E0()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

void sub_18D1D3A74(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1D3AC4(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x60uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C4A30;
  *a1 = sub_18D1D3B88;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D3B74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D3B88(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D3BBC()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D1D3C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  __n128 v37;
  uint64_t v38;
  char v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE v49[288];
  _QWORD v50[2];
  int v51;
  uint64_t v52;
  uint64_t v53;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 6;
  if (v13
    && ((v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (v17 = *(_DWORD *)(a2 + 12))
      : (v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (v18 = v16 == 0) : (v18 = 1),
        !v18 ? (v19 = v17 == 6) : (v19 = 0),
        v19))
  {
    v47 = 0x600000006;
    v45 = &unk_1E25C81B0;
    v48 = v49;
    v46 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v45, 0.0);
    v26 = 0;
    v27 = HIDWORD(v46) + 1;
    v28 = 6;
    v29 = v48;
    do
    {
      *(_QWORD *)&v29[8 * v26] = 0x3FF0000000000000;
      v26 += v27;
      --v28;
    }
    while (v28);
    v30 = sub_18D1D6FC4((uint64_t)v50, (uint64_t)&v45);
    v31 = v51;
    v32 = v52;
    *(double *)(v52 + 24 * v51) = a9;
    *(double *)(v32 + 8 * ((4 * v31) | 1)) = a9;
    *(double *)(v32 + 8 * (5 * v31 + 2)) = a9;
    v42 = 0x10000001ALL;
    v40 = &unk_1E25C70A0;
    v41 = xmmword_18D319790;
    v43 = &v44;
    sub_18D053B2C(v30, a1, (uint64_t)&v40);
    v47 = 0x10000001ALL;
    v45 = &unk_1E25C70A0;
    v46 = xmmword_18D319790;
    v48 = v49;
    sub_18D053FA4((uint64_t)&v40, a2, (uint64_t)&v45);
    sub_18D053AA8(a3, (uint64_t)&v45);
    sub_18D053AA8(a4, (uint64_t)v50);
    v47 = 0x600000006;
    v45 = &unk_1E25C81B0;
    v48 = v49;
    v46 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v45, 0.0);
    v33 = 0;
    v34 = HIDWORD(v46) + 1;
    v35 = 6;
    v36 = v48;
    do
    {
      *(_QWORD *)&v36[8 * v33] = 0x3FF0000000000000;
      v33 += v34;
      --v35;
    }
    while (v35);
    v37 = sub_18D053AA8(a5, (uint64_t)&v45);
    v38 = v53;
    v50[0] = &unk_1E25C7160;
    v53 = 0;
    if (v38)
      MEMORY[0x18D78B5BC](v38, 0x1000C8000313F17, v37);
    return 0;
  }
  else
  {
    LOWORD(v45) = 12;
    LOBYTE(v40) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, (unsigned __int8 *)&v40, "f_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v39);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D1D3ED4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 104);
  *(_QWORD *)(v1 - 144) = &unk_1E25C7160;
  *(_QWORD *)(v1 - 104) = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1D3F14(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int8x16_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  double *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  double v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  __int128 v55;

  v55 = *a2;
  v52 = 0x100000006;
  v50 = &unk_1E25C8120;
  v6 = *(_QWORD *)(a3 + 32);
  v45 = *(_OWORD *)(v6 + 168);
  v7.i64[1] = *((_QWORD *)&v45 + 1);
  v8 = *(double *)(v6 + 192);
  v9 = *(double *)(v6 + 208);
  v10 = v8 * *(double *)(v6 + 200);
  v46 = *(_QWORD *)(v6 + 184);
  v47 = v10;
  v11 = *(double *)(v6 + 216);
  v51 = xmmword_18D319950;
  v53 = (double *)&v54;
  v43 = 0x100000006;
  v41 = &unk_1E25C8120;
  v42 = xmmword_18D319950;
  v44 = &v45;
  v48 = v8 * v9;
  v49 = v8 * v11;
  v7.i64[0] = 0x600000006;
  v38 = 0x600000006;
  v36 = &unk_1E25C81B0;
  v37 = xmmword_18D314680;
  v39 = &v40;
  v33 = 0x600000006;
  v31 = &unk_1E25C81B0;
  v32 = xmmword_18D314680;
  v34 = &v35;
  v12 = CNTimeSpan::operator-(a1, &v55, v7, (int8x16_t)xmmword_18D314680);
  v30 = v13 + (double)v12;
  v27 = 0x100000006;
  v25 = &unk_1E25C8120;
  v28 = &v29;
  v26 = xmmword_18D319950;
  sub_18D04BE88((uint64_t)&v25, 0.0);
  if (sub_18D1C8214((uint64_t)&v41, (uint64_t)&v25, (uint64_t *)&v30, (uint64_t)&v50, (uint64_t)&v36, (uint64_t)&v31, v14, v15))return 0xFFFFFFFFLL;
  v17 = v53;
  *(_OWORD *)(a4 + 8) = xmmword_18D319810;
  v18 = *(_QWORD *)(a4 + 32);
  *(double *)v18 = *v17;
  *(double *)(v18 + 8) = v17[1];
  *(double *)(v18 + 16) = v17[2];
  v20 = v17[3];
  v19 = v17[4];
  v21 = v17[5];
  v22 = sqrt(v19 * v19 + v20 * v20 + v21 * v21);
  *(double *)(v18 + 24) = v22;
  if (fabs(v22) <= 0.000000015)
  {
    v24 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(v18 + 32) = *(_QWORD *)(v24 + 200);
    *(_QWORD *)(v18 + 40) = *(_QWORD *)(v24 + 208);
    v23 = *(double *)(v24 + 216);
  }
  else
  {
    *(double *)(v18 + 32) = v20 / v22;
    *(double *)(v18 + 40) = v19 / v22;
    v23 = v21 / v22;
  }
  result = 0;
  *(double *)(v18 + 48) = v23;
  return result;
}

void sub_18D1D4114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_QWORD *)a1 = &unk_1E25C70A0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319790;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D4170(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D4184(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x30000001ALL;
  *(_QWORD *)a1 = &off_1E25C71F0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D073454(a2, a1);
}

void sub_18D1D41DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D41F0(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int i;
  __int128 v5;
  void *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD v19[4];

  v3 = *(_DWORD *)(a2 + 8);
  v17 = 0x100000003;
  v12 = &unk_1E25C77C0;
  v13 = v3;
  v14 = 1;
  v15 = v3;
  v16 = v3;
  v18 = v19;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      v19[i] = i;
  }
  v9 = 0x100000001;
  v7 = &unk_1E25C6A70;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v8 = v5;
  v10 = &v11;
  v11 = a3;
  return sub_18D163258(a1, a2, (uint64_t)&v12, (uint64_t)&v7);
}

_QWORD *sub_18D1D4294(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1D42A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D4304(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D4318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int i;
  void *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD v13[4];

  v3 = *(_DWORD *)(a2 + 8);
  v11 = 0x100000003;
  v6 = &unk_1E25C77C0;
  v7 = v3;
  v8 = 1;
  v9 = v3;
  v10 = v3;
  v12 = v13;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      v13[i] = i;
  }
  return sub_18D04F764(a1, a2, (uint64_t)&v6, a3);
}

double sub_18D1D438C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x1A00000003;
  *(_QWORD *)a1 = &off_1E25C7850;
  *(_OWORD *)(a1 + 8) = xmmword_18D319800;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1D43E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1D43F8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1D440C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D4430(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D443C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[156];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

double sub_18D1D4530(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x1A00000003;
  *(_QWORD *)(a1 + 24) = 0x1A00000003;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C7850;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0x1Au)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1D45EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D4600(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D4624(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D4630(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[78];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D4724(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

double sub_18D1D4774(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  double result;

  v4 = (char *)operator new(0x68uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C4B48;
  result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18D1D4840;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D482C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D4840(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D4874()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

double sub_18D1D4908(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)a1 = &unk_1E25C7FA0;
  *(_OWORD *)(a1 + 8) = xmmword_18D313080;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D1D4A98(a2, 0, a1);
}

uint64_t sub_18D1D4944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D05449C(a2, a3, a1);
}

void sub_18D1D499C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D49B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x200000003;
  *(_QWORD *)a1 = &unk_1E25C78B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319B50;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D05449C(a2, a3, a1);
}

void sub_18D1D4A0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1D4A20(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1D4A34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = &unk_1E25C78E0;
  *(_OWORD *)(a3 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D1D4A84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1D4A98(uint64_t a1, int a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v9;
  int v10;
  int v11;
  int32x4_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  int32x2_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;

  v7 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12);
  if (v7 == 1 || v6 == 1)
  {
    v9 = *(unsigned int *)(a1 + 16);
    if (a2 >= 0)
      v10 = a2;
    else
      v10 = -a2;
    v11 = v9 + v10;
    *(_DWORD *)(a3 + 8) = v9 + v10;
    *(_DWORD *)(a3 + 12) = v9 + v10;
    *(_DWORD *)(a3 + 16) = (v9 + v10) * (v9 + v10);
    *(_DWORD *)(a3 + 20) = v9 + v10;
    sub_18D04BE88(a3, 0.0);
    if ((int)v9 >= 1)
    {
      v13 = *(uint64_t **)(a1 + 32);
      v14 = (uint64_t *)(*(_QWORD *)(a3 + 32) + 8 * (v11 * (a2 & ~(a2 >> 31)) - (a2 & (a2 >> 31))));
      do
      {
        v15 = *v13++;
        v12.i64[0] = v15;
        *v14 = v15;
        v14 += v11 + 1;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    if (v6 >= v7)
      v16 = *(_DWORD *)(a1 + 8);
    else
      v16 = *(_DWORD *)(a1 + 12);
    if (v6 - v7 <= a2)
      v17 = *(_DWORD *)(a1 + 12);
    else
      v17 = v7 + a2;
    v18 = v6 - v7;
    if (v6 >= v7)
      v17 = v7 + a2;
    if (a2 >= 0)
      v17 = v16;
    v19 = v16 - a2;
    v20 = v18 < a2;
    v21 = v18 - a2 + v16;
    if (v20)
      v16 = v21;
    if (v6 > v7)
      v22 = v16;
    else
      v22 = v19;
    if (a2 >= 1)
      v17 = v22;
    v23 = v17 & ~(v17 >> 31);
    v24.i32[1] = 1;
    v24.i32[0] = v17 & ~(v17 >> 31);
    v12 = vdupq_lane_s32(v24, 0);
    v12.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v12;
    if (v17 >= 1)
    {
      v25 = v7 + 1;
      v26 = v7 * (a2 & ~(a2 >> 31)) - (a2 & (a2 >> 31));
      v27 = *(uint64_t **)(a3 + 32);
      v28 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v26);
      v29 = 8 * v25;
      do
      {
        v12.i64[0] = *v28;
        *v27++ = *v28;
        v28 = (uint64_t *)((char *)v28 + v29);
        --v23;
      }
      while (v23);
    }
  }
  return *(double *)v12.i64;
}

void sub_18D1D4BE8(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D4C0C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D4C18(uint64_t a1)
{
  char v1[6];

  sub_18D0894A0(a1, v1);
}

__n128 sub_18D1D4C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  char v16;

  v5 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      v7 = *(_OWORD *)(a3 + 72);
      v8 = *(_QWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(a2 + 88) = v8;
      *(_OWORD *)(a2 + 72) = v7;
      result = *(__n128 *)(a3 + 120);
      v10 = *(_OWORD *)(a3 + 104);
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(a2 + 104) = v10;
      *(__n128 *)(a2 + 120) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E25CD390[v5])(&v16, a1);
  }
  *(_DWORD *)(a1 + 144) = -1;
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
  v11 = (_BYTE *)(a1 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_18D077798(v11, *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v12 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)v11 = v12;
  }
  *(_QWORD *)a1 = &unk_1E25C30E0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a3 + 40);
  v13 = *(_OWORD *)(a3 + 56);
  v14 = *(_QWORD *)(a3 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)a1 = off_1E25C4A58;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = &unk_1E25C2C38;
  result = *(__n128 *)(a3 + 104);
  v15 = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(a1 + 120) = v15;
  *(__n128 *)(a1 + 104) = result;
  *(_DWORD *)(a1 + 144) = 0;
  return result;
}

__n128 sub_18D1D4D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  char v12;

  v5 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      result = *(__n128 *)(a3 + 56);
      v8 = *(_OWORD *)(a3 + 72);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = v8;
      *(__n128 *)(a2 + 56) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E25CD390[v5])(&v12, a1);
  }
  *(_DWORD *)(a1 + 144) = -1;
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
  v9 = (_BYTE *)(a1 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_18D077798(v9, *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v10 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)v9 = v10;
  }
  *(_QWORD *)a1 = &unk_1E25C30E0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a3 + 40);
  result = *(__n128 *)(a3 + 56);
  v11 = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 88);
  *(_OWORD *)(a1 + 72) = v11;
  *(__n128 *)(a1 + 56) = result;
  *(_QWORD *)a1 = off_1E25C3108;
  *(_DWORD *)(a1 + 144) = 1;
  return result;
}

__n128 sub_18D1D4EC4(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  __n128 result;

  v4 = (char *)operator new(0x90uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)v4 = off_1E25C4A58;
  *((_QWORD *)v4 + 11) = v6;
  *((_QWORD *)v4 + 12) = &unk_1E25C2C38;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(v4 + 120) = result;
  *((_QWORD *)v4 + 17) = *(_QWORD *)(a2 + 136);
  *a1 = sub_18D1D4FAC;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D1D4F98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D1D4FAC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D1D4FE0()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_18D1D5074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t i;
  int v12;

  sub_18D1D5248(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    v8 = *(_DWORD *)(a2 + 16);
    if (v8 >= 2)
    {
      v9 = *(_DWORD **)(a2 + 32);
      v10 = *(_DWORD **)(a3 + 32);
      for (i = 1; i < v8; ++i)
      {
        v12 = v9[i];
        if (v12 < *v9)
        {
          *v9 = v12;
          *v10 = v10[i];
          v8 = *(_DWORD *)(a2 + 16);
        }
      }
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

_QWORD *sub_18D1D5110(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1D5124(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D5148(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D5154(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[26];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1D5248(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t i;
  int32x2_t v14;
  int32x4_t v15;
  unsigned int v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;

  if (a2 == 1)
  {
    v4 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = 1;
    v5 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v5;
    *(_DWORD *)(a4 + 20) = 1;
    if (v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(result + 32);
      v8 = *(_QWORD *)(a3 + 32);
      v9 = *(_QWORD *)(a4 + 32);
      do
      {
        v10 = *(unsigned int *)(result + 8);
        v11 = *(_DWORD *)(v7 + 4 * (v10 * v6));
        if (v10 < 2)
        {
          v12 = 0;
        }
        else
        {
          v12 = 0;
          for (i = 1; i != v10; ++i)
          {
            if (*(_DWORD *)(v7 + 4 * (v10 * v6 + i)) < v11)
            {
              v11 = *(_DWORD *)(v7 + 4 * (v10 * v6 + i));
              v12 = i;
            }
          }
        }
        *(_DWORD *)(v8 + 4 * v6) = v11;
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v14.i32[1] = 1;
    v14.i32[0] = *(_DWORD *)(result + 8);
    v15 = vdupq_lane_s32(v14, 0);
    v15.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v15;
    v16 = *(_DWORD *)(result + 8);
    v17 = vdupq_lane_s32((int32x2_t)(v16 | 0x100000000), 0);
    v17.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v17;
    if (v16)
    {
      v18 = 0;
      v19 = *(_QWORD *)(result + 32);
      v20 = *(_QWORD *)(a3 + 32);
      v21 = *(_QWORD *)(a4 + 32);
      do
      {
        *(_DWORD *)(v20 + 4 * v18) = *(_DWORD *)(v19 + 4 * v18);
        *(_DWORD *)(v21 + 4 * v18++) = 0;
      }
      while (v18 < *(unsigned int *)(result + 8));
    }
    v22 = *(_DWORD *)(result + 12);
    if (v22 >= 2)
    {
      v23 = *(_QWORD *)(result + 32);
      v24 = *(_QWORD *)(a3 + 32);
      v25 = *(_DWORD *)(result + 8);
      v26 = 1;
      v27 = v25;
      do
      {
        if (v27)
        {
          v28 = 0;
          v29 = *(_QWORD *)(a4 + 32);
          v30 = v27 * v26;
          do
          {
            v31 = *(_DWORD *)(v23 + 4 * (v30 + v28));
            if (v31 < *(_DWORD *)(v24 + 4 * v28))
            {
              *(_DWORD *)(v24 + 4 * v28) = v31;
              *(_DWORD *)(v29 + 4 * v28) = v26;
              v25 = *(_DWORD *)(result + 8);
            }
            ++v28;
          }
          while (v28 < v25);
          v22 = *(_DWORD *)(result + 12);
          v27 = v25;
        }
        ++v26;
      }
      while (v26 < v22);
    }
  }
  return result;
}

__n128 sub_18D1D53BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t i;
  int v12;

  sub_18D1D5458(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    v8 = *(_DWORD *)(a2 + 16);
    if (v8 >= 2)
    {
      v9 = *(_DWORD **)(a2 + 32);
      v10 = *(_DWORD **)(a3 + 32);
      for (i = 1; i < v8; ++i)
      {
        v12 = v9[i];
        if (v12 > *v9)
        {
          *v9 = v12;
          *v10 = v10[i];
          v8 = *(_DWORD *)(a2 + 16);
        }
      }
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

uint64_t sub_18D1D5458(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t i;
  int32x2_t v14;
  int32x4_t v15;
  unsigned int v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;

  if (a2 == 1)
  {
    v4 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = 1;
    v5 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v5;
    *(_DWORD *)(a4 + 20) = 1;
    if (v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(result + 32);
      v8 = *(_QWORD *)(a3 + 32);
      v9 = *(_QWORD *)(a4 + 32);
      do
      {
        v10 = *(unsigned int *)(result + 8);
        v11 = *(_DWORD *)(v7 + 4 * (v10 * v6));
        if (v10 < 2)
        {
          v12 = 0;
        }
        else
        {
          v12 = 0;
          for (i = 1; i != v10; ++i)
          {
            if (*(_DWORD *)(v7 + 4 * (v10 * v6 + i)) > v11)
            {
              v11 = *(_DWORD *)(v7 + 4 * (v10 * v6 + i));
              v12 = i;
            }
          }
        }
        *(_DWORD *)(v8 + 4 * v6) = v11;
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v14.i32[1] = 1;
    v14.i32[0] = *(_DWORD *)(result + 8);
    v15 = vdupq_lane_s32(v14, 0);
    v15.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v15;
    v16 = *(_DWORD *)(result + 8);
    v17 = vdupq_lane_s32((int32x2_t)(v16 | 0x100000000), 0);
    v17.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v17;
    if (v16)
    {
      v18 = 0;
      v19 = *(_QWORD *)(result + 32);
      v20 = *(_QWORD *)(a3 + 32);
      v21 = *(_QWORD *)(a4 + 32);
      do
      {
        *(_DWORD *)(v20 + 4 * v18) = *(_DWORD *)(v19 + 4 * v18);
        *(_DWORD *)(v21 + 4 * v18++) = 0;
      }
      while (v18 < *(unsigned int *)(result + 8));
    }
    v22 = *(_DWORD *)(result + 12);
    if (v22 >= 2)
    {
      v23 = *(_QWORD *)(result + 32);
      v24 = *(_QWORD *)(a3 + 32);
      v25 = *(_DWORD *)(result + 8);
      v26 = 1;
      v27 = v25;
      do
      {
        if (v27)
        {
          v28 = 0;
          v29 = *(_QWORD *)(a4 + 32);
          v30 = v27 * v26;
          do
          {
            v31 = *(_DWORD *)(v23 + 4 * (v30 + v28));
            if (v31 > *(_DWORD *)(v24 + 4 * v28))
            {
              *(_DWORD *)(v24 + 4 * v28) = v31;
              *(_DWORD *)(v29 + 4 * v28) = v26;
              v25 = *(_DWORD *)(result + 8);
            }
            ++v28;
          }
          while (v28 < v25);
          v22 = *(_DWORD *)(result + 12);
          v27 = v25;
        }
        ++v26;
      }
      while (v26 < v22);
    }
  }
  return result;
}

uint64_t sub_18D1D55CC(uint64_t result, int a2, int *a3)
{
  int *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (*(_DWORD *)(result + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(result + 184);
    v4 = *(_QWORD *)(*(_QWORD *)(result + 144) + 32);
    v5 = *(_DWORD **)(result + 32);
    v6 = a2;
    do
    {
      v8 = *a3++;
      v7 = v8;
      v9 = *v3++;
      *(_DWORD *)(v4 + 4 * v9) = v7;
      *v5++ = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_18D1D563C(_QWORD *result)
{
  result[19] = &unk_1E25C5EA0;
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D1D5654(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  int *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  int v65;
  int *v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  __n128 v72;
  uint64_t result;
  _QWORD v74[5];
  uint64_t v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  _QWORD v90[5];
  uint64_t v91;
  uint64_t (**v92)();
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE v99[32];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 1108))
  {
    sub_18D053AA8(a1 + 552, a1 + 8);
    sub_18D053AA8(a1 + 800, a1 + 256);
    sub_18D053AA8(a1 + 848, a1 + 304);
  }
  v6 = *(_DWORD *)(a1 + 560);
  v7 = *(_DWORD *)(a1 + 564);
  if (v6 <= v7)
    v8 = *(_DWORD *)(a1 + 564);
  else
    v8 = *(_DWORD *)(a1 + 560);
  if (v7)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (v9)
    v10 = 0;
  else
    v10 = v8;
  if (v10 != a2)
  {
    LOWORD(v85) = 2;
    LOBYTE(v76) = 4;
    v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1272), "ReorderStates(): Length(order) != Length(x).");
    if (*(char *)(a1 + 1295) >= 0)
      LOBYTE(v17) = v11;
    else
      v17 = *(_QWORD *)(a1 + 1272);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v85, (unsigned __int8 *)&v76, "%s", v12, v13, v14, v15, v16, v17);
  }
  v97 = 0x10000001ALL;
  v92 = &off_1E25C7070;
  v93 = a2;
  v94 = 1;
  v95 = a2;
  v96 = a2;
  v18 = v99;
  v98 = v99;
  if (a2 > 3)
  {
    bzero(v99, a2 - 1);
    v99[a2 - 1] = 0;
    v19 = a2;
  }
  else
  {
    if (!a2)
    {
      v22 = 0;
      goto LABEL_28;
    }
    v19 = a2;
    bzero(v99, a2);
  }
  v20 = 0;
  v21 = *(_QWORD *)(a3 + 32);
  v22 = 1;
  do
  {
    v23 = *(int *)(v21 + 4 * v20);
    if (v18[v23])
    {
      LOWORD(v85) = 2;
      LOBYTE(v76) = 4;
      cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1272), "ReorderStates(): order must reference each state once and only once.");
      if (*(char *)(a1 + 1295) >= 0)
        LOBYTE(v29) = a1 - 8;
      else
        v29 = *(_QWORD *)(a1 + 1272);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v85, (unsigned __int8 *)&v76, "%s", v24, v25, v26, v27, v28, v29);
      v21 = *(_QWORD *)(a3 + 32);
      v18 = v98;
      v23 = *(int *)(v21 + 4 * v20);
    }
    v18[v23] = 1;
    ++v20;
  }
  while (v19 != v20);
LABEL_28:
  sub_18D053AA8(a1 + 8, a1 + 552);
  sub_18D053AA8(a1 + 256, a1 + 800);
  sub_18D053AA8(a1 + 304, a1 + 848);
  if ((v22 & 1) != 0)
  {
    v30 = 0;
    do
    {
      v31 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v30);
      *(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * v30) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v31);
      sub_18D1D5D9C((uint64_t)&v85, a1 + 256, v31);
      sub_18D1D5D9C((uint64_t)&v76, a1 + 800, v30);
      v32 = v77;
      if ((_DWORD)v77 != (_DWORD)v86)
        __assert_rtn("operator=", "cnsubmatrix.h", 436, "this->num_rows_ == A.num_rows_");
      v33 = DWORD1(v77);
      if (DWORD1(v77) != DWORD1(v86))
        __assert_rtn("operator=", "cnsubmatrix.h", 437, "this->num_cols_ == A.num_cols_");
      if (DWORD1(v77))
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = v88;
        v38 = v82;
        v39 = v83;
        v40 = HIDWORD(v77);
        v41 = v81;
        v42 = v79;
        do
        {
          if (v32)
          {
            v43 = *(_DWORD *)(v41 + 20) * *(_DWORD *)(v39 + 4 * v36);
            v44 = *(_QWORD *)(v41 + 32);
            v45 = v34;
            v46 = v38;
            v47 = v35;
            v48 = v32;
            do
            {
              v49 = v37[v45];
              v50 = *v46++;
              *(_QWORD *)(v44 + 8 * (v50 + v43)) = v49;
              v42[v47++] = v49;
              ++v45;
              --v48;
            }
            while (v48);
          }
          ++v36;
          v35 += v40;
          v34 += v32;
        }
        while (v36 != v33);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8 * v30++) = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v31);
    }
    while (v30 != a2);
    sub_18D053AA8(a1 + 256, a1 + 800);
    v51 = 0;
    do
    {
      sub_18D1D5E40((uint64_t)&v85, a1 + 256, *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v51));
      sub_18D1D5E40((uint64_t)&v76, a1 + 800, v51);
      v52 = v77;
      if ((_DWORD)v77 != (_DWORD)v86)
        __assert_rtn("operator=", "cnsubmatrix.h", 436, "this->num_rows_ == A.num_rows_");
      v53 = DWORD1(v77);
      if (DWORD1(v77) != DWORD1(v86))
        __assert_rtn("operator=", "cnsubmatrix.h", 437, "this->num_cols_ == A.num_cols_");
      if (DWORD1(v77))
      {
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = v88;
        v58 = v82;
        v59 = v84;
        v60 = HIDWORD(v77);
        v61 = v81;
        v62 = v79;
        do
        {
          if (v52)
          {
            v63 = *(_DWORD *)(v61 + 20) * *(_DWORD *)(v59 + 4 * v56);
            v64 = *(_QWORD *)(v61 + 32);
            v65 = v54;
            v66 = v58;
            v67 = v55;
            v68 = v52;
            do
            {
              v69 = v57[v65];
              v70 = *v66++;
              *(_QWORD *)(v64 + 8 * (v70 + v63)) = v69;
              v62[v67++] = v69;
              ++v65;
              --v68;
            }
            while (v68);
          }
          ++v56;
          v55 += v60;
          v54 += v52;
        }
        while (v56 != v53);
      }
      ++v51;
    }
    while (v51 != a2);
  }
  else
  {
    sub_18D053AA8(a1 + 256, a1 + 800);
  }
  sub_18D1C99C8((uint64_t)v74);
  v78 = 0x10000001ALL;
  v76 = &unk_1E25C70A0;
  v77 = xmmword_18D319790;
  v79 = &v80;
  v87 = 0x10000001ALL;
  v85 = &unk_1E25C70A0;
  v86 = xmmword_18D319790;
  v88 = &v89;
  sub_18D1C99C8((uint64_t)v90);
  sub_18D054C20(a1 + 800, a1 + 848, (uint64_t)&v85, (uint64_t)v90, (uint64_t)&v76, (uint64_t)v74);
  v71 = v91;
  v90[0] = &unk_1E25C7160;
  v91 = 0;
  if (v71)
    MEMORY[0x18D78B5BC](v71, 0x1000C8000313F17);
  sub_18D053AA8(a1 + 800, (uint64_t)v74);
  sub_18D053AA8(a1 + 848, (uint64_t)&v76);
  sub_18D053AA8(a1 + 8, a1 + 552);
  sub_18D053AA8(a1 + 256, a1 + 800);
  v72 = sub_18D053AA8(a1 + 304, a1 + 848);
  *(_DWORD *)(a1 + 1108) = 1;
  result = v75;
  v74[0] = &unk_1E25C7160;
  v75 = 0;
  if (result)
    return MEMORY[0x18D78B5BC](result, 0x1000C8000313F17, v72);
  return result;
}

void sub_18D1D5C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = *(_QWORD *)(v17 - 192);
  *(_QWORD *)(v17 - 232) = &unk_1E25C7160;
  *(_QWORD *)(v17 - 192) = 0;
  if (v19)
    MEMORY[0x18D78B5BC](v19, 0x1000C8000313F17);
  if (a17)
    MEMORY[0x18D78B5BC](a17, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1D5CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_OWORD *)(a1 + 8) = xmmword_18D319790;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C55A0;
  *(_QWORD *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 176) = 0x10000001ALL;
  *(_QWORD *)(a1 + 152) = &unk_1E25C70D0;
  *(_OWORD *)(a1 + 160) = xmmword_18D319790;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  sub_18D053D7C(a1 + 152, a3);
  v6 = *(_DWORD *)(a1 + 160);
  v5 = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 184);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_DWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_DWORD *)(v9 + 4 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1D5D74(_QWORD *a1)
{
  a1[19] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D5D9C(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v3;
  int v4;
  int i;
  void *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD v14[26];
  void *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  int v19;

  v17 = 0x100000001;
  v15 = &unk_1E25C6A70;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v16 = v3;
  v18 = &v19;
  v19 = a3;
  v4 = *(_DWORD *)(a2 + 12);
  v12 = 0x10000001ALL;
  v7 = &unk_1E25C70D0;
  v8 = v4;
  v9 = 1;
  v10 = v4;
  v11 = v4;
  v13 = v14;
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      v14[i] = i;
  }
  return sub_18D1D2ED0(a1, a2, (uint64_t)&v15, (uint64_t)&v7);
}

uint64_t sub_18D1D5E40(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  int i;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  int v24;
  void *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD v32[26];

  v5 = *(_DWORD *)(a2 + 8);
  v30 = 0x10000001ALL;
  v25 = &unk_1E25C70D0;
  v26 = v5;
  v27 = 1;
  v28 = v5;
  v29 = v5;
  v31 = v32;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
      v32[i] = i;
  }
  v22 = 0x100000001;
  v20 = &unk_1E25C6A70;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  v21 = v7;
  v23 = &v24;
  v24 = a3;
  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_OWORD *)(a1 + 8) = xmmword_18D319790;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C4E20;
  *(_QWORD *)(a1 + 280) = 0x10000001ALL;
  *(_QWORD *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = &unk_1E25C70D0;
  *(_OWORD *)(a1 + 264) = xmmword_18D319790;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  *(_QWORD *)(a1 + 424) = 0x100000001;
  *(_QWORD *)(a1 + 400) = &unk_1E25C6A70;
  *(_OWORD *)(a1 + 408) = v7;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  sub_18D053D7C(a1 + 256, (uint64_t)&v25);
  result = sub_18D053D7C(a1 + 400, (uint64_t)&v20);
  v9 = *(unsigned int *)(a1 + 272);
  v10 = *(unsigned int *)(a1 + 416);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v9)
      {
        v15 = *(int **)(a1 + 288);
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 432) + 4 * v12) * v13;
        v17 = *(_QWORD *)(a1 + 32);
        v18 = v11;
        result = v9;
        do
        {
          v19 = *v15++;
          *(_QWORD *)(v17 + 8 * v18++) = *(_QWORD *)(v14 + 8 * (v19 + v16));
          --result;
        }
        while (result);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return result;
}

_QWORD *sub_18D1D5FD0(_QWORD *result)
{
  result[50] = &unk_1E25C5EA0;
  result[32] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1D5FF8(_QWORD *result)
{
  *result = &unk_1E25C5E40;
  return result;
}

void sub_18D1D600C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E40;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D6030(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D603C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  int v11;
  char v12;
  _BYTE v13[26];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_BYTE *)(v7 + v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_BYTE *)(v7 + v11);
              *(_BYTE *)(v7 + v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D6138(_QWORD *a1)
{
  a1[50] = &unk_1E25C5EA0;
  a1[32] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D6170(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int *v7;
  int v8;
  uint64_t v9;
  int *v10;
  int *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  int v16;

  *(_QWORD *)(result + 24) = 0x10000001ALL;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E25C70D0;
  *(_QWORD *)(result + 8) = 0;
  if (result == a2)
  {
    v15 = "this != &(A)";
    v16 = 603;
    goto LABEL_16;
  }
  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  v4 = (v3 * v2);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  v5 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Au)
  {
    v15 = "this->max_num_rows_ >= A.num_rows_";
    v16 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v15 = "this->max_num_cols_ >= A.num_cols_";
    v16 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v16, v15);
  }
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 > 3)
  {
    v9 = (v6 - 1);
    v10 = *(int **)(a2 + 32);
    v11 = v10;
    v12 = (_DWORD *)(result + 40);
    v13 = v9;
    do
    {
      v14 = *v11++;
      *v12++ = v14;
      --v13;
    }
    while (v13);
    v5[v9] = v10[v9];
  }
  else if ((int)v4 >= 1)
  {
    v7 = *(int **)(a2 + 32);
    do
    {
      v8 = *v7++;
      *v5++ = v8;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18D1D6288(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

void sub_18D1D629C(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D62C0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D62CC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[26];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1D63C0(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int v7;
  const char *v8;
  int v9;

  *(_QWORD *)(result + 24) = 0x10000001ALL;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E25C70D0;
  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = v2;
  v4 = (v2 * v3);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v3;
  v5 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Au)
  {
    v8 = "this->max_num_rows_ >= A.NumRows()";
    v9 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v8 = "this->max_num_cols_ >= A.NumCols()";
    v9 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  if ((int)v4 >= 1)
  {
    v6 = *(int **)(a2 + 32);
    do
    {
      v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18D1D6480(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

void sub_18D1D6494(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D64B8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D64C4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[9];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D65B8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D65DC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D65E8(uint64_t a1)
{
  char v1[2];

  sub_18D159878(a1, v1);
}

_QWORD *sub_18D1D6608(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8630;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D1D6664(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x100002324;
  *(_QWORD *)a1 = &off_1E25C8630;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319B60;
  sub_18D1D687C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1D66B8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1D66F4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8630;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D6760(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1D687C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1D6788(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x2324uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1D687C(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x11920uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

_QWORD *sub_18D1D68EC(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1D6900(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D6924(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D6930(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[28];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

__n128 sub_18D1D6A24(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x10000001ALL;
  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C70A0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Au)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1D6B44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D6B58(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D6B7C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D6B88(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[9];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D6C7C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D6CA0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D6CAC(uint64_t a1)
{
  char v1[100];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1D6CF8(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D6D1C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D6D28(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[81];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

double sub_18D1D6E1C(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x10000001CLL;
  *(_QWORD *)(a1 + 24) = 0x10000001CLL;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C72B0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Cu)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1D6EDC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1D6EF0(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0x10000001ALL;
  *(_QWORD *)(a1 + 24) = 0x10000001ALL;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C70A0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Au)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1D6FB0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D6FC4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const char *v11;
  int v12;

  *(_QWORD *)(a1 + 24) = 0x1A0000001ALL;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C7160;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = v5 * v4;
  *(_DWORD *)(a1 + 20) = v4;
  sub_18D1C7354(a1);
  v6 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  if (!v6)
  {
    v11 = "this->allocated_data_ != NULL";
    v12 = 566;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + 24) < *(_DWORD *)(a2 + 8))
  {
    v11 = "this->max_num_rows_ >= A.NumRows()";
    v12 = 567;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + 28) < *(_DWORD *)(a2 + 12))
  {
    v11 = "this->max_num_cols_ >= A.NumCols()";
    v12 = 568;
LABEL_11:
    __assert_rtn("CNMatrix", "cnmatrix.h", v12, v11);
  }
  v7 = *(unsigned int *)(a1 + 16);
  if ((int)v7 >= 1)
  {
    v8 = *(uint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      *v6++ = v9;
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1D70AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1D70E8(_QWORD *a1)
{
  a1[64] = &unk_1E25C5EA0;
  a1[58] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D7120(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D712C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[52];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D7220(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1D7244(_QWORD *a1)
{
  a1[76] = &unk_1E25C5EA0;
  a1[58] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D727C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D7288(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[52];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D737C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t **sub_18D1D73A0(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    *((_DWORD *)v7 + 10) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_18D083D78(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_18D1D746C(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D7490(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D749C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[19];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D7590(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D75B4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D75C0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[19];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D76B4(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D76D8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D76E4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[7];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1D77AC(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1700000017;
  *(_QWORD *)a1 = &unk_1E25C6F80;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319B70;
  sub_18D1C71F0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1D7800(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1D783C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x200000002;
  *(_QWORD *)a1 = &unk_1E25C75B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319340;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D7894(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D78A8(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_18D1D7AF8(a1, 23, 23);
  *(_OWORD *)(v1 + 8) = xmmword_18D319B70;
  return sub_18D04BE88(v1, 0.0);
}

void sub_18D1D78D4(uint64_t a1, uint64_t a2)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = 0x100000006;
  v7 = &unk_1E25C8120;
  v8 = xmmword_18D319950;
  v10 = &v11;
  v4 = 0x600000006;
  v2 = &unk_1E25C81B0;
  v3 = xmmword_18D314680;
  v5 = &v6;
  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_QWORD *)a1 = &unk_1E25C81B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D314680;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D05C770(a2, (uint64_t)&v7, (uint64_t)&v2, a1);
}

void sub_18D1D7988(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D799C(uint64_t a1, uint64_t a2)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_QWORD *)a1 = &unk_1E25C81B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D314680;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v9 = 0x100000006;
  v7 = &unk_1E25C8150;
  v8 = xmmword_18D319950;
  v10 = &v11;
  v4 = 0x100000018;
  v2 = &unk_1E25C7010;
  v3 = xmmword_18D319B80;
  v5 = &v6;
  sub_18D04F504(a2, (uint64_t)&v7, (uint64_t)&v2, a1);
}

void sub_18D1D7A6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D7A80(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_QWORD *)a1 = &unk_1E25C81B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D314680;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v2 = 0;
  sub_18D05C654(a2, a1, &v2);
}

void sub_18D1D7AE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D7AF8(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x1700000017;
  *(_QWORD *)a1 = &unk_1E25C6F80;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1C71F0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1D7B4C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D1D7B88(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1D7B9C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D7BC0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D7BCC(uint64_t a1)
{
  char v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1D7C18(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D7C3C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D7C48(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D7D3C(_QWORD *a1)
{
  *a1 = off_1E25C5C90;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D7D5C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D7D68(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[4];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

_QWORD *sub_18D1D7E3C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1D7E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x1200000012;
  *(_QWORD *)a1 = &off_1E25C6590;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A90;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D7EA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D7EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x1300000012;
  *(_QWORD *)a1 = &off_1E25C65C0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A70;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D7F10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1D7F24(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1D7F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0xF00000012;
  *(_QWORD *)a1 = &off_1E25C6560;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A80;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D7F90(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1D7FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x100000012;
  *(_QWORD *)a1 = &off_1E25C65F0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A50;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D053FA4(a2, a3, a1);
  return result;
}

void sub_18D1D7FFC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D8010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000012;
  *(_QWORD *)a1 = &off_1E25C65F0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A50;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D8068(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1D807C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000012;
  *(_QWORD *)a1 = &off_1E25C65F0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A50;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D80D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1D80E8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1D80FC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1D8110(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1D8124(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D8148(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D8154(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[18];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D8248(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D826C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D8278(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[342];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D8374(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D8398(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D83A4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[342];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D84A0(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D84C4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D84D0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[324];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D85CC(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D85F0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D85FC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[270];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1D86F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000013;
  *(_OWORD *)(a1 + 8) = xmmword_18D319860;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C54B0;
  *(_QWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 224) = 0x100000013;
  *(_QWORD *)(a1 + 200) = &off_1E25C66E0;
  *(_OWORD *)(a1 + 208) = xmmword_18D319860;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  sub_18D053D7C(a1 + 200, a3);
  v6 = *(_DWORD *)(a1 + 208);
  v5 = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 232);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1D87A8(_QWORD *a1)
{
  a1[25] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1D87DC(_QWORD *a1)
{
  *a1 = &unk_1E25C5E10;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D8800(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D880C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[4];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D1D88D8(_QWORD *a1)
{
  *a1 = off_1E25C5CF0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D88F8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D8904(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[4];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

_QWORD *sub_18D1D89D8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1D89EC(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x1A0000001ALL;
  *(_QWORD *)a1 = &unk_1E25C7160;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1C7354(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1D8A40(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1D8A7C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1D8AA0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1D8AAC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[390];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1D8BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000012;
  *(_QWORD *)a1 = &off_1E25C65F0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A50;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1D8C00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D1D8C14(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x10000001CLL;
  *(_QWORD *)(a1 + 24) = 0x10000001CLL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C72B0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Cu)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1D8D34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1D8D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  cnprint::CNPrinter *LogLevel;
  double v54;
  double v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  cnprint::CNPrinter *v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL4 v96;
  unsigned __int8 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (***v105)();
  __n128 v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  int v129;
  uint64_t *v130;
  uint64_t v131;
  __int128 *v132;
  uint64_t v133;
  __int128 *v134;
  _OWORD *v135;
  __int128 v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  int *v151;
  _DWORD *v152;
  int v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  int *v164;
  _DWORD *v165;
  int v166;
  uint64_t (*v167)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  int v168;
  __n128 v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  __int128 v196;
  int v197;
  uint64_t v198;
  _DWORD *v199;
  int v200;
  int v201;
  int v202;
  int v203;
  uint64_t (*v204)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double);
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  unsigned int (*v211)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128);
  __n128 v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  __int128 v220;
  int v221;
  uint64_t v222;
  _DWORD *v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  _DWORD *v233;
  int v234;
  int v235;
  int i;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  double *v240;
  uint64_t v241;
  int v242;
  double v243;
  unsigned int v244;
  uint64_t v245;
  double v246;
  double v247;
  uint64_t v248;
  int32x4_t v249;
  uint64_t v250;
  uint64_t v251;
  int32x4_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t *v260;
  void **v261;
  double *v262;
  int v263;
  void **v264;
  int v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  double *v270;
  void **v271;
  uint64_t *v272;
  uint64_t (***v273)();
  double *v274;
  int v275;
  uint64_t (**v276)();
  int v277;
  void **v278;
  int v279;
  double v280;
  int v281;
  _QWORD *v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  __int128 v291;
  std::string *v292;
  std::string::size_type v293;
  unint64_t v294;
  uint64_t v295;
  unsigned int v296;
  int v297;
  signed int v298;
  _QWORD *v299;
  uint64_t v300;
  unint64_t v301;
  double v302;
  _BOOL4 v303;
  _BOOL4 v304;
  uint64_t v305;
  unint64_t v306;
  double v307;
  int v308;
  double *v309;
  uint64_t v310;
  unint64_t v311;
  double v312;
  _BOOL4 v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  double v324;
  double *v325;
  double *v326;
  uint64_t v327;
  double v328;
  uint64_t v329;
  int v330;
  double *v331;
  int v332;
  double *v333;
  uint64_t v334;
  _QWORD *v335;
  int v336;
  uint64_t v337;
  double *v338;
  double *v339;
  double *v340;
  uint64_t v341;
  double *v342;
  uint64_t v343;
  _QWORD *v344;
  double *v345;
  uint64_t v346;
  uint64_t v347;
  double *v348;
  double *v349;
  double *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  double v355;
  int v356;
  double v357;
  double *v358;
  uint64_t v359;
  double v360;
  int v361;
  double v362;
  double *v363;
  uint64_t v364;
  double v365;
  int v366;
  double v367;
  double *v368;
  uint64_t v369;
  double v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  double *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  double *v384;
  uint64_t v385;
  double v386;
  double *v387;
  double *v388;
  uint64_t v389;
  double v390;
  _QWORD *v391;
  uint64_t v392;
  double *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  double v397;
  _QWORD *v398;
  int v399;
  double v400;
  uint64_t v401;
  double *v402;
  double v403;
  double v404;
  double v405;
  int v406;
  uint64_t v407;
  double *v408;
  double v409;
  _QWORD *v410;
  double v411;
  int v412;
  uint64_t v413;
  double *v414;
  double v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  __int128 v419;
  int v420;
  int v421;
  _DWORD *v422;
  int v423;
  int v424;
  int j;
  int v426;
  cnstatistics *v427;
  uint64_t v428;
  double v429;
  double *v430;
  double v431;
  __int128 v432;
  __int128 v433;
  float64x2_t v434;
  uint64_t v435;
  __n128 v436;
  int v437;
  _BOOL4 v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unsigned int v445;
  char v446;
  __int128 v447;
  int v448;
  uint64_t *v449;
  uint64_t v450;
  cnprint::CNPrinter *v451;
  double v452;
  double v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  cnstatistics *v460;
  double v461;
  double v462;
  __n128 v463;
  uint64_t v464;
  int v465;
  int k;
  int v467;
  int v468;
  cnprint::CNLogFormatter *v469;
  uint64_t v470;
  __int128 v471;
  int v472;
  int v473;
  _DWORD *v474;
  unsigned int v475;
  int v476;
  int m;
  int v478;
  __n128 v479;
  uint64_t v480;
  __n128 v481;
  uint64_t v482;
  __n128 v483;
  uint64_t v484;
  long double v485;
  double v486;
  uint64_t v487;
  uint64_t v488;
  unsigned int v489;
  uint64_t v490;
  double *v491;
  uint64_t v492;
  int v493;
  double v494;
  unsigned int v495;
  uint64_t v496;
  double v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unsigned int v502;
  uint64_t v503;
  double *v504;
  uint64_t v505;
  int v506;
  double v507;
  unsigned int v508;
  uint64_t v509;
  double v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unsigned int v515;
  uint64_t v516;
  double *v517;
  uint64_t v518;
  int v519;
  double v520;
  unsigned int v521;
  uint64_t v522;
  double v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  double *v530;
  uint64_t v531;
  int v532;
  double v533;
  unsigned int v534;
  uint64_t v535;
  double v536;
  double v537;
  uint64_t v538;
  uint64_t v539;
  double v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  __n128 v544;
  uint64_t v545;
  int v546;
  double v547;
  __n128 v548;
  _QWORD *v549;
  __n128 v550;
  uint64_t v551;
  uint64_t v552;
  __int128 v553;
  uint64_t v554;
  int32x4_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  int v560;
  uint64_t v561;
  int v562;
  _QWORD *v563;
  _QWORD *v564;
  uint64_t *v565;
  double *v566;
  int v567;
  int *v568;
  int v569;
  uint64_t v570;
  int v571;
  _QWORD *v572;
  int v573;
  uint64_t v574;
  double *v575;
  uint64_t v576;
  double *v577;
  uint64_t v578;
  double *v579;
  _OWORD *v580;
  __int128 v581;
  uint64_t v582;
  unsigned int v583;
  unsigned int v584;
  uint64_t v585;
  _QWORD *v586;
  uint64_t v587;
  int *v588;
  double *v589;
  uint64_t v590;
  _QWORD *v591;
  double *v592;
  uint64_t v593;
  double *v594;
  uint64_t v595;
  double *v596;
  _OWORD *v597;
  __int128 v598;
  uint64_t v599;
  unsigned int v600;
  __int128 v601;
  int v602;
  uint64_t v603;
  _DWORD *v604;
  __int128 v605;
  int v606;
  unsigned int v607;
  uint64_t v608;
  __n128 v609;
  uint64_t v610;
  __n128 v611;
  uint64_t v612;
  __n128 v613;
  uint64_t v614;
  __n128 v615;
  uint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unsigned __int8 v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  _QWORD *v640;
  uint64_t v641;
  uint64_t v642;
  _QWORD *v643;
  _QWORD *v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  _QWORD *v649;
  _QWORD *v650;
  uint64_t v651;
  uint64_t v652;
  _QWORD *v653;
  unint64_t v654;
  uint64_t v655;
  cnprint::CNPrinter *v656;
  uint64_t v657;
  unint64_t v658;
  unsigned int v659;
  int v660;
  double *v661;
  double v662;
  unint64_t v663;
  double v664;
  unsigned __int8 v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  cnprint::CNPrinter *v674;
  uint64_t v675;
  const char *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  int32x4_t v683;
  cnprint::CNPrinter *v684;
  _DWORD *v685;
  uint64_t v686;
  int *v687;
  int v688;
  __n128 v689;
  uint64_t v690;
  cnstatistics *v691;
  cnprint::CNPrinter *v692;
  double v693;
  uint64_t v694;
  double v695;
  unint64_t *v696;
  unint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  char v710;
  uint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  const char *v716;
  const char *v717;
  int v718;
  const char *v719;
  int v720;
  const char *v721;
  int v722;
  const char *v723;
  int v724;
  uint64_t *v725;
  double v726;
  _BOOL4 v727;
  uint64_t v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  unsigned int (*v732)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128);
  uint64_t (*v733)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v734;
  uint64_t v735;
  unint64_t v736;
  double v737;
  int v738;
  uint64_t v739;
  uint64_t v740;
  int v741;
  double v742;
  int v743;
  unsigned int v744;
  uint64_t v745;
  unsigned int v746;
  char v747;
  uint64_t v748;
  int v749;
  int v750;
  uint64_t v751;
  cnprint::CNLogFormatter *v752;
  cnprint::CNLogFormatter *v753;
  const void **v754;
  int v755;
  uint64_t v756;
  double v757;
  uint64_t (**v758)();
  __int128 v759;
  uint64_t v760;
  _QWORD *v761;
  _QWORD v762[44];
  uint64_t (**v763)();
  std::string v764;
  double *v765;
  _QWORD v766[2];
  uint64_t (**v767)();
  __int128 v768;
  uint64_t v769;
  uint64_t *v770;
  uint64_t v771;
  void *v772;
  void *v773;
  uint64_t (**v774)();
  __int128 v775;
  uint64_t v776;
  _QWORD *v777;
  _QWORD v778[13];
  uint64_t (**v779)();
  __int128 v780;
  uint64_t v781;
  int *v782;
  uint64_t v783;
  uint64_t (***v784)();
  void *v785;
  __int128 v786;
  uint64_t v787;
  void **v788;
  void *v789;
  uint64_t (**v790)();
  __int128 v791;
  uint64_t v792;
  uint64_t *v793;
  uint64_t v794;
  void *v795;
  int v796;
  int v797;
  int v798;
  int v799;
  uint64_t v800;
  _QWORD *v801;
  _QWORD v802[25];
  uint64_t (**v803)();
  __int128 v804;
  uint64_t v805;
  _QWORD *v806;
  _QWORD v807[68];
  uint64_t (**v808)();
  __int128 v809;
  uint64_t v810;
  int *v811;
  _BYTE v812[352];
  void *v813;
  __int128 v814;
  uint64_t v815;
  _BYTE *v816;
  _BYTE v817[696];
  uint64_t (**v818)();
  __int128 v819;
  uint64_t v820;
  _QWORD *v821;
  _QWORD v822[87];
  _QWORD v823[2];
  int v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t (**v827)();
  __int128 v828;
  uint64_t v829;
  _BYTE *v830;
  _BYTE v831[352];
  double v832;
  char v833;
  void *v834;
  __int128 v835;
  uint64_t v836;
  _DWORD *v837;
  _DWORD v838[88];
  uint64_t (**v839)();
  __int128 v840;
  uint64_t v841;
  double *v842;
  _QWORD v843[87];
  uint64_t (**v844)();
  __int128 v845;
  uint64_t v846;
  double *v847;
  _QWORD v848[136];
  std::string __p;
  uint64_t v850;
  _QWORD *v851;
  _QWORD v852[136];
  void *v853;
  int v854;
  int v855;
  int v856;
  int v857;
  uint64_t v858;
  _QWORD *v859;
  _QWORD v860[2];
  uint64_t (**v861)();
  __int128 v862;
  uint64_t v863;
  _QWORD *v864;
  _QWORD *v865;
  uint64_t (**v866)();
  int v867;
  int v868;
  int v869;
  int v870;
  uint64_t v871;
  _QWORD *v872;
  _QWORD *v873;
  uint64_t (**v874)();
  int v875;
  int v876;
  int v877;
  int v878;
  _QWORD *v879;
  uint64_t v880;
  uint64_t (**v881)();
  int v882;
  unsigned int v883;
  int v884;
  int v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t (**v889)();
  int v890;
  unsigned int v891;
  int v892;
  int v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  void *v897;
  int v898;
  int v899;
  int v900;
  int v901;
  uint64_t v902;
  uint64_t *v903;
  uint64_t v904;
  void *v905;
  __int128 v906;
  uint64_t v907;
  _BYTE *v908;
  _BYTE v909[696];
  uint64_t (**v910)();
  __int128 v911;
  uint64_t v912;
  uint64_t *v913;
  uint64_t v914;
  void *v915;
  __int128 v916;
  uint64_t v917;
  uint64_t *v918;
  uint64_t v919;
  uint64_t (**v920)();
  int v921;
  unsigned int v922;
  int v923;
  int v924;
  double *v925;
  uint64_t v926;
  void *v927;
  int v928;
  int v929;
  int v930;
  int v931;
  uint64_t v932;
  void *v933;
  int v934;
  int v935;
  int v936;
  int v937;
  uint64_t v938;
  void *v939;
  int v940;
  int v941;
  int v942;
  int v943;
  uint64_t v944;
  double *v945;
  uint64_t v946;
  uint64_t (**v947)();
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  double *v951;
  _QWORD v952[23];
  _QWORD v953[31];
  _BYTE v954[32];
  double *v955;
  uint64_t (**v956)();
  __int128 v957;
  uint64_t v958;
  uint64_t *v959;
  uint64_t v960;

  v26 = MEMORY[0x1E0C80A78](a1, a2);
  v739 = v28;
  v740 = v27;
  v748 = v29;
  v31 = v30;
  v751 = v32;
  v34 = v33;
  v36 = v35;
  v37 = v26;
  if (a19 >= 1)
  {
    v38 = 0;
    do
    {
      sub_18D04DA0C((uint64_t)&v763, *(_QWORD *)(a11 + 32) + v38);
      v38 += 64;
    }
    while ((unint64_t)a19 << 6 != v38);
    v39 = 0;
    v40 = 0;
    do
    {
      sub_18D04DA0C((uint64_t)&v763, *(_QWORD *)(a13 + 32) + v40);
      sub_18D159B20((uint64_t)&v763, *(_QWORD *)(a14 + 32) + v39);
      sub_18D159B20((uint64_t)&v763, *(_QWORD *)(a14 + 32) + v39);
      v40 += 64;
      v39 += 112;
    }
    while ((unint64_t)a19 << 6 != v40);
  }
  v41 = *(_DWORD *)(a16 + 8);
  v764.__r_.__value_.__r.__words[2] = 0x100000004;
  v763 = (uint64_t (**)())&unk_1E25C7E80;
  v764.__r_.__value_.__r.__words[0] = v41 | 0x100000000;
  LODWORD(v764.__r_.__value_.__r.__words[1]) = v41;
  HIDWORD(v764.__r_.__value_.__r.__words[1]) = v41;
  v765 = (double *)v766;
  if (v41)
  {
    v42 = 0;
    v43 = *(_QWORD *)(a16 + 32);
    do
    {
      *((_DWORD *)v766 + v42) = *(_DWORD *)(v43 + 4 * (int)v42);
      ++v42;
    }
    while (v41 != (_DWORD)v42);
  }
  sub_18D1DF554((uint64_t)&__p, a16, 1);
  v765 = (double *)v766;
  v44 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  LODWORD(v764.__r_.__value_.__l.__data_) = 1;
  HIDWORD(v764.__r_.__value_.__r.__words[0]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  HIDWORD(v764.__r_.__value_.__r.__words[2]) = 1;
  LODWORD(v764.__r_.__value_.__r.__words[1]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  *(std::string::size_type *)((char *)&v764.__r_.__value_.__r.__words[1] + 4) = 0x400000001;
  if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
  {
    v45 = 0;
    v46 = v851;
    v47 = __p.__r_.__value_.__r.__words[1];
    v48 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
    v49 = 1;
    do
    {
      v50 = *((_DWORD *)v46 + v47 * v45);
      v51 = v49;
      v52 = v48;
      if (v47 >= 2)
      {
        do
        {
          v50 += *((_DWORD *)v46 + v51++);
          --v52;
        }
        while (v52);
      }
      *((_DWORD *)v766 + v45++) = v50;
      v49 += v47;
    }
    while (v45 != v44);
  }
  v750 = v36;
  v744 = v31;
  v745 = v37;
  v764.__r_.__value_.__r.__words[2] = 0x100000004;
  v763 = (uint64_t (**)())&unk_1E25C7E80;
  *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D313090;
  v765 = (double *)v766;
  LogLevel = (cnprint::CNPrinter *)sub_18D1CE424(a23, 1, (uint64_t)&v763);
  v54 = *(double *)(a26 + 64);
  v755 = *(unsigned __int8 *)(a26 + 32);
  v738 = *(unsigned __int8 *)(a26 + 33);
  v55 = *(double *)(a26 + 40);
  v729 = *(unsigned __int8 *)(a26 + 88);
  v732 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128))(a26 + 72);
  v733 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a26 + 96);
  v730 = *(_QWORD *)(a26 + 56);
  v731 = *(_QWORD *)(a26 + 80);
  if (a19 >= 1)
  {
    v56 = 0;
    do
    {
      v57 = *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v56);
      v58 = *(_DWORD *)(*(_QWORD *)(a12 + 32) + 4 * v56);
      if (v57 <= v58)
      {
        ++v56;
      }
      else
      {
        LOWORD(v763) = 2;
        __p.__r_.__value_.__s.__data_[0] = 2;
        cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v37 + 1272), "%d measurements > %d noise sources in measurement function %d.", v57, v58, ++v56);
        if (*(char *)(v37 + 1295) >= 0)
          LOBYTE(v64) = v37 - 8;
        else
          v64 = *(_QWORD *)(v37 + 1272);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&__p, "%s", v59, v60, v61, v62, v63, v64);
      }
    }
    while (v56 != a19);
  }
  if (*(_DWORD *)a26)
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (LogLevel <= 1)
    {
      LOWORD(v763) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v65 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v37 + 1272), "PredictAndUpdate is only compatible with NewtonRaphson solver.");
      if (*(char *)(v37 + 1295) >= 0)
        LOBYTE(v71) = v65;
      else
        v71 = *(_QWORD *)(v37 + 1272);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&__p, "%s", v66, v67, v68, v69, v70, v71);
    }
  }
  if (*(int *)(a26 + 4) >= 2 && cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v763) = 2;
    __p.__r_.__value_.__s.__data_[0] = 1;
    v72 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v37 + 1272), "PredictAndUpdate is only compatible with single-iteration least squares solutions.");
    if (*(char *)(v37 + 1295) >= 0)
      LOBYTE(v78) = v72;
    else
      v78 = *(_QWORD *)(v37 + 1272);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&__p, "%s", v73, v74, v75, v76, v77, v78);
  }
  v79 = *(_DWORD *)(a26 + 8);
  v764.__r_.__value_.__r.__words[2] = 0x100000057;
  v763 = (uint64_t (**)())&unk_1E25C83F0;
  *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D3197F0;
  v765 = (double *)v766;
  v80 = (cnprint::CNPrinter *)sub_18D1CE424(a9, 1, (uint64_t)&v763);
  if (v79 < *(_DWORD *)v765)
  {
    v80 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v80);
    if (v80 <= 1)
    {
      LOWORD(v763) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v81 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v37 + 1272), "PredictAndUpdate is only compatible with QR factorizations of unconstrained size.");
      if (*(char *)(v37 + 1295) >= 0)
        LOBYTE(v87) = v81;
      else
        v87 = *(_QWORD *)(v37 + 1272);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&__p, "%s", v82, v83, v84, v85, v86, v87);
    }
  }
  v88 = v31;
  if (*(_BYTE *)(a26 + 89))
  {
    v80 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v80);
    if (v80 <= 1)
    {
      LOWORD(v763) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v89 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v37 + 1272), "PredictAndUpdate is only compatible with dense prediction.");
      if (*(char *)(v37 + 1295) >= 0)
        LOBYTE(v95) = v89;
      else
        v95 = *(_QWORD *)(v37 + 1272);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&__p, "%s", v90, v91, v92, v93, v94, v95);
    }
  }
  v96 = v755 != 0;
  if (!v755)
  {
    if (v738)
    {
      v96 = 1;
      if (cnprint::CNPrinter::GetLogLevel(v80) <= 1)
      {
        LOWORD(v763) = 2;
        __p.__r_.__value_.__s.__data_[0] = 1;
        v97 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v37 + 1272), "Local hypothesis testing implies global hypothesis testing.  Global hypothesis testing will be enabled.");
        if (*(char *)(v37 + 1295) >= 0)
          LOBYTE(v103) = v97;
        else
          v103 = *(_QWORD *)(v37 + 1272);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&__p, "%s", v98, v99, v100, v101, v102, v103);
      }
    }
  }
  if (*(_DWORD *)(v34 + 8) && *(_DWORD *)(v34 + 12))
  {
    v104 = v37 + 8;
    v105 = (uint64_t (***)())v34;
  }
  else
  {
    if (v750 < 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
    v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
    v763 = (uint64_t (**)())&unk_1E25C70A0;
    v765 = (double *)v766;
    v764.__r_.__value_.__r.__words[0] = v750 | 0x100000000;
    LODWORD(v764.__r_.__value_.__r.__words[1]) = v750;
    HIDWORD(v764.__r_.__value_.__r.__words[1]) = v750;
    sub_18D04BE88((uint64_t)&v763, 0.0);
    v104 = v37 + 8;
    v105 = &v763;
  }
  sub_18D053AA8(v104, (uint64_t)v105);
  if (*(_DWORD *)(v740 + 8) && *(_DWORD *)(v740 + 12))
  {
    sub_18D053AA8(v37 + 256, v740);
  }
  else
  {
    if (v750 < 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    sub_18D1C96FC((uint64_t)&v763, v750, v750);
    LODWORD(v764.__r_.__value_.__l.__data_) = v750;
    HIDWORD(v764.__r_.__value_.__r.__words[0]) = v750;
    LODWORD(v764.__r_.__value_.__r.__words[1]) = v750 * v750;
    HIDWORD(v764.__r_.__value_.__r.__words[1]) = v750;
    sub_18D04BE88((uint64_t)&v763, 0.0);
    v106 = sub_18D053AA8(v37 + 256, (uint64_t)&v763);
    v107 = v766[0];
    v763 = (uint64_t (**)())&unk_1E25C7160;
    v766[0] = 0;
    if (v107)
      MEMORY[0x18D78B5BC](v107, 0x1000C8000313F17, v106);
  }
  if (!*(_DWORD *)(v751 + 8) || !*(_DWORD *)(v751 + 12))
  {
    v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
    v763 = (uint64_t (**)())&unk_1E25C70A0;
    *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319790;
    v765 = (double *)v766;
    sub_18D053B2C(v37 + 256, v37 + 8, (uint64_t)&v763);
    sub_18D053AA8(v37 + 304, (uint64_t)&v763);
  }
  if (v750 < 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  sub_18D1E08D8((uint64_t)&v763, v31, v750);
  v764.__r_.__value_.__r.__words[0] = __PAIR64__(v750, v31);
  LODWORD(v764.__r_.__value_.__r.__words[1]) = v31 * v750;
  HIDWORD(v764.__r_.__value_.__r.__words[1]) = v31;
  sub_18D04BE88((uint64_t)&v763, 0.0);
  v735 = v37 + 1320;
  v108 = sub_18D053AA8(v37 + 1320, (uint64_t)&v763);
  v109 = v766[0];
  v763 = (uint64_t (**)())&unk_1E25C6FB0;
  v766[0] = 0;
  if (v109)
    MEMORY[0x18D78B5BC](v109, 0x1000C8000313F17, v108);
  v764.__r_.__value_.__r.__words[2] = 0x100000017;
  v763 = &off_1E25C6F20;
  v765 = (double *)v766;
  v764.__r_.__value_.__r.__words[0] = v31 | 0x100000000;
  LODWORD(v764.__r_.__value_.__r.__words[1]) = v31;
  HIDWORD(v764.__r_.__value_.__r.__words[1]) = v31;
  sub_18D04BE88((uint64_t)&v763, 0.0);
  v734 = v37 + 1368;
  sub_18D053AA8(v37 + 1368, (uint64_t)&v763);
  sub_18D053AA8(v37 + 1592, v739);
  *(_DWORD *)(v37 + 1108) = 0;
  *(_BYTE *)(v37 + 1104) = 0;
  v764.__r_.__value_.__r.__words[2] = 0x100000057;
  v763 = (uint64_t (**)())&unk_1E25C83F0;
  *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D3197F0;
  v765 = (double *)v766;
  sub_18D1CE424(a9, 1, (uint64_t)&v763);
  v110 = *(_DWORD *)v765;
  if (*(_DWORD *)v765 >= 0x58u)
  {
    v111 = 2;
    LOWORD(v763) = 2;
    __p.__r_.__value_.__s.__data_[0] = 5;
    v112 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v37 + 1272), "SquareRootInformationFilter::PredictAndUpdate called with %u measurements vs. maximum %u", v110, 87);
    if (*(char *)(v37 + 1295) >= 0)
      LOBYTE(v118) = v112;
    else
      v118 = *(_QWORD *)(v37 + 1272);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&__p, "%s", v113, v114, v115, v116, v117, v118);
    return v111;
  }
  v727 = v96;
  v736 = *(unsigned int *)v765;
  v728 = v37 + 1592;
  v120 = *(_DWORD *)(a21 + 8);
  v119 = *(_DWORD *)(a21 + 12);
  if (v120 <= v119)
    v121 = *(_DWORD *)(a21 + 12);
  else
    v121 = *(_DWORD *)(a21 + 8);
  if (v120 && v119 && v121)
  {
    v123 = *(_DWORD *)(a9 + 8);
    v122 = *(_DWORD *)(a9 + 12);
    v124 = v123 <= v122 ? *(_DWORD *)(a9 + 12) : *(_DWORD *)(a9 + 8);
    if (!v123 || !v122 || v124 <= v121)
    {
      v764.__r_.__value_.__r.__words[2] = 0x100000057;
      v763 = (uint64_t (**)())&unk_1E25C83F0;
      *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D3197F0;
      v765 = (double *)v766;
      sub_18D1CE424(a9, 1, (uint64_t)&v763);
      sub_18D1C59EC((uint64_t *)(v37 + 1248));
      v284 = *(_DWORD *)(a9 + 8);
      if (v284)
      {
        v285 = *(_DWORD *)(a9 + 12);
        if (v285)
        {
          if (v285 | v284)
          {
            v286 = 0;
            v287 = *(_QWORD *)(a9 + 32);
            do
            {
              v288 = v286;
              if (*(int *)(v287 + 4 * v286) >= 1)
              {
                v289 = 0;
                do
                {
                  v290 = *(_QWORD *)(*(_QWORD *)(a21 + 32) + 8 * v288);
                  LODWORD(v763) = *(_DWORD *)(v290 + 8);
                  if (*(char *)(v290 + 39) < 0)
                  {
                    sub_18D077798(&v764, *(void **)(v290 + 16), *(_QWORD *)(v290 + 24));
                    v287 = *(_QWORD *)(a9 + 32);
                  }
                  else
                  {
                    v291 = *(_OWORD *)(v290 + 16);
                    v764.__r_.__value_.__r.__words[2] = *(_QWORD *)(v290 + 32);
                    *(_OWORD *)&v764.__r_.__value_.__l.__data_ = v291;
                  }
                  if (*(int *)(v287 + 4 * v288) >= 2)
                  {
                    std::to_string(&__p, v289);
                    v292 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                         ? &__p
                         : (std::string *)__p.__r_.__value_.__r.__words[0];
                    v293 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                         : __p.__r_.__value_.__l.__size_;
                    std::string::append(&v764, (const std::string::value_type *)v292, v293);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  v294 = *(_QWORD *)(v745 + 1256);
                  if (v294 >= *(_QWORD *)(v745 + 1264))
                  {
                    v295 = sub_18D1E09D4((uint64_t *)(v745 + 1248), (uint64_t)&v763);
                  }
                  else
                  {
                    sub_18D1E096C(v745 + 1248, (uint64_t)&v763);
                    v295 = v294 + 32;
                  }
                  *(_QWORD *)(v745 + 1256) = v295;
                  if (SHIBYTE(v764.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v764.__r_.__value_.__l.__data_);
                  ++v289;
                  v287 = *(_QWORD *)(a9 + 32);
                }
                while (v289 < *(_DWORD *)(v287 + 4 * v288));
                v284 = *(_DWORD *)(a9 + 8);
                v285 = *(_DWORD *)(a9 + 12);
              }
              if (v284 <= v285)
                v296 = v285;
              else
                v296 = v284;
              if (!v284)
                break;
              if (!v285)
                break;
              v286 = v288 + 1;
            }
            while (v296 > (int)v288 + 1);
          }
        }
      }
    }
  }
  sub_18D1C59EC((uint64_t *)(v745 + 1224));
  v725 = (uint64_t *)(v745 + 1200);
  sub_18D1C59EC((uint64_t *)(v745 + 1200));
  sub_18D1D6A24((uint64_t)v954, v34);
  sub_18D1D6A24((uint64_t)v953, v751);
  v950 = 0x100000017;
  v951 = 0;
  v949 = 0;
  v948 = 0;
  v947 = &off_1E25C6F20;
  if (&v947 == (uint64_t (***)())v748)
  {
    v717 = "this != &(A)";
    v718 = 603;
    goto LABEL_717;
  }
  v125 = *(_DWORD *)(v748 + 12);
  LODWORD(v948) = *(_DWORD *)(v748 + 8);
  HIDWORD(v948) = v125;
  v126 = v125 * v948;
  LODWORD(v949) = v125 * v948;
  HIDWORD(v949) = v948;
  v127 = v952;
  v951 = (double *)v952;
  if (v948 > 0x17)
  {
    v717 = "this->max_num_rows_ >= A.num_rows_";
    v718 = 616;
    goto LABEL_717;
  }
  if (v125 >= 2)
  {
    v717 = "this->max_num_cols_ >= A.num_cols_";
    v718 = 617;
LABEL_717:
    __assert_rtn("CNMatrix", "cnmatrix.h", v718, v717);
  }
  v128 = *(_DWORD *)(v748 + 16);
  v726 = v55;
  if (v128 > 3)
  {
    v132 = *(__int128 **)(v748 + 32);
    v133 = (v128 - 1) >> 1;
    v134 = v132;
    v135 = v952;
    v129 = v750;
    do
    {
      v136 = *v134++;
      *v135++ = v136;
      --v133;
    }
    while (v133);
    *(_OWORD *)&v952[v128 - 2] = *(__int128 *)((char *)v132 + 8 * (v128 - 2));
  }
  else
  {
    v129 = v750;
    if ((int)v126 >= 1)
    {
      v130 = *(uint64_t **)(v748 + 32);
      do
      {
        v131 = *v130++;
        *v127++ = v131;
        --v126;
      }
      while (v126);
    }
  }
  v944 = 0x10000001ALL;
  v939 = &unk_1E25C70A0;
  v940 = v129;
  v941 = 1;
  v942 = v129;
  v943 = v129;
  v945 = (double *)&v946;
  sub_18D1C96FC((uint64_t)&v933, v129, v129);
  v934 = v129;
  v935 = v129;
  v137 = v129 * v129;
  v936 = v129 * v129;
  v937 = v129;
  sub_18D04BE88((uint64_t)&v933, 0.0);
  sub_18D1C96FC((uint64_t)&v927, v129, v129);
  v928 = v129;
  v929 = v129;
  v930 = v129 * v129;
  v931 = v129;
  sub_18D04BE88((uint64_t)&v927, 0.0);
  sub_18D1E0CF4((uint64_t)&v920, v129, v744);
  v921 = v129;
  v922 = v744;
  v923 = v744 * v750;
  v924 = v129;
  sub_18D04BE88((uint64_t)&v920, 0.0);
  v917 = 0x10000001ALL;
  v915 = &unk_1E25C70D0;
  v916 = xmmword_18D319790;
  v918 = &v919;
  v912 = 0x100000017;
  v910 = &off_1E25C6F50;
  v911 = xmmword_18D3197B0;
  v913 = &v914;
  v741 = v129 * v129;
  if (a15 < 1)
  {
    v742 = 1.0;
    goto LABEL_163;
  }
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v742 = 1.0;
  v747 = 1;
  do
  {
    v141 = *(unsigned int *)(*(_QWORD *)(a16 + 32) + 4 * v138);
    v846 = 0x1A00000001;
    v844 = &off_1E25C6B60;
    v847 = (double *)v848;
    if ((_DWORD)v141 == 1)
    {
      v142 = 0;
      *(_QWORD *)&v143 = 0x100000001;
      *((_QWORD *)&v143 + 1) = 0x100000001;
      v845 = v143;
      LODWORD(v848[0]) = 0;
      v144 = 1;
      LODWORD(v141) = 1;
    }
    else if ((int)v141 <= 0)
    {
      v144 = 0;
      LODWORD(v141) = 0;
      v845 = 0uLL;
      v142 = 1;
    }
    else
    {
      v145 = 0;
      LODWORD(v845) = 1;
      DWORD1(v845) = v141;
      *((_QWORD *)&v845 + 1) = v141 | 0x100000000;
      do
      {
        *((_DWORD *)v848 + v145) = v145;
        ++v145;
      }
      while (v141 != v145);
      v142 = 0;
      v144 = 1;
    }
    v850 = 0x10000001ALL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C70D0;
    v851 = v852;
    __p.__r_.__value_.__l.__size_ = __PAIR64__(v144, v141);
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v141 * v144;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v141;
    if ((_DWORD)v141)
    {
      v146 = 0;
      v147 = 0;
      do
      {
        if ((v142 & 1) == 0)
        {
          v148 = 0;
          do
          {
            *((_DWORD *)v852 + v147 + HIDWORD(__p.__r_.__value_.__r.__words[2]) * v148) = *((_DWORD *)v848 + v146 + v148);
            ++v148;
          }
          while (v144 != v148);
        }
        ++v147;
        v146 += v144;
      }
      while (v147 != (_DWORD)v141);
      v149 = __p.__r_.__value_.__r.__words[1];
      v144 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    }
    else
    {
      v149 = 0;
    }
    v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
    v763 = (uint64_t (**)())&unk_1E25C70D0;
    v765 = (double *)v766;
    v764.__r_.__value_.__r.__words[0] = __PAIR64__(v144, v149);
    v150 = v144 * v149;
    v764.__r_.__value_.__l.__size_ = __PAIR64__(v149, v150);
    if ((int)v150 >= 1)
    {
      v151 = (int *)v852;
      v152 = v766;
      do
      {
        v153 = *v151++;
        *v152++ = v153 + v140;
        --v150;
      }
      while (v150);
    }
    sub_18D053D7C((uint64_t)&v915, (uint64_t)&v763);
    v154 = *(unsigned int *)(*(_QWORD *)(a16 + 32) + 4 * (*(_DWORD *)(a16 + 20) + (int)v138));
    v846 = 0x1700000001;
    v844 = &off_1E25C6B00;
    v847 = (double *)v848;
    if ((_DWORD)v154 == 1)
    {
      v155 = 0;
      *(_QWORD *)&v156 = 0x100000001;
      *((_QWORD *)&v156 + 1) = 0x100000001;
      v845 = v156;
      LODWORD(v848[0]) = 0;
      v157 = 1;
      LODWORD(v154) = 1;
    }
    else if ((int)v154 <= 0)
    {
      v157 = 0;
      LODWORD(v154) = 0;
      v845 = 0uLL;
      v155 = 1;
    }
    else
    {
      v158 = 0;
      LODWORD(v845) = 1;
      DWORD1(v845) = v154;
      *((_QWORD *)&v845 + 1) = v154 | 0x100000000;
      do
      {
        *((_DWORD *)v848 + v158) = v158;
        ++v158;
      }
      while (v154 != v158);
      v155 = 0;
      v157 = 1;
    }
    v850 = 0x100000017;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C6F50;
    v851 = v852;
    __p.__r_.__value_.__l.__size_ = __PAIR64__(v157, v154);
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v154 * v157;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v154;
    if ((_DWORD)v154)
    {
      v159 = 0;
      v160 = 0;
      do
      {
        if ((v155 & 1) == 0)
        {
          v161 = 0;
          do
          {
            *((_DWORD *)v852 + v160 + HIDWORD(__p.__r_.__value_.__r.__words[2]) * v161) = *((_DWORD *)v848 + v159 + v161);
            ++v161;
          }
          while (v157 != v161);
        }
        ++v160;
        v159 += v157;
      }
      while (v160 != (_DWORD)v154);
      v162 = __p.__r_.__value_.__r.__words[1];
      v157 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    }
    else
    {
      v162 = 0;
    }
    v764.__r_.__value_.__r.__words[2] = 0x100000017;
    v763 = &off_1E25C6F50;
    v765 = (double *)v766;
    v764.__r_.__value_.__r.__words[0] = __PAIR64__(v157, v162);
    v163 = v157 * v162;
    v764.__r_.__value_.__l.__size_ = __PAIR64__(v162, v163);
    if ((int)v163 >= 1)
    {
      v164 = (int *)v852;
      v165 = v766;
      do
      {
        v166 = *v164++;
        *v165++ = v166 + v139;
        --v163;
      }
      while (v163);
    }
    sub_18D053D7C((uint64_t)&v910, (uint64_t)&v763);
    v846 = 0x10000001ALL;
    v844 = (uint64_t (**)())&unk_1E25C70A0;
    v845 = xmmword_18D319790;
    v847 = (double *)v848;
    sub_18D1C99C8((uint64_t)&v897);
    sub_18D1CBE44((uint64_t)&v839);
    v167 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a17 + 32) + 8 * v138);
    sub_18D1D1680((uint64_t)&v763, (uint64_t)v954, (uint64_t)&v915);
    sub_18D1E0FCC((uint64_t)&__p, (uint64_t)&v947, (uint64_t)&v910);
    v168 = v167(&v763, &__p, *(_QWORD *)(*(_QWORD *)(a18 + 32) + 8 * v138), &v844, &v897, &v839);
    if (!v168)
    {
      sub_18D1D1680((uint64_t)&v763, (uint64_t)&v939, (uint64_t)&v915);
      sub_18D1D1080((uint64_t)&v763, SDWORD2(v845), v847);
      sub_18D1D1778((uint64_t)&v763, (uint64_t)&v933, (uint64_t)&v915, (uint64_t)&v915);
      sub_18D1D1114((uint64_t)&v763, (uint64_t)&v897);
      v773 = &unk_1E25C5EA0;
      v767 = (uint64_t (**)())&unk_1E25C5EA0;
      v170 = v766[0];
      v763 = (uint64_t (**)())&unk_1E25C7160;
      v766[0] = 0;
      if (v170)
        MEMORY[0x18D78B5BC](v170, 0x1000C8000313F17);
      v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
      v763 = (uint64_t (**)())&unk_1E25C70D0;
      *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319790;
      v765 = (double *)v766;
      sub_18D1C99C8((uint64_t)&__p);
      v171 = sub_18D159938((uint64_t)&v897, (uint64_t)&v763, (uint64_t)&__p);
      v172 = v852[0];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C7160;
      v852[0] = 0;
      if (v172)
        MEMORY[0x18D78B5BC](v172, 0x1000C8000313F17);
      sub_18D1C99C8((uint64_t)&v818);
      v850 = 0x10000001ALL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C70D0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319790;
      v851 = v852;
      v907 = 0x10000001ALL;
      v905 = &unk_1E25C70D0;
      v906 = xmmword_18D319790;
      v908 = v909;
      v764.__r_.__value_.__r.__words[2] = 0x100000068;
      v763 = (uint64_t (**)())&unk_1E25C5F90;
      *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D3198A0;
      v765 = (double *)v766;
      v173 = sub_18D054568((uint64_t)&v897, (uint64_t)&__p, (uint64_t)&v905, (uint64_t)&v763, (uint64_t)&v818);
      sub_18D1D1778((uint64_t)&v763, (uint64_t)&v927, (uint64_t)&v915, (uint64_t)&v915);
      sub_18D1D1114((uint64_t)&v763, (uint64_t)&v818);
      v773 = &unk_1E25C5EA0;
      v767 = (uint64_t (**)())&unk_1E25C5EA0;
      v174 = v766[0];
      v763 = (uint64_t (**)())&unk_1E25C7160;
      v766[0] = 0;
      if (v174)
        MEMORY[0x18D78B5BC](v174, 0x1000C8000313F17);
      v175 = v822[0];
      v818 = (uint64_t (**)())&unk_1E25C7160;
      v822[0] = 0;
      if (v175)
        MEMORY[0x18D78B5BC](v175, 0x1000C8000313F17);
      sub_18D1E10B0((uint64_t)&v763, (uint64_t)&v920, (uint64_t)&v915, (uint64_t)&v910);
      sub_18D1D1114((uint64_t)&v763, (uint64_t)&v839);
      v773 = &unk_1E25C5EA0;
      v767 = (uint64_t (**)())&unk_1E25C5EA0;
      v176 = v766[0];
      v763 = &off_1E25C7130;
      v766[0] = 0;
      if (v176)
        MEMORY[0x18D78B5BC](v176, 0x1000C8000313F17);
      v169.n128_f64[0] = v742 * v171;
      v742 = v742 * v171;
      v747 &= v173 <= v54;
      v177 = *(_QWORD *)(a16 + 32);
      v140 += *(_DWORD *)(v177 + 4 * v138);
      v139 += *(_DWORD *)(v177 + 4 * (*(_DWORD *)(a16 + 20) + (int)v138));
    }
    v178 = v843[0];
    v839 = &off_1E25C7130;
    v843[0] = 0;
    if (v178)
      MEMORY[0x18D78B5BC](v178, 0x1000C8000313F17);
    v179 = v904;
    v897 = &unk_1E25C7160;
    v904 = 0;
    if (v179)
      MEMORY[0x18D78B5BC](v179, 0x1000C8000313F17);
    if (v168)
    {
      v111 = 20;
      goto LABEL_609;
    }
    ++v138;
  }
  while (v138 != a15);
  v88 = v744;
  v129 = v750;
  v137 = v741;
  if ((v747 & 1) != 0)
  {
LABEL_163:
    v907 = 0x100000057;
    v905 = &unk_1E25C83C0;
    *(_QWORD *)&v906 = v736 | 0x100000000;
    DWORD2(v906) = v736;
    HIDWORD(v906) = v736;
    v908 = v909;
    v902 = 0x100000057;
    v897 = &unk_1E25C83C0;
    v898 = v736;
    v899 = 1;
    v900 = v736;
    v901 = v736;
    v903 = &v904;
    v894 = 0x1A00000057;
    v889 = &off_1E25C8480;
    v896 = 0;
    v895 = 0;
    v890 = v736;
    v891 = v129;
    v892 = v736 * v129;
    v893 = v736;
    sub_18D1E1478((uint64_t)&v889);
    v895 = v896;
    v886 = 0x1700000057;
    v881 = &off_1E25C8450;
    v888 = 0;
    v887 = 0;
    v882 = v736;
    v883 = v88;
    v884 = v736 * v88;
    v885 = v736;
    sub_18D1E1668((uint64_t)&v881);
    v887 = v888;
    if (a19 >= 1)
    {
      v189 = 0;
      v190 = 0;
      v737 = 1.0;
      v746 = 20;
      while (1)
      {
        v815 = 0x10000001ALL;
        v813 = &unk_1E25C70A0;
        v816 = v817;
        *(_QWORD *)&v814 = v129 | 0x100000000;
        DWORD2(v814) = v129;
        HIDWORD(v814) = v129;
        sub_18D04BE88((uint64_t)&v813, 0.0);
        sub_18D1C96FC((uint64_t)&v874, v129, v129);
        v875 = v129;
        v876 = v129;
        v877 = v137;
        v878 = v129;
        sub_18D04BE88((uint64_t)&v874, 0.0);
        sub_18D1C96FC((uint64_t)&v866, v129, v129);
        v743 = v190;
        v867 = v129;
        v868 = v129;
        v869 = v137;
        v870 = v129;
        sub_18D04BE88((uint64_t)&v866, 0.0);
        if (a22 < 1)
        {
          v210 = xmmword_18D30BB60;
LABEL_195:
          v863 = 0x100000003;
          v861 = (uint64_t (**)())&unk_1E25C7790;
          v862 = xmmword_18D313070;
          v864 = &v865;
          v850 = 0x1A00000003;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C7850;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319800;
          v851 = v852;
          v836 = 0x300000003;
          v834 = &unk_1E25C78E0;
          v835 = v210;
          v837 = v838;
          v211 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(a20 + 32) + 8 * v189);
          v212 = sub_18D04DA0C((uint64_t)&v763, *(_QWORD *)(a13 + 32) + (v189 << 6));
          v137 = v741;
          if (v211(&v813, &v763, *(_QWORD *)(*(_QWORD *)(a21 + 32) + 8 * v189), &v861, &__p, &v834, v212))
          {
            v746 = 3;
            v213 = 1;
          }
          else
          {
            sub_18D1C99C8((uint64_t)&v839);
            sub_18D053B2C((uint64_t)&v866, (uint64_t)&v933, (uint64_t)&v839);
            sub_18D1C99C8((uint64_t)&v763);
            sub_18D053FA4((uint64_t)&v874, (uint64_t)&v839, (uint64_t)&v763);
            v846 = 0x1A00000003;
            v844 = &off_1E25C7850;
            v845 = xmmword_18D319800;
            v847 = (double *)v848;
            sub_18D053B2C((uint64_t)&__p, (uint64_t)&v763, (uint64_t)&v844);
            v214 = v766[0];
            v763 = (uint64_t (**)())&unk_1E25C7160;
            v766[0] = 0;
            if (v214)
              MEMORY[0x18D78B5BC](v214, 0x1000C8000313F17);
            v763 = (uint64_t (**)())&unk_1E25C5E70;
            v215 = v843[0];
            v839 = (uint64_t (**)())&unk_1E25C7160;
            v843[0] = 0;
            if (v215)
              MEMORY[0x18D78B5BC](v215, 0x1000C8000313F17);
            sub_18D1CBE44((uint64_t)&v763);
            sub_18D053B2C((uint64_t)&v866, (uint64_t)&v920, (uint64_t)&v763);
            v820 = 0x1700000003;
            v818 = &off_1E25C7820;
            v819 = xmmword_18D319B90;
            v821 = v822;
            sub_18D053B2C((uint64_t)&__p, (uint64_t)&v763, (uint64_t)&v818);
            v216 = v766[0];
            v763 = &off_1E25C7130;
            v766[0] = 0;
            if (v216)
              MEMORY[0x18D78B5BC](v216, 0x1000C8000313F17);
            v217 = v743 + *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v189) - 1;
            v764.__r_.__value_.__r.__words[2] = 0x300000001;
            v763 = (uint64_t (**)())&unk_1E25C6C50;
            v765 = (double *)v766;
            v218 = v217 - v743;
            if (v218)
            {
              if (v218 < 0)
              {
                v221 = 0;
                LODWORD(v222) = 0;
                *(_OWORD *)&v764.__r_.__value_.__l.__data_ = 0uLL;
                LOBYTE(v219) = 1;
              }
              else
              {
                v222 = (v218 + 1);
                LODWORD(v764.__r_.__value_.__l.__data_) = 1;
                HIDWORD(v764.__r_.__value_.__r.__words[0]) = v222;
                v764.__r_.__value_.__l.__size_ = v222 | 0x100000000;
                v223 = v766;
                v219 = v222;
                v224 = v743;
                do
                {
                  *v223++ = v224++;
                  --v219;
                }
                while (v219);
                v221 = 1;
              }
            }
            else
            {
              LOBYTE(v219) = 0;
              *(_QWORD *)&v220 = 0x100000001;
              *((_QWORD *)&v220 + 1) = 0x100000001;
              *(_OWORD *)&v764.__r_.__value_.__l.__data_ = v220;
              LODWORD(v766[0]) = v743;
              v221 = 1;
              LODWORD(v222) = 1;
            }
            v858 = 0x100000003;
            v853 = &unk_1E25C77C0;
            v859 = v860;
            v854 = v222;
            v855 = v221;
            v856 = v222 * v221;
            v857 = v222;
            if ((_DWORD)v222)
            {
              v225 = 0;
              v226 = 0;
              do
              {
                if ((v219 & 1) == 0)
                {
                  v227 = 0;
                  do
                  {
                    *((_DWORD *)v860 + v226 + v857 * v227) = *((_DWORD *)v766 + v225 + v227);
                    ++v227;
                  }
                  while (v221 != v227);
                }
                ++v226;
                v225 += v221;
              }
              while (v226 != (_DWORD)v222);
            }
            sub_18D159B20((uint64_t)&v758, *(_QWORD *)(a14 + 32) + 112 * v189);
            v810 = 0x300000003;
            v808 = (uint64_t (**)())&unk_1E25C78E0;
            v809 = xmmword_18D30BB60;
            v811 = (int *)v812;
            sub_18D053B2C((uint64_t)&v834, (uint64_t)&v758, (uint64_t)&v808);
            v228 = DWORD1(v835);
            v229 = v835;
            v800 = 0x300000003;
            v795 = &unk_1E25C78E0;
            v801 = v802;
            v796 = DWORD1(v835);
            v797 = v835;
            v798 = v835 * DWORD1(v835);
            v799 = DWORD1(v835);
            if (DWORD1(v835))
            {
              v230 = 0;
              v231 = 0;
              v232 = HIDWORD(v835);
              v233 = v837;
              do
              {
                v234 = v230;
                v235 = v231;
                for (i = v229; i; --i)
                {
                  v802[v235] = *(_QWORD *)&v233[2 * v234];
                  v235 += v228;
                  ++v234;
                }
                ++v231;
                v230 += v232;
              }
              while (v231 != v228);
            }
            v805 = 0x300000003;
            v803 = (uint64_t (**)())&unk_1E25C78E0;
            v804 = xmmword_18D30BB60;
            v806 = v807;
            sub_18D053B2C((uint64_t)&v808, (uint64_t)&v795, (uint64_t)&v803);
            v841 = 0x300000003;
            v839 = (uint64_t (**)())&unk_1E25C78E0;
            v840 = xmmword_18D30BB60;
            v842 = (double *)v843;
            LOBYTE(v763) = 0;
            sub_18D05C654((uint64_t)&v803, (uint64_t)&v839, (BOOL *)&v763);
            v829 = 0x300000003;
            v827 = (uint64_t (**)())&unk_1E25C78E0;
            v828 = xmmword_18D30BB60;
            v830 = v831;
            v958 = 0x100000003;
            v956 = (uint64_t (**)())&unk_1E25C77C0;
            v957 = xmmword_18D313070;
            v959 = &v960;
            v764.__r_.__value_.__r.__words[2] = 0x10000000CLL;
            v763 = (uint64_t (**)())&unk_1E25C6200;
            *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D3191A0;
            v765 = (double *)v766;
            sub_18D04F504((uint64_t)&v839, (uint64_t)&v956, (uint64_t)&v763, (uint64_t)&v827);
            v841 = 0x600000006;
            v839 = (uint64_t (**)())&unk_1E25C81B0;
            v840 = xmmword_18D314680;
            v842 = (double *)v843;
            sub_18D1D4A98((uint64_t)&v827, 0, (uint64_t)&v839);
            v237 = DWORD1(v840);
            if (DWORD1(v840))
            {
              v238 = 0;
              v239 = v840;
              v240 = v842;
              v241 = v840 - 1;
              v242 = 1;
              do
              {
                v243 = v240[v239 * v238];
                v244 = v242;
                v245 = v241;
                if (v239 >= 2)
                {
                  do
                  {
                    v243 = v243 * v240[v244++];
                    --v245;
                  }
                  while (v245);
                }
                *(double *)&v766[v238++] = v243;
                v242 += v239;
              }
              while (v238 != v237);
            }
            v246 = v54;
            v247 = *(double *)v766;
            sub_18D04DA0C((uint64_t)&v803, *(_QWORD *)(a11 + 32) + (v189 << 6));
            v841 = 0x100000003;
            v839 = (uint64_t (**)())&unk_1E25C7790;
            v840 = xmmword_18D313070;
            v842 = (double *)v843;
            sub_18D053B2C((uint64_t)&v827, (uint64_t)&v803, (uint64_t)&v839);
            sub_18D1C9120((uint64_t)&v763, (uint64_t)&v905, (uint64_t)&v853);
            sub_18D1BE7FC((uint64_t)&v763, (uint64_t)&v839);
            v841 = 0x100000003;
            v839 = (uint64_t (**)())&unk_1E25C7790;
            v840 = xmmword_18D313070;
            v842 = (double *)v843;
            sub_18D053B2C((uint64_t)&v827, (uint64_t)&v861, (uint64_t)&v839);
            sub_18D1C9120((uint64_t)&v763, (uint64_t)&v897, (uint64_t)&v853);
            sub_18D1BE7FC((uint64_t)&v763, (uint64_t)&v839);
            v841 = 0x1A00000003;
            v839 = &off_1E25C7850;
            v840 = xmmword_18D319800;
            v842 = (double *)v843;
            sub_18D053B2C((uint64_t)&v827, (uint64_t)&v844, (uint64_t)&v839);
            v248 = v891;
            v805 = 0x10000001ALL;
            v803 = (uint64_t (**)())&unk_1E25C70D0;
            if ((v891 & 0x80000000) != 0)
              __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
            v249 = vdupq_lane_s32((int32x2_t)(v891 | 0x100000000), 0);
            v249.i32[1] = 1;
            v804 = (__int128)v249;
            v806 = v807;
            if (v891)
            {
              v250 = 0;
              do
              {
                *((_DWORD *)v807 + v250) = v250;
                ++v250;
              }
              while (v248 != v250);
            }
            sub_18D1CC2A4((uint64_t)&v763, (uint64_t)&v889, (uint64_t)&v853, (uint64_t)&v803);
            sub_18D1BEC80((uint64_t)&v763, (uint64_t)&v839);
            v841 = 0x1700000003;
            v839 = &off_1E25C7820;
            v840 = xmmword_18D319B90;
            v842 = (double *)v843;
            sub_18D053B2C((uint64_t)&v827, (uint64_t)&v818, (uint64_t)&v839);
            v251 = v883;
            v805 = 0x100000017;
            v803 = &off_1E25C6F50;
            if ((v883 & 0x80000000) != 0)
              __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
            v252 = vdupq_lane_s32((int32x2_t)(v883 | 0x100000000), 0);
            v252.i32[1] = 1;
            v804 = (__int128)v252;
            v806 = v807;
            if (v883)
            {
              v253 = 0;
              do
              {
                *((_DWORD *)v807 + v253) = v253;
                ++v253;
              }
              while (v251 != v253);
            }
            v764.__r_.__value_.__r.__words[2] = 0x1700000003;
            *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319B90;
            v763 = &off_1E25C4FD0;
            v765 = (double *)v766;
            v784 = &v881;
            v787 = 0x100000003;
            v785 = &unk_1E25C77C0;
            v786 = xmmword_18D313070;
            v788 = &v789;
            v792 = 0x100000017;
            v790 = &off_1E25C6F50;
            v791 = xmmword_18D3197B0;
            v793 = &v794;
            sub_18D053D7C((uint64_t)&v785, (uint64_t)&v853);
            sub_18D053D7C((uint64_t)&v790, (uint64_t)&v803);
            v254 = DWORD2(v786);
            v255 = DWORD2(v791);
            v764.__r_.__value_.__r.__words[0] = __PAIR64__(DWORD2(v791), DWORD2(v786));
            LODWORD(v764.__r_.__value_.__r.__words[1]) = DWORD2(v791) * DWORD2(v786);
            HIDWORD(v764.__r_.__value_.__r.__words[1]) = DWORD2(v786);
            if (DWORD2(v791))
            {
              v256 = 0;
              v257 = 0;
              v258 = v885;
              v259 = v887;
              v260 = v793;
              v261 = v788;
              v262 = v765;
              do
              {
                if ((_DWORD)v254)
                {
                  v263 = *((_DWORD *)v260 + v257) * v258;
                  v264 = v261;
                  v265 = v256;
                  v266 = v254;
                  do
                  {
                    v267 = *(_DWORD *)v264;
                    v264 = (void **)((char *)v264 + 4);
                    v262[v265++] = *(double *)(v259 + 8 * (v267 + v263));
                    --v266;
                  }
                  while (v266);
                }
                ++v257;
                v256 += v254;
              }
              while (v257 != v255);
            }
            if ((_DWORD)v254 != (_DWORD)v840)
            {
              v715 = 376;
              v716 = "this->num_rows_ == A.num_rows_";
              goto LABEL_711;
            }
            if ((_DWORD)v255 != DWORD1(v840))
            {
              v715 = 377;
              v716 = "this->num_cols_ == A.num_cols_";
LABEL_711:
              __assert_rtn("operator=", "cnsubmatrix.h", v715, v716);
            }
            if ((_DWORD)v255)
            {
              v268 = 0;
              v269 = 0;
              v270 = v842;
              v271 = v788;
              v272 = v793;
              v273 = v784;
              v274 = v765;
              do
              {
                if ((_DWORD)v254)
                {
                  v275 = *((_DWORD *)v273 + 5) * *((_DWORD *)v272 + v269);
                  v276 = v273[4];
                  v277 = v268;
                  v278 = v271;
                  v279 = v254;
                  do
                  {
                    v280 = v270[v277];
                    v281 = *(_DWORD *)v278;
                    v278 = (void **)((char *)v278 + 4);
                    *((double *)&v276[v281] + v275) = v280;
                    v274[v277++] = v280;
                    --v279;
                  }
                  while (v279);
                }
                ++v269;
                v268 += v254;
              }
              while (v269 != v255);
            }
            v213 = 0;
            v169.n128_f64[0] = v737 * v247;
            v737 = v737 * v247;
            v743 += *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v189);
            v54 = v246;
          }
        }
        else
        {
          v191 = 0;
          v192 = 0;
          while (1)
          {
            v193 = v192 + *(_DWORD *)(*(_QWORD *)(a23 + 32) + 4 * v191) - 1;
            v850 = 0x1A00000001;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C6B60;
            v851 = v852;
            v194 = v193 - v192;
            if (v194)
            {
              if (v194 < 0)
              {
                v197 = 0;
                LODWORD(v198) = 0;
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                LOBYTE(v195) = 1;
              }
              else
              {
                v198 = (v194 + 1);
                LODWORD(__p.__r_.__value_.__r.__words[1]) = 1;
                HIDWORD(__p.__r_.__value_.__r.__words[1]) = v198;
                __p.__r_.__value_.__r.__words[2] = v198 | 0x100000000;
                v199 = v852;
                v195 = v198;
                v200 = v192;
                do
                {
                  *v199++ = v200++;
                  --v195;
                }
                while (v195);
                v197 = 1;
              }
            }
            else
            {
              LOBYTE(v195) = 0;
              *(_QWORD *)&v196 = 0x100000001;
              *((_QWORD *)&v196 + 1) = 0x100000001;
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v196;
              LODWORD(v852[0]) = v192;
              v197 = 1;
              LODWORD(v198) = 1;
            }
            v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
            v763 = (uint64_t (**)())&unk_1E25C70D0;
            v765 = (double *)v766;
            v764.__r_.__value_.__r.__words[0] = __PAIR64__(v197, v198);
            LODWORD(v764.__r_.__value_.__r.__words[1]) = v198 * v197;
            HIDWORD(v764.__r_.__value_.__r.__words[1]) = v198;
            if ((_DWORD)v198)
            {
              v201 = 0;
              v202 = 0;
              do
              {
                if ((v195 & 1) == 0)
                {
                  v203 = 0;
                  do
                  {
                    *((_DWORD *)v766 + v202 + HIDWORD(v764.__r_.__value_.__r.__words[1]) * v203) = *((_DWORD *)v852 + v201 + v203);
                    ++v203;
                  }
                  while (v197 != v203);
                }
                ++v202;
                v201 += v197;
              }
              while (v202 != (_DWORD)v198);
            }
            sub_18D053D7C((uint64_t)&v915, (uint64_t)&v763);
            v846 = 0x10000001ALL;
            v844 = (uint64_t (**)())&unk_1E25C70A0;
            v845 = xmmword_18D319790;
            v847 = (double *)v848;
            sub_18D1C99C8((uint64_t)&v839);
            sub_18D1C99C8((uint64_t)&v818);
            v204 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)(a24 + 32) + 8 * v191);
            sub_18D1D1680((uint64_t)&v763, (uint64_t)v954, (uint64_t)&v915);
            sub_18D1D1680((uint64_t)&__p, (uint64_t)&v939, (uint64_t)&v915);
            v205 = v204(&v763, &__p, *(_QWORD *)(*(_QWORD *)(a25 + 32) + 8 * v191), &v844, &v839, &v818, *(double *)(*(_QWORD *)(a10 + 32) + 8 * v189));
            if (v205)
            {
              v746 = 22;
            }
            else
            {
              sub_18D1D1680((uint64_t)&v763, (uint64_t)&v813, (uint64_t)&v915);
              sub_18D1D1080((uint64_t)&v763, SDWORD2(v845), v847);
              sub_18D1D1778((uint64_t)&v763, (uint64_t)&v874, (uint64_t)&v915, (uint64_t)&v915);
              sub_18D1D1114((uint64_t)&v763, (uint64_t)&v839);
              v773 = &unk_1E25C5EA0;
              v767 = (uint64_t (**)())&unk_1E25C5EA0;
              v206 = v766[0];
              v763 = (uint64_t (**)())&unk_1E25C7160;
              v766[0] = 0;
              if (v206)
                MEMORY[0x18D78B5BC](v206, 0x1000C8000313F17);
              sub_18D1D1778((uint64_t)&v763, (uint64_t)&v866, (uint64_t)&v915, (uint64_t)&v915);
              sub_18D1D1114((uint64_t)&v763, (uint64_t)&v818);
              v773 = &unk_1E25C5EA0;
              v767 = (uint64_t (**)())&unk_1E25C5EA0;
              v207 = v766[0];
              v763 = (uint64_t (**)())&unk_1E25C7160;
              v766[0] = 0;
              if (v207)
                MEMORY[0x18D78B5BC](v207, 0x1000C8000313F17);
              v192 += *(_DWORD *)(*(_QWORD *)(a23 + 32) + 4 * v191);
            }
            v208 = v822[0];
            v818 = (uint64_t (**)())&unk_1E25C7160;
            v822[0] = 0;
            if (v208)
              MEMORY[0x18D78B5BC](v208, 0x1000C8000313F17);
            v209 = v843[0];
            v839 = (uint64_t (**)())&unk_1E25C7160;
            v843[0] = 0;
            if (v209)
              MEMORY[0x18D78B5BC](v209, 0x1000C8000313F17);
            v129 = v750;
            if (v205)
              break;
            ++v191;
            v210 = xmmword_18D30BB60;
            if (v191 == a22)
              goto LABEL_195;
          }
          v213 = 1;
          v137 = v741;
        }
        v282 = v873;
        v866 = (uint64_t (**)())&unk_1E25C7160;
        v873 = 0;
        if (v282)
          MEMORY[0x18D78B5BC](v282, 0x1000C8000313F17);
        v283 = v880;
        v874 = (uint64_t (**)())&unk_1E25C7160;
        v880 = 0;
        if (v283)
          MEMORY[0x18D78B5BC](v283, 0x1000C8000313F17);
        if (v213)
          break;
        ++v189;
        v190 = v743;
        if (v189 == a19)
          goto LABEL_291;
      }
      v111 = v746;
      goto LABEL_605;
    }
    v746 = 20;
    v737 = 1.0;
LABEL_291:
    v297 = v744;
    v298 = v744 + v129;
    v863 = 0x3100000088;
    v862 = 0uLL;
    v861 = &off_1E25C6290;
    v865 = 0;
    v864 = 0;
    if ((int)(v736 + v744 + v129) < 0)
    {
      v719 = "nr >= 0";
      v720 = 419;
    }
    else
    {
      if ((v298 & 0x80000000) == 0)
      {
        LODWORD(v862) = v736 + v744 + v129;
        DWORD1(v862) = v744 + v129;
        DWORD2(v862) = v862 * v298;
        HIDWORD(v862) = v862;
        sub_18D1E19B4((uint64_t)&v861);
        v299 = v865;
        v864 = v865;
        v850 = 0x100000088;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C6230;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v736 + v744 + v129;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = 1;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = __p.__r_.__value_.__r.__words[1];
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = __p.__r_.__value_.__r.__words[1];
        v851 = v852;
        if (v129 < 1)
        {
          v303 = 0;
          v304 = 0;
        }
        else
        {
          if (fabs(*v955) >= 2.22044605e-16)
          {
            v303 = 1;
          }
          else
          {
            v300 = 1;
            do
            {
              v301 = v300;
              if (v129 == v300)
                break;
              v302 = fabs(v955[v300++]);
            }
            while (v302 < 2.22044605e-16);
            v303 = v301 < v129;
          }
          if (fabs(*v945) >= 2.22044605e-16)
          {
            v304 = 1;
          }
          else
          {
            v305 = 1;
            do
            {
              v306 = v305;
              if (v129 == v305)
                break;
              v307 = fabs(v945[v305++]);
            }
            while (v307 < 2.22044605e-16);
            v304 = v306 < v129;
          }
        }
        v308 = v744;
        if ((int)v744 < 1)
        {
          v313 = 0;
        }
        else
        {
          v309 = v951;
          if (fabs(*v951) >= 2.22044605e-16)
          {
            v313 = 1;
          }
          else
          {
            v310 = 1;
            do
            {
              v311 = v310;
              if (v744 == v310)
                break;
              v312 = fabs(v951[v310++]);
            }
            while (v312 < 2.22044605e-16);
            v313 = v311 < v744;
          }
          v314 = 0;
          v315 = *(_QWORD **)(v739 + 32);
          v316 = 8 * SHIDWORD(v862);
          v317 = 8 * *(int *)(v739 + 20);
          v318 = 8 * SHIDWORD(v862) * (unint64_t)v744;
          do
          {
            v319 = v315;
            v320 = v299;
            v321 = v744;
            do
            {
              *v320 = *v319;
              v320 = (_QWORD *)((char *)v320 + v316);
              v319 = (_QWORD *)((char *)v319 + v317);
              --v321;
            }
            while (v321);
            v322 = v318;
            v323 = v744;
            if (v129 >= 1)
            {
              do
              {
                *(_QWORD *)((char *)v299 + v322) = 0;
                ++v323;
                v322 += v316;
              }
              while (v323 < v298);
            }
            v324 = 0.0;
            if (v313)
            {
              v325 = (double *)v315;
              v326 = v309;
              v327 = v744;
              do
              {
                v328 = *v326++;
                v324 = v324 + *v325 * v328;
                v325 = (double *)((char *)v325 + v317);
                --v327;
              }
              while (v327);
            }
            *(double *)&v852[v314++] = v324;
            ++v299;
            ++v315;
          }
          while (v314 != v744);
        }
        sub_18D1C99C8((uint64_t)&v763);
        sub_18D053B2C(v740, (uint64_t)&v927, (uint64_t)&v763);
        sub_18D1CBE44((uint64_t)&v839);
        sub_18D053B2C((uint64_t)&v763, (uint64_t)&v920, (uint64_t)&v839);
        sub_18D1D6FC4((uint64_t)&v844, (uint64_t)&v839);
        v749 = v736 + v744 + v129;
        v756 = v744 + v129;
        v329 = v843[0];
        v839 = &off_1E25C7130;
        v843[0] = 0;
        if (v329)
          MEMORY[0x18D78B5BC](v329, 0x1000C8000313F17);
        if (v129 >= 1)
        {
          v330 = HIDWORD(v845);
          v331 = v847;
          v332 = HIDWORD(v764.__r_.__value_.__r.__words[1]);
          v333 = v765;
          v334 = v953[4];
          v335 = v851;
          v336 = *(_DWORD *)(v740 + 20);
          v337 = *(_QWORD *)(v740 + 32);
          v338 = v955;
          v339 = v945;
          v340 = (double *)&v864[v744];
          v341 = 8 * SHIDWORD(v862);
          v342 = &v847[-v744];
          v343 = 8 * SHIDWORD(v845);
          v752 = (cnprint::CNLogFormatter *)v951;
          v344 = &v864[v744 * (uint64_t)SHIDWORD(v862) + v744];
          v345 = &v765[-v744];
          v346 = 8 * SHIDWORD(v764.__r_.__value_.__r.__words[1]);
          v347 = v744;
          do
          {
            v348 = &v345[(int)v347];
            if (v297 >= 1)
            {
              v349 = &v342[(int)v347];
              v350 = v340;
              v351 = v744;
              do
              {
                *v350 = -*v349;
                v350 = (double *)((char *)v350 + v341);
                v349 = (double *)((char *)v349 + v343);
                --v351;
              }
              while (v351);
            }
            v352 = v344;
            v353 = v744;
            do
            {
              *v352 = *(_QWORD *)v348;
              ++v353;
              v352 = (_QWORD *)((char *)v352 + v341);
              v348 = (double *)((char *)v348 + v346);
            }
            while (v353 < (int)v756);
            v354 = v347 - v744;
            v355 = *(double *)(v334 + 8 * v354);
            *(double *)&v335[v347] = v355;
            if (v303)
            {
              v356 = 0;
              v357 = 0.0;
              v358 = v338;
              v359 = v750;
              do
              {
                v360 = *v358++;
                v357 = v357 - *(double *)(v337 + 8 * (v354 + v356)) * v360;
                v356 += v336;
                --v359;
              }
              while (v359);
              v355 = v355 + v357;
              *(double *)&v335[v347] = v355;
            }
            if (v304)
            {
              v361 = 0;
              v362 = 0.0;
              v363 = v339;
              v364 = v750;
              do
              {
                v365 = *v363++;
                v362 = v362 + v333[v354 + v361] * v365;
                v361 += v332;
                --v364;
              }
              while (v364);
              v355 = v355 + v362;
              *(double *)&v335[v347] = v355;
            }
            v297 = v744;
            if (v313)
            {
              if ((int)v744 < 1)
              {
                v367 = 0.0;
              }
              else
              {
                v366 = 0;
                v367 = 0.0;
                v368 = (double *)v752;
                v369 = v744;
                do
                {
                  v370 = *v368++;
                  v367 = v367 - v331[v354 + v366] * v370;
                  v366 += v330;
                  --v369;
                }
                while (v369);
              }
              *(double *)&v335[v347] = v355 + v367;
              v297 = v744;
            }
            ++v347;
            ++v340;
            ++v344;
          }
          while (v347 < (int)v756);
        }
        v371 = v848[0];
        v844 = (uint64_t (**)())&unk_1E25C7160;
        v848[0] = 0;
        if (v371)
          MEMORY[0x18D78B5BC](v371, 0x1000C8000313F17);
        v372 = v766[0];
        v763 = (uint64_t (**)())&unk_1E25C7160;
        v766[0] = 0;
        v373 = v745;
        if (v372)
          MEMORY[0x18D78B5BC](v372, 0x1000C8000313F17);
        v846 = 0x1A00000057;
        v844 = &off_1E25C8480;
        v848[0] = 0;
        v847 = 0;
        v845 = xmmword_18D319BA0;
        sub_18D1E1478((uint64_t)&v844);
        v847 = (double *)v848[0];
        sub_18D053B2C((uint64_t)&v889, (uint64_t)&v927, (uint64_t)&v844);
        if ((int)v736 >= 1)
        {
          v374 = 0;
          v375 = (int)v756;
          do
          {
            v376 = v374;
            if ((int)v744 >= 1)
            {
              v377 = 0;
              v378 = v925;
              v379 = v885;
              v380 = v887;
              v381 = SHIDWORD(v862);
              v382 = v864;
              v383 = 8 * v924;
              v384 = &v847[v376];
              v385 = 8 * SHIDWORD(v845);
              do
              {
                v386 = 0.0;
                if (v750 >= 1)
                {
                  v387 = v384;
                  v388 = v378;
                  v389 = v750;
                  do
                  {
                    v390 = *v388++;
                    v386 = v386 + *v387 * v390;
                    v387 = (double *)((char *)v387 + v385);
                    --v389;
                  }
                  while (v389);
                }
                *(double *)&v382[v375 + v377 * v381] = *(double *)(v380 + 8 * ((int)v375 - (int)v756 + v377 * v379))
                                                     - v386;
                ++v377;
                v378 = (double *)((char *)v378 + v383);
              }
              while (v377 != v744);
            }
            if (v750 >= 1)
            {
              v391 = &v864[v375 + v744 * (uint64_t)SHIDWORD(v862)];
              v392 = 8 * SHIDWORD(v862);
              v393 = &v847[v376];
              v394 = 8 * SHIDWORD(v845);
              v395 = v744;
              do
              {
                *v391 = *(_QWORD *)v393;
                ++v395;
                v391 = (_QWORD *)((char *)v391 + v392);
                v393 = (double *)((char *)v393 + v394);
              }
              while (v395 < (int)v756);
            }
            v396 = v375 - (int)v756;
            v397 = *(double *)&v908[8 * v396] - *(double *)&v903[v396];
            v398 = v851;
            *(double *)&v851[v375] = v397;
            if (v304)
            {
              if (v750 < 1)
              {
                v400 = 0.0;
              }
              else
              {
                v399 = 0;
                v400 = 0.0;
                v401 = v750;
                v402 = v945;
                do
                {
                  v403 = *v402++;
                  v400 = v400 + v847[v396 + v399] * v403;
                  v399 += HIDWORD(v845);
                  --v401;
                }
                while (v401);
              }
              *(double *)&v398[v375] = v397 + v400;
            }
            if (v313)
            {
              v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
              v763 = (uint64_t (**)())&unk_1E25C70A0;
              *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319790;
              v765 = (double *)v766;
              sub_18D053B2C((uint64_t)&v920, (uint64_t)&v947, (uint64_t)&v763);
              v404 = 0.0;
              v405 = 0.0;
              if (v750 >= 1)
              {
                v406 = 0;
                v407 = v750;
                v408 = v765;
                do
                {
                  v409 = *v408++;
                  v405 = v405 + v847[v396 + v406] * v409;
                  v406 += HIDWORD(v845);
                  --v407;
                }
                while (v407);
              }
              v410 = v851;
              v411 = v405 + *(double *)&v851[v375];
              *(double *)&v851[v375] = v411;
              if ((int)v744 >= 1)
              {
                v412 = 0;
                v404 = 0.0;
                v413 = v744;
                v414 = v951;
                do
                {
                  v415 = *v414++;
                  v404 = v404 + *(double *)(v887 + 8 * (v396 + v412)) * v415;
                  v412 += v885;
                  --v413;
                }
                while (v413);
              }
              *(double *)&v410[v375] = v411 + v404;
            }
            ++v375;
            ++v374;
            v373 = v745;
          }
          while (v375 < v749);
        }
        v416 = v848[0];
        v844 = &off_1E25C8480;
        v848[0] = 0;
        if (v416)
          MEMORY[0x18D78B5BC](v416, 0x1000C8000313F17);
        sub_18D1E1B40((uint64_t)&v956);
        v846 = 0x100000088;
        v844 = &off_1E25C6230;
        v845 = xmmword_18D319BB0;
        v847 = (double *)v848;
        v764.__r_.__value_.__r.__words[2] = 0x100000088;
        v763 = &off_1E25C6230;
        *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319BB0;
        v765 = (double *)v766;
        sub_18D1E3C54((uint64_t)&v839);
        sub_18D054C20((uint64_t)&v861, (uint64_t)&__p, (uint64_t)&v763, (uint64_t)&v839, (uint64_t)&v844, (uint64_t)&v956);
        v417 = v843[0];
        v839 = &off_1E25C7CD0;
        v843[0] = 0;
        if (v417)
          MEMORY[0x18D78B5BC](v417, 0x1000C8000313F17);
        v841 = 0x100000057;
        v839 = (uint64_t (**)())&unk_1E25C83C0;
        v840 = xmmword_18D3197F0;
        v842 = (double *)v843;
        v764.__r_.__value_.__r.__words[2] = 0x5700000001;
        v763 = (uint64_t (**)())&unk_1E25C6DD0;
        v765 = (double *)v766;
        if (v749 - 1 == (_DWORD)v756)
        {
          LOBYTE(v418) = 0;
          *(_QWORD *)&v419 = 0x100000001;
          *((_QWORD *)&v419 + 1) = 0x100000001;
          *(_OWORD *)&v764.__r_.__value_.__l.__data_ = v419;
          LODWORD(v766[0]) = v756;
          v420 = 1;
          v421 = 1;
        }
        else if (v749 - 1 - (int)v756 < 0)
        {
          v420 = 0;
          v421 = 0;
          *(_OWORD *)&v764.__r_.__value_.__l.__data_ = 0uLL;
          LOBYTE(v418) = 1;
        }
        else
        {
          v421 = v749 - v756;
          LODWORD(v764.__r_.__value_.__l.__data_) = 1;
          HIDWORD(v764.__r_.__value_.__r.__words[0]) = v749 - v756;
          LODWORD(v764.__r_.__value_.__r.__words[1]) = v749 - v756;
          HIDWORD(v764.__r_.__value_.__r.__words[1]) = 1;
          v422 = v766;
          v418 = (v749 - v756);
          v423 = v756;
          do
          {
            *v422++ = v423++;
            --v418;
          }
          while (v418);
          v420 = 1;
        }
        v836 = 0x100000057;
        v834 = &unk_1E25C83F0;
        v837 = v838;
        *(_QWORD *)&v835 = __PAIR64__(v420, v421);
        DWORD2(v835) = v421 * v420;
        HIDWORD(v835) = v421;
        if (v421)
        {
          v424 = 0;
          for (j = 0; j != v421; ++j)
          {
            if ((v418 & 1) == 0)
            {
              v426 = 0;
              do
              {
                v838[j + HIDWORD(v835) * v426] = *((_DWORD *)v766 + v424 + v426);
                ++v426;
              }
              while (v420 != v426);
            }
            v424 += v420;
          }
        }
        sub_18D1E1C4C((uint64_t)&v763, (uint64_t)&v844, (uint64_t)&v834);
        sub_18D053AA8((uint64_t)&v839, (uint64_t)&v763);
        v428 = DWORD2(v840);
        v429 = 0.0;
        if (SDWORD2(v840) >= 1)
        {
          v430 = v842;
          do
          {
            v431 = *v430++;
            v429 = v429 + v431 * v431;
            --v428;
          }
          while (v428);
        }
        v833 = 1;
        if (v727)
        {
          if (v733)
          {
            v764.__r_.__value_.__r.__words[2] = 0x100000057;
            v763 = (uint64_t (**)())&unk_1E25C83F0;
            *(_QWORD *)&v432 = 0x100000001;
            *((_QWORD *)&v432 + 1) = 0x100000001;
            *(_OWORD *)&v764.__r_.__value_.__l.__data_ = v432;
            v765 = (double *)v766;
            LODWORD(v766[0]) = v736;
            sub_18D1E2DD8((uint64_t)&v818);
            v805 = 0x100000001;
            v803 = (uint64_t (**)())&unk_1E25C6A40;
            v806 = v807;
            *(_QWORD *)&v433 = 0x100000001;
            *((_QWORD *)&v433 + 1) = 0x100000001;
            v804 = v433;
            sub_18D04BE88((uint64_t)&v803, 1.0);
            v815 = 0x100000001;
            v813 = &unk_1E25C6A40;
            *(_QWORD *)&v434.f64[0] = 0x100000001;
            *(_QWORD *)&v434.f64[1] = 0x100000001;
            v814 = (__int128)v434;
            v816 = v817;
            v434.f64[0] = (double)(int)v736;
            sub_18D064EF4((uint64_t)&v803, (uint64_t)&v813, v434);
            v435 = v756;
            v436 = sub_18D053AA8((uint64_t)v821, (uint64_t)&v813);
            v437 = v733(1, &v763, &v818, v736, &v905, &v897, &v889, &v881, v436, v750, v740, v730, &v833, &v844, &v956);
            v438 = v833 == 0;
            v439 = v822[0];
            v818 = (uint64_t (**)())&unk_1E25C8300;
            v822[0] = 0;
            if (v439)
            {
              v440 = v439 - 16;
              v441 = *(_QWORD *)(v439 - 8);
              if (v441)
              {
                v442 = 736 * v441;
                v443 = v439 - 736;
                do
                {
                  *(_QWORD *)(v443 + v442) = &unk_1E25C5E70;
                  v442 -= 736;
                }
                while (v442);
              }
              MEMORY[0x18D78B5BC](v440, 0x1081C80BC64BFAFLL);
            }
            if (v437)
            {
              v111 = 10;
LABEL_601:
              v623 = v960;
              v956 = &off_1E25C6290;
              v960 = 0;
              if (v623)
                MEMORY[0x18D78B5BC](v623, 0x1000C8000313F17);
              v624 = v865;
              v861 = &off_1E25C6290;
              v865 = 0;
              if (v624)
                MEMORY[0x18D78B5BC](v624, 0x1000C8000313F17);
LABEL_605:
              v625 = v888;
              v881 = &off_1E25C8450;
              v888 = 0;
              if (v625)
                MEMORY[0x18D78B5BC](v625, 0x1000C8000313F17);
              v626 = v896;
              v889 = &off_1E25C8480;
              v896 = 0;
              if (v626)
                MEMORY[0x18D78B5BC](v626, 0x1000C8000313F17);
              goto LABEL_609;
            }
            v444 = (8 * v438);
LABEL_412:
            sub_18D1C99C8((uint64_t)&v795);
            sub_18D1D77AC((uint64_t)&v853);
            sub_18D1C5BB0((uint64_t)&v874);
            v810 = 0x100000017;
            v808 = &off_1E25C6F20;
            v809 = xmmword_18D3197B0;
            v811 = (int *)v812;
            v815 = 0x10000001ALL;
            v813 = &unk_1E25C70A0;
            v814 = xmmword_18D319790;
            v816 = v817;
            v805 = 0x10000001ALL;
            v803 = (uint64_t (**)())&unk_1E25C70A0;
            v804 = xmmword_18D319790;
            v806 = v807;
            v820 = 0x1700000001;
            v818 = &off_1E25C6B00;
            v821 = v822;
            v445 = v744;
            if (v744 == 1)
            {
              v446 = 0;
              *(_QWORD *)&v447 = 0x100000001;
              *((_QWORD *)&v447 + 1) = 0x100000001;
              v819 = v447;
              LODWORD(v822[0]) = 0;
              v448 = 1;
              v449 = &qword_18D319000;
            }
            else
            {
              v449 = &qword_18D319000;
              if ((int)v744 <= 0)
              {
                v448 = 0;
                v445 = 0;
                v819 = 0uLL;
                v446 = 1;
              }
              else
              {
                v450 = 0;
                LODWORD(v819) = 1;
                DWORD1(v819) = v744;
                *((_QWORD *)&v819 + 1) = v744 | 0x100000000;
                do
                {
                  *((_DWORD *)v822 + v450) = v450;
                  ++v450;
                }
                while (v744 != v450);
                v446 = 0;
                v448 = 1;
                v445 = v744;
              }
            }
            v764.__r_.__value_.__r.__words[2] = 0x100000017;
            v763 = &off_1E25C6F50;
            v765 = (double *)v766;
            v764.__r_.__value_.__r.__words[0] = __PAIR64__(v448, v445);
            LODWORD(v764.__r_.__value_.__r.__words[1]) = v445 * v448;
            HIDWORD(v764.__r_.__value_.__r.__words[1]) = v445;
            if (v445)
            {
              v465 = 0;
              for (k = 0; k != v445; ++k)
              {
                if ((v446 & 1) == 0)
                {
                  v467 = 0;
                  do
                  {
                    *((_DWORD *)v766 + k + HIDWORD(v764.__r_.__value_.__r.__words[1]) * v467) = *((_DWORD *)v822
                                                                                                + v465
                                                                                                + v467);
                    ++v467;
                  }
                  while (v448 != v467);
                }
                v465 += v448;
              }
            }
            sub_18D053D7C((uint64_t)&v910, (uint64_t)&v763);
            v468 = v435 - 1;
            v469 = (cnprint::CNLogFormatter *)v449[169];
            v820 = (uint64_t)v469;
            v818 = &off_1E25C6B60;
            v821 = v822;
            if ((_DWORD)v435 - 1 == v744)
            {
              LOBYTE(v470) = 0;
              *(_QWORD *)&v471 = 0x100000001;
              *((_QWORD *)&v471 + 1) = 0x100000001;
              v819 = v471;
              LODWORD(v822[0]) = v744;
              v472 = 1;
              v473 = 1;
            }
            else if ((int)(v468 - v744) < 0)
            {
              v472 = 0;
              v473 = 0;
              v819 = 0uLL;
              LOBYTE(v470) = 1;
            }
            else
            {
              v473 = v435 - v744;
              LODWORD(v819) = 1;
              DWORD1(v819) = v435 - v744;
              DWORD2(v819) = v435 - v744;
              HIDWORD(v819) = 1;
              v474 = v822;
              v470 = v435 - v744;
              v475 = v744;
              do
              {
                *v474++ = v475++;
                --v470;
              }
              while (v470);
              v472 = 1;
            }
            v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
            v763 = (uint64_t (**)())&unk_1E25C70D0;
            v765 = (double *)v766;
            v764.__r_.__value_.__r.__words[0] = __PAIR64__(v472, v473);
            LODWORD(v764.__r_.__value_.__r.__words[1]) = v473 * v472;
            HIDWORD(v764.__r_.__value_.__r.__words[1]) = v473;
            if (v473)
            {
              v476 = 0;
              for (m = 0; m != v473; ++m)
              {
                if ((v470 & 1) == 0)
                {
                  v478 = 0;
                  do
                  {
                    *((_DWORD *)v766 + m + HIDWORD(v764.__r_.__value_.__r.__words[1]) * v478) = *((_DWORD *)v822
                                                                                                + v476
                                                                                                + v478);
                    ++v478;
                  }
                  while (v472 != v478);
                }
                v476 += v472;
              }
            }
            sub_18D053D7C((uint64_t)&v915, (uint64_t)&v763);
            sub_18D1D1778((uint64_t)&v763, (uint64_t)&v956, (uint64_t)&v915, (uint64_t)&v915);
            v479 = sub_18D053AA8((uint64_t)&v795, (uint64_t)&v763);
            v773 = &unk_1E25C5EA0;
            v767 = (uint64_t (**)())&unk_1E25C5EA0;
            v480 = v766[0];
            v763 = (uint64_t (**)())&unk_1E25C7160;
            v766[0] = 0;
            if (v480)
              MEMORY[0x18D78B5BC](v480, 0x1000C8000313F17, v479);
            sub_18D1E32E8((uint64_t)&v763, (uint64_t)&v956, (uint64_t)&v910, (uint64_t)&v910);
            v481 = sub_18D053AA8((uint64_t)&v853, (uint64_t)&v763);
            v772 = &unk_1E25C5EA0;
            v767 = (uint64_t (**)())&unk_1E25C5EA0;
            v482 = v766[0];
            v763 = (uint64_t (**)())&unk_1E25C6F80;
            v766[0] = 0;
            if (v482)
              MEMORY[0x18D78B5BC](v482, 0x1000C8000313F17, v481);
            sub_18D1E3514((uint64_t)&v763, (uint64_t)&v956, (uint64_t)&v910, (uint64_t)&v915);
            v753 = v469;
            v483 = sub_18D053AA8((uint64_t)&v874, (uint64_t)&v763);
            v772 = &unk_1E25C5EA0;
            v767 = (uint64_t (**)())&unk_1E25C5EA0;
            v484 = v766[0];
            v763 = (uint64_t (**)())&unk_1E25C6FB0;
            v766[0] = 0;
            if (v484)
              MEMORY[0x18D78B5BC](v484, 0x1000C8000313F17, v483);
            sub_18D1E0FCC((uint64_t)&v763, (uint64_t)&v844, (uint64_t)&v910);
            sub_18D053AA8((uint64_t)&v808, (uint64_t)&v763);
            sub_18D1D1680((uint64_t)&v763, (uint64_t)&v844, (uint64_t)&v915);
            sub_18D053AA8((uint64_t)&v813, (uint64_t)&v763);
            v485 = pow(6.28318531, (double)(int)v736 * -0.5);
            v486 = exp(v429 * -0.5);
            sub_18D1E375C((uint64_t)&v818);
            sub_18D1D4A98(v740, 0, (uint64_t)&v818);
            sub_18D1E375C((uint64_t)&v763);
            v487 = DWORD1(v819);
            LODWORD(v764.__r_.__value_.__l.__data_) = 1;
            HIDWORD(v764.__r_.__value_.__r.__words[0]) = DWORD1(v819);
            v764.__r_.__value_.__l.__size_ = DWORD1(v819) | 0x100000000;
            if (DWORD1(v819))
            {
              v488 = 0;
              v489 = v819;
              v490 = (uint64_t)v821;
              v491 = v765;
              v492 = v819 - 1;
              v493 = 1;
              do
              {
                v494 = *(double *)(v490 + 8 * v489 * v488);
                v495 = v493;
                v496 = v492;
                if (v489 >= 2)
                {
                  do
                  {
                    v494 = v494 * *(double *)(v490 + 8 * v495++);
                    --v496;
                  }
                  while (v496);
                }
                v491[v488++] = v494;
                v493 += v489;
              }
              while (v488 != v487);
            }
            else
            {
              v491 = v765;
            }
            v497 = *v491;
            v498 = v766[0];
            v763 = &off_1E25C7FD0;
            v766[0] = 0;
            if (v498)
              MEMORY[0x18D78B5BC](v498, 0x1000C8000313F17);
            v763 = (uint64_t (**)())&unk_1E25C5E70;
            v499 = v822[0];
            v818 = &off_1E25C7FD0;
            v822[0] = 0;
            if (v499)
              MEMORY[0x18D78B5BC](v499, 0x1000C8000313F17);
            sub_18D1E375C((uint64_t)&v818);
            sub_18D1D4A98((uint64_t)&v795, 0, (uint64_t)&v818);
            sub_18D1E375C((uint64_t)&v763);
            v500 = DWORD1(v819);
            LODWORD(v764.__r_.__value_.__l.__data_) = 1;
            HIDWORD(v764.__r_.__value_.__r.__words[0]) = DWORD1(v819);
            v764.__r_.__value_.__l.__size_ = DWORD1(v819) | 0x100000000;
            if (DWORD1(v819))
            {
              v501 = 0;
              v502 = v819;
              v503 = (uint64_t)v821;
              v504 = v765;
              v505 = v819 - 1;
              v506 = 1;
              do
              {
                v507 = *(double *)(v503 + 8 * v502 * v501);
                v508 = v506;
                v509 = v505;
                if (v502 >= 2)
                {
                  do
                  {
                    v507 = v507 * *(double *)(v503 + 8 * v508++);
                    --v509;
                  }
                  while (v509);
                }
                v504[v501++] = v507;
                v506 += v502;
              }
              while (v501 != v500);
            }
            else
            {
              v504 = v765;
            }
            v510 = *v504;
            v511 = v766[0];
            v763 = &off_1E25C7FD0;
            v766[0] = 0;
            if (v511)
              MEMORY[0x18D78B5BC](v511, 0x1000C8000313F17);
            v763 = (uint64_t (**)())&unk_1E25C5E70;
            v512 = v822[0];
            v818 = &off_1E25C7FD0;
            v822[0] = 0;
            if (v512)
              MEMORY[0x18D78B5BC](v512, 0x1000C8000313F17);
            sub_18D1E39D8((uint64_t)&v818);
            sub_18D1D4A98(v739, 0, (uint64_t)&v818);
            sub_18D1E39D8((uint64_t)&v763);
            v513 = DWORD1(v819);
            LODWORD(v764.__r_.__value_.__l.__data_) = 1;
            HIDWORD(v764.__r_.__value_.__r.__words[0]) = DWORD1(v819);
            v764.__r_.__value_.__l.__size_ = DWORD1(v819) | 0x100000000;
            v757 = v485;
            if (DWORD1(v819))
            {
              v514 = 0;
              v515 = v819;
              v516 = (uint64_t)v821;
              v517 = v765;
              v518 = v819 - 1;
              v519 = 1;
              do
              {
                v520 = *(double *)(v516 + 8 * v515 * v514);
                v521 = v519;
                v522 = v518;
                if (v515 >= 2)
                {
                  do
                  {
                    v520 = v520 * *(double *)(v516 + 8 * v521++);
                    --v522;
                  }
                  while (v522);
                }
                v517[v514++] = v520;
                v519 += v515;
              }
              while (v514 != v513);
            }
            else
            {
              v517 = v765;
            }
            v523 = *v517;
            v524 = v766[0];
            v763 = &off_1E25C7BE0;
            v766[0] = 0;
            if (v524)
              MEMORY[0x18D78B5BC](v524, 0x1000C8000313F17);
            v763 = (uint64_t (**)())&unk_1E25C5E70;
            v525 = v822[0];
            v818 = &off_1E25C7BE0;
            v822[0] = 0;
            if (v525)
              MEMORY[0x18D78B5BC](v525, 0x1000C8000313F17);
            sub_18D1E39D8((uint64_t)&v818);
            sub_18D1D4A98((uint64_t)&v853, 0, (uint64_t)&v818);
            sub_18D1E39D8((uint64_t)&v763);
            v526 = DWORD1(v819);
            LODWORD(v764.__r_.__value_.__l.__data_) = 1;
            HIDWORD(v764.__r_.__value_.__r.__words[0]) = DWORD1(v819);
            v764.__r_.__value_.__l.__size_ = DWORD1(v819) | 0x100000000;
            if (DWORD1(v819))
            {
              v527 = 0;
              v528 = v819;
              v529 = (uint64_t)v821;
              v530 = v765;
              v531 = v819 - 1;
              v532 = 1;
              do
              {
                v533 = *(double *)(v529 + 8 * v528 * v527);
                v534 = v532;
                v535 = v531;
                if (v528 >= 2)
                {
                  do
                  {
                    v533 = v533 * *(double *)(v529 + 8 * v534++);
                    --v535;
                  }
                  while (v535);
                }
                v530[v527++] = v533;
                v532 += v528;
              }
              while (v527 != v526);
              v536 = v54;
            }
            else
            {
              v536 = v54;
              v530 = v765;
            }
            v537 = *v530;
            v538 = v766[0];
            v763 = &off_1E25C7BE0;
            v766[0] = 0;
            if (v538)
              MEMORY[0x18D78B5BC](v538, 0x1000C8000313F17);
            v763 = (uint64_t (**)())&unk_1E25C5E70;
            v539 = v822[0];
            v818 = &off_1E25C7BE0;
            v822[0] = 0;
            if (v539)
              MEMORY[0x18D78B5BC](v539, 0x1000C8000313F17);
            v540 = v486 * (v757 * fabs(v737 * (v497 * v523) / (v742 * v510 * v537)));
            v541 = v745 + 1592;
            if (v833)
            {
              if (v732)
              {
                v820 = 0x10000001ALL;
                v818 = (uint64_t (**)())&unk_1E25C70A0;
                v819 = xmmword_18D319790;
                v821 = v822;
                sub_18D053B2C((uint64_t)&v795, (uint64_t)&v939, (uint64_t)&v818);
                v542 = v745 + 1320;
                v543 = (uint64_t *)(v745 + 1224);
                v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
                v763 = (uint64_t (**)())&unk_1E25C70A0;
                *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319790;
                v765 = (double *)v766;
                v544 = (__n128)sub_18D0540FC((uint64_t)&v813, (uint64_t)&v818, (uint64_t)&v763);
                LOBYTE(v818) = 0;
                if (v732(v750, v954, &v763, &v795, v731, &v818, &v803, &v813, v544))
                {
                  v111 = 18;
LABEL_595:
                  v620 = v880;
                  v874 = (uint64_t (**)())&unk_1E25C6FB0;
                  v880 = 0;
                  if (v620)
                    MEMORY[0x18D78B5BC](v620, 0x1000C8000313F17);
                  v621 = v860[0];
                  v853 = &unk_1E25C6F80;
                  v860[0] = 0;
                  if (v621)
                    MEMORY[0x18D78B5BC](v621, 0x1000C8000313F17);
                  v622 = v802[0];
                  v795 = &unk_1E25C7160;
                  v802[0] = 0;
                  if (v622)
                    MEMORY[0x18D78B5BC](v622, 0x1000C8000313F17);
                  goto LABEL_601;
                }
                if (!(_BYTE)v818)
                {
                  sub_18D053AA8(v373 + 552, (uint64_t)&v939);
                  sub_18D053AA8(v373 + 848, (uint64_t)&v813);
                  sub_18D053AA8(v373 + 800, (uint64_t)&v795);
                  sub_18D053AA8(v735, (uint64_t)&v874);
                  sub_18D053AA8(v734, (uint64_t)&v808);
                  v169 = sub_18D053AA8(v728, (uint64_t)&v853);
                  v111 = 0;
                  *(double *)(v373 + 1096) = v540;
                  *(_DWORD *)(v373 + 1108) = 1;
                  goto LABEL_595;
                }
              }
              else
              {
                sub_18D1C99C8((uint64_t)&v758);
                v542 = v745 + 1320;
                v543 = (uint64_t *)(v745 + 1224);
                sub_18D1C99C8((uint64_t)&v866);
                v820 = 0x10000001ALL;
                v818 = (uint64_t (**)())&unk_1E25C70D0;
                v819 = xmmword_18D319790;
                v821 = v822;
                v829 = 0x10000001ALL;
                v827 = (uint64_t (**)())&unk_1E25C70D0;
                v828 = xmmword_18D319790;
                v830 = v831;
                v764.__r_.__value_.__r.__words[2] = 0x100000068;
                v763 = (uint64_t (**)())&unk_1E25C5F90;
                *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D3198A0;
                v765 = (double *)v766;
                v547 = sub_18D054568((uint64_t)&v795, (uint64_t)&v818, (uint64_t)&v827, (uint64_t)&v763, (uint64_t)&v866);
                v548 = sub_18D053AA8((uint64_t)&v758, (uint64_t)&v866);
                v549 = v873;
                v866 = (uint64_t (**)())&unk_1E25C7160;
                v873 = 0;
                v111 = v746;
                if (v549)
                  MEMORY[0x18D78B5BC](v549, 0x1000C8000313F17, v548);
                if (v547 > v536)
                {
                  sub_18D053AA8(v373 + 552, (uint64_t)&v939);
                  sub_18D053AA8(v373 + 848, (uint64_t)&v813);
                  sub_18D053AA8(v373 + 800, (uint64_t)&v795);
                  sub_18D053AA8(v735, (uint64_t)&v874);
                  sub_18D053AA8(v734, (uint64_t)&v808);
                  v169 = sub_18D053AA8(v728, (uint64_t)&v853);
                  v111 = 0;
                  *(double *)(v373 + 1096) = v540;
                  *(_BYTE *)(v373 + 1104) = 1;
                  *(_DWORD *)(v373 + 1108) = 1;
                }
                else
                {
                  sub_18D1B857C((uint64_t)&v763, (uint64_t)&v758, (uint64_t)&v813);
                  v169 = sub_18D053AA8((uint64_t)&v803, (uint64_t)&v763);
                  *(_BYTE *)(v373 + 1104) = 2;
                }
                v552 = v762[0];
                v758 = (uint64_t (**)())&unk_1E25C7160;
                v762[0] = 0;
                if (v552)
                  MEMORY[0x18D78B5BC](v552, 0x1000C8000313F17, v169);
                if (v547 > v536)
                  goto LABEL_595;
              }
              goto LABEL_588;
            }
            if (!v729)
            {
              sub_18D053AA8(v373 + 552, (uint64_t)&v939);
              sub_18D053AA8(v373 + 800, v740);
              v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
              v763 = (uint64_t (**)())&unk_1E25C70A0;
              *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319790;
              v765 = (double *)v766;
              sub_18D053B2C(v373 + 800, (uint64_t)&v939, (uint64_t)&v763);
              sub_18D053AA8(v373 + 848, (uint64_t)&v763);
              sub_18D1E08D8((uint64_t)&v763, v744, v750);
              v764.__r_.__value_.__r.__words[0] = __PAIR64__(v750, v744);
              LODWORD(v764.__r_.__value_.__r.__words[1]) = v744 * v750;
              HIDWORD(v764.__r_.__value_.__r.__words[1]) = v744;
              sub_18D04BE88((uint64_t)&v763, 0.0);
              v550 = sub_18D053AA8(v735, (uint64_t)&v763);
              v551 = v766[0];
              v763 = (uint64_t (**)())&unk_1E25C6FB0;
              v766[0] = 0;
              if (v551)
                MEMORY[0x18D78B5BC](v551, 0x1000C8000313F17, v550);
              v820 = 0x100000017;
              v818 = &off_1E25C6F20;
              v819 = xmmword_18D3197B0;
              v821 = v822;
              sub_18D053B2C(v739, (uint64_t)&v947, (uint64_t)&v818);
              v829 = 0x100000017;
              v827 = &off_1E25C6F20;
              v828 = xmmword_18D3197B0;
              v830 = v831;
              sub_18D053B2C(v735, (uint64_t)&v939, (uint64_t)&v827);
              v764.__r_.__value_.__r.__words[2] = 0x100000017;
              v763 = &off_1E25C6F20;
              *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D3197B0;
              v765 = (double *)v766;
              sub_18D053FA4((uint64_t)&v818, (uint64_t)&v827, (uint64_t)&v763);
              sub_18D053AA8(v734, (uint64_t)&v763);
              v169 = sub_18D053AA8(v728, v739);
              *(double *)(v373 + 1096) = v540;
              goto LABEL_594;
            }
            v764.__r_.__value_.__r.__words[2] = 0x3100000001;
            v763 = &off_1E25C6CB0;
            v765 = (double *)v766;
            if ((_DWORD)v435 == 1)
            {
              *(_QWORD *)&v553 = 0x100000001;
              *((_QWORD *)&v553 + 1) = 0x100000001;
              *(_OWORD *)&v764.__r_.__value_.__l.__data_ = v553;
              LODWORD(v766[0]) = 0;
              v546 = 1;
              LODWORD(v435) = 1;
            }
            else if ((int)v435 <= 0)
            {
              v546 = 0;
              LODWORD(v435) = 0;
              *(_OWORD *)&v764.__r_.__value_.__l.__data_ = 0uLL;
            }
            else
            {
              v545 = 0;
              LODWORD(v764.__r_.__value_.__l.__data_) = 1;
              HIDWORD(v764.__r_.__value_.__r.__words[0]) = v435;
              v764.__r_.__value_.__l.__size_ = v435 | 0x100000000;
              do
              {
                *((_DWORD *)v766 + v545) = v545;
                ++v545;
              }
              while (v435 != v545);
              v546 = 1;
            }
            v829 = 0x100000031;
            v827 = &off_1E25C7CA0;
            *(_QWORD *)&v828 = __PAIR64__(v546, v435);
            DWORD2(v828) = v546 * v435;
            HIDWORD(v828) = v435;
            v830 = v831;
            sub_18D163160((uint64_t)&v763, (uint64_t)&v827);
            v554 = DWORD1(v862);
            v820 = 0x100000031;
            v818 = &off_1E25C7CA0;
            if ((DWORD1(v862) & 0x80000000) != 0)
              __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
            v555 = vdupq_lane_s32((int32x2_t)(DWORD1(v862) | 0x100000000), 0);
            v555.i32[1] = 1;
            v819 = (__int128)v555;
            v821 = v822;
            if (DWORD1(v862))
            {
              v556 = 0;
              do
              {
                *((_DWORD *)v822 + v556) = v556;
                ++v556;
              }
              while (v554 != v556);
            }
            sub_18D1E3C54((uint64_t)&v763);
            v763 = &off_1E25C50F0;
            v766[1] = &v861;
            v769 = 0x100000031;
            v767 = &off_1E25C7CA0;
            v768 = xmmword_18D319BC0;
            v776 = 0x100000031;
            v770 = &v771;
            v774 = &off_1E25C7CA0;
            v775 = xmmword_18D319BC0;
            v777 = v778;
            sub_18D053D7C((uint64_t)&v767, (uint64_t)&v827);
            sub_18D053D7C((uint64_t)&v774, (uint64_t)&v818);
            v557 = DWORD2(v768);
            v558 = DWORD2(v775);
            v764.__r_.__value_.__r.__words[0] = __PAIR64__(DWORD2(v775), DWORD2(v768));
            v559 = DWORD2(v775) * DWORD2(v768);
            LODWORD(v764.__r_.__value_.__r.__words[1]) = DWORD2(v775) * DWORD2(v768);
            HIDWORD(v764.__r_.__value_.__r.__words[1]) = DWORD2(v768);
            if (!v766[0])
              __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
            if (DWORD2(v775))
            {
              v560 = 0;
              v561 = 0;
              v562 = HIDWORD(v862);
              v563 = v864;
              v564 = v777;
              v565 = v770;
              v566 = v765;
              do
              {
                if ((_DWORD)v557)
                {
                  v567 = *((_DWORD *)v564 + v561) * v562;
                  v568 = (int *)v565;
                  v569 = v560;
                  v570 = v557;
                  do
                  {
                    v571 = *v568++;
                    v566[v569++] = *(double *)&v563[v571 + v567];
                    --v570;
                  }
                  while (v570);
                }
                ++v561;
                v560 += v557;
              }
              while (v561 != v558);
            }
            v871 = 0x3100000031;
            v866 = &off_1E25C7CD0;
            v873 = 0;
            v872 = 0;
            v867 = v557;
            v868 = v558;
            v869 = v559;
            v870 = v557;
            sub_18D1E3EE8((uint64_t)&v866);
            v572 = v873;
            v872 = v873;
            if (v873)
            {
              if (v871 < LODWORD(v764.__r_.__value_.__l.__data_))
              {
                v721 = "this->max_num_rows_ >= A.num_rows_";
                v722 = 616;
              }
              else
              {
                if (HIDWORD(v871) >= HIDWORD(v764.__r_.__value_.__r.__words[0]))
                {
                  v573 = v764.__r_.__value_.__r.__words[1];
                  if (SLODWORD(v764.__r_.__value_.__r.__words[1]) > 3)
                  {
                    v577 = v765;
                    v578 = (LODWORD(v764.__r_.__value_.__r.__words[1]) - 1) >> 1;
                    v579 = v765;
                    v580 = v873;
                    do
                    {
                      v581 = *(_OWORD *)v579;
                      v579 += 2;
                      *v580++ = v581;
                      --v578;
                    }
                    while (v578);
                    *(_OWORD *)&v572[v573 - 2] = *(_OWORD *)&v577[v573 - 2];
                  }
                  else
                  {
                    v574 = v869;
                    if (v869 >= 1)
                    {
                      v575 = v765;
                      do
                      {
                        v576 = *(_QWORD *)v575++;
                        *v572++ = v576;
                        --v574;
                      }
                      while (v574);
                    }
                  }
                  v774 = (uint64_t (**)())&unk_1E25C5EA0;
                  v767 = (uint64_t (**)())&unk_1E25C5EA0;
                  v582 = v766[0];
                  v763 = &off_1E25C7CD0;
                  v766[0] = 0;
                  if (v582)
                    MEMORY[0x18D78B5BC](v582, 0x1000C8000313F17);
                  v764.__r_.__value_.__r.__words[2] = 0x100000031;
                  *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319BC0;
                  v763 = &off_1E25C5690;
                  v765 = (double *)v766;
                  v778[12] = &__p;
                  v781 = 0x100000031;
                  v779 = &off_1E25C7CA0;
                  v780 = xmmword_18D319BC0;
                  v782 = (int *)&v783;
                  sub_18D053D7C((uint64_t)&v779, (uint64_t)&v827);
                  v583 = v780;
                  v584 = DWORD1(v780);
                  v764.__r_.__value_.__r.__words[0] = v780;
                  v585 = (DWORD1(v780) * v780);
                  v764.__r_.__value_.__l.__size_ = __PAIR64__(v780, v585);
                  if ((int)v585 >= 1)
                  {
                    v586 = v851;
                    v587 = (DWORD1(v780) * v780);
                    v588 = v782;
                    v589 = v765;
                    do
                    {
                      v590 = *v588++;
                      *v589++ = *(double *)&v586[v590];
                      --v587;
                    }
                    while (v587);
                  }
                  v820 = 0x100000031;
                  v818 = (uint64_t (**)())&unk_1E25C7C70;
                  *(_QWORD *)&v819 = __PAIR64__(v584, v583);
                  *((_QWORD *)&v819 + 1) = __PAIR64__(v583, v585);
                  v591 = v822;
                  v821 = v822;
                  if (v583 > 0x31)
                  {
                    v723 = "this->max_num_rows_ >= A.num_rows_";
                    v724 = 616;
                  }
                  else
                  {
                    if (v584 < 2)
                    {
                      if ((int)v585 > 3)
                      {
                        v594 = v765;
                        v595 = (v585 - 1) >> 1;
                        v596 = v765;
                        v597 = v822;
                        do
                        {
                          v598 = *(_OWORD *)v596;
                          v596 += 2;
                          *v597++ = v598;
                          --v595;
                        }
                        while (v595);
                        *(_OWORD *)&v822[(v585 - 2)] = *(_OWORD *)&v594[(v585 - 2)];
                      }
                      else if ((int)v585 >= 1)
                      {
                        v592 = v765;
                        do
                        {
                          v593 = *(_QWORD *)v592++;
                          *v591++ = v593;
                          --v585;
                        }
                        while (v585);
                      }
                      sub_18D1E3C54((uint64_t)v823);
                      v764.__r_.__value_.__r.__words[2] = 0x100000031;
                      v763 = (uint64_t (**)())&unk_1E25C7C70;
                      *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319BC0;
                      v765 = (double *)v766;
                      sub_18D1E3C54((uint64_t)&v758);
                      sub_18D054C20((uint64_t)&v866, (uint64_t)&v818, (uint64_t)&v763, (uint64_t)&v758, (uint64_t)&v844, (uint64_t)v823);
                      v599 = v762[0];
                      v758 = &off_1E25C7CD0;
                      v762[0] = 0;
                      if (v599)
                        MEMORY[0x18D78B5BC](v599, 0x1000C8000313F17);
                      v760 = 0x1700000001;
                      v758 = &off_1E25C6B00;
                      v761 = v762;
                      v600 = v744;
                      if (v744 == 1)
                      {
                        *(_QWORD *)&v601 = 0x100000001;
                        *((_QWORD *)&v601 + 1) = 0x100000001;
                        v759 = v601;
                        LODWORD(v762[0]) = 0;
                        v602 = 1;
                        v308 = 1;
                        v542 = v745 + 1320;
                      }
                      else
                      {
                        v542 = v745 + 1320;
                        if ((int)v744 <= 0)
                        {
                          v602 = 0;
                          v308 = 0;
                          v759 = 0uLL;
                        }
                        else
                        {
                          v603 = 0;
                          LODWORD(v759) = 1;
                          DWORD1(v759) = v744;
                          *((_QWORD *)&v759 + 1) = v744 | 0x100000000;
                          do
                          {
                            *((_DWORD *)v762 + v603) = v603;
                            ++v603;
                          }
                          while (v744 != v603);
                          v602 = 1;
                        }
                      }
                      v764.__r_.__value_.__r.__words[2] = 0x100000017;
                      v763 = &off_1E25C6F50;
                      v764.__r_.__value_.__r.__words[0] = __PAIR64__(v602, v308);
                      LODWORD(v764.__r_.__value_.__r.__words[1]) = v602 * v308;
                      HIDWORD(v764.__r_.__value_.__r.__words[1]) = v308;
                      v765 = (double *)v766;
                      sub_18D163160((uint64_t)&v758, (uint64_t)&v763);
                      sub_18D053D7C((uint64_t)&v910, (uint64_t)&v763);
                      v760 = (uint64_t)v753;
                      v758 = &off_1E25C6B60;
                      v604 = v762;
                      v761 = v762;
                      v543 = (uint64_t *)(v745 + 1224);
                      if (v468 == v744)
                      {
                        *(_QWORD *)&v605 = 0x100000001;
                        *((_QWORD *)&v605 + 1) = 0x100000001;
                        v759 = v605;
                        LODWORD(v762[0]) = v744;
                        v606 = 1;
                        v607 = 1;
                      }
                      else if ((int)(v468 - v744) < 0)
                      {
                        v606 = 0;
                        v607 = 0;
                        v759 = 0uLL;
                      }
                      else
                      {
                        v607 = v468 - v744 + 1;
                        LODWORD(v759) = 1;
                        DWORD1(v759) = v607;
                        *((_QWORD *)&v759 + 1) = v607 | 0x100000000;
                        v608 = v607;
                        do
                        {
                          *v604++ = v600++;
                          --v608;
                        }
                        while (v608);
                        v606 = 1;
                      }
                      v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
                      v763 = (uint64_t (**)())&unk_1E25C70D0;
                      v764.__r_.__value_.__r.__words[0] = __PAIR64__(v606, v607);
                      LODWORD(v764.__r_.__value_.__r.__words[1]) = v606 * v607;
                      HIDWORD(v764.__r_.__value_.__r.__words[1]) = v607;
                      v765 = (double *)v766;
                      sub_18D163160((uint64_t)&v758, (uint64_t)&v763);
                      v541 = v745 + 1592;
                      sub_18D053D7C((uint64_t)&v915, (uint64_t)&v763);
                      sub_18D1D1778((uint64_t)&v763, (uint64_t)v823, (uint64_t)&v915, (uint64_t)&v915);
                      v609 = sub_18D053AA8((uint64_t)&v795, (uint64_t)&v763);
                      v773 = &unk_1E25C5EA0;
                      v767 = (uint64_t (**)())&unk_1E25C5EA0;
                      v610 = v766[0];
                      v763 = (uint64_t (**)())&unk_1E25C7160;
                      v766[0] = 0;
                      if (v610)
                        MEMORY[0x18D78B5BC](v610, 0x1000C8000313F17, v609);
                      sub_18D1E32E8((uint64_t)&v763, (uint64_t)v823, (uint64_t)&v910, (uint64_t)&v910);
                      v611 = sub_18D053AA8((uint64_t)&v853, (uint64_t)&v763);
                      v772 = &unk_1E25C5EA0;
                      v767 = (uint64_t (**)())&unk_1E25C5EA0;
                      v612 = v766[0];
                      v763 = (uint64_t (**)())&unk_1E25C6F80;
                      v766[0] = 0;
                      if (v612)
                        MEMORY[0x18D78B5BC](v612, 0x1000C8000313F17, v611);
                      sub_18D1E3514((uint64_t)&v763, (uint64_t)v823, (uint64_t)&v910, (uint64_t)&v915);
                      v613 = sub_18D053AA8((uint64_t)&v874, (uint64_t)&v763);
                      v772 = &unk_1E25C5EA0;
                      v767 = (uint64_t (**)())&unk_1E25C5EA0;
                      v614 = v766[0];
                      v763 = (uint64_t (**)())&unk_1E25C6FB0;
                      v766[0] = 0;
                      if (v614)
                        MEMORY[0x18D78B5BC](v614, 0x1000C8000313F17, v613);
                      sub_18D1E0FCC((uint64_t)&v763, (uint64_t)&v844, (uint64_t)&v910);
                      sub_18D053AA8((uint64_t)&v808, (uint64_t)&v763);
                      sub_18D1D1680((uint64_t)&v763, (uint64_t)&v844, (uint64_t)&v915);
                      sub_18D053AA8((uint64_t)&v813, (uint64_t)&v763);
                      v615 = sub_18D053AA8((uint64_t)&v803, (uint64_t)&v939);
                      v616 = v826;
                      v823[0] = &off_1E25C7CD0;
                      v826 = 0;
                      if (v616)
                        MEMORY[0x18D78B5BC](v616, 0x1000C8000313F17, v615);
                      v617 = v873;
                      v866 = &off_1E25C7CD0;
                      v873 = 0;
                      if (v617)
                        MEMORY[0x18D78B5BC](v617, 0x1000C8000313F17, v615);
LABEL_588:
                      sub_18D053AA8(v373 + 552, (uint64_t)&v803);
                      sub_18D053AA8(v373 + 800, (uint64_t)&v795);
                      sub_18D053AA8(v373 + 848, (uint64_t)&v813);
                      sub_18D053AA8(v542, (uint64_t)&v874);
                      sub_18D053AA8(v734, (uint64_t)&v808);
                      v169 = sub_18D053AA8(v541, (uint64_t)&v853);
                      *(double *)(v373 + 1096) = v540;
                      if ((_DWORD)v444 == 9 || !(_DWORD)v444)
                      {
                        sub_18D1E4000(v543, ((uint64_t)(*(_QWORD *)(v373 + 1256) - *(_QWORD *)(v373 + 1248)) >> 5)+ ((uint64_t)(*(_QWORD *)(v373 + 1232) - *(_QWORD *)(v373 + 1224)) >> 5));
                        v618 = *(_QWORD *)(v373 + 1248);
                        v619 = *(_QWORD *)(v373 + 1256);
                        while (v618 != v619)
                        {
                          sub_18D1E4090(v543, v618);
                          v618 += 32;
                        }
                        sub_18D1C59EC((uint64_t *)(v373 + 1248));
                      }
LABEL_594:
                      *(_DWORD *)(v373 + 1108) = 1;
                      v111 = v444;
                      goto LABEL_595;
                    }
                    v723 = "this->max_num_cols_ >= A.num_cols_";
                    v724 = 617;
                  }
                  __assert_rtn("CNMatrix", "cnmatrix.h", v724, v723);
                }
                v721 = "this->max_num_cols_ >= A.num_cols_";
                v722 = 617;
              }
            }
            else
            {
              v721 = "this->allocated_data_ != NULL";
              v722 = 615;
            }
            __assert_rtn("CNMatrix", "cnmatrix.h", v722, v721);
          }
          cnstatistics::InverseChi2(v427, v55, (double)(int)v736);
          v453 = v452;
          if (v429 <= v452)
          {
            v444 = 0;
            v833 = 1;
          }
          else
          {
            if (v738)
            {
              LOWORD(v763) = 2;
              LOBYTE(v818) = 2;
              cnprint::CNLogFormatter::FormatGeneral((const void **)(v373 + 1272), "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg; begin local testing",
                v736,
                v429,
                v452);
              if (*(char *)(v373 + 1295) >= 0)
                LOBYTE(v459) = v373 - 8;
              else
                v459 = *(_QWORD *)(v373 + 1272);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&v818, "%s", v454, v455, v456, v457, v458, v459);
              cnstatistics::InverseChi2(v460, v55, 1.0);
              v462 = v461;
              v832 = INFINITY;
              sub_18D1BEA24((uint64_t)&v763, v373 + 256, &v832);
              sub_18D19162C((uint64_t)&v853, (uint64_t)&v763);
              v464 = v766[0];
              v763 = (uint64_t (**)())&unk_1E25C7160;
              v766[0] = 0;
              if (v464)
                MEMORY[0x18D78B5BC](v464, 0x1000C8000313F17);
              v463.n128_f64[0] = v832;
              if (v832 > v54)
              {
                v444 = 0;
                v435 = v756;
LABEL_705:
                v714 = v860[0];
                v853 = &unk_1E25C7160;
                v860[0] = 0;
                if (v714)
                  MEMORY[0x18D78B5BC](v714, 0x1000C8000313F17, v463);
                goto LABEL_412;
              }
              sub_18D1E1D40((uint64_t)&v874, v736 + v750, v736);
              sub_18D1DF910((uint64_t)&v763, (uint64_t)&v889);
              sub_18D1DF9C4((uint64_t)&v818, (uint64_t)&v853, (uint64_t)&v763);
              if (v750 >= 1)
              {
                v638 = 0;
                v639 = (uint64_t)v821;
                v640 = v879;
                v641 = 8 * v878;
                v642 = 8 * SHIDWORD(v819);
                do
                {
                  v643 = (_QWORD *)v639;
                  v644 = v640;
                  v645 = v736;
                  if ((int)v736 >= 1)
                  {
                    do
                    {
                      *v644 = *v643;
                      v644 = (_QWORD *)((char *)v644 + v641);
                      v643 = (_QWORD *)((char *)v643 + v642);
                      --v645;
                    }
                    while (v645);
                  }
                  ++v638;
                  ++v640;
                  v639 += 8;
                }
                while (v638 != v750);
              }
              v646 = v822[0];
              v818 = &off_1E25C7280;
              v822[0] = 0;
              if (v646)
                MEMORY[0x18D78B5BC](v646, 0x1000C8000313F17);
              v647 = v766[0];
              v763 = &off_1E25C7280;
              v766[0] = 0;
              if (v647)
                MEMORY[0x18D78B5BC](v647, 0x1000C8000313F17);
              if ((int)v736 >= 1)
              {
                v648 = v878;
                v649 = v879;
                v650 = &v879[v750];
                v651 = 8 * v878;
                v652 = v750;
                do
                {
                  v653 = v650;
                  v654 = v736;
                  do
                  {
                    *v653 = 0;
                    v653 = (_QWORD *)((char *)v653 + v651);
                    --v654;
                  }
                  while (v654);
                  v649[v652 + (v652 - v750) * v648] = 0x3FF0000000000000;
                  ++v652;
                  ++v650;
                }
                while (v652 < (int)v736 + v750);
              }
              sub_18D1DFAD8((uint64_t)&v866, (uint64_t)&v874);
              sub_18D1DF868(0, v736 - 1, (uint64_t)&v763);
              sub_18D1DF7FC((uint64_t)&v763, (uint64_t)&v827);
              sub_18D1DFD60((uint64_t)&v763, (uint64_t)&v866, (uint64_t)&v827, (uint64_t)&v827);
              sub_18D1DFC34((uint64_t)&v763, &v832, (uint64_t)v823);
              v655 = v766[0];
              v763 = (uint64_t (**)())&unk_1E25C84B0;
              v766[0] = 0;
              if (v655)
                MEMORY[0x18D78B5BC](v655, 0x1000C8000313F17);
              v463.n128_f64[0] = v832;
              if (v832 > v54)
              {
                v444 = 0;
                v435 = v756;
LABEL_699:
                v711 = v826;
                v823[0] = &unk_1E25C84B0;
                v826 = 0;
                if (v711)
                  MEMORY[0x18D78B5BC](v711, 0x1000C8000313F17, v463);
                v712 = v873;
                v866 = &off_1E25C6140;
                v873 = 0;
                if (v712)
                  MEMORY[0x18D78B5BC](v712, 0x1000C8000313F17, v463);
                v713 = v880;
                v874 = &off_1E25C6140;
                v880 = 0;
                if (v713)
                  MEMORY[0x18D78B5BC](v713, 0x1000C8000313F17, v463);
                goto LABEL_705;
              }
              v820 = 0x100000057;
              v818 = (uint64_t (**)())&unk_1E25C83C0;
              v819 = xmmword_18D3197F0;
              v821 = v822;
              sub_18D0540FC((uint64_t)&v905, (uint64_t)&v897, (uint64_t)&v818);
              sub_18D1DFED0((uint64_t)v823, (uint64_t)&v803);
              sub_18D1DFE68((uint64_t)&v803, (uint64_t)&v818, (uint64_t)&v763);
              sub_18D1DFE68((uint64_t)v823, (uint64_t)&v763, (uint64_t)&v813);
              v763 = (uint64_t (**)())&unk_1E25C5E70;
              v656 = (cnprint::CNPrinter *)v807[0];
              v803 = (uint64_t (**)())&unk_1E25C84B0;
              v807[0] = 0;
              if (v656)
                v656 = (cnprint::CNPrinter *)MEMORY[0x18D78B5BC](v656, 0x1000C8000313F17);
              v754 = (const void **)(v373 + 1272);
              v810 = 0x100000057;
              v808 = (uint64_t (**)())&unk_1E25C83F0;
              *(_QWORD *)&v809 = v736 | 0x100000000;
              DWORD2(v809) = v736;
              HIDWORD(v809) = v736;
              v811 = (int *)v812;
              if ((int)v736 < 1)
              {
                v660 = 0;
                v659 = 0;
              }
              else
              {
                v657 = 0;
                v658 = 0;
                v659 = 0;
                v660 = 0;
                do
                {
                  v661 = (double *)(v825 + v657 + v657 * v824);
                  v662 = 0.0;
                  v663 = v658;
                  do
                  {
                    v662 = v662 + *v661 * *v661;
                    ++v663;
                    v661 += v824;
                  }
                  while (v663 < v736);
                  v664 = *(double *)&v816[8 * v658] * (*(double *)&v816[8 * v658] / v662);
                  if (v664 <= v462)
                  {
                    v811[v659++] = v658;
                    ++v660;
                  }
                  else
                  {
                    v656 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v656);
                    if (v656 <= 1)
                    {
                      LOWORD(v763) = 2;
                      LOBYTE(v803) = 1;
                      v665 = cnprint::CNLogFormatter::FormatGeneral(v754, "SRIF Local test rejected measurement with Chi2 statistic %lg vs. bound %lg.", v664, v462);
                      if (*(char *)(v745 + 1295) >= 0)
                        LOBYTE(v671) = v665;
                      else
                        v671 = *(_QWORD *)(v745 + 1272);
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&v803, "%s", v666, v667, v668, v669, v670, v671);
                    }
                    v672 = *(_QWORD *)(v745 + 1248);
                    if ((int)v658 < (unint64_t)((*(_QWORD *)(v745 + 1256) - v672) >> 5))
                    {
                      v673 = *(_QWORD *)(v745 + 1208);
                      if (v673 >= *(_QWORD *)(v745 + 1216))
                      {
                        v674 = (cnprint::CNPrinter *)sub_18D1E09D4(v725, v672 + 32 * (int)v658);
                      }
                      else
                      {
                        sub_18D1E096C((uint64_t)v725, v672 + 32 * (int)v658);
                        v674 = (cnprint::CNPrinter *)(v673 + 32);
                      }
                      *(_QWORD *)(v745 + 1208) = v674;
                      v656 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v674);
                      if (v656 <= 1)
                      {
                        LOWORD(v763) = 2;
                        LOBYTE(v803) = 1;
                        v675 = v672 + 32 * (int)v658;
                        v676 = (const char *)(v675 + 8);
                        if (*(char *)(v675 + 31) < 0)
                          v676 = *(const char **)v676;
                        cnprint::CNLogFormatter::FormatGeneral(v754, "Rejected measurement of type,%d,%s,totalRejected,%d", *(_DWORD *)(v672 + 32 * (int)v658), v676, (*(_QWORD *)(v745 + 1208) - *(_QWORD *)(v745 + 1200)) >> 5);
                        LOBYTE(v682) = (_BYTE)v754;
                        if (*(char *)(v745 + 1295) < 0)
                          v682 = *(_QWORD *)(v745 + 1272);
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&v803, "%s", v677, v678, v679, v680, v681, v682);
                      }
                    }
                  }
                  ++v658;
                  v657 += 8;
                }
                while (v658 != v736);
              }
              v683 = vdupq_lane_s32((int32x2_t)(v659 | 0x100000000), 0);
              v683.i32[1] = 1;
              v809 = (__int128)v683;
              sub_18D1DFF54(v745, (uint64_t)&v808);
              if ((int)v736 > v660 && v660 >= 1)
              {
                sub_18D1E0154((uint64_t)&v795, v756 - 1);
                sub_18D1E00E8((uint64_t)&v758, (uint64_t)&v795);
                v764.__r_.__value_.__r.__words[2] = 0x100000057;
                v763 = (uint64_t (**)())&unk_1E25C83F0;
                v685 = v766;
                v765 = (double *)v766;
                v764.__r_.__value_.__r.__words[0] = v809;
                v686 = (DWORD1(v809) * v809);
                v764.__r_.__value_.__l.__size_ = __PAIR64__(v809, v686);
                v435 = v756;
                if ((int)v686 >= 1)
                {
                  v687 = v811;
                  do
                  {
                    v688 = *v687++;
                    *v685++ = v688 + v756;
                    --v686;
                  }
                  while (v686);
                }
                sub_18D1E007C((uint64_t)&v803, (uint64_t)&v758, (uint64_t)&v763);
                sub_18D1E01E8((uint64_t)&v763, (uint64_t)&v861, (uint64_t)&v803);
                v689 = sub_18D053AA8((uint64_t)&v861, (uint64_t)&v763);
                v789 = &unk_1E25C5EA0;
                v767 = (uint64_t (**)())&unk_1E25C5EA0;
                v690 = v766[0];
                v763 = &off_1E25C6290;
                v766[0] = 0;
                if (v690)
                  MEMORY[0x18D78B5BC](v690, 0x1000C8000313F17, v689);
                sub_18D1E29C0((uint64_t)&v763, (uint64_t)&__p, (uint64_t)&v803);
                sub_18D053AA8((uint64_t)&__p, (uint64_t)&v763);
                sub_18D1DF704((uint64_t)&v861, (uint64_t)&__p, (uint64_t)&v844, (uint64_t)&v956);
                sub_18D1DF868(v756, v659 + v756 - 1, (uint64_t)&v758);
                sub_18D1DF7FC((uint64_t)&v758, (uint64_t)&v763);
                sub_18D053D7C((uint64_t)&v834, (uint64_t)&v763);
                sub_18D1E1C4C((uint64_t)&v763, (uint64_t)&v844, (uint64_t)&v834);
                sub_18D053AA8((uint64_t)&v839, (uint64_t)&v763);
                cnstatistics::InverseChi2(v691, v726, (double)v660);
                v693 = v463.n128_f64[0];
                v694 = DWORD2(v840);
                v695 = 0.0;
                if (SDWORD2(v840) < 1)
                {
                  v373 = v745;
                }
                else
                {
                  v696 = (unint64_t *)v842;
                  v373 = v745;
                  do
                  {
                    v697 = *v696++;
                    v463.n128_u64[0] = v697;
                    v695 = v695 + v463.n128_f64[0] * v463.n128_f64[0];
                    --v694;
                  }
                  while (v694);
                }
                if (v695 <= v693)
                {
                  v444 = 9;
                  v710 = 1;
                }
                else
                {
                  if (cnprint::CNPrinter::GetLogLevel(v692) <= 1)
                  {
                    LOWORD(v763) = 2;
                    LOBYTE(v758) = 1;
                    cnprint::CNLogFormatter::FormatGeneral(v754, "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg after measurement set changed", v660, v695, v693);
                    if (*(char *)(v373 + 1295) >= 0)
                      LOBYTE(v709) = (_BYTE)v754;
                    else
                      v709 = *(_QWORD *)(v373 + 1272);
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&v758, "%s", v704, v705, v706, v707, v708, v709);
                  }
                  v710 = 0;
                  v444 = 8;
                }
                v833 = v710;
                goto LABEL_699;
              }
              if ((_DWORD)v736 == v660)
              {
                v373 = v745;
                v435 = v756;
                if (cnprint::CNPrinter::GetLogLevel(v684) <= 1)
                {
                  LOWORD(v763) = 2;
                  LOBYTE(v803) = 1;
                  cnprint::CNLogFormatter::FormatGeneral(v754, "Measurement set unchanged after local test.");
                  if (*(char *)(v745 + 1295) >= 0)
                    LOBYTE(v703) = (_BYTE)v754;
                  else
                    v703 = *(_QWORD *)(v745 + 1272);
LABEL_686:
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&v803, "%s", v698, v699, v700, v701, v702, v703);
                }
              }
              else
              {
                v373 = v745;
                v435 = v756;
                if (cnprint::CNPrinter::GetLogLevel(v684) <= 1)
                {
                  LOWORD(v763) = 2;
                  LOBYTE(v803) = 1;
                  cnprint::CNLogFormatter::FormatGeneral(v754, "Measurement set eliminated after local test.");
                  if (*(char *)(v745 + 1295) >= 0)
                    LOBYTE(v703) = (_BYTE)v754;
                  else
                    v703 = *(_QWORD *)(v745 + 1272);
                  goto LABEL_686;
                }
              }
              v833 = 0;
              v444 = 8;
              goto LABEL_699;
            }
            if (cnprint::CNPrinter::GetLogLevel(v451) <= 1)
            {
              LOWORD(v763) = 2;
              LOBYTE(v818) = 1;
              v631 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v373 + 1272), "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg; no further testing (dolocaltest = %d)",
                                        v736,
                                        v429,
                                        v453,
                                        0);
              if (*(char *)(v373 + 1295) >= 0)
                LOBYTE(v637) = v631;
              else
                v637 = *(_QWORD *)(v373 + 1272);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&v818, "%s", v632, v633, v634, v635, v636, v637);
            }
            v833 = 0;
            sub_18D1E2AB8(v725, *(_DWORD **)(v373 + 1248), *(_DWORD **)(v373 + 1256), (uint64_t)(*(_QWORD *)(v373 + 1256) - *(_QWORD *)(v373 + 1248)) >> 5);
            sub_18D1C59EC((uint64_t *)(v373 + 1248));
            v444 = 8;
          }
        }
        else
        {
          v444 = 0;
        }
        v435 = v756;
        goto LABEL_412;
      }
      v719 = "nc >= 0";
      v720 = 420;
    }
    __assert_rtn("CNMatrix", "cnmatrix.h", v720, v719);
  }
  LOWORD(v763) = 2;
  __p.__r_.__value_.__s.__data_[0] = 2;
  v180 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v745 + 1272), "PredictAndUpdate state Jacobian matrix is not invertible.");
  if (*(char *)(v745 + 1295) >= 0)
    LOBYTE(v186) = v180;
  else
    v186 = *(_QWORD *)(v745 + 1272);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v763, (unsigned __int8 *)&__p, "%s", v181, v182, v183, v184, v185, v186);
  sub_18D053AA8(v745 + 552, (uint64_t)&v939);
  sub_18D053AA8(v745 + 800, v740);
  v764.__r_.__value_.__r.__words[2] = 0x10000001ALL;
  v763 = (uint64_t (**)())&unk_1E25C70A0;
  *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D319790;
  v765 = (double *)v766;
  sub_18D053B2C(v745 + 800, (uint64_t)&v939, (uint64_t)&v763);
  sub_18D053AA8(v745 + 848, (uint64_t)&v763);
  sub_18D1E08D8((uint64_t)&v763, v744, v750);
  v764.__r_.__value_.__r.__words[0] = __PAIR64__(v750, v744);
  LODWORD(v764.__r_.__value_.__r.__words[1]) = v744 * v750;
  HIDWORD(v764.__r_.__value_.__r.__words[1]) = v744;
  sub_18D04BE88((uint64_t)&v763, 0.0);
  v187 = sub_18D053AA8(v735, (uint64_t)&v763);
  v188 = v766[0];
  v763 = (uint64_t (**)())&unk_1E25C6FB0;
  v766[0] = 0;
  if (v188)
    MEMORY[0x18D78B5BC](v188, 0x1000C8000313F17, v187);
  v850 = 0x100000017;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C6F20;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D3197B0;
  v851 = v852;
  sub_18D053B2C(v739, (uint64_t)&v947, (uint64_t)&__p);
  v846 = 0x100000017;
  v844 = &off_1E25C6F20;
  v845 = xmmword_18D3197B0;
  v847 = (double *)v848;
  sub_18D053B2C(v735, (uint64_t)&v939, (uint64_t)&v844);
  v764.__r_.__value_.__r.__words[2] = 0x100000017;
  v763 = &off_1E25C6F20;
  *(_OWORD *)&v764.__r_.__value_.__l.__data_ = xmmword_18D3197B0;
  v765 = (double *)v766;
  sub_18D053FA4((uint64_t)&__p, (uint64_t)&v844, (uint64_t)&v763);
  sub_18D053AA8(v734, (uint64_t)&v763);
  v169 = sub_18D053AA8(v728, v739);
  *(_DWORD *)(v745 + 1108) = 1;
  v111 = 21;
LABEL_609:
  v627 = v926;
  v920 = &off_1E25C7130;
  v926 = 0;
  if (v627)
    MEMORY[0x18D78B5BC](v627, 0x1000C8000313F17, v169);
  v628 = v932;
  v927 = &unk_1E25C7160;
  v932 = 0;
  if (v628)
    MEMORY[0x18D78B5BC](v628, 0x1000C8000313F17, v169);
  v629 = v938;
  v933 = &unk_1E25C7160;
  v938 = 0;
  if (v629)
    MEMORY[0x18D78B5BC](v629, 0x1000C8000313F17, v169);
  return v111;
}

void sub_18D1DE900(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = STACK[0x1610];
  STACK[0x15E8] = (unint64_t)&unk_1E25C84B0;
  STACK[0x1610] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  v4 = STACK[0x2588];
  STACK[0x2560] = (unint64_t)&off_1E25C6140;
  STACK[0x2588] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  v5 = STACK[0x25B8];
  STACK[0x2590] = (unint64_t)&off_1E25C6140;
  STACK[0x25B8] = 0;
  if (v5)
    MEMORY[0x18D78B5BC](v5, 0x1000C8000313F17);
  v6 = STACK[0x2510];
  STACK[0x24E8] = (unint64_t)&unk_1E25C7160;
  STACK[0x2510] = 0;
  if (v6)
    MEMORY[0x18D78B5BC](v6, 0x1000C8000313F17);
  v7 = *(_QWORD *)(v1 - 168);
  *(_QWORD *)(v1 - 208) = &off_1E25C6290;
  *(_QWORD *)(v1 - 168) = 0;
  if (v7)
    MEMORY[0x18D78B5BC](v7, 0x1000C8000313F17);
  v8 = STACK[0x2548];
  STACK[0x2520] = (unint64_t)&off_1E25C6290;
  STACK[0x2548] = 0;
  if (v8)
    MEMORY[0x18D78B5BC](v8, 0x1000C8000313F17);
  v9 = STACK[0x25E8];
  STACK[0x25C0] = (unint64_t)&off_1E25C8450;
  STACK[0x25E8] = 0;
  if (v9)
    MEMORY[0x18D78B5BC](v9, 0x1000C8000313F17);
  v10 = STACK[0x2618];
  STACK[0x25F0] = (unint64_t)&off_1E25C8480;
  STACK[0x2618] = 0;
  if (v10)
    MEMORY[0x18D78B5BC](v10, 0x1000C8000313F17);
  v11 = STACK[0x2D20];
  STACK[0x2CF8] = (unint64_t)&off_1E25C7130;
  STACK[0x2D20] = 0;
  if (v11)
    MEMORY[0x18D78B5BC](v11, 0x1000C8000313F17);
  v12 = STACK[0x2D50];
  STACK[0x2D28] = (unint64_t)&unk_1E25C7160;
  STACK[0x2D50] = 0;
  if (v12)
    MEMORY[0x18D78B5BC](v12, 0x1000C8000313F17);
  v13 = STACK[0x2D80];
  STACK[0x2D58] = (unint64_t)&unk_1E25C7160;
  STACK[0x2D80] = 0;
  if (v13)
    MEMORY[0x18D78B5BC](v13, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1DF480(uint64_t a1, int a2, int a3)
{
  const char *v5;
  int v6;

  *(_QWORD *)(a1 + 24) = 0x100000057;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C82A0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a2 < 0)
  {
    v5 = "nr >= 0";
    v6 = 419;
    goto LABEL_6;
  }
  if (a3 < 0)
  {
    v5 = "nc >= 0";
    v6 = 420;
LABEL_6:
    __assert_rtn("CNMatrix", "cnmatrix.h", v6, v5);
  }
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1C3DF0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1DF52C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_18D1C3D98(v2);
  *v1 = &unk_1E25C5A20;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1DF554(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;

  v3 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = 0x100000004;
  *(_QWORD *)result = &unk_1E25C7E80;
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = 1;
  *(_DWORD *)(result + 16) = v3;
  *(_DWORD *)(result + 20) = v3;
  v4 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (v3)
  {
    v5 = *(_DWORD *)(a2 + 20) * a3;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      *v4++ = *(_DWORD *)(v6 + 4 * v5++);
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_18D1DF5B0(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1DF5C4(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1DF5D8(_QWORD *result)
{
  result[29] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1DF5FC(_QWORD *a1)
{
  uint64_t v2;

  a1[25] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C7130;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1DF66C(_QWORD *result)
{
  result[82] = &unk_1E25C5EA0;
  result[75] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1DF694(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1DF6A8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8480;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D1DF704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v13 = 0x100000088;
  v11 = &off_1E25C6230;
  v12 = xmmword_18D319BB0;
  v14 = &v15;
  sub_18D1E3C54((uint64_t)v9);
  sub_18D054C20(a1, a2, (uint64_t)&v11, (uint64_t)v9, a3, a4);
  result = v10;
  v9[0] = &off_1E25C7CD0;
  v10 = 0;
  if (result)
    return MEMORY[0x18D78B5BC](result, 0x1000C8000313F17);
  return result;
}

void sub_18D1DF7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    MEMORY[0x18D78B5BC](a15, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1DF7FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 24) = 0x100000057;
  *(_QWORD *)a2 = &unk_1E25C83F0;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  return sub_18D163160(a1, a2);
}

void sub_18D1DF854(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1DF868@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _OWORD *v3;
  _DWORD *v4;
  __int128 v5;
  uint64_t v6;

  v3 = (_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 24) = 0x5700000001;
  *(_QWORD *)a3 = &unk_1E25C6DD0;
  v4 = (_DWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = a3 + 40;
  if (a2 == (_DWORD)result)
  {
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    *v3 = v5;
    *v4 = result;
  }
  else if (a2 - (int)result < 0)
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v6 = (a2 - result + 1);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v6;
    *(_DWORD *)(a3 + 16) = v6;
    *(_DWORD *)(a3 + 20) = 1;
    do
    {
      *v4++ = result;
      result = (result + 1);
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_18D1DF8D8(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1DF8EC(_QWORD *result)
{
  result[93] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D1DF910(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v5 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x570000001ALL;
  *(_QWORD *)a1 = &off_1E25C7280;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = v5 * v4;
  *(_DWORD *)(a1 + 20) = v4;
  sub_18D1E1478(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return sub_18D073454(a2, a1);
}

void sub_18D1DF97C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  *v1 = v2;
  v4 = v1[5];
  v1[5] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1DF9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x570000001ALL;
  *(_QWORD *)a1 = &off_1E25C7280;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319BD0;
  sub_18D1E1478(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1DFA34(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  *v1 = v2;
  v4 = v1[5];
  v1[5] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D1DFA7C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7280;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D1DFAD8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = 0x100000071;
  v7 = &off_1E25C6110;
  v8 = xmmword_18D319BE0;
  v10 = &v11;
  sub_18D1E22B8((uint64_t)v5);
  *(_QWORD *)(a1 + 24) = 0x5700000071;
  *(_QWORD *)a1 = &off_1E25C6140;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319BF0;
  sub_18D1E1F88(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  sub_18D05C770(a2, (uint64_t)&v7, (uint64_t)v5, a1);
  result = v6;
  v5[0] = &unk_1E25C84B0;
  v6 = 0;
  if (result)
    return MEMORY[0x18D78B5BC](result, 0x1000C8000313F17);
  return result;
}

void sub_18D1DFBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  *v14 = v15;
  v17 = v14[5];
  v14[5] = 0;
  if (v17)
    MEMORY[0x18D78B5BC](v17, 0x1000C8000313F17);
  *v14 = &unk_1E25C5E70;
  if (a14)
    MEMORY[0x18D78B5BC](a14, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_18D1DFC34(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  sub_18D1E22B8(a3);
  v18 = 0x100000057;
  v16 = &unk_1E25C83F0;
  v17 = xmmword_18D3197F0;
  v19 = &v20;
  v13 = 0x100000057;
  v11 = &unk_1E25C83F0;
  v12 = xmmword_18D3197F0;
  v14 = &v15;
  v8 = 0x10000015CLL;
  v6 = &unk_1E25C76A0;
  v7 = xmmword_18D319C00;
  v9 = &v10;
  *a2 = sub_18D054568(a1, (uint64_t)&v16, (uint64_t)&v11, (uint64_t)&v6, a3);
}

void sub_18D1DFD14(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E25C84B0;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1DFD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v7 = *(_DWORD *)(a3 + 16);
  v8 = *(_DWORD *)(a4 + 16);
  result = sub_18D1E2544(a1, v7, v8);
  if (v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(a3 + 32);
    v13 = *(_QWORD *)(a4 + 32);
    v14 = *(_QWORD *)(result + 32);
    do
    {
      if (v7)
      {
        v15 = 0;
        v16 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(v13 + 4 * v11);
        v17 = *(_QWORD *)(a2 + 32);
        do
        {
          *(_QWORD *)(v14 + 8 * (v10 + v15)) = *(_QWORD *)(v17
                                                                         + 8
                                                                         * (*(_DWORD *)(v12 + 4 * v15)
                                                                                        + v16));
          ++v15;
        }
        while (v7 != v15);
      }
      ++v11;
      v10 += v7;
    }
    while (v11 != v8);
  }
  return result;
}

_QWORD *sub_18D1DFE08(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C84B0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D1DFE68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x100000057;
  *(_QWORD *)a3 = &unk_1E25C83C0;
  *(_OWORD *)(a3 + 8) = xmmword_18D3197F0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D1DFEBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1DFED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_18D1E2544(a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  return sub_18D073454(a1, a2);
}

void sub_18D1DFF08(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E25C84B0;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1DFF54(uint64_t a1, uint64_t a2)
{
  char *v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char *v17;
  char *v18;
  unint64_t v19;
  char **v20;

  v3 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 12);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6 || (v5 | v4) == 0)
  {
LABEL_9:
    if ((char **)(a1 + 1248) != &v17)
      sub_18D1E2AB8((uint64_t *)(a1 + 1248), v17, v3, (v3 - v17) >> 5);
  }
  else
  {
    v3 = 0;
    v9 = 1;
    while (1)
    {
      v10 = *(int *)(*(_QWORD *)(a2 + 32) + 4 * (int)(v9 - 1));
      v11 = *(_QWORD *)(a1 + 1248);
      if (v10 >= (*(_QWORD *)(a1 + 1256) - v11) >> 5)
        break;
      v12 = v11 + 32 * v10;
      if ((unint64_t)v3 >= v19)
      {
        v3 = (char *)sub_18D1E09D4((uint64_t *)&v17, v12);
      }
      else
      {
        sub_18D1E096C((uint64_t)&v17, v12);
        v3 += 32;
      }
      v18 = v3;
      v14 = *(_DWORD *)(a2 + 8);
      v13 = *(_DWORD *)(a2 + 12);
      if (v14 <= v13)
        v15 = *(_DWORD *)(a2 + 12);
      else
        v15 = *(_DWORD *)(a2 + 8);
      if (v14)
      {
        if (v13)
        {
          if (v15 > v9++)
            continue;
        }
      }
      goto LABEL_9;
    }
  }
  v20 = &v17;
  sub_18D1C59AC((void ***)&v20);
}

void sub_18D1E005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_18D1C59AC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E007C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000088;
  *(_QWORD *)a1 = &off_1E25C6260;
  *(_OWORD *)(a1 + 8) = xmmword_18D319BB0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D1CD0EC(a2, a3, a1);
}

void sub_18D1E00D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E00E8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000031;
  *(_QWORD *)a1 = &off_1E25C7CA0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D1E0140(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E0154(uint64_t result, int a2)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = (_QWORD *)(result + 8);
  *(_QWORD *)(result + 24) = 0x3100000001;
  *(_QWORD *)result = &off_1E25C6CB0;
  v3 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (a2)
  {
    if (a2 < 0)
    {
      *v2 = 0;
      *(_QWORD *)(result + 16) = 0;
    }
    else
    {
      v4 = 0;
      v5 = (a2 + 1);
      *(_DWORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = v5;
      *(_DWORD *)(result + 16) = v5;
      *(_DWORD *)(result + 20) = 1;
      do
      {
        v3[v4] = v4;
        ++v4;
      }
      while (v5 != v4);
    }
  }
  else
  {
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    *(_OWORD *)v2 = v6;
    *v3 = 0;
  }
  return result;
}

_QWORD *sub_18D1E01C0(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1E01D4(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D1E01E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int32x4_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t (**v22)();
  int32x4_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD v26[50];

  v3 = *(unsigned int *)(a2 + 12);
  v24 = 0x100000031;
  v22 = &off_1E25C7CA0;
  if ((v3 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v7 = vdupq_lane_s32((int32x2_t)(v3 | 0x100000000), 0);
  v7.i32[1] = 1;
  v23 = v7;
  v25 = v26;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      v26[i] = i;
  }
  v9 = sub_18D1E1B40(a1);
  *(_QWORD *)a1 = &off_1E25C4C40;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 80) = 0x100000088;
  *(_QWORD *)(v9 + 56) = &off_1E25C6260;
  *(_OWORD *)(a1 + 64) = xmmword_18D319BB0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 664) = 0x100000031;
  *(_QWORD *)(a1 + 640) = &off_1E25C7CA0;
  *(_OWORD *)(a1 + 648) = xmmword_18D319BC0;
  *(_QWORD *)(a1 + 672) = a1 + 680;
  sub_18D053D7C(v9 + 56, a3);
  result = sub_18D053D7C(a1 + 640, (uint64_t)&v22);
  v11 = *(unsigned int *)(a1 + 72);
  v12 = *(unsigned int *)(a1 + 656);
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v12;
  *(_DWORD *)(a1 + 16) = v12 * v11;
  *(_DWORD *)(a1 + 20) = v11;
  if (!*(_QWORD *)(a1 + 40))
    __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = *(_DWORD *)(a2 + 20);
    v16 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v11)
      {
        v17 = *(int **)(a1 + 88);
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 672) + 4 * v14) * v15;
        v19 = *(_QWORD *)(a1 + 32);
        v20 = v13;
        result = v11;
        do
        {
          v21 = *v17++;
          *(_QWORD *)(v19 + 8 * v20++) = *(_QWORD *)(v16 + 8 * (v21 + v18));
          --result;
        }
        while (result);
      }
      ++v14;
      v13 += v11;
    }
    while (v14 != v12);
  }
  return result;
}

void sub_18D1E03C0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v1[80] = &unk_1E25C5EA0;
  v1[7] = &unk_1E25C5EA0;
  *v1 = &off_1E25C6290;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D1E041C(_QWORD *a1)
{
  uint64_t v2;

  a1[80] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C6290;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E048C(_QWORD *result)
{
  result[142] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1E04B0(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1E04C4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C6140;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E0520(_QWORD *a1)
{
  *a1 = &unk_1E25C8300;
  sub_18D1E2EF4(a1 + 5);
  *a1 = &unk_1E25C5AB0;
  return a1;
}

_QWORD *sub_18D1E0568(_QWORD *a1)
{
  uint64_t v2;

  a1[24] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C6F80;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E05DC(_QWORD *a1)
{
  uint64_t v2;

  a1[24] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C6FB0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E0650(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7FD0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E06AC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7BE0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E0708(_QWORD *a1)
{
  uint64_t v2;

  a1[37] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C7CD0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E0778(_QWORD *result)
{
  result[55] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1E079C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7CD0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E07F8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1E080C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1E0820(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C6290;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E087C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8450;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D1E08D8(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x1A00000017;
  *(_QWORD *)a1 = &unk_1E25C6FB0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1C4D6C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E0930(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_BYTE *sub_18D1E096C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *result;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  result = (_BYTE *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_18D077798(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)result = v5;
  }
  *(_QWORD *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_18D1E09CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E09D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_18D07AFE4();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)sub_18D184AF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_18D077798(v12, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v11 = v17;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v12 = v13;
  }
  v17 = v11 + 32;
  sub_18D1E0AE0(a1, v16);
  v14 = a1[1];
  sub_18D1E0C6C((uint64_t)v16);
  return v14;
}

void sub_18D1E0ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D1E0C6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E0AE0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_18D1E0B54((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18D1E0B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  sub_18D1E0BF4((uint64_t)v13);
  return v11;
}

uint64_t sub_18D1E0BF4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18D1E0C28(a1);
  return a1;
}

void sub_18D1E0C28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 32;
  }
}

uint64_t sub_18D1E0C6C(uint64_t a1)
{
  sub_18D1E0CA0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18D1E0CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_18D1E0CF4(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x170000001ALL;
  *(_QWORD *)a1 = &off_1E25C7130;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1C4D6C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E0D48(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E0D84(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E0DA8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E0DB4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[23];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1E0EA8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E0ECC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E0ED8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[23];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1E0FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000017;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197B0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5540;
  *(_QWORD *)(a1 + 224) = a2;
  *(_QWORD *)(a1 + 256) = 0x100000017;
  *(_QWORD *)(a1 + 232) = &off_1E25C6F50;
  *(_OWORD *)(a1 + 240) = xmmword_18D3197B0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  sub_18D053D7C(a1 + 232, a3);
  v6 = *(_DWORD *)(a1 + 240);
  v5 = *(_DWORD *)(a1 + 244);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 264);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1E107C(_QWORD *a1)
{
  a1[29] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E10B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;

  v8 = (_QWORD *)sub_18D1CBE44(a1);
  *v8 = &off_1E25C4E50;
  v8[6] = a2;
  v8[10] = 0x10000001ALL;
  v8[7] = &unk_1E25C70D0;
  *(_OWORD *)(a1 + 64) = xmmword_18D319790;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 200) = &off_1E25C6F50;
  *(_QWORD *)(a1 + 224) = 0x100000017;
  *(_OWORD *)(a1 + 208) = xmmword_18D3197B0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  sub_18D053D7C((uint64_t)(v8 + 7), a3);
  sub_18D053D7C(a1 + 200, a4);
  v9 = *(unsigned int *)(a1 + 72);
  v10 = *(unsigned int *)(a1 + 216);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (!*(_QWORD *)(a1 + 40))
    __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v9)
      {
        v15 = *(int **)(a1 + 88);
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * v12) * v13;
        v17 = *(_QWORD *)(a1 + 32);
        v18 = v11;
        v19 = v9;
        do
        {
          v20 = *v15++;
          *(_QWORD *)(v17 + 8 * v18++) = *(_QWORD *)(v14 + 8 * (v20 + v16));
          --v19;
        }
        while (v19);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return a1;
}

void sub_18D1E1214(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v1[25] = &unk_1E25C5EA0;
  v1[7] = &unk_1E25C5EA0;
  *v1 = &off_1E25C7130;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E1270(_QWORD *a1)
{
  uint64_t v2;

  a1[25] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C7130;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1E12F0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8480;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E135C(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E1478(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E1384(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x8D6uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1E1478(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x46B0uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1E14E0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8450;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E154C(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E1668(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E1574(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x7D1uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1E1668(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x3E88uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1E16D0(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E16F4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E1700(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[69];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1E17F4(_QWORD *a1)
{
  a1[82] = &unk_1E25C5EA0;
  a1[75] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1E182C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C6290;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E1898(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E19B4(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E18C0(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x1A08uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1E19B4(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0xD040uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1E1A1C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E1A40(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E1A4C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[136];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1E1B40(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x3100000088;
  *(_QWORD *)a1 = &off_1E25C6290;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319C10;
  sub_18D1E19B4(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E1B94(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E1BD0(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E1BF4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E1C00(uint64_t a1)
{
  char v1[87];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

uint64_t sub_18D1E1C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000057;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197F0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5720;
  *(_QWORD *)(a1 + 736) = a2;
  *(_QWORD *)(a1 + 768) = 0x100000057;
  *(_QWORD *)(a1 + 744) = &unk_1E25C83F0;
  *(_OWORD *)(a1 + 752) = xmmword_18D3197F0;
  *(_QWORD *)(a1 + 776) = a1 + 784;
  sub_18D053D7C(a1 + 744, a3);
  v5 = *(_DWORD *)(a1 + 752);
  v6 = *(_DWORD *)(a1 + 756);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = (v6 * v5);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 776);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1E1D0C(_QWORD *a1)
{
  a1[93] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E1D40(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x5700000071;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C6140;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (a2 < 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1E1F88(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E1DC4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E1E00(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C6140;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E1E6C(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E1F88(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E1E94(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x2667uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1E1F88(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x13338uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1E1FF8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7280;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E2064(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E1478(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E208C(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x8D6uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

_QWORD *sub_18D1E2180(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1E2194(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E21B8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E21C4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[113];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D1E22B8(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x5700000057;
  *(_QWORD *)a1 = &unk_1E25C84B0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319C20;
  sub_18D1E23E4(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E230C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E2348(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E25C84B0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E23B8(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E23E4(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_18D1E23E4(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0xEC88uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1E244C(uint64_t a1)
{
  void *v2;

  v2 = (void *)operator new[]();
  bzero(v2, 0x1D91uLL);
  sub_18D0894A0(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

_QWORD *sub_18D1E24AC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D1E24C0(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E24E4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E24F0(uint64_t a1)
{
  char v1[348];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

uint64_t sub_18D1E2544(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x5700000057;
  *(_QWORD *)a1 = &unk_1E25C84B0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D1E23E4(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E2598(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E25D4(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E25F8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E2604(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[136];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1E26F8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E271C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E2728(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[49];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1E281C(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E2840(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E284C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[49];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1E2940(_QWORD *a1)
{
  uint64_t v2;

  a1[80] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C6290;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E29C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0x100000088;
  *(_OWORD *)(a1 + 8) = xmmword_18D319BB0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C52D0;
  *(_QWORD *)(a1 + 1128) = a2;
  v5 = a1 + 1136;
  *(_QWORD *)(a1 + 1160) = 0x100000088;
  *(_QWORD *)(a1 + 1136) = &off_1E25C6260;
  *(_OWORD *)(a1 + 1144) = xmmword_18D319BB0;
  *(_QWORD *)(a1 + 1168) = a1 + 1176;
  sub_18D053D7C(a1 + 1136, a3);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a1 + 1148);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    v9 = *(int **)(a1 + 1168);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD **)(a1 + 32);
    do
    {
      v12 = *v9++;
      *v11++ = *(_QWORD *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18D1E2A84(_QWORD *a1)
{
  a1[142] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1E2AB8(uint64_t *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = (uint64_t)(a1 + 2);
  v9 = (_DWORD *)*a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_18D1E2BFC(a1);
    if (a4 >> 59)
      sub_18D07AFE4();
    v10 = a1[2] - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_18D184AB4(a1, v12);
    v13 = sub_18D1E2C34(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  v14 = (a1[1] - (uint64_t)v9) >> 5;
  if (v14 < a4)
  {
    v15 = &a2[8 * v14];
    sub_18D1E2D78(a2, v15, v9);
    v13 = sub_18D1E2C34(v8, (uint64_t)v15, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  sub_18D1E2D78(a2, a3, v9);
  v17 = v16;
  v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 1) < 0)
        operator delete(*(void **)(v18 - 24));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_18D1E2BEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18D1E2BF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18D1E2BFC(uint64_t *a1)
{
  if (*a1)
  {
    sub_18D1C59EC(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_18D1E2C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v7 = (uint64_t)v6 - 8;
      *(_DWORD *)v4 = *((_DWORD *)v6 - 2);
      v8 = (_BYTE *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_18D077798(v8, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v8 = v9;
      }
      v4 += 32;
      v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  v12 = 1;
  sub_18D1E2D00((uint64_t)v11);
  return v4;
}

void sub_18D1E2CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D1E2D00((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E2D00(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18D1E2D34(a1);
  return a1;
}

void sub_18D1E2D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 32;
  }
}

_DWORD *sub_18D1E2D78(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  _DWORD *v5;
  const std::string *v6;
  int v7;
  std::string *v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = (const std::string *)(v4 + 2);
    v7 = *v4;
    v4 += 8;
    v8 = (std::string *)(a3 + 2);
    *a3 = v7;
    a3 += 8;
    std::string::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_18D1E2DD8(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x100000057;
  *(_QWORD *)a1 = &unk_1E25C8300;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197F0;
  sub_18D1E2F48(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E2E40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_18D1E2EF4(v2);
  *v1 = &unk_1E25C5AB0;
  _Unwind_Resume(a1);
}

void sub_18D1E2E68(_QWORD *a1)
{
  *a1 = &unk_1E25C8300;
  sub_18D1E2EF4(a1 + 5);
  *a1 = &unk_1E25C5AB0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t *sub_18D1E2EC0(uint64_t a1)
{
  uint64_t *result;

  result = sub_18D1E2F48(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t *sub_18D1E2EF4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = 736 * v2;
      v4 = v1 - 736;
      do
      {
        *(_QWORD *)(v4 + v3) = &unk_1E25C5E70;
        v3 -= 736;
      }
      while (v3);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

uint64_t *sub_18D1E2F48(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = (_OWORD *)operator new[]();
  v3 = (uint64_t)(v2 + 1);
  *v2 = xmmword_18D319C30;
  v4 = (char *)v2 + 56;
  v5 = 64032;
  do
  {
    *((_QWORD *)v4 - 2) = 0x100000057;
    *((_QWORD *)v4 - 5) = &unk_1E25C83C0;
    *((_OWORD *)v4 - 2) = xmmword_18D3197F0;
    *((_QWORD *)v4 - 1) = v4;
    v4 += 736;
    v5 -= 736;
  }
  while (v5);
  return sub_18D1E2FCC((uint64_t *)(a1 + 40), v3);
}

uint64_t *sub_18D1E2FCC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 736 * v3;
      v5 = v2 - 736;
      do
      {
        *(_QWORD *)(v5 + v4) = &unk_1E25C5E70;
        v4 -= 736;
      }
      while (v4);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

void sub_18D1E3020(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new[]();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 79) = 0;
  sub_18D1E30B0(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1E308C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5BC](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18D1E30B0(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE v13[736];
  _BYTE v14[736];

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = v4 + v2 - v6;
        v9 = (v7 - 1);
        v10 = 1;
        do
        {
          sub_18D1E31B4((uint64_t)v14, *(_QWORD *)(a1 + 32) + 736 * v10);
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = v10;
            do
            {
              v12 = v12 * v8 % (int)v9;
              sub_18D1E31B4((uint64_t)v13, *(_QWORD *)(a1 + 32) + 736 * v12);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + 736 * v12, (uint64_t)v14);
              *v11 = 1;
              sub_18D053AA8((uint64_t)v14, (uint64_t)v13);
              v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

__n128 sub_18D1E31B4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x100000057;
  *(_QWORD *)(a1 + 24) = 0x100000057;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C83C0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x57u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1E32D4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E32E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;

  v8 = (_QWORD *)sub_18D1D77AC(a1);
  *v8 = &off_1E25C4DC0;
  v8[6] = a2;
  v8[10] = 0x100000017;
  v8[7] = &off_1E25C6F50;
  *(_OWORD *)(a1 + 64) = xmmword_18D3197B0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 216) = 0x100000017;
  *(_QWORD *)(a1 + 192) = &off_1E25C6F50;
  *(_OWORD *)(a1 + 200) = xmmword_18D3197B0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  sub_18D053D7C((uint64_t)(v8 + 7), a3);
  sub_18D053D7C(a1 + 192, a4);
  v9 = *(unsigned int *)(a1 + 72);
  v10 = *(unsigned int *)(a1 + 208);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (!*(_QWORD *)(a1 + 40))
    __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v9)
      {
        v15 = *(int **)(a1 + 88);
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * v12) * v13;
        v17 = *(_QWORD *)(a1 + 32);
        v18 = v11;
        v19 = v9;
        do
        {
          v20 = *v15++;
          *(_QWORD *)(v17 + 8 * v18++) = *(_QWORD *)(v14 + 8 * (v20 + v16));
          --v19;
        }
        while (v19);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return a1;
}

void sub_18D1E3430(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v1[24] = &unk_1E25C5EA0;
  v1[7] = &unk_1E25C5EA0;
  *v1 = &unk_1E25C6F80;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E3490(_QWORD *a1)
{
  uint64_t v2;

  a1[24] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C6F80;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E3514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;

  v8 = (_QWORD *)sub_18D1C5BB0(a1);
  *v8 = &off_1E25C4DF0;
  v8[6] = a2;
  v8[10] = 0x100000017;
  v8[7] = &off_1E25C6F50;
  *(_OWORD *)(a1 + 64) = xmmword_18D3197B0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 192) = &unk_1E25C70D0;
  *(_QWORD *)(a1 + 216) = 0x10000001ALL;
  *(_OWORD *)(a1 + 200) = xmmword_18D319790;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  sub_18D053D7C((uint64_t)(v8 + 7), a3);
  sub_18D053D7C(a1 + 192, a4);
  v9 = *(unsigned int *)(a1 + 72);
  v10 = *(unsigned int *)(a1 + 208);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (!*(_QWORD *)(a1 + 40))
    __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v9)
      {
        v15 = *(int **)(a1 + 88);
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * v12) * v13;
        v17 = *(_QWORD *)(a1 + 32);
        v18 = v11;
        v19 = v9;
        do
        {
          v20 = *v15++;
          *(_QWORD *)(v17 + 8 * v18++) = *(_QWORD *)(v14 + 8 * (v20 + v16));
          --v19;
        }
        while (v19);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return a1;
}

void sub_18D1E3678(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v1[24] = &unk_1E25C5EA0;
  v1[7] = &unk_1E25C5EA0;
  *v1 = &unk_1E25C6FB0;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E36D8(_QWORD *a1)
{
  uint64_t v2;

  a1[24] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C6FB0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E375C(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x3400000034;
  *(_QWORD *)a1 = &off_1E25C7FD0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319C40;
  sub_18D1E3970(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E37AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E37E8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7FD0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E3854(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E3970(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E387C(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0xA90uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1E3970(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x5480uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

uint64_t sub_18D1E39D8(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x2E0000002ELL;
  *(_QWORD *)a1 = &off_1E25C7BE0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319C50;
  sub_18D1E3BEC(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E3A28(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E3A64(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7BE0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E3AD0(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E3BEC(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E3AF8(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x844uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1E3BEC(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x4220uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

uint64_t sub_18D1E3C54(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x3100000031;
  *(_QWORD *)a1 = &off_1E25C7CD0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319C60;
  sub_18D1E3EE8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E3CA4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E3CE0(_QWORD *a1)
{
  uint64_t v2;

  a1[37] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C7CD0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E3D60(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E3EE8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E3D88(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x961uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D1E3E7C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7CD0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E3EE8(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x4B08uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1E3F50(_QWORD *a1)
{
  a1[55] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E3F84(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E3F90(uint64_t a1)
{
  char v1[49];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1E3FDC(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E4000(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_18D07AFE4();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_18D184AF4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_18D1E0AE0(a1, v7);
    return sub_18D1E0C6C((uint64_t)v7);
  }
  return result;
}

void sub_18D1E407C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D1E0C6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E4090(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_18D07AFE4();
    v12 = v5 - *a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)sub_18D184AF4(result, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(_DWORD *)v15 = *(_DWORD *)a2;
    v16 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17[2] = v15 + 32;
    sub_18D1E0AE0(a1, v17);
    v9 = a1[1];
    result = sub_18D1E0C6C((uint64_t)v17);
  }
  else
  {
    *(_DWORD *)v7 = *(_DWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_18D1E41A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D1E0C6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E41B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  int32x4_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (***v42)();
  __n128 v43;
  uint64_t v44;
  uint64_t i64;
  uint64_t (***v46)();
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  int32x4_t v51;
  _BYTE *v52;
  unsigned int v53;
  int32x4_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int32x4_t *v59;
  int v60;
  int v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  int *v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int *v85;
  _DWORD *v86;
  int v87;
  uint64_t (*v88)(uint64_t (***)(), uint64_t (***)(), _QWORD, uint64_t (***)(), _QWORD *, uint64_t (***)());
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  int v94;
  __n128 v95;
  double v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  double *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  int v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  int *v135;
  _DWORD *v136;
  int v137;
  uint64_t v138;
  char v139;
  __int128 v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  int *v148;
  _DWORD *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  int *v163;
  _DWORD *v164;
  int v165;
  uint64_t v166;
  char v167;
  __int128 v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  int *v176;
  _DWORD *v177;
  int v178;
  int v179;
  int v180;
  int v181;
  uint64_t *v182;
  _QWORD *v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __n128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int32x4_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  char v216;
  __int128 v217;
  int v218;
  uint64_t v219;
  int v220;
  int i;
  int v222;
  __n128 v223;
  uint64_t v224;
  __n128 v225;
  char v226;
  __int128 v227;
  int v228;
  int v229;
  uint64_t v230;
  int v231;
  int j;
  int v233;
  __n128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int8 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __n128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t (***v254)();
  uint64_t v255;
  uint64_t v256;
  uint64_t (***v257)();
  uint64_t v258;
  uint64_t k;
  const char *v261;
  int v262;
  const char *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int32x4_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  unsigned int v277;
  uint64_t v278;
  int v279;
  char v280;
  uint64_t v281;
  int32x4_t v282;
  uint64_t v283;
  uint64_t (**v284)();
  __int128 v285;
  uint64_t v286;
  _QWORD *v287;
  _QWORD v288[18];
  void *v289;
  __int128 v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t (**v294)();
  __int128 v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t (**v299)();
  __int128 v300;
  uint64_t v301;
  _QWORD *v302;
  _QWORD v303[26];
  uint64_t (**v304)();
  __int128 v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD v308[26];
  uint64_t (**v309)();
  __int128 v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t (**v314)();
  __int128 v315;
  uint64_t v316;
  double *v317;
  _QWORD v318[49];
  _QWORD v319[5];
  uint64_t v320;
  uint64_t (**v321)();
  __int128 v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t (**v326)();
  __int128 v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t (**v331)();
  unsigned int v332;
  uint64_t v333;
  void *v334;
  int v335;
  int v336;
  int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD v341[5];
  uint64_t v342;
  _QWORD v343[5];
  uint64_t v344;
  _QWORD v345[5];
  uint64_t v346;
  void *v347;
  __int128 v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t (**v352)();
  __int128 v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  void *v357;
  __int128 v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t (**v362)();
  int32x4_t v363;
  uint64_t v364;
  uint64_t v365;
  _BYTE v366[192];
  uint64_t (**v367)();
  int32x4_t v368;
  uint64_t v369;
  uint64_t v370;
  _BYTE v371[192];
  uint64_t (**v372)();
  _BYTE v373[24];
  _QWORD *v374;
  _QWORD v375[124];
  uint64_t (**v376)();
  __int128 v377;
  uint64_t v378;
  _QWORD *v379;
  _QWORD v380[2];
  void *v381;
  void *v382;
  void *v383;

  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v272 = v14;
  v278 = v15;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = (int32x4_t *)v13;
  v29 = *(_DWORD *)(a10 + 8);
  *(_QWORD *)&v373[16] = 0x100000004;
  v372 = (uint64_t (**)())&unk_1E25C7E80;
  *(_DWORD *)v373 = v29;
  *(_DWORD *)&v373[4] = 1;
  *(_DWORD *)&v373[8] = v29;
  *(_DWORD *)&v373[12] = v29;
  v374 = v375;
  if (v29)
  {
    v30 = 0;
    v31 = *(_QWORD *)(a10 + 32);
    do
    {
      *((_DWORD *)v375 + v30) = *(_DWORD *)(v31 + 4 * (int)v30);
      ++v30;
    }
    while (v29 != (_DWORD)v30);
  }
  sub_18D1DF554((uint64_t)&v376, a10, 1);
  v374 = v375;
  v32 = DWORD1(v377);
  *(_DWORD *)v373 = 1;
  *(_DWORD *)&v373[4] = DWORD1(v377);
  *(_DWORD *)&v373[20] = 1;
  *(_DWORD *)&v373[8] = DWORD1(v377);
  *(_QWORD *)&v373[12] = 0x400000001;
  if (DWORD1(v377))
  {
    v33 = 0;
    v34 = v379;
    v35 = v377;
    v36 = v377 - 1;
    v37 = 1;
    do
    {
      v38 = *((_DWORD *)v34 + v35 * v33);
      v39 = v37;
      v40 = v36;
      if (v35 >= 2)
      {
        do
        {
          v38 += *((_DWORD *)v34 + v39++);
          --v40;
        }
        while (v40);
      }
      *((_DWORD *)v375 + v33++) = v38;
      v37 += v35;
    }
    while (v33 != v32);
  }
  if (*(_DWORD *)(v23 + 8) && *(_DWORD *)(v23 + 12))
  {
    v41 = (uint64_t)&v28[34].i64[1];
    v42 = (uint64_t (***)())v23;
  }
  else
  {
    if ((v27 & 0x80000000) != 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
    *(_QWORD *)&v373[16] = 0x10000001ALL;
    v372 = (uint64_t (**)())&unk_1E25C70A0;
    v374 = v375;
    *(_DWORD *)v373 = v27;
    *(_DWORD *)&v373[4] = 1;
    *(_DWORD *)&v373[8] = v27;
    *(_DWORD *)&v373[12] = v27;
    sub_18D04BE88((uint64_t)&v372, 0.0);
    v41 = (uint64_t)&v28[34].i64[1];
    v42 = &v372;
  }
  sub_18D053AA8(v41, (uint64_t)v42);
  if (*(_DWORD *)(v21 + 8) && *(_DWORD *)(v21 + 12))
  {
    sub_18D053AA8((uint64_t)v28[50].i64, v21);
  }
  else
  {
    if ((v27 & 0x80000000) != 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    sub_18D1C96FC((uint64_t)&v372, v27, v27);
    *(_DWORD *)v373 = v27;
    *(_DWORD *)&v373[4] = v27;
    *(_DWORD *)&v373[8] = v27 * v27;
    *(_DWORD *)&v373[12] = v27;
    sub_18D04BE88((uint64_t)&v372, 0.0);
    v43 = sub_18D053AA8((uint64_t)v28[50].i64, (uint64_t)&v372);
    v44 = v375[0];
    v372 = (uint64_t (**)())&unk_1E25C7160;
    v375[0] = 0;
    if (v44)
      MEMORY[0x18D78B5BC](v44, 0x1000C8000313F17, v43);
  }
  if (*(_DWORD *)(v19 + 8) && *(_DWORD *)(v19 + 12))
  {
    i64 = (uint64_t)v28[53].i64;
    v46 = (uint64_t (***)())v19;
  }
  else
  {
    *(_QWORD *)&v373[16] = 0x10000001ALL;
    v372 = (uint64_t (**)())&unk_1E25C70A0;
    *(_OWORD *)v373 = xmmword_18D319790;
    v374 = v375;
    sub_18D053B2C((uint64_t)v28[50].i64, (uint64_t)&v28[34].i64[1], (uint64_t)&v372);
    i64 = (uint64_t)v28[53].i64;
    v46 = &v372;
  }
  sub_18D053AA8(i64, (uint64_t)v46);
  if ((v27 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  v47 = v27;
  v265 = v17;
  sub_18D1E08D8((uint64_t)&v372, v17, v27);
  *(_DWORD *)v373 = v17;
  *(_DWORD *)&v373[4] = v27;
  v279 = v27;
  v269 = v17 * v27;
  *(_DWORD *)&v373[8] = v17 * v27;
  v276 = v17;
  *(_DWORD *)&v373[12] = v17;
  sub_18D04BE88((uint64_t)&v372, 0.0);
  v268 = (uint64_t)&v28[82].i64[1];
  v48 = sub_18D053AA8((uint64_t)&v28[82].i64[1], (uint64_t)&v372);
  v49 = v375[0];
  v372 = (uint64_t (**)())&unk_1E25C6FB0;
  v375[0] = 0;
  if (v49)
    MEMORY[0x18D78B5BC](v49, 0x1000C8000313F17, v48);
  *(_QWORD *)&v373[16] = 0x100000017;
  v372 = &off_1E25C6F20;
  v374 = v375;
  *(_DWORD *)v373 = v17;
  *(_DWORD *)&v373[4] = 1;
  *(_DWORD *)&v373[8] = v17;
  *(_DWORD *)&v373[12] = v17;
  sub_18D04BE88((uint64_t)&v372, 0.0);
  v267 = (uint64_t)&v28[85].i64[1];
  sub_18D053AA8((uint64_t)&v28[85].i64[1], (uint64_t)&v372);
  v266 = (uint64_t)&v28[99].i64[1];
  sub_18D053AA8((uint64_t)&v28[99].i64[1], v272);
  v50 = 0;
  v51 = vdupq_lane_s32((int32x2_t)(v27 | 0x100000000), 0);
  v51.i32[1] = 1;
  v28[69].i32[1] = 1;
  *(_QWORD *)v373 = 0;
  v372 = &off_1E25C7D30;
  v28[1] = v51;
  *(_QWORD *)&v373[16] = 0x100000004;
  v374 = 0;
  *(_QWORD *)&v373[8] = 0;
  do
  {
    v52 = &v373[v50 * 8 - 8];
    *((_QWORD *)v52 + 8) = 0x10000001ALL;
    *((_QWORD *)v52 + 5) = &unk_1E25C70A0;
    *((_OWORD *)v52 + 3) = xmmword_18D319790;
    *((_QWORD *)v52 + 9) = &v375[v50 + 5];
    v50 += 31;
  }
  while (v50 != 124);
  v53 = a9;
  if (a9 < 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v54 = vdupq_lane_s32((int32x2_t)(a9 | 0x100000000), 0);
  v54.i32[1] = 1;
  v282 = v54;
  *(int32x4_t *)v373 = v54;
  ((void (*)(uint64_t))v372[2])((uint64_t)&v372);
  v55 = 0;
  v271 = (uint64_t)&v28->i64[1];
  v369 = 0x100000004;
  v370 = 0;
  v368 = 0uLL;
  v367 = &off_1E25C7D90;
  v56 = v279;
  do
  {
    sub_18D1C99C8((uint64_t)&v371[v55]);
    v55 += 48;
  }
  while (v55 != 192);
  if (!(_DWORD)v369)
  {
    v261 = "this->max_num_rows_ > 0";
    v262 = 427;
    goto LABEL_307;
  }
  if (!HIDWORD(v369))
  {
    v261 = "this->max_num_cols_ > 0";
    v262 = 428;
    goto LABEL_307;
  }
  if (v368.i32[0] > v369)
  {
    v261 = "this->num_rows_ <= this->max_num_rows_";
    v262 = 429;
    goto LABEL_307;
  }
  if (v368.i32[1] > HIDWORD(v369))
  {
    v261 = "this->num_cols_ <= this->max_num_cols_";
    v262 = 430;
LABEL_307:
    __assert_rtn("CNMatrix", "cnmatrix.h", v262, v261);
  }
  v368 = v282;
  ((void (*)(uint64_t))v367[2])((uint64_t)&v367);
  v57 = 0;
  v364 = 0x100000004;
  v365 = 0;
  v363 = 0uLL;
  v362 = &off_1E25C7D60;
  do
  {
    sub_18D1CBE44((uint64_t)&v366[v57]);
    v57 += 48;
  }
  while (v57 != 192);
  if (!(_DWORD)v364)
  {
    v263 = "this->max_num_rows_ > 0";
    v264 = 427;
    goto LABEL_312;
  }
  if (!HIDWORD(v364))
  {
    v263 = "this->max_num_cols_ > 0";
    v264 = 428;
    goto LABEL_312;
  }
  if (v363.i32[0] > v364)
  {
    v263 = "this->num_rows_ <= this->max_num_rows_";
    v264 = 429;
    goto LABEL_312;
  }
  if (v363.i32[1] > HIDWORD(v364))
  {
    v263 = "this->num_cols_ <= this->max_num_cols_";
    v264 = 430;
LABEL_312:
    __assert_rtn("CNMatrix", "cnmatrix.h", v264, v263);
  }
  v274 = v47;
  v363 = v282;
  ((void (*)(uint64_t))v362[2])((uint64_t)&v362);
  v359 = 0x10000001ALL;
  v357 = &unk_1E25C70D0;
  v358 = xmmword_18D319790;
  v360 = &v361;
  v354 = 0x100000017;
  v352 = &off_1E25C6F50;
  v353 = xmmword_18D3197B0;
  v355 = &v356;
  v270 = v28;
  if (a9 < 1)
  {
LABEL_95:
    v102 = a13;
    if (a13)
      v103 = v53;
    else
      v103 = 1;
    v273 = v103;
    sub_18D1D6A24((uint64_t)&v347, (uint64_t)&v28[34].i64[1]);
    sub_18D1C9844((uint64_t)v345, (uint64_t)v28[50].i64);
    sub_18D1D6A24((uint64_t)v343, (uint64_t)v28[53].i64);
    v28[83].i64[1] = 0;
    v28[83].i64[0] = 0;
    v28[86].i64[1] = 0;
    v28[86].i64[0] = 0;
    v28[100].i64[1] = 0;
    v28[100].i64[0] = 0;
    sub_18D1D77AC((uint64_t)v341);
    sub_18D1C96FC((uint64_t)&v334, v56, v56);
    v335 = v56;
    v336 = v56;
    v337 = v56 * v56;
    v338 = v56;
    sub_18D04BE88((uint64_t)&v334, 0.0);
    if (v56)
    {
      v104 = 0;
      v105 = v338 + 1;
      v106 = v339;
      v107 = v274;
      do
      {
        *(_QWORD *)(v106 + 8 * v104) = 0x3FF0000000000000;
        v104 += v105;
        --v107;
      }
      while (v107);
    }
    sub_18D1CBE44((uint64_t)&v331);
    v328 = 0x10000001ALL;
    v326 = (uint64_t (**)())&unk_1E25C70A0;
    v327 = xmmword_18D319790;
    v329 = &v330;
    v323 = 0x100000017;
    v321 = &off_1E25C6F20;
    v322 = xmmword_18D3197B0;
    v324 = &v325;
    if ((int)v273 >= 1)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v277 = v279;
      do
      {
        v281 = v108;
        if (v102)
        {
          if (v108)
          {
            if ((v277 & 0x80000000) != 0)
              __assert_rtn("Eye", "cnmatrix.h", 2094, "n >= 0");
            sub_18D1C96FC((uint64_t)&v314, v277, v277);
            LODWORD(v315) = v277;
            DWORD1(v315) = v277;
            DWORD2(v315) = v277 * v277;
            HIDWORD(v315) = v277;
            sub_18D04BE88((uint64_t)&v314, 0.0);
            if (v277)
            {
              v111 = 0;
              v112 = HIDWORD(v315) + 1;
              v113 = v317;
              v114 = v277;
              do
              {
                v113[v111] = 1.0;
                v111 += v112;
                --v114;
              }
              while (v114);
            }
            sub_18D1D1778((uint64_t)&v376, (uint64_t)&v334, (uint64_t)&v357, (uint64_t)&v357);
            sub_18D1D1114((uint64_t)&v376, (uint64_t)&v314);
            v383 = &unk_1E25C5EA0;
            v381 = &unk_1E25C5EA0;
            v115 = v380[0];
            v376 = (uint64_t (**)())&unk_1E25C7160;
            v380[0] = 0;
            if (v115)
              MEMORY[0x18D78B5BC](v115, 0x1000C8000313F17);
            v116 = v318[0];
            v314 = (uint64_t (**)())&unk_1E25C7160;
            v318[0] = 0;
            if (v116)
              MEMORY[0x18D78B5BC](v116, 0x1000C8000313F17);
          }
          v117 = *(unsigned int *)(*(_QWORD *)(a10 + 32) + 4 * v108);
          v286 = 0x1A00000001;
          v284 = &off_1E25C6B60;
          v287 = v288;
          if ((_DWORD)v117 == 1)
          {
            v118 = 0;
            *(_QWORD *)&v119 = 0x100000001;
            *((_QWORD *)&v119 + 1) = 0x100000001;
            v285 = v119;
            LODWORD(v288[0]) = 0;
            v120 = 1;
            LODWORD(v117) = 1;
          }
          else if ((int)v117 <= 0)
          {
            v120 = 0;
            LODWORD(v117) = 0;
            v285 = 0uLL;
            v118 = 1;
          }
          else
          {
            v157 = 0;
            LODWORD(v285) = 1;
            DWORD1(v285) = v117;
            *((_QWORD *)&v285 + 1) = v117 | 0x100000000;
            do
            {
              *((_DWORD *)v288 + v157) = v157;
              ++v157;
            }
            while (v117 != v157);
            v118 = 0;
            v120 = 1;
          }
          v316 = 0x10000001ALL;
          v314 = (uint64_t (**)())&unk_1E25C70D0;
          v317 = (double *)v318;
          *(_QWORD *)&v315 = __PAIR64__(v120, v117);
          DWORD2(v315) = v117 * v120;
          HIDWORD(v315) = v117;
          if ((_DWORD)v117)
          {
            v158 = 0;
            v159 = 0;
            do
            {
              if ((v118 & 1) == 0)
              {
                v160 = 0;
                do
                {
                  *((_DWORD *)v318 + v159 + HIDWORD(v315) * v160) = *((_DWORD *)v288 + v158 + v160);
                  ++v160;
                }
                while (v120 != v160);
              }
              ++v159;
              v158 += v120;
            }
            while (v159 != (_DWORD)v117);
            v161 = v315;
            v120 = DWORD1(v315);
          }
          else
          {
            v161 = 0;
          }
          v378 = 0x10000001ALL;
          v376 = (uint64_t (**)())&unk_1E25C70D0;
          v379 = v380;
          *(_QWORD *)&v377 = __PAIR64__(v120, v161);
          v162 = v120 * v161;
          *((_QWORD *)&v377 + 1) = __PAIR64__(v161, v162);
          if ((int)v162 >= 1)
          {
            v163 = (int *)v318;
            v164 = v380;
            do
            {
              v165 = *v163++;
              *v164++ = v165 + v110;
              --v162;
            }
            while (v162);
          }
          sub_18D053D7C((uint64_t)&v357, (uint64_t)&v376);
          v166 = *(unsigned int *)(*(_QWORD *)(a10 + 32) + 4 * (*(_DWORD *)(a10 + 20) + (int)v108));
          v286 = 0x1700000001;
          v284 = &off_1E25C6B00;
          v287 = v288;
          if ((_DWORD)v166 == 1)
          {
            v167 = 0;
            *(_QWORD *)&v168 = 0x100000001;
            *((_QWORD *)&v168 + 1) = 0x100000001;
            v285 = v168;
            LODWORD(v288[0]) = 0;
            v169 = 1;
            LODWORD(v166) = 1;
          }
          else if ((int)v166 <= 0)
          {
            v169 = 0;
            LODWORD(v166) = 0;
            v285 = 0uLL;
            v167 = 1;
          }
          else
          {
            v170 = 0;
            LODWORD(v285) = 1;
            DWORD1(v285) = v166;
            *((_QWORD *)&v285 + 1) = v166 | 0x100000000;
            do
            {
              *((_DWORD *)v288 + v170) = v170;
              ++v170;
            }
            while (v166 != v170);
            v167 = 0;
            v169 = 1;
          }
          v316 = 0x100000017;
          v314 = &off_1E25C6F50;
          v317 = (double *)v318;
          *(_QWORD *)&v315 = __PAIR64__(v169, v166);
          DWORD2(v315) = v166 * v169;
          HIDWORD(v315) = v166;
          if ((_DWORD)v166)
          {
            v171 = 0;
            v172 = 0;
            do
            {
              if ((v167 & 1) == 0)
              {
                v173 = 0;
                do
                {
                  *((_DWORD *)v318 + v172 + HIDWORD(v315) * v173) = *((_DWORD *)v288 + v171 + v173);
                  ++v173;
                }
                while (v169 != v173);
              }
              ++v172;
              v171 += v169;
            }
            while (v172 != (_DWORD)v166);
            v174 = v315;
            v169 = DWORD1(v315);
          }
          else
          {
            v174 = 0;
          }
          v378 = 0x100000017;
          v376 = &off_1E25C6F50;
          v379 = v380;
          *(_QWORD *)&v377 = __PAIR64__(v169, v174);
          v175 = v169 * v174;
          *((_QWORD *)&v377 + 1) = __PAIR64__(v174, v175);
          if ((int)v175 >= 1)
          {
            v176 = (int *)v318;
            v177 = v380;
            do
            {
              v178 = *v176++;
              *v177++ = v178 + v109;
              --v175;
            }
            while (v175);
          }
          sub_18D053D7C((uint64_t)&v352, (uint64_t)&v376);
          v179 = DWORD2(v353);
          sub_18D1D7AF8((uint64_t)&v376, SDWORD2(v353), SDWORD2(v353));
          if (v179)
          {
            v180 = 0;
            v181 = 0;
            v182 = v355;
            v183 = v379;
            v184 = *(_DWORD *)(v272 + 20);
            v185 = *(_QWORD *)(v272 + 32);
            do
            {
              v186 = 0;
              v187 = v184 * *((_DWORD *)v182 + v181);
              do
              {
                v183[v180 + v186] = *(_QWORD *)(v185 + 8 * (*((_DWORD *)v182 + v186) + v187));
                ++v186;
              }
              while (v179 != v186);
              ++v181;
              v180 += v179;
            }
            while (v181 != v179);
          }
          v188 = sub_18D053AA8((uint64_t)v341, (uint64_t)&v376);
          v189 = v380[0];
          v376 = (uint64_t (**)())&unk_1E25C6F80;
          v380[0] = 0;
          if (v189)
            MEMORY[0x18D78B5BC](v189, 0x1000C8000313F17, v188);
          v190 = *(_QWORD *)(a10 + 32);
          v275 = *(_DWORD *)(v190 + 4 * (*(_DWORD *)(a10 + 20) + (int)v281));
          v277 = *(_DWORD *)(v190 + 4 * v281);
          v191 = v370;
          sub_18D1D1778((uint64_t)&v376, (uint64_t)&v334, (uint64_t)&v357, (uint64_t)&v357);
          sub_18D1D1114((uint64_t)&v376, v191 + 48 * v281);
          v383 = &unk_1E25C5EA0;
          v381 = &unk_1E25C5EA0;
          v192 = v380[0];
          v376 = (uint64_t (**)())&unk_1E25C7160;
          v380[0] = 0;
          if (v192)
            MEMORY[0x18D78B5BC](v192, 0x1000C8000313F17);
          v155 = v275;
          if (v275 < 0)
            __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
          sub_18D1E0CF4((uint64_t)&v376, v279, v275);
          *(_QWORD *)&v377 = __PAIR64__(v275, v279);
          DWORD2(v377) = v275 * v279;
          HIDWORD(v377) = v279;
          sub_18D04BE88((uint64_t)&v376, 0.0);
          v193 = sub_18D053AA8((uint64_t)&v331, (uint64_t)&v376);
          v194 = v380[0];
          v376 = &off_1E25C7130;
          v380[0] = 0;
          if (v194)
            MEMORY[0x18D78B5BC](v194, 0x1000C8000313F17, v193);
          v195 = v365;
          v196 = v332;
          v316 = 0x100000017;
          v314 = &off_1E25C6F50;
          if ((v332 & 0x80000000) != 0)
            __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
          v197 = vdupq_lane_s32((int32x2_t)(v332 | 0x100000000), 0);
          v197.i32[1] = 1;
          v315 = (__int128)v197;
          v317 = (double *)v318;
          if (v332)
          {
            v198 = 0;
            do
            {
              *((_DWORD *)v318 + v198) = v198;
              ++v198;
            }
            while (v196 != v198);
          }
          sub_18D1E10B0((uint64_t)&v376, (uint64_t)&v331, (uint64_t)&v357, (uint64_t)&v314);
          sub_18D1D1114((uint64_t)&v376, v195 + 48 * v281);
          v383 = &unk_1E25C5EA0;
          v381 = &unk_1E25C5EA0;
          v199 = v380[0];
          v376 = &off_1E25C7130;
          v380[0] = 0;
          if (v199)
            MEMORY[0x18D78B5BC](v199, 0x1000C8000313F17);
          sub_18D053AA8((uint64_t)&v326, (uint64_t)&v347);
          v200 = v374;
          sub_18D1D1680((uint64_t)&v376, (uint64_t)&v326, (uint64_t)&v357);
          sub_18D1D1080((uint64_t)&v376, v200[31 * v281 + 2], (double *)v200[31 * v281 + 4]);
          v201 = (DWORD1(v353) * v353);
          v378 = 0x100000017;
          v376 = &off_1E25C6F20;
          *(_QWORD *)&v377 = v353;
          *((_QWORD *)&v377 + 1) = __PAIR64__(v353, v201);
          v379 = v380;
          if ((_DWORD)v201)
          {
            v202 = v355;
            v203 = *(_QWORD *)(v278 + 32);
            v204 = v380;
            do
            {
              v205 = *(int *)v202;
              v202 = (uint64_t *)((char *)v202 + 4);
              *v204++ = *(_QWORD *)(v203 + 8 * v205);
              --v201;
            }
            while (v201);
          }
          sub_18D053AA8((uint64_t)&v321, (uint64_t)&v376);
          v206 = *(_QWORD *)(a10 + 32);
          v110 += *(_DWORD *)(v206 + 4 * v281);
          v109 += *(_DWORD *)(v206 + 4 * (*(_DWORD *)(a10 + 20) + (int)v281));
          v156 = v279;
        }
        else
        {
          sub_18D053AA8((uint64_t)v341, v272);
          sub_18D1E0CF4((uint64_t)&v376, v279, v276);
          *(_QWORD *)&v377 = __PAIR64__(v276, v279);
          *((_QWORD *)&v377 + 1) = __PAIR64__(v279, v269);
          sub_18D04BE88((uint64_t)&v376, 0.0);
          v121 = sub_18D053AA8((uint64_t)&v331, (uint64_t)&v376);
          v122 = v380[0];
          v376 = &off_1E25C7130;
          v380[0] = 0;
          if (v122)
            MEMORY[0x18D78B5BC](v122, 0x1000C8000313F17, v121);
          sub_18D053AA8((uint64_t)&v326, v271);
          sub_18D053AA8((uint64_t)&v321, v278);
          if (a9 >= 1)
          {
            v123 = 0;
            v124 = *(_QWORD *)(a10 + 32);
            do
            {
              v125 = *(unsigned int *)(v124 + 4 * v123);
              v286 = 0x1A00000001;
              v284 = &off_1E25C6B60;
              v287 = v288;
              if ((_DWORD)v125 == 1)
              {
                v126 = 0;
                *(_QWORD *)&v127 = 0x100000001;
                *((_QWORD *)&v127 + 1) = 0x100000001;
                v285 = v127;
                LODWORD(v288[0]) = 0;
                v128 = 1;
                LODWORD(v125) = 1;
              }
              else if ((int)v125 <= 0)
              {
                v128 = 0;
                LODWORD(v125) = 0;
                v285 = 0uLL;
                v126 = 1;
              }
              else
              {
                v129 = 0;
                LODWORD(v285) = 1;
                DWORD1(v285) = v125;
                *((_QWORD *)&v285 + 1) = v125 | 0x100000000;
                do
                {
                  *((_DWORD *)v288 + v129) = v129;
                  ++v129;
                }
                while (v125 != v129);
                v126 = 0;
                v128 = 1;
              }
              v316 = 0x10000001ALL;
              v314 = (uint64_t (**)())&unk_1E25C70D0;
              v317 = (double *)v318;
              *(_QWORD *)&v315 = __PAIR64__(v128, v125);
              DWORD2(v315) = v125 * v128;
              HIDWORD(v315) = v125;
              if ((_DWORD)v125)
              {
                v130 = 0;
                v131 = 0;
                do
                {
                  if ((v126 & 1) == 0)
                  {
                    v132 = 0;
                    do
                    {
                      *((_DWORD *)v318 + v131 + HIDWORD(v315) * v132) = *((_DWORD *)v288 + v130 + v132);
                      ++v132;
                    }
                    while (v128 != v132);
                  }
                  ++v131;
                  v130 += v128;
                }
                while (v131 != (_DWORD)v125);
                v133 = v315;
                v128 = DWORD1(v315);
              }
              else
              {
                v133 = 0;
              }
              v378 = 0x10000001ALL;
              v376 = (uint64_t (**)())&unk_1E25C70D0;
              v379 = v380;
              *(_QWORD *)&v377 = __PAIR64__(v128, v133);
              v134 = v128 * v133;
              *((_QWORD *)&v377 + 1) = __PAIR64__(v133, v134);
              if ((int)v134 >= 1)
              {
                v135 = (int *)v318;
                v136 = v380;
                do
                {
                  v137 = *v135++;
                  *v136++ = v137 + v110;
                  --v134;
                }
                while (v134);
              }
              sub_18D053D7C((uint64_t)&v357, (uint64_t)&v376);
              v138 = *(unsigned int *)(*(_QWORD *)(a10 + 32) + 4 * (*(_DWORD *)(a10 + 20) + (int)v123));
              v286 = 0x1700000001;
              v284 = &off_1E25C6B00;
              v287 = v288;
              if ((_DWORD)v138 == 1)
              {
                v139 = 0;
                *(_QWORD *)&v140 = 0x100000001;
                *((_QWORD *)&v140 + 1) = 0x100000001;
                v285 = v140;
                LODWORD(v288[0]) = 0;
                v141 = 1;
                LODWORD(v138) = 1;
              }
              else if ((int)v138 <= 0)
              {
                v141 = 0;
                LODWORD(v138) = 0;
                v285 = 0uLL;
                v139 = 1;
              }
              else
              {
                v142 = 0;
                LODWORD(v285) = 1;
                DWORD1(v285) = v138;
                *((_QWORD *)&v285 + 1) = v138 | 0x100000000;
                do
                {
                  *((_DWORD *)v288 + v142) = v142;
                  ++v142;
                }
                while (v138 != v142);
                v139 = 0;
                v141 = 1;
              }
              v316 = 0x100000017;
              v314 = &off_1E25C6F50;
              v317 = (double *)v318;
              *(_QWORD *)&v315 = __PAIR64__(v141, v138);
              DWORD2(v315) = v138 * v141;
              HIDWORD(v315) = v138;
              if ((_DWORD)v138)
              {
                v143 = 0;
                v144 = 0;
                do
                {
                  if ((v139 & 1) == 0)
                  {
                    v145 = 0;
                    do
                    {
                      *((_DWORD *)v318 + v144 + HIDWORD(v315) * v145) = *((_DWORD *)v288 + v143 + v145);
                      ++v145;
                    }
                    while (v141 != v145);
                  }
                  ++v144;
                  v143 += v141;
                }
                while (v144 != (_DWORD)v138);
                v146 = v315;
                v141 = DWORD1(v315);
              }
              else
              {
                v146 = 0;
              }
              v378 = 0x100000017;
              v376 = &off_1E25C6F50;
              v379 = v380;
              *(_QWORD *)&v377 = __PAIR64__(v141, v146);
              v147 = v141 * v146;
              *((_QWORD *)&v377 + 1) = __PAIR64__(v146, v147);
              if ((int)v147 >= 1)
              {
                v148 = (int *)v318;
                v149 = v380;
                do
                {
                  v150 = *v148++;
                  *v149++ = v150 + v109;
                  --v147;
                }
                while (v147);
              }
              sub_18D053D7C((uint64_t)&v352, (uint64_t)&v376);
              v151 = v370;
              sub_18D1D1778((uint64_t)&v376, (uint64_t)&v334, (uint64_t)&v357, (uint64_t)&v357);
              sub_18D1D1114((uint64_t)&v376, v151 + 48 * v123);
              v383 = &unk_1E25C5EA0;
              v381 = &unk_1E25C5EA0;
              v152 = v380[0];
              v376 = (uint64_t (**)())&unk_1E25C7160;
              v380[0] = 0;
              if (v152)
                MEMORY[0x18D78B5BC](v152, 0x1000C8000313F17);
              v153 = v365;
              sub_18D1E10B0((uint64_t)&v376, (uint64_t)&v331, (uint64_t)&v357, (uint64_t)&v352);
              sub_18D1D1114((uint64_t)&v376, v153 + 48 * v123);
              v383 = &unk_1E25C5EA0;
              v381 = &unk_1E25C5EA0;
              v154 = v380[0];
              v376 = &off_1E25C7130;
              v380[0] = 0;
              if (v154)
                MEMORY[0x18D78B5BC](v154, 0x1000C8000313F17);
              v124 = *(_QWORD *)(a10 + 32);
              v110 += *(_DWORD *)(v124 + 4 * v123);
              v109 += *(_DWORD *)(v124 + 4 * (*(_DWORD *)(a10 + 20) + (int)v123++));
            }
            while (v123 != a9);
          }
          v155 = v276;
          v156 = v279;
          v277 = v279;
        }
        sub_18D1E08D8((uint64_t)&v314, v155, v156);
        *(_QWORD *)&v315 = __PAIR64__(v156, v155);
        DWORD2(v315) = v155 * v156;
        HIDWORD(v315) = v155;
        sub_18D04BE88((uint64_t)&v314, 0.0);
        v378 = 0x3100000017;
        v376 = &off_1E25C6FE0;
        v380[0] = 0;
        v379 = 0;
        v377 = xmmword_18D319C70;
        sub_18D1E7AA4((uint64_t)&v376);
        v379 = (_QWORD *)v380[0];
        sub_18D05449C((uint64_t)v341, (uint64_t)&v314, (uint64_t)&v376);
        sub_18D1C99C8((uint64_t)&v299);
        sub_18D054E78((uint64_t)v345, (uint64_t)&v299);
        sub_18D1CBE44((uint64_t)&v294);
        sub_18D053B2C((uint64_t)&v334, (uint64_t)&v331, (uint64_t)&v294);
        sub_18D1CBE44((uint64_t)&v304);
        sub_18D053B2C((uint64_t)&v299, (uint64_t)&v294, (uint64_t)&v304);
        sub_18D1C99C8((uint64_t)&v289);
        sub_18D053B2C((uint64_t)v345, (uint64_t)&v334, (uint64_t)&v289);
        v286 = 0x310000001ALL;
        v284 = &off_1E25C7220;
        v287 = 0;
        v288[0] = 0;
        v285 = xmmword_18D319C80;
        sub_18D1E7C94((uint64_t)&v284);
        v287 = (_QWORD *)v288[0];
        sub_18D05449C((uint64_t)&v304, (uint64_t)&v289, (uint64_t)&v284);
        sub_18D1E3C54((uint64_t)v319);
        sub_18D0543E8((uint64_t)&v376, (uint64_t)&v284, (uint64_t)v319);
        v207 = v288[0];
        v284 = &off_1E25C7220;
        v288[0] = 0;
        if (v207)
          MEMORY[0x18D78B5BC](v207, 0x1000C8000313F17);
        v284 = (uint64_t (**)())&unk_1E25C5E70;
        v208 = v293;
        v289 = &unk_1E25C7160;
        v293 = 0;
        if (v208)
          MEMORY[0x18D78B5BC](v208, 0x1000C8000313F17);
        v209 = v308[0];
        v304 = &off_1E25C7130;
        v308[0] = 0;
        if (v209)
          MEMORY[0x18D78B5BC](v209, 0x1000C8000313F17);
        v304 = (uint64_t (**)())&unk_1E25C5E70;
        v210 = v298;
        v294 = &off_1E25C7130;
        v298 = 0;
        if (v210)
          MEMORY[0x18D78B5BC](v210, 0x1000C8000313F17);
        v211 = v303[0];
        v299 = (uint64_t (**)())&unk_1E25C7160;
        v303[0] = 0;
        if (v211)
          MEMORY[0x18D78B5BC](v211, 0x1000C8000313F17);
        v212 = v380[0];
        v376 = &off_1E25C6FE0;
        v380[0] = 0;
        if (v212)
          MEMORY[0x18D78B5BC](v212, 0x1000C8000313F17);
        v376 = (uint64_t (**)())&unk_1E25C5E70;
        v213 = v318[0];
        v314 = (uint64_t (**)())&unk_1E25C6FB0;
        v318[0] = 0;
        if (v213)
          MEMORY[0x18D78B5BC](v213, 0x1000C8000313F17);
        v311 = 0x100000017;
        v309 = &off_1E25C6F20;
        v310 = xmmword_18D3197B0;
        v312 = &v313;
        sub_18D053B2C((uint64_t)v341, (uint64_t)&v321, (uint64_t)&v309);
        v291 = 0x10000001ALL;
        v289 = &unk_1E25C70A0;
        v290 = xmmword_18D319790;
        v292 = &v293;
        sub_18D053B2C((uint64_t)&v331, (uint64_t)&v321, (uint64_t)&v289);
        v296 = 0x10000001ALL;
        v294 = (uint64_t (**)())&unk_1E25C70A0;
        v295 = xmmword_18D319790;
        v297 = &v298;
        sub_18D0540FC((uint64_t)&v326, (uint64_t)&v289, (uint64_t)&v294);
        v301 = 0x10000001ALL;
        v299 = (uint64_t (**)())&unk_1E25C70A0;
        v300 = xmmword_18D319790;
        v302 = v303;
        sub_18D053B2C((uint64_t)&v334, (uint64_t)&v294, (uint64_t)&v299);
        v306 = 0x10000001ALL;
        v304 = (uint64_t (**)())&unk_1E25C70A0;
        v305 = xmmword_18D319790;
        v307 = v308;
        sub_18D0540FC((uint64_t)&v299, (uint64_t)&v347, (uint64_t)&v304);
        v286 = 0x10000001ALL;
        v284 = (uint64_t (**)())&unk_1E25C70A0;
        v285 = xmmword_18D319790;
        v287 = v288;
        sub_18D053B2C((uint64_t)v345, (uint64_t)&v304, (uint64_t)&v284);
        v378 = 0x10000001ALL;
        v376 = (uint64_t (**)())&unk_1E25C70A0;
        v377 = xmmword_18D319790;
        v379 = v380;
        sub_18D053FA4((uint64_t)&v284, (uint64_t)v343, (uint64_t)&v376);
        v316 = 0x100000031;
        v314 = (uint64_t (**)())&unk_1E25C7C70;
        v315 = xmmword_18D319BC0;
        v317 = (double *)v318;
        sub_18D0543E8((uint64_t)&v309, (uint64_t)&v376, (uint64_t)&v314);
        sub_18D1E3C54((uint64_t)&v294);
        v286 = 0x100000031;
        v284 = (uint64_t (**)())&unk_1E25C7C70;
        v285 = xmmword_18D319BC0;
        v287 = v288;
        v378 = 0x100000031;
        v376 = (uint64_t (**)())&unk_1E25C7C70;
        v377 = xmmword_18D319BC0;
        v379 = v380;
        sub_18D1E3C54((uint64_t)&v304);
        sub_18D054C20((uint64_t)v319, (uint64_t)&v314, (uint64_t)&v376, (uint64_t)&v304, (uint64_t)&v284, (uint64_t)&v294);
        v214 = v308[0];
        v304 = &off_1E25C7CD0;
        v308[0] = 0;
        if (v214)
          MEMORY[0x18D78B5BC](v214, 0x1000C8000313F17);
        v378 = 0x1A00000001;
        v376 = &off_1E25C6B60;
        v379 = v380;
        v215 = v279;
        if (v279 == 1)
        {
          v216 = 0;
          *(_QWORD *)&v217 = 0x100000001;
          *((_QWORD *)&v217 + 1) = 0x100000001;
          v377 = v217;
          LODWORD(v380[0]) = v155;
          v218 = 1;
        }
        else if (v279 <= 0)
        {
          v218 = 0;
          v215 = 0;
          v377 = 0uLL;
          v216 = 1;
        }
        else
        {
          v219 = 0;
          LODWORD(v377) = 1;
          DWORD1(v377) = v279;
          *((_QWORD *)&v377 + 1) = v279 | 0x100000000;
          do
          {
            *((_DWORD *)v380 + v219) = v155 + v219;
            ++v219;
          }
          while (v274 != v219);
          v216 = 0;
          v218 = 1;
          v215 = v274;
        }
        v306 = 0x10000001ALL;
        v304 = (uint64_t (**)())&unk_1E25C70D0;
        v307 = v308;
        *(_QWORD *)&v305 = __PAIR64__(v218, v215);
        DWORD2(v305) = v215 * v218;
        HIDWORD(v305) = v215;
        v102 = a13;
        if (v215)
        {
          v220 = 0;
          for (i = 0; i != v215; ++i)
          {
            if ((v216 & 1) == 0)
            {
              v222 = 0;
              do
              {
                *((_DWORD *)v308 + i + HIDWORD(v305) * v222) = *((_DWORD *)v380 + v220 + v222);
                ++v222;
              }
              while (v218 != v222);
            }
            v220 += v218;
          }
        }
        sub_18D053AA8((uint64_t)&v347, (uint64_t)&v326);
        sub_18D1D1778((uint64_t)&v376, (uint64_t)&v294, (uint64_t)&v304, (uint64_t)&v304);
        v223 = sub_18D053AA8((uint64_t)v345, (uint64_t)&v376);
        v383 = &unk_1E25C5EA0;
        v381 = &unk_1E25C5EA0;
        v224 = v380[0];
        v376 = (uint64_t (**)())&unk_1E25C7160;
        v380[0] = 0;
        if (v224)
          MEMORY[0x18D78B5BC](v224, 0x1000C8000313F17, v223);
        sub_18D1D1680((uint64_t)&v376, (uint64_t)&v284, (uint64_t)&v304);
        v225 = sub_18D053AA8((uint64_t)v343, (uint64_t)&v376);
        if (!a13)
        {
          v378 = 0x1700000001;
          v376 = &off_1E25C6B00;
          v379 = v380;
          if (v276 == 1)
          {
            v226 = 0;
            *(_QWORD *)&v227 = 0x100000001;
            *((_QWORD *)&v227 + 1) = 0x100000001;
            v377 = v227;
            LODWORD(v380[0]) = 0;
            v228 = 1;
            v229 = 1;
          }
          else
          {
            v229 = v265;
            if (v276 <= 0)
            {
              v228 = 0;
              v229 = 0;
              v377 = 0uLL;
              v226 = 1;
            }
            else
            {
              v230 = 0;
              LODWORD(v377) = 1;
              DWORD1(v377) = v276;
              *((_QWORD *)&v377 + 1) = v276 | 0x100000000;
              do
              {
                *((_DWORD *)v380 + v230) = v230;
                ++v230;
              }
              while (v265 != v230);
              v226 = 0;
              v228 = 1;
            }
          }
          v301 = 0x100000017;
          v299 = &off_1E25C6F50;
          v302 = v303;
          *(_QWORD *)&v300 = __PAIR64__(v228, v229);
          DWORD2(v300) = v229 * v228;
          HIDWORD(v300) = v229;
          if (v229)
          {
            v231 = 0;
            for (j = 0; j != v229; ++j)
            {
              if ((v226 & 1) == 0)
              {
                v233 = 0;
                do
                {
                  *((_DWORD *)v303 + j + HIDWORD(v300) * v233) = *((_DWORD *)v380 + v231 + v233);
                  ++v233;
                }
                while (v228 != v233);
              }
              v231 += v228;
            }
          }
          sub_18D1E3514((uint64_t)&v376, (uint64_t)&v294, (uint64_t)&v299, (uint64_t)&v304);
          v234 = sub_18D053AA8(v268, (uint64_t)&v376);
          v382 = &unk_1E25C5EA0;
          v381 = &unk_1E25C5EA0;
          v235 = v380[0];
          v376 = (uint64_t (**)())&unk_1E25C6FB0;
          v380[0] = 0;
          if (v235)
            MEMORY[0x18D78B5BC](v235, 0x1000C8000313F17, v234);
          sub_18D1E0FCC((uint64_t)&v376, (uint64_t)&v284, (uint64_t)&v299);
          sub_18D053AA8(v267, (uint64_t)&v376);
          sub_18D1E32E8((uint64_t)&v376, (uint64_t)&v294, (uint64_t)&v299, (uint64_t)&v299);
          v225 = sub_18D053AA8(v266, (uint64_t)&v376);
          v382 = &unk_1E25C5EA0;
          v381 = &unk_1E25C5EA0;
          v236 = v380[0];
          v376 = (uint64_t (**)())&unk_1E25C6F80;
          v380[0] = 0;
          if (v236)
            MEMORY[0x18D78B5BC](v236, 0x1000C8000313F17, v225);
        }
        v237 = v298;
        v294 = &off_1E25C7CD0;
        v298 = 0;
        if (v237)
          MEMORY[0x18D78B5BC](v237, 0x1000C8000313F17, v225);
        v238 = v320;
        v319[0] = &off_1E25C7CD0;
        v320 = 0;
        if (v238)
          MEMORY[0x18D78B5BC](v238, 0x1000C8000313F17, v225);
        v108 = v281 + 1;
      }
      while (v281 + 1 != v273);
    }
    sub_18D053AA8((uint64_t)v270[16].i64, (uint64_t)v345);
    v95 = sub_18D053AA8((uint64_t)v270[19].i64, (uint64_t)v343);
    v270[69].i32[1] = 0;
    v239 = v333;
    v331 = &off_1E25C7130;
    v333 = 0;
    if (v239)
      MEMORY[0x18D78B5BC](v239, 0x1000C8000313F17, v95);
    v240 = v340;
    v334 = &unk_1E25C7160;
    v340 = 0;
    if (v240)
      MEMORY[0x18D78B5BC](v240, 0x1000C8000313F17, v95);
    v241 = v342;
    v341[0] = &unk_1E25C6F80;
    v342 = 0;
    if (v241)
      MEMORY[0x18D78B5BC](v241, 0x1000C8000313F17, v95);
    v242 = v346;
    v345[0] = &unk_1E25C7160;
    v346 = 0;
    if (v242)
      MEMORY[0x18D78B5BC](v242, 0x1000C8000313F17, v95);
    v243 = 0;
  }
  else
  {
    v58 = 0;
    v59 = v28;
    v60 = 0;
    v61 = 0;
    v283 = (uint64_t)&v59[34].i64[1];
    v280 = 1;
    do
    {
      v62 = *(unsigned int *)(*(_QWORD *)(a10 + 32) + 4 * v58);
      v286 = 0x1A00000001;
      v284 = &off_1E25C6B60;
      v287 = v288;
      if ((_DWORD)v62 == 1)
      {
        v63 = 0;
        *(_QWORD *)&v64 = 0x100000001;
        *((_QWORD *)&v64 + 1) = 0x100000001;
        v285 = v64;
        LODWORD(v288[0]) = 0;
        v65 = 1;
        LODWORD(v62) = 1;
      }
      else if ((int)v62 <= 0)
      {
        v65 = 0;
        LODWORD(v62) = 0;
        v285 = 0uLL;
        v63 = 1;
      }
      else
      {
        v66 = 0;
        LODWORD(v285) = 1;
        DWORD1(v285) = v62;
        *((_QWORD *)&v285 + 1) = v62 | 0x100000000;
        do
        {
          *((_DWORD *)v288 + v66) = v66;
          ++v66;
        }
        while (v62 != v66);
        v63 = 0;
        v65 = 1;
      }
      v316 = 0x10000001ALL;
      v314 = (uint64_t (**)())&unk_1E25C70D0;
      v317 = (double *)v318;
      *(_QWORD *)&v315 = __PAIR64__(v65, v62);
      DWORD2(v315) = v62 * v65;
      HIDWORD(v315) = v62;
      if ((_DWORD)v62)
      {
        v67 = 0;
        v68 = 0;
        do
        {
          if ((v63 & 1) == 0)
          {
            v69 = 0;
            do
            {
              *((_DWORD *)v318 + v68 + HIDWORD(v315) * v69) = *((_DWORD *)v288 + v67 + v69);
              ++v69;
            }
            while (v65 != v69);
          }
          ++v68;
          v67 += v65;
        }
        while (v68 != (_DWORD)v62);
        v70 = v315;
        v65 = DWORD1(v315);
      }
      else
      {
        v70 = 0;
      }
      v378 = 0x10000001ALL;
      v376 = (uint64_t (**)())&unk_1E25C70D0;
      v379 = v380;
      *(_QWORD *)&v377 = __PAIR64__(v65, v70);
      v71 = v65 * v70;
      *((_QWORD *)&v377 + 1) = __PAIR64__(v70, v71);
      if ((int)v71 >= 1)
      {
        v72 = (int *)v318;
        v73 = v380;
        do
        {
          v74 = *v72++;
          *v73++ = v74 + v61;
          --v71;
        }
        while (v71);
      }
      sub_18D053D7C((uint64_t)&v357, (uint64_t)&v376);
      v75 = *(unsigned int *)(*(_QWORD *)(a10 + 32) + 4 * (*(_DWORD *)(a10 + 20) + (int)v58));
      v286 = 0x1700000001;
      v284 = &off_1E25C6B00;
      v287 = v288;
      if ((_DWORD)v75 == 1)
      {
        v76 = 0;
        *(_QWORD *)&v77 = 0x100000001;
        *((_QWORD *)&v77 + 1) = 0x100000001;
        v285 = v77;
        LODWORD(v288[0]) = 0;
        v78 = 1;
        LODWORD(v75) = 1;
      }
      else if ((int)v75 <= 0)
      {
        v78 = 0;
        LODWORD(v75) = 0;
        v285 = 0uLL;
        v76 = 1;
      }
      else
      {
        v79 = 0;
        LODWORD(v285) = 1;
        DWORD1(v285) = v75;
        *((_QWORD *)&v285 + 1) = v75 | 0x100000000;
        do
        {
          *((_DWORD *)v288 + v79) = v79;
          ++v79;
        }
        while (v75 != v79);
        v76 = 0;
        v78 = 1;
      }
      v316 = 0x100000017;
      v314 = &off_1E25C6F50;
      v317 = (double *)v318;
      *(_QWORD *)&v315 = __PAIR64__(v78, v75);
      DWORD2(v315) = v75 * v78;
      HIDWORD(v315) = v75;
      if ((_DWORD)v75)
      {
        v80 = 0;
        v81 = 0;
        do
        {
          if ((v76 & 1) == 0)
          {
            v82 = 0;
            do
            {
              *((_DWORD *)v318 + v81 + HIDWORD(v315) * v82) = *((_DWORD *)v288 + v80 + v82);
              ++v82;
            }
            while (v78 != v82);
          }
          ++v81;
          v80 += v78;
        }
        while (v81 != (_DWORD)v75);
        v83 = v315;
        v78 = DWORD1(v315);
      }
      else
      {
        v83 = 0;
      }
      v378 = 0x100000017;
      v376 = &off_1E25C6F50;
      v379 = v380;
      *(_QWORD *)&v377 = __PAIR64__(v78, v83);
      v84 = v78 * v83;
      *((_QWORD *)&v377 + 1) = __PAIR64__(v83, v84);
      if ((int)v84 >= 1)
      {
        v85 = (int *)v318;
        v86 = v380;
        do
        {
          v87 = *v85++;
          *v86++ = v87 + v60;
          --v84;
        }
        while (v84);
      }
      sub_18D053D7C((uint64_t)&v352, (uint64_t)&v376);
      v316 = 0x10000001ALL;
      v314 = (uint64_t (**)())&unk_1E25C70A0;
      v315 = xmmword_18D319790;
      v317 = (double *)v318;
      sub_18D1C99C8((uint64_t)v343);
      sub_18D1CBE44((uint64_t)&v326);
      v88 = *(uint64_t (**)(uint64_t (***)(), uint64_t (***)(), _QWORD, uint64_t (***)(), _QWORD *, uint64_t (***)()))(*(_QWORD *)(a11 + 32) + 8 * v58);
      sub_18D1D1680((uint64_t)&v376, v283, (uint64_t)&v357);
      v89 = (DWORD1(v353) * v353);
      v286 = 0x100000017;
      v284 = &off_1E25C6F20;
      *(_QWORD *)&v285 = v353;
      *((_QWORD *)&v285 + 1) = __PAIR64__(v353, v89);
      v287 = v288;
      if ((_DWORD)v89)
      {
        v90 = v355;
        v91 = *(_QWORD *)(v278 + 32);
        v92 = v288;
        do
        {
          v93 = *(int *)v90;
          v90 = (uint64_t *)((char *)v90 + 4);
          *v92++ = *(_QWORD *)(v91 + 8 * v93);
          --v89;
        }
        while (v89);
      }
      v94 = v88(&v376, &v284, *(_QWORD *)(*(_QWORD *)(a12 + 32) + 8 * v58), &v314, v343, &v326);
      if (v94)
      {
        v270[69].i8[0] = 0;
      }
      else
      {
        sub_18D1D1680((uint64_t)&v376, v271, (uint64_t)&v357);
        sub_18D1D1080((uint64_t)&v376, SDWORD2(v315), v317);
        sub_18D053AA8((uint64_t)&v374[31 * v58], (uint64_t)&v314);
        sub_18D1C99C8((uint64_t)&v304);
        v286 = 0x10000001ALL;
        v284 = (uint64_t (**)())&unk_1E25C70D0;
        v285 = xmmword_18D319790;
        v287 = v288;
        v349 = 0x10000001ALL;
        v347 = &unk_1E25C70D0;
        v348 = xmmword_18D319790;
        v350 = &v351;
        v378 = 0x100000068;
        v376 = (uint64_t (**)())&unk_1E25C5F90;
        v377 = xmmword_18D3198A0;
        v379 = v380;
        v96 = sub_18D054568((uint64_t)v343, (uint64_t)&v284, (uint64_t)&v347, (uint64_t)&v376, (uint64_t)&v304);
        v97 = sub_18D053AA8(v370 + 48 * v58, (uint64_t)&v304);
        v98 = v308[0];
        v304 = (uint64_t (**)())&unk_1E25C7160;
        v308[0] = 0;
        if (v98)
          MEMORY[0x18D78B5BC](v98, 0x1000C8000313F17, v97);
        v95 = sub_18D053AA8(v365 + 48 * v58, (uint64_t)&v326);
        v280 &= v96 <= v25;
        v99 = *(_QWORD *)(a10 + 32);
        v61 += *(_DWORD *)(v99 + 4 * v58);
        v60 += *(_DWORD *)(v99 + 4 * (*(_DWORD *)(a10 + 20) + (int)v58));
      }
      v100 = v330;
      v326 = &off_1E25C7130;
      v330 = 0;
      if (v100)
        MEMORY[0x18D78B5BC](v100, 0x1000C8000313F17);
      v101 = v344;
      v343[0] = &unk_1E25C7160;
      v344 = 0;
      if (v101)
        MEMORY[0x18D78B5BC](v101, 0x1000C8000313F17);
      if (v94)
      {
        v243 = 20;
        goto LABEL_287;
      }
      ++v58;
    }
    while (v58 != a9);
    v28 = v270;
    v56 = v279;
    v53 = a9;
    if ((v280 & 1) != 0)
      goto LABEL_95;
    LOWORD(v376) = 2;
    LOBYTE(v314) = 2;
    v244 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&v270[79].u64[1], "Predict state Jacobian matrix is not invertible.");
    if (v270[80].i8[15] >= 0)
      LOBYTE(v250) = v244;
    else
      v250 = v270[79].i64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v376, (unsigned __int8 *)&v314, "%s", v245, v246, v247, v248, v249, v250);
    sub_18D053AA8((uint64_t)v270[16].i64, (uint64_t)v270[50].i64);
    v378 = 0x10000001ALL;
    v376 = (uint64_t (**)())&unk_1E25C70A0;
    v377 = xmmword_18D319790;
    v379 = v380;
    sub_18D053B2C((uint64_t)v270[16].i64, v271, (uint64_t)&v376);
    sub_18D053AA8((uint64_t)v270[19].i64, (uint64_t)&v376);
    sub_18D1E08D8((uint64_t)&v376, v17, v279);
    *(_QWORD *)&v377 = __PAIR64__(v279, v17);
    *((_QWORD *)&v377 + 1) = __PAIR64__(v17, v269);
    sub_18D04BE88((uint64_t)&v376, 0.0);
    v251 = sub_18D053AA8(v268, (uint64_t)&v376);
    v252 = v380[0];
    v376 = (uint64_t (**)())&unk_1E25C6FB0;
    v380[0] = 0;
    if (v252)
      MEMORY[0x18D78B5BC](v252, 0x1000C8000313F17, v251);
    v378 = 0x100000017;
    v376 = &off_1E25C6F20;
    v379 = v380;
    *(_QWORD *)&v377 = v17 | 0x100000000;
    DWORD2(v377) = v17;
    HIDWORD(v377) = v17;
    sub_18D04BE88((uint64_t)&v376, 0.0);
    sub_18D053AA8(v267, (uint64_t)&v376);
    v95 = sub_18D053AA8(v266, v272);
    v270[69].i32[1] = 0;
    v270[69].i8[0] = 0;
    v243 = 21;
  }
LABEL_287:
  v253 = 0;
  v362 = &off_1E25C7D60;
  do
  {
    v254 = &(&v362)[v253];
    v254[23] = &off_1E25C7130;
    v255 = *(_QWORD *)&v366[v253 * 8 + 184];
    v254[28] = 0;
    if (v255)
      MEMORY[0x18D78B5BC](v255, 0x1000C8000313F17, v95);
    v254[23] = (uint64_t (**)())&unk_1E25C5E70;
    v253 -= 6;
  }
  while (v253 != -24);
  v256 = 0;
  v367 = &off_1E25C7D90;
  do
  {
    v257 = &(&v367)[v256];
    v257[23] = (uint64_t (**)())&unk_1E25C7160;
    v258 = *(_QWORD *)&v371[v256 * 8 + 184];
    v257[28] = 0;
    if (v258)
      MEMORY[0x18D78B5BC](v258, 0x1000C8000313F17, v95);
    *(_QWORD *)&v371[v256 * 8 + 144] = &unk_1E25C5E70;
    v256 -= 6;
  }
  while (v256 != -24);
  for (k = 784; k != -208; k -= 248)
    *(_QWORD *)&v373[k - 8] = &unk_1E25C5E70;
  return v243;
}

void sub_18D1E6A58(_Unwind_Exception *a1)
{
  uint64_t i;

  sub_18D1E7CFC(&STACK[0xF78]);
  sub_18D1E7D94(&STACK[0x1060]);
  for (i = 784; i != -208; i -= 248)
    *(unint64_t *)((char *)&STACK[0x1148] + i) = (unint64_t)&unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1E71A4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7220;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E7200(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C6FE0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D1E7264(_QWORD *result)
{
  uint64_t i;

  for (i = 98; i != -26; i -= 31)
    result[i] = &unk_1E25C5E70;
  *result = off_1E25C5990;
  return result;
}

void sub_18D1E7294(_QWORD *a1)
{
  uint64_t i;

  for (i = 98; i != -26; i -= 31)
    a1[i] = &unk_1E25C5E70;
  *a1 = off_1E25C5990;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E72D4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E72E0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  _BYTE v12[4];
  _BYTE v13[248];
  _BYTE v14[256];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v12, v4);
      if (v4 >= 3)
      {
        v6 = v3 + v1 - v5;
        v7 = (v4 - 1);
        v8 = 1;
        do
        {
          sub_18D1D6A24((uint64_t)v14, *(_QWORD *)(a1 + 32) + 248 * v8);
          v9 = &v12[v8];
          if (!v12[v8])
          {
            v10 = v8;
            do
            {
              v10 = v10 * v6 % (int)v7;
              v11 = 248 * v10;
              sub_18D1D6A24((uint64_t)v13, *(_QWORD *)(a1 + 32) + v11);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + v11, (uint64_t)v14);
              *v9 = 1;
              sub_18D053AA8((uint64_t)v14, (uint64_t)v13);
              v9 = &v12[v10];
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v7);
      }
    }
  }
}

void sub_18D1E73F4(_QWORD *a1)
{
  sub_18D1E7D94(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E7418(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E7424(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[4];
  _QWORD v15[5];
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = v3 + v1 - v5;
        v7 = (v4 - 1);
        v8 = 1;
        do
        {
          sub_18D1C9844((uint64_t)v17, *(_QWORD *)(a1 + 32) + 48 * v8);
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = v8;
            do
            {
              v10 = v10 * v6 % (int)v7;
              sub_18D1C9844((uint64_t)v15, *(_QWORD *)(a1 + 32) + 48 * v10);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + 48 * v10, (uint64_t)v17);
              *v9 = 1;
              v11 = sub_18D053AA8((uint64_t)v17, (uint64_t)v15);
              v12 = v16;
              v15[0] = &unk_1E25C7160;
              v16 = 0;
              if (v12)
                MEMORY[0x18D78B5BC](v12, 0x1000C8000313F17, v11);
              v9 = &v14[v10];
            }
            while (!*v9);
          }
          v13 = v18;
          v17[0] = &unk_1E25C7160;
          v18 = 0;
          if (v13)
            MEMORY[0x18D78B5BC](v13, 0x1000C8000313F17);
          ++v8;
        }
        while (v8 != v7);
      }
    }
  }
}

void sub_18D1E7590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    MEMORY[0x18D78B5BC](a22, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_18D1E75D4(_QWORD *a1)
{
  sub_18D1E7CFC(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E75F8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E7604(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[4];
  _QWORD v15[5];
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = v3 + v1 - v5;
        v7 = (v4 - 1);
        v8 = 1;
        do
        {
          sub_18D1E7798((uint64_t)v17, *(_QWORD *)(a1 + 32) + 48 * v8);
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = v8;
            do
            {
              v10 = v10 * v6 % (int)v7;
              sub_18D1E7798((uint64_t)v15, *(_QWORD *)(a1 + 32) + 48 * v10);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + 48 * v10, (uint64_t)v17);
              *v9 = 1;
              v11 = sub_18D053AA8((uint64_t)v17, (uint64_t)v15);
              v12 = v16;
              v15[0] = &off_1E25C7130;
              v16 = 0;
              if (v12)
                MEMORY[0x18D78B5BC](v12, 0x1000C8000313F17, v11);
              v9 = &v14[v10];
            }
            while (!*v9);
          }
          v13 = v18;
          v17[0] = &off_1E25C7130;
          v18 = 0;
          if (v13)
            MEMORY[0x18D78B5BC](v13, 0x1000C8000313F17);
          ++v8;
        }
        while (v8 != v7);
      }
    }
  }
}

void sub_18D1E7760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    MEMORY[0x18D78B5BC](a22, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D1E7798(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  __int128 v16;
  const char *v18;
  int v19;

  *(_QWORD *)(a1 + 24) = 0x170000001ALL;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C7130;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (a1 == a2)
  {
    v18 = "this != &(A)";
    v19 = 603;
    goto LABEL_18;
  }
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = v5 * v4;
  *(_DWORD *)(a1 + 20) = v4;
  sub_18D1C4D6C(a1);
  v6 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  if (!v6)
  {
    v18 = "this->allocated_data_ != NULL";
    v19 = 615;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 24) < *(_DWORD *)(a2 + 8))
  {
    v18 = "this->max_num_rows_ >= A.num_rows_";
    v19 = 616;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 28) < *(_DWORD *)(a2 + 12))
  {
    v18 = "this->max_num_cols_ >= A.num_cols_";
    v19 = 617;
LABEL_18:
    __assert_rtn("CNMatrix", "cnmatrix.h", v19, v18);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v11 = (v7 - 2);
    v12 = *(__int128 **)(a2 + 32);
    v13 = (v7 - 1) >> 1;
    v14 = v12;
    v15 = v6;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
    *(_OWORD *)&v6[v11] = *(__int128 *)((char *)v12 + 8 * v11);
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 16);
    if ((int)v8 >= 1)
    {
      v9 = *(uint64_t **)(a2 + 32);
      do
      {
        v10 = *v9++;
        *v6++ = v10;
        --v8;
      }
      while (v8);
    }
  }
  return a1;
}

void sub_18D1E78E0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D1E791C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C6FE0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E7988(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E7AA4(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E79B0(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x467uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1E7AA4(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x2338uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D1E7B0C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7220;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E7B78(uint64_t a1)
{
  uint64_t result;

  result = sub_18D1E7C94(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D1E7BA0(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x4FAuLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D1E7C94(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x27D0uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

_QWORD *sub_18D1E7CFC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = 0;
  *a1 = &off_1E25C7D60;
  do
  {
    v3 = &a1[v2];
    v3[23] = &off_1E25C7130;
    v4 = a1[v2 + 28];
    v3[28] = 0;
    if (v4)
      MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
    v3[23] = &unk_1E25C5E70;
    v2 -= 6;
  }
  while (v2 != -24);
  *a1 = off_1E25C59C0;
  return a1;
}

_QWORD *sub_18D1E7D94(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = 0;
  *a1 = &off_1E25C7D90;
  do
  {
    v3 = &a1[v2];
    v3[23] = &unk_1E25C7160;
    v4 = a1[v2 + 28];
    v3[28] = 0;
    if (v4)
      MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
    v3[23] = &unk_1E25C5E70;
    v2 -= 6;
  }
  while (v2 != -24);
  *a1 = off_1E25C59F0;
  return a1;
}

_QWORD *sub_18D1E7E30(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_18D184AB4(result, a4);
    result = (_QWORD *)sub_18D1E2C34((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18D1E7E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_18D1C59AC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1E7EB4(uint64_t a1)
{
  double v2;
  double *v3;
  double v5;
  double v6;

  v2 = 1.0 - *(double *)(a1 + 56);
  v5 = 1.0 - *(double *)(a1 + 64);
  v6 = v2;
  v3 = (double *)(a1 + 8);
  if (*(_DWORD *)(a1 + 24) == 1)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return sub_18D1D1D50((uint64_t)v3, v3, &v6, &v5);
}

__n128 sub_18D1E7F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  uint64_t v8;
  uint64_t v9;

  sub_18D1E8044(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    if (*(int *)(a2 + 16) >= 2)
    {
      v8 = 1;
      v9 = 16;
      do
      {
        if (sub_18D03F608((double *)(*(_QWORD *)(a2 + 32) + v9), *(double **)(a2 + 32)))
        {
          *(_OWORD *)*(_QWORD *)(a2 + 32) = *(_OWORD *)(*(_QWORD *)(a2 + 32) + v9);
          **(_DWORD **)(a3 + 32) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v8);
        }
        ++v8;
        v9 += 16;
      }
      while (v8 < *(int *)(a2 + 16));
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

_QWORD *sub_18D1E7FB4(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1E7FC8(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E7FEC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E7FF8(uint64_t a1)
{
  char v1[87];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

uint64_t sub_18D1E8044(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  double *v19;
  double v20;
  BOOL v21;
  BOOL v22;
  double *v23;
  int32x2_t v24;
  int32x4_t v25;
  unsigned int v26;
  int32x4_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int i;
  uint64_t v33;
  unint64_t v34;
  int v35;
  __int128 v36;

  v6 = result;
  if (a2 == 1)
  {
    v7 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v7;
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = 1;
    v8 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v8;
    *(_DWORD *)(a4 + 16) = v8;
    *(_DWORD *)(a4 + 20) = 1;
    if (v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(result + 32);
      v11 = *(_QWORD *)(a3 + 32);
      v12 = *(_QWORD *)(a4 + 32);
      while (1)
      {
        v13 = *(unsigned int *)(v6 + 8);
        v14 = (double *)(v10 + 16 * (v13 * v9));
        v15 = *v14;
        v16 = v14[1];
        if (v13 >= 2)
          break;
        v17 = 0;
LABEL_22:
        v23 = (double *)(v11 + 16 * v9);
        *v23 = v15;
        v23[1] = v16;
        *(_DWORD *)(v12 + 4 * v9++) = v17;
        if (v9 >= *(unsigned int *)(v6 + 12))
          return result;
      }
      v17 = 0;
      v18 = 1;
      while (1)
      {
        v19 = (double *)(v10 + 16 * (v13 * v9 + v18));
        result = *(_QWORD *)v19;
        v20 = v19[1];
        if (*(_QWORD *)v19)
          v21 = 1;
        else
          v21 = (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if (!v21)
          goto LABEL_14;
        if (v15 == 0.0 && (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v20 <= v16)
          {
            v15 = 0.0;
            goto LABEL_17;
          }
LABEL_16:
          v15 = *v19;
          v16 = v20;
          v17 = v18;
          goto LABEL_17;
        }
        v22 = result <= *(_QWORD *)&v15;
        if (result == *(_QWORD *)&v15)
LABEL_14:
          v22 = v20 <= v16;
        if (!v22)
          goto LABEL_16;
LABEL_17:
        if (v13 == ++v18)
          goto LABEL_22;
      }
    }
  }
  else
  {
    v24.i32[1] = 1;
    v24.i32[0] = *(_DWORD *)(result + 8);
    v25 = vdupq_lane_s32(v24, 0);
    v25.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v25;
    v26 = *(_DWORD *)(result + 8);
    v27 = vdupq_lane_s32((int32x2_t)(v26 | 0x100000000), 0);
    v27.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v27;
    if (v26)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        *(_OWORD *)(*(_QWORD *)(a3 + 32) + v28) = *(_OWORD *)(*(_QWORD *)(result + 32) + v28);
        *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * v29++) = 0;
        v28 += 16;
      }
      while (v29 < *(unsigned int *)(result + 8));
    }
    v30 = *(_DWORD *)(result + 12);
    if (v30 >= 2)
    {
      LODWORD(v31) = *(_DWORD *)(result + 8);
      for (i = 1; i < v30; ++i)
      {
        if ((_DWORD)v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = v31 * i;
          do
          {
            v36 = *(_OWORD *)(*(_QWORD *)(v6 + 32) + 16 * (v35 + v34));
            result = sub_18D03F608((double *)&v36, (double *)(*(_QWORD *)(a3 + 32) + v33));
            if ((_DWORD)result)
            {
              *(_OWORD *)(*(_QWORD *)(a3 + 32) + v33) = v36;
              *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * v34) = i;
            }
            ++v34;
            v31 = *(unsigned int *)(v6 + 8);
            v33 += 16;
          }
          while (v34 < v31);
          v30 = *(_DWORD *)(v6 + 12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_18D1E8274(_QWORD *result)
{
  result[354] = &unk_1E25C5EA0;
  *result = &unk_1E25C58D0;
  return result;
}

_QWORD *sub_18D1E8298(_QWORD *result)
{
  result[93] = &unk_1E25C5EA0;
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D1E82B0(_QWORD *result)
{
  result[180] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1E82D4(_QWORD *a1)
{
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C63E0;
  sub_18D1C3D98(a1 + 5);
  *a1 = &unk_1E25C5A20;
  return a1;
}

_QWORD *sub_18D1E832C(_QWORD *a1)
{
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C6410;
  sub_18D1C3A48(a1 + 5);
  *a1 = &unk_1E25C5A50;
  return a1;
}

_QWORD *sub_18D1E8384(_QWORD *result)
{
  result[180] = &unk_1E25C5EA0;
  *result = &unk_1E25C5CC0;
  return result;
}

_QWORD *sub_18D1E83A8(_QWORD *result)
{
  result[180] = &unk_1E25C5EA0;
  *result = &unk_1E25C5DE0;
  return result;
}

uint64_t sub_18D1E83CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_18D1C6D74(a1);
  *(_QWORD *)v6 = &unk_1E25C5330;
  *(_QWORD *)(v6 + 2824) = a2;
  v7 = v6 + 2832;
  *(_QWORD *)(v6 + 2856) = 0x1000000AELL;
  *(_QWORD *)(v6 + 2832) = &unk_1E25C6500;
  *(_OWORD *)(v6 + 2840) = xmmword_18D3197E0;
  *(_QWORD *)(v6 + 2864) = v6 + 2872;
  sub_18D053D7C(v6 + 2832, a3);
  v8 = *(_DWORD *)(v7 + 8);
  v9 = *(_DWORD *)(a1 + 2844);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = v9 * v8;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9 * v8 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 4 * v10;
    do
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 32) + v11) = *(_OWORD *)(*(_QWORD *)(a2 + 32)
                                                          + 16 * *(int *)(*(_QWORD *)(a1 + 2864) + v12));
      v12 += 4;
      v11 += 16;
    }
    while (v13 != v12);
  }
  return a1;
}

void sub_18D1E84A4(_QWORD *a1)
{
  a1[354] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C58D0;
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D1E84D8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  __n128 *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 8);
    v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 12) = v2;
    v4 = v2 * v3;
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v3;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v9 = (v5 - 1);
      v10 = *(_OWORD **)(a1 + 32);
      v11 = *(__int128 **)(a2 + 32);
      v12 = (__n128 *)&v10[v9];
      v13 = v11;
      v14 = v9;
      do
      {
        v15 = *v13++;
        *v10++ = v15;
        --v14;
      }
      while (v14);
      result = (__n128)v11[v9];
      *v12 = result;
    }
    else if (v4 >= 1)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        result = *(__n128 *)(*(_QWORD *)(a2 + 32) + v6);
        *(__n128 *)(*(_QWORD *)(a1 + 32) + v6) = result;
        ++v7;
        v6 += 16;
      }
      while (v7 < *(int *)(a1 + 16));
    }
  }
  return result;
}

uint64_t sub_18D1E8568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x1000000AELL;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197E0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5480;
  *(_QWORD *)(a1 + 736) = a2;
  *(_QWORD *)(a1 + 768) = 0x1000000AELL;
  *(_QWORD *)(a1 + 744) = &unk_1E25C6500;
  *(_OWORD *)(a1 + 752) = xmmword_18D3197E0;
  *(_QWORD *)(a1 + 776) = a1 + 784;
  sub_18D053D7C(a1 + 744, a3);
  v5 = *(_DWORD *)(a1 + 752);
  v6 = *(_DWORD *)(a1 + 756);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = (v6 * v5);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 776);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_DWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_DWORD *)(v9 + 4 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D1E8628(_QWORD *a1)
{
  a1[93] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E8650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0x1000000AELL;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197E0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5450;
  *(_QWORD *)(a1 + 1432) = a2;
  v5 = a1 + 1440;
  *(_QWORD *)(a1 + 1464) = 0x1000000AELL;
  *(_QWORD *)(a1 + 1440) = &unk_1E25C6500;
  *(_OWORD *)(a1 + 1448) = xmmword_18D3197E0;
  *(_QWORD *)(a1 + 1472) = a1 + 1480;
  sub_18D053D7C(a1 + 1440, a3);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a1 + 1452);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    v9 = *(int **)(a1 + 1472);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD **)(a1 + 32);
    do
    {
      v12 = *v9++;
      *v11++ = *(_QWORD *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18D1E871C(_QWORD *a1)
{
  a1[180] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E8750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (_QWORD *)sub_18D1C6E44(a1);
  *v6 = &unk_1E25C5360;
  v6[6] = a2;
  v6[7] = &unk_1E25C6500;
  *(_QWORD *)(a1 + 80) = 0x1000000AELL;
  *(_OWORD *)(a1 + 64) = xmmword_18D3197E0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  sub_18D053D7C((uint64_t)(v6 + 7), a3);
  v7 = *(_DWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = v9 * v7;
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v8)
    __assert_rtn("CNSubVector", "cnsubvector.h", 151, "this->allocated_data_ != NULL");
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 4 * v10;
    do
    {
      sub_18D053AA8(*(_QWORD *)(a1 + 32) + v11, *(_QWORD *)(a2 + 32) + ((uint64_t)*(int *)(*(_QWORD *)(a1 + 88) + v12) << 6));
      v12 += 4;
      v11 += 64;
    }
    while (v13 != v12);
  }
  return a1;
}

void sub_18D1E885C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  v1[7] = &unk_1E25C5EA0;
  *v1 = &unk_1E25C63E0;
  sub_18D1C3D98(v2);
  *v1 = &unk_1E25C5A20;
  _Unwind_Resume(a1);
}

void sub_18D1E88A4(_QWORD *a1)
{
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C63E0;
  sub_18D1C3D98(a1 + 5);
  *a1 = &unk_1E25C5A20;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E890C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v4;
    v6 = v4 * v5;
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v5;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7 > 3)
    {
      v10 = (v7 - 1);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a2 + 32);
      v13 = v11 + (v10 << 6);
      v14 = v12;
      v15 = v10;
      do
      {
        sub_18D053AA8(v11, v14);
        v11 += 64;
        v14 += 64;
        --v15;
      }
      while (v15);
      sub_18D053AA8(v13, v12 + (v10 << 6));
    }
    else if (v6 >= 1)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        sub_18D053AA8(*(_QWORD *)(a1 + 32) + v8, *(_QWORD *)(a2 + 32) + v8);
        ++v9;
        v8 += 64;
      }
      while (v9 < *(int *)(a1 + 16));
    }
  }
  return a1;
}

uint64_t sub_18D1E89E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (_QWORD *)sub_18D1C6ED4(a1);
  *v6 = &unk_1E25C5390;
  v6[6] = a2;
  v6[7] = &unk_1E25C6500;
  *(_QWORD *)(a1 + 80) = 0x1000000AELL;
  *(_OWORD *)(a1 + 64) = xmmword_18D3197E0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  sub_18D053D7C((uint64_t)(v6 + 7), a3);
  v7 = *(_DWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = v9 * v7;
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v8)
    __assert_rtn("CNSubVector", "cnsubvector.h", 151, "this->allocated_data_ != NULL");
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 4 * v10;
    do
    {
      sub_18D053AA8(*(_QWORD *)(a1 + 32) + v11, *(_QWORD *)(a2 + 32) + 112 * *(int *)(*(_QWORD *)(a1 + 88) + v12));
      v12 += 4;
      v11 += 112;
    }
    while (v13 != v12);
  }
  return a1;
}

void sub_18D1E8AF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  v1[7] = &unk_1E25C5EA0;
  *v1 = &unk_1E25C6410;
  sub_18D1C3A48(v2);
  *v1 = &unk_1E25C5A50;
  _Unwind_Resume(a1);
}

void sub_18D1E8B40(_QWORD *a1)
{
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C6410;
  sub_18D1C3A48(a1 + 5);
  *a1 = &unk_1E25C5A50;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E8BA8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v4;
    v6 = v4 * v5;
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v5;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7 > 3)
    {
      v10 = v7 - 1;
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a2 + 32);
      v13 = v11 + 112 * (v7 - 1);
      v14 = v12;
      v15 = (v7 - 1);
      do
      {
        sub_18D053AA8(v11, v14);
        v11 += 112;
        v14 += 112;
        --v15;
      }
      while (v15);
      sub_18D053AA8(v13, v12 + 112 * v10);
    }
    else if (v6 >= 1)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        sub_18D053AA8(*(_QWORD *)(a1 + 32) + v8, *(_QWORD *)(a2 + 32) + v8);
        ++v9;
        v8 += 112;
      }
      while (v9 < *(int *)(a1 + 16));
    }
  }
  return a1;
}

void sub_18D1E8C8C(_QWORD *a1)
{
  a1[180] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5CC0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E8CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t i;

  *(_QWORD *)(a1 + 24) = 0x1000000AELL;
  *(_OWORD *)(a1 + 8) = xmmword_18D3197E0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &unk_1E25C5420;
  *(_QWORD *)(a1 + 1432) = a2;
  v5 = a1 + 1440;
  *(_QWORD *)(a1 + 1464) = 0x1000000AELL;
  *(_QWORD *)(a1 + 1440) = &unk_1E25C6500;
  *(_OWORD *)(a1 + 1448) = xmmword_18D3197E0;
  *(_QWORD *)(a1 + 1472) = a1 + 1480;
  sub_18D053D7C(a1 + 1440, a3);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a1 + 1452);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i) = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                                                            + 8 * *(int *)(*(_QWORD *)(a1 + 1472) + 4 * i));
  }
  return a1;
}

void sub_18D1E8D94(_QWORD *a1)
{
  a1[180] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5DE0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E8DC8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v2 = *(_DWORD *)(a2 + 8);
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(result + 8) = v2;
    *(_DWORD *)(result + 12) = v3;
    v4 = v3 * v2;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v2;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v8 = (v5 - 1);
      v9 = *(_QWORD **)(result + 32);
      v10 = *(uint64_t **)(a2 + 32);
      v11 = v10;
      v12 = v9;
      v13 = v8;
      do
      {
        v14 = *v11++;
        *v12++ = v14;
        --v13;
      }
      while (v13);
      v9[v8] = v10[v8];
    }
    else if (v4 >= 1)
    {
      v6 = 0;
      v7 = 8 * v4;
      do
      {
        *(_QWORD *)(*(_QWORD *)(result + 32) + v6) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v6);
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t sub_18D1E8E50(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1A0000001CLL;
  *(_QWORD *)a1 = &off_1E25C7340;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3198B0;
  sub_18D1CB4C0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D1E8EA4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D1E8EE0(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1E8EF4(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E8F18(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E8F24(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[3];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1E8FEC(_QWORD *a1)
{
  a1[97] = &unk_1E25C5EA0;
  a1[90] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D1E9024(_QWORD *a1)
{
  a1[109] = &unk_1E25C5EA0;
  a1[90] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E905C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1E9068(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[84];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D1E915C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

cnestimation::RotationStabilizedAccelerationEstimator *cnestimation::RotationStabilizedAccelerationEstimator::RotationStabilizedAccelerationEstimator(cnestimation::RotationStabilizedAccelerationEstimator *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  sub_18D1E9CD0((uint64_t)this + 104);
  *((_QWORD *)this + 13) = &off_1E25B9CA8;
  *((_BYTE *)this + 320) = 0;
  *(_WORD *)this = 0;
  return this;
}

{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  sub_18D1E9CD0((uint64_t)this + 104);
  *((_QWORD *)this + 13) = &off_1E25B9CA8;
  *((_BYTE *)this + 320) = 0;
  *(_WORD *)this = 0;
  return this;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::Configure(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t result;
  _QWORD v6[5];
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[9];
  _BYTE v14[40];

  *(_WORD *)a1 = 0;
  v11 = 0x100000004;
  v9 = 0;
  v10 = 0;
  v8 = &unk_1E25C7E50;
  v13[7] = 0x100000004;
  v12 = v13;
  v13[4] = &unk_1E25C7E50;
  v13[5] = 0;
  v13[6] = 0;
  v13[8] = v14;
  v6[0] = 0x300000004;
  v6[1] = *(_QWORD *)(a2 + 24);
  v4 = *(double *)(a2 + 16) + (double)*(uint64_t *)(a2 + 8);
  v6[2] = 0x400000004;
  *(double *)&v6[3] = v4;
  *(double *)&v6[4] = v4;
  v7 = 0;
  v14[32] = 0;
  if (sub_18D1E92F8(a1 + 104, (int *)v6))
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 32);
  if (*(double *)a2 <= 0.0)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t sub_18D1E92F8(uint64_t a1, int *a2)
{
  int v2;
  unsigned int v4;
  uint64_t result;
  double v8;
  _DWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[104];
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;

  v2 = *a2;
  if (!*a2 || !*((_QWORD *)a2 + 1))
    return 0xFFFFFFFFLL;
  v4 = a2[5];
  if (a2[4] > v4 || v4 == 0)
    return 0xFFFFFFFFLL;
  v8 = *((double *)a2 + 4);
  result = 0xFFFFFFFFLL;
  if (fabs(*((double *)a2 + 3)) > v8 || v8 <= 0.0)
    return result;
  if (*((_BYTE *)a2 + 40))
  {
    if (a2[32] != v2 || a2[33] != 1)
      return result;
    v26 = 0x100000004;
    v24 = &unk_1E25C7E50;
    v25 = xmmword_18D313090;
    v27 = (double *)&v28;
    v21 = 0x100000004;
    v19 = &unk_1E25C7EB0;
    v20 = xmmword_18D313090;
    v22 = &v23;
    sub_18D1C2074((uint64_t)(a2 + 30), (uint64_t)&v24, (uint64_t)&v19);
    if (*v27 < 0.0)
      return 0xFFFFFFFFLL;
    result = 0xFFFFFFFFLL;
    if (a2[14] != v2 || a2[15] != 1)
      return result;
    sub_18D1EBF80((uint64_t)(a2 + 12), (uint64_t)&v24);
    if (*v27 < 0.0)
      return 0xFFFFFFFFLL;
    sub_18D1EC128((uint64_t)(a2 + 30), (uint64_t)(a2 + 12), (uint64_t)v18);
    sub_18D1EC0B0((uint64_t)v18, 2, (uint64_t)&v19);
    sub_18D1EC018((uint64_t)&v19, (uint64_t)&v24);
    if (*v27 <= 0.0)
      return 0xFFFFFFFFLL;
  }
  v9 = (_DWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
  {
    v10 = *v9 != *a2 || *(_DWORD *)(a1 + 20) != a2[1];
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *((_QWORD *)a2 + 1);
    v13 = *(_OWORD *)a2;
    v14 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)v9 = v13;
    *(_OWORD *)(a1 + 32) = v14;
    sub_18D053AA8(a1 + 64, (uint64_t)(a2 + 12));
    v15 = sub_18D053AA8(a1 + 136, (uint64_t)(a2 + 30));
    *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 192);
    *(_BYTE *)(a1 + 8) = 1;
    if (v10 || v11 != v12)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)a1 + 104))(a1, v15);
    return 0;
  }
  else
  {
    v16 = *(_OWORD *)a2;
    v17 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)v9 = v16;
    *(_OWORD *)(a1 + 32) = v17;
    sub_18D053AA8(a1 + 64, (uint64_t)(a2 + 12));
    sub_18D053AA8(a1 + 136, (uint64_t)(a2 + 30));
    result = 0;
    *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 192);
    *(_BYTE *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::IsConfigured(cnestimation::RotationStabilizedAccelerationEstimator *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::IsInitialized(cnestimation::RotationStabilizedAccelerationEstimator *this)
{
  return *((unsigned __int8 *)this + 1);
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::Reset(uint64_t this)
{
  *(_BYTE *)(this + 1) = 0;
  return this;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::AddAcceleration(uint64_t a1, uint64_t a2, double a3, int8x16_t a4)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t *v30;
  uint64_t result;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  __int128 v52;
  uint64_t v53;
  double v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD v58[9];
  _BYTE v59[24];
  uint64_t v60;
  __int128 *v61;
  __int128 v62;
  uint64_t v63;
  double v64[4];
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int8x16_t v74;

  if (!*(_BYTE *)a1)
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(a1 + 1))
  {
    v74 = *(int8x16_t *)a2;
    v6 = CNTimeSpan::operator-((uint64_t)&v74, (_QWORD *)(a1 + 16), v74, a4);
    v8 = v7 + (double)v6;
    if (v8 <= 0.0)
      return 0xFFFFFFFFLL;
    v9 = *(double *)(a1 + 48);
    v10 = *(double *)(a1 + 56);
    v12 = *(double *)(a1 + 64);
    v11 = *(double *)(a1 + 72);
    v71 = 0x100000004;
    v69 = COERCE_DOUBLE(&unk_1E25C7E50);
    v70 = xmmword_18D313090;
    v72 = &v73;
    if (sub_18D1E9A08((_DWORD *)(a1 + 104), (uint64_t)&v74, *(_QWORD *)(a1 + 720), (uint64_t)&v69))
      return 0xFFFFFFFFLL;
    sub_18D159D6C((uint64_t)&v54, (uint64_t)&v69);
    v13 = sqrt(*(double *)&v55 * *(double *)&v55+ v54 * v54+ *((double *)&v55 + 1) * *((double *)&v55 + 1)+ *(double *)&v56 * *(double *)&v56);
    v14 = 1.0;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 1.0;
    if (fabs(v13) >= 2.22044605e-16)
    {
      v16 = v54 / v13;
      v17 = *(double *)&v55 / v13;
      v18 = *((double *)&v55 + 1) / v13;
      v19 = *(double *)&v56 / v13;
    }
    v65 = v16;
    v66 = v17;
    v67 = v18;
    v68 = v19;
    v20 = sqrt(v10 * v10 + v9 * v9 + v12 * v12 + v11 * v11);
    v21 = 0.0;
    v22 = 0.0;
    if (fabs(v20) >= 2.22044605e-16)
    {
      v15 = -v9 / v20;
      v21 = -v10 / v20;
      v22 = -v12 / v20;
      v14 = v11 / v20;
    }
    v54 = v15;
    *(double *)&v55 = v21;
    *((double *)&v55 + 1) = v22;
    *(double *)&v56 = v14;
    cnrotation::Cat(&v65, (const cnrotation::CNRotation *)&v54, v64);
    v60 = 0x100000003;
    *(_QWORD *)v59 = &unk_1E25C7790;
    *(_OWORD *)&v59[8] = xmmword_18D313070;
    v61 = &v62;
    v62 = *(_OWORD *)(a1 + 80);
    v63 = *(_QWORD *)(a1 + 96);
    sub_18D162AB8((cnrotation::CNRotation *)v64, (uint64_t)v59, (uint64_t)&v54);
    sub_18D053AA8((uint64_t)v59, (uint64_t)&v54);
    v50 = 0x100000003;
    v48 = &unk_1E25C7790;
    v49 = xmmword_18D313070;
    v51 = &v52;
    v52 = *(_OWORD *)(a2 + 16);
    v23.f64[1] = *((float64_t *)&v52 + 1);
    v53 = *(_QWORD *)(a2 + 32);
    v24 = v8 / (v8 + *(double *)(a1 + 8) / 6.28318531);
    v56 = 0x100000003;
    v54 = COERCE_DOUBLE(&unk_1E25C7790);
    v55 = xmmword_18D313070;
    v57 = v58;
    v23.f64[0] = v24;
    v25 = sub_18D064EF4((uint64_t)&v48, (uint64_t)&v54, v23);
    v25.f64[0] = 1.0 - v24;
    v40 = 0x100000003;
    v38 = &unk_1E25C7790;
    v39 = xmmword_18D313070;
    v41 = &v42;
    sub_18D064EF4((uint64_t)v59, (uint64_t)&v38, v25);
    v45 = 0x100000003;
    v43 = &unk_1E25C7790;
    v44 = xmmword_18D313070;
    v46 = &v47;
    sub_18D053FA4((uint64_t)&v54, (uint64_t)&v38, (uint64_t)&v43);
    *(int8x16_t *)(a1 + 16) = v74;
    v26 = v65;
    v27 = v66;
    v28 = v67;
    v29 = v68;
    if ((double *)(a1 + 48) != &v65)
    {
      *(double *)(a1 + 48) = v65;
      *(double *)(a1 + 56) = v27;
      *(double *)(a1 + 64) = v28;
      *(double *)(a1 + 72) = v29;
    }
    v30 = v46;
    *(_QWORD *)(a1 + 80) = *v46;
    *(_QWORD *)(a1 + 88) = v30[1];
    *(_QWORD *)(a1 + 96) = v30[2];
    v56 = 0x100000004;
    v54 = COERCE_DOUBLE(&unk_1E25C7E50);
    v55 = xmmword_18D313090;
    v57 = v58;
    *(double *)v58 = v26;
    *(double *)&v58[1] = v27;
    *(double *)&v58[2] = v28;
    *(double *)&v58[3] = v29;
    result = sub_18D1E9B30(a1 + 104, &v74, (uint64_t)&v54);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 1) = 0;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_OWORD *)v59 = *(_OWORD *)a2;
    v56 = 0x100000004;
    v54 = COERCE_DOUBLE(&unk_1E25C7E50);
    v57 = v58;
    v55 = xmmword_18D313090;
    sub_18D04BE88((uint64_t)&v54, 0.0);
    v57[3] = 0x3FF0000000000000;
    if (sub_18D1E9B30(a1 + 104, v59, (uint64_t)&v54))
      return 0xFFFFFFFFLL;
    v32 = *(_OWORD *)v59;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v59;
    *(_OWORD *)(a1 + 32) = v32;
    sub_18D159D6C((uint64_t)&v69, (uint64_t)&v54);
    v33 = sqrt(*(double *)&v70 * *(double *)&v70+ v69 * v69+ *((double *)&v70 + 1) * *((double *)&v70 + 1)+ *(double *)&v71 * *(double *)&v71);
    if (fabs(v33) >= 2.22044605e-16)
    {
      v35 = v69 / v33;
      v36 = *(double *)&v70 / v33;
      v37 = *((double *)&v70 + 1) / v33;
      v34 = *(double *)&v71 / v33;
    }
    else
    {
      v34 = 1.0;
      v35 = 0.0;
      v36 = 0.0;
      v37 = 0.0;
    }
    result = 0;
    *(double *)(a1 + 48) = v35;
    *(double *)(a1 + 56) = v36;
    *(double *)(a1 + 64) = v37;
    *(double *)(a1 + 72) = v34;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 1) = 1;
  }
  return result;
}

uint64_t sub_18D1E9A08(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1))
    return 0xFFFFFFFFLL;
  v8 = a1[5];
  v25 = 0x100000003;
  v20 = &unk_1E25C7790;
  v26 = &v27;
  v21 = v8;
  v22 = 1;
  v23 = v8;
  v24 = v8;
  sub_18D04BE88((uint64_t)&v20, 0.0);
  v17 = 0x400000004;
  v15 = &unk_1E25C7FA0;
  v16 = xmmword_18D313080;
  v18 = &v19;
  v12 = 0x300000004;
  v10 = &unk_1E25C7F70;
  v11 = xmmword_18D3130A0;
  v13 = &v14;
  return (*(uint64_t (**)(_DWORD *, uint64_t, void **, uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 96))(a1, a2, &v20, a3, a4, &v15, &v10);
}

uint64_t sub_18D1E9B30(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  int v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE v21[128];

  v4 = *(unsigned int *)(a3 + 8);
  v3 = *(_DWORD *)(a3 + 12);
  if ((_DWORD)v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5 || v3 != 1)
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(a1 + 8))
  {
    if ((_DWORD)v4 != *(_DWORD *)(a1 + 16))
      return 0xFFFFFFFFLL;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v4;
  }
  *(_OWORD *)(a1 + 224) = *a2;
  sub_18D053AA8(a1 + 240, a3);
  v19 = 0x400000004;
  v14 = &unk_1E25C7FA0;
  v20 = v21;
  v15 = v4;
  v16 = v4;
  v17 = v4 * v4;
  v18 = v4;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  if ((int)v4 >= 1)
  {
    v9 = 0;
    v10 = v18 + 1;
    v11 = v20;
    v12 = v4;
    do
    {
      *(_QWORD *)&v11[8 * v9] = 0x3FF0000000000000;
      v9 += v10;
      --v12;
    }
    while (v12);
  }
  sub_18D053AA8(a1 + 312, (uint64_t)&v14);
  if (*(_BYTE *)(a1 + 8))
  {
    v13 = *(_DWORD *)(a1 + 20);
    v19 = 0x300000004;
    v14 = &unk_1E25C7F70;
    v20 = v21;
    v15 = v4;
    v16 = v13;
    v17 = v13 * v4;
    v18 = v4;
    sub_18D04BE88((uint64_t)&v14, 0.0);
    sub_18D053AA8(a1 + 480, (uint64_t)&v14);
  }
  result = 0;
  *(_BYTE *)(a1 + 216) = 1;
  return result;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::GetRotationStabilizedAcceleration(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  if (!*(_BYTE *)(a1 + 1))
    return 0xFFFFFFFFLL;
  v2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 16) = v2;
  if (a2 != a1 + 16)
  {
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 64);
  }
  v3 = 0;
  v4 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 64) = v4;
  return v3;
}

double sub_18D1E9CD0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &unk_1E25B9C28;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_QWORD *)(a1 + 88) = 0x100000004;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = &unk_1E25C7E50;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 160) = 0x100000004;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E25C7E50;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_BYTE *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 264) = 0x100000004;
  *(_QWORD *)(a1 + 240) = &unk_1E25C7E50;
  *(_OWORD *)(a1 + 248) = xmmword_18D313090;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 336) = 0x400000004;
  *(_QWORD *)(a1 + 312) = &unk_1E25C7FA0;
  *(_OWORD *)(a1 + 320) = xmmword_18D313080;
  *(_QWORD *)(a1 + 344) = a1 + 352;
  *(_QWORD *)(a1 + 504) = 0x300000004;
  *(_QWORD *)(a1 + 480) = &unk_1E25C7F70;
  *(_QWORD *)&result = 0x300000004;
  *(_OWORD *)(a1 + 488) = xmmword_18D3130A0;
  *(_QWORD *)(a1 + 512) = a1 + 520;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  return result;
}

_QWORD *sub_18D1E9DBC(_QWORD *result)
{
  *result = &unk_1E25B9C28;
  result[60] = &unk_1E25C5E70;
  result[39] = &unk_1E25C5E70;
  result[30] = &unk_1E25C5E70;
  result[17] = &unk_1E25C5E70;
  result[8] = &unk_1E25C5E70;
  return result;
}

void sub_18D1E9DF0(_QWORD *a1)
{
  *a1 = &unk_1E25B9C28;
  a1[60] = &unk_1E25C5E70;
  a1[39] = &unk_1E25C5E70;
  a1[30] = &unk_1E25C5E70;
  a1[17] = &unk_1E25C5E70;
  a1[8] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1E9E34(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 8))
    return 0xFFFFFFFFLL;
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 25) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  sub_18D053AA8(a2 + 48, a1 + 64);
  sub_18D053AA8(a2 + 120, a1 + 136);
  result = 0;
  *(_BYTE *)(a2 + 192) = *(_BYTE *)(a1 + 208);
  return result;
}

uint64_t sub_18D1E9E98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18D1E9EA0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == 4 && *(_DWORD *)(a2 + 20) == 4 && *(_BYTE *)(a2 + 40) == 0)
    return sub_18D1E92F8(a1, (int *)a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_18D1E9EC4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (!*(_BYTE *)(a1 + 216))
    return 0xFFFFFFFFLL;
  *a2 = *(_OWORD *)(a1 + 224);
  sub_18D053AA8(a3, a1 + 240);
  return 0;
}

uint64_t sub_18D1E9EFC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(_BYTE *)(a1 + 216) || !*(_BYTE *)(a1 + 208))
    return 0xFFFFFFFFLL;
  *a2 = *(_OWORD *)(a1 + 224);
  sub_18D053AA8(a3, a1 + 240);
  sub_18D053AA8(a4, a1 + 312);
  sub_18D053AA8(a5, a1 + 480);
  return 0;
}

uint64_t sub_18D1E9F70(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_18D1E9F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return 0xFFFFFFFFLL;
  v18 = 0x400000004;
  v16 = &unk_1E25C7FA0;
  v17 = xmmword_18D313080;
  v19 = &v20;
  v13 = 0x300000004;
  v11 = &unk_1E25C7F70;
  v12 = xmmword_18D3130A0;
  v14 = &v15;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 96))(a1, a2, a3, a4, a5, &v16, &v11);
}

uint64_t sub_18D1EA060(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  void *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1))
    return 0xFFFFFFFFLL;
  v12 = a1[5];
  v19 = 0x100000003;
  v14 = &unk_1E25C7790;
  v20 = &v21;
  v15 = v12;
  v16 = 1;
  v17 = v12;
  v18 = v12;
  sub_18D04BE88((uint64_t)&v14, 0.0);
  return (*(uint64_t (**)(_DWORD *, uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, &v14, a3, a4, a5, a6);
}

uint64_t sub_18D1EA12C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  double v25;
  double v26;
  int v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  double v31;
  double v32;
  int v33;
  double v34;
  int v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  int8x16_t v41;
  __n128 v42;
  int v43;
  int v44;
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  __int128 v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  __int128 v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  __int128 v68;
  __int128 v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  __int128 v78;
  __int128 v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint64_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  __int128 v88;
  __int128 v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  void **v99;
  uint64_t v100;
  int v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  int v107;
  _OWORD *v108;
  int v109;
  uint64_t v110;
  unsigned int (*v111)(__int128 *, double *, void **, uint64_t, uint64_t, void **, void **, void **);
  void *v112;
  __int128 v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE v116[128];
  void *v117;
  __int128 v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE v121[128];
  void *v122;
  __int128 v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE v126[128];
  void *v127;
  __int128 v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE v131[128];
  void *v132;
  __int128 v133;
  uint64_t v134;
  _BYTE *v135;
  _BYTE v136[128];
  void *v137;
  __int128 v138;
  uint64_t v139;
  _BYTE *v140;
  _BYTE v141[128];
  void *v142;
  __int128 v143;
  uint64_t v144;
  _BYTE *v145;
  _BYTE v146[128];
  void *v147;
  __int128 v148;
  uint64_t v149;
  _BYTE *v150;
  _BYTE v151[96];
  void *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  void *v157;
  __int128 v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  void *v162;
  __int128 v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  void *v167;
  __int128 v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE v171[96];
  void *v172;
  __int128 v173;
  uint64_t v174;
  _BYTE *v175;
  _BYTE v176[128];
  void *v177;
  __int128 v178;
  uint64_t v179;
  _BYTE *v180;
  _BYTE v181[128];
  void *v182;
  __int128 v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  _QWORD v187[2];
  void *v188;
  __int128 v189;
  uint64_t v190;
  _BYTE *v191;
  _BYTE v192[96];
  void *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  void *v198;
  __int128 v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  void *v203;
  __int128 v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  void *v208;
  __int128 v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE v212[96];
  void *v213;
  __int128 v214;
  uint64_t v215;
  _BYTE *v216;
  _BYTE v217[128];
  void *v218;
  __int128 v219;
  uint64_t v220;
  _BYTE *v221;
  _BYTE v222[128];
  void *v223;
  __int128 v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  _QWORD v228[2];
  void *v229;
  __int128 v230;
  uint64_t v231;
  _BYTE *v232;
  _BYTE v233[96];
  void *v234;
  __int128 v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  void *v239;
  __int128 v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  void *v244;
  __int128 v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  void *v249;
  __int128 v250;
  uint64_t v251;
  _BYTE *v252;
  _BYTE v253[96];
  void *v254;
  __int128 v255;
  uint64_t v256;
  _BYTE *v257;
  _BYTE v258[128];
  void *v259;
  __int128 v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE v263[128];
  void *v264;
  __int128 v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  _QWORD v269[2];
  void *v270;
  __int128 v271;
  uint64_t v272;
  _BYTE *v273;
  _BYTE v274[96];
  void *v275;
  __int128 v276;
  uint64_t v277;
  _BYTE *v278;
  _BYTE v279[128];
  void *v280;
  __int128 v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  void *v285;
  __int128 v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  void *v290;
  __int128 v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  void *v295;
  __int128 v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD v299[12];
  void *v300;
  __int128 v301;
  uint64_t v302;
  _BYTE *v303;
  _BYTE v304[128];
  _BYTE v305[72];
  __int128 v306;
  void *v307;
  __int128 v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE v311[96];
  void *v312;
  __int128 v313;
  uint64_t v314;
  _BYTE *v315;
  _BYTE v316[128];
  void *v317;
  __int128 v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  __int128 v322;
  void *v323;
  __int128 v324;
  uint64_t v325;
  _BYTE *v326;
  _BYTE v327[96];
  void *v328;
  __int128 v329;
  uint64_t v330;
  _BYTE *v331;
  _BYTE v332[128];
  void *v333;
  int v334;
  int v335;
  int v336;
  int v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  void *v341;
  __int128 v342;
  uint64_t v343;
  _BYTE *v344;
  _BYTE v345[96];
  _BYTE v346[72];
  double v347;
  void *v348;
  __int128 v349;
  uint64_t v350;
  _BYTE *v351;
  _BYTE v352[144];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = v2;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15))
  {
    return 0xFFFFFFFFLL;
  }
  v18 = *(_DWORD *)(v15 + 20);
  result = 0xFFFFFFFFLL;
  if (*(_DWORD *)(v12 + 8) == v18 && *(_DWORD *)(v12 + 12) == 1)
  {
    v20 = v12;
    v21 = v14;
    v22 = *(unsigned int *)(v15 + 16);
    v111 = *(unsigned int (**)(__int128 *, double *, void **, uint64_t, uint64_t, void **, void **, void **))(v15 + 24);
    v23 = *(unsigned __int8 *)(v15 + 208);
    v106 = (_OWORD *)v21;
    v108 = (_OWORD *)(v15 + 224);
    v24 = CNTimeSpan::operator-(v21, (_QWORD *)(v15 + 224), v16, v17);
    v26 = v25 + (double)v24;
    if (fabs(v26) >= 2.22044605e-16)
    {
      v103 = v6;
      v31 = 1.0;
      v32 = 0.0;
      if (v26 < 0.0)
        v32 = -1.0;
      if (v26 <= 0.0)
        v31 = v32;
      v33 = vcvtpd_s64_f64(fabs(v26 / *(double *)(v15 + 48)));
      v347 = v31;
      if (v33 <= 1)
        v33 = 1;
      v107 = v33;
      v34 = (double)v33;
      v104 = v15;
      v105 = v15 + 240;
      sub_18D1EBD1C((uint64_t)v346, v15 + 240);
      v350 = 0x400000004;
      v348 = &unk_1E25C7FA0;
      if (v23)
      {
        v351 = v352;
        LODWORD(v349) = v22;
        DWORD1(v349) = v22;
        DWORD2(v349) = v22 * v22;
        HIDWORD(v349) = v22;
        sub_18D04BE88((uint64_t)&v348, 0.0);
        if ((int)v22 >= 1)
        {
          v35 = 0;
          v36 = HIDWORD(v349) + 1;
          v37 = v351;
          v38 = v22;
          do
          {
            *(_QWORD *)&v37[8 * v35] = 0x3FF0000000000000;
            v35 += v36;
            --v38;
          }
          while (v38);
        }
        v343 = 0x300000004;
        v341 = &unk_1E25C7F70;
        v344 = v345;
        *(_QWORD *)&v342 = __PAIR64__(v18, v22);
        DWORD2(v342) = v18 * v22;
        HIDWORD(v342) = v22;
        sub_18D04BE88((uint64_t)&v341, 0.0);
      }
      else
      {
        v349 = xmmword_18D313080;
        v351 = v352;
        v343 = 0x300000004;
        v341 = &unk_1E25C7F70;
        v342 = xmmword_18D3130A0;
        v344 = v345;
      }
      v39 = v20;
      v40 = v26 / v34;
      v338 = 0x100000004;
      v333 = &unk_1E25C7E50;
      v339 = &v340;
      v334 = v22;
      v335 = 1;
      v336 = v22;
      v337 = v22;
      sub_18D04BE88((uint64_t)&v333, 0.0);
      v330 = 0x400000004;
      v328 = &unk_1E25C7FA0;
      if (v23)
      {
        v331 = v332;
        LODWORD(v329) = v22;
        DWORD1(v329) = v22;
        DWORD2(v329) = v22 * v22;
        HIDWORD(v329) = v22;
        sub_18D04BE88((uint64_t)&v328, 0.0);
        v325 = 0x300000004;
        v323 = &unk_1E25C7F70;
        v326 = v327;
        *(_QWORD *)&v324 = __PAIR64__(v18, v22);
        DWORD2(v324) = v18 * v22;
        HIDWORD(v324) = v22;
        sub_18D04BE88((uint64_t)&v323, 0.0);
      }
      else
      {
        v329 = xmmword_18D313080;
        v331 = v332;
        v325 = 0x300000004;
        v323 = &unk_1E25C7F70;
        v324 = xmmword_18D3130A0;
        v326 = v327;
      }
      v42.n128_u64[1] = 0x40000000CLL;
      v43 = 1;
      v44 = v23;
      v110 = v10;
      while (1)
      {
        v42.n128_f64[0] = v40 * (double)(v43 - 1);
        *(_QWORD *)&v313 = 0;
        v312 = 0;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v312, 0, (int8x16_t)v42, v41);
        *(_QWORD *)&v322 = CNTimeSpan::operator+((uint64_t)v108, &v312, v45, v46);
        *((_QWORD *)&v322 + 1) = v47;
        v319 = 0x100000004;
        v317 = &unk_1E25C7E50;
        v318 = xmmword_18D313090;
        v320 = &v321;
        sub_18D053FA4((uint64_t)v346, (uint64_t)&v333, (uint64_t)&v317);
        v314 = 0x400000004;
        v312 = &unk_1E25C7FA0;
        v313 = xmmword_18D313080;
        v315 = v316;
        if (v44)
        {
          sub_18D053FA4((uint64_t)&v348, (uint64_t)&v328, (uint64_t)&v312);
          v309 = 0x300000004;
          v307 = &unk_1E25C7F70;
          v308 = xmmword_18D3130A0;
          v310 = v311;
          sub_18D053FA4((uint64_t)&v341, (uint64_t)&v323, (uint64_t)&v307);
          v306 = v322;
          sub_18D1EBD1C((uint64_t)v305, (uint64_t)&v317);
          sub_18D1EBE50((uint64_t)&v300, (uint64_t)&v312);
          v297 = 0x300000004;
          v295 = &unk_1E25C7F70;
          *(_QWORD *)&v296 = v308;
          v48 = (DWORD1(v308) * v308);
          DWORD2(v296) = DWORD1(v308) * v308;
          HIDWORD(v296) = v308;
          v298 = v299;
          if (v308 > 4)
          {
            v101 = 616;
            v102 = "this->max_num_rows_ >= A.num_rows_";
            goto LABEL_76;
          }
          if (DWORD1(v308) >= 4)
          {
            v101 = 617;
            v102 = "this->max_num_cols_ >= A.num_cols_";
LABEL_76:
            __assert_rtn("CNMatrix", "cnmatrix.h", v101, v102);
          }
          v49 = DWORD2(v308);
          if (SDWORD2(v308) > 3)
          {
            v55 = v310;
            v56 = (DWORD2(v308) - 1) >> 1;
            v57 = (__int128 *)v310;
            v58 = v299;
            v50 = xmmword_18D3130A0;
            v51 = xmmword_18D313080;
            do
            {
              v59 = *v57++;
              *v58++ = v59;
              --v56;
            }
            while (v56);
            *(_OWORD *)&v299[v49 - 2] = *(_OWORD *)&v55[8 * (v49 - 2)];
          }
          else
          {
            v50 = xmmword_18D3130A0;
            v51 = xmmword_18D313080;
            if ((int)v48 >= 1)
            {
              v52 = (uint64_t *)v310;
              v53 = v299;
              do
              {
                v54 = *v52++;
                *v53++ = v54;
                --v48;
              }
              while (v48);
            }
          }
        }
        else
        {
          v309 = 0x300000004;
          v307 = &unk_1E25C7F70;
          v308 = xmmword_18D3130A0;
          v310 = v311;
          v306 = v322;
          sub_18D1EBD1C((uint64_t)v305, (uint64_t)&v317);
          v50 = xmmword_18D3130A0;
          v302 = 0x400000004;
          v300 = &unk_1E25C7FA0;
          v51 = xmmword_18D313080;
          v301 = xmmword_18D313080;
          v303 = v304;
          v297 = 0x300000004;
          v295 = &unk_1E25C7F70;
          v296 = xmmword_18D3130A0;
          v298 = v299;
        }
        v292 = 0x100000004;
        v290 = &unk_1E25C7E50;
        v291 = xmmword_18D313090;
        v293 = &v294;
        v287 = 0x400000004;
        v285 = &unk_1E25C7FA0;
        v286 = v51;
        v288 = &v289;
        v282 = 0x300000004;
        v280 = &unk_1E25C7F70;
        v281 = v50;
        v283 = &v284;
        if (v111(&v306, &v347, (void **)v305, v39, v10, &v290, &v285, &v280))
          return 0xFFFFFFFFLL;
        v277 = 0x400000004;
        v275 = &unk_1E25C7FA0;
        v276 = xmmword_18D313080;
        v278 = v279;
        v109 = v43;
        if (v44)
        {
          sub_18D053B2C((uint64_t)&v285, (uint64_t)&v300, (uint64_t)&v275);
          v261 = 0x300000004;
          v259 = &unk_1E25C7F70;
          v260 = xmmword_18D3130A0;
          v262 = v263;
          sub_18D053B2C((uint64_t)&v285, (uint64_t)&v295, (uint64_t)&v259);
          v272 = 0x300000004;
          v270 = &unk_1E25C7F70;
          v271 = xmmword_18D3130A0;
          v273 = v274;
          v61 = (int8x16_t)sub_18D053FA4((uint64_t)&v259, (uint64_t)&v280, (uint64_t)&v270);
        }
        else
        {
          v272 = 0x300000004;
          v270 = &unk_1E25C7F70;
          v61.i64[1] = 0x40000000CLL;
          v271 = xmmword_18D3130A0;
          v273 = v274;
        }
        *(_QWORD *)&v260 = 0;
        v259 = 0;
        *(double *)v61.i64 = v40 * 0.5;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v259, 0, v61, v60);
        v269[0] = CNTimeSpan::operator+((uint64_t)&v322, &v259, v62, v63);
        v269[1] = v64;
        v261 = 0x100000004;
        v259 = &unk_1E25C7E50;
        *(_QWORD *)&v65.f64[1] = 0x400000004;
        v260 = xmmword_18D313090;
        v262 = v263;
        v65.f64[0] = v40 * 0.5;
        sub_18D064EF4((uint64_t)&v290, (uint64_t)&v259, v65);
        v266 = 0x100000004;
        v264 = &unk_1E25C7E50;
        v265 = xmmword_18D313090;
        v267 = &v268;
        sub_18D053FA4((uint64_t)&v317, (uint64_t)&v259, (uint64_t)&v264);
        if (v44)
        {
          v256 = 0x400000004;
          v254 = &unk_1E25C7FA0;
          *(_QWORD *)&v66.f64[1] = 0x400000010;
          v255 = xmmword_18D313080;
          v257 = v258;
          v66.f64[0] = v40 * 0.5;
          sub_18D064EF4((uint64_t)&v275, (uint64_t)&v254, v66);
          v261 = 0x400000004;
          v259 = &unk_1E25C7FA0;
          v260 = xmmword_18D313080;
          v262 = v263;
          sub_18D053FA4((uint64_t)&v312, (uint64_t)&v254, (uint64_t)&v259);
          v256 = 0x300000004;
          v254 = &unk_1E25C7F70;
          *(_QWORD *)&v67.f64[1] = 0x40000000CLL;
          v255 = xmmword_18D3130A0;
          v257 = v258;
          v67.f64[0] = v40 * 0.5;
          sub_18D064EF4((uint64_t)&v270, (uint64_t)&v254, v67);
          v251 = 0x300000004;
          v249 = &unk_1E25C7F70;
          v250 = xmmword_18D3130A0;
          v252 = v253;
          sub_18D053FA4((uint64_t)&v307, (uint64_t)&v254, (uint64_t)&v249);
          v68 = xmmword_18D313080;
          v69 = xmmword_18D3130A0;
        }
        else
        {
          v261 = 0x400000004;
          v259 = &unk_1E25C7FA0;
          v68 = xmmword_18D313080;
          v260 = xmmword_18D313080;
          v262 = v263;
          v251 = 0x300000004;
          v249 = &unk_1E25C7F70;
          v69 = xmmword_18D3130A0;
          v250 = xmmword_18D3130A0;
          v252 = v253;
        }
        v246 = 0x100000004;
        v244 = &unk_1E25C7E50;
        v245 = xmmword_18D313090;
        v247 = &v248;
        v256 = 0x400000004;
        v254 = &unk_1E25C7FA0;
        v255 = v68;
        v257 = v258;
        v241 = 0x300000004;
        v239 = &unk_1E25C7F70;
        v240 = v69;
        v242 = &v243;
        if (v111((__int128 *)v269, &v347, &v264, v20, v10, &v244, &v254, &v239))
          return 0xFFFFFFFFLL;
        v236 = 0x400000004;
        v234 = &unk_1E25C7FA0;
        v235 = xmmword_18D313080;
        v237 = &v238;
        if (v44)
        {
          sub_18D053B2C((uint64_t)&v254, (uint64_t)&v259, (uint64_t)&v234);
          v220 = 0x300000004;
          v218 = &unk_1E25C7F70;
          v219 = xmmword_18D3130A0;
          v221 = v222;
          sub_18D053B2C((uint64_t)&v254, (uint64_t)&v249, (uint64_t)&v218);
          v231 = 0x300000004;
          v229 = &unk_1E25C7F70;
          v230 = xmmword_18D3130A0;
          v232 = v233;
          v71 = (int8x16_t)sub_18D053FA4((uint64_t)&v218, (uint64_t)&v239, (uint64_t)&v229);
        }
        else
        {
          v231 = 0x300000004;
          v229 = &unk_1E25C7F70;
          v71.i64[1] = 0x40000000CLL;
          v230 = xmmword_18D3130A0;
          v232 = v233;
        }
        *(_QWORD *)&v219 = 0;
        v218 = 0;
        *(double *)v71.i64 = v40 * 0.5;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v218, 0, v71, v70);
        v228[0] = CNTimeSpan::operator+((uint64_t)&v322, &v218, v72, v73);
        v228[1] = v74;
        v220 = 0x100000004;
        v218 = &unk_1E25C7E50;
        *(_QWORD *)&v75.f64[1] = 0x400000004;
        v219 = xmmword_18D313090;
        v221 = v222;
        v75.f64[0] = v40 * 0.5;
        sub_18D064EF4((uint64_t)&v244, (uint64_t)&v218, v75);
        v225 = 0x100000004;
        v223 = &unk_1E25C7E50;
        v224 = xmmword_18D313090;
        v226 = &v227;
        sub_18D053FA4((uint64_t)&v317, (uint64_t)&v218, (uint64_t)&v223);
        if (v44)
        {
          v215 = 0x400000004;
          v213 = &unk_1E25C7FA0;
          *(_QWORD *)&v76.f64[1] = 0x400000010;
          v214 = xmmword_18D313080;
          v216 = v217;
          v76.f64[0] = v40 * 0.5;
          sub_18D064EF4((uint64_t)&v234, (uint64_t)&v213, v76);
          v220 = 0x400000004;
          v218 = &unk_1E25C7FA0;
          v219 = xmmword_18D313080;
          v221 = v222;
          sub_18D053FA4((uint64_t)&v312, (uint64_t)&v213, (uint64_t)&v218);
          v215 = 0x300000004;
          v213 = &unk_1E25C7F70;
          *(_QWORD *)&v77.f64[1] = 0x40000000CLL;
          v214 = xmmword_18D3130A0;
          v216 = v217;
          v77.f64[0] = v40 * 0.5;
          sub_18D064EF4((uint64_t)&v229, (uint64_t)&v213, v77);
          v210 = 0x300000004;
          v208 = &unk_1E25C7F70;
          v209 = xmmword_18D3130A0;
          v211 = v212;
          sub_18D053FA4((uint64_t)&v307, (uint64_t)&v213, (uint64_t)&v208);
          v78 = xmmword_18D313080;
          v79 = xmmword_18D3130A0;
        }
        else
        {
          v220 = 0x400000004;
          v218 = &unk_1E25C7FA0;
          v78 = xmmword_18D313080;
          v219 = xmmword_18D313080;
          v221 = v222;
          v210 = 0x300000004;
          v208 = &unk_1E25C7F70;
          v79 = xmmword_18D3130A0;
          v209 = xmmword_18D3130A0;
          v211 = v212;
        }
        v205 = 0x100000004;
        v203 = &unk_1E25C7E50;
        v204 = xmmword_18D313090;
        v206 = &v207;
        v215 = 0x400000004;
        v213 = &unk_1E25C7FA0;
        v214 = v78;
        v216 = v217;
        v200 = 0x300000004;
        v198 = &unk_1E25C7F70;
        v199 = v79;
        v201 = &v202;
        if (v111((__int128 *)v228, &v347, &v223, v20, v10, &v203, &v213, &v198))
          return 0xFFFFFFFFLL;
        v195 = 0x400000004;
        v193 = &unk_1E25C7FA0;
        v194 = xmmword_18D313080;
        v196 = &v197;
        if (v44)
        {
          sub_18D053B2C((uint64_t)&v213, (uint64_t)&v218, (uint64_t)&v193);
          v179 = 0x300000004;
          v177 = &unk_1E25C7F70;
          v178 = xmmword_18D3130A0;
          v180 = v181;
          sub_18D053B2C((uint64_t)&v213, (uint64_t)&v208, (uint64_t)&v177);
          v190 = 0x300000004;
          v188 = &unk_1E25C7F70;
          v189 = xmmword_18D3130A0;
          v191 = v192;
          v81 = (int8x16_t)sub_18D053FA4((uint64_t)&v177, (uint64_t)&v198, (uint64_t)&v188);
        }
        else
        {
          v190 = 0x300000004;
          v188 = &unk_1E25C7F70;
          v81.i64[1] = 0x40000000CLL;
          v189 = xmmword_18D3130A0;
          v191 = v192;
        }
        *(_QWORD *)&v178 = 0;
        v177 = 0;
        *(double *)v81.i64 = v40;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v177, 0, v81, v80);
        v187[0] = CNTimeSpan::operator+((uint64_t)&v322, &v177, v82, v83);
        v187[1] = v84;
        v179 = 0x100000004;
        v177 = &unk_1E25C7E50;
        *(_QWORD *)&v85.f64[1] = 0x400000004;
        v178 = xmmword_18D313090;
        v180 = v181;
        v85.f64[0] = v40;
        sub_18D064EF4((uint64_t)&v203, (uint64_t)&v177, v85);
        v184 = 0x100000004;
        v182 = &unk_1E25C7E50;
        v183 = xmmword_18D313090;
        v185 = &v186;
        sub_18D053FA4((uint64_t)&v317, (uint64_t)&v177, (uint64_t)&v182);
        if (v44)
        {
          v174 = 0x400000004;
          v172 = &unk_1E25C7FA0;
          *(_QWORD *)&v86.f64[1] = 0x400000010;
          v173 = xmmword_18D313080;
          v175 = v176;
          v86.f64[0] = v40;
          sub_18D064EF4((uint64_t)&v193, (uint64_t)&v172, v86);
          v179 = 0x400000004;
          v177 = &unk_1E25C7FA0;
          v178 = xmmword_18D313080;
          v180 = v181;
          sub_18D053FA4((uint64_t)&v312, (uint64_t)&v172, (uint64_t)&v177);
          v174 = 0x300000004;
          v172 = &unk_1E25C7F70;
          *(_QWORD *)&v87.f64[1] = 0x40000000CLL;
          v173 = xmmword_18D3130A0;
          v175 = v176;
          v87.f64[0] = v40;
          sub_18D064EF4((uint64_t)&v188, (uint64_t)&v172, v87);
          v169 = 0x300000004;
          v167 = &unk_1E25C7F70;
          v168 = xmmword_18D3130A0;
          v170 = v171;
          sub_18D053FA4((uint64_t)&v307, (uint64_t)&v172, (uint64_t)&v167);
          v88 = xmmword_18D313080;
          v89 = xmmword_18D3130A0;
        }
        else
        {
          v179 = 0x400000004;
          v177 = &unk_1E25C7FA0;
          v88 = xmmword_18D313080;
          v178 = xmmword_18D313080;
          v180 = v181;
          v169 = 0x300000004;
          v167 = &unk_1E25C7F70;
          v89 = xmmword_18D3130A0;
          v168 = xmmword_18D3130A0;
          v170 = v171;
        }
        v164 = 0x100000004;
        v162 = &unk_1E25C7E50;
        v163 = xmmword_18D313090;
        v165 = &v166;
        v174 = 0x400000004;
        v172 = &unk_1E25C7FA0;
        v173 = v88;
        v175 = v176;
        v159 = 0x300000004;
        v157 = &unk_1E25C7F70;
        v158 = v89;
        v160 = &v161;
        if (v111((__int128 *)v187, &v347, &v182, v20, v110, &v162, &v172, &v157))
          return 0xFFFFFFFFLL;
        if (v44)
        {
          sub_18D1EBC48((uint64_t)&v152, (uint64_t)&v172, (uint64_t)&v177);
          sub_18D1EBCB4((uint64_t)&v172, (uint64_t)&v167, (uint64_t)&v142);
          v149 = 0x300000004;
          v147 = &unk_1E25C7F70;
          v148 = xmmword_18D3130A0;
          v150 = v151;
          sub_18D053FA4((uint64_t)&v142, (uint64_t)&v157, (uint64_t)&v147);
        }
        else
        {
          v154 = 0x400000004;
          v152 = &unk_1E25C7FA0;
          v153 = xmmword_18D313080;
          v155 = &v156;
          v149 = 0x300000004;
          v147 = &unk_1E25C7F70;
          v148 = xmmword_18D3130A0;
          v150 = v151;
        }
        v119 = 0x100000004;
        v117 = &unk_1E25C7E50;
        *(_QWORD *)&v90.f64[1] = 0x400000004;
        v118 = xmmword_18D313090;
        v120 = v121;
        v90.f64[0] = 2.0;
        sub_18D064EF4((uint64_t)&v244, (uint64_t)&v117, v90);
        v124 = 0x100000004;
        v122 = &unk_1E25C7E50;
        v123 = xmmword_18D313090;
        v125 = v126;
        sub_18D053FA4((uint64_t)&v290, (uint64_t)&v117, (uint64_t)&v122);
        v114 = 0x100000004;
        v112 = &unk_1E25C7E50;
        *(_QWORD *)&v91.f64[1] = 0x400000004;
        v113 = xmmword_18D313090;
        v115 = v116;
        v91.f64[0] = 2.0;
        sub_18D064EF4((uint64_t)&v203, (uint64_t)&v112, v91);
        v129 = 0x100000004;
        v127 = &unk_1E25C7E50;
        v128 = xmmword_18D313090;
        v130 = v131;
        sub_18D053FA4((uint64_t)&v122, (uint64_t)&v112, (uint64_t)&v127);
        v134 = 0x100000004;
        v132 = &unk_1E25C7E50;
        v133 = xmmword_18D313090;
        v135 = v136;
        sub_18D053FA4((uint64_t)&v127, (uint64_t)&v162, (uint64_t)&v132);
        v139 = 0x100000004;
        v137 = &unk_1E25C7E50;
        *(_QWORD *)&v92.f64[1] = 0x400000004;
        v138 = xmmword_18D313090;
        v140 = v141;
        v92.f64[0] = v40 / 6.0;
        sub_18D064EF4((uint64_t)&v132, (uint64_t)&v137, v92);
        v144 = 0x100000004;
        v142 = &unk_1E25C7E50;
        v143 = xmmword_18D313090;
        v145 = v146;
        sub_18D053FA4((uint64_t)&v333, (uint64_t)&v137, (uint64_t)&v142);
        v42 = sub_18D053AA8((uint64_t)&v333, (uint64_t)&v142);
        if (v23)
        {
          v119 = 0x400000004;
          v117 = &unk_1E25C7FA0;
          *(_QWORD *)&v93.f64[1] = 0x400000010;
          v118 = xmmword_18D313080;
          v120 = v121;
          v93.f64[0] = 2.0;
          sub_18D064EF4((uint64_t)&v234, (uint64_t)&v117, v93);
          v124 = 0x400000004;
          v122 = &unk_1E25C7FA0;
          v123 = xmmword_18D313080;
          v125 = v126;
          sub_18D053FA4((uint64_t)&v275, (uint64_t)&v117, (uint64_t)&v122);
          v114 = 0x400000004;
          v112 = &unk_1E25C7FA0;
          *(_QWORD *)&v94.f64[1] = 0x400000010;
          v113 = xmmword_18D313080;
          v115 = v116;
          v94.f64[0] = 2.0;
          sub_18D064EF4((uint64_t)&v193, (uint64_t)&v112, v94);
          v129 = 0x400000004;
          v127 = &unk_1E25C7FA0;
          v128 = xmmword_18D313080;
          v130 = v131;
          sub_18D053FA4((uint64_t)&v122, (uint64_t)&v112, (uint64_t)&v127);
          v134 = 0x400000004;
          v132 = &unk_1E25C7FA0;
          v133 = xmmword_18D313080;
          v135 = v136;
          sub_18D053FA4((uint64_t)&v127, (uint64_t)&v152, (uint64_t)&v132);
          v139 = 0x400000004;
          v137 = &unk_1E25C7FA0;
          *(_QWORD *)&v95.f64[1] = 0x400000010;
          v138 = xmmword_18D313080;
          v140 = v141;
          v95.f64[0] = v40 / 6.0;
          sub_18D064EF4((uint64_t)&v132, (uint64_t)&v137, v95);
          v144 = 0x400000004;
          v142 = &unk_1E25C7FA0;
          v143 = xmmword_18D313080;
          v145 = v146;
          sub_18D053FA4((uint64_t)&v328, (uint64_t)&v137, (uint64_t)&v142);
          sub_18D053AA8((uint64_t)&v328, (uint64_t)&v142);
          v119 = 0x300000004;
          v117 = &unk_1E25C7F70;
          *(_QWORD *)&v96.f64[1] = 0x40000000CLL;
          v118 = xmmword_18D3130A0;
          v120 = v121;
          v96.f64[0] = 2.0;
          sub_18D064EF4((uint64_t)&v229, (uint64_t)&v117, v96);
          v124 = 0x300000004;
          v122 = &unk_1E25C7F70;
          v123 = xmmword_18D3130A0;
          v125 = v126;
          sub_18D053FA4((uint64_t)&v270, (uint64_t)&v117, (uint64_t)&v122);
          v114 = 0x300000004;
          v112 = &unk_1E25C7F70;
          *(_QWORD *)&v97.f64[1] = 0x40000000CLL;
          v113 = xmmword_18D3130A0;
          v115 = v116;
          v97.f64[0] = 2.0;
          sub_18D064EF4((uint64_t)&v188, (uint64_t)&v112, v97);
          v129 = 0x300000004;
          v127 = &unk_1E25C7F70;
          v128 = xmmword_18D3130A0;
          v130 = v131;
          sub_18D053FA4((uint64_t)&v122, (uint64_t)&v112, (uint64_t)&v127);
          v134 = 0x300000004;
          v132 = &unk_1E25C7F70;
          v133 = xmmword_18D3130A0;
          v135 = v136;
          sub_18D053FA4((uint64_t)&v127, (uint64_t)&v147, (uint64_t)&v132);
          v139 = 0x300000004;
          v137 = &unk_1E25C7F70;
          *(_QWORD *)&v98.f64[1] = 0x40000000CLL;
          v138 = xmmword_18D3130A0;
          v140 = v141;
          v98.f64[0] = v40 / 6.0;
          sub_18D064EF4((uint64_t)&v132, (uint64_t)&v137, v98);
          v144 = 0x300000004;
          v142 = &unk_1E25C7F70;
          v143 = xmmword_18D3130A0;
          v145 = v146;
          sub_18D053FA4((uint64_t)&v323, (uint64_t)&v137, (uint64_t)&v142);
          v42 = sub_18D053AA8((uint64_t)&v323, (uint64_t)&v142);
        }
        ++v43;
        v44 = v23;
        v10 = v110;
        v39 = v20;
        if (v109 == v107)
        {
          *(double *)(v104 + 40) = v40;
          *v108 = *v106;
          v314 = 0x100000004;
          v312 = &unk_1E25C7E50;
          v313 = xmmword_18D313090;
          v315 = v316;
          sub_18D053FA4(v105, (uint64_t)&v333, (uint64_t)&v312);
          sub_18D053AA8(v105, (uint64_t)&v312);
          if (v23)
          {
            v302 = 0x400000004;
            v300 = &unk_1E25C7FA0;
            v301 = xmmword_18D313080;
            v303 = v304;
            sub_18D053FA4((uint64_t)&v348, (uint64_t)&v328, (uint64_t)&v300);
            sub_18D1EBC48((uint64_t)&v312, (uint64_t)&v300, v104 + 312);
            sub_18D053AA8(v104 + 312, (uint64_t)&v312);
            v314 = 0x400000004;
            v312 = &unk_1E25C7FA0;
            v313 = xmmword_18D313080;
            v315 = v316;
            sub_18D053FA4((uint64_t)&v348, (uint64_t)&v328, (uint64_t)&v312);
            sub_18D1EBCB4((uint64_t)&v312, v104 + 480, (uint64_t)&v285);
            v277 = 0x300000004;
            v275 = &unk_1E25C7F70;
            v276 = xmmword_18D3130A0;
            v278 = v279;
            sub_18D053FA4((uint64_t)&v341, (uint64_t)&v323, (uint64_t)&v275);
            v302 = 0x300000004;
            v300 = &unk_1E25C7F70;
            v301 = xmmword_18D3130A0;
            v303 = v304;
            sub_18D053FA4((uint64_t)&v285, (uint64_t)&v275, (uint64_t)&v300);
            sub_18D053AA8(v104 + 480, (uint64_t)&v300);
            sub_18D053AA8(v8, v105);
            v314 = 0x400000004;
            v312 = &unk_1E25C7FA0;
            v313 = xmmword_18D313080;
            v315 = v316;
            sub_18D053FA4((uint64_t)&v348, (uint64_t)&v328, (uint64_t)&v312);
            sub_18D053AA8(v103, (uint64_t)&v312);
            v314 = 0x300000004;
            v312 = &unk_1E25C7F70;
            v313 = xmmword_18D3130A0;
            v315 = v316;
            sub_18D053FA4((uint64_t)&v341, (uint64_t)&v323, (uint64_t)&v312);
            v99 = &v312;
            v100 = v4;
          }
          else
          {
            v100 = v8;
            v99 = (void **)v105;
          }
          sub_18D053AA8(v100, (uint64_t)v99);
          return 0;
        }
      }
    }
    sub_18D053AA8(v8, v15 + 240);
    if (v23)
    {
      v350 = 0x400000004;
      v348 = &unk_1E25C7FA0;
      v351 = v352;
      LODWORD(v349) = v22;
      DWORD1(v349) = v22;
      DWORD2(v349) = v22 * v22;
      HIDWORD(v349) = v22;
      sub_18D04BE88((uint64_t)&v348, 0.0);
      if ((int)v22 >= 1)
      {
        v27 = 0;
        v28 = HIDWORD(v349) + 1;
        v29 = v351;
        v30 = v22;
        do
        {
          *(_QWORD *)&v29[8 * v27] = 0x3FF0000000000000;
          v27 += v28;
          --v30;
        }
        while (v30);
      }
      sub_18D053AA8(v6, (uint64_t)&v348);
      v350 = 0x300000004;
      v348 = &unk_1E25C7F70;
      v351 = v352;
      *(_QWORD *)&v349 = __PAIR64__(v18, v22);
      DWORD2(v349) = v18 * v22;
      HIDWORD(v349) = v22;
      sub_18D04BE88((uint64_t)&v348, 0.0);
      sub_18D053AA8(v4, (uint64_t)&v348);
    }
    result = 0;
    *(_QWORD *)(v15 + 40) = 0;
  }
  return result;
}

uint64_t sub_18D1EBC38(uint64_t result)
{
  *(_BYTE *)(result + 216) = 0;
  return result;
}

void sub_18D1EBC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)a1 = &unk_1E25C7FA0;
  *(_OWORD *)(a1 + 8) = xmmword_18D313080;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D1EBCA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D1EBCB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x300000004;
  *(_QWORD *)a3 = &unk_1E25C7F70;
  *(_OWORD *)(a3 + 8) = xmmword_18D3130A0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D1EBD08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D1EBD1C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x100000004;
  *(_QWORD *)(a1 + 24) = 0x100000004;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C7E50;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 4u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1EBE3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D1EBE50(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x400000004;
  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C7FA0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 4u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 5u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D1EBF6C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1EBF80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 24) = 0x100000004;
  *(_QWORD *)a2 = &unk_1E25C7E50;
  *(_OWORD *)(a2 + 8) = xmmword_18D313090;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v5 = 0x100000004;
  v3 = &unk_1E25C7EB0;
  v4 = xmmword_18D313090;
  v6 = &v7;
  *(_QWORD *)&result = sub_18D1C2074(a1, a2, (uint64_t)&v3).n128_u64[0];
  return result;
}

void sub_18D1EC004(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D1EC018@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 24) = 0x200000004;
  *(_QWORD *)a2 = &unk_1E25C7EE0;
  *(_OWORD *)(a2 + 8) = xmmword_18D31CD60;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v5 = 0x200000004;
  v3 = &unk_1E25C7F40;
  v4 = xmmword_18D31CD60;
  v6 = &v7;
  *(_QWORD *)&result = sub_18D1C2074(a1, a2, (uint64_t)&v3).n128_u64[0];
  return result;
}

void sub_18D1EC09C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D1EC0B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  *(_QWORD *)(a3 + 24) = 0x200000004;
  *(_QWORD *)a3 = &unk_1E25C7EE0;
  *(_OWORD *)(a3 + 8) = xmmword_18D31CD60;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  v6 = 0x200000004;
  v4 = &unk_1E25C7F40;
  v5 = xmmword_18D31CD60;
  v7 = &v8;
  return sub_18D04C758(a1, a2, a3, (uint64_t)&v4);
}

uint64_t sub_18D1EC128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x200000004;
  *(_QWORD *)a3 = &unk_1E25C7EE0;
  *(_OWORD *)(a3 + 8) = xmmword_18D31CD60;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  return sub_18D05449C(a1, a2, a3);
}

void sub_18D1EC17C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D1EC190(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D1EC1A4(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1EC1B8(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1EC1DC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1EC1E8(uint64_t a1)
{
  char v1[4];

  sub_18D159878(a1, v1);
}

_QWORD *sub_18D1EC208(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D1EC21C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1EC240(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1EC24C(uint64_t a1)
{
  char v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D1EC298(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D1EC2BC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D1EC2C8(uint64_t a1)
{
  char v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

uint64_t raven::RavenSupervisor::RavenSupervisor(raven::RavenSupervisor *this)
{
  char v2;

  v2 = 1;
  return raven::RavenSupervisor::RavenSupervisor((uint64_t)this, &v2);
}

{
  char v2;

  v2 = 1;
  return raven::RavenSupervisor::RavenSupervisor((uint64_t)this, &v2);
}

uint64_t raven::RavenSupervisor::RavenSupervisor(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  _WORD *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  cnframework::ActiveObjectBase *v25;
  _QWORD *v26;
  _QWORD *v27;
  int64x2_t v28;
  _BYTE __str[2425];

  v4 = cnframework::Supervisor::Supervisor(a1, a2);
  *(_QWORD *)v4 = &off_1E25C2578;
  *(_BYTE *)(v4 + 817) = 0;
  *(_OWORD *)(v4 + 824) = 0u;
  sub_18D209D20(v4 + 840);
  sub_18D209D20(a1 + 4672);
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 8504, a2);
  v22 = (_QWORD *)(a1 + 169640);
  v23 = (_QWORD *)(a1 + 165200);
  v24 = (_QWORD *)(a1 + 82472);
  *(_QWORD *)(a1 + 8504) = &off_1E25C4970;
  *(_QWORD *)(a1 + 9000) = &unk_1E25B9000;
  v25 = (cnframework::ActiveObjectBase *)(a1 + 76024);
  v27 = (_QWORD *)(a1 + 53832);
  *(_BYTE *)(a1 + 8984) = 0;
  v5 = (_WORD *)(a1 + 25848);
  *(_QWORD *)(a1 + 8992) = 0;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  v26 = (_QWORD *)(a1 + 53248);
  v7 = 9048;
  do
  {
    v8 = a1 + v7;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = &unk_1E25C2C38;
    *(int64x2_t *)(v8 + 24) = v6;
    *(_QWORD *)(v8 + 40) = 0x7FF8000000000000;
    v7 += 48;
  }
  while ((_WORD *)(v8 + 48) != v5);
  *(_DWORD *)(a1 + 9008) = 0;
  *(_OWORD *)(a1 + 9016) = 0u;
  *(_OWORD *)(a1 + 9032) = 0u;
  *(_QWORD *)(a1 + 25912) = 0;
  *(_OWORD *)(a1 + 25864) = 0u;
  *(_OWORD *)(a1 + 25880) = 0u;
  *(_OWORD *)(a1 + 25896) = 0u;
  *(_QWORD *)(a1 + 25920) = 0x3FF0000000000000;
  sub_18D1E9CD0(a1 + 25952);
  *(_QWORD *)(a1 + 25952) = &off_1E25B9CA8;
  *(_BYTE *)(a1 + 26168) = 0;
  *v5 = 0;
  *(_OWORD *)(a1 + 26584) = 0u;
  *(_OWORD *)(a1 + 26600) = 0u;
  *(_OWORD *)(a1 + 26616) = 0u;
  *(_BYTE *)(a1 + 8984) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 26632, a2);
  *(_QWORD *)(a1 + 26632) = &unk_1E25C4718;
  *(_BYTE *)(a1 + 27112) = 0;
  *(_QWORD *)(a1 + 27120) = 0;
  *(_BYTE *)(a1 + 27128) = 0;
  *(_BYTE *)(a1 + 27240) = 0;
  *(_BYTE *)(a1 + 27248) = 0;
  *(_BYTE *)(a1 + 27456) = 0;
  *(_BYTE *)(a1 + 27464) = 0;
  *(_BYTE *)(a1 + 27696) = 0;
  *(_BYTE *)(a1 + 27704) = 0;
  *(_BYTE *)(a1 + 27864) = 0;
  *(_BYTE *)(a1 + 27872) = 0;
  *(_BYTE *)(a1 + 28032) = 0;
  *(_BYTE *)(a1 + 28040) = 0;
  *(_QWORD *)(a1 + 28048) = 0;
  *(_QWORD *)(a1 + 28056) = &unk_1E25B8E18;
  *(_QWORD *)(a1 + 28088) = 0x10000000ALL;
  *(_QWORD *)(a1 + 28064) = &unk_1E25C6020;
  *(_QWORD *)(a1 + 28096) = a1 + 28104;
  *(_QWORD *)(a1 + 28208) = 0x10000000ALL;
  *(_QWORD *)(a1 + 28184) = &unk_1E25C6020;
  *(_QWORD *)(a1 + 28216) = a1 + 28224;
  *(_QWORD *)(a1 + 28312) = 0x3DDB7CDFD9D7BDBBLL;
  *(_QWORD *)(a1 + 28072) = 0;
  *(_QWORD *)(a1 + 28080) = 0;
  *(_QWORD *)(a1 + 28192) = 0;
  *(_QWORD *)(a1 + 28200) = 0;
  *(_DWORD *)(a1 + 28304) = 1;
  *(_QWORD *)(a1 + 28320) = 0;
  *(_QWORD *)(a1 + 28328) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 28336) = &unk_1E25C2AB0;
  *(_QWORD *)(a1 + 28344) = 0;
  *(_QWORD *)(a1 + 28352) = 0;
  *(_BYTE *)(a1 + 28360) = 0;
  *(_QWORD *)(a1 + 28368) = 0;
  *(_QWORD *)(a1 + 28376) = 0;
  *(_BYTE *)(a1 + 28384) = 0;
  *(_QWORD *)(a1 + 28392) = 0;
  *(_QWORD *)(a1 + 28400) = 0;
  *(_BYTE *)(a1 + 28408) = 0;
  *(_QWORD *)(a1 + 28424) = 0;
  *(_QWORD *)(a1 + 28416) = 0;
  *(_QWORD *)(a1 + 28432) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 28440) = 0;
  *(_QWORD *)(a1 + 28448) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 28456) = 0u;
  *(_OWORD *)(a1 + 28472) = 0u;
  *(_OWORD *)(a1 + 28488) = 0u;
  *(_OWORD *)(a1 + 28504) = 0u;
  *(_QWORD *)(a1 + 28520) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 28528, a2);
  *(_BYTE *)(a1 + 29008) = 0;
  *(_QWORD *)(a1 + 29064) = 0;
  *(_OWORD *)(a1 + 29016) = 0u;
  *(_OWORD *)(a1 + 29032) = 0u;
  *(_OWORD *)(a1 + 29048) = 0u;
  *(_QWORD *)(a1 + 28528) = &off_1E25C4500;
  *(_OWORD *)(a1 + 29080) = 0u;
  sub_18D0409EC(a1 + 29096);
  raven::RavenConvergenceEstimator::RavenConvergenceEstimator((raven::RavenConvergenceEstimator *)(a1 + 31528));
  *(_BYTE *)(a1 + 29072) = 0;
  *(_QWORD *)(a1 + 29080) = 0;
  *(_QWORD *)(a1 + 29088) = 0xFFF0000000000000;
  sub_18D0409EC((uint64_t)__str);
  memcpy((void *)(a1 + 29104), &__str[8], 0x971uLL);
  sub_18D0778AC(__str, "<Convergence> ");
  std::string::operator=((std::string *)(a1 + 29048), (const std::string *)__str);
  std::string::operator=((std::string *)(a1 + 34040), (const std::string *)__str);
  std::string::operator=((std::string *)(a1 + 35896), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  cnframework::ActiveObjectBase::ActiveObjectBase((uint64_t)v26, a2);
  *v26 = &off_1E25C3988;
  *(_BYTE *)(a1 + 53728) = 0;
  *(_QWORD *)(a1 + 53744) = 0;
  *(_QWORD *)(a1 + 53752) = 0;
  *(_QWORD *)(a1 + 53736) = 0;
  *(int64x2_t *)(a1 + 53760) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_BYTE *)(a1 + 53776) = 0;
  *(_OWORD *)(a1 + 53784) = 0u;
  *(_OWORD *)(a1 + 53800) = 0u;
  *(_OWORD *)(a1 + 53816) = 0u;
  cnframework::ActiveObjectBase::ActiveObjectBase((uint64_t)v27, a2);
  *v27 = &unk_1E25C3EF8;
  *(_BYTE *)(a1 + 54312) = 0;
  *(_QWORD *)(a1 + 54320) = 0;
  *(_BYTE *)(a1 + 54328) = 0;
  *(_BYTE *)(a1 + 54360) = 0;
  *(_BYTE *)(a1 + 54368) = 0;
  *(_BYTE *)(a1 + 54376) = 0;
  *(_BYTE *)(a1 + 54384) = 0;
  *(_BYTE *)(a1 + 54392) = 0;
  *(_BYTE *)(a1 + 54400) = 0;
  *(_BYTE *)(a1 + 54408) = 0;
  *(_BYTE *)(a1 + 54416) = 0;
  *(_BYTE *)(a1 + 54424) = 0;
  *(_BYTE *)(a1 + 54440) = 0;
  *(_BYTE *)(a1 + 54448) = 0;
  *(_BYTE *)(a1 + 54456) = 0;
  *(_QWORD *)(a1 + 54336) = 0;
  *(_QWORD *)(a1 + 54344) = 0;
  *(_BYTE *)(a1 + 54352) = 0;
  *(_QWORD *)(a1 + 54464) = &unk_1E25C7790;
  *(_QWORD *)(a1 + 54488) = 0x100000003;
  *(_QWORD *)(a1 + 54496) = a1 + 54504;
  *(_OWORD *)(a1 + 54472) = xmmword_18D313070;
  sub_18D04BE88(a1 + 54464, 0.0);
  *(_BYTE *)(a1 + 54528) = 0;
  *(_BYTE *)(a1 + 54536) = 0;
  *(_BYTE *)(a1 + 54544) = 0;
  *(_BYTE *)(a1 + 54552) = 0;
  *(_BYTE *)(a1 + 54576) = 0;
  *(_BYTE *)(a1 + 57008) = 0;
  *(_BYTE *)(a1 + 57016) = 0;
  *(_BYTE *)(a1 + 59448) = 0;
  *(_BYTE *)(a1 + 59456) = 0;
  *(_BYTE *)(a1 + 60560) = 0;
  *(_BYTE *)(a1 + 60568) = 0;
  *(_BYTE *)(a1 + 61656) = 0;
  *(_QWORD *)(a1 + 54560) = 0;
  *(_BYTE *)(a1 + 54568) = 0;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 61664));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 62104));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 62544));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 62984));
  *(_QWORD *)(a1 + 63448) = 0x100000003;
  *(_QWORD *)(a1 + 63424) = &unk_1E25C7790;
  *(_QWORD *)(a1 + 63456) = a1 + 63464;
  *(_OWORD *)(a1 + 63432) = xmmword_18D313070;
  sub_18D04BE88(a1 + 63424, 0.0);
  *(_QWORD *)(a1 + 63512) = 0x100000003;
  *(_QWORD *)(a1 + 63488) = &unk_1E25C7790;
  *(_QWORD *)(a1 + 63520) = a1 + 63528;
  *(_OWORD *)(a1 + 63496) = xmmword_18D313070;
  sub_18D04BE88(a1 + 63488, 0.0);
  *(_QWORD *)(a1 + 63552) = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 63576) = 0x300000003;
  *(_QWORD *)(a1 + 63584) = a1 + 63592;
  *(_OWORD *)(a1 + 63560) = xmmword_18D30BB60;
  sub_18D04BE88(a1 + 63552, 0.0);
  *(_BYTE *)(a1 + 63664) = 0;
  *(_BYTE *)(a1 + 63680) = 0;
  *(_BYTE *)(a1 + 63688) = 0;
  *(_BYTE *)(a1 + 63704) = 0;
  *(_QWORD *)(a1 + 63712) = 0x7FF0000000000000;
  *(_OWORD *)(a1 + 63720) = 0u;
  *(_OWORD *)(a1 + 63736) = 0u;
  *(_OWORD *)(a1 + 63752) = 0u;
  *(_QWORD *)(a1 + 63768) = 0x7FF0000000000000;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 63776, a2);
  *(_QWORD *)(a1 + 63776) = &off_1E25C3C58;
  *(_BYTE *)(a1 + 64256) = 0;
  *(_OWORD *)(a1 + 64264) = 0u;
  *(_OWORD *)(a1 + 64280) = 0u;
  *(_OWORD *)(a1 + 64296) = 0u;
  *(_QWORD *)(a1 + 64312) = 0;
  *(int64x2_t *)(a1 + 64320) = vdupq_n_s64(0x3FB999999999999AuLL);
  *(_QWORD *)(a1 + 64336) = 0x3FB999999999999ALL;
  *(_OWORD *)(a1 + 64352) = 0u;
  *(_QWORD *)(a1 + 64344) = 0;
  *(_QWORD *)(a1 + 64368) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 64400) = 0x300000003;
  *(_QWORD *)(a1 + 64376) = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 64384) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 64408) = a1 + 64416;
  *(_QWORD *)(a1 + 64512) = 0x100000003;
  *(_QWORD *)(a1 + 64488) = &unk_1E25C7790;
  *(_OWORD *)(a1 + 64496) = xmmword_18D313070;
  *(_QWORD *)(a1 + 64520) = a1 + 64528;
  *(_OWORD *)(a1 + 64552) = 0u;
  *(_QWORD *)(a1 + 64592) = 0x300000003;
  *(_QWORD *)(a1 + 64568) = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 64576) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 64600) = a1 + 64608;
  *(_QWORD *)(a1 + 64704) = 0x300000003;
  *(_QWORD *)(a1 + 64680) = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 64688) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 64712) = a1 + 64720;
  *(_OWORD *)(a1 + 64792) = 0u;
  *(_QWORD *)(a1 + 64808) = 0;
  *(_QWORD *)(a1 + 64848) = 0x300000003;
  *(_QWORD *)(a1 + 64816) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 64824) = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 64832) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 64856) = a1 + 64864;
  *(_OWORD *)(a1 + 64936) = 0u;
  *(_OWORD *)(a1 + 64952) = 0u;
  *(_QWORD *)(a1 + 64968) = 0;
  *(_QWORD *)(a1 + 64976) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 64984) = 0;
  *(_BYTE *)(a1 + 65208) = 0;
  *(_QWORD *)(a1 + 65216) = &unk_1E25B9B60;
  *(_QWORD *)(a1 + 67784) = &off_1E25B98F0;
  *(_OWORD *)(a1 + 67913) = 0u;
  *(_OWORD *)(a1 + 67904) = 0u;
  *(_OWORD *)(a1 + 67888) = 0u;
  *(_OWORD *)(a1 + 67872) = 0u;
  *(_OWORD *)(a1 + 67856) = 0u;
  *(_OWORD *)(a1 + 67840) = 0u;
  *(_OWORD *)(a1 + 67824) = 0u;
  *(_OWORD *)(a1 + 67808) = 0u;
  *(_OWORD *)(a1 + 67792) = 0u;
  *(_BYTE *)(a1 + 65224) = 0;
  *(_OWORD *)(a1 + 65232) = xmmword_18D3197D0;
  *(_QWORD *)(a1 + 65248) = 0x40C3880000000000;
  *(_DWORD *)(a1 + 67776) = 0;
  *(_DWORD *)(a1 + 67936) = 10;
  *(_QWORD *)(a1 + 67944) = &unk_1E25B9AB8;
  *(_QWORD *)(a1 + 67952) = &unk_1E25B9B60;
  *(_QWORD *)(a1 + 70520) = &off_1E25B98F0;
  *(_OWORD *)(a1 + 70649) = 0u;
  *(_OWORD *)(a1 + 70640) = 0u;
  *(_OWORD *)(a1 + 70624) = 0u;
  *(_OWORD *)(a1 + 70608) = 0u;
  *(_OWORD *)(a1 + 70592) = 0u;
  *(_OWORD *)(a1 + 70576) = 0u;
  *(_OWORD *)(a1 + 70560) = 0u;
  *(_OWORD *)(a1 + 70544) = 0u;
  *(_OWORD *)(a1 + 70528) = 0u;
  *(_BYTE *)(a1 + 67960) = 0;
  *(_OWORD *)(a1 + 67968) = xmmword_18D3197D0;
  *(_QWORD *)(a1 + 67984) = 0x40C3880000000000;
  *(_DWORD *)(a1 + 70512) = 0;
  *(_DWORD *)(a1 + 70672) = 10;
  *(_OWORD *)(a1 + 70696) = 0u;
  *(_OWORD *)(a1 + 70712) = 0u;
  *(_OWORD *)(a1 + 70680) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 70728) = _Q0;
  *(_QWORD *)(a1 + 70744) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 70760) = 0;
  *(_BYTE *)(a1 + 70952) = 0;
  *(_BYTE *)(a1 + 70960) = 0;
  *(_BYTE *)(a1 + 71104) = 0;
  *(_DWORD *)(a1 + 70752) = 0;
  *(_BYTE *)(a1 + 71272) = 0;
  *(_BYTE *)(a1 + 71128) = 0;
  *(_OWORD *)(a1 + 71112) = 0u;
  *(_OWORD *)(a1 + 71340) = 0u;
  *(_OWORD *)(a1 + 71328) = 0u;
  *(_OWORD *)(a1 + 71312) = 0u;
  *(_OWORD *)(a1 + 71296) = 0u;
  *(_OWORD *)(a1 + 71280) = 0u;
  *(_OWORD *)(a1 + 71360) = xmmword_18D31CEA0;
  *(_OWORD *)(a1 + 71776) = 0u;
  *(_OWORD *)(a1 + 71760) = 0u;
  *(_OWORD *)(a1 + 71744) = 0u;
  *(_OWORD *)(a1 + 71728) = 0u;
  *(_OWORD *)(a1 + 71712) = 0u;
  *(_OWORD *)(a1 + 71696) = 0u;
  *(_OWORD *)(a1 + 71680) = 0u;
  *(_OWORD *)(a1 + 71664) = 0u;
  *(_OWORD *)(a1 + 71648) = 0u;
  *(_OWORD *)(a1 + 71632) = 0u;
  *(_OWORD *)(a1 + 71616) = 0u;
  *(_OWORD *)(a1 + 71600) = 0u;
  *(_OWORD *)(a1 + 71584) = 0u;
  *(_OWORD *)(a1 + 71568) = 0u;
  *(_OWORD *)(a1 + 71552) = 0u;
  *(_OWORD *)(a1 + 71536) = 0u;
  *(_OWORD *)(a1 + 71520) = 0u;
  *(_OWORD *)(a1 + 71504) = 0u;
  *(_OWORD *)(a1 + 71488) = 0u;
  *(_OWORD *)(a1 + 71472) = 0u;
  *(_OWORD *)(a1 + 71456) = 0u;
  *(_OWORD *)(a1 + 71440) = 0u;
  *(_OWORD *)(a1 + 71424) = 0u;
  *(_OWORD *)(a1 + 71408) = 0u;
  *(_OWORD *)(a1 + 71392) = 0u;
  *(_OWORD *)(a1 + 71376) = 0u;
  *(_QWORD *)(a1 + 71816) = 0x100000003;
  *(_QWORD *)(a1 + 71792) = &unk_1E25C7790;
  *(_OWORD *)(a1 + 71800) = xmmword_18D313070;
  *(_QWORD *)(a1 + 71824) = a1 + 71832;
  *(_QWORD *)(a1 + 71880) = 0x100000003;
  *(_QWORD *)(a1 + 71856) = &unk_1E25C7790;
  *(_OWORD *)(a1 + 71864) = xmmword_18D313070;
  *(_QWORD *)(a1 + 71888) = a1 + 71896;
  *(_QWORD *)(a1 + 71944) = 0x100000003;
  *(_QWORD *)(a1 + 71920) = &unk_1E25C7790;
  *(_OWORD *)(a1 + 71928) = xmmword_18D313070;
  *(_QWORD *)(a1 + 71952) = a1 + 71960;
  *(_QWORD *)(a1 + 72016) = 0x100000004;
  *(_QWORD *)(a1 + 71984) = &unk_1E25B8D98;
  *(_QWORD *)(a1 + 71992) = &unk_1E25C7E50;
  *(_OWORD *)(a1 + 72000) = xmmword_18D313090;
  *(_QWORD *)(a1 + 72024) = a1 + 72032;
  *(_QWORD *)(a1 + 72032) = 0;
  *(_QWORD *)(a1 + 72048) = 0;
  *(_QWORD *)(a1 + 72040) = 0;
  *(_QWORD *)(a1 + 72056) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 72072) = 0u;
  *(_OWORD *)(a1 + 72088) = 0u;
  *(_OWORD *)(a1 + 72104) = 0u;
  *(_WORD *)(a1 + 72120) = 1;
  *(_OWORD *)(a1 + 72128) = 0u;
  *(_OWORD *)(a1 + 72144) = 0u;
  *(_OWORD *)(a1 + 72160) = 0u;
  *(_BYTE *)(a1 + 72176) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 72184, a2);
  *(_QWORD *)(a1 + 72184) = &off_1E25C3F68;
  *(_BYTE *)(a1 + 72664) = 0;
  *(_BYTE *)(a1 + 72672) = 0;
  *(_QWORD *)(a1 + 72680) = 0;
  *(_BYTE *)(a1 + 72688) = 0;
  *(_QWORD *)(a1 + 72696) = off_1E25C3EC8;
  *(_BYTE *)(a1 + 72728) = 0;
  *(_BYTE *)(a1 + 72736) = 0;
  *(_BYTE *)(a1 + 72744) = 0;
  *(_BYTE *)(a1 + 72752) = 0;
  *(_BYTE *)(a1 + 72760) = 0;
  *(_BYTE *)(a1 + 72768) = 0;
  *(_BYTE *)(a1 + 72784) = 0;
  *(_QWORD *)(a1 + 72788) = 0;
  *(_QWORD *)(a1 + 72804) = 0;
  *(_QWORD *)(a1 + 72796) = 0;
  *(_DWORD *)(a1 + 72812) = 0;
  *(_QWORD *)(a1 + 72712) = 0;
  *(_QWORD *)(a1 + 72704) = 0;
  *(_BYTE *)(a1 + 72720) = 0;
  *(_QWORD *)(a1 + 72816) = &unk_1E25C2E08;
  *(_QWORD *)(a1 + 72824) = 0;
  *(_QWORD *)(a1 + 72832) = 0;
  *(_BYTE *)(a1 + 72840) = 0;
  *(_QWORD *)(a1 + 72848) = 0;
  *(_QWORD *)(a1 + 72856) = 0;
  *(_BYTE *)(a1 + 72864) = 0;
  *(_QWORD *)(a1 + 72872) = 0;
  *(_QWORD *)(a1 + 72880) = 0;
  *(_BYTE *)(a1 + 72888) = 0;
  *(_QWORD *)(a1 + 72896) = 0;
  *(_QWORD *)(a1 + 72904) = 0;
  *(_QWORD *)(a1 + 72912) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 72920) = 0;
  *(_BYTE *)(a1 + 72992) = 0;
  *(_BYTE *)(a1 + 73192) = 0;
  *(_OWORD *)(a1 + 72928) = 0u;
  *(_OWORD *)(a1 + 72944) = 0u;
  *(_DWORD *)(a1 + 72960) = 0;
  *(_QWORD *)(a1 + 72976) = 0;
  *(_QWORD *)(a1 + 72968) = 0;
  *(_DWORD *)(a1 + 72984) = 0;
  *(_QWORD *)(a1 + 73200) = &unk_1E25C21B8;
  *(_BYTE *)(a1 + 73224) = 0;
  *(_QWORD *)(a1 + 73216) = 0;
  *(_QWORD *)(a1 + 73208) = 0;
  *(_BYTE *)(a1 + 73248) = 0;
  *(_QWORD *)(a1 + 73240) = 0;
  *(_QWORD *)(a1 + 73232) = 0;
  *(_BYTE *)(a1 + 73272) = 0;
  *(_QWORD *)(a1 + 73264) = 0;
  *(_QWORD *)(a1 + 73256) = 0;
  *(_QWORD *)(a1 + 73288) = 0;
  *(_QWORD *)(a1 + 73280) = 0;
  *(_QWORD *)(a1 + 73296) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 73312) = 0;
  *(_QWORD *)(a1 + 73304) = 0;
  *(_BYTE *)(a1 + 73320) = 0;
  *(_QWORD *)(a1 + 73336) = 0;
  *(_QWORD *)(a1 + 73328) = 0;
  *(_BYTE *)(a1 + 73344) = 0;
  *(_QWORD *)(a1 + 73360) = 0;
  *(_QWORD *)(a1 + 73352) = 0;
  *(_BYTE *)(a1 + 73368) = 0;
  *(_QWORD *)(a1 + 73384) = 0;
  *(_QWORD *)(a1 + 73376) = 0;
  *(_QWORD *)(a1 + 73392) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 73400) = 0;
  *(_BYTE *)(a1 + 73402) = 0;
  v14 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 73408) = v14;
  *(int64x2_t *)(a1 + 73424) = v14;
  *(int64x2_t *)(a1 + 73440) = v14;
  *(int64x2_t *)(a1 + 73456) = v14;
  *(_QWORD *)(a1 + 73472) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 73480) = 0;
  *(int64x2_t *)(a1 + 73488) = v14;
  *(int64x2_t *)(a1 + 73504) = v14;
  *(int64x2_t *)(a1 + 73520) = v14;
  *(int64x2_t *)(a1 + 73536) = v14;
  v28 = v14;
  *(_QWORD *)(a1 + 73552) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 73560) = 0;
  *(_QWORD *)(a1 + 73568) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 73634) = 0u;
  *(_OWORD *)(a1 + 73608) = 0u;
  *(_OWORD *)(a1 + 73624) = 0u;
  *(_OWORD *)(a1 + 73576) = 0u;
  *(_OWORD *)(a1 + 73592) = 0u;
  *(_QWORD *)(a1 + 73672) = 0;
  *(_QWORD *)(a1 + 73664) = 0;
  *(_QWORD *)(a1 + 73656) = a1 + 73664;
  *(_QWORD *)(a1 + 73696) = 0;
  *(_QWORD *)(a1 + 73688) = 0;
  *(_QWORD *)(a1 + 73680) = a1 + 73688;
  *(_QWORD *)(a1 + 73720) = 0;
  *(_QWORD *)(a1 + 73712) = 0;
  *(_QWORD *)(a1 + 73704) = a1 + 73712;
  *(_WORD *)(a1 + 73728) = 0;
  *(_BYTE *)(a1 + 73736) = 0;
  *(_BYTE *)(a1 + 73768) = 0;
  *(_BYTE *)(a1 + 73776) = 0;
  *(_BYTE *)(a1 + 73800) = 0;
  *(_BYTE *)(a1 + 73808) = 0;
  *(_BYTE *)(a1 + 73824) = 0;
  *(_BYTE *)(a1 + 73832) = 0;
  *(_BYTE *)(a1 + 73848) = 0;
  *(_BYTE *)(a1 + 73856) = 0;
  *(_BYTE *)(a1 + 73880) = 0;
  *(_BYTE *)(a1 + 73888) = 0;
  *(_BYTE *)(a1 + 73912) = 0;
  *(_BYTE *)(a1 + 73920) = 0;
  *(_BYTE *)(a1 + 73944) = 0;
  raven::GnssReceiverBandCorrectionsManager::GnssReceiverBandCorrectionsManager((raven::GnssReceiverBandCorrectionsManager *)(a1 + 73952), 0);
  *(_QWORD *)(a1 + 74864) = 0;
  *(_QWORD *)(a1 + 74872) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 74880) = 0;
  *(_DWORD *)(a1 + 74884) = -1;
  *(_BYTE *)(a1 + 74888) = 0;
  *(_DWORD *)(a1 + 74892) = -1;
  *(_BYTE *)(a1 + 74896) = 0;
  *(_BYTE *)(a1 + 74968) = 0;
  *(_QWORD *)(a1 + 74976) = 0;
  *(_QWORD *)(a1 + 74992) = 0;
  *(_QWORD *)(a1 + 74984) = 0;
  *(_QWORD *)(a1 + 75000) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 75008) = 1;
  *(_QWORD *)(a1 + 75016) = &unk_1E25B9A18;
  *(_WORD *)(a1 + 75024) = 0;
  *(_QWORD *)(a1 + 75040) = 0;
  *(_QWORD *)(a1 + 75032) = 0;
  *(int64x2_t *)(a1 + 75048) = v28;
  *(_QWORD *)(a1 + 75064) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 75080) = 0;
  *(_QWORD *)(a1 + 75072) = 0;
  *(int64x2_t *)(a1 + 75088) = v28;
  *(int64x2_t *)(a1 + 75104) = v28;
  *(int64x2_t *)(a1 + 75120) = v28;
  *(int64x2_t *)(a1 + 75136) = v28;
  *(int64x2_t *)(a1 + 75152) = v28;
  *(int64x2_t *)(a1 + 75168) = v28;
  *(int64x2_t *)(a1 + 75184) = v28;
  *(_QWORD *)(a1 + 75200) = 900;
  *(_BYTE *)(a1 + 75272) = 0;
  *(_QWORD *)(a1 + 75280) = 0;
  *(_QWORD *)(a1 + 75208) = 0;
  *(_QWORD *)(a1 + 75216) = 0;
  *(_BYTE *)(a1 + 75224) = 0;
  raven::RavenIMUPreprocessorActiveObject::RavenIMUPreprocessorActiveObject(a1 + 75288, a2);
  cnframework::ActiveObjectBase::ActiveObjectBase((uint64_t)v25, a2);
  *(_QWORD *)v25 = &off_1E25C4260;
  *(_BYTE *)(a1 + 76520) = 0;
  *(_OWORD *)(a1 + 76528) = 0u;
  *(_OWORD *)(a1 + 76544) = 0u;
  *(_OWORD *)(a1 + 76560) = 0u;
  *(_QWORD *)(a1 + 76576) = 0;
  *(_DWORD *)(a1 + 76584) = 1065353216;
  *(_BYTE *)(a1 + 76592) = 0;
  *(_QWORD *)(a1 + 76600) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 76808) = 0;
  *(_BYTE *)(a1 + 76928) = 0;
  *(_OWORD *)(a1 + 76608) = 0u;
  *(_OWORD *)(a1 + 76624) = 0u;
  *(_OWORD *)(a1 + 76640) = 0u;
  *(_OWORD *)(a1 + 76656) = 0u;
  *(_OWORD *)(a1 + 76665) = 0u;
  *(_QWORD *)(a1 + 76936) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 76960) = 0;
  *(_QWORD *)(a1 + 76944) = 0;
  *(_QWORD *)(a1 + 76952) = 0;
  *(_QWORD *)(a1 + 76968) = &unk_1E25C38D8;
  *(_QWORD *)(a1 + 76976) = 0;
  *(_QWORD *)(a1 + 76984) = 0;
  *(_BYTE *)(a1 + 76992) = 0;
  *(_QWORD *)(a1 + 77000) = 0;
  *(_QWORD *)(a1 + 77008) = 0;
  *(_BYTE *)(a1 + 77016) = 0;
  *(_QWORD *)(a1 + 77024) = 0;
  *(_QWORD *)(a1 + 77032) = 0;
  *(_BYTE *)(a1 + 77040) = 0;
  *(_QWORD *)(a1 + 77048) = 0;
  *(_QWORD *)(a1 + 77056) = 0;
  *(_QWORD *)(a1 + 77064) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 77072) = 0;
  *(_QWORD *)(a1 + 77080) = 0;
  *(_BYTE *)(a1 + 77088) = 0;
  *(_QWORD *)(a1 + 77096) = 0;
  *(_QWORD *)(a1 + 77104) = 0;
  *(_BYTE *)(a1 + 77112) = 0;
  *(_QWORD *)(a1 + 77128) = 0;
  *(_QWORD *)(a1 + 77120) = 0;
  *(_BYTE *)(a1 + 77136) = 0;
  *(_QWORD *)(a1 + 77144) = 0;
  *(_QWORD *)(a1 + 77152) = 0;
  v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 77160) = v15;
  *(int64x2_t *)(a1 + 77176) = v15;
  *(_DWORD *)(a1 + 77192) = 0;
  *(_BYTE *)(a1 + 77200) = 0;
  *(_BYTE *)(a1 + 77320) = 0;
  *(_BYTE *)(a1 + 77688) = 0;
  *(_BYTE *)(a1 + 78056) = 0;
  *(_OWORD *)(a1 + 78080) = 0u;
  *(_OWORD *)(a1 + 78096) = 0u;
  *(_OWORD *)(a1 + 78112) = 0u;
  *(_OWORD *)(a1 + 78128) = 0u;
  *(_OWORD *)(a1 + 78144) = 0u;
  *(_OWORD *)(a1 + 78160) = 0u;
  *(_OWORD *)(a1 + 78176) = 0u;
  *(_OWORD *)(a1 + 78192) = 0u;
  *(_OWORD *)(a1 + 78208) = 0u;
  *(_BYTE *)(a1 + 76504) = 0;
  sub_18D05EB90(v25);
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 78224, a2);
  *(_QWORD *)(a1 + 78224) = &off_1E25C3490;
  *(_BYTE *)(a1 + 78704) = 0;
  *(_QWORD *)(a1 + 78712) = 0;
  *(_BYTE *)(a1 + 78720) = 0;
  *(_BYTE *)(a1 + 78912) = 0;
  *(_BYTE *)(a1 + 78920) = 0;
  *(_BYTE *)(a1 + 79128) = 0;
  *(_BYTE *)(a1 + 79288) = 0;
  *(_BYTE *)(a1 + 79576) = 0;
  *(_BYTE *)(a1 + 79600) = 0;
  *(_BYTE *)(a1 + 79752) = 0;
  *(_BYTE *)(a1 + 82192) = 0;
  *(_BYTE *)(a1 + 82336) = 0;
  *(_BYTE *)(a1 + 82344) = 0;
  *(_QWORD *)(a1 + 82360) = 0x7FF0000000000000;
  *(_QWORD *)(a1 + 82368) = 0;
  *(_QWORD *)(a1 + 82376) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 82384) = 0;
  *(_OWORD *)(a1 + 82392) = 0u;
  *(_OWORD *)(a1 + 82408) = 0u;
  *(_OWORD *)(a1 + 82424) = 0u;
  *(_OWORD *)(a1 + 82440) = 0u;
  *(_QWORD *)(a1 + 82456) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 82464) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase((uint64_t)v24, a2);
  *v24 = &off_1E25C4468;
  *(_BYTE *)(a1 + 82952) = 0;
  *(_OWORD *)(a1 + 82960) = 0u;
  *(_OWORD *)(a1 + 82976) = 0u;
  *(_OWORD *)(a1 + 82992) = 0u;
  *(_OWORD *)(a1 + 83008) = 0u;
  *(_OWORD *)(a1 + 83024) = 0u;
  *(_OWORD *)(a1 + 83040) = 0u;
  *(_OWORD *)(a1 + 83056) = 0u;
  *(_OWORD *)(a1 + 83072) = 0u;
  *(_OWORD *)(a1 + 83088) = 0u;
  *(_QWORD *)(a1 + 83104) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 83112) = 0;
  v16 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 83120) = v16;
  *(int64x2_t *)(a1 + 83136) = v16;
  *(int64x2_t *)(a1 + 83152) = v16;
  *(int64x2_t *)(a1 + 83168) = v16;
  *(_QWORD *)(a1 + 83184) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 83192) = 0;
  *(int64x2_t *)(a1 + 83200) = v16;
  *(int64x2_t *)(a1 + 83216) = v16;
  *(int64x2_t *)(a1 + 83232) = v16;
  *(int64x2_t *)(a1 + 83248) = v16;
  *(int64x2_t *)(a1 + 83264) = v16;
  *(int64x2_t *)(a1 + 83280) = v16;
  *(int64x2_t *)(a1 + 83296) = v16;
  *(_BYTE *)(a1 + 83312) = 0;
  *(int64x2_t *)(a1 + 83320) = v16;
  *(int64x2_t *)(a1 + 83336) = v16;
  *(int64x2_t *)(a1 + 83352) = v16;
  *(int64x2_t *)(a1 + 83368) = v16;
  *(_QWORD *)(a1 + 83384) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 83392) = 0;
  *(int64x2_t *)(a1 + 83400) = v16;
  *(int64x2_t *)(a1 + 83416) = v16;
  *(int64x2_t *)(a1 + 83432) = v16;
  *(int64x2_t *)(a1 + 83448) = v16;
  *(_QWORD *)(a1 + 83464) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 83472) = 0;
  *(int64x2_t *)(a1 + 83480) = v16;
  *(int64x2_t *)(a1 + 83496) = v16;
  *(int64x2_t *)(a1 + 83512) = v16;
  *(int64x2_t *)(a1 + 83528) = v16;
  *(int64x2_t *)(a1 + 83544) = v16;
  *(int64x2_t *)(a1 + 83560) = v16;
  *(int64x2_t *)(a1 + 83576) = v16;
  *(_BYTE *)(a1 + 83592) = 0;
  *(int64x2_t *)(a1 + 83600) = v16;
  *(int64x2_t *)(a1 + 83616) = v16;
  *(int64x2_t *)(a1 + 83632) = v16;
  *(int64x2_t *)(a1 + 83648) = v16;
  *(_QWORD *)(a1 + 83664) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 83672) = 0;
  *(int64x2_t *)(a1 + 83680) = v16;
  *(int64x2_t *)(a1 + 83696) = v16;
  *(int64x2_t *)(a1 + 83712) = v16;
  *(int64x2_t *)(a1 + 83728) = v16;
  *(_QWORD *)(a1 + 83744) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 83752) = 0;
  *(int64x2_t *)(a1 + 83760) = v16;
  *(int64x2_t *)(a1 + 83776) = v16;
  *(int64x2_t *)(a1 + 83792) = v16;
  *(int64x2_t *)(a1 + 83808) = v16;
  *(_QWORD *)(a1 + 83824) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 83832) = 0;
  *(int64x2_t *)(a1 + 83840) = v16;
  *(int64x2_t *)(a1 + 83856) = v16;
  *(_QWORD *)(a1 + 83872) = 0x7FF8000000000000;
  *(_OWORD *)(a1 + 83880) = 0u;
  *(_QWORD *)(a1 + 83896) = &unk_1E25C24A0;
  *(_QWORD *)(a1 + 83904) = 0;
  *(_QWORD *)(a1 + 83912) = 0;
  *(_BYTE *)(a1 + 83920) = 0;
  *(_QWORD *)(a1 + 83928) = 0;
  *(_QWORD *)(a1 + 83936) = 0;
  *(_BYTE *)(a1 + 83944) = 0;
  *(_QWORD *)(a1 + 83952) = 0;
  *(_QWORD *)(a1 + 83960) = 0;
  *(_BYTE *)(a1 + 83968) = 0;
  *(_QWORD *)(a1 + 83976) = 0;
  *(_QWORD *)(a1 + 83984) = 0;
  *(_QWORD *)(a1 + 83992) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 84000) = 0;
  *(_QWORD *)(a1 + 84008) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 84032) = 0;
  *(_QWORD *)(a1 + 84016) = 0;
  *(_QWORD *)(a1 + 84024) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 84040, a2);
  v17 = 0;
  *(_QWORD *)(a1 + 84040) = &unk_1E25C4588;
  *(_BYTE *)(a1 + 84520) = 0;
  *(_BYTE *)(a1 + 84640) = 0;
  *(_BYTE *)(a1 + 84648) = 0;
  *(_BYTE *)(a1 + 84712) = 0;
  *(_BYTE *)(a1 + 84720) = 0;
  *(_BYTE *)(a1 + 84784) = 0;
  *(_WORD *)(a1 + 84792) = 0;
  *(_QWORD *)(a1 + 84800) = 0;
  *(_BYTE *)(a1 + 84576) = 0;
  *(_OWORD *)(a1 + 84528) = 0u;
  *(_OWORD *)(a1 + 84544) = 0u;
  *(_OWORD *)(a1 + 84560) = 0u;
  do
  {
    v18 = (_OWORD *)(a1 + 84860 + v17);
    *((_BYTE *)v18 - 52) = 0;
    v18[3] = 0uLL;
    v18[4] = 0uLL;
    *(_OWORD *)((char *)v18 + 76) = 0uLL;
    *(v18 - 3) = 0uLL;
    *(v18 - 2) = 0uLL;
    *(_OWORD *)((char *)v18 - 19) = 0uLL;
    *v18 = 0uLL;
    v18[1] = 0uLL;
    v17 += 144;
    *(_OWORD *)((char *)v18 + 29) = 0uLL;
  }
  while (v17 != 288);
  *(_QWORD *)(a1 + 85096) = 0;
  *(_BYTE *)(a1 + 85104) = 0;
  *(_QWORD *)(a1 + 85256) = 0;
  *(_QWORD *)(a1 + 85272) = 0;
  *(_QWORD *)(a1 + 85264) = 0;
  *(_DWORD *)(a1 + 85280) = 0;
  *(_BYTE *)(a1 + 85512) = 0;
  *(_OWORD *)(a1 + 85108) = 0u;
  *(_OWORD *)(a1 + 85124) = 0u;
  *(_OWORD *)(a1 + 85137) = 0u;
  *(_OWORD *)(a1 + 85156) = 0u;
  *(_OWORD *)(a1 + 85172) = 0u;
  *(_OWORD *)(a1 + 85185) = 0u;
  *(_OWORD *)(a1 + 85204) = 0u;
  *(_OWORD *)(a1 + 85220) = 0u;
  *(_OWORD *)(a1 + 85233) = 0u;
  *(_QWORD *)(a1 + 85296) = 0;
  *(_QWORD *)(a1 + 85288) = 0;
  *(_BYTE *)(a1 + 85312) = 0;
  *(_QWORD *)(a1 + 85304) = 0;
  *(_OWORD *)(a1 + 85345) = 0u;
  *(_OWORD *)(a1 + 85332) = 0u;
  *(_OWORD *)(a1 + 85316) = 0u;
  *(_OWORD *)(a1 + 85364) = 0u;
  *(_OWORD *)(a1 + 85380) = 0u;
  *(_OWORD *)(a1 + 85393) = 0u;
  *(_OWORD *)(a1 + 85412) = 0u;
  *(_OWORD *)(a1 + 85428) = 0u;
  *(_OWORD *)(a1 + 85441) = 0u;
  *(_QWORD *)(a1 + 85520) = 0;
  *(_QWORD *)(a1 + 85528) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 85536) = 0;
  *(_BYTE *)(a1 + 85592) = 0;
  *(_QWORD *)(a1 + 85600) = 0;
  *(_QWORD *)(a1 + 85608) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 85616) = 0;
  *(_BYTE *)(a1 + 85624) = 0;
  *(_BYTE *)(a1 + 85816) = 0;
  *(_BYTE *)(a1 + 85824) = 0;
  *(_BYTE *)(a1 + 85968) = 0;
  *(_BYTE *)(a1 + 85976) = 0;
  *(_BYTE *)(a1 + 86120) = 0;
  *(_BYTE *)(a1 + 86128) = 0;
  *(_BYTE *)(a1 + 88560) = 0;
  *(_QWORD *)(a1 + 88600) = 0x100000003;
  *(_QWORD *)(a1 + 88568) = &unk_1E25B8EB8;
  *(_QWORD *)(a1 + 88576) = &unk_1E25C7790;
  *(_QWORD *)(a1 + 88608) = a1 + 88616;
  *(_QWORD *)(a1 + 88664) = 0x100000003;
  *(_QWORD *)(a1 + 88640) = &unk_1E25C7790;
  *(_QWORD *)(a1 + 88672) = a1 + 88680;
  *(_QWORD *)(a1 + 88584) = 0;
  *(_QWORD *)(a1 + 88592) = 0;
  *(_QWORD *)(a1 + 88648) = 0;
  *(_QWORD *)(a1 + 88656) = 0;
  *(_DWORD *)(a1 + 88704) = 1;
  *(_QWORD *)(a1 + 88712) = 0x3DDB7CDFD9D7BDBBLL;
  *(_QWORD *)(a1 + 88720) = 0;
  *(_QWORD *)(a1 + 88728) = 0x7FF8000000000000;
  *(_OWORD *)(a1 + 88768) = 0u;
  *(_OWORD *)(a1 + 88752) = 0u;
  *(_OWORD *)(a1 + 88736) = 0u;
  *(_QWORD *)(a1 + 88784) = &unk_1E25C26E8;
  *(_QWORD *)(a1 + 88800) = 0;
  *(_QWORD *)(a1 + 88792) = 0;
  *(_BYTE *)(a1 + 88808) = 0;
  *(_QWORD *)(a1 + 88824) = 0;
  *(_QWORD *)(a1 + 88816) = 0;
  *(_BYTE *)(a1 + 88832) = 0;
  *(_QWORD *)(a1 + 88848) = 0;
  *(_QWORD *)(a1 + 88840) = 0;
  *(_BYTE *)(a1 + 88856) = 0;
  *(_QWORD *)(a1 + 88872) = 0;
  *(_QWORD *)(a1 + 88864) = 0;
  *(_QWORD *)(a1 + 88880) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 88888) = 0;
  *(_QWORD *)(a1 + 88896) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 88912) = 0;
  *(_QWORD *)(a1 + 88904) = 0;
  *(_QWORD *)(a1 + 88920) = 0;
  sub_18D0778AC(__str, "<MovingEst> ");
  std::string::operator=((std::string *)(a1 + 84552), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  sub_18D0778AC(__str, "<MovingEst> ");
  std::string::operator=((std::string *)(a1 + 88760), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 88928, a2);
  *(_BYTE *)(a1 + 89408) = 0;
  *(_QWORD *)(a1 + 89464) = 0;
  *(_OWORD *)(a1 + 89416) = 0u;
  *(_OWORD *)(a1 + 89432) = 0u;
  *(_OWORD *)(a1 + 89448) = 0u;
  *(_QWORD *)(a1 + 88928) = &off_1E25C3850;
  raven::RavenPNTEstimator::RavenPNTEstimator((raven::RavenPNTEstimator *)(a1 + 89472));
  sub_18D0778AC(__str, "<PNT> ");
  std::string::operator=((std::string *)(a1 + 89448), (const std::string *)__str);
  std::string::operator=((std::string *)(a1 + 91984), (const std::string *)__str);
  std::string::operator=((std::string *)(a1 + 105800), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  raven::RavenPositionContextEstimatorActiveObject::RavenPositionContextEstimatorActiveObject(a1 + 164144, a2);
  cnframework::ActiveObjectBase::ActiveObjectBase((uint64_t)v23, a2);
  *v23 = &off_1E25C4070;
  *(_BYTE *)(a1 + 165680) = 0;
  *(_QWORD *)(a1 + 165800) = 0;
  *(_OWORD *)(a1 + 165688) = 0u;
  *(_OWORD *)(a1 + 165704) = 0u;
  *(_OWORD *)(a1 + 165720) = 0u;
  *(_OWORD *)(a1 + 165736) = 0u;
  *(_OWORD *)(a1 + 165752) = 0u;
  *(_OWORD *)(a1 + 165768) = 0u;
  *(_OWORD *)(a1 + 165784) = 0u;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 165808, a2);
  *(_BYTE *)(v19 + 480) = 0;
  *(_QWORD *)(a1 + 166344) = 0;
  *(_OWORD *)(a1 + 166296) = 0u;
  *(_OWORD *)(a1 + 166312) = 0u;
  *(_OWORD *)(a1 + 166328) = 0u;
  *(_QWORD *)v19 = &off_1E25C45F8;
  raven::RavenPassThroughEstimator::RavenPassThroughEstimator((raven::RavenPassThroughEstimator *)(a1 + 166352));
  sub_18D0778AC(__str, "<Passthrough> ");
  std::string::operator=((std::string *)(a1 + 166328), (const std::string *)__str);
  std::string::operator=((std::string *)(a1 + 168864), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  cnframework::ActiveObjectBase::ActiveObjectBase((uint64_t)v22, a2);
  *v22 = &off_1E25C40E0;
  *(_BYTE *)(a1 + 170120) = 0;
  *(_QWORD *)(a1 + 170128) = 0;
  *(_BYTE *)(a1 + 170136) = 0;
  *(_BYTE *)(a1 + 170256) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 170280, a2);
  *(_QWORD *)(a1 + 170280) = &off_1E25C33F0;
  *(_BYTE *)(a1 + 170760) = 0;
  *(_OWORD *)(a1 + 170792) = 0u;
  *(_OWORD *)(a1 + 170808) = 0u;
  *(_OWORD *)(a1 + 170824) = 0u;
  *(_QWORD *)(a1 + 170840) = 0;
  *(_QWORD *)(a1 + 170768) = &unk_1E25C2218;
  *(_QWORD *)(a1 + 170776) = 0;
  *(_QWORD *)(a1 + 170784) = 0;
  *(_BYTE *)(a1 + 170792) = 0;
  *(_QWORD *)(a1 + 170800) = 0;
  *(_BYTE *)(a1 + 170816) = 0;
  *(_QWORD *)(a1 + 170808) = 0;
  *(_QWORD *)(a1 + 170832) = 0;
  *(_QWORD *)(a1 + 170824) = 0;
  *(_BYTE *)(a1 + 170840) = 0;
  *(_QWORD *)(a1 + 170856) = 0;
  *(_QWORD *)(a1 + 170848) = 0;
  *(_QWORD *)(a1 + 170864) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 170880) = 0;
  sub_18D0409EC(a1 + 170888);
  raven::RavenPredictor::RavenPredictor((raven::RavenPredictor *)(a1 + 173320));
  *(_QWORD *)(a1 + 181336) = 0;
  *(_QWORD *)(a1 + 181344) = &off_1E25BF6B0;
  *(_OWORD *)(a1 + 181352) = 0u;
  *(_OWORD *)(a1 + 181368) = 0u;
  *(_OWORD *)(a1 + 181384) = 0u;
  *(_QWORD *)(a1 + 181400) = 0;
  *(_QWORD *)(a1 + 181408) = 850045863;
  *(_OWORD *)(a1 + 181416) = 0u;
  *(_OWORD *)(a1 + 181432) = 0u;
  *(_OWORD *)(a1 + 181448) = 0u;
  *(_QWORD *)(a1 + 181464) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 181472, a2);
  *(_QWORD *)(a1 + 181472) = &off_1E25C46A8;
  *(_WORD *)(a1 + 181952) = 0;
  *(_BYTE *)(a1 + 182376) = 0;
  *(_OWORD *)(a1 + 181960) = 0u;
  *(_OWORD *)(a1 + 181976) = 0u;
  *(_OWORD *)(a1 + 181992) = 0u;
  *(_OWORD *)(a1 + 182001) = 0u;
  *(_OWORD *)(a1 + 182384) = 0u;
  *(_OWORD *)(a1 + 182400) = 0u;
  *(_OWORD *)(a1 + 182416) = 0u;
  *(_OWORD *)(a1 + 182432) = 0u;
  *(_OWORD *)(a1 + 182448) = 0u;
  *(_QWORD *)(a1 + 182464) = 0;
  *(_QWORD *)(a1 + 182472) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 182480) = 0;
  v20 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 182488) = v20;
  *(int64x2_t *)(a1 + 182504) = v20;
  *(int64x2_t *)(a1 + 182520) = v20;
  *(int64x2_t *)(a1 + 182536) = v20;
  *(_QWORD *)(a1 + 182552) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 182560) = 0;
  *(int64x2_t *)(a1 + 182568) = v20;
  *(int64x2_t *)(a1 + 182584) = v20;
  *(int64x2_t *)(a1 + 182600) = v20;
  *(int64x2_t *)(a1 + 182616) = v20;
  *(int64x2_t *)(a1 + 182632) = v20;
  *(int64x2_t *)(a1 + 182648) = v20;
  *(int64x2_t *)(a1 + 182664) = v20;
  *(_BYTE *)(a1 + 182680) = 0;
  *(int64x2_t *)(a1 + 182688) = v20;
  *(int64x2_t *)(a1 + 182704) = v20;
  *(int64x2_t *)(a1 + 182720) = v20;
  *(int64x2_t *)(a1 + 182736) = v20;
  *(_QWORD *)(a1 + 182752) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 182760) = 0;
  *(int64x2_t *)(a1 + 182768) = v20;
  *(int64x2_t *)(a1 + 182784) = v20;
  *(int64x2_t *)(a1 + 182800) = v20;
  *(int64x2_t *)(a1 + 182816) = v20;
  *(_QWORD *)(a1 + 182832) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 182840) = 0;
  *(int64x2_t *)(a1 + 182848) = v20;
  *(int64x2_t *)(a1 + 182864) = v20;
  *(int64x2_t *)(a1 + 182880) = v20;
  *(int64x2_t *)(a1 + 182896) = v20;
  *(int64x2_t *)(a1 + 182912) = v20;
  *(int64x2_t *)(a1 + 182928) = v20;
  *(int64x2_t *)(a1 + 182944) = v20;
  *(_BYTE *)(a1 + 182960) = 0;
  *(int64x2_t *)(a1 + 182968) = v20;
  *(int64x2_t *)(a1 + 182984) = v20;
  *(int64x2_t *)(a1 + 183000) = v20;
  *(int64x2_t *)(a1 + 183016) = v20;
  *(_QWORD *)(a1 + 183032) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 183040) = 0;
  *(int64x2_t *)(a1 + 183048) = v20;
  *(int64x2_t *)(a1 + 183064) = v20;
  *(int64x2_t *)(a1 + 183080) = v20;
  *(int64x2_t *)(a1 + 183096) = v20;
  *(_QWORD *)(a1 + 183112) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 183120) = 0;
  *(int64x2_t *)(a1 + 183128) = v20;
  *(int64x2_t *)(a1 + 183144) = v20;
  *(int64x2_t *)(a1 + 183160) = v20;
  *(int64x2_t *)(a1 + 183176) = v20;
  *(_QWORD *)(a1 + 183192) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 183200) = 0;
  *(int64x2_t *)(a1 + 183208) = v20;
  *(int64x2_t *)(a1 + 183224) = v20;
  *(_QWORD *)(a1 + 183240) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 183248) = 0;
  *(_OWORD *)(a1 + 183256) = xmmword_18D31CEB0;
  *(_QWORD *)(a1 + 183272) = 4;
  *(_OWORD *)(a1 + 183280) = xmmword_18D31CEC0;
  *(_DWORD *)(a1 + 183296) = 0;
  *(int64x2_t *)(a1 + 183304) = v20;
  *(_QWORD *)(a1 + 183320) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 183328) = 0;
  *(_BYTE *)(a1 + 183448) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 183456, a2);
  *(_QWORD *)(a1 + 183456) = &off_1E25C3FD8;
  *(_BYTE *)(a1 + 183936) = 0;
  *(_OWORD *)(a1 + 183944) = 0u;
  *(_OWORD *)(a1 + 183960) = 0u;
  *(_QWORD *)(a1 + 183976) = 0;
  *(_DWORD *)(a1 + 183984) = 1065353216;
  *(_OWORD *)(a1 + 183992) = 0u;
  *(_OWORD *)(a1 + 184008) = 0u;
  *(_DWORD *)(a1 + 184024) = 1065353216;
  *(_OWORD *)(a1 + 184032) = 0u;
  *(_OWORD *)(a1 + 184048) = 0u;
  *(_DWORD *)(a1 + 184064) = 1065353216;
  *(_BYTE *)(a1 + 184072) = 0;
  *(_QWORD *)(a1 + 184080) = 0;
  *(_QWORD *)(a1 + 184088) = 0xFFF0000000000000;
  *(_BYTE *)(a1 + 184096) = 0;
  *(_BYTE *)(a1 + 184104) = 0;
  *(_OWORD *)(a1 + 184344) = 0u;
  *(_OWORD *)(a1 + 184360) = 0u;
  *(_DWORD *)(a1 + 184376) = 1065353216;
  *(_BYTE *)(a1 + 184384) = 0;
  *(_BYTE *)(a1 + 184400) = 0;
  *(_BYTE *)(a1 + 184408) = 0;
  *(_BYTE *)(a1 + 184432) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 184440, a2);
  *(_QWORD *)(a1 + 184440) = &off_1E25C2F58;
  *(_BYTE *)(a1 + 184920) = 0;
  *(_WORD *)(a1 + 185024) = 0;
  *(_BYTE *)(a1 + 185096) = 0;
  *(_OWORD *)(a1 + 185032) = 0u;
  *(_OWORD *)(a1 + 185048) = 0u;
  *(_DWORD *)(a1 + 185064) = 0;
  *(_QWORD *)(a1 + 185080) = 0;
  *(_QWORD *)(a1 + 185072) = 0;
  *(_DWORD *)(a1 + 185088) = 0;
  *(_QWORD *)(a1 + 185120) = 60;
  *(_QWORD *)(a1 + 185128) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 185136, a2);
  *(_QWORD *)(a1 + 185136) = &off_1E25C3500;
  *(_BYTE *)(a1 + 185616) = 0;
  *(_QWORD *)(a1 + 185624) = 0;
  *(_BYTE *)(a1 + 185632) = 0;
  *(_BYTE *)(a1 + 185824) = 0;
  *(_BYTE *)(a1 + 185832) = 0;
  *(_BYTE *)(a1 + 186040) = 0;
  *(_BYTE *)(a1 + 186048) = 0;
  *(_BYTE *)(a1 + 186192) = 0;
  *(_BYTE *)(a1 + 186200) = 0;
  *(_BYTE *)(a1 + 186360) = 0;
  *(_BYTE *)(a1 + 186368) = 0;
  *(_BYTE *)(a1 + 186488) = 0;
  *(_QWORD *)(a1 + 186504) = 0;
  *(_QWORD *)(a1 + 186512) = 0;
  *(_QWORD *)(a1 + 186496) = 0;
  *(_BYTE *)(a1 + 186520) = *a2;
  return a1;
}

void sub_18D1EDF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, void **a20,cnframework::ActiveObjectBase *a21,cnframework::ActiveObjectBase *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,cnframework::ActiveObjectBase *a34,cnframework::ActiveObjectBase *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,cnframework::ActiveObjectBase *a63)
{
  uint64_t a65;
  void **a66;
  uint64_t a67;
  cnframework::ActiveObjectBase *a68;
  cnframework::ActiveObjectBase *a69;
  cnframework::ActiveObjectBase *a72;
  cnframework::Supervisor *v72;
  void **v73;
  uint64_t v74;
  raven::RavenSolutionPostprocessorActiveObject *v75;
  raven::RavenTimerActiveObject *v76;
  void **v77;
  raven::RavenSolutionSelectorActiveObject *v78;
  uint64_t v79;
  cnframework::ActiveObjectBase *v81;
  cnframework::ActiveObjectBase *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  raven::RavenTimerActiveObject::~RavenTimerActiveObject(v76);
  raven::RavenSolutionSelectorActiveObject::~RavenSolutionSelectorActiveObject(v78);
  raven::RavenSolutionPostprocessorActiveObject::~RavenSolutionPostprocessorActiveObject(v75);
  sub_18D17F7A4(v74);
  sub_18D166514(a34);
  raven::RavenPassThroughEstimatorActiveObject::~RavenPassThroughEstimatorActiveObject(a35);
  sub_18D1EE4C4(a63);
  raven::RavenPositionContextEstimatorActiveObject::~RavenPositionContextEstimatorActiveObject(v77);
  *v73 = &off_1E25C3850;
  sub_18D03CCEC(a65);
  sub_18D074680(v73);
  sub_18D07396C(a66);
  *(_QWORD *)a72 = &off_1E25C4468;
  sub_18D20B0C4((_QWORD *)v72 + 10371);
  cnframework::ActiveObjectBase::~ActiveObjectBase(a72);
  sub_18D20B800(a67);
  v81 = (cnframework::ActiveObjectBase *)STACK[0x208];
  *(_QWORD *)STACK[0x208] = &off_1E25C4260;
  sub_18D03CAB8(STACK[0x200]);
  cnframework::ActiveObjectBase::~ActiveObjectBase(v81);
  raven::RavenIMUPreprocessorActiveObject::~RavenIMUPreprocessorActiveObject((raven::RavenIMUPreprocessorActiveObject *)STACK[0x230]);
  *(_QWORD *)a69 = &off_1E25C3F68;
  sub_18D074B58(STACK[0x210]);
  cnframework::ActiveObjectBase::~ActiveObjectBase(a69);
  sub_18D03C940(a68);
  sub_18D073AFC((_QWORD *)STACK[0x220]);
  v82 = (cnframework::ActiveObjectBase *)STACK[0x218];
  *(_QWORD *)STACK[0x218] = v79 + 16;
  sub_18D28C4F8(a18);
  cnframework::ActiveObjectBase::~ActiveObjectBase(v82);
  *a20 = &off_1E25C4500;
  sub_18D20AB14(a19);
  sub_18D074630(a20);
  sub_18D073760(a21);
  raven::RavenAccelerationDecompositionActiveObject::~RavenAccelerationDecompositionActiveObject(a22);
  sub_18D04BAB0(a23);
  sub_18D04BAB0(a24);
  cnframework::Supervisor::~Supervisor(v72, v83, v84, v85, v86, v87, v88, v89);
  _Unwind_Resume(a1);
}

void sub_18D1EE454()
{
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  JUMPOUT(0x18D1EE340);
}

void sub_18D1EE470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  sub_18D20AB14(a19);
  JUMPOUT(0x18D1EE420);
}

void sub_18D1EE4C4(cnframework::ActiveObjectBase *a1)
{
  *(_QWORD *)a1 = &off_1E25C4070;
  sub_18D20B6C8((_QWORD *)a1 + 70);
  sub_18D07BD60((_QWORD *)a1 + 64);
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

uint64_t raven::RavenSupervisor::Configure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  cnprint::CNPrinter *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  unsigned __int8 v51;

  if (!*(_BYTE *)(a2 + 33))
  {
    LOWORD(v50) = 12;
    v51 = 4;
    v46 = "RavenSupervisor::Configure called with uninitialized parameters.";
LABEL_35:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, &v51, v46, a4, a5, a6, a7, a8, v47);
    return 0;
  }
  v10 = (_BYTE *)(a1 + 5313);
  sub_18D1EE898(a1 + 840, a2);
  v11 = (cnprint::CNPrinter *)sub_18D1EE898(a1 + 4672, a2);
  if (v10[3080])
  {
    v50 = 0;
    cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v50);
  }
  if (v10[3081])
  {
    cnprint::CNPrinter::SetFileLogStreamName((cnprint::CNPrinter *)(a1 + 8400));
    v50 = 1;
    cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v50);
  }
  if (v10[3111])
  {
    v50 = 2;
    cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v50);
  }
  if (v10[3080] || v10[3081] || v10[3111])
  {
    v17 = v10[3143];
    if (v17 < cnprint::CNPrinter::GetLogLevel(v11))
      cnprint::CNPrinter::SetLogLevel((cnprint::CNPrinter *)(v10 + 3143));
  }
  v18 = (uint64_t *)(a1 + 186496);
  LOWORD(v50) = 12;
  v51 = 2;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, &v51, "RavenSupervisor configuration parameters set", v12, v13, v14, v15, v16, v47);
  if (*(_BYTE *)(a1 + 817))
  {
    LOWORD(v50) = 12;
    v51 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, &v51, "RavenSupervisor::Configure called after RavenSupervisor was already configured.", v20, v21, v22, v23, v24, v48);
  }
  if (v10[1919] && *v10)
  {
    v25 = operator new();
    raven::RavenIonosphereEstimatorActiveObject::RavenIonosphereEstimatorActiveObject(v25, (_BYTE *)(a1 + 186520));
    v31 = *(_QWORD *)(a1 + 186504);
    *(_QWORD *)(a1 + 186504) = v25;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  else if (cnprint::CNPrinter::GetLogLevel(v19) <= 1)
  {
    LOWORD(v50) = 12;
    v51 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, &v51, "RavenIonosphereEstimatorActiveObject was not instantiated", v26, v27, v28, v29, v30, v48);
  }
  if (v10[2855] && *v10)
  {
    v32 = operator new();
    raven::RavenRayTracingActiveObject::RavenRayTracingActiveObject(v32, (_BYTE *)(a1 + 186520));
    v33 = *(_QWORD *)(a1 + 186512);
    *(_QWORD *)(a1 + 186512) = v32;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    LOWORD(v50) = 12;
    v51 = 3;
    v34 = "RavenRayTracingActiveObject was instantiated";
  }
  else
  {
    LOWORD(v50) = 12;
    v51 = 3;
    v34 = "RavenRayTracingActiveObject was not instantiated";
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, &v51, v34, v26, v27, v28, v29, v30, v48);
  v35 = operator new();
  v37 = raven::RavenUserGaitTrackerActiveObject::RavenUserGaitTrackerActiveObject(v35, (_BYTE *)(a1 + 186520));
  v38 = *v18;
  *v18 = v35;
  if (v38)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v38 + 8))(v38, v37);
  v39 = *(_DWORD *)(a1 + 5704);
  if (v39 >= 6)
  {
    LOWORD(v50) = 12;
    v51 = 4;
    v47 = v39;
    v46 = "Warning: Incompatible RavenSupervisor configuration parameters, device motion mag calibration level (%d)";
    goto LABEL_35;
  }
  cnframework::Supervisor::SetThreadingModel(a1, (unsigned __int8 *)(a1 + 8364), v36, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 817))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  LOWORD(v50) = 12;
  v51 = 2;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, &v51, "RavenSupervisor successfully configured", v40, v41, v42, v43, v44, v49);
  return 1;
}

void sub_18D1EE840(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10E3C40A4539767);
  _Unwind_Resume(a1);
}

uint64_t sub_18D1EE898(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  void **v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  std::string *v16;
  std::string *v17;
  std::string *i;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int16 v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  if (a1 != a2)
  {
    v5 = (void **)(a1 + 40);
    v4 = *(std::string **)(a1 + 40);
    v7 = *(__int128 **)(a2 + 40);
    v6 = *(__int128 **)(a2 + 48);
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
    v9 = *(_QWORD *)(a1 + 56);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v4) >> 3) < v8)
    {
      if (v4)
      {
        sub_18D1784D8((uint64_t *)(a1 + 40));
        operator delete(*v5);
        v9 = 0;
        *v5 = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
      if (v8 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
      v11 = 2 * v10;
      if (2 * v10 <= v8)
        v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
      v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
      if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_30:
        sub_18D07AFE4();
      v13 = (char *)sub_18D1782B8(a1 + 56, v12);
      *(_QWORD *)(a1 + 40) = v13;
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = &v13[24 * v14];
      v15 = sub_18D20BA4C(a1 + 56, v7, v6, v13);
      goto LABEL_15;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v4) >> 3) < v8)
    {
      v16 = (std::string *)((char *)v7 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v4) >> 3));
      sub_18D20BB64(*(std::string **)(a2 + 40), v16, v4);
      v15 = sub_18D20BA4C(a1 + 56, (__int128 *)v16, v6, *(char **)(a1 + 48));
LABEL_15:
      *(_QWORD *)(a1 + 48) = v15;
      goto LABEL_21;
    }
    v17 = sub_18D20BB64(*(std::string **)(a2 + 40), *(std::string **)(a2 + 48), v4);
    for (i = *(std::string **)(a1 + 48); i != v17; --i)
    {
      if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(i[-1].__r_.__value_.__l.__data_);
    }
    *(_QWORD *)(a1 + 48) = v17;
  }
LABEL_21:
  memcpy((void *)(a1 + 64), (const void *)(a2 + 64), 0x8D0uLL);
  v19 = *(_QWORD *)(a2 + 2320);
  v20 = *(_QWORD *)(a2 + 2328);
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(a1 + 2320) = v19;
  v23 = *(std::__shared_weak_count **)(a1 + 2328);
  *(_QWORD *)(a1 + 2328) = v20;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_OWORD *)(a1 + 2336) = *(_OWORD *)(a2 + 2336);
  memcpy((void *)(a1 + 2352), (const void *)(a2 + 2352), 0x519uLL);
  std::string::operator=((std::string *)(a1 + 3664), (const std::string *)(a2 + 3664));
  v26 = *(_WORD *)(a2 + 3692);
  *(_DWORD *)(a1 + 3688) = *(_DWORD *)(a2 + 3688);
  *(_WORD *)(a1 + 3692) = v26;
  std::string::operator=((std::string *)(a1 + 3696), (const std::string *)(a2 + 3696));
  v27 = *(_BYTE *)(a2 + 3722);
  *(_WORD *)(a1 + 3720) = *(_WORD *)(a2 + 3720);
  *(_BYTE *)(a1 + 3722) = v27;
  std::string::operator=((std::string *)(a1 + 3728), (const std::string *)(a2 + 3728));
  v28 = *(_BYTE *)(a2 + 3754);
  *(_WORD *)(a1 + 3752) = *(_WORD *)(a2 + 3752);
  *(_BYTE *)(a1 + 3754) = v28;
  std::string::operator=((std::string *)(a1 + 3760), (const std::string *)(a2 + 3760));
  v29 = *(_OWORD *)(a2 + 3813);
  v30 = *(_OWORD *)(a2 + 3800);
  *(_OWORD *)(a1 + 3784) = *(_OWORD *)(a2 + 3784);
  *(_OWORD *)(a1 + 3800) = v30;
  *(_OWORD *)(a1 + 3813) = v29;
  return a1;
}

void sub_18D1EEB5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_18D1EEB64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::IsConfigured(raven::RavenSupervisor *this)
{
  return *((unsigned __int8 *)this + 817);
}

uint64_t raven::RavenSupervisor::GetMutableRavenParameters(raven::RavenSupervisor *this)
{
  return (uint64_t)this + 4672;
}

uint64_t raven::RavenSupervisor::GetRavenSolution(raven::RavenSupervisor *this, raven::RavenSolutionEvent *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 181408);
  std::mutex::lock((std::mutex *)((char *)this + 181408));
  memcpy((char *)a2 + 8, (char *)this + 170896, 0x971uLL);
  std::mutex::unlock(v4);
  return 0;
}

uint64_t raven::RavenSupervisor::GetRavenSolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;

  v3 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  v4 = fabs(v3);
  if ((unint64_t)(*(_QWORD *)&v4 - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(_QWORD *)&v4 - 1) < 0xFFFFFFFFFFFFFLL
    || *(_QWORD *)&v3 == 0)
  {
    return raven::RavenSolutionActiveObject::GetRavenSolution(a1 + 170280, a2, a3);
  }
  sub_18D040C34(a3);
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenSupervisor::GetRavenIonosphereParameters(uint64_t a1, _OWORD *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 186504);
  if (result)
    return raven::RavenIonosphereEstimatorActiveObject::GetIonosphereParameters(result, a2);
  *(_BYTE *)a2 = 0;
  return result;
}

#error "18D1EEC58: too big function (funcsize=0)"

void sub_18D203D38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D204540(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 601))
  {
    puts("Warning: RavenEstimator::Configure() called more than once.");
    *(_BYTE *)(a1 + 480) = 0;
    return 0xFFFFFFFFLL;
  }
  else
  {
    *(_QWORD *)(a1 + 1712) = *a2;
    *(_BYTE *)(a1 + 601) = 1;
    return sub_18D20B504((_BYTE *)a1, a2);
  }
}

uint64_t sub_18D204598(_BYTE *a1, uint64_t *a2)
{
  uint64_t v5;

  v5 = *a2;
  if (!raven::RavenConvergenceEstimator::Configure((uint64_t)(a1 + 3000), &v5))
    return sub_18D20A950(a1, a2);
  a1[480] = 0;
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D2045F0(char **a1, uint64_t *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6;
  double v7;
  unint64_t v8;
  char **v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  void *__p[2];
  char v62;
  unsigned __int8 v63;
  __int16 v64;
  uint64_t v65;

  v65 = *a2;
  if (!raven::RavenPNTEstimator::Configure((raven::RavenPNTEstimator *)(a1 + 68), &v65, a3, a4))
  {
    v6 = v65;
    v7 = *(double *)(v65 + 856);
    if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v7 < 0.0)
    {
      v64 = 12;
      v63 = 4;
      (*((void (**)(void **__return_ptr, char **))*a1 + 2))(__p, a1);
      if (v62 >= 0)
        v17 = __p;
      else
        LOBYTE(v17) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "Error: %s could not be configured. Invalid tolerable_accelerometer_event_age: %.3lf", v12, v13, v14, v15, v16, (char)v17);
    }
    else
    {
      if ((*(_QWORD *)(v65 + 864) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(v65 + 864) >= 0.0)
      {
        v8 = (unint64_t)a1[20];
        v9 = a1 + 18;
        v10 = (unint64_t)a1[19];
        if (v10 >= v8)
        {
          v25 = (uint64_t)(v10 - (_QWORD)*v9) >> 4;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60)
            goto LABEL_59;
          v27 = v8 - (_QWORD)*v9;
          if (v27 >> 3 > v26)
            v26 = v27 >> 3;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
            v28 = 0xFFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          v29 = (char *)sub_18D16735C((uint64_t)(a1 + 20), v28);
          v30 = &v29[16 * v25];
          v32 = &v29[16 * v31];
          *((_QWORD *)v30 + 1) = *(_QWORD *)(v6 + 856);
          v11 = v30 + 16;
          v34 = a1[18];
          v33 = a1[19];
          if (v33 != v34)
          {
            do
            {
              *((_OWORD *)v30 - 1) = *((_OWORD *)v33 - 1);
              v30 -= 16;
              v33 -= 16;
            }
            while (v33 != v34);
            v33 = *v9;
          }
          a1[18] = v30;
          a1[19] = v11;
          a1[20] = v32;
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(double *)(v10 + 8) = v7;
          v11 = (char *)(v10 + 16);
        }
        a1[19] = v11;
        v35 = v65;
        v36 = (unint64_t)a1[20];
        if ((unint64_t)v11 >= v36)
        {
          v38 = (v11 - *v9) >> 4;
          if ((unint64_t)(v38 + 1) >> 60)
            goto LABEL_59;
          v39 = v36 - (_QWORD)*v9;
          v40 = v39 >> 3;
          if (v39 >> 3 <= (unint64_t)(v38 + 1))
            v40 = v38 + 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
            v41 = 0xFFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          v42 = (char *)sub_18D16735C((uint64_t)(a1 + 20), v41);
          v43 = &v42[16 * v38];
          v45 = &v42[16 * v44];
          *((_QWORD *)v43 + 1) = *(_QWORD *)(v35 + 864);
          v37 = v43 + 16;
          v47 = a1[18];
          v46 = a1[19];
          if (v46 != v47)
          {
            do
            {
              *((_OWORD *)v43 - 1) = *((_OWORD *)v46 - 1);
              v43 -= 16;
              v46 -= 16;
            }
            while (v46 != v47);
            v46 = *v9;
          }
          a1[18] = v43;
          a1[19] = v37;
          a1[20] = v45;
          if (v46)
            operator delete(v46);
        }
        else
        {
          *((_QWORD *)v11 + 1) = *(_QWORD *)(v35 + 864);
          v37 = v11 + 16;
        }
        a1[19] = v37;
        v48 = v65;
        v49 = (unint64_t)a1[20];
        if ((unint64_t)v37 < v49)
        {
          *((_QWORD *)v37 + 1) = *(_QWORD *)(v48 + 864);
          v50 = v37 + 16;
LABEL_58:
          a1[19] = v50;
          return sub_18D20B324(a1, a2);
        }
        v51 = (v37 - *v9) >> 4;
        if (!((unint64_t)(v51 + 1) >> 60))
        {
          v52 = v49 - (_QWORD)*v9;
          v53 = v52 >> 3;
          if (v52 >> 3 <= (unint64_t)(v51 + 1))
            v53 = v51 + 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
            v54 = 0xFFFFFFFFFFFFFFFLL;
          else
            v54 = v53;
          v55 = (char *)sub_18D16735C((uint64_t)(a1 + 20), v54);
          v56 = &v55[16 * v51];
          v58 = &v55[16 * v57];
          *((_QWORD *)v56 + 1) = *(_QWORD *)(v48 + 864);
          v50 = v56 + 16;
          v60 = a1[18];
          v59 = a1[19];
          if (v59 != v60)
          {
            do
            {
              *((_OWORD *)v56 - 1) = *((_OWORD *)v59 - 1);
              v56 -= 16;
              v59 -= 16;
            }
            while (v59 != v60);
            v59 = *v9;
          }
          a1[18] = v56;
          a1[19] = v50;
          a1[20] = v58;
          if (v59)
            operator delete(v59);
          goto LABEL_58;
        }
LABEL_59:
        sub_18D07AFE4();
      }
      v64 = 12;
      v63 = 4;
      (*((void (**)(void **__return_ptr, char **))*a1 + 2))(__p, a1);
      if (v62 >= 0)
        v23 = __p;
      else
        LOBYTE(v23) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "Error: %s could not be configured. Invalid tolerable_rategyro_event_age: %.3lf", v18, v19, v20, v21, v22, (char)v23);
    }
    if (v62 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  *((_BYTE *)a1 + 480) = 0;
  return 0xFFFFFFFFLL;
}

void sub_18D2049D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D2049F8(uint64_t a1, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  int v20;
  std::mutex *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void **v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26) = 0;
  LOBYTE(v27) = 0;
  *((_QWORD *)&v27 + 1) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 24);
    if (v4 >= v6)
    {
      v9 = (uint64_t)(v4 - (_QWORD)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59)
        sub_18D07AFE4();
      v10 = v6 - (_QWORD)*v3;
      v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_18D184AF4(a1 + 24, v12);
      else
        v13 = 0;
      v14 = &v13[32 * v9];
      v15 = &v13[32 * v12];
      v16 = v27;
      *(_OWORD *)v14 = v26;
      *((_OWORD *)v14 + 1) = v16;
      v8 = v14 + 32;
      v18 = *(char **)(a1 + 8);
      v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = v27;
      *(_OWORD *)v4 = v26;
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (_OWORD *)(v4 + 32);
    }
    *(_QWORD *)(a1 + 16) = v8;
    v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(_BYTE *)(a1 + 168))
    {
      v21 = 0;
    }
    else
    {
      v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    v22 = (_QWORD *)(a1 + 32);
    if (sub_18D03FCF0(v22, (uint64_t *)&v28))
      goto LABEL_30;
    v31 = v30;
    v29 = &v28;
    v30[0] = &off_1E25CB9C8;
    v23 = sub_18D20D94C((uint64_t)v22, (uint64_t *)&v28, (uint64_t)&std::piecewise_construct, &v29);
    sub_18D20C7C8(v23 + 3, (uint64_t)v30);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_30;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_30:
    if (!v20)
      std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v26))
  {
    v4 += 32;
    if (v4 == v5)
    {
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18D204C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  int v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (!v20)
    std::mutex::unlock(v19);
  _Unwind_Resume(exception_object);
}

void sub_18D204C58(uint64_t a1, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  int v20;
  std::mutex *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void **v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26) = 0;
  LOBYTE(v27) = 0;
  *((_QWORD *)&v27 + 1) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 24);
    if (v4 >= v6)
    {
      v9 = (uint64_t)(v4 - (_QWORD)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59)
        sub_18D07AFE4();
      v10 = v6 - (_QWORD)*v3;
      v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_18D184AF4(a1 + 24, v12);
      else
        v13 = 0;
      v14 = &v13[32 * v9];
      v15 = &v13[32 * v12];
      v16 = v27;
      *(_OWORD *)v14 = v26;
      *((_OWORD *)v14 + 1) = v16;
      v8 = v14 + 32;
      v18 = *(char **)(a1 + 8);
      v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = v27;
      *(_OWORD *)v4 = v26;
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (_OWORD *)(v4 + 32);
    }
    *(_QWORD *)(a1 + 16) = v8;
    v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(_BYTE *)(a1 + 168))
    {
      v21 = 0;
    }
    else
    {
      v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    v22 = (_QWORD *)(a1 + 32);
    if (sub_18D03FCF0(v22, (uint64_t *)&v28))
      goto LABEL_30;
    v31 = v30;
    v29 = &v28;
    v30[0] = &off_1E25CA1B8;
    v23 = sub_18D20D94C((uint64_t)v22, (uint64_t *)&v28, (uint64_t)&std::piecewise_construct, &v29);
    sub_18D20C7C8(v23 + 3, (uint64_t)v30);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_30;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_30:
    if (!v20)
      std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v26))
  {
    v4 += 32;
    if (v4 == v5)
    {
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18D204E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  int v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (!v20)
    std::mutex::unlock(v19);
  _Unwind_Resume(exception_object);
}

void sub_18D204EB8(uint64_t a1, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  int v20;
  std::mutex *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void **v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26) = 0;
  LOBYTE(v27) = 0;
  *((_QWORD *)&v27 + 1) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 24);
    if (v4 >= v6)
    {
      v9 = (uint64_t)(v4 - (_QWORD)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59)
        sub_18D07AFE4();
      v10 = v6 - (_QWORD)*v3;
      v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_18D184AF4(a1 + 24, v12);
      else
        v13 = 0;
      v14 = &v13[32 * v9];
      v15 = &v13[32 * v12];
      v16 = v27;
      *(_OWORD *)v14 = v26;
      *((_OWORD *)v14 + 1) = v16;
      v8 = v14 + 32;
      v18 = *(char **)(a1 + 8);
      v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = v27;
      *(_OWORD *)v4 = v26;
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (_OWORD *)(v4 + 32);
    }
    *(_QWORD *)(a1 + 16) = v8;
    v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(_BYTE *)(a1 + 168))
    {
      v21 = 0;
    }
    else
    {
      v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    v22 = (_QWORD *)(a1 + 32);
    if (sub_18D03FCF0(v22, (uint64_t *)&v28))
      goto LABEL_30;
    v31 = v30;
    v29 = &v28;
    v30[0] = &off_1E25CAA50;
    v23 = sub_18D20D94C((uint64_t)v22, (uint64_t *)&v28, (uint64_t)&std::piecewise_construct, &v29);
    sub_18D20C7C8(v23 + 3, (uint64_t)v30);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_30;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_30:
    if (!v20)
      std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v26))
  {
    v4 += 32;
    if (v4 == v5)
    {
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18D2050CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  int v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (!v20)
    std::mutex::unlock(v19);
  _Unwind_Resume(exception_object);
}

void sub_18D205118(uint64_t a1, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  int v20;
  std::mutex *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void **v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26) = 0;
  LOBYTE(v27) = 0;
  *((_QWORD *)&v27 + 1) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 24);
    if (v4 >= v6)
    {
      v9 = (uint64_t)(v4 - (_QWORD)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59)
        sub_18D07AFE4();
      v10 = v6 - (_QWORD)*v3;
      v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_18D184AF4(a1 + 24, v12);
      else
        v13 = 0;
      v14 = &v13[32 * v9];
      v15 = &v13[32 * v12];
      v16 = v27;
      *(_OWORD *)v14 = v26;
      *((_OWORD *)v14 + 1) = v16;
      v8 = v14 + 32;
      v18 = *(char **)(a1 + 8);
      v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = v27;
      *(_OWORD *)v4 = v26;
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (_OWORD *)(v4 + 32);
    }
    *(_QWORD *)(a1 + 16) = v8;
    v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(_BYTE *)(a1 + 168))
    {
      v21 = 0;
    }
    else
    {
      v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    v22 = (_QWORD *)(a1 + 32);
    if (sub_18D03FCF0(v22, (uint64_t *)&v28))
      goto LABEL_30;
    v31 = v30;
    v29 = &v28;
    v30[0] = &off_1E25CAB00;
    v23 = sub_18D20D94C((uint64_t)v22, (uint64_t *)&v28, (uint64_t)&std::piecewise_construct, &v29);
    sub_18D20C7C8(v23 + 3, (uint64_t)v30);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_30;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_30:
    if (!v20)
      std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v26))
  {
    v4 += 32;
    if (v4 == v5)
    {
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18D20532C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  int v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (!v20)
    std::mutex::unlock(v19);
  _Unwind_Resume(exception_object);
}

void sub_18D205378(uint64_t a1, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  int v20;
  std::mutex *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void **v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26) = 0;
  LOBYTE(v27) = 0;
  *((_QWORD *)&v27 + 1) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 24);
    if (v4 >= v6)
    {
      v9 = (uint64_t)(v4 - (_QWORD)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59)
        sub_18D07AFE4();
      v10 = v6 - (_QWORD)*v3;
      v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_18D184AF4(a1 + 24, v12);
      else
        v13 = 0;
      v14 = &v13[32 * v9];
      v15 = &v13[32 * v12];
      v16 = v27;
      *(_OWORD *)v14 = v26;
      *((_OWORD *)v14 + 1) = v16;
      v8 = v14 + 32;
      v18 = *(char **)(a1 + 8);
      v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = v27;
      *(_OWORD *)v4 = v26;
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (_OWORD *)(v4 + 32);
    }
    *(_QWORD *)(a1 + 16) = v8;
    v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(_BYTE *)(a1 + 168))
    {
      v21 = 0;
    }
    else
    {
      v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    v22 = (_QWORD *)(a1 + 32);
    if (sub_18D03FCF0(v22, (uint64_t *)&v28))
      goto LABEL_30;
    v31 = v30;
    v29 = &v28;
    v30[0] = &off_1E25CAEC8;
    v23 = sub_18D20D94C((uint64_t)v22, (uint64_t *)&v28, (uint64_t)&std::piecewise_construct, &v29);
    sub_18D20C7C8(v23 + 3, (uint64_t)v30);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_30;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_30:
    if (!v20)
      std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v26))
  {
    v4 += 32;
    if (v4 == v5)
    {
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18D20558C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  int v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (!v20)
    std::mutex::unlock(v19);
  _Unwind_Resume(exception_object);
}

void sub_18D2055D8(uint64_t a1, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  int v20;
  std::mutex *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void **v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26) = 0;
  LOBYTE(v27) = 0;
  *((_QWORD *)&v27 + 1) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 24);
    if (v4 >= v6)
    {
      v9 = (uint64_t)(v4 - (_QWORD)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59)
        sub_18D07AFE4();
      v10 = v6 - (_QWORD)*v3;
      v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_18D184AF4(a1 + 24, v12);
      else
        v13 = 0;
      v14 = &v13[32 * v9];
      v15 = &v13[32 * v12];
      v16 = v27;
      *(_OWORD *)v14 = v26;
      *((_OWORD *)v14 + 1) = v16;
      v8 = v14 + 32;
      v18 = *(char **)(a1 + 8);
      v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = v27;
      *(_OWORD *)v4 = v26;
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (_OWORD *)(v4 + 32);
    }
    *(_QWORD *)(a1 + 16) = v8;
    v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(_BYTE *)(a1 + 168))
    {
      v21 = 0;
    }
    else
    {
      v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    v22 = (_QWORD *)(a1 + 32);
    if (sub_18D03FCF0(v22, (uint64_t *)&v28))
      goto LABEL_30;
    v31 = v30;
    v29 = &v28;
    v30[0] = &off_1E25C9A28;
    v23 = sub_18D20D94C((uint64_t)v22, (uint64_t *)&v28, (uint64_t)&std::piecewise_construct, &v29);
    sub_18D20C7C8(v23 + 3, (uint64_t)v30);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_30;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_30:
    if (!v20)
      std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v26))
  {
    v4 += 32;
    if (v4 == v5)
    {
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18D2057EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  int v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (!v20)
    std::mutex::unlock(v19);
  _Unwind_Resume(exception_object);
}

void sub_18D205838(uint64_t a1, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  int v20;
  std::mutex *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void **v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  LOBYTE(v26) = 0;
  LOBYTE(v27) = 0;
  *((_QWORD *)&v27 + 1) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 24);
    if (v4 >= v6)
    {
      v9 = (uint64_t)(v4 - (_QWORD)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59)
        sub_18D07AFE4();
      v10 = v6 - (_QWORD)*v3;
      v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_18D184AF4(a1 + 24, v12);
      else
        v13 = 0;
      v14 = &v13[32 * v9];
      v15 = &v13[32 * v12];
      v16 = v27;
      *(_OWORD *)v14 = v26;
      *((_OWORD *)v14 + 1) = v16;
      v8 = v14 + 32;
      v18 = *(char **)(a1 + 8);
      v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = v27;
      *(_OWORD *)v4 = v26;
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (_OWORD *)(v4 + 32);
    }
    *(_QWORD *)(a1 + 16) = v8;
    v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(_BYTE *)(a1 + 168))
    {
      v21 = 0;
    }
    else
    {
      v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    v22 = (_QWORD *)(a1 + 32);
    if (sub_18D03FCF0(v22, (uint64_t *)&v28))
      goto LABEL_30;
    v31 = v30;
    v29 = &v28;
    v30[0] = &off_1E25C8DC8;
    v23 = sub_18D20D94C((uint64_t)v22, (uint64_t *)&v28, (uint64_t)&std::piecewise_construct, &v29);
    sub_18D20C7C8(v23 + 3, (uint64_t)v30);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_30;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_30:
    if (!v20)
      std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v26))
  {
    v4 += 32;
    if (v4 == v5)
    {
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18D205A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  int v20;
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a19;
  if (a19 == v21)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (!v20)
    std::mutex::unlock(v19);
  _Unwind_Resume(exception_object);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Accel *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  uint64_t v10;
  uint64_t v13;
  int8x16_t v14;
  int64x2_t v15;
  _QWORD v16[3];
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  int64x2_t v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  _BYTE v31[56];

  LODWORD(v10) = *((_DWORD *)a2 + 6);
  if ((int)v10 >= 1)
  {
    v13 = 0;
    v15 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      v16[0] = &unk_1E25C2A50;
      v16[1] = 0;
      v16[2] = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v14 = (int8x16_t)v15;
      v26 = v15;
      v27 = v15;
      v28 = 0;
      v29 = 0x7FF8000000000000;
      v30 = 0;
      if (v13 >= (int)v10)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v31);
      }
      if (raven::ConvertProtobufToAccelerometerEvent(*(float32x2_t **)(*((_QWORD *)a2 + 2) + 8 * v13), (const CoreNavigation::CLP::LogEntry::PrivateData::AccelSample *)v16, a3, a4, a5, a6, a7, a8, v14, a10))sub_18D205BE0((uint64_t)this, (uint64_t)v16);
      ++v13;
      v10 = *((int *)a2 + 6);
    }
    while (v13 < v10);
  }
}

void sub_18D205BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_18D205BE0(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_18D16CC38(a2, &v13);
  v11 = v13;
  v12 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  cnframework::Supervisor::RaiseEvent(a1, &v11, a1 + 16);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18D205CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *a2, raven::AccessoryVehicleSpeedEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[22];
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v19[1] = 0;
  v19[2] = 0;
  v19[0] = &off_1E25C3460;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0x7FF8000000000000;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0x7FF8000000000000;
  v42 = 0;
  v43 = 0u;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  if (raven::ConvertProtobufToAccessoryVehicleSpeedEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)v19, a3, a4, a5, a6, a7, a8, (int8x16_t)0, a10))
  {
    sub_18D21A888(&v48, (uint64_t)v19);
    v46 = v48;
    v47 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v46, (uint64_t)this + 16);
    v13 = v47;
    if (v47)
    {
      v14 = (unint64_t *)&v47->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v49;
    if (v49)
    {
      v17 = (unint64_t *)&v49->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v19);
}

void sub_18D205E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_18D07C868(v2 - 48);
  sub_18D07C868(v2 - 32);
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)va);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Baro *a2, raven::BarometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  uint64_t v10;
  uint64_t v12;
  int8x16_t v13;
  int v14;
  char *v15;
  unint64_t *v16;
  void **v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  int64x2_t v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[42];
  __int128 v41;
  uint64_t v42;
  char *v43;
  std::__shared_weak_count *v44;

  LODWORD(v10) = *((_DWORD *)a2 + 6);
  if ((int)v10 >= 1)
  {
    v12 = 0;
    v33 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      v34 = &unk_1E25C22A8;
      v35 = 0uLL;
      LOBYTE(v36) = 0;
      *((_QWORD *)&v36 + 1) = 0;
      *(_QWORD *)&v37 = 0;
      BYTE8(v37) = 0;
      v38 = 0uLL;
      LOBYTE(v39) = 0;
      *((_QWORD *)&v39 + 1) = 0;
      *(_QWORD *)v40 = 0;
      v13 = (int8x16_t)v33;
      *(int64x2_t *)&v40[8] = v33;
      v40[24] = 0;
      *(_QWORD *)&v40[32] = 0x7FF8000000000000;
      *(_WORD *)&v40[40] = 0;
      if (v12 >= (int)v10)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v41);
      }
      raven::ConvertProtobufToBarometerEvent(*(raven **)(*((_QWORD *)a2 + 2) + 8 * v12), (const CoreNavigation::CLP::LogEntry::PrivateData::BaroSample *)&v34, a3, a4, a5, a6, a7, a8, v13, a10);
      if (v14)
      {
        v15 = (char *)operator new(0x60uLL);
        *((_QWORD *)v15 + 1) = 0;
        v16 = (unint64_t *)(v15 + 8);
        *((_QWORD *)v15 + 2) = 0;
        *(_QWORD *)v15 = &unk_1E25CCE50;
        *((_QWORD *)v15 + 3) = &unk_1E25B8C58;
        v15[32] = 0;
        *((_QWORD *)v15 + 5) = 0;
        *((_QWORD *)v15 + 6) = MEMORY[0x1E0DE4F20];
        *((_QWORD *)v15 + 7) = 0;
        v17 = (void **)(v15 + 72);
        *((_QWORD *)v15 + 8) = 0;
        sub_18D0778AC((_QWORD *)v15 + 9, "");
        v15[32] = 1;
        v18 = operator new();
        *(_QWORD *)v18 = &off_1E25C1690;
        *(_QWORD *)(v18 + 8) = &unk_1E25C22A8;
        v19 = *(_OWORD *)v40;
        *(_OWORD *)(v18 + 80) = v39;
        *(_OWORD *)(v18 + 96) = v19;
        *(_OWORD *)(v18 + 112) = *(_OWORD *)&v40[16];
        *(_OWORD *)(v18 + 122) = *(_OWORD *)&v40[26];
        v20 = v36;
        *(_OWORD *)(v18 + 16) = v35;
        *(_OWORD *)(v18 + 32) = v20;
        v21 = v38;
        *(_OWORD *)(v18 + 48) = v37;
        *(_OWORD *)(v18 + 64) = v21;
        v22 = *((_QWORD *)v15 + 5);
        *((_QWORD *)v15 + 5) = v18;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v23 = v34;
        *((_QWORD *)v15 + 6) = *(v34 - 1);
        *((_QWORD *)v15 + 7) = ((uint64_t (*)(uint64_t))v23[2])((uint64_t)&v34);
        *((_QWORD *)v15 + 8) = v24;
        ((void (*)(_QWORD *@<X8>))v34[3])(&v41);
        if (v15[95] < 0)
          operator delete(*v17);
        *(_OWORD *)v17 = v41;
        *((_QWORD *)v15 + 11) = v42;
        v43 = v15 + 24;
        v44 = (std::__shared_weak_count *)v15;
        *(_QWORD *)&v41 = v15 + 24;
        *((_QWORD *)&v41 + 1) = v15;
        do
          v25 = __ldxr(v16);
        while (__stxr(v25 + 1, v16));
        cnframework::Supervisor::RaiseEvent((uint64_t)this, &v41, (uint64_t)this + 16);
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v44;
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      ++v12;
      v10 = *((int *)a2 + 6);
    }
    while (v12 < v10);
  }
}

void sub_18D20616C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 152);
  sub_18D07C868(v1 - 104);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  raven::RateGyroEvent *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  double v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  double v29;
  BOOL v30;
  _BYTE *v31;
  int64x2_t v33;
  void *v34;
  uint64_t v35;
  double v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t v46;
  int64x2_t v47;
  __int128 v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  __int16 v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  int64x2_t v68;
  char v69;
  uint64_t v70;
  __int16 v71;
  char v72[56];

  v31 = (char *)this + 8462;
  if (!*((_BYTE *)this + 8491))
  {
    LODWORD(v11) = *((_DWORD *)a2 + 6);
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v33 = vdupq_n_s64(0x7FF8000000000000uLL);
      do
      {
        v34 = &unk_1E25C2A50;
        v35 = 0;
        v36 = 0.0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v13 = (int8x16_t)v33;
        v46 = v33;
        v47 = v33;
        LOBYTE(v48) = 0;
        *((_QWORD *)&v48 + 1) = 0x7FF8000000000000;
        v49.i16[0] = 0;
        if (v12 >= (int)v11)
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v55);
        }
        if (raven::ConvertProtobufToDeviceMotionAccelerationEvent(*(raven **)(*((_QWORD *)a2 + 2) + 8 * v12), (const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)&v34, a3, a4, a5, a6, a7, a8, v13, a10))sub_18D205BE0((uint64_t)this, (uint64_t)&v34);
        v55 = &unk_1E25C21E8;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v21 = (int8x16_t)v33;
        v67 = v33;
        v68 = v33;
        v69 = 0;
        v70 = 0x7FF8000000000000;
        v71 = 0;
        if (v12 >= *((int *)a2 + 6))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v72);
        }
        if (raven::ConvertProtobufToDeviceMotionRotationRateEvent(*(raven **)(*((_QWORD *)a2 + 2) + 8 * v12), (const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)&v55, v14, v15, v16, v17, v18, v19, v21, v20))sub_18D20654C((uint64_t)this, (uint64_t)&v55);
        ++v12;
        v11 = *((int *)a2 + 6);
      }
      while (v12 < v11);
    }
  }
  if (*v31)
  {
    v35 = 0;
    v36 = 0.0;
    v34 = &unk_1E25C2158;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = (int64x2_t)0x7FF8000000000000uLL;
    v47 = 0uLL;
    v48 = xmmword_18D31CED0;
    v49 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v50 = v49;
    v51 = v49;
    v52 = v49;
    v53 = 0x7FF8000000000000;
    v54 = 1;
    if (raven::ConvertProtobufToDeviceMotionAttitudeEvent(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * *((int *)a2 + 6) - 8), (uint64_t)&v34, *((_DWORD *)this + 1426), a4, a5, a6, a7, a8, (int8x16_t)xmmword_18D31CED0, v49))
    {
      v24 = v35;
      v25 = v36;
      v22.i64[0] = *((_QWORD *)this + 712);
      v55 = 0;
      v56 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v55, 0, v22, v23);
      v28 = CNTimeSpan::operator+((uint64_t)this + 824, &v55, v26, v27);
      if (!v24 && (*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
        || !v28 && (*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
        || (v30 = v24 <= v28, v24 == v28))
      {
        v30 = v25 <= v29;
      }
      if (!v30)
      {
        *((_QWORD *)this + 103) = v24;
        *((double *)this + 104) = v25;
        sub_18D206638((uint64_t)this, (uint64_t)&v34);
      }
    }
  }
}

void sub_18D20651C(_Unwind_Exception *a1)
{
  uint64_t v1;

  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_18D20654C(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_18D16D254(a2, &v13);
  v11 = v13;
  v12 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  cnframework::Supervisor::RaiseEvent(a1, &v11, a1 + 16);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18D20661C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18D206638(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_18D21C1E0(a2, &v13);
  v11 = v13;
  v12 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  cnframework::Supervisor::RaiseEvent(a1, &v11, a1 + 16);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18D206708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  _BYTE *v12;
  raven::RateGyroEvent *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  __int16 v41;
  _QWORD v42[3];
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  char v54;
  uint64_t v55;
  __int16 v56;

  v12 = (char *)this + 8462;
  if (!*((_BYTE *)this + 8491))
  {
    v22 = 0;
    v23 = 0;
    v21 = &unk_1E25C2A50;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v20 = v33;
    v34 = v33;
    LOBYTE(v35) = 0;
    *((_QWORD *)&v35 + 1) = 0x7FF8000000000000;
    v36.i16[0] = 0;
    if (raven::ConvertProtobufToDeviceMotionAccelerationEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)&v21, a3, a4, a5, a6, a7, a8, v33, a10))sub_18D205BE0((uint64_t)this, (uint64_t)&v21);
    v42[1] = 0;
    v42[2] = 0;
    v42[0] = &unk_1E25C21E8;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = v20;
    v53 = v20;
    v54 = 0;
    v55 = 0x7FF8000000000000;
    v56 = 0;
    if (raven::ConvertProtobufToDeviceMotionRotationRateEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)v42, v13, v14, v15, v16, v17, v18, v20, v19))sub_18D20654C((uint64_t)this, (uint64_t)v42);
  }
  if (*v12)
  {
    v22 = 0;
    v23 = 0;
    v21 = &unk_1E25C2158;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = (int8x16_t)0x7FF8000000000000uLL;
    v34 = 0uLL;
    v35 = xmmword_18D31CED0;
    v36 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v37 = v36;
    v38 = v36;
    v39 = v36;
    v40 = 0x7FF8000000000000;
    v41 = 1;
    if (raven::ConvertProtobufToDeviceMotionAttitudeEvent((uint64_t)a2, (uint64_t)&v21, *((_DWORD *)this + 1426), a4, a5, a6, a7, a8, (int8x16_t)xmmword_18D31CED0, v36))sub_18D206638((uint64_t)this, (uint64_t)&v21);
  }
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *a2, raven::AltitudeEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v19[1] = 0;
  v19[2] = 0;
  v19[0] = (uint64_t)&unk_1E25C2128;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0x7FF8000000000000;
  if (raven::ConvertProtobufToAltitudeEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *)v19, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    sub_18D21B008(&v32, v19);
    v30 = v32;
    v31 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v30, (uint64_t)this + 16);
    v13 = v31;
    if (v31)
    {
      v14 = (unint64_t *)&v31->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v33;
    if (v33)
    {
      v17 = (unint64_t *)&v33->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_18D2069D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 48);
  sub_18D07C868(v1 - 32);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const std::string **a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  void (**v15)(raven::RayTracingTileEvent *__hidden);
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void (**v24)(raven::RayTracingTileEvent *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::string __p;
  char *v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  uint64_t v35;

  v25 = 0uLL;
  v24 = off_1E25C2C68;
  LOBYTE(v26) = 0;
  *((_QWORD *)&v26 + 1) = 0;
  *(_QWORD *)&v27 = 0;
  BYTE8(v27) = 0;
  v28 = 0uLL;
  LOBYTE(v29) = 0;
  *((_QWORD *)&v29 + 1) = 0;
  *(_QWORD *)&v30 = 0;
  *((_QWORD *)&v30 + 1) = 0x7FF8000000000000;
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&__p, a2[3]);
  std::mutex::lock((std::mutex *)((char *)this + 608));
  v3 = *((_QWORD *)this + 74);
  v4 = *((_QWORD *)this + 75);
  std::mutex::unlock((std::mutex *)((char *)this + 608));
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  *(_QWORD *)&v25 = v3;
  *((_QWORD *)&v25 + 1) = v4;
  *(_QWORD *)&v30 = 0;
  *((_QWORD *)&v30 + 1) = 0x7FF8000000000000;
  v5 = (char *)operator new(0x60uLL);
  *((_QWORD *)v5 + 1) = 0;
  v6 = (unint64_t *)(v5 + 8);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_1E25CCE50;
  *((_QWORD *)v5 + 3) = &unk_1E25B8C58;
  v7 = MEMORY[0x1E0DE4F20];
  v5[32] = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = v7;
  v8 = (void **)(v5 + 72);
  *((_QWORD *)v5 + 7) = 0;
  *((_QWORD *)v5 + 8) = 0;
  sub_18D0778AC((_QWORD *)v5 + 9, "");
  v5[32] = 1;
  v9 = operator new();
  *(_QWORD *)v9 = off_1E25C19F0;
  *(_QWORD *)(v9 + 8) = off_1E25C2C68;
  v10 = v28;
  *(_OWORD *)(v9 + 48) = v27;
  *(_OWORD *)(v9 + 64) = v10;
  v11 = v30;
  *(_OWORD *)(v9 + 80) = v29;
  *(_OWORD *)(v9 + 96) = v11;
  v12 = v26;
  *(_OWORD *)(v9 + 16) = v25;
  *(_OWORD *)(v9 + 32) = v12;
  v13 = (_BYTE *)(v9 + 112);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_18D077798(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v9 + 128) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v14 = *((_QWORD *)v5 + 5);
  *((_QWORD *)v5 + 5) = v9;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v24;
  *((_QWORD *)v5 + 6) = *(v24 - 1);
  *((_QWORD *)v5 + 7) = ((uint64_t (*)(uint64_t))v15[2])((uint64_t)&v24);
  *((_QWORD *)v5 + 8) = v16;
  ((void (*)(_QWORD *@<X8>))v24[3])(&v34);
  if (v5[95] < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v34;
  *((_QWORD *)v5 + 11) = v35;
  v32 = v5 + 24;
  v33 = (std::__shared_weak_count *)v5;
  *(_QWORD *)&v34 = v5 + 24;
  *((_QWORD *)&v34 + 1) = v5;
  do
    v17 = __ldxr(v6);
  while (__stxr(v17 + 1, v6));
  cnframework::Supervisor::RaiseEvent((uint64_t)this, &v34, (uint64_t)this + 16);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = off_1E25C2C68;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18D206CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v32;
  void *v33;

  MEMORY[0x18D78B5D4](v30, 0x1093C40D9944445);
  if (*(char *)(v28 + 95) < 0)
    operator delete(*v29);
  v32 = *(_QWORD *)(v28 + 40);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v28);
  operator delete(v33);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *a2, raven::GEOMapBuildingDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v13;
  void **v14;
  uint64_t v15;
  uint64_t shared_weak_owners;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[3];
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  int8x16_t v38;
  _QWORD **v39;
  _QWORD *v40[3];
  std::__shared_weak_count *v41;
  __int128 v42;
  uint64_t v43;

  v26[1] = 0;
  v26[2] = 0;
  v26[0] = &off_1E25C3020;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0x7FF8000000000000;
  memset(v37, 0, sizeof(v37));
  v38 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v40[0] = 0;
  v40[1] = 0;
  v39 = v40;
  if (raven::ConvertProtobufToGEOMapBuildingDataEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *)v26, a3, a4, a5, a6, a7, a8, v38, a10))
  {
    v11 = (std::__shared_weak_count *)operator new(0x60uLL);
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
    v13 = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
    LOBYTE(v11[1].__shared_owners_) = 0;
    v11[1].__shared_weak_owners_ = 0;
    v11[2].__vftable = v13;
    v14 = (void **)&v11[3].__vftable;
    v11[2].__shared_owners_ = 0;
    v11[2].__shared_weak_owners_ = 0;
    sub_18D0778AC(&v11[3].__vftable, "");
    LOBYTE(v11[1].__shared_owners_) = 1;
    v15 = operator new();
    sub_18D2285E8(v15, (uint64_t)v26);
    shared_weak_owners = v11[1].__shared_weak_owners_;
    v11[1].__shared_weak_owners_ = v15;
    if (shared_weak_owners)
      (*(void (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 8))(shared_weak_owners);
    v17 = v26[0];
    v11[2].__vftable = *(std::__shared_weak_count_vtbl **)(v26[0] - 8);
    v11[2].__shared_owners_ = (*(uint64_t (**)(uint64_t))(v17 + 16))((uint64_t)v26);
    v11[2].__shared_weak_owners_ = v18;
    (*(void (**)(_QWORD *@<X8>))(v26[0] + 24))(&v42);
    if (SHIBYTE(v11[3].__shared_weak_owners_) < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = v42;
    v11[3].__shared_weak_owners_ = v43;
    v40[2] = &v11[1].__vftable;
    v41 = v11;
    *(_QWORD *)&v42 = v11 + 1;
    *((_QWORD *)&v42 + 1) = v11;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v42, (uint64_t)this + 16);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v41;
    if (v41)
    {
      v24 = (unint64_t *)&v41->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26[0] = &off_1E25C3020;
  sub_18D03D9B4((uint64_t)&v39, v40[0]);
  *(_QWORD *)&v42 = v37;
  sub_18D226440((void ***)&v42);
}

void sub_18D206FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18D07C868(v9 - 104);
  sub_18D07C868(v9 - 120);
  raven::GEOMapBuildingDataEvent::~GEOMapBuildingDataEvent((raven::GEOMapBuildingDataEvent *)&a9);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Gyro *a2, raven::RateGyroEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  uint64_t v10;
  uint64_t v13;
  int8x16_t v14;
  int64x2_t v15;
  _QWORD v16[3];
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  int64x2_t v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  _BYTE v31[56];

  LODWORD(v10) = *((_DWORD *)a2 + 6);
  if ((int)v10 >= 1)
  {
    v13 = 0;
    v15 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      v16[0] = &unk_1E25C21E8;
      v16[1] = 0;
      v16[2] = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v14 = (int8x16_t)v15;
      v26 = v15;
      v27 = v15;
      v28 = 0;
      v29 = 0x7FF8000000000000;
      v30 = 0;
      if (v13 >= (int)v10)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v31);
      }
      if (raven::ConvertProtobufToRateGyroEvent(*(float32x2_t **)(*((_QWORD *)a2 + 2) + 8 * v13), (const CoreNavigation::CLP::LogEntry::PrivateData::GyroSample *)v16, a3, a4, a5, a6, a7, a8, v14, a10))sub_18D20654C((uint64_t)this, (uint64_t)v16);
      ++v13;
      v10 = *((int *)a2 + 6);
    }
    while (v13 < v10);
  }
}

void sub_18D207174(_Unwind_Exception *a1)
{
  uint64_t v1;

  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 136));
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, raven::PositionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  raven::VelocityEvent *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int8x16_t v26;
  uint64_t v27[3];
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  char v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  _QWORD v62[3];
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  char v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  uint64_t v91;
  char v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;

  v62[1] = 0;
  v62[2] = 0;
  v62[0] = &unk_1E25C21B8;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0x7FF8000000000000;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v80 = 0;
  v79 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0x7FF8000000000000;
  v85 = 0;
  v86 = 0;
  v87 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v88 = v87;
  v89 = v87;
  v90 = v87;
  v91 = 0x7FF8000000000000;
  v92 = 0;
  v93 = v87;
  v94 = v87;
  v95 = v87;
  v96 = v87;
  v26 = v87;
  v97 = 0x7FF8000000000000;
  if (raven::ConvertProtobufToPositionEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Location *)v62, a3, a4, a5, a6, a7, a8, v87, a10))sub_18D2073B4((uint64_t)this, (uint64_t)v62);
  v27[1] = 0;
  v27[2] = 0;
  v27[0] = (uint64_t)&unk_1E25C2278;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0x7FF8000000000000;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0x7FF8000000000000;
  v50 = 0;
  v51 = v26;
  v52 = v26;
  v53 = v26;
  v54 = v26;
  v55 = 0x7FF8000000000000;
  v56 = 0;
  v57 = v26;
  v58 = v26;
  v59 = v26;
  v60 = v26;
  v61 = 0x7FF8000000000000;
  if (raven::ConvertProtobufToVelocityEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Location *)v62, (const raven::PositionEvent *)v27, v12, v13, v14, v15, v16, v26, v17))
  {
    sub_18D220600(&v100, v27);
    v98 = v100;
    v99 = v101;
    if (v101)
    {
      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v98, (uint64_t)this + 16);
    v20 = v99;
    if (v99)
    {
      v21 = (unint64_t *)&v99->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v101;
    if (v101)
    {
      v24 = (unint64_t *)&v101->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

void sub_18D207398(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 64);
  sub_18D07C868(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_18D2073B4(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_18D21E114(a2, &v13);
  v11 = v13;
  v12 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  cnframework::Supervisor::RaiseEvent(a1, &v11, a1 + 16);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18D207484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *a2, raven::MapsRouteHintEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (**v26)(raven::MapsRouteHintEvent *__hidden);
  uint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void (**v35)(raven::MapsRouteHintEvent *__hidden);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  void *__p;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;

  v36 = 0uLL;
  v35 = &off_1E25C2AE0;
  LOBYTE(v37) = 0;
  *((_QWORD *)&v37 + 1) = 0;
  *(_QWORD *)&v38 = 0;
  BYTE8(v38) = 0;
  v39 = 0uLL;
  LOBYTE(v40) = 0;
  *((_QWORD *)&v40 + 1) = 0;
  *(_QWORD *)&v41 = 0;
  v42 = 0uLL;
  *((_QWORD *)&v41 + 1) = 0x7FF8000000000000;
  LOBYTE(v43) = 0;
  *((_QWORD *)&v43 + 1) = 0;
  *(_QWORD *)&v44 = 0;
  BYTE8(v44) = 0;
  v45 = 0uLL;
  LOBYTE(v46) = 0;
  *((_QWORD *)&v46 + 1) = 0;
  *(_QWORD *)&v47 = 0;
  *((_QWORD *)&v47 + 1) = 0x7FF8000000000000;
  v48 = 0;
  v50 = 0;
  v51 = 0;
  __p = 0;
  if (raven::ConvertProtobufToMapsRouteHintEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *)&v35, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    v11 = (char *)operator new(0x60uLL);
    *((_QWORD *)v11 + 1) = 0;
    v12 = (unint64_t *)(v11 + 8);
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &unk_1E25CCE50;
    *((_QWORD *)v11 + 3) = &unk_1E25B8C58;
    v13 = MEMORY[0x1E0DE4F20];
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = v13;
    v14 = (void **)(v11 + 72);
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    sub_18D0778AC((_QWORD *)v11 + 9, "");
    v11[32] = 1;
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E25C18D0;
    *(_QWORD *)(v15 + 8) = &off_1E25C2AE0;
    v16 = v47;
    *(_OWORD *)(v15 + 176) = v46;
    *(_OWORD *)(v15 + 192) = v16;
    *(_WORD *)(v15 + 208) = v48;
    v17 = v43;
    *(_OWORD *)(v15 + 112) = v42;
    *(_OWORD *)(v15 + 128) = v17;
    v18 = v45;
    *(_OWORD *)(v15 + 144) = v44;
    *(_OWORD *)(v15 + 160) = v18;
    v19 = v39;
    *(_OWORD *)(v15 + 48) = v38;
    *(_OWORD *)(v15 + 64) = v19;
    v20 = v41;
    *(_OWORD *)(v15 + 80) = v40;
    *(_OWORD *)(v15 + 96) = v20;
    v21 = v37;
    *(_OWORD *)(v15 + 16) = v36;
    *(_OWORD *)(v15 + 32) = v21;
    *(_QWORD *)(v15 + 216) = 0;
    *(_QWORD *)(v15 + 224) = 0;
    v22 = __p;
    v23 = (uint64_t)v50;
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((v50 - (_BYTE *)__p) >> 3);
    *(_QWORD *)(v15 + 232) = 0;
    sub_18D20EC90((_QWORD *)(v15 + 216), v22, v23, v24);
    v25 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = v15;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = v35;
    *((_QWORD *)v11 + 6) = *(v35 - 1);
    *((_QWORD *)v11 + 7) = ((uint64_t (*)(uint64_t))v26[2])((uint64_t)&v35);
    *((_QWORD *)v11 + 8) = v27;
    ((void (*)(_QWORD *@<X8>))v35[3])(&v54);
    if (v11[95] < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = v54;
    *((_QWORD *)v11 + 11) = v55;
    v52 = v11 + 24;
    v53 = (std::__shared_weak_count *)v11;
    *(_QWORD *)&v54 = v11 + 24;
    *((_QWORD *)&v54 + 1) = v11;
    do
      v28 = __ldxr(v12);
    while (__stxr(v28 + 1, v12));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v54, (uint64_t)this + 16);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v35 = &off_1E25C2AE0;
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
}

void sub_18D207770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;

  sub_18D07C868(v36 - 104);
  sub_18D07C868(v36 - 120);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MapVector *a2, raven::MapVectorEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  v19[1] = 0;
  v19[2] = 0;
  v19[0] = &unk_1E25C22D8;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0x7FF8000000000000;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v42 = v41;
  v43 = v41;
  v44 = v41;
  v45 = v41;
  v46 = 0;
  if (raven::ConvertProtobufToMapVectorEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MapVector *)v19, a3, a4, a5, a6, a7, a8, v41, a10))
  {
    sub_18D21CC68((uint64_t)v19, &v49);
    v47 = v49;
    v48 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v47, (uint64_t)this + 16);
    v13 = v48;
    if (v48)
    {
      v14 = (unint64_t *)&v48->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v50;
    if (v50)
    {
      v17 = (unint64_t *)&v50->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_18D20796C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 48);
  sub_18D07C868(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2, raven::GnssMeasurementDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unint64_t *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void (**v18)(raven::GnssMeasurementDataEvent *__hidden);
  uint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void (**v28)(raven::GnssMeasurementDataEvent *__hidden);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[24];
  uint64_t v35;
  int32x4_t v36;
  int8x16_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  uint64_t v53;

  v29 = 0uLL;
  v28 = &off_1E25C3080;
  LOBYTE(v30) = 0;
  *((_QWORD *)&v30 + 1) = 0;
  *(_QWORD *)&v31 = 0;
  BYTE8(v31) = 0;
  v32 = 0uLL;
  LOBYTE(v33) = 0;
  *((_QWORD *)&v33 + 1) = 0;
  *(_QWORD *)v34 = 0;
  *(_OWORD *)&v34[8] = xmmword_18D31CEE0;
  v35 = -1;
  v36 = vdupq_n_s32(0x7FC00000u);
  v37 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v38 = 0x8000000000000000;
  v39 = v36.i64[0];
  v40 = 0x7FF8000000000000;
  v41 = 2143289344;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  if (raven::ConvertProtobufToGnssMeasDataEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)&v28, a3, a4, a5, a6, a7, a8, (int8x16_t)0, v37))
  {
    v9 = (char *)operator new(0x60uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &unk_1E25CCE50;
    *((_QWORD *)v9 + 3) = &unk_1E25B8C58;
    v11 = MEMORY[0x1E0DE4F20];
    v9[32] = 0;
    *((_QWORD *)v9 + 5) = 0;
    *((_QWORD *)v9 + 6) = v11;
    v12 = (void **)(v9 + 72);
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 8) = 0;
    sub_18D0778AC((_QWORD *)v9 + 9, "");
    v9[32] = 1;
    v13 = operator new();
    *(_QWORD *)v13 = &off_1E25C1B40;
    *(_QWORD *)(v13 + 8) = &off_1E25C3080;
    v14 = *(_OWORD *)v34;
    *(_OWORD *)(v13 + 80) = v33;
    *(_OWORD *)(v13 + 96) = v14;
    *(_QWORD *)(v13 + 112) = *(_QWORD *)&v34[16];
    v15 = v30;
    *(_OWORD *)(v13 + 16) = v29;
    *(_OWORD *)(v13 + 32) = v15;
    v16 = v32;
    *(_OWORD *)(v13 + 48) = v31;
    *(_OWORD *)(v13 + 64) = v16;
    sub_18D217AC8(v13 + 120, (uint64_t)&v35);
    v17 = *((_QWORD *)v9 + 5);
    *((_QWORD *)v9 + 5) = v13;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v28;
    *((_QWORD *)v9 + 6) = *(v28 - 1);
    *((_QWORD *)v9 + 7) = ((uint64_t (*)(uint64_t))v18[2])((uint64_t)&v28);
    *((_QWORD *)v9 + 8) = v19;
    ((void (*)(_QWORD *@<X8>))v28[3])(&v52);
    if (v9[95] < 0)
      operator delete(*v12);
    *(_OWORD *)v12 = v52;
    *((_QWORD *)v9 + 11) = v53;
    v50 = v9 + 24;
    v51 = (std::__shared_weak_count *)v9;
    *(_QWORD *)&v52 = v9 + 24;
    *((_QWORD *)&v52 + 1) = v9;
    do
      v20 = __ldxr(v10);
    while (__stxr(v20 + 1, v10));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v52, (uint64_t)this + 16);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v28 = &off_1E25C3080;
  return sub_18D03D0CC((uint64_t)&v35);
}

void sub_18D207C50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_18D07C868(v2 - 104);
  sub_18D07C868(v2 - 120);
  sub_18D03D0CC(v1);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, raven::ActivityInputEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  CoreNavigation::CLP::LogEntry::PrivateData *v12;
  raven::MountStateEvent *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  double v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v24;
  void **v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t shared_weak_owners;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CoreNavigation::CLP::LogEntry::PrivateData *v40;
  raven::MovingStateEvent *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  double v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  CoreNavigation::CLP::LogEntry::PrivateData *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  double v75;
  double v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  double v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  double v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int16 v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;

  v113 = 0uLL;
  v112 = &unk_1E25C2A80;
  LOBYTE(v114) = 0;
  *((_QWORD *)&v114 + 1) = 0;
  *(_QWORD *)&v115 = 0;
  BYTE8(v115) = 0;
  v116 = 0uLL;
  LOBYTE(v117) = 0;
  *((_QWORD *)&v117 + 1) = 0;
  *(_QWORD *)&v118 = 0;
  *((_QWORD *)&v118 + 1) = 0x7FF8000000000000;
  v119 = 0;
  v12 = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToActivityInputEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)&v112, a3, a4, a5, a6, a7, a8, a9, a10);
  if ((_DWORD)v12)
  {
    LOWORD(v95) = 12;
    LOBYTE(v77) = 2;
    v21 = *((double *)&v113 + 1) + (double)(uint64_t)v113;
    if (!*((_QWORD *)a2 + 2))
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v12);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v95, (unsigned __int8 *)&v77, "t,%.3lf,Raising ActivityInputEvent,%d,from protobuf activity type,%d", v14, v15, v16, v17, v18, SLOBYTE(v21));
    v22 = (std::__shared_weak_count *)operator new(0x60uLL);
    v22->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    v22->__shared_weak_owners_ = 0;
    v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
    v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
    v24 = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
    LOBYTE(v22[1].__shared_owners_) = 0;
    v22[1].__shared_weak_owners_ = 0;
    v22[2].__vftable = v24;
    v25 = (void **)&v22[3].__vftable;
    v22[2].__shared_owners_ = 0;
    v22[2].__shared_weak_owners_ = 0;
    sub_18D0778AC(&v22[3].__vftable, "");
    LOBYTE(v22[1].__shared_owners_) = 1;
    v26 = operator new();
    *(_QWORD *)v26 = &off_1E25C1870;
    *(_QWORD *)(v26 + 8) = &unk_1E25C2A80;
    v27 = v118;
    *(_OWORD *)(v26 + 80) = v117;
    *(_OWORD *)(v26 + 96) = v27;
    *(_WORD *)(v26 + 112) = v119;
    v28 = v114;
    *(_OWORD *)(v26 + 16) = v113;
    *(_OWORD *)(v26 + 32) = v28;
    v29 = v116;
    *(_OWORD *)(v26 + 48) = v115;
    *(_OWORD *)(v26 + 64) = v29;
    shared_weak_owners = v22[1].__shared_weak_owners_;
    v22[1].__shared_weak_owners_ = v26;
    if (shared_weak_owners)
      (*(void (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 8))(shared_weak_owners);
    v31 = v112;
    v22[2].__vftable = (std::__shared_weak_count_vtbl *)*(v112 - 1);
    v22[2].__shared_owners_ = ((uint64_t (*)(uint64_t))v31[2])((uint64_t)&v112);
    v22[2].__shared_weak_owners_ = v32;
    ((void (*)(_QWORD *@<X8>))v112[3])(&v95);
    if (SHIBYTE(v22[3].__shared_weak_owners_) < 0)
      operator delete(*v25);
    *(_OWORD *)v25 = v95;
    *(double *)&v22[3].__shared_weak_owners_ = v96;
    v77 = v22 + 1;
    v78 = v22;
    *(_QWORD *)&v95 = v22 + 1;
    *((_QWORD *)&v95 + 1) = v22;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v95, (uint64_t)this + 16);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
    if (*((_QWORD *)&v95 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v78;
    if (v78)
    {
      v38 = (unint64_t *)&v78->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  *((_QWORD *)&v95 + 1) = 0;
  v96 = 0.0;
  *(_QWORD *)&v95 = &unk_1E25C24A0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0x7FF8000000000000;
  v107 = 0;
  v108 = 0x3FF0000000000000;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v40 = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToMountStateEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)&v95, v13, v14, v15, v16, v17, v18, v19, v20);
  if ((_DWORD)v40)
  {
    LOWORD(v77) = 12;
    LOBYTE(v122) = 2;
    v50 = *((_QWORD *)&v95 + 1);
    v49 = v96;
    if (!*((_QWORD *)a2 + 2))
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v40);
    v75 = v49 + (double)v50;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v77, (unsigned __int8 *)&v122, "t,%.3lf,Raising MountStateEvent,%d,from protobuf mounted state,%d", v42, v43, v44, v45, v46, SLOBYTE(v75));
    sub_18D21CFBC(&v77, (uint64_t *)&v95);
    v122 = v77;
    v123 = v78;
    if (v78)
    {
      v51 = (unint64_t *)&v78->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v122, (uint64_t)this + 16);
    v53 = v123;
    if (v123)
    {
      v54 = (unint64_t *)&v123->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v78;
    if (v78)
    {
      v57 = (unint64_t *)&v78->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  v78 = 0;
  v79 = 0.0;
  v77 = (std::__shared_weak_count *)&unk_1E25C26E8;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0x7FF8000000000000;
  v90 = 0;
  v91 = 0x3FF0000000000000;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v59 = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToMovingStateEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)&v77, v41, v42, v43, v44, v45, v46, v47, v48);
  if ((_DWORD)v59)
  {
    LOWORD(v122) = 12;
    LOBYTE(v120) = 2;
    v66 = (uint64_t)v78;
    v65 = v79;
    if (!*((_QWORD *)a2 + 2))
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v59);
    v76 = v65 + (double)v66;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v122, (unsigned __int8 *)&v120, "t,%.3lf,Raising MovingStateEvent,%d,from protobuf activity type,%d", v60, v61, v62, v63, v64, SLOBYTE(v76));
    sub_18D21D27C((uint64_t)&v77, &v122);
    v120 = v122;
    v121 = v123;
    if (v123)
    {
      v67 = (unint64_t *)&v123->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v120, (uint64_t)this + 16);
    v69 = v121;
    if (v121)
    {
      v70 = (unint64_t *)&v121->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = v123;
    if (v123)
    {
      v73 = (unint64_t *)&v123->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
}

void sub_18D208258(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 128);
  sub_18D07C868(v1 - 112);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *a2, raven::FitnessSessionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v19[1] = 0;
  v19[2] = 0;
  v19[0] = (uint64_t)&unk_1E25C2BD8;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0x7FF8000000000000;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0x7FF8000000000000;
  if (raven::ConvertProtobufToFitnessSessionEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *)v19, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    sub_18D21C78C(&v45, v19);
    v43 = v45;
    v44 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v43, (uint64_t)this + 16);
    v13 = v44;
    if (v44)
    {
      v14 = (unint64_t *)&v44->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v46;
    if (v46)
    {
      v17 = (unint64_t *)&v46->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_18D20842C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 48);
  sub_18D07C868(v1 - 32);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *a2, raven::BodyMetricsEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint64_t v40;

  v30 = 0uLL;
  v29 = &unk_1E25C2680;
  LOBYTE(v31) = 0;
  *((_QWORD *)&v31 + 1) = 0;
  *(_QWORD *)&v32 = 0;
  BYTE8(v32) = 0;
  v33 = 0uLL;
  LOBYTE(v34) = 0;
  *((_QWORD *)&v34 + 1) = 0;
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = 0x7FF8000000000000;
  v36 = 0;
  if (raven::ConvertProtobufToBodyMetricsEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *)&v29, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    v11 = (char *)operator new(0x60uLL);
    *((_QWORD *)v11 + 1) = 0;
    v12 = (unint64_t *)(v11 + 8);
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &unk_1E25CCE50;
    *((_QWORD *)v11 + 3) = &unk_1E25B8C58;
    v13 = MEMORY[0x1E0DE4F20];
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = v13;
    v14 = (void **)(v11 + 72);
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    sub_18D0778AC((_QWORD *)v11 + 9, "");
    v11[32] = 1;
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E25C17B0;
    *(_QWORD *)(v15 + 8) = &unk_1E25C2680;
    v16 = v35;
    *(_OWORD *)(v15 + 80) = v34;
    *(_OWORD *)(v15 + 96) = v16;
    *(_BYTE *)(v15 + 112) = v36;
    v17 = v31;
    *(_OWORD *)(v15 + 16) = v30;
    *(_OWORD *)(v15 + 32) = v17;
    v18 = v33;
    *(_OWORD *)(v15 + 48) = v32;
    *(_OWORD *)(v15 + 64) = v18;
    v19 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v29;
    *((_QWORD *)v11 + 6) = *(v29 - 1);
    *((_QWORD *)v11 + 7) = ((uint64_t (*)(uint64_t))v20[2])((uint64_t)&v29);
    *((_QWORD *)v11 + 8) = v21;
    ((void (*)(_QWORD *@<X8>))v29[3])(&v39);
    if (v11[95] < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = v39;
    *((_QWORD *)v11 + 11) = v40;
    v37 = v11 + 24;
    v38 = (std::__shared_weak_count *)v11;
    *(_QWORD *)&v39 = v11 + 24;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v22 = __ldxr(v12);
    while (__stxr(v22 + 1, v12));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v39, (uint64_t)this + 16);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_18D208690(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 88);
  sub_18D07C868(v1 - 104);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *a2, raven::SignalEnvironmentEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v19[1] = 0;
  v19[2] = 0;
  v19[0] = &unk_1E25C2FC8;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0x7FF8000000000000;
  v30 = 0;
  if (raven::ConvertProtobufToSignalEnvironmentEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *)v19, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    sub_18D166584((uint64_t)v19, &v33);
    v31 = v33;
    v32 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v31, (uint64_t)this + 16);
    v13 = v32;
    if (v32)
    {
      v14 = (unint64_t *)&v32->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v34;
    if (v34)
    {
      v17 = (unint64_t *)&v34->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_18D208814(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 48);
  sub_18D07C868(v1 - 32);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::StepCount *a2, raven::StepCountEvent *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int64x2_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v12[1] = 0;
  v12[2] = 0;
  v12[0] = (uint64_t)&unk_1E25C23D8;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0x7FF8000000000000;
  v23 = 0;
  v24 = vdupq_n_s64(0x7FF8000000000000uLL);
  v25 = 0x7FF8000000000000;
  v26 = 0;
  v27 = 0x7FF8000000000000;
  v28 = 0xFFFFFFFFLL;
  if (raven::ConvertProtobufToStepCountEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::StepCount *)v12, a3))
  {
    sub_18D21FFB8(&v31, v12);
    v29 = v31;
    v30 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v29, (uint64_t)this + 16);
    v6 = v30;
    if (v30)
    {
      v7 = (unint64_t *)&v30->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = v32;
    if (v32)
    {
      v10 = (unint64_t *)&v32->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_18D208968(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 48);
  sub_18D07C868(v1 - 32);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *a2, raven::TunnelBridgeNotificationEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v19[1] = 0;
  v19[2] = 0;
  v19[0] = (uint64_t)&unk_1E25C38D8;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0x7FF8000000000000;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v42 = v41;
  v43 = 0;
  if (raven::ConvertProtobufToTunnelBridgeNotificationEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *)v19, a3, a4, a5, a6, a7, a8, v41, a10))
  {
    sub_18D21F0B8(&v46, v19);
    v44 = v46;
    v45 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v44, (uint64_t)this + 16);
    v13 = v45;
    if (v45)
    {
      v14 = (unint64_t *)&v45->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v47;
    if (v47)
    {
      v17 = (unint64_t *)&v47->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_18D208AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 48);
  sub_18D07C868(v1 - 32);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *a2, raven::TunnelEndPointAssistanceEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  v19[1] = 0;
  v19[2] = 0;
  v19[0] = (uint64_t)&unk_1E25C3908;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0x7FF8000000000000;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v42 = v41;
  v43 = v41;
  v44 = 0;
  if (raven::ConvertProtobufToTunnelEndPointAssistanceEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *)v19, a3, a4, a5, a6, a7, a8, v41, a10))
  {
    sub_18D21F7B0(&v47, v19);
    v45 = v47;
    v46 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v45, (uint64_t)this + 16);
    v13 = v46;
    if (v46)
    {
      v14 = (unint64_t *)&v46->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v48;
    if (v48)
    {
      v17 = (unint64_t *)&v48->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_18D208C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 48);
  sub_18D07C868(v1 - 32);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(uint64_t a1, cnprint::CNPrinter *a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  char *v6;
  unint64_t *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  char *v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  uint64_t v35;

  v25 = 0uLL;
  v24 = &unk_1E25C2CC8;
  LOBYTE(v26) = 0;
  *((_QWORD *)&v26 + 1) = 0;
  *(_QWORD *)&v27 = 0;
  BYTE8(v27) = 0;
  v28 = 0uLL;
  LOBYTE(v29) = 0;
  *((_QWORD *)&v29 + 1) = 0;
  *(_QWORD *)&v30 = 0;
  *((_QWORD *)&v30 + 1) = 0x7FF8000000000000;
  v31 = 0;
  if (raven::ConvertProtobufToARSessionStatusEvent(a2, a3, (uint64_t)&v24, a4, a5))
  {
    v6 = (char *)operator new(0x60uLL);
    *((_QWORD *)v6 + 1) = 0;
    v7 = (unint64_t *)(v6 + 8);
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = &unk_1E25CCE50;
    *((_QWORD *)v6 + 3) = &unk_1E25B8C58;
    v8 = MEMORY[0x1E0DE4F20];
    v6[32] = 0;
    *((_QWORD *)v6 + 5) = 0;
    *((_QWORD *)v6 + 6) = v8;
    v9 = (void **)(v6 + 72);
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    sub_18D0778AC((_QWORD *)v6 + 9, "");
    v6[32] = 1;
    v10 = operator new();
    *(_QWORD *)v10 = &off_1E25C1A50;
    *(_QWORD *)(v10 + 8) = &unk_1E25C2CC8;
    v11 = v30;
    *(_OWORD *)(v10 + 80) = v29;
    *(_OWORD *)(v10 + 96) = v11;
    *(_BYTE *)(v10 + 112) = v31;
    v12 = v26;
    *(_OWORD *)(v10 + 16) = v25;
    *(_OWORD *)(v10 + 32) = v12;
    v13 = v28;
    *(_OWORD *)(v10 + 48) = v27;
    *(_OWORD *)(v10 + 64) = v13;
    v14 = *((_QWORD *)v6 + 5);
    *((_QWORD *)v6 + 5) = v10;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v24;
    *((_QWORD *)v6 + 6) = *(v24 - 1);
    *((_QWORD *)v6 + 7) = ((uint64_t (*)(uint64_t))v15[2])((uint64_t)&v24);
    *((_QWORD *)v6 + 8) = v16;
    ((void (*)(_QWORD *@<X8>))v24[3])(&v34);
    if (v6[95] < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v34;
    *((_QWORD *)v6 + 11) = v35;
    v32 = v6 + 24;
    v33 = (std::__shared_weak_count *)v6;
    *(_QWORD *)&v34 = v6 + 24;
    *((_QWORD *)&v34 + 1) = v6;
    do
      v17 = __ldxr(v7);
    while (__stxr(v17 + 1, v7));
    cnframework::Supervisor::RaiseEvent(a1, &v34, a1 + 16);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_18D208E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 88);
  sub_18D07C868(v1 - 104);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *a2)
{
  raven::VIOEstimateEvent *v4;
  int8x16_t v5;
  int8x16_t v6;
  char *v7;
  unint64_t *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void (**v16)(raven::VIOEstimateEvent *__hidden);
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void (**v25)(raven::VIOEstimateEvent *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _WORD v57[221];
  char v58;
  char *v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  uint64_t v62;

  v26 = 0uLL;
  v25 = &off_1E25C27B8;
  LOBYTE(v27) = 0;
  *((_QWORD *)&v27 + 1) = 0;
  *(_QWORD *)&v28 = 0;
  BYTE8(v28) = 0;
  v29 = 0uLL;
  LOBYTE(v30) = 0;
  *((_QWORD *)&v30 + 1) = 0;
  *(_QWORD *)&v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  *((_QWORD *)&v31 + 1) = 0x7FF8000000000000;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0x7FF8000000000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0x7FF8000000000000;
  v55 = 0;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v56);
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v57);
  v57[220] = 0;
  v58 = 0;
  if (raven::ConvertProtobufToVIOEstimateEvent(a2, (const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *)&v25, v4, v5, v6))
  {
    v7 = (char *)operator new(0x60uLL);
    *((_QWORD *)v7 + 1) = 0;
    v8 = (unint64_t *)(v7 + 8);
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &unk_1E25CCE50;
    *((_QWORD *)v7 + 3) = &unk_1E25B8C58;
    v9 = MEMORY[0x1E0DE4F20];
    v7[32] = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = v9;
    v10 = (void **)(v7 + 72);
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    sub_18D0778AC((_QWORD *)v7 + 9, "");
    v7[32] = 1;
    v11 = operator new();
    *(_QWORD *)v11 = &off_1E25C1810;
    *(_QWORD *)(v11 + 8) = &off_1E25C27B8;
    v12 = v29;
    *(_OWORD *)(v11 + 48) = v28;
    *(_OWORD *)(v11 + 64) = v12;
    v13 = v31;
    *(_OWORD *)(v11 + 80) = v30;
    *(_OWORD *)(v11 + 96) = v13;
    v14 = v27;
    *(_OWORD *)(v11 + 16) = v26;
    *(_OWORD *)(v11 + 32) = v14;
    sub_18D215D54(v11 + 112, (uint64_t)v32);
    v15 = *((_QWORD *)v7 + 5);
    *((_QWORD *)v7 + 5) = v11;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v25;
    *((_QWORD *)v7 + 6) = *(v25 - 1);
    *((_QWORD *)v7 + 7) = ((uint64_t (*)(uint64_t))v16[2])((uint64_t)&v25);
    *((_QWORD *)v7 + 8) = v17;
    ((void (*)(_QWORD *@<X8>))v25[3])(&v61);
    if (v7[95] < 0)
      operator delete(*v10);
    *(_OWORD *)v10 = v61;
    *((_QWORD *)v7 + 11) = v62;
    v59 = v7 + 24;
    v60 = (std::__shared_weak_count *)v7;
    *(_QWORD *)&v61 = v7 + 24;
    *((_QWORD *)&v61 + 1) = v7;
    do
      v18 = __ldxr(v8);
    while (__stxr(v18 + 1, v8));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v61, (uint64_t)this + 16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_18D2091A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 104);
  sub_18D07C868(v1 - 120);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult *a2, const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *a3)
{
  raven::VLLocalizationEvent *v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int64x2_t v14;
  int8x16_t v15;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  double v22;
  int8x16_t v23;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  int8x16_t v39;
  uint64_t v40;
  double v41;
  char *v42;
  unint64_t *v43;
  uint64_t v44;
  void **v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  double v57;
  void *v58;
  int8x16_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int8x16_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[3];
  int v72;
  char v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  _BYTE v80[7];
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  double v85;
  _QWORD v86[3];
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x16_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  int64x2_t *v105;
  int v106;
  uint64_t v107;
  char v108;
  int8x16_t v109;
  _QWORD v110[2];
  int8x16_t v111;
  int8x16_t v112;
  char *v113;
  double v114;
  int8x16_t v115;
  uint64_t v116;

  v86[1] = 0;
  v86[2] = 0;
  v86[0] = &off_1E25C2C98;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v97 = 0uLL;
  v96 = 0x7FF8000000000000;
  LOBYTE(v98) = 0;
  *(_QWORD *)&v99 = 0;
  *((_QWORD *)&v98 + 1) = 0;
  BYTE8(v99) = 0;
  v100 = 0uLL;
  LOBYTE(v101) = 0;
  *((_QWORD *)&v101 + 1) = 0;
  *(_QWORD *)&v102 = 0;
  *((_QWORD *)&v102 + 1) = 0x7FF8000000000000;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v103);
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v104);
  v108 = 0;
  v109 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  if (!raven::ConvertProtobufToVLLocalizationEvent(a2, a3, (const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)v86, v6, v109, v7))return;
  if (*(double *)v109.i64 < *((double *)this + 983))
  {
    LOWORD(v58) = 12;
    v115.i8[0] = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, (unsigned __int8 *)&v115, "Ignoring current VL localization event with low confidence level: %.3lf < %.3lf min", v8, v9, v10, v11, v12, v109.i8[0]);
    return;
  }
  v13.i64[0] = *((_QWORD *)this + 688);
  v109.i64[1] = v13.i64[0];
  v59 = 0uLL;
  v58 = &unk_1E25C21B8;
  LOBYTE(v60) = 0;
  *((_QWORD *)&v60 + 1) = 0;
  *(_QWORD *)&v61 = 0;
  BYTE8(v61) = 0;
  v62 = 0uLL;
  LOBYTE(v63) = 0;
  *((_QWORD *)&v63 + 1) = 0;
  *(_QWORD *)&v64 = 0;
  v65 = 0uLL;
  *((_QWORD *)&v64 + 1) = 0x7FF8000000000000;
  LOBYTE(v66) = 0;
  *((_QWORD *)&v66 + 1) = 0;
  *(_QWORD *)&v67 = 0;
  BYTE8(v67) = 0;
  v68 = 0uLL;
  LOBYTE(v69) = 0;
  *((_QWORD *)&v69 + 1) = 0;
  *(_QWORD *)&v70 = 0;
  *((_QWORD *)&v70 + 1) = 0x7FF8000000000000;
  memset(v71, 0, sizeof(v71));
  v14 = vdupq_n_s64(0x7FF8000000000000uLL);
  v74 = v14;
  v75 = v14;
  v76 = v14;
  v77 = v14;
  v78 = 0x7FF8000000000000;
  v79 = 0;
  v81 = v14;
  v82 = v14;
  v83 = v14;
  v84 = v14;
  v85 = NAN;
  if (v108)
  {
    v74 = v14;
    v75 = v14;
    v76 = v14;
    v77 = v14;
    v81 = v14;
    v82 = v14;
    v83 = v14;
    v84 = v14;
    v59 = v97;
    v60 = v98;
    v63 = v101;
    v64 = v102;
    v61 = v99;
    v62 = v100;
    v73 = 0;
    v72 = 0;
    memset(v80, 0, sizeof(v80));
    *(_WORD *)&v71[1] = 0;
    v78 = 0x7FF8000000000000;
    v85 = NAN;
    v65 = v97;
    v66 = v98;
    v15.i64[1] = *((_QWORD *)&v102 + 1);
    v69 = v101;
    v70 = v102;
    v67 = v99;
    v68 = v100;
    v71[0] = 14;
    v79 = 1;
    v81 = *v105;
    v82.i64[0] = v105[1].i64[0];
    v82.i64[1] = *(_QWORD *)v107;
    v83 = *(int64x2_t *)(v107 + 8);
    v84.i64[0] = *(_QWORD *)(v107 + 8 * (v106 + 1));
    v84.i64[1] = *(_QWORD *)(v107 + 8 * (v106 + 2));
    v85 = *(double *)(v107 + 8 * (2 * v106 + 2));
    v15.i64[0] = 0;
    if (*(double *)v13.i64 >= 2.0
      || *(double *)v13.i64 <= 0.0
      || (v13.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      *(double *)v13.i64 = 0.0;
    }
    v113 = 0;
    v114 = 0.0;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v113, 0, v13, v15);
    v111 = v97;
    v110[0] = (*(uint64_t (**)(uint64_t))(v86[0] + 16))((uint64_t)v86);
    v110[1] = v18;
    *(double *)v21.i64 = (double)CNTimeSpan::operator-((uint64_t)&v111, v110, v19, v20);
    *(double *)v23.i64 = fabs(v22 + *(double *)v21.i64);
    v115 = 0uLL;
    v24 = CNTimeSpan::SetTimeSpan(v115.i64, 0, v23, v21);
    v25 = v115.i64[0];
    v112 = v115;
    v26 = *(double *)&v115.i64[1];
    if (v115.i64[0] == 2)
    {
      if (*(double *)&v115.i64[1] > 0.0)
        goto LABEL_19;
    }
    else if (v115.i64[0])
    {
      if (v115.i64[0] >= 3)
        goto LABEL_19;
    }
    else if ((v115.i64[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (*(double *)&v115.i64[1] <= 0.0)
        goto LABEL_25;
LABEL_19:
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v24) <= 1)
      {
        v115.i16[0] = 12;
        v111.i8[0] = 1;
        v27 = (*(uint64_t (**)(uint64_t))(v86[0] + 16))((uint64_t)v86);
        v57 = v28 + (double)v27;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v115, (unsigned __int8 *)&v111, "VLLocalizationEvent, VL localization position too old to use, t_event,%.3lf, t_vl,%.3lf, dt,%.3lf > %.3lf ", v29, v30, v31, v32, v33, SLOBYTE(v57));
      }
      goto LABEL_40;
    }
    if (!v113)
    {
      v34 = v114;
      if ((*(_QWORD *)&v114 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_26:
        if (v34 >= *(double *)&v115.i64[1])
          goto LABEL_36;
LABEL_29:
        v35 = *(double *)&v97.i64[1];
        v36 = v97.i64[0];
        v37 = (*(uint64_t (**)(uint64_t))(v86[0] + 16))((uint64_t)v86);
        if ((v36 || (*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (v37 || (*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && v36 != v37)
        {
          if (v36 >= v37)
            goto LABEL_36;
          goto LABEL_35;
        }
        if (v35 < v38)
        {
LABEL_35:
          v69 = 0u;
          v68 = 0u;
          v67 = 0u;
          v66 = 0u;
          *(_QWORD *)&v70 = 0;
          *((_QWORD *)&v70 + 1) = 0x7FF8000000000000;
          v115 = v97;
          v65.i64[0] = CNTimeSpan::operator+((uint64_t)&v115, &v112, v97, v39);
          v65.i64[1] = v40;
          v59.i64[0] = v65.i64[0];
          v59.i64[1] = v40;
          v41 = ((double)v25 + v26) * 2.5 * (((double)v25 + v26) * 2.5);
          *(double *)&v82.i64[1] = v41 + *(double *)&v82.i64[1];
          *(double *)v84.i64 = v41 + *(double *)v84.i64;
          v85 = v41 + v85;
        }
LABEL_36:
        if (sub_18D20C258((uint64_t)&v58))
          sub_18D20C508((uint64_t)&v58);
        if (v71[1] | v79)
          sub_18D2073B4((uint64_t)this, (uint64_t)&v58);
        goto LABEL_40;
      }
    }
    if ((char *)v115.i64[0] != v113)
    {
      if (v115.i64[0] <= (uint64_t)v113)
        goto LABEL_36;
      goto LABEL_29;
    }
LABEL_25:
    v34 = v114;
    goto LABEL_26;
  }
LABEL_40:
  v42 = (char *)operator new(0x60uLL);
  *((_QWORD *)v42 + 1) = 0;
  v43 = (unint64_t *)(v42 + 8);
  *((_QWORD *)v42 + 2) = 0;
  *(_QWORD *)v42 = &unk_1E25CCE50;
  *((_QWORD *)v42 + 3) = &unk_1E25B8C58;
  v44 = MEMORY[0x1E0DE4F20];
  v42[32] = 0;
  *((_QWORD *)v42 + 5) = 0;
  *((_QWORD *)v42 + 6) = v44;
  v45 = (void **)(v42 + 72);
  *((_QWORD *)v42 + 7) = 0;
  *((_QWORD *)v42 + 8) = 0;
  sub_18D0778AC((_QWORD *)v42 + 9, "");
  v42[32] = 1;
  v46 = (_QWORD *)operator new();
  *v46 = &off_1E25C1A20;
  sub_18D216190((uint64_t)(v46 + 1), (uint64_t)v86);
  v47 = *((_QWORD *)v42 + 5);
  *((_QWORD *)v42 + 5) = v46;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v86[0];
  *((_QWORD *)v42 + 6) = *(_QWORD *)(v86[0] - 8);
  *((_QWORD *)v42 + 7) = (*(uint64_t (**)(uint64_t))(v48 + 16))((uint64_t)v86);
  *((_QWORD *)v42 + 8) = v49;
  (*(void (**)(_QWORD *@<X8>))(v86[0] + 24))(&v115);
  if (v42[95] < 0)
    operator delete(*v45);
  *(int8x16_t *)v45 = v115;
  *((_QWORD *)v42 + 11) = v116;
  v113 = v42 + 24;
  v114 = *(double *)&v42;
  v115.i64[0] = (uint64_t)(v42 + 24);
  v115.i64[1] = (uint64_t)v42;
  do
    v50 = __ldxr(v43);
  while (__stxr(v50 + 1, v43));
  cnframework::Supervisor::RaiseEvent((uint64_t)this, &v115, (uint64_t)this + 16);
  v51 = (std::__shared_weak_count *)v115.i64[1];
  if (v115.i64[1])
  {
    v52 = (unint64_t *)(v115.i64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(std::__shared_weak_count **)&v114;
  if (v114 != 0.0)
  {
    v55 = (unint64_t *)(*(_QWORD *)&v114 + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_18D209920(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 112);
  sub_18D07C868(v1 - 128);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *a2, const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *a3, raven::RavenGnssAssistanceFileEvent *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  void (**v22)(raven::RavenGnssAssistanceFileEvent *__hidden);
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  char v31;
  void (**v32)(raven::RavenGnssAssistanceFileEvent *__hidden);
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p[2];
  uint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  uint64_t v45;

  if (*((_BYTE *)this + 7216))
  {
    v33 = 0uLL;
    v32 = &off_1E25C37F0;
    LOBYTE(v34) = 0;
    *((_QWORD *)&v34 + 1) = 0;
    *(_QWORD *)&v35 = 0;
    BYTE8(v35) = 0;
    v36 = 0uLL;
    LOBYTE(v37) = 0;
    *((_QWORD *)&v37 + 1) = 0;
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = 0x7FF8000000000000;
    v39 = 0u;
    *(_OWORD *)__p = 0u;
    v41 = 0;
    if (raven::ConvertProtobufToRavenGnssAssistanceFileEvent(a2, a3, (const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)&v32, a4))
    {
      v10 = (char *)operator new(0x60uLL);
      *((_QWORD *)v10 + 1) = 0;
      v11 = (unint64_t *)(v10 + 8);
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = &unk_1E25CCE50;
      *((_QWORD *)v10 + 3) = &unk_1E25B8C58;
      v12 = MEMORY[0x1E0DE4F20];
      v10[32] = 0;
      *((_QWORD *)v10 + 5) = 0;
      *((_QWORD *)v10 + 6) = v12;
      v13 = (void **)(v10 + 72);
      *((_QWORD *)v10 + 7) = 0;
      *((_QWORD *)v10 + 8) = 0;
      sub_18D0778AC((_QWORD *)v10 + 9, "");
      v10[32] = 1;
      v14 = operator new();
      *(_QWORD *)v14 = &off_1E25C1CC0;
      *(_QWORD *)(v14 + 8) = &off_1E25C37F0;
      v15 = v38;
      *(_OWORD *)(v14 + 80) = v37;
      *(_OWORD *)(v14 + 96) = v15;
      *(_OWORD *)(v14 + 112) = v39;
      v16 = v34;
      *(_OWORD *)(v14 + 16) = v33;
      *(_OWORD *)(v14 + 32) = v16;
      v17 = v36;
      *(_OWORD *)(v14 + 48) = v35;
      *(_OWORD *)(v14 + 64) = v17;
      v18 = (char *)__p[0];
      v19 = (char *)__p[1];
      v20 = ((char *)__p[1] - (char *)__p[0]) >> 6;
      *(_QWORD *)(v14 + 136) = 0;
      *(_QWORD *)(v14 + 144) = 0;
      *(_QWORD *)(v14 + 128) = 0;
      sub_18D219C48((_QWORD *)(v14 + 128), v18, v19, 0x80FE03F80FE03F81 * v20);
      v21 = *((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = v14;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v22 = v32;
      *((_QWORD *)v10 + 6) = *(v32 - 1);
      *((_QWORD *)v10 + 7) = ((uint64_t (*)(uint64_t))v22[2])((uint64_t)&v32);
      *((_QWORD *)v10 + 8) = v23;
      ((void (*)(_QWORD *@<X8>))v32[3])(&v44);
      if (v10[95] < 0)
        operator delete(*v13);
      *(_OWORD *)v13 = v44;
      *((_QWORD *)v10 + 11) = v45;
      v42 = v10 + 24;
      v43 = (std::__shared_weak_count *)v10;
      *(_QWORD *)&v44 = v10 + 24;
      *((_QWORD *)&v44 + 1) = v10;
      do
        v24 = __ldxr(v11);
      while (__stxr(v24 + 1, v11));
      cnframework::Supervisor::RaiseEvent((uint64_t)this, &v44, (uint64_t)this + 16);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    else
    {
      LOWORD(v44) = 12;
      LOBYTE(v42) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, (unsigned __int8 *)&v42, "#rof,Convert protobuf to event failed", v5, v6, v7, v8, v9, v31);
    }
    v32 = &off_1E25C37F0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_18D209C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D209D20(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 547;
  *(_QWORD *)a1 = &unk_1E25C4B70;
  sub_18D0778AC((_QWORD *)(a1 + 8), "");
  *(_QWORD *)a1 = &off_1E25C2540;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 33) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = xmmword_18D318690;
  *(_OWORD *)(a1 + 88) = xmmword_18D3186A0;
  *(_OWORD *)(a1 + 104) = xmmword_18D3186B0;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_OWORD *)(a1 + 136) = xmmword_18D3186B0;
  *(_OWORD *)(a1 + 152) = xmmword_18D3186A0;
  *(_OWORD *)(a1 + 168) = xmmword_18D3186B0;
  *(int64x2_t *)(a1 + 184) = vdupq_n_s64(0x3F9B573EAB367A10uLL);
  *(_OWORD *)(a1 + 200) = xmmword_18D3186B0;
  *(_OWORD *)(a1 + 216) = xmmword_18D3186A0;
  *(_OWORD *)(a1 + 232) = xmmword_18D3186B0;
  *(_OWORD *)(a1 + 248) = xmmword_18D3186C0;
  *(_QWORD *)(a1 + 264) = 0x3FF0000000000000;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 272) = _Q2;
  *(_OWORD *)(a1 + 288) = xmmword_18D3186D0;
  *(_OWORD *)(a1 + 304) = xmmword_18D3186E0;
  *(_OWORD *)(a1 + 320) = xmmword_18D3186F0;
  *(_OWORD *)(a1 + 336) = xmmword_18D318700;
  *(_OWORD *)(a1 + 352) = xmmword_18D318710;
  *(_OWORD *)(a1 + 368) = xmmword_18D318720;
  *(_OWORD *)(a1 + 384) = xmmword_18D318730;
  *(_OWORD *)(a1 + 400) = xmmword_18D318740;
  *(_QWORD *)(a1 + 416) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 424) = 2;
  *(_OWORD *)(a1 + 432) = xmmword_18D318750;
  *(_OWORD *)(a1 + 448) = xmmword_18D318760;
  *(_OWORD *)(a1 + 464) = xmmword_18D318770;
  *(_OWORD *)(a1 + 480) = xmmword_18D318780;
  *(_OWORD *)(a1 + 496) = xmmword_18D318790;
  *(_OWORD *)(a1 + 512) = xmmword_18D3187A0;
  *(_OWORD *)(a1 + 528) = xmmword_18D3187B0;
  *(_WORD *)(a1 + 544) = 257;
  *(_BYTE *)(a1 + 546) = 1;
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(a1 + 551) = 1;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_18D3187C0;
  *(_DWORD *)(a1 + 576) = 0x1000000;
  *(_BYTE *)(a1 + 580) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_WORD *)(a1 + 588) = 256;
  *(_BYTE *)(a1 + 590) = 1;
  *(_DWORD *)(a1 + 592) = 16843009;
  *(_WORD *)(a1 + 596) = 1;
  *(_QWORD *)(a1 + 598) = 0x101010101010101;
  *(_QWORD *)(a1 + 603) = 0x101010101010101;
  *(_DWORD *)(a1 + 612) = 1096810496;
  *(_QWORD *)(a1 + 616) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 624) = xmmword_18D3187D0;
  *(_WORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 648) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 656) = xmmword_18D3187E0;
  *(_OWORD *)(a1 + 672) = xmmword_18D3187F0;
  *(_OWORD *)(a1 + 688) = xmmword_18D318800;
  *(_OWORD *)(a1 + 704) = xmmword_18D318810;
  *(_OWORD *)(a1 + 720) = xmmword_18D318820;
  *(_OWORD *)(a1 + 736) = xmmword_18D318830;
  *(_OWORD *)(a1 + 752) = xmmword_18D318840;
  *(_OWORD *)(a1 + 768) = xmmword_18D318850;
  *(_OWORD *)(a1 + 784) = xmmword_18D318860;
  *(_OWORD *)(a1 + 800) = xmmword_18D318870;
  *(_QWORD *)(a1 + 816) = 0x3DB5FD7FE1796495;
  *(_DWORD *)(a1 + 824) = 2;
  *(_QWORD *)(a1 + 832) = 0x3FE0000000000000;
  *(_WORD *)(a1 + 840) = 256;
  *(_OWORD *)(a1 + 848) = xmmword_18D318880;
  *(_OWORD *)(a1 + 864) = xmmword_18D318890;
  *(_OWORD *)(a1 + 880) = xmmword_18D3188A0;
  *(_OWORD *)(a1 + 896) = xmmword_18D3188B0;
  *(_OWORD *)(a1 + 912) = xmmword_18D3188C0;
  *(_OWORD *)(a1 + 928) = xmmword_18D3188D0;
  *(_OWORD *)(a1 + 944) = xmmword_18D3188E0;
  *(_OWORD *)(a1 + 960) = xmmword_18D3188F0;
  *(_QWORD *)(a1 + 976) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 984) = 350;
  *(_OWORD *)(a1 + 992) = xmmword_18D318900;
  *(_OWORD *)(a1 + 1008) = xmmword_18D318910;
  *(_QWORD *)(a1 + 1024) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 1032) = 3;
  *(_OWORD *)(a1 + 1040) = xmmword_18D318920;
  *(_OWORD *)(a1 + 1056) = xmmword_18D318930;
  *(_OWORD *)(a1 + 1072) = xmmword_18D318940;
  *(_OWORD *)(a1 + 1088) = _Q2;
  *(_OWORD *)(a1 + 1104) = xmmword_18D318950;
  *(_OWORD *)(a1 + 1120) = xmmword_18D318960;
  *(_OWORD *)(a1 + 1136) = xmmword_18D318970;
  *(_OWORD *)(a1 + 1152) = xmmword_18D318980;
  *(_OWORD *)(a1 + 1168) = xmmword_18D318990;
  *(_QWORD *)(a1 + 1184) = 0x4018000000000000;
  *(_DWORD *)(a1 + 1192) = 3;
  *(_OWORD *)(a1 + 1200) = xmmword_18D3189A0;
  *(_OWORD *)(a1 + 1216) = xmmword_18D3189B0;
  *(_OWORD *)(a1 + 1232) = xmmword_18D3189C0;
  *(_OWORD *)(a1 + 1248) = xmmword_18D3189D0;
  *(_OWORD *)(a1 + 1264) = xmmword_18D3189A0;
  *(_DWORD *)(a1 + 1280) = 6;
  *(_QWORD *)(a1 + 1288) = 0x4000000000000000;
  *(_DWORD *)(a1 + 1296) = 6;
  *(_QWORD *)(a1 + 1304) = 0x4000000000000000;
  *(_DWORD *)(a1 + 1312) = 2;
  *(_QWORD *)(a1 + 1320) = 0x4000000000000000;
  *(_OWORD *)(a1 + 1328) = xmmword_18D3189E0;
  *(_OWORD *)(a1 + 1344) = xmmword_18D3189F0;
  *(_OWORD *)(a1 + 1360) = xmmword_18D318A00;
  *(_OWORD *)(a1 + 1376) = xmmword_18D318A10;
  __asm { FMOV            V2.2D, #6.0 }
  *(_OWORD *)(a1 + 1392) = _Q2;
  *(_OWORD *)(a1 + 1408) = xmmword_18D318A20;
  __asm { FMOV            V2.2D, #3.0 }
  *(_OWORD *)(a1 + 1424) = _Q2;
  *(_OWORD *)(a1 + 1440) = _Q2;
  *(_OWORD *)(a1 + 1456) = xmmword_18D318A30;
  *(_DWORD *)(a1 + 1472) = 2;
  *(_QWORD *)(a1 + 1480) = 0x4024000000000000;
  *(int64x2_t *)(a1 + 1488) = vdupq_n_s64(0x3FE0CCCCCCCCCCCDuLL);
  *(_OWORD *)(a1 + 1504) = xmmword_18D318A40;
  *(_OWORD *)(a1 + 1520) = xmmword_18D318A50;
  *(_OWORD *)(a1 + 1536) = xmmword_18D318A60;
  *(int64x2_t *)(a1 + 1552) = vdupq_n_s64(0x4066800000000000uLL);
  *(_OWORD *)(a1 + 1568) = xmmword_18D318A70;
  *(_OWORD *)(a1 + 1584) = xmmword_18D318A80;
  *(_OWORD *)(a1 + 1600) = xmmword_18D318A90;
  *(_OWORD *)(a1 + 1616) = xmmword_18D318AA0;
  *(_OWORD *)(a1 + 1632) = xmmword_18D318AB0;
  *(_QWORD *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1656) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 1672) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 1688) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 1704) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 1720) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 1736) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 1752) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 1768) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 1784) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 1800) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 1816) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 1832) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 1848) = xmmword_18D31CF90;
  *(_OWORD *)(a1 + 1864) = unk_18D31CFA0;
  *(_OWORD *)(a1 + 1880) = xmmword_18D31CF70;
  *(_OWORD *)(a1 + 1896) = unk_18D31CF80;
  *(_OWORD *)(a1 + 1912) = xmmword_18D31CF90;
  *(_OWORD *)(a1 + 1928) = unk_18D31CFA0;
  *(_OWORD *)(a1 + 1944) = xmmword_18D31CFB0;
  *(_OWORD *)(a1 + 1960) = unk_18D31CFC0;
  *(_OWORD *)(a1 + 1976) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 1992) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 2008) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 2024) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 2040) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 2056) = unk_18D31CFE0;
  *(_OWORD *)(a1 + 2072) = xmmword_18D31CFD0;
  *(_OWORD *)(a1 + 2088) = unk_18D31CFE0;
  *(_BYTE *)(a1 + 2104) = 0;
  *(_OWORD *)(a1 + 2112) = xmmword_18D318AC0;
  *(_OWORD *)(a1 + 2128) = xmmword_18D318AD0;
  *(_OWORD *)(a1 + 2144) = xmmword_18D318A30;
  *(_OWORD *)(a1 + 2160) = xmmword_18D318AE0;
  *(_OWORD *)(a1 + 2176) = xmmword_18D318AF0;
  *(_WORD *)(a1 + 2192) = 0;
  *(_QWORD *)(a1 + 2200) = 0x4034000000000000;
  *(_DWORD *)(a1 + 2208) = 0;
  *(_QWORD *)(a1 + 2216) = 0x404E000000000000;
  *(_OWORD *)(a1 + 2224) = xmmword_18D318B00;
  *(_OWORD *)(a1 + 2240) = xmmword_18D318B10;
  *(_OWORD *)(a1 + 2256) = xmmword_18D318B20;
  *(_QWORD *)(a1 + 2272) = 0x3FE3333333333333;
  *(_DWORD *)(a1 + 2280) = 1;
  *(int64x2_t *)(a1 + 2288) = vdupq_n_s64(0x3FE3333333333333uLL);
  *(_WORD *)(a1 + 2304) = 0;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_QWORD *)(a1 + 2352) = 0x3FD51EB851EB851FLL;
  *(_OWORD *)(a1 + 2360) = xmmword_18D31CFF0;
  *(_OWORD *)(a1 + 2376) = unk_18D31D000;
  *(_WORD *)(a1 + 2392) = 257;
  *(_BYTE *)(a1 + 2394) = 1;
  *(_OWORD *)(a1 + 2400) = xmmword_18D31D010;
  *(_OWORD *)(a1 + 2416) = unk_18D31D020;
  *(_OWORD *)(a1 + 2432) = xmmword_18D318B30;
  *(_OWORD *)(a1 + 2448) = xmmword_18D318B40;
  *(_OWORD *)(a1 + 2464) = xmmword_18D318B50;
  __asm { FMOV            V1.2D, #0.5 }
  *(_OWORD *)(a1 + 2480) = _Q1;
  *(int64x2_t *)(a1 + 2496) = vdupq_n_s64(0x3FEE666666666666uLL);
  *(_OWORD *)(a1 + 2512) = xmmword_18D318B60;
  *(_OWORD *)(a1 + 2528) = xmmword_18D318B70;
  *(_BYTE *)(a1 + 2544) = 1;
  *(_QWORD *)(a1 + 2552) = 0x40BC200000000000;
  *(_WORD *)(a1 + 2560) = 1;
  *(_BYTE *)(a1 + 2562) = 0;
  *(_QWORD *)(a1 + 2568) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2576) = xmmword_18D31D120;
  *(_OWORD *)(a1 + 2640) = xmmword_18D31D160;
  *(_OWORD *)(a1 + 2656) = xmmword_18D31D030;
  *(_OWORD *)(a1 + 2720) = xmmword_18D31D070;
  *(_OWORD *)(a1 + 2704) = unk_18D31D060;
  *(_OWORD *)(a1 + 2624) = unk_18D31D150;
  *(_OWORD *)(a1 + 2608) = xmmword_18D31D140;
  *(_OWORD *)(a1 + 2592) = *(_OWORD *)algn_18D31D130;
  *(_OWORD *)(a1 + 2688) = xmmword_18D31D050;
  *(_OWORD *)(a1 + 2672) = unk_18D31D040;
  *(_BYTE *)(a1 + 2736) = 0;
  *(_OWORD *)(a1 + 2808) = xmmword_18D31D0C0;
  *(_OWORD *)(a1 + 2776) = xmmword_18D31D0A0;
  *(_OWORD *)(a1 + 2792) = unk_18D31D0B0;
  *(_OWORD *)(a1 + 2744) = xmmword_18D31D080;
  *(_OWORD *)(a1 + 2760) = unk_18D31D090;
  *(_OWORD *)(a1 + 2888) = xmmword_18D31D110;
  *(_OWORD *)(a1 + 2856) = xmmword_18D31D0F0;
  *(_OWORD *)(a1 + 2872) = unk_18D31D100;
  *(_OWORD *)(a1 + 2824) = xmmword_18D31D0D0;
  *(_OWORD *)(a1 + 2840) = unk_18D31D0E0;
  *(_OWORD *)(a1 + 2952) = unk_18D31D150;
  *(_OWORD *)(a1 + 2968) = xmmword_18D31D160;
  *(_OWORD *)(a1 + 2920) = *(_OWORD *)algn_18D31D130;
  *(_OWORD *)(a1 + 2936) = xmmword_18D31D140;
  *(_OWORD *)(a1 + 2904) = xmmword_18D31D120;
  *(_OWORD *)(a1 + 3032) = unk_18D31D1A0;
  *(_OWORD *)(a1 + 3048) = xmmword_18D31D1B0;
  *(_OWORD *)(a1 + 3000) = unk_18D31D180;
  *(_OWORD *)(a1 + 3016) = xmmword_18D31D190;
  *(_OWORD *)(a1 + 2984) = xmmword_18D31D170;
  *(_QWORD *)(a1 + 3064) = 0x3FEE666666666666;
  *(_OWORD *)(a1 + 3072) = xmmword_18D318B80;
  *(_OWORD *)(a1 + 3088) = xmmword_18D318B90;
  *(_OWORD *)(a1 + 3104) = xmmword_18D318BA0;
  *(_OWORD *)(a1 + 3120) = xmmword_18D318BB0;
  *(_OWORD *)(a1 + 3136) = xmmword_18D318BC0;
  *(_OWORD *)(a1 + 3152) = xmmword_18D318BD0;
  *(_OWORD *)(a1 + 3168) = xmmword_18D318BE0;
  *(_OWORD *)(a1 + 3184) = xmmword_18D318BF0;
  *(_OWORD *)(a1 + 3200) = xmmword_18D318C00;
  *(_OWORD *)(a1 + 3216) = xmmword_18D318C10;
  *(_OWORD *)(a1 + 3232) = xmmword_18D318790;
  *(_OWORD *)(a1 + 3248) = xmmword_18D318C20;
  *(_OWORD *)(a1 + 3264) = xmmword_18D318C30;
  *(_OWORD *)(a1 + 3280) = xmmword_18D318C40;
  *(_OWORD *)(a1 + 3296) = xmmword_18D318C50;
  __asm { FMOV            V0.2D, #5.0 }
  *(_OWORD *)(a1 + 3312) = _Q0;
  *(_OWORD *)(a1 + 3328) = xmmword_18D318C60;
  *(_QWORD *)(a1 + 3344) = 0x3FE999999999999ALL;
  *(_BYTE *)(a1 + 3352) = 1;
  *(_OWORD *)(a1 + 3360) = xmmword_18D318C70;
  *(_QWORD *)(a1 + 3376) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 3384) = 0x400000005;
  *(_OWORD *)(a1 + 3392) = xmmword_18D318C80;
  *(_OWORD *)(a1 + 3408) = xmmword_18D318C90;
  *(_OWORD *)(a1 + 3424) = xmmword_18D318CA0;
  *(int64x2_t *)(a1 + 3440) = vdupq_n_s64(0x4014880F19EA2B99uLL);
  *(_OWORD *)(a1 + 3456) = xmmword_18D318CB0;
  *(_OWORD *)(a1 + 3472) = xmmword_18D318CC0;
  *(_QWORD *)(a1 + 3488) = 0x4022000000000000;
  *(_BYTE *)(a1 + 3496) = 0;
  *(_OWORD *)(a1 + 3504) = xmmword_18D318CD0;
  *(_WORD *)(a1 + 3520) = 257;
  *(_QWORD *)(a1 + 3528) = 0x4072C00000000000;
  *(_QWORD *)(a1 + 3536) = 0x412E848000000000;
  *(_QWORD *)(a1 + 3544) = 2;
  *(_BYTE *)(a1 + 3552) = 1;
  *(_QWORD *)(a1 + 3560) = 0x4014000000000000;
  *(_QWORD *)(a1 + 3568) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 3576) = 5;
  *(_BYTE *)(a1 + 3580) = 1;
  *(_OWORD *)(a1 + 3584) = xmmword_18D318CE0;
  *(_QWORD *)(a1 + 3600) = 0x4014000000000000;
  *(_QWORD *)(a1 + 3608) = 100;
  *(_OWORD *)(a1 + 3616) = xmmword_18D318CF0;
  *(_QWORD *)(a1 + 3632) = 0x3FD3333333333333;
  *(_QWORD *)(a1 + 3640) = 3;
  *(_BYTE *)(a1 + 3648) = 0;
  *(_DWORD *)(a1 + 3652) = 0;
  *(_BYTE *)(a1 + 3656) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 3664), "");
  *(_DWORD *)(a1 + 3688) = 10;
  *(_WORD *)(a1 + 3692) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 3696), "raven_output.bin");
  *(_WORD *)(a1 + 3720) = 256;
  *(_BYTE *)(a1 + 3722) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 3728), "raven_debug.txt");
  *(_WORD *)(a1 + 3752) = 0;
  *(_BYTE *)(a1 + 3754) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 3760), "raven_msr.txt");
  *(_BYTE *)(a1 + 3788) = 1;
  *(_DWORD *)(a1 + 3784) = 16843009;
  *(_WORD *)(a1 + 3789) = 0;
  *(_QWORD *)(v2 + 3244) = 0x101010101010101;
  *(_BYTE *)(a1 + 3799) = 0;
  *(_DWORD *)(a1 + 3800) = 16843009;
  *(_BYTE *)(a1 + 3804) = 0;
  *(_DWORD *)(a1 + 3808) = 16843009;
  *(_DWORD *)(a1 + 3805) = 16843009;
  *(_BYTE *)(a1 + 3812) = 0;
  *(_BYTE *)(a1 + 3817) = 1;
  *(_DWORD *)(a1 + 3813) = 16843009;
  *(_WORD *)(a1 + 3818) = 256;
  *(_BYTE *)(a1 + 3820) = 1;
  *(_DWORD *)(a1 + 3824) = 0;
  *(_BYTE *)(a1 + 3828) = 0;
  return a1;
}

void sub_18D20A794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 3751) < 0)
    operator delete(*v6);
  if (*(char *)(v2 + 3719) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 3687) < 0)
    operator delete(*v4);
  sub_18D07C868(v2 + 2320);
  sub_18D178498((void ***)va);
  *(_QWORD *)v2 = v7 + 16;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D20A814(_QWORD *result)
{
  result[16] = &unk_1E25C5E70;
  *result = &unk_1E25B8E18;
  result[1] = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D20A838(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D20A84C(_QWORD *a1)
{
  a1[16] = &unk_1E25C5E70;
  *a1 = &unk_1E25B8E18;
  a1[1] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

double sub_18D20A880@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x10000000ALL;
  *(_QWORD *)a2 = &unk_1E25C6020;
  *(_OWORD *)(a2 + 8) = xmmword_18D31CEF0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 248))
    v2 = a1 + 128;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

void sub_18D20A8CC(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D20A8F0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D20A8FC(uint64_t a1)
{
  char v1[10];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

uint64_t sub_18D20A950(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *__p[2];
  char v26;
  unsigned __int8 v27;
  __int16 v28;

  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 104))(a1))
  {
    v28 = 12;
    v27 = 3;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v26 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  a1[480] = 0;
  v10 = *a2;
  if (*a2 && *(_BYTE *)(v10 + 33))
  {
    *((_QWORD *)a1 + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, *(double *)(v10 + 832));
    a1[480] = 1;
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      v28 = 12;
      v27 = 1;
      (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
      if (v26 >= 0)
        v17 = __p;
      else
        LOBYTE(v17) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s configured successfully.", v12, v13, v14, v15, v16, (char)v17);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  else
  {
    v28 = 12;
    v27 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v26 >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Error: %s could not be configured.", v19, v20, v21, v22, v23, (char)v24);
    if (v26 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D20AAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D20AB14(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E25C3190;
  a1[2623] = (uint64_t)&unk_1E25C5DE0;
  a1[2531] = (uint64_t)&unk_1E25C5D20;
  a1[2524] = (uint64_t)&unk_1E25C82D0;
  sub_18D1C3A48(a1 + 2529);
  a1[2524] = (uint64_t)&unk_1E25C5A50;
  a1[2518] = (uint64_t)&unk_1E25C82A0;
  sub_18D1C3D98(a1 + 2523);
  a1[2518] = (uint64_t)&unk_1E25C5A20;
  a1[2469] = (uint64_t)&unk_1E25C5EA0;
  a1[2463] = (uint64_t)&unk_1E25C82A0;
  sub_18D1C3D98(a1 + 2468);
  a1[2463] = (uint64_t)&unk_1E25C5A20;
  a1[2371] = (uint64_t)&unk_1E25C5E70;
  a1[2322] = (uint64_t)&unk_1E25C5EA0;
  a1[2143] = (uint64_t)&unk_1E25C58D0;
  a1[1964] = (uint64_t)&unk_1E25C5DE0;
  a1[1785] = (uint64_t)&unk_1E25C5D20;
  a1[1778] = (uint64_t)&unk_1E25C6410;
  sub_18D1C3A48(a1 + 1783);
  a1[1778] = (uint64_t)&unk_1E25C5A50;
  a1[1772] = (uint64_t)&unk_1E25C63E0;
  sub_18D1C3D98(a1 + 1777);
  a1[1772] = (uint64_t)&unk_1E25C5A20;
  a1[1680] = (uint64_t)&unk_1E25C5EA0;
  a1[1674] = (uint64_t)&unk_1E25C63E0;
  sub_18D1C3D98(a1 + 1679);
  a1[1674] = (uint64_t)&unk_1E25C5A20;
  a1[1495] = (uint64_t)&unk_1E25C5E70;
  a1[1403] = (uint64_t)&unk_1E25C5EA0;
  a1[1050] = (uint64_t)&unk_1E25C58D0;
  sub_18D05DB90(a1 + 1047);
  a1[1033] = (uint64_t)&unk_1E25B90A0;
  sub_18D04AF7C((uint64_t)(a1 + 713));
  a1[330] = (uint64_t)&unk_1E25B9210;
  a1[631] = (uint64_t)&unk_1E25C5E70;
  a1[618] = (uint64_t)&unk_1E25C5E70;
  a1[549] = (uint64_t)&unk_1E25C5E70;
  sub_18D05711C((uint64_t)(a1 + 330));
  return sub_18D04A18C((uint64_t)a1);
}

uint64_t sub_18D20ACEC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B9210;
  *(_QWORD *)(a1 + 2408) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 2304) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 1752) = &unk_1E25C5E70;
  return sub_18D05711C(a1);
}

void sub_18D20AD20(_QWORD *a1)
{
  *a1 = &unk_1E25B9210;
  a1[301] = &unk_1E25C5E70;
  a1[288] = &unk_1E25C5E70;
  a1[219] = &unk_1E25C5E70;
  sub_18D05711C((uint64_t)a1);
  JUMPOUT(0x18D78B5D4);
}

double sub_18D20AD6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000008;
  *(_QWORD *)a2 = &unk_1E25C86C0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319940;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540))
    v2 = a1 + 768;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

double sub_18D20ADB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000008;
  *(_QWORD *)a2 = &unk_1E25C86C0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319940;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540))
    v2 = a1 + 1424;
  else
    v2 = a1 + 664;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

double sub_18D20AE04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x800000008;
  *(_QWORD *)a2 = &unk_1E25C87E0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319930;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540))
    v2 = a1 + 872;
  else
    v2 = a1 + 112;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

void sub_18D20AE50(uint64_t a1)
{
  sub_18D05711C(a1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20AE74(_QWORD *result)
{
  *result = &unk_1E25B8D98;
  result[1] = &unk_1E25C5E70;
  return result;
}

void sub_18D20AE94(_QWORD *a1)
{
  *a1 = &unk_1E25B8D98;
  a1[1] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D20AEC4(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 4];
    v7 = (char *)*v6 + 2432 * (v5 & 0xF);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2432 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != (char *)v8)
    {
      do
      {
        (**(void (***)(char *))v7)(v7);
        v7 += 2432;
        if (v7 - (_BYTE *)*v6 == 38912)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 8;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_18D03CA50((uint64_t)a1);
}

_QWORD **sub_18D20AFF8(_QWORD **a1)
{
  sub_18D03D9B4((uint64_t)(a1 + 6), a1[7]);
  sub_18D03D9B4((uint64_t)(a1 + 3), a1[4]);
  sub_18D03D96C((uint64_t)a1, a1[1]);
  return a1;
}

void sub_18D20B03C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_18D04344C(a2 + 24);
    sub_18D03D9B4(a2, *(_QWORD **)(a2 + 8));
    JUMPOUT(0x18D78B5D4);
  }
}

uint64_t sub_18D20B088(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18D04344C(result);
    JUMPOUT(0x18D78B5D4);
  }
  return result;
}

uint64_t sub_18D20B0C4(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x14];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x14] + 200 * ((a1[5] + v5) % 0x14);
    if ((char *)*v6 + 200 * (v5 % 0x14) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 200 * (v5 % 0x14));
      do
      {
        v9 = *v8;
        v8 += 25;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4000)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 10;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 20;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_18D03CA50((uint64_t)a1);
}

_QWORD *sub_18D20B1FC(_QWORD *result)
{
  result[9] = &unk_1E25C5E70;
  *result = &unk_1E25B8EB8;
  result[1] = &unk_1E25C5E70;
  return result;
}

void sub_18D20B220(_QWORD *a1)
{
  a1[9] = &unk_1E25C5E70;
  *a1 = &unk_1E25B8EB8;
  a1[1] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

double sub_18D20B254@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000003;
  *(_QWORD *)a2 = &unk_1E25C7790;
  *(_OWORD *)(a2 + 8) = xmmword_18D313070;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 136))
    v2 = a1 + 72;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

uint64_t sub_18D20B2A0(uint64_t a1)
{
  char *v2;
  void *v3;

  v2 = (char *)(a1 + 4183);
  if (*(char *)(a1 + 4207) < 0)
    operator delete(*(void **)(a1 + 4184));
  if (*v2 < 0)
    operator delete(*(void **)(a1 + 4160));
  *(_QWORD *)(a1 + 3992) = &unk_1E25B8EB8;
  *(_QWORD *)(a1 + 4064) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 4000) = &unk_1E25C5E70;
  v3 = *(void **)(a1 + 712);
  if (v3)
  {
    *(_QWORD *)(a1 + 720) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_18D20B324(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *__p[2];
  char v26;
  unsigned __int8 v27;
  __int16 v28;

  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 104))(a1))
  {
    v28 = 12;
    v27 = 3;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v26 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  a1[480] = 0;
  v10 = *a2;
  if (*a2 && *(_BYTE *)(v10 + 33))
  {
    *((_QWORD *)a1 + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, *(double *)(v10 + 832));
    a1[480] = 1;
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      v28 = 12;
      v27 = 1;
      (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
      if (v26 >= 0)
        v17 = __p;
      else
        LOBYTE(v17) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s configured successfully.", v12, v13, v14, v15, v16, (char)v17);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  else
  {
    v28 = 12;
    v27 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v26 >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Error: %s could not be configured.", v19, v20, v21, v22, v23, (char)v24);
    if (v26 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D20B4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D20B4E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25C3320;
  return sub_18D04A18C(a1);
}

uint64_t sub_18D20B504(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *__p[2];
  char v26;
  unsigned __int8 v27;
  __int16 v28;

  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 104))(a1))
  {
    v28 = 12;
    v27 = 3;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v26 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  a1[480] = 0;
  v10 = *a2;
  if (*a2 && *(_BYTE *)(v10 + 33))
  {
    *((_QWORD *)a1 + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, *(double *)(v10 + 832));
    a1[480] = 1;
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      v28 = 12;
      v27 = 1;
      (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
      if (v26 >= 0)
        v17 = __p;
      else
        LOBYTE(v17) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s configured successfully.", v12, v13, v14, v15, v16, (char)v17);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  else
  {
    v28 = 12;
    v27 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v26 >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Error: %s could not be configured.", v19, v20, v21, v22, v23, (char)v24);
    if (v26 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D20B6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D20B6C8(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x1E];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x1E] + 136 * ((a1[5] + v5) % 0x1E);
    if ((char *)*v6 + 136 * (v5 % 0x1E) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 136 * (v5 % 0x1E));
      do
      {
        v9 = *v8;
        v8 += 17;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4080)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 15;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 30;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_18D03CA50((uint64_t)a1);
}

void sub_18D20B800(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25C3490;
  sub_18D07BD60((_QWORD *)(a1 + 4168));
  if (*(_BYTE *)(a1 + 1528))
    *(_BYTE *)(a1 + 1528) = 0;
  if (*(_BYTE *)(a1 + 1376))
    *(_BYTE *)(a1 + 1376) = 0;
  if (*(_BYTE *)(a1 + 1352))
    *(_BYTE *)(a1 + 1352) = 0;
  if (*(_BYTE *)(a1 + 1064))
    *(_BYTE *)(a1 + 1064) = 0;
  if (*(_BYTE *)(a1 + 904))
    *(_BYTE *)(a1 + 904) = 0;
  if (*(_BYTE *)(a1 + 696))
    *(_BYTE *)(a1 + 696) = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

uint64_t sub_18D20B884(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 64;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 128;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18D03CA50((uint64_t)a1);
}

uint64_t sub_18D20B918(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = a1 + 5;
  }
  else
  {
    v5 = a1 + 5;
    v6 = a1[4];
    v7 = &v2[v6 >> 4];
    v8 = (char *)*v7;
    v9 = (char *)*v7 + 1088 * (v6 & 0xF);
    v10 = *(uint64_t *)((char *)v2 + (((a1[5] + v6) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 1088 * ((*((_DWORD *)a1 + 10) + (int)v6) & 0xF);
    while (v9 != (char *)v10)
    {
      *((_QWORD *)v9 + 120) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 106) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 92) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 84) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 65) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 51) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 37) = &unk_1E25C5E70;
      *((_QWORD *)v9 + 29) = &unk_1E25C5E70;
      v9 += 1088;
      if (v9 - v8 == 17408)
      {
        v11 = (char *)v7[1];
        ++v7;
        v8 = v11;
        v9 = v11;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v4 >> 3;
  if (v12 == 1)
  {
    v13 = 8;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 16;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_18D03CA50((uint64_t)a1);
}

char *sub_18D20BA4C(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_18D077798(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_18D20BB08((uint64_t)v9);
  return v4;
}

void sub_18D20BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D20BB08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18D20BB08(uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
  }
  return a1;
}

std::string *sub_18D20BB64(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

uint64_t sub_18D20BBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x4_t v8;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v30;
  double v31;
  double v32;
  double v33;
  _QWORD *v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE v72[128];
  void *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD v92[16];
  _QWORD v93[4];
  void *v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD v98[4];
  _QWORD v99[4];
  _QWORD v100[3];
  int64x2_t v101;
  double v102;

  v8.i64[0] = *(_QWORD *)(a3 + 8);
  v8.i64[1] = *(_QWORD *)(a4 + 8);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v8, (int32x4_t)xmmword_18D31CF00)))) & 1) != 0)
    return 0xFFFFFFFFLL;
  v100[1] = 0;
  v100[2] = 0;
  v100[0] = &unk_1E25C2C38;
  v101 = vdupq_n_s64(0x7FF8000000000000uLL);
  v102 = NAN;
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a5 + 48))(*a5, a1, v100))
    return 0xFFFFFFFFLL;
  v14 = *(double **)(a3 + 32);
  v15 = *v14;
  v16 = v14[1];
  v17 = v14[2];
  v18 = v14[3];
  v19 = sqrt(v16 * v16 + v15 * v15 + v17 * v17 + v18 * v18);
  if (fabs(v19) <= 0.000000015)
    return 0xFFFFFFFFLL;
  v20 = v15 / v19;
  v21 = v16 / v19;
  v22 = v17 / v19;
  v23 = v18 / v19;
  v24 = sqrt(v21 * v21 + v20 * v20 + v22 * v22 + v23 * v23);
  if (fabs(v24) >= 2.22044605e-16)
  {
    v26 = v20 / v24;
    v27 = v21 / v24;
    v28 = v22 / v24;
    v25 = v23 / v24;
  }
  else
  {
    v25 = 1.0;
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
  }
  *(double *)v99 = v26;
  *(double *)&v99[1] = v27;
  *(double *)&v99[2] = v28;
  *(double *)&v99[3] = v25;
  v96 = 0x100000004;
  v94 = &unk_1E25C7E50;
  v95 = xmmword_18D313090;
  v97 = v98;
  *(double *)v98 = v20;
  *(double *)&v98[1] = v21;
  *(double *)&v98[2] = v22;
  *(double *)&v98[3] = v23;
  v30 = *(double **)(a4 + 32);
  v31 = *(double *)v101.i64 - *v30;
  v32 = *(double *)&v101.i64[1] - v30[1];
  v33 = v102 - v30[2];
  cnrotation::CNRotation::RotationDerivativeQuaternion((cnrotation::CNRotation *)v99, v31, v32, v33, (uint64_t)v93);
  v90 = 0x100000004;
  v88 = &unk_1E25C7E50;
  v89 = xmmword_18D313090;
  v91 = v92;
  sub_18D053AA8(a6, (uint64_t)&v88);
  v34 = *(_QWORD **)(a6 + 32);
  *v34 = v93[0];
  v34[1] = v93[1];
  v34[2] = v93[2];
  v34[3] = v93[3];
  v90 = 0x400000004;
  v88 = &unk_1E25C7FA0;
  v89 = xmmword_18D313080;
  v91 = v92;
  v92[0] = 0;
  v92[5] = 0;
  *(double *)&v92[8] = -v32;
  *(double *)&v92[9] = v31;
  *(double *)&v92[1] = -v33;
  *(double *)&v92[2] = v32;
  v92[10] = 0;
  *(double *)&v92[13] = v32;
  *(double *)&v92[14] = v33;
  *(double *)&v92[4] = v33;
  *(double *)&v92[3] = -v31;
  *(double *)&v92[6] = -v31;
  *(double *)&v92[7] = -v32;
  *(double *)&v92[12] = v31;
  *(double *)&v92[11] = -v33;
  v92[15] = 0;
  v85 = 0x400000004;
  v83 = &unk_1E25C7FA0;
  v86 = &v87;
  v84 = xmmword_18D313080;
  sub_18D04BE88((uint64_t)&v83, 0.0);
  v35 = HIDWORD(v84);
  v36 = v86;
  v86[3 * HIDWORD(v84)] = 0x3FF0000000000000;
  v36[(2 * v35) | 1] = 0x3FF0000000000000;
  v36[v35 + 2] = 0xBFF0000000000000;
  v36[3] = 0xBFF0000000000000;
  v80 = 0x400000004;
  v78 = &unk_1E25C7FA0;
  v81 = &v82;
  v79 = xmmword_18D313080;
  sub_18D04BE88((uint64_t)&v78, 0.0);
  v37 = HIDWORD(v79);
  v38 = v81;
  v81[2 * SHIDWORD(v79)] = 0xBFF0000000000000;
  v38[3 * v37 + 1] = 0x3FF0000000000000;
  v38[2] = 0x3FF0000000000000;
  v38[v37 + 3] = 0xBFF0000000000000;
  v75 = 0x400000004;
  v73 = &unk_1E25C7FA0;
  v76 = &v77;
  v74 = xmmword_18D313080;
  sub_18D04BE88((uint64_t)&v73, 0.0);
  v39 = HIDWORD(v74);
  v40 = v76;
  v76[SHIDWORD(v74)] = 0x3FF0000000000000;
  v40[1] = 0xBFF0000000000000;
  v40[3 * v39 + 2] = 0x3FF0000000000000;
  v40[2 * v39 + 3] = 0xBFF0000000000000;
  v70 = 0x400000004;
  v68 = &unk_1E25C7FA0;
  *(_QWORD *)&v41.f64[1] = 0x400000010;
  v69 = xmmword_18D313080;
  v71 = v72;
  v41.f64[0] = 0.5;
  sub_18D064EF4((uint64_t)&v88, (uint64_t)&v68, v41);
  sub_18D053AA8(a7, (uint64_t)&v68);
  v55 = 0x100000004;
  v53 = &unk_1E25C7E50;
  v54 = xmmword_18D313090;
  v56 = &v57;
  sub_18D053B2C((uint64_t)&v83, (uint64_t)&v94, (uint64_t)&v53);
  v50 = 0x100000004;
  v48 = &unk_1E25C7E50;
  v49 = xmmword_18D313090;
  v51 = &v52;
  sub_18D053B2C((uint64_t)&v78, (uint64_t)&v94, (uint64_t)&v48);
  v60 = 0x200000004;
  v58 = &unk_1E25C7EE0;
  v59 = xmmword_18D31CD60;
  v61 = &v62;
  sub_18D05449C((uint64_t)&v53, (uint64_t)&v48, (uint64_t)&v58);
  v45 = 0x100000004;
  v43 = &unk_1E25C7E50;
  v44 = xmmword_18D313090;
  v46 = &v47;
  sub_18D053B2C((uint64_t)&v73, (uint64_t)&v94, (uint64_t)&v43);
  v65 = 0x300000004;
  v63 = &unk_1E25C7F70;
  v64 = xmmword_18D3130A0;
  v66 = &v67;
  sub_18D05449C((uint64_t)&v58, (uint64_t)&v43, (uint64_t)&v63);
  v70 = 0x300000004;
  v68 = &unk_1E25C7F70;
  *(_QWORD *)&v42.f64[1] = 0x40000000CLL;
  v69 = xmmword_18D3130A0;
  v71 = v72;
  v42.f64[0] = -0.5;
  sub_18D064EF4((uint64_t)&v63, (uint64_t)&v68, v42);
  sub_18D053AA8(a8, (uint64_t)&v68);
  return 0;
}

void sub_18D20C0F8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 256;
        sub_18D20C168(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18D20C168(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      operator delete(v3);
    }
  }
}

void sub_18D20C1B4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18D20C1F4((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_18D20C1F4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 200)
  {
    result = *(_QWORD *)(i - 16);
    *(_QWORD *)(i - 16) = 0;
    if (result)
      result = MEMORY[0x18D78B5D4](result, 0x1000C4041240993);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_18D20C258(uint64_t a1)
{
  uint64_t result;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  int i;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v21;
  void *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[9];
  void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD v51[7];
  __int128 v52;
  double v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 280))
    return 1;
  if (!*(_BYTE *)(a1 + 201))
    return 0;
  if (!*(_BYTE *)(a1 + 202))
    return 0;
  v55 = 0uLL;
  v56 = 0;
  v3 = *(double *)(a1 + 208);
  v53 = v3;
  v21 = *(_OWORD *)(a1 + 216);
  v54 = v21;
  if (cnnavigation::LLAToECEF(&v53, 1, (double *)&v55, 0, (uint64_t)v40))
    return 0;
  *(_OWORD *)(a1 + 288) = v55;
  *(_QWORD *)(a1 + 304) = v56;
  v49 = 0x300000003;
  v47 = &unk_1E25C78E0;
  v48 = xmmword_18D30BB60;
  v50 = v51;
  v4 = *(_QWORD *)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 248);
  v6 = *(_QWORD *)(a1 + 256);
  v51[0] = *(_QWORD *)(a1 + 232);
  v51[1] = v4;
  v51[2] = v5;
  v51[3] = v4;
  v7 = *(_OWORD *)(a1 + 264);
  v51[4] = v6;
  v51[5] = v7;
  v51[6] = v5;
  v52 = v7;
  v44 = 0x300000003;
  v42 = &unk_1E25C78E0;
  v43 = xmmword_18D30BB60;
  v45 = &v46;
  sub_18D1D290C((uint64_t)v40, v3, *(double *)&v21);
  if (v40[8])
    sub_18D053AA8((uint64_t)&v42, (uint64_t)&v41);
  v32 = 0x300000003;
  v30 = &unk_1E25C78E0;
  v31 = xmmword_18D30BB60;
  v33 = &v34;
  sub_18D053B2C((uint64_t)&v42, (uint64_t)&v47, (uint64_t)&v30);
  v8 = DWORD1(v43);
  v9 = v43;
  v27 = 0x300000003;
  v22 = &unk_1E25C78E0;
  v28 = v29;
  v23 = DWORD1(v43);
  v24 = v43;
  v25 = v43 * DWORD1(v43);
  v26 = DWORD1(v43);
  if (DWORD1(v43))
  {
    v10 = 0;
    v11 = 0;
    v12 = HIDWORD(v43);
    v13 = v45;
    do
    {
      v14 = v10;
      v15 = v11;
      for (i = v9; i; --i)
      {
        v29[v15] = v13[v14];
        v15 += v8;
        ++v14;
      }
      ++v11;
      v10 += v12;
    }
    while (v11 != v8);
  }
  v37 = 0x300000003;
  v35 = &unk_1E25C78E0;
  v36 = xmmword_18D30BB60;
  v38 = &v39;
  sub_18D053B2C((uint64_t)&v30, (uint64_t)&v22, (uint64_t)&v35);
  v17 = v38;
  *(_QWORD *)(a1 + 312) = *v38;
  v18 = SHIDWORD(v36);
  v19 = &v17[SHIDWORD(v36)];
  *(_QWORD *)(a1 + 320) = *v19;
  *(_QWORD *)(a1 + 328) = v17[2 * v18];
  *(_QWORD *)(a1 + 336) = v19[1];
  v20 = &v17[2 * (int)v18];
  *(_QWORD *)(a1 + 344) = v20[1];
  *(_QWORD *)(a1 + 352) = v20[2];
  result = 1;
  *(_BYTE *)(a1 + 280) = 1;
  return result;
}

BOOL sub_18D20C508(uint64_t a1)
{
  int v2;
  int v3;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  int v17;
  int v18;
  int i;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD v31[9];
  void *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD v53[7];
  __int128 v54;
  double v55;
  __int128 v56;
  float64x2_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 201);
  if (*(_BYTE *)(a1 + 201))
  {
    v3 = *(unsigned __int8 *)(a1 + 202);
    if (*(_BYTE *)(a1 + 202))
      return 1;
    if (!*(_BYTE *)(a1 + 280))
      return v3 != 0;
  }
  else if (!*(_BYTE *)(a1 + 280))
  {
    return 0;
  }
  v57 = *(float64x2_t *)(a1 + 288);
  v58 = *(_QWORD *)(a1 + 304);
  v55 = 0.0;
  v56 = 0uLL;
  if (cnnavigation::ECEFToLLA(&v57, 1, &v55, 0, (uint64_t)v42))
  {
    if (v2)
    {
      v3 = *(unsigned __int8 *)(a1 + 202);
      return v3 != 0;
    }
    return 0;
  }
  v5 = v55;
  *(double *)(a1 + 208) = v55;
  v6 = *(double *)&v56;
  *(_OWORD *)(a1 + 216) = v56;
  v51 = 0x300000003;
  v49 = &unk_1E25C78E0;
  v50 = xmmword_18D30BB60;
  v52 = v53;
  v7 = *(_QWORD *)(a1 + 320);
  v8 = *(_QWORD *)(a1 + 328);
  v9 = *(_QWORD *)(a1 + 336);
  v53[0] = *(_QWORD *)(a1 + 312);
  v53[1] = v7;
  v53[2] = v8;
  v53[3] = v7;
  v10 = *(_OWORD *)(a1 + 344);
  v53[4] = v9;
  v53[5] = v10;
  v53[6] = v8;
  v54 = v10;
  v46 = 0x300000003;
  v44 = &unk_1E25C78E0;
  v45 = xmmword_18D30BB60;
  v47 = &v48;
  sub_18D0758F4((uint64_t)v42, v5, v6);
  if (v42[8])
    sub_18D053AA8((uint64_t)&v44, (uint64_t)&v43);
  v34 = 0x300000003;
  v32 = &unk_1E25C78E0;
  v33 = xmmword_18D30BB60;
  v35 = &v36;
  sub_18D053B2C((uint64_t)&v44, (uint64_t)&v49, (uint64_t)&v32);
  v11 = DWORD1(v45);
  v12 = v45;
  v29 = 0x300000003;
  v24 = &unk_1E25C78E0;
  v30 = v31;
  v25 = DWORD1(v45);
  v26 = v45;
  v27 = v45 * DWORD1(v45);
  v28 = DWORD1(v45);
  if (DWORD1(v45))
  {
    v13 = 0;
    v14 = 0;
    v15 = HIDWORD(v45);
    v16 = v47;
    do
    {
      v17 = v13;
      v18 = v14;
      for (i = v12; i; --i)
      {
        v31[v18] = v16[v17];
        v18 += v11;
        ++v17;
      }
      ++v14;
      v13 += v15;
    }
    while (v14 != v11);
  }
  v39 = 0x300000003;
  v37 = &unk_1E25C78E0;
  v38 = xmmword_18D30BB60;
  v40 = &v41;
  sub_18D053B2C((uint64_t)&v32, (uint64_t)&v24, (uint64_t)&v37);
  v20 = v40;
  *(_QWORD *)(a1 + 232) = *v40;
  v21 = SHIDWORD(v38);
  v22 = &v20[SHIDWORD(v38)];
  *(_QWORD *)(a1 + 240) = *v22;
  *(_QWORD *)(a1 + 248) = v20[2 * v21];
  *(_QWORD *)(a1 + 256) = v22[1];
  v23 = &v20[2 * (int)v21];
  *(_QWORD *)(a1 + 264) = v23[1];
  *(_QWORD *)(a1 + 272) = v23[2];
  *(_WORD *)(a1 + 201) = 257;
  return 1;
}

_QWORD *sub_18D20C7C8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_18D07CC20((uint64_t)v6, a2);
  sub_18D20DC34(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_18D20C864()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20C878()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC838;
  return result;
}

void sub_18D20C89C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC838;
}

void sub_18D20C8B0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  __n128 v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  void **v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t shared_weak_owners;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _BYTE v50[152];
  _QWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  float64x2_t v58;
  _BYTE v59[32];
  _BYTE v60[48];
  uint64_t v61;
  uint64_t v62;
  float64x2_t v63;
  double v64;
  __int128 v65;
  uint64_t v66;

  v8 = *a2;
  sub_18D20CDC4((uint64_t)v50, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = sub_18D20D3B8((_QWORD *)(v8 + 18080), (uint64_t)v50);
  v10 = *(_QWORD *)(v8 + 18120);
  if (v10 >= *(unsigned int *)(*(_QWORD *)(v8 + 488) + 984))
  {
    sub_18D05E174(v8);
  }
  else if (v10)
  {
    do
    {
      if (!*(_DWORD *)(v8 + 504))
        break;
      v11 = *(_QWORD *)(v8 + 18112);
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 18088) + 8 * (v11 / 0x1A));
      v13 = v11 % 0x1A;
      v14 = v12 + 152 * (v11 % 0x1A);
      v15 = v8 + 48 * *(unsigned int *)(v8 + 540);
      v16 = *(_QWORD *)(v15 + 552);
      v17 = *(double *)(v15 + 560);
      v18 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v14 + 16))(v14, v9);
      v20.n128_f64[0] = v19;
      v21 = v16 || (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v21
        && (!v18 ? (v22 = (*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v22 = 1),
            v22 && v16 != v18))
      {
        if (v16 < v18)
          return;
      }
      else if (v17 < v19)
      {
        return;
      }
      v61 = 0;
      v62 = 0;
      v61 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v14 + 16))(v14, v20);
      v62 = v23;
      v24 = v12 + 152 * v13;
      v63 = *(float64x2_t *)(v24 + 104);
      v64 = *(double *)(v24 + 120);
      if (cnestimation::RotationStabilizedAccelerationEstimator::AddAcceleration(v8 + 17344, (uint64_t)&v61, v64, v25))break;
      if (*(_BYTE *)(v8 + 17345))
      {
        v26 = *(_QWORD *)(v8 + 17360);
        v27 = *(_QWORD *)(v8 + 17368);
        v28 = *(_QWORD *)(v8 + 17376);
        v29 = *(_QWORD *)(v8 + 17416);
        v30 = *(double *)(v8 + 17440);
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        v56 = 0u;
        *(_QWORD *)&v57 = 0;
        v51 = &unk_1E25C35E8;
        *(_QWORD *)&v52 = v26;
        *((_QWORD *)&v52 + 1) = v27;
        *((_QWORD *)&v57 + 1) = 0x7FF8000000000000;
        v58 = *(float64x2_t *)(v8 + 17424);
        *(float64x2_t *)&v59[8] = vsubq_f64(v63, v58);
        *(double *)v59 = v30;
        *(double *)&v59[24] = v64 - v30;
        *(_QWORD *)v60 = v28;
        *(_OWORD *)&v60[8] = *(_OWORD *)(v8 + 17384);
        *(_OWORD *)&v60[24] = *(_OWORD *)(v8 + 17400);
        *(_QWORD *)&v60[40] = v29;
        v31 = (std::__shared_weak_count *)operator new(0x60uLL);
        v31->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        v31->__shared_weak_owners_ = 0;
        v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
        v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
        LOBYTE(v31[1].__shared_owners_) = 0;
        v31[1].__shared_weak_owners_ = 0;
        v31[2].__vftable = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
        v31[2].__shared_owners_ = 0;
        v33 = (void **)&v31[3].__vftable;
        v31[2].__shared_weak_owners_ = 0;
        sub_18D0778AC(&v31[3].__vftable, "");
        LOBYTE(v31[1].__shared_owners_) = 1;
        v34 = operator new();
        *(_QWORD *)v34 = &off_1E25C1C30;
        *(_QWORD *)(v34 + 8) = &unk_1E25C35E8;
        v35 = *(_OWORD *)v59;
        *(float64x2_t *)(v34 + 112) = v58;
        *(_OWORD *)(v34 + 128) = v35;
        v36 = *(_OWORD *)v60;
        *(_OWORD *)(v34 + 144) = *(_OWORD *)&v59[16];
        *(_OWORD *)(v34 + 160) = v36;
        v37 = v55;
        *(_OWORD *)(v34 + 48) = v54;
        *(_OWORD *)(v34 + 64) = v37;
        v38 = v57;
        *(_OWORD *)(v34 + 80) = v56;
        *(_OWORD *)(v34 + 96) = v38;
        v39 = v53;
        *(_OWORD *)(v34 + 16) = v52;
        *(_OWORD *)(v34 + 32) = v39;
        v40 = *(_OWORD *)&v60[32];
        *(_OWORD *)(v34 + 176) = *(_OWORD *)&v60[16];
        *(_OWORD *)(v34 + 192) = v40;
        shared_weak_owners = v31[1].__shared_weak_owners_;
        v31[1].__shared_weak_owners_ = v34;
        if (shared_weak_owners)
          (*(void (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 8))(shared_weak_owners);
        v42 = v51;
        v31[2].__vftable = (std::__shared_weak_count_vtbl *)*(v51 - 1);
        v31[2].__shared_owners_ = ((uint64_t (*)(_QWORD **))v42[2])(&v51);
        v31[2].__shared_weak_owners_ = v43;
        ((void (*)(__int128 *__return_ptr, _QWORD **))v51[3])(&v65, &v51);
        if (SHIBYTE(v31[3].__shared_weak_owners_) < 0)
          operator delete(*v33);
        *(_OWORD *)v33 = v65;
        v31[3].__shared_weak_owners_ = v66;
        v44 = *(_QWORD *)(v8 + 344);
        *(_QWORD *)&v65 = v31 + 1;
        *((_QWORD *)&v65 + 1) = v31;
        do
          v45 = __ldxr(p_shared_owners);
        while (__stxr(v45 + 1, p_shared_owners));
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v44 + 16))(v44, &v65, v8);
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (*((_QWORD *)&v65 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        do
          v49 = __ldaxr(p_shared_owners);
        while (__stlxr(v49 - 1, p_shared_owners));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      sub_18D20D7C8((int64x2_t *)(v8 + 18080));
    }
    while (*(_QWORD *)(v8 + 18120));
  }
}

void sub_18D20CCC4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v5 = *(std::__shared_weak_count **)(v3 - 120);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  do
    v8 = __ldaxr(v2);
  while (__stlxr(v8 - 1, v2));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D20CD7C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8AE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20CDB8()
{
  return &unk_1E25B8AE8;
}

int64x2_t sub_18D20CDC4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  __int16 v34;
  std::bad_cast v35;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven18AccelerometerEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven18AccelerometerEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    v30 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v30;
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(v28 + 138);
    v31 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    result = *(int64x2_t *)(v28 + 48);
    v32 = *(_OWORD *)(v28 + 64);
    *(int64x2_t *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 72) = v29;
    *(_QWORD *)a1 = &unk_1E25C2A50;
    *(_OWORD *)(a1 + 8) = v31;
  }
  else
  {
    v34 = 3;
    v33 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2A50;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 96) = result;
    *(int64x2_t *)(a1 + 112) = result;
    *(_QWORD *)(a1 + 136) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 145) = 0;
  }
  return result;
}

void sub_18D20CF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D20CF7C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  *exception = &unk_1E25C0FD8;
  exception[1] = &unk_1E25C1008;
  exception[2] = &unk_1E25C1030;
  exception[3] = 0;
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3048, (void (*)(void *))sub_18D20CFCC);
}

uint64_t sub_18D20CFCC(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t sub_18D20D00C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  *(_QWORD *)(v2 + 8) = &unk_1E25C1410;
  *(_QWORD *)(v2 + 16) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &unk_1E25C0FD8;
  *(_QWORD *)(v2 + 8) = &unk_1E25C1008;
  *(_QWORD *)(v2 + 16) = &unk_1E25C1030;
  sub_18D15B224(v2 + 16, a1 + 16);
  return v2;
}

void sub_18D20D0D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C40C404A9A7);
  _Unwind_Resume(a1);
}

void sub_18D20D11C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_18D20D304((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3048, (void (*)(void *))sub_18D20CFCC);
}

void sub_18D20D158(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D20D16C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D20D1BC(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

void sub_18D20D1F4(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x18D78B5D4);
}

const char *sub_18D20D248()
{
  return "boost::bad_any_cast: failed conversion using boost::any_cast";
}

void sub_18D20D254(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

void sub_18D20D28C(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D20D2E0(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D20D304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1410;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_1E25C0FD8;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1008;
  *(_QWORD *)(a1 + 16) = &unk_1E25C1030;
  return a1;
}

void sub_18D20D3A4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_18D20D3B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_18D20D4B4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  *(_QWORD *)v8 = &unk_1E25C2A50;
  v9 = *(_OWORD *)(a2 + 40);
  v10 = *(_OWORD *)(a2 + 56);
  v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_OWORD *)(v8 + 40) = v9;
  v12 = *(_OWORD *)(a2 + 104);
  v13 = *(_OWORD *)(a2 + 120);
  v14 = *(_OWORD *)(a2 + 130);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v8 + 130) = v14;
  *(_OWORD *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v8 + 8) = result;
  ++a1[5];
  return result;
}

void sub_18D20D4B4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1A;
  v4 = v2 - 26;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18D0788C8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xF70uLL);
      sub_18D078444(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xF70uLL);
    sub_18D078558((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18D0788C8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_18D0788C8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xF70uLL);
  sub_18D078674(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_18D078788((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_18D20D77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18D20D7C8(int64x2_t *a1)
{
  void (***v2)(_QWORD);

  v2 = (void (***)(_QWORD))(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x1AuLL))
                                     + 152 * (a1[2].i64[0] % 0x1AuLL));
  (**v2)(v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_18D30B1A0);
  return sub_18D20D8F0((uint64_t)a1, 1);
}

void sub_18D20D844()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D20D858()
{
}

__n128 sub_18D20D864(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1C30;
  *(_QWORD *)(v2 + 8) = &unk_1E25C35E8;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v3;
  v4 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v4;
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  v6 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v6;
  v7 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v7;
  result.n128_u64[0] = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  if (v2 != a1)
  {
    result = *(__n128 *)(a1 + 176);
    v9 = *(_OWORD *)(a1 + 192);
    *(__n128 *)(v2 + 176) = result;
    *(_OWORD *)(v2 + 192) = v9;
  }
  return result;
}

uint64_t sub_18D20D8F0(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1A)
    a2 = 1;
  if (v2 < 0x34)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 26;
  }
  return v4 ^ 1u;
}

_QWORD *sub_18D20D94C(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD **v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = *(_QWORD *)(*a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v12)
        v4 = v8 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
    v15 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = (_QWORD *)*i)
      {
        v17 = i[1];
        if (v17 == v8)
        {
          if (sub_18D07C81C(i[2], *a2))
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v8;
  i[2] = **a4;
  i[6] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_18D1652B0(a1, v24);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12)
        v4 = v8 % v12;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *i = *v26;
LABEL_41:
    *v26 = i;
    goto LABEL_42;
  }
  *i = *v18;
  *v18 = i;
  *(_QWORD *)(v25 + 8 * v4) = v18;
  if (*i)
  {
    v27 = *(_QWORD *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12)
        v27 %= v12;
    }
    else
    {
      v27 &= v12 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_18D20DBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_18D20DBCC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_18D20DBCC(uint64_t a1, _QWORD *__p)
{
  _QWORD *v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (_QWORD *)__p[6];
    if (v3 == __p + 3)
    {
      v4 = 4;
      v3 = __p + 3;
      goto LABEL_8;
    }
    if (v3)
    {
      v4 = 5;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
LABEL_9:
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_9;
}

_QWORD *sub_18D20DC34(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18D20DD9C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_18D076A08(a1);
}

void sub_18D20DDAC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20DDC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC788;
  return result;
}

void sub_18D20DDE4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC788;
}

void sub_18D20DDF8(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  int64x2_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  _QWORD v15[13];
  __int128 v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[3];
  __int128 v23;
  uint64_t v24;

  v8 = *a2;
  v9 = sub_18D20DF68((uint64_t)v15, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    v22[0] = &unk_1E25C2C38;
    v22[1] = (*(uint64_t (**)(_QWORD *, int64x2_t))(v15[0] + 16))(v15, v9);
    v22[2] = v10;
    v23 = v16;
    v24 = v17;
    if (sub_18D1AE6BC((uint64_t)(v8 + 496), (uint64_t)v22))
    {
      (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)v8 + 16))(v20, v8);
      v11 = v21;
      v12 = (const char *)v20[0];
      (*(void (**)(void **__return_ptr, _QWORD *))(v15[0] + 24))(v18, v15);
      if (v11 >= 0)
        v13 = (const char *)v20;
      else
        v13 = v12;
      if (v19 >= 0)
        v14 = (const char *)v18;
      else
        v14 = (const char *)v18[0];
      printf("Warning: %s failed to handle event of type %s.\n", v13, v14);
      if (v19 < 0)
        operator delete(v18[0]);
      if (v21 < 0)
        operator delete(v20[0]);
    }
  }
}

void sub_18D20DF04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D20DF20(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8AC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20DF5C()
{
  return &unk_1E25B8AC8;
}

int64x2_t sub_18D20DF68(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  __int16 v34;
  std::bad_cast v35;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven13RateGyroEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven13RateGyroEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    v30 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v30;
    *(_OWORD *)(a1 + 130) = *(_OWORD *)(v28 + 138);
    v31 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    result = *(int64x2_t *)(v28 + 48);
    v32 = *(_OWORD *)(v28 + 64);
    *(int64x2_t *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 72) = v29;
    *(_QWORD *)a1 = &unk_1E25C21E8;
    *(_OWORD *)(a1 + 8) = v31;
  }
  else
  {
    v34 = 3;
    v33 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C21E8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 96) = result;
    *(int64x2_t *)(a1 + 112) = result;
    *(_QWORD *)(a1 + 136) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 145) = 0;
  }
  return result;
}

void sub_18D20E10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D20E124()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20E138()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC7E0;
  return result;
}

void sub_18D20E15C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC7E0;
}

void sub_18D20E170(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  _DWORD v10[28];

  v8 = *a2;
  v9 = sub_18D20E20C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26])
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 48))(v8, v9);
}

uint64_t sub_18D20E1C4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8AD8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20E200()
{
  return &unk_1E25B8AD8;
}

__n128 sub_18D20E20C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;
  __int16 v33;
  std::bad_cast v34;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven16RavenSystemEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven16RavenSystemEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v34.__vftable = 0;
        std::bad_cast::bad_cast(&v34);
        v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    v30 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v30;
    result = *(__n128 *)(v28 + 16);
    v31 = *(_OWORD *)(v28 + 32);
    *(__n128 *)(a1 + 8) = result;
    *(_OWORD *)(a1 + 24) = v31;
    *(_QWORD *)a1 = &unk_1E25C2718;
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 40) = v29;
  }
  else
  {
    v33 = 3;
    v32 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2718;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D20E390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D20E3A8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20E3BC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC470;
  return result;
}

void sub_18D20E3E0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC470;
}

void sub_18D20E3F4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::bad_cast v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v29 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v29 != (const char *)((unint64_t)"N5raven18ActivityInputEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v29, (const char *)((unint64_t)"N5raven18ActivityInputEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v37[0].__vftable = 0;
      std::bad_cast::bad_cast(v37);
      v37[0].__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v30 = *((_QWORD *)this + 2);
    v31 = *(_OWORD *)(v30 + 64);
    v39 = *(_OWORD *)(v30 + 48);
    v40 = v31;
    v41 = *(_OWORD *)(v30 + 80);
    v42 = *(_QWORD *)(v30 + 96);
    v32 = *(_OWORD *)(v30 + 32);
    *(_OWORD *)&v37[0].__vftable = *(_OWORD *)(v30 + 16);
    v38 = v32;
    v28 = *(_QWORD *)(v30 + 104);
    v26 = *(_BYTE *)(v30 + 112);
    v27 = *(_BYTE *)(v30 + 113);
  }
  else
  {
    LOWORD(v37[0].__vftable) = 3;
    v43 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v37, &v43, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v26 = 0;
    v27 = 0;
    *(_OWORD *)&v37[0].__vftable = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0;
    v28 = 0x7FF8000000000000;
  }
  if (*(_BYTE *)(v9 + 608))
  {
    *(_QWORD *)(v9 + 584) = v42;
    v33 = v40;
    *(_OWORD *)(v9 + 536) = v39;
    *(_OWORD *)(v9 + 552) = v33;
    *(_OWORD *)(v9 + 568) = v41;
    v34 = v38;
    *(_OWORD *)(v9 + 504) = *(_OWORD *)&v37[0].__vftable;
    *(_OWORD *)(v9 + 520) = v34;
  }
  else
  {
    v35 = v40;
    *(_OWORD *)(v9 + 536) = v39;
    *(_OWORD *)(v9 + 552) = v35;
    *(_OWORD *)(v9 + 568) = v41;
    v36 = v38;
    *(_OWORD *)(v9 + 504) = *(_OWORD *)&v37[0].__vftable;
    *(_QWORD *)(v9 + 496) = &unk_1E25C2A80;
    *(_QWORD *)(v9 + 584) = v42;
    *(_OWORD *)(v9 + 520) = v36;
    *(_BYTE *)(v9 + 608) = 1;
  }
  *(_QWORD *)(v9 + 592) = v28;
  *(_BYTE *)(v9 + 600) = v26;
  *(_BYTE *)(v9 + 601) = v27;
}

void sub_18D20E5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  std::exception::~exception(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_18D20E5D8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A38))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20E614()
{
  return &unk_1E25B8A38;
}

void sub_18D20E624()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20E638()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC520;
  return result;
}

void sub_18D20E65C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC520;
}

__n128 sub_18D20E670(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v8 = *a2;
  sub_18D20E7B0((uint64_t)&v20, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 824))
  {
    v9 = v30;
    v10 = v32;
    *(_OWORD *)(v8 + 784) = v31;
    *(_OWORD *)(v8 + 800) = v10;
    *(_QWORD *)(v8 + 816) = v33;
    v11 = v26;
    v12 = v28;
    *(_OWORD *)(v8 + 720) = v27;
    *(_OWORD *)(v8 + 736) = v12;
    *(_OWORD *)(v8 + 752) = v29;
    *(_OWORD *)(v8 + 768) = v9;
    result = v22;
    v14 = v24;
    *(_OWORD *)(v8 + 656) = v23;
    *(_OWORD *)(v8 + 672) = v14;
    *(_OWORD *)(v8 + 688) = v25;
    *(_OWORD *)(v8 + 704) = v11;
    *(_OWORD *)(v8 + 624) = v21;
    *(__n128 *)(v8 + 640) = result;
  }
  else
  {
    *(_QWORD *)(v8 + 616) = &unk_1E25C2BD8;
    v15 = v30;
    v16 = v32;
    *(_OWORD *)(v8 + 784) = v31;
    *(_OWORD *)(v8 + 800) = v16;
    *(_QWORD *)(v8 + 816) = v33;
    v17 = v26;
    v18 = v28;
    *(_OWORD *)(v8 + 720) = v27;
    *(_OWORD *)(v8 + 736) = v18;
    *(_OWORD *)(v8 + 752) = v29;
    *(_OWORD *)(v8 + 768) = v15;
    result = v22;
    v19 = v24;
    *(_OWORD *)(v8 + 656) = v23;
    *(_OWORD *)(v8 + 672) = v19;
    *(_OWORD *)(v8 + 688) = v25;
    *(_OWORD *)(v8 + 704) = v17;
    *(_OWORD *)(v8 + 624) = v21;
    *(__n128 *)(v8 + 640) = result;
    *(_BYTE *)(v8 + 824) = 1;
  }
  return result;
}

uint64_t sub_18D20E768(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A58))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20E7A4()
{
  return &unk_1E25B8A58;
}

__n128 sub_18D20E7B0(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;
  __int16 v36;
  std::bad_cast v37;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven19FitnessSessionEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven19FitnessSessionEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v37.__vftable = 0;
        std::bad_cast::bad_cast(&v37);
        v37.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v28 + 160);
    v30 = *(_OWORD *)(v28 + 192);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v28 + 176);
    *(_OWORD *)(a1 + 184) = v30;
    v31 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    v32 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v32;
    *(_OWORD *)(a1 + 136) = v29;
    v33 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    result = *(__n128 *)(v28 + 48);
    v34 = *(_OWORD *)(v28 + 64);
    *(__n128 *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 56) = v34;
    *(_OWORD *)(a1 + 72) = v31;
    *(_QWORD *)a1 = &unk_1E25C2BD8;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v28 + 208);
    *(_OWORD *)(a1 + 8) = v33;
  }
  else
  {
    v36 = 3;
    v35 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2BD8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D20E988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D20E9A0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20E9B4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC4C8;
  return result;
}

void sub_18D20E9D8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC4C8;
}

void sub_18D20E9EC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void (**v37)(raven::MapsRouteHintEvent *__hidden);
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  void *__p;
  void *v52;
  uint64_t v53;
  unsigned __int8 v54;
  std::bad_cast v55;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven18MapsRouteHintEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven18MapsRouteHintEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v55.__vftable = 0;
      std::bad_cast::bad_cast(&v55);
      v55.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v37 = &off_1E25C2AE0;
    v38 = *(_OWORD *)(v27 + 16);
    v28 = *(_OWORD *)(v27 + 32);
    v29 = *(_OWORD *)(v27 + 48);
    v30 = *(_OWORD *)(v27 + 80);
    v41 = *(_OWORD *)(v27 + 64);
    v42 = v30;
    v39 = v28;
    v40 = v29;
    v31 = *(_OWORD *)(v27 + 96);
    v32 = *(_OWORD *)(v27 + 112);
    v33 = *(_OWORD *)(v27 + 128);
    v46 = *(_OWORD *)(v27 + 144);
    v44 = v32;
    v45 = v33;
    v43 = v31;
    v34 = *(_OWORD *)(v27 + 160);
    v35 = *(_OWORD *)(v27 + 176);
    v36 = *(_OWORD *)(v27 + 192);
    LOWORD(v50) = *(_WORD *)(v27 + 208);
    v49 = v36;
    v48 = v35;
    v47 = v34;
    v52 = 0;
    v53 = 0;
    __p = 0;
    sub_18D20EC90(&__p, *(const void **)(v27 + 216), *(_QWORD *)(v27 + 224), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v27 + 224) - *(_QWORD *)(v27 + 216)) >> 3));
  }
  else
  {
    LOWORD(v55.__vftable) = 3;
    v54 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v39 = 0uLL;
    v42 = 0uLL;
    v45 = 0uLL;
    v46 = 0u;
    v48 = 0uLL;
    v38 = 0uLL;
    v37 = &off_1E25C2AE0;
    v40 = 0uLL;
    v41 = 0uLL;
    *(_QWORD *)&v43 = 0;
    *((_QWORD *)&v43 + 1) = 0x7FF8000000000000;
    v44 = 0uLL;
    BYTE8(v46) = 0;
    *(_QWORD *)&v46 = 0;
    v47 = 0uLL;
    *(_QWORD *)&v49 = 0;
    *((_QWORD *)&v49 + 1) = 0x7FF8000000000000;
    v50 = 0;
    __p = 0;
    v52 = 0;
    v53 = 0;
  }
  sub_18D29C454(v9 + 832, (uint64_t)&v37);
  v37 = &off_1E25C2AE0;
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
}

void sub_18D20EC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  uint64_t v39;

  std::exception::~exception((std::exception *)(v39 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_18D20EC48(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A48))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20EC84()
{
  return &unk_1E25B8A48;
}

_QWORD *sub_18D20EC90(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_18D184CE0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18D20ECEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18D20ED0C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20ED20()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC418;
  return result;
}

void sub_18D20ED44(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC418;
}

void sub_18D20ED58(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  _DWORD v10[28];

  v8 = *a2;
  v9 = sub_18D20E20C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26])
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 48))(v8, v9);
}

uint64_t sub_18D20EDAC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A28))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20EDE8()
{
  return &unk_1E25B8A28;
}

void sub_18D20EDF8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20EE0C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC3C0;
  return result;
}

void sub_18D20EE30(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC3C0;
}

double sub_18D20EE44(int a1, raven::RavenActivityStateEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenActivityStateEstimatorActiveObject *v8;
  double result;
  _BYTE v10[160];

  v8 = *a2;
  sub_18D20EEC8((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)&result = raven::RavenActivityStateEstimatorActiveObject::HandleEvent(v8, (const raven::StepCountEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18D20EE80(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A18))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20EEBC()
{
  return &unk_1E25B8A18;
}

__n128 sub_18D20EEC8(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  __int16 v34;
  std::bad_cast v35;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven14StepCountEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven14StepCountEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v29;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v28 + 144);
    v30 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = v30;
    v31 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v31;
    result = *(__n128 *)(v28 + 16);
    v32 = *(_OWORD *)(v28 + 32);
    *(__n128 *)(a1 + 8) = result;
    *(_QWORD *)a1 = &unk_1E25C23D8;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(v28 + 160);
    *(_OWORD *)(a1 + 24) = v32;
  }
  else
  {
    v34 = 3;
    v33 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C23D8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(int64x2_t *)(a1 + 112) = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_QWORD *)(a1 + 128) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0x7FF8000000000000;
    result.n128_u64[0] = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 152) = 0xFFFFFFFFLL;
  }
  return result;
}

void sub_18D20F07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D20F094()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20F0A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC368;
  return result;
}

uint64_t sub_18D20F0D0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A08))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20F10C()
{
  return &unk_1E25B8A08;
}

void sub_18D20F11C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20F130()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBBD8;
  return result;
}

void sub_18D20F154(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBBD8;
}

void sub_18D20F168(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[33];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  sub_18D20F334((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8) & 1) != 0)
  {
    v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::AccessoryVehicleSpeedEvent *)v31);
    if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v10;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v16 = v32;
      else
        v16 = (void **)v32[0];
      v17 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v17;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v31);
}

void sub_18D20F2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D20F2EC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B88A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20F328()
{
  return &unk_1E25B88A8;
}

void sub_18D20F334(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned __int8 v37;
  __int16 v38;
  std::bad_cast v39;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven26AccessoryVehicleSpeedEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v26, (const char *)((unint64_t)"N5raven26AccessoryVehicleSpeedEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v39.__vftable = 0;
        std::bad_cast::bad_cast(&v39);
        v39.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v27 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = &off_1E25C3460;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v27 + 16);
    v28 = *(_OWORD *)(v27 + 32);
    v29 = *(_OWORD *)(v27 + 48);
    v30 = *(_OWORD *)(v27 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v27 + 80);
    *(_OWORD *)(a1 + 56) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    *(_OWORD *)(a1 + 24) = v28;
    v31 = *(_OWORD *)(v27 + 96);
    v32 = *(_OWORD *)(v27 + 112);
    v33 = *(_OWORD *)(v27 + 128);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v27 + 144);
    *(_OWORD *)(a1 + 120) = v33;
    *(_OWORD *)(a1 + 104) = v32;
    *(_OWORD *)(a1 + 88) = v31;
    v34 = *(_OWORD *)(v27 + 160);
    v35 = *(_OWORD *)(v27 + 176);
    v36 = *(_OWORD *)(v27 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v27 + 208);
    *(_OWORD *)(a1 + 184) = v36;
    *(_OWORD *)(a1 + 168) = v35;
    *(_OWORD *)(a1 + 152) = v34;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    sub_18D20F5AC((_QWORD *)(a1 + 208), *(const void **)(v27 + 216), *(_QWORD *)(v27 + 224), (uint64_t)(*(_QWORD *)(v27 + 224) - *(_QWORD *)(v27 + 216)) >> 3);
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    sub_18D20F5AC((_QWORD *)(a1 + 232), *(const void **)(v27 + 240), *(_QWORD *)(v27 + 248), (uint64_t)(*(_QWORD *)(v27 + 248) - *(_QWORD *)(v27 + 240)) >> 3);
    *(_WORD *)(a1 + 256) = *(_WORD *)(v27 + 264);
  }
  else
  {
    v38 = 3;
    v37 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_1E25C3460;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 204) = 0u;
    *(_OWORD *)(a1 + 220) = 0u;
    *(_OWORD *)(a1 + 236) = 0u;
    *(_QWORD *)(a1 + 250) = 0;
  }
}

void sub_18D20F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D20F5AC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_18D169B48(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18D20F608(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18D20F628()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20F63C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB970;
  return result;
}

uint64_t sub_18D20F664(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8838))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20F6A0()
{
  return &unk_1E25B8838;
}

void sub_18D20F6B0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20F6C4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBA20;
  return result;
}

void sub_18D20F6E8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBA20;
}

void sub_18D20F6FC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[27];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D20F8B4((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::AltitudeChangeEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D20F850(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D20F86C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8858))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20F8A8()
{
  return &unk_1E25B8858;
}

__n128 sub_18D20F8B4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;
  __int16 v36;
  std::bad_cast v37;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven19AltitudeChangeEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven19AltitudeChangeEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v37.__vftable = 0;
        std::bad_cast::bad_cast(&v37);
        v37.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v28 + 160);
    v30 = *(_OWORD *)(v28 + 192);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v28 + 176);
    *(_OWORD *)(a1 + 184) = v30;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(v28 + 208);
    v31 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    v32 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v32;
    *(_OWORD *)(a1 + 136) = v29;
    v33 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    result = *(__n128 *)(v28 + 48);
    v34 = *(_OWORD *)(v28 + 64);
    *(__n128 *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 56) = v34;
    *(_OWORD *)(a1 + 72) = v31;
    *(_QWORD *)a1 = &unk_1E25C2B78;
    *(_OWORD *)(a1 + 8) = v33;
  }
  else
  {
    v36 = 3;
    v35 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2B78;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D20FA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D20FAAC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20FAC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB600;
  return result;
}

void sub_18D20FAE4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB600;
}

void sub_18D20FAF8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[15];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D20FCB0((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::AltitudeEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D20FC4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D20FC68(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8798))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D20FCA4()
{
  return &unk_1E25B8798;
}

__n128 sub_18D20FCB0(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;
  __int16 v33;
  std::bad_cast v34;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven13AltitudeEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven13AltitudeEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v34.__vftable = 0;
        std::bad_cast::bad_cast(&v34);
        v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    v30 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v30;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    result = *(__n128 *)(v28 + 16);
    v31 = *(_OWORD *)(v28 + 32);
    *(__n128 *)(a1 + 8) = result;
    *(_OWORD *)(a1 + 24) = v31;
    *(_QWORD *)a1 = &unk_1E25C2128;
    *(_OWORD *)(a1 + 40) = v29;
  }
  else
  {
    v33 = 3;
    v32 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2128;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D20FE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D20FE4C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D20FE60()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBC30;
  return result;
}

void sub_18D20FE84(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBC30;
}

void sub_18D20FE98(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *p_p;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[8];
  __int128 v73;
  char v74;
  unsigned __int8 v75;
  __int128 __p;
  char v77;
  __int128 v78;
  unsigned __int8 v79;
  __int16 v80;

  v8 = *a2;
  v9 = sub_18D210394((uint64_t)v72, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    if (v74 == *(_BYTE *)(v8 + 3056))
    {
      LOWORD(v78) = 12;
      LOBYTE(v80) = 3;
      v10 = v73;
      __p = v73;
      v11 = v75;
      cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&__p, "EstimatorErrorRecoveryEvent received, type, %u", v75);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v17) = v8 - 16;
      else
        v17 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v80, "%s", v12, v13, v14, v15, v16, v17);
      switch(v11)
      {
        case 3:
          LOWORD(v78) = 12;
          LOBYTE(v80) = 3;
          __p = v10;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&__p, "Initiating RavenErrorRecoveryAction::InflatePositionUncertainty");
          if (*(char *)(v8 + 519) >= 0)
            LOBYTE(v23) = v8 - 16;
          else
            v23 = *(_QWORD *)(v8 + 496);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v80, "%s", v18, v19, v20, v21, v22, v23);
          raven::RavenConvergenceEstimator::InflatePositionUncertainty((raven::RavenConvergenceEstimator *)(v8 + 3000), *(double *)(*(_QWORD *)(v8 + 4168) + 1440));
          break;
        case 4:
          LOWORD(v78) = 12;
          LOBYTE(v80) = 3;
          __p = v10;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&__p, "Initiating RavenErrorRecoveryAction::InflateVelocityUncertainty");
          if (*(char *)(v8 + 519) >= 0)
            LOBYTE(v41) = v8 - 16;
          else
            v41 = *(_QWORD *)(v8 + 496);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v80, "%s", v36, v37, v38, v39, v40, v41);
          raven::RavenConvergenceEstimator::InflateVelocityUncertainty((raven::RavenConvergenceEstimator *)(v8 + 3000), *(double *)(*(_QWORD *)(v8 + 4168) + 1448));
          break;
        case 5:
          LOWORD(v78) = 12;
          LOBYTE(v80) = 3;
          __p = v10;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&__p, "Initiating RavenErrorRecoveryAction::InflateXOUncertainty");
          if (*(char *)(v8 + 519) >= 0)
            LOBYTE(v47) = v8 - 16;
          else
            v47 = *(_QWORD *)(v8 + 496);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v80, "%s", v42, v43, v44, v45, v46, v47);
          raven::RavenConvergenceEstimator::InflateXOUncertainty((raven::RavenConvergenceEstimator *)(v8 + 3000), *(double *)(*(_QWORD *)(v8 + 4168) + 1456));
          break;
        case 6:
          LOWORD(v78) = 12;
          LOBYTE(v80) = 3;
          __p = v10;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&__p, "Initiating RavenErrorRecoveryAction::ResetAO");
          if (*(char *)(v8 + 519) >= 0)
            LOBYTE(v53) = v8 - 16;
          else
            v53 = *(_QWORD *)(v8 + 496);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v80, "%s", v48, v49, v50, v51, v52, v53);
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
          break;
        case 7:
          LOWORD(v78) = 12;
          LOBYTE(v80) = 3;
          __p = v10;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&__p, "Initiating RavenErrorRecoveryAction::ResetEstimator");
          if (*(char *)(v8 + 519) >= 0)
            LOBYTE(v59) = v8 - 16;
          else
            v59 = *(_QWORD *)(v8 + 496);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v80, "%s", v54, v55, v56, v57, v58, v59);
          raven::RavenConvergenceEstimator::Reset((raven::RavenConvergenceEstimator *)(v8 + 3000));
          break;
        case 9:
          LOWORD(v78) = 12;
          LOBYTE(v80) = 3;
          __p = v10;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&__p, "Initiating RavenErrorRecoveryAction::ResetXOStates");
          if (*(char *)(v8 + 519) >= 0)
            LOBYTE(v71) = v8 - 16;
          else
            v71 = *(_QWORD *)(v8 + 496);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v80, "%s", v66, v67, v68, v69, v70, v71);
          raven::RavenConvergenceEstimator::ResetOscillatorStates((raven::RavenConvergenceEstimator *)(v8 + 3000));
          break;
        default:
          LOWORD(v78) = 12;
          LOBYTE(v80) = 4;
          __p = v10;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&__p, "Unhandled RavenErrorRecoveryAction, type, %u", v11);
          if (*(char *)(v8 + 519) >= 0)
            LOBYTE(v65) = v8 - 16;
          else
            v65 = *(_QWORD *)(v8 + 496);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v80, "%s", v60, v61, v62, v63, v64, v65);
          break;
      }
    }
  }
  else
  {
    v80 = 12;
    v79 = 2;
    v78 = v73;
    sub_18D0778AC(&__p, "EstimatorErrorRecoveryEvent");
    if (v77 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&v78, "RavenConvergenceEstimatorActiveObject not configured, cannot handle event, %s", v24, v25, v26, v27, v28, (uint64_t)p_p);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v35) = v8 - 16;
    else
      v35 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v80, &v79, "%s", v30, v31, v32, v33, v34, v35);
    if (v77 < 0)
      operator delete((void *)__p);
  }
}

void sub_18D210330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21034C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B88B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D210388()
{
  return &unk_1E25B88B8;
}

__n128 sub_18D210394(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;
  __int16 v33;
  std::bad_cast v34;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven27EstimatorErrorRecoveryEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven27EstimatorErrorRecoveryEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v34.__vftable = 0;
        std::bad_cast::bad_cast(&v34);
        v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    v30 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v30;
    result = *(__n128 *)(v28 + 16);
    v31 = *(_OWORD *)(v28 + 32);
    *(__n128 *)(a1 + 8) = result;
    *(_OWORD *)(a1 + 24) = v31;
    *(_QWORD *)a1 = &unk_1E25C3618;
    *(_WORD *)(a1 + 104) = *(_WORD *)(v28 + 112);
    *(_OWORD *)(a1 + 40) = v29;
  }
  else
  {
    v33 = 3;
    v32 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C3618;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 105) = 0;
  }
  return result;
}

void sub_18D21051C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D210530(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D21053C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "EstimatorErrorRecoveryEvent");
}

void sub_18D210550()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D210564()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBA78;
  return result;
}

void sub_18D210588(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBA78;
}

void sub_18D21059C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[26];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D20E7B0((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    raven::RavenEstimator::HandleFitnessSessionEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::FitnessSessionEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D2106F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21070C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8868))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D210748()
{
  return &unk_1E25B8868;
}

void sub_18D210758()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21076C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBC88;
  return result;
}

void sub_18D210790(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBC88;
}

void sub_18D2107A4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void ***v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[12];
  uint64_t v32;
  void **v33[2];
  char v34;
  _QWORD v35[2];
  unsigned __int8 v36;
  __int16 v37[5];

  v8 = *a2;
  sub_18D2109A0((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8) & 1) != 0)
  {
    v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::GnssPreprocessedMeasurementsEvent *)v31);
    if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      v37[0] = 12;
      v36 = 1;
      v35[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v35[1] = v10;
      (*(void (**)(void ***__return_ptr, _QWORD *))(v31[0] + 24))(v33, v31);
      if (v34 >= 0)
        v16 = v33;
      else
        v16 = (void ***)v33[0];
      v17 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v35, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v17;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v37, &v36, "%s", v18, v19, v20, v21, v22, v23);
      if (v34 < 0)
        operator delete(v33[0]);
    }
  }
  else
  {
    LOWORD(v33[0]) = 12;
    LOBYTE(v35[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v33, (unsigned __int8 *)v35, "%s", v25, v26, v27, v28, v29, v30);
  }
  v31[0] = off_1E25C3EC8;
  v33[0] = (void **)&v32;
  sub_18D07C7AC(v33);
}

void sub_18D210910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));
  *(_QWORD *)(v23 - 24) = &a23;
  sub_18D07C7AC((void ***)(v23 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_18D210958(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B88C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D210994()
{
  return &unk_1E25B88C8;
}

void sub_18D2109A0(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unsigned __int8 v35;
  __int16 v36;
  std::bad_cast v37;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven33GnssPreprocessedMeasurementsEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v26, (const char *)((unint64_t)"N5raven33GnssPreprocessedMeasurementsEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v37.__vftable = 0;
        std::bad_cast::bad_cast(&v37);
        v37.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v27 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = off_1E25C3EC8;
    v28 = *(_OWORD *)(v27 + 48);
    v29 = *(_OWORD *)(v27 + 64);
    v30 = *(_OWORD *)(v27 + 80);
    v31 = *(_QWORD *)(v27 + 96);
    v32 = *(_OWORD *)(v27 + 16);
    v33 = *(_OWORD *)(v27 + 32);
    *(_QWORD *)(a1 + 96) = 0;
    v34 = a1 + 96;
    *(_OWORD *)(v34 - 72) = v33;
    *(_OWORD *)(v34 - 88) = v32;
    *(_QWORD *)(v34 - 8) = v31;
    *(_OWORD *)(v34 - 24) = v30;
    *(_OWORD *)(v34 - 40) = v29;
    *(_OWORD *)(v34 - 56) = v28;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 16) = 0;
    sub_18D16727C((char *)v34, *(_QWORD **)(v27 + 104), *(_QWORD **)(v27 + 112), (uint64_t)(*(_QWORD *)(v27 + 112) - *(_QWORD *)(v27 + 104)) >> 4);
  }
  else
  {
    v36 = 3;
    v35 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 108) = 0;
    *(_QWORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 116) = 0;
    *(_QWORD *)(a1 + 92) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = off_1E25C3EC8;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_18D210B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D210B58()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D210B6C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB7B8;
  return result;
}

void sub_18D210B90(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB7B8;
}

void sub_18D210BA4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[35];
  void *v31[2];
  char v32;
  _QWORD v33[2];
  unsigned __int8 v34;
  __int16 v35;

  v8 = *a2;
  sub_18D210D5C((uint64_t)v30, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8) & 1) != 0)
  {
    v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::MapVectorEvent *)v30);
    if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      v35 = 12;
      v34 = 1;
      v33[0] = (*(uint64_t (**)(_QWORD *))(v30[0] + 16))(v30);
      v33[1] = v10;
      (*(void (**)(void **__return_ptr, _QWORD *))(v30[0] + 24))(v31, v30);
      if (v32 >= 0)
        v16 = v31;
      else
        v16 = (void **)v31[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v33, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v22) = v8 - 16;
      else
        v22 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v17, v18, v19, v20, v21, v22);
      if (v32 < 0)
        operator delete(v31[0]);
    }
  }
  else
  {
    LOWORD(v31[0]) = 12;
    LOBYTE(v33[0]) = 2;
    v23 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v29) = v23;
    else
      v29 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v31, (unsigned __int8 *)v33, "%s", v24, v25, v26, v27, v28, v29);
  }
}

void sub_18D210CF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D210D14(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B87E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D210D50()
{
  return &unk_1E25B87E8;
}

void sub_18D210D5C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int16 v30;
  std::bad_cast v31;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven14MapVectorEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven14MapVectorEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v31.__vftable = 0;
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = &unk_1E25C22D8;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x10CuLL);
  }
  else
  {
    v30 = 3;
    v29 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C22D8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 192) = v26;
    *(int64x2_t *)(a1 + 208) = v26;
    *(int64x2_t *)(a1 + 224) = v26;
    *(int64x2_t *)(a1 + 240) = v26;
    *(int64x2_t *)(a1 + 256) = v26;
  }
}

void sub_18D210F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D210F3C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D210F50()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB868;
  return result;
}

uint64_t sub_18D210F78(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8808))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D210FB4()
{
  return &unk_1E25B8808;
}

void sub_18D210FC4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D210FD8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB8C0;
  return result;
}

uint64_t sub_18D211000(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8818))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21103C()
{
  return &unk_1E25B8818;
}

void sub_18D21104C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D211060()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB658;
  return result;
}

void sub_18D211084(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB658;
}

void sub_18D211098(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[27];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D211250((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::OdometerEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D2111EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D211208(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B87A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D211244()
{
  return &unk_1E25B87A8;
}

__n128 sub_18D211250(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;
  __int16 v36;
  std::bad_cast v37;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven13OdometerEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven13OdometerEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v37.__vftable = 0;
        std::bad_cast::bad_cast(&v37);
        v37.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v28 + 160);
    v30 = *(_OWORD *)(v28 + 192);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v28 + 176);
    *(_OWORD *)(a1 + 184) = v30;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(v28 + 208);
    v31 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    v32 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v32;
    *(_OWORD *)(a1 + 136) = v29;
    v33 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    result = *(__n128 *)(v28 + 48);
    v34 = *(_OWORD *)(v28 + 64);
    *(__n128 *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 56) = v34;
    *(_OWORD *)(a1 + 72) = v31;
    *(_QWORD *)a1 = &unk_1E25C2188;
    *(_OWORD *)(a1 + 8) = v33;
  }
  else
  {
    v36 = 3;
    v35 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2188;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D211430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D211448()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21145C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBAD0;
  return result;
}

void sub_18D211480(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBAD0;
}

void sub_18D211494(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[47];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D21164C((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::PositionChangeEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D2115E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D211604(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8878))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D211640()
{
  return &unk_1E25B8878;
}

double sub_18D21164C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  const char *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned __int8 v38;
  __int16 v39;
  std::bad_cast v40;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven19PositionChangeEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven19PositionChangeEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v40.__vftable = 0;
        std::bad_cast::bad_cast(&v40);
        v40.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = (_OWORD *)*((_QWORD *)this + 2);
    *(_QWORD *)a1 = &off_1E25C2C08;
    v29 = v28[3];
    v30 = v28[4];
    v31 = v28[2];
    *(_OWORD *)(a1 + 8) = v28[1];
    *(_OWORD *)(a1 + 56) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    *(_OWORD *)(a1 + 24) = v31;
    v32 = v28[7];
    v33 = v28[8];
    v34 = v28[6];
    *(_OWORD *)(a1 + 72) = v28[5];
    *(_OWORD *)(a1 + 120) = v33;
    *(_OWORD *)(a1 + 104) = v32;
    *(_OWORD *)(a1 + 88) = v34;
    v35 = v28[11];
    v36 = v28[12];
    v37 = v28[10];
    *(_OWORD *)(a1 + 136) = v28[9];
    *(_OWORD *)(a1 + 184) = v36;
    *(_OWORD *)(a1 + 168) = v35;
    *(_OWORD *)(a1 + 152) = v37;
    sub_18D04DA0C(a1 + 200, (uint64_t)(v28 + 13));
    *(_QWORD *)&result = sub_18D159B20(a1 + 264, (uint64_t)(v28 + 17)).n128_u64[0];
  }
  else
  {
    v39 = 3;
    v38 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_1E25C2C08;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 224) = 0x100000003;
    *(_QWORD *)(a1 + 200) = &unk_1E25C7790;
    *(_OWORD *)(a1 + 208) = xmmword_18D313070;
    *(_QWORD *)(a1 + 232) = a1 + 240;
    *(_QWORD *)(a1 + 288) = 0x300000003;
    *(_QWORD *)(a1 + 264) = &unk_1E25C78E0;
    *(_QWORD *)&result = 0x300000003;
    *(_OWORD *)(a1 + 272) = xmmword_18D30BB60;
    *(_QWORD *)(a1 + 296) = a1 + 304;
  }
  return result;
}

void sub_18D2118C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D2118F4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D211908()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBB80;
  return result;
}

void sub_18D21192C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBB80;
}

void sub_18D211940(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[16];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D211AF8((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    raven::RavenEstimator::HandlePositionContextStateEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::PositionContextStateEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D211A94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D211AB0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8898))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D211AEC()
{
  return &unk_1E25B8898;
}

__n128 sub_18D211AF8(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 v36;
  __int16 v37;
  std::bad_cast v38;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v31 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v31 != (const char *)((unint64_t)"N5raven25PositionContextStateEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v31, (const char *)((unint64_t)"N5raven25PositionContextStateEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v38.__vftable = 0;
        std::bad_cast::bad_cast(&v38);
        v38.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v32 = *((_QWORD *)this + 2);
    v33 = *(_OWORD *)(v32 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v32 + 80);
    *(_OWORD *)(a1 + 88) = v33;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v32 + 112);
    v34 = *(_OWORD *)(v32 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v32 + 16);
    *(_OWORD *)(a1 + 24) = v34;
    result = *(__n128 *)(v32 + 48);
    v35 = *(_OWORD *)(v32 + 64);
    *(__n128 *)(a1 + 40) = result;
    *(_QWORD *)a1 = &unk_1E25C3130;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(v32 + 128);
    *(_OWORD *)(a1 + 56) = v35;
  }
  else
  {
    v37 = 3;
    v36 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C3130;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    __asm { FMOV            V0.2D, #0.5 }
    *(__n128 *)(a1 + 112) = result;
  }
  return result;
}

void sub_18D211C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D211CA0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D211CB4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB6B0;
  return result;
}

void sub_18D211CD8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB6B0;
}

void sub_18D211CEC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[45];
  void *v31[2];
  char v32;
  _QWORD v33[2];
  unsigned __int8 v34;
  __int16 v35;

  v8 = *a2;
  sub_18D211EA4((uint64_t)v30, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8) & 1) != 0)
  {
    v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::PositionEvent *)v30);
    if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      v35 = 12;
      v34 = 1;
      v33[0] = (*(uint64_t (**)(_QWORD *))(v30[0] + 16))(v30);
      v33[1] = v10;
      (*(void (**)(void **__return_ptr, _QWORD *))(v30[0] + 24))(v31, v30);
      if (v32 >= 0)
        v16 = v31;
      else
        v16 = (void **)v31[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v33, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v22) = v8 - 16;
      else
        v22 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v17, v18, v19, v20, v21, v22);
      if (v32 < 0)
        operator delete(v31[0]);
    }
  }
  else
  {
    LOWORD(v31[0]) = 12;
    LOBYTE(v33[0]) = 2;
    v23 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v29) = v23;
    else
      v29 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v31, (unsigned __int8 *)v33, "%s", v24, v25, v26, v27, v28, v29);
  }
}

void sub_18D211E40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D211E5C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B87B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D211E98()
{
  return &unk_1E25B87B8;
}

void sub_18D211EA4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int16 v30;
  std::bad_cast v31;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven13PositionEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven13PositionEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v31.__vftable = 0;
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = &unk_1E25C21B8;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x160uLL);
  }
  else
  {
    v30 = 3;
    v29 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C21B8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
    v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_BYTE *)(a1 + 201) = 0;
    *(int64x2_t *)(a1 + 208) = v26;
    *(int64x2_t *)(a1 + 224) = v26;
    *(int64x2_t *)(a1 + 240) = v26;
    *(int64x2_t *)(a1 + 256) = v26;
    *(_QWORD *)(a1 + 272) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 280) = 0;
    *(int64x2_t *)(a1 + 288) = v26;
    *(int64x2_t *)(a1 + 304) = v26;
    *(int64x2_t *)(a1 + 320) = v26;
    *(int64x2_t *)(a1 + 336) = v26;
    *(_QWORD *)(a1 + 352) = 0x7FF8000000000000;
  }
}

void sub_18D212080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D212098()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2120AC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB9C8;
  return result;
}

uint64_t sub_18D2120D4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8848))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D212110()
{
  return &unk_1E25B8848;
}

void sub_18D212120()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D212134()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB918;
  return result;
}

void sub_18D212158(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB918;
}

void sub_18D21216C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[13];
  int v39;
  void **v40;
  uint64_t v41;
  char v42;
  _QWORD v43[2];
  unsigned __int8 v44;
  __int16 v45;

  v8 = *a2;
  v9 = sub_18D20E20C((uint64_t)v38, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v10 = (cnprint::CNPrinter *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9);
  if ((v10 & 1) != 0)
  {
    if (!cnprint::CNPrinter::GetLogLevel(v10))
    {
      LOWORD(v43[0]) = 12;
      LOBYTE(v45) = 0;
      v40 = (void **)(*(uint64_t (**)(_QWORD *))(v38[0] + 16))(v38);
      v41 = v11;
      cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v40, "RavenSystemEvent received");
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v17) = v8 - 16;
      else
        v17 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v43, (unsigned __int8 *)&v45, "%s", v12, v13, v14, v15, v16, v17);
    }
    if (!v39)
    {
      LOWORD(v43[0]) = 12;
      LOBYTE(v45) = 4;
      v40 = (void **)(*(uint64_t (**)(_QWORD *))(v38[0] + 16))(v38);
      v41 = v18;
      cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v40, "Resetting estimator based on system event");
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v24) = v8 - 16;
      else
        v24 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v43, (unsigned __int8 *)&v45, "%s", v19, v20, v21, v22, v23, v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    }
  }
  else
  {
    v45 = 12;
    v44 = 2;
    v43[0] = (*(uint64_t (**)(_QWORD *))(v38[0] + 16))(v38);
    v43[1] = v25;
    (*(void (**)(void ***__return_ptr, _QWORD *))(v38[0] + 24))(&v40, v38);
    if (v42 >= 0)
      v31 = (void **)&v40;
    else
      v31 = v40;
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v43, "RavenConvergenceEstimatorActiveObject not configured, cannot handle event, %s", v26, v27, v28, v29, v30, (uint64_t)v31);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v37) = v8 - 16;
    else
      v37 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, &v44, "%s", v32, v33, v34, v35, v36, v37);
    if (v42 < 0)
      operator delete(v40);
  }
}

void sub_18D212340(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21235C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8828))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D212398()
{
  return &unk_1E25B8828;
}

void sub_18D2123A8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2123BC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBB28;
  return result;
}

void sub_18D2123E0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBB28;
}

void sub_18D2123F4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[14];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D2125AC((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    raven::RavenEstimator::HandleSignalEnvironmentEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::SignalEnvironmentEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D212548(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D212564(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8888))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2125A0()
{
  return &unk_1E25B8888;
}

__n128 sub_18D2125AC(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;
  __int16 v33;
  std::bad_cast v34;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven22SignalEnvironmentEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven22SignalEnvironmentEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v34.__vftable = 0;
        std::bad_cast::bad_cast(&v34);
        v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    v30 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v30;
    result = *(__n128 *)(v28 + 16);
    v31 = *(_OWORD *)(v28 + 32);
    *(__n128 *)(a1 + 8) = result;
    *(_OWORD *)(a1 + 24) = v31;
    *(_QWORD *)a1 = &unk_1E25C2FC8;
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(v28 + 112);
    *(_OWORD *)(a1 + 40) = v29;
  }
  else
  {
    v33 = 3;
    v32 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2FC8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D212730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D212748()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21275C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB708;
  return result;
}

uint64_t sub_18D212784(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B87C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2127C0()
{
  return &unk_1E25B87C8;
}

_QWORD *sub_18D2127D0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E25C1900;
  v2[1] = &unk_1E25C2B48;
  memcpy(v2 + 2, (const void *)(a1 + 16), 0x971uLL);
  return v2;
}

void sub_18D212834()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D212848()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB810;
  return result;
}

void sub_18D21286C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB810;
}

void sub_18D212880(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int64x2_t v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[15];
  void *v32[2];
  char v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  __int16 v36;

  v8 = *a2;
  v9 = sub_18D212A38((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, int64x2_t))(*(_QWORD *)v8 + 104))(v8, v9) & 1) != 0)
  {
    v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::UserSpeedEvent *)v31);
    if ((_DWORD)v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      v36 = 12;
      v35 = 1;
      v34[0] = (*(uint64_t (**)(_QWORD *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, _QWORD *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0)
        v17 = v32;
      else
        v17 = (void **)v32[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v23) = v8 - 16;
      else
        v23 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0)
        operator delete(v32[0]);
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v30) = v24;
    else
      v30 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18D2129D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2129F0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B87F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D212A2C()
{
  return &unk_1E25B87F8;
}

int64x2_t sub_18D212A38(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;
  __int16 v33;
  std::bad_cast v34;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven14UserSpeedEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven14UserSpeedEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v34.__vftable = 0;
        std::bad_cast::bad_cast(&v34);
        v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    v30 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v30;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    result = *(int64x2_t *)(v28 + 16);
    v31 = *(_OWORD *)(v28 + 32);
    *(int64x2_t *)(a1 + 8) = result;
    *(_OWORD *)(a1 + 24) = v31;
    *(_QWORD *)a1 = &unk_1E25C2438;
    *(_OWORD *)(a1 + 40) = v29;
  }
  else
  {
    v33 = 3;
    v32 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2438;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 96) = result;
    *(_QWORD *)(a1 + 112) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D212BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D212BD4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D212BE8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB760;
  return result;
}

void sub_18D212C0C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB760;
}

void sub_18D212C20(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[45];
  void *v31[2];
  char v32;
  _QWORD v33[2];
  unsigned __int8 v34;
  __int16 v35;

  v8 = *a2;
  sub_18D212DD8((uint64_t)v30, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8) & 1) != 0)
  {
    v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::VelocityEvent *)v30);
    if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      v35 = 12;
      v34 = 1;
      v33[0] = (*(uint64_t (**)(_QWORD *))(v30[0] + 16))(v30);
      v33[1] = v10;
      (*(void (**)(void **__return_ptr, _QWORD *))(v30[0] + 24))(v31, v30);
      if (v32 >= 0)
        v16 = v31;
      else
        v16 = (void **)v31[0];
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v33, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0)
        LOBYTE(v22) = v8 - 16;
      else
        v22 = *(_QWORD *)(v8 + 496);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v17, v18, v19, v20, v21, v22);
      if (v32 < 0)
        operator delete(v31[0]);
    }
  }
  else
  {
    LOWORD(v31[0]) = 12;
    LOBYTE(v33[0]) = 2;
    v23 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v29) = v23;
    else
      v29 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v31, (unsigned __int8 *)v33, "%s", v24, v25, v26, v27, v28, v29);
  }
}

void sub_18D212D74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D212D90(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B87D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D212DCC()
{
  return &unk_1E25B87D8;
}

void sub_18D212DD8(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int16 v30;
  std::bad_cast v31;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven13VelocityEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven13VelocityEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v31.__vftable = 0;
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = &unk_1E25C2278;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x160uLL);
  }
  else
  {
    v30 = 3;
    v29 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2278;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
    *(int64x2_t *)(a1 + 208) = v26;
    *(int64x2_t *)(a1 + 224) = v26;
    *(int64x2_t *)(a1 + 240) = v26;
    *(int64x2_t *)(a1 + 256) = v26;
    *(_QWORD *)(a1 + 272) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 280) = 0;
    *(int64x2_t *)(a1 + 288) = v26;
    *(int64x2_t *)(a1 + 304) = v26;
    *(int64x2_t *)(a1 + 320) = v26;
    *(int64x2_t *)(a1 + 336) = v26;
    *(_QWORD *)(a1 + 352) = 0x7FF8000000000000;
  }
}

void sub_18D212FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D212FC8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D212FDC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9E48;
  return result;
}

void sub_18D213000(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9E48;
}

void sub_18D213014(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t i;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int8x16_t v119;
  unint64_t v120;
  int8x16_t v121;
  double v122;
  unint64_t v123;
  BOOL v124;
  BOOL v125;
  double v126;
  _QWORD *v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  double *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void **v150;
  void **v151;
  double v152;
  unint64_t v153;
  void **v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  double *v158;
  double *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  void *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  int64_t v181;
  double *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  unint64_t v199;
  void **v200;
  unint64_t v201;
  void (***v202)(void);
  void (**v203)(void);
  void (***v204)(void);
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  void *v217;
  char v218;
  double v219;
  double v220;
  uint64_t v221;
  char v222;
  int64x2_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  std::bad_cast v230;
  __int128 v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  double v253;
  double v254;
  unsigned __int8 v255;
  unsigned __int8 v256[4];
  __int128 v257;
  _DWORD v258[7];
  unsigned __int8 v259[8];
  uint64_t v260;
  char v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char v265;
  double *v266;
  double *v267;
  uint64_t v268;
  _QWORD v269[2];
  _OWORD v270[2];

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = *(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (v26 != ((unint64_t)"N5raven25PrefilteredBarometerEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      v26 = strcmp((const char *)v26, (const char *)((unint64_t)"N5raven25PrefilteredBarometerEventE" & 0x7FFFFFFFFFFFFFFFLL));
      if ((_DWORD)v26)
      {
        v230.__vftable = 0;
        std::bad_cast::bad_cast(&v230);
        v230.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v32 = *((_QWORD *)this + 2);
    v226 = *(_OWORD *)(v32 + 48);
    v227 = *(_OWORD *)(v32 + 64);
    v228 = *(_OWORD *)(v32 + 80);
    v229 = *(_QWORD *)(v32 + 96);
    v224 = *(_OWORD *)(v32 + 16);
    v225 = *(_OWORD *)(v32 + 32);
    v223 = *(int64x2_t *)(v32 + 104);
    v27 = *(_QWORD *)(v32 + 120);
    v30 = *(_QWORD *)(v32 + 128);
    v28 = *(_BYTE *)(v32 + 136);
    v29 = *(_BYTE *)(v32 + 137);
    v31 = *(_QWORD *)(v32 + 144);
  }
  else
  {
    LOWORD(v230.__vftable) = 3;
    v259[0] = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v230, v259, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v224 = 0u;
    v225 = 0u;
    v226 = 0u;
    v227 = 0u;
    v228 = 0u;
    v223 = vdupq_n_s64(0x7FF8000000000000uLL);
    v30 = 0x7FF8000000000000;
    v31 = 0x7FF8000000000000;
    v229 = 0;
  }
  v33 = *(uint64_t **)(v9 + 552);
  v34 = *(char **)(v9 + 544);
  v35 = ((char *)v33 - v34) >> 3;
  if (v33 == (uint64_t *)v34)
    v36 = 0;
  else
    v36 = 28 * v35 - 1;
  v37 = *(_QWORD *)(v9 + 568);
  v38 = *(_QWORD *)(v9 + 576) + v37;
  if (v36 == v38)
  {
    v124 = v37 >= 0x1C;
    v39 = v37 - 28;
    if (v124)
    {
      *(_QWORD *)(v9 + 568) = v39;
      v42 = *(_QWORD *)v34;
      v40 = (uint64_t *)(v34 + 8);
      v41 = v42;
      *(_QWORD *)(v9 + 544) = v40;
      if (v33 == *(uint64_t **)(v9 + 560))
      {
        v43 = v28;
        v44 = *(_QWORD *)(v9 + 536);
        v45 = (uint64_t)v40 - v44;
        if ((unint64_t)v40 <= v44)
        {
          v69 = (uint64_t)v33 - v44;
          v68 = v69 == 0;
          v70 = v69 >> 2;
          if (v68)
            v71 = 1;
          else
            v71 = v70;
          v26 = (uint64_t)sub_18D07BF3C(v71);
          v73 = (uint64_t *)(v26 + 8 * (v71 >> 2));
          v74 = *(uint64_t **)(v9 + 544);
          v33 = v73;
          v75 = *(_QWORD *)(v9 + 552) - (_QWORD)v74;
          if (v75)
          {
            v33 = (uint64_t *)((char *)v73 + (v75 & 0xFFFFFFFFFFFFFFF8));
            v76 = 8 * (v75 >> 3);
            v77 = (_QWORD *)(v26 + 8 * (v71 >> 2));
            do
            {
              v78 = *v74++;
              *v77++ = v78;
              v76 -= 8;
            }
            while (v76);
          }
          v79 = *(void **)(v9 + 536);
          *(_QWORD *)(v9 + 536) = v26;
          *(_QWORD *)(v9 + 544) = v73;
          *(_QWORD *)(v9 + 552) = v33;
          *(_QWORD *)(v9 + 560) = v26 + 8 * v72;
          if (v79)
          {
            operator delete(v79);
            v33 = *(uint64_t **)(v9 + 552);
          }
        }
        else
        {
          v46 = v45 >> 3;
          v47 = v45 >> 3 < -1;
          v48 = (v45 >> 3) + 2;
          if (v47)
            v49 = v48;
          else
            v49 = v46 + 1;
          v50 = -(v49 >> 1);
          v51 = v49 >> 1;
          v52 = &v40[-v51];
          v53 = (char *)v33 - (char *)v40;
          if (v33 != v40)
          {
            v26 = (uint64_t)memmove(&v40[-v51], v40, (char *)v33 - (char *)v40);
            v33 = *(uint64_t **)(v9 + 544);
          }
          v54 = &v33[v50];
          v33 = (uint64_t *)((char *)v52 + v53);
          *(_QWORD *)(v9 + 552) = (char *)v52 + v53;
          *(_QWORD *)(v9 + 544) = v54;
          v28 = v43;
        }
      }
      *v33 = v41;
    }
    else
    {
      v222 = v28;
      v55 = *(char **)(v9 + 560);
      v56 = *(char **)(v9 + 536);
      if (v35 >= (v55 - v56) >> 3)
      {
        if (v55 == v56)
          v58 = 1;
        else
          v58 = (v55 - v56) >> 2;
        v59 = (char *)sub_18D07BF3C(v58);
        v61 = v60;
        v221 = v27;
        v62 = operator new(0xFC0uLL);
        v63 = &v59[8 * v35];
        v64 = &v59[8 * v61];
        if (v35 == v61)
        {
          v65 = 8 * v35;
          if ((char *)v33 - v34 < 1)
          {
            v80 = v62;
            v81 = v65 >> 2;
            if (v33 == (uint64_t *)v34)
              v82 = 1;
            else
              v82 = v81;
            v83 = (char *)sub_18D07BF3C(v82);
            v63 = &v83[8 * (v82 >> 2)];
            v64 = &v83[8 * v84];
            if (v59)
              operator delete(v59);
            v59 = v83;
            v62 = v80;
          }
          else
          {
            v66 = v65 >> 3;
            if (v66 >= -1)
              v67 = v66 + 1;
            else
              v67 = v66 + 2;
            v63 -= 8 * (v67 >> 1);
          }
        }
        *(_QWORD *)v63 = v62;
        v85 = v63 + 8;
        for (i = *(_QWORD *)(v9 + 552); i != *(_QWORD *)(v9 + 544); i -= 8)
        {
          if (v63 == v59)
          {
            if (v85 >= v64)
            {
              if (v64 == v59)
                v91 = 1;
              else
                v91 = (v64 - v59) >> 2;
              v92 = (char *)sub_18D07BF3C(v91);
              v94 = v92;
              v63 = &v92[(2 * v91 + 6) & 0xFFFFFFFFFFFFFFF8];
              v95 = v85 - v59;
              v68 = v85 == v59;
              v85 = v63;
              if (!v68)
              {
                v85 = &v63[v95 & 0xFFFFFFFFFFFFFFF8];
                v96 = 8 * (v95 >> 3);
                v97 = v63;
                v98 = (uint64_t *)v59;
                do
                {
                  v99 = *v98++;
                  *(_QWORD *)v97 = v99;
                  v97 += 8;
                  v96 -= 8;
                }
                while (v96);
              }
              v64 = &v92[8 * v93];
              if (v59)
                operator delete(v59);
              v59 = v94;
            }
            else
            {
              v87 = (v64 - v85) >> 3;
              if (v87 >= -1)
                v88 = v87 + 1;
              else
                v88 = v87 + 2;
              v89 = v88 >> 1;
              v63 = &v59[8 * (v88 >> 1)];
              v90 = v59;
              if (v85 != v59)
              {
                memmove(v63, v59, v85 - v59);
                v90 = v85;
              }
              v85 = &v90[8 * v89];
            }
          }
          v100 = *(_QWORD *)(i - 8);
          *((_QWORD *)v63 - 1) = v100;
          v63 -= 8;
        }
        v26 = *(_QWORD *)(v9 + 536);
        *(_QWORD *)(v9 + 536) = v59;
        *(_QWORD *)(v9 + 544) = v63;
        *(_QWORD *)(v9 + 552) = v85;
        *(_QWORD *)(v9 + 560) = v64;
        v27 = v221;
        v28 = v222;
        if (v26)
          operator delete((void *)v26);
        goto LABEL_75;
      }
      v26 = (uint64_t)operator new(0xFC0uLL);
      v57 = v26;
      if (v55 != (char *)v33)
      {
        *v33 = v26;
        *(_QWORD *)(v9 + 552) += 8;
        v28 = v222;
LABEL_75:
        v34 = *(char **)(v9 + 544);
        v38 = *(_QWORD *)(v9 + 576) + *(_QWORD *)(v9 + 568);
        goto LABEL_76;
      }
      if (v34 == v56)
      {
        if (v33 == (uint64_t *)v34)
          v161 = 1;
        else
          v161 = (v55 - v34) >> 2;
        v26 = (uint64_t)sub_18D07BF3C(v161);
        v34 = (char *)(v26 + ((2 * v161 + 6) & 0xFFFFFFFFFFFFFFF8));
        v163 = *(uint64_t **)(v9 + 544);
        v164 = v34;
        v165 = *(_QWORD *)(v9 + 552) - (_QWORD)v163;
        v28 = v222;
        if (v165)
        {
          v164 = &v34[v165 & 0xFFFFFFFFFFFFFFF8];
          v166 = 8 * (v165 >> 3);
          v167 = v34;
          do
          {
            v168 = *v163++;
            *(_QWORD *)v167 = v168;
            v167 += 8;
            v166 -= 8;
          }
          while (v166);
        }
        v169 = *(void **)(v9 + 536);
        *(_QWORD *)(v9 + 536) = v26;
        *(_QWORD *)(v9 + 544) = v34;
        *(_QWORD *)(v9 + 552) = v164;
        *(_QWORD *)(v9 + 560) = v26 + 8 * v162;
        if (v169)
        {
          operator delete(v169);
          v34 = *(char **)(v9 + 544);
        }
      }
      else
      {
        v28 = v222;
      }
      *((_QWORD *)v34 - 1) = v57;
      v170 = *(char **)(v9 + 544);
      *(_QWORD *)(v9 + 544) = v170 - 8;
      v171 = *((_QWORD *)v170 - 1);
      *(_QWORD *)(v9 + 544) = v170;
      v172 = *(char **)(v9 + 552);
      if (v172 == *(char **)(v9 + 560))
      {
        v173 = *(_QWORD *)(v9 + 536);
        v174 = (uint64_t)&v170[-v173];
        if ((unint64_t)v170 <= v173)
        {
          v207 = (uint64_t)&v172[-v173];
          v68 = v207 == 0;
          v208 = v207 >> 2;
          if (v68)
            v209 = 1;
          else
            v209 = v208;
          v26 = (uint64_t)sub_18D07BF3C(v209);
          v211 = (char *)(v26 + 8 * (v209 >> 2));
          v212 = *(uint64_t **)(v9 + 544);
          v172 = v211;
          v213 = *(_QWORD *)(v9 + 552) - (_QWORD)v212;
          v28 = v222;
          if (v213)
          {
            v172 = &v211[v213 & 0xFFFFFFFFFFFFFFF8];
            v214 = 8 * (v213 >> 3);
            v215 = (_QWORD *)(v26 + 8 * (v209 >> 2));
            do
            {
              v216 = *v212++;
              *v215++ = v216;
              v214 -= 8;
            }
            while (v214);
          }
          v217 = *(void **)(v9 + 536);
          *(_QWORD *)(v9 + 536) = v26;
          *(_QWORD *)(v9 + 544) = v211;
          *(_QWORD *)(v9 + 552) = v172;
          *(_QWORD *)(v9 + 560) = v26 + 8 * v210;
          if (v217)
          {
            operator delete(v217);
            v172 = *(char **)(v9 + 552);
          }
        }
        else
        {
          v175 = v174 >> 3;
          v47 = v174 >> 3 < -1;
          v176 = (v174 >> 3) + 2;
          if (v47)
            v177 = v176;
          else
            v177 = v175 + 1;
          v178 = -(v177 >> 1);
          v179 = v177 >> 1;
          v180 = &v170[-8 * v179];
          v181 = v172 - v170;
          if (v172 != v170)
          {
            v26 = (uint64_t)memmove(&v170[-8 * v179], v170, v172 - v170);
            v170 = *(char **)(v9 + 544);
          }
          v172 = &v180[v181];
          *(_QWORD *)(v9 + 552) = &v180[v181];
          *(_QWORD *)(v9 + 544) = &v170[8 * v178];
          v28 = v222;
        }
      }
      *(_QWORD *)v172 = v171;
    }
    *(_QWORD *)(v9 + 552) += 8;
    goto LABEL_75;
  }
LABEL_76:
  v101 = *(_QWORD *)&v34[8 * (v38 / 0x1C)] + 144 * (v38 % 0x1C);
  *(_OWORD *)(v101 + 72) = v228;
  *(_OWORD *)(v101 + 56) = v227;
  *(_OWORD *)(v101 + 40) = v226;
  *(_OWORD *)(v101 + 8) = v224;
  *(_QWORD *)(v101 + 88) = v229;
  *(_OWORD *)(v101 + 24) = v225;
  *(int64x2_t *)(v101 + 96) = v223;
  *(_QWORD *)(v101 + 112) = v27;
  *(_QWORD *)(v101 + 120) = v30;
  *(_BYTE *)(v101 + 128) = v28;
  *(_BYTE *)(v101 + 129) = v29;
  *(_QWORD *)v101 = &unk_1E25C3160;
  *(_QWORD *)(v101 + 136) = v31;
  v102 = *(_QWORD *)(v9 + 576);
  *(_QWORD *)(v9 + 576) = v102 + 1;
  if (v102 == -1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v26) <= 1)
    {
      LOWORD(v230.__vftable) = 12;
      v259[0] = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v230, v259, "#WARNING,Prefilted pressure is empty", v103, v104, v105, v106, v107, v218);
    }
    return;
  }
  v108 = *(_QWORD *)(*(_QWORD *)(v9 + 544) + 8 * ((*(_QWORD *)(v9 + 568) + v102) / 0x1CuLL))
       + 144 * ((*(_QWORD *)(v9 + 568) + v102) % 0x1CuLL);
  v109 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v108 + 16))(v108);
  v111 = v110;
  *(_QWORD *)&v270[0] = v109;
  *((double *)v270 + 1) = v110;
  v112 = *(_QWORD *)(*(_QWORD *)(v9 + 544) + 8 * (*(_QWORD *)(v9 + 568) / 0x1CuLL))
       + 144 * (*(_QWORD *)(v9 + 568) % 0x1CuLL);
  v269[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v112 + 16))(v112);
  v269[1] = v113;
  v120 = *(_QWORD *)(v9 + 576);
  v121.i64[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 544) + 8 * ((v120 + *(_QWORD *)(v9 + 568) - 1) / 0x1C))
                          + 144 * ((v120 + *(_QWORD *)(v9 + 568) - 1) % 0x1C)
                          + 136);
  v122 = *(double *)v121.i64 * 1000.0;
  v123 = (unint64_t)(COERCE__INT64(fabs(*(double *)v121.i64 * 1000.0)) - 0x10000000000000) >> 53;
  v124 = COERCE__INT64(*(double *)v121.i64 * 1000.0) <= -1 || v123 >= 0x3FF;
  v125 = v124 && (unint64_t)(COERCE__INT64(*(double *)v121.i64 * 1000.0) - 1) >= 0xFFFFFFFFFFFFFLL;
  v126 = v111;
  if (v125)
  {
    LOWORD(v230.__vftable) = 12;
    v259[0] = 4;
    v219 = v111 + (double)v109;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v230, v259, "time,%.3lf,Most recent pressure is invalid", v114, v115, v116, v117, v118, SLOBYTE(v219));
    return;
  }
  v127 = (_QWORD *)(v9 + 496);
  if (*(_BYTE *)(v9 + 528))
  {
    v128 = CNTimeSpan::operator-((uint64_t)v270, (_QWORD *)(v9 + 496), v121, v119);
    *(double *)v121.i64 = v129 + (double)v128;
    v130 = *(_QWORD *)(v9 + 488);
    v119.i64[0] = *(_QWORD *)(v130 + 1336);
    if (*(double *)v121.i64 > *(double *)v119.i64)
    {
      *v127 = 0;
      *(_QWORD *)(v9 + 504) = 0;
      v121 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
      *(int8x16_t *)(v9 + 512) = v121;
      *(_BYTE *)(v9 + 528) = 0;
    }
  }
  else
  {
    v130 = *(_QWORD *)(v9 + 488);
  }
  v131 = CNTimeSpan::operator-((uint64_t)v270, v269, v121, v119);
  if (v132 + (double)v131 > *(double *)(v130 + 1344))
  {
    v266 = 0;
    v267 = 0;
    v268 = 0;
    sub_18D213F2C((uint64_t)&v266, v120);
    v133 = *(_QWORD *)(v9 + 544);
    if (*(_QWORD *)(v9 + 552) != v133)
    {
      v134 = *(_QWORD *)(v9 + 568);
      v135 = v134 / 0x1C;
      v136 = *(_QWORD *)(v133 + 8 * (v134 / 0x1C));
      v137 = v136 + 144 * (v134 % 0x1C);
      v138 = *(_QWORD *)(v133 + 8 * ((*(_QWORD *)(v9 + 576) + v134) / 0x1C))
           + 144 * ((*(_QWORD *)(v9 + 576) + v134) % 0x1C);
      if (v137 != v138)
      {
        v139 = v133 + 8 * v135;
        v140 = v266;
        do
        {
          *v140 = vabdd_f64(*(double *)(v137 + 104), *(double *)(v137 + 136));
          v137 += 144;
          if (v137 - v136 == 4032)
          {
            v141 = *(_QWORD *)(v139 + 8);
            v139 += 8;
            v136 = v141;
            v137 = v141;
          }
          ++v140;
        }
        while (v137 != v138);
      }
    }
    v262 = 0;
    v263 = 0;
    v264 = 0;
    v259[0] = 0;
    v260 = 0;
    v261 = 1;
    sub_18D2144E4(&v262);
    v265 = 1;
    v142 = (uint64_t *)v266;
    v143 = (uint64_t *)v267;
    while (v142 != v143)
    {
      if (sub_18D213F5C((uint64_t)v259, v142, 1.0))
      {
        LOWORD(v230.__vftable) = 12;
        v256[0] = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v230, v256, "RavenDeltaAltitudeActiveObject failed to add noise sample %.3lf to OnlineRobustStatisticsEstimator", v144, v145, v146, v147, v148, *v142);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
        goto LABEL_156;
      }
      ++v142;
    }
    sub_18D2145A8((uint64_t)v259, 50.0);
    v149 = *(_QWORD *)(v9 + 488);
    v150 = *(void ***)(v9 + 544);
    v151 = *(void ***)(v9 + 552);
    if (v152 < *(double *)(v149 + 1352))
    {
      if (v151 == v150)
      {
        v158 = v266;
      }
      else
      {
        v153 = *(_QWORD *)(v9 + 568);
        v154 = &v150[v153 / 0x1C];
        v155 = (unint64_t)*v154;
        v156 = (unint64_t)*v154 + 144 * (v153 % 0x1C);
        v157 = (unint64_t)v150[(*(_QWORD *)(v9 + 576) + v153) / 0x1C]
             + 144 * ((*(_QWORD *)(v9 + 576) + v153) % 0x1C);
        v158 = v266;
        if (v156 != v157)
        {
          v159 = v266;
          do
          {
            *v159 = *(double *)(v156 + 104) - *(double *)(v156 + 136);
            v156 += 144;
            if (v156 - v155 == 4032)
            {
              v160 = (unint64_t)v154[1];
              ++v154;
              v155 = v160;
              v156 = v160;
            }
            ++v159;
          }
          while (v156 != v157);
        }
      }
      v256[0] = 0;
      v257 = 0u;
      memset(v258, 0, sizeof(v258));
      v182 = v267;
      if (v158 != v267)
      {
        while (!sub_18D1648E4((uint64_t)v256, v158, 1.0))
        {
          if (++v158 == v182)
          {
            v188 = *(double *)&v258[5];
            v149 = *(_QWORD *)(v9 + 488);
            goto LABEL_133;
          }
        }
        LOWORD(v230.__vftable) = 12;
        v255 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v230, &v255, "RavenDeltaAltitudeActiveObject failed to add noise sample %.3lf to OnlineStatisticsEstimator", v183, v184, v185, v186, v187, *(_QWORD *)v158);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
        goto LABEL_156;
      }
      v188 = 0.0;
LABEL_133:
      v194 = pow(v122 / 101325.0, 0.190263237);
      v195 = sqrt(v188) * 1000.0;
      if (v195 <= *(double *)(v149 + 720))
        v195 = *(double *)(v149 + 720);
      if (fabs(v195) < 2.22044605e-16)
      {
        LOWORD(v230.__vftable) = 12;
        v255 = 4;
        v220 = v126 + (double)v109;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v230, &v255, "time,%.3lf,Most recent pressure is invalid", v189, v190, v191, v192, v193, SLOBYTE(v220));
LABEL_156:
        if (v262)
        {
          v263 = v262;
          operator delete(v262);
        }
        if (v266)
        {
          v267 = v266;
          operator delete(v266);
        }
        return;
      }
      v196 = (v194 + -1.0) * -44330.7692;
      v197 = fabs((v196 + 44330.7692) * 0.190263237 / v122) * v195;
      if (*(_BYTE *)(v9 + 528))
      {
        v230.__vftable = (std::bad_cast_vtbl *)&unk_1E25C2B78;
        v233 = 0;
        v234 = 0;
        v235 = 0;
        v236 = 0;
        v237 = 0;
        v238 = 0;
        v239 = 0;
        v240 = 0;
        v241 = 0x7FF8000000000000;
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v247 = 0;
        v248 = 0;
        v249 = 0;
        v250 = 0;
        v251 = 0;
        v252 = 0x7FF8000000000000;
        v232 = 0;
        v231 = v270[0];
        v243 = 0;
        v242 = *(_OWORD *)v127;
        v198 = sqrt(*(double *)(v9 + 520) * *(double *)(v9 + 520) + v197 * v197);
        v253 = v196 - *(double *)(v9 + 512);
        v254 = v198;
        sub_18D214148(v9, (uint64_t *)&v230);
      }
      *(_OWORD *)v127 = v270[0];
      *(double *)(v9 + 512) = v196;
      *(double *)(v9 + 520) = v197;
      *(_BYTE *)(v9 + 528) = 1;
      v150 = *(void ***)(v9 + 544);
      v151 = *(void ***)(v9 + 552);
    }
    if (v151 == v150)
    {
      v150 = v151;
    }
    else
    {
      v199 = *(_QWORD *)(v9 + 568);
      v200 = &v150[v199 / 0x1C];
      v201 = (unint64_t)v150[(*(_QWORD *)(v9 + 576) + v199) / 0x1C]
           + 144 * ((*(_QWORD *)(v9 + 576) + v199) % 0x1C);
      if ((char *)*v200 + 144 * (v199 % 0x1C) != (void *)v201)
      {
        v202 = (void (***)(void))((char *)*v200 + 144 * (v199 % 0x1C));
        do
        {
          v203 = *v202;
          v202 += 18;
          (*v203)();
          if ((char *)v202 - (_BYTE *)*v200 == 4032)
          {
            v204 = (void (***)(void))v200[1];
            ++v200;
            v202 = v204;
          }
        }
        while (v202 != (void (***)(void))v201);
        v151 = *(void ***)(v9 + 552);
        v150 = *(void ***)(v9 + 544);
      }
    }
    *(_QWORD *)(v9 + 576) = 0;
    v205 = (char *)v151 - (char *)v150;
    if (v205 >= 0x11)
    {
      do
      {
        operator delete(*v150);
        v150 = (void **)(*(_QWORD *)(v9 + 544) + 8);
        *(_QWORD *)(v9 + 544) = v150;
        v205 = *(_QWORD *)(v9 + 552) - (_QWORD)v150;
      }
      while (v205 > 0x10);
    }
    if (v205 >> 3 == 1)
    {
      v206 = 14;
    }
    else
    {
      if (v205 >> 3 != 2)
        goto LABEL_156;
      v206 = 28;
    }
    *(_QWORD *)(v9 + 568) = v206;
    goto LABEL_156;
  }
}

void sub_18D213E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::exception a27)
{
  uint64_t v27;
  void *v29;
  void *v30;

  v29 = *(void **)(v27 - 232);
  if (v29)
  {
    *(_QWORD *)(v27 - 224) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v27 - 200);
  if (v30)
  {
    *(_QWORD *)(v27 - 192) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D213EE4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8348))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D213F20()
{
  return &unk_1E25B8348;
}

void sub_18D213F2C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_18D2143DC((char **)a1, a2 - v2);
  }
}

uint64_t sub_18D213F5C(uint64_t a1, uint64_t *a2, double a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;
  uint64_t result;
  double *v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  double *v21;
  char *v22;
  char *v23;
  BOOL v25;

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
    sub_18D2144E4((char **)(a1 + 24));
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v7 = ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (a3 >= 0.0)
  {
    v7 = 0;
    v6 = 0;
  }
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v6 = 1;
  v8 = (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v6;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    v8 = 1;
  result = 0xFFFFFFFFLL;
  if (((v8 | v7) & 1) == 0)
  {
    v10 = *(double **)(a1 + 24);
    v11 = *(double **)(a1 + 32);
    *(double *)(a1 + 8) = *(double *)(a1 + 8) + a3;
    v12 = *a2;
    v13 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v11 >= v13)
    {
      v15 = ((char *)v11 - (char *)v10) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        sub_18D07AFE4();
      v17 = v13 - (_QWORD)v10;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)sub_18D16735C(a1 + 40, v18);
        v20 = *(double **)(a1 + 24);
        v21 = *(double **)(a1 + 32);
      }
      else
      {
        v19 = 0;
        v20 = v10;
        v21 = v11;
      }
      v22 = &v19[16 * v15];
      v23 = &v19[16 * v18];
      *(double *)v22 = a3;
      *((_QWORD *)v22 + 1) = v12;
      v14 = v22 + 16;
      if (v21 != v20)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
          v22 -= 16;
          v21 -= 2;
        }
        while (v21 != v20);
        v20 = *(double **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 40) = v23;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v11 = a3;
      *((_QWORD *)v11 + 1) = v12;
      v14 = (char *)(v11 + 2);
    }
    *(_QWORD *)(a1 + 32) = v14;
    if (v11 != v10)
    {
      v25 = vabdd_f64(**(double **)(a1 + 24), a3) < 2.22044605e-16 && *(_BYTE *)(a1 + 16) != 0;
      *(_BYTE *)(a1 + 16) = v25;
      *(_BYTE *)(a1 + 48) = 0;
    }
    result = 0;
    *(_BYTE *)a1 = 1;
  }
  return result;
}

void sub_18D214148(uint64_t a1, uint64_t *a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  char *v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v6 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v6;
  v7 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E25C1930;
  *(_QWORD *)(v8 + 8) = &unk_1E25C2B78;
  v9 = *(_OWORD *)(a2 + 19);
  v10 = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v8 + 176) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(v8 + 192) = v10;
  *(_OWORD *)(v8 + 208) = *(_OWORD *)(a2 + 25);
  v11 = *(_OWORD *)(a2 + 11);
  v12 = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(v8 + 128) = v12;
  *(_OWORD *)(v8 + 144) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(v8 + 160) = v9;
  v13 = *(_OWORD *)(a2 + 3);
  v14 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v8 + 64) = v14;
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v8 + 96) = v11;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v8 + 32) = v13;
  v15 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v8;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v16 + 16))(a2);
  *((_QWORD *)v4 + 8) = v17;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v30, a2);
  if (v4[95] < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v30;
  *((_QWORD *)v4 + 11) = v31;
  v28 = v4 + 24;
  v29 = (std::__shared_weak_count *)v4;
  v18 = *(_QWORD *)(a1 + 344);
  v26 = v4 + 24;
  v27 = (std::__shared_weak_count *)v4;
  do
    v19 = __ldxr(v5);
  while (__stxr(v19 + 1, v5));
  (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)v18 + 16))(v18, &v26, a1);
  v20 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    v24 = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_18D214378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18D2143DC(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_18D07AFE4();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_18D0788C8(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_18D2144E4(char **a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = (uint64_t)(a1 + 2);
  v3 = a1[2];
  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - v4) >> 4;
  if (v6 < (v3 - v4) >> 4)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 16 * v6;
    }
    else
    {
      v7 = (char *)sub_18D16735C(v2, v6);
      v8 = *a1;
      v4 = a1[1];
      v9 = (uint64_t)&v7[16 * v6];
      v11 = &v7[16 * v10];
      if (v4 != *a1)
      {
        v12 = v9;
        do
        {
          *(_OWORD *)(v12 - 16) = *((_OWORD *)v4 - 1);
          v12 -= 16;
          v4 -= 16;
        }
        while (v4 != v8);
        v4 = *a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *a1 = (char *)v12;
    a1[1] = (char *)v9;
    a1[2] = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_18D2145A8(uint64_t a1, double a2)
{
  unint64_t v5;
  double *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  double *v16;
  double v17;
  double *v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  char v23;

  if (a2 >= 0.0 && a2 <= 100.0 && (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    if (*(_BYTE *)a1)
    {
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(double **)(a1 + 32);
      if ((double *)((char *)v6 - v5) != (double *)16)
      {
        v7 = (uint64_t)((uint64_t)v6 - v5) >> 4;
        if (!*(_BYTE *)(a1 + 48))
        {
          v8 = 126 - 2 * __clz(v7);
          if (v6 == (double *)v5)
            v9 = 0;
          else
            v9 = v8;
          sub_18D2147F8(v5, v6, (uint64_t)&v23, v9, 1);
          *(_BYTE *)(a1 + 48) = 1;
        }
        v10 = a2 / 100.0;
        if (*(_BYTE *)(a1 + 16))
        {
          v11 = (double)v7 + 1.0;
          if (v10 > 1.0 / v11 && v10 < (double)v7 / v11)
          {
            v12 = v10 * v11;
            v13 = vcvtmd_u64_f64(v12);
            v14 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4;
            if (v14 <= v13 - 1 || v14 <= v13)
              sub_18D215560();
            fmod(v12, 1.0);
          }
        }
        else
        {
          v15 = *(double *)(a1 + 8);
          v16 = *(double **)(a1 + 24);
          v17 = *v16 * 0.5 / v15;
          if (v10 > v17)
          {
            v18 = *(double **)(a1 + 32);
            if (v10 < *(v18 - 2) * -0.5 / v15 + 1.0 && v16 != v18)
            {
              v19 = v17 + 0.0;
              if (v17 + 0.0 < v10)
              {
                v20 = v16 + 2;
                do
                {
                  if (v20 == v18)
                    break;
                  v21 = v17 + v19;
                  v22 = *v20;
                  v20 += 2;
                  v17 = v22 * 0.5 / v15;
                  v19 = v21 + v17;
                }
                while (v19 < v10);
              }
            }
          }
        }
      }
    }
  }
}

void sub_18D2147F8(unint64_t a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  double v20;
  uint64_t v21;

uint64_t sub_18D214B44(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_QWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      v3 = 0;
      v4 = (_QWORD *)result;
      do
      {
        v5 = *((double *)v4 + 3);
        v6 = *((double *)v4 + 1);
        v4 = v2;
        if (v5 < v6)
        {
          v7 = *v2;
          v8 = v3;
          while (1)
          {
            v9 = result + v8;
            v10 = *(_QWORD *)(result + v8 + 8);
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(result + v8);
            *(_QWORD *)(v9 + 24) = v10;
            if (!v8)
              break;
            v8 -= 16;
            if (v5 >= *(double *)(v9 - 8))
            {
              v11 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *(_QWORD *)v11 = v7;
          *(double *)(v11 + 8) = v5;
        }
        v2 = v4 + 2;
        v3 += 16;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

_QWORD *sub_18D214BC4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  double *v3;
  double v4;
  double v5;
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = (double *)(result + 3);
      do
      {
        v4 = *((double *)result + 3);
        v5 = *((double *)result + 1);
        result = v2;
        if (v4 < v5)
        {
          v6 = *v2;
          v7 = v3;
          do
          {
            v8 = v7;
            v9 = *(v7 - 4);
            *(v7 - 1) = *(v7 - 3);
            v10 = *((_QWORD *)v7 - 2);
            v7 -= 2;
            *(_QWORD *)v8 = v10;
          }
          while (v4 < v9);
          *((_QWORD *)v7 - 1) = v6;
          *v7 = v4;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_18D214C2C(double *a1, double *a2, double *a3)
{
  double *v3;
  double v4;
  double *v5;
  double v6;
  uint64_t v7;
  uint64_t result;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = a1 + 1;
  v6 = a3[1];
  if (v4 >= a1[1])
  {
    if (v6 >= v4)
      return 0;
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    v10 = *((_QWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_QWORD *)a3 + 1) = v10;
    if (a2[1] < *v5)
    {
      v11 = *a1;
      *a1 = *a2;
      *a2 = v11;
      result = 2;
LABEL_10:
      v14 = *v5;
      *v5 = *v3;
      *v3 = v14;
      return result;
    }
  }
  else
  {
    v7 = *(_QWORD *)a1;
    if (v6 < v4)
    {
      *a1 = *a3;
      *(_QWORD *)a3 = v7;
      result = 1;
LABEL_9:
      v3 = a3 + 1;
      goto LABEL_10;
    }
    *a1 = *a2;
    *(_QWORD *)a2 = v7;
    v12 = a1[1];
    a1[1] = a2[1];
    a2[1] = v12;
    if (a3[1] < v12)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      result = 2;
      v5 = a2 + 1;
      goto LABEL_9;
    }
  }
  return 1;
}

unint64_t sub_18D214D24(double *a1, double *a2)
{
  double v2;
  double *v3;
  unint64_t v4;
  double v5;
  unint64_t v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;

  v2 = a1[1];
  if (v2 >= *(a2 - 1))
  {
    v6 = (unint64_t)(a1 + 2);
    do
    {
      v4 = v6;
      if (v6 >= (unint64_t)a2)
        break;
      v7 = *(double *)(v6 + 8);
      v6 += 16;
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (unint64_t)(v3 + 2);
      v5 = v3[3];
      v3 += 2;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
    }
    while (v2 < v9);
  }
  v10 = *a1;
  while (v4 < (unint64_t)v8)
  {
    v11 = *(_QWORD *)v4;
    *(double *)v4 = *v8;
    *(_QWORD *)v8 = v11;
    v12 = *(_QWORD *)(v4 + 8);
    *(double *)(v4 + 8) = v8[1];
    *((_QWORD *)v8 + 1) = v12;
    do
    {
      v13 = *(double *)(v4 + 24);
      v4 += 16;
    }
    while (v2 >= v13);
    do
    {
      v14 = *(v8 - 1);
      v8 -= 2;
    }
    while (v2 < v14);
  }
  if ((double *)(v4 - 16) != a1)
  {
    *a1 = *(double *)(v4 - 16);
    a1[1] = *(double *)(v4 - 8);
  }
  *(double *)(v4 - 16) = v10;
  *(double *)(v4 - 8) = v2;
  return v4;
}

unint64_t sub_18D214E0C(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  double *v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 < v4);
  v6 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    while (v6 < (unint64_t)a2)
    {
      v7 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 < v4)
        goto LABEL_9;
    }
    v7 = a2;
  }
  else
  {
    do
    {
      v7 = a2 - 2;
      v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 >= v4);
  }
LABEL_9:
  v10 = (unint64_t)&a1[v2];
  if (v6 < (unint64_t)v7)
  {
    v11 = v7;
    do
    {
      v12 = *(_QWORD *)v10;
      *(double *)v10 = *v11;
      *(_QWORD *)v11 = v12;
      v13 = *(_QWORD *)(v10 + 8);
      *(double *)(v10 + 8) = v11[1];
      *((_QWORD *)v11 + 1) = v13;
      do
      {
        v14 = *(double *)(v10 + 24);
        v10 += 16;
      }
      while (v14 < v4);
      do
      {
        v15 = *(v11 - 1);
        v11 -= 2;
      }
      while (v15 >= v4);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((double *)(v10 - 16) != a1)
  {
    *a1 = *(double *)(v10 - 16);
    a1[1] = *(double *)(v10 - 8);
  }
  *(double *)(v10 - 16) = v3;
  *(double *)(v10 - 8) = v4;
  return v10 - 16;
}

BOOL sub_18D214EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 8) < *(double *)(a1 + 8))
      {
        v6 = *(double *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(double *)(a2 - 16) = v6;
        v7 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      sub_18D214C2C((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_18D215084((double *)a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_18D21514C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (double *)(a1 + 48), (double *)(a2 - 16));
      return 1;
    default:
      v8 = a1 + 32;
      sub_18D214C2C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(double *)(v9 + 8);
    if (v12 < *(double *)(v8 + 8))
    {
      v13 = *(_QWORD *)v9;
      v14 = v10;
      while (1)
      {
        v15 = a1 + v14;
        v16 = *(_QWORD *)(a1 + v14 + 40);
        *(_QWORD *)(v15 + 48) = *(_QWORD *)(a1 + v14 + 32);
        *(_QWORD *)(v15 + 56) = v16;
        if (v14 == -32)
          break;
        v14 -= 16;
        if (v12 >= *(double *)(v15 + 24))
        {
          v17 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v13;
      *(double *)(v17 + 8) = v12;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

double sub_18D215084(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;

  sub_18D214C2C(a1, (double *)a2, (double *)a3);
  result = *(double *)(a4 + 8);
  if (result < *(double *)(a3 + 8))
  {
    v9 = *(double *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(double *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    result = *(double *)(a3 + 8);
    if (result < *(double *)(a2 + 8))
    {
      v11 = *(double *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(double *)a3 = v11;
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
      result = *(double *)(a2 + 8);
      if (result < a1[1])
      {
        v13 = *a1;
        *a1 = *(double *)a2;
        *(double *)a2 = v13;
        result = a1[1];
        a1[1] = *(double *)(a2 + 8);
        *(double *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

double sub_18D21514C(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  double result;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;

  sub_18D215084(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result = a5[1];
  if (result < a4[1])
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = *((_QWORD *)a4 + 1);
    a4[1] = a5[1];
    *((_QWORD *)a5 + 1) = v12;
    result = a4[1];
    if (result < a3[1])
    {
      v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      v14 = *((_QWORD *)a3 + 1);
      a3[1] = a4[1];
      *((_QWORD *)a4 + 1) = v14;
      result = a3[1];
      if (result < a2[1])
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        v16 = *((_QWORD *)a2 + 1);
        a2[1] = a3[1];
        *((_QWORD *)a3 + 1) = v16;
        result = a2[1];
        if (result < a1[1])
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          result = a1[1];
          a1[1] = a2[1];
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

double *sub_18D215250(uint64_t a1, double *a2, double *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  double v20;
  double *v21;

  if ((double *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (double *)(a1 + 16 * v10);
      do
      {
        sub_18D2153C0(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (v14[1] < *(double *)(a1 + 8))
        {
          v15 = *v14;
          *v14 = *(double *)a1;
          *(double *)a1 = v15;
          v16 = *((_QWORD *)v14 + 1);
          v14[1] = *(double *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v16;
          sub_18D2153C0(a1, a4, v9, (double *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      v18 = a2 - 2;
      do
      {
        v20 = *(double *)a1;
        v19 = *(_QWORD *)(a1 + 8);
        sub_18D215488(a1, a4, v17);
        if (v18 == v21)
        {
          *v21 = v20;
          *((_QWORD *)v21 + 1) = v19;
        }
        else
        {
          *v21 = *v18;
          v21[1] = v18[1];
          *v18 = v20;
          *((_QWORD *)v18 + 1) = v19;
          sub_18D2154F8(a1, (uint64_t)(v21 + 2), a4, ((uint64_t)v21 - a1 + 16) >> 4);
        }
        v18 -= 2;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_18D2153C0(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (double *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && v8[1] < v8[3])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = a4[1];
      if (v8[1] >= v10)
      {
        v11 = *a4;
        do
        {
          v12 = a4;
          a4 = v8;
          *v12 = *v8;
          v12[1] = v8[1];
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (double *)(result + 16 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && v8[1] < v8[3])
          {
            v8 += 2;
            v7 = v14;
          }
        }
        while (v8[1] >= v10);
        *a4 = v11;
        a4[1] = v10;
      }
    }
  }
  return result;
}

double sub_18D215488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 16 * (v3 + 1);
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3 && *(double *)(a1 + 8) < *(double *)(a1 + 24))
    {
      a1 += 16;
      v3 = v8;
    }
    *(_QWORD *)v6 = *(_QWORD *)a1;
    result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_18D2154F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  double v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = *(double *)(a2 - 8);
    if (*(double *)(result + 16 * v4 + 8) < v5)
    {
      v7 = *(_QWORD *)(a2 - 16);
      v6 = (_QWORD *)(a2 - 16);
      v8 = v7;
      do
      {
        v9 = v6;
        v6 = (_QWORD *)(result + 16 * v4);
        *v9 = *v6;
        v9[1] = v6[1];
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(double *)(result + 16 * v4 + 8) < v5);
      *v6 = v8;
      *((double *)v6 + 1) = v5;
    }
  }
  return result;
}

void sub_18D215560()
{
  sub_18D077838("vector");
}

void sub_18D215578()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21558C()
{
}

__n128 sub_18D215598(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1930;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2B78;
  v3 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v2 + 192) = v3;
  *(_OWORD *)(v2 + 208) = *(_OWORD *)(a1 + 208);
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v5;
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v6;
  v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v7;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

void sub_18D215620()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D215634()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9EA0;
  return result;
}

void sub_18D215658(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9EA0;
}

uint64_t sub_18D21566C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  unsigned __int8 v28;
  __int16 v29;
  std::bad_cast v30;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven29PrefilteredPressureResetEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven29PrefilteredPressureResetEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v30.__vftable = 0;
      std::bad_cast::bad_cast(&v30);
      v30.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
  }
  else
  {
    v29 = 3;
    v28 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
}

void sub_18D21576C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D215780(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8358))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2157BC()
{
  return &unk_1E25B8358;
}

void sub_18D2157CC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2157E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA580;
  return result;
}

void sub_18D215804(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA580;
}

_BYTE *sub_18D215818(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  _BYTE v10[112];

  v8 = *a2;
  sub_18D21589C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(v8, (const raven::ARSessionStatusEvent *)v10);
}

uint64_t sub_18D215854(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8498))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D215890()
{
  return &unk_1E25B8498;
}

__n128 sub_18D21589C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned __int8 v32;
  __int16 v33;
  std::bad_cast v34;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven20ARSessionStatusEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven20ARSessionStatusEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v34.__vftable = 0;
        std::bad_cast::bad_cast(&v34);
        v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    v30 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v30;
    result = *(__n128 *)(v28 + 16);
    v31 = *(_OWORD *)(v28 + 32);
    *(__n128 *)(a1 + 8) = result;
    *(_OWORD *)(a1 + 24) = v31;
    *(_QWORD *)a1 = &unk_1E25C2CC8;
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(v28 + 112);
    *(_OWORD *)(a1 + 40) = v29;
  }
  else
  {
    v33 = 3;
    v32 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2CC8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D215A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D215A38()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D215A4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA4D0;
  return result;
}

uint64_t sub_18D215A74(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8478))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D215AB0()
{
  return &unk_1E25B8478;
}

void sub_18D215AC0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D215AD4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA478;
  return result;
}

void sub_18D215AF8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA478;
}

void sub_18D215B0C(int a1, raven::RavenDeltaVIOEstimateActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeltaVIOEstimateActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  int8x16_t v27;
  const char *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::bad_cast v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _WORD v65[221];
  char v66;
  unsigned __int8 v67;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v28 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v28 != (const char *)((unint64_t)"N5raven16VIOEstimateEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v28, (const char *)((unint64_t)"N5raven16VIOEstimateEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v34.__vftable = 0;
      std::bad_cast::bad_cast(&v34);
      v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v29 = (_OWORD *)*((_QWORD *)this + 2);
    v34.__vftable = (std::bad_cast_vtbl *)&off_1E25C27B8;
    v30 = v29[2];
    v35 = v29[1];
    v36 = v30;
    v31 = v29[5];
    v32 = v29[6];
    v33 = v29[4];
    v37 = v29[3];
    v40 = v32;
    v39 = v31;
    v38 = v33;
    sub_18D215D54((uint64_t)v41, (uint64_t)(v29 + 7));
  }
  else
  {
    LOWORD(v34.__vftable) = 3;
    v67 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v67, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    bzero(&v36, 0x490uLL);
    v35 = 0uLL;
    v34.__vftable = (std::bad_cast_vtbl *)&off_1E25C27B8;
    LOBYTE(v36) = 0;
    *((_QWORD *)&v36 + 1) = 0;
    *(_QWORD *)&v37 = 0;
    BYTE8(v37) = 0;
    v38 = 0uLL;
    LOBYTE(v39) = 0;
    *((_QWORD *)&v39 + 1) = 0;
    *(_QWORD *)&v40 = 0;
    v41[0] = 0;
    v41[1] = 0;
    *((_QWORD *)&v40 + 1) = 0x7FF8000000000000;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0x7FF8000000000000;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v62 = 0;
    v63 = 0x7FF8000000000000;
    v61 = 0;
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v64);
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v65);
    v65[220] = 0;
    v66 = 0;
  }
  raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(v9, (const raven::VIOEstimateEvent *)&v34, v26, v27);
}

void sub_18D215CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  std::exception::~exception(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_18D215D0C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8468))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D215D48()
{
  return &unk_1E25B8468;
}

uint64_t sub_18D215D54(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  }
  sub_18D04DA0C(a1 + 232, a2 + 232);
  sub_18D159B20(a1 + 296, a2 + 296);
  sub_18D159B20(a1 + 408, a2 + 408);
  sub_18D159B20(a1 + 520, a2 + 520);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  }
  sub_18D04DA0C(a1 + 672, a2 + 672);
  sub_18D159B20(a1 + 736, a2 + 736);
  sub_18D159B20(a1 + 848, a2 + 848);
  sub_18D159B20(a1 + 960, a2 + 960);
  *(_BYTE *)(a1 + 1072) = *(_BYTE *)(a2 + 1072);
  v13 = *(_WORD *)(a2 + 1080);
  *(_BYTE *)(a1 + 1082) = *(_BYTE *)(a2 + 1082);
  *(_WORD *)(a1 + 1080) = v13;
  return a1;
}

void sub_18D215EB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *v7 = &unk_1E25C5E70;
  *v6 = &unk_1E25C5E70;
  *v5 = &unk_1E25C5E70;
  *v4 = &unk_1E25C5E70;
  *v3 = &unk_1E25C5E70;
  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D215F4C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D215F60()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA528;
  return result;
}

void sub_18D215F84(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA528;
}

void sub_18D215F98(int a1, raven::RavenDeltaVIOEstimateActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeltaVIOEstimateActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  std::bad_cast v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[448];
  int64x2_t v54;
  unsigned __int8 v55;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven19VLLocalizationEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven19VLLocalizationEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v27.__vftable = 0;
      std::bad_cast::bad_cast(&v27);
      v27.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    sub_18D216190((uint64_t)&v27, *((_QWORD *)this + 2) + 8);
  }
  else
  {
    LOWORD(v27.__vftable) = 3;
    v55 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v55, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    bzero(v30, 0x438uLL);
    v28 = 0;
    v29 = 0;
    v27.__vftable = (std::bad_cast_vtbl *)&off_1E25C2C98;
    v30[0] = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v40 = 0;
    v41 = 0;
    v39 = 0x7FF8000000000000;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0x7FF8000000000000;
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v52);
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v53);
    v53[440] = 0;
    v54 = vdupq_n_s64(0x7FF8000000000000uLL);
  }
  raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(v9, (const raven::VLLocalizationEvent *)&v27);
}

void sub_18D216134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D216148(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8488))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D216184()
{
  return &unk_1E25B8488;
}

uint64_t sub_18D216190(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = &off_1E25C2C98;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  }
  sub_18D04DA0C(a1 + 232, a2 + 232);
  sub_18D159B20(a1 + 296, a2 + 296);
  sub_18D159B20(a1 + 408, a2 + 408);
  sub_18D159B20(a1 + 520, a2 + 520);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  }
  sub_18D04DA0C(a1 + 672, a2 + 672);
  sub_18D159B20(a1 + 736, a2 + 736);
  sub_18D159B20(a1 + 848, a2 + 848);
  sub_18D159B20(a1 + 960, a2 + 960);
  *(_BYTE *)(a1 + 1072) = *(_BYTE *)(a2 + 1072);
  v13 = *(_OWORD *)(a2 + 1080);
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1080) = v13;
  return a1;
}

void sub_18D21632C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *v7 = &unk_1E25C5E70;
  *v6 = &unk_1E25C5E70;
  *v5 = &unk_1E25C5E70;
  *v4 = &unk_1E25C5E70;
  *v3 = &unk_1E25C5E70;
  *v2 = &unk_1E25C5E70;
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D2163C0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2163D4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA108;
  return result;
}

void sub_18D2163F8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA108;
}

void sub_18D21640C(int a1, int64x2_t **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64x2_t *v8;
  _BYTE v9[152];

  v8 = *a2;
  sub_18D20CDC4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::AccelerometerEvent *)v9);
}

uint64_t sub_18D216448(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B83C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D216484()
{
  return &unk_1E25B83C8;
}

void sub_18D216494()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2164A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA160;
  return result;
}

uint64_t sub_18D2164D0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B83D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21650C()
{
  return &unk_1E25B83D8;
}

void sub_18D21651C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D216530()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9EF8;
  return result;
}

void sub_18D216554(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9EF8;
}

double sub_18D216568(int a1, __n128 **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v8;
  __n128 v9;
  _BYTE v11[224];

  v8 = *a2;
  v9 = sub_18D2165EC((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::AttitudeEvent *)v11, v9);
}

uint64_t sub_18D2165A4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8368))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2165E0()
{
  return &unk_1E25B8368;
}

__n128 sub_18D2165EC(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  int64x2_t v27;
  const char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned __int8 v37;
  __int16 v38;
  std::bad_cast v39;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v28 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v28 != (const char *)((unint64_t)"N5raven13AttitudeEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v28, (const char *)((unint64_t)"N5raven13AttitudeEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v39.__vftable = 0;
      std::bad_cast::bad_cast(&v39);
      v39.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v29 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = &unk_1E25C2158;
    v30 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(a1 + 8) = v30;
    v31 = *(_OWORD *)(v29 + 48);
    v32 = *(_OWORD *)(v29 + 64);
    v33 = *(_OWORD *)(v29 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v29 + 96);
    *(_OWORD *)(a1 + 72) = v33;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 40) = v31;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    if (a1 != v29 + 8)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(v29 + 112);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(v29 + 128);
    }
    v34 = *(_OWORD *)(v29 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v29 + 160);
    *(_OWORD *)(a1 + 136) = v34;
    result = *(__n128 *)(v29 + 176);
    v35 = *(_OWORD *)(v29 + 192);
    v36 = *(_OWORD *)(v29 + 208);
    *(_WORD *)(a1 + 216) = *(_WORD *)(v29 + 224);
    *(_OWORD *)(a1 + 200) = v36;
    *(_OWORD *)(a1 + 184) = v35;
    *(__n128 *)(a1 + 168) = result;
  }
  else
  {
    v38 = 3;
    v37 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C2158;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    result.n128_u64[0] = 0x3FF0000000000000;
    v27 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)(a1 + 128) = xmmword_18D31CED0;
    *(int64x2_t *)(a1 + 144) = v27;
    *(int64x2_t *)(a1 + 160) = v27;
    *(int64x2_t *)(a1 + 176) = v27;
    *(int64x2_t *)(a1 + 192) = v27;
    *(_QWORD *)(a1 + 208) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 216) = 0;
    *(_BYTE *)(a1 + 216) = 1;
  }
  return result;
}

void sub_18D2167F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D216810()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D216824()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA210;
  return result;
}

void sub_18D216848(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA210;
}

void sub_18D21685C(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeviceAttitudeActiveObject *v8;
  __n128 v9;
  int8x16_t v10;
  _BYTE v11[200];

  v8 = *a2;
  v9 = sub_18D2168E0((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::DecomposedAccelerationEvent *)v11, (int8x16_t)v9, v10);
}

uint64_t sub_18D216898(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B83F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2168D4()
{
  return &unk_1E25B83F8;
}

__n128 sub_18D2168E0(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  int64x2_t v27;
  const char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 v36;
  __int16 v37;
  std::bad_cast v38;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v28 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v28 != (const char *)((unint64_t)"N5raven27DecomposedAccelerationEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v28, (const char *)((unint64_t)"N5raven27DecomposedAccelerationEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v38.__vftable = 0;
      std::bad_cast::bad_cast(&v38);
      v38.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v29 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = &unk_1E25C35E8;
    v30 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(a1 + 8) = v30;
    v31 = *(_OWORD *)(v29 + 48);
    v32 = *(_OWORD *)(v29 + 64);
    v33 = *(_OWORD *)(v29 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v29 + 96);
    *(_OWORD *)(a1 + 72) = v33;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 40) = v31;
    result = *(__n128 *)(v29 + 112);
    v34 = *(_OWORD *)(v29 + 128);
    v35 = *(_OWORD *)(v29 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v29 + 160);
    *(_OWORD *)(a1 + 136) = v35;
    *(_OWORD *)(a1 + 120) = v34;
    *(__n128 *)(a1 + 104) = result;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    if (a1 != v29 + 8)
    {
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v29 + 176);
      result = *(__n128 *)(v29 + 192);
      *(__n128 *)(a1 + 184) = result;
    }
  }
  else
  {
    v37 = 3;
    v36 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C35E8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v27 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 96) = v27;
    *(int64x2_t *)(a1 + 112) = v27;
    *(int64x2_t *)(a1 + 128) = v27;
    *(_QWORD *)(a1 + 144) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0x3FF0000000000000;
  }
  return result;
}

void sub_18D216AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D216AC8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D216ADC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA058;
  return result;
}

uint64_t sub_18D216B04(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B83A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D216B40()
{
  return &unk_1E25B83A8;
}

void sub_18D216B50()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D216B64()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA0B0;
  return result;
}

uint64_t sub_18D216B8C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B83B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D216BC8()
{
  return &unk_1E25B83B8;
}

void sub_18D216BD8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D216BEC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9F50;
  return result;
}

void sub_18D216C10(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9F50;
}

void sub_18D216C24(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeviceAttitudeActiveObject *v8;
  _BYTE v9[152];

  v8 = *a2;
  sub_18D20DF68((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::RateGyroEvent *)v9);
}

uint64_t sub_18D216C60(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8378))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D216C9C()
{
  return &unk_1E25B8378;
}

void sub_18D216CAC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D216CC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA1B8;
  return result;
}

uint64_t sub_18D216CE8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B83E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D216D24()
{
  return &unk_1E25B83E8;
}

void sub_18D216D34()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D216D48()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA000;
  return result;
}

void sub_18D216D6C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA000;
}

double sub_18D216D80(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenDeviceAttitudeActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  double result;
  std::bad_cast v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unsigned __int8 v39;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven13UserGaitEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven13UserGaitEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v29.__vftable = 0;
      std::bad_cast::bad_cast(&v29);
      v29.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v29.__vftable = (std::bad_cast_vtbl *)&unk_1E25C2248;
    v35 = *(_OWORD *)(v27 + 96);
    v36 = *(_OWORD *)(v27 + 112);
    v37 = *(_OWORD *)(v27 + 128);
    v38 = *(_QWORD *)(v27 + 144);
    v31 = *(_OWORD *)(v27 + 32);
    v32 = *(_OWORD *)(v27 + 48);
    v33 = *(_OWORD *)(v27 + 64);
    v34 = *(_OWORD *)(v27 + 80);
    v30 = *(_OWORD *)(v27 + 16);
  }
  else
  {
    LOWORD(v29.__vftable) = 3;
    v39 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v39, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v31 = 0uLL;
    v30 = 0uLL;
    v29.__vftable = (std::bad_cast_vtbl *)&unk_1E25C2248;
    v32 = 0uLL;
    v33 = 0uLL;
    v34 = 0uLL;
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = 0x7FF8000000000000;
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = 0x7FF8000000000000;
    *(_QWORD *)&v37 = 0;
    *((_QWORD *)&v37 + 1) = 0x7FF8000000000000;
    v38 = 0x80000000;
  }
  *(_QWORD *)&result = raven::RavenDeviceAttitudeActiveObject::HandleEvent(v9, (const raven::UserGaitEvent *)&v29).n128_u64[0];
  return result;
}

void sub_18D216F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D216F44(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8398))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D216F80()
{
  return &unk_1E25B8398;
}

void sub_18D216F90()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D216FA4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9FA8;
  return result;
}

uint64_t sub_18D216FCC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8388))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D217008()
{
  return &unk_1E25B8388;
}

void sub_18D217018()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21702C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA630;
  return result;
}

uint64_t sub_18D217054(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B84B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D217090()
{
  return &unk_1E25B84B8;
}

uint64_t sub_18D21709C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D2170A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "KlobucharParametersEvent");
}

void sub_18D2170B8(uint64_t a1, uint64_t *a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  char *v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v6 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v6;
  v7 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v8 = operator new();
  v9 = *(_OWORD *)(a2 + 7);
  v10 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v8 + 96) = v10;
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 13);
  v11 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v8 + 64) = v9;
  v12 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(v8 + 136) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(v8 + 152) = v12;
  v13 = *((_OWORD *)a2 + 11);
  *(_OWORD *)(v8 + 168) = *((_OWORD *)a2 + 10);
  *(_QWORD *)v8 = &off_1E25C1B70;
  *(_QWORD *)(v8 + 8) = &off_1E25C30B0;
  *(_QWORD *)(v8 + 128) = &off_1E25B99F8;
  *(_OWORD *)(v8 + 184) = v13;
  *(_BYTE *)(v8 + 200) = *((_BYTE *)a2 + 192);
  v14 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v8;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v15 + 16))(a2);
  *((_QWORD *)v4 + 8) = v16;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v29, a2);
  if (v4[95] < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v29;
  *((_QWORD *)v4 + 11) = v30;
  v27 = v4 + 24;
  v28 = (std::__shared_weak_count *)v4;
  v17 = *(_QWORD *)(a1 + 344);
  v25 = v4 + 24;
  v26 = (std::__shared_weak_count *)v4;
  do
    v18 = __ldxr(v5);
  while (__stxr(v18 + 1, v5));
  (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)v17 + 16))(v17, &v25, a1);
  v19 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_18D2172F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

__n128 sub_18D21735C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1AB0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2E08;
  v3 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v3;
  *(_DWORD *)(v2 + 176) = *(_DWORD *)(a1 + 176);
  v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v4;
  v5 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v5;
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v6;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

uint64_t sub_18D2173D8(uint64_t result)
{
  *(_QWORD *)(result + 8) = &off_1E25C30B0;
  return result;
}

void *sub_18D2173EC()
{
}

__n128 sub_18D2173F8(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1B70;
  *(_QWORD *)(v2 + 8) = &off_1E25C30B0;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_QWORD *)(v2 + 128) = &off_1E25B99F8;
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  result = *(__n128 *)(a1 + 184);
  *(__n128 *)(v2 + 184) = result;
  *(_BYTE *)(v2 + 200) = *(_BYTE *)(a1 + 200);
  return result;
}

void sub_18D2174A0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2174B4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA6E0;
  return result;
}

void sub_18D2174D8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA6E0;
}

uint64_t sub_18D2174EC(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t CurrentTime;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v51;
  double v52;
  void (**v53)(raven::GnssMeasurementDataEvent *__hidden);
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[24];
  uint64_t v60;
  int32x4_t v61;
  int64x2_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void *__p;
  char v75;
  unsigned __int8 v76;
  __int16 v77;
  __int128 v78;
  double v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  void (**v88)(cnnavigation::KlobucharModelParameters *__hidden);
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char v93;
  uint64_t v94[3];
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t *v112[3];
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  _BYTE v121[24];
  int v122;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven24GnssMeasurementDataEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven24GnssMeasurementDataEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(_QWORD *)&v78 = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&v78);
      *(_QWORD *)&v78 = &unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v53 = &off_1E25C3080;
    v29 = *(_OWORD *)(v27 + 32);
    v28 = *(_OWORD *)(v27 + 48);
    v54 = *(_OWORD *)(v27 + 16);
    v55 = v29;
    v56 = v28;
    v30 = *(_OWORD *)(v27 + 64);
    v31 = *(_OWORD *)(v27 + 80);
    v32 = *(_OWORD *)(v27 + 96);
    *(_QWORD *)&v59[16] = *(_QWORD *)(v27 + 112);
    v58 = v31;
    *(_OWORD *)v59 = v32;
    v57 = v30;
    sub_18D217AC8((uint64_t)&v60, v27 + 120);
  }
  else
  {
    LOWORD(v78) = 3;
    LOBYTE(v94[0]) = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)v94, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v55 = 0uLL;
    v58 = 0uLL;
    v65 = 0u;
    v54 = 0uLL;
    v53 = &off_1E25C3080;
    v56 = 0uLL;
    v57 = 0uLL;
    *(_QWORD *)v59 = 0;
    *(_OWORD *)&v59[8] = xmmword_18D31CEE0;
    v60 = -1;
    v61 = vdupq_n_s32(0x7FC00000u);
    v62 = vdupq_n_s64(0x7FF8000000000000uLL);
    v63 = 0x8000000000000000;
    v64 = v61.i64[0];
    *(_QWORD *)&v65 = 0x7FF8000000000000;
    DWORD2(v65) = 2143289344;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
  }
  if (v9[480])
  {
    *(_QWORD *)&v78 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
    *((_QWORD *)&v78 + 1) = v33;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v9 + 488), &v78);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (const raven::GnssMeasurementDataEvent *)&v53) == 1)
    {
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      memset(v121, 0, sizeof(v121));
      v122 = 0;
      v112[1] = 0;
      v112[2] = 0;
      v112[0] = (uint64_t *)off_1E25C3EC8;
      v113 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v9 + 61, v112))
        sub_18D166F34((uint64_t)v9, (uint64_t)v112);
      v94[2] = 0;
      v94[0] = (uint64_t)&unk_1E25C2E08;
      v94[1] = 0;
      v95 = 0;
      v97 = 0;
      v96 = 0;
      v98 = 0;
      v100 = 0;
      v99 = 0;
      v101 = 0;
      v103 = 0;
      v102 = 0;
      v104 = 0x7FF8000000000000;
      v105 = 0;
      v106 = 0u;
      v107 = 0u;
      v108 = 0;
      v111 = 0;
      v109 = 0;
      v110 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (raven::GNSSUTCParametersEvent *)v94))
      {
        sub_18D065CE8((uint64_t)v9, v94);
      }
      *((_QWORD *)&v78 + 1) = 0;
      v79 = 0.0;
      *(_QWORD *)&v78 = &off_1E25C30B0;
      LOBYTE(v80) = 0;
      *((_QWORD *)&v80 + 1) = 0;
      *(_QWORD *)&v81 = 0;
      BYTE8(v81) = 0;
      v82 = 0uLL;
      LOBYTE(v83) = 0;
      *((_QWORD *)&v83 + 1) = 0;
      v84 = 0;
      v85 = 0x7FF8000000000000;
      v86 = 0;
      v87 = 0;
      v88 = &off_1E25B99F8;
      v89 = 0u;
      v90 = 0u;
      v91 = xmmword_18D30B590;
      v92 = xmmword_18D30B5A0;
      v93 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (raven::KlobucharParametersEvent *)&v78))
      {
        CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
        v36 = v35;
        v83 = 0u;
        v82 = 0u;
        v81 = 0u;
        v80 = 0u;
        *((_QWORD *)&v78 + 1) = CurrentTime;
        v79 = v35;
        v84 = 0;
        v85 = 0x7FF8000000000000;
        v77 = 12;
        v76 = 2;
        sub_18D0778AC(&__p, "KlobucharParametersEvent");
        v51 = v36 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v77, &v76, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v37, v38, v39, v40, v41, SLOBYTE(v51));
        if (v75 < 0)
          operator delete(__p);
        sub_18D2170B8((uint64_t)v9, (uint64_t *)&v78);
      }
      v112[0] = (uint64_t *)off_1E25C3EC8;
      *(_QWORD *)&v78 = &v121[4];
      sub_18D07C7AC((void ***)&v78);
    }
    else
    {
      LOWORD(v94[0]) = 12;
      LOBYTE(v112[0]) = 2;
      v42 = ((uint64_t (*)(uint64_t))v53[2])((uint64_t)&v53);
      v44 = v43;
      ((void (*)(_QWORD *@<X8>))v53[3])(&v78);
      v52 = v44 + (double)v42;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, (unsigned __int8 *)v112, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v45, v46, v47, v48, v49, SLOBYTE(v52));
      if (SHIBYTE(v79) < 0)
        operator delete((void *)v78);
    }
  }
  v53 = &off_1E25C3080;
  return sub_18D03D0CC((uint64_t)&v60);
}

void sub_18D2179EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,std::exception a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  uint64_t v64;

  if (a56 < 0)
    operator delete(__p);
  *(_QWORD *)(v64 - 184) = v63 + 16;
  a58.__vftable = (std::exception_vtbl *)(v64 - 88);
  sub_18D07C7AC((void ***)&a58);
  sub_18D03D0CC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_18D217A80(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B84D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D217ABC()
{
  return &unk_1E25B84D8;
}

uint64_t sub_18D217AC8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  _OWORD *v51;
  _OWORD *v52;
  __int128 v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v58;
  char **v59;
  char **v60;
  char v61;
  char *v62;
  char *v63;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  if (v8 != v7)
  {
    v9 = 0x8F5C28F5C28F5C29 * ((v8 - v7) >> 3);
    if (v9 >= 0x147AE147AE147AFLL)
      sub_18D07AFE4();
    v10 = (char *)sub_18D218020(a1 + 88, v9);
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = &v10[200 * v11];
    v62 = v10;
    v63 = v10;
    v58 = a1 + 88;
    v59 = &v62;
    v60 = &v63;
    v61 = 0;
    v12 = (uint64_t)v10;
    do
    {
      sub_18D218068(v12, v7);
      v7 += 200;
      v12 = (uint64_t)(v63 + 200);
      v63 += 200;
    }
    while (v7 != v8);
    v61 = 1;
    sub_18D218160((uint64_t)&v58);
    *(_QWORD *)(a1 + 80) = v12;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v58 = a1 + 96;
  LOBYTE(v59) = 0;
  v15 = v14 - v13;
  if (v14 != v13)
  {
    if (v15 < 0)
      sub_18D07AFE4();
    v16 = (char *)sub_18D2181CC(a1 + 112, v15 >> 8);
    v17 = 0;
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v16;
    *(_QWORD *)(a1 + 112) = &v16[256 * v18];
    do
    {
      v19 = &v16[v17];
      v20 = v13 + v17;
      v21 = *(_OWORD *)(v13 + v17);
      v19[16] = *(_BYTE *)(v13 + v17 + 16);
      *(_OWORD *)v19 = v21;
      sub_18D185398((uint64_t)&v16[v17 + 24], v13 + v17 + 24);
      v22 = *(_OWORD *)(v13 + v17 + 56);
      v23 = *(_OWORD *)(v13 + v17 + 72);
      v24 = *(_OWORD *)(v13 + v17 + 88);
      *(_OWORD *)(v19 + 104) = *(_OWORD *)(v13 + v17 + 104);
      *(_OWORD *)(v19 + 88) = v24;
      *(_OWORD *)(v19 + 72) = v23;
      *(_OWORD *)(v19 + 56) = v22;
      v25 = *(_OWORD *)(v13 + v17 + 120);
      v26 = *(_OWORD *)(v13 + v17 + 136);
      v27 = *(_OWORD *)(v13 + v17 + 152);
      *((_QWORD *)v19 + 21) = *(_QWORD *)(v13 + v17 + 168);
      *(_OWORD *)(v19 + 152) = v27;
      *(_OWORD *)(v19 + 136) = v26;
      *(_OWORD *)(v19 + 120) = v25;
      v28 = *(_OWORD *)(v13 + v17 + 176);
      v29 = *(_OWORD *)(v13 + v17 + 192);
      v30 = *(_OWORD *)(v13 + v17 + 206);
      *((_QWORD *)v19 + 28) = 0;
      v31 = &v16[v17 + 224];
      *(_OWORD *)(v31 - 18) = v30;
      *((_OWORD *)v31 - 3) = v28;
      *((_OWORD *)v31 - 2) = v29;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      sub_18D184D74(v31, *(const void **)(v20 + 224), *(_QWORD *)(v20 + 232), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v20 + 232) - *(_QWORD *)(v20 + 224)) >> 3));
      *(_DWORD *)&v16[v17 + 248] = *(_DWORD *)(v13 + v17 + 248);
      v17 += 256;
    }
    while (v20 + 256 != v14);
    *(_QWORD *)(a1 + 104) = &v16[v17];
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v33 = *(_BYTE **)(a2 + 120);
  v32 = *(_BYTE **)(a2 + 128);
  v34 = v32 - v33;
  if (v32 != v33)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v34 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_18D07AFE4();
    v35 = (char *)sub_18D1782B8(a1 + 136, 0xAAAAAAAAAAAAAAABLL * (v34 >> 3));
    *(_QWORD *)(a1 + 120) = v35;
    *(_QWORD *)(a1 + 128) = v35;
    *(_QWORD *)(a1 + 136) = &v35[24 * v36];
    memmove(v35, v33, v34 - 4);
    *(_QWORD *)(a1 + 128) = &v35[8 * (v34 >> 3)];
  }
  v37 = *(__int128 **)(a2 + 144);
  if (v37)
  {
    v38 = (_OWORD *)operator new();
    v39 = *v37;
    v40 = v37[1];
    v41 = v37[3];
    v38[2] = v37[2];
    v38[3] = v41;
    *v38 = v39;
    v38[1] = v40;
  }
  else
  {
    v38 = 0;
  }
  *(_QWORD *)(a1 + 144) = v38;
  v42 = *(__int128 **)(a2 + 152);
  if (v42)
  {
    v43 = operator new();
    v44 = *v42;
    *(_QWORD *)(v43 + 16) = *((_QWORD *)v42 + 2);
    *(_OWORD *)v43 = v44;
  }
  else
  {
    v43 = 0;
  }
  *(_QWORD *)(a1 + 152) = v43;
  v45 = *(_OWORD **)(a2 + 160);
  if (v45)
  {
    v46 = (_OWORD *)operator new();
    v47 = v45[1];
    *v46 = *v45;
    v46[1] = v47;
  }
  else
  {
    v46 = 0;
  }
  *(_QWORD *)(a1 + 160) = v46;
  v48 = *(_OWORD **)(a2 + 168);
  if (v48)
  {
    v49 = (_OWORD *)operator new();
    v50 = v48[1];
    *v49 = *v48;
    v49[1] = v50;
  }
  else
  {
    v49 = 0;
  }
  *(_QWORD *)(a1 + 168) = v49;
  v51 = *(_OWORD **)(a2 + 176);
  if (v51)
  {
    v52 = (_OWORD *)operator new();
    v53 = v51[1];
    *v52 = *v51;
    v52[1] = v53;
  }
  else
  {
    v52 = 0;
  }
  *(_QWORD *)(a1 + 176) = v52;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v54 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v54;
  if (v54)
  {
    v55 = (unint64_t *)(v54 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  return a1;
}

void sub_18D217ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13)
{
  _QWORD *v13;
  void **v14;
  void **v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v17 = v13[21];
  v13[21] = 0;
  if (v17)
    MEMORY[0x18D78B5D4](v17, 0x1000C4095D96C66);
  v18 = v13[20];
  v13[20] = 0;
  if (v18)
    MEMORY[0x18D78B5D4](v18, 0x1000C4095D96C66);
  v19 = v13[19];
  v13[19] = 0;
  if (v19)
    MEMORY[0x18D78B5D4](v19, 0x1000C40D315E998);
  v20 = v13[18];
  v13[18] = 0;
  if (v20)
    MEMORY[0x18D78B5D4](v20, 0x1000C4079AA8B5ELL);
  v21 = *v15;
  if (*v15)
  {
    v13[16] = v21;
    operator delete(v21);
  }
  a13 = v14;
  sub_18D20C0F8(&a13);
  a13 = a10;
  sub_18D20C1B4(&a13);
  _Unwind_Resume(a1);
}

void *sub_18D218020(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL)
    sub_18D0788A0();
  return operator new(200 * a2);
}

uint64_t sub_18D218068(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  v8 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 144);
  v10 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  v11 = *(_OWORD **)(a2 + 184);
  if (v11)
  {
    v12 = (_OWORD *)operator new();
    *v12 = *v11;
    v13 = v11[4];
    v15 = v11[1];
    v14 = v11[2];
    v12[3] = v11[3];
    v12[4] = v13;
    v12[1] = v15;
    v12[2] = v14;
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)(a1 + 184) = v12;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_WORD *)(a1 + 196) = *(_WORD *)(a2 + 196);
  return a1;
}

uint64_t sub_18D218160(uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 200)
    {
      v5 = *(_QWORD *)(i - 16);
      *(_QWORD *)(i - 16) = 0;
      if (v5)
        MEMORY[0x18D78B5D4](v5, 0x1000C4041240993);
    }
  }
  return a1;
}

void *sub_18D2181CC(uint64_t a1, unint64_t a2)
{
  if (HIBYTE(a2))
    sub_18D0788A0();
  return operator new(a2 << 8);
}

void sub_18D218204()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D218218()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA5D8;
  return result;
}

void sub_18D21823C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA5D8;
}

void sub_18D218250(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t CurrentTime;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD v27[45];
  void *__p;
  char v29;
  unsigned __int8 v30;
  __int16 v31;
  __int128 v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void (**v42)(cnnavigation::KlobucharModelParameters *__hidden);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48[3];
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t *v66[3];
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _BYTE v75[24];
  int v76;

  v8 = *a2;
  sub_18D211EA4((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(_QWORD *)&v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((_QWORD *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if ((raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::PositionEvent *)v27) & 1) != 0)
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      memset(v75, 0, sizeof(v75));
      v76 = 0;
      v66[1] = 0;
      v66[2] = 0;
      v66[0] = (uint64_t *)off_1E25C3EC8;
      v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66))
        sub_18D166F34((uint64_t)v8, (uint64_t)v66);
      v48[2] = 0;
      v48[0] = (uint64_t)&unk_1E25C2E08;
      v48[1] = 0;
      v49 = 0;
      v51 = 0;
      v50 = 0;
      v52 = 0;
      v54 = 0;
      v53 = 0;
      v55 = 0;
      v57 = 0;
      v56 = 0;
      v58 = 0x7FF8000000000000;
      v59 = 0;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v65 = 0;
      v63 = 0;
      v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18D065CE8((uint64_t)v8, v48);
      }
      *((_QWORD *)&v32 + 1) = 0;
      v33 = 0.0;
      *(_QWORD *)&v32 = &off_1E25C30B0;
      LOBYTE(v34) = 0;
      *((_QWORD *)&v34 + 1) = 0;
      *(_QWORD *)&v35 = 0;
      BYTE8(v35) = 0;
      v36 = 0uLL;
      LOBYTE(v37) = 0;
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0;
      v39 = 0x7FF8000000000000;
      v40 = 0;
      v41 = 0;
      v42 = &off_1E25B99F8;
      v43 = 0u;
      v44 = 0u;
      v45 = xmmword_18D30B590;
      v46 = xmmword_18D30B5A0;
      v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        v12 = v11;
        v37 = 0u;
        v36 = 0u;
        v35 = 0u;
        v34 = 0u;
        *((_QWORD *)&v32 + 1) = CurrentTime;
        v33 = v11;
        v38 = 0;
        v39 = 0x7FF8000000000000;
        v31 = 12;
        v30 = 2;
        sub_18D0778AC(&__p, "KlobucharParametersEvent");
        v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0)
          operator delete(__p);
        sub_18D2170B8((uint64_t)v8, (uint64_t *)&v32);
      }
      v66[0] = (uint64_t *)off_1E25C3EC8;
      *(_QWORD *)&v32 = &v75[4];
      sub_18D07C7AC((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      v18 = (*(uint64_t (**)(_QWORD *))(v27[0] + 16))(v27);
      v20 = v19 + (double)v18;
      (*(void (**)(__int128 *__return_ptr, _QWORD *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
  }
}

void sub_18D218580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a64;
  uint64_t v64;
  uint64_t v65;

  if (a62 < 0)
    operator delete(__p);
  *(_QWORD *)(v65 - 184) = v64 + 16;
  a64 = (void *)(v65 - 88);
  sub_18D07C7AC((void ***)&a64);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2185E8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B84A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D218624()
{
  return &unk_1E25B84A8;
}

void sub_18D218634()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D218648()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA688;
  return result;
}

void sub_18D21866C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA688;
}

void sub_18D218680(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t CurrentTime;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD v27[14];
  void *__p;
  char v29;
  unsigned __int8 v30;
  __int16 v31;
  __int128 v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void (**v42)(cnnavigation::KlobucharModelParameters *__hidden);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48[3];
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t *v66[3];
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _BYTE v75[24];
  int v76;

  v8 = *a2;
  sub_18D2125AC((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(_QWORD *)&v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((_QWORD *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::SignalEnvironmentEvent *)v27))
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      memset(v75, 0, sizeof(v75));
      v76 = 0;
      v66[1] = 0;
      v66[2] = 0;
      v66[0] = (uint64_t *)off_1E25C3EC8;
      v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66))
        sub_18D166F34((uint64_t)v8, (uint64_t)v66);
      v48[1] = 0;
      v48[2] = 0;
      v48[0] = (uint64_t)&unk_1E25C2E08;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0x7FF8000000000000;
      v59 = 0;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v65 = 0;
      v63 = 0;
      v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18D065CE8((uint64_t)v8, v48);
      }
      *((_QWORD *)&v32 + 1) = 0;
      v33 = 0.0;
      *(_QWORD *)&v32 = &off_1E25C30B0;
      LOBYTE(v34) = 0;
      *((_QWORD *)&v34 + 1) = 0;
      *(_QWORD *)&v35 = 0;
      BYTE8(v35) = 0;
      v36 = 0uLL;
      LOBYTE(v37) = 0;
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0;
      v39 = 0x7FF8000000000000;
      v40 = 0;
      v41 = 0;
      v42 = &off_1E25B99F8;
      v43 = 0u;
      v44 = 0u;
      v45 = xmmword_18D30B590;
      v46 = xmmword_18D30B5A0;
      v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        v12 = v11;
        v37 = 0u;
        v36 = 0u;
        v35 = 0u;
        v34 = 0u;
        *((_QWORD *)&v32 + 1) = CurrentTime;
        v33 = v11;
        v38 = 0;
        v39 = 0x7FF8000000000000;
        v31 = 12;
        v30 = 2;
        sub_18D0778AC(&__p, "KlobucharParametersEvent");
        v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0)
          operator delete(__p);
        sub_18D2170B8((uint64_t)v8, (uint64_t *)&v32);
      }
      v66[0] = (uint64_t *)off_1E25C3EC8;
      *(_QWORD *)&v32 = &v75[4];
      sub_18D07C7AC((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      v18 = (*(uint64_t (**)(_QWORD *))(v27[0] + 16))(v27);
      v20 = v19 + (double)v18;
      (*(void (**)(__int128 *__return_ptr, _QWORD *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
  }
}

void sub_18D218994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  if (a30 < 0)
    operator delete(__p);
  *(_QWORD *)(v38 - 184) = v37 + 16;
  a32 = (void *)(v38 - 88);
  sub_18D07C7AC((void ***)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2189FC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B84C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D218A38()
{
  return &unk_1E25B84C8;
}

void sub_18D218A48()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D218A5C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA7E8;
  return result;
}

void sub_18D218A80(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA7E8;
}

void sub_18D218A94(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t CurrentTime;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD v27[104];
  void *__p;
  char v29;
  unsigned __int8 v30;
  __int16 v31;
  __int128 v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void (**v42)(cnnavigation::KlobucharModelParameters *__hidden);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48[3];
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t *v66[3];
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _BYTE v75[24];
  int v76;

  v8 = *a2;
  sub_18D218E8C((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(_QWORD *)&v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((_QWORD *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::ReceiverDifferentialCodeBiasesEvent *)v27))
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      memset(v75, 0, sizeof(v75));
      v76 = 0;
      v66[1] = 0;
      v66[2] = 0;
      v66[0] = (uint64_t *)off_1E25C3EC8;
      v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66))
        sub_18D166F34((uint64_t)v8, (uint64_t)v66);
      v48[2] = 0;
      v48[0] = (uint64_t)&unk_1E25C2E08;
      v48[1] = 0;
      v49 = 0;
      v51 = 0;
      v50 = 0;
      v52 = 0;
      v54 = 0;
      v53 = 0;
      v55 = 0;
      v57 = 0;
      v56 = 0;
      v58 = 0x7FF8000000000000;
      v59 = 0;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v65 = 0;
      v63 = 0;
      v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18D065CE8((uint64_t)v8, v48);
      }
      v33 = 0.0;
      *(_QWORD *)&v32 = &off_1E25C30B0;
      *((_QWORD *)&v32 + 1) = 0;
      LOBYTE(v34) = 0;
      *(_QWORD *)&v35 = 0;
      *((_QWORD *)&v34 + 1) = 0;
      BYTE8(v35) = 0;
      v36 = 0uLL;
      LOBYTE(v37) = 0;
      v38 = 0;
      *((_QWORD *)&v37 + 1) = 0;
      v39 = 0x7FF8000000000000;
      v40 = 0;
      v41 = 0;
      v42 = &off_1E25B99F8;
      v43 = 0u;
      v44 = 0u;
      v45 = xmmword_18D30B590;
      v46 = xmmword_18D30B5A0;
      v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        v12 = v11;
        v37 = 0u;
        v36 = 0u;
        v35 = 0u;
        v34 = 0u;
        *((_QWORD *)&v32 + 1) = CurrentTime;
        v33 = v11;
        v38 = 0;
        v39 = 0x7FF8000000000000;
        v31 = 12;
        v30 = 2;
        sub_18D0778AC(&__p, "KlobucharParametersEvent");
        v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0)
          operator delete(__p);
        sub_18D2170B8((uint64_t)v8, (uint64_t *)&v32);
      }
      v66[0] = (uint64_t *)off_1E25C3EC8;
      *(_QWORD *)&v32 = &v75[4];
      sub_18D07C7AC((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      v18 = (*(uint64_t (**)(_QWORD *))(v27[0] + 16))(v27);
      v20 = v19 + (double)v18;
      (*(void (**)(__int128 *__return_ptr, _QWORD *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
  }
}

void sub_18D218DDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  *(_QWORD *)(v2 - 184) = v1 + 16;
  STACK[0x370] = v2 - 88;
  sub_18D07C7AC((void ***)&STACK[0x370]);
  _Unwind_Resume(a1);
}

uint64_t sub_18D218E44(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8508))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D218E80()
{
  return &unk_1E25B8508;
}

void sub_18D218E8C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int16 v30;
  std::bad_cast v31;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven35ReceiverDifferentialCodeBiasesEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven35ReceiverDifferentialCodeBiasesEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v31.__vftable = 0;
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = &unk_1E25C4350;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x334uLL);
  }
  else
  {
    v30 = 3;
    v29 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    bzero((void *)(a1 + 24), 0x328uLL);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C4350;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 105) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 200) = v26;
    *(int64x2_t *)(a1 + 216) = v26;
    *(int64x2_t *)(a1 + 232) = v26;
    *(int64x2_t *)(a1 + 248) = v26;
    *(_QWORD *)(a1 + 264) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 272) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
  }
}

void sub_18D219044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D21905C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D219070()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA790;
  return result;
}

void sub_18D219094(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA790;
}

void sub_18D2190A8(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t CurrentTime;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD v27[104];
  void *__p;
  char v29;
  unsigned __int8 v30;
  __int16 v31;
  __int128 v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void (**v42)(cnnavigation::KlobucharModelParameters *__hidden);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48[3];
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t *v66[3];
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _BYTE v75[24];
  int v76;

  v8 = *a2;
  sub_18D2194A0((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(_QWORD *)&v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((_QWORD *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::ThinShellIonosphereParametersEvent *)v27))
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      memset(v75, 0, sizeof(v75));
      v76 = 0;
      v66[1] = 0;
      v66[2] = 0;
      v66[0] = (uint64_t *)off_1E25C3EC8;
      v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66))
        sub_18D166F34((uint64_t)v8, (uint64_t)v66);
      v48[2] = 0;
      v48[0] = (uint64_t)&unk_1E25C2E08;
      v48[1] = 0;
      v49 = 0;
      v51 = 0;
      v50 = 0;
      v52 = 0;
      v54 = 0;
      v53 = 0;
      v55 = 0;
      v57 = 0;
      v56 = 0;
      v58 = 0x7FF8000000000000;
      v59 = 0;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v65 = 0;
      v63 = 0;
      v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18D065CE8((uint64_t)v8, v48);
      }
      v33 = 0.0;
      *(_QWORD *)&v32 = &off_1E25C30B0;
      *((_QWORD *)&v32 + 1) = 0;
      LOBYTE(v34) = 0;
      *(_QWORD *)&v35 = 0;
      *((_QWORD *)&v34 + 1) = 0;
      BYTE8(v35) = 0;
      v36 = 0uLL;
      LOBYTE(v37) = 0;
      v38 = 0;
      *((_QWORD *)&v37 + 1) = 0;
      v39 = 0x7FF8000000000000;
      v40 = 0;
      v41 = 0;
      v42 = &off_1E25B99F8;
      v43 = 0u;
      v44 = 0u;
      v45 = xmmword_18D30B590;
      v46 = xmmword_18D30B5A0;
      v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        v12 = v11;
        v37 = 0u;
        v36 = 0u;
        v35 = 0u;
        v34 = 0u;
        *((_QWORD *)&v32 + 1) = CurrentTime;
        v33 = v11;
        v38 = 0;
        v39 = 0x7FF8000000000000;
        v31 = 12;
        v30 = 2;
        sub_18D0778AC(&__p, "KlobucharParametersEvent");
        v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0)
          operator delete(__p);
        sub_18D2170B8((uint64_t)v8, (uint64_t *)&v32);
      }
      v66[0] = (uint64_t *)off_1E25C3EC8;
      *(_QWORD *)&v32 = &v75[4];
      sub_18D07C7AC((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      v18 = (*(uint64_t (**)(_QWORD *))(v27[0] + 16))(v27);
      v20 = v19 + (double)v18;
      (*(void (**)(__int128 *__return_ptr, _QWORD *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
    }
  }
}

void sub_18D2193F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  *(_QWORD *)(v2 - 184) = v1 + 16;
  STACK[0x370] = v2 - 88;
  sub_18D07C7AC((void ***)&STACK[0x370]);
  _Unwind_Resume(a1);
}

uint64_t sub_18D219458(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B84F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D219494()
{
  return &unk_1E25B84F8;
}

void sub_18D2194A0(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  const char *v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int16 v30;
  std::bad_cast v31;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven34ThinShellIonosphereParametersEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven34ThinShellIonosphereParametersEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v31.__vftable = 0;
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    *(_QWORD *)a1 = &unk_1E25C4150;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x334uLL);
  }
  else
  {
    v30 = 3;
    v29 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    bzero((void *)(a1 + 24), 0x328uLL);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C4150;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_BYTE *)(a1 + 105) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 128) = v26;
    *(_QWORD *)(a1 + 144) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(int64x2_t *)(a1 + 168) = v26;
    *(int64x2_t *)(a1 + 184) = v26;
    *(int64x2_t *)(a1 + 200) = v26;
    *(int64x2_t *)(a1 + 216) = v26;
    *(int64x2_t *)(a1 + 232) = v26;
    *(int64x2_t *)(a1 + 248) = v26;
    *(_QWORD *)(a1 + 264) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 272) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
  }
}

void sub_18D219654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D21966C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D219680()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA738;
  return result;
}

void sub_18D2196A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA738;
}

void sub_18D2196BC(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t CurrentTime;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  void (**v58)(raven::RavenGnssAssistanceFileEvent *__hidden);
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *v66[2];
  uint64_t v67;
  void *__p;
  char v69;
  unsigned __int8 v70;
  __int16 v71;
  __int128 v72;
  double v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  void (**v82)(cnnavigation::KlobucharModelParameters *__hidden);
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;
  uint64_t v88[3];
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t *v106[3];
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  _BYTE v115[24];
  int v116;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven28RavenGnssAssistanceFileEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven28RavenGnssAssistanceFileEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(_QWORD *)&v72 = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&v72);
      *(_QWORD *)&v72 = &unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v58 = &off_1E25C37F0;
    v28 = *(_OWORD *)(v27 + 16);
    v29 = *(_OWORD *)(v27 + 32);
    v61 = *(_OWORD *)(v27 + 48);
    v60 = v29;
    v59 = v28;
    v30 = *(_OWORD *)(v27 + 64);
    v31 = *(_OWORD *)(v27 + 80);
    v32 = *(_OWORD *)(v27 + 96);
    v65 = *(_OWORD *)(v27 + 112);
    v64 = v32;
    v63 = v31;
    v62 = v30;
    v66[1] = 0;
    v67 = 0;
    v66[0] = 0;
    sub_18D219C48(v66, *(char **)(v27 + 128), *(char **)(v27 + 136), 0x80FE03F80FE03F81 * ((uint64_t)(*(_QWORD *)(v27 + 136) - *(_QWORD *)(v27 + 128)) >> 6));
  }
  else
  {
    LOWORD(v72) = 3;
    LOBYTE(v88[0]) = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, (unsigned __int8 *)v88, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v60 = 0uLL;
    v59 = 0uLL;
    v58 = &off_1E25C37F0;
    v61 = 0uLL;
    v62 = 0uLL;
    v63 = 0uLL;
    *(_QWORD *)&v64 = 0;
    *((_QWORD *)&v64 + 1) = 0x7FF8000000000000;
    v67 = 0;
    *(_OWORD *)v66 = 0u;
    v65 = 0u;
  }
  if (v9[480])
  {
    *(_QWORD *)&v72 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
    *((_QWORD *)&v72 + 1) = v33;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v9 + 488), &v72);
    if ((raven::GnssMeasurementPreprocessor::HandleEvent((cnnavigation::SphericalHarmonicsIonosphereModel **)v9 + 61, (const raven::RavenGnssAssistanceFileEvent *)&v58, v34, v35, v36, v37, v38, v39) & 1) != 0)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      memset(v115, 0, sizeof(v115));
      v116 = 0;
      v106[1] = 0;
      v106[2] = 0;
      v106[0] = (uint64_t *)off_1E25C3EC8;
      v107 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v9 + 61, v106))
        sub_18D166F34((uint64_t)v9, (uint64_t)v106);
      v88[1] = 0;
      v88[2] = 0;
      v88[0] = (uint64_t)&unk_1E25C2E08;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0x7FF8000000000000;
      v99 = 0;
      v100 = 0u;
      v101 = 0u;
      v102 = 0;
      v105 = 0;
      v103 = 0;
      v104 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (raven::GNSSUTCParametersEvent *)v88))
      {
        sub_18D065CE8((uint64_t)v9, v88);
      }
      *((_QWORD *)&v72 + 1) = 0;
      v73 = 0.0;
      *(_QWORD *)&v72 = &off_1E25C30B0;
      LOBYTE(v74) = 0;
      *((_QWORD *)&v74 + 1) = 0;
      *(_QWORD *)&v75 = 0;
      BYTE8(v75) = 0;
      v76 = 0uLL;
      LOBYTE(v77) = 0;
      *((_QWORD *)&v77 + 1) = 0;
      v78 = 0;
      v79 = 0x7FF8000000000000;
      v80 = 0;
      v81 = 0;
      v82 = &off_1E25B99F8;
      v83 = 0u;
      v84 = 0u;
      v85 = xmmword_18D30B590;
      v86 = xmmword_18D30B5A0;
      v87 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (raven::KlobucharParametersEvent *)&v72))
      {
        CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
        v42 = v41;
        v77 = 0u;
        v76 = 0u;
        v75 = 0u;
        v74 = 0u;
        *((_QWORD *)&v72 + 1) = CurrentTime;
        v73 = v41;
        v78 = 0;
        v79 = 0x7FF8000000000000;
        v71 = 12;
        v70 = 2;
        sub_18D0778AC(&__p, "KlobucharParametersEvent");
        v56 = v42 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, &v70, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v43, v44, v45, v46, v47, SLOBYTE(v56));
        if (v69 < 0)
          operator delete(__p);
        sub_18D2170B8((uint64_t)v9, (uint64_t *)&v72);
      }
      v106[0] = (uint64_t *)off_1E25C3EC8;
      *(_QWORD *)&v72 = &v115[4];
      sub_18D07C7AC((void ***)&v72);
    }
    else
    {
      LOWORD(v88[0]) = 12;
      LOBYTE(v106[0]) = 2;
      v48 = ((uint64_t (*)(uint64_t))v58[2])((uint64_t)&v58);
      v50 = v49;
      ((void (*)(_QWORD *@<X8>))v58[3])(&v72);
      v57 = v50 + (double)v48;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, (unsigned __int8 *)v106, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v51, v52, v53, v54, v55, SLOBYTE(v57));
      if (SHIBYTE(v73) < 0)
        operator delete((void *)v72);
    }
  }
  v58 = &off_1E25C37F0;
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
}

void sub_18D219B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::exception a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  if (a34 < 0)
    operator delete(__p);
  *(_QWORD *)(v42 - 184) = v41 + 16;
  a36.__vftable = (std::exception_vtbl *)(v42 - 88);
  sub_18D07C7AC((void ***)&a36);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_18D219C00(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B84E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D219C3C()
{
  return &unk_1E25B84E8;
}

_QWORD *sub_18D219C48(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x7F01FC07F01FDLL)
      sub_18D07AFE4();
    result = sub_18D219D18((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[1032 * v8];
    if (a2 != a3)
    {
      v9 = (char *)result;
      do
      {
        result = memcpy(v9, a2, 0x2040uLL);
        a2 += 8256;
        v9 += 8256;
        v7 += 1032;
      }
      while (a2 != a3);
    }
    v4[1] = v7;
  }
  return result;
}

void sub_18D219CFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_18D219D18(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7F01FC07F01FDLL)
    sub_18D0788A0();
  return operator new(8256 * a2);
}

void sub_18D219D64()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D219D78()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA318;
  return result;
}

void sub_18D219D9C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA318;
}

void sub_18D219DB0(int a1, raven::RavenIMUPreprocessorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenIMUPreprocessorActiveObject *v8;
  _BYTE v9[152];

  v8 = *a2;
  sub_18D20CDC4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIMUPreprocessorActiveObject::HandleEvent(v8, (const raven::AccelerometerEvent *)v9);
}

uint64_t sub_18D219DEC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8428))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D219E28()
{
  return &unk_1E25B8428;
}

void sub_18D219E38()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D219E4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA268;
  return result;
}

void sub_18D219E70(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA268;
}

void sub_18D219E84(int a1, raven::RavenIMUPreprocessorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenIMUPreprocessorActiveObject *v8;
  _BYTE v9[152];

  v8 = *a2;
  sub_18D20DF68((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIMUPreprocessorActiveObject::HandleEvent(v8, (const raven::RateGyroEvent *)v9);
}

uint64_t sub_18D219EC0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8408))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D219EFC()
{
  return &unk_1E25B8408;
}

void sub_18D219F0C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D219F20()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA2C0;
  return result;
}

void sub_18D219F44(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA2C0;
}

void sub_18D219F58(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  _DWORD v10[28];

  v8 = *a2;
  v9 = sub_18D20E20C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26])
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 48))(v8, v9);
}

uint64_t sub_18D219FAC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8418))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D219FE8()
{
  return &unk_1E25B8418;
}

void sub_18D219FF8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21A00C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB3F0;
  return result;
}

void sub_18D21A030(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB3F0;
}

void sub_18D21A044(int a1, raven::RavenIonosphereEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenIonosphereEstimatorActiveObject *v8;
  _QWORD v9[12];
  uint64_t v10;
  void **v11;

  v8 = *a2;
  sub_18D2109A0((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIonosphereEstimatorActiveObject::HandleEvent(v8, (const raven::GnssPreprocessedMeasurementsEvent *)v9);
  v9[0] = off_1E25C3EC8;
  v11 = (void **)&v10;
  sub_18D07C7AC(&v11);
}

void sub_18D21A0A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 96;
  sub_18D07C7AC((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_18D21A0D0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8738))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21A10C()
{
  return &unk_1E25B8738;
}

void sub_18D21A11C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21A130()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB398;
  return result;
}

void sub_18D21A154(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB398;
}

void sub_18D21A168(int a1, raven::RavenIonosphereEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenIonosphereEstimatorActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  std::bad_cast v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[3];
  __int128 v44;
  __int128 v45;
  _BYTE v46[24];
  unsigned __int8 v47;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven24KlobucharParametersEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven24KlobucharParametersEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v35.__vftable = 0;
      std::bad_cast::bad_cast(&v35);
      v35.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v35.__vftable = (std::bad_cast_vtbl *)&off_1E25C30B0;
    v28 = *(_OWORD *)(v27 + 16);
    v29 = *(_OWORD *)(v27 + 32);
    v38 = *(_OWORD *)(v27 + 48);
    v37 = v29;
    v36 = v28;
    v30 = *(_OWORD *)(v27 + 64);
    v31 = *(_OWORD *)(v27 + 80);
    v32 = *(_OWORD *)(v27 + 96);
    v42 = *(_OWORD *)(v27 + 112);
    v41 = v32;
    v40 = v31;
    v39 = v30;
    v43[0] = &off_1E25B99F8;
    v33 = *(_OWORD *)(v27 + 152);
    *(_OWORD *)&v43[1] = *(_OWORD *)(v27 + 136);
    v44 = v33;
    v34 = *(_OWORD *)(v27 + 184);
    v45 = *(_OWORD *)(v27 + 168);
    *(_OWORD *)v46 = v34;
    v46[16] = *(_BYTE *)(v27 + 200);
  }
  else
  {
    LOWORD(v35.__vftable) = 3;
    v47 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v47, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v37 = 0uLL;
    v40 = 0uLL;
    v42 = 0u;
    *(_OWORD *)&v46[8] = 0u;
    v36 = 0uLL;
    v35.__vftable = (std::bad_cast_vtbl *)&off_1E25C30B0;
    v38 = 0uLL;
    v39 = 0uLL;
    *(_QWORD *)&v41 = 0;
    *((_QWORD *)&v41 + 1) = 0x7FF8000000000000;
    v43[0] = &off_1E25B99F8;
    *(_OWORD *)&v43[1] = 0u;
    v44 = 0u;
    v45 = xmmword_18D30B590;
    *(_OWORD *)v46 = xmmword_18D30B5A0;
  }
  raven::RavenIonosphereEstimatorActiveObject::HandleEvent(v9, (const raven::KlobucharParametersEvent *)&v35);
}

void sub_18D21A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  std::exception::~exception(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21A384(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8728))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21A3C0()
{
  return &unk_1E25B8728;
}

void sub_18D21A3D0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21A3E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB340;
  return result;
}

uint64_t sub_18D21A40C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8718))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21A448()
{
  return &unk_1E25B8718;
}

void sub_18D21A458()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21A46C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB2E8;
  return result;
}

uint64_t sub_18D21A494(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8708))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21A4D0()
{
  return &unk_1E25B8708;
}

void sub_18D21A4E0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21A4F4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAE18;
  return result;
}

void sub_18D21A518(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAE18;
}

void sub_18D21A52C(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnframework::ActiveObjectBase *v8;
  uint64_t v9;
  _BYTE v10[152];

  v8 = *a2;
  sub_18D20CDC4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((_QWORD *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((_QWORD *)v8 + 65) = v9;
  sub_18D16BFC8((uint64_t)v8, (uint64_t)v10);
}

uint64_t sub_18D21A578(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8628))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21A5B4()
{
  return &unk_1E25B8628;
}

void sub_18D21A5C4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21A5D8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB130;
  return result;
}

void sub_18D21A5FC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB130;
}

void sub_18D21A610(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[264];
  _QWORD v21[3];
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[22];
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  v8 = *a2;
  sub_18D20F334((uint64_t)v20, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v21[1] = 0;
  v21[2] = 0;
  v21[0] = &off_1E25C3460;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0x7FF8000000000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0x7FF8000000000000;
  v44 = 0;
  v45 = 0u;
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  if (!raven::AccessoryVehicleSpeedChecker::HandleEvent(*(raven::AccessoryVehicleSpeedChecker **)(v8 + 2064), (const raven::AccessoryVehicleSpeedEvent *)v20, (raven::AccessoryVehicleSpeedEvent *)v21))
  {
    v10.n128_f64[0] = sub_18D21A888(&v50, (uint64_t)v21);
    v11 = *(_QWORD *)(v8 + 344);
    v48 = v50;
    v49 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(_QWORD *)v11 + 16))(v11, &v48, v8, v10);
    v14 = v49;
    if (v49)
    {
      v15 = (unint64_t *)&v49->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v51;
    if (v51)
    {
      v18 = (unint64_t *)&v51->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v21);
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v20);
}

void sub_18D21A7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;

  v44 = *(std::__shared_weak_count **)(v42 - 56);
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *(std::__shared_weak_count **)(v42 - 40);
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)&a42);
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21A840(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B86B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21A87C()
{
  return &unk_1E25B86B8;
}

double sub_18D21A888(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  uint64_t v13;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v5 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v5;
  v6 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v7 = operator new();
  sub_18D21AA20(v7, a2);
  v8 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t))(v9 + 16))(a2);
  *((_QWORD *)v4 + 8) = v10;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v12, a2);
  if (v4[95] < 0)
    operator delete(*v6);
  result = *(double *)&v12;
  *(_OWORD *)v6 = v12;
  *((_QWORD *)v4 + 11) = v13;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_18D21A9B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  void *v5;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21AA20(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = &off_1E25C1C00;
  *(_QWORD *)(a1 + 8) = &off_1E25C3460;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  v7 = *(_OWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 160) = v10;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  sub_18D20F5AC((_QWORD *)(a1 + 216), *(const void **)(a2 + 208), *(_QWORD *)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  sub_18D20F5AC((_QWORD *)(a1 + 240), *(const void **)(a2 + 232), *(_QWORD *)(a2 + 240), (uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 3);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 256);
  return a1;
}

void sub_18D21AB00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 224) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21AB1C(uint64_t a1)
{
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)(a1 + 8));
  return a1;
}

void sub_18D21AB44(uint64_t a1)
{
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21AB7C()
{
}

uint64_t sub_18D21AB88(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_18D21AA20(v2, a1 + 8);
  return v2;
}

void sub_18D21ABCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1081C40EDB5AB56);
  _Unwind_Resume(a1);
}

void sub_18D21ABF4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21AC08()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAE70;
  return result;
}

uint64_t sub_18D21AC30(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8638))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21AC6C()
{
  return &unk_1E25B8638;
}

_QWORD *sub_18D21AC78@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D21ACD0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D21ACBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21ACD0(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D0606E8((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D21AD08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

__n128 sub_18D21AD20(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C18A0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2AB0;
  v3 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v3;
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(v2 + 192) = *(_QWORD *)(a1 + 192);
  v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v4;
  v5 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v5;
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v6;
  result = *(__n128 *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v2 + 48) = result;
  *(_OWORD *)(v2 + 64) = v8;
  return result;
}

void sub_18D21ADAC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21ADC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA9F8;
  return result;
}

void sub_18D21ADE4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA9F8;
}

void sub_18D21ADF8(int a1, _QWORD **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  __n128 v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v21[120];
  uint64_t v22[3];
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v8 = *a2;
  sub_18D20FCB0((uint64_t)v21, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v8[64] = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v8[65] = v9;
  v22[1] = 0;
  v22[2] = 0;
  v22[0] = (uint64_t)&unk_1E25C2128;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0x7FF8000000000000;
  raven::RavenIntegrityEstimator::HandleEvent((raven::RavenIntegrityEstimator *)(v8 + 62), (const raven::AltitudeEvent *)v21, (raven::AltitudeEvent *)v22);
  if (!v10)
  {
    v11.n128_f64[0] = sub_18D21B008(&v35, v22);
    v12 = v8[43];
    v33 = v35;
    v34 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, _QWORD *, __n128))(*(_QWORD *)v12 + 16))(v12, &v33, v8, v11);
    v15 = v34;
    if (v34)
    {
      v16 = (unint64_t *)&v34->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v36;
    if (v36)
    {
      v19 = (unint64_t *)&v36->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_18D21AF44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 - 40);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21AFC0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8568))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21AFFC()
{
  return &unk_1E25B8568;
}

double sub_18D21B008(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  uint64_t v16;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v5 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v5;
  v6 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E25C1510;
  *(_QWORD *)(v7 + 8) = &unk_1E25C2128;
  v8 = *(_OWORD *)(a2 + 7);
  v9 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v7 + 96) = v9;
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 13);
  v10 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v7 + 64) = v8;
  v11 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v7;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v12 + 16))(a2);
  *((_QWORD *)v4 + 8) = v13;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v15, a2);
  if (v4[95] < 0)
    operator delete(*v6);
  result = *(double *)&v15;
  *(_OWORD *)v6 = v15;
  *((_QWORD *)v4 + 11) = v16;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_18D21B170(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  void *v5;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_18D21B1C0()
{
}

__n128 sub_18D21B1CC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1510;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2128;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

void sub_18D21B23C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21B250()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAF20;
  return result;
}

void sub_18D21B274(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAF20;
}

void sub_18D21B288(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[216];
  uint64_t v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = *a2;
  sub_18D20F8B4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = (uint64_t)&unk_1E25C2B78;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0x7FF8000000000000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0x7FF8000000000000;
  if (!raven::AltitudeChangeChecker::HandleEvent(*(raven::AltitudeChangeChecker **)(v8 + 2072), (const raven::AltitudeChangeEvent *)v10, (raven::AltitudeChangeEvent *)v11))sub_18D214148(v8, v11);
}

uint64_t sub_18D21B33C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8658))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21B378()
{
  return &unk_1E25B8658;
}

void sub_18D21B388()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21B39C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB080;
  return result;
}

void sub_18D21B3C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB080;
}

void sub_18D21B3D4(int a1, _QWORD **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[14];
  void *v19;
  char v20;
  unsigned __int8 v21;
  __int16 v22;

  v8 = *a2;
  sub_18D21589C((uint64_t)v18, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v8[64] = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v8[65] = v9;
  if (raven::RavenIntegrityEstimator::HandleEvent((raven::RavenIntegrityEstimator *)(v8 + 62), (const raven::ARSessionStatusEvent *)v18))
  {
    v22 = 12;
    v21 = 2;
    v10 = (*(uint64_t (**)(_QWORD *))(v18[0] + 16))(v18);
    v12 = v11 + (double)v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v18[0] + 24))(&v19, v18);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "t,%.3lf,IE failed to handle %s", v13, v14, v15, v16, v17, SLOBYTE(v12));
    if (v20 < 0)
      operator delete(v19);
  }
}

void sub_18D21B4B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21B4CC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8698))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21B508()
{
  return &unk_1E25B8698;
}

void sub_18D21B518()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21B52C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAF78;
  return result;
}

void sub_18D21B550(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAF78;
}

void sub_18D21B568(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[400];
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  v8 = *a2;
  sub_18D21B6B4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = &off_1E25C2BA8;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0x7FF8000000000000;
  v24 = 0;
  v26 = 0;
  v25 = 0;
  v27 = 0;
  v29 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0x7FF8000000000000;
  v34 = 0;
  v36 = 0;
  v35 = 0;
  v40 = 0x400000004;
  v37 = 0x3FF0000000000000;
  v38 = &unk_1E25C7FA0;
  v39 = xmmword_18D313080;
  v41 = &v42;
  if (!raven::AttitudeChangeChecker::HandleEvent(*(raven::AttitudeChangeChecker **)(v8 + 2088), (const raven::AttitudeChangeEvent *)v10, (raven::AttitudeChangeEvent *)v11))sub_18D21B938(v8, (uint64_t)v11);
}

uint64_t sub_18D21B66C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8668))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21B6A8()
{
  return &unk_1E25B8668;
}

double sub_18D21B6B4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  const char *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned __int8 v38;
  __int16 v39;
  std::bad_cast v40;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven19AttitudeChangeEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)"N5raven19AttitudeChangeEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v40.__vftable = 0;
      std::bad_cast::bad_cast(&v40);
      v40.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v28 = (_OWORD *)*((_QWORD *)this + 2);
    *(_QWORD *)a1 = &off_1E25C2BA8;
    v29 = v28[1];
    v30 = v28[2];
    v31 = v28[3];
    *(_OWORD *)(a1 + 56) = v28[4];
    *(_OWORD *)(a1 + 40) = v31;
    *(_OWORD *)(a1 + 24) = v30;
    *(_OWORD *)(a1 + 8) = v29;
    v32 = v28[5];
    v33 = v28[6];
    v34 = v28[7];
    *(_OWORD *)(a1 + 120) = v28[8];
    *(_OWORD *)(a1 + 104) = v34;
    *(_OWORD *)(a1 + 88) = v33;
    *(_OWORD *)(a1 + 72) = v32;
    v35 = v28[9];
    v36 = v28[10];
    v37 = v28[11];
    *(_OWORD *)(a1 + 184) = v28[12];
    *(_OWORD *)(a1 + 168) = v37;
    *(_OWORD *)(a1 + 152) = v36;
    *(_OWORD *)(a1 + 136) = v35;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    if ((_OWORD *)a1 != (_OWORD *)((char *)v28 + 8))
    {
      *(_OWORD *)(a1 + 200) = v28[13];
      *(_OWORD *)(a1 + 216) = v28[14];
    }
    *(_QWORD *)&result = sub_18D1EBE50(a1 + 232, (uint64_t)(v28 + 15)).n128_u64[0];
  }
  else
  {
    v39 = 3;
    v38 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_QWORD *)(a1 + 392) = 0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_1E25C2BA8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 256) = 0x400000004;
    *(_QWORD *)(a1 + 232) = &unk_1E25C7FA0;
    *(_QWORD *)&result = 0x400000004;
    *(_OWORD *)(a1 + 240) = xmmword_18D313080;
    *(_QWORD *)(a1 + 264) = a1 + 272;
  }
  return result;
}

void sub_18D21B924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D21B938(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D21BA2C(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D21BA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21BA2C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D21BA84(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D21BA70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21BA84(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D21BAD0((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D21BABC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21BAD0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D21BBE8(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D21BBA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D21BBE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_18D21BC38(&v6, a2);
  v3 = v6;
  v6 = *a1;
  v4 = v6;
  *a1 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t *sub_18D21BC38(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_18D21BCB0(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_18D21BC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1081C40D5D9C317);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21BCB0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = &unk_1E25C1960;
  *(_QWORD *)(a1 + 8) = &off_1E25C2BA8;
  v3 = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  v9 = *(_OWORD *)(a2 + 136);
  v10 = *(_OWORD *)(a2 + 152);
  v11 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  if (a1 + 8 != a2)
  {
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 216);
  }
  sub_18D1EBE50(a1 + 240, a2 + 232);
  return a1;
}

uint64_t sub_18D21BD68(uint64_t result)
{
  *(_QWORD *)(result + 8) = &off_1E25C2BA8;
  *(_QWORD *)(result + 240) = &unk_1E25C5E70;
  return result;
}

void sub_18D21BD8C(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E25C2BA8;
  *(_QWORD *)(a1 + 240) = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21BDC0()
{
}

uint64_t sub_18D21BDCC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_18D21BCB0(v2, a1 + 8);
  return v2;
}

void sub_18D21BE10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1081C40D5D9C317);
  _Unwind_Resume(a1);
}

void sub_18D21BE38()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21BE4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB238;
  return result;
}

void sub_18D21BE70(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB238;
}

void sub_18D21BE84(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[12];
  uint64_t v11;
  void **v12[3];
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  _BYTE v21[24];
  int v22;
  void **v23;

  v8 = *a2;
  sub_18D2109A0((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = (void **)off_1E25C3EC8;
  v13 = 0;
  if (!raven::GNSSPreprocessedMeasurementsChecker::HandleEvent(*(raven::GNSSPreprocessedMeasurementsChecker **)(v8 + 2096), (const raven::GnssPreprocessedMeasurementsEvent *)v10, (raven::GnssPreprocessedMeasurementsEvent *)v12))sub_18D166F34(v8, (uint64_t)v12);
  v12[0] = (void **)off_1E25C3EC8;
  v23 = (void **)&v21[4];
  sub_18D07C7AC(&v23);
  v10[0] = off_1E25C3EC8;
  v12[0] = (void **)&v11;
  sub_18D07C7AC(v12);
}

void sub_18D21BF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a22;
  sub_18D07C7AC(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21BFC0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B86E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21BFFC()
{
  return &unk_1E25B86E8;
}

void sub_18D21C00C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21C020()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAA50;
  return result;
}

void sub_18D21C044(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAA50;
}

void sub_18D21C058(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnframework::ActiveObjectBase *v8;
  uint64_t v9;
  _BYTE v10[224];

  v8 = *a2;
  sub_18D2165EC((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((_QWORD *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((_QWORD *)v8 + 65) = v9;
  sub_18D21C0EC((uint64_t)v8, (uint64_t)v10);
}

uint64_t sub_18D21C0A4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8578))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21C0E0()
{
  return &unk_1E25B8578;
}

void sub_18D21C0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D21C1E0(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D21C1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21C1E0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D21C238(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D21C224(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21C238(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D21C284((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D21C270(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21C284(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D21C39C(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D21C35C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D21C39C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_18D21C3EC(&v6, a2);
  v3 = v6;
  v6 = *a1;
  v4 = v6;
  *a1 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t *sub_18D21C3EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C1540;
  *(_QWORD *)(v4 + 8) = &unk_1E25C2158;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  if (v4 + 8 != a2)
  {
    v8 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v4 + 128) = v8;
  }
  v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v4 + 176) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 192) = v9;
  *(_OWORD *)(v4 + 208) = *(_OWORD *)(a2 + 200);
  *(_WORD *)(v4 + 224) = *(_WORD *)(a2 + 216);
  v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 160) = v10;
  *a1 = v4;
  return a1;
}

void sub_18D21C4BC()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21C4D0()
{
}

__n128 sub_18D21C4DC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1540;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2158;
  v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v3;
  v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v4;
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  if (v2 != a1)
  {
    v6 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v2 + 128) = v6;
  }
  v7 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v2 + 192) = v7;
  *(_OWORD *)(v2 + 208) = *(_OWORD *)(a1 + 208);
  *(_WORD *)(v2 + 224) = *(_WORD *)(a1 + 224);
  result = *(__n128 *)(a1 + 144);
  v9 = *(_OWORD *)(a1 + 160);
  *(__n128 *)(v2 + 144) = result;
  *(_OWORD *)(v2 + 160) = v9;
  return result;
}

void sub_18D21C580()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21C594()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAFD0;
  return result;
}

void sub_18D21C5B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAFD0;
}

void sub_18D21C5CC(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnframework::ActiveObjectBase *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[26];
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v8 = *a2;
  sub_18D20E7B0((uint64_t)v20, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((_QWORD *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((_QWORD *)v8 + 65) = v9;
  v10.n128_f64[0] = sub_18D21C78C(&v23, v20);
  v11 = *((_QWORD *)v8 + 43);
  v21 = v23;
  v22 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, cnframework::ActiveObjectBase *, __n128))(*(_QWORD *)v11 + 16))(v11, &v21, v8, v10);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_18D21C6C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 - 40);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21C744(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8678))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21C780()
{
  return &unk_1E25B8678;
}

double sub_18D21C78C(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;
  uint64_t v19;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v5 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v5;
  v6 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E25C1990;
  *(_QWORD *)(v7 + 8) = &unk_1E25C2BD8;
  v8 = *(_OWORD *)(a2 + 19);
  v9 = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(v7 + 192) = v9;
  *(_QWORD *)(v7 + 208) = a2[25];
  v10 = *(_OWORD *)(a2 + 11);
  v11 = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(v7 + 128) = v11;
  *(_OWORD *)(v7 + 144) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(v7 + 160) = v8;
  v12 = *(_OWORD *)(a2 + 3);
  v13 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v7 + 64) = v13;
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v7 + 32) = v12;
  v14 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v7;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v15 + 16))(a2);
  *((_QWORD *)v4 + 8) = v16;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v18, a2);
  if (v4[95] < 0)
    operator delete(*v6);
  result = *(double *)&v18;
  *(_OWORD *)v6 = v18;
  *((_QWORD *)v4 + 11) = v19;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_18D21C918(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  void *v5;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18D21C968()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21C97C()
{
}

__n128 sub_18D21C988(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1990;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2BD8;
  v3 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v2 + 192) = v3;
  *(_QWORD *)(v2 + 208) = *(_QWORD *)(a1 + 208);
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v5;
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v6;
  v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v7;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

void sub_18D21CA10()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21CA24()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAC08;
  return result;
}

void sub_18D21CA48(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAC08;
}

void sub_18D21CA5C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[280];
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int v38;

  v8 = *a2;
  sub_18D210D5C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = &unk_1E25C22D8;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0x7FF8000000000000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = vdupq_n_s64(0x7FF8000000000000uLL);
  v34 = v33;
  v35 = v33;
  v36 = v33;
  v37 = v33;
  v38 = 0;
  if (!raven::MapVectorChecker::HandleEvent(*(raven::MapVectorChecker **)(v8 + 2104), (const raven::MapVectorEvent *)v10, (raven::MapVectorEvent *)v11))sub_18D21CB74(v8, (uint64_t)v11);
}

uint64_t sub_18D21CB2C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B85C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21CB68()
{
  return &unk_1E25B85C8;
}

void sub_18D21CB74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D21CC68(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D21CC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21CC68@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D21CCC0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D21CCAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21CCC0(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D21CD0C((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D21CCF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21CD0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D21CE24(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D21CDE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D21CE24(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E25C16C0;
  v4[1] = &unk_1E25C22D8;
  memcpy(v4 + 2, (const void *)(a2 + 8), 0x10CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_18D21CEB0()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21CEC4()
{
}

_QWORD *sub_18D21CED0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E25C16C0;
  v2[1] = &unk_1E25C22D8;
  memcpy(v2 + 2, (const void *)(a1 + 16), 0x10CuLL);
  return v2;
}

void sub_18D21CF38()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21CF4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAD10;
  return result;
}

uint64_t sub_18D21CF74(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B85F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21CFB0()
{
  return &unk_1E25B85F8;
}

double sub_18D21CFBC(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  __int128 v16;
  uint64_t v17;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v5 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v5;
  v6 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E25C1780;
  *(_QWORD *)(v7 + 8) = &unk_1E25C24A0;
  v8 = *(_OWORD *)(a2 + 11);
  v9 = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(v7 + 128) = v9;
  *(_QWORD *)(v7 + 144) = a2[17];
  v10 = *(_OWORD *)(a2 + 3);
  v11 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v7 + 64) = v11;
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v7 + 96) = v8;
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v7 + 32) = v10;
  v12 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v7;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v13 + 16))(a2);
  *((_QWORD *)v4 + 8) = v14;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v16, a2);
  if (v4[95] < 0)
    operator delete(*v6);
  result = *(double *)&v16;
  *(_OWORD *)v6 = v16;
  *((_QWORD *)v4 + 11) = v17;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_18D21D130(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  void *v5;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

__n128 sub_18D21D180(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1780;
  *(_QWORD *)(v2 + 8) = &unk_1E25C24A0;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v3;
  *(_QWORD *)(v2 + 144) = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v4;
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v5;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

void sub_18D21D1F8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21D20C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAD68;
  return result;
}

uint64_t sub_18D21D234(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8608))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21D270()
{
  return &unk_1E25B8608;
}

_QWORD *sub_18D21D27C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D21D2D4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D21D2C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21D2D4(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D04C290((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D21D30C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

__n128 sub_18D21D324(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C17E0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C26E8;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v3;
  *(_QWORD *)(v2 + 144) = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v4;
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v5;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

void sub_18D21D3A0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21D3B4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB290;
  return result;
}

void sub_18D21D3D8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB290;
}

void sub_18D21D3F0(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnframework::ActiveObjectBase *v8;
  uint64_t v9;
  _BYTE v10[136];

  v8 = *a2;
  sub_18D21D484((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((_QWORD *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((_QWORD *)v8 + 65) = v9;
  sub_18D21D624((uint64_t)v8, (uint64_t)v10);
}

uint64_t sub_18D21D43C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B86F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21D478()
{
  return &unk_1E25B86F8;
}

__n128 sub_18D21D484(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  __int16 v34;
  std::bad_cast v35;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven35NonHolonomicVelocityConstraintEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven35NonHolonomicVelocityConstraintEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v29;
    v30 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v30;
    v31 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v31;
    result = *(__n128 *)(v28 + 48);
    v32 = *(_OWORD *)(v28 + 64);
    *(__n128 *)(a1 + 40) = result;
    *(_QWORD *)a1 = &unk_1E25C4230;
    *(_OWORD *)(a1 + 56) = v32;
  }
  else
  {
    v34 = 3;
    v33 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C4230;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18D21D610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_18D21D624(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D21D718(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D21D6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21D718@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D21D770(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D21D75C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21D770(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D21D7BC((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D21D7A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21D7BC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D21D8D4(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D21D894(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D21D8D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C1DE0;
  *(_QWORD *)(v4 + 8) = &unk_1E25C4230;
  v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 128) = v6;
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v8;
  v9 = *a1;
  *a1 = v4;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_18D21D97C()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21D990()
{
}

__n128 sub_18D21D99C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1DE0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C4230;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v5;
  result = *(__n128 *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v2 + 48) = result;
  *(_OWORD *)(v2 + 64) = v7;
  return result;
}

void sub_18D21DA10()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21DA24()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAAA8;
  return result;
}

void sub_18D21DA48(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAAA8;
}

void sub_18D21DA5C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v12;
  void **v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t shared_weak_owners;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE v30[216];
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v8 = *a2;
  sub_18D211250((uint64_t)v30, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v32 = 0uLL;
  v31 = &unk_1E25C2188;
  LOBYTE(v33) = 0;
  *((_QWORD *)&v33 + 1) = 0;
  *(_QWORD *)&v34 = 0;
  BYTE8(v34) = 0;
  v35 = 0uLL;
  LOBYTE(v36) = 0;
  *((_QWORD *)&v36 + 1) = 0;
  *(_QWORD *)&v37 = 0;
  v38 = 0uLL;
  *((_QWORD *)&v37 + 1) = 0x7FF8000000000000;
  LOBYTE(v39) = 0;
  *((_QWORD *)&v39 + 1) = 0;
  *(_QWORD *)&v40 = 0;
  BYTE8(v40) = 0;
  v41 = 0uLL;
  LOBYTE(v42) = 0;
  *((_QWORD *)&v42 + 1) = 0;
  *(_QWORD *)&v43 = 0;
  *((_QWORD *)&v43 + 1) = 0x7FF8000000000000;
  if (!raven::OdometerChecker::HandleEvent(*(raven::OdometerChecker **)(v8 + 2128), (const raven::OdometerEvent *)v30, (raven::OdometerEvent *)&v31))
  {
    v10 = (std::__shared_weak_count *)operator new(0x60uLL);
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
    v12 = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
    LOBYTE(v10[1].__shared_owners_) = 0;
    v10[1].__shared_weak_owners_ = 0;
    v10[2].__vftable = v12;
    v13 = (void **)&v10[3].__vftable;
    v10[2].__shared_owners_ = 0;
    v10[2].__shared_weak_owners_ = 0;
    sub_18D0778AC(&v10[3].__vftable, "");
    LOBYTE(v10[1].__shared_owners_) = 1;
    v14 = operator new();
    *(_QWORD *)v14 = &off_1E25C1570;
    *(_QWORD *)(v14 + 8) = &unk_1E25C2188;
    v15 = v43;
    *(_OWORD *)(v14 + 176) = v42;
    *(_OWORD *)(v14 + 192) = v15;
    *(_OWORD *)(v14 + 208) = v44;
    v16 = v39;
    *(_OWORD *)(v14 + 112) = v38;
    *(_OWORD *)(v14 + 128) = v16;
    v17 = v41;
    *(_OWORD *)(v14 + 144) = v40;
    *(_OWORD *)(v14 + 160) = v17;
    v18 = v35;
    *(_OWORD *)(v14 + 48) = v34;
    *(_OWORD *)(v14 + 64) = v18;
    v19 = v37;
    *(_OWORD *)(v14 + 80) = v36;
    *(_OWORD *)(v14 + 96) = v19;
    v20 = v33;
    *(_OWORD *)(v14 + 16) = v32;
    *(_OWORD *)(v14 + 32) = v20;
    shared_weak_owners = v10[1].__shared_weak_owners_;
    v10[1].__shared_weak_owners_ = v14;
    if (shared_weak_owners)
      (*(void (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 8))(shared_weak_owners);
    v22 = v31;
    v10[2].__vftable = (std::__shared_weak_count_vtbl *)*(v31 - 1);
    v10[2].__shared_owners_ = ((uint64_t (*)(uint64_t))v22[2])((uint64_t)&v31);
    v10[2].__shared_weak_owners_ = v23;
    ((void (*)(_QWORD *@<X8>))v31[3])(&v45);
    if (SHIBYTE(v10[3].__shared_weak_owners_) < 0)
      operator delete(*v13);
    *(_OWORD *)v13 = v45;
    v10[3].__shared_weak_owners_ = v46;
    v24 = *(_QWORD *)(v8 + 344);
    *(_QWORD *)&v45 = v10 + 1;
    *((_QWORD *)&v45 + 1) = v10;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v24 + 16))(v24, &v45, v8);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_18D21DCEC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v5 = *(std::__shared_weak_count **)(v3 - 80);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  do
    v8 = __ldaxr(v2);
  while (__stlxr(v8 - 1, v2));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21DDA4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8588))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21DDE0()
{
  return &unk_1E25B8588;
}

void sub_18D21DDF0()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21DE04()
{
}

__n128 sub_18D21DE10(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1570;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2188;
  v3 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v2 + 192) = v3;
  *(_OWORD *)(v2 + 208) = *(_OWORD *)(a1 + 208);
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v5;
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v6;
  v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v7;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

void sub_18D21DE98()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21DEAC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAB00;
  return result;
}

void sub_18D21DED0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAB00;
}

void sub_18D21DEE4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[360];
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;
  char v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  uint64_t v46;

  v8 = *a2;
  sub_18D211EA4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = &unk_1E25C21B8;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0x7FF8000000000000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v29 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0x7FF8000000000000;
  v34 = 0;
  v35 = 0;
  v36 = vdupq_n_s64(0x7FF8000000000000uLL);
  v37 = v36;
  v38 = v36;
  v39 = v36;
  v40 = 0x7FF8000000000000;
  v41 = 0;
  v42 = v36;
  v43 = v36;
  v44 = v36;
  v45 = v36;
  v46 = 0x7FF8000000000000;
  if (!raven::RavenIntegrityEstimator::HandleEvent((raven::PositionChecker **)(v8 + 496), (const raven::PositionEvent *)v10, (raven::PositionEvent *)v11))sub_18D21E020(v8, (uint64_t)v11);
}

uint64_t sub_18D21DFD8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8598))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21E014()
{
  return &unk_1E25B8598;
}

void sub_18D21E020(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D21E114(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D21E0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21E114@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D21E16C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D21E158(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21E16C(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D21E1B8((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D21E1A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21E1B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D21E2D0(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D21E290(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D21E2D0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E25C15A0;
  v4[1] = &unk_1E25C21B8;
  memcpy(v4 + 2, (const void *)(a2 + 8), 0x160uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void *sub_18D21E35C()
{
}

_QWORD *sub_18D21E368(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E25C15A0;
  v2[1] = &unk_1E25C21B8;
  memcpy(v2 + 2, (const void *)(a1 + 16), 0x160uLL);
  return v2;
}

void sub_18D21E3D0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21E3E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB028;
  return result;
}

void sub_18D21E408(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB028;
}

void sub_18D21E420(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[376];
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v38[4];
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  v8 = *a2;
  sub_18D21164C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = &off_1E25C2C08;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0x7FF8000000000000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v29 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v36 = 0x100000003;
  v33 = 0x7FF8000000000000;
  v34 = &unk_1E25C7790;
  v35 = xmmword_18D313070;
  v40 = 0x300000003;
  v37 = v38;
  v38[3] = &unk_1E25C78E0;
  v39 = xmmword_18D30BB60;
  v41 = &v42;
  if (!raven::PositionChangeChecker::HandleEvent(*(raven::PositionChangeChecker **)(v8 + 2136), (const raven::PositionChangeEvent *)v10, (raven::PositionChangeEvent *)v11))sub_18D21E58C(v8, (uint64_t)v11);
}

uint64_t sub_18D21E544(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8688))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21E580()
{
  return &unk_1E25B8688;
}

void sub_18D21E58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D21E680(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D21E664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21E680@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D21E6D8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D21E6C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21E6D8(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D21E724((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D21E710(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21E724(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D21E83C(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D21E7FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D21E83C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_18D21E88C(&v6, a2);
  v3 = v6;
  v6 = *a1;
  v4 = v6;
  *a1 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t *sub_18D21E88C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_18D21E904(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_18D21E8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1081C40D89AA4CDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21E904(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = &unk_1E25C19C0;
  *(_QWORD *)(a1 + 8) = &off_1E25C2C08;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  sub_18D04DA0C(a1 + 208, a2 + 200);
  sub_18D159B20(a1 + 272, a2 + 264);
  return a1;
}

void sub_18D21E9B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D21E9C4(_QWORD *result)
{
  result[1] = &off_1E25C2C08;
  result[34] = &unk_1E25C5E70;
  result[26] = &unk_1E25C5E70;
  return result;
}

void sub_18D21E9EC(_QWORD *a1)
{
  a1[1] = &off_1E25C2C08;
  a1[34] = &unk_1E25C5E70;
  a1[26] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21EA24()
{
}

uint64_t sub_18D21EA30(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_18D21E904(v2, a1 + 8);
  return v2;
}

void sub_18D21EA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1081C40D89AA4CDLL);
  _Unwind_Resume(a1);
}

void sub_18D21EA9C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21EAB0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB0D8;
  return result;
}

void sub_18D21EAD4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB0D8;
}

void sub_18D21EAE8(int a1, _QWORD **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[14];
  void *v19;
  char v20;
  unsigned __int8 v21;
  __int16 v22;

  v8 = *a2;
  sub_18D2125AC((uint64_t)v18, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v8[64] = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v8[65] = v9;
  if (raven::RavenIntegrityEstimator::HandleEvent((raven::RavenIntegrityEstimator *)(v8 + 62), (const raven::SignalEnvironmentEvent *)v18))
  {
    v22 = 12;
    v21 = 2;
    v10 = (*(uint64_t (**)(_QWORD *))(v18[0] + 16))(v18);
    v12 = v11 + (double)v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v18[0] + 24))(&v19, v18);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "t,%.3lf,IE failed to handle %s", v13, v14, v15, v16, v17, SLOBYTE(v12));
    if (v20 < 0)
      operator delete(v19);
  }
}

void sub_18D21EBC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21EBE0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B86A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21EC1C()
{
  return &unk_1E25B86A8;
}

void sub_18D21EC2C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21EC40()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB188;
  return result;
}

void sub_18D21EC64(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB188;
}

void sub_18D21EC78(int a1, _QWORD **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  __n128 v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v21[232];
  uint64_t v22[3];
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  v8 = *a2;
  sub_18D21EEB4((uint64_t)v21, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v8[64] = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v8[65] = v9;
  v22[1] = 0;
  v22[2] = 0;
  v22[0] = (uint64_t)&unk_1E25C38D8;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0x7FF8000000000000;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = vdupq_n_s64(0x7FF8000000000000uLL);
  v45 = v44;
  v46 = 0;
  raven::RavenIntegrityEstimator::HandleEvent((raven::RavenIntegrityEstimator *)(v8 + 62), (const raven::TunnelBridgeNotificationEvent *)v21, (raven::TunnelBridgeNotificationEvent *)v22);
  if (!v10)
  {
    v11.n128_f64[0] = sub_18D21F0B8(&v49, v22);
    v12 = v8[43];
    v47 = v49;
    v48 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, _QWORD *, __n128))(*(_QWORD *)v12 + 16))(v12, &v47, v8, v11);
    v15 = v48;
    if (v48)
    {
      v16 = (unint64_t *)&v48->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v50;
    if (v50)
    {
      v19 = (unint64_t *)&v50->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_18D21EDF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 - 40);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21EE6C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B86C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21EEA8()
{
  return &unk_1E25B86C8;
}

int64x2_t sub_18D21EEB4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t result;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;
  __int16 v36;
  std::bad_cast v37;

  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven29TunnelBridgeNotificationEventE" & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)"N5raven29TunnelBridgeNotificationEventE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v37.__vftable = 0;
        std::bad_cast::bad_cast(&v37);
        v37.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
        sub_18D20CF7C();
      }
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *(_OWORD *)(v28 + 192);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v28 + 176);
    *(_OWORD *)(a1 + 184) = v29;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(v28 + 208);
    *(_OWORD *)(a1 + 212) = *(_OWORD *)(v28 + 220);
    v30 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 120) = v30;
    v31 = *(_OWORD *)(v28 + 160);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v28 + 144);
    *(_OWORD *)(a1 + 152) = v31;
    v32 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 56) = v32;
    v33 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 88) = v33;
    result = *(int64x2_t *)(v28 + 16);
    v34 = *(_OWORD *)(v28 + 32);
    *(int64x2_t *)(a1 + 8) = result;
    *(_QWORD *)a1 = &unk_1E25C38D8;
    *(_OWORD *)(a1 + 24) = v34;
  }
  else
  {
    v36 = 3;
    v35 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &unk_1E25C38D8;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 192) = result;
    *(int64x2_t *)(a1 + 208) = result;
  }
  return result;
}

void sub_18D21F0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

double sub_18D21F0B8(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v18;
  uint64_t v19;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v5 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v5;
  v6 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E25C1CF0;
  *(_QWORD *)(v7 + 8) = &unk_1E25C38D8;
  v8 = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(v7 + 192) = v8;
  *(_OWORD *)(v7 + 208) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(v7 + 220) = *(_OWORD *)((char *)a2 + 212);
  v9 = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(v7 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(v7 + 144) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(v7 + 160) = v10;
  v11 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v7 + 64) = v11;
  v12 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v7 + 96) = v12;
  v13 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v7 + 32) = v13;
  v14 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v7;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v15 + 16))(a2);
  *((_QWORD *)v4 + 8) = v16;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v18, a2);
  if (v4[95] < 0)
    operator delete(*v6);
  result = *(double *)&v18;
  *(_OWORD *)v6 = v18;
  *((_QWORD *)v4 + 11) = v19;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_18D21F24C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  void *v5;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18D21F29C()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21F2B0()
{
}

__n128 sub_18D21F2BC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1CF0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C38D8;
  v3 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v2 + 192) = v3;
  *(_OWORD *)(v2 + 208) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(v2 + 220) = *(_OWORD *)(a1 + 220);
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v5;
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v6;
  v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v7;
  result = *(__n128 *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v9;
  return result;
}

void sub_18D21F34C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21F360()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB1E0;
  return result;
}

void sub_18D21F384(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB1E0;
}

void sub_18D21F398(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[64];
  std::bad_cast v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  char v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven29TunnelEndPointAssistanceEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven29TunnelEndPointAssistanceEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v63.__vftable = 0;
      std::bad_cast::bad_cast(&v63);
      v63.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = (_OWORD *)*((_QWORD *)this + 2);
    v50 = &unk_1E25C3908;
    v29 = v27[2];
    v28 = v27[3];
    v51 = v27[1];
    v52 = v29;
    v53 = v28;
    v30 = v27[6];
    v31 = v27[7];
    v32 = v27[5];
    v54 = v27[4];
    v57 = v31;
    v56 = v30;
    v55 = v32;
    v33 = v27[10];
    v34 = v27[11];
    v35 = v27[9];
    v58 = v27[8];
    v61 = v34;
    v60 = v33;
    v59 = v35;
    v37 = v27[13];
    v36 = v27[14];
    v38 = *(_OWORD *)((char *)v27 + 233);
    *(_OWORD *)v62 = v27[12];
    *(_OWORD *)&v62[41] = v38;
    *(_OWORD *)&v62[32] = v36;
    *(_OWORD *)&v62[16] = v37;
  }
  else
  {
    LOWORD(v63.__vftable) = 3;
    LOBYTE(v93) = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v93, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v52 = 0uLL;
    v55 = 0uLL;
    v58 = 0uLL;
    v59 = 0u;
    v61 = 0uLL;
    *(_OWORD *)&v62[48] = 0u;
    v51 = 0uLL;
    v50 = &unk_1E25C3908;
    v53 = 0uLL;
    v54 = 0uLL;
    *(_QWORD *)&v56 = 0;
    *((_QWORD *)&v56 + 1) = 0x7FF8000000000000;
    v57 = 0uLL;
    BYTE8(v59) = 0;
    *(_QWORD *)&v59 = 0;
    v60 = 0uLL;
    *(_QWORD *)v62 = 0;
    *(int64x2_t *)&v62[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v62[24] = *(_OWORD *)&v62[8];
    *(_OWORD *)&v62[40] = *(_OWORD *)&v62[8];
  }
  *(_QWORD *)(v9 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
  *(_QWORD *)(v9 + 520) = v39;
  v64 = 0;
  v65 = 0;
  v63.__vftable = (std::bad_cast_vtbl *)&unk_1E25C3908;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v76 = 0;
  v77 = 0;
  v75 = 0x7FF8000000000000;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = vdupq_n_s64(0x7FF8000000000000uLL);
  v88 = v87;
  v89 = v87;
  v90 = 0;
  if (!raven::TunnelEndPointAssistanceChecker::HandleEvent(*(raven::TunnelEndPointAssistanceChecker **)(v9 + 2192), (const raven::TunnelEndPointAssistanceEvent *)&v50, (raven::TunnelEndPointAssistanceEvent *)&v63))
  {
    v40.n128_f64[0] = sub_18D21F7B0(&v93, (uint64_t *)&v63);
    v41 = *(_QWORD *)(v9 + 344);
    v91 = v93;
    v92 = v94;
    if (v94)
    {
      p_shared_owners = (unint64_t *)&v94->__shared_owners_;
      do
        v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(_QWORD *)v41 + 16))(v41, &v91, v9, v40);
    v44 = v92;
    if (v92)
    {
      v45 = (unint64_t *)&v92->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v94;
    if (v94)
    {
      v48 = (unint64_t *)&v94->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
}

void sub_18D21F6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::exception a42)
{
  std::exception::~exception(&a42);
  _Unwind_Resume(a1);
}

uint64_t sub_18D21F768(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B86D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21F7A4()
{
  return &unk_1E25B86D8;
}

double sub_18D21F7B0(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  __int128 v19;
  uint64_t v20;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v5 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v5;
  v6 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E25C1D20;
  *(_QWORD *)(v7 + 8) = &unk_1E25C3908;
  v8 = *(_OWORD *)(a2 + 23);
  v9 = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(v7 + 208) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(v7 + 224) = v9;
  *(_OWORD *)(v7 + 233) = *(_OWORD *)((char *)a2 + 225);
  v10 = *(_OWORD *)(a2 + 15);
  v11 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(v7 + 144) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(v7 + 160) = v11;
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(v7 + 192) = v8;
  v12 = *(_OWORD *)(a2 + 7);
  v13 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v7 + 96) = v13;
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(v7 + 128) = v10;
  v14 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v7 + 32) = v14;
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v7 + 64) = v12;
  v15 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v7;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v16 + 16))(a2);
  *((_QWORD *)v4 + 8) = v17;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v19, a2);
  if (v4[95] < 0)
    operator delete(*v6);
  result = *(double *)&v19;
  *(_OWORD *)v6 = v19;
  *((_QWORD *)v4 + 11) = v20;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_18D21F948(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  void *v5;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18D21F998()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21F9AC()
{
}

__n128 sub_18D21F9B8(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1D20;
  *(_QWORD *)(v2 + 8) = &unk_1E25C3908;
  v3 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(v2 + 208) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(v2 + 224) = v3;
  *(_OWORD *)(v2 + 233) = *(_OWORD *)(a1 + 233);
  v4 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v4;
  v5 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v2 + 192) = v5;
  v6 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v6;
  v7 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v7;
  v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v8;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

void sub_18D21FA48()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21FA5C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAB58;
  return result;
}

void sub_18D21FA80(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAB58;
}

void sub_18D21FA94(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnframework::ActiveObjectBase *v8;
  uint64_t v9;
  _BYTE v10[152];

  v8 = *a2;
  sub_18D20DF68((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((_QWORD *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((_QWORD *)v8 + 65) = v9;
  sub_18D16C6D4((uint64_t)v8, (uint64_t)v10);
}

uint64_t sub_18D21FAE0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B85A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21FB1C()
{
  return &unk_1E25B85A8;
}

void sub_18D21FB2C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21FB40()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAEC8;
  return result;
}

uint64_t sub_18D21FB68(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8648))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21FBA4()
{
  return &unk_1E25B8648;
}

void sub_18D21FBB4()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D21FBC8()
{
}

__n128 sub_18D21FBD4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1C60;
  *(_QWORD *)(v2 + 8) = &unk_1E25C3618;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_WORD *)(v2 + 112) = *(_WORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

void sub_18D21FC44()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21FC58()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CADC0;
  return result;
}

void sub_18D21FC7C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CADC0;
}

uint64_t sub_18D21FC90(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnframework::ActiveObjectBase *v8;
  uint64_t result;
  uint64_t v10;
  _DWORD v11[28];

  v8 = *a2;
  sub_18D20E20C((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  result = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((_QWORD *)v8 + 64) = result;
  *((_QWORD *)v8 + 65) = v10;
  if (!v11[26])
    return (*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)v8 + 48))(v8);
  return result;
}

uint64_t sub_18D21FCF4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8618))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21FD30()
{
  return &unk_1E25B8618;
}

void sub_18D21FD40()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D21FD54()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CAC60;
  return result;
}

void sub_18D21FD78(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CAC60;
}

void sub_18D21FD8C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[160];
  uint64_t v21[3];
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int64x2_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v8 = *a2;
  sub_18D20EEC8((uint64_t)v20, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v21[1] = 0;
  v21[2] = 0;
  v21[0] = (uint64_t)&unk_1E25C23D8;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0x7FF8000000000000;
  v32 = 0;
  v33 = vdupq_n_s64(0x7FF8000000000000uLL);
  v34 = 0x7FF8000000000000;
  v35 = 0;
  v36 = 0x7FF8000000000000;
  v37 = 0xFFFFFFFFLL;
  if (!raven::StepCountChecker::HandleEvent(*(raven::StepCountChecker **)(v8 + 2160), (const raven::StepCountEvent *)v20, (raven::StepCountEvent *)v21))
  {
    v10.n128_f64[0] = sub_18D21FFB8(&v40, v21);
    v11 = *(_QWORD *)(v8 + 344);
    v38 = v40;
    v39 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(_QWORD *)v11 + 16))(v11, &v38, v8, v10);
    v14 = v39;
    if (v39)
    {
      v15 = (unint64_t *)&v39->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v41;
    if (v41)
    {
      v18 = (unint64_t *)&v41->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_18D21FEF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 - 40);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D21FF70(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B85D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D21FFAC()
{
  return &unk_1E25B85D8;
}

double sub_18D21FFB8(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  __int128 v16;
  uint64_t v17;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v5 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v5;
  v6 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E25C16F0;
  *(_QWORD *)(v7 + 8) = &unk_1E25C23D8;
  v8 = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(v7 + 128) = v8;
  *(_OWORD *)(v7 + 144) = *(_OWORD *)(a2 + 17);
  *(_QWORD *)(v7 + 160) = a2[19];
  v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v7 + 64) = v9;
  v10 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v7 + 96) = v10;
  v11 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v7 + 32) = v11;
  v12 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v7;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v13 + 16))(a2);
  *((_QWORD *)v4 + 8) = v14;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v16, a2);
  if (v4[95] < 0)
    operator delete(*v6);
  result = *(double *)&v16;
  *(_OWORD *)v6 = v16;
  *((_QWORD *)v4 + 11) = v17;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_18D220134(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  void *v5;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18D220184()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D220198()
{
}

__n128 sub_18D2201A4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C16F0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C23D8;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(v2 + 160) = *(_QWORD *)(a1 + 160);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v4;
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v5;
  result = *(__n128 *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v7;
  return result;
}

void sub_18D220224()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D220238()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CACB8;
  return result;
}

void sub_18D22025C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CACB8;
}

void sub_18D220270(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[120];
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;

  v8 = *a2;
  sub_18D212A38((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = &unk_1E25C2438;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = vdupq_n_s64(0x7FF8000000000000uLL);
  v22 = 0x7FF8000000000000;
  if (!raven::UserSpeedChecker::HandleEvent(*(raven::UserSpeedChecker **)(v8 + 2168), (const raven::UserSpeedEvent *)v10, (raven::UserSpeedEvent *)v11))sub_18D17EA80(v8, (uint64_t)v11);
}

uint64_t sub_18D22030C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B85E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D220348()
{
  return &unk_1E25B85E8;
}

void sub_18D220358()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22036C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CABB0;
  return result;
}

void sub_18D220390(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CABB0;
}

void sub_18D2203A4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[360];
  uint64_t v21[3];
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  uint64_t v49;
  char v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v8 = *a2;
  sub_18D212DD8((uint64_t)v20, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(_QWORD *)(v8 + 520) = v9;
  v21[1] = 0;
  v21[2] = 0;
  v21[0] = (uint64_t)&unk_1E25C2278;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0x7FF8000000000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v39 = 0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0x7FF8000000000000;
  v44 = 0;
  v45 = vdupq_n_s64(0x7FF8000000000000uLL);
  v46 = v45;
  v47 = v45;
  v48 = v45;
  v49 = 0x7FF8000000000000;
  v50 = 0;
  v51 = v45;
  v52 = v45;
  v53 = v45;
  v54 = v45;
  v55 = 0x7FF8000000000000;
  if (!raven::VelocityChecker::HandleEvent(*(raven::VelocityChecker **)(v8 + 2176), (const raven::VelocityEvent *)v20, (raven::VelocityEvent *)v21))
  {
    v10.n128_f64[0] = sub_18D220600(&v58, v21);
    v11 = *(_QWORD *)(v8 + 344);
    v56 = v58;
    v57 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, __n128))(*(_QWORD *)v11 + 16))(v11, &v56, v8, v10);
    v14 = v57;
    if (v57)
    {
      v15 = (unint64_t *)&v57->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v59;
    if (v59)
    {
      v18 = (unint64_t *)&v59->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_18D22053C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 - 40);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2205B8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B85B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2205F4()
{
  return &unk_1E25B85B8;
}

double sub_18D220600(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  uint64_t v13;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v5 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v5;
  v6 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E25C1660;
  v7[1] = &unk_1E25C2278;
  memcpy(v7 + 2, a2 + 1, 0x160uLL);
  v8 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v9 + 16))(a2);
  *((_QWORD *)v4 + 8) = v10;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v12, a2);
  if (v4[95] < 0)
    operator delete(*v6);
  result = *(double *)&v12;
  *(_OWORD *)v6 = v12;
  *((_QWORD *)v4 + 11) = v13;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_18D220748(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  void *v5;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_18D220798()
{
}

_QWORD *sub_18D2207A4(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E25C1660;
  v2[1] = &unk_1E25C2278;
  memcpy(v2 + 2, (const void *)(a1 + 16), 0x160uLL);
  return v2;
}

void sub_18D220808()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22081C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9030;
  return result;
}

uint64_t sub_18D220844(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B80B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D220880()
{
  return &unk_1E25B80B8;
}

void sub_18D220890()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2208A4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C90E0;
  return result;
}

void sub_18D2208C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C90E0;
}

uint64_t sub_18D2208DC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE v10[200];

  v8 = *a2;
  sub_18D2168E0((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return sub_18D22AC44(v8 + 696, (uint64_t)v10);
}

uint64_t sub_18D220918(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B80D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D220954()
{
  return &unk_1E25B80D8;
}

void sub_18D220964()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D220978()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8F80;
  return result;
}

void sub_18D22099C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8F80;
}

double sub_18D2209B0(int a1, raven::RavenMapVectorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenMapVectorActiveObject *v8;
  int8x16_t v9;
  int8x16_t v10;
  _BYTE v12[280];

  v8 = *a2;
  sub_18D210D5C((uint64_t)v12, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenMapVectorActiveObject::HandleEvent(v8, (const raven::MapVectorEvent *)v12, v9, v10);
}

uint64_t sub_18D2209EC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8098))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D220A28()
{
  return &unk_1E25B8098;
}

void sub_18D220A38()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D220A4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8FD8;
  return result;
}

uint64_t sub_18D220A74(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B80A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D220AB0()
{
  return &unk_1E25B80A8;
}

void sub_18D220AC0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D220AD4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8ED0;
  return result;
}

void sub_18D220AF8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8ED0;
}

void sub_18D220B0C(int a1, raven::RavenMapVectorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenMapVectorActiveObject *v8;
  int8x16_t v9;
  int8x16_t v10;
  _BYTE v11[152];

  v8 = *a2;
  v9 = (int8x16_t)sub_18D20DF68((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenMapVectorActiveObject::HandleEvent(v8, (const raven::RateGyroEvent *)v11, v9, v10);
}

uint64_t sub_18D220B48(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8078))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D220B84()
{
  return &unk_1E25B8078;
}

void sub_18D220B94()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D220BA8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9088;
  return result;
}

uint64_t sub_18D220BD0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B80C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D220C0C()
{
  return &unk_1E25B80C8;
}

void sub_18D220C1C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D220C30()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8F28;
  return result;
}

uint64_t sub_18D220C58(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8088))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D220C94()
{
  return &unk_1E25B8088;
}

void sub_18D220CA4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D220CB8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB5A8;
  return result;
}

void sub_18D220CDC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB5A8;
}

void sub_18D220CF4(int a1, int64x2_t **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64x2_t *v8;
  __n128 v9;
  int8x16_t v10;
  uint64_t v11;
  cnprint::CNPrinter *v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  unint64_t v23;
  void **v24;
  unint64_t v25;
  void (***v26)(void);
  void (**v27)(void);
  void (***v28)(void);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  BOOL v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint64_t v49;
  double v50;
  double v51;
  _QWORD v52[19];
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];

  v8 = *a2;
  v9 = sub_18D2168E0((uint64_t)v52, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v11 = v8[33].i64[1];
  if (!v11)
  {
LABEL_31:
    sub_18D22108C((int64x2_t *)v8[31].i64, (uint64_t)v52);
    goto LABEL_32;
  }
  v12 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v53, (_QWORD *)(*(_QWORD *)(v8[31].i64[1] + 8 * ((v11 + v8[33].i64[0] - 1) / 0x14uLL))+ 200 * ((v11 + v8[33].i64[0] - 1) % 0x14uLL)+ 152), (int8x16_t)v9, v10);
  if (fabs(v13 + (double)(uint64_t)v12) > 0.000000015)
  {
    if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
    {
      LOWORD(v55[0]) = 12;
      LOBYTE(v54[0]) = 1;
      v14 = (*(uint64_t (**)(_QWORD *))(v52[0] + 16))(v52);
      v51 = v15 + (double)v14;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v55, (unsigned __int8 *)v54, "Acceleration reference frame change, t,%.3lf, reset buffer", v16, v17, v18, v19, v20, SLOBYTE(v51));
    }
    v21 = (void **)v8[31].i64[1];
    v22 = (void **)v8[32].i64[0];
    if (v22 == v21)
    {
      v22 = (void **)v8[31].i64[1];
    }
    else
    {
      v23 = v8[33].u64[0];
      v24 = &v21[v23 / 0x14];
      v25 = (unint64_t)v21[(v8[33].i64[1] + v23) / 0x14] + 200 * ((v8[33].i64[1] + v23) % 0x14);
      if ((char *)*v24 + 200 * (v23 % 0x14) != (void *)v25)
      {
        v26 = (void (***)(void))((char *)*v24 + 200 * (v23 % 0x14));
        do
        {
          v27 = *v26;
          v26 += 25;
          (*v27)();
          if ((char *)v26 - (_BYTE *)*v24 == 4000)
          {
            v28 = (void (***)(void))v24[1];
            ++v24;
            v26 = v28;
          }
        }
        while (v26 != (void (***)(void))v25);
        v21 = (void **)v8[31].i64[1];
        v22 = (void **)v8[32].i64[0];
      }
    }
    v8[33].i64[1] = 0;
    v29 = (char *)v22 - (char *)v21;
    if (v29 >= 0x11)
    {
      do
      {
        operator delete(*v21);
        v30 = v8[32].i64[0];
        v21 = (void **)(v8[31].i64[1] + 8);
        v8[31].i64[1] = (uint64_t)v21;
        v29 = v30 - (_QWORD)v21;
      }
      while (v29 > 0x10);
    }
    if (v29 >> 3 == 1)
    {
      v31 = 10;
      goto LABEL_19;
    }
    if (v29 >> 3 == 2)
    {
      v31 = 20;
LABEL_19:
      v8[33].i64[0] = v31;
    }
  }
  if (!v8[33].i64[1])
    goto LABEL_31;
  v32 = (*(uint64_t (**)(_QWORD *))(v52[0] + 16))(v52);
  v34 = v33;
  v35 = v33;
  v36 = v8[33].i64[1] + v8[33].i64[0] - 1;
  v37 = *(_QWORD *)(v8[31].i64[1] + 8 * (v36 / 0x14)) + 200 * (v36 % 0x14);
  v38 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v37 + 16))(v37);
  if (!v32 && (*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (!v38 ? (v40 = (*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v40 = 1),
        !v40 || (v41 = v32 <= v38, v32 == v38)))
  {
    v41 = v35 <= v39;
  }
  if (!v41)
    goto LABEL_31;
LABEL_32:
  v42 = v8[33].u64[1];
  if (v42 >= 2)
  {
    v43 = *(_QWORD *)(v8[31].i64[1] + 8 * ((v42 + v8[33].i64[0] - 1) / 0x14)) + 200 * ((v42 + v8[33].i64[0] - 1) % 0x14);
    v55[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v43 + 16))(v43);
    v55[1] = v44;
    v45 = *(_QWORD *)(v8[31].i64[1] + 8 * (v8[33].i64[0] / 0x14uLL)) + 200 * (v8[33].i64[0] % 0x14uLL);
    v54[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v45 + 16))(v45);
    v54[1] = v46;
    v49 = CNTimeSpan::operator-((uint64_t)v55, v54, v47, v48);
    if (v50 + (double)v49 > 0.55)
      sub_18D2211B8(v8 + 31);
  }
}

uint64_t sub_18D221044(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8788))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221080()
{
  return &unk_1E25B8788;
}

void sub_18D22108C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 20 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_18D221228(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x14));
  v9 = v7 % 0x14;
  v10 = v8 + 200 * v9;
  *(_QWORD *)v10 = &unk_1E25C35E8;
  v11 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v10 + 8) = v11;
  v12 = *(_OWORD *)(a2 + 40);
  v13 = *(_OWORD *)(a2 + 56);
  v14 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v10 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v10 + 72) = v14;
  *(_OWORD *)(v10 + 56) = v13;
  *(_OWORD *)(v10 + 40) = v12;
  v15 = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v10 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v10 + 136) = v17;
  *(_OWORD *)(v10 + 120) = v16;
  *(_OWORD *)(v10 + 104) = v15;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  if (v10 != a2)
  {
    *(_OWORD *)(v10 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(v8 + 200 * v9 + 184) = *(_OWORD *)(a2 + 184);
  }
  ++a1[5];
}

uint64_t sub_18D2211B8(int64x2_t *a1)
{
  void (***v2)(_QWORD);

  v2 = (void (***)(_QWORD))(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x14uLL))
                                     + 200 * (a1[2].i64[0] % 0x14uLL));
  (**v2)(v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_18D30B1A0);
  return sub_18D22153C((uint64_t)a1, 1);
}

void sub_18D221228(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x14;
  v4 = v2 - 20;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18D0788C8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFA0uLL);
      sub_18D078444(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFA0uLL);
    sub_18D078558((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18D0788C8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_18D0788C8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFA0uLL);
  sub_18D078674(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_18D078788((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_18D2214F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18D22153C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x14)
    a2 = 1;
  if (v2 < 0x28)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 20;
  }
  return v4 ^ 1u;
}

void sub_18D22159C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2215B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB4A0;
  return result;
}

void sub_18D2215D4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB4A0;
}

double sub_18D2215E8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = *a2;
  sub_18D0559DC((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_OWORD *)(v8 + 1512) = v16;
  *(_OWORD *)(v8 + 1528) = v17;
  *(_OWORD *)(v8 + 1544) = v18;
  *(_QWORD *)(v8 + 1560) = v19;
  *(_OWORD *)(v8 + 1448) = v12;
  *(_OWORD *)(v8 + 1464) = v13;
  *(_OWORD *)(v8 + 1480) = v14;
  *(_OWORD *)(v8 + 1496) = v15;
  result = *(double *)&v11;
  *(_OWORD *)(v8 + 1432) = v11;
  return result;
}

uint64_t sub_18D221664(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8758))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2216A0()
{
  return &unk_1E25B8758;
}

void sub_18D2216B0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2216C4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB550;
  return result;
}

void sub_18D2216E8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB550;
}

void *sub_18D221700(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *result;
  _QWORD v10[26];
  char v11;
  _BYTE v12[864];

  v8 = *a2;
  result = sub_18D0408A8(v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v11 == 4)
    return memcpy((void *)(v8 + 544), v12, 0x360uLL);
  return result;
}

uint64_t sub_18D221758(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8778))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221794()
{
  return &unk_1E25B8778;
}

void sub_18D2217A4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2217B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB4F8;
  return result;
}

void sub_18D2217DC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CB4F8;
}

void sub_18D2217F0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  _DWORD v10[28];

  v8 = *a2;
  v9 = sub_18D20E20C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26])
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 48))(v8, v9);
}

uint64_t sub_18D221844(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8768))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221880()
{
  return &unk_1E25B8768;
}

void sub_18D221890()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2218A4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CB448;
  return result;
}

uint64_t sub_18D2218CC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8748))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221908()
{
  return &unk_1E25B8748;
}

void sub_18D221918()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22192C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBDE8;
  return result;
}

void sub_18D221950(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBDE8;
}

void sub_18D221964(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[19];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  v9 = sub_18D20CDC4((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 480))
  {
    if (*(_BYTE *)(v8 + 753))
    {
      if (*(_BYTE *)(v8 + 752))
        raven::RavenMovingStateEstimator::HandleEvent((raven::RavenMovingStateEstimator *)(v8 + 536), (const raven::AccelerometerEvent *)v23);
    }
  }
  else
  {
    v28 = 12;
    v27 = 2;
    v26[0] = (*(uint64_t (**)(_QWORD *, int64x2_t))(v23[0] + 16))(v23, v9);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 511) >= 0)
      LOBYTE(v22) = v8 - 24;
    else
      v22 = *(_QWORD *)(v8 + 488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D221A64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D221A80(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8908))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221ABC()
{
  return &unk_1E25B8908;
}

void sub_18D221ACC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D221AE0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBE40;
  return result;
}

uint64_t sub_18D221B08(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8918))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221B44()
{
  return &unk_1E25B8918;
}

void sub_18D221B54()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D221B68()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBD38;
  return result;
}

uint64_t sub_18D221B90(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B88E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221BCC()
{
  return &unk_1E25B88E8;
}

void sub_18D221BDC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D221BF0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBD90;
  return result;
}

void sub_18D221C14(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBD90;
}

void sub_18D221C28(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[18];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  v9 = sub_18D049B98((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 480))
  {
    if (*(_BYTE *)(v8 + 753))
    {
      if (*(_BYTE *)(v8 + 752))
        raven::RavenMovingStateEstimator::HandleEvent(v8 + 536, (uint64_t)v23);
    }
  }
  else
  {
    v28 = 12;
    v27 = 2;
    v26[0] = (*(uint64_t (**)(_QWORD *, __n128))(v23[0] + 16))(v23, v9);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 511) >= 0)
      LOBYTE(v22) = v8 - 24;
    else
      v22 = *(_QWORD *)(v8 + 488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D221D28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D221D44(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B88F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221D80()
{
  return &unk_1E25B88F8;
}

void sub_18D221D90()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D221DA4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBE98;
  return result;
}

uint64_t sub_18D221DCC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8928))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221E08()
{
  return &unk_1E25B8928;
}

void sub_18D221E18()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D221E2C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBCE0;
  return result;
}

uint64_t sub_18D221E54(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B88D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221E90()
{
  return &unk_1E25B88D8;
}

void sub_18D221EA0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D221EB4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC0A8;
  return result;
}

uint64_t sub_18D221EDC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8988))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D221F18()
{
  return &unk_1E25B8988;
}

void sub_18D221F28()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D221F3C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC100;
  return result;
}

void sub_18D221F60(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC100;
}

void sub_18D221F74(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[26];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D20E7B0((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleFitnessSessionEvent((raven::RavenEstimator *)(v8 + 544), (const raven::FitnessSessionEvent *)v23);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D222068(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D222084(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8998))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2220C0()
{
  return &unk_1E25B8998;
}

void sub_18D2220D0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2220E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBFF8;
  return result;
}

uint64_t sub_18D22210C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8968))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222148()
{
  return &unk_1E25B8968;
}

void sub_18D222158()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22216C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC050;
  return result;
}

uint64_t sub_18D222194(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8978))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2221D0()
{
  return &unk_1E25B8978;
}

void sub_18D2221E0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2221F4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBEF0;
  return result;
}

void sub_18D222218(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBEF0;
}

void sub_18D22222C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[45];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D211EA4((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = (cnprint::CNPrinter *)raven::RavenPassThroughEstimator::HandleEvent((raven::RavenPassThroughEstimator *)(v8 + 544), (const raven::PositionEvent *)v23);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D222320(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D22233C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8938))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222378()
{
  return &unk_1E25B8938;
}

void sub_18D222388()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22239C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC1B0;
  return result;
}

void sub_18D2223C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC1B0;
}

void sub_18D2223D4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[16];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D211AF8((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandlePositionContextStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::PositionContextStateEvent *)v23);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D2224C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2224E4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B89B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222520()
{
  return &unk_1E25B89B8;
}

void sub_18D222530()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222544()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC158;
  return result;
}

void sub_18D222568(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC158;
}

void sub_18D22257C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[14];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D2125AC((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleSignalEnvironmentEvent((raven::RavenEstimator *)(v8 + 544), (const raven::SignalEnvironmentEvent *)v23);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D222670(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D22268C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B89A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2226C8()
{
  return &unk_1E25B89A8;
}

void sub_18D2226D8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2226EC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBFA0;
  return result;
}

void sub_18D222710(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CBFA0;
}

void sub_18D222724(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[45];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D212DD8((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = (cnprint::CNPrinter *)raven::RavenPassThroughEstimator::HandleEvent((raven::RavenPassThroughEstimator *)(v8 + 544), (const raven::VelocityEvent *)v23);
  if ((_DWORD)v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v28 = 12;
    v27 = 1;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v16 = v24;
    else
      v16 = (void **)v24[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_18D222818(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D222834(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8958))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222870()
{
  return &unk_1E25B8958;
}

void sub_18D222880()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222894()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CBF48;
  return result;
}

uint64_t sub_18D2228BC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8948))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2228F8()
{
  return &unk_1E25B8948;
}

void sub_18D222908()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22291C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC5D0;
  return result;
}

uint64_t sub_18D222944(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A78))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222980()
{
  return &unk_1E25B8A78;
}

void sub_18D222990()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2229A4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC680;
  return result;
}

void sub_18D2229C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC680;
}

uint64_t sub_18D2229DC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A98))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222A18()
{
  return &unk_1E25B8A98;
}

void sub_18D222A28()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222A3C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC730;
  return result;
}

void sub_18D222A60(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC730;
}

void sub_18D222A74(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenPositionContextEstimatorActiveObject *v8;
  _QWORD v9[12];
  uint64_t v10;
  void **v11;

  v8 = *a2;
  sub_18D2109A0((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::GnssPreprocessedMeasurementsEvent *)v9);
  v9[0] = off_1E25C3EC8;
  v11 = (void **)&v10;
  sub_18D07C7AC(&v11);
}

void sub_18D222AD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 96;
  sub_18D07C7AC((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_18D222B00(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8AB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222B3C()
{
  return &unk_1E25B8AB8;
}

void sub_18D222B4C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222B60()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC628;
  return result;
}

uint64_t sub_18D222B88(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A88))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222BC4()
{
  return &unk_1E25B8A88;
}

void sub_18D222BD4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222BE8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC6D8;
  return result;
}

void sub_18D222C0C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC6D8;
}

void sub_18D222C20(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenPositionContextEstimatorActiveObject *v8;
  _BYTE v9[112];

  v8 = *a2;
  sub_18D2125AC((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::SignalEnvironmentEvent *)v9);
}

uint64_t sub_18D222C5C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8AA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222C98()
{
  return &unk_1E25B8AA8;
}

void sub_18D222CA8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222CBC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC578;
  return result;
}

uint64_t sub_18D222CE4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8A68))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222D20()
{
  return &unk_1E25B8A68;
}

void sub_18D222D30()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222D44()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C99D0;
  return result;
}

uint64_t sub_18D222D6C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8278))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222DA8()
{
  return &unk_1E25B8278;
}

void sub_18D222DB8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222DCC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9978;
  return result;
}

void sub_18D222DF0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9978;
}

void sub_18D222E04(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[19];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D20CDC4((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AccelerometerEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D222EEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D222F08(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8268))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D222F44()
{
  return &unk_1E25B8268;
}

void sub_18D222F54()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D222F68()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9C90;
  return result;
}

void sub_18D222F8C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9C90;
}

void sub_18D222FA0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[33];
  void *v24[2];
  char v25;
  _QWORD v26[2];
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  sub_18D20F334((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AccessoryVehicleSpeedEvent *)v23))
  {
    v28 = 12;
    v27 = 2;
    v26[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v26[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0)
      v15 = v24;
    else
      v15 = (void **)v24[0];
    v16 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v23);
}

void sub_18D22308C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2230B8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B82F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2230F4()
{
  return &unk_1E25B82F8;
}

void sub_18D223104()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D223118()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9558;
  return result;
}

void sub_18D22313C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9558;
}

void sub_18D223150(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[15];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D20FCB0((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AltitudeEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D223238(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D223254(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B81A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D223290()
{
  return &unk_1E25B81A8;
}

void sub_18D2232A0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2232B4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9A80;
  return result;
}

void sub_18D2232D8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9A80;
}

void sub_18D2232EC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[27];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D20F8B4((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AltitudeChangeEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D2233D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2233F0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8298))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D22342C()
{
  return &unk_1E25B8298;
}

void sub_18D22343C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D223450()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9AD8;
  return result;
}

void sub_18D223474(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9AD8;
}

void sub_18D223488(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[50];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D21B6B4((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AttitudeChangeEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D223570(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D22358C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B82A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2235C8()
{
  return &unk_1E25B82A8;
}

void sub_18D2235D8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2235EC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C95B0;
  return result;
}

void sub_18D223610(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C95B0;
}

void sub_18D223624(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[28];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D2165EC((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AttitudeEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D22370C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D223728(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B81B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D223764()
{
  return &unk_1E25B81B8;
}

void sub_18D223774()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D223788()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9CE8;
  return result;
}

void sub_18D2237AC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9CE8;
}

void sub_18D2237C0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[8];
  uint64_t v81;
  uint64_t v82;
  char v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  __int16 v88;

  v8 = *a2;
  sub_18D210394((uint64_t)v80, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v83 == *(_BYTE *)(v8 + 600))
  {
    v88 = 12;
    v87 = 3;
    v10 = v81;
    v9 = v82;
    v85 = v81;
    v86 = v82;
    v11 = v84;
    cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "EstimatorErrorRecoveryEvent received, type, %u", v84);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v17) = v8 - 16;
    else
      v17 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v12, v13, v14, v15, v16, v17);
    switch(v11)
    {
      case 1:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::InflateAttitudeUncertainty");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v23) = v8 - 16;
        else
          v23 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v18, v19, v20, v21, v22, v23);
        raven::RavenPNTEstimator::InflateAttitudeUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(_QWORD *)(v8 + 1712) + 1424), 1);
        break;
      case 2:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::InflateInsUncertainty");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v35) = v8 - 16;
        else
          v35 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v30, v31, v32, v33, v34, v35);
        raven::RavenPNTEstimator::InflateInsUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(_QWORD *)(v8 + 1712) + 1432), 1);
        break;
      case 3:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::InflatePositionUncertainty");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v41) = v8 - 16;
        else
          v41 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v36, v37, v38, v39, v40, v41);
        raven::RavenPNTEstimator::InflatePositionUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(_QWORD *)(v8 + 1712) + 1440), 1);
        break;
      case 4:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::InflateVelocityUncertainty");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v47) = v8 - 16;
        else
          v47 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v42, v43, v44, v45, v46, v47);
        raven::RavenPNTEstimator::InflateVelocityUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(_QWORD *)(v8 + 1712) + 1448), 1);
        break;
      case 5:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::InflateXOUncertainty");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v53) = v8 - 16;
        else
          v53 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v48, v49, v50, v51, v52, v53);
        raven::RavenPNTEstimator::InflateXOUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(_QWORD *)(v8 + 1712) + 1456), 1);
        break;
      case 6:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::ResetAO");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v59) = v8 - 16;
        else
          v59 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v54, v55, v56, v57, v58, v59);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
        break;
      case 7:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::ResetEstimator");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v65) = v8 - 16;
        else
          v65 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v60, v61, v62, v63, v64, v65);
        raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)(v8 + 544));
        break;
      case 8:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::ResetInsStates");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v71) = v8 - 16;
        else
          v71 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v66, v67, v68, v69, v70, v71);
        raven::RavenPNTEstimator::ResetInsStates((raven::RavenPNTEstimator *)(v8 + 544), v72, v73);
        break;
      case 9:
        v88 = 12;
        v87 = 3;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Initiating RavenErrorRecoveryAction::ResetXOStates");
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v79) = v8 - 16;
        else
          v79 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v74, v75, v76, v77, v78, v79);
        raven::RavenPNTEstimator::ResetOscillatorStates((raven::RavenPNTEstimator *)(v8 + 544));
        break;
      default:
        v88 = v8 + 544;
        v87 = 4;
        v85 = v10;
        v86 = v9;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v85, "Unhandled RavenErrorRecoveryAction, type, %u", v11);
        if (*(char *)(v8 + 519) >= 0)
          LOBYTE(v29) = v8 - 16;
        else
          v29 = *(_QWORD *)(v8 + 496);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "%s", v24, v25, v26, v27, v28, v29);
        break;
    }
  }
}

uint64_t sub_18D223CF8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8308))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D223D34()
{
  return &unk_1E25B8308;
}

void sub_18D223D44()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D223D58()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9B30;
  return result;
}

void sub_18D223D7C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9B30;
}

void sub_18D223D90(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[26];
  void *v25[2];
  char v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  __int16 v29;

  v8 = *a2;
  sub_18D20E7B0((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = raven::RavenEstimator::HandleFitnessSessionEvent((raven::RavenEstimator *)(v8 + 544), (const raven::FitnessSessionEvent *)v24);
  if (v10)
  {
    v29 = 12;
    v28 = 2;
    v27[0] = (*(uint64_t (**)(_QWORD *, __n128))(v24[0] + 16))(v24, v9);
    v27[1] = v11;
    (*(void (**)(void **__return_ptr, _QWORD *))(v24[0] + 24))(v25, v24);
    if (v26 >= 0)
      v17 = v25;
    else
      v17 = (void **)v25[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v23) = v8 - 16;
    else
      v23 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    if (v26 < 0)
      operator delete(v25[0]);
  }
}

void sub_18D223E78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D223E94(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B82B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D223ED0()
{
  return &unk_1E25B82B8;
}

void sub_18D223EE0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D223EF4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9D98;
  return result;
}

void sub_18D223F18(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9D98;
}

void sub_18D223F2C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void ***v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  void **v25[2];
  char v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  __int16 v29[5];

  v8 = *a2;
  sub_18D2109A0((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::GnssPreprocessedMeasurementsEvent *)v23))
  {
    v29[0] = 12;
    v28 = 2;
    v27[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v27[1] = v9;
    (*(void (**)(void ***__return_ptr, _QWORD *))(v23[0] + 24))(v25, v23);
    if (v26 >= 0)
      v15 = v25;
    else
      v15 = (void ***)v25[0];
    v16 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v29, &v28, "%s", v17, v18, v19, v20, v21, v22);
    if (v26 < 0)
      operator delete(v25[0]);
  }
  v23[0] = off_1E25C3EC8;
  v25[0] = (void **)&v24;
  sub_18D07C7AC(v25);
}

void sub_18D22402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));
  *(_QWORD *)(v23 - 24) = &a23;
  sub_18D07C7AC((void ***)(v23 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_18D224074(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8328))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2240B0()
{
  return &unk_1E25B8328;
}

void sub_18D2240C0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2240D4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9D40;
  return result;
}

void sub_18D2240F8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9D40;
}

void sub_18D22410C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (**v47)(raven::HorizontalDOTInIMUFrameEvent *__hidden);
  void *v48;
  __int128 v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE v52[168];
  void *v53;
  __int128 v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  std::bad_cast v61;
  char v62;
  _QWORD v63[2];
  unsigned __int8 v64;
  __int16 v65;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven28HorizontalDOTInIMUFrameEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven28HorizontalDOTInIMUFrameEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v61.__vftable = 0;
      std::bad_cast::bad_cast(&v61);
      v61.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = (_OWORD *)*((_QWORD *)this + 2);
    v47 = &off_1E25C37C0;
    sub_18D159B20((uint64_t)&v48, (uint64_t)(v27 + 1));
    v28 = v27[8];
    *(_OWORD *)&v52[88] = v27[9];
    *(_OWORD *)&v52[72] = v28;
    v29 = v27[10];
    v30 = v27[11];
    v31 = v27[12];
    *(_OWORD *)&v52[152] = v27[13];
    *(_OWORD *)&v52[136] = v31;
    *(_OWORD *)&v52[120] = v30;
    *(_OWORD *)&v52[104] = v29;
    sub_18D04DA0C((uint64_t)&v53, (uint64_t)(v27 + 14));
    v59 = 0u;
    v60 = 0u;
    if (&v59 != v27 + 18)
    {
      v32 = v27[19];
      v59 = v27[18];
      v60 = v32;
    }
  }
  else
  {
    LOWORD(v61.__vftable) = 3;
    LOBYTE(v63[0]) = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v61, (unsigned __int8 *)v63, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    memset(v52, 0, 160);
    v57 = 0u;
    v50 = 0x300000003;
    v49 = xmmword_18D30BB60;
    v55 = 0x100000003;
    v47 = &off_1E25C37C0;
    v48 = &unk_1E25C78E0;
    v51 = v52;
    *(_QWORD *)&v52[160] = 0x7FF8000000000000;
    v53 = &unk_1E25C7790;
    v54 = xmmword_18D313070;
    v56 = &v57;
    v58 = 0;
    v59 = 0uLL;
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = 0x3FF0000000000000;
  }
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v9 + 544), (const raven::HorizontalDOTInIMUFrameEvent *)&v47))
  {
    v65 = 12;
    v64 = 2;
    v63[0] = ((uint64_t (*)(_QWORD))v47[2])(&v47);
    v63[1] = v33;
    ((void (*)(std::bad_cast *__return_ptr, void (***)(raven::HorizontalDOTInIMUFrameEvent *__hidden)))v47[3])(&v61, &v47);
    if (v62 >= 0)
      v39 = &v61;
    else
      v39 = v61.__vftable;
    v40 = cnprint::CNLogFormatter::FormatWarning(v9 + 496, (uint64_t)v63, "Failed to handle event - %s.", v34, v35, v36, v37, v38, (uint64_t)v39);
    if (*(char *)(v9 + 519) >= 0)
      LOBYTE(v46) = v40;
    else
      v46 = *(_QWORD *)(v9 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, &v64, "%s", v41, v42, v43, v44, v45, v46);
    if (v62 < 0)
      operator delete(v61.__vftable);
  }
}

void sub_18D22440C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_18D224440(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8318))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D22447C()
{
  return &unk_1E25B8318;
}

void sub_18D22448C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2244A0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9768;
  return result;
}

void sub_18D2244C4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9768;
}

void sub_18D2244D8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[35];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D210D5C((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::MapVectorEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D2245C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2245DC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8208))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D224618()
{
  return &unk_1E25B8208;
}

void sub_18D224628()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22463C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9870;
  return result;
}

uint64_t sub_18D224664(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8238))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2246A0()
{
  return &unk_1E25B8238;
}

void sub_18D2246B0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2246C4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C98C8;
  return result;
}

uint64_t sub_18D2246EC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8248))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D224728()
{
  return &unk_1E25B8248;
}

void sub_18D224738()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22474C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9DF0;
  return result;
}

void sub_18D224770(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9DF0;
}

void sub_18D224784(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[17];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D21D484((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::NonHolonomicVelocityConstraintEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D22486C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D224888(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8338))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2248C4()
{
  return &unk_1E25B8338;
}

void sub_18D2248D4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2248E8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9B88;
  return result;
}

void sub_18D22490C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9B88;
}

void sub_18D224920(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[47];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D21164C((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::PositionChangeEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D224A08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D224A24(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B82C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D224A60()
{
  return &unk_1E25B82C8;
}

void sub_18D224A70()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D224A84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9C38;
  return result;
}

void sub_18D224AA8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9C38;
}

void sub_18D224ABC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[16];
  void *v25[2];
  char v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  __int16 v29;

  v8 = *a2;
  sub_18D211AF8((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = raven::RavenEstimator::HandlePositionContextStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::PositionContextStateEvent *)v24);
  if (v10)
  {
    v29 = 12;
    v28 = 2;
    v27[0] = (*(uint64_t (**)(_QWORD *, __n128))(v24[0] + 16))(v24, v9);
    v27[1] = v11;
    (*(void (**)(void **__return_ptr, _QWORD *))(v24[0] + 24))(v25, v24);
    if (v26 >= 0)
      v17 = v25;
    else
      v17 = (void **)v25[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v23) = v8 - 16;
    else
      v23 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    if (v26 < 0)
      operator delete(v25[0]);
  }
}

void sub_18D224BA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D224BC0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B82E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D224BFC()
{
  return &unk_1E25B82E8;
}

void sub_18D224C0C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D224C20()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9608;
  return result;
}

void sub_18D224C44(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9608;
}

void sub_18D224C58(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[45];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D211EA4((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::PositionEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D224D40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D224D5C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B81C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D224D98()
{
  return &unk_1E25B81C8;
}

void sub_18D224DA8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D224DBC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9660;
  return result;
}

void sub_18D224DE0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9660;
}

void sub_18D224DF4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[19];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D20DF68((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::RateGyroEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D224EDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D224EF8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B81D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D224F34()
{
  return &unk_1E25B81D8;
}

void sub_18D224F44()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D224F58()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9A28;
  return result;
}

uint64_t sub_18D224F80(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8288))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D224FBC()
{
  return &unk_1E25B8288;
}

void sub_18D224FCC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D224FE0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9920;
  return result;
}

void sub_18D225004(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9920;
}

void sub_18D225018(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[13];
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int16 v29;

  v8 = *a2;
  sub_18D20E20C((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!cnprint::CNPrinter::GetLogLevel(v9))
  {
    v29 = 12;
    v28 = 0;
    v26 = (*(uint64_t (**)(_QWORD *))(v24[0] + 16))(v24);
    v27 = v10;
    cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v26, "RavenSystemEvent received");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v16) = v8 - 16;
    else
      v16 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v11, v12, v13, v14, v15, v16);
  }
  if (!v25)
  {
    v29 = 12;
    v28 = 4;
    v26 = (*(uint64_t (**)(_QWORD *))(v24[0] + 16))(v24);
    v27 = v17;
    cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v26, "Resetting estimator based on system event");
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v23) = v8 - 16;
    else
      v23 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  }
}

uint64_t sub_18D22512C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8258))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D225168()
{
  return &unk_1E25B8258;
}

void sub_18D225178()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22518C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9BE0;
  return result;
}

void sub_18D2251B0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9BE0;
}

void sub_18D2251C4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[14];
  void *v25[2];
  char v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  __int16 v29;

  v8 = *a2;
  sub_18D2125AC((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v9 = raven::RavenEstimator::HandleSignalEnvironmentEvent((raven::RavenEstimator *)(v8 + 544), (const raven::SignalEnvironmentEvent *)v24);
  if (v10)
  {
    v29 = 12;
    v28 = 2;
    v27[0] = (*(uint64_t (**)(_QWORD *, __n128))(v24[0] + 16))(v24, v9);
    v27[1] = v11;
    (*(void (**)(void **__return_ptr, _QWORD *))(v24[0] + 24))(v25, v24);
    if (v26 >= 0)
      v17 = v25;
    else
      v17 = (void **)v25[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v23) = v8 - 16;
    else
      v23 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    if (v26 < 0)
      operator delete(v25[0]);
  }
}

void sub_18D2252AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2252C8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B82D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D225304()
{
  return &unk_1E25B82D8;
}

void sub_18D225314()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D225328()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C96B8;
  return result;
}

uint64_t sub_18D225350(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B81E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D22538C()
{
  return &unk_1E25B81E8;
}

void sub_18D22539C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2253B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C97C0;
  return result;
}

void sub_18D2253D4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C97C0;
}

void sub_18D2253E8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t);
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  std::bad_cast v59;
  char v60;
  _QWORD v61[2];
  unsigned __int8 v62;
  __int16 v63;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven14TurnStateEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven14TurnStateEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v59.__vftable = 0;
      std::bad_cast::bad_cast(&v59);
      v59.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v49 = (uint64_t (**)(uint64_t))&unk_1E25C2408;
    v50 = *(_OWORD *)(v27 + 16);
    v28 = *(_OWORD *)(v27 + 64);
    v29 = *(_OWORD *)(v27 + 80);
    v30 = *(_OWORD *)(v27 + 48);
    v51 = *(_OWORD *)(v27 + 32);
    v54 = v29;
    v53 = v28;
    v52 = v30;
    v31 = *(_OWORD *)(v27 + 96);
    v32 = *(_OWORD *)(v27 + 112);
    v33 = *(_OWORD *)(v27 + 128);
    v58 = *(_QWORD *)(v27 + 144);
    v57 = v33;
    v56 = v32;
    v55 = v31;
  }
  else
  {
    LOWORD(v59.__vftable) = 3;
    LOBYTE(v61[0]) = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)v61, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v51 = 0uLL;
    v54 = 0uLL;
    v50 = 0uLL;
    v49 = (uint64_t (**)(uint64_t))&unk_1E25C2408;
    v52 = 0uLL;
    v53 = 0uLL;
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = 0x7FF8000000000000;
    *(_QWORD *)&v56 = 0;
    *((_QWORD *)&v56 + 1) = 0x3FF0000000000000;
    v57 = 0uLL;
    v58 = 0x7FF0000000000000;
  }
  raven::RavenEstimator::HandleTurnStateEvent((raven::RavenEstimator *)(v9 + 544), (const raven::TurnStateEvent *)&v49);
  if (v34)
  {
    v63 = 12;
    v62 = 2;
    v61[0] = v49[2]((uint64_t)&v49);
    v61[1] = v35;
    ((void (*)(_QWORD *@<X8>))v49[3])(&v59);
    if (v60 >= 0)
      v41 = &v59;
    else
      v41 = v59.__vftable;
    v42 = cnprint::CNLogFormatter::FormatWarning(v9 + 496, (uint64_t)v61, "Failed to handle event - %s.", v36, v37, v38, v39, v40, (uint64_t)v41);
    if (*(char *)(v9 + 519) >= 0)
      LOBYTE(v48) = v42;
    else
      v48 = *(_QWORD *)(v9 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, &v62, "%s", v43, v44, v45, v46, v47, v48);
    if (v60 < 0)
      operator delete(v59.__vftable);
  }
}

void sub_18D225630(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_18D225664(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8218))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2256A0()
{
  return &unk_1E25B8218;
}

void sub_18D2256B0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2256C4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9818;
  return result;
}

void sub_18D2256E8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9818;
}

void sub_18D2256FC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[15];
  void *v23[2];
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v8 = *a2;
  sub_18D212A38((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::UserSpeedEvent *)v22))
  {
    v27 = 12;
    v26 = 2;
    v25[0] = (*(uint64_t (**)(_QWORD *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, _QWORD *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0)
      v15 = v23;
    else
      v15 = (void **)v23[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v21) = v8 - 16;
    else
      v21 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_18D2257E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D225800(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8228))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D22583C()
{
  return &unk_1E25B8228;
}

void sub_18D22584C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D225860()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9710;
  return result;
}

void sub_18D225884(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9710;
}

void sub_18D225898(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[35];
  char v24;
  void *v25[2];
  char v26;
  _QWORD v27[2];
  unsigned __int8 v28;
  __int16 v29;

  v8 = *a2;
  sub_18D212DD8((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(v8 + 601)
    || (*(_BYTE *)(v8 + 602) ? (v9 = v24 == 0) : (v9 = 1),
        !v9
     && raven::RavenPNTEstimator::AddDeviceVelocityMeasurement((raven::RavenPNTEstimator *)(v8 + 544), (const raven::VelocityEvent *)v23)))
  {
    v29 = 12;
    v28 = 2;
    v27[0] = (*(uint64_t (**)(_QWORD *))(v23[0] + 16))(v23);
    v27[1] = v10;
    (*(void (**)(void **__return_ptr, _QWORD *))(v23[0] + 24))(v25, v23);
    if (v26 >= 0)
      v16 = v25;
    else
      v16 = (void **)v25[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0)
      LOBYTE(v22) = v8 - 16;
    else
      v22 = *(_QWORD *)(v8 + 496);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v17, v18, v19, v20, v21, v22);
    if (v26 < 0)
      operator delete(v25[0]);
  }
}

void sub_18D22599C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2259B8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B81F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2259F4()
{
  return &unk_1E25B81F8;
}

void sub_18D225A04()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D225A18()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA8F0;
  return result;
}

void sub_18D225A3C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA8F0;
}

void sub_18D225A50(int a1, raven::RavenPressurePrefilterActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenPressurePrefilterActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::bad_cast v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[48];
  unsigned __int8 v41;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven14BarometerEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven14BarometerEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v34.__vftable = 0;
      std::bad_cast::bad_cast(&v34);
      v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = (_OWORD *)*((_QWORD *)this + 2);
    v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C22A8;
    v28 = v27[3];
    v29 = v27[4];
    v30 = v27[2];
    v35 = v27[1];
    v38 = v29;
    v37 = v28;
    v36 = v30;
    v32 = v27[6];
    v31 = v27[7];
    v33 = *(_OWORD *)((char *)v27 + 122);
    v39 = v27[5];
    *(_OWORD *)&v40[26] = v33;
    *(_OWORD *)&v40[16] = v31;
    *(_OWORD *)v40 = v32;
  }
  else
  {
    LOWORD(v34.__vftable) = 3;
    v41 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v41, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v36 = 0uLL;
    v39 = 0uLL;
    *(_QWORD *)&v40[24] = 0;
    v35 = 0uLL;
    v34.__vftable = (std::bad_cast_vtbl *)&unk_1E25C22A8;
    v37 = 0uLL;
    v38 = 0uLL;
    *(_QWORD *)v40 = 0;
    *(int64x2_t *)&v40[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v40[32] = 0x7FF8000000000000uLL;
  }
  raven::RavenPressurePrefilterActiveObject::HandleEvent(v9, (const raven::BarometerEvent *)&v34);
}

void sub_18D225BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  std::exception::~exception(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_18D225C08(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8538))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D225C44()
{
  return &unk_1E25B8538;
}

void sub_18D225C54()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D225C68()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9348;
  return result;
}

void sub_18D225C8C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9348;
}

double sub_18D225CA4(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenRayTracingActiveObject *v8;
  double result;
  _BYTE v10[192];

  v8 = *a2;
  sub_18D06632C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)&result = raven::RavenRayTracingActiveObject::HandleEvent(v8, (const raven::ActivityStateEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18D225CE0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8148))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D225D1C()
{
  return &unk_1E25B8148;
}

void sub_18D225D2C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D225D40()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C94A8;
  return result;
}

void sub_18D225D64(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C94A8;
}

void sub_18D225D7C(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenRayTracingActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void (**v38)(raven::GEOMapBuildingDataEvent *__hidden);
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  _QWORD **v49;
  _QWORD *v50[2];
  unsigned __int8 v51;
  std::bad_cast v52;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v32 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v32 != (const char *)((unint64_t)"N5raven23GEOMapBuildingDataEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v32, (const char *)((unint64_t)"N5raven23GEOMapBuildingDataEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v52.__vftable = 0;
      std::bad_cast::bad_cast(&v52);
      v52.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v33 = *((_QWORD *)this + 2);
    v38 = &off_1E25C3020;
    v34 = *(_OWORD *)(v33 + 32);
    v39 = *(_OWORD *)(v33 + 16);
    v40 = v34;
    v35 = *(_OWORD *)(v33 + 48);
    v36 = *(_OWORD *)(v33 + 64);
    v37 = *(_OWORD *)(v33 + 96);
    v43 = *(_OWORD *)(v33 + 80);
    v44 = v37;
    v41 = v35;
    v42 = v36;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    sub_18D22600C((uint64_t)&v45, *(_QWORD *)(v33 + 112), *(_QWORD *)(v33 + 120), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v33 + 120) - *(_QWORD *)(v33 + 112)) >> 3));
    v48 = *(int64x2_t *)(v33 + 136);
    sub_18D2264B8((uint64_t)&v49, (_QWORD *)(v33 + 152));
  }
  else
  {
    LOWORD(v52.__vftable) = 3;
    v51 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v40 = 0uLL;
    v39 = 0uLL;
    v38 = &off_1E25C3020;
    v41 = 0uLL;
    v42 = 0uLL;
    v43 = 0uLL;
    *(_QWORD *)&v44 = 0;
    *((_QWORD *)&v44 + 1) = 0x7FF8000000000000;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = vdupq_n_s64(0x7FF8000000000000uLL);
    v50[0] = 0;
    v50[1] = 0;
    v49 = v50;
  }
  raven::RavenRayTracingActiveObject::HandleEvent(v9, (const raven::GEOMapBuildingDataEvent *)&v38, v26, v27, v28, v29, v30, v31);
  v38 = &off_1E25C3020;
  sub_18D03D9B4((uint64_t)&v49, v50[0]);
  v52.__vftable = (std::bad_cast_vtbl *)&v45;
  sub_18D226440((void ***)&v52);
}

void sub_18D225F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_18D225FC4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8188))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226000()
{
  return &unk_1E25B8188;
}

uint64_t sub_18D22600C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  const void *v15;
  char *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD v25[3];
  char v26;
  _QWORD *v27;
  _QWORD v28[2];
  char v29;
  _QWORD v30[3];
  char v31;
  char *v32;
  char *v33;

  if (a4)
  {
    v4 = (_QWORD *)result;
    if (a4 >= 0x666666666666667)
      sub_18D07AFE4();
    v6 = sub_18D184D30(result + 16, a4);
    *v4 = v6;
    v4[1] = v6;
    v4[2] = &v6[5 * v7];
    v27 = v6;
    v28[0] = v6;
    v25[0] = v4 + 2;
    v25[1] = &v27;
    v25[2] = v28;
    v26 = 0;
    if (a2 != a3)
    {
      v23 = v4;
      do
      {
        *(_OWORD *)v6 = *(_OWORD *)a2;
        v6[2] = 0;
        v6[3] = 0;
        v6[4] = 0;
        v8 = *(_QWORD *)(a2 + 16);
        v9 = *(_QWORD *)(a2 + 24);
        v28[1] = v6 + 2;
        v29 = 0;
        if (v9 != v8)
        {
          v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 4);
          if (v10 >= 0x333333333333334)
            sub_18D07AFE4();
          v11 = (char *)sub_18D226298((uint64_t)(v6 + 4), v10);
          v6[2] = v11;
          v6[3] = v11;
          v6[4] = &v11[80 * v12];
          v32 = v11;
          v33 = v11;
          v30[0] = v6 + 4;
          v30[1] = &v32;
          v30[2] = &v33;
          v31 = 0;
          v13 = v11;
          do
          {
            *(_QWORD *)v13 = 0;
            *((_QWORD *)v13 + 1) = 0;
            *((_QWORD *)v13 + 2) = 0;
            v15 = *(const void **)v8;
            v14 = *(_QWORD *)(v8 + 8);
            v16 = v13;
            v17 = v14 - *(_QWORD *)v8;
            if (v14 != *(_QWORD *)v8)
            {
              if (v17 < 0)
                sub_18D07AFE4();
              v18 = (char *)sub_18D16735C((uint64_t)(v13 + 16), v17 >> 4);
              *(_QWORD *)v13 = v18;
              *((_QWORD *)v13 + 1) = v18;
              *((_QWORD *)v13 + 2) = &v18[16 * v19];
              memmove(v18, v15, v17);
              *((_QWORD *)v13 + 1) = &v18[16 * (v17 >> 4)];
              v16 = v33;
            }
            v20 = *(_OWORD *)(v8 + 24);
            v21 = *(_OWORD *)(v8 + 40);
            v22 = *(_OWORD *)(v8 + 56);
            *((_QWORD *)v13 + 9) = *(_QWORD *)(v8 + 72);
            *(_OWORD *)(v13 + 56) = v22;
            *(_OWORD *)(v13 + 40) = v21;
            *(_OWORD *)(v13 + 24) = v20;
            v13 = v16 + 80;
            v33 = v16 + 80;
            v8 += 80;
          }
          while (v8 != v9);
          v31 = 1;
          sub_18D2262DC((uint64_t)v30);
          v6[3] = v13;
          v6 = (_QWORD *)v28[0];
        }
        a2 += 40;
        v6 += 5;
        v28[0] = v6;
      }
      while (a2 != a3);
      v4 = v23;
    }
    v26 = 1;
    result = sub_18D2263D4((uint64_t)v25);
    v4[1] = v6;
  }
  return result;
}

void sub_18D226238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18D226440((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_18D226298(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    sub_18D0788A0();
  return operator new(80 * a2);
}

uint64_t sub_18D2262DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 80);
        v4 -= 80;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v3 - 72) = v5;
          operator delete(v5);
        }
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

void sub_18D226340(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18D226380((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_18D226380(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 80);
      v4 -= 80;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 72) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_18D2263D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        v4 = v3 - 40;
        v6 = (void **)(v3 - 24);
        sub_18D226340(&v6);
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

void sub_18D226440(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        v7 = (void **)(v4 - 24);
        sub_18D226340(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_18D2264B8(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v8 = v5[4];
      v9 = v3;
      if (v7 == v3)
        goto LABEL_9;
      v10 = v6;
      v11 = v3;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (v9[4] < v8)
      {
LABEL_9:
        if (v6)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v3;
        if (v6)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v3;
        if (!*v14)
        {
LABEL_25:
          v17 = (uint64_t *)operator new(0x28uLL);
          v17[4] = v8;
          sub_18D185958((uint64_t **)a1, (uint64_t)v13, v14, v17);
        }
      }
      else
      {
        v14 = (uint64_t **)v3;
        v13 = (uint64_t **)v3;
        if (!v6)
          goto LABEL_25;
        v15 = v6;
        while (1)
        {
          while (1)
          {
            v13 = (uint64_t **)v15;
            v16 = v15[4];
            if (v16 <= v8)
              break;
            v15 = *v13;
            v14 = v13;
            if (!*v13)
              goto LABEL_25;
          }
          if (v16 >= v8)
            break;
          v15 = v13[1];
          if (!v15)
          {
            v14 = v13 + 1;
            goto LABEL_25;
          }
        }
      }
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v12 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v12);
      }
      if (v19 == v4)
        return a1;
      v7 = *(uint64_t **)a1;
      v6 = *(uint64_t **)(a1 + 8);
      v5 = v19;
    }
  }
  return a1;
}

void sub_18D226620(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_18D03D9B4(v1, v2);
  _Unwind_Resume(a1);
}

void sub_18D22663C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226650()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9500;
  return result;
}

void sub_18D226674(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9500;
}

void sub_18D22668C(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenRayTracingActiveObject *v8;
  _QWORD v9[12];
  uint64_t v10;
  void **v11;

  v8 = *a2;
  sub_18D2109A0((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenRayTracingActiveObject::HandleEvent(v8, (const raven::GnssPreprocessedMeasurementsEvent *)v9);
  v9[0] = off_1E25C3EC8;
  v11 = (void **)&v10;
  sub_18D07C7AC(&v11);
}

void sub_18D2266EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 96;
  sub_18D07C7AC((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_18D226718(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8198))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226754()
{
  return &unk_1E25B8198;
}

void sub_18D226764()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226778()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C93A0;
  return result;
}

void sub_18D22679C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C93A0;
}

double sub_18D2267B4(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenRayTracingActiveObject *v8;
  _QWORD v10[304];

  v8 = *a2;
  sub_18D0408A8(v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenRayTracingActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v10);
}

uint64_t sub_18D2267F0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8158))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D22682C()
{
  return &unk_1E25B8158;
}

void sub_18D22683C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226850()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C92F0;
  return result;
}

void sub_18D226874(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C92F0;
}

void sub_18D22688C(int a1, int64x2_t **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64x2_t *v8;
  _DWORD v9[28];

  v8 = *a2;
  sub_18D20E20C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v9[26])
    raven::RavenRayTracingActiveObject::Reset(v8);
}

uint64_t sub_18D2268D8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8138))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226914()
{
  return &unk_1E25B8138;
}

void sub_18D226924()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226938()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C93F8;
  return result;
}

void sub_18D22695C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C93F8;
}

void sub_18D226974(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenRayTracingActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void (**v33)(raven::RayTracingTileEvent *__hidden);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 __p;
  uint64_t v41;
  unsigned __int8 v42;
  std::bad_cast v43;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N5raven19RayTracingTileEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N5raven19RayTracingTileEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v43.__vftable = 0;
      std::bad_cast::bad_cast(&v43);
      v43.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v33 = off_1E25C2C68;
    v28 = *(_OWORD *)(v27 + 32);
    v34 = *(_OWORD *)(v27 + 16);
    v35 = v28;
    v29 = *(_OWORD *)(v27 + 80);
    v30 = *(_OWORD *)(v27 + 96);
    v31 = *(_OWORD *)(v27 + 64);
    v36 = *(_OWORD *)(v27 + 48);
    v39 = v30;
    v38 = v29;
    v37 = v31;
    if (*(char *)(v27 + 135) < 0)
    {
      sub_18D077798(&__p, *(void **)(v27 + 112), *(_QWORD *)(v27 + 120));
    }
    else
    {
      v32 = *(_OWORD *)(v27 + 112);
      v41 = *(_QWORD *)(v27 + 128);
      __p = v32;
    }
  }
  else
  {
    LOWORD(v43.__vftable) = 3;
    v42 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, &v42, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v35 = 0uLL;
    v34 = 0uLL;
    v33 = off_1E25C2C68;
    v36 = 0uLL;
    v37 = 0uLL;
    v38 = 0uLL;
    *(_QWORD *)&v39 = 0;
    *((_QWORD *)&v39 + 1) = 0x7FF8000000000000;
    __p = 0uLL;
    v41 = 0;
  }
  raven::RavenRayTracingActiveObject::HandleEvent(v9, (const raven::RayTracingTileEvent *)&v33);
  v33 = off_1E25C2C68;
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__p);
}

void sub_18D226B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::exception::~exception((std::exception *)(v29 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18D226B6C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8168))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226BA8()
{
  return &unk_1E25B8168;
}

void sub_18D226BB8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226BCC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9450;
  return result;
}

void sub_18D226BF0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9450;
}

double sub_18D226C08(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenRayTracingActiveObject *v8;
  double result;
  _BYTE v10[112];

  v8 = *a2;
  sub_18D2125AC((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)&result = raven::RavenRayTracingActiveObject::HandleEvent(v8, (const raven::SignalEnvironmentEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18D226C44(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8178))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226C80()
{
  return &unk_1E25B8178;
}

void sub_18D226C90()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226CA4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA9A0;
  return result;
}

void sub_18D226CC8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA9A0;
}

void sub_18D226CDC(int a1, raven::RavenSignalEnvironmentActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenSignalEnvironmentActiveObject *v8;
  _BYTE v9[112];

  v8 = *a2;
  sub_18D2125AC((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSignalEnvironmentActiveObject::HandleEvent(v8, (const raven::SignalEnvironmentEvent *)v9);
}

uint64_t sub_18D226D18(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8558))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226D54()
{
  return &unk_1E25B8558;
}

void sub_18D226D64()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226D78()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA948;
  return result;
}

void sub_18D226D9C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA948;
}

uint64_t sub_18D226DB0(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8548))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226DEC()
{
  return &unk_1E25B8548;
}

void sub_18D226DFC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226E10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8DC8;
  return result;
}

uint64_t sub_18D226E38(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8048))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226E74()
{
  return &unk_1E25B8048;
}

void sub_18D226E84()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226E98()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8D70;
  return result;
}

void sub_18D226EBC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8D70;
}

void sub_18D226ED0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  _DWORD v10[28];

  v8 = *a2;
  v9 = sub_18D20E20C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26])
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 48))(v8, v9);
}

uint64_t sub_18D226F24(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8038))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226F60()
{
  return &unk_1E25B8038;
}

void sub_18D226F70()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D226F84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8D18;
  return result;
}

uint64_t sub_18D226FAC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8028))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D226FE8()
{
  return &unk_1E25B8028;
}

void sub_18D226FF8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22700C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8E78;
  return result;
}

void sub_18D227030(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8E78;
}

void sub_18D227044(int a1, cnlogging::ProtobufOutputStream ***a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnlogging::ProtobufOutputStream **v8;
  _BYTE v9[832];

  v8 = *a2;
  sub_18D218E8C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSolutionActiveObject::WriteReceiverDifferentialCodeBiasesToProtobuf(v8, (const raven::ReceiverDifferentialCodeBiasesEvent *)v9);
}

uint64_t sub_18D227080(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8068))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2270BC()
{
  return &unk_1E25B8068;
}

void sub_18D2270CC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2270E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8E20;
  return result;
}

void sub_18D227104(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8E20;
}

void sub_18D227118(int a1, raven::RavenSolutionActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenSolutionActiveObject *v8;
  _BYTE v9[832];

  v8 = *a2;
  sub_18D2194A0((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSolutionActiveObject::WriteThinShellIonosphereParametersToProtobuf(v8, (const raven::ThinShellIonosphereParametersEvent *)v9);
}

uint64_t sub_18D227154(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8058))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D227190()
{
  return &unk_1E25B8058;
}

void sub_18D2271A0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2271B4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC260;
  return result;
}

void sub_18D2271D8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC260;
}

void sub_18D2271EC(int a1, _QWORD *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *__p[2];
  char v35;
  unsigned __int8 v36;
  __int16 v37;

  v9 = (_BYTE *)*a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v27 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)"N5raven16BodyMetricsEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)"N5raven16BodyMetricsEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      __p[0] = 0;
      std::bad_cast::bad_cast((std::bad_cast *)__p);
      __p[0] = &unk_1E25C1410;
      sub_18D20CF7C();
    }
    v26 = *(_BYTE *)(*((_QWORD *)this + 2) + 112);
  }
  else
  {
    LOWORD(__p[0]) = 3;
    LOBYTE(v37) = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v26 = 0;
  }
  if (v9[1976])
  {
    v9[480] = v26;
  }
  else
  {
    v37 = 12;
    v36 = 2;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)v9 + 16))(__p, v9);
    if (v35 >= 0)
      v33 = __p;
    else
      LOBYTE(v33) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "Warning: %s Active Object not configured", v28, v29, v30, v31, v32, (char)v33);
    if (v35 < 0)
      operator delete(__p[0]);
  }
}

void sub_18D22735C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::exception::~exception(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_18D227388(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B89D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2273C4()
{
  return &unk_1E25B89D8;
}

void sub_18D2273D4()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2273E8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC208;
  return result;
}

void sub_18D22740C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC208;
}

void sub_18D227424(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  _BYTE v15[8];
  _BYTE v16[352];
  void *v17[2];
  char v18;
  unsigned __int8 v19;
  __int16 v20;

  v8 = *a2;
  sub_18D211EA4((uint64_t)v15, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 1976))
  {
    if (*(_BYTE *)(v8 + 904))
    {
      memcpy((void *)(v8 + 552), v16, 0x160uLL);
    }
    else
    {
      *(_QWORD *)(v8 + 544) = &unk_1E25C21B8;
      memcpy((void *)(v8 + 552), v16, 0x160uLL);
      *(_BYTE *)(v8 + 904) = 1;
    }
  }
  else
  {
    v20 = 12;
    v19 = 2;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v8 + 16))(v17, v8);
    if (v18 >= 0)
      v14 = v17;
    else
      LOBYTE(v14) = v17[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "Warning: %s Active Object not configured", v9, v10, v11, v12, v13, (char)v14);
    if (v18 < 0)
      operator delete(v17[0]);
  }
}

void sub_18D227514(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D227530(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B89C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D22756C()
{
  return &unk_1E25B89C8;
}

void sub_18D22757C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227590()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC2B8;
  return result;
}

uint64_t sub_18D2275B8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B89E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2275F4()
{
  return &unk_1E25B89E8;
}

void sub_18D227604()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227618()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC310;
  return result;
}

void sub_18D22763C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC310;
}

double sub_18D227650(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __n128 v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  void *v25[2];
  char v26;
  unsigned __int8 v27;
  __int16 v28;

  v8 = *a2;
  v9 = sub_18D2125AC((uint64_t)v17, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v8 + 1976))
  {
    if (*(_BYTE *)(v8 + 1856))
    {
      *(_OWORD *)(v8 + 1920) = v21;
      *(_OWORD *)(v8 + 1936) = v22;
      *(_OWORD *)(v8 + 1952) = v23;
      *(_BYTE *)(v8 + 1968) = v24;
      *(_OWORD *)(v8 + 1872) = v18;
      *(_OWORD *)(v8 + 1888) = v19;
      result = *(double *)&v20;
      *(_OWORD *)(v8 + 1904) = v20;
    }
    else
    {
      *(_QWORD *)(v8 + 1864) = &unk_1E25C2FC8;
      *(_OWORD *)(v8 + 1920) = v21;
      *(_OWORD *)(v8 + 1936) = v22;
      *(_OWORD *)(v8 + 1952) = v23;
      *(_BYTE *)(v8 + 1968) = v24;
      *(_OWORD *)(v8 + 1872) = v18;
      *(_OWORD *)(v8 + 1888) = v19;
      result = *(double *)&v20;
      *(_OWORD *)(v8 + 1904) = v20;
      *(_BYTE *)(v8 + 1856) = 1;
    }
  }
  else
  {
    v28 = 12;
    v27 = 2;
    (*(void (**)(void **__return_ptr, uint64_t, __n128))(*(_QWORD *)v8 + 16))(v25, v8, v9);
    if (v26 >= 0)
      v16 = v25;
    else
      LOBYTE(v16) = v25[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s Active Object not configured", v11, v12, v13, v14, v15, (char)v16);
    if (v26 < 0)
      operator delete(v25[0]);
  }
  return result;
}

void sub_18D227780(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 25) < 0)
    operator delete(*(void **)(v1 - 48));
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D22779C(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B89F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2277D8()
{
  return &unk_1E25B89F8;
}

void sub_18D2277E8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2277FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA840;
  return result;
}

uint64_t sub_18D227824(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8518))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D227860()
{
  return &unk_1E25B8518;
}

void sub_18D227870()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227884()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA898;
  return result;
}

void sub_18D2278A8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA898;
}

double sub_18D2278BC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double result;
  _BYTE v10[232];

  v8 = *a2;
  sub_18D21EEB4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_QWORD *)&result = raven::RavenSolutionSelector::HandleEvent(v8 + 480, (uint64_t)v10).n128_u64[0];
  return result;
}

uint64_t sub_18D2278F8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8528))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D227934()
{
  return &unk_1E25B8528;
}

void sub_18D227944()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227958()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8BB8;
  return result;
}

uint64_t sub_18D227980(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B7FE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2279BC()
{
  return &unk_1E25B7FE8;
}

__n128 sub_18D2279CC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1600;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2218;
  v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v3;
  v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v4;
  result = *(__n128 *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v6;
  return result;
}

void sub_18D227A34()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227A48()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8CC0;
  return result;
}

uint64_t sub_18D227A70(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8018))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D227AAC()
{
  return &unk_1E25B8018;
}

void sub_18D227ABC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227AD0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8C10;
  return result;
}

void sub_18D227AF4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8C10;
}

void sub_18D227B08(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  BOOL v10;
  double v12;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _BYTE v19[8];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned __int8 v26;

  v8 = *a2;
  sub_18D211EA4((uint64_t)v19, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((v26 | 8) == 9 && (_BYTE)v21)
  {
    v9 = fabs(*(double *)&v22 + (double)*((uint64_t *)&v21 + 1));
    v10 = (unint64_t)(*(_QWORD *)&v9 - 0x10000000000000) >> 53 > 0x3FE
       && (unint64_t)(*(_QWORD *)&v9 - 1) > 0xFFFFFFFFFFFFELL;
    if (!v10 || COERCE__INT64(*(double *)&v22 + (double)*((uint64_t *)&v21 + 1)) == 0)
    {
      v12 = fabs(*((double *)&v20 + 1) + (double)(uint64_t)v20);
      if ((unint64_t)(*(_QWORD *)&v12 - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(_QWORD *)&v12 - 1) <= 0xFFFFFFFFFFFFELL
        || COERCE__INT64(*((double *)&v20 + 1) + (double)(uint64_t)v20) == 0)
      {
        v15 = v23;
        *(_OWORD *)(v8 + 520) = v22;
        *(_OWORD *)(v8 + 536) = v15;
        v16 = v25;
        *(_OWORD *)(v8 + 552) = v24;
        *(_OWORD *)(v8 + 568) = v16;
        v17 = v21;
        *(_OWORD *)(v8 + 488) = v20;
        v18 = *(unsigned __int8 *)(v8 + 480);
        *(_OWORD *)(v8 + 504) = v17;
        if (!v18)
          *(_BYTE *)(v8 + 480) = 1;
      }
    }
  }
}

uint64_t sub_18D227C00(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B7FF8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D227C3C()
{
  return &unk_1E25B7FF8;
}

void sub_18D227C4C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227C60()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C8C68;
  return result;
}

void sub_18D227C84(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C8C68;
}

void sub_18D227C98(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  BOOL v10;
  double v12;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _BYTE v19[8];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned __int8 v26;

  v8 = *a2;
  sub_18D212DD8((uint64_t)v19, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((v26 | 8) == 9 && (_BYTE)v21)
  {
    v9 = fabs(*(double *)&v22 + (double)*((uint64_t *)&v21 + 1));
    v10 = (unint64_t)(*(_QWORD *)&v9 - 0x10000000000000) >> 53 > 0x3FE
       && (unint64_t)(*(_QWORD *)&v9 - 1) > 0xFFFFFFFFFFFFELL;
    if (!v10 || COERCE__INT64(*(double *)&v22 + (double)*((uint64_t *)&v21 + 1)) == 0)
    {
      v12 = fabs(*((double *)&v20 + 1) + (double)(uint64_t)v20);
      if ((unint64_t)(*(_QWORD *)&v12 - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(_QWORD *)&v12 - 1) <= 0xFFFFFFFFFFFFELL
        || COERCE__INT64(*((double *)&v20 + 1) + (double)(uint64_t)v20) == 0)
      {
        v15 = v23;
        *(_OWORD *)(v8 + 520) = v22;
        *(_OWORD *)(v8 + 536) = v15;
        v16 = v25;
        *(_OWORD *)(v8 + 552) = v24;
        *(_OWORD *)(v8 + 568) = v16;
        v17 = v21;
        *(_OWORD *)(v8 + 488) = v20;
        v18 = *(unsigned __int8 *)(v8 + 480);
        *(_OWORD *)(v8 + 504) = v17;
        if (!v18)
          *(_BYTE *)(v8 + 480) = 1;
      }
    }
  }
}

uint64_t sub_18D227D90(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8008))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D227DCC()
{
  return &unk_1E25B8008;
}

void sub_18D227DDC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227DF0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA3C8;
  return result;
}

void sub_18D227E14(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CA3C8;
}

void sub_18D227E28(int a1, _BYTE **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  _BYTE v9[8];
  uint64_t v10;
  double v11;
  double v12;
  double v13;

  v8 = *a2;
  sub_18D20CDC4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    if (cnestimation::PeriodicityTracker::AddSignalSample((cnestimation::PeriodicityTracker *)(v8 + 496), sqrt(v12 * v12 + v11 * v11 + v13 * v13)))(*(void (**)(_BYTE *))(*(_QWORD *)v8 + 96))(v8);
    else
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v8 + 104))(v8, &v10);
  }
}

uint64_t sub_18D227EB8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8448))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D227EF4()
{
  return &unk_1E25B8448;
}

void sub_18D227F04()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227F18()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA420;
  return result;
}

uint64_t sub_18D227F40(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8458))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D227F7C()
{
  return &unk_1E25B8458;
}

void sub_18D227F8C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D227FA0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CA370;
  return result;
}

uint64_t sub_18D227FC8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8438))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D228004()
{
  return &unk_1E25B8438;
}

void sub_18D228014()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D228028()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9240;
  return result;
}

uint64_t sub_18D228050(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8118))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D22808C()
{
  return &unk_1E25B8118;
}

void sub_18D22809C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2280B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9298;
  return result;
}

void sub_18D2280D4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9298;
}

void sub_18D2280E8(int a1, raven::RavenUserSpeedActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenUserSpeedActiveObject *v8;
  _BYTE v9[208];

  v8 = *a2;
  sub_18D20E7B0((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenUserSpeedActiveObject::HandleEvent(v8, (const raven::FitnessSessionEvent *)v9);
}

uint64_t sub_18D228124(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8128))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D228160()
{
  return &unk_1E25B8128;
}

void sub_18D228170()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D228184()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C91E8;
  return result;
}

uint64_t sub_18D2281AC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8108))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2281E8()
{
  return &unk_1E25B8108;
}

void sub_18D2281F8()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D22820C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9190;
  return result;
}

void sub_18D228230(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25C9190;
}

void sub_18D228244(int a1, raven::RavenUserSpeedActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  raven::RavenUserSpeedActiveObject *v8;
  _BYTE v9[160];

  v8 = *a2;
  sub_18D20EEC8((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenUserSpeedActiveObject::HandleEvent(v8, (const raven::StepCountEvent *)v9);
}

uint64_t sub_18D228280(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B80F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2282BC()
{
  return &unk_1E25B80F8;
}

void sub_18D2282CC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2282E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25C9138;
  return result;
}

uint64_t sub_18D228308(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B80E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D228344()
{
  return &unk_1E25B80E8;
}

__n128 sub_18D228354(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1A80;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2DA0;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 106) = *(_OWORD *)(a1 + 106);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

void sub_18D2283C4()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2283D8()
{
}

__n128 sub_18D2283E4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1690;
  *(_QWORD *)(v2 + 8) = &unk_1E25C22A8;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 122) = *(_OWORD *)(a1 + 122);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v2 + 48) = result;
  *(_OWORD *)(v2 + 64) = v6;
  return result;
}

uint64_t sub_18D228458(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = off_1E25C19F0;
  *(_QWORD *)(a1 + 8) = off_1E25C2C68;
  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a1 + 112;
  if (*(char *)(a2 + 127) < 0)
  {
    sub_18D077798((_BYTE *)v7, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v7 = v8;
  }
  return a1;
}

uint64_t sub_18D2284E4(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = off_1E25C2C68;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  return a1;
}

void sub_18D228524(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = off_1E25C2C68;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D228574()
{
}

uint64_t sub_18D228580(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_18D228458(v2, a1 + 8);
  return v2;
}

void sub_18D2285C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1093C40D9944445);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2285E8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_1E25C1B10;
  *(_QWORD *)(a1 + 8) = &off_1E25C3020;
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 112) = 0;
  v10 = a1 + 112;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_18D22600C(a1 + 112, *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 128);
  sub_18D2264B8(v10 + 40, (_QWORD *)(a2 + 144));
  return a1;
}

void sub_18D22869C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D226440((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2286B4(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 8) = &off_1E25C3020;
  sub_18D03D9B4(a1 + 152, *(_QWORD **)(a1 + 160));
  v3 = (void **)(a1 + 112);
  sub_18D226440(&v3);
  return a1;
}

void sub_18D228708(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 8) = &off_1E25C3020;
  sub_18D03D9B4(a1 + 152, *(_QWORD **)(a1 + 160));
  v2 = (void **)(a1 + 112);
  sub_18D226440(&v2);
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D22876C()
{
}

uint64_t sub_18D228778(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_18D2285E8(v2, a1 + 8);
  return v2;
}

void sub_18D2287BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10A1C401A4BC585);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2287E0(_QWORD *a1)
{
  void *v2;

  a1[1] = &off_1E25C2AE0;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_18D228820(_QWORD *a1)
{
  void *v2;

  a1[1] = &off_1E25C2AE0;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D228870()
{
}

uint64_t sub_18D22887C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  const void *v9;
  uint64_t v10;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C18D0;
  *(_QWORD *)(v2 + 8) = &off_1E25C2AE0;
  v3 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v2 + 192) = v3;
  *(_WORD *)(v2 + 208) = *(_WORD *)(a1 + 208);
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v5;
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v6;
  v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v7;
  v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v8;
  v9 = *(const void **)(a1 + 216);
  v10 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  sub_18D20EC90((_QWORD *)(v2 + 216), v9, v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v9) >> 3));
  return v2;
}

void sub_18D22892C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10A1C4080E7FBACLL);
  _Unwind_Resume(a1);
}

uint64_t sub_18D228950(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E25C3080;
  sub_18D03D0CC(a1 + 120);
  return a1;
}

void sub_18D228988(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E25C3080;
  sub_18D03D0CC(a1 + 120);
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2289D0()
{
}

uint64_t sub_18D2289DC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1B40;
  *(_QWORD *)(v2 + 8) = &off_1E25C3080;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_QWORD *)(v2 + 112) = *(_QWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  sub_18D217AC8(v2 + 120, a1 + 120);
  return v2;
}

void sub_18D228A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10A1C40FE0FDF50);
  _Unwind_Resume(a1);
}

void sub_18D228A84()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D228A98()
{
}

__n128 sub_18D228AA4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1870;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2A80;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_WORD *)(v2 + 112) = *(_WORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

void sub_18D228B14()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D228B28()
{
}

__n128 sub_18D228B34(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C17B0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2680;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_BYTE *)(v2 + 112) = *(_BYTE *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

__n128 sub_18D228BA4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C14E0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C20F8;
  v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v3;
  v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v4;
  result = *(__n128 *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v6;
  return result;
}

void sub_18D228C0C()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D228C20()
{
}

__n128 sub_18D228C2C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1A50;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2CC8;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_BYTE *)(v2 + 112) = *(_BYTE *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

_QWORD *sub_18D228C98(_QWORD *result)
{
  result[1] = &off_1E25C27B8;
  result[134] = &unk_1E25C5E70;
  result[120] = &unk_1E25C5E70;
  result[106] = &unk_1E25C5E70;
  result[98] = &unk_1E25C5E70;
  result[79] = &unk_1E25C5E70;
  result[65] = &unk_1E25C5E70;
  result[51] = &unk_1E25C5E70;
  result[43] = &unk_1E25C5E70;
  return result;
}

void sub_18D228CD8(_QWORD *a1)
{
  a1[1] = &off_1E25C27B8;
  a1[134] = &unk_1E25C5E70;
  a1[120] = &unk_1E25C5E70;
  a1[106] = &unk_1E25C5E70;
  a1[98] = &unk_1E25C5E70;
  a1[79] = &unk_1E25C5E70;
  a1[65] = &unk_1E25C5E70;
  a1[51] = &unk_1E25C5E70;
  a1[43] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D228D28()
{
}

uint64_t sub_18D228D34(_OWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1810;
  *(_QWORD *)(v2 + 8) = &off_1E25C27B8;
  v3 = a1[4];
  *(_OWORD *)(v2 + 48) = a1[3];
  *(_OWORD *)(v2 + 64) = v3;
  v4 = a1[6];
  *(_OWORD *)(v2 + 80) = a1[5];
  *(_OWORD *)(v2 + 96) = v4;
  v5 = a1[2];
  *(_OWORD *)(v2 + 16) = a1[1];
  *(_OWORD *)(v2 + 32) = v5;
  sub_18D215D54(v2 + 112, (uint64_t)(a1 + 7));
  return v2;
}

void sub_18D228DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1081C408EED9911);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D228DD0(_QWORD *result)
{
  result[1] = &off_1E25C2C98;
  result[121] = &unk_1E25C5E70;
  result[107] = &unk_1E25C5E70;
  result[93] = &unk_1E25C5E70;
  result[85] = &unk_1E25C5E70;
  result[66] = &unk_1E25C5E70;
  result[52] = &unk_1E25C5E70;
  result[38] = &unk_1E25C5E70;
  result[30] = &unk_1E25C5E70;
  return result;
}

void sub_18D228E10(_QWORD *a1)
{
  a1[1] = &off_1E25C2C98;
  a1[121] = &unk_1E25C5E70;
  a1[107] = &unk_1E25C5E70;
  a1[93] = &unk_1E25C5E70;
  a1[85] = &unk_1E25C5E70;
  a1[66] = &unk_1E25C5E70;
  a1[52] = &unk_1E25C5E70;
  a1[38] = &unk_1E25C5E70;
  a1[30] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D228E60()
{
}

_QWORD *sub_18D228E6C(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E25C1A20;
  sub_18D216190((uint64_t)(v2 + 1), a1 + 8);
  return v2;
}

void sub_18D228EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1081C4051C51426);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D228EE0(_QWORD *a1)
{
  void *v2;

  a1[1] = &off_1E25C37F0;
  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_18D228F20(_QWORD *a1)
{
  void *v2;

  a1[1] = &off_1E25C37F0;
  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D228F70()
{
}

uint64_t sub_18D228F7C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char *v6;
  char *v7;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1CC0;
  *(_QWORD *)(v2 + 8) = &off_1E25C37F0;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  v6 = *(char **)(a1 + 128);
  v7 = *(char **)(a1 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  sub_18D219C48((_QWORD *)(v2 + 128), v6, v7, 0x80FE03F80FE03F81 * ((v7 - v6) >> 6));
  return v2;
}

void sub_18D22901C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10A1C40421EF65ELL);
  _Unwind_Resume(a1);
}

uint64_t raven::TunnelBridgeNotificationChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

BOOL raven::TunnelBridgeNotificationChecker::isCoordinateValid(raven::TunnelBridgeNotificationChecker *this, double a2, double a3)
{
  _BOOL4 v4;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v4 = a2 <= 90.0 && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000 && a2 >= -90.0;
  if (a3 > 180.0)
    v4 = 0;
  return a3 >= -180.0 && v4;
}

uint64_t raven::TunnelBridgeNotificationChecker::HandleEvent(raven::TunnelBridgeNotificationChecker *this, const raven::TunnelBridgeNotificationEvent *a2, raven::TunnelBridgeNotificationEvent *a3)
{
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  unsigned __int8 v51;
  __int16 v52;
  unsigned __int8 v53;
  __int16 v54;
  unsigned __int8 v55;
  __int16 v56;
  unsigned __int8 v57;
  __int16 v58;

  if (!*((_BYTE *)this + 8))
  {
    v58 = 12;
    v57 = 4;
    v26 = (*(uint64_t (**)(const raven::TunnelBridgeNotificationEvent *, const raven::TunnelBridgeNotificationEvent *, raven::TunnelBridgeNotificationEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v48 = v27 + (double)v26;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "t,%.3lf,TunnelBridgeNotificationChecker, not configured", v28, v29, v30, v31, v32, SLOBYTE(v48));
    return 0xFFFFFFFFLL;
  }
  if (!*((_BYTE *)this + 9))
    return 0;
  v4 = *((double *)a2 + 25);
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v5 = *((double *)a2 + 26), v5 < -180.0)
    || v5 > 180.0
    || v4 < -90.0
    || v4 > 90.0
    || (*((_QWORD *)a2 + 26) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v56 = 12;
      v55 = 1;
      v33 = (*(uint64_t (**)(const raven::TunnelBridgeNotificationEvent *))(*(_QWORD *)a2 + 16))(a2);
      v49 = v34 + (double)v33;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, &v55, "t,%.3lf,WARNING: tba,tunnel bridge notification checker, tunnel bridge notification has invalid predicted point coordinates, do not use tunnel bridge notification", v35, v36, v37, v38, v39, SLOBYTE(v49));
    }
    return 0xFFFFFFFFLL;
  }
  v6 = *((double *)a2 + 27);
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v6 < 10.0 || v6 > 500.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v54 = 12;
      v53 = 1;
      v40 = (*(uint64_t (**)(const raven::TunnelBridgeNotificationEvent *))(*(_QWORD *)a2 + 16))(a2);
      v50 = v41 + (double)v40;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "t,%.3lf,WARNING: tba,tunnel bridge notification checker, search radius is not set, too large, negative, or too small, do not use tunnel bridge notification,%.3lf", v42, v43, v44, v45, v46, SLOBYTE(v50));
    }
    return 0xFFFFFFFFLL;
  }
  if (!cnprint::CNPrinter::GetLogLevel(this))
  {
    v52 = 12;
    v51 = 0;
    v8 = (*(uint64_t (**)(const raven::TunnelBridgeNotificationEvent *))(*(_QWORD *)a2 + 16))(a2);
    v47 = v9 + (double)v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "t,%.3lf,TunnelBridgeNotificationChecker,is_tunnel,%d,is_near_tunnel,%d", v10, v11, v12, v13, v14, SLOBYTE(v47));
  }
  result = 0;
  v16 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)a3 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a3 + 8) = v16;
  v17 = *(_OWORD *)((char *)a2 + 40);
  v18 = *(_OWORD *)((char *)a2 + 56);
  v19 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)a3 + 72) = v19;
  *(_OWORD *)((char *)a3 + 56) = v18;
  *(_OWORD *)((char *)a3 + 40) = v17;
  v20 = *(_OWORD *)((char *)a2 + 104);
  v21 = *(_OWORD *)((char *)a2 + 120);
  v22 = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)a3 + 152) = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)a3 + 136) = v22;
  *(_OWORD *)((char *)a3 + 120) = v21;
  *(_OWORD *)((char *)a3 + 104) = v20;
  v23 = *(_OWORD *)((char *)a2 + 168);
  v24 = *(_OWORD *)((char *)a2 + 184);
  v25 = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)a3 + 212) = *(_OWORD *)((char *)a2 + 212);
  *(_OWORD *)((char *)a3 + 200) = v25;
  *(_OWORD *)((char *)a3 + 184) = v24;
  *(_OWORD *)((char *)a3 + 168) = v23;
  return result;
}

uint64_t raven::GNSSMeasurementSelectionParameters::AllMeasurementsExcluded(raven::GNSSMeasurementSelectionParameters *this)
{
  _BOOL4 v1;
  _BOOL4 v2;

  v1 = !*(_BYTE *)this
    && !*((_BYTE *)this + 1)
    && !*((_BYTE *)this + 2)
    && !*((_BYTE *)this + 3)
    && !*((_BYTE *)this + 4)
    && *((_BYTE *)this + 5) == 0;
  v2 = (!*((_BYTE *)this + 14) || !*((_BYTE *)this + 16) && !*((_BYTE *)this + 17) && !*((_BYTE *)this + 18))
    && *((_BYTE *)this + 15) == 0;
  return v1 | v2;
}

void raven::GNSSMeasurementSelectionParameters::GetExpectedConstellations(_BYTE *a1, unint64_t *a2)
{
  void *v4;
  char *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  char v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  _BYTE *v28;
  char v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  char *v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  char *v51;
  _BYTE *v52;
  char v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  char *v63;
  _BYTE *v64;
  char v65;
  unint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  unint64_t v74;
  char *v75;
  _BYTE *v76;
  char v77;

  v4 = (void *)*a2;
  a2[1] = *a2;
  if (a2[2] - (unint64_t)v4 <= 4)
  {
    v5 = (char *)operator new(5uLL);
    *a2 = (unint64_t)v5;
    a2[1] = (unint64_t)v5;
    a2[2] = (unint64_t)(v5 + 5);
    if (v4)
      operator delete(v4);
  }
  if (*a1)
  {
    v7 = (_BYTE *)a2[1];
    v6 = a2[2];
    if ((unint64_t)v7 >= v6)
    {
      v9 = *a2;
      v10 = &v7[-*a2];
      v11 = (unint64_t)(v10 + 1);
      if ((uint64_t)(v10 + 1) < 0)
        goto LABEL_125;
      v12 = v6 - v9;
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = (unint64_t)operator new(v13);
      else
        v14 = 0;
      v15 = (char *)(v14 + v13);
      v10[v14] = 4;
      v8 = (uint64_t)&v10[v14 + 1];
      if (v7 == (_BYTE *)v9)
      {
        v14 += (unint64_t)v10;
      }
      else
      {
        v16 = &v7[~v9];
        do
        {
          v17 = *--v7;
          (v16--)[v14] = v17;
        }
        while (v7 != (_BYTE *)v9);
      }
      *a2 = v14;
      a2[1] = v8;
      a2[2] = (unint64_t)v15;
      if (v9)
        operator delete((void *)v9);
    }
    else
    {
      *v7 = 4;
      v8 = (uint64_t)(v7 + 1);
    }
    a2[1] = v8;
  }
  if (a1[1])
  {
    v19 = (_BYTE *)a2[1];
    v18 = a2[2];
    if ((unint64_t)v19 >= v18)
    {
      v21 = *a2;
      v22 = &v19[-*a2];
      v23 = (unint64_t)(v22 + 1);
      if ((uint64_t)(v22 + 1) < 0)
        goto LABEL_125;
      v24 = v18 - v21;
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x3FFFFFFFFFFFFFFFLL)
        v25 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
        v26 = (unint64_t)operator new(v25);
      else
        v26 = 0;
      v27 = (char *)(v26 + v25);
      v22[v26] = 3;
      v20 = (uint64_t)&v22[v26 + 1];
      if (v19 == (_BYTE *)v21)
      {
        v26 += (unint64_t)v22;
      }
      else
      {
        v28 = &v19[~v21];
        do
        {
          v29 = *--v19;
          (v28--)[v26] = v29;
        }
        while (v19 != (_BYTE *)v21);
      }
      *a2 = v26;
      a2[1] = v20;
      a2[2] = (unint64_t)v27;
      if (v21)
        operator delete((void *)v21);
    }
    else
    {
      *v19 = 3;
      v20 = (uint64_t)(v19 + 1);
    }
    a2[1] = v20;
  }
  if (a1[2])
  {
    v31 = (_BYTE *)a2[1];
    v30 = a2[2];
    if ((unint64_t)v31 >= v30)
    {
      v33 = *a2;
      v34 = &v31[-*a2];
      v35 = (unint64_t)(v34 + 1);
      if ((uint64_t)(v34 + 1) < 0)
        goto LABEL_125;
      v36 = v30 - v33;
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
        v37 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = (unint64_t)operator new(v37);
      else
        v38 = 0;
      v39 = (char *)(v38 + v37);
      v34[v38] = 2;
      v32 = (uint64_t)&v34[v38 + 1];
      if (v31 == (_BYTE *)v33)
      {
        v38 += (unint64_t)v34;
      }
      else
      {
        v40 = &v31[~v33];
        do
        {
          v41 = *--v31;
          (v40--)[v38] = v41;
        }
        while (v31 != (_BYTE *)v33);
      }
      *a2 = v38;
      a2[1] = v32;
      a2[2] = (unint64_t)v39;
      if (v33)
        operator delete((void *)v33);
    }
    else
    {
      *v31 = 2;
      v32 = (uint64_t)(v31 + 1);
    }
    a2[1] = v32;
  }
  if (a1[3])
  {
    v43 = (_BYTE *)a2[1];
    v42 = a2[2];
    if ((unint64_t)v43 >= v42)
    {
      v45 = *a2;
      v46 = &v43[-*a2];
      v47 = (unint64_t)(v46 + 1);
      if ((uint64_t)(v46 + 1) < 0)
        goto LABEL_125;
      v48 = v42 - v45;
      if (2 * v48 > v47)
        v47 = 2 * v48;
      if (v48 >= 0x3FFFFFFFFFFFFFFFLL)
        v49 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      if (v49)
        v50 = (unint64_t)operator new(v49);
      else
        v50 = 0;
      v51 = (char *)(v50 + v49);
      v46[v50] = 1;
      v44 = (uint64_t)&v46[v50 + 1];
      if (v43 == (_BYTE *)v45)
      {
        v50 += (unint64_t)v46;
      }
      else
      {
        v52 = &v43[~v45];
        do
        {
          v53 = *--v43;
          (v52--)[v50] = v53;
        }
        while (v43 != (_BYTE *)v45);
      }
      *a2 = v50;
      a2[1] = v44;
      a2[2] = (unint64_t)v51;
      if (v45)
        operator delete((void *)v45);
    }
    else
    {
      *v43 = 1;
      v44 = (uint64_t)(v43 + 1);
    }
    a2[1] = v44;
  }
  if (a1[4])
  {
    v55 = (_BYTE *)a2[1];
    v54 = a2[2];
    if ((unint64_t)v55 >= v54)
    {
      v57 = *a2;
      v58 = &v55[-*a2];
      v59 = (unint64_t)(v58 + 1);
      if ((uint64_t)(v58 + 1) < 0)
        goto LABEL_125;
      v60 = v54 - v57;
      if (2 * v60 > v59)
        v59 = 2 * v60;
      if (v60 >= 0x3FFFFFFFFFFFFFFFLL)
        v61 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
        v62 = (unint64_t)operator new(v61);
      else
        v62 = 0;
      v63 = (char *)(v62 + v61);
      v58[v62] = 5;
      v56 = (uint64_t)&v58[v62 + 1];
      if (v55 == (_BYTE *)v57)
      {
        v62 += (unint64_t)v58;
      }
      else
      {
        v64 = &v55[~v57];
        do
        {
          v65 = *--v55;
          (v64--)[v62] = v65;
        }
        while (v55 != (_BYTE *)v57);
      }
      *a2 = v62;
      a2[1] = v56;
      a2[2] = (unint64_t)v63;
      if (v57)
        operator delete((void *)v57);
    }
    else
    {
      *v55 = 5;
      v56 = (uint64_t)(v55 + 1);
    }
    a2[1] = v56;
  }
  if (!a1[5])
    return;
  v67 = (_BYTE *)a2[1];
  v66 = a2[2];
  if ((unint64_t)v67 >= v66)
  {
    v69 = *a2;
    v70 = &v67[-*a2];
    v71 = (unint64_t)(v70 + 1);
    if ((uint64_t)(v70 + 1) >= 0)
    {
      v72 = v66 - v69;
      if (2 * v72 > v71)
        v71 = 2 * v72;
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL)
        v73 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
        v74 = (unint64_t)operator new(v73);
      else
        v74 = 0;
      v75 = (char *)(v74 + v73);
      v70[v74] = 6;
      v68 = (uint64_t)&v70[v74 + 1];
      if (v67 == (_BYTE *)v69)
      {
        v74 += (unint64_t)v70;
      }
      else
      {
        v76 = &v67[~v69];
        do
        {
          v77 = *--v67;
          (v76--)[v74] = v77;
        }
        while (v67 != (_BYTE *)v69);
      }
      *a2 = v74;
      a2[1] = v68;
      a2[2] = (unint64_t)v75;
      if (v69)
        operator delete((void *)v69);
      goto LABEL_123;
    }
LABEL_125:
    sub_18D07AFE4();
  }
  *v67 = 6;
  v68 = (uint64_t)(v67 + 1);
LABEL_123:
  a2[1] = v68;
}

uint64_t raven::AttitudeChangeChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::AttitudeChangeChecker::HandleEvent(raven::AttitudeChangeChecker *this, const raven::AttitudeChangeEvent *a2, raven::AttitudeChangeEvent *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  _BOOL4 v21;
  BOOL v22;
  BOOL v23;
  _BOOL4 v24;
  BOOL v25;
  int v26;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  int8x16_t v36;
  _QWORD v37[2];

  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v37[0]) = 12;
    v36.i8[0] = 4;
    v28 = (*(uint64_t (**)(const raven::AttitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
    v35 = v29 + (double)v28;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v37, (unsigned __int8 *)&v36, "t,%.3lf,AttitudeChangeChecker, not configured", v30, v31, v32, v33, v34, SLOBYTE(v35));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 56) == 9)
    return 0xFFFFFFFFLL;
  v5 = *(_OWORD *)((char *)a2 + 8);
  v6 = *(_OWORD *)((char *)a2 + 24);
  v7 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)a3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 40) = v7;
  *(_OWORD *)((char *)a3 + 24) = v6;
  *(_OWORD *)((char *)a3 + 8) = v5;
  v8 = *(_OWORD *)((char *)a2 + 72);
  v9 = *(_OWORD *)((char *)a2 + 88);
  v10 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a3 + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 104) = v10;
  *(_OWORD *)((char *)a3 + 88) = v9;
  *(_OWORD *)((char *)a3 + 72) = v8;
  v11 = *(_OWORD *)((char *)a2 + 136);
  v12 = *(_OWORD *)((char *)a2 + 152);
  v13 = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)a3 + 184) = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a3 + 168) = v13;
  *(_OWORD *)((char *)a3 + 152) = v12;
  *(_OWORD *)((char *)a3 + 136) = v11;
  if (a3 != a2)
  {
    *(_OWORD *)((char *)a3 + 200) = *(_OWORD *)((char *)a2 + 200);
    *(_OWORD *)((char *)a3 + 216) = *(_OWORD *)((char *)a2 + 216);
  }
  v14 = sub_18D053AA8((uint64_t)a3 + 232, (uint64_t)a2 + 232);
  if (!*((_BYTE *)this + 9))
    return 0;
  v37[0] = (*(uint64_t (**)(raven::AttitudeChangeEvent *, __n128))(*(_QWORD *)a3 + 16))(a3, v14);
  v37[1] = v15;
  v36 = *(int8x16_t *)((char *)a3 + 104);
  v17 = CNTimeSpan::operator-((uint64_t)v37, &v36, v36, v16);
  v19 = v18 + (double)v17;
  v20 = fabs(v19);
  v21 = (unint64_t)(*(_QWORD *)&v20 - 1) < 0xFFFFFFFFFFFFFLL;
  v22 = *(_QWORD *)&v19 == 0;
  v23 = v19 < 0.0;
  v24 = v19 < 0.0 && (unint64_t)(*(_QWORD *)&v20 - 0x10000000000000) >> 53 < 0x3FF;
  if (!v23)
    v21 = 0;
  if (v22)
    v21 = 1;
  v25 = *(_QWORD *)&v20 <= 0x7FF0000000000000;
  v26 = v20 == INFINITY || v21;
  if (!v25)
    v26 = 1;
  return ((v26 | v24) << 31 >> 31);
}

uint64_t raven::RavenMapVectorActiveObject::Configure(cnframework::ActiveObjectBase *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  double v44;
  _BOOL4 v45;
  _BOOL4 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  cnprint::CNPrinter *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  void *__p[2];
  char v68;
  unsigned __int8 v69;
  __int16 v70;

  if (*((_BYTE *)this + 480) && cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v70 = 12;
    v69 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v68 < 0)
      operator delete(__p[0]);
  }
  *((_BYTE *)this + 480) = 0;
  v10 = *a2;
  if (!*a2 || !*(_BYTE *)(v10 + 33))
  {
    v70 = 12;
    v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v24 = __p;
    else
      LOBYTE(v24) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. p_raven_parameters is not initialized.", v19, v20, v21, v22, v23, (char)v24);
    goto LABEL_39;
  }
  *((_QWORD *)this + 61) = v10;
  if ((*(_QWORD *)(v10 + 3152) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v10 + 3152) < 0.0)
  {
    v70 = 12;
    v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v30 = __p;
    else
      LOBYTE(v30) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid map_vector_event_raise_minimum_interval: %.3lf", v25, v26, v27, v28, v29, (char)v30);
    goto LABEL_39;
  }
  if ((*(_QWORD *)(v10 + 3144) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v10 + 3144) < 0.0)
  {
    v70 = 12;
    v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v36 = __p;
    else
      LOBYTE(v36) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid map_vector_event_expiration_age: %.3lf", v31, v32, v33, v34, v35, (char)v36);
    goto LABEL_39;
  }
  if ((*(_QWORD *)(v10 + 3160) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v10 + 3160) < 0.0)
  {
    v70 = 12;
    v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v42 = __p;
    else
      LOBYTE(v42) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid map_vector_event_device_rotation_threshold: %.3lf", v37, v38, v39, v40, v41, (char)v42);
    goto LABEL_39;
  }
  v11 = *(double *)(v10 + 3208);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v11 < 0.0
    || (v12 = *(double *)(v10 + 3216), v11 < v12))
  {
    v70 = 12;
    v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v18 = __p;
    else
      LOBYTE(v18) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid turn_state_detector_minimum_threshold_to_trigger_turning_high_confidence_dps_: %.3lf. Must be finite, non-negative, and greater than or equal to turn_state_detector_maximum_threshold_to_trigger_not_turning_low_confidence_dps_", v13, v14, v15, v16, v17, (char)v18);
LABEL_39:
    if (v68 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  v44 = *(double *)(v10 + 3224);
  if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v44 < 0.0 || v44 > v12)
  {
    v70 = 12;
    v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v59 = __p;
    else
      LOBYTE(v59) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid turn_state_detector_maximum_threshold_to_trigger_not_turning_high_confidence_dps_: %.3lf. Must be finite, non-negative, and less than or equal to turn_state_detector_maximum_threshold_to_trigger_not_turning_low_confidence_dps_", v54, v55, v56, v57, v58, (char)v59);
    goto LABEL_39;
  }
  v45 = (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v46 = v12 < 0.0 && ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v12 >= 0.0)
    v45 = 0;
  v47 = (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v45;
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    v47 = 1;
  if ((v47 | v46) == 1)
  {
    v70 = 12;
    v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v53 = __p;
    else
      LOBYTE(v53) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid turn_state_detector_maximum_threshold_to_trigger_not_turning_low_confidence_dps_: %.3lf. Must be finite, non-negative, and greater than or equal to turn_state_detector_maximum_threshold_to_trigger_not_turning_high_confidence_dps_", v48, v49, v50, v51, v52, (char)v53);
    goto LABEL_39;
  }
  cnframework::ActiveObjectBase::SetEventQueueDelay(this, 0.0);
  *((_BYTE *)this + 480) = 1;
  v60 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)this + 48))(this);
  if (cnprint::CNPrinter::GetLogLevel(v60) <= 1)
  {
    v70 = 12;
    v69 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v68 >= 0)
      v66 = __p;
    else
      LOBYTE(v66) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "%s configured successfully.", v61, v62, v63, v64, v65, (char)v66);
    if (v68 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D229F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenMapVectorActiveObject::IsConfigured(raven::RavenMapVectorActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

__n128 raven::RavenMapVectorActiveObject::HandleEvent(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*(_BYTE *)(a1 + 688))
  {
    v2 = *(_OWORD *)(a2 + 8);
    v3 = *(_OWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 536) = v4;
    *(_OWORD *)(a1 + 520) = v3;
    *(_OWORD *)(a1 + 504) = v2;
    v5 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 88);
    v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 600) = v7;
    *(_OWORD *)(a1 + 584) = v6;
    *(_OWORD *)(a1 + 568) = v5;
    result = *(__n128 *)(a2 + 136);
    v9 = *(_OWORD *)(a2 + 152);
    v10 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 664) = v10;
    *(_OWORD *)(a1 + 648) = v9;
    *(__n128 *)(a1 + 632) = result;
  }
  else
  {
    *(_QWORD *)(a1 + 496) = &unk_1E25C2AB0;
    v11 = *(_OWORD *)(a2 + 8);
    v12 = *(_OWORD *)(a2 + 24);
    v13 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 536) = v13;
    *(_OWORD *)(a1 + 520) = v12;
    *(_OWORD *)(a1 + 504) = v11;
    v14 = *(_OWORD *)(a2 + 72);
    v15 = *(_OWORD *)(a2 + 88);
    v16 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 600) = v16;
    *(_OWORD *)(a1 + 584) = v15;
    *(_OWORD *)(a1 + 568) = v14;
    result = *(__n128 *)(a2 + 136);
    v17 = *(_OWORD *)(a2 + 152);
    v18 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 664) = v18;
    *(_OWORD *)(a1 + 648) = v17;
    *(__n128 *)(a1 + 632) = result;
    *(_BYTE *)(a1 + 688) = 1;
  }
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*(_BYTE *)(a1 + 1376))
  {
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 8);
    v2 = *(_OWORD *)(a2 + 24);
    v3 = *(_OWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1440) = v4;
    *(_OWORD *)(a1 + 1424) = v3;
    *(_OWORD *)(a1 + 1408) = v2;
    result = *(__n128 *)(a2 + 88);
    v6 = *(_OWORD *)(a2 + 104);
    v7 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 1504) = v7;
    *(_OWORD *)(a1 + 1488) = v6;
    *(__n128 *)(a1 + 1472) = result;
  }
  else
  {
    *(_QWORD *)(a1 + 1384) = &unk_1E25C24A0;
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1440) = v10;
    *(_OWORD *)(a1 + 1424) = v9;
    *(_OWORD *)(a1 + 1408) = v8;
    result = *(__n128 *)(a2 + 88);
    v11 = *(_OWORD *)(a2 + 104);
    v12 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 1504) = v12;
    *(_OWORD *)(a1 + 1488) = v11;
    *(__n128 *)(a1 + 1472) = result;
    *(_BYTE *)(a1 + 1376) = 1;
  }
  return result;
}

uint64_t raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::DecomposedAccelerationEvent *a2)
{
  return sub_18D22AC44((uint64_t)this + 696, (uint64_t)a2);
}

double raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::MapVectorEvent *a2, int8x16_t a3, int8x16_t a4)
{
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  double v17[2];

  if (*((_BYTE *)this + 1064))
    *((_BYTE *)this + 1064) = 0;
  *((_QWORD *)this + 517) = 0x7FF0000000000000;
  *((_QWORD *)this + 518) = 0;
  *((_QWORD *)this + 519) = 0x7FF8000000000000;
  *((_BYTE *)this + 4160) = 0;
  if (!*((_BYTE *)this + 1376))
    goto LABEL_8;
  v6 = *((unsigned __int8 *)this + 1488);
  v7 = v6 > 3 || v6 == 1;
  if (!v7
    || !*((_BYTE *)this + 688)
    || ((*((_BYTE *)this + 600) - 4) & 0xFA) != 0
    || !*((_BYTE *)this + 4112)
    || *((_BYTE *)this + 4072) != 2)
  {
    goto LABEL_8;
  }
  v12 = CNTimeSpan::operator-((uint64_t)a2 + 8, (_QWORD *)this + 497, a3, a4);
  *(_QWORD *)&v17[0] = v12;
  v17[1] = v13;
  if (v12 < 0 || (*(double *)v14.i64 = v13, v13 < 0.0))
  {
    v12 = CNTimeSpan::operator-(v17, v14, v15);
    v14.i64[0] = v16;
  }
  result = *(double *)v14.i64 + (double)v12;
  if (result >= 0.5)
  {
LABEL_8:
    *((_QWORD *)this + 134) = &unk_1E25C22D8;
    memcpy((char *)this + 1080, (char *)a2 + 8, 0x10CuLL);
    *((_BYTE *)this + 1064) = 1;
    v8 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
    v9 = *((unsigned __int8 *)this + 1352);
    *((_QWORD *)this + 170) = v8;
    *((_QWORD *)this + 171) = v10;
    if (!v9)
      *((_BYTE *)this + 1352) = 1;
    *((_QWORD *)this + 517) = 0;
    sub_18D21CB74((uint64_t)this, (uint64_t)a2);
  }
  return result;
}

uint64_t raven::RavenMapVectorActiveObject::ResetStoredMapVectorInformation(uint64_t this)
{
  if (*(_BYTE *)(this + 1064))
    *(_BYTE *)(this + 1064) = 0;
  *(_QWORD *)(this + 4136) = 0x7FF0000000000000;
  *(_QWORD *)(this + 4144) = 0;
  *(_QWORD *)(this + 4152) = 0x7FF8000000000000;
  *(_BYTE *)(this + 4160) = 0;
  return this;
}

void raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::RateGyroEvent *a2, int8x16_t a3, int8x16_t a4)
{
  _BYTE *v6;
  _OWORD *v7;
  uint64_t v8;
  double v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int8x16_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  void **v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  double v50;
  cnprint::CNPrinter *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  double v89;
  int8x16_t v90;
  int8x16_t v91;
  uint64_t v92;
  double v93;
  unint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  uint64_t v114;
  double v115;
  double v116;
  double v117;
  double v118;
  unsigned __int8 v119[64];
  uint64_t v120[8];
  _BYTE v121[32];
  double *v122;
  void *v123;
  __int128 v124;
  uint64_t v125;
  double *v126;
  double v127[3];
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD v132[7];
  __int128 v133;

  if (!*((_BYTE *)this + 696))
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v128) = 12;
      LOBYTE(v123) = 0;
      v30 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
      v115 = v31 + (double)v30;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v128, (unsigned __int8 *)&v123, "t,%.3lf,MapVectorAO: Waiting for decomposed acceleration event,", v32, v33, v34, v35, v36, SLOBYTE(v115));
    }
    goto LABEL_44;
  }
  v6 = (char *)this + 4120;
  v7 = (_OWORD *)((char *)a2 + 8);
  v8 = CNTimeSpan::operator-((uint64_t)a2 + 8, (_QWORD *)this + 89, a3, a4);
  v128 = v8;
  *(double *)&v129 = v9;
  if (v8 < 0 || (*(double *)v10.i64 = v9, v9 < 0.0))
  {
    v8 = CNTimeSpan::operator-((double *)&v128, v10, v11);
    v10.i64[0] = v12;
  }
  if (*(double *)v10.i64 + (double)v8 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v8) > 1)
      goto LABEL_12;
    LOWORD(v123) = 12;
    LOBYTE(v120[0]) = 1;
    v13 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
    if (*((_BYTE *)this + 696))
    {
      *(double *)v15.i64 = v14;
      *(double *)v16.i64 = (double)v13;
      v17 = v14 + (double)v13;
      v128 = CNTimeSpan::operator-((uint64_t)a2 + 8, (_QWORD *)this + 89, v15, v16);
      *(double *)&v129 = v18;
      if (v128 < 0 || (*(double *)v24.i64 = v18, v18 < 0.0))
        CNTimeSpan::operator-((double *)&v128, v24, v25);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v123, (unsigned __int8 *)v120, "t,%.3lf,MapVectorAO: Time delta between RateGyroEvent and DecomposedAccelerationEvent is too large, %.2lf. Clearing map vector information, vertical rotation rate queue, and DecomposedAccelerationEvent,", v19, v20, v21, v22, v23, SLOBYTE(v17));
LABEL_12:
      v26 = (void **)*((_QWORD *)this + 522);
      v27 = *((_QWORD *)this + 523);
      *((_QWORD *)this + 526) = 0;
      v28 = v27 - (_QWORD)v26;
      if (v28 >= 0x11)
      {
        do
        {
          operator delete(*v26);
          v26 = (void **)(*((_QWORD *)this + 522) + 8);
          *((_QWORD *)this + 522) = v26;
          v28 = *((_QWORD *)this + 523) - (_QWORD)v26;
        }
        while (v28 > 0x10);
      }
      if (v28 >> 3 == 1)
      {
        v29 = 256;
      }
      else
      {
        if (v28 >> 3 != 2)
        {
LABEL_39:
          *(_OWORD *)((char *)this + 4216) = 0u;
          *((_QWORD *)this + 529) = 0x7FF8000000000000;
          if (*((_BYTE *)this + 696))
            *((_BYTE *)this + 696) = 0;
          if (*((_BYTE *)this + 1064))
            *((_BYTE *)this + 1064) = 0;
          *((_QWORD *)this + 517) = 0x7FF0000000000000;
          *((_QWORD *)this + 518) = 0;
          *((_QWORD *)this + 519) = 0x7FF8000000000000;
          *((_BYTE *)this + 4160) = 0;
          goto LABEL_44;
        }
        v29 = 512;
      }
      *((_QWORD *)this + 525) = v29;
      goto LABEL_39;
    }
LABEL_69:
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  }
  if (!*((_BYTE *)this + 904))
  {
LABEL_44:
    if (*((_BYTE *)this + 904))
    {
      v66 = (_OWORD *)((char *)this + 904);
      *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 8);
      v74 = *(_OWORD *)((char *)a2 + 24);
      v75 = *(_OWORD *)((char *)a2 + 40);
      v76 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 984) = v76;
      *(_OWORD *)((char *)this + 936) = v74;
      *(_OWORD *)((char *)this + 952) = v75;
      v70 = *(_OWORD *)((char *)a2 + 88);
      v71 = *(_OWORD *)((char *)a2 + 104);
      v72 = *(_OWORD *)((char *)a2 + 120);
      v73 = *(_OWORD *)((char *)a2 + 130);
      goto LABEL_46;
    }
    v77 = (_OWORD *)((char *)this + 904);
    *((_QWORD *)this + 114) = &unk_1E25C21E8;
    *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 8);
    v78 = *(_OWORD *)((char *)a2 + 24);
    v79 = *(_OWORD *)((char *)a2 + 40);
    v80 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)this + 984) = v80;
    *(_OWORD *)((char *)this + 936) = v78;
    *(_OWORD *)((char *)this + 952) = v79;
    v81 = *(_OWORD *)((char *)a2 + 88);
    v82 = *(_OWORD *)((char *)a2 + 104);
    v83 = *(_OWORD *)((char *)a2 + 120);
    v84 = *(_OWORD *)((char *)a2 + 130);
    goto LABEL_48;
  }
  v37 = *((double *)this + 101);
  v38 = *((double *)this + 102);
  v39 = *((double *)this + 103);
  v40 = sqrt(v38 * v38 + v37 * v37 + v39 * v39);
  if (fabs(v40) > 0.000000015 && *(_QWORD *)&v40 >> 52 < 0x7FFuLL)
  {
    v11.i64[0] = *((_QWORD *)a2 + 15);
    *(double *)v10.i64 = (v38 * *((double *)a2 + 14) + *((double *)a2 + 13) * v37 + *(double *)v11.i64 * v39)
                       * 57.2957795;
    v41 = *(double *)v10.i64 / v40;
    if (!*((_BYTE *)this + 1528) || !*((_BYTE *)this + 3280))
      goto LABEL_50;
    v42 = CNTimeSpan::operator-((uint64_t)a2 + 8, (_QWORD *)this + 193, v10, v11);
    v128 = v42;
    *(double *)&v129 = v43;
    if (v42 < 0 || (*(double *)v10.i64 = v43, v43 < 0.0))
    {
      v42 = CNTimeSpan::operator-((double *)&v128, v10, v11);
      v10.i64[0] = v44;
    }
    *(double *)v10.i64 = *(double *)v10.i64 + (double)v42;
    v11.i64[0] = 10.0;
    if (*(double *)v10.i64 < 10.0)
    {
      v45 = (v38 * *((double *)this + 412) + *((double *)this + 411) * v37 + *((double *)this + 413) * v39) * 57.2957795;
      v130 = 0x300000003;
      v128 = (uint64_t)&unk_1E25C78E0;
      v129 = xmmword_18D30BB60;
      v131 = v132;
      v125 = 0x100000003;
      v123 = &unk_1E25C7790;
      v124 = xmmword_18D313070;
      v126 = v127;
      v127[0] = v37 / v40;
      v127[1] = v38 / v40;
      v127[2] = v39 / v40;
      v46 = *((_QWORD *)this + 415);
      v47 = *((_QWORD *)this + 416);
      v132[0] = *((_QWORD *)this + 414);
      v132[1] = v46;
      v48 = *((_QWORD *)this + 417);
      v132[2] = v47;
      v132[3] = v46;
      v49 = *((_OWORD *)this + 209);
      v50 = v45 / v40;
      v132[4] = v48;
      v132[5] = v49;
      v132[6] = v47;
      v133 = v49;
      sub_18D186BA8((uint64_t)&v123, (uint64_t)v119);
      sub_18D186B40((uint64_t)v119, (uint64_t)&v128, (uint64_t)v120);
      sub_18D186AE0((uint64_t)v120, (uint64_t)&v123, (uint64_t)v121);
      *((double *)this + 516) = sqrt(*v122) * 57.2957795;
      *v6 = 1;
      if (!cnprint::CNPrinter::GetLogLevel(v51))
      {
        LOWORD(v120[0]) = 12;
        v119[0] = 0;
        v52 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
        if (!*v6)
          __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
        v116 = v53 + (double)v52;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,MapVectorAO: vertical_rotation_bias_dps,%.2lf,vertical_rotation_rate_bias_uncertainty_dps,%.2lf,vertical_rotation_rate_dps,%.2lf", v54, v55, v56, v57, v58, SLOBYTE(v116));
      }
      if (!*((_BYTE *)this + 904))
        goto LABEL_69;
      v41 = v41 - v50;
    }
    else
    {
LABEL_50:
      *v6 = 0;
    }
    v88 = CNTimeSpan::operator-((uint64_t)a2 + 8, (_QWORD *)this + 115, v10, v11);
    v128 = v88;
    *(double *)&v129 = v89;
    if (v88 < 0 || (*(double *)v90.i64 = v89, v89 < 0.0))
    {
      v88 = CNTimeSpan::operator-((double *)&v128, v90, v91);
      v90.i64[0] = v92;
    }
    v93 = *(double *)v90.i64 + (double)v88;
    if (v93 <= 1.0)
    {
      *((double *)this + 517) = *((double *)this + 517) + v41 * v93;
      *((_QWORD *)this + 518) = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
      *((_QWORD *)this + 519) = v102;
      *((_BYTE *)this + 4160) = 1;
    }
    else
    {
      if (*((_BYTE *)this + 1064))
        *((_BYTE *)this + 1064) = 0;
      *((_QWORD *)this + 517) = 0x7FF0000000000000;
      *((_QWORD *)this + 518) = 0;
      *((_QWORD *)this + 519) = 0x7FF8000000000000;
      *((_BYTE *)this + 4160) = 0;
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v88) <= 1)
      {
        LOWORD(v123) = 12;
        LOBYTE(v120[0]) = 1;
        v95 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
        v118 = v96 + (double)v95;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v123, (unsigned __int8 *)v120, "t,%.3lf,MapVectorAO: Too much time between rate gyro events, %.2lf. Cannot accumulate device rotation with high fidelity,", v97, v98, v99, v100, v101, SLOBYTE(v118));
      }
    }
    LODWORD(v94) = vcvtpd_u64_f64(*(double *)(*((_QWORD *)this + 61) + 3232) / *(double *)(*((_QWORD *)this + 61)
                                                                                           + 656));
    *((_QWORD *)this + 530) = v94;
    v103 = *((_QWORD *)this + 526);
    if (v103)
    {
      while (v103 >= v94)
      {
        v104 = *((_QWORD *)this + 525);
        *((double *)this + 527) = *((double *)this + 527)
                                - *(double *)(*(_QWORD *)(*((_QWORD *)this + 522) + ((v104 >> 6) & 0x3FFFFFFFFFFFFF8))
                                            + 8 * (v104 & 0x1FF));
        *((_QWORD *)this + 526) = v103 - 1;
        *((_QWORD *)this + 525) = v104 + 1;
        sub_18D078C10((uint64_t)this + 4168, 1);
        v103 = *((_QWORD *)this + 526);
        if (!v103)
          break;
        v94 = *((_QWORD *)this + 530);
      }
    }
    v105 = *((_QWORD *)this + 523);
    v106 = *((_QWORD *)this + 522);
    v107 = ((v105 - v106) << 6) - 1;
    if (v105 == v106)
      v107 = 0;
    v108 = v103 + *((_QWORD *)this + 525);
    if (v107 == v108)
    {
      sub_18D078130((_QWORD *)this + 521);
      v103 = *((_QWORD *)this + 526);
      v106 = *((_QWORD *)this + 522);
      v108 = *((_QWORD *)this + 525) + v103;
    }
    *(double *)(*(_QWORD *)(v106 + ((v108 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v108 & 0x1FF)) = v41;
    *((_QWORD *)this + 526) = v103 + 1;
    *((double *)this + 527) = v41 + *((double *)this + 527);
    v123 = (void *)(*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v124 = v109;
    v110.i64[0] = 0.5;
    *(double *)v111.i64 = *(double *)(*((_QWORD *)this + 61) + 656) * (double)*((unint64_t *)this + 526) * 0.5;
    v120[0] = 0;
    v120[1] = 0;
    CNTimeSpan::SetTimeSpan(v120, 0, v111, v110);
    *((_QWORD *)this + 528) = CNTimeSpan::operator-((uint64_t)&v123, v120, v112, v113);
    *((_QWORD *)this + 529) = v114;
    goto LABEL_44;
  }
  LOWORD(v128) = 12;
  LOBYTE(v123) = 4;
  v59 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
  v117 = v60 + (double)v59;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v128, (unsigned __int8 *)&v123, "t,%.3lf,MapVectorAO: Gravity vector has invalid magnitude, %.3lf. Clearing cached map vector information.", v61, v62, v63, v64, v65, SLOBYTE(v117));
  if (*((_BYTE *)this + 1064))
    *((_BYTE *)this + 1064) = 0;
  *((_QWORD *)this + 517) = 0x7FF0000000000000;
  *((_QWORD *)this + 518) = 0;
  *((_QWORD *)this + 519) = 0x7FF8000000000000;
  *((_BYTE *)this + 4160) = 0;
  if (*((_BYTE *)this + 904))
  {
    v66 = (_OWORD *)((char *)this + 904);
    *(_OWORD *)((char *)this + 920) = *v7;
    v67 = *(_OWORD *)((char *)a2 + 24);
    v68 = *(_OWORD *)((char *)a2 + 40);
    v69 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)this + 984) = v69;
    *(_OWORD *)((char *)this + 936) = v67;
    *(_OWORD *)((char *)this + 952) = v68;
    v70 = *(_OWORD *)((char *)a2 + 88);
    v71 = *(_OWORD *)((char *)a2 + 104);
    v72 = *(_OWORD *)((char *)a2 + 120);
    v73 = *(_OWORD *)((char *)a2 + 130);
LABEL_46:
    *(_OWORD *)((char *)v66 + 138) = v73;
    v66[7] = v71;
    v66[8] = v72;
    v66[6] = v70;
    return;
  }
  v77 = (_OWORD *)((char *)this + 904);
  *((_QWORD *)this + 114) = &unk_1E25C21E8;
  *(_OWORD *)((char *)this + 920) = *v7;
  v85 = *(_OWORD *)((char *)a2 + 24);
  v86 = *(_OWORD *)((char *)a2 + 40);
  v87 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 984) = v87;
  *(_OWORD *)((char *)this + 936) = v85;
  *(_OWORD *)((char *)this + 952) = v86;
  v81 = *(_OWORD *)((char *)a2 + 88);
  v82 = *(_OWORD *)((char *)a2 + 104);
  v83 = *(_OWORD *)((char *)a2 + 120);
  v84 = *(_OWORD *)((char *)a2 + 130);
LABEL_48:
  *(_OWORD *)((char *)v77 + 138) = v84;
  v77[7] = v82;
  v77[8] = v83;
  v77[6] = v81;
  *((_BYTE *)this + 904) = 1;
}

void sub_18D22AB30(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25C3490;
  sub_18D07BD60((_QWORD *)(a1 + 4168));
  if (*(_BYTE *)(a1 + 1528))
    *(_BYTE *)(a1 + 1528) = 0;
  if (*(_BYTE *)(a1 + 1376))
    *(_BYTE *)(a1 + 1376) = 0;
  if (*(_BYTE *)(a1 + 1352))
    *(_BYTE *)(a1 + 1352) = 0;
  if (*(_BYTE *)(a1 + 1064))
    *(_BYTE *)(a1 + 1064) = 0;
  if (*(_BYTE *)(a1 + 904))
    *(_BYTE *)(a1 + 904) = 0;
  if (*(_BYTE *)(a1 + 696))
    *(_BYTE *)(a1 + 696) = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

void sub_18D22ABB0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25C3490;
  sub_18D07BD60((_QWORD *)(a1 + 4168));
  if (*(_BYTE *)(a1 + 1528))
    *(_BYTE *)(a1 + 1528) = 0;
  if (*(_BYTE *)(a1 + 1376))
    *(_BYTE *)(a1 + 1376) = 0;
  if (*(_BYTE *)(a1 + 1352))
    *(_BYTE *)(a1 + 1352) = 0;
  if (*(_BYTE *)(a1 + 1064))
    *(_BYTE *)(a1 + 1064) = 0;
  if (*(_BYTE *)(a1 + 904))
    *(_BYTE *)(a1 + 904) = 0;
  if (*(_BYTE *)(a1 + 696))
    *(_BYTE *)(a1 + 696) = 0;
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D22AC44(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (*(_BYTE *)result)
  {
    v2 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 32) = v2;
    v3 = *(_OWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(result + 96) = v5;
    *(_OWORD *)(result + 48) = v3;
    *(_OWORD *)(result + 64) = v4;
    v6 = *(_OWORD *)(a2 + 104);
    v7 = *(_OWORD *)(a2 + 120);
    v8 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(result + 144) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(result + 160) = v8;
    *(_OWORD *)(result + 112) = v6;
    *(_OWORD *)(result + 128) = v7;
    if (result + 8 != a2)
    {
      *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(result + 192) = *(_OWORD *)(a2 + 184);
    }
  }
  else
  {
    *(_QWORD *)(result + 8) = &unk_1E25C35E8;
    v9 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 16) = v9;
    v10 = *(_OWORD *)(a2 + 40);
    v11 = *(_OWORD *)(a2 + 56);
    v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(result + 96) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(result + 80) = v12;
    *(_OWORD *)(result + 64) = v11;
    *(_OWORD *)(result + 48) = v10;
    v13 = *(_OWORD *)(a2 + 104);
    v14 = *(_OWORD *)(a2 + 120);
    v15 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(result + 160) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(result + 144) = v15;
    *(_OWORD *)(result + 128) = v14;
    *(_OWORD *)(result + 112) = v13;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    if (result + 8 != a2)
    {
      *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(result + 192) = *(_OWORD *)(a2 + 184);
    }
    *(_BYTE *)result = 1;
  }
  return result;
}

void sub_18D22AD40()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D22AD54()
{
}

__n128 sub_18D22AD60(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1720;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2408;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v3;
  *(_QWORD *)(v2 + 144) = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v4;
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v5;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

uint64_t raven::MountStateChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::PositionChangeChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = a3;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 920);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 + 2512);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::PositionChangeChecker::HandleEvent(raven::PositionChangeChecker *this, const raven::PositionChangeEvent *a2, raven::PositionChangeEvent *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  BOOL v23;
  cnprint::CNPrinter *v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char *v35;
  uint64_t v36;
  double v37;
  int8x16_t *v38;
  uint64_t result;
  int v40;
  uint64_t **v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  uint64_t **v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  int v53;
  double v54;
  _BOOL4 v55;
  int v56;
  double v57;
  char v58;
  void *v59;
  int8x16_t v60;
  _QWORD v61[2];

  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v61[0]) = 12;
    v60.i8[0] = 4;
    v36 = (*(uint64_t (**)(const raven::PositionChangeEvent *, const raven::PositionChangeEvent *, raven::PositionChangeEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v57 = v37 + (double)v36;
    v35 = "t,%.3lf,PositionChangeChecker, not configured";
    v38 = &v60;
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, (unsigned __int8 *)v38, v35, v29, v30, v31, v32, v33, SLOBYTE(v57));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 56) == 9)
    return 0xFFFFFFFFLL;
  v6 = *(_OWORD *)((char *)a2 + 8);
  v7 = *(_OWORD *)((char *)a2 + 24);
  v8 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)a3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 40) = v8;
  *(_OWORD *)((char *)a3 + 24) = v7;
  *(_OWORD *)((char *)a3 + 8) = v6;
  v9 = *(_OWORD *)((char *)a2 + 72);
  v10 = *(_OWORD *)((char *)a2 + 88);
  v11 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a3 + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 104) = v11;
  *(_OWORD *)((char *)a3 + 88) = v10;
  *(_OWORD *)((char *)a3 + 72) = v9;
  v12 = *(_OWORD *)((char *)a2 + 136);
  v13 = *(_OWORD *)((char *)a2 + 152);
  v14 = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)a3 + 184) = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a3 + 168) = v14;
  *(_OWORD *)((char *)a3 + 152) = v13;
  *(_OWORD *)((char *)a3 + 136) = v12;
  v15 = (char *)a3 + 200;
  sub_18D053AA8((uint64_t)a3 + 200, (uint64_t)a2 + 200);
  sub_18D053AA8((uint64_t)a3 + 264, (uint64_t)a2 + 264);
  v16 = (_QWORD *)*((_QWORD *)a3 + 29);
  if ((*v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v16[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v16[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0xFFFFFFFFLL;
  }
  v61[0] = (*(uint64_t (**)(raven::PositionChangeEvent *))(*(_QWORD *)a3 + 16))(a3);
  v61[1] = v17;
  v60 = *(int8x16_t *)((char *)a3 + 104);
  v19 = CNTimeSpan::operator-((uint64_t)v61, &v60, v60, v18);
  v21 = *(double *)&v20 + (double)v19;
  v22 = (unint64_t)(COERCE__INT64(fabs(v21)) - 0x10000000000000) >> 53;
  v23 = v21 < 0.0 || v22 > 0x3FE;
  if (v23 && (unint64_t)(*(_QWORD *)&v21 - 1) > 0xFFFFFFFFFFFFELL)
    return 0xFFFFFFFFLL;
  if (sub_18D1868AC((uint64_t)a3 + 264, v20) > *((double *)this + 4))
    return 0xFFFFFFFFLL;
  v60.i8[0] = 0;
  sub_18D22B28C((uint64_t)&v59, (uint64_t)a3 + 264, (BOOL *)v60.i8);
  v59 = &unk_1E25C5E70;
  if (!v60.i8[0])
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 9))
    return 0;
  sub_18D192CE4((uint64_t)v15);
  v27 = v26 / v21;
  if (v26 / v21 > 250.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(v25) > 1)
      return 0xFFFFFFFFLL;
    LOWORD(v61[0]) = 12;
    v58 = 1;
    v28 = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
    v57 = v34 + (double)v28;
    v35 = "t,%.3lf,PositionChangeChecker: Position Change too large,returning check failed,PosChange[s] %.3lf";
    goto LABEL_31;
  }
  result = (uint64_t)sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890);
  if (result)
  {
    v40 = *((unsigned __int8 *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890)+ 1344);
    v41 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890);
    if (v40)
    {
      v42 = *((double *)v41 + 169);
      v43 = (double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890);
      v44 = v43[173];
LABEL_28:
      if (v27 > v42 + 13.4112)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v43) > 1)
          return 0xFFFFFFFFLL;
        LOWORD(v61[0]) = 12;
        v58 = 1;
        v50 = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
        v57 = v51 + (double)v50;
        v35 = "t,%.3lf,PositionChangeChecker: Position Change too large,returning check failed,raven speed %.3lf, PosChange[s] %.3lf";
LABEL_31:
        v38 = (int8x16_t *)&v58;
        goto LABEL_20;
      }
      v52 = *((unsigned int *)a2 + 68);
      if ((int)v52 < 1)
      {
        v54 = 0.0;
      }
      else
      {
        v53 = 0;
        v54 = 0.0;
        do
        {
          v54 = v54 + *(double *)(*((_QWORD *)a2 + 37) + 8 * v53);
          v53 += *((_DWORD *)a2 + 71) + 1;
          --v52;
        }
        while (v52);
      }
      v55 = fabs(vabdd_f64(v27, v42) / sqrt(v44 + v54 / (v21 * v21))) > *((double *)this + 3);
      if (*((_BYTE *)this + 8))
        v56 = v55;
      else
        v56 = 1;
      return (v56 << 31 >> 31);
    }
    if (*((_BYTE *)v41 + 1544))
    {
      v45 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890) + 194);
      v46 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890) + 195);
      v47 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890);
      v42 = sqrt(v46 * v46 + v45 * v45 + *((double *)v47 + 196) * *((double *)v47 + 196));
      v48 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890) + 197);
      v49 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890) + 200);
      v43 = (double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D331890);
      v44 = v48 + v49 + v43[202];
      goto LABEL_28;
    }
    return 0;
  }
  return result;
}

void sub_18D22B28C(uint64_t a1, uint64_t a2, BOOL *a3)
{
  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D05C654(a2, a1, a3);
}

void sub_18D22B2E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t raven::GnssPhaseTrackingStore::ComputeKey(uint64_t a1, int a2)
{
  return a2 | ((*(_DWORD *)(a1 + 28) + 1000 * *(unsigned __int8 *)(a1 + 24)) << 8);
}

void raven::GnssPhaseTrackingStore::FormAveragedDopplerWorker(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  char v20;
  int v21;
  unsigned __int8 v22;
  float v23;
  int64x2_t v24;
  char v25;
  unsigned __int8 v26;
  __int16 v27;
  unsigned __int8 v28;
  __int16 v29;

  if (!sub_18D22B4D4(a2) || !sub_18D22B4D4(a3 + 128) || *(_BYTE *)(a2 + 48) || *(_BYTE *)(a3 + 176))
    goto LABEL_14;
  if (!*(_BYTE *)(a3 + 152) || !*(_BYTE *)(a2 + 24))
    sub_18D164CA0();
  v15 = *(_QWORD *)(a3 + 144);
  v16 = *(_QWORD *)(a2 + 16);
  if (v15 <= v16)
  {
    v29 = 12;
    v28 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "#phase_store,invalid time order,last,%llu,curr,%llu", v10, v11, v12, v13, v14, v16);
LABEL_14:
    v25 = 0;
    *(_BYTE *)a5 = 0;
    goto LABEL_15;
  }
  if (v15 != a4)
  {
    v27 = 12;
    v26 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "#phase_store,desired applicability does not match data,desired,%llu,curr,%llu", v10, v11, v12, v13, v14, a4);
    goto LABEL_14;
  }
  v17 = (double)(a4 - v16) * 0.000000001;
  if (v17 < *(double *)(*(_QWORD *)a1 + 624) || v17 > *(double *)(*(_QWORD *)a1 + 632))
    goto LABEL_14;
  v18 = *(double *)(a3 + 168);
  v19 = *(double *)(a3 + 160) - *(double *)(a2 + 32);
  v20 = *(_BYTE *)(a3 + 8);
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  v21 = *(_DWORD *)(a3 + 192);
  v22 = *(_BYTE *)(a3 + 196);
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0x7FF8000000000000;
  *(_DWORD *)(a5 + 96) = 4;
  *(_BYTE *)(a5 + 100) = v20;
  *(_QWORD *)(a5 + 104) = 0x7FF8000000000000;
  v23 = 0.299792458 / v17 * v18;
  *(_DWORD *)(a5 + 112) = v21;
  *(double *)(a5 + 120) = 0.299792458 / v17 * v19;
  v24 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a5 + 128) = v24;
  *(int64x2_t *)(a5 + 144) = v24;
  *(_QWORD *)(a5 + 160) = 0x7FF8000000000000;
  *(float *)(a5 + 168) = v23;
  *(_BYTE *)(a5 + 172) = 0;
  *(_BYTE *)(a5 + 176) = 0;
  *(_BYTE *)(a5 + 180) = 0;
  *(_BYTE *)(a5 + 184) = 0;
  *(_BYTE *)(a5 + 188) = 0;
  *(_WORD *)(a5 + 189) = v22;
  *(double *)(a5 + 192) = -v17;
  *(_QWORD *)(a5 + 200) = 0;
  v25 = 1;
LABEL_15:
  *(_BYTE *)(a5 + 208) = v25;
}

BOOL sub_18D22B4D4(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  BOOL v3;

  if (!*(_BYTE *)(a1 + 8)
    || !*(_BYTE *)(a1 + 24)
    || *(_QWORD *)a1 > *(_QWORD *)(a1 + 16)
    || (*(_QWORD *)(a1 + 32) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  v1 = *(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFLL;
  if (*(double *)(a1 + 40) > 0.0)
  {
    v3 = __OFSUB__(v1, 0x7FF0000000000000);
    v2 = v1 - 0x7FF0000000000000 < 0;
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  return v2 != v3;
}

__n128 raven::GnssPhaseTrackingStore::FormAveragedDoppler@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  int *v14;

  v13 = *(unsigned __int8 *)(a3 + 8) | ((*(_DWORD *)(a2 + 28) + 1000 * *(unsigned __int8 *)(a2 + 24)) << 8);
  v14 = (int *)&v13;
  v9 = sub_18D22B5E8((float *)(a1 + 8), &v13, (uint64_t)&std::piecewise_construct, &v14);
  raven::GnssPhaseTrackingStore::FormAveragedDopplerWorker(a1, (uint64_t)(v9 + 24), a3, a4, a5);
  result = *(__n128 *)(a3 + 128);
  v11 = *(_OWORD *)(a3 + 144);
  v12 = *(_OWORD *)(a3 + 160);
  v9[72] = *(_BYTE *)(a3 + 176);
  *(_OWORD *)(v9 + 56) = v12;
  *(_OWORD *)(v9 + 40) = v11;
  *(__n128 *)(v9 + 24) = result;
  return result;
}

char *sub_18D22B5E8(float *a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v34;

  v7 = *a2;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x50uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 56) = 0u;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(int64x2_t *)(v11 + 56) = vdupq_n_s64(0x7FF8000000000000uLL);
  v11[72] = 1;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v8 && (float)(v14 * (float)v8) >= v13)
  {
    v7 = v4;
    goto LABEL_64;
  }
  v15 = 1;
  if (v8 >= 3)
    v15 = (v8 & (v8 - 1)) != 0;
  v16 = v15 | (2 * v8);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v8 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v8)
  {
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v8 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v8 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_18D0788A0();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v22)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v8 = (unint64_t)prime;
LABEL_60:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v7)
      v7 %= v8;
  }
  else
  {
    v7 = ((_DWORD)v8 - 1) & v7;
  }
LABEL_64:
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v31)
  {
    *(_QWORD *)v11 = *v31;
LABEL_72:
    *v31 = v11;
    goto LABEL_73;
  }
  *(_QWORD *)v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v11;
  v30[v7] = a1 + 4;
  if (*(_QWORD *)v11)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v32 >= v8)
        v32 %= v8;
    }
    else
    {
      v32 &= v8 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v11;
}

void sub_18D22B9F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double raven::RavenPassThroughEstimator::RavenPassThroughEstimator(raven::RavenPassThroughEstimator *this)
{
  uint64_t v1;
  double result;
  int64x2_t v3;

  raven::RavenEstimator::RavenEstimator((uint64_t)this, 1);
  *(_QWORD *)v1 = off_1E25C3320;
  *(_QWORD *)(v1 + 2536) = &unk_1E25C21B8;
  result = 0.0;
  *(_OWORD *)(v1 + 2544) = 0u;
  *(_BYTE *)(v1 + 2560) = 0;
  *(_OWORD *)(v1 + 2568) = 0u;
  *(_BYTE *)(v1 + 2584) = 0;
  *(_OWORD *)(v1 + 2592) = 0u;
  *(_BYTE *)(v1 + 2608) = 0;
  *(_OWORD *)(v1 + 2616) = 0u;
  *(_QWORD *)(v1 + 2632) = 0x7FF8000000000000;
  *(_OWORD *)(v1 + 2640) = 0u;
  *(_BYTE *)(v1 + 2656) = 0;
  *(_BYTE *)(v1 + 2680) = 0;
  *(_OWORD *)(v1 + 2664) = 0u;
  *(_OWORD *)(v1 + 2688) = 0u;
  *(_BYTE *)(v1 + 2704) = 0;
  *(_OWORD *)(v1 + 2712) = 0u;
  *(_QWORD *)(v1 + 2728) = 0x7FF8000000000000;
  *(_WORD *)(v1 + 2736) = 0;
  *(_BYTE *)(v1 + 2738) = 0;
  *(_QWORD *)(v1 + 2744) = 0x7FF8000000000000;
  v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v1 + 2752) = v3;
  *(int64x2_t *)(v1 + 2768) = v3;
  *(int64x2_t *)(v1 + 2784) = v3;
  *(int64x2_t *)(v1 + 2800) = v3;
  *(_BYTE *)(v1 + 2816) = 0;
  *(_QWORD *)(v1 + 2824) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 2832) = v3;
  *(int64x2_t *)(v1 + 2848) = v3;
  *(int64x2_t *)(v1 + 2864) = v3;
  *(int64x2_t *)(v1 + 2880) = v3;
  *(_QWORD *)(v1 + 2896) = &unk_1E25C2278;
  *(_BYTE *)(v1 + 2920) = 0;
  *(_OWORD *)(v1 + 2904) = 0u;
  *(_OWORD *)(v1 + 2928) = 0u;
  *(_BYTE *)(v1 + 2944) = 0;
  *(_OWORD *)(v1 + 2952) = 0u;
  *(_BYTE *)(v1 + 2968) = 0;
  *(_OWORD *)(v1 + 2976) = 0u;
  *(_QWORD *)(v1 + 2992) = 0x7FF8000000000000;
  *(_OWORD *)(v1 + 3000) = 0u;
  *(_BYTE *)(v1 + 3016) = 0;
  *(_OWORD *)(v1 + 3024) = 0u;
  *(_BYTE *)(v1 + 3040) = 0;
  *(_OWORD *)(v1 + 3048) = 0u;
  *(_BYTE *)(v1 + 3064) = 0;
  *(_OWORD *)(v1 + 3072) = 0u;
  *(_QWORD *)(v1 + 3088) = 0x7FF8000000000000;
  *(_DWORD *)(v1 + 3096) = 0;
  *(int64x2_t *)(v1 + 3104) = v3;
  *(int64x2_t *)(v1 + 3120) = v3;
  *(int64x2_t *)(v1 + 3136) = v3;
  *(int64x2_t *)(v1 + 3152) = v3;
  *(_QWORD *)(v1 + 3168) = 0x7FF8000000000000;
  *(_BYTE *)(v1 + 3176) = 0;
  *(int64x2_t *)(v1 + 3184) = v3;
  *(int64x2_t *)(v1 + 3200) = v3;
  *(int64x2_t *)(v1 + 3216) = v3;
  *(int64x2_t *)(v1 + 3232) = v3;
  *(_QWORD *)(v1 + 3248) = 0x7FF8000000000000;
  *(_BYTE *)(v1 + 3280) = 0;
  *(_QWORD *)(v1 + 3272) = 0;
  *(_OWORD *)(v1 + 3256) = 0u;
  return result;
}

double raven::RavenPassThroughEstimator::GetHDOP(raven::RavenPassThroughEstimator *this)
{
  return NAN;
}

double raven::RavenPassThroughEstimator::GetPSRPostFitResidualsBasedHorizontalPositionMisclosure(raven::RavenPassThroughEstimator *this)
{
  return NAN;
}

void raven::RavenPassThroughEstimator::GetRavenSolution(raven::RavenPassThroughEstimator *this@<X0>, uint64_t a2@<X8>)
{
  int64x2_t *v4;
  int64x2_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  __double2 v25;
  double v26;
  int64x2_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  double *v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  double *v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  double *v57;
  float64x2_t v58;
  uint64_t v59;
  float64x2_t *v60;
  float64x2_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  double v67;
  _BYTE v68[136];
  _BYTE v69[136];
  _BYTE v70[48];
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  _BYTE v76[136];
  _BYTE v77[24];
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  _BYTE v82[56];
  void *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  void *v93;
  __int128 v94;
  uint64_t v95;
  double *v96;
  uint64_t v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  double *v101;
  _QWORD v102[4];
  void *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  void *v108;
  __int128 v109;
  uint64_t v110;
  double *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char v115[8];
  char v116;
  uint64_t v117;
  double v118;
  double v119;
  double v120;

  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  v4 = (int64x2_t *)(a2 + 264);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 96) = 0;
  v5 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 104) = v5;
  *(int64x2_t *)(a2 + 120) = v5;
  *(int64x2_t *)(a2 + 136) = v5;
  *(int64x2_t *)(a2 + 152) = v5;
  *(_QWORD *)(a2 + 168) = 0x7FF8000000000000;
  *(_WORD *)(a2 + 176) = 0;
  *(int64x2_t *)(a2 + 184) = v5;
  *(int64x2_t *)(a2 + 200) = v5;
  *(int64x2_t *)(a2 + 216) = v5;
  *(int64x2_t *)(a2 + 232) = v5;
  *(int64x2_t *)(a2 + 248) = v5;
  *(int64x2_t *)(a2 + 264) = v5;
  *(int64x2_t *)(a2 + 280) = v5;
  *(_BYTE *)(a2 + 296) = 0;
  *(int64x2_t *)(a2 + 304) = v5;
  *(int64x2_t *)(a2 + 320) = v5;
  *(int64x2_t *)(a2 + 336) = v5;
  *(int64x2_t *)(a2 + 352) = v5;
  *(_QWORD *)(a2 + 368) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 376) = 0;
  *(int64x2_t *)(a2 + 384) = v5;
  *(int64x2_t *)(a2 + 400) = v5;
  *(int64x2_t *)(a2 + 416) = v5;
  *(int64x2_t *)(a2 + 432) = v5;
  *(_QWORD *)(a2 + 448) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 456) = 0;
  *(int64x2_t *)(a2 + 464) = v5;
  *(int64x2_t *)(a2 + 480) = v5;
  *(int64x2_t *)(a2 + 496) = v5;
  *(int64x2_t *)(a2 + 512) = v5;
  *(int64x2_t *)(a2 + 528) = v5;
  *(int64x2_t *)(a2 + 544) = v5;
  *(int64x2_t *)(a2 + 560) = v5;
  *(_BYTE *)(a2 + 576) = 0;
  *(int64x2_t *)(a2 + 584) = v5;
  *(int64x2_t *)(a2 + 600) = v5;
  *(int64x2_t *)(a2 + 616) = v5;
  *(int64x2_t *)(a2 + 632) = v5;
  *(_QWORD *)(a2 + 648) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 656) = 0;
  *(int64x2_t *)(a2 + 664) = v5;
  *(int64x2_t *)(a2 + 680) = v5;
  *(int64x2_t *)(a2 + 696) = v5;
  *(int64x2_t *)(a2 + 712) = v5;
  *(_QWORD *)(a2 + 728) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 736) = 0;
  *(int64x2_t *)(a2 + 744) = v5;
  *(int64x2_t *)(a2 + 760) = v5;
  *(int64x2_t *)(a2 + 776) = v5;
  *(int64x2_t *)(a2 + 792) = v5;
  *(_QWORD *)(a2 + 808) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 816) = 0;
  *(int64x2_t *)(a2 + 824) = v5;
  *(int64x2_t *)(a2 + 840) = v5;
  *(_QWORD *)(a2 + 856) = 0x7FF8000000000000;
  if (!cnprint::CNPrinter::GetLogLevel(this))
  {
    LOWORD(v83) = 12;
    LOBYTE(v93) = 0;
    *(_OWORD *)v77 = *(_OWORD *)((char *)this + 136);
    v6 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v77, "position event time,%.3lf,velocity event time,%.3lf", *((double *)this + 319) + (double)*((uint64_t *)this + 318), *((double *)this + 364) + (double)*((uint64_t *)this + 363));
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, (unsigned __int8 *)&v93, "%s", v7, v8, v9, v10, v11, v12);
  }
  if (!*((_BYTE *)this + 2816))
  {
    *(_DWORD *)(a2 + 100) = 0;
    *(_DWORD *)(a2 + 97) = 0;
    *(_DWORD *)(a2 + 178) = 0;
    *(_WORD *)(a2 + 182) = 0;
    *(_DWORD *)(a2 + 300) = 0;
    *(_DWORD *)(a2 + 297) = 0;
    *(_DWORD *)(a2 + 380) = 0;
    *(_DWORD *)(a2 + 377) = 0;
    *(_DWORD *)(a2 + 460) = 0;
    *(_DWORD *)(a2 + 457) = 0;
    *(_DWORD *)(a2 + 580) = 0;
    *(_DWORD *)(a2 + 577) = 0;
    *(_DWORD *)(a2 + 660) = 0;
    *(_DWORD *)(a2 + 657) = 0;
    *(_DWORD *)(a2 + 740) = 0;
    *(_DWORD *)(a2 + 737) = 0;
    *(_DWORD *)(a2 + 820) = 0;
    *(_DWORD *)(a2 + 817) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 96) = 0;
    v27 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a2 + 104) = v27;
    *(int64x2_t *)(a2 + 120) = v27;
    *(int64x2_t *)(a2 + 136) = v27;
    *(int64x2_t *)(a2 + 152) = v27;
    *(_QWORD *)(a2 + 168) = 0x7FF8000000000000;
    *(_WORD *)(a2 + 176) = 0;
    *(int64x2_t *)(a2 + 184) = v27;
    *(int64x2_t *)(a2 + 200) = v27;
    *(int64x2_t *)(a2 + 216) = v27;
    *(int64x2_t *)(a2 + 232) = v27;
    *(int64x2_t *)(a2 + 248) = v27;
    *v4 = v27;
    v4[1] = v27;
    *(_BYTE *)(a2 + 296) = 0;
    *(int64x2_t *)(a2 + 304) = v27;
    *(int64x2_t *)(a2 + 320) = v27;
    *(int64x2_t *)(a2 + 336) = v27;
    *(int64x2_t *)(a2 + 352) = v27;
    *(_QWORD *)(a2 + 368) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 376) = 0;
    *(int64x2_t *)(a2 + 384) = v27;
    *(int64x2_t *)(a2 + 400) = v27;
    *(int64x2_t *)(a2 + 416) = v27;
    *(int64x2_t *)(a2 + 432) = v27;
    *(_QWORD *)(a2 + 448) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 456) = 0;
    *(int64x2_t *)(a2 + 464) = v27;
    *(int64x2_t *)(a2 + 480) = v27;
    *(int64x2_t *)(a2 + 496) = v27;
    *(int64x2_t *)(a2 + 512) = v27;
    *(int64x2_t *)(a2 + 528) = v27;
    *(int64x2_t *)(a2 + 544) = v27;
    *(int64x2_t *)(a2 + 560) = v27;
    *(_BYTE *)(a2 + 576) = 0;
    v4[20] = v27;
    v4[21] = v27;
    v4[22] = v27;
    v4[23] = v27;
    *(_QWORD *)(a2 + 648) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 656) = 0;
    v4[25] = v27;
    v4[26] = v27;
    v4[27] = v27;
    v4[28] = v27;
    *(_QWORD *)(a2 + 728) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 736) = 0;
    v4[30] = v27;
    v4[31] = v27;
    v4[32] = v27;
    v4[33] = v27;
    *(_QWORD *)(a2 + 808) = 0x7FF8000000000000;
    *(_BYTE *)(a2 + 816) = 0;
    v4[35] = v27;
    v4[36] = v27;
    *(_QWORD *)(a2 + 856) = 0x7FF8000000000000;
    v28 = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 136);
    *(_OWORD *)(a2 + 16) = v28;
    v29 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(a2 + 80) = v29;
    v30 = *(_OWORD *)((char *)this + 184);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)(a2 + 48) = v30;
    return;
  }
  v13 = *((_OWORD *)this + 168);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 167);
  *(_OWORD *)(a2 + 48) = v13;
  v14 = *((_OWORD *)this + 170);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 169);
  *(_OWORD *)(a2 + 80) = v14;
  v15 = *((int8x16_t *)this + 165);
  v16 = *((int8x16_t *)this + 166);
  *(int8x16_t *)a2 = v15;
  *(int8x16_t *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 296) = 1;
  v15.i64[0] = *((_QWORD *)this + 353);
  v16.i64[0] = *((_QWORD *)this + 354);
  *(_QWORD *)(a2 + 304) = v15.i64[0];
  *(_QWORD *)(a2 + 312) = v16.i64[0];
  v17 = *((_QWORD *)this + 355);
  v18 = *((_QWORD *)this + 356);
  *(_QWORD *)(a2 + 320) = v17;
  *(_QWORD *)(a2 + 328) = v18;
  v19 = *((_QWORD *)this + 357);
  v20 = *((_QWORD *)this + 358);
  *(_QWORD *)(a2 + 336) = v19;
  *(_QWORD *)(a2 + 344) = v20;
  v21 = *((_QWORD *)this + 359);
  v22 = *((_QWORD *)this + 360);
  *(_QWORD *)(a2 + 352) = v21;
  *(_QWORD *)(a2 + 360) = v22;
  v23 = *((_QWORD *)this + 361);
  *(_QWORD *)(a2 + 368) = v23;
  *(_BYTE *)(a2 + 96) = 1;
  *(_QWORD *)(a2 + 104) = v15.i64[0];
  *(_QWORD *)(a2 + 112) = v16.i64[0];
  *(_QWORD *)(a2 + 120) = v17;
  *(_QWORD *)(a2 + 128) = v18;
  *(_QWORD *)(a2 + 136) = v19;
  *(_QWORD *)(a2 + 144) = v20;
  *(_QWORD *)(a2 + 152) = v21;
  *(_QWORD *)(a2 + 160) = v22;
  *(_QWORD *)(a2 + 168) = v23;
  if (!*((_BYTE *)this + 3097))
    goto LABEL_40;
  *(_BYTE *)(a2 + 176) = 1;
  v24 = *((double *)this + 388);
  *(double *)(a2 + 184) = v24;
  if (!*((_BYTE *)this + 3099) || !*((_BYTE *)this + 2737) || !*((_BYTE *)this + 2738))
    goto LABEL_40;
  v25 = __sincos_stret(*((double *)this + 390));
  v118 = v24 * v25.__sinval;
  v119 = v24 * v25.__cosval;
  if (*((_BYTE *)this + 3098))
    v26 = *((double *)this + 389);
  else
    v26 = 0.0;
  v120 = v26;
  v31 = sub_18D1D290C((uint64_t)v115, *((double *)this + 343), *((double *)this + 344));
  if (v116)
  {
    sub_18D056ECC(v31, &v118, (double *)&v113);
    *(_BYTE *)(a2 + 376) = 1;
    *(_OWORD *)(a2 + 384) = v113;
    *(_QWORD *)(a2 + 400) = v114;
    v110 = 0x300000003;
    v108 = &unk_1E25C78E0;
    v111 = (double *)&v112;
    v109 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v108, 0.0);
    v32 = v111;
    *v111 = *((double *)this + 391) * 0.5;
    v33 = HIDWORD(v109);
    v32[HIDWORD(v109) + 1] = *((double *)this + 391) * 0.5;
    if (*((_BYTE *)this + 3098))
      v34 = *((_QWORD *)this + 394);
    else
      v34 = 0x407577C048D159E1;
    *(_QWORD *)&v32[2 * v33 + 2] = v34;
    v105 = 0x300000003;
    v103 = &unk_1E25C78E0;
    v104 = xmmword_18D30BB60;
    v106 = &v107;
    v42 = sub_18D04BB5C((uint64_t)v115, (uint64_t)&v108, (uint64_t)&v103);
    v43 = v106;
    *(_QWORD *)(a2 + 408) = *v106;
    v44 = SHIDWORD(v104);
    v45 = &v43[SHIDWORD(v104)];
    *(_QWORD *)(a2 + 416) = *v45;
    *(_QWORD *)(a2 + 424) = v43[2 * v44];
    *(_QWORD *)(a2 + 432) = v45[1];
    v46 = &v43[2 * (int)v44];
    *(_QWORD *)(a2 + 440) = v46[1];
    *(_QWORD *)(a2 + 448) = v46[2];
    v100 = 0x200000002;
    v98 = &unk_1E25C75B0;
    v15 = (int8x16_t)xmmword_18D319340;
    v99 = xmmword_18D319340;
    v101 = (double *)v102;
    if (*((_BYTE *)this + 3097) && *((_BYTE *)this + 3099))
    {
      v47 = *((double *)this + 391);
      v48 = *((_QWORD *)this + 393);
      *(double *)v102 = v47;
      v102[1] = v48;
      v49 = *((_QWORD *)this + 396);
      v102[2] = v48;
      v102[3] = v49;
      if (*((_BYTE *)this + 1208) && (v50 = *((unsigned __int8 *)this + 1320), v50 <= 7) && ((1 << v50) & 0xCE) != 0)
        v51 = (double *)(*((_QWORD *)this + 146) + 936);
      else
        v51 = (double *)(*((_QWORD *)this + 146) + 928);
      v67 = 0.0;
      v52 = cnstatistics::InverseNormal((cnstatistics *)v42, 1.0 - *v51, 0.0, sqrt(v47));
      v95 = 0x300000004;
      v93 = &unk_1E25C7F70;
      v96 = (double *)&v97;
      v94 = xmmword_18D3130A0;
      sub_18D04BE88((uint64_t)&v93, 0.0);
      v53 = *((uint64_t *)this + 388);
      if (*((_BYTE *)this + 3098))
        v67 = *((double *)this + 389);
      if (*(double *)&v53 <= v52)
      {
        v15 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
        *(int8x16_t *)(a2 + 192) = v15;
        *(_QWORD *)(a2 + 208) = 0x7FF8000000000000;
        *(_BYTE *)(a2 + 177) = 0;
        *(_QWORD *)(a2 + 248) = 0x7FF8000000000000;
        *(_QWORD *)(a2 + 272) = 0x7FF8000000000000;
        *(_QWORD *)(a2 + 288) = 0x7FF8000000000000;
        *(double *)v16.i64 = *v101 * 1.25;
        *(_QWORD *)(a2 + 216) = v16.i64[0];
        *(int8x16_t *)(a2 + 224) = v15;
        *(_QWORD *)(a2 + 240) = 0x7FF8000000000000;
        *(int8x16_t *)(a2 + 256) = v15;
        *(_QWORD *)(a2 + 280) = 0x7FF8000000000000;
      }
      else
      {
        v54 = v67 * v67 + *(double *)&v53 * *(double *)&v53;
        v55 = sqrt(v54);
        *(double *)&v56 = v54 * v55;
        v118 = v25.__sinval * *(double *)&v53 / v55;
        v119 = v25.__cosval * *(double *)&v53 / v55;
        v120 = v67 / v55;
        v57 = v96;
        *v96 = *(double *)&v53 / v55;
        v58 = (float64x2_t)vdupq_lane_s64(v56, 0);
        *(float64x2_t *)(v57 + 1) = vdivq_f64(vmulq_n_f64(vmulq_n_f64((float64x2_t)v25, v67), v67), v58);
        v57[3] = -(*(double *)&v53 * v67) / *(double *)&v56;
        v59 = SHIDWORD(v94);
        v57[SHIDWORD(v94)] = 0.0;
        v57[(int)v59 + 1] = v25.__cosval * *(double *)&v53 / v55;
        v57[(int)v59 + 2] = -(v25.__sinval * *(double *)&v53) / v55;
        v57[(int)v59 + 3] = 0.0;
        v57[2 * v59] = v67 / v55;
        v60 = (float64x2_t *)&v57[2 * (int)v59];
        v60->f64[1] = *(double *)&v53 * -(v25.__sinval * v67) / *(double *)&v56;
        v61 = (float64x2_t)vdupq_lane_s64(v53, 0);
        v61.f64[0] = -(v25.__cosval * v67);
        v60[1] = vdivq_f64(vmulq_n_f64(v61, *(double *)&v53), v58);
        sub_18D056ECC((uint64_t)v115, &v118, (double *)&v113);
        *(_OWORD *)(a2 + 192) = v113;
        *(_QWORD *)(a2 + 208) = v114;
        *(_BYTE *)(a2 + 177) = 1;
        v90 = 0x300000003;
        v88 = &unk_1E25C78E0;
        v89 = xmmword_18D30BB60;
        v91 = &v92;
        if (v116)
          sub_18D053AA8((uint64_t)&v88, (uint64_t)&v117);
        v85 = 0x400000004;
        v83 = &unk_1E25C7FA0;
        v86 = &v87;
        v84 = xmmword_18D313080;
        sub_18D04BE88((uint64_t)&v83, 0.0);
        *v86 = 0x3FF0000000000000;
        v78 = 0x300000001;
        *(_QWORD *)v77 = &unk_1E25C6C50;
        v79 = &v80;
        *(_OWORD *)&v77[8] = xmmword_18D314670;
        v80 = 0x200000001;
        v81 = 3;
        sub_18D16169C((uint64_t)v77, (uint64_t)v82);
        sub_18D04F764((uint64_t)v77, (uint64_t)&v83, (uint64_t)v82, (uint64_t)v82);
        sub_18D16171C((uint64_t)v77, (uint64_t)&v88);
        sub_18D1EBCB4((uint64_t)&v83, (uint64_t)&v93, (uint64_t)v76);
        v73 = 0x300000003;
        v71 = &unk_1E25C78E0;
        v74 = &v75;
        v72 = xmmword_18D30BB60;
        sub_18D04BE88((uint64_t)&v71, 0.0);
        v78 = 0x200000001;
        *(_QWORD *)v77 = &unk_1E25C6BF0;
        v79 = &v80;
        *(_OWORD *)&v77[8] = xmmword_18D319920;
        v80 = 0x100000000;
        sub_18D1B82C8((uint64_t)v77, (uint64_t)v70);
        sub_18D1CDF50((uint64_t)v77, (uint64_t)&v71, (uint64_t)v70, (uint64_t)v70);
        sub_18D1CDB38((uint64_t)v77, (uint64_t)&v98);
        if (*((_BYTE *)this + 3098))
          v62 = *((_QWORD *)this + 394);
        else
          v62 = 0x407577C048D159E1;
        v74[2 * SHIDWORD(v72) + 2] = v62;
        sub_18D22C628((uint64_t)v69, (uint64_t)v76, (uint64_t)&v71);
        sub_18D191348((uint64_t)v76, (uint64_t)v68);
        sub_18D22C5BC((uint64_t)v77, (uint64_t)v69, (uint64_t)v68);
        v63 = v79;
        *(_QWORD *)(a2 + 216) = *v79;
        v64 = *(int *)&v77[20];
        *(_QWORD *)(a2 + 224) = v63[*(int *)&v77[20]];
        *(_QWORD *)(a2 + 232) = v63[2 * v64];
        v65 = 3 * v64;
        *(_QWORD *)(a2 + 240) = v63[3 * (int)v64];
        *(_QWORD *)(a2 + 248) = v63[(int)v64 + 1];
        v66 = &v63[2 * (int)v64];
        *(_QWORD *)(a2 + 256) = v66[1];
        *(_QWORD *)(a2 + 264) = v63[v65 + 1];
        *(_QWORD *)(a2 + 272) = v66[2];
        *(_QWORD *)(a2 + 280) = v63[v65 + 2];
        v15.i64[0] = v63[v65 + 3];
        *(_QWORD *)(a2 + 288) = v15.i64[0];
      }
    }
LABEL_40:
    raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v15, v16);
    return;
  }
  LOWORD(v83) = 12;
  LOBYTE(v93) = 4;
  *(_OWORD *)v77 = *(_OWORD *)((char *)this + 136);
  v35 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v77, "RavenPassThroughEstimator::GetRavenSolution cannot get ENUToECEFJacobian Jenu");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v41) = v35;
  else
    v41 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, (unsigned __int8 *)&v93, "%s", v36, v37, v38, v39, v40, v41);
}

void sub_18D22C5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x400000004;
  *(_QWORD *)a1 = &unk_1E25C7FA0;
  *(_OWORD *)(a1 + 8) = xmmword_18D313080;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D22C614(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D22C628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x300000004;
  *(_QWORD *)a1 = &unk_1E25C7F70;
  *(_OWORD *)(a1 + 8) = xmmword_18D3130A0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D22C684(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

BOOL raven::RavenPassThroughEstimator::CanPublishRavenSolution(raven::RavenPassThroughEstimator *this)
{
  __int128 v2;

  if (!*((_BYTE *)this + 3280))
    return 0;
  v2 = *((_OWORD *)this + 165);
  return sub_18D03F608((double *)&v2, (double *)this + 408);
}

uint64_t raven::RavenPassThroughEstimator::HandleEvent(raven::RavenPassThroughEstimator *this, const raven::PositionEvent *a2)
{
  int v3;

  v3 = *((unsigned __int8 *)a2 + 200);
  if (v3 == 1)
  {
    ++*((_DWORD *)this + 814);
LABEL_6:
    memcpy((char *)this + 2544, (char *)a2 + 8, 0x160uLL);
    *((_BYTE *)this + 3280) = raven::RavenPassThroughEstimator::IsPosVelValidAndTimeMatched(this, (raven::RavenPassThroughEstimator *)((char *)this + 2536), (raven::RavenPassThroughEstimator *)((char *)this + 2896));
    return 0;
  }
  if (v3 == 9 && *((_DWORD *)this + 814))
    goto LABEL_6;
  return 0;
}

uint64_t raven::RavenPassThroughEstimator::IsPosVelValidAndTimeMatched(raven::RavenPassThroughEstimator *this, const raven::PositionEvent *a2, const raven::VelocityEvent *a3)
{
  int8x16_t v6;
  cnprint::CNPrinter *v7;
  double v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  int8x16_t v21;
  int8x16_t v22;

  v6 = *(int8x16_t *)((char *)a3 + 104);
  v21 = *(int8x16_t *)((char *)a2 + 104);
  v22 = v6;
  v7 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v22, &v21, v21, v6);
  if (fabs(v8 + (double)(uint64_t)v7) >= 0.001)
  {
    if (cnprint::CNPrinter::GetLogLevel(v7))
      return 0;
    v21.i16[0] = 12;
    v20 = 0;
    v10 = (_BYTE)this - 72;
    v22.i64[0] = (*(uint64_t (**)(const raven::VelocityEvent *))(*(_QWORD *)a3 + 16))(a3);
    v22.i64[1] = v11;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v22, "Position and velocity time difference too big");
LABEL_9:
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v18) = v10;
    else
      v18 = *((_QWORD *)this + 311);
    goto LABEL_12;
  }
  if (!*((_BYTE *)a3 + 280))
  {
    if (cnprint::CNPrinter::GetLogLevel(v7) > 1)
      return 0;
    v21.i16[0] = 12;
    v20 = 1;
    v10 = (_BYTE)this - 72;
    v22.i64[0] = (*(uint64_t (**)(const raven::VelocityEvent *))(*(_QWORD *)a3 + 16))(a3);
    v22.i64[1] = v17;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v22, "Invalid velocity");
    goto LABEL_9;
  }
  if (*((_BYTE *)a2 + 280))
    return 1;
  if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
  {
    v21.i16[0] = 12;
    v20 = 1;
    v22.i64[0] = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v22.i64[1] = v19;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v22, "Invalid position");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v18) = (_BYTE)this - 72;
    else
      v18 = *((_QWORD *)this + 311);
LABEL_12:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v21, &v20, "%s", v12, v13, v14, v15, v16, v18);
  }
  return 0;
}

uint64_t raven::RavenPassThroughEstimator::HandleEvent(raven::RavenPassThroughEstimator *this, const raven::VelocityEvent *a2)
{
  int v3;

  v3 = *((unsigned __int8 *)a2 + 200);
  if (v3 == 1)
  {
    ++*((_DWORD *)this + 815);
LABEL_6:
    memcpy((char *)this + 2904, (char *)a2 + 8, 0x160uLL);
    *((_BYTE *)this + 3280) = raven::RavenPassThroughEstimator::IsPosVelValidAndTimeMatched(this, (raven::RavenPassThroughEstimator *)((char *)this + 2536), (raven::RavenPassThroughEstimator *)((char *)this + 2896));
    return 0;
  }
  if (v3 == 9 && *((_DWORD *)this + 815))
    goto LABEL_6;
  return 0;
}

double raven::RavenPassThroughEstimator::GetFailureProbability(raven::RavenPassThroughEstimator *this)
{
  return 0.0;
}

std::string *raven::RavenPassThroughEstimator::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 2512), a2);
}

uint64_t raven::RavenPassThroughEstimator::Initialize(_BYTE *a1)
{
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 168))(a1);
  a1[58] = 1;
  return 0;
}

uint64_t raven::RavenPassThroughEstimator::IsConsistent(raven::RavenPassThroughEstimator *this)
{
  return *((unsigned __int8 *)this + 3280);
}

uint64_t raven::RavenPassThroughEstimator::IsObservable(raven::RavenPassThroughEstimator *this)
{
  return *((unsigned __int8 *)this + 3280);
}

uint64_t raven::RavenPassThroughEstimator::GetRavenStatus@<X0>(raven::RavenPassThroughEstimator *this@<X0>, uint64_t a2@<X8>)
{
  int8x16_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  BOOL v13;
  int8x16_t *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char v19;

  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  v4 = (int8x16_t *)(a2 + 8);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 105) = 0;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(_QWORD *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_WORD *)(a2 + 160) = 0;
  *(int64x2_t *)(a2 + 960) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a2 + 984) = 0x7FF8000000000000;
  *(_QWORD *)(a2 + 976) = 0;
  bzero((void *)(a2 + 164), 0x318uLL);
  *(_BYTE *)a2 = *((_BYTE *)this + 280);
  v5 = *((unsigned __int8 *)this + 56);
  *(_BYTE *)(a2 + 104) = v5;
  sub_18D0515C4((double *)a2, v5, 1.0, v6, v7, v8, v9, v10, v11);
  v13 = *((_BYTE *)this + 2816) == 0;
  if (*((_BYTE *)this + 2816))
    v14 = (int8x16_t *)((char *)this + 2640);
  else
    v14 = (int8x16_t *)((char *)this + 136);
  v12.i64[0] = 0;
  if (*((_BYTE *)this + 2816))
    *(double *)v12.i64 = 1.0;
  v15 = v14[3];
  *(int8x16_t *)(a2 + 40) = v14[2];
  *(int8x16_t *)(a2 + 56) = v15;
  v16 = v14[5];
  *(int8x16_t *)(a2 + 72) = v14[4];
  *(int8x16_t *)(a2 + 88) = v16;
  v17 = *v14;
  v18 = v14[1];
  *v4 = *v14;
  if (v13)
    v19 = 1;
  else
    v19 = 2;
  *(int8x16_t *)(a2 + 24) = v18;
  *(_BYTE *)(a2 + 105) = v19;
  *(_QWORD *)(a2 + 112) = v12.i64[0];
  return raven::PopulateAllTimeFields((uint64_t)v4, (uint64_t)this + 136, v12, v17);
}

__n128 raven::RavenPassThroughEstimator::SetLastSolutionOutputTime(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[204] = *a2;
  return result;
}

void sub_18D22CAC8(_QWORD *a1)
{
  *a1 = off_1E25C3320;
  sub_18D04A18C((uint64_t)a1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *raven::GnssReceiverBandCorrectionsManager::RemoveConstellationClockOffset(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v2 = result + 1;
  v3 = (_QWORD *)*result;
  if ((_QWORD *)*result != result + 1)
  {
    do
    {
      v5 = 0.0;
      switch(*((_BYTE *)v3 + 40))
      {
        case 3:
          result = (_QWORD *)sub_18D181348(a2);
          if ((_DWORD)result)
          {
            v6 = a2[1];
            goto LABEL_11;
          }
          break;
        case 4:
        case 5:
        case 6:
          result = (_QWORD *)sub_18D181428(a2);
          if ((_DWORD)result)
          {
            v6 = a2[2];
            goto LABEL_11;
          }
          break;
        case 7:
        case 8:
          result = (_QWORD *)sub_18D1813B4(a2);
          if ((_DWORD)result)
          {
            v6 = a2[3];
            goto LABEL_11;
          }
          break;
        case 0xA:
          result = (_QWORD *)sub_18D18149C(a2);
          if ((_DWORD)result)
          {
            v6 = a2[4];
LABEL_11:
            v5 = *(double *)(v6 + 16);
          }
          break;
        default:
          break;
      }
      *((double *)v3 + 6) = v5 + *((double *)v3 + 6);
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v9 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v2);
  }
  return result;
}

uint64_t raven::GnssReceiverBandCorrectionsManager::InjectVendorCorrections(uint64_t a1, unsigned __int8 **a2, __n128 *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t **v13;
  uint64_t **v14;
  char *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  BOOL v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  cnprint::CNPrinter *v42;
  double v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  char *v48;
  char v49;
  unsigned __int8 v54;
  unsigned __int8 *v55;

  if (!*(_QWORD *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) > 1)
      return 0;
    LOWORD(v55) = 12;
    v54 = 1;
    v48 = "#rxbc,UpdateReceiverBandCorrections,not configured";
LABEL_67:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, v48, v36, v37, v38, v39, v40, v49);
    return 0;
  }
  v11 = *a2;
  v12 = a2[1];
  if (*a2 != v12)
  {
    v13 = (uint64_t **)(a1 + 8);
    v14 = (uint64_t **)(a1 + 16);
    v15 = "#rxbc,Invalid rx_band_correction for band %d, ignoring and clearing cache";
    do
    {
      v16 = *v11;
      if (*v11
        && (*((_QWORD *)v11 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((*((_DWORD *)v11 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF ? (v17 = *((float *)v11 + 4) < 100.0) : (v17 = 0), v17))
      {
        if (*(_BYTE *)(*(_QWORD *)a1 + 547))
        {
          v28 = *(uint64_t **)v11;
          v29 = v15;
          v30 = *((_QWORD *)v11 + 2);
          v31 = -*((double *)v11 + 1);
          v55 = v11;
          v32 = sub_18D22D49C((uint64_t **)(a1 + 8), v11, (uint64_t)&std::piecewise_construct, &v55);
          v32[5] = v28;
          *((double *)v32 + 6) = v31;
          *((_DWORD *)v32 + 14) = v30;
          v15 = v29;
        }
        else
        {
          v55 = v11;
          v33 = sub_18D22D49C((uint64_t **)(a1 + 8), v11, (uint64_t)&std::piecewise_construct, &v55);
          a9 = *(int8x16_t *)v11;
          *((_DWORD *)v33 + 14) = *((_DWORD *)v11 + 4);
          *(int8x16_t *)(v33 + 5) = a9;
        }
      }
      else
      {
        v18 = *v14;
        if (*v14)
        {
          v19 = (uint64_t *)(a1 + 16);
          v20 = *v14;
          do
          {
            v21 = *((unsigned __int8 *)v20 + 32);
            v22 = v21 >= v16;
            if (v21 >= v16)
              v23 = (uint64_t **)v20;
            else
              v23 = (uint64_t **)(v20 + 1);
            if (v22)
              v19 = v20;
            v20 = *v23;
          }
          while (*v23);
          if (v19 != (uint64_t *)v14 && *((unsigned __int8 *)v19 + 32) <= v16)
          {
            v24 = (uint64_t *)v19[1];
            v25 = v19;
            if (v24)
            {
              do
              {
                v26 = v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                v26 = (uint64_t *)v25[2];
                v27 = *v26 == (_QWORD)v25;
                v25 = v26;
              }
              while (!v27);
            }
            if (*v13 == v19)
              *v13 = v26;
            --*(_QWORD *)(a1 + 24);
            sub_18D185564(v18, v19);
            operator delete(v19);
            v16 = *v11;
          }
        }
        if (v16
          && (*((_QWORD *)v11 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*((_DWORD *)v11 + 4) & 0x7FFFFFFFu) < 0x7F800000)
        {
          LOWORD(v55) = 12;
          v54 = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#rxbc,rx_band_correction for band %d: uncertainty %.1f ns too high, ignoring and clearing cache", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v16);
        }
        else
        {
          LOWORD(v55) = 12;
          v54 = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, v15, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v16);
        }
      }
      v11 += 24;
    }
    while (v11 != v12);
  }
  v34 = *(_QWORD *)(a1 + 40);
  if (v34)
    raven::MinnesotaRfModelCompensator::FeedVendorCorrections(v34, a1 + 8, a3, a5, a6, (uint64_t)a6, a7, a8);
  v35 = *(uint64_t **)(a1 + 32);
  if (v35
    && (raven::GnssReceiverBandCorrectionsFilter::TickFilterAndOverwriteCorrections(v35, (uint64_t **)(a1 + 8), a3, a5, a6, (uint64_t)a6, a7, a8, a9, a10) & 1) == 0)
  {
    LOWORD(v55) = 12;
    v54 = 4;
    v48 = "#rxbc,Updating filtered Rx band corrections failed";
    goto LABEL_67;
  }
  if (*(_BYTE *)(*(_QWORD *)a1 + 548))
    raven::GnssReceiverBandCorrectionsManager::RemoveConstellationClockOffset((_QWORD *)(a1 + 8), a4);
  v41 = *(unsigned __int8 **)(a1 + 8);
  if (v41 != (unsigned __int8 *)(a1 + 16))
  {
    do
    {
      v42 = *(cnprint::CNPrinter **)(a1 + 40);
      if (v42)
        raven::MinnesotaRfModelCompensator::OverwriteWithInternalEstimate(v42, v41 + 40);
      v43 = 0.0;
      if (*(_BYTE *)(*(_QWORD *)a1 + 2562) && *(_BYTE *)(a1 + 880) && *(_BYTE *)(a1 + 152))
      {
        v44 = v41[40];
        switch(v44)
        {
          case 8:
            v43 = *(double *)(a1 + 264);
            *(double *)(a1 + 896) = v43;
            break;
          case 6:
            v43 = *(double *)(a1 + 272);
            *(double *)(a1 + 904) = v43;
            break;
          case 2:
            v43 = *(double *)(a1 + 256);
            *(double *)(a1 + 888) = v43;
            break;
        }
      }
      *((double *)v41 + 6) = *((double *)v41 + 6) - v43;
      v45 = (unsigned __int8 *)*((_QWORD *)v41 + 1);
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = *(unsigned __int8 **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (unsigned __int8 *)*((_QWORD *)v41 + 2);
          v27 = *(_QWORD *)v46 == (_QWORD)v41;
          v41 = v46;
        }
        while (!v27);
      }
      v41 = v46;
    }
    while (v46 != (unsigned __int8 *)(a1 + 16));
  }
  return 1;
}

void raven::MinnesotaRfModelCompensator::FeedVendorCorrections(uint64_t a1, uint64_t a2, __n128 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  BOOL v29;
  float v31;
  float v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t **v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  cnprint::CNPrinter *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unsigned __int8 v51;
  __int16 v52;
  int8x16_t v53;
  int v54;
  int8x16_t *v55;

  v14 = *(_QWORD *)(a2 + 8);
  v12 = a2 + 8;
  v13 = v14;
  if (!v14)
    goto LABEL_12;
  v15 = v12;
  v16 = v13;
  do
  {
    v17 = *(unsigned __int8 *)(v16 + 32);
    v18 = v17 >= 2;
    if (v17 >= 2)
      v19 = (uint64_t *)v16;
    else
      v19 = (uint64_t *)(v16 + 8);
    if (v18)
      v15 = v16;
    v16 = *v19;
  }
  while (*v19);
  if (v15 == v12 || *(unsigned __int8 *)(v15 + 32) >= 3u)
LABEL_12:
    v15 = v12;
  if (!v13)
    goto LABEL_24;
  v20 = v12;
  v21 = v13;
  do
  {
    v22 = *(unsigned __int8 *)(v21 + 32);
    v23 = v22 >= 7;
    if (v22 >= 7)
      v24 = (uint64_t *)v21;
    else
      v24 = (uint64_t *)(v21 + 8);
    if (v23)
      v20 = v21;
    v21 = *v24;
  }
  while (*v24);
  if (v20 == v12 || *(unsigned __int8 *)(v20 + 32) >= 8u)
LABEL_24:
    v20 = v12;
  if (v13)
  {
    v25 = v12;
    do
    {
      v26 = *(unsigned __int8 *)(v13 + 32);
      v27 = v26 >= 8;
      if (v26 >= 8)
        v28 = (uint64_t *)v13;
      else
        v28 = (uint64_t *)(v13 + 8);
      if (v27)
        v25 = v13;
      v13 = *v28;
    }
    while (*v28);
    if (v25 != v12)
    {
      v29 = *(unsigned __int8 *)(v25 + 32) > 8u || v15 == v12;
      if (!v29 && v20 != v12)
      {
        v31 = *(float *)(v15 + 56);
        if (fabsf(v31) >= 0.00000011921
          && ((v32 = sqrtf((float)(*(float *)(v25 + 56) * *(float *)(v25 + 56))- (float)(*(float *)(v20 + 56) * *(float *)(v20 + 56))), fabsf(v32) >= 0.00000011921)? (v33 = (LODWORD(v31) & 0x7FFFFFFFu) <= 0x7F7FFFFF): (v33 = 0), v33 && LODWORD(v32) >> 23 < 0xFF))
        {
          v34 = *(double *)(v15 + 48) + 7870.6;
          v35 = *(double *)(v25 + 48) - *(double *)(v20 + 48) + 7870.6 + -1466.28;
          v36 = 1.0 / (float)(v31 * v31);
          v37 = 1.0 / (float)(v32 * v32);
          v53.i8[0] = 2;
          *(double *)&v53.i64[1] = (v35 * v37 + v34 * v36) / (v36 + v37);
          *(float *)&v36 = sqrt(1.0 / (v36 + v37));
          v54 = LODWORD(v36);
          v55 = &v53;
          v38 = sub_18D22D49C((uint64_t **)a1, (unsigned __int8 *)&v53, (uint64_t)&std::piecewise_construct, (_BYTE **)&v55);
          v39 = v53;
          *(int8x16_t *)(v38 + 5) = v53;
          *((_DWORD *)v38 + 14) = v54;
          v44 = (cnprint::CNPrinter *)raven::GnssReceiverBandCorrectionsFilter::TickFilterAndOverwriteCorrections((uint64_t *)(a1 + 24), (uint64_t **)a1, a3, a4, a5, v40, v41, v42, v39, v43);
          if (cnprint::CNPrinter::GetLogLevel(v44) <= 1)
          {
            v52 = 12;
            v51 = 1;
            v55 = &v53;
            sub_18D22D49C((uint64_t **)a1, (unsigned __int8 *)&v53, (uint64_t)&std::piecewise_construct, (_BYTE **)&v55);
            v55 = &v53;
            sub_18D22D49C((uint64_t **)a1, (unsigned __int8 *)&v53, (uint64_t)&std::piecewise_construct, (_BYTE **)&v55);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "#rxbc,local rxbc estimate for GPS/GAL cohort,gps,%.1f,unc,%.1f,gal,%.1f,unc,%.1f,combined,%.1f,unc,%.1f,filtered,%.1f,unc,%.1f", v45, v46, v47, v48, v49, SLOBYTE(v34));
          }
        }
        else
        {
          v53.i16[0] = 12;
          LOBYTE(v55) = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v53, (unsigned __int8 *)&v55, "#rxbc,component estimate with zero uncertainty", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v50);
        }
      }
    }
  }
}

void raven::MinnesotaRfModelCompensator::OverwriteWithInternalEstimate(cnprint::CNPrinter *a1, unsigned __int8 *a2)
{
  int v3;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  double v12;
  float v13;
  double v14;
  cnprint::CNPrinter *v15;
  float v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int16 v29;
  unsigned __int8 v30;
  __int16 v31;

  v3 = *a2;
  if (v3 == 2 || v3 == 8)
  {
    v7 = *((_QWORD *)a1 + 1);
    v5 = (double *)((char *)a1 + 8);
    v6 = v7;
    if (v7)
    {
      v8 = v5;
      do
      {
        v9 = *(unsigned __int8 *)(v6 + 32);
        v10 = v9 >= 2;
        if (v9 >= 2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (v10)
          v8 = (double *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != v5 && *((unsigned __int8 *)v8 + 32) <= 2u)
      {
        v12 = v8[6] + -7870.6;
        v13 = *((float *)a2 + 4);
        v14 = vabdd_f64(v12, *((double *)a2 + 1));
        v16 = hypotf(v13, v13);
        v17 = v16 > 0.0 && v14 / v16 <= 5.0;
        if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
        {
          v29 = 12;
          v28 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "#rxbc,local rxbc estimate,band,%d,mismatch ns,%.1f,is_used,%d,vendor,%.1f,unc,%.1f,estimate,%.1f,unc,%.1f", v23, v24, v25, v26, v27, *a2);
        }
        if (v17)
        {
          *a2 = v3;
          *((double *)a2 + 1) = v12;
          *((float *)a2 + 4) = v13;
        }
      }
    }
  }
  else if (v3 == 7)
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
    {
      v31 = 12;
      v30 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "#rxbc,fixed E1 band correction,vendor,%.1f,unc,%.1f,fixed value,%.1f", v18, v19, v20, v21, v22, *((_QWORD *)a2 + 1));
    }
    *((_QWORD *)a2 + 1) = 0xC096E91EB851EB85;
    *((_DWORD *)a2 + 4) = 0;
  }
}

uint64_t **sub_18D22D49C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 6) = 0x7FF8000000000000;
    *((_QWORD *)v11 + 7) = 0;
    *((_DWORD *)v11 + 14) = 2143289344;
    sub_18D185958(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t raven::ConvertProtobufToAccelerometerEvent(float32x2_t *this, const CoreNavigation::CLP::LogEntry::PrivateData::AccelSample *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;

  if ((this[4].i8[0] & 1) == 0)
    return 0;
  v13 = (uint64_t)this[1];
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::AccelSample::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    *(float64x2_t *)((char *)a2 + 104) = vcvtq_f64_f32(this[2]);
    *((double *)a2 + 15) = this[3].f32[0];
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToAccessoryVehicleSpeedEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *a2, raven::AccessoryVehicleSpeedEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  void **v27;
  void **v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[6];

  if ((*((_BYTE *)this + 80) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification::default_instance_
                    + 8);
  }
  v19 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v19)
  {
    if ((*((_BYTE *)this + 80) & 2) == 0)
      return 0;
    v22 = *((_QWORD *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification::default_instance_
                      + 16);
    }
    v23 = raven::ConvertProtobufToRavenTime(v22, (uint64_t)a2 + 104, 0, v14, v15, v16, v17, v18, v20, v21);
    result = 0;
    if (v23)
    {
      *((_BYTE *)a2 + 256) = 0;
      v24 = *((_DWORD *)this + 7) - 1;
      if (v24 <= 3)
        *((_BYTE *)a2 + 256) = 0x4010203u >> (8 * v24);
      v25 = *((_DWORD *)this + 18);
      if (v25 <= 1)
        *((_BYTE *)a2 + 257) = v25;
      *((_BYTE *)a2 + 200) = *((_BYTE *)this + 52);
      v26 = *((unsigned int *)this + 12);
      *((_DWORD *)a2 + 51) = v26;
      v27 = (void **)((char *)a2 + 208);
      sub_18D22D9C0((void **)a2 + 26, v26);
      v28 = (void **)((char *)a2 + 232);
      sub_18D22D9C0((void **)a2 + 29, *((unsigned int *)a2 + 51));
      if (*((int *)this + 12) < 1)
        return 1;
      v31 = 0;
      do
      {
        if (v31 >= *((int *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v61);
        }
        v32 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v31);
        v34 = (char *)*((_QWORD *)a2 + 27);
        v33 = *((_QWORD *)a2 + 28);
        if ((unint64_t)v34 >= v33)
        {
          v36 = (char *)*v27;
          v37 = (v34 - (_BYTE *)*v27) >> 3;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61)
            sub_18D07AFE4();
          v39 = v33 - (_QWORD)v36;
          if (v39 >> 2 > v38)
            v38 = v39 >> 2;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)sub_18D0788C8((uint64_t)a2 + 224, v40);
            v36 = (char *)*((_QWORD *)a2 + 26);
            v34 = (char *)*((_QWORD *)a2 + 27);
          }
          else
          {
            v41 = 0;
          }
          v42 = &v41[8 * v37];
          *(_QWORD *)v42 = v32;
          v35 = v42 + 8;
          while (v34 != v36)
          {
            v43 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v42 - 1) = v43;
            v42 -= 8;
          }
          *((_QWORD *)a2 + 26) = v42;
          *((_QWORD *)a2 + 27) = v35;
          *((_QWORD *)a2 + 28) = &v41[8 * v40];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *(_QWORD *)v34 = v32;
          v35 = v34 + 8;
        }
        *((_QWORD *)a2 + 27) = v35;
        if (v31 >= *((int *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v61);
        }
        v44 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v31);
        v46 = (char *)*((_QWORD *)a2 + 30);
        v45 = *((_QWORD *)a2 + 31);
        if ((unint64_t)v46 >= v45)
        {
          v48 = (char *)*v28;
          v49 = (v46 - (_BYTE *)*v28) >> 3;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 61)
            sub_18D07AFE4();
          v51 = v45 - (_QWORD)v48;
          if (v51 >> 2 > v50)
            v50 = v51 >> 2;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            v53 = (char *)sub_18D0788C8((uint64_t)a2 + 248, v52);
            v48 = (char *)*((_QWORD *)a2 + 29);
            v46 = (char *)*((_QWORD *)a2 + 30);
          }
          else
          {
            v53 = 0;
          }
          v54 = &v53[8 * v49];
          *(_QWORD *)v54 = v44;
          v47 = v54 + 8;
          while (v46 != v48)
          {
            v55 = *((_QWORD *)v46 - 1);
            v46 -= 8;
            *((_QWORD *)v54 - 1) = v55;
            v54 -= 8;
          }
          *((_QWORD *)a2 + 29) = v54;
          *((_QWORD *)a2 + 30) = v47;
          *((_QWORD *)a2 + 31) = &v53[8 * v52];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_QWORD *)v46 = v44;
          v47 = v46 + 8;
        }
        *((_QWORD *)a2 + 30) = v47;
        ++v31;
        v56 = *((int *)this + 12);
      }
      while (v31 < v56);
      if ((int)v56 <= 0)
      {
        return 1;
      }
      else
      {
        v29.i64[0] = *(_QWORD *)(*((_QWORD *)a2 + 27) - 8);
        v61[0] = 0;
        v61[1] = 0;
        CNTimeSpan::SetTimeSpan(v61, 0, v29, v30);
        v59 = CNTimeSpan::operator+((uint64_t)a2 + 104, v61, v57, v58);
        *(_OWORD *)((char *)a2 + 72) = 0u;
        *(_OWORD *)((char *)a2 + 56) = 0u;
        *(_OWORD *)((char *)a2 + 40) = 0u;
        *(_OWORD *)((char *)a2 + 24) = 0u;
        *((_QWORD *)a2 + 1) = v59;
        *((_QWORD *)a2 + 2) = v60;
        result = 1;
        *((_QWORD *)a2 + 11) = 0;
        *((_QWORD *)a2 + 12) = 0x7FF8000000000000;
      }
    }
  }
  return result;
}

void sub_18D22D9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_18D22D9C0(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_18D07AFE4();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_18D0788C8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t raven::ConvertProtobufToActivityInputEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, raven::ActivityInputEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  int v20;
  unsigned int v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v15 + 92) & 1) == 0)
      return 0;
    v16 = *((_QWORD *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v16 + 92) & 2) == 0)
      return 0;
    v17 = *((_QWORD *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    v18 = *(_DWORD *)(v17 + 8);
    if (v18 <= 11804)
    {
      if (v18 <= 99)
      {
        v19 = 0;
        switch(v18)
        {
          case 0:
          case 1:
          case 2:
          case 7:
            goto LABEL_90;
          case 3:
          case 9:
            goto LABEL_89;
          case 4:
            goto LABEL_100;
          case 5:
          case 10:
          case 11:
LABEL_38:
            v19 = 5;
            goto LABEL_90;
          case 6:
            goto LABEL_36;
          case 8:
            goto LABEL_85;
          default:
            switch(v18)
            {
              case '4':
              case '8':
                goto LABEL_38;
              case '5':
              case '6':
              case '7':
              case '9':
              case ':':
              case ';':
              case '<':
                goto LABEL_91;
              case '=':
              case '?':
              case 'B':
                goto LABEL_89;
              case '>':
                goto LABEL_67;
              case '@':
              case 'A':
                goto LABEL_85;
              default:
                if (v18 == 41)
                  goto LABEL_100;
                break;
            }
            break;
        }
        goto LABEL_91;
      }
      if (v18 > 2100)
      {
        if (v18 > 3014)
        {
          if ((v18 - 3015) >= 2)
            goto LABEL_91;
        }
        else
        {
          if (v18 == 2101)
            goto LABEL_67;
          if (v18 != 2105 && v18 != 2150)
            goto LABEL_91;
        }
      }
      else
      {
        v22 = v18 + 38;
        if ((v18 - 2010) > 0x3D)
        {
LABEL_35:
          if (v18 == 100)
            goto LABEL_36;
LABEL_91:
          *((_BYTE *)a2 + 105) = 0;
          v25 = *((_QWORD *)this + 2);
          if (!v25)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
            v25 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
          }
          v26 = *(_DWORD *)(v25 + 12);
          result = 0;
          v27 = 1;
          switch(v26)
          {
            case 0:
              return result;
            case 1:
              goto LABEL_96;
            case 2:
              v27 = 2;
              goto LABEL_96;
            case 3:
              v27 = 3;
LABEL_96:
              *((_BYTE *)a2 + 105) = v27;
              break;
            default:
              return 1;
          }
          return 1;
        }
        if (((1 << v22) & 0x2488004000000400) == 0)
        {
          if (((1 << v22) & 0x5000) == 0)
          {
            if (v18 == 2010)
            {
LABEL_36:
              v19 = 4;
LABEL_90:
              *((_BYTE *)a2 + 104) = v19;
              goto LABEL_91;
            }
            goto LABEL_35;
          }
LABEL_67:
          v19 = 9;
          goto LABEL_90;
        }
      }
      goto LABEL_89;
    }
    if (v18 <= 15651)
    {
      if (v18 > 15254)
      {
        if (v18 <= 15459)
        {
          if (v18 > 15349)
          {
            if (v18 == 15350)
              goto LABEL_85;
            v23 = 15360;
          }
          else
          {
            if (v18 == 15255)
              goto LABEL_89;
            v23 = 15330;
          }
        }
        else
        {
          if (v18 <= 15591)
          {
            if (v18 == 15460)
              goto LABEL_85;
            v20 = 15562;
LABEL_72:
            if (v18 != v20)
              goto LABEL_91;
            goto LABEL_85;
          }
          if (v18 == 15592)
            goto LABEL_89;
          if (v18 == 15610)
            goto LABEL_85;
          v23 = 15620;
        }
      }
      else
      {
        if (v18 > 15099)
        {
          if ((v18 - 15100) <= 0x32 && ((1 << (v18 + 4)) & 0x4000000000401) != 0)
            goto LABEL_89;
          if (v18 != 15230)
          {
            v20 = 15240;
            goto LABEL_72;
          }
LABEL_85:
          v19 = 3;
          goto LABEL_90;
        }
        if (v18 <= 15029)
        {
          if (v18 != 11805)
          {
            v20 = 12150;
            goto LABEL_72;
          }
LABEL_78:
          v19 = 7;
          goto LABEL_90;
        }
        if (v18 == 15030)
          goto LABEL_89;
        v23 = 15055;
      }
LABEL_88:
      if (v18 != v23)
        goto LABEL_91;
      goto LABEL_89;
    }
    if (v18 > 18224)
    {
      if (v18 > 19149)
      {
        if (v18 <= 90602)
        {
          if (v18 == 19150)
            goto LABEL_89;
          v23 = 19160;
        }
        else
        {
          if (v18 == 90603)
            goto LABEL_78;
          if (v18 == 515652)
            goto LABEL_89;
          v23 = 515621;
        }
        goto LABEL_88;
      }
      if (v18 > 19029)
      {
        if (v18 == 19030)
          goto LABEL_89;
        v23 = 19090;
        goto LABEL_88;
      }
      if (v18 == 18225)
        goto LABEL_89;
      v24 = 18240;
    }
    else
    {
      if (v18 <= 15732)
      {
        v21 = v18 - 15652;
        if (v21 > 0x3A || ((1 << v21) & 0x400000000840101) == 0)
          goto LABEL_91;
        goto LABEL_89;
      }
      if (v18 <= 18069)
      {
        if (v18 != 15733)
        {
          if (v18 != 17150)
            goto LABEL_91;
LABEL_100:
          v19 = 2;
          goto LABEL_90;
        }
        goto LABEL_89;
      }
      if (v18 == 18070)
      {
LABEL_89:
        v19 = 1;
        goto LABEL_90;
      }
      v24 = 18200;
    }
    if (v18 == v24)
    {
      v19 = 6;
      goto LABEL_90;
    }
    goto LABEL_91;
  }
  return result;
}

uint64_t raven::ConvertProtobufToFitnessSessionEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *a2, raven::FitnessSessionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v15 + 36) & 1) == 0)
      return 0;
    v16 = *((_QWORD *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v16 + 36) & 4) == 0)
      return 0;
    v17 = *((_QWORD *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
    }
    v18 = *(_DWORD *)(v17 + 16);
    result = 1;
    if (v18 <= 11804)
    {
      if (v18 <= 2009)
      {
        v19 = 0;
        switch(v18)
        {
          case 0:
            goto LABEL_87;
          case 1:
          case 2:
          case 3:
          case 5:
          case 7:
          case 9:
          case 10:
          case 11:
            goto LABEL_86;
          case 4:
            goto LABEL_90;
          case 6:
            goto LABEL_41;
          case 8:
            goto LABEL_55;
          default:
            v22 = (v18 - 52);
            if (v22 > 0x30)
              goto LABEL_89;
            if (((1 << (v18 - 52)) & 0x4E11) != 0)
              goto LABEL_86;
            if (((1 << (v18 - 52)) & 0x3000) != 0)
              goto LABEL_82;
            if (v22 == 48)
              goto LABEL_41;
LABEL_89:
            if (v18 == 41)
              goto LABEL_90;
            return result;
        }
      }
      if ((v18 - 2010) > 0x3D)
      {
LABEL_33:
        if (((v18 - 2101) > 0x31 || ((1 << (v18 - 53)) & 0x2000000000011) == 0)
          && (v18 - 3015) >= 2)
        {
          return result;
        }
        goto LABEL_86;
      }
      if (((1 << (v18 + 38)) & 0x2488004000005400) == 0)
      {
        if (v18 != 2010)
          goto LABEL_33;
LABEL_41:
        v19 = 4;
LABEL_87:
        *((_BYTE *)a2 + 104) = v19;
        return result;
      }
      goto LABEL_86;
    }
    if (v18 <= 15651)
    {
      if (v18 > 15254)
      {
        if (v18 <= 15459)
        {
          if (v18 > 15349)
          {
            if (v18 == 15350)
              goto LABEL_82;
            v23 = 15360;
          }
          else
          {
            if (v18 == 15255)
              goto LABEL_86;
            v23 = 15330;
          }
        }
        else
        {
          if (v18 <= 15591)
          {
            if (v18 != 15460)
            {
              v20 = 15562;
LABEL_68:
              if (v18 != v20)
                return result;
            }
LABEL_82:
            v19 = 7;
            goto LABEL_87;
          }
          if (v18 == 15592)
            goto LABEL_86;
          if (v18 == 15610)
            goto LABEL_82;
          v23 = 15620;
        }
      }
      else
      {
        if (v18 > 15099)
        {
          if ((v18 - 15100) <= 0x32 && ((1 << (v18 + 4)) & 0x4000000000401) != 0)
            goto LABEL_86;
          if (v18 != 15230)
          {
            v20 = 15240;
            goto LABEL_68;
          }
          goto LABEL_82;
        }
        if (v18 <= 15029)
        {
          if (v18 != 11805)
          {
            if (v18 != 12150)
              return result;
LABEL_55:
            v19 = 3;
            goto LABEL_87;
          }
          goto LABEL_75;
        }
        if (v18 == 15030)
          goto LABEL_86;
        v23 = 15055;
      }
      goto LABEL_85;
    }
    if (v18 > 18224)
    {
      if (v18 > 19149)
      {
        if (v18 <= 90602)
        {
          if (v18 != 19150 && v18 != 19160)
            return result;
          v19 = 8;
          goto LABEL_87;
        }
        if (v18 == 90603)
        {
LABEL_75:
          v19 = 6;
          goto LABEL_87;
        }
        if (v18 == 515621)
          goto LABEL_86;
        v23 = 515652;
LABEL_85:
        if (v18 != v23)
          return result;
        goto LABEL_86;
      }
      if (v18 > 19029)
      {
        if (v18 == 19030)
          goto LABEL_86;
        v23 = 19090;
        goto LABEL_85;
      }
      if (v18 == 18225)
        goto LABEL_86;
      v24 = 18240;
    }
    else
    {
      if (v18 <= 15732)
      {
        v21 = v18 - 15652;
        if (v21 > 0x3A || ((1 << v21) & 0x400000000840101) == 0)
          return result;
        goto LABEL_86;
      }
      if (v18 <= 18069)
      {
        if (v18 != 15733)
        {
          if (v18 != 17150)
            return result;
LABEL_90:
          v19 = 2;
          goto LABEL_87;
        }
        goto LABEL_86;
      }
      if (v18 == 18070)
      {
LABEL_86:
        v19 = 9;
        goto LABEL_87;
      }
      v24 = 18200;
    }
    if (v18 != v24)
      return result;
    v19 = 5;
    goto LABEL_87;
  }
  return result;
}

uint64_t raven::ConvertProtobufToAltitudeEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *a2, raven::AltitudeEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  int v13;
  uint64_t result;
  double v15;

  if ((*((_BYTE *)this + 52) & 1) == 0)
    return 0;
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel::default_instance_ + 8);
  }
  v13 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v13)
  {
    if ((~*((_DWORD *)this + 13) & 6) == 0)
    {
      result = 0;
      v15 = *((double *)this + 3);
      if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v15 > 0.0)
      {
        *((_QWORD *)a2 + 13) = *((_QWORD *)this + 2);
        *((double *)a2 + 14) = v15;
        return 1;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t raven::ConvertProtobufToGEOMapBuildingDataEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *a2, raven::GEOMapBuildingDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CoreNavigation::CLP::LogEntry::PrivateData *v22;
  CoreNavigation::CLP::LogEntry::PrivateData *v23;
  cnprint::CNPrinter *LogLevel;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int64x2_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int64x2_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  int64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  int64x2_t v103;
  char *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  uint64_t v111;
  int64x2_t v112;
  int64x2_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  int64x2_t v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  int64x2_t *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  char *v140;
  uint64_t *v141;
  const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *v142;
  int64x2_t v143;
  void *__p[3];
  int64x2_t v145;
  _BYTE v146[40];
  int64x2_t v147;
  int64x2_t v148;
  char *v149;
  unsigned __int8 v150[8];
  char *v151;
  int64x2_t v152;
  char *v153;
  char **v154;

  if ((*((_BYTE *)this + 68) & 1) == 0)
    goto LABEL_12;
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 8);
  }
  v13 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  if ((v13 & 1) == 0)
  {
LABEL_12:
    LOWORD(__p[0]) = 12;
    LOBYTE(v151) = 4;
    v16 = "ConvertProtobufToGEOMapBuildingDataEvent, Missing / error in time-tag of GEOMapBuildingData message";
    goto LABEL_13;
  }
  v14 = *((_QWORD *)this + 7);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
  }
  if ((*(_BYTE *)(v14 + 28) & 1) == 0)
    goto LABEL_11;
  v15 = *((_QWORD *)this + 7);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
  }
  if ((*(_BYTE *)(v15 + 28) & 2) == 0)
  {
LABEL_11:
    LOWORD(__p[0]) = 12;
    LOBYTE(v151) = 4;
    v16 = "ConvertProtobufToGEOMapBuildingDataEvent, Missing query location in GEOMapBuildingData message";
LABEL_13:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, v16, a4, a5, a6, a7, a8, v139);
    return 0;
  }
  v18 = *((_QWORD *)this + 7);
  v19 = v18;
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
    v18 = *((_QWORD *)this + 7);
  }
  if (fabs(*(double *)(v19 + 8)) > 90.0)
    goto LABEL_21;
  v20 = v18;
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
    v18 = *((_QWORD *)this + 7);
  }
  if (fabs(*(double *)(v20 + 16)) > 180.0)
  {
LABEL_21:
    LOWORD(__p[0]) = 12;
    LOBYTE(v151) = 4;
    if (v18)
    {
      v21 = *(_QWORD *)(v18 + 8);
    }
    else
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
      v21 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_
                                  + 56)
                      + 8);
      if (!*((_QWORD *)this + 7))
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v22);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, Invalid latitude or longitude value of query location,lat_deg,%.9lf,lon_deg,%.9lf", a4, a5, a6, a7, a8, v21);
    return 0;
  }
  if (v18)
  {
    *((double *)a2 + 16) = *(double *)(v18 + 8) * 0.0174532925;
  }
  else
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    v18 = *((_QWORD *)this + 7);
    *((double *)a2 + 16) = *(double *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_
                                                 + 56)
                                     + 8)
                         * 0.0174532925;
    if (!v18)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v23);
      v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
    }
  }
  *((double *)a2 + 17) = *(double *)(v18 + 16) * 0.0174532925;
  sub_18D22EF2C((uint64_t *)a2 + 13);
  v141 = (uint64_t *)((char *)a2 + 104);
  LogLevel = (cnprint::CNPrinter *)sub_18D22EF88((uint64_t *)a2 + 13, *((int *)this + 6));
  if (*((int *)this + 6) >= 1)
  {
    v25 = 0;
    v140 = (char *)a2 + 120;
    v143 = vdupq_n_s64(0x7FF8000000000000uLL);
    v142 = a2;
    do
    {
      v26 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v25);
      v27 = *(_DWORD *)(v26 + 16);
      if (!v27)
      {
        LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
        if (LogLevel <= 1)
        {
          LOWORD(__p[0]) = 12;
          LOBYTE(v151) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, Building with no sections, building is skipped.", v43, v44, v45, v46, v47, v139);
        }
        goto LABEL_137;
      }
      v28 = *(_DWORD *)(v26 + 52);
      if ((v28 & 4) != 0
        && v27 == 1
        && *(_QWORD *)(v26 + 40) >> 5 <= 0xC34uLL
        && *(_DWORD *)(**(_QWORD **)(v26 + 8) + 16) == 3)
      {
        LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
        if (LogLevel <= 1)
        {
          LOWORD(__p[0]) = 12;
          LOBYTE(v151) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, skipped V2 Tiles ghost building, id, %llu", v48, v49, v50, v51, v52, *(_QWORD *)(v26 + 40));
        }
        goto LABEL_137;
      }
      v149 = 0;
      v147 = 0u;
      v148 = 0u;
      v29 = *(int *)(v26 + 16);
      LOBYTE(v30) = v28;
      if ((_DWORD)v29)
      {
        if ((v29 & 0x80000000) != 0)
          sub_18D07AFE4();
        v145.i64[1] = (uint64_t)&v149;
        v31 = (char *)sub_18D226298((uint64_t)&v149, v29);
        __p[0] = v31;
        __p[1] = v31;
        v33 = &v31[80 * v32];
        __p[2] = v31;
        v145.i64[0] = (uint64_t)v33;
        v34 = v148;
        if (v148.i64[1] == v148.i64[0])
        {
          v41 = vdupq_n_s64(v148.u64[1]);
          v42 = v31;
        }
        else
        {
          v35 = 0;
          do
          {
            v36 = &v31[v35];
            v37 = v34.i64[1] + v35;
            *((_QWORD *)v36 - 10) = 0;
            *((_QWORD *)v36 - 9) = 0;
            *((_QWORD *)v36 - 8) = 0;
            *((_OWORD *)v36 - 5) = *(_OWORD *)(v34.i64[1] + v35 - 80);
            *((_QWORD *)v36 - 8) = *(_QWORD *)(v34.i64[1] + v35 - 64);
            *(_QWORD *)(v37 - 80) = 0;
            *(_QWORD *)(v37 - 72) = 0;
            *(_QWORD *)(v37 - 64) = 0;
            v38 = *(_OWORD *)(v34.i64[1] + v35 - 56);
            v39 = *(_OWORD *)(v34.i64[1] + v35 - 40);
            v40 = *(_OWORD *)(v34.i64[1] + v35 - 24);
            *((_QWORD *)v36 - 1) = *(_QWORD *)(v34.i64[1] + v35 - 8);
            *(_OWORD *)(v36 - 24) = v40;
            *(_OWORD *)(v36 - 40) = v39;
            *(_OWORD *)(v36 - 56) = v38;
            v35 -= 80;
          }
          while (v34.i64[1] + v35 != v34.i64[0]);
          v41 = v148;
          v42 = &v31[v35];
          v31 = (char *)__p[2];
          v33 = (char *)v145.i64[0];
        }
        v148.i64[0] = (uint64_t)v42;
        v148.i64[1] = (uint64_t)v31;
        *(int64x2_t *)&__p[1] = v41;
        v53 = (uint64_t)v149;
        v149 = v33;
        v145.i64[0] = v53;
        __p[0] = (void *)v41.i64[0];
        LogLevel = (cnprint::CNPrinter *)sub_18D23A0AC((uint64_t)__p);
        v30 = *(_DWORD *)(v26 + 52);
      }
      if ((v30 & 2) != 0)
        v54 = *(_QWORD *)(v26 + 32);
      else
        v54 = 0;
      v147.i64[0] = v54;
      if ((v28 & 4) != 0)
        v55 = *(_QWORD *)(v26 + 40);
      else
        v55 = 0;
      v147.i64[1] = v55;
      if (v54)
      {
        if (*(int *)(v26 + 16) >= 1)
        {
          v56 = 0;
          while (1)
          {
            v57 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v56);
            if (!*(_DWORD *)(v57 + 16))
            {
              LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
              if (LogLevel <= 1)
              {
                LOWORD(__p[0]) = 12;
                LOBYTE(v151) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, Building's section with missing coordinate data, section is skipped.", v64, v65, v66, v67, v68, v139);
              }
              goto LABEL_122;
            }
            v58 = *(_DWORD *)(v57 + 88);
            if ((v28 & 4) != 0)
              break;
            if ((~v58 & 6) == 0)
              goto LABEL_66;
            LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
            if (LogLevel <= 1)
            {
              LOWORD(__p[0]) = 12;
              LOBYTE(v151) = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, V1 Building's section with missing data, section is skipped.", v59, v60, v61, v62, v63, v139);
            }
LABEL_122:
            if (++v56 >= *(int *)(v26 + 16))
              goto LABEL_123;
          }
          if ((~v58 & 0xF8) != 0)
          {
            LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
            if (LogLevel <= 1)
            {
              LOWORD(__p[0]) = 12;
              LOBYTE(v151) = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, V2 Building's section with missing data, section is skipped.", v95, v96, v97, v98, v99, v139);
            }
            goto LABEL_122;
          }
LABEL_66:
          memset(__p, 0, sizeof(__p));
          v145 = v143;
          v146[0] = 0;
          *(int64x2_t *)&v146[8] = v143;
          *(int64x2_t *)&v146[24] = v143;
          v69 = *(int *)(v57 + 16);
          if ((_DWORD)v69)
          {
            if ((v69 & 0x80000000) != 0)
              sub_18D07AFE4();
            v70 = (char *)sub_18D16735C((uint64_t)&__p[2], v69);
            v73 = (char *)__p[0];
            v72 = (char *)__p[1];
            v74 = v70;
            if (__p[1] != __p[0])
            {
              do
              {
                *((_OWORD *)v74 - 1) = *((_OWORD *)v72 - 1);
                v74 -= 16;
                v72 -= 16;
              }
              while (v72 != v73);
              v72 = (char *)__p[0];
            }
            __p[0] = v74;
            __p[1] = v70;
            __p[2] = &v70[16 * v71];
            if (v72)
              operator delete(v72);
            if (*(int *)(v57 + 16) >= 1)
            {
              v75 = 0;
              do
              {
                v76 = *(_QWORD *)(*(_QWORD *)(v57 + 8) + 8 * v75);
                if ((~*(_DWORD *)(v76 + 28) & 3) != 0)
                {
                  v70 = (char *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v70);
                  if (v70 <= 1)
                  {
                    LOWORD(v151) = 12;
                    v150[0] = 1;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v151, v150, "ConvertProtobufToGEOMapBuildingDataEvent, Building's section footprint coordinate is missing, vertex is skipped.", v81, v82, v83, v84, v85, v139);
                  }
                }
                else
                {
                  v78 = *(_QWORD *)(v76 + 8);
                  v77 = *(_QWORD *)(v76 + 16);
                  v79 = (char *)__p[1];
                  if (__p[1] >= __p[2])
                  {
                    v70 = (char *)__p[0];
                    v86 = ((char *)__p[1] - (char *)__p[0]) >> 4;
                    v87 = v86 + 1;
                    if ((unint64_t)(v86 + 1) >> 60)
                      sub_18D07AFE4();
                    v88 = (char *)__p[2] - (char *)__p[0];
                    if (((char *)__p[2] - (char *)__p[0]) >> 3 > v87)
                      v87 = v88 >> 3;
                    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
                      v89 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v89 = v87;
                    if (v89)
                    {
                      v90 = (char *)sub_18D16735C((uint64_t)&__p[2], v89);
                      v70 = (char *)__p[0];
                      v79 = (char *)__p[1];
                    }
                    else
                    {
                      v90 = 0;
                    }
                    v91 = &v90[16 * v86];
                    *(_QWORD *)v91 = v78;
                    *((_QWORD *)v91 + 1) = v77;
                    v92 = v91;
                    if (v79 != v70)
                    {
                      do
                      {
                        *((_OWORD *)v92 - 1) = *((_OWORD *)v79 - 1);
                        v92 -= 16;
                        v79 -= 16;
                      }
                      while (v79 != v70);
                      v70 = (char *)__p[0];
                    }
                    v80 = v91 + 16;
                    __p[0] = v92;
                    __p[1] = v91 + 16;
                    __p[2] = &v90[16 * v89];
                    if (v70)
                      operator delete(v70);
                  }
                  else
                  {
                    *(_QWORD *)__p[1] = v78;
                    *((_QWORD *)v79 + 1) = v77;
                    v80 = v79 + 16;
                  }
                  __p[1] = v80;
                }
                ++v75;
              }
              while (v75 < *(int *)(v57 + 16));
            }
          }
          LogLevel = (cnprint::CNPrinter *)__p[0];
          if (__p[0] != __p[1])
          {
            if ((v28 & 4) != 0)
            {
              v146[0] = *(_BYTE *)(v57 + 80);
              *(_QWORD *)&v146[24] = *(_QWORD *)(v57 + 64);
              *(_OWORD *)&v146[8] = *(_OWORD *)(v57 + 48);
              v93 = (_QWORD *)(v57 + 72);
              v94 = &v146[32];
            }
            else
            {
              v145.i64[0] = *(_QWORD *)(v57 + 32);
              v93 = (_QWORD *)(v57 + 40);
              v94 = &v145.i8[8];
            }
            *(_QWORD *)v94 = *v93;
            v100 = v148.i64[1];
            if (v148.i64[1] >= (unint64_t)v149)
            {
              v105 = 0xCCCCCCCCCCCCCCCDLL * ((v148.i64[1] - v148.i64[0]) >> 4);
              v106 = v105 + 1;
              if (v105 + 1 > 0x333333333333333)
                sub_18D07AFE4();
              if (0x999999999999999ALL * ((uint64_t)&v149[-v148.i64[0]] >> 4) > v106)
                v106 = 0x999999999999999ALL * ((uint64_t)&v149[-v148.i64[0]] >> 4);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v149[-v148.i64[0]] >> 4) >= 0x199999999999999)
                v107 = 0x333333333333333;
              else
                v107 = v106;
              v154 = &v149;
              if (v107)
                v108 = (char *)sub_18D226298((uint64_t)&v149, v107);
              else
                v108 = 0;
              v109 = &v108[80 * v105];
              v151 = v108;
              v152.i64[0] = (uint64_t)v109;
              v153 = &v108[80 * v107];
              *(_QWORD *)v109 = 0;
              *((_QWORD *)v109 + 1) = 0;
              *((_QWORD *)v109 + 2) = 0;
              *(_OWORD *)v109 = *(_OWORD *)__p;
              *((void **)v109 + 2) = __p[2];
              memset(__p, 0, sizeof(__p));
              v110 = *(_OWORD *)&v146[16];
              v111 = *(_QWORD *)&v146[32];
              v112 = v145;
              *(_OWORD *)(v109 + 40) = *(_OWORD *)v146;
              *(int64x2_t *)(v109 + 24) = v112;
              *((_QWORD *)v109 + 9) = v111;
              *(_OWORD *)(v109 + 56) = v110;
              v104 = v109 + 80;
              v152.i64[1] = (uint64_t)(v109 + 80);
              v113 = v148;
              v114 = v152.i64[0];
              if (v148.i64[1] == v148.i64[0])
              {
                v121 = vdupq_n_s64(v148.u64[1]);
              }
              else
              {
                v115 = 0;
                do
                {
                  v116 = v114 + v115;
                  v117 = v113.i64[1] + v115;
                  *(_QWORD *)(v116 - 80) = 0;
                  *(_QWORD *)(v116 - 72) = 0;
                  *(_QWORD *)(v116 - 64) = 0;
                  *(_OWORD *)(v116 - 80) = *(_OWORD *)(v113.i64[1] + v115 - 80);
                  *(_QWORD *)(v116 - 64) = *(_QWORD *)(v113.i64[1] + v115 - 64);
                  *(_QWORD *)(v117 - 80) = 0;
                  *(_QWORD *)(v117 - 72) = 0;
                  *(_QWORD *)(v117 - 64) = 0;
                  v118 = *(_OWORD *)(v113.i64[1] + v115 - 56);
                  v119 = *(_OWORD *)(v113.i64[1] + v115 - 40);
                  v120 = *(_OWORD *)(v113.i64[1] + v115 - 24);
                  *(_QWORD *)(v116 - 8) = *(_QWORD *)(v113.i64[1] + v115 - 8);
                  *(_OWORD *)(v116 - 24) = v120;
                  *(_OWORD *)(v116 - 40) = v119;
                  *(_OWORD *)(v116 - 56) = v118;
                  v115 -= 80;
                }
                while (v113.i64[1] + v115 != v113.i64[0]);
                v121 = v148;
                v104 = (char *)v152.i64[1];
                v114 += v115;
              }
              v148.i64[0] = v114;
              v148.i64[1] = (uint64_t)v104;
              v152 = v121;
              v122 = v149;
              v149 = v153;
              v153 = v122;
              v151 = (char *)v121.i64[0];
              sub_18D23A0AC((uint64_t)&v151);
              LogLevel = (cnprint::CNPrinter *)__p[0];
            }
            else
            {
              LogLevel = 0;
              *(_QWORD *)v148.i64[1] = 0;
              *(_QWORD *)(v100 + 8) = 0;
              *(_QWORD *)(v100 + 16) = 0;
              *(_OWORD *)v100 = *(_OWORD *)__p;
              *(void **)(v100 + 16) = __p[2];
              v102 = *(_OWORD *)v146;
              v101 = *(_OWORD *)&v146[16];
              v103 = v145;
              *(_QWORD *)(v100 + 72) = *(_QWORD *)&v146[32];
              memset(__p, 0, sizeof(__p));
              *(int64x2_t *)(v100 + 24) = v103;
              *(_OWORD *)(v100 + 56) = v101;
              *(_OWORD *)(v100 + 40) = v102;
              v104 = (char *)(v100 + 80);
            }
            v148.i64[1] = (uint64_t)v104;
          }
          if (LogLevel)
          {
            __p[1] = LogLevel;
            operator delete(LogLevel);
          }
          goto LABEL_122;
        }
LABEL_123:
        a2 = v142;
        if (v148.i64[0] != v148.i64[1])
        {
          v123 = *((_QWORD *)v142 + 14);
          v124 = *((_QWORD *)v142 + 15);
          if (v123 >= v124)
          {
            v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v123 - *v141) >> 3);
            v132 = v131 + 1;
            if (v131 + 1 > 0x666666666666666)
              sub_18D07AFE4();
            v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v124 - *v141) >> 3);
            if (2 * v133 > v132)
              v132 = 2 * v133;
            if (v133 >= 0x333333333333333)
              v134 = 0x666666666666666;
            else
              v134 = v132;
            v145.i64[1] = (uint64_t)v140;
            v135 = (char *)sub_18D184D30((uint64_t)v140, v134);
            v136 = (int64x2_t *)&v135[40 * v131];
            __p[0] = v135;
            __p[1] = v136;
            v145.i64[0] = (uint64_t)&v135[40 * v137];
            *v136 = v147;
            v136[1].i64[1] = 0;
            v136[2].i64[0] = 0;
            v136[1].i64[0] = 0;
            v136[1] = v148;
            v136[2].i64[0] = (uint64_t)v149;
            v148 = 0uLL;
            v149 = 0;
            __p[2] = &v136[2].u64[1];
            sub_18D239FB8(v141, __p);
            v125 = *((_QWORD *)v142 + 14);
            sub_18D23A04C((uint64_t)__p);
          }
          else
          {
            *(int64x2_t *)v123 = v147;
            *(_QWORD *)(v123 + 24) = 0;
            *(_QWORD *)(v123 + 32) = 0;
            *(_QWORD *)(v123 + 16) = 0;
            *(int64x2_t *)(v123 + 16) = v148;
            *(_QWORD *)(v123 + 32) = v149;
            v148 = 0uLL;
            v149 = 0;
            v125 = v123 + 40;
          }
          *((_QWORD *)v142 + 14) = v125;
        }
      }
      else if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v151) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, no building hash is given, building is skipped.", v126, v127, v128, v129, v130, v139);
      }
      __p[0] = &v148;
      sub_18D226340((void ***)__p);
LABEL_137:
      ++v25;
    }
    while (v25 < *((int *)this + 6));
  }
  if (*((int *)this + 12) < 1)
    return 1;
  v138 = 0;
  do
  {
    __p[0] = *(void **)(*((_QWORD *)this + 5) + 8 * v138);
    sub_18D23A8D4((uint64_t **)a2 + 18, (unint64_t *)__p, (uint64_t *)__p);
    ++v138;
    result = 1;
  }
  while (v138 < *((int *)this + 12));
  return result;
}

void sub_18D22EEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  *(_QWORD *)(v22 - 152) = a14;
  sub_18D226340((void ***)(v22 - 152));
  _Unwind_Resume(a1);
}

void sub_18D22EF2C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v4 = v2 - 40;
      v5 = (void **)(v2 - 24);
      sub_18D226340(&v5);
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_18D22EF88(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_18D07AFE4();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_18D184D30(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    sub_18D239FB8(a1, v7);
    return sub_18D23A04C((uint64_t)v7);
  }
  return result;
}

double raven::ConvertProtobufToBarometerEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::BaroSample *a2, raven::BarometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  float v13;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v12 = *((_QWORD *)this + 1);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::BaroSample::default_instance_ + 8);
    }
    if (raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10))
    {
      v13 = *((float *)this + 5);
      *((double *)a2 + 13) = *((float *)this + 4);
      *((_BYTE *)a2 + 112) = 1;
      *(double *)a9.i64 = v13;
      *((double *)a2 + 15) = v13;
      *((_WORD *)a2 + 64) = 257;
    }
  }
  return *(double *)a9.i64;
}

uint64_t raven::ConvertProtobufToBodyMetricsEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *a2, raven::BodyMetricsEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry::default_instance_ + 16);
    }
    v16 = *(_DWORD *)(v15 + 44);
    if (v16 <= 7)
      *((_BYTE *)a2 + 104) = v16;
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToDeviceMotionAccelerationEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;

  if ((*((_BYTE *)this + 56) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v15 + 56) & 1) == 0)
      return 0;
    v16 = *((_QWORD *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v16 + 56) & 2) == 0)
      return 0;
    v17 = *((_QWORD *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v18 = *(_QWORD *)(v17 + 8);
    if (!v18)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    v19 = *(double *)(v18 + 16);
    v20 = *((_QWORD *)this + 2);
    if (!v20)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v21 = *(_QWORD *)(v20 + 8);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v21 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    v22 = *(double *)(v21 + 24);
    v23 = *((_QWORD *)this + 2);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v24 = *(_QWORD *)(v23 + 8);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    v25 = *(double *)(v24 + 32);
    v26 = *((_QWORD *)this + 2);
    if (!v26)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v27 = *(_QWORD *)(v26 + 8);
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v27 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    v28 = *(double *)(v27 + 8);
    v29 = v25 + v25;
    v30 = *((_QWORD *)this + 2);
    if (!v30)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v30 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v31 = v19 + v19;
    v32 = *(_QWORD *)(v30 + 16);
    if (!v32)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v32 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 16);
    }
    *((double *)a2 + 13) = (v19 * v29 - v28 * (v22 + v22) - *(float *)(v32 + 8)) * 9.80665;
    v33 = *((_QWORD *)this + 2);
    if (!v33)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v33 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v34 = v31 * v28 + v22 * v29;
    v35 = *(_QWORD *)(v33 + 16);
    if (!v35)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v35 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 16);
    }
    v36 = 1.0 - v19 * v31;
    *((double *)a2 + 14) = (v34 - *(float *)(v35 + 12)) * 9.80665;
    v37 = *((_QWORD *)this + 2);
    if (!v37)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v37 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v38 = v36 - v22 * (v22 + v22);
    v39 = *(_QWORD *)(v37 + 16);
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 16);
    }
    *((double *)a2 + 15) = (v38 - *(float *)(v39 + 16)) * 9.80665;
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToDeviceMotionAttitudeEvent(uint64_t a1, uint64_t a2, signed int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _BOOL4 v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  unsigned __int8 v60;
  __int16 v61;
  unsigned __int8 v62;
  __int16 v63;

  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
    return 0;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 8);
  }
  v15 = raven::ConvertProtobufToRavenTime(v14, a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 16);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if (!*(_BYTE *)(v16 + 46))
      return 0;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v17 + 56) & 1) == 0 || (*(_BYTE *)(a1 + 56) & 0x40) == 0)
      return 0;
    v18 = *(_QWORD *)(a1 + 16);
    if (!v18)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v18 + 56) & 0x10) == 0)
      return 0;
    v19 = *(_QWORD *)(a1 + 16);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v20 = *(_DWORD *)(v19 + 40);
    if (v20 >= 6)
    {
      result = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result);
      if (result <= 1)
      {
        v63 = 12;
        v62 = 1;
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
        v58 = v22 + (double)v21;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, &v62, "t,%.3lf,WARNING: Device Motion, unknown mag calibration level", v23, v24, v25, v26, v27, SLOBYTE(v58));
      }
      v20 = -1;
    }
    if ((int)v20 < a3)
      return 0;
    v28 = *(_QWORD *)(a1 + 16);
    if (!v28)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v28 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v29 = *(_QWORD *)(v28 + 8);
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    v30 = *(double *)(v29 + 16);
    v31 = *(_QWORD *)(a1 + 16);
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v31 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v32 = *(_QWORD *)(v31 + 8);
    if (!v32)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v32 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    v33 = *(double *)(v32 + 24);
    v34 = *(_QWORD *)(a1 + 16);
    if (!v34)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v34 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v35 = *(_QWORD *)(v34 + 8);
    if (!v35)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v35 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    v36 = *(double *)(v35 + 32);
    v37 = *(_QWORD *)(a1 + 16);
    if (!v37)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v37 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v38 = *(_QWORD *)(v37 + 8);
    if (!v38)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v38 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    v39 = *(double *)(v38 + 8);
    v40 = sqrt(v33 * v33 + v30 * v30 + v36 * v36 + v39 * v39);
    if (fabs(v40) >= 2.22044605e-16)
    {
      v42 = v30 / v40;
      v43 = v33 / v40;
      v44 = v36 / v40;
      v41 = v39 / v40;
    }
    else
    {
      v41 = 1.0;
      v42 = 0.0;
      v43 = 0.0;
      v44 = 0.0;
    }
    *(double *)(a2 + 104) = v42;
    *(double *)(a2 + 112) = v43;
    *(double *)(a2 + 120) = v44;
    *(double *)(a2 + 128) = v41;
    v45 = *(float *)(a1 + 44) < 20.0;
    v46 = *(_QWORD *)(a1 + 16);
    if (!v46)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v46 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v47 = dbl_18D331B90[v45];
    v48 = *(int *)(v46 + 40);
    if (v48 >= 6)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
      {
        v61 = 12;
        v60 = 1;
        v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
        v59 = v51 + (double)v50;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v61, &v60, "t,%.3lf,WARNING: Device Motion, unknown mag calibration level", v52, v53, v54, v55, v56, SLOBYTE(v59));
      }
      v49 = 100.0;
    }
    else
    {
      v49 = dbl_18D331B08[v48];
    }
    v57 = v47 + v49;
    *(double *)(a2 + 136) = v57;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(double *)(a2 + 168) = v57;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(double *)(a2 + 192) = v57;
    *(_QWORD *)(a2 + 200) = 0;
    *(double *)(a2 + 208) = v57;
    *(_WORD *)(a2 + 216) = 513;
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToDeviceMotionRotationRateEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *a2, raven::RateGyroEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((*((_BYTE *)this + 56) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v15 + 56) & 4) == 0)
      return 0;
    v16 = *((_QWORD *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v17 = *(_QWORD *)(v16 + 24);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 24);
    }
    *((double *)a2 + 13) = *(float *)(v17 + 8);
    v18 = *((_QWORD *)this + 2);
    if (!v18)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v19 = *(_QWORD *)(v18 + 24);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 24);
    }
    *((double *)a2 + 14) = *(float *)(v19 + 12);
    v20 = *((_QWORD *)this + 2);
    if (!v20)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    v21 = *(_QWORD *)(v20 + 24);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v21 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 24);
    }
    *((double *)a2 + 15) = *(float *)(v21 + 16);
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToGnssId(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_DWORD *)(a1 + 24);
  if ((v3 & 1) != 0)
  {
    v4 = *(_DWORD *)(a1 + 16);
    if ((v4 - 1) > 0x3F || ((1 << (v4 - 1)) & 0x800000008000808BLL) == 0)
      v4 = 0;
    *(_DWORD *)a2 = v4;
  }
  if ((v3 & 2) == 0)
    return 1;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)a1);
    v6 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_ + 8);
  }
  v7 = *(_DWORD *)(v6 + 44);
  if ((v7 & 1) != 0)
  {
    v9 = *(_DWORD *)(v6 + 16);
    goto LABEL_24;
  }
  if ((v7 & 0x10) != 0)
  {
    v9 = *(_DWORD *)(v6 + 28);
    goto LABEL_24;
  }
  if ((v7 & 0x20) != 0)
  {
    v9 = *(_DWORD *)(v6 + 32);
    goto LABEL_24;
  }
  if ((v7 & 2) != 0)
  {
    v10 = *(_QWORD *)(v6 + 8);
    if (!v10)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)a1);
      v10 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_ + 8);
    }
    v11 = *(_DWORD *)(v10 + 24);
    if ((v11 & 1) != 0)
    {
      v12 = *(_DWORD *)(v10 + 16);
      if (v12 != (char)v12)
        return 0;
      *(_BYTE *)(a2 + 5) = v12;
      v11 = *(_DWORD *)(v10 + 24);
    }
    if ((v11 & 2) == 0)
      return 1;
    v13 = *(_QWORD *)(v10 + 8);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)a1);
      v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_ + 8);
    }
    if ((*(_BYTE *)(v13 + 20) & 1) == 0)
      return 1;
    v14 = *(_QWORD *)(v10 + 8);
    if (!v14)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)a1);
      v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_ + 8);
    }
    v9 = *(_DWORD *)(v14 + 8);
LABEL_24:
    if (v9 <= 0xFF)
    {
LABEL_26:
      *(_BYTE *)(a2 + 4) = v9;
      return 1;
    }
    return 0;
  }
  if ((v7 & 4) != 0)
  {
    v9 = *(_DWORD *)(v6 + 20);
    goto LABEL_24;
  }
  if ((v7 & 8) != 0)
  {
    v9 = *(_DWORD *)(v6 + 24);
    goto LABEL_24;
  }
  result = 0;
  if ((v7 & 0x40) != 0)
  {
    v9 = *(_DWORD *)(v6 + 36);
    if (v9 <= 0xFF)
      goto LABEL_26;
  }
  return result;
}

uint64_t raven::ConvertProtobufToGnssBand(_DWORD *a1, _BYTE *a2)
{
  int v2;
  char v3;

  v2 = *a1 - 2;
  if (v2 > 0xA)
    v3 = 0;
  else
    v3 = byte_18D331B38[v2];
  *a2 = v3;
  return 1;
}

uint64_t raven::ConvertProtobufToGnssMeasDataEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2, raven::GnssMeasurementDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  int v12;
  uint64_t v13;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  int v43;
  double v44;
  float v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  _OWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  _DWORD *v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  char v80;
  int v81;
  char v82;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  float32x2_t *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  __int128 v150;
  double v151;
  unint64_t v152;
  double *v153;
  unint64_t i;
  double v155;
  uint64_t v156;
  int v157;
  _OWORD *v158;
  __int128 v159;
  int v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  double v174;
  double v176;
  double v177;
  float v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unint64_t v191;
  _BYTE *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  int v205;
  char v206;
  char v207;
  uint64_t v208;
  double v209;
  double v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  int v218;
  char *v219;
  char *v220;
  char *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  __int128 v228;
  __int128 v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  __int128 *v242;
  __int128 *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  __int128 v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  unsigned int v260;
  char v261;
  uint64_t v262;
  int v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  char *v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  CoreNavigation::CLP::LogEntry::PrivateData *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  int64x2_t *v285;
  CoreNavigation::CLP::LogEntry::PrivateData *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int64x2_t *v290;
  CoreNavigation::CLP::LogEntry::PrivateData *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  CoreNavigation::CLP::LogEntry::PrivateData *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int64x2_t *v300;
  CoreNavigation::CLP::LogEntry::PrivateData *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  int32x4_t v309;
  unint64_t v310;
  int64x2_t v311;
  uint64_t *v312;
  _QWORD *v313;
  raven *v314;
  int64x2_t v315;
  __int128 v316;
  uint64_t v317;
  void *__p;
  unint64_t v319;
  unint64_t v320;
  float v321;
  char v322;
  int64x2_t v323;
  _OWORD v324[2];
  int64x2_t v325;
  __int128 v326;
  __int128 v327;
  _BYTE v328[24];
  _BYTE v329[32];
  float v330;
  uint64_t v331;
  __int16 v332;
  void *v333;
  char *v334;
  char *v335;
  int v336;
  char *v337;
  _BYTE v338[24];
  char *v339;
  _QWORD v340[3];
  char v341;
  __int128 v342;
  __int128 v343;

  v12 = *((_DWORD *)this + 33);
  a9.i64[0] = *((_QWORD *)this + 10);
  a10.i64[0] = 0;
  if ((v12 & 0x20) == 0)
    *(double *)a9.i64 = 0.0;
  if ((v12 & 0x40) != 0 && *(double *)a9.i64 > 0.0 && (v15 = *((double *)this + 11), v15 > 0.0))
  {
    v316 = 0uLL;
    v16 = (uint64_t)CNTimeSpan::SetTimeSpan((uint64_t *)&v316, 0, a9, a10);
    *(_OWORD *)((char *)a2 + 8) = v316;
    *((double *)a2 + 13) = v15;
  }
  else
  {
    if ((v12 & 1) == 0)
      goto LABEL_8;
    v13 = *((_QWORD *)this + 1);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                      + 8);
    }
    if ((*(_BYTE *)(v13 + 36) & 4) == 0)
    {
LABEL_8:
      LOWORD(v316) = 12;
      LOBYTE(v337) = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v316, (unsigned __int8 *)&v337, "MRCC mach continuous time not present", a4, a5, a6, a7, a8, v305);
      return 0;
    }
    v22 = *((_QWORD *)this + 1);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                      + 8);
    }
    a9.i64[0] = *(_QWORD *)(v22 + 24);
    v316 = 0uLL;
    v16 = (uint64_t)CNTimeSpan::SetTimeSpan((uint64_t *)&v316, 0, a9, a10);
    *(_OWORD *)((char *)a2 + 8) = v316;
    *((_QWORD *)a2 + 13) = 0;
  }
  v314 = this;
  if ((*((_BYTE *)this + 132) & 2) != 0)
  {
    v23 = *((_QWORD *)this + 2);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
      v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                      + 16);
    }
    if ((*(_BYTE *)(v23 + 44) & 1) == 0)
      goto LABEL_48;
    v24 = *(_QWORD *)(v23 + 8);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
      v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_ + 8);
    }
    v25 = *(_DWORD *)(v24 + 44);
    if ((v25 & 1) != 0)
      *((_QWORD *)a2 + 14) = *(_QWORD *)(v24 + 8);
    if ((v25 & 2) == 0)
      goto LABEL_32;
    v26 = *(_DWORD **)(v24 + 16);
    if (!v26)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
      v26 = *(_DWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 16);
    }
    v27 = v26[8];
    if ((v27 & 4) != 0)
    {
      *((_DWORD *)a2 + 32) = v26[4];
      if ((v27 & 2) == 0)
      {
LABEL_29:
        if ((v27 & 8) == 0)
          goto LABEL_30;
LABEL_627:
        *((_DWORD *)a2 + 33) = v26[5];
        if ((v27 & 1) != 0)
LABEL_31:
          *((_DWORD *)a2 + 30) = v26[2];
LABEL_32:
        if ((*(_BYTE *)(v24 + 44) & 4) != 0)
        {
          v28 = *(_QWORD *)(v24 + 24);
          if (!v28)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
            v28 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 24);
          }
          v29 = *(_DWORD *)(v28 + 52);
          if ((v29 & 1) != 0)
            *((_QWORD *)a2 + 17) = *(_QWORD *)(v28 + 8);
          if ((v29 & 2) != 0)
            *((_QWORD *)a2 + 18) = *(_QWORD *)(v28 + 16);
        }
        if ((*(_BYTE *)(v24 + 44) & 8) == 0)
          goto LABEL_48;
        v30 = *(_QWORD *)(v24 + 32);
        if (!v30)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
          v30 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 32);
        }
        v31 = *(_DWORD *)(v30 + 40);
        if ((v31 & 8) != 0)
        {
          *((_QWORD *)a2 + 21) = *(_QWORD *)(v30 + 24);
          if ((v31 & 1) == 0)
          {
LABEL_44:
            if ((v31 & 0x10) == 0)
              goto LABEL_45;
            goto LABEL_631;
          }
        }
        else if ((v31 & 1) == 0)
        {
          goto LABEL_44;
        }
        *((_QWORD *)a2 + 19) = *(_QWORD *)(v30 + 8);
        if ((v31 & 0x10) == 0)
        {
LABEL_45:
          if ((v31 & 4) == 0)
            goto LABEL_46;
LABEL_632:
          *((_DWORD *)a2 + 41) = *(_DWORD *)(v30 + 20);
          if ((v31 & 2) != 0)
LABEL_47:
            *((_DWORD *)a2 + 40) = *(_DWORD *)(v30 + 16);
LABEL_48:
          v32 = *(int *)(v23 + 24);
          if ((_DWORD)v32)
          {
            v33 = *(uint64_t **)(v23 + 16);
            v308 = (_QWORD *)((char *)a2 + 184);
            v315 = vdupq_n_s64(0x7FF8000000000000uLL);
            v309 = vdupq_n_s32(0x7FC00000u);
            v312 = &v33[v32];
            while (1)
            {
              v34 = *v33;
              LODWORD(v316) = 0;
              WORD2(v316) = 32512;
              DWORD2(v316) = 0;
              WORD6(v316) = 0;
              v317 = -1;
              __p = (void *)-1;
              v319 = -1;
              v320 = 0x7FF8000000000000;
              v321 = NAN;
              v322 = 0;
              v323 = v315;
              LOBYTE(v324[0]) = 0;
              *(int64x2_t *)((char *)v324 + 8) = v315;
              BYTE8(v324[1]) = 0;
              v325 = v315;
              LOWORD(v326) = 1;
              BYTE8(v326) = 0;
              LOBYTE(v327) = 0;
              BYTE8(v327) = 0;
              v328[0] = 0;
              *(int64x2_t *)&v328[8] = v315;
              v329[0] = 1;
              *(_QWORD *)&v329[8] = 0;
              *(_DWORD *)&v329[16] = 2143289344;
              *(_WORD *)&v329[20] = 0;
              v35 = *(_DWORD *)(v34 + 112);
              if ((v35 & 1) != 0)
              {
                v36 = *(_QWORD *)(v34 + 8);
                if (!v36)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
                  v36 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 8);
                }
                v16 = raven::ConvertProtobufToGnssId(v36, (uint64_t)&v316);
                if (!(_DWORD)v16)
                {
LABEL_622:
                  v54 = *(_OWORD **)&v329[8];
LABEL_623:
                  *(_QWORD *)&v329[8] = 0;
                  if (v54)
                    MEMORY[0x18D78B5D4](v54, 0x1000C4041240993);
                  return 0;
                }
                v35 = *(_DWORD *)(v34 + 112);
              }
              if ((v35 & 2) != 0)
              {
                v38 = *(_QWORD *)(v34 + 16);
                if (!v38)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                  v38 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 16);
                }
                v39 = *(_DWORD *)(v38 + 96);
                if ((v39 & 1) != 0)
                {
                  v40 = *(_DWORD *)(v38 + 88) - 2;
                  if (v40 > 0xA)
                    v41 = 0;
                  else
                    v41 = byte_18D331B38[v40];
                  BYTE8(v316) = v41;
                }
                if ((v39 & 2) != 0)
                {
                  v99 = *(_QWORD *)(v38 + 8);
                  if (!v99)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                    v99 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 8);
                  }
                  v100 = *(_DWORD *)(v99 + 16);
                  if ((v100 & 2) != 0)
                  {
                    BYTE10(v316) = *(_BYTE *)(v99 + 9);
                    if ((v100 & 4) != 0)
                      goto LABEL_226;
LABEL_222:
                    if ((v100 & 1) == 0)
                      goto LABEL_223;
LABEL_227:
                    BYTE9(v316) = *(_BYTE *)(v99 + 8);
                    if ((v100 & 8) == 0)
                      goto LABEL_56;
                  }
                  else
                  {
                    if ((v100 & 4) == 0)
                      goto LABEL_222;
LABEL_226:
                    BYTE11(v316) = *(_BYTE *)(v99 + 10);
                    if ((v100 & 1) != 0)
                      goto LABEL_227;
LABEL_223:
                    if ((v100 & 8) == 0)
                      goto LABEL_56;
                  }
                  BYTE12(v316) = *(_BYTE *)(v99 + 11);
                  goto LABEL_56;
                }
                if ((v39 & 4) != 0)
                  goto LABEL_622;
                if ((v39 & 8) != 0)
                {
                  v101 = *(_QWORD *)(v38 + 24);
                  if (!v101)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                    v101 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 24);
                  }
                  v102 = *(_DWORD *)(v101 + 16);
                  if ((v102 & 4) != 0)
                  {
                    BYTE11(v316) = *(_BYTE *)(v101 + 10);
                    if ((v102 & 2) == 0)
                      goto LABEL_233;
                  }
                  else if ((v102 & 2) == 0)
                  {
LABEL_233:
                    if ((v102 & 8) == 0)
                      goto LABEL_261;
LABEL_260:
                    BYTE12(v316) = *(_BYTE *)(v101 + 11);
                    goto LABEL_261;
                  }
                  BYTE10(v316) = *(_BYTE *)(v101 + 9);
                  if ((v102 & 8) == 0)
                    goto LABEL_261;
                  goto LABEL_260;
                }
                if ((v39 & 0x10) != 0)
                {
                  v105 = *(_QWORD *)(v38 + 32);
                  if (!v105)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                    v105 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 32);
                  }
                  v106 = *(_DWORD *)(v105 + 20);
                  if ((v106 & 1) != 0)
                  {
                    BYTE9(v316) = *(_BYTE *)(v105 + 8);
                    if ((v106 & 4) != 0)
                      goto LABEL_273;
LABEL_254:
                    if ((v106 & 8) == 0)
                      goto LABEL_255;
LABEL_274:
                    BYTE12(v316) = *(_BYTE *)(v105 + 11);
                    if ((v106 & 2) != 0)
                      goto LABEL_275;
LABEL_256:
                    if ((v106 & 0x10) == 0)
                      goto LABEL_56;
                  }
                  else
                  {
                    if ((v106 & 4) == 0)
                      goto LABEL_254;
LABEL_273:
                    BYTE11(v316) = *(_BYTE *)(v105 + 10);
                    if ((v106 & 8) != 0)
                      goto LABEL_274;
LABEL_255:
                    if ((v106 & 2) == 0)
                      goto LABEL_256;
LABEL_275:
                    BYTE10(v316) = *(_BYTE *)(v105 + 9);
                    if ((v106 & 0x10) == 0)
                      goto LABEL_56;
                  }
                  BYTE13(v316) = *(_BYTE *)(v105 + 12);
                  goto LABEL_56;
                }
                if ((v39 & 0x20) != 0)
                {
                  if (BYTE8(v316) == 5)
                  {
                    v111 = *(_QWORD *)(v38 + 40);
                    if (!v111)
                    {
                      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                      v111 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 40);
                    }
                    v112 = *(_DWORD *)(v111 + 16);
                    if ((v112 & 1) != 0)
                    {
                      BYTE9(v316) = *(_BYTE *)(v111 + 8);
                      if ((v112 & 8) == 0)
                        goto LABEL_288;
                    }
                    else if ((v112 & 8) == 0)
                    {
LABEL_288:
                      if ((v112 & 4) == 0)
                        goto LABEL_56;
                      goto LABEL_302;
                    }
                    BYTE11(v316) = *(_BYTE *)(v111 + 11);
                    if ((v112 & 4) == 0)
                      goto LABEL_56;
LABEL_302:
                    v113 = *(_BYTE *)(v111 + 10);
LABEL_303:
                    BYTE10(v316) = v113;
                    goto LABEL_56;
                  }
                  if (BYTE8(v316) != 4)
                    goto LABEL_622;
                  v107 = *(_QWORD *)(v38 + 40);
                  if (!v107)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                    v107 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 40);
                  }
                  v108 = *(_DWORD *)(v107 + 16);
                  if ((v108 & 2) != 0)
                  {
                    BYTE10(v316) = *(_BYTE *)(v107 + 9);
                    if ((v108 & 1) != 0)
                      goto LABEL_305;
LABEL_269:
                    if ((v108 & 8) == 0)
                      goto LABEL_270;
LABEL_306:
                    BYTE12(v316) = *(_BYTE *)(v107 + 11);
                    if ((v108 & 4) == 0)
                      goto LABEL_56;
                  }
                  else
                  {
                    if ((v108 & 1) == 0)
                      goto LABEL_269;
LABEL_305:
                    BYTE9(v316) = *(_BYTE *)(v107 + 8);
                    if ((v108 & 8) != 0)
                      goto LABEL_306;
LABEL_270:
                    if ((v108 & 4) == 0)
                      goto LABEL_56;
                  }
                  BYTE11(v316) = *(_BYTE *)(v107 + 10);
                  goto LABEL_56;
                }
                if ((v39 & 0x40) != 0)
                {
                  v109 = *(_QWORD *)(v38 + 48);
                  if (!v109)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                    v109 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 48);
                  }
                  v110 = *(_DWORD *)(v109 + 16);
                  if ((v110 & 4) != 0)
                  {
                    BYTE11(v316) = *(_BYTE *)(v109 + 10);
                    if ((v110 & 8) != 0)
                      goto LABEL_297;
LABEL_281:
                    if ((v110 & 1) == 0)
                      goto LABEL_282;
LABEL_298:
                    BYTE9(v316) = *(_BYTE *)(v109 + 8);
                    if ((v110 & 2) == 0)
                      goto LABEL_56;
                  }
                  else
                  {
                    if ((v110 & 8) == 0)
                      goto LABEL_281;
LABEL_297:
                    BYTE12(v316) = *(_BYTE *)(v109 + 11);
                    if ((v110 & 1) != 0)
                      goto LABEL_298;
LABEL_282:
                    if ((v110 & 2) == 0)
                      goto LABEL_56;
                  }
                  v113 = *(_BYTE *)(v109 + 9);
                  goto LABEL_303;
                }
                if ((v39 & 0x80) != 0)
                {
                  v101 = *(_QWORD *)(v38 + 56);
                  if (!v101)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                    v101 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 56);
                  }
                  v102 = *(_DWORD *)(v101 + 16);
                  if ((v102 & 8) != 0)
                  {
                    BYTE12(v316) = *(_BYTE *)(v101 + 11);
                    if ((v102 & 4) != 0)
                      goto LABEL_312;
LABEL_294:
                    if ((v102 & 2) != 0)
LABEL_313:
                      BYTE10(v316) = *(_BYTE *)(v101 + 9);
                  }
                  else
                  {
                    if ((v102 & 4) == 0)
                      goto LABEL_294;
LABEL_312:
                    BYTE11(v316) = *(_BYTE *)(v101 + 10);
                    if ((v102 & 2) != 0)
                      goto LABEL_313;
                  }
LABEL_261:
                  if ((v102 & 1) != 0)
                    BYTE9(v316) = *(_BYTE *)(v101 + 8);
                  goto LABEL_56;
                }
                if ((v39 & 0x100) != 0)
                {
                  v114 = *(_QWORD *)(v38 + 64);
                  if (!v114)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
                    v114 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 64);
                  }
                  v16 = sub_18D23A154(v114, (_BYTE *)&v316 + 9);
                }
                else
                {
                  if ((v39 & 0x200) != 0)
                  {
                    v101 = *(_QWORD *)(v38 + 72);
                    if (!v101)
                    {
                      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                      v101 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 72);
                    }
                    v102 = *(_DWORD *)(v101 + 16);
                    if ((v102 & 2) != 0)
                      BYTE10(v316) = *(_BYTE *)(v101 + 9);
                    if ((v102 & 4) != 0)
                      BYTE11(v316) = *(_BYTE *)(v101 + 10);
                    goto LABEL_261;
                  }
                  if ((v39 & 0x400) == 0)
                    goto LABEL_622;
                  v98 = *(_QWORD *)(v38 + 80);
                  if (!v98)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
                    v98 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 80);
                  }
                  v16 = sub_18D23A1AC(v98, (_BYTE *)&v316 + 9);
                }
              }
LABEL_56:
              v37 = *(_DWORD *)(v34 + 112);
              if ((v37 & 4) != 0)
              {
                v317 = *(_QWORD *)(v34 + 24);
                if ((v37 & 8) == 0)
                {
LABEL_58:
                  if ((v37 & 0x10) == 0)
                    goto LABEL_59;
                  goto LABEL_68;
                }
              }
              else if ((v37 & 8) == 0)
              {
                goto LABEL_58;
              }
              __p = *(void **)(v34 + 32);
              if ((v37 & 0x10) == 0)
              {
LABEL_59:
                if ((v37 & 0x20) == 0)
                  goto LABEL_79;
                goto LABEL_69;
              }
LABEL_68:
              v319 = *(_QWORD *)(v34 + 40);
              if ((v37 & 0x20) == 0)
                goto LABEL_79;
LABEL_69:
              v42 = *(_QWORD *)(v34 + 48);
              if (!v42)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                v42 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 48);
              }
              v43 = *(_DWORD *)(v42 + 32);
              if ((v43 & 1) != 0)
                v320 = *(_QWORD *)(v42 + 8);
              if ((v43 & 2) != 0)
              {
                v44 = *(double *)(v42 + 16);
                if (v44 < 1.17549435e-38 || v44 > 3.40282347e38)
                  goto LABEL_622;
                v45 = v44;
                v321 = v45;
              }
              if ((v43 & 4) != 0)
                v322 = *(_BYTE *)(v42 + 24);
LABEL_79:
              if ((*(_BYTE *)(v34 + 112) & 0x40) != 0)
              {
                v46 = *(_QWORD *)(v34 + 56);
                if (!v46)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                  v46 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 56);
                }
                v47 = *(_DWORD *)(v46 + 32);
                if ((~v47 & 3) != 0)
                  goto LABEL_622;
                v323 = *(int64x2_t *)(v46 + 8);
                if ((v47 & 4) != 0)
                  LOBYTE(v324[0]) = *(_BYTE *)(v46 + 24);
              }
              if ((*(_BYTE *)(v34 + 113) & 8) != 0)
              {
                v48 = *(_QWORD *)(v34 + 88);
                if (!v48)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                  v48 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 88);
                }
                v49 = *(_DWORD *)(v48 + 32);
                if ((~v49 & 3) != 0)
                  goto LABEL_622;
                *(_OWORD *)((char *)v324 + 8) = *(_OWORD *)(v48 + 8);
                if ((v49 & 4) != 0)
                  BYTE8(v324[1]) = *(_BYTE *)(v48 + 24);
              }
              if ((*(_BYTE *)(v34 + 113) & 0x20) != 0)
              {
                v50 = *(_QWORD *)(v34 + 96);
                if (!v50)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                  v50 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 96);
                }
                v51 = *(_DWORD *)(v50 + 32);
                if ((~v51 & 7) != 0)
                  goto LABEL_622;
                v325 = *(int64x2_t *)(v50 + 8);
                LOBYTE(v326) = *(_BYTE *)(v50 + 24);
                if ((v51 & 8) != 0)
                  BYTE1(v326) = *(_BYTE *)(v50 + 25);
              }
              if ((*(_BYTE *)(v34 + 112) & 0x80) != 0)
              {
                v52 = *(_QWORD *)(v34 + 64);
                if (!v52)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
                  v52 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 64);
                }
                v53 = *(_DWORD *)(v52 + 48);
                if ((v53 & 0x10) != 0)
                {
                  v329[0] = *(_BYTE *)(v52 + 40);
                  if ((v53 & 2) != 0)
                    goto LABEL_107;
LABEL_102:
                  if ((v53 & 1) == 0)
                    goto LABEL_103;
LABEL_108:
                  *((_QWORD *)&v326 + 1) = *(_QWORD *)(v52 + 8);
                  LOBYTE(v327) = 1;
                  v53 = *(_DWORD *)(v52 + 48);
                  if ((v53 & 4) != 0)
                    goto LABEL_109;
LABEL_104:
                  if ((v53 & 8) == 0)
                    goto LABEL_112;
                }
                else
                {
                  if ((v53 & 2) == 0)
                    goto LABEL_102;
LABEL_107:
                  *((_QWORD *)&v327 + 1) = *(_QWORD *)(v52 + 16);
                  v328[0] = 1;
                  v53 = *(_DWORD *)(v52 + 48);
                  if ((v53 & 1) != 0)
                    goto LABEL_108;
LABEL_103:
                  if ((v53 & 4) == 0)
                    goto LABEL_104;
LABEL_109:
                  *(_QWORD *)&v328[8] = *(_QWORD *)(v52 + 24);
                  if ((v53 & 8) == 0)
                    goto LABEL_112;
                }
                if (*(double *)(v52 + 32) < 1.0e10)
                  *(_QWORD *)&v328[16] = *(_QWORD *)(v52 + 32);
              }
LABEL_112:
              if ((*(_BYTE *)(v34 + 113) & 1) == 0)
                goto LABEL_166;
              v54 = (_OWORD *)operator new();
              *(_QWORD *)v54 = v309.i64[0];
              v54[1] = 0u;
              v54[2] = v309;
              HIDWORD(v55) = v315.i32[1];
              *(int64x2_t *)((char *)v54 + 8) = v315;
              v54[3] = v309;
              v54[4] = 0u;
              *((_DWORD *)v54 + 16) = 2143289344;
              v56 = *(_QWORD *)&v329[8];
              *(_QWORD *)&v329[8] = v54;
              if (v56)
                v54 = (_OWORD *)MEMORY[0x18D78B5D4](v56, 0x1000C4041240993);
              v57 = *(_QWORD *)(v34 + 72);
              if (!v57)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v54);
                v57 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 72);
              }
              if ((*(_BYTE *)(v57 + 116) & 4) != 0)
              {
                v58 = *(_QWORD *)(v57 + 16);
                if (!v58)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v54);
                  v58 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                  + 16);
                }
                v59 = *(_QWORD *)&v329[8];
                v60 = *(_DWORD *)(v58 + 32);
                if ((v60 & 4) != 0)
                {
                  v103 = *(unsigned int *)(v58 + 24);
                  if (v103 >= 6)
                    v104 = 0;
                  else
                    v104 = 0x40302010000uLL >> (8 * v103);
                  *(_BYTE *)(*(_QWORD *)&v329[8] + 24) = v104;
                  if ((v60 & 1) == 0)
                  {
LABEL_122:
                    if ((v60 & 2) == 0)
                      goto LABEL_124;
LABEL_123:
                    *(_QWORD *)(v59 + 16) = *(_QWORD *)(v58 + 16);
                    goto LABEL_124;
                  }
                }
                else if ((v60 & 1) == 0)
                {
                  goto LABEL_122;
                }
                LODWORD(v55) = *(_DWORD *)(v58 + 24);
                *(double *)(v59 + 8) = (double)v55;
                if ((v60 & 2) != 0)
                  goto LABEL_123;
              }
LABEL_124:
              v61 = *(_DWORD *)(v57 + 116);
              if ((v61 & 1) != 0)
                **(_DWORD **)&v329[8] = *(_DWORD *)(v57 + 8);
              if ((v61 & 0x80) != 0)
              {
                v62 = *(_DWORD *)(v57 + 52);
                if (v62 > 0xFF)
                  goto LABEL_622;
                *(_BYTE *)(*(_QWORD *)&v329[8] + 70) = v62;
              }
              if ((v61 & 2) != 0)
                *(_DWORD *)(*(_QWORD *)&v329[8] + 4) = *(_DWORD *)(v57 + 12);
              if ((v61 & 0x100) != 0)
              {
                v54 = *(_OWORD **)&v329[8];
                v63 = *(_DWORD *)(v57 + 56) - 2;
                if (v63 > 4)
                  goto LABEL_623;
                *(_BYTE *)(*(_QWORD *)&v329[8] + 76) = v63;
              }
              if ((v61 & 8) != 0)
              {
                v64 = *(_DWORD **)(v57 + 24);
                if (!v64)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v54);
                  v64 = *(_DWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                   + 24);
                }
                v65 = *(_QWORD *)&v329[8];
                v66 = v64[6];
                if ((v66 & 2) != 0)
                {
                  *(_DWORD *)(*(_QWORD *)&v329[8] + 36) = v64[3];
                  if ((v66 & 1) == 0)
                  {
LABEL_139:
                    if ((v66 & 4) == 0)
                      goto LABEL_141;
LABEL_140:
                    *(_DWORD *)(v65 + 40) = v64[4];
                    goto LABEL_141;
                  }
                }
                else if ((v66 & 1) == 0)
                {
                  goto LABEL_139;
                }
                *(_DWORD *)(v65 + 32) = v64[2];
                if ((v66 & 4) != 0)
                  goto LABEL_140;
              }
LABEL_141:
              v67 = *(_DWORD *)(v57 + 116);
              if ((v67 & 0x200) != 0)
              {
                v54 = *(_OWORD **)&v329[8];
                v68 = *(_DWORD *)(v57 + 60) - 2;
                if (v68 > 4)
                  goto LABEL_623;
                *(_BYTE *)(*(_QWORD *)&v329[8] + 77) = v68;
              }
              if ((v67 & 0x10) != 0)
              {
                v69 = *(_DWORD **)(v57 + 32);
                if (!v69)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v54);
                  v69 = *(_DWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                   + 32);
                }
                v70 = *(_QWORD *)&v329[8];
                v71 = v69[6];
                if ((v71 & 2) != 0)
                {
                  *(_DWORD *)(*(_QWORD *)&v329[8] + 48) = v69[3];
                  if ((v71 & 1) == 0)
                  {
LABEL_149:
                    if ((v71 & 4) == 0)
                      goto LABEL_151;
LABEL_150:
                    *(_DWORD *)(v70 + 52) = v69[4];
                    goto LABEL_151;
                  }
                }
                else if ((v71 & 1) == 0)
                {
                  goto LABEL_149;
                }
                *(_DWORD *)(v70 + 44) = v69[2];
                if ((v71 & 4) != 0)
                  goto LABEL_150;
              }
LABEL_151:
              v72 = *(_DWORD *)(v57 + 116);
              if ((v72 & 0x40) != 0)
              {
                v73 = *(_DWORD *)(v57 + 48);
                if (HIWORD(v73))
                  goto LABEL_622;
                *(_WORD *)(*(_QWORD *)&v329[8] + 68) = v73;
              }
              if ((v72 & 0x20) == 0)
                goto LABEL_161;
              v74 = *(_DWORD **)(v57 + 40);
              if (!v74)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v54);
                v74 = *(_DWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                 + 40);
              }
              v75 = *(_QWORD *)&v329[8];
              v76 = v74[6];
              if ((v76 & 2) != 0)
              {
                *(_DWORD *)(*(_QWORD *)&v329[8] + 60) = v74[3];
                if ((v76 & 1) != 0)
                {
LABEL_248:
                  *(_DWORD *)(v75 + 56) = v74[2];
                  if ((v76 & 4) == 0)
                    goto LABEL_161;
LABEL_160:
                  *(_DWORD *)(v75 + 64) = v74[4];
                  goto LABEL_161;
                }
              }
              else if ((v76 & 1) != 0)
              {
                goto LABEL_248;
              }
              if ((v76 & 4) != 0)
                goto LABEL_160;
LABEL_161:
              if ((*(_BYTE *)(v57 + 117) & 4) != 0)
              {
                v77 = *(_DWORD *)(v57 + 64);
                if (v77 != -1)
                {
                  v78 = *(_QWORD *)&v329[8];
                  if (!*(_BYTE *)(*(_QWORD *)&v329[8] + 74))
                    *(_BYTE *)(*(_QWORD *)&v329[8] + 74) = 1;
                  *(_WORD *)(v78 + 72) = v77;
                }
              }
LABEL_166:
              v79 = *(_DWORD *)(v34 + 112);
              if ((v79 & 0x200) != 0)
              {
                *(_DWORD *)&v329[16] = *(_DWORD *)(v34 + 80);
                if ((v79 & 0x400) == 0)
                {
LABEL_168:
                  if ((v79 & 0x1000) == 0)
                    goto LABEL_169;
                  goto LABEL_177;
                }
              }
              else if ((v79 & 0x400) == 0)
              {
                goto LABEL_168;
              }
              v81 = *(_DWORD *)(v34 + 84);
              if (v81 == 4)
                v82 = 2;
              else
                v82 = v81 == 3;
              v329[20] = v82;
              if ((v79 & 0x1000) == 0)
              {
LABEL_169:
                v80 = (v323.i64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)&v323.i64[1] < 10000.0
                   || v321 < 90000.0 && (LODWORD(v321) & 0x7FFFFFFFu) < 0x7F800000;
                goto LABEL_184;
              }
LABEL_177:
              v80 = *(_BYTE *)(v34 + 104);
LABEL_184:
              v329[21] = v80;
              v85 = *((_QWORD *)a2 + 24);
              v84 = *((_QWORD *)a2 + 25);
              if (v85 >= v84)
              {
                v87 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v85 - *v308) >> 3);
                v88 = v87 + 1;
                if (v87 + 1 > 0x147AE147AE147AELL)
                  sub_18D07AFE4();
                v89 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v84 - *v308) >> 3);
                if (2 * v89 > v88)
                  v88 = 2 * v89;
                if (v89 >= 0xA3D70A3D70A3D7)
                  v90 = 0x147AE147AE147AELL;
                else
                  v90 = v88;
                v339 = (char *)a2 + 200;
                if (v90)
                  v91 = (char *)sub_18D218020((uint64_t)a2 + 200, v90);
                else
                  v91 = 0;
                v337 = v91;
                *(_QWORD *)v338 = &v91[200 * v87];
                *(_QWORD *)&v338[8] = *(_QWORD *)v338;
                *(_QWORD *)&v338[16] = &v91[200 * v90];
                sub_18D218068(*(uint64_t *)v338, (uint64_t)&v316);
                v92 = *(_QWORD *)v338;
                *(_QWORD *)&v338[8] += 200;
                v93 = *((_QWORD *)a2 + 23);
                v94 = *((_QWORD *)a2 + 24);
                *(_QWORD *)&v343 = *(_QWORD *)v338;
                *((_QWORD *)&v343 + 1) = *(_QWORD *)v338;
                v342 = v343;
                v340[0] = (char *)a2 + 200;
                v340[1] = &v342;
                v340[2] = &v343;
                v341 = 0;
                while (v94 != v93)
                {
                  v94 -= 200;
                  sub_18D218068(v92 - 200, v94);
                  v92 = *((_QWORD *)&v343 + 1) - 200;
                  *((_QWORD *)&v343 + 1) -= 200;
                }
                v341 = 1;
                sub_18D23A1F4((uint64_t)v340);
                v95 = *((_QWORD *)a2 + 25);
                v310 = *(_QWORD *)&v338[8];
                v96 = *(_OWORD *)&v338[8];
                v97 = *(_OWORD *)((char *)a2 + 184);
                *((_QWORD *)a2 + 23) = v92;
                *(_OWORD *)v338 = v97;
                *((_OWORD *)a2 + 12) = v96;
                *(_QWORD *)&v338[16] = v95;
                v337 = (char *)v97;
                sub_18D23A260((uint64_t)&v337);
                v86 = v310;
              }
              else
              {
                sub_18D218068(*((_QWORD *)a2 + 24), (uint64_t)&v316);
                v86 = v85 + 200;
                *((_QWORD *)a2 + 24) = v85 + 200;
              }
              *((_QWORD *)a2 + 24) = v86;
              v16 = *(_QWORD *)&v329[8];
              *(_QWORD *)&v329[8] = 0;
              if (v16)
                v16 = MEMORY[0x18D78B5D4](v16, 0x1000C4041240993);
              if (++v33 == v312)
                goto LABEL_320;
            }
          }
          goto LABEL_320;
        }
LABEL_631:
        *((_DWORD *)a2 + 44) = *(_DWORD *)(v30 + 32);
        if ((v31 & 4) == 0)
        {
LABEL_46:
          if ((v31 & 2) == 0)
            goto LABEL_48;
          goto LABEL_47;
        }
        goto LABEL_632;
      }
    }
    else if ((v27 & 2) == 0)
    {
      goto LABEL_29;
    }
    *((_DWORD *)a2 + 31) = v26[3];
    if ((v27 & 8) == 0)
    {
LABEL_30:
      if ((v27 & 1) == 0)
        goto LABEL_32;
      goto LABEL_31;
    }
    goto LABEL_627;
  }
LABEL_320:
  if ((*((_BYTE *)v314 + 132) & 0x80) != 0)
  {
    v16 = (uint64_t)operator new(0x70uLL);
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = &off_1E25CD010;
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(_QWORD *)(v16 + 104) = 0;
    *(_QWORD *)(v16 + 32) = &off_1E25B99F8;
    *(_OWORD *)(v16 + 72) = xmmword_18D30B590;
    *(_OWORD *)(v16 + 88) = xmmword_18D30B5A0;
    v115 = (std::__shared_weak_count *)*((_QWORD *)a2 + 38);
    *((_QWORD *)a2 + 37) = v16 + 24;
    *((_QWORD *)a2 + 38) = v16;
    if (v115)
    {
      p_shared_owners = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(p_shared_owners);
      while (__stlxr(v117 - 1, p_shared_owners));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = (float32x2_t *)*((_QWORD *)v314 + 12);
    if (!v118)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
      v118 = *(float32x2_t **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                             + 96);
    }
    if ((~v118[6].i32[1] & 0x1FF) != 0)
      return 0;
    v119 = *((_QWORD *)a2 + 37);
    *(float64x2_t *)(v119 + 16) = vcvtq_f64_f32(v118[2]);
    *(float64x2_t *)(v119 + 32) = vcvtq_f64_f32(v118[3]);
    *(float64x2_t *)(v119 + 48) = vcvtq_f64_f32(v118[4]);
    *(float64x2_t *)(v119 + 64) = vcvtq_f64_f32(v118[5]);
    *(_BYTE *)(v119 + 80) = 1;
    *(float32x2_t *)v119 = v118[1];
  }
  v120 = *((int *)v314 + 8);
  if (!(_DWORD)v120)
  {
LABEL_534:
    v246 = (uint64_t *)((char *)a2 + 232);
    v245 = *((_QWORD *)a2 + 29);
    v247 = *((int *)v314 + 14);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 31) - v245) >> 3) < v247)
    {
      if ((v247 & 0x80000000) != 0)
LABEL_642:
        sub_18D07AFE4();
      v248 = *((_QWORD *)a2 + 30) - v245;
      v249 = (char *)sub_18D1782B8((uint64_t)a2 + 248, v247);
      v250 = &v249[v248];
      v252 = &v249[24 * v251];
      v253 = *((_QWORD *)a2 + 29);
      v16 = *((_QWORD *)a2 + 30);
      v254 = v250;
      if (v16 != v253)
      {
        do
        {
          v255 = *(_OWORD *)(v16 - 24);
          *((_DWORD *)v254 - 2) = *(_DWORD *)(v16 - 8);
          *(_OWORD *)(v254 - 24) = v255;
          v254 -= 24;
          v16 -= 24;
        }
        while (v16 != v253);
        v16 = *v246;
      }
      *((_QWORD *)a2 + 29) = v254;
      *((_QWORD *)a2 + 30) = v250;
      *((_QWORD *)a2 + 31) = v252;
      if (v16)
        operator delete((void *)v16);
    }
    v256 = *((int *)v314 + 14);
    if ((_DWORD)v256)
    {
      v257 = (uint64_t *)*((_QWORD *)v314 + 6);
      v258 = &v257[v256];
      do
      {
        v259 = *v257;
        v260 = *(_DWORD *)(*v257 + 16) - 2;
        if (v260 > 0xA)
          v261 = 0;
        else
          v261 = byte_18D331B38[v260];
        v262 = *(_QWORD *)(v259 + 8);
        v263 = *(_DWORD *)(v259 + 20);
        v265 = *((_QWORD *)a2 + 30);
        v264 = *((_QWORD *)a2 + 31);
        if (v265 >= v264)
        {
          v16 = *v246;
          v267 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v265 - *v246) >> 3);
          v268 = v267 + 1;
          if (v267 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_642;
          v269 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v264 - v16) >> 3);
          if (2 * v269 > v268)
            v268 = 2 * v269;
          if (v269 >= 0x555555555555555)
            v270 = 0xAAAAAAAAAAAAAAALL;
          else
            v270 = v268;
          if (v270)
          {
            v271 = (char *)sub_18D1782B8((uint64_t)a2 + 248, v270);
            v16 = *((_QWORD *)a2 + 29);
            v265 = *((_QWORD *)a2 + 30);
          }
          else
          {
            v271 = 0;
          }
          v272 = &v271[24 * v267];
          *v272 = v261;
          *((_QWORD *)v272 + 1) = v262;
          *((_DWORD *)v272 + 4) = v263;
          v273 = v272;
          if (v265 != v16)
          {
            do
            {
              v274 = *(_OWORD *)(v265 - 24);
              *((_DWORD *)v273 - 2) = *(_DWORD *)(v265 - 8);
              *(_OWORD *)(v273 - 24) = v274;
              v273 -= 24;
              v265 -= 24;
            }
            while (v265 != v16);
            v16 = *v246;
          }
          v266 = v272 + 24;
          *((_QWORD *)a2 + 29) = v273;
          *((_QWORD *)a2 + 30) = v272 + 24;
          *((_QWORD *)a2 + 31) = &v271[24 * v270];
          if (v16)
            operator delete((void *)v16);
        }
        else
        {
          *(_BYTE *)v265 = v261;
          *(_QWORD *)(v265 + 8) = v262;
          v266 = (char *)(v265 + 24);
          *(_DWORD *)(v265 + 16) = v263;
        }
        *((_QWORD *)a2 + 30) = v266;
        ++v257;
      }
      while (v257 != v258);
    }
    if ((*((_BYTE *)v314 + 132) & 0x10) != 0)
    {
      v275 = *((_QWORD *)v314 + 9);
      if (!v275)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
        v275 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                         + 72);
      }
      if ((*(_BYTE *)(v275 + 52) & 1) != 0)
      {
        v276 = operator new();
        *(_OWORD *)v276 = 0u;
        *(_OWORD *)(v276 + 16) = 0u;
        *(_WORD *)(v276 + 8) = 0x8000;
        *(_WORD *)(v276 + 24) = 0x8000;
        *(_QWORD *)(v276 + 32) = 0;
        *(int64x2_t *)(v276 + 40) = vdupq_n_s64(0x7FF8000000000000uLL);
        *(_QWORD *)(v276 + 56) = 0x7FF8000000000000;
        v277 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((_QWORD *)a2 + 32);
        *((_QWORD *)a2 + 32) = v276;
        if (v277)
          v277 = (CoreNavigation::CLP::LogEntry::PrivateData *)MEMORY[0x18D78B5D4](v277, 0x1000C4079AA8B5ELL);
        v278 = *(_QWORD *)(v275 + 8);
        if (!v278)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v277);
          v278 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 8);
        }
        v279 = *((_QWORD *)a2 + 32);
        *(_WORD *)v279 = *(_DWORD *)(v278 + 24);
        if ((*(_BYTE *)(v278 + 32) & 2) != 0)
        {
          v280 = *(_QWORD *)(v278 + 8);
          if (!v280)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v277);
            v280 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_ + 8);
          }
          *(_WORD *)(v279 + 8) = *(_DWORD *)(v280 + 8);
          v281 = *(_DWORD *)(v280 + 28);
          if ((v281 & 2) != 0)
          {
            v282 = *(_DWORD *)(v280 + 12) - 1;
            if (v282 > 3)
              return 0;
            *(_BYTE *)(v279 + 10) = 0x2010000u >> (8 * v282);
          }
          if ((v281 & 4) != 0)
          {
            v283 = *(_QWORD *)(v280 + 16);
            if (!v283)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v277);
              v283 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_ + 16);
            }
            *(_QWORD *)(v279 + 16) = *(_QWORD *)(v283 + 8);
            *(_WORD *)(v279 + 24) = *(_DWORD *)(v283 + 16);
          }
        }
        if ((*(_BYTE *)(v278 + 32) & 4) != 0)
        {
          v284 = *(_QWORD *)(v278 + 16);
          if (!v284)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v277);
            v284 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_ + 16);
          }
          *(_QWORD *)(v279 + 32) = *(_QWORD *)(v284 + 8);
          *(_OWORD *)(v279 + 40) = *(_OWORD *)(v284 + 16);
          *(_QWORD *)(v279 + 56) = *(_QWORD *)(v284 + 32);
        }
      }
      if ((*(_BYTE *)(v275 + 52) & 4) != 0)
      {
        v285 = (int64x2_t *)operator new();
        v285->i64[0] = 0;
        v285->i64[1] = 0;
        v285[1] = vdupq_n_s64(0x7FF8000000000000uLL);
        v286 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((_QWORD *)a2 + 34);
        *((_QWORD *)a2 + 34) = v285;
        if (v286)
          v286 = (CoreNavigation::CLP::LogEntry::PrivateData *)MEMORY[0x18D78B5D4](v286, 0x1000C4095D96C66);
        v287 = *(_QWORD *)(v275 + 24);
        if (!v287)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v286);
          v287 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 24);
        }
        v288 = *((_QWORD *)a2 + 34);
        *(_WORD *)v288 = *(_DWORD *)(v287 + 48);
        if ((*(_BYTE *)(v287 + 56) & 4) != 0)
        {
          v289 = *(_QWORD *)(v287 + 16);
          if (!v289)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v286);
            v289 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 16);
          }
          *(_QWORD *)(v288 + 8) = *(_QWORD *)(v289 + 8);
          *(_OWORD *)(v288 + 16) = *(_OWORD *)(v289 + 16);
        }
      }
      if ((*(_BYTE *)(v275 + 52) & 8) != 0)
      {
        v290 = (int64x2_t *)operator new();
        v290->i64[0] = 0;
        v290->i64[1] = 0;
        v290[1] = vdupq_n_s64(0x7FF8000000000000uLL);
        v291 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((_QWORD *)a2 + 35);
        *((_QWORD *)a2 + 35) = v290;
        if (v291)
          v291 = (CoreNavigation::CLP::LogEntry::PrivateData *)MEMORY[0x18D78B5D4](v291, 0x1000C4095D96C66);
        v292 = *(_QWORD *)(v275 + 32);
        if (!v292)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v291);
          v292 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 32);
        }
        v293 = *((_QWORD *)a2 + 35);
        *(_WORD *)v293 = *(_DWORD *)(v292 + 32);
        if ((*(_BYTE *)(v292 + 40) & 4) != 0)
        {
          v294 = *(_QWORD *)(v292 + 16);
          if (!v294)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v291);
            v294 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ + 16);
          }
          *(_QWORD *)(v293 + 8) = *(_QWORD *)(v294 + 8);
          *(_OWORD *)(v293 + 16) = *(_OWORD *)(v294 + 16);
        }
      }
      if ((*(_BYTE *)(v275 + 52) & 2) != 0)
      {
        v295 = operator new();
        *(_OWORD *)v295 = xmmword_18D331BA0;
        *(_QWORD *)(v295 + 16) = 0x7FF8000000000000;
        v296 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((_QWORD *)a2 + 33);
        *((_QWORD *)a2 + 33) = v295;
        if (v296)
          v296 = (CoreNavigation::CLP::LogEntry::PrivateData *)MEMORY[0x18D78B5D4](v296, 0x1000C40D315E998);
        v297 = *(_QWORD *)(v275 + 16);
        if (!v297)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v296);
          v297 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 16);
        }
        v298 = *((_QWORD *)a2 + 33);
        *(_WORD *)v298 = *(_DWORD *)(v297 + 8);
        *(_WORD *)(v298 + 2) = *(_DWORD *)(v297 + 12);
        if ((*(_BYTE *)(v297 + 40) & 8) != 0)
        {
          v299 = *(_QWORD *)(v297 + 16);
          if (!v299)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v296);
            v299 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_ + 16);
          }
          *(_QWORD *)(v298 + 8) = *(_QWORD *)(v299 + 8);
          *(_QWORD *)(v298 + 16) = *(_QWORD *)(v299 + 16);
        }
      }
      if ((*(_BYTE *)(v275 + 52) & 0x10) != 0)
      {
        v300 = (int64x2_t *)operator new();
        v300->i64[0] = 0;
        v300->i64[1] = 0;
        v300[1] = vdupq_n_s64(0x7FF8000000000000uLL);
        v301 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((_QWORD *)a2 + 36);
        *((_QWORD *)a2 + 36) = v300;
        if (v301)
          v301 = (CoreNavigation::CLP::LogEntry::PrivateData *)MEMORY[0x18D78B5D4](v301, 0x1000C4095D96C66);
        v302 = *(_QWORD *)(v275 + 40);
        if (!v302)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v301);
          v302 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 40);
        }
        v303 = *((_QWORD *)a2 + 36);
        *(_WORD *)v303 = *(_DWORD *)(v302 + 16);
        if ((*(_BYTE *)(v302 + 24) & 1) != 0)
        {
          v304 = *(_QWORD *)(v302 + 8);
          if (!v304)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v301);
            v304 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_ + 8);
          }
          *(_QWORD *)(v303 + 8) = *(_QWORD *)(v304 + 8);
          *(_OWORD *)(v303 + 16) = *(_OWORD *)(v304 + 16);
        }
      }
    }
    return 1;
  }
  v307 = *((_QWORD *)v314 + 3) + 8 * v120;
  v306 = (_QWORD *)((char *)a2 + 208);
  v311 = vdupq_n_s64(0x7FF8000000000000uLL);
  v121 = (_QWORD *)*((_QWORD *)v314 + 3);
  while (1)
  {
    v313 = v121;
    v122 = *v121;
    LODWORD(v316) = 0;
    WORD2(v316) = 32512;
    *((_QWORD *)&v316 + 1) = 0x7FF8000000000000;
    LOBYTE(v317) = 0;
    LOBYTE(__p) = 0;
    LOBYTE(v321) = 0;
    v323.i8[0] = 0;
    v328[16] = 0;
    *(int64x2_t *)v329 = v311;
    *(int64x2_t *)&v329[16] = v311;
    v330 = NAN;
    v331 = 0;
    v332 = 0;
    v334 = 0;
    v335 = 0;
    v333 = 0;
    v336 = 0;
    v123 = *(_DWORD *)(v122 + 172);
    if ((v123 & 1) != 0)
    {
      v124 = *(_QWORD *)(v122 + 8);
      if (!v124)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
        v124 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_ + 8);
      }
      v16 = raven::ConvertProtobufToGnssId(v124, (uint64_t)&v316);
      if (!(_DWORD)v16)
        goto LABEL_635;
      v123 = *(_DWORD *)(v122 + 172);
    }
    if ((v123 & 4) != 0)
    {
      v125 = *(_DWORD *)(v122 + 56) - 1;
      if (v125 > 5)
        goto LABEL_635;
      LOBYTE(v317) = 0x30404020100uLL >> (8 * v125);
    }
    v126 = *(_DWORD *)(v122 + 32);
    if (v126 < 1)
    {
      v151 = 0.0;
      if ((v123 & 2) == 0)
        goto LABEL_635;
    }
    else
    {
      if (LOBYTE(v321))
      {
        v16 = (uint64_t)__p;
        if (__p)
        {
          v319 = (unint64_t)__p;
          operator delete(__p);
        }
      }
      v319 = 0;
      v320 = 0;
      __p = 0;
      LOBYTE(v321) = 1;
      v127 = *(int *)(v122 + 32);
      if (!(_DWORD)v127)
        goto LABEL_376;
      if ((v127 & 0x80000000) != 0)
        sub_18D07AFE4();
      v16 = (uint64_t)sub_18D184AF4((uint64_t)&v320, v127);
      v130 = (char *)__p;
      v129 = (char *)v319;
      v131 = (char *)v16;
      if ((void *)v319 != __p)
      {
        do
        {
          v132 = *((_OWORD *)v129 - 1);
          *((_OWORD *)v131 - 2) = *((_OWORD *)v129 - 2);
          *((_OWORD *)v131 - 1) = v132;
          v131 -= 32;
          v129 -= 32;
        }
        while (v129 != v130);
        v129 = (char *)__p;
      }
      __p = v131;
      v319 = v16;
      v320 = v16 + 32 * v128;
      if (v129)
        operator delete(v129);
      v133 = *(int *)(v122 + 32);
      if ((_DWORD)v133)
      {
        v134 = *(_QWORD *)(v122 + 24);
        v135 = v134 + 8 * v133;
        do
        {
          v136 = *(_QWORD *)(*(_QWORD *)v134 + 8);
          if ((*(_BYTE *)(*(_QWORD *)v134 + 28) & 2) != 0)
          {
            v140 = *(_QWORD **)(*(_QWORD *)v134 + 16);
            if (!v140)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
              v140 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_ + 16);
            }
            v137 = v140[1];
            v138 = v140[2];
            v139 = v140[3];
          }
          else
          {
            v137 = 0x7FF8000000000000;
            v138 = 0x7FF8000000000000;
            v139 = 0x7FF8000000000000;
          }
          v141 = (_QWORD *)v319;
          if (v319 >= v320)
          {
            v16 = (uint64_t)__p;
            v143 = (uint64_t)(v319 - (_QWORD)__p) >> 5;
            v144 = v143 + 1;
            if ((unint64_t)(v143 + 1) >> 59)
              sub_18D07AFE4();
            v145 = v320 - (_QWORD)__p;
            if ((uint64_t)(v320 - (_QWORD)__p) >> 4 > v144)
              v144 = v145 >> 4;
            if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFE0)
              v146 = 0x7FFFFFFFFFFFFFFLL;
            else
              v146 = v144;
            if (v146)
            {
              v147 = (char *)sub_18D184AF4((uint64_t)&v320, v146);
              v16 = (uint64_t)__p;
              v141 = (_QWORD *)v319;
            }
            else
            {
              v147 = 0;
            }
            v148 = &v147[32 * v143];
            *(_QWORD *)v148 = v136;
            *((_QWORD *)v148 + 1) = v137;
            *((_QWORD *)v148 + 2) = v138;
            *((_QWORD *)v148 + 3) = v139;
            v149 = v148;
            if (v141 != (_QWORD *)v16)
            {
              do
              {
                v150 = *((_OWORD *)v141 - 1);
                *((_OWORD *)v149 - 2) = *((_OWORD *)v141 - 2);
                *((_OWORD *)v149 - 1) = v150;
                v149 -= 32;
                v141 -= 4;
              }
              while (v141 != (_QWORD *)v16);
              v16 = (uint64_t)__p;
            }
            v142 = v148 + 32;
            __p = v149;
            v319 = (unint64_t)(v148 + 32);
            v320 = (unint64_t)&v147[32 * v146];
            if (v16)
              operator delete((void *)v16);
          }
          else
          {
            *(_QWORD *)v319 = v136;
            v141[1] = v137;
            v142 = (char *)(v141 + 4);
            v141[2] = v138;
            v141[3] = v139;
          }
          v319 = (unint64_t)v142;
          v134 += 8;
        }
        while (v134 != v135);
      }
      else
      {
LABEL_376:
        v142 = (char *)v319;
      }
      v151 = *(double *)__p;
      if ((unint64_t)(v142 - (_BYTE *)__p) >= 0x21)
      {
        v152 = (v142 - (_BYTE *)__p) >> 5;
        if (v152 <= 2)
          v152 = 2;
        v153 = (double *)((char *)__p + 32);
        for (i = 1; i != v152; ++i)
        {
          v155 = *v153;
          v153 += 4;
          v151 = v151 + (v155 - v151) / (double)i;
        }
      }
      v123 = *(_DWORD *)(v122 + 172);
      if ((v123 & 2) == 0)
        goto LABEL_389;
    }
    if ((*(_QWORD *)(v122 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      v151 = *(double *)(v122 + 16);
    if (v126 <= 0 && (*(_QWORD *)(v122 + 16) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_635;
LABEL_389:
    *((double *)&v316 + 1) = v151;
    if ((v123 & 0x8000) == 0)
      goto LABEL_412;
    v156 = *(_QWORD *)(v122 + 128);
    if (!v156)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v16);
      v156 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_ + 128);
    }
    v323 = v311;
    memset(v324, 0, sizeof(v324));
    v325 = 0u;
    v326 = 0u;
    v327 = 0u;
    *(_OWORD *)v328 = 0u;
    v328[16] = 1;
    v323 = *(int64x2_t *)(v156 + 8);
    v157 = *(_DWORD *)(v156 + 32);
    if (v157 != 4 || *(_DWORD *)(v156 + 48) != 4 || *(_DWORD *)(v156 + 64) != 4)
      break;
    v158 = *(_OWORD **)(v156 + 24);
    v159 = v158[1];
    v324[0] = *v158;
    v324[1] = v159;
    v160 = *(_DWORD *)(v156 + 48);
    if (v160 <= 0)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v337);
      v160 = *(_DWORD *)(v156 + 48);
    }
    v161 = *(uint64_t **)(v156 + 40);
    v162 = *v161;
    if (v160 <= 1)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v337);
      v161 = *(uint64_t **)(v156 + 40);
      v160 = *(_DWORD *)(v156 + 48);
    }
    v163 = v161[1];
    if (v160 <= 2)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v337);
      v160 = *(_DWORD *)(v156 + 48);
      v161 = *(uint64_t **)(v156 + 40);
    }
    v164 = v161[2];
    if (v160 <= 3)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v337);
      v161 = *(uint64_t **)(v156 + 40);
    }
    v165 = v161[3];
    v325.i64[0] = v162;
    v325.i64[1] = v163;
    *(_QWORD *)&v326 = v164;
    *((_QWORD *)&v326 + 1) = v165;
    v166 = *(_DWORD *)(v156 + 64);
    if (v166 <= 0)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v337);
      v166 = *(_DWORD *)(v156 + 64);
    }
    v167 = *(uint64_t **)(v156 + 56);
    v168 = *v167;
    if (v166 <= 1)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v337);
      v167 = *(uint64_t **)(v156 + 56);
      v166 = *(_DWORD *)(v156 + 64);
    }
    v169 = v167[1];
    if (v166 <= 2)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v337);
      v166 = *(_DWORD *)(v156 + 64);
      v167 = *(uint64_t **)(v156 + 56);
    }
    v170 = v167[2];
    if (v166 <= 3)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v337);
      v167 = *(uint64_t **)(v156 + 56);
    }
    v171 = v167[3];
    *(_QWORD *)&v327 = v168;
    *((_QWORD *)&v327 + 1) = v169;
    *(_QWORD *)v328 = v170;
    *(_QWORD *)&v328[8] = v171;
    v123 = *(_DWORD *)(v122 + 172);
LABEL_412:
    *(_QWORD *)v329 = *(_QWORD *)(v122 + 48);
    *(_OWORD *)&v329[8] = *(_OWORD *)(v122 + 64);
    if ((v123 & 0x200000) == 0
      || (v172 = *(_QWORD *)(v122 + 152), (v172 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
    {
      v172 = 0;
    }
    *(_QWORD *)&v329[24] = v172;
    v173 = *(float *)(v122 + 60);
    v174 = fabs(v173);
    if ((unint64_t)(*(_QWORD *)&v174 - 0x10000000000000) >> 53 >= 0x3FF && *(_QWORD *)&v174 != 0)
    {
      LOWORD(v337) = 12;
      LOBYTE(v340[0]) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v337, (unsigned __int8 *)v340, "NaN range_accuracy_position_m", v17, v18, v19, v20, v21, v305);
      v173 = 0.0;
    }
    v176 = *(float *)(v122 + 80);
    v177 = fabs(v176);
    if ((unint64_t)(*(_QWORD *)&v177 - 0x10000000000000) >> 53 >= 0x3FF && *(_QWORD *)&v177 != 0)
    {
      LOWORD(v337) = 12;
      LOBYTE(v340[0]) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v337, (unsigned __int8 *)v340, "NaN range_accuracy_clock_ns", v17, v18, v19, v20, v21, v305);
      v176 = 0.0;
    }
    v179 = hypot(v173, v176 * 0.299792458);
    v330 = v179;
    v180 = *(_DWORD *)(v122 + 172);
    if ((v180 & 0x200) != 0)
    {
      v181 = *(_DWORD *)(v122 + 84) - 1;
      if (v181 > 3)
        goto LABEL_635;
      LOBYTE(v331) = 0x2010000u >> (8 * v181);
    }
    if ((v180 & 0x10000) != 0)
    {
      v182 = *(_DWORD *)(v122 + 136) - 1;
      if (v182 > 3)
        goto LABEL_635;
      BYTE1(v331) = 0x2010000u >> (8 * v182);
    }
    if ((v180 & 0x400) != 0)
    {
      v183 = *(_DWORD *)(v122 + 88) - 1;
      if (v183 > 3)
        goto LABEL_635;
      BYTE2(v331) = 0x2010000u >> (8 * v183);
    }
    if ((v180 & 0x20000) != 0)
    {
      v184 = *(_DWORD *)(v122 + 140) - 1;
      if (v184 > 3)
        goto LABEL_635;
      BYTE3(v331) = 0x2010000u >> (8 * v184);
    }
    if ((v180 & 0x800) != 0)
    {
      v185 = *(_DWORD *)(v122 + 92) - 1;
      if (v185 > 3)
        goto LABEL_635;
      BYTE4(v331) = 0x2010000u >> (8 * v185);
    }
    if ((v180 & 0x40000) != 0)
    {
      v186 = *(_DWORD *)(v122 + 144) - 1;
      if (v186 > 3)
        goto LABEL_635;
      BYTE5(v331) = 0x2010000u >> (8 * v186);
    }
    if ((v180 & 0x1000) != 0)
    {
      v187 = *(_DWORD *)(v122 + 96) - 1;
      if (v187 > 3)
        goto LABEL_635;
      BYTE6(v331) = 0x2010000u >> (8 * v187);
    }
    if ((v180 & 0x80000) != 0)
    {
      v188 = *(_DWORD *)(v122 + 148) - 1;
      if (v188 > 3)
        goto LABEL_635;
      HIBYTE(v331) = 0x2010000u >> (8 * v188);
    }
    if ((v180 & 0x2000) != 0)
    {
      v189 = *(_DWORD *)(v122 + 100) - 1;
      if (v189 > 3)
        goto LABEL_635;
      LOBYTE(v332) = 0x2010000u >> (8 * v189);
    }
    if ((v180 & 0x100000) != 0)
    {
      v190 = *(_DWORD *)(v122 + 160) - 1;
      if (v190 > 3)
        goto LABEL_635;
      HIBYTE(v332) = 0x2010000u >> (8 * v190);
    }
    v191 = *(int *)(v122 + 112);
    v192 = v333;
    if (0xCCCCCCCCCCCCCCCDLL * ((v335 - (_BYTE *)v333) >> 3) < v191)
    {
      if ((v191 & 0x80000000) != 0)
        sub_18D07AFE4();
      v193 = v334;
      v194 = (char *)sub_18D184D30((uint64_t)&v335, v191);
      v197 = (char *)v333;
      v196 = v334;
      v198 = &v194[v193 - v192];
      if (v334 != v333)
      {
        do
        {
          v199 = *(_OWORD *)(v196 - 40);
          v200 = *(_OWORD *)(v196 - 24);
          *(v198 - 8) = *(v196 - 8);
          *(_OWORD *)(v198 - 24) = v200;
          *(_OWORD *)(v198 - 40) = v199;
          v198 -= 40;
          v196 -= 40;
        }
        while (v196 != v197);
        v196 = (char *)v333;
      }
      v333 = v198;
      v334 = &v194[v193 - v192];
      v335 = &v194[40 * v195];
      if (v196)
        operator delete(v196);
    }
    v201 = *(int *)(v122 + 112);
    if ((_DWORD)v201)
    {
      v202 = *(uint64_t **)(v122 + 104);
      v203 = &v202[v201];
      do
      {
        v204 = *v202;
        v205 = *(_DWORD *)(*v202 + 44);
        if ((v205 & 1) != 0)
        {
          v211 = *(_DWORD *)(v204 + 24) - 2;
          if (v211 > 0xA)
            v207 = 0;
          else
            v207 = byte_18D331B38[v211];
          v212 = *(_QWORD *)(v204 + 16);
          v213 = *(_QWORD *)(v204 + 8);
          if ((v213 <= -1 || ((v213 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
            && (unint64_t)(v213 - 1) >= 0xFFFFFFFFFFFFFLL)
          {
            v210 = NAN;
          }
          else
          {
            v210 = *(double *)(v204 + 8);
          }
          if ((v212 <= -1 || ((v212 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
            && (unint64_t)(v212 - 1) >= 0xFFFFFFFFFFFFFLL)
          {
            v209 = NAN;
          }
          else
          {
            v209 = *(double *)(v204 + 16);
          }
          v208 = *(_QWORD *)(v204 + 32);
          if ((v205 & 0x10) != 0)
          {
            v218 = *(_DWORD *)(v204 + 28);
            if (v218 == 1)
              v206 = 1;
            else
              v206 = 2 * (v218 == 2);
          }
          else
          {
            v206 = 0;
          }
        }
        else
        {
          v206 = 0;
          v207 = 0;
          v208 = 0x7FF8000000000000;
          v209 = NAN;
          v210 = NAN;
        }
        v219 = v334;
        if (v334 >= v335)
        {
          v221 = (char *)v333;
          v222 = 0xCCCCCCCCCCCCCCCDLL * ((v334 - (_BYTE *)v333) >> 3);
          v223 = v222 + 1;
          if (v222 + 1 > 0x666666666666666)
            sub_18D07AFE4();
          if (0x999999999999999ALL * ((v335 - (_BYTE *)v333) >> 3) > v223)
            v223 = 0x999999999999999ALL * ((v335 - (_BYTE *)v333) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v335 - (_BYTE *)v333) >> 3) >= 0x333333333333333)
            v224 = 0x666666666666666;
          else
            v224 = v223;
          if (v224)
          {
            v225 = (char *)sub_18D184D30((uint64_t)&v335, v224);
            v221 = (char *)v333;
            v219 = v334;
          }
          else
          {
            v225 = 0;
          }
          v226 = &v225[40 * v222];
          *v226 = v207;
          *((double *)v226 + 1) = v210;
          *((double *)v226 + 2) = v209;
          *((_QWORD *)v226 + 3) = v208;
          v226[32] = v206;
          v227 = v226;
          if (v219 != v221)
          {
            do
            {
              v228 = *(_OWORD *)(v219 - 40);
              v229 = *(_OWORD *)(v219 - 24);
              *(v227 - 8) = *(v219 - 8);
              *(_OWORD *)(v227 - 24) = v229;
              *(_OWORD *)(v227 - 40) = v228;
              v227 -= 40;
              v219 -= 40;
            }
            while (v219 != v221);
            v221 = (char *)v333;
          }
          v220 = v226 + 40;
          v333 = v227;
          v334 = v226 + 40;
          v335 = &v225[40 * v224];
          if (v221)
            operator delete(v221);
        }
        else
        {
          *v334 = v207;
          *((double *)v219 + 1) = v210;
          *((double *)v219 + 2) = v209;
          *((_QWORD *)v219 + 3) = v208;
          v220 = v219 + 40;
          v219[32] = v206;
        }
        v334 = v220;
        ++v202;
      }
      while (v202 != v203);
    }
    v230 = *((_QWORD *)a2 + 27);
    v231 = *((_QWORD *)a2 + 28);
    if (v230 >= v231)
    {
      v234 = (uint64_t)(v230 - *v306) >> 8;
      if ((unint64_t)(v234 + 1) >> 56)
        sub_18D07AFE4();
      v235 = v231 - *v306;
      v236 = v235 >> 7;
      if (v235 >> 7 <= (unint64_t)(v234 + 1))
        v236 = v234 + 1;
      if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFF00)
        v237 = 0xFFFFFFFFFFFFFFLL;
      else
        v237 = v236;
      if (v237)
        v238 = (char *)sub_18D2181CC((uint64_t)a2 + 224, v237);
      else
        v238 = 0;
      v239 = (uint64_t)&v238[256 * v234];
      v240 = &v238[256 * v237];
      sub_18D23A308(v239, &v316);
      v233 = v241 + 256;
      v242 = (__int128 *)*((_QWORD *)a2 + 26);
      v243 = (__int128 *)*((_QWORD *)a2 + 27);
      if (v243 == v242)
      {
        *((_QWORD *)a2 + 26) = v241;
        *((_QWORD *)a2 + 27) = v233;
        *((_QWORD *)a2 + 28) = v240;
      }
      else
      {
        do
        {
          v243 -= 16;
          sub_18D23A308(v241 - 256, v243);
        }
        while (v243 != v242);
        v243 = (__int128 *)*((_QWORD *)a2 + 26);
        v244 = *((_QWORD *)a2 + 27);
        *((_QWORD *)a2 + 26) = v241;
        *((_QWORD *)a2 + 27) = v233;
        *((_QWORD *)a2 + 28) = v240;
        while ((__int128 *)v244 != v243)
        {
          v244 -= 256;
          sub_18D20C168(v244);
        }
      }
      if (v243)
        operator delete(v243);
    }
    else
    {
      sub_18D23A308(v230, &v316);
      v233 = v232 + 256;
    }
    *((_QWORD *)a2 + 27) = v233;
    v16 = (uint64_t)v333;
    if (v333)
    {
      v334 = (char *)v333;
      operator delete(v333);
    }
    if (LOBYTE(v321))
    {
      v16 = (uint64_t)__p;
      if (__p)
      {
        v319 = (unint64_t)__p;
        operator delete(__p);
      }
    }
    v121 = v313 + 1;
    if (v313 + 1 == (_QWORD *)v307)
      goto LABEL_534;
  }
  LOWORD(v337) = 12;
  LOBYTE(v340[0]) = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v337, (unsigned __int8 *)v340, "invalid position coefficient size,%d,%d,%d", v17, v18, v19, v20, v21, v157);
LABEL_635:
  if (v333)
  {
    v334 = (char *)v333;
    operator delete(v333);
  }
  if (LOBYTE(v321) && __p)
  {
    v319 = (unint64_t)__p;
    operator delete(__p);
  }
  return 0;
}

void sub_18D231D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v29 - 256));
  sub_18D23A10C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t raven::ConvertProtobufToMagnetometerEvent(float32x2_t *a1, uint64_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;

  if ((a1[4].i8[0] & 1) == 0)
    return 0;
  v13 = (uint64_t)a1[1];
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MagSample::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, a2 + 8, 0, a6, a7, a8, a9, a10, a3, a4);
  result = 0;
  if (v14)
  {
    *(float64x2_t *)(a2 + 104) = vcvtq_f64_f32(a1[2]);
    *(double *)(a2 + 120) = a1[3].f32[0];
    result = 1;
    *(_BYTE *)(a2 + 128) = 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToMapsRouteHintEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *a2, raven::MapsRouteHintEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  void **v26;
  unsigned int v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  _BYTE v58[48];

  if ((*((_BYTE *)this + 60) & 1) == 0)
    return 0;
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint::default_instance_ + 8);
  }
  v18 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v18)
  {
    if ((*((_BYTE *)this + 60) & 2) == 0)
      return 0;
    v22 = *((_QWORD *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint::default_instance_ + 16);
    }
    v23 = raven::ConvertProtobufToRavenTime(v22, (uint64_t)a2 + 104, 0, v13, v14, v15, v16, v17, v19, v20);
    result = 0;
    if (v23)
    {
      v24 = *((_DWORD *)this + 6);
      if (v24 >= 7)
        LOBYTE(v24) = 0;
      v26 = (void **)((char *)a2 + 208);
      v25 = *((_QWORD *)a2 + 26);
      *((_BYTE *)a2 + 200) = v24;
      v27 = *((_DWORD *)this + 7);
      if (v27 >= 7)
        LOBYTE(v27) = 0;
      *((_BYTE *)a2 + 201) = v27;
      *((_QWORD *)a2 + 27) = v25;
      v57 = (char *)a2 + 224;
      v28 = *((unsigned int *)this + 10);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a2 + 28) - v25) >> 3) < v28)
      {
        v29 = (char *)sub_18D184D30((uint64_t)v57, v28);
        v32 = (char *)*((_QWORD *)a2 + 26);
        v31 = (char *)*((_QWORD *)a2 + 27);
        v33 = v29;
        if (v31 != v32)
        {
          do
          {
            v34 = *(_OWORD *)(v31 - 40);
            v35 = *(_OWORD *)(v31 - 24);
            *((_QWORD *)v33 - 1) = *((_QWORD *)v31 - 1);
            *(_OWORD *)(v33 - 24) = v35;
            *(_OWORD *)(v33 - 40) = v34;
            v33 -= 40;
            v31 -= 40;
          }
          while (v31 != v32);
          v31 = (char *)*v26;
        }
        *((_QWORD *)a2 + 26) = v33;
        *((_QWORD *)a2 + 27) = v29;
        *((_QWORD *)a2 + 28) = &v29[40 * v30];
        if (v31)
          operator delete(v31);
      }
      LODWORD(v36) = *((_DWORD *)this + 10);
      if ((int)v36 >= 1)
      {
        v37 = 0;
        do
        {
          v38 = *(_QWORD **)(*((_QWORD *)this + 4) + 8 * v37);
          v39 = v38[1];
          if (v37 >= (int)v36)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v58);
            v38 = *(_QWORD **)(*((_QWORD *)this + 4) + 8 * v37);
            v36 = *((int *)this + 10);
          }
          else
          {
            v36 = (int)v36;
          }
          v40 = v38[2];
          if (v36 <= v37)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v58);
            v38 = *(_QWORD **)(*((_QWORD *)this + 4) + 8 * v37);
            v36 = *((int *)this + 10);
          }
          v41 = v38[3];
          if (v36 <= v37)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v58);
            v38 = *(_QWORD **)(*((_QWORD *)this + 4) + 8 * v37);
            v36 = *((int *)this + 10);
          }
          v42 = v38[4];
          if (v36 <= v37)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v58);
            v38 = *(_QWORD **)(*((_QWORD *)this + 4) + 8 * v37);
          }
          v43 = v38[5];
          v45 = (char *)*((_QWORD *)a2 + 27);
          v44 = *((_QWORD *)a2 + 28);
          if ((unint64_t)v45 >= v44)
          {
            v47 = (char *)*v26;
            v48 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (_BYTE *)*v26) >> 3);
            v49 = v48 + 1;
            if (v48 + 1 > 0x666666666666666)
              sub_18D07AFE4();
            v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (_QWORD)v47) >> 3);
            if (2 * v50 > v49)
              v49 = 2 * v50;
            if (v50 >= 0x333333333333333)
              v51 = 0x666666666666666;
            else
              v51 = v49;
            if (v51)
            {
              v52 = (char *)sub_18D184D30((uint64_t)v57, v51);
              v47 = (char *)*((_QWORD *)a2 + 26);
              v45 = (char *)*((_QWORD *)a2 + 27);
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[40 * v48];
            *(_QWORD *)v53 = v39;
            *((_QWORD *)v53 + 1) = v40;
            *((_QWORD *)v53 + 2) = v41;
            *((_QWORD *)v53 + 3) = v42;
            *((_QWORD *)v53 + 4) = v43;
            v54 = v53;
            if (v45 != v47)
            {
              do
              {
                v55 = *(_OWORD *)(v45 - 40);
                v56 = *(_OWORD *)(v45 - 24);
                *((_QWORD *)v54 - 1) = *((_QWORD *)v45 - 1);
                *(_OWORD *)(v54 - 24) = v56;
                *(_OWORD *)(v54 - 40) = v55;
                v54 -= 40;
                v45 -= 40;
              }
              while (v45 != v47);
              v47 = (char *)*v26;
            }
            v46 = v53 + 40;
            *((_QWORD *)a2 + 26) = v54;
            *((_QWORD *)a2 + 27) = v53 + 40;
            *((_QWORD *)a2 + 28) = &v52[40 * v51];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *(_QWORD *)v45 = v39;
            *((_QWORD *)v45 + 1) = v40;
            *((_QWORD *)v45 + 2) = v41;
            v46 = v45 + 40;
            *((_QWORD *)v45 + 3) = v42;
            *((_QWORD *)v45 + 4) = v43;
          }
          *((_QWORD *)a2 + 27) = v46;
          ++v37;
          v36 = *((int *)this + 10);
        }
        while (v37 < v36);
      }
      return 1;
    }
  }
  return result;
}

void sub_18D2322F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::ConvertProtobufToMapsRouteType(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 >= 7)
    LOBYTE(v1) = 0;
  return v1;
}

uint64_t raven::ConvertProtobufToMapVectorEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MapVector *a2, raven::MapVectorEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  CoreNavigation::CLP::LogEntry::PrivateData *v27;
  CoreNavigation::CLP::LogEntry::PrivateData *v28;
  CoreNavigation::CLP::LogEntry::PrivateData *v29;
  CoreNavigation::CLP::LogEntry::PrivateData *v30;
  CoreNavigation::CLP::LogEntry::PrivateData *v31;
  CoreNavigation::CLP::LogEntry::PrivateData *v32;
  CoreNavigation::CLP::LogEntry::PrivateData *v33;
  CoreNavigation::CLP::LogEntry::PrivateData *v34;
  CoreNavigation::CLP::LogEntry::PrivateData *v35;
  CoreNavigation::CLP::LogEntry::PrivateData *v36;
  CoreNavigation::CLP::LogEntry::PrivateData *v37;
  CoreNavigation::CLP::LogEntry::PrivateData *v38;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_ + 8);
  }
  v18 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v18)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v22 = *((_QWORD *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v22 + 96) & 1) == 0)
      return 0;
    v23 = *((_QWORD *)this + 2);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_ + 16);
    }
    v24 = *(_QWORD *)(v23 + 8);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DirectionOfTravel::default_instance_ + 8);
    }
    v25 = raven::ConvertProtobufToRavenTime(v24, (uint64_t)a2 + 104, 0, v13, v14, v15, v16, v17, v19, v20);
    result = 0;
    if (v25)
    {
      v26 = *((_QWORD *)this + 2);
      if (v26)
      {
        *((_QWORD *)a2 + 25) = *(_QWORD *)(v26 + 16);
      }
      else
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        v26 = *((_QWORD *)this + 2);
        *((_QWORD *)a2 + 25) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                     + 16)
                                         + 16);
        if (!v26)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v27);
          v26 = *((_QWORD *)this + 2);
          *((_QWORD *)a2 + 26) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                       + 16)
                                           + 24);
          if (!v26)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v28);
            v26 = *((_QWORD *)this + 2);
            *((_QWORD *)a2 + 32) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                         + 16)
                                             + 32);
            if (!v26)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v29);
              v26 = *((_QWORD *)this + 2);
              *((_QWORD *)a2 + 33) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                           + 16)
                                               + 40);
              if (!v26)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v30);
                v26 = *((_QWORD *)this + 2);
                *((_QWORD *)a2 + 27) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                             + 16)
                                                 + 80);
                if (!v26)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v31);
                  v26 = *((_QWORD *)this + 2);
                  *((_QWORD *)a2 + 28) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                               + 16)
                                                   + 56);
                  if (!v26)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v32);
                    v26 = *((_QWORD *)this + 2);
                    *((_QWORD *)a2 + 29) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                 + 16)
                                                     + 64);
                    if (!v26)
                    {
                      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v33);
                      v26 = *((_QWORD *)this + 2);
                      *((_QWORD *)a2 + 30) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                   + 16)
                                                       + 48);
                      if (!v26)
                      {
                        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v34);
                        v26 = *((_QWORD *)this + 2);
                        *((_QWORD *)a2 + 31) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                     + 16)
                                                         + 72);
                        if (!v26)
                        {
                          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v35);
                          v26 = *((_QWORD *)this + 2);
                          *((_BYTE *)a2 + 272) = *(_BYTE *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                      + 16)
                                                          + 88);
                          if (!v26)
                          {
                            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v36);
                            v26 = *((_QWORD *)this + 2);
                            *((_BYTE *)a2 + 273) = *(_BYTE *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                        + 16)
                                                            + 89);
                            if (!v26)
                            {
                              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v37);
                              v26 = *((_QWORD *)this + 2);
                              *((_BYTE *)a2 + 274) = *(_BYTE *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                          + 16)
                                                              + 90);
                              if (!v26)
                              {
                                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v38);
                                v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                + 16);
                              }
                              goto LABEL_30;
                            }
LABEL_29:
                            *((_BYTE *)a2 + 274) = *(_BYTE *)(v26 + 90);
LABEL_30:
                            *((_BYTE *)a2 + 275) = *(_BYTE *)(v26 + 91);
                            return 1;
                          }
LABEL_28:
                          *((_BYTE *)a2 + 273) = *(_BYTE *)(v26 + 89);
                          goto LABEL_29;
                        }
LABEL_27:
                        *((_BYTE *)a2 + 272) = *(_BYTE *)(v26 + 88);
                        goto LABEL_28;
                      }
LABEL_26:
                      *((_QWORD *)a2 + 31) = *(_QWORD *)(v26 + 72);
                      goto LABEL_27;
                    }
LABEL_25:
                    *((_QWORD *)a2 + 30) = *(_QWORD *)(v26 + 48);
                    goto LABEL_26;
                  }
LABEL_24:
                  *((_QWORD *)a2 + 29) = *(_QWORD *)(v26 + 64);
                  goto LABEL_25;
                }
LABEL_23:
                *((_QWORD *)a2 + 28) = *(_QWORD *)(v26 + 56);
                goto LABEL_24;
              }
LABEL_22:
              *((_QWORD *)a2 + 27) = *(_QWORD *)(v26 + 80);
              goto LABEL_23;
            }
LABEL_21:
            *((_QWORD *)a2 + 33) = *(_QWORD *)(v26 + 40);
            goto LABEL_22;
          }
LABEL_20:
          *((_QWORD *)a2 + 32) = *(_QWORD *)(v26 + 32);
          goto LABEL_21;
        }
      }
      *((_QWORD *)a2 + 26) = *(_QWORD *)(v26 + 24);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToMountStateEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, raven::MountStateEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  int v20;
  double v21;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v15 + 92) & 4) == 0)
      return 0;
    v16 = *((_QWORD *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v16 + 92) & 8) == 0)
      return 0;
    v17 = *((_QWORD *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    result = 0;
    switch(*(_DWORD *)(v17 + 20))
    {
      case 0:
        return result;
      case 1:
        v18 = 0.25;
        goto LABEL_20;
      case 2:
        v18 = 0.5;
        goto LABEL_20;
      case 3:
        v18 = 1.0;
        goto LABEL_20;
      default:
        v18 = 0.0;
LABEL_20:
        v19 = *((_QWORD *)this + 2);
        if (!v19)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
          v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
        }
        v20 = *(_DWORD *)(v19 + 16);
        result = 1;
        if (v20 == 2)
        {
          *((_BYTE *)a2 + 104) = 1;
          *((double *)a2 + 15) = v18;
        }
        else
        {
          if (v20 != 1)
          {
            if (v20)
              return result;
            *((_BYTE *)a2 + 104) = 0;
            v21 = 1.0;
LABEL_29:
            *((double *)a2 + 14) = v21;
            return result;
          }
          *((_BYTE *)a2 + 104) = 3;
          *((double *)a2 + 17) = v18;
        }
        v21 = 1.0 - v18;
        goto LABEL_29;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToMovingStateEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, raven::MovingStateEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  double v25;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v15 + 92) & 1) == 0)
      return 0;
    v16 = *((_QWORD *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v16 + 92) & 2) == 0)
      return 0;
    v17 = *((_QWORD *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    result = 0;
    switch(*(_DWORD *)(v17 + 12))
    {
      case 0:
        return result;
      case 1:
        v18 = 0.8;
        goto LABEL_19;
      case 2:
      case 3:
        v18 = 0.95;
        goto LABEL_19;
      default:
        v18 = 0.0;
LABEL_19:
        v19 = *((_QWORD *)this + 2);
        if (!v19)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
          v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
        }
        v20 = *(_DWORD *)(v19 + 8);
        result = 1;
        if (v20 <= 11804)
        {
          if (v20 <= 2009)
          {
            switch(v20)
            {
              case 0:
                *((_BYTE *)a2 + 104) = 0;
                v25 = 1.0;
                goto LABEL_82;
              case 1:
              case 2:
              case 10:
              case 11:
                *((_BYTE *)a2 + 104) = 1;
                *((double *)a2 + 15) = v18;
                goto LABEL_81;
              case 3:
              case 4:
              case 5:
              case 6:
              case 8:
              case 9:
                goto LABEL_80;
              case 7:
                goto LABEL_76;
              default:
                v23 = v20 - 41;
                if (v23 <= 0x3B && ((1 << v23) & 0x800000003F08801) != 0)
                  goto LABEL_80;
                break;
            }
            return result;
          }
          if (v20 > 2100)
          {
            if (v20 <= 2149)
            {
              if (v20 != 2101)
              {
                if (v20 != 2105)
                  return result;
                goto LABEL_76;
              }
            }
            else
            {
              if (v20 == 2150 || v20 == 3015)
              {
LABEL_76:
                *((_BYTE *)a2 + 104) = 2;
                *((double *)a2 + 16) = v18;
                goto LABEL_81;
              }
              if (v20 != 3016)
                return result;
            }
          }
          else
          {
            v22 = v20 - 2010;
            if (v22 > 0x3D)
              return result;
            if (((1 << v22) & 0x2480000000005400) == 0)
            {
              if (((1 << v22) & 0x8004000000001) == 0)
                return result;
              goto LABEL_76;
            }
          }
          goto LABEL_80;
        }
        if (v20 > 15651)
        {
          if (v20 <= 18199)
          {
            if (v20 <= 15732)
            {
              v24 = (v20 - 15652);
              if (v24 > 0x3A)
                return result;
              if (((1 << v24) & 0x400000000800101) == 0)
              {
                if (v24 != 18)
                  return result;
                goto LABEL_76;
              }
LABEL_80:
              *((_BYTE *)a2 + 104) = 3;
              *((double *)a2 + 17) = v18;
LABEL_81:
              v25 = 1.0 - v18;
LABEL_82:
              *((double *)a2 + 14) = v25;
              return result;
            }
            if (v20 == 15733 || v20 == 17150)
              goto LABEL_80;
            v21 = 18070;
          }
          else if (v20 > 19149)
          {
            if (v20 <= 90602)
            {
              if (v20 == 19150)
                goto LABEL_80;
              v21 = 19160;
            }
            else
            {
              if (v20 == 90603 || v20 == 515621)
                goto LABEL_80;
              v21 = 515652;
            }
          }
          else
          {
            if ((v20 - 18200) <= 0x28 && ((1 << (v20 - 24)) & 0x10002000001) != 0
              || v20 == 19030)
            {
              goto LABEL_80;
            }
            v21 = 19090;
          }
        }
        else if (v20 > 15329)
        {
          if ((v20 - 15562) <= 0x3A && ((1 << (v20 + 54)) & 0x401000040000001) != 0
            || (v20 - 15330) <= 0x1E && ((1 << (v20 + 30)) & 0x40100001) != 0)
          {
            goto LABEL_80;
          }
          v21 = 15460;
        }
        else if (v20 <= 15054)
        {
          if (v20 == 11805 || v20 == 12150)
            goto LABEL_80;
          v21 = 15030;
        }
        else
        {
          if ((v20 - 15100) <= 0x32 && ((1 << (v20 + 4)) & 0x4000000000401) != 0
            || (v20 - 15230) <= 0x19 && ((1 << (v20 - 126)) & 0x2000401) != 0)
          {
            goto LABEL_80;
          }
          v21 = 15055;
        }
        if (v20 != v21)
          return result;
        goto LABEL_80;
    }
  }
  return result;
}

cnprint::CNPrinter *raven::ConvertProtobufToPositionEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, raven::PositionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  cnprint::CNPrinter *result;
  uint64_t v13;
  int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int8x16_t v48;
  int8x16_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  char v58;
  int8x16_t v59;
  unsigned __int8 v60;
  _QWORD v61[2];
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  result = 0;
  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0x7FF8000000000000;
  if ((*((_BYTE *)this + 100) & 1) != 0)
  {
    v13 = *((_QWORD *)this + 1);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 8);
    }
    v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)v61, 0, a4, a5, a6, a7, a8, a9, a10);
    result = 0;
    if (v14)
    {
      v17 = *((_QWORD *)this + 3);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      if ((*(_BYTE *)(v17 + 362) & 0x10) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel(result) <= 1)
        {
          v59.i16[0] = 12;
          v60 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, &v60, "location private does not have mach continuous time for position event", v18, v19, v20, v21, v22, v58);
        }
        return 0;
      }
      v23 = *((_QWORD *)this + 3);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      v15.i64[0] = *(_QWORD *)(v23 + 128);
      v59 = 0uLL;
      CNTimeSpan::SetTimeSpan(v59.i64, 0, v15, v16);
      v24 = v59;
      *(int8x16_t *)((char *)a2 + 8) = v59;
      result = (cnprint::CNPrinter *)raven::PopulateAllTimeFields((uint64_t)a2 + 8, (uint64_t)v61, v24, v25);
      v26 = *((_QWORD *)this + 2);
      if (!v26)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v26 + 153) & 0x10) == 0)
      {
        v27 = 0;
        *((_BYTE *)a2 + 200) = 0;
        goto LABEL_17;
      }
      v46 = *((_QWORD *)this + 2);
      if (!v46)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        v46 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      v47 = raven::ConvertProtobufToLocationType(*(_DWORD *)(v46 + 104));
      result = 0;
      *((_BYTE *)a2 + 200) = v47;
      if ((v47 - 12) >= 2)
      {
        if (v47 == 9 || (v27 = 0, v47 == 1))
        {
          v50 = *((_QWORD *)this + 3);
          if (!v50)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
            v50 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(_BYTE *)(v50 + 360) & 8) != 0)
          {
            v57 = *((_QWORD *)this + 3);
            if (!v57)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              v57 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
            }
            v48.i64[0] = *(_QWORD *)(v57 + 32);
            v59 = 0uLL;
            result = (cnprint::CNPrinter *)CNTimeSpan::SetTimeSpan(v59.i64, 0, v48, v49);
            *((int8x16_t *)a2 + 2) = v59;
            v27 = 1;
          }
          else
          {
            v27 = 0;
          }
        }
LABEL_17:
        *((_BYTE *)a2 + 24) = v27;
        v28 = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)((char *)a2 + 120) = v28;
        v29 = *(_OWORD *)((char *)a2 + 72);
        *(_OWORD *)((char *)a2 + 184) = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)((char *)a2 + 168) = v29;
        v30 = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a2 + 152) = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)((char *)a2 + 136) = v30;
        v31 = *((_QWORD *)this + 2);
        if (!v31)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
          v31 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        if (*(double *)(v31 + 16) <= 0.0)
          goto LABEL_34;
        v32 = *((_QWORD *)this + 2);
        if (!v32)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
          v32 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        if ((*(_QWORD *)(v32 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
LABEL_34:
          *((_BYTE *)a2 + 201) = 0;
          *((_QWORD *)a2 + 26) = 0;
          *((_QWORD *)a2 + 27) = 0;
        }
        else
        {
          v33 = *((_QWORD *)this + 2);
          if (!v33)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            v33 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          v34 = *(_QWORD *)(v33 + 8);
          if (!v34)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            v34 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
          }
          if (fabs(*(double *)(v34 + 8)) >= 2.22044605e-16)
          {
            *((_QWORD *)a2 + 26) = 0;
            v38 = (double *)((char *)a2 + 208);
            *((_BYTE *)a2 + 201) = 1;
            *((_QWORD *)a2 + 27) = 0;
          }
          else
          {
            v35 = *((_QWORD *)this + 2);
            if (!v35)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              v35 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            }
            v36 = *(_QWORD *)(v35 + 8);
            if (!v36)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              v36 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
            }
            v37 = fabs(*(double *)(v36 + 16));
            *((_QWORD *)a2 + 26) = 0;
            v38 = (double *)((char *)a2 + 208);
            *((_BYTE *)a2 + 201) = v37 >= 2.22044605e-16;
            *((_QWORD *)a2 + 27) = 0;
            if (v37 < 2.22044605e-16)
              goto LABEL_35;
          }
          v51 = *((_QWORD *)this + 2);
          if (!v51)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            v51 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          v52 = *(_QWORD *)(v51 + 8);
          if (!v52)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            v52 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
          }
          *v38 = *(double *)(v52 + 8) * 0.0174532925;
          v53 = *((_QWORD *)this + 2);
          if (!v53)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            v53 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          v54 = *(_QWORD *)(v53 + 8);
          if (!v54)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            v54 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
          }
          *((double *)a2 + 27) = *(double *)(v54 + 16) * 0.0174532925;
          v55 = *((_QWORD *)this + 2);
          if (!v55)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            v55 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          v56 = *(double *)(v55 + 16) * *(double *)(v55 + 16) * 0.5;
          *((double *)a2 + 29) = v56;
          *((double *)a2 + 32) = v56;
          *((_QWORD *)a2 + 30) = 0;
        }
LABEL_35:
        v39 = *((_QWORD *)this + 2);
        if (!v39)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
          v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        if (*(double *)(v39 + 32) <= 0.0)
        {
          *((_BYTE *)a2 + 202) = 0;
          *((_QWORD *)a2 + 28) = 0;
        }
        else
        {
          v40 = *((_QWORD *)this + 2);
          if (!v40)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            v40 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          v41 = *(_QWORD *)(v40 + 32) & 0x7FFFFFFFFFFFFFFFLL;
          *((_BYTE *)a2 + 202) = v41 < 0x7FF0000000000000;
          *((_QWORD *)a2 + 28) = 0;
          if (v41 <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v42 = *((_QWORD *)this + 2);
            if (!v42)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              v42 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            }
            v43 = *(double *)(v42 + 24);
            v44 = *((_QWORD *)this + 3);
            if (!v44)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              v44 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
            }
            *((double *)a2 + 28) = v43 + *(float *)(v44 + 100);
            *((_QWORD *)a2 + 31) = 0;
            *((_QWORD *)a2 + 33) = 0;
            v45 = *((_QWORD *)this + 2);
            if (!v45)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              v45 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            }
            *((double *)a2 + 34) = *(double *)(v45 + 32) * *(double *)(v45 + 32);
          }
        }
        if (sub_18D20C258((uint64_t)a2))
          sub_18D20C508((uint64_t)a2);
        return (cnprint::CNPrinter *)((*((unsigned __int8 *)a2 + 201) | *((unsigned __int8 *)a2 + 280)) != 0);
      }
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToLocationType(unsigned int a1)
{
  if (a1 >= 0xE)
    return 1;
  else
    return a1;
}

uint64_t raven::ConvertProtobufToRateGyroEvent(float32x2_t *this, const CoreNavigation::CLP::LogEntry::PrivateData::GyroSample *a2, raven::RateGyroEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;

  if ((this[4].i8[0] & 1) == 0)
    return 0;
  v13 = (uint64_t)this[1];
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GyroSample::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    *(float64x2_t *)((char *)a2 + 104) = vcvtq_f64_f32(this[2]);
    *((double *)a2 + 15) = this[3].f32[0];
    return 1;
  }
  return result;
}

BOOL raven::ConvertProtobufToRavenPlatformInfoObject(raven *this, const CoreNavigation::CLP::LogEntry::Raven::RavenPlatformInfo *a2, raven::RavenPlatformInfo *a3)
{
  void **v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  __int16 v10;
  char v11;
  __int128 __p;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  CNPlatformInfo::CNPlatformInfo((CNPlatformInfo *)&v10, this);
  *(_WORD *)a2 = v10;
  *((_BYTE *)a2 + 2) = v11;
  v4 = (void **)((char *)a2 + 8);
  if (*((char *)a2 + 31) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = __p;
  *((_QWORD *)a2 + 3) = v13;
  HIBYTE(v13) = 0;
  LOBYTE(__p) = 0;
  v5 = (_OWORD *)((char *)a2 + 32);
  if (*((char *)a2 + 55) < 0)
  {
    operator delete(*((void **)a2 + 4));
    v8 = SHIBYTE(v13);
    *v5 = v14;
    v7 = v16;
    *((_QWORD *)a2 + 6) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    *((_QWORD *)a2 + 7) = v7;
    if (v8 < 0)
    {
      operator delete((void *)__p);
      LODWORD(v7) = *((_DWORD *)a2 + 14);
    }
  }
  else
  {
    *v5 = v14;
    v6 = v16;
    *((_QWORD *)a2 + 6) = v15;
    *((_QWORD *)a2 + 7) = v6;
    LODWORD(v7) = v6;
  }
  result = 0;
  if (*(unsigned __int16 *)a2 >= 2u)
  {
    if ((_DWORD)v7)
      return *((_DWORD *)a2 + 15) != 0;
  }
  return result;
}

uint64_t raven::ConvertProtobufToSignalEnvironmentEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *a2, raven::SignalEnvironmentEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  unsigned __int8 v25;
  __int16 v26;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment::default_instance_ + 8);
  }
  v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    v15 = *((_DWORD *)this + 8);
    if ((v15 & 6) == 0)
    {
      v26 = 12;
      v25 = 4;
      v17 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *))(*(_QWORD *)a2 + 16))(a2);
      v24 = v18 + (double)v17;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "t,%.3lf,No signal environment", v19, v20, v21, v22, v23, SLOBYTE(v24));
      return 0;
    }
    if ((v15 & 4) != 0)
    {
      if ((*((_DWORD *)this + 5) - 1) < 6)
      {
        LOBYTE(v16) = *((_BYTE *)this + 20);
LABEL_15:
        *((_BYTE *)a2 + 104) = v16;
        return 1;
      }
      if ((v15 & 2) == 0)
      {
        LOBYTE(v16) = 0;
        goto LABEL_15;
      }
    }
    v16 = *((_DWORD *)this + 4);
    if (v16 >= 7)
      LOBYTE(v16) = 0;
    goto LABEL_15;
  }
  return result;
}

uint64_t raven::ConvertProtobufToSignalEnvironmentType(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 >= 7)
    LOBYTE(v1) = 0;
  return v1;
}

uint64_t raven::ConvertProtobufToStepCountEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::StepCount *a2, raven::StepCountEvent *a3)
{
  uint64_t v3;
  const CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  CoreNavigation::CLP::LogEntry::PrivateData *v13;
  uint64_t v14;
  const CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace *v15;
  char v16;
  BOOL v17;
  double v18;
  __int16 v19;
  BOOL v21;
  double v22;
  BOOL v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  int v29;
  _BYTE v30[8];
  CoreNavigation::CLP::LogEntry::PrivateData *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  const CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace *v36;
  unsigned int v37;
  int v38;

  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
    v5 = (const CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *)*((_QWORD *)this + 2);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(this);
      v5 = *(const CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry **)(CoreNavigation::CLP::LogEntry::PrivateData::StepCount::default_instance_
                                                                                + 16);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::StepCountEntry((CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *)v30, v5);
    if ((v38 & 1) == 0)
      goto LABEL_31;
    v13 = v31;
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v13 = *(CoreNavigation::CLP::LogEntry::PrivateData **)(CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::default_instance_
                                                           + 8);
    }
    v14 = raven::ConvertProtobufToRavenTime((uint64_t)v13, (uint64_t)a2 + 8, 0, v6, v7, v8, v9, v10, v11, v12);
    if ((v14 & 1) == 0)
      goto LABEL_31;
    if ((v38 & 0x8000) == 0)
    {
LABEL_22:
      if (!v37)
        goto LABEL_25;
      if (v37 <= 3)
      {
        *((_BYTE *)a2 + 104) = v37;
LABEL_25:
        v19 = v38;
        if ((v38 & 0x10000) != 0)
        {
          *((_DWORD *)a2 + 34) = v35;
          if ((v19 & 0x20) == 0)
          {
LABEL_27:
            if ((v19 & 0x800) == 0)
              goto LABEL_28;
            goto LABEL_36;
          }
        }
        else if ((v38 & 0x20) == 0)
        {
          goto LABEL_27;
        }
        *((_QWORD *)a2 + 18) = v33;
        if ((v19 & 0x800) == 0)
        {
LABEL_28:
          if ((v19 & 8) == 0)
          {
LABEL_30:
            v3 = 1;
LABEL_32:
            CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::~StepCountEntry((CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *)v30);
            return v3;
          }
LABEL_29:
          *((_DWORD *)a2 + 39) = v32;
          goto LABEL_30;
        }
LABEL_36:
        *((_DWORD *)a2 + 38) = v34;
        if ((v19 & 8) == 0)
          goto LABEL_30;
        goto LABEL_29;
      }
LABEL_31:
      v3 = 0;
      goto LABEL_32;
    }
    v15 = v36;
    if (!v36)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v14);
      v15 = *(const CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace **)(CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::default_instance_
                                                                                    + 104);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace::AccelerometerPace((CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace *)&v25, v15);
    v16 = v29;
    if ((v29 & 1) != 0)
    {
      v21 = ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
         && (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL;
      v22 = 0.0;
      if (!v21)
        v22 = 1.0 / v26;
      *((double *)a2 + 14) = v22;
      if ((v16 & 4) == 0)
      {
LABEL_14:
        if ((v16 & 2) == 0)
        {
LABEL_21:
          CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace::~AccelerometerPace((CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace *)&v25);
          goto LABEL_22;
        }
LABEL_15:
        v17 = ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
           && (*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL;
        v18 = 0.0;
        if (!v17)
          v18 = 1.0 / v27;
        *((double *)a2 + 16) = v18;
        goto LABEL_21;
      }
    }
    else if ((v29 & 4) == 0)
    {
      goto LABEL_14;
    }
    v23 = ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
       && (*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL;
    v24 = 0.0;
    if (!v23)
      v24 = 1.0 / v28;
    *((double *)a2 + 15) = v24;
    if ((v16 & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  return 0;
}

void sub_18D2335F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::~StepCountEntry((CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::ConvertProtobufToTunnelBridgeNotificationEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *a2, raven::TunnelBridgeNotificationEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CoreNavigation::CLP::LogEntry::PrivateData *v33;
  CoreNavigation::CLP::LogEntry::PrivateData *v34;
  CoreNavigation::CLP::LogEntry::PrivateData *v35;
  CoreNavigation::CLP::LogEntry::PrivateData *v36;
  CoreNavigation::CLP::LogEntry::PrivateData *v37;
  CoreNavigation::CLP::LogEntry::PrivateData *v38;

  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 8);
  }
  v18 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v18)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v22 = *((_QWORD *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
    }
    v23 = *(_QWORD *)(v22 + 8);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeAssistance::default_instance_ + 8);
    }
    v24 = raven::ConvertProtobufToRavenTime(v23, (uint64_t)a2 + 104, 0, v13, v14, v15, v16, v17, v19, v20);
    result = 0;
    if (v24)
    {
      v25 = *((_QWORD *)this + 2);
      if (!v25)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        v25 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v25 + 48) & 8) == 0)
        return 0;
      v26 = *((_QWORD *)this + 2);
      if (!v26)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v26 + 48) & 2) == 0)
        return 0;
      v27 = *((_QWORD *)this + 2);
      if (!v27)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v27 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v27 + 48) & 4) == 0)
        return 0;
      v28 = *((_QWORD *)this + 2);
      if (!v28)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v28 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v28 + 48) & 0x20) == 0)
        return 0;
      v29 = *((_QWORD *)this + 2);
      if (!v29)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v29 + 48) & 0x10) == 0)
        return 0;
      v30 = *((_QWORD *)this + 2);
      if (!v30)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v30 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v30 + 48) & 0x40) == 0)
        return 0;
      v31 = *((_QWORD *)this + 2);
      if (!v31)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v31 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v31 + 48) & 0x80) == 0)
        return 0;
      v32 = *((_QWORD *)this + 2);
      if (v32)
      {
        *((_QWORD *)a2 + 27) = *(_QWORD *)(v32 + 32);
      }
      else
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v32 = *((_QWORD *)this + 2);
        *((_QWORD *)a2 + 27) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                     + 16)
                                         + 32);
        if (!v32)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v33);
          v32 = *((_QWORD *)this + 2);
          *((_QWORD *)a2 + 25) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                       + 16)
                                           + 16);
          if (!v32)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v34);
            v32 = *((_QWORD *)this + 2);
            *((_QWORD *)a2 + 26) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                         + 16)
                                             + 24);
            if (!v32)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v35);
              v32 = *((_QWORD *)this + 2);
              *((_BYTE *)a2 + 225) = *(_BYTE *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                          + 16)
                                              + 41);
              if (!v32)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v36);
                v32 = *((_QWORD *)this + 2);
                *((_BYTE *)a2 + 224) = *(_BYTE *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                            + 16)
                                                + 40);
                if (!v32)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v37);
                  v32 = *((_QWORD *)this + 2);
                  *((_BYTE *)a2 + 226) = *(_BYTE *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                              + 16)
                                                  + 42);
                  if (!v32)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v38);
                    v32 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                    + 16);
                  }
                  goto LABEL_40;
                }
LABEL_39:
                *((_BYTE *)a2 + 226) = *(_BYTE *)(v32 + 42);
LABEL_40:
                *((_BYTE *)a2 + 227) = *(_BYTE *)(v32 + 43);
                return 1;
              }
LABEL_38:
              *((_BYTE *)a2 + 224) = *(_BYTE *)(v32 + 40);
              goto LABEL_39;
            }
LABEL_37:
            *((_BYTE *)a2 + 225) = *(_BYTE *)(v32 + 41);
            goto LABEL_38;
          }
LABEL_36:
          *((_QWORD *)a2 + 26) = *(_QWORD *)(v32 + 24);
          goto LABEL_37;
        }
      }
      *((_QWORD *)a2 + 25) = *(_QWORD *)(v32 + 16);
      goto LABEL_36;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufFrameTypeToClientLocationReferenceFrameType(_DWORD *a1)
{
  if (*a1 == 2)
    return 2;
  else
    return *a1 == 1;
}

uint64_t raven::ConvertProtobufToTunnelEndPointAssistanceEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *a2, raven::TunnelEndPointAssistanceEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unsigned __int8 v33;
  __int16 v34;

  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint::default_instance_ + 8);
  }
  v18 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v18)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v22 = *((_QWORD *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint::default_instance_ + 16);
    }
    v23 = *(_QWORD *)(v22 + 8);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPointAssistance::default_instance_ + 8);
    }
    v24 = raven::ConvertProtobufToRavenTime(v23, (uint64_t)a2 + 104, 0, v13, v14, v15, v16, v17, v19, v20);
    result = 0;
    if (v24)
    {
      if ((~*(_DWORD *)(v22 + 124) & 0x7E) != 0)
      {
        if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
        {
          v34 = 12;
          v33 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "tunnel end position assistance does not contain all required data", v27, v28, v29, v30, v31, v32);
        }
        return 0;
      }
      *(_OWORD *)((char *)a2 + 200) = *(_OWORD *)(v22 + 16);
      *(_OWORD *)((char *)a2 + 216) = *(_OWORD *)(v22 + 32);
      *((_QWORD *)a2 + 29) = *(_QWORD *)(v22 + 48);
      v25 = *(_DWORD *)(v22 + 72);
      if (v25 == 2)
        v26 = 2;
      else
        v26 = v25 == 1;
      *((_BYTE *)a2 + 240) = v26;
      return 1;
    }
  }
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData *raven::ConvertProtobufToVelocityEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, raven::VelocityEvent *a3, raven::VelocityEvent *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int16 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  char v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;

  v11[1] = 0;
  v11[2] = 0;
  v11[0] = &unk_1E25C21B8;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0x7FF8000000000000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0x7FF8000000000000;
  v34 = 0;
  v36 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v37 = v36;
  v38 = v36;
  v39 = v36;
  v40 = 0x7FF8000000000000;
  v42 = v36;
  v43 = v36;
  v44 = v36;
  v45 = v36;
  v46 = 0x7FF8000000000000;
  v35 = 0;
  v41 = 0;
  return raven::ConvertProtobufToVelocityEvent(this, (const CoreNavigation::CLP::LogEntry::PrivateData::Location *)v11, a2, a4, a5, a6, a7, a8, v36, a10);
}

CoreNavigation::CLP::LogEntry::PrivateData *raven::ConvertProtobufToVelocityEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, const raven::PositionEvent *a3, raven::VelocityEvent *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  CoreNavigation::CLP::LogEntry::PrivateData *result;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  CoreNavigation::CLP::LogEntry::PrivateData *LogLevel;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  double v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CoreNavigation::CLP::LogEntry::PrivateData *v54;
  uint64_t v55;
  _BOOL4 v56;
  int v57;
  int v58;
  double v59;
  __double2 v60;
  int v61;
  char *v62;
  char *v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  double *v72;
  int v73;
  double *v74;
  double v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t *v82;
  int v83;
  int v84;
  int i;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  CoreNavigation::CLP::LogEntry::PrivateData *v90;
  char v91;
  _BYTE v92[112];
  _BYTE v93[112];
  void *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD v101[9];
  void *v102;
  __int128 v103;
  uint64_t v104;
  double *v105;
  _BYTE v106[72];
  void *v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  _BYTE v111[72];
  void *v112;
  __int128 v113;
  uint64_t v114;
  double *v115;
  uint64_t v116;
  void *v117;
  __int128 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int8x16_t v122;
  void *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD v128[2];
  char v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float64x2_t v139;
  uint64_t v140;
  _QWORD v141[3];
  __int128 v142;
  uint64_t v143;
  uint64_t v144;

  result = 0;
  v144 = *MEMORY[0x1E0C80C00];
  v128[1] = 0;
  v128[0] = 0;
  v129 = 0;
  v131 = 0;
  v130 = 0;
  v132 = 0;
  v134 = 0;
  v133 = 0;
  v135 = 0;
  v137 = 0;
  v136 = 0;
  v138 = 0x7FF8000000000000;
  if ((*((_BYTE *)this + 100) & 1) != 0)
  {
    v14 = *((_QWORD *)this + 1);
    if (!v14)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 8);
    }
    result = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToRavenTime(v14, (uint64_t)v128, 0, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    if ((_DWORD)result)
    {
      v17 = *((_QWORD *)this + 3);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      if ((*(_BYTE *)(v17 + 362) & 0x10) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel(result) <= 1)
        {
          v122.i16[0] = 12;
          LOBYTE(v117) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v122, (unsigned __int8 *)&v117, "location private does not have mach continuous time for velocity event", v18, v19, v20, v21, v22, v91);
        }
        return 0;
      }
      v23 = *((_QWORD *)this + 3);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      v15.i64[0] = *(_QWORD *)(v23 + 128);
      v122 = 0uLL;
      CNTimeSpan::SetTimeSpan(v122.i64, 0, v15, v16);
      v24 = v122;
      *(int8x16_t *)((char *)a3 + 8) = v122;
      LogLevel = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::PopulateAllTimeFields((uint64_t)a3 + 8, (uint64_t)v128, v24, v25);
      v27 = *((_QWORD *)this + 2);
      if (!v27)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        v27 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v27 + 153) & 0x10) != 0)
      {
        v29 = *((_QWORD *)this + 2);
        if (!v29)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
          v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        LogLevel = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToLocationType(*(_DWORD *)(v29 + 104));
        *((_BYTE *)a3 + 200) = (_BYTE)LogLevel;
        if ((LogLevel | 8) != 9)
          goto LABEL_23;
        v32 = *((_QWORD *)this + 3);
        if (!v32)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
          v32 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
        }
        if ((*(_BYTE *)(v32 + 360) & 8) != 0)
        {
          v33 = *((_QWORD *)this + 3);
          if (!v33)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
            v33 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          v30.i64[0] = *(_QWORD *)(v33 + 32);
          v122 = 0uLL;
          LogLevel = (CoreNavigation::CLP::LogEntry::PrivateData *)CNTimeSpan::SetTimeSpan(v122.i64, 0, v30, v31);
          *((int8x16_t *)a3 + 2) = v122;
          v28 = 1;
        }
        else
        {
LABEL_23:
          v28 = 0;
        }
      }
      else
      {
        v28 = 0;
        *((_BYTE *)a3 + 200) = 0;
      }
      *((_BYTE *)a3 + 24) = v28;
      v34 = *(_OWORD *)((char *)a3 + 24);
      *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a3 + 8);
      *(_OWORD *)((char *)a3 + 120) = v34;
      v35 = *(_OWORD *)((char *)a3 + 72);
      *(_OWORD *)((char *)a3 + 184) = *(_OWORD *)((char *)a3 + 88);
      *(_OWORD *)((char *)a3 + 168) = v35;
      v36 = *(_OWORD *)((char *)a3 + 40);
      *(_OWORD *)((char *)a3 + 152) = *(_OWORD *)((char *)a3 + 56);
      *(_OWORD *)((char *)a3 + 136) = v36;
      v37 = *((_QWORD *)this + 2);
      v38 = v37;
      if (!v37)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        v38 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        v37 = *((_QWORD *)this + 2);
      }
      if (*(double *)(v38 + 40) < 0.0)
        goto LABEL_39;
      v39 = v37;
      if (!v37)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        v37 = *((_QWORD *)this + 2);
      }
      if ((*(_QWORD *)(v39 + 40) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_39;
      v40 = v37;
      if (!v37)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        v40 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        v37 = *((_QWORD *)this + 2);
      }
      if (*(double *)(v40 + 56) <= 0.0)
      {
LABEL_39:
        v42 = 0;
      }
      else
      {
        v41 = v37;
        if (!v37)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
          v41 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          v37 = *((_QWORD *)this + 2);
        }
        v42 = (*(_QWORD *)(v41 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
      *((_BYTE *)a3 + 201) = v42;
      if (v37)
      {
        *((_QWORD *)a3 + 26) = *(_QWORD *)(v37 + 40);
      }
      else
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        v37 = *((_QWORD *)this + 2);
        *((_QWORD *)a3 + 26) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                                     + 16)
                                         + 40);
        if (!v37)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
          v37 = *((_QWORD *)this + 2);
          v43 = *(double *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16)
                          + 72);
          if (!v37)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
            v44 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            v37 = *((_QWORD *)this + 2);
            goto LABEL_45;
          }
LABEL_44:
          v44 = v37;
LABEL_45:
          if (*(double *)(v44 + 64) >= 0.0)
          {
            v46 = v37;
            if (!v37)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
              v46 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
              v37 = *((_QWORD *)this + 2);
            }
            v45 = *(double *)(v46 + 64) < 360.0;
            if (v43 <= 0.0)
              v45 = 0;
            if ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
              v45 = 0;
          }
          else
          {
            v45 = 0;
          }
          *((_BYTE *)a3 + 203) = v45;
          if (!v37)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
            v37 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            v45 = *((unsigned __int8 *)a3 + 203);
          }
          *((double *)a3 + 28) = *(double *)(v37 + 64) * 0.0174532925;
          if (*((_BYTE *)a3 + 201) && !v45 && *((double *)a3 + 26) < 1.0)
          {
            LogLevel = (CoreNavigation::CLP::LogEntry::PrivateData *)cnprint::CNPrinter::GetLogLevel(LogLevel);
            if (LogLevel <= 1)
            {
              v122.i16[0] = 12;
              LOBYTE(v117) = 1;
              v52 = *((_QWORD *)this + 2);
              if (v52)
              {
                v53 = *(_QWORD *)(v52 + 64);
              }
              else
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
                v53 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                            + 16)
                                + 64);
                if (!*((_QWORD *)this + 2))
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v54);
                  if (!*((_QWORD *)this + 2))
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v90);
                }
              }
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v122, (unsigned __int8 *)&v117, "Filling dummy course at low speed,course,%.3f,acc,%.3f,spd valid,%d,speed,%.3f,acc,%.3f", v47, v48, v49, v50, v51, v53);
            }
            v45 = 1;
            *((_BYTE *)a3 + 203) = 1;
            *((_QWORD *)a3 + 28) = 0;
            v43 = 180.0;
          }
          v55 = *((_QWORD *)this + 2);
          if (!v55)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
            v55 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            v45 = *((unsigned __int8 *)a3 + 203);
          }
          v56 = 0;
          *((double *)a3 + 29) = *(double *)(v55 + 56) * *(double *)(v55 + 56);
          *((double *)a3 + 34) = v43 * 0.0174532925 * (v43 * 0.0174532925);
          *((_BYTE *)a3 + 202) = 1;
          *((_QWORD *)a3 + 27) = 0;
          *((_QWORD *)a3 + 30) = 0;
          *((_QWORD *)a3 + 31) = 0;
          *((_OWORD *)a3 + 16) = xmmword_18D331BB0;
          *((_BYTE *)a3 + 280) = 0;
          v57 = *((unsigned __int8 *)a2 + 280);
          v58 = *((unsigned __int8 *)a3 + 201);
          if (*((_BYTE *)a2 + 201) | v57 && *((_BYTE *)a3 + 201) && v45)
          {
            v59 = *((double *)a3 + 26);
            v60 = __sincos_stret(*((double *)a3 + 28));
            *(double *)&v142 = v59 * v60.__sinval;
            *((double *)&v142 + 1) = v59 * v60.__cosval;
            v143 = 0;
            v139 = 0uLL;
            v140 = 0;
            if (v57)
            {
              v61 = 0;
              v62 = (char *)a2 + 288;
              v63 = (char *)a2 + 296;
              v64 = *((double *)a2 + 38);
            }
            else
            {
              v62 = (char *)a2 + 208;
              v63 = (char *)a2 + 216;
              v64 = *((double *)a2 + 28);
              if (!*((_BYTE *)a2 + 202))
                v64 = 0.0;
              v61 = 1;
            }
            v65 = *(_QWORD *)v63;
            v141[0] = *(_QWORD *)v62;
            v141[1] = v65;
            *(double *)&v141[2] = v64;
            v122.i8[8] = 0;
            v125 = 0x300000003;
            v123 = &unk_1E25C78E0;
            v124 = xmmword_18D30BB60;
            v126 = &v127;
            v122.i64[0] = (uint64_t)&off_1E25B9588;
            if (!cnnavigation::ENUToECEF(&v142, 1, v61, (uint64_t)v141, 1, &v139, (uint64_t)&v122))
            {
              *((_BYTE *)a3 + 280) = 1;
              *((float64x2_t *)a3 + 18) = v139;
              *((_QWORD *)a3 + 38) = v140;
              v119 = 0x300000003;
              v117 = &unk_1E25C78E0;
              v118 = xmmword_18D30BB60;
              v120 = &v121;
              if (v122.i8[8])
                sub_18D053AA8((uint64_t)&v117, (uint64_t)&v123);
              v66 = sqrt(*((double *)a3 + 29));
              v67 = *((double *)a3 + 34);
              v114 = 0x300000003;
              v112 = &unk_1E25C78E0;
              v115 = (double *)&v116;
              v113 = xmmword_18D30BB60;
              v68 = sqrt(v67);
              sub_18D04BE88((uint64_t)&v112, 0.0);
              if (v59 < v66 * 5.0 || v68 >= 0.261799388)
              {
                if (v68 >= 0.261799388)
                {
                  v75 = (v59 + v66 * 3.0) / 3.0 * ((v59 + v66 * 3.0) / 3.0);
                  v74 = v115;
                  *v115 = v75;
                }
                else
                {
                  v74 = v115;
                  *v115 = *((double *)a3 + 29);
                  v75 = *((double *)a3 + 29);
                }
                v76 = HIDWORD(v113);
                v74[HIDWORD(v113) + 1] = v75;
                v74[2 * v76 + 2] = *((double *)a3 + 32);
              }
              else
              {
                v109 = 0x300000003;
                v107 = &unk_1E25C78E0;
                v110 = v111;
                v108 = xmmword_18D30BB60;
                sub_18D04BE88((uint64_t)&v107, 0.0);
                v69 = v110;
                *v110 = *((_QWORD *)a3 + 29);
                v70 = SHIDWORD(v108);
                v69[SHIDWORD(v108)] = *((_QWORD *)a3 + 31);
                v69[2 * v70] = *((_QWORD *)a3 + 30);
                v69[1] = *((_QWORD *)a3 + 31);
                v69[(int)v70 + 1] = *((_QWORD *)a3 + 34);
                v71 = &v69[2 * (int)v70];
                v71[1] = *((_QWORD *)a3 + 33);
                v69[2] = *((_QWORD *)a3 + 30);
                v69[(int)v70 + 2] = *((_QWORD *)a3 + 33);
                v71[2] = *((_QWORD *)a3 + 32);
                v104 = 0x300000003;
                v102 = &unk_1E25C78E0;
                v105 = (double *)v106;
                v103 = xmmword_18D30BB60;
                sub_18D04BE88((uint64_t)&v102, 0.0);
                v72 = v105;
                *v105 = v60.__sinval;
                v73 = HIDWORD(v103);
                v72[SHIDWORD(v103)] = v59 * v60.__cosval;
                v72[1] = v60.__cosval;
                v72[v73 + 1] = -(v59 * v60.__sinval);
                v72[2 * v73 + 2] = 1.0;
                sub_18D166008((uint64_t)&v102, (uint64_t)&v107, (uint64_t)v93);
                sub_18D16606C((uint64_t)&v102, (uint64_t)v92);
                sub_18D166008((uint64_t)v93, (uint64_t)v92, (uint64_t)&v94);
                sub_18D053AA8((uint64_t)&v112, (uint64_t)&v94);
              }
              v104 = 0x300000003;
              v102 = &unk_1E25C78E0;
              v103 = xmmword_18D30BB60;
              v105 = (double *)v106;
              sub_18D053B2C((uint64_t)&v117, (uint64_t)&v112, (uint64_t)&v102);
              v77 = DWORD1(v118);
              v78 = v118;
              v99 = 0x300000003;
              v94 = &unk_1E25C78E0;
              v100 = v101;
              v95 = DWORD1(v118);
              v96 = v118;
              v97 = v118 * DWORD1(v118);
              v98 = DWORD1(v118);
              if (DWORD1(v118))
              {
                v79 = 0;
                v80 = 0;
                v81 = HIDWORD(v118);
                v82 = v120;
                do
                {
                  v83 = v79;
                  v84 = v80;
                  for (i = v78; i; --i)
                  {
                    v101[v84] = v82[v83];
                    v84 += v77;
                    ++v83;
                  }
                  ++v80;
                  v79 += v81;
                }
                while (v80 != v77);
              }
              v109 = 0x300000003;
              v107 = &unk_1E25C78E0;
              v108 = xmmword_18D30BB60;
              v110 = v111;
              sub_18D053B2C((uint64_t)&v102, (uint64_t)&v94, (uint64_t)&v107);
              v86 = v110;
              *((_QWORD *)a3 + 39) = *v110;
              v87 = SHIDWORD(v108);
              v88 = &v86[SHIDWORD(v108)];
              *((_QWORD *)a3 + 40) = *v88;
              *((_QWORD *)a3 + 41) = v86[2 * v87];
              *((_QWORD *)a3 + 42) = v88[1];
              v89 = &v86[2 * (int)v87];
              *((_QWORD *)a3 + 43) = v89[1];
              *((_QWORD *)a3 + 44) = v89[2];
            }
            v58 = *((unsigned __int8 *)a3 + 201);
            v45 = *((unsigned __int8 *)a3 + 203);
            v56 = *((_BYTE *)a3 + 202) == 0;
          }
          if (v58 && v45 && !v56)
            return (CoreNavigation::CLP::LogEntry::PrivateData *)1;
          else
            return (CoreNavigation::CLP::LogEntry::PrivateData *)(*((_BYTE *)a3 + 280) != 0);
        }
      }
      v43 = *(double *)(v37 + 72);
      goto LABEL_44;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToARSessionStatusEvent(cnprint::CNPrinter *a1, uint64_t a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 v21;
  __int128 v22;

  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    a4.i64[0] = *(_QWORD *)(a2 + 24);
    v22 = 0uLL;
    v13 = CNTimeSpan::SetTimeSpan((uint64_t *)&v22, 0, a4, a5);
    *(_OWORD *)(a3 + 8) = v22;
    switch(*(_DWORD *)a1)
    {
      case 0xFFFFFFFF:
        *(_BYTE *)(a3 + 104) = 0;
        goto LABEL_11;
      case 0:
        result = 1;
        *(_BYTE *)(a3 + 104) = 1;
        return result;
      case 1:
        v14 = 2;
        goto LABEL_10;
      case 2:
        v14 = 3;
LABEL_10:
        *(_BYTE *)(a3 + 104) = v14;
LABEL_11:
        result = 1;
        break;
      default:
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v13) <= 1)
        {
          LOWORD(v22) = 12;
          v21 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "ConvertProtobufToARSessionStatusEvent, Invalid vision AR Session Status, %u", v15, v16, v17, v18, v19, *(_DWORD *)a1);
        }
        return 0;
    }
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
    {
      LOWORD(v22) = 12;
      v21 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "ConvertProtobufToARSessionStatusEvent, mach continuous time not present", v5, v6, v7, v8, v9, v20);
    }
    return 0;
  }
  return result;
}

uint64_t raven::ConvertProtobufToVIOEstimateEvent(raven *this, const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *a2, raven::VIOEstimateEvent *a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v13;
  uint64_t *v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  cnprint::CNPrinter *LogLevel;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  double v64;
  uint64_t result;
  unint64_t v66;
  unint64_t v67;
  size_t v68;
  _QWORD *v69;
  int v70;
  int v71;
  unint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  double *v77;
  double *v78;
  double v79;
  cnprint::CNPrinter *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  cnprint::CNPrinter *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  cnprint::CNPrinter *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  size_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  unint64_t v131;
  _BOOL8 v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  _QWORD *v140;
  unint64_t v141;
  _BOOL8 v142;
  uint64_t v143;
  double *v144;
  uint64_t v145;
  int v146;
  double *v147;
  unint64_t v148;
  char v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  void *v171;
  __int128 v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  void *v176;
  __int128 v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  void *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  void *v186;
  __int128 v187;
  uint64_t v188;
  double *v189;
  uint64_t v190;
  _QWORD v191[2];
  int v192;
  int v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE v196[72];
  void *v197;
  __int128 v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  _BYTE __p[32];
  double *v203;
  _BYTE v204[80];
  void *__dst[3];
  void *v206;
  __int128 v207;
  uint64_t v208;
  _BYTE *v209;
  _BYTE v210[40];
  _BYTE v211[24];
  uint64_t v212;
  _QWORD *v213;
  _QWORD v214[9];

  if ((*((_BYTE *)this + 88) & 4) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      *(_WORD *)v211 = 12;
      __p[0] = 1;
      v10 = "ConvertProtobufVIOEstimateEvent, VIO applicable mach continuous time not present";
LABEL_38:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, __p, v10, v5, v6, v7, v8, v9, SLOBYTE(v161));
      return 0;
    }
    return 0;
  }
  v13 = *((_QWORD *)this + 2);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto(this);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 16);
  }
  a4.i64[0] = *(_QWORD *)(v13 + 24);
  *(_OWORD *)v211 = 0uLL;
  v14 = CNTimeSpan::SetTimeSpan((uint64_t *)v211, 0, a4, a5);
  v16 = *(int8x16_t *)v211;
  *(_OWORD *)((char *)a2 + 8) = *(_OWORD *)v211;
  *(int8x16_t *)((char *)a2 + 104) = v16;
  if ((*((_BYTE *)this + 88) & 2) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v14) <= 1)
    {
      *(_WORD *)v211 = 12;
      __p[0] = 1;
      v17 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(_QWORD *)a2 + 16))(a2);
      v162 = v18 + (double)v17;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, __p, "ConvertProtobufVIOEstimateEvent, t, %.3lf, VIO session start mach continuous time not present", v19, v20, v21, v22, v23, SLOBYTE(v162));
    }
    return 0;
  }
  v24 = *((_QWORD *)this + 1);
  if (!v24)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto((CoreNavigation::CLP::LogEntry::Vision *)v14);
    v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 8);
  }
  v16.i64[0] = *(_QWORD *)(v24 + 24);
  *(_OWORD *)v211 = 0uLL;
  v25 = CNTimeSpan::SetTimeSpan((uint64_t *)v211, 0, v16, v15);
  *(_OWORD *)((char *)a2 + 200) = *(_OWORD *)v211;
  v26 = *((_DWORD *)this + 22);
  if ((v26 & 1) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
    {
      *(_WORD *)v211 = 12;
      __p[0] = 1;
      v27 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(_QWORD *)a2 + 16))(a2);
      v163 = v28 + (double)v27;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, __p, "ConvertProtobufVIOEstimateEvent,t, %.3lf, VIO Tracking Status not present", v29, v30, v31, v32, v33, SLOBYTE(v163));
    }
    return 0;
  }
  v34 = *((_DWORD *)this + 20) + 1;
  if (v34 >= 6)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
    {
      *(_WORD *)v211 = 12;
      __p[0] = 1;
      v42 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(_QWORD *)a2 + 16))(a2);
      v164 = v43 + (double)v42;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, __p, "ConvertProtobufVIOEstimateEvent, t, %.3lf, Invalid VIO Tracking State, %u", v44, v45, v46, v47, v48, SLOBYTE(v164));
    }
    return 0;
  }
  *((_BYTE *)a2 + 296) = v34;
  if ((~v26 & 0x78) != 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
    {
      *(_WORD *)v211 = 12;
      __p[0] = 1;
      v49 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(_QWORD *)a2 + 16))(a2);
      v165 = v50 + (double)v49;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, __p, "ConvertProtobufVIOEstimateEvent, t, %.3lf, VIO State/Cov not present", v51, v52, v53, v54, v55, SLOBYTE(v165));
    }
    return 0;
  }
  if ((~v26 & 0x18) != 0)
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25);
    if (LogLevel > 1)
      goto LABEL_36;
    *(_WORD *)v211 = 12;
    __p[0] = 1;
    v62 = "ConvertProtobufVIOInertialState, VIO Inertial State not present.";
    goto LABEL_35;
  }
  v35 = *((_QWORD *)this + 3);
  if (!v35)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto((CoreNavigation::CLP::LogEntry::Vision *)v25);
    v35 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 24);
  }
  v36 = *(_QWORD *)(v35 + 8);
  v37 = *(unsigned int *)(v35 + 16);
  if (v36 != 8 * (_DWORD)v37
    || (v38 = *(_DWORD *)(v35 + 24),
        v39 = *(_DWORD *)(v35 + 56),
        v39 + v38 + *(_DWORD *)(v35 + 48) + *(_DWORD *)(v35 + 32) + *(_DWORD *)(v35 + 40) != (_DWORD)v37))
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25);
    if (LogLevel > 1)
      goto LABEL_36;
    *(_WORD *)v211 = 12;
    __p[0] = 1;
    v62 = "ConvertProtobufVIOInertialState, VIO Inertial State Info Integrity failed.";
    goto LABEL_35;
  }
  if (v36 > 0xA8
    || !(_DWORD)v37
    || v39 != 3
    || v38 != 9
    || ((v40 = (_QWORD *)*((_QWORD *)this + 4), *((char *)v40 + 23) < 0)
      ? (v41 = v40[1])
      : (v41 = *((unsigned __int8 *)v40 + 23)),
        v41 != v36))
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25);
    if (LogLevel > 1)
      goto LABEL_36;
    *(_WORD *)v211 = 12;
    __p[0] = 1;
    v62 = "ConvertProtobufVIOInertialState, VIO Inertial State Info Sensibility checks failed.";
LABEL_35:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, __p, v62, v57, v58, v59, v60, v61, SLOBYTE(v161));
    goto LABEL_36;
  }
  v66 = *(unsigned int *)(v35 + 20);
  v67 = *(unsigned int *)(v35 + 52);
  sub_18D23A458(__dst, v37);
  if (*((char *)v40 + 23) < 0)
  {
    v69 = v40;
    v40 = (_QWORD *)*v40;
    v68 = v69[1];
  }
  else
  {
    v68 = *((unsigned __int8 *)v40 + 23);
  }
  if (v68)
    memmove(__dst[0], v40, v68);
  v212 = 0x300000003;
  *(_QWORD *)v211 = &unk_1E25C78E0;
  *(_OWORD *)&v211[8] = xmmword_18D30BB60;
  v213 = v214;
  if (v66 <= 0xFFFFFFF6)
  {
    v70 = 0;
    v71 = 0;
    v72 = (v66 + 9);
    v73 = __dst[0];
    do
    {
      v214[3 * v71 + v70] = v73[v66];
      if (v70 == 2)
      {
        ++v71;
        v70 = 0;
      }
      else
      {
        ++v70;
      }
      ++v66;
    }
    while (v66 < v72);
  }
  v178 = 0x300000003;
  v176 = &unk_1E25C78E0;
  v177 = xmmword_18D30BB60;
  v179 = &v180;
  sub_18D073454((uint64_t)v211, (uint64_t)&v176);
  v183 = 0x300000003;
  v181 = &unk_1E25C78E0;
  v182 = xmmword_18D30BB60;
  v184 = &v185;
  sub_18D053B2C((uint64_t)&v176, (uint64_t)v211, (uint64_t)&v181);
  v173 = 0x300000003;
  v171 = &unk_1E25C78E0;
  v174 = &v175;
  v172 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v171, 0.0);
  v74 = HIDWORD(v172) + 1;
  v75 = v174;
  *v174 = 0x3FF0000000000000;
  v75[v74] = 0x3FF0000000000000;
  v75[2 * v74] = 0x3FF0000000000000;
  v188 = 0x300000003;
  v186 = &unk_1E25C78E0;
  v187 = xmmword_18D30BB60;
  v189 = (double *)&v190;
  sub_18D0540FC((uint64_t)&v181, (uint64_t)&v171, (uint64_t)&v186);
  v194 = 0x300000003;
  v191[0] = &unk_1E25C78E0;
  v76 = (DWORD1(v187) * v187);
  v77 = (double *)v196;
  v195 = v196;
  v191[1] = v187;
  v192 = v76;
  v193 = v187;
  if ((int)v76 >= 1)
  {
    v78 = v189;
    do
    {
      v79 = *v78++;
      *v77++ = fabs(v79);
      --v76;
    }
    while (v76);
  }
  v199 = 0x300000003;
  v197 = &unk_1E25C78E0;
  v198 = xmmword_18D30BB60;
  v200 = &v201;
  v208 = 0x300000003;
  v206 = &unk_1E25C7910;
  v207 = xmmword_18D30BB60;
  v209 = v210;
  sub_18D04C6B8((uint64_t)v191, (uint64_t)&v197, (uint64_t)&v206);
  *(_QWORD *)&__p[24] = 0x300000003;
  *(_QWORD *)__p = &unk_1E25C78E0;
  *(_OWORD *)&__p[8] = xmmword_18D30BB60;
  v203 = (double *)v204;
  v208 = 0x300000003;
  v206 = &unk_1E25C7910;
  v207 = xmmword_18D30BB60;
  v209 = v210;
  sub_18D04C6B8((uint64_t)&v197, (uint64_t)__p, (uint64_t)&v206);
  if (fabs(*v203) <= 0.00001 && fabs(sub_18D23A3D0((uint64_t)v211) + -1.0) <= 0.00001)
  {
    sub_18D159244((uint64_t)__p, (uint64_t)v211);
    if ((char *)a2 + 304 != __p)
    {
      v87 = *(_OWORD *)&__p[16];
      *((_OWORD *)a2 + 19) = *(_OWORD *)__p;
      *((_OWORD *)a2 + 20) = v87;
    }
    *(_QWORD *)&__p[24] = 0x100000003;
    *(_QWORD *)__p = &unk_1E25C7790;
    *(_OWORD *)&__p[8] = xmmword_18D313070;
    v88 = v204;
    v203 = (double *)v204;
    if (v67 <= 0xFFFFFFFC)
    {
      v89 = (v67 + 3);
      v90 = __dst[0];
      do
        *v88++ = v90[v67++];
      while (v67 < v89);
    }
    sub_18D192CE4((uint64_t)__p);
    if ((v92 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v86 = 1;
      if (cnprint::CNPrinter::GetLogLevel(v91) <= 1)
      {
        LOWORD(v197) = 12;
        LOBYTE(v191[0]) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v197, (unsigned __int8 *)v191, "ConvertProtobufVIOInertialState, NOTE: VIO Position Vector failed the sensibility check.", v93, v94, v95, v96, v97, SLOBYTE(v161));
      }
    }
    else
    {
      sub_18D053AA8((uint64_t)a2 + 336, (uint64_t)__p);
      v86 = 0;
    }
  }
  else
  {
    v86 = 1;
    if (cnprint::CNPrinter::GetLogLevel(v80) <= 1)
    {
      *(_WORD *)__p = 12;
      LOBYTE(v197) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v197, "ConvertProtobufVIOInertialState, NOTE: VIO imu2vio rotation matrix failed the orthogonality check.", v81, v82, v83, v84, v85, SLOBYTE(v161));
    }
  }
  LogLevel = (cnprint::CNPrinter *)__dst[0];
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (v86)
  {
LABEL_36:
    if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
    {
      *(_WORD *)v211 = 12;
      __p[0] = 1;
      v63 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(_QWORD *)a2 + 16))(a2);
      v161 = v64 + (double)v63;
      v10 = "ConvertProtobufVIOEstimateEvent, t, %.3lf, Parsing Error in VIO Inertial State";
      goto LABEL_38;
    }
    return 0;
  }
  if ((~*((_DWORD *)this + 22) & 0x60) != 0)
  {
    v106 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (v106 > 1)
      goto LABEL_98;
    *(_WORD *)v211 = 12;
    __p[0] = 1;
    v112 = "ConvertProtobufVIOInertialCovariance, VIO Inertial State Var-Covariance not present.";
    goto LABEL_97;
  }
  v98 = *((_QWORD *)this + 5);
  if (!v98)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto(LogLevel);
    v98 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 40);
  }
  v99 = *(_QWORD *)(v98 + 8);
  v100 = *(unsigned int *)(v98 + 16);
  v101 = *(_DWORD *)(v98 + 24);
  v102 = *(_DWORD *)(v98 + 56);
  v103 = *(_DWORD *)(v98 + 40);
  v104 = v102 + v101 + v103 + *(_DWORD *)(v98 + 32) + *(_DWORD *)(v98 + 48);
  if (v99 != 8 * (_DWORD)v100 || (_DWORD)v100 != v104 * v104)
  {
    v106 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (v106 > 1)
      goto LABEL_98;
    *(_WORD *)v211 = 12;
    __p[0] = 1;
    v112 = "ConvertProtobufVIOInertialCovariance, VIO Inertial State Covariance Info Integrity failed.";
    goto LABEL_97;
  }
  v167 = *(_DWORD *)(v98 + 32);
  v168 = *(_DWORD *)(v98 + 48);
  if (v99 > 0x708
    || !(_DWORD)v100
    || v102 != 3
    || v101 != 3
    || ((v113 = (_QWORD *)*((_QWORD *)this + 6), *((char *)v113 + 23) < 0)
      ? (v114 = v113[1])
      : (v114 = *((unsigned __int8 *)v113 + 23)),
        v114 != v99))
  {
    v106 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (v106 > 1)
      goto LABEL_98;
    *(_WORD *)v211 = 12;
    __p[0] = 1;
    v112 = "ConvertProtobufVIOInertialCovariance, VIO Inertial State Covariance Info sensibility checks failed.";
LABEL_97:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, __p, v112, v107, v108, v109, v110, v111, SLOBYTE(v161));
LABEL_98:
    if (cnprint::CNPrinter::GetLogLevel(v106) <= 1)
    {
      *(_WORD *)v211 = 12;
      __p[0] = 1;
      v116 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(_QWORD *)a2 + 16))(a2);
      v166 = v117 + (double)v116;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, __p, "ConvertProtobufVIOEstimateEvent, t, %.3lf, Parsing Error in VIO Inertial State Var-Cov", v118, v119, v120, v121, v122, SLOBYTE(v166));
    }
    return 0;
  }
  v169 = *(unsigned int *)(v98 + 52);
  v170 = *(unsigned int *)(v98 + 20);
  sub_18D23A458(__p, v100);
  if (*((char *)v113 + 23) < 0)
  {
    v123 = v113;
    v113 = (_QWORD *)*v113;
    v115 = v123[1];
  }
  else
  {
    v115 = *((unsigned __int8 *)v113 + 23);
  }
  if (v115)
    memmove(*(void **)__p, v113, v115);
  v212 = 0x300000003;
  *(_QWORD *)v211 = &unk_1E25C78E0;
  *(_OWORD *)&v211[8] = xmmword_18D30BB60;
  v124 = v214;
  v213 = v214;
  v125 = (v170 + 3);
  if (v170 <= 0xFFFFFFFC)
  {
    v126 = *(_QWORD *)__p;
    v127 = v170 + v170 * (v103 + v167 + 6 + v168);
    v128 = v170;
    do
    {
      v129 = v127;
      v130 = v124;
      v131 = v170;
      do
      {
        *v130 = *(_QWORD *)(v126 + 8 * v129);
        v130 += 3;
        ++v131;
        ++v129;
      }
      while (v131 < v125);
      ++v128;
      ++v124;
      v127 += v104;
    }
    while (v128 < v125);
  }
  v132 = cntransformation::CNRigidTransformation::SetPrr((uint64_t)a2 + 304, (uint64_t)v211);
  if (!v132)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v132) <= 1)
    {
      LOWORD(v197) = 12;
      LOBYTE(v191[0]) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v197, (unsigned __int8 *)v191, "ConvertProtobufVIOInertialCovariance, Cannot set/store the Orientation Covariance", v151, v152, v153, v154, v155, SLOBYTE(v161));
    }
    goto LABEL_130;
  }
  v133 = (v169 + 3);
  if (v169 <= 0xFFFFFFFC)
  {
    v134 = *(_QWORD *)__p;
    v135 = v213;
    v136 = 8 * *(int *)&v211[20];
    v137 = v169 + v169 * (v103 + 6 + v167 + v168);
    v138 = v169;
    do
    {
      v139 = v137;
      v140 = v135;
      v141 = v169;
      do
      {
        *v140 = *(_QWORD *)(v134 + 8 * v139);
        ++v141;
        v140 = (_QWORD *)((char *)v140 + v136);
        ++v139;
      }
      while (v141 < v133);
      ++v138;
      ++v135;
      v137 += v104;
    }
    while (v138 < v133);
  }
  v142 = cntransformation::CNRigidTransformation::SetPpp((uint64_t)a2 + 304, (uint64_t)v211);
  if (!v142)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v142) <= 1)
    {
      LOWORD(v197) = 12;
      LOBYTE(v191[0]) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v197, (unsigned __int8 *)v191, "ConvertProtobufVIOInertialCovariance, Cannot set/store the IMU Position Covariance", v156, v157, v158, v159, v160, SLOBYTE(v161));
    }
LABEL_130:
    v149 = 0;
    goto LABEL_131;
  }
  if (v170 <= 0xFFFFFFFC)
  {
    v143 = *(_QWORD *)__p;
    v144 = (double *)v213;
    v145 = 8 * *(int *)&v211[20];
    v146 = v170 * v104;
    do
    {
      v147 = v144;
      v148 = v169;
      if (v169 <= 0xFFFFFFFC)
      {
        do
        {
          *v147 = -*(double *)(v143 + 8 * (v146 + v148++));
          v147 = (double *)((char *)v147 + v145);
        }
        while (v148 < v133);
      }
      ++v144;
      v146 += v104;
      LODWORD(v170) = v170 + 1;
    }
    while (v170 < v125);
  }
  v149 = 1;
  if (*(_DWORD *)&v211[8] == 3 && *(_DWORD *)&v211[12] == 3)
  {
    sub_18D053AA8((uint64_t)a2 + 624, (uint64_t)v211);
    *((_BYTE *)a2 + 736) = 1;
  }
LABEL_131:
  v106 = *(cnprint::CNPrinter **)__p;
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  if ((v149 & 1) == 0)
    goto LABEL_98;
  *((_BYTE *)a2 + 1185) = sub_18D235238(*((_QWORD *)this + 7), *((_DWORD *)this + 22), (uint64_t)a2 + 104);
  result = 1;
  *((_BYTE *)a2 + 1184) = 1;
  return result;
}

void sub_18D2351DC(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18D235238(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  float64x2_t *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int i;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  double *v22;
  double *v23;
  double v24;
  cnprint::CNPrinter *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD v49[9];
  void *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  __int128 v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  _QWORD v60[2];
  int v61;
  int v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE v65[72];
  void *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD v80[24];
  char v81[8];
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  void *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  void *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;

  if ((a2 & 0x80) == 0)
    return 1;
  v5 = a1;
  if (!a1)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto(0);
    v5 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 56);
  }
  if (*(_DWORD *)(v5 + 16) == 4)
  {
    v6 = 0;
    v94 = 0x400000004;
    v92 = &unk_1E25C7FA0;
    v93 = xmmword_18D313080;
    v95 = &v96;
    while (1)
    {
      if (v6 >= *(int *)(v5 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v76);
      }
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6);
      if (*(_DWORD *)(v7 + 16) != 4)
        break;
      v8 = *(float32x2_t **)(v7 + 8);
      v9 = (float64x2_t *)&v95[SHIDWORD(v93) * (uint64_t)(int)v6];
      *v9 = vcvtq_f64_f32(*v8);
      v9[1] = vcvtq_f64_f32(v8[1]);
      if (++v6 == 4)
      {
        v80[0] = 0x100000000;
        v88 = 0x100000003;
        v86 = &unk_1E25C77C0;
        v87 = xmmword_18D313070;
        v91 = 2;
        v89 = &v90;
        v90 = 0x100000000;
        sub_18D04F764((uint64_t)&v76, (uint64_t)&v92, (uint64_t)&v86, (uint64_t)&v86);
        sub_18D159B20((uint64_t)v81, (uint64_t)&v76);
        v10 = v83;
        v11 = v82;
        v47 = 0x300000003;
        v42 = &unk_1E25C78E0;
        v48 = v49;
        v43 = v83;
        v44 = v82;
        v45 = v82 * v83;
        v46 = v83;
        if (v83)
        {
          v12 = 0;
          v13 = 0;
          v14 = v84;
          v15 = v85;
          do
          {
            v16 = v12;
            v17 = v13;
            for (i = v11; i; --i)
            {
              v49[v17] = *(_QWORD *)(v15 + 8 * v16);
              v17 += v10;
              ++v16;
            }
            ++v13;
            v12 += v14;
          }
          while (v13 != v10);
        }
        v52 = 0x300000003;
        v50 = &unk_1E25C78E0;
        v51 = xmmword_18D30BB60;
        v53 = &v54;
        sub_18D053B2C((uint64_t)&v42, (uint64_t)v81, (uint64_t)&v50);
        v39 = 0x300000003;
        v37 = &unk_1E25C78E0;
        v40 = &v41;
        v38 = xmmword_18D30BB60;
        sub_18D04BE88((uint64_t)&v37, 0.0);
        v19 = HIDWORD(v38) + 1;
        v20 = v40;
        *v40 = 0x3FF0000000000000;
        v20[v19] = 0x3FF0000000000000;
        v20[2 * v19] = 0x3FF0000000000000;
        v57 = 0x300000003;
        v55 = &unk_1E25C78E0;
        v56 = xmmword_18D30BB60;
        v58 = (double *)&v59;
        sub_18D0540FC((uint64_t)&v50, (uint64_t)&v37, (uint64_t)&v55);
        v63 = 0x300000003;
        v60[0] = &unk_1E25C78E0;
        v21 = (DWORD1(v56) * v56);
        v22 = (double *)v65;
        v64 = v65;
        v60[1] = v56;
        v61 = v21;
        v62 = v56;
        if ((int)v21 >= 1)
        {
          v23 = v58;
          do
          {
            v24 = *v23++;
            *v22++ = fabs(v24);
            --v21;
          }
          while (v21);
        }
        v68 = 0x300000003;
        v66 = &unk_1E25C78E0;
        v67 = xmmword_18D30BB60;
        v69 = &v70;
        v78 = 0x300000003;
        v76 = &unk_1E25C7910;
        v77 = xmmword_18D30BB60;
        v79 = v80;
        sub_18D04C6B8((uint64_t)v60, (uint64_t)&v66, (uint64_t)&v76);
        v73 = 0x300000003;
        v71 = &unk_1E25C78E0;
        v72 = xmmword_18D30BB60;
        v74 = (double *)&v75;
        v78 = 0x300000003;
        v76 = &unk_1E25C7910;
        v77 = xmmword_18D30BB60;
        v79 = v80;
        sub_18D04C6B8((uint64_t)&v66, (uint64_t)&v71, (uint64_t)&v76);
        if (fabs(*v74) > 0.00001)
          goto LABEL_21;
        v99 = 0x100000003;
        v97 = &unk_1E25C77C0;
        v98 = xmmword_18D313070;
        v100 = &v101;
        v78 = 0x300000003;
        v76 = &unk_1E25C78E0;
        v77 = xmmword_18D30BB60;
        v79 = v80;
        if (fabs(sub_18D159938((uint64_t)v81, (uint64_t)&v97, (uint64_t)&v76) + -1.0) <= 0.00001)
        {
          v31 = cntransformation::CNRigidTransformation::SetTransformationMatrix(a3 + 640, (uint64_t)&v92);
          if ((v31 & 1) != 0)
            return 1;
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v31) <= 1)
          {
            LOWORD(v76) = 12;
            LOBYTE(v71) = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v71, "ConvertProtobufVIOCameraPose, Cannot set/store the vio2camARKit Transformation Matrix.", v32, v33, v34, v35, v36, 3);
          }
        }
        else
        {
LABEL_21:
          if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
          {
            LOWORD(v76) = 12;
            LOBYTE(v71) = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v71, "ConvertProtobufVIOCameraPose, NOTE: ARKit camera pose rotation matrix failed the orthogonality check.", v26, v27, v28, v29, v30, 3);
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

void sub_18D235720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL raven::ConvertProtobufToVLLocalizationEvent(raven *this, const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult *a2, const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *a3, raven::VLLocalizationEvent *a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *LogLevel;
  int v26;
  float v27;
  BOOL v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double v46;
  cnprint::CNPrinter *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  __int128 v56;
  cnprint::CNPrinter *v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  _BYTE *v62;
  __int128 v63;
  __int128 v64;
  cnprint::CNPrinter *v65;
  double v66;
  BOOL v68;
  uint64_t v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  BOOL v73;
  BOOL v74;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  void *v112;
  __int128 v113;
  uint64_t v114;
  double *v115;
  _DWORD v116[24];
  char v117[8];
  unsigned int v118;
  unsigned int v119;
  int v120;
  uint64_t *v121;
  _BYTE v122[32];
  uint64_t *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t *v127;
  uint64_t v128;
  double v129;
  __int128 v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  void *v134;
  __int128 v135;
  uint64_t v136;
  double *v137;
  uint64_t v138;
  _QWORD v139[2];
  int v140;
  int v141;
  uint64_t v142;
  _BYTE *v143;
  _BYTE v144[72];
  void *v145;
  __int128 v146;
  uint64_t v147;
  _BYTE *v148;
  _BYTE v149[72];
  void *v150;
  __int128 v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  void *v155;
  __int128 v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  void *v160;
  __int128 v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  _BYTE v165[24];
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  double v171;
  double v172;
  uint64_t v173;
  double v174;
  double v175;
  uint64_t v176;
  double v177;
  uint64_t v178;
  double v179;
  double v180;
  __int128 v181;
  uint64_t v182;

  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
    a5.i64[0] = *((_QWORD *)a2 + 3);
    *(_QWORD *)&v165[8] = 0;
    *(_QWORD *)v165 = 0;
    v14 = CNTimeSpan::SetTimeSpan((uint64_t *)v165, 0, a5, a6);
    v16.i64[1] = *(_QWORD *)&v165[8];
    *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)v165;
    if ((*((_BYTE *)this + 56) & 1) == 0)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v14) <= 1)
      {
        *(_WORD *)v165 = 12;
        LOBYTE(v155) = 1;
        v17 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(_QWORD *)a3 + 16))(a3);
        v108 = v18 + (double)v17;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v155, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, VL Validity mach continuous time not present", v19, v20, v21, v22, v23, SLOBYTE(v108));
      }
      return 0;
    }
    v24 = *((_QWORD *)this + 1);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto((CoreNavigation::CLP::LogEntry::Vision *)v14);
      v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult::default_instance_ + 8);
    }
    v16.i64[0] = *(_QWORD *)(v24 + 24);
    *(_QWORD *)&v165[8] = 0;
    *(_QWORD *)v165 = 0;
    LogLevel = CNTimeSpan::SetTimeSpan((uint64_t *)v165, 0, v16, v15);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)v165;
    v26 = *((_DWORD *)this + 14);
    if ((v26 & 0x10) == 0 || ((v27 = *((float *)this + 12), v27 >= 0.0) ? (v28 = v27 > 1.0) : (v28 = 1), v28))
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
      {
        *(_WORD *)v165 = 12;
        LOBYTE(v155) = 1;
        v29 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(_QWORD *)a3 + 16))(a3);
        v109 = v30 + (double)v29;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v155, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, VL Estimation Confidence not present or wrong", v31, v32, v33, v34, v35, SLOBYTE(v109));
      }
      return 0;
    }
    *((double *)a3 + 136) = v27;
    if ((v26 & 4) != 0)
    {
      v36 = *((_QWORD *)this + 3);
      if (!v36)
      {
        CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto((CoreNavigation::CLP::LogEntry::Vision *)LogLevel);
        v36 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult::default_instance_ + 24);
      }
      if (*(_DWORD *)(v36 + 16) == 4)
      {
        v37 = 0;
        v157 = 0x400000004;
        v155 = &unk_1E25C7FA0;
        v156 = xmmword_18D313080;
        v158 = &v159;
        while (1)
        {
          if (v37 >= *(int *)(v36 + 16))
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v165);
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8 * v37);
          if (*(_DWORD *)(v38 + 16) != 4)
            break;
          v39 = *(uint64_t **)(v38 + 8);
          v40 = &v158[SHIDWORD(v156) * (uint64_t)(int)v37];
          *v40 = *v39;
          v40[1] = v39[1];
          v40[2] = v39[2];
          v40[3] = v39[3];
          if (++v37 == 4)
          {
            v166 = 0x300000001;
            *(_QWORD *)v165 = &unk_1E25C6C50;
            v167 = &v168;
            *(_OWORD *)&v165[8] = xmmword_18D314670;
            v168 = 0x100000000;
            LODWORD(v169) = 2;
            v152 = 0x100000003;
            v150 = &unk_1E25C77C0;
            v151 = xmmword_18D313070;
            v153 = &v154;
            sub_18D163160((uint64_t)v165, (uint64_t)&v150);
            sub_18D04F764((uint64_t)v165, (uint64_t)&v155, (uint64_t)&v150, (uint64_t)&v150);
            sub_18D159B20((uint64_t)v117, (uint64_t)v165);
            *((_QWORD *)&v126 + 1) = 0x300000003;
            *(_QWORD *)&v125 = &unk_1E25C78E0;
            *((_QWORD *)&v125 + 1) = __PAIR64__(v118, v119);
            LODWORD(v126) = v118 * v119;
            DWORD1(v126) = v119;
            v127 = &v128;
            sub_18D073454((uint64_t)v117, (uint64_t)&v125);
            v131 = 0x300000003;
            v129 = COERCE_DOUBLE(&unk_1E25C78E0);
            v130 = xmmword_18D30BB60;
            v132 = &v133;
            sub_18D053B2C((uint64_t)&v125, (uint64_t)v117, (uint64_t)&v129);
            *(_QWORD *)&v122[24] = 0x300000003;
            *(_QWORD *)v122 = &unk_1E25C78E0;
            v123 = &v124;
            *(_OWORD *)&v122[8] = xmmword_18D30BB60;
            sub_18D04BE88((uint64_t)v122, 0.0);
            v41 = *(_DWORD *)&v122[20] + 1;
            v42 = v123;
            *v123 = 0x3FF0000000000000;
            v42[v41] = 0x3FF0000000000000;
            v42[2 * v41] = 0x3FF0000000000000;
            v136 = 0x300000003;
            v134 = &unk_1E25C78E0;
            v135 = xmmword_18D30BB60;
            v137 = (double *)&v138;
            sub_18D0540FC((uint64_t)&v129, (uint64_t)v122, (uint64_t)&v134);
            v142 = 0x300000003;
            v139[0] = &unk_1E25C78E0;
            v43 = (DWORD1(v135) * v135);
            v44 = (double *)v144;
            v143 = v144;
            v139[1] = v135;
            v140 = v43;
            v141 = v135;
            if ((int)v43 >= 1)
            {
              v45 = v137;
              do
              {
                v46 = *v45++;
                *v44++ = fabs(v46);
                --v43;
              }
              while (v43);
            }
            v147 = 0x300000003;
            v145 = &unk_1E25C78E0;
            v146 = xmmword_18D30BB60;
            v148 = v149;
            v166 = 0x300000003;
            *(_QWORD *)v165 = &unk_1E25C7910;
            *(_OWORD *)&v165[8] = xmmword_18D30BB60;
            v167 = &v168;
            sub_18D04C6B8((uint64_t)v139, (uint64_t)&v145, (uint64_t)v165);
            v114 = 0x300000003;
            v112 = &unk_1E25C78E0;
            v113 = xmmword_18D30BB60;
            v115 = (double *)v116;
            v166 = 0x300000003;
            *(_QWORD *)v165 = &unk_1E25C7910;
            *(_OWORD *)&v165[8] = xmmword_18D30BB60;
            v167 = &v168;
            sub_18D04C6B8((uint64_t)&v145, (uint64_t)&v112, (uint64_t)v165);
            if (fabs(*v115) > 0.00001)
              goto LABEL_31;
            v162 = 0x100000003;
            v160 = &unk_1E25C77C0;
            v161 = xmmword_18D313070;
            v163 = &v164;
            v166 = 0x300000003;
            *(_QWORD *)v165 = &unk_1E25C78E0;
            *(_OWORD *)&v165[8] = xmmword_18D30BB60;
            v167 = &v168;
            if (fabs(sub_18D159938((uint64_t)v117, (uint64_t)&v160, (uint64_t)v165) + -1.0) > 0.00001)
            {
LABEL_31:
              LogLevel = (uint64_t *)cnprint::CNPrinter::GetLogLevel(v47);
              if (LogLevel <= 1)
              {
                *(_WORD *)v165 = 12;
                LOBYTE(v112) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v112, "ConvertProtobufToVLLocalizationEvent, NOTE: VL rotation matrix failed the orthogonality check.", v48, v49, v50, v51, v52, SLOBYTE(v107));
              }
              break;
            }
            v114 = 0x100000001;
            v112 = &unk_1E25C6A70;
            *(_QWORD *)&v56 = 0x100000001;
            *((_QWORD *)&v56 + 1) = 0x100000001;
            v113 = v56;
            v115 = (double *)v116;
            v116[0] = 3;
            sub_18D163258((uint64_t)v165, (uint64_t)&v155, (uint64_t)&v150, (uint64_t)&v112);
            sub_18D04DA0C((uint64_t)v139, (uint64_t)v165);
            v114 = 0x100000003;
            v112 = &unk_1E25C7790;
            v113 = xmmword_18D313070;
            v115 = (double *)v116;
            v166 = 0x100000134;
            *(_QWORD *)v165 = &unk_1E25C7640;
            *(_OWORD *)&v165[8] = xmmword_18D3130C0;
            v167 = &v168;
            v147 = 0x100000003;
            v145 = &unk_1E25C7790;
            v146 = xmmword_18D313070;
            v148 = v149;
            sub_18D159EE0((uint64_t)v139, (uint64_t)&v112, (uint64_t)v165, (uint64_t)&v145, "2");
            if ((v58 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              LogLevel = (uint64_t *)cnprint::CNPrinter::GetLogLevel(v57);
              if (LogLevel <= 1)
              {
                *(_WORD *)v165 = 12;
                LOBYTE(v112) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v112, "ConvertProtobufToVLLocalizationEvent, NOTE: VL Position Vector failed the sensibility check.", v77, v78, v79, v80, v81, SLOBYTE(v107));
              }
              break;
            }
            v59 = cntransformation::CNRigidTransformation::SetTransformationMatrix((uint64_t)a3 + 200, (uint64_t)&v155);
            if ((v59 & 1) == 0)
            {
              LogLevel = (uint64_t *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v59);
              if (LogLevel <= 1)
              {
                *(_WORD *)v165 = 12;
                LOBYTE(v112) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v112, "ConvertProtobufToVLLocalizationEvent, Cannot set/store the cam3DV2ecef Transformation Matrix.", v82, v83, v84, v85, v86, SLOBYTE(v107));
              }
              break;
            }
            v60 = sub_18D236394(*((_QWORD *)this + 4), *((_DWORD *)this + 14), (uint64_t)a3);
            if (v60)
            {
              sub_18D2365C0((uint64_t)a3 + 640, (uint64_t)a3 + 200);
              v147 = 0x300000003;
              v145 = &unk_1E25C78E0;
              v148 = v149;
              v146 = xmmword_18D30BB60;
              sub_18D04BE88((uint64_t)&v145, 0.0);
              v61 = SHIDWORD(v146);
              v62 = v148;
              *(_QWORD *)&v148[16 * SHIDWORD(v146)] = 0xBFF0000000000000;
              *(_QWORD *)&v62[8 * v61 + 8] = 0xBFF0000000000000;
              *((_QWORD *)v62 + 2) = 0xBFF0000000000000;
              sub_18D159244((uint64_t)&v129, (uint64_t)&v145);
              v125 = 0u;
              v126 = 0u;
              if (&v125 != (__int128 *)((char *)a3 + 640))
              {
                v63 = *((_OWORD *)a3 + 41);
                v125 = *((_OWORD *)a3 + 40);
                v126 = v63;
              }
              cnrotation::Cat((double *)&v125, (const cnrotation::CNRotation *)&v129, (double *)v122);
              if ((char *)a3 + 640 != v122)
              {
                v64 = *(_OWORD *)&v122[16];
                *((_OWORD *)a3 + 40) = *(_OWORD *)v122;
                *((_OWORD *)a3 + 41) = v64;
              }
              cnrotation::CNRotation::drdq((cnrotation::CNRotation *)v122, (uint64_t)v117);
              v166 = 0x400000004;
              *(_QWORD *)v165 = &unk_1E25C7FA0;
              *(_OWORD *)&v165[8] = xmmword_18D313080;
              v167 = &v168;
              v168 = v131;
              v169 = *((_QWORD *)&v130 + 1);
              v170 = -*(double *)&v130;
              v171 = -v129;
              v172 = -*((double *)&v130 + 1);
              v173 = v131;
              v174 = v129;
              v175 = -*(double *)&v130;
              v176 = v130;
              v177 = -v129;
              v178 = v131;
              v179 = -*((double *)&v130 + 1);
              v180 = v129;
              v181 = v130;
              v182 = v131;
              sub_18D191418((uint64_t)v117, (uint64_t)v165, (uint64_t)&v155);
              cnrotation::CNRotation::dqdr((cnrotation::CNRotation *)&v125, (uint64_t)&v112);
              sub_18D1913B4((uint64_t)&v155, (uint64_t)&v112, (uint64_t)v139);
              sub_18D159B20((uint64_t)v165, (uint64_t)a3 + 736);
              sub_18D159B20((uint64_t)&v155, (uint64_t)a3 + 960);
              sub_18D166008((uint64_t)v139, (uint64_t)v165, (uint64_t)&v112);
              sub_18D16606C((uint64_t)v139, (uint64_t)&v134);
              sub_18D166008((uint64_t)&v112, (uint64_t)&v134, (uint64_t)v117);
              cntransformation::CNRigidTransformation::SetPrr((uint64_t)a3 + 640, (uint64_t)v117);
              sub_18D166008((uint64_t)v139, (uint64_t)&v155, (uint64_t)v117);
              if (v118 == 3 && v119 == 3)
              {
                sub_18D053AA8((uint64_t)a3 + 960, (uint64_t)v117);
                *((_BYTE *)a3 + 1072) = 1;
              }
              *((_BYTE *)a3 + 1080) = 1;
              sub_18D159B20((uint64_t)v117, (uint64_t)a3 + 848);
              sub_18D192CE4((uint64_t)a3 + 672);
              v68 = (*v121 < 0 || ((*v121 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
                 && (unint64_t)(*v121 - 1) > 0xFFFFFFFFFFFFELL;
              v76 = !v68
                 && ((v69 = v121[v120 + 1], v69 >= 0)
                   ? (v70 = ((v69 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
                   : (v70 = 1),
                     v70 ? (v71 = (unint64_t)(v69 - 1) > 0xFFFFFFFFFFFFELL) : (v71 = 0),
                     !v71
                  && ((v72 = v121[2 * v120 + 2], v72 >= 0)
                    ? (v73 = ((v72 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
                    : (v73 = 1),
                      v73 ? (v74 = (unint64_t)(v72 - 1) > 0xFFFFFFFFFFFFELL) : (v74 = 0),
                      !v74))
                 && v66 > 3185504.5
                 && (*(_QWORD *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if (!cnprint::CNPrinter::GetLogLevel(v65))
              {
                LOWORD(v160) = 12;
                LOBYTE(v150) = 0;
                v94 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(_QWORD *)a3 + 16))(a3);
                v96 = v95;
                v97 = *((_QWORD *)a3 + 14);
                v112 = (void *)*((_QWORD *)a3 + 13);
                *(_QWORD *)&v113 = v97;
                v98 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(_QWORD *)a3 + 16))(a3);
                *(double *)v99.i64 = v96;
                *(double *)v100.i64 = (double)v94;
                v134 = (void *)v98;
                *(_QWORD *)&v135 = v101;
                CNTimeSpan::operator-((uint64_t)&v112, &v134, v99, v100);
                v111 = v96 + (double)v94;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v160, (unsigned __int8 *)&v150, "valid VLF data, t, %.3lf, applicability time,  %.3lf [dt %.3lf]", v102, v103, v104, v105, v106, SLOBYTE(v111));
              }
              return *((_BYTE *)a3 + 1080) && v76;
            }
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60) <= 1)
            {
              *(_WORD *)v165 = 12;
              LOBYTE(v155) = 1;
              v87 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(_QWORD *)a3 + 16))(a3);
              v110 = v88 + (double)v87;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v155, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, Error in parsing the VL 6x6 Covariance Matrix", v89, v90, v91, v92, v93, SLOBYTE(v110));
            }
            return 0;
          }
        }
      }
    }
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
    {
      *(_WORD *)v165 = 12;
      LOBYTE(v155) = 1;
      v53 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(_QWORD *)a3 + 16))(a3);
      v107 = v54 + (double)v53;
      v11 = "ConvertProtobufToVLLocalizationEvent, t, %.3lf, Error in parsing the VL 4x4 Transformation Matrix";
      goto LABEL_35;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    *(_WORD *)v165 = 12;
    LOBYTE(v155) = 1;
    v11 = "ConvertProtobufToVLLocalizationEvent, Event mach continuous time not present";
LABEL_35:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v155, v11, v6, v7, v8, v9, v10, SLOBYTE(v107));
  }
  return 0;
}

void sub_18D2362F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_18D236394(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  int v9;
  _BOOL8 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 v23;
  _WORD v24[28];

  if ((a2 & 8) == 0)
    return 0;
  v5 = a1;
  if (!a1)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto(0);
    v5 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult::default_instance_ + 32);
  }
  if (*(_DWORD *)(v5 + 16) == 6)
  {
    v17 = a3;
    v6 = 0;
    v20 = 0x600000006;
    v18 = &unk_1E25C81B0;
    v19 = xmmword_18D314680;
    v21 = &v22;
    while (1)
    {
      if (v6 >= *(int *)(v5 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
      }
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6);
      if (*(_DWORD *)(v7 + 16) != 6)
        break;
      for (i = 0; i != 6; ++i)
      {
        if ((uint64_t)i >= *(int *)(v7 + 16))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
        }
        if (i < 3)
          v9 = 3;
        else
          v9 = -3;
        *(double *)&v21[(int)(((int)v6 + 3) % 6u + HIDWORD(v19) * (i + v9))] = *(float *)(*(_QWORD *)(v7 + 8) + 4 * i);
      }
      if (++v6 == 6)
      {
        v10 = cntransformation::CNRigidTransformation::SetCovarianceMatrix(a3 + 200, (uint64_t)&v18);
        if (v10)
        {
          v11 = 0;
        }
        else
        {
          v11 = 1;
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v10) <= 1)
          {
            v24[0] = 12;
            v23 = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v24, &v23, "ConvertProtobufToVLLocalizationEvent, Cannot set/store the cam3DV2ecef Transformation Matrix Covariance", v12, v13, v14, v15, v16, v17);
          }
        }
        return v11 == 0;
      }
    }
  }
  v11 = 1;
  return v11 == 0;
}

void sub_18D2365A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t sub_18D2365C0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  sub_18D053AA8(a1 + 32, a2 + 32);
  sub_18D053AA8(a1 + 96, a2 + 96);
  sub_18D053AA8(a1 + 208, a2 + 208);
  sub_18D053AA8(a1 + 320, a2 + 320);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  return a1;
}

uint64_t raven::ConvertProtobufToRavenGnssAssistanceFileEvent(raven *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *a2, const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *a3, raven::RavenGnssAssistanceFileEvent *a4)
{
  cnprint::CNPrinter *v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  cnprint::CNPrinter *v16;
  uint64_t *v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int v21;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *v22;
  uint64_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  double v26;
  uint64_t v29;
  uint64_t v30;
  int v31;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *v32;
  double v33;
  double v34;
  BOOL v35;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  float *v43;
  float *v44;
  double *v45;
  double v46;
  double *v47;
  double *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float *v58;
  double *v59;
  double v60;
  double *v61;
  double *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  double *v68;
  uint64_t v69;
  uint64_t v70;
  int ModelParameters;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char v86;
  char **v87;
  uint64_t *v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  uint64_t __src[1032];
  uint64_t *v93[3];
  void *v94[3];
  double *v95;
  double *v96;
  double *v97;
  double *v98;
  double *v99;
  double *v100;
  __int128 v101;

  v4 = (cnprint::CNPrinter *)MEMORY[0x1E0C80A78](this, a2);
  if ((*(_BYTE *)(v5 + 44) & 4) != 0)
  {
    v15 = v6;
    v16 = v4;
    v7.i64[0] = *(_QWORD *)(v5 + 24);
    *(_OWORD *)__src = 0uLL;
    v17 = CNTimeSpan::SetTimeSpan(__src, 0, v7, v8);
    v19.i64[1] = __src[1];
    *(_OWORD *)(v15 + 8) = *(_OWORD *)__src;
    if ((*((_BYTE *)v16 + 76) & 1) != 0)
    {
      v20 = *((_QWORD *)v16 + 1);
      if (v20)
      {
        v21 = *(_DWORD *)(v20 + 8);
      }
      else
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)v17);
        v20 = *((_QWORD *)v16 + 1);
        v21 = *(_DWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                                    + 8)
                        + 8);
        if (!v20)
        {
          CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v22);
          v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                          + 8);
        }
      }
      *(double *)v19.i64 = *(float *)(v20 + 12) + -561548.816;
      *(_OWORD *)__src = 0uLL;
      v23 = CNTimeSpan::SetTimeSpan(__src, 604800 * (v21 - 1042), v19, v18);
      v24.i64[0] = __src[1];
      *(double *)v25.i64 = *(double *)&__src[1] + (double)__src[0];
      v26 = fabs(*(double *)v25.i64);
      if ((unint64_t)(*(_QWORD *)&v26 - 0x10000000000000) >> 53 > 0x3FE
        && (unint64_t)(*(_QWORD *)&v26 - 1) > 0xFFFFFFFFFFFFELL
        && COERCE__INT64(*(double *)&__src[1] + (double)__src[0]) != 0)
      {
        return 0;
      }
      *(_QWORD *)(v15 + 104) = __src[0];
      *(_QWORD *)(v15 + 112) = v24.i64[0];
      if ((*((_BYTE *)v16 + 76) & 2) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v23) > 1)
          return 0;
        LOWORD(__src[0]) = 12;
        LOBYTE(v98) = 1;
        v14 = "#rof,ConvertProtobufToRavenGnssAssistanceFileEvent,ionosphere corrections not present";
        goto LABEL_7;
      }
      v29 = *((_QWORD *)v16 + 2);
      if (!v29)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)v23);
        v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                        + 16);
      }
      if ((*(_BYTE *)(v29 + 52) & 1) != 0)
      {
        v30 = *(_QWORD *)(v29 + 8);
        if (v30)
        {
          v31 = *(_DWORD *)(v30 + 8);
        }
        else
        {
          CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)v23);
          v30 = *(_QWORD *)(v29 + 8);
          v31 = *(_DWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                                      + 8)
                          + 8);
          if (!v30)
          {
            CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v32);
            v30 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                            + 8);
          }
        }
        *(double *)v24.i64 = *(float *)(v30 + 12) + -561548.816;
        *(_OWORD *)__src = 0uLL;
        CNTimeSpan::SetTimeSpan(__src, 604800 * (v31 - 1042), v24, v25);
        v101 = *(_OWORD *)__src;
        v33 = *(double *)&__src[1] + (double)__src[0];
        v34 = fabs(v33);
        v35 = (unint64_t)(*(_QWORD *)&v34 - 0x10000000000000) >> 53 > 0x3FE
           && (unint64_t)(*(_QWORD *)&v34 - 1) > 0xFFFFFFFFFFFFELL;
        if (!v35 || *(_QWORD *)&v33 == 0)
        {
          v37 = *(int *)(v29 + 24);
          if (!(_DWORD)v37)
            return 1;
          v38 = *(uint64_t **)(v29 + 16);
          v87 = (char **)(v15 + 120);
          v88 = &v38[v37];
          while (1)
          {
            v39 = *v38;
            if ((~*(_DWORD *)(*v38 + 64) & 0xF) != 0)
              break;
            v40 = *(_DWORD *)(v39 + 16);
            v41 = *(_DWORD *)(v39 + 20);
            v90 = *(_DWORD *)(v39 + 8);
            v89 = *(_DWORD *)(v39 + 12);
            v98 = 0;
            v99 = 0;
            v100 = 0;
            sub_18D22D9C0((void **)&v98, *(int *)(v39 + 32));
            v42 = *(int *)(v39 + 32);
            if ((_DWORD)v42)
            {
              v43 = *(float **)(v39 + 24);
              v44 = &v43[v42];
              v45 = v99;
              do
              {
                v46 = *v43;
                if (v45 >= v100)
                {
                  v48 = v98;
                  v49 = v45 - v98;
                  v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 61)
                    sub_18D07AFE4();
                  v51 = (char *)v100 - (char *)v98;
                  if (((char *)v100 - (char *)v98) >> 2 > v50)
                    v50 = v51 >> 2;
                  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                    v52 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v52 = v50;
                  if (v52)
                  {
                    v53 = (char *)sub_18D0788C8((uint64_t)&v100, v52);
                    v48 = v98;
                    v45 = v99;
                  }
                  else
                  {
                    v53 = 0;
                  }
                  v54 = (double *)&v53[8 * v49];
                  *v54 = v46;
                  v47 = v54 + 1;
                  while (v45 != v48)
                  {
                    v55 = *((_QWORD *)v45-- - 1);
                    *((_QWORD *)v54-- - 1) = v55;
                  }
                  v98 = v54;
                  v99 = v47;
                  v100 = (double *)&v53[8 * v52];
                  if (v48)
                    operator delete(v48);
                }
                else
                {
                  *v45 = v46;
                  v47 = v45 + 1;
                }
                v99 = v47;
                ++v43;
                v45 = v47;
              }
              while (v43 != v44);
            }
            v95 = 0;
            v96 = 0;
            v97 = 0;
            sub_18D22D9C0((void **)&v95, *(int *)(v39 + 48));
            v56 = *(int *)(v39 + 48);
            if ((_DWORD)v56)
            {
              v57 = *(float **)(v39 + 40);
              v58 = &v57[v56];
              v59 = v96;
              do
              {
                v60 = *v57;
                if (v59 >= v97)
                {
                  v62 = v95;
                  v63 = v59 - v95;
                  v64 = v63 + 1;
                  if ((unint64_t)(v63 + 1) >> 61)
                    sub_18D07AFE4();
                  v65 = (char *)v97 - (char *)v95;
                  if (((char *)v97 - (char *)v95) >> 2 > v64)
                    v64 = v65 >> 2;
                  if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
                    v66 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v66 = v64;
                  if (v66)
                  {
                    v67 = (char *)sub_18D0788C8((uint64_t)&v97, v66);
                    v62 = v95;
                    v59 = v96;
                  }
                  else
                  {
                    v67 = 0;
                  }
                  v68 = (double *)&v67[8 * v63];
                  *v68 = v60;
                  v61 = v68 + 1;
                  while (v59 != v62)
                  {
                    v69 = *((_QWORD *)v59-- - 1);
                    *((_QWORD *)v68-- - 1) = v69;
                  }
                  v95 = v68;
                  v96 = v61;
                  v97 = (double *)&v67[8 * v66];
                  if (v62)
                    operator delete(v62);
                }
                else
                {
                  *v59 = v60;
                  v61 = v59 + 1;
                }
                v96 = v61;
                ++v57;
                v59 = v61;
              }
              while (v57 != v58);
            }
            __src[0] = 0;
            sub_18D23A4CC(v94, v99 - v98, __src);
            __src[0] = 0;
            sub_18D23A4CC(v93, v96 - v95, __src);
            cnnavigation::SphericalHarmonicsIonosphereParameters::SphericalHarmonicsIonosphereParameters((cnnavigation::SphericalHarmonicsIonosphereParameters *)__src, v40, v41);
            ModelParameters = cnnavigation::SphericalHarmonicsIonosphereParameters::LoadModelParameters((uint64_t)__src, (uint64_t)&v101, v90, (uint64_t *)&v98, (uint64_t **)&v95, (uint64_t *)v94, v93, v70, (double)v89, 0.0);
            if (!ModelParameters)
            {
              v73 = *(_QWORD *)(v15 + 128);
              v72 = *(_QWORD *)(v15 + 136);
              if (v73 >= v72)
              {
                v75 = 0x80FE03F80FE03F81 * ((uint64_t)(v73 - (_QWORD)*v87) >> 6);
                v76 = v75 + 1;
                if (v75 + 1 > 0x7F01FC07F01FCLL)
                  sub_18D07AFE4();
                v77 = 0x80FE03F80FE03F81 * ((uint64_t)(v72 - (_QWORD)*v87) >> 6);
                if (2 * v77 > v76)
                  v76 = 2 * v77;
                if (v77 >= 0x3F80FE03F80FELL)
                  v78 = 0x7F01FC07F01FCLL;
                else
                  v78 = v76;
                if (v78)
                {
                  v79 = (char *)sub_18D219D18(v15 + 136, v78);
                  v91 = v80;
                }
                else
                {
                  v79 = 0;
                  v91 = 0;
                }
                v81 = &v79[8256 * v75];
                memcpy(v81, __src, 0x2040uLL);
                v82 = *(char **)(v15 + 120);
                v83 = *(char **)(v15 + 128);
                if (v83 == v82)
                {
                  v84 = v81;
                }
                else
                {
                  v84 = v81;
                  do
                  {
                    v84 -= 8256;
                    v83 -= 8256;
                    memcpy(v84, v83, 0x2040uLL);
                  }
                  while (v83 != v82);
                  v83 = *v87;
                }
                v74 = v81 + 8256;
                *(_QWORD *)(v15 + 120) = v84;
                *(_QWORD *)(v15 + 128) = v74;
                *(_QWORD *)(v15 + 136) = &v79[8256 * v91];
                if (v83)
                  operator delete(v83);
              }
              else
              {
                memcpy(*(void **)(v15 + 128), __src, 0x2040uLL);
                v74 = (char *)(v73 + 8256);
              }
              *(_QWORD *)(v15 + 128) = v74;
            }
            if (v93[0])
            {
              v93[1] = v93[0];
              operator delete(v93[0]);
            }
            if (v94[0])
            {
              v94[1] = v94[0];
              operator delete(v94[0]);
            }
            if (v95)
            {
              v96 = v95;
              operator delete(v95);
            }
            if (v98)
            {
              v99 = v98;
              operator delete(v98);
            }
            if (ModelParameters)
              break;
            if (++v38 == v88)
              return 1;
          }
        }
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v17) <= 1)
    {
      LOWORD(__src[0]) = 12;
      LOBYTE(v98) = 1;
      v14 = "#rof,ConvertProtobufToRavenGnssAssistanceFileEvent,file creation time not present";
      goto LABEL_7;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
  {
    LOWORD(__src[0]) = 12;
    LOBYTE(v98) = 1;
    v14 = "#rof,ConvertProtobufToRavenGnssAssistanceFileEvent,mach continuous time not present";
LABEL_7:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v98, v14, v9, v10, v11, v12, v13, v86);
  }
  return 0;
}

void sub_18D236D28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = *(void **)(v1 - 224);
  if (v3)
  {
    *(_QWORD *)(v1 - 216) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 200);
  if (v4)
  {
    *(_QWORD *)(v1 - 192) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 176);
  if (v5)
  {
    *(_QWORD *)(v1 - 168) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v1 - 152);
  if (v6)
  {
    *(_QWORD *)(v1 - 144) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

double raven::ConvertRavenTimeToProtobuf(uint64_t a1, uint64_t a2)
{
  int v2;
  double result;

  v2 = *(_DWORD *)(a2 + 44);
  *(double *)(a2 + 8) = *(double *)(a1 + 32) + (double)*(uint64_t *)(a1 + 24);
  result = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
  *(_DWORD *)(a2 + 44) = v2 | 5;
  *(double *)(a2 + 24) = result;
  return result;
}

void raven::ConvertRavenSolutionEventToProtobuf(raven *this, const raven::RavenSolutionEvent *a2, CoreNavigation::CLP::LogEntry::Raven::RavenOutput *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t i;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t j;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t k;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t m;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t n;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  double *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  double *v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  const raven::RavenSolutionEvent *v133;

  v5 = *((_DWORD *)a2 + 15) | 1;
  *((_DWORD *)a2 + 15) = v5;
  v6 = *((_QWORD *)a2 + 1);
  if (!v6)
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_1E25BFA70;
    *(_QWORD *)(v6 + 136) = 0;
    *(_QWORD *)(v6 + 144) = 0;
    *(_DWORD *)(v6 + 152) = 0;
    *(_QWORD *)(v6 + 216) = 0;
    *(_QWORD *)(v6 + 224) = 0;
    *(_DWORD *)(v6 + 232) = 0;
    *(_QWORD *)(v6 + 240) = 0;
    *(_QWORD *)(v6 + 248) = 0;
    *(_DWORD *)(v6 + 256) = 0;
    *(_QWORD *)(v6 + 264) = 0;
    *(_QWORD *)(v6 + 272) = 0;
    *(_DWORD *)(v6 + 280) = 0;
    *(_QWORD *)(v6 + 288) = 0;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 116) = 0u;
    *(_DWORD *)(v6 + 208) = 0;
    *(_OWORD *)(v6 + 176) = 0u;
    *(_OWORD *)(v6 + 192) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *((_QWORD *)a2 + 1) = v6;
    v5 = *((_DWORD *)a2 + 15);
  }
  *((_DWORD *)a2 + 15) = v5 | 0x20;
  v7 = *((_QWORD *)a2 + 6);
  if (!v7)
  {
    v7 = operator new();
    *(_QWORD *)v7 = &off_1E25BFB60;
    *(_QWORD *)(v7 + 88) = 0;
    *(_QWORD *)(v7 + 96) = 0;
    *(_DWORD *)(v7 + 104) = 0;
    *(_QWORD *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 120) = 0;
    *(_DWORD *)(v7 + 128) = 0;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_DWORD *)(v7 + 168) = 0;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 68) = 0u;
    *((_QWORD *)a2 + 6) = v7;
  }
  v133 = a2;
  *(_DWORD *)(v6 + 292) |= 1u;
  v8 = *(_QWORD *)(v6 + 8);
  if (!v8)
  {
    v8 = operator new();
    *(_QWORD *)v8 = &off_1E25C0010;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_QWORD *)(v6 + 8) = v8;
  }
  sub_18D23A54C((double *)this + 14, v8);
  v16 = 0;
  if (*((unsigned __int8 *)this + 208) - 1 >= 5)
    v17 = 1;
  else
    v17 = (*((_BYTE *)this + 208) - 1) + 2;
  v18 = *(_DWORD *)(v6 + 292);
  v19 = *((unsigned __int8 *)this + 209);
  if (v19 == 1)
    v20 = 2;
  else
    v20 = 1;
  if (v19 == 2)
    v21 = 3;
  else
    v21 = v20;
  *(_DWORD *)(v6 + 16) = v17;
  *(_DWORD *)(v6 + 20) = v21;
  *(_QWORD *)(v6 + 24) = *((_QWORD *)this + 27);
  *(double *)(v6 + 32) = *((double *)this + 29) + (double)*((uint64_t *)this + 28);
  *(_OWORD *)(v6 + 40) = *((_OWORD *)this + 15);
  *(_QWORD *)(v6 + 184) = *((_QWORD *)this + 32);
  *(_QWORD *)(v6 + 56) = *((unsigned __int16 *)this + 132);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)((char *)this + 1096);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)((char *)this + 1112);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)((char *)this + 1128);
  *(_OWORD *)(v6 + 160) = *(_OWORD *)((char *)this + 1144);
  v22 = *((_QWORD *)this + 145);
  *(_DWORD *)(v6 + 292) = v18 | 0xF3FFE;
  *(_QWORD *)(v6 + 176) = v22;
  do
  {
    v23 = *((unsigned int *)this + v16 + 67);
    if ((_DWORD)v23)
    {
      v24 = *(_DWORD *)(v6 + 124);
      v25 = *(int *)(v6 + 120);
      if ((int)v25 >= v24)
      {
        if (v24 == *(_DWORD *)(v6 + 128))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 112));
          v24 = *(_DWORD *)(v6 + 124);
        }
        *(_DWORD *)(v6 + 124) = v24 + 1;
        v27 = operator new();
        *(_QWORD *)v27 = &off_1E25BFCC8;
        *(_OWORD *)(v27 + 8) = 0u;
        *(_OWORD *)(v27 + 24) = 0u;
        *(_DWORD *)(v27 + 40) = 0;
        v28 = *(_QWORD *)(v6 + 112);
        v29 = *(int *)(v6 + 120);
        *(_DWORD *)(v6 + 120) = v29 + 1;
        *(_QWORD *)(v28 + 8 * v29) = v27;
      }
      else
      {
        v26 = *(_QWORD *)(v6 + 112);
        *(_DWORD *)(v6 + 120) = v25 + 1;
        v27 = *(_QWORD *)(v26 + 8 * v25);
      }
      v30 = sub_18D23A764(v16, v9, v10, v11, v12, v13, v14, v15);
      if (v30 >= 0x24)
LABEL_146:
        __assert_rtn("set_type", "CoreNavigationCLPRavenOutput.pb.h", 4707, "::CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount_MeasurementType_IsValid(value)");
      v31 = *(_DWORD *)(v27 + 40);
      *(_DWORD *)(v27 + 32) = v30;
      *(_DWORD *)(v27 + 40) = v31 | 0xC;
      *(_QWORD *)(v27 + 24) = v23;
    }
    ++v16;
  }
  while (v16 != 33);
  for (i = 0; i != 33; ++i)
  {
    v33 = *((unsigned int *)this + i + 100);
    if ((_DWORD)v33)
    {
      v34 = *(_DWORD *)(v6 + 148);
      v35 = *(int *)(v6 + 144);
      if ((int)v35 >= v34)
      {
        if (v34 == *(_DWORD *)(v6 + 152))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 136));
          v34 = *(_DWORD *)(v6 + 148);
        }
        *(_DWORD *)(v6 + 148) = v34 + 1;
        v37 = operator new();
        *(_QWORD *)v37 = &off_1E25BFCC8;
        *(_OWORD *)(v37 + 8) = 0u;
        *(_OWORD *)(v37 + 24) = 0u;
        *(_DWORD *)(v37 + 40) = 0;
        v38 = *(_QWORD *)(v6 + 136);
        v39 = *(int *)(v6 + 144);
        *(_DWORD *)(v6 + 144) = v39 + 1;
        *(_QWORD *)(v38 + 8 * v39) = v37;
      }
      else
      {
        v36 = *(_QWORD *)(v6 + 136);
        *(_DWORD *)(v6 + 144) = v35 + 1;
        v37 = *(_QWORD *)(v36 + 8 * v35);
      }
      v40 = sub_18D23A764(i, v9, v10, v11, v12, v13, v14, v15);
      if (v40 >= 0x24)
        goto LABEL_146;
      v41 = *(_DWORD *)(v37 + 40);
      *(_DWORD *)(v37 + 32) = v40;
      *(_DWORD *)(v37 + 40) = v41 | 0xC;
      *(_QWORD *)(v37 + 24) = v33;
    }
  }
  for (j = 0; j != 33; ++j)
  {
    v43 = *((unsigned int *)this + j + 133);
    if ((_DWORD)v43)
    {
      v44 = *(_DWORD *)(v6 + 204);
      v45 = *(int *)(v6 + 200);
      if ((int)v45 >= v44)
      {
        if (v44 == *(_DWORD *)(v6 + 208))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 192));
          v44 = *(_DWORD *)(v6 + 204);
        }
        *(_DWORD *)(v6 + 204) = v44 + 1;
        v47 = operator new();
        *(_QWORD *)v47 = &off_1E25BFCC8;
        *(_OWORD *)(v47 + 8) = 0u;
        *(_OWORD *)(v47 + 24) = 0u;
        *(_DWORD *)(v47 + 40) = 0;
        v48 = *(_QWORD *)(v6 + 192);
        v49 = *(int *)(v6 + 200);
        *(_DWORD *)(v6 + 200) = v49 + 1;
        *(_QWORD *)(v48 + 8 * v49) = v47;
      }
      else
      {
        v46 = *(_QWORD *)(v6 + 192);
        *(_DWORD *)(v6 + 200) = v45 + 1;
        v47 = *(_QWORD *)(v46 + 8 * v45);
      }
      v50 = sub_18D23A764(j, v9, v10, v11, v12, v13, v14, v15);
      if (v50 >= 0x24)
        goto LABEL_146;
      v51 = *(_DWORD *)(v47 + 40);
      *(_DWORD *)(v47 + 32) = v50;
      *(_DWORD *)(v47 + 40) = v51 | 0xC;
      *(_QWORD *)(v47 + 24) = v43;
    }
  }
  for (k = 0; k != 33; ++k)
  {
    v53 = *((unsigned int *)this + k + 166);
    if ((_DWORD)v53)
    {
      v54 = *(_DWORD *)(v6 + 228);
      v55 = *(int *)(v6 + 224);
      if ((int)v55 >= v54)
      {
        if (v54 == *(_DWORD *)(v6 + 232))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 216));
          v54 = *(_DWORD *)(v6 + 228);
        }
        *(_DWORD *)(v6 + 228) = v54 + 1;
        v57 = operator new();
        *(_QWORD *)v57 = &off_1E25BFCC8;
        *(_OWORD *)(v57 + 8) = 0u;
        *(_OWORD *)(v57 + 24) = 0u;
        *(_DWORD *)(v57 + 40) = 0;
        v58 = *(_QWORD *)(v6 + 216);
        v59 = *(int *)(v6 + 224);
        *(_DWORD *)(v6 + 224) = v59 + 1;
        *(_QWORD *)(v58 + 8 * v59) = v57;
      }
      else
      {
        v56 = *(_QWORD *)(v6 + 216);
        *(_DWORD *)(v6 + 224) = v55 + 1;
        v57 = *(_QWORD *)(v56 + 8 * v55);
      }
      v60 = sub_18D23A764(k, v9, v10, v11, v12, v13, v14, v15);
      if (v60 >= 0x24)
        goto LABEL_146;
      v61 = *(_DWORD *)(v57 + 40);
      *(_DWORD *)(v57 + 32) = v60;
      *(_DWORD *)(v57 + 40) = v61 | 0xC;
      *(_QWORD *)(v57 + 24) = v53;
    }
  }
  for (m = 0; m != 33; ++m)
  {
    v63 = *((unsigned int *)this + m + 199);
    if ((_DWORD)v63)
    {
      v64 = *(_DWORD *)(v6 + 252);
      v65 = *(int *)(v6 + 248);
      if ((int)v65 >= v64)
      {
        if (v64 == *(_DWORD *)(v6 + 256))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 240));
          v64 = *(_DWORD *)(v6 + 252);
        }
        *(_DWORD *)(v6 + 252) = v64 + 1;
        v67 = operator new();
        *(_QWORD *)v67 = &off_1E25BFCC8;
        *(_OWORD *)(v67 + 8) = 0u;
        *(_OWORD *)(v67 + 24) = 0u;
        *(_DWORD *)(v67 + 40) = 0;
        v68 = *(_QWORD *)(v6 + 240);
        v69 = *(int *)(v6 + 248);
        *(_DWORD *)(v6 + 248) = v69 + 1;
        *(_QWORD *)(v68 + 8 * v69) = v67;
      }
      else
      {
        v66 = *(_QWORD *)(v6 + 240);
        *(_DWORD *)(v6 + 248) = v65 + 1;
        v67 = *(_QWORD *)(v66 + 8 * v65);
      }
      v70 = sub_18D23A764(m, v9, v10, v11, v12, v13, v14, v15);
      if (v70 >= 0x24)
        goto LABEL_146;
      v71 = *(_DWORD *)(v67 + 40);
      *(_DWORD *)(v67 + 32) = v70;
      *(_DWORD *)(v67 + 40) = v71 | 0xC;
      *(_QWORD *)(v67 + 24) = v63;
    }
  }
  for (n = 0; n != 33; ++n)
  {
    v73 = *((unsigned int *)this + n + 232);
    if ((_DWORD)v73)
    {
      v74 = *(int *)(v6 + 272);
      v75 = *(_DWORD *)(v6 + 276);
      if ((int)v74 >= v75)
      {
        if (v75 == *(_DWORD *)(v6 + 280))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 264));
          v75 = *(_DWORD *)(v6 + 276);
        }
        *(_DWORD *)(v6 + 276) = v75 + 1;
        v77 = operator new();
        *(_QWORD *)v77 = &off_1E25BFCC8;
        *(_OWORD *)(v77 + 8) = 0u;
        *(_OWORD *)(v77 + 24) = 0u;
        *(_DWORD *)(v77 + 40) = 0;
        v78 = *(_QWORD *)(v6 + 264);
        v79 = *(int *)(v6 + 272);
        *(_DWORD *)(v6 + 272) = v79 + 1;
        *(_QWORD *)(v78 + 8 * v79) = v77;
      }
      else
      {
        v76 = *(_QWORD *)(v6 + 264);
        *(_DWORD *)(v6 + 272) = v74 + 1;
        v77 = *(_QWORD *)(v76 + 8 * v74);
      }
      v80 = sub_18D23A764(n, v9, v10, v11, v12, v13, v14, v15);
      if (v80 >= 0x24)
        goto LABEL_146;
      v81 = *(_DWORD *)(v77 + 40);
      *(_DWORD *)(v77 + 32) = v80;
      *(_DWORD *)(v77 + 40) = v81 | 0xC;
      *(_QWORD *)(v77 + 24) = v73;
    }
  }
  v82 = *((_QWORD *)this + 133);
  v83 = *(_DWORD *)(v7 + 168);
  *(_DWORD *)(v7 + 168) = v83 | 0x400;
  *(_QWORD *)(v7 + 136) = v82;
  v84 = *((_DWORD *)this + 270);
  *(_DWORD *)(v7 + 168) = v83 | 0x1400;
  *(_DWORD *)(v7 + 60) = v84;
  *(_DWORD *)(v7 + 160) = *((_DWORD *)this + 271);
  v85 = *((_QWORD *)this + 136);
  *(_DWORD *)(v7 + 168) = v83 | 0x7400;
  *(_QWORD *)(v7 + 152) = v85;
  *((_DWORD *)v133 + 15) |= 4u;
  v86 = *((_QWORD *)v133 + 3);
  if (v86)
  {
    v87 = (_DWORD *)(v86 + 92);
    v88 = *(_QWORD *)(v86 + 8);
    v89 = (double *)((char *)this + 1168);
    *(_DWORD *)(v86 + 92) |= 1u;
    if (v88)
      goto LABEL_81;
  }
  else
  {
    v86 = operator new();
    *(_QWORD *)v86 = &off_1E25BF9F8;
    *(_QWORD *)(v86 + 88) = 0;
    *(_OWORD *)(v86 + 8) = 0u;
    *(_OWORD *)(v86 + 24) = 0u;
    *(_OWORD *)(v86 + 40) = 0u;
    *(_OWORD *)(v86 + 56) = 0u;
    *(_OWORD *)(v86 + 72) = 0u;
    *((_QWORD *)v133 + 3) = v86;
    v89 = (double *)((char *)this + 1168);
    v87 = (_DWORD *)(v86 + 92);
    *(_DWORD *)(v86 + 92) |= 1u;
  }
  v88 = operator new();
  *(_QWORD *)v88 = &off_1E25C0010;
  *(_OWORD *)(v88 + 8) = 0u;
  *(_OWORD *)(v88 + 24) = 0u;
  *(_OWORD *)(v88 + 40) = 0u;
  *(_QWORD *)(v86 + 8) = v88;
LABEL_81:
  sub_18D23A54C(v89, v88);
  if (*((_BYTE *)this + 1264))
  {
    *v87 |= 2u;
    v90 = *(_QWORD *)(v86 + 16);
    if (!v90)
    {
      v90 = operator new();
      *(_QWORD *)v90 = &off_1E25BF7A0;
      *(_OWORD *)(v90 + 8) = 0u;
      *(_OWORD *)(v90 + 24) = 0u;
      *(_OWORD *)(v90 + 40) = 0u;
      *(_OWORD *)(v90 + 56) = 0u;
      *(_OWORD *)(v90 + 72) = 0u;
      *(_QWORD *)(v90 + 88) = 0;
      *(_QWORD *)(v86 + 16) = v90;
    }
    v91 = *(_DWORD *)(v90 + 92);
    *(_OWORD *)(v90 + 16) = *(_OWORD *)((char *)this + 1272);
    *(_OWORD *)(v90 + 32) = *(_OWORD *)((char *)this + 1288);
    *(_OWORD *)(v90 + 48) = *(_OWORD *)((char *)this + 1304);
    *(_OWORD *)(v90 + 64) = *(_OWORD *)((char *)this + 1320);
    v92 = *((_QWORD *)this + 167);
    *(_DWORD *)(v90 + 92) = v91 | 0x3FE;
    *(_QWORD *)(v90 + 80) = v92;
  }
  if (*((_BYTE *)this + 1344))
  {
    *v87 |= 4u;
    v93 = *(_QWORD *)(v86 + 24);
    if (!v93)
    {
      v93 = operator new();
      *(_QWORD *)v93 = &off_1E25BF818;
      *(_OWORD *)(v93 + 8) = 0u;
      *(_OWORD *)(v93 + 24) = 0u;
      *(_OWORD *)(v93 + 40) = 0u;
      *(_OWORD *)(v93 + 56) = 0u;
      *(_OWORD *)(v93 + 72) = 0u;
      *(_OWORD *)(v93 + 88) = 0u;
      *(_OWORD *)(v93 + 104) = 0u;
      *(_OWORD *)(v93 + 120) = 0u;
      *(_QWORD *)(v86 + 24) = v93;
    }
    v94 = *(_DWORD *)(v93 + 132);
    *(_QWORD *)(v93 + 16) = *((_QWORD *)this + 169);
    v95 = *((_QWORD *)this + 173);
    *(_DWORD *)(v93 + 132) = v94 | 0x22;
    *(_QWORD *)(v93 + 48) = v95;
  }
  if (*((_BYTE *)this + 1345))
  {
    *v87 |= 4u;
    v96 = *(_QWORD *)(v86 + 24);
    if (!v96)
    {
      v96 = operator new();
      *(_QWORD *)v96 = &off_1E25BF818;
      *(_OWORD *)(v96 + 8) = 0u;
      *(_OWORD *)(v96 + 24) = 0u;
      *(_OWORD *)(v96 + 40) = 0u;
      *(_OWORD *)(v96 + 56) = 0u;
      *(_OWORD *)(v96 + 72) = 0u;
      *(_OWORD *)(v96 + 88) = 0u;
      *(_OWORD *)(v96 + 104) = 0u;
      *(_OWORD *)(v96 + 120) = 0u;
      *(_QWORD *)(v86 + 24) = v96;
    }
    v97 = *(_DWORD *)(v96 + 132);
    *(_OWORD *)(v96 + 24) = *((_OWORD *)this + 85);
    *(_QWORD *)(v96 + 40) = *((_QWORD *)this + 172);
    *(_OWORD *)(v96 + 80) = *(_OWORD *)((char *)this + 1416);
    *(_OWORD *)(v96 + 96) = *(_OWORD *)((char *)this + 1432);
    *(_DWORD *)(v96 + 132) = v97 | 0x7E1C;
    *(_OWORD *)(v96 + 112) = *(_OWORD *)((char *)this + 1448);
    if (*((_BYTE *)this + 1344) && *((_BYTE *)this + 1345))
    {
      *v87 |= 4u;
      v98 = *(_DWORD *)(v96 + 132);
      *(_OWORD *)(v96 + 56) = *((_OWORD *)this + 87);
      v99 = *((_QWORD *)this + 176);
      *(_DWORD *)(v96 + 132) = v98 | 0x1C0;
      *(_QWORD *)(v96 + 72) = v99;
    }
  }
  if (*((_BYTE *)this + 1464))
  {
    *v87 |= 8u;
    v100 = *(_QWORD *)(v86 + 32);
    if (!v100)
    {
      v100 = operator new();
      *(_QWORD *)v100 = &off_1E25BF908;
      *(_OWORD *)(v100 + 8) = 0u;
      *(_OWORD *)(v100 + 24) = 0u;
      *(_OWORD *)(v100 + 40) = 0u;
      *(_OWORD *)(v100 + 56) = 0u;
      *(_OWORD *)(v100 + 72) = 0u;
      *(_QWORD *)(v100 + 88) = 0;
      *(_QWORD *)(v86 + 32) = v100;
    }
    v101 = *(_DWORD *)(v100 + 92);
    *(_OWORD *)(v100 + 16) = *((_OWORD *)this + 92);
    *(_OWORD *)(v100 + 32) = *((_OWORD *)this + 93);
    *(_OWORD *)(v100 + 48) = *((_OWORD *)this + 94);
    *(_OWORD *)(v100 + 64) = *((_OWORD *)this + 95);
    v102 = *((_QWORD *)this + 192);
    *(_DWORD *)(v100 + 92) = v101 | 0x3FE;
    *(_QWORD *)(v100 + 80) = v102;
  }
  if (*((_BYTE *)this + 1544))
  {
    *v87 |= 0x10u;
    v103 = *(_QWORD *)(v86 + 40);
    if (!v103)
    {
      v103 = operator new();
      *(_QWORD *)v103 = &off_1E25BF980;
      *(_OWORD *)(v103 + 8) = 0u;
      *(_OWORD *)(v103 + 24) = 0u;
      *(_OWORD *)(v103 + 40) = 0u;
      *(_OWORD *)(v103 + 56) = 0u;
      *(_OWORD *)(v103 + 72) = 0u;
      *(_QWORD *)(v103 + 88) = 0;
      *(_QWORD *)(v86 + 40) = v103;
    }
    v104 = *(_DWORD *)(v103 + 92);
    *(_OWORD *)(v103 + 16) = *((_OWORD *)this + 97);
    *(_OWORD *)(v103 + 32) = *((_OWORD *)this + 98);
    *(_OWORD *)(v103 + 48) = *((_OWORD *)this + 99);
    *(_OWORD *)(v103 + 64) = *((_OWORD *)this + 100);
    v105 = *((_QWORD *)this + 202);
    *(_DWORD *)(v103 + 92) = v104 | 0x3FE;
    *(_QWORD *)(v103 + 80) = v105;
  }
  if (*((_BYTE *)this + 1624))
  {
    *v87 |= 0x20u;
    v106 = *(_QWORD *)(v86 + 48);
    if (!v106)
    {
      v106 = operator new();
      *(_QWORD *)v106 = &off_1E25BF890;
      *(_OWORD *)(v106 + 8) = 0u;
      *(_OWORD *)(v106 + 24) = 0u;
      *(_OWORD *)(v106 + 40) = 0u;
      *(_OWORD *)(v106 + 56) = 0u;
      *(_OWORD *)(v106 + 72) = 0u;
      *(_OWORD *)(v106 + 88) = 0u;
      *(_OWORD *)(v106 + 104) = 0u;
      *(_OWORD *)(v106 + 120) = 0u;
      *(_QWORD *)(v86 + 48) = v106;
    }
    v107 = *(_DWORD *)(v106 + 132);
    *(_OWORD *)(v106 + 16) = *((_OWORD *)this + 102);
    *(_OWORD *)(v106 + 32) = *((_OWORD *)this + 103);
    *(_OWORD *)(v106 + 48) = *((_OWORD *)this + 104);
    *(_OWORD *)(v106 + 64) = *((_OWORD *)this + 105);
    *(_OWORD *)(v106 + 80) = *((_OWORD *)this + 106);
    *(_OWORD *)(v106 + 96) = *((_OWORD *)this + 107);
    *(_DWORD *)(v106 + 132) = v107 | 0x7FFE;
    *(_OWORD *)(v106 + 112) = *((_OWORD *)this + 108);
  }
  if (*((_BYTE *)this + 1744))
  {
    *v87 |= 0x40u;
    v108 = *(_QWORD *)(v86 + 56);
    if (!v108)
    {
      v108 = operator new();
      *(_QWORD *)v108 = &off_1E25BFC50;
      *(_OWORD *)(v108 + 8) = 0u;
      *(_OWORD *)(v108 + 24) = 0u;
      *(_OWORD *)(v108 + 40) = 0u;
      *(_OWORD *)(v108 + 56) = 0u;
      *(_OWORD *)(v108 + 72) = 0u;
      *(_QWORD *)(v108 + 88) = 0;
      *(_QWORD *)(v86 + 56) = v108;
    }
    v109 = *(_DWORD *)(v108 + 92);
    *(_OWORD *)(v108 + 16) = *(_OWORD *)((char *)this + 1752);
    *(_OWORD *)(v108 + 32) = *(_OWORD *)((char *)this + 1768);
    *(_OWORD *)(v108 + 48) = *(_OWORD *)((char *)this + 1784);
    *(_OWORD *)(v108 + 64) = *(_OWORD *)((char *)this + 1800);
    v110 = *((_QWORD *)this + 227);
    *(_DWORD *)(v108 + 92) = v109 | 0x3FE;
    *(_QWORD *)(v108 + 80) = v110;
  }
  if (*((_BYTE *)this + 1824))
  {
    *v87 |= 0x80u;
    v111 = *(_QWORD *)(v86 + 64);
    if (!v111)
    {
      v111 = operator new();
      *(_QWORD *)v111 = &off_1E25BFD40;
      *(_OWORD *)(v111 + 8) = 0u;
      *(_OWORD *)(v111 + 24) = 0u;
      *(_OWORD *)(v111 + 40) = 0u;
      *(_OWORD *)(v111 + 56) = 0u;
      *(_OWORD *)(v111 + 72) = 0u;
      *(_QWORD *)(v111 + 88) = 0;
      *(_QWORD *)(v86 + 64) = v111;
    }
    v112 = *(_DWORD *)(v111 + 92);
    *(_OWORD *)(v111 + 16) = *(_OWORD *)((char *)this + 1832);
    *(_OWORD *)(v111 + 32) = *(_OWORD *)((char *)this + 1848);
    *(_OWORD *)(v111 + 48) = *(_OWORD *)((char *)this + 1864);
    *(_OWORD *)(v111 + 64) = *(_OWORD *)((char *)this + 1880);
    v113 = *((_QWORD *)this + 237);
    *(_DWORD *)(v111 + 92) = v112 | 0x3FE;
    *(_QWORD *)(v111 + 80) = v113;
  }
  if (*((_BYTE *)this + 1904))
  {
    *v87 |= 0x100u;
    v114 = *(_QWORD *)(v86 + 72);
    if (!v114)
    {
      v114 = operator new();
      *(_QWORD *)v114 = &off_1E25BFE30;
      *(_OWORD *)(v114 + 8) = 0u;
      *(_OWORD *)(v114 + 24) = 0u;
      *(_OWORD *)(v114 + 40) = 0u;
      *(_OWORD *)(v114 + 56) = 0u;
      *(_OWORD *)(v114 + 72) = 0u;
      *(_QWORD *)(v114 + 88) = 0;
      *(_QWORD *)(v86 + 72) = v114;
    }
    v115 = *(_DWORD *)(v114 + 92);
    *(_OWORD *)(v114 + 16) = *(_OWORD *)((char *)this + 1912);
    *(_OWORD *)(v114 + 32) = *(_OWORD *)((char *)this + 1928);
    *(_OWORD *)(v114 + 48) = *(_OWORD *)((char *)this + 1944);
    *(_OWORD *)(v114 + 64) = *(_OWORD *)((char *)this + 1960);
    v116 = *((_QWORD *)this + 247);
    *(_DWORD *)(v114 + 92) = v115 | 0x3FE;
    *(_QWORD *)(v114 + 80) = v116;
  }
  if (*((_BYTE *)this + 1984))
  {
    *v87 |= 0x200u;
    v117 = *(_QWORD *)(v86 + 80);
    if (!v117)
    {
      v117 = operator new();
      *(_QWORD *)v117 = &off_1E25BFEA8;
      *(_OWORD *)(v117 + 8) = 0u;
      *(_OWORD *)(v117 + 24) = 0u;
      *(_OWORD *)(v117 + 40) = 0u;
      *(_QWORD *)(v117 + 56) = 0;
      *(_QWORD *)(v86 + 80) = v117;
    }
    v118 = *(_DWORD *)(v117 + 60);
    *(_OWORD *)(v117 + 16) = *(_OWORD *)((char *)this + 1992);
    *(_OWORD *)(v117 + 32) = *(_OWORD *)((char *)this + 2008);
    v119 = *((_QWORD *)this + 253);
    *(_DWORD *)(v117 + 60) = v118 | 0x3E;
    *(_QWORD *)(v117 + 48) = v119;
  }
  *((_DWORD *)v133 + 15) |= 2u;
  v120 = *((_QWORD *)v133 + 2);
  if (v120)
  {
    v121 = (int *)(v120 + 228);
    v122 = *(_QWORD *)(v120 + 8);
    v123 = (double *)((char *)this + 2032);
    *(_DWORD *)(v120 + 228) |= 1u;
    if (v122)
      goto LABEL_128;
  }
  else
  {
    v120 = operator new();
    *(_QWORD *)v120 = &off_1E25BFAE8;
    *(_OWORD *)(v120 + 216) = 0u;
    *(_OWORD *)(v120 + 8) = 0u;
    *(_OWORD *)(v120 + 24) = 0u;
    *(_OWORD *)(v120 + 40) = 0u;
    *(_OWORD *)(v120 + 56) = 0u;
    *(_OWORD *)(v120 + 72) = 0u;
    *(_OWORD *)(v120 + 88) = 0u;
    *(_OWORD *)(v120 + 104) = 0u;
    *(_OWORD *)(v120 + 120) = 0u;
    *(_OWORD *)(v120 + 136) = 0u;
    *(_OWORD *)(v120 + 152) = 0u;
    *(_OWORD *)(v120 + 168) = 0u;
    *(_OWORD *)(v120 + 184) = 0u;
    *(_OWORD *)(v120 + 200) = 0u;
    *((_QWORD *)v133 + 2) = v120;
    v123 = (double *)((char *)this + 2032);
    v121 = (int *)(v120 + 228);
    *(_DWORD *)(v120 + 228) |= 1u;
  }
  v122 = operator new();
  *(_QWORD *)v122 = &off_1E25C0010;
  *(_OWORD *)(v122 + 8) = 0u;
  *(_OWORD *)(v122 + 24) = 0u;
  *(_OWORD *)(v122 + 40) = 0u;
  *(_QWORD *)(v120 + 8) = v122;
LABEL_128:
  sub_18D23A54C(v123, v122);
  v124 = 0;
  if (*((unsigned __int8 *)this + 2128) - 1 < 9)
    v125 = (*((_BYTE *)this + 2128) - 1) + 1;
  else
    v125 = 0;
  v126 = *v121;
  *(_DWORD *)(v120 + 24) = v125;
  *(_OWORD *)(v120 + 56) = *(_OWORD *)((char *)this + 2136);
  *(_OWORD *)(v120 + 72) = *(_OWORD *)((char *)this + 2152);
  *(_OWORD *)(v120 + 88) = *(_OWORD *)((char *)this + 2168);
  *(_OWORD *)(v120 + 104) = *(_OWORD *)((char *)this + 2184);
  *v121 = v126 | 0x7FE02;
  *(_OWORD *)(v120 + 120) = *(_OWORD *)((char *)this + 2200);
  if (*((unsigned __int8 *)this + 2320) - 1 < 3)
    v127 = (*((_BYTE *)this + 2320) - 1) + 1;
  else
    v127 = 0;
  *(_DWORD *)(v120 + 28) = v127;
  *(_OWORD *)(v120 + 144) = *(_OWORD *)((char *)this + 2328);
  *(_OWORD *)(v120 + 160) = *(_OWORD *)((char *)this + 2344);
  if (*((unsigned __int8 *)this + 2360) - 1 < 3)
    v128 = (*((_BYTE *)this + 2360) - 1) + 1;
  else
    v128 = 0;
  *(_DWORD *)(v120 + 52) = v128;
  *(_OWORD *)(v120 + 176) = *((_OWORD *)this + 148);
  *(_OWORD *)(v120 + 192) = *((_OWORD *)this + 149);
  v129 = *((unsigned __int8 *)this + 2216) - 1;
  if (v129 <= 8)
    v124 = dword_18D331B4C[(char)v129];
  *(_DWORD *)(v120 + 48) = v124;
  v130 = *((unsigned __int8 *)this + 2400);
  if (v130 == 2)
    v131 = 2;
  else
    v131 = v130 == 1;
  *(_DWORD *)(v120 + 136) = v131;
  *(_OWORD *)(v120 + 208) = *(_OWORD *)((char *)this + 2408);
  if (*((unsigned __int8 *)this + 2424) - 1 >= 6)
    v132 = 1;
  else
    v132 = (*((_BYTE *)this + 2424) - 1) + 2;
  *v121 = v126 | 0x3FFFFFCA;
  *(_DWORD *)(v120 + 140) = v132;
}

void raven::ConvertProtobufToRavenSolutionEvent(raven *this, const CoreNavigation::CLP::LogEntry::Raven::RavenOutput *a2, raven::RavenSolutionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  char *v12;
  uint64_t v13;
  CoreNavigation::CLP::LogEntry::Raven *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int8x16_t v22;
  uint64_t v23;
  CoreNavigation::CLP::LogEntry::Raven *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  int8x16_t v32;
  uint64_t v33;

  v12 = (char *)a2 + 104;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 8);
  }
  raven::ConvertProtobufToRavenStatus((uint64_t)v12, v13, a9, a10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v23 = *((_QWORD *)this + 3);
  if (!v23)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v14);
    v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 24);
  }
  raven::ConvertProtobufToRavenSolution((uint64_t)a2 + 1168, v23, v21, v22, v15, v16, v17, v18, v19, v20);
  v33 = *((_QWORD *)this + 2);
  if (!v33)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v24);
    v33 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 16);
  }
  raven::ConvertProtobufToRavenActivity((uint64_t)a2 + 2032, v33, v31, v32, v25, v26, v27, v28, v29, v30);
}

void raven::ConvertProtobufToRavenStatus(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int v27;
  unint64_t v28;
  char v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106[3];
  uint64_t v107;
  int v108;
  void (**v109)(CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *__hidden);
  __int128 v110;
  __int128 v111;
  unsigned __int8 v112;
  __int16 v113;

  v109 = &off_1E25BDBF8;
  v12 = 0uLL;
  v110 = 0u;
  v111 = 0u;
  if ((*(_BYTE *)(a2 + 292) & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
    }
    if ((*(_BYTE *)(v13 + 52) & 2) != 0)
    {
      v14 = *(_QWORD *)(a2 + 8);
      if (!v14)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
      }
      v15 = *(_QWORD *)(v14 + 16);
      if (!v15)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      v16 = *(_QWORD *)(v15 + 8);
      v17 = *(_QWORD *)(a2 + 8);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
      }
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      a4.i64[0] = *(_QWORD *)(v18 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v16;
      HIDWORD(v111) |= 1u;
      *(double *)&v110 = *(double *)v12.i64;
    }
  }
  if ((*(_BYTE *)(a2 + 292) & 1) != 0)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
    }
    if ((*(_BYTE *)(v19 + 52) & 1) != 0)
    {
      v20 = *(_QWORD *)(a2 + 8);
      if (!v20)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
      }
      v21 = *(_QWORD *)(v20 + 8);
      if (!v21)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v21 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      v22 = *(_QWORD *)(v21 + 8);
      v23 = *(_QWORD *)(a2 + 8);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
      }
      v24 = *(_QWORD *)(v23 + 8);
      if (!v24)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      a4.i64[0] = *(_QWORD *)(v24 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v22;
      HIDWORD(v111) |= 4u;
      *(double *)&v111 = *(double *)v12.i64;
    }
  }
  raven::ConvertProtobufToRavenTime((uint64_t)&v109, a1 + 8, 1, a6, a7, a8, a9, a10, v12, a4);
  v27 = *(_DWORD *)(a2 + 292);
  if ((v27 & 2) != 0)
  {
    v28 = *(unsigned int *)(a2 + 16);
    if (v28 >= 7)
      v29 = 0;
    else
      v29 = 0x5040302010000uLL >> (8 * v28);
    *(_BYTE *)(a1 + 104) = v29;
  }
  if ((v27 & 4) != 0)
  {
    v30 = *(_DWORD *)(a2 + 20);
    if (v30 == 3)
      v31 = 2;
    else
      v31 = v30 == 2;
    *(_BYTE *)(a1 + 105) = v31;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 24);
  v25.i64[0] = *(_QWORD *)(a2 + 32);
  *(_OWORD *)v106 = 0uLL;
  CNTimeSpan::SetTimeSpan(v106, 0, v25, v26);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)v106;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 184);
  *(_WORD *)(a1 + 160) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 176);
  if (*(int *)(a2 + 120) >= 1)
  {
    v32 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(_QWORD *)(a2 + 112) + 8 * v32));
      v38 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v33, v34, v35, v36, v37, v105);
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v39, v40, v41, v42, v43, 33);
          goto LABEL_74;
        case 1:
          v38 = 1;
          goto LABEL_73;
        case 2:
          v38 = 2;
          goto LABEL_73;
        case 3:
          v38 = 3;
          goto LABEL_73;
        case 4:
          v38 = 4;
          goto LABEL_73;
        case 5:
          v38 = 6;
          goto LABEL_73;
        case 6:
          v38 = 8;
          goto LABEL_73;
        case 7:
          v38 = 12;
          goto LABEL_73;
        case 8:
          v38 = 27;
          goto LABEL_73;
        case 9:
          v38 = 14;
          goto LABEL_73;
        case 10:
          v38 = 18;
          goto LABEL_73;
        case 11:
          v38 = 17;
          goto LABEL_73;
        case 12:
          v38 = 15;
          goto LABEL_73;
        case 13:
          v38 = 19;
          goto LABEL_73;
        case 14:
          v38 = 21;
          goto LABEL_73;
        case 15:
          v38 = 22;
          goto LABEL_73;
        case 16:
          v38 = 23;
          goto LABEL_73;
        case 17:
          v38 = 24;
          goto LABEL_73;
        case 18:
          v38 = 25;
          goto LABEL_73;
        case 19:
          v38 = 28;
          goto LABEL_73;
        case 20:
          v38 = 29;
          goto LABEL_73;
        case 21:
          v38 = 10;
          goto LABEL_73;
        case 22:
          v38 = 26;
          goto LABEL_73;
        case 23:
          v38 = 16;
          goto LABEL_73;
        case 24:
          v38 = 11;
          goto LABEL_73;
        case 25:
          v38 = 13;
          goto LABEL_73;
        case 27:
          v38 = 9;
          goto LABEL_73;
        case 29:
          v38 = 5;
          goto LABEL_73;
        case 30:
          v38 = 7;
          goto LABEL_73;
        case 31:
          v38 = 32;
          goto LABEL_73;
        case 32:
          v38 = 31;
          goto LABEL_73;
        case 33:
          v38 = 30;
          goto LABEL_73;
        case 35:
          v38 = 20;
          goto LABEL_73;
        default:
LABEL_73:
          *(_DWORD *)(a1 + 164 + 4 * v38) = v107;
LABEL_74:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v32 >= *(int *)(a2 + 120))
            break;
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 144) >= 1)
  {
    v44 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(_QWORD *)(a2 + 136) + 8 * v44));
      v50 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v45, v46, v47, v48, v49, v105);
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v51, v52, v53, v54, v55, 33);
          goto LABEL_112;
        case 1:
          v50 = 1;
          goto LABEL_111;
        case 2:
          v50 = 2;
          goto LABEL_111;
        case 3:
          v50 = 3;
          goto LABEL_111;
        case 4:
          v50 = 4;
          goto LABEL_111;
        case 5:
          v50 = 6;
          goto LABEL_111;
        case 6:
          v50 = 8;
          goto LABEL_111;
        case 7:
          v50 = 12;
          goto LABEL_111;
        case 8:
          v50 = 27;
          goto LABEL_111;
        case 9:
          v50 = 14;
          goto LABEL_111;
        case 10:
          v50 = 18;
          goto LABEL_111;
        case 11:
          v50 = 17;
          goto LABEL_111;
        case 12:
          v50 = 15;
          goto LABEL_111;
        case 13:
          v50 = 19;
          goto LABEL_111;
        case 14:
          v50 = 21;
          goto LABEL_111;
        case 15:
          v50 = 22;
          goto LABEL_111;
        case 16:
          v50 = 23;
          goto LABEL_111;
        case 17:
          v50 = 24;
          goto LABEL_111;
        case 18:
          v50 = 25;
          goto LABEL_111;
        case 19:
          v50 = 28;
          goto LABEL_111;
        case 20:
          v50 = 29;
          goto LABEL_111;
        case 21:
          v50 = 10;
          goto LABEL_111;
        case 22:
          v50 = 26;
          goto LABEL_111;
        case 23:
          v50 = 16;
          goto LABEL_111;
        case 24:
          v50 = 11;
          goto LABEL_111;
        case 25:
          v50 = 13;
          goto LABEL_111;
        case 27:
          v50 = 9;
          goto LABEL_111;
        case 29:
          v50 = 5;
          goto LABEL_111;
        case 30:
          v50 = 7;
          goto LABEL_111;
        case 31:
          v50 = 32;
          goto LABEL_111;
        case 32:
          v50 = 31;
          goto LABEL_111;
        case 33:
          v50 = 30;
          goto LABEL_111;
        case 35:
          v50 = 20;
          goto LABEL_111;
        default:
LABEL_111:
          *(_DWORD *)(a1 + 296 + 4 * v50) = v107;
LABEL_112:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v44 >= *(int *)(a2 + 144))
            break;
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 200) >= 1)
  {
    v56 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(_QWORD *)(a2 + 192) + 8 * v56));
      v62 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v57, v58, v59, v60, v61, v105);
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v63, v64, v65, v66, v67, 33);
          goto LABEL_150;
        case 1:
          v62 = 1;
          goto LABEL_149;
        case 2:
          v62 = 2;
          goto LABEL_149;
        case 3:
          v62 = 3;
          goto LABEL_149;
        case 4:
          v62 = 4;
          goto LABEL_149;
        case 5:
          v62 = 6;
          goto LABEL_149;
        case 6:
          v62 = 8;
          goto LABEL_149;
        case 7:
          v62 = 12;
          goto LABEL_149;
        case 8:
          v62 = 27;
          goto LABEL_149;
        case 9:
          v62 = 14;
          goto LABEL_149;
        case 10:
          v62 = 18;
          goto LABEL_149;
        case 11:
          v62 = 17;
          goto LABEL_149;
        case 12:
          v62 = 15;
          goto LABEL_149;
        case 13:
          v62 = 19;
          goto LABEL_149;
        case 14:
          v62 = 21;
          goto LABEL_149;
        case 15:
          v62 = 22;
          goto LABEL_149;
        case 16:
          v62 = 23;
          goto LABEL_149;
        case 17:
          v62 = 24;
          goto LABEL_149;
        case 18:
          v62 = 25;
          goto LABEL_149;
        case 19:
          v62 = 28;
          goto LABEL_149;
        case 20:
          v62 = 29;
          goto LABEL_149;
        case 21:
          v62 = 10;
          goto LABEL_149;
        case 22:
          v62 = 26;
          goto LABEL_149;
        case 23:
          v62 = 16;
          goto LABEL_149;
        case 24:
          v62 = 11;
          goto LABEL_149;
        case 25:
          v62 = 13;
          goto LABEL_149;
        case 27:
          v62 = 9;
          goto LABEL_149;
        case 29:
          v62 = 5;
          goto LABEL_149;
        case 30:
          v62 = 7;
          goto LABEL_149;
        case 31:
          v62 = 32;
          goto LABEL_149;
        case 32:
          v62 = 31;
          goto LABEL_149;
        case 33:
          v62 = 30;
          goto LABEL_149;
        case 35:
          v62 = 20;
          goto LABEL_149;
        default:
LABEL_149:
          *(_DWORD *)(a1 + 428 + 4 * v62) = v107;
LABEL_150:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v56 >= *(int *)(a2 + 200))
            break;
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 224) >= 1)
  {
    v68 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(_QWORD *)(a2 + 216) + 8 * v68));
      v74 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v69, v70, v71, v72, v73, v105);
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v75, v76, v77, v78, v79, 33);
          goto LABEL_188;
        case 1:
          v74 = 1;
          goto LABEL_187;
        case 2:
          v74 = 2;
          goto LABEL_187;
        case 3:
          v74 = 3;
          goto LABEL_187;
        case 4:
          v74 = 4;
          goto LABEL_187;
        case 5:
          v74 = 6;
          goto LABEL_187;
        case 6:
          v74 = 8;
          goto LABEL_187;
        case 7:
          v74 = 12;
          goto LABEL_187;
        case 8:
          v74 = 27;
          goto LABEL_187;
        case 9:
          v74 = 14;
          goto LABEL_187;
        case 10:
          v74 = 18;
          goto LABEL_187;
        case 11:
          v74 = 17;
          goto LABEL_187;
        case 12:
          v74 = 15;
          goto LABEL_187;
        case 13:
          v74 = 19;
          goto LABEL_187;
        case 14:
          v74 = 21;
          goto LABEL_187;
        case 15:
          v74 = 22;
          goto LABEL_187;
        case 16:
          v74 = 23;
          goto LABEL_187;
        case 17:
          v74 = 24;
          goto LABEL_187;
        case 18:
          v74 = 25;
          goto LABEL_187;
        case 19:
          v74 = 28;
          goto LABEL_187;
        case 20:
          v74 = 29;
          goto LABEL_187;
        case 21:
          v74 = 10;
          goto LABEL_187;
        case 22:
          v74 = 26;
          goto LABEL_187;
        case 23:
          v74 = 16;
          goto LABEL_187;
        case 24:
          v74 = 11;
          goto LABEL_187;
        case 25:
          v74 = 13;
          goto LABEL_187;
        case 27:
          v74 = 9;
          goto LABEL_187;
        case 29:
          v74 = 5;
          goto LABEL_187;
        case 30:
          v74 = 7;
          goto LABEL_187;
        case 31:
          v74 = 32;
          goto LABEL_187;
        case 32:
          v74 = 31;
          goto LABEL_187;
        case 33:
          v74 = 30;
          goto LABEL_187;
        case 35:
          v74 = 20;
          goto LABEL_187;
        default:
LABEL_187:
          *(_DWORD *)(a1 + 560 + 4 * v74) = v107;
LABEL_188:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v68 >= *(int *)(a2 + 224))
            break;
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 248) >= 1)
  {
    v80 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(_QWORD *)(a2 + 240) + 8 * v80));
      v86 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v81, v82, v83, v84, v85, v105);
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v87, v88, v89, v90, v91, 33);
          goto LABEL_226;
        case 1:
          v86 = 1;
          goto LABEL_225;
        case 2:
          v86 = 2;
          goto LABEL_225;
        case 3:
          v86 = 3;
          goto LABEL_225;
        case 4:
          v86 = 4;
          goto LABEL_225;
        case 5:
          v86 = 6;
          goto LABEL_225;
        case 6:
          v86 = 8;
          goto LABEL_225;
        case 7:
          v86 = 12;
          goto LABEL_225;
        case 8:
          v86 = 27;
          goto LABEL_225;
        case 9:
          v86 = 14;
          goto LABEL_225;
        case 10:
          v86 = 18;
          goto LABEL_225;
        case 11:
          v86 = 17;
          goto LABEL_225;
        case 12:
          v86 = 15;
          goto LABEL_225;
        case 13:
          v86 = 19;
          goto LABEL_225;
        case 14:
          v86 = 21;
          goto LABEL_225;
        case 15:
          v86 = 22;
          goto LABEL_225;
        case 16:
          v86 = 23;
          goto LABEL_225;
        case 17:
          v86 = 24;
          goto LABEL_225;
        case 18:
          v86 = 25;
          goto LABEL_225;
        case 19:
          v86 = 28;
          goto LABEL_225;
        case 20:
          v86 = 29;
          goto LABEL_225;
        case 21:
          v86 = 10;
          goto LABEL_225;
        case 22:
          v86 = 26;
          goto LABEL_225;
        case 23:
          v86 = 16;
          goto LABEL_225;
        case 24:
          v86 = 11;
          goto LABEL_225;
        case 25:
          v86 = 13;
          goto LABEL_225;
        case 27:
          v86 = 9;
          goto LABEL_225;
        case 29:
          v86 = 5;
          goto LABEL_225;
        case 30:
          v86 = 7;
          goto LABEL_225;
        case 31:
          v86 = 32;
          goto LABEL_225;
        case 32:
          v86 = 31;
          goto LABEL_225;
        case 33:
          v86 = 30;
          goto LABEL_225;
        case 35:
          v86 = 20;
          goto LABEL_225;
        default:
LABEL_225:
          *(_DWORD *)(a1 + 692 + 4 * v86) = v107;
LABEL_226:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v80 >= *(int *)(a2 + 248))
            break;
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 272) >= 1)
  {
    v92 = 0;
    v93 = a1 + 824;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(_QWORD *)(a2 + 264) + 8 * v92));
      v99 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v94, v95, v96, v97, v98, v105);
          v113 = 12;
          v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v100, v101, v102, v103, v104, 33);
          goto LABEL_264;
        case 1:
          v99 = 1;
          goto LABEL_263;
        case 2:
          v99 = 2;
          goto LABEL_263;
        case 3:
          v99 = 3;
          goto LABEL_263;
        case 4:
          v99 = 4;
          goto LABEL_263;
        case 5:
          v99 = 6;
          goto LABEL_263;
        case 6:
          v99 = 8;
          goto LABEL_263;
        case 7:
          v99 = 12;
          goto LABEL_263;
        case 8:
          v99 = 27;
          goto LABEL_263;
        case 9:
          v99 = 14;
          goto LABEL_263;
        case 10:
          v99 = 18;
          goto LABEL_263;
        case 11:
          v99 = 17;
          goto LABEL_263;
        case 12:
          v99 = 15;
          goto LABEL_263;
        case 13:
          v99 = 19;
          goto LABEL_263;
        case 14:
          v99 = 21;
          goto LABEL_263;
        case 15:
          v99 = 22;
          goto LABEL_263;
        case 16:
          v99 = 23;
          goto LABEL_263;
        case 17:
          v99 = 24;
          goto LABEL_263;
        case 18:
          v99 = 25;
          goto LABEL_263;
        case 19:
          v99 = 28;
          goto LABEL_263;
        case 20:
          v99 = 29;
          goto LABEL_263;
        case 21:
          v99 = 10;
          goto LABEL_263;
        case 22:
          v99 = 26;
          goto LABEL_263;
        case 23:
          v99 = 16;
          goto LABEL_263;
        case 24:
          v99 = 11;
          goto LABEL_263;
        case 25:
          v99 = 13;
          goto LABEL_263;
        case 27:
          v99 = 9;
          goto LABEL_263;
        case 29:
          v99 = 5;
          goto LABEL_263;
        case 30:
          v99 = 7;
          goto LABEL_263;
        case 31:
          v99 = 32;
          goto LABEL_263;
        case 32:
          v99 = 31;
          goto LABEL_263;
        case 33:
          v99 = 30;
          goto LABEL_263;
        case 35:
          v99 = 20;
          goto LABEL_263;
        default:
LABEL_263:
          *(_DWORD *)(v93 + 4 * v99) = v107;
LABEL_264:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v92 >= *(int *)(a2 + 272))
            break;
          continue;
      }
      break;
    }
  }
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)&v109);
}

void sub_18D238C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)va);
  _Unwind_Resume(a1);
}

void raven::ConvertProtobufToRavenSolution(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CoreNavigation::CLP::LogEntry::Raven *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)(CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *__hidden);
  __int128 v38;
  __int128 v39;

  v37 = &off_1E25BDBF8;
  v12 = 0uLL;
  v38 = 0u;
  v39 = 0u;
  if ((*(_BYTE *)(a2 + 92) & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
    }
    if ((*(_BYTE *)(v13 + 52) & 2) != 0)
    {
      v14 = *(_QWORD *)(a2 + 8);
      if (!v14)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
      }
      v15 = *(_QWORD *)(v14 + 16);
      if (!v15)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      v16 = *(_QWORD *)(v15 + 8);
      v17 = *(_QWORD *)(a2 + 8);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
      }
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      a4.i64[0] = *(_QWORD *)(v18 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v16;
      HIDWORD(v39) |= 1u;
      *(double *)&v38 = *(double *)v12.i64;
    }
  }
  if ((*(_BYTE *)(a2 + 92) & 1) != 0)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
    }
    if ((*(_BYTE *)(v19 + 52) & 1) != 0)
    {
      v20 = *(_QWORD *)(a2 + 8);
      if (!v20)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
      }
      v21 = *(_QWORD *)(v20 + 8);
      if (!v21)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v21 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      v22 = *(_QWORD *)(v21 + 8);
      v23 = *(_QWORD *)(a2 + 8);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
      }
      v24 = *(_QWORD *)(v23 + 8);
      if (!v24)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      a4.i64[0] = *(_QWORD *)(v24 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v22;
      HIDWORD(v39) |= 4u;
      *(double *)&v39 = *(double *)v12.i64;
    }
  }
  v25 = (CoreNavigation::CLP::LogEntry::Raven *)raven::ConvertProtobufToRavenTime((uint64_t)&v37, a1, 1, a6, a7, a8, a9, a10, v12, a4);
  v26 = *(_DWORD *)(a2 + 92);
  if ((v26 & 2) != 0)
  {
    v27 = *(_QWORD *)(a2 + 16);
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v27 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 16);
      v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v27 + 16);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v27 + 64);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(v27 + 80);
    *(_BYTE *)(a1 + 96) = 1;
  }
  if ((v26 & 4) != 0)
  {
    v28 = *(_QWORD *)(a2 + 24);
    if (!v28)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v28 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 24);
      v26 = *(_DWORD *)(a2 + 92);
    }
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(v28 + 48);
    *(_WORD *)(a1 + 176) = 257;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(v28 + 56);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(v28 + 72);
  }
  if ((v26 & 8) != 0)
  {
    v29 = *(_QWORD *)(a2 + 32);
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 32);
      v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(v29 + 16);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(v29 + 48);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(v29 + 64);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(v29 + 80);
    *(_BYTE *)(a1 + 296) = 1;
  }
  if ((v26 & 0x10) != 0)
  {
    v30 = *(_QWORD *)(a2 + 40);
    if (!v30)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v30 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 40);
      v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(v30 + 16);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v30 + 32);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(v30 + 48);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v30 + 64);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(v30 + 80);
    *(_BYTE *)(a1 + 376) = 1;
  }
  if ((v26 & 0x20) != 0)
  {
    v31 = *(_QWORD *)(a2 + 48);
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v31 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 48);
      v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(v31 + 16);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(v31 + 32);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(v31 + 64);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(v31 + 80);
    v32 = *(_QWORD *)(v31 + 120);
    *(_QWORD *)(a1 + 544) = v32;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(v31 + 104);
    *(_QWORD *)(a1 + 568) = v32;
    *(_BYTE *)(a1 + 456) = 1;
  }
  if ((v26 & 0x40) != 0)
  {
    v33 = *(_QWORD *)(a2 + 56);
    if (!v33)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v33 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 56);
      v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(v33 + 16);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(v33 + 32);
    *(_OWORD *)(a1 + 616) = *(_OWORD *)(v33 + 48);
    *(_OWORD *)(a1 + 632) = *(_OWORD *)(v33 + 64);
    *(_QWORD *)(a1 + 648) = *(_QWORD *)(v33 + 80);
    *(_BYTE *)(a1 + 576) = 1;
  }
  if ((v26 & 0x80) != 0)
  {
    v34 = *(_QWORD *)(a2 + 64);
    if (!v34)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v34 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 64);
      v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 664) = *(_OWORD *)(v34 + 16);
    *(_OWORD *)(a1 + 680) = *(_OWORD *)(v34 + 32);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(v34 + 48);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(v34 + 64);
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(v34 + 80);
    *(_BYTE *)(a1 + 656) = 1;
  }
  if ((v26 & 0x100) != 0)
  {
    v35 = *(_QWORD *)(a2 + 72);
    if (!v35)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v35 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 72);
      v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 744) = *(_OWORD *)(v35 + 16);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(v35 + 32);
    *(_OWORD *)(a1 + 776) = *(_OWORD *)(v35 + 48);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(v35 + 64);
    *(_QWORD *)(a1 + 808) = *(_QWORD *)(v35 + 80);
    *(_BYTE *)(a1 + 736) = 1;
  }
  if ((v26 & 0x200) != 0)
  {
    v36 = *(_QWORD *)(a2 + 80);
    if (!v36)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      v36 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 80);
    }
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(v36 + 16);
    *(_OWORD *)(a1 + 840) = *(_OWORD *)(v36 + 32);
    *(_QWORD *)(a1 + 856) = *(_QWORD *)(v36 + 48);
    *(_BYTE *)(a1 + 816) = 1;
  }
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)&v37);
}

void sub_18D239198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)va);
  _Unwind_Resume(a1);
}

void raven::ConvertProtobufToRavenActivity(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  char v32;
  int v33;
  char v34;
  void (**v35)(CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *__hidden);
  __int128 v36;
  __int128 v37;

  v35 = &off_1E25BDBF8;
  v12 = 0uLL;
  v36 = 0u;
  v37 = 0u;
  if ((*(_BYTE *)(a2 + 228) & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
    }
    if ((*(_BYTE *)(v13 + 52) & 2) != 0)
    {
      v14 = *(_QWORD *)(a2 + 8);
      if (!v14)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
      }
      v15 = *(_QWORD *)(v14 + 16);
      if (!v15)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      v16 = *(_QWORD *)(v15 + 8);
      v17 = *(_QWORD *)(a2 + 8);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
      }
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      a4.i64[0] = *(_QWORD *)(v18 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v16;
      HIDWORD(v37) |= 1u;
      *(double *)&v36 = *(double *)v12.i64;
    }
  }
  if ((*(_BYTE *)(a2 + 228) & 1) != 0)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
    }
    if ((*(_BYTE *)(v19 + 52) & 1) != 0)
    {
      v20 = *(_QWORD *)(a2 + 8);
      if (!v20)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
      }
      v21 = *(_QWORD *)(v20 + 8);
      if (!v21)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v21 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      v22 = *(_QWORD *)(v21 + 8);
      v23 = *(_QWORD *)(a2 + 8);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
      }
      v24 = *(_QWORD *)(v23 + 8);
      if (!v24)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      a4.i64[0] = *(_QWORD *)(v24 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v22;
      HIDWORD(v37) |= 4u;
      *(double *)&v37 = *(double *)v12.i64;
    }
  }
  raven::ConvertProtobufToRavenTime((uint64_t)&v35, a1, 1, a6, a7, a8, a9, a10, v12, a4);
  v25 = *(_DWORD *)(a2 + 228);
  if ((v25 & 2) != 0)
  {
    v26 = *(_DWORD *)(a2 + 24);
    if ((v26 - 1) >= 9)
      LOBYTE(v26) = 0;
    *(_BYTE *)(a1 + 96) = v26;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 120);
  }
  if ((v25 & 8) != 0)
  {
    v29 = *(_DWORD *)(a2 + 28);
    if (v29 >= 4)
      LOBYTE(v29) = 0;
    *(_BYTE *)(a1 + 288) = v29;
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 160);
    if ((v25 & 0x80) == 0)
    {
LABEL_33:
      if ((v25 & 0x40) == 0)
        goto LABEL_34;
      goto LABEL_47;
    }
  }
  else if ((v25 & 0x80) == 0)
  {
    goto LABEL_33;
  }
  v30 = *(_DWORD *)(a2 + 52);
  if (v30 >= 4)
    LOBYTE(v30) = 0;
  *(_BYTE *)(a1 + 328) = v30;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 192);
  if ((v25 & 0x40) == 0)
  {
LABEL_34:
    if ((v25 & 0x100) == 0)
      goto LABEL_35;
    goto LABEL_51;
  }
LABEL_47:
  v31 = *(_DWORD *)(a2 + 48) - 1;
  if (v31 > 8)
    v32 = 0;
  else
    v32 = byte_18D331B43[v31];
  *(_BYTE *)(a1 + 184) = v32;
  if ((v25 & 0x100) == 0)
  {
LABEL_35:
    if ((v25 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
LABEL_51:
  v33 = *(_DWORD *)(a2 + 136);
  if (v33 == 2)
    v34 = 2;
  else
    v34 = v33 == 1;
  *(_BYTE *)(a1 + 368) = v34;
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 208);
  if ((v25 & 0x20000000) != 0)
  {
LABEL_36:
    v27 = *(unsigned int *)(a2 + 140);
    if (v27 >= 8)
      v28 = 0;
    else
      v28 = 0x605040302010000uLL >> (8 * v27);
    *(_BYTE *)(a1 + 392) = v28;
  }
LABEL_40:
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)&v35);
}

void sub_18D2394C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)va);
  _Unwind_Resume(a1);
}

__n128 raven::ConvertReceiverDifferentialCodeBiasesEventToProtobuf(raven *this, const raven::ReceiverDifferentialCodeBiasesEvent *a2, CoreNavigation::CLP::LogEntry::Raven::RavenOutput *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  int v10;
  __n128 result;

  *((_DWORD *)a2 + 15) |= 0x20u;
  v5 = *((_QWORD *)a2 + 6);
  if (!v5)
  {
    v5 = operator new();
    *(_QWORD *)v5 = &off_1E25BFB60;
    *(_QWORD *)(v5 + 88) = 0;
    *(_QWORD *)(v5 + 96) = 0;
    *(_DWORD *)(v5 + 104) = 0;
    *(_QWORD *)(v5 + 112) = 0;
    *(_QWORD *)(v5 + 120) = 0;
    *(_DWORD *)(v5 + 128) = 0;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_DWORD *)(v5 + 168) = 0;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 68) = 0u;
    *((_QWORD *)a2 + 6) = v5;
  }
  sub_18D239684((uint64_t)this + 280, v5);
  *((_DWORD *)a2 + 15) |= 0x10u;
  v6 = *((_QWORD *)a2 + 5);
  if (!v6)
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_1E25BFF98;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_WORD *)(v6 + 88) = 0;
    *((_QWORD *)a2 + 5) = v6;
    *(_QWORD *)(v6 + 92) = 0x100000000;
LABEL_7:
    v7 = operator new();
    *(_QWORD *)v7 = &off_1E25C0010;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_QWORD *)(v6 + 8) = v7;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(v6 + 8);
  *(_DWORD *)(v6 + 96) |= 1u;
  if (!v7)
    goto LABEL_7;
LABEL_8:
  sub_18D23A54C((double *)this + 14, v7);
  v9 = *((_WORD *)this + 52);
  v8 = (char *)this + 104;
  v10 = *(_DWORD *)(v6 + 96);
  *(_WORD *)(v6 + 88) = v9;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v8 + 104);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v8 + 120);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v8 + 136);
  *(_DWORD *)(v6 + 96) = v10 | 0xDFE;
  result = *((__n128 *)v8 + 10);
  *(__n128 *)(v6 + 72) = result;
  return result;
}

void sub_18D239684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t i;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t j;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;

  *(_DWORD *)(a2 + 168) |= 1u;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v4 = operator new();
    *(_QWORD *)v4 = &off_1E25C0010;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_QWORD *)(a2 + 8) = v4;
  }
  sub_18D23A54C((double *)a1, v4);
  v12 = 0;
  v13 = *(unsigned __int8 *)(a1 + 96);
  if (v13 == 1)
    v14 = 2;
  else
    v14 = 1;
  if (v13 == 2)
    v15 = 3;
  else
    v15 = v14;
  v16 = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 104);
  *(double *)(a2 + 24) = *(double *)(a1 + 120) + (double)*(uint64_t *)(a1 + 112);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 168) = v16 | 0x7E;
  *(_QWORD *)(a2 + 48) = v17;
  do
  {
    v18 = *(unsigned int *)(a1 + 152 + 4 * v12);
    if ((_DWORD)v18)
    {
      v19 = *(_DWORD *)(a2 + 76);
      v20 = *(int *)(a2 + 72);
      if ((int)v20 >= v19)
      {
        if (v19 == *(_DWORD *)(a2 + 80))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 64));
          v19 = *(_DWORD *)(a2 + 76);
        }
        *(_DWORD *)(a2 + 76) = v19 + 1;
        v22 = operator new();
        *(_QWORD *)v22 = &off_1E25BFCC8;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_DWORD *)(v22 + 40) = 0;
        v23 = *(_QWORD *)(a2 + 64);
        v24 = *(int *)(a2 + 72);
        *(_DWORD *)(a2 + 72) = v24 + 1;
        *(_QWORD *)(v23 + 8 * v24) = v22;
      }
      else
      {
        v21 = *(_QWORD *)(a2 + 64);
        *(_DWORD *)(a2 + 72) = v20 + 1;
        v22 = *(_QWORD *)(v21 + 8 * v20);
      }
      v25 = sub_18D23A764(v12, v5, v6, v7, v8, v9, v10, v11);
      if (v25 >= 0x24)
LABEL_40:
        __assert_rtn("set_type", "CoreNavigationCLPRavenOutput.pb.h", 4707, "::CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount_MeasurementType_IsValid(value)");
      v26 = *(_DWORD *)(v22 + 40);
      *(_DWORD *)(v22 + 32) = v25;
      *(_DWORD *)(v22 + 40) = v26 | 0xC;
      *(_QWORD *)(v22 + 24) = v18;
    }
    ++v12;
  }
  while (v12 != 33);
  for (i = 0; i != 33; ++i)
  {
    v28 = *(unsigned int *)(a1 + 284 + 4 * i);
    if ((_DWORD)v28)
    {
      v29 = *(_DWORD *)(a2 + 100);
      v30 = *(int *)(a2 + 96);
      if ((int)v30 >= v29)
      {
        if (v29 == *(_DWORD *)(a2 + 104))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 88));
          v29 = *(_DWORD *)(a2 + 100);
        }
        *(_DWORD *)(a2 + 100) = v29 + 1;
        v32 = operator new();
        *(_QWORD *)v32 = &off_1E25BFCC8;
        *(_OWORD *)(v32 + 8) = 0u;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_DWORD *)(v32 + 40) = 0;
        v33 = *(_QWORD *)(a2 + 88);
        v34 = *(int *)(a2 + 96);
        *(_DWORD *)(a2 + 96) = v34 + 1;
        *(_QWORD *)(v33 + 8 * v34) = v32;
      }
      else
      {
        v31 = *(_QWORD *)(a2 + 88);
        *(_DWORD *)(a2 + 96) = v30 + 1;
        v32 = *(_QWORD *)(v31 + 8 * v30);
      }
      v35 = sub_18D23A764(i, v5, v6, v7, v8, v9, v10, v11);
      if (v35 >= 0x24)
        goto LABEL_40;
      v36 = *(_DWORD *)(v32 + 40);
      *(_DWORD *)(v32 + 32) = v35;
      *(_DWORD *)(v32 + 40) = v36 | 0xC;
      *(_QWORD *)(v32 + 24) = v28;
    }
  }
  for (j = 0; j != 33; ++j)
  {
    v38 = *(unsigned int *)(a1 + 416 + 4 * j);
    if ((_DWORD)v38)
    {
      v39 = *(_DWORD *)(a2 + 124);
      v40 = *(int *)(a2 + 120);
      if ((int)v40 >= v39)
      {
        if (v39 == *(_DWORD *)(a2 + 128))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 112));
          v39 = *(_DWORD *)(a2 + 124);
        }
        *(_DWORD *)(a2 + 124) = v39 + 1;
        v42 = operator new();
        *(_QWORD *)v42 = &off_1E25BFCC8;
        *(_OWORD *)(v42 + 8) = 0u;
        *(_OWORD *)(v42 + 24) = 0u;
        *(_DWORD *)(v42 + 40) = 0;
        v43 = *(_QWORD *)(a2 + 112);
        v44 = *(int *)(a2 + 120);
        *(_DWORD *)(a2 + 120) = v44 + 1;
        *(_QWORD *)(v43 + 8 * v44) = v42;
      }
      else
      {
        v41 = *(_QWORD *)(a2 + 112);
        *(_DWORD *)(a2 + 120) = v40 + 1;
        v42 = *(_QWORD *)(v41 + 8 * v40);
      }
      v45 = sub_18D23A764(j, v5, v6, v7, v8, v9, v10, v11);
      if (v45 >= 0x24)
        goto LABEL_40;
      v46 = *(_DWORD *)(v42 + 40);
      *(_DWORD *)(v42 + 32) = v45;
      *(_DWORD *)(v42 + 40) = v46 | 0xC;
      *(_QWORD *)(v42 + 24) = v38;
    }
  }
}

__n128 raven::ConvertThinShellIonosphereParametersEventToProtobuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  __n128 result;
  _QWORD v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int8x16_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_DWORD *)(a2 + 60) |= 0x20u;
  v6 = *(_QWORD *)(a2 + 48);
  if (!v6)
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_1E25BFB60;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_DWORD *)(v6 + 104) = 0;
    *(_QWORD *)(v6 + 112) = 0;
    *(_QWORD *)(v6 + 120) = 0;
    *(_DWORD *)(v6 + 128) = 0;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_DWORD *)(v6 + 168) = 0;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 68) = 0u;
    *(_QWORD *)(a2 + 48) = v6;
  }
  sub_18D239684(a1 + 280, v6);
  *(_DWORD *)(a2 + 60) |= 8u;
  v8 = *(_QWORD *)(a2 + 32);
  if (!v8)
  {
    v8 = operator new();
    *(_QWORD *)v8 = &off_1E25BF728;
    *(_DWORD *)(v8 + 156) = 0;
    *(_DWORD *)(v8 + 160) = 0;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_WORD *)(v8 + 152) = 0;
    *(_QWORD *)(a2 + 32) = v8;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0x7FF8000000000000;
  v29 = 0;
  v9 = *(int8x16_t *)(a1 + 152);
  v28 = v9;
  v27 = 1;
  if (*(_BYTE *)(a3 + 48))
  {
    v20[0] = CNTimeSpan::operator-((uint64_t)&v28, (_QWORD *)(a3 + 56), v9, v7);
    v20[1] = v10;
    v21 = 1;
    if (*(_BYTE *)(a3 + 24))
    {
      v25 = CNTimeSpan::operator+(a3 + 32, v20, v11, v12);
      v26 = v13;
      v24 = 1;
    }
    v22 = CNTimeSpan::operator+(a3 + 8, v20, v11, v12);
    v23 = v14;
  }
  *(_DWORD *)(v8 + 160) |= 1u;
  v15 = *(_QWORD *)(v8 + 8);
  if (!v15)
  {
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E25C0010;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_QWORD *)(v8 + 8) = v15;
  }
  sub_18D23A54C((double *)&v22, v15);
  v16 = *(_DWORD *)(v8 + 160);
  v18 = *(_WORD *)(a1 + 104);
  v17 = a1 + 104;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v17 + 24);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v17 + 40);
  *(_WORD *)(v8 + 152) = v18;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v17 + 64);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(v17 + 96);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v17 + 112);
  *(_OWORD *)(v8 + 104) = *(_OWORD *)(v17 + 128);
  *(_OWORD *)(v8 + 120) = *(_OWORD *)(v17 + 144);
  *(_DWORD *)(v8 + 160) = v16 | 0xFFFFE;
  result = *(__n128 *)(v17 + 160);
  *(__n128 *)(v8 + 136) = result;
  return result;
}

void raven::ConvertRavenSolutionEventToSerializedProtobufLogEntry(uint64_t a1)
{
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput *v2;
  uint64_t v3;
  int v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;
  uint64_t v11;
  int v12;

  CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v9);
  v12 |= 1u;
  v3 = v10;
  if (!v10)
  {
    v3 = operator new();
    *(_QWORD *)v3 = &off_1E25BE6C0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_QWORD *)(v3 + 40) = 0;
    v10 = v3;
  }
  v4 = *(_DWORD *)(v3 + 44);
  *(double *)(v3 + 8) = *(double *)(a1 + 40) + (double)*(uint64_t *)(a1 + 32);
  v5 = *(double *)(a1 + 16) + (double)*(uint64_t *)(a1 + 8);
  *(_DWORD *)(v3 + 44) = v4 | 5;
  *(double *)(v3 + 24) = v5;
  v12 |= 2u;
  v6 = v11;
  if (!v11)
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_1E25BBD08;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_OWORD *)(v6 + 248) = 0u;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 264) = 0u;
    *(_OWORD *)(v6 + 280) = 0u;
    *(_OWORD *)(v6 + 296) = 0u;
    *(_OWORD *)(v6 + 308) = 0u;
    v11 = v6;
  }
  *(_DWORD *)(v6 + 320) |= 2u;
  v7 = *(_QWORD *)(v6 + 272);
  if (!v7)
  {
    v7 = operator new();
    *(_QWORD *)v7 = &off_1E25BFF20;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v6 + 272) = v7;
    *(_DWORD *)(v7 + 28) |= 1u;
LABEL_9:
    v8 = operator new();
    *(_QWORD *)v8 = &off_1E25BF6B0;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v7 + 8) = v8;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v7 + 8);
  *(_DWORD *)(v7 + 28) |= 1u;
  if (!v8)
    goto LABEL_9;
LABEL_10:
  raven::ConvertRavenSolutionEventToProtobuf((raven *)a1, (const raven::RavenSolutionEvent *)v8, v2);
  wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v9);
}

void sub_18D239EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::ConvertRavenActivityStateEnumToProtobuf(_BYTE *a1)
{
  if (*a1 - 1 < 9)
    return (*a1 - 1) + 1;
  else
    return 0;
}

uint64_t raven::ConvertRavenFitnessSessionEnumToProtobuf(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1 - 1;
  if (v1 > 8)
    return 0;
  else
    return dword_18D331B4C[(char)v1];
}

uint64_t raven::ConvertRavenMountStateEnumToProtobuf(_BYTE *a1)
{
  if (*a1 - 1 < 3)
    return (*a1 - 1) + 1;
  else
    return 0;
}

uint64_t raven::ConvertRavenPositionContextStateEnumToProtobuf(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

uint64_t raven::ConvertRavenMovingStateEnumToProtobuf(_BYTE *a1)
{
  if (*a1 - 1 < 3)
    return (*a1 - 1) + 1;
  else
    return 0;
}

uint64_t raven::ConvertRavenEstimatorTypeToProtobuf(_BYTE *a1)
{
  if (*a1 - 1 >= 5)
    return 1;
  else
    return (*a1 - 1) + 2;
}

uint64_t raven::ConvertRavenHealthToProtobuf(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;

  v1 = *a1;
  if (v1 == 1)
    v2 = 2;
  else
    v2 = 1;
  if (v1 == 2)
    return 3;
  else
    return v2;
}

uint64_t raven::ConvertRavenIonosphereEstimatorHealthToProtobuf(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;

  v1 = *a1;
  if (v1 == 1)
    v2 = 2;
  else
    v2 = 1;
  if (v1 == 2)
    return 3;
  else
    return v2;
}

uint64_t raven::ConvertRavenSignalEnvironmentEnumToProtobuf(_BYTE *a1)
{
  if (*a1 - 1 >= 6)
    return 1;
  else
    return (*a1 - 1) + 2;
}

uint64_t *sub_18D239FB8(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v6 = *result;
  *result = v5;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18D23A04C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    v5 = (void **)(i - 24);
    sub_18D226340(&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18D23A0AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 80);
    *(_QWORD *)(a1 + 16) = v2 - 80;
    if (v4)
    {
      *(_QWORD *)(v2 - 72) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18D23A10C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_18D23A154(uint64_t result, _BYTE *a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 24);
  if ((v2 & 0x200) != 0)
  {
    a2[4] = *(_BYTE *)(result + 17);
    if ((v2 & 0x10) == 0)
    {
LABEL_3:
      if ((v2 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = *(_BYTE *)(result + 12);
  if ((v2 & 0x100) == 0)
  {
LABEL_4:
    if ((v2 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  a2[3] = *(_BYTE *)(result + 16);
  if ((v2 & 0x40) == 0)
  {
LABEL_5:
    if ((v2 & 2) == 0)
      return result;
LABEL_11:
    *a2 = *(_BYTE *)(result + 9);
    return result;
  }
LABEL_10:
  a2[2] = *(_BYTE *)(result + 14);
  if ((v2 & 2) != 0)
    goto LABEL_11;
  return result;
}

uint64_t sub_18D23A1AC(uint64_t result, _BYTE *a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 16);
  if ((v2 & 2) != 0)
  {
    a2[1] = *(_BYTE *)(result + 9);
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_3;
  }
  a2[2] = *(_BYTE *)(result + 10);
  if ((v2 & 1) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      return result;
LABEL_9:
    a2[3] = *(_BYTE *)(result + 11);
    return result;
  }
LABEL_8:
  *a2 = *(_BYTE *)(result + 8);
  if ((v2 & 8) != 0)
    goto LABEL_9;
  return result;
}

uint64_t sub_18D23A1F4(uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); i != v3; i += 200)
    {
      v5 = *(_QWORD *)(i + 184);
      *(_QWORD *)(i + 184) = 0;
      if (v5)
        MEMORY[0x18D78B5D4](v5, 0x1000C4041240993);
    }
  }
  return a1;
}

uint64_t sub_18D23A260(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 200;
    v4 = *(_QWORD *)(i - 16);
    *(_QWORD *)(i - 16) = 0;
    if (v4)
      MEMORY[0x18D78B5D4](v4, 0x1000C4041240993);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18D23A2C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CD010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D23A2D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CD010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D23A308(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  v2 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v2;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v3 = *(__int128 *)((char *)a2 + 56);
  v4 = *(__int128 *)((char *)a2 + 72);
  v5 = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  v6 = *(__int128 *)((char *)a2 + 120);
  v7 = *(__int128 *)((char *)a2 + 136);
  v8 = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  v9 = a2[11];
  v10 = a2[12];
  *(_OWORD *)(a1 + 206) = *(__int128 *)((char *)a2 + 206);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 192) = v10;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  result = (__n128)a2[14];
  *(__n128 *)(a1 + 224) = result;
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 62);
  return result;
}

double sub_18D23A3D0(uint64_t a1)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = 0x100000003;
  v7 = &unk_1E25C77C0;
  v8 = xmmword_18D313070;
  v10 = &v11;
  v4 = 0x300000003;
  v2 = &unk_1E25C78E0;
  v3 = xmmword_18D30BB60;
  v5 = &v6;
  return sub_18D159938(a1, (uint64_t)&v7, (uint64_t)&v2);
}

_QWORD *sub_18D23A458(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18D169B48(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_18D23A4B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D23A4CC(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18D169B48(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_18D23A530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_18D23A54C(double *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a2 + 52) |= 1u;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v4 = operator new();
    *(_QWORD *)v4 = &off_1E25BF638;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(a2 + 8) = v4;
  }
  v5 = *a1;
  *(_DWORD *)(v4 + 28) |= 1u;
  *(double *)(v4 + 8) = v5;
  *(_DWORD *)(a2 + 52) |= 1u;
  result = a1[1];
  *(_DWORD *)(v4 + 28) |= 2u;
  *(double *)(v4 + 16) = result;
  if (*((_BYTE *)a1 + 16))
  {
    *(_DWORD *)(a2 + 52) |= 2u;
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
    {
      v7 = operator new();
      *(_QWORD *)v7 = &off_1E25BF638;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(a2 + 16) = v7;
    }
    v8 = *((_QWORD *)a1 + 3);
    *(_DWORD *)(v7 + 28) |= 1u;
    *(_QWORD *)(v7 + 8) = v8;
    *(_DWORD *)(a2 + 52) |= 2u;
    result = a1[4];
    *(_DWORD *)(v7 + 28) |= 2u;
    *(double *)(v7 + 16) = result;
  }
  if (*((_BYTE *)a1 + 40))
  {
    *(_DWORD *)(a2 + 52) |= 4u;
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
    {
      v9 = operator new();
      *(_QWORD *)v9 = &off_1E25BF638;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(a2 + 24) = v9;
    }
    v10 = *((_QWORD *)a1 + 6);
    *(_DWORD *)(v9 + 28) |= 1u;
    *(_QWORD *)(v9 + 8) = v10;
    *(_DWORD *)(a2 + 52) |= 4u;
    result = a1[7];
    *(_DWORD *)(v9 + 28) |= 2u;
    *(double *)(v9 + 16) = result;
  }
  if (*((_BYTE *)a1 + 64))
  {
    *(_DWORD *)(a2 + 52) |= 8u;
    v11 = *(_QWORD *)(a2 + 32);
    if (!v11)
    {
      v11 = operator new();
      *(_QWORD *)v11 = &off_1E25BF638;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(a2 + 32) = v11;
    }
    v12 = *((_QWORD *)a1 + 9);
    *(_DWORD *)(v11 + 28) |= 1u;
    *(_QWORD *)(v11 + 8) = v12;
    *(_DWORD *)(a2 + 52) |= 8u;
    result = a1[10];
    *(_DWORD *)(v11 + 28) |= 2u;
    *(double *)(v11 + 16) = result;
  }
  return result;
}

uint64_t sub_18D23A764(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  unsigned __int8 v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  switch(a1)
  {
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 29;
      break;
    case 6:
      result = 5;
      break;
    case 7:
      result = 30;
      break;
    case 8:
      result = 6;
      break;
    case 9:
      result = 27;
      break;
    case 10:
      result = 21;
      break;
    case 11:
      result = 24;
      break;
    case 12:
      result = 7;
      break;
    case 13:
      result = 25;
      break;
    case 14:
      result = 9;
      break;
    case 15:
      result = 12;
      break;
    case 16:
      result = 23;
      break;
    case 17:
      result = 11;
      break;
    case 18:
      result = 10;
      break;
    case 19:
      result = 13;
      break;
    case 20:
      result = 35;
      break;
    case 21:
      result = 14;
      break;
    case 22:
      result = 15;
      break;
    case 23:
      result = 16;
      break;
    case 24:
      result = 17;
      break;
    case 25:
      result = 18;
      break;
    case 26:
      result = 22;
      break;
    case 27:
      result = 8;
      break;
    case 28:
      result = 19;
      break;
    case 29:
      result = 20;
      break;
    case 30:
      result = 33;
      break;
    case 31:
      result = 32;
      break;
    case 32:
      result = 31;
      break;
    case 33:
      v14 = v8;
      v15 = v9;
      v13 = 12;
      v12 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "Invalid measurement type specified: 'RavenMeasurementTypeMax'", a4, a5, a6, a7, a8, v11);
      result = 0;
      break;
    default:
      result = 28;
      break;
  }
  return result;
}

uint64_t *sub_18D23A8D4(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_18D185958(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

double raven::RavenUserGaitTrackerActiveObject::RavenUserGaitTrackerActiveObject(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  double result;

  v2 = sub_18D23AAD0(a1, a2);
  *(_QWORD *)v2 = &off_1E25C3E20;
  result = 0.0;
  *(_OWORD *)(v2 + 712) = 0u;
  *(_OWORD *)(v2 + 728) = 0u;
  *(_OWORD *)(v2 + 744) = 0u;
  *(_OWORD *)(v2 + 760) = 0u;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_QWORD *)(v2 + 792) = 0;
  *(_QWORD *)(v2 + 688) = &unk_1E25C2AB0;
  *(_QWORD *)(v2 + 704) = 0;
  *(_QWORD *)(v2 + 696) = 0;
  *(_BYTE *)(v2 + 712) = 0;
  *(_QWORD *)(v2 + 720) = 0;
  *(_BYTE *)(v2 + 736) = 0;
  *(_QWORD *)(v2 + 728) = 0;
  *(_QWORD *)(v2 + 744) = 0;
  *(_QWORD *)(v2 + 752) = 0;
  *(_BYTE *)(v2 + 760) = 0;
  *(_QWORD *)(v2 + 768) = 0;
  *(_QWORD *)(v2 + 776) = 0;
  *(_QWORD *)(v2 + 784) = 0x7FF8000000000000;
  *(_QWORD *)(v2 + 800) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 984) = 0;
  *(_OWORD *)(v2 + 952) = 0u;
  *(_OWORD *)(v2 + 968) = 0u;
  *(_OWORD *)(v2 + 936) = 0u;
  *(_OWORD *)(v2 + 920) = 0u;
  *(_OWORD *)(v2 + 904) = 0u;
  *(_OWORD *)(v2 + 888) = 0u;
  *(_OWORD *)(v2 + 872) = 0u;
  *(_OWORD *)(v2 + 856) = 0u;
  *(_OWORD *)(v2 + 840) = 0u;
  *(_OWORD *)(v2 + 824) = 0u;
  *(_OWORD *)(v2 + 808) = 0u;
  *(_QWORD *)(v2 + 880) = &unk_1E25C26E8;
  *(_QWORD *)(v2 + 896) = 0;
  *(_QWORD *)(v2 + 888) = 0;
  *(_BYTE *)(v2 + 904) = 0;
  *(_QWORD *)(v2 + 920) = 0;
  *(_QWORD *)(v2 + 912) = 0;
  *(_BYTE *)(v2 + 928) = 0;
  *(_QWORD *)(v2 + 944) = 0;
  *(_QWORD *)(v2 + 936) = 0;
  *(_BYTE *)(v2 + 952) = 0;
  *(_QWORD *)(v2 + 968) = 0;
  *(_QWORD *)(v2 + 960) = 0;
  *(_QWORD *)(v2 + 976) = 0x7FF8000000000000;
  *(_QWORD *)(v2 + 992) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 1096) = 0u;
  *(_OWORD *)(v2 + 1080) = 0u;
  *(_OWORD *)(v2 + 1064) = 0u;
  *(_OWORD *)(v2 + 1048) = 0u;
  *(_OWORD *)(v2 + 1032) = 0u;
  *(_OWORD *)(v2 + 1016) = 0u;
  *(_OWORD *)(v2 + 1000) = 0u;
  *(_QWORD *)(v2 + 1112) = 0x7FF8000000000000;
  *(_QWORD *)(v2 + 1032) = 0x7FF8000000000000;
  *(_BYTE *)(v2 + 1120) = 0;
  *(_BYTE *)(v2 + 1124) = 0;
  *(_BYTE *)(v2 + 1128) = 0;
  *(_DWORD *)(v2 + 1180) = 0;
  *(_OWORD *)(v2 + 1148) = 0u;
  *(_OWORD *)(v2 + 1164) = 0u;
  *(_OWORD *)(v2 + 1132) = 0u;
  return result;
}

uint64_t sub_18D23AAD0(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;

  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(_QWORD *)v3 = &off_1E25C4788;
  *(_BYTE *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  cnestimation::PeriodicityTracker::PeriodicityTracker((cnestimation::PeriodicityTracker *)(v3 + 496));
  return a1;
}

void sub_18D23AB10(_Unwind_Exception *a1)
{
  cnframework::ActiveObjectBase *v1;

  cnframework::ActiveObjectBase::~ActiveObjectBase(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenUserGaitTrackerActiveObject::Configure(cnprint::CNPrinter *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *__p[2];
  char v24;
  unsigned __int8 v25;
  __int16 v26;

  result = sub_18D23ACA0(a1, a2);
  if (!(_DWORD)result)
  {
    v4 = *((_QWORD *)a1 + 61);
    v5 = *(_QWORD *)(v4 + 472);
    if ((v5 <= -1 || ((v5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(v5 - 1) >= 0xFFFFFFFFFFFFFLL)
    {
      v26 = 12;
      v25 = 4;
      sub_18D0778AC(__p, "RavenUserGaitTrackerActiveObject");
      if (v24 >= 0)
        v16 = __p;
      else
        LOBYTE(v16) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "%s could not be configured - invalid walk step freq,%.3lf", v11, v12, v13, v14, v15, (char)v16);
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 480);
      if (v8 > -1 && ((v8 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
        || (unint64_t)(v8 - 1) < 0xFFFFFFFFFFFFFLL)
      {
        return 0;
      }
      v26 = 12;
      v25 = 4;
      sub_18D0778AC(__p, "RavenUserGaitTrackerActiveObject");
      if (v24 >= 0)
        v22 = __p;
      else
        LOBYTE(v22) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "%s could not be configured - invalid run step freq,%.3lf", v17, v18, v19, v20, v21, (char)v22);
    }
    if (v24 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_18D23AC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D23ACA0(cnprint::CNPrinter *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  double v11;
  uint64_t v14;
  uint64_t v17;
  uint64_t v20;
  double v23;
  double v26;
  double v29;
  double v32;
  int v33;
  double v34;
  long double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  cnprint::CNPrinter *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  _QWORD v111[2];
  char v112;
  unsigned __int8 v113;
  __int16 v114;
  void *__p[2];
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  int v120;

  if (*((_BYTE *)a1 + 480) && cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "Warning: %s configured more than once", v4, v5, v6, v7, v8, (char)v9);
    if (SHIBYTE(v116) < 0)
      operator delete(__p[0]);
  }
  v10 = *a2;
  if (!*a2 || !*(_BYTE *)(v10 + 33))
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v48 = __p;
    else
      LOBYTE(v48) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured", v43, v44, v45, v46, v47, (char)v48);
    goto LABEL_105;
  }
  *((_QWORD *)a1 + 61) = v10;
  v11 = *(double *)(v10 + 648);
  if ((*(uint64_t *)&v11 <= -1 || ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v11 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v54 = __p;
    else
      LOBYTE(v54) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid HW period,%.3lf", v49, v50, v51, v52, v53, (char)v54);
    goto LABEL_105;
  }
  v14 = *(_QWORD *)(v10 + 384);
  if ((v14 <= -1 || ((v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v14 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v60 = __p;
    else
      LOBYTE(v60) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid window duration,%.3lf", v55, v56, v57, v58, v59, (char)v60);
    goto LABEL_105;
  }
  v17 = *(_QWORD *)(v10 + 392);
  if ((v17 <= -1 || ((v17 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v17 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v66 = __p;
    else
      LOBYTE(v66) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid min frequency,%.3lf", v61, v62, v63, v64, v65, (char)v66);
    goto LABEL_105;
  }
  v20 = *(_QWORD *)(v10 + 400);
  if ((v20 <= -1 || ((v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v20 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v72 = __p;
    else
      LOBYTE(v72) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid max frequency,%.3lf", v67, v68, v69, v70, v71, (char)v72);
    goto LABEL_105;
  }
  v23 = *(double *)(v10 + 408);
  if ((*(uint64_t *)&v23 <= -1 || ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v23 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v78 = __p;
    else
      LOBYTE(v78) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid probability of false positive window,%.3lf", v73, v74, v75, v76, v77, (char)v78);
    goto LABEL_105;
  }
  v26 = *(double *)(v10 + 704);
  if ((*(uint64_t *)&v26 <= -1 || ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v26 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v84 = __p;
    else
      LOBYTE(v84) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid accelerometer noise,%.3lf", v79, v80, v81, v82, v83, (char)v84);
    goto LABEL_105;
  }
  v29 = *(double *)(v10 + 736);
  if ((*(uint64_t *)&v29 <= -1 || ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v29 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v90 = __p;
    else
      LOBYTE(v90) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid accelerometer bias sigma,%.3lf", v85, v86, v87, v88, v89, (char)v90);
    goto LABEL_105;
  }
  v32 = *(double *)(v10 + 416);
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v32 < 0.0 || v32 > 1.0)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v96 = __p;
    else
      LOBYTE(v96) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid probability of false positive,%.3lf", v91, v92, v93, v94, v95, (char)v96);
    goto LABEL_105;
  }
  v33 = *(_DWORD *)(v10 + 424);
  if (!v33)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v103 = __p;
    else
      LOBYTE(v103) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid periodicity feature,%d", v98, v99, v100, v101, v102, (char)v103);
LABEL_105:
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      return 0xFFFFFFFFLL;
    v42 = __p[0];
LABEL_107:
    operator delete(v42);
    return 0xFFFFFFFFLL;
  }
  __p[0] = *(void **)(v10 + 648);
  __p[1] = (void *)v14;
  v116 = v17;
  v117 = v20;
  v34 = fmax(ceil(v23 / v11), 1.0);
  v35 = log(1.0 - v32);
  v118 = 1.0 - exp(v35 / v34);
  v119 = sqrt(v29 * v29 + v26 * v26);
  v120 = v33;
  if (cnestimation::PeriodicityTracker::Configure((uint64_t)a1 + 496, (double *)__p))
  {
    v114 = 12;
    v113 = 4;
    (*(void (**)(_QWORD *__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(v111, a1);
    if (v112 >= 0)
      v41 = v111;
    else
      LOBYTE(v41) = v111[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v114, &v113, "Error: %s could not be configured", v36, v37, v38, v39, v40, (char)v41);
    if ((v112 & 0x80000000) == 0)
      return 0xFFFFFFFFLL;
    v42 = (void *)v111[0];
    goto LABEL_107;
  }
  cnframework::ActiveObjectBase::SetEventQueueDelay(a1, 0.0);
  *((_BYTE *)a1 + 480) = 1;
  v104 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnprint::CNPrinter *))(*(_QWORD *)a1 + 48))(a1);
  if (cnprint::CNPrinter::GetLogLevel(v104) <= 1)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v116 >= 0)
      v110 = __p;
    else
      LOBYTE(v110) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s configured successfully", v105, v106, v107, v108, v109, (char)v110);
    if (SHIBYTE(v116) < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D23B400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 raven::RavenUserGaitTrackerActiveObject::HandleEvent(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *(_OWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 728) = v4;
  *(_OWORD *)(a1 + 712) = v3;
  *(_OWORD *)(a1 + 696) = v2;
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 792) = v7;
  *(_OWORD *)(a1 + 776) = v6;
  *(_OWORD *)(a1 + 760) = v5;
  result = *(__n128 *)(a2 + 136);
  v9 = *(_OWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 856) = v10;
  *(_OWORD *)(a1 + 840) = v9;
  *(__n128 *)(a1 + 824) = result;
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)(a1 + 888) = *(_OWORD *)(a2 + 8);
  v2 = *(_OWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 952) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 936) = v4;
  *(_OWORD *)(a1 + 920) = v3;
  *(_OWORD *)(a1 + 904) = v2;
  result = *(__n128 *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 1000) = v7;
  *(_OWORD *)(a1 + 984) = v6;
  *(__n128 *)(a1 + 968) = result;
  return result;
}

void raven::RavenUserGaitTrackerActiveObject::InitializeGaitTracking(raven::RavenUserGaitTrackerActiveObject *this, unsigned int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;

  *((_DWORD *)this + 281) = a2;
  *((_BYTE *)this + 1128) = 1;
  *((_DWORD *)this + 283) = 0;
  v4 = a2;
  if (a2)
  {
    v5 = (char *)operator new(96 * a2);
    v6 = &v5[96 * v4];
    v7 = v5;
    do
    {
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0x7FF8000000000000;
      *((_OWORD *)v7 + 1) = 0uLL;
      *((_OWORD *)v7 + 2) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *((_OWORD *)v7 + 4) = 0uLL;
      *((_QWORD *)v7 + 10) = 0;
      *((_QWORD *)v7 + 11) = 0x7FF8000000000000;
      v7 += 96;
    }
    while (v7 != v6);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v8 = (void *)*((_QWORD *)this + 142);
  if (v8)
  {
    *((_QWORD *)this + 143) = v8;
    operator delete(v8);
  }
  *((_QWORD *)this + 142) = v5;
  *((_QWORD *)this + 143) = v6;
  *((_QWORD *)this + 144) = v6;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  if (a2)
  {
    v9 = (char *)sub_18D164CD4((uint64_t)&v16, v4);
    v11 = &v9[4 * v10];
    v14 = v9;
    v16 = v11;
    bzero(v9, 4 * v4);
    v12 = &v9[4 * v4];
    v15 = v12;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v9 = 0;
  }
  v13 = (void *)*((_QWORD *)this + 145);
  if (v13)
  {
    *((_QWORD *)this + 146) = v13;
    operator delete(v13);
    v9 = v14;
    v12 = v15;
    v11 = v16;
  }
  *((_QWORD *)this + 145) = v9;
  *((_QWORD *)this + 146) = v12;
  *((_QWORD *)this + 147) = v11;
}

void sub_18D23B638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenUserGaitTrackerActiveObject::OnFailureToAddSampleToPeriodicityTracker(uint64_t this)
{
  if (*(_BYTE *)(this + 1128))
    *(_BYTE *)(this + 1128) = 0;
  *(_DWORD *)(this + 1132) = 0;
  *(_QWORD *)(this + 1144) = *(_QWORD *)(this + 1136);
  *(_QWORD *)(this + 1168) = *(_QWORD *)(this + 1160);
  return this;
}

uint64_t raven::RavenUserGaitTrackerActiveObject::ResetGaitTracking(uint64_t this)
{
  if (*(_BYTE *)(this + 1128))
    *(_BYTE *)(this + 1128) = 0;
  *(_DWORD *)(this + 1132) = 0;
  *(_QWORD *)(this + 1144) = *(_QWORD *)(this + 1136);
  *(_QWORD *)(this + 1168) = *(_QWORD *)(this + 1160);
  return this;
}

void raven::RavenUserGaitTrackerActiveObject::OnNewSampleInPeriodicityTracker(uint64_t a1, __int128 *a2)
{
  int8x16_t v4;
  int8x16_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  double v16;
  double v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  BOOL v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;

  sub_18D23B870(a1, a2);
  memset(&v31, 0, 80);
  v32 = 0;
  v33 = 0x7FF8000000000000;
  if (sub_18D23B918(a1))
  {
    v6 = *a2;
    *(_OWORD *)(a1 + 1040) = a2[1];
    *(_OWORD *)(a1 + 1024) = v6;
    v7 = a2[2];
    v8 = a2[3];
    v9 = a2[4];
    *(_OWORD *)(a1 + 1104) = a2[5];
    *(_OWORD *)(a1 + 1088) = v9;
    *(_OWORD *)(a1 + 1072) = v8;
    *(_OWORD *)(a1 + 1056) = v7;
    if (*(_BYTE *)(a1 + 569))
      v10 = *(double *)(a1 + 576);
    else
      v10 = NAN;
    v16 = fabs(v10);
    v17 = 0.25 / v10;
    if (v16 < 2.22044605e-16)
      v17 = NAN;
    v30 = NAN;
    if (cnestimation::PeriodicityTracker::IsFeatureObservedInRecentTimeHistory((cnestimation::PeriodicityTracker *)(a1 + 496), v17, &v30))
    {
      *(double *)v18.i64 = v30;
      v28 = 0;
      v29 = 0;
      CNTimeSpan::SetTimeSpan(&v28, 0, v18, v19);
      v13 = CNTimeSpan::operator+(a1 + 1024, &v28, v20, v21);
      goto LABEL_14;
    }
    *(_BYTE *)(a1 + 1120) = 1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1120))
      return;
    if (!*(_BYTE *)(a1 + 569))
      goto LABEL_24;
    if (*(_BYTE *)(a1 + 496))
    {
      if ((cnestimation::PeriodicityTracker::NumberOfSamplesToLastObservedFeatureInRecentSamples((cnestimation::PeriodicityTracker *)(a1 + 496), 3u) & 0xFF00000000) != 0)
      {
        v4.i64[0] = *(_QWORD *)(a1 + 504);
        v28 = 0;
        v29 = 0;
        CNTimeSpan::SetTimeSpan(&v28, 0, v4, v5);
        v13 = CNTimeSpan::operator-((uint64_t)a2, &v28, v11, v12);
LABEL_14:
        v31.n128_u64[0] = v13;
        v31.n128_u64[1] = v14;
        *(_BYTE *)(a1 + 1120) = 0;
        raven::RavenUserGaitTrackerActiveObject::PerformGaitTracking((raven::RavenUserGaitTrackerActiveObject *)a1, &v31, v15);
        return;
      }
      v22 = *(_BYTE *)(a1 + 569) == 0;
    }
    else
    {
      v22 = 0;
    }
    v23 = CNTimeSpan::operator-((uint64_t)a2, (_QWORD *)(a1 + 1024), v4, v5);
    if (v22)
      v25 = NAN;
    else
      v25 = *(double *)(a1 + 576);
    v26 = fabs(v25);
    v27 = 0.25 / v25;
    if (v26 < 2.22044605e-16)
      v27 = NAN;
    if (v24 + (double)v23 > v27)
LABEL_24:
      *(_BYTE *)(a1 + 1120) = 0;
  }
}

void sub_18D23B870(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(raven::SignalPeriodicityAnalysisEvent *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  char v17;
  uint64_t v18;
  char v19;
  int v20;

  if (sub_18D23B918(a1))
  {
    v9 = &off_1E25C3B90;
    v4 = a2[3];
    v12 = a2[2];
    v13 = v4;
    v5 = a2[5];
    v14 = a2[4];
    v15 = v5;
    v6 = a2[1];
    v10 = *a2;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 488);
    v16 = 1.0 / *(double *)(v7 + 648);
    v17 = 1;
    if (*(_BYTE *)(a1 + 569))
      v8 = *(_QWORD *)(a1 + 576);
    else
      v8 = 0x7FF8000000000000;
    v18 = v8;
    v19 = 1;
    v20 = *(_DWORD *)(v7 + 424);
    sub_18D23BE40(a1, (uint64_t)&v9);
  }
}

BOOL sub_18D23B918(uint64_t a1)
{
  unint64_t v1;

  if (*(_BYTE *)(a1 + 496)
    && ((LODWORD(v1) = vcvtpd_u64_f64(*(double *)(a1 + 512) / *(double *)(a1 + 504)), v1 <= 1)
      ? (v1 = 1)
      : (v1 = v1),
        *(_QWORD *)(a1 + 632) >= v1 && *(_BYTE *)(a1 + 569)))
  {
    return *(_BYTE *)(a1 + 568) != 0;
  }
  else
  {
    return 0;
  }
}

__n128 raven::RavenUserGaitTrackerActiveObject::PerformGaitTracking(raven::RavenUserGaitTrackerActiveObject *this, __n128 *a2, __n128 result)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  void *v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __int128 v33;
  unsigned int v34;
  int v35;

  if (*((_BYTE *)this + 496))
  {
    result.n128_f64[0] = *((double *)this + 64) / *((double *)this + 63);
    LODWORD(v4) = vcvtpd_u64_f64(result.n128_f64[0]);
    v4 = v4 <= 1 ? 1 : v4;
    if (*((_QWORD *)this + 79) >= v4)
    {
      if (!*((_BYTE *)this + 569)
        || (result.n128_u64[0] = *((_QWORD *)this + 72),
            (result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        || fabs(result.n128_f64[0]) < 2.22044605e-16
        || result.n128_f64[0] < 0.0
        || (v5 = *((unsigned __int8 *)this + 792), (v5 & 0xFE) != 2)
        || *((unsigned __int8 *)this + 984) - 1 <= 1)
      {
LABEL_12:
        if (*((_BYTE *)this + 1128))
          *((_BYTE *)this + 1128) = 0;
        *((_DWORD *)this + 283) = 0;
        *((_QWORD *)this + 143) = *((_QWORD *)this + 142);
        *((_QWORD *)this + 146) = *((_QWORD *)this + 145);
        return result;
      }
      v12 = v5 == 2;
      v6 = 480;
      if (v12)
        v6 = 472;
      v7 = *(double *)(*((_QWORD *)this + 61) + v6) * 0.5;
      v8 = fabs(v7);
      if (v7 >= 0.0 && v8 >= 2.22044605e-16)
      {
        result.n128_f64[0] = result.n128_f64[0] / v7;
        v11 = llround(result.n128_f64[0]);
        v12 = v11 > 4 || ((1 << v11) & 0x16) == 0;
        if (v12)
          goto LABEL_12;
        if (*((_BYTE *)this + 1128))
        {
          if (*((_DWORD *)this + 281) == v11)
          {
            v13 = *((_DWORD *)this + 283);
            *((_DWORD *)this + 283) = v13 + 1;
LABEL_32:
            v15 = v13 % (int)v11;
            v16 = *((_QWORD *)this + 145);
            v17 = *((_QWORD *)this + 142) + 96 * v15;
            v18 = *(_DWORD *)(v16 + 4 * v15);
            *(_DWORD *)(v16 + 4 * v15) = v18 + 1;
            if ((v18 + 1) >= 2)
            {
              v25 = &unk_1E25C2248;
              v19 = a2[3];
              v28 = a2[2];
              v29 = v19;
              v20 = a2[5];
              v30 = a2[4];
              v31 = v20;
              v21 = a2[1];
              v26 = *a2;
              v27 = v21;
              v32 = v26;
              v33 = *(_OWORD *)v17;
              v34 = v15;
              v35 = v18;
              sub_18D23BB88((uint64_t)this, (uint64_t *)&v25);
            }
            v22 = a2[1];
            *(__n128 *)v17 = *a2;
            *(__n128 *)(v17 + 16) = v22;
            result = a2[2];
            v23 = a2[3];
            v24 = a2[5];
            *(__n128 *)(v17 + 64) = a2[4];
            *(__n128 *)(v17 + 80) = v24;
            *(__n128 *)(v17 + 32) = result;
            *(__n128 *)(v17 + 48) = v23;
            return result;
          }
          *((_BYTE *)this + 1128) = 0;
          *((_DWORD *)this + 283) = 0;
          *((_QWORD *)this + 143) = *((_QWORD *)this + 142);
          *((_QWORD *)this + 146) = *((_QWORD *)this + 145);
        }
        raven::RavenUserGaitTrackerActiveObject::InitializeGaitTracking(this, v11);
        v14 = *((unsigned __int8 *)this + 1128);
        v13 = *((_DWORD *)this + 283);
        *((_DWORD *)this + 283) = v13 + 1;
        if (!v14)
          sub_18D164CA0();
        v11 = *((_DWORD *)this + 281);
        goto LABEL_32;
      }
    }
  }
  return result;
}

void sub_18D23BB88(uint64_t a1, uint64_t *a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  uint64_t v29;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v6 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v6;
  v7 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E25C1630;
  *(_QWORD *)(v8 + 8) = &unk_1E25C2248;
  v9 = *(_OWORD *)(a2 + 11);
  v10 = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(v8 + 128) = v10;
  *(_QWORD *)(v8 + 144) = a2[17];
  v11 = *(_OWORD *)(a2 + 3);
  v12 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v8 + 96) = v9;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v8 + 32) = v11;
  v13 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v8;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t *))(v14 + 16))(a2);
  *((_QWORD *)v4 + 8) = v15;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v28, a2);
  if (v4[95] < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v28;
  *((_QWORD *)v4 + 11) = v29;
  v26 = v4 + 24;
  v27 = (std::__shared_weak_count *)v4;
  v16 = *(_QWORD *)(a1 + 344);
  v24 = v4 + 24;
  v25 = (std::__shared_weak_count *)v4;
  do
    v17 = __ldxr(v5);
  while (__stxr(v17 + 1, v5));
  (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)v16 + 16))(v16, &v24, a1);
  v18 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_18D23BDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18D23BE0C(cnframework::ActiveObjectBase *a1)
{
  sub_18D073724(a1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D23BE30@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenPeriodicityTrackerActiveObject");
}

void sub_18D23BE40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D23BF34(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D23BF18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D23BF34@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D23BF8C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D23BF78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D23BF8C(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D23BFD8((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D23BFC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D23BFD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = MEMORY[0x1E0DE4F20];
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  sub_18D23C0F0(v4, a2);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(v7 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v8;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v10, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v10;
  *(_QWORD *)(v6 + 16) = v11;
  return a1;
}

void sub_18D23C0B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*v2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D23C0F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E25C1D50;
  *(_QWORD *)(v4 + 8) = &off_1E25C3B90;
  v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 128) = v6;
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 64) = v8;
  v9 = *a1;
  *a1 = v4;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_18D23C198()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D23C1AC()
{
}

__n128 sub_18D23C1B8(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1D50;
  *(_QWORD *)(v2 + 8) = &off_1E25C3B90;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v5;
  result = *(__n128 *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v2 + 48) = result;
  *(_OWORD *)(v2 + 64) = v7;
  return result;
}

void sub_18D23C22C()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D23C240()
{
}

__n128 sub_18D23C24C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1630;
  *(_QWORD *)(v2 + 8) = &unk_1E25C2248;
  v3 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v3;
  *(_QWORD *)(v2 + 144) = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v4;
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v5;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

uint64_t raven::SolutionChecker::Configure(uint64_t a1, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double v9;
  BOOL v10;
  uint64_t result;
  double v14;
  cnstatistics *v15;
  double v16;
  cnstatistics *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unsigned __int8 v33;
  __int16 v34;

  *(_QWORD *)(a1 + 16) = a3;
  v8 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
  v9 = (*a2)[198];
  if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v9 >= 0.0 ? (v10 = v9 <= 1.0) : (v10 = 0), !v10))
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid consistency_percentile_threshold: %.2lf", a4, a5, a6, a7, a8, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  cnstatistics::InverseChi2((cnstatistics *)a1, v9, 3.0);
  *(double *)(a1 + 56) = sqrt(v14 * 0.333333333);
  cnstatistics::InverseChi2(v15, (*a2)[198], 1.0);
  *(double *)(a1 + 64) = sqrt(v16);
  cnstatistics::InverseChi2(v17, (*a2)[198], 1.0);
  *(double *)(a1 + 72) = sqrt(v23);
  v24 = *a2;
  v25 = (*a2)[194];
  *(double *)(a1 + 24) = v25;
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v25 < 0.0)
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid direction_of_travel_difference_from_convergence_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  v26 = v24[195];
  *(double *)(a1 + 32) = v26;
  if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v26 < 0.0)
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid direction_of_travel_difference_from_passthrough_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  v27 = v24[199];
  *(double *)(a1 + 40) = v27;
  if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v27 < 0.0)
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid position_difference_from_convergence_tolerance_m_: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  v28 = v24[200];
  *(double *)(a1 + 48) = v28;
  if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v28 < 0.0)
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid position_difference_from_passthrough_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  v29 = v24[201];
  *(double *)(a1 + 80) = v29;
  if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v29 < 0.0)
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid speed_difference_from_convergence_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  v30 = v24[202];
  *(double *)(a1 + 88) = v30;
  if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v30 < 0.0)
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid speed_difference_from_passthrough_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  v31 = v24[204];
  *(double *)(a1 + 96) = v31;
  if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v31 < 0.0)
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid time_difference_from_current_time_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  v32 = v24[203];
  *(double *)(a1 + 104) = v32;
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v32 < 0.0)
  {
    v34 = 12;
    v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid time_difference_from_solution_to_check_against_tolerance_: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  result = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

