double makeSeconds(unint64_t a1)
{
  return (double)a1 / 1000.0 / 1000.0 / 1000.0;
}

uint64_t benchmarkBlock()
{
  return dispatch_benchmark();
}

void benchmarkStatsUpdated(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>, double a5@<D0>)
{
  _QWORD *v9;
  double v10;
  double v11;
  unint64_t v12;
  int v13;
  double v14;
  double v15;
  double v16;
  int v17;
  void (*v18)(_QWORD *, _OWORD *);
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[4];

  v9 = a3;
  v10 = CACurrentMediaTime();
  v11 = (double)a2 / 1000.0 / 1000.0 / 1000.0;
  v12 = *(_QWORD *)a1 + a2;
  *(_QWORD *)a1 = v12;
  v13 = *(_DWORD *)(a1 + 8) + 1;
  v14 = *(double *)(a1 + 32);
  *(_DWORD *)(a1 + 8) = v13;
  *(double *)(a1 + 32) = fmax(v14, v11);
  v15 = (double)v12 / 1000.0 / 1000.0 / 1000.0 / (double)v13;
  v16 = fmax(*(double *)(a1 + 48), v11);
  *(double *)(a1 + 40) = v15;
  *(double *)(a1 + 48) = v16;
  if (v10 - *(double *)(a1 + 16) > a5)
  {
    v17 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v17 + 1;
    if (v17)
      v15 = *(double *)(a1 + 56) + (v15 - *(double *)(a1 + 56)) / (double)(v17 + 1);
    *(double *)(a1 + 56) = v15;
    v18 = (void (*)(_QWORD *, _OWORD *))v9[2];
    v19 = *(_OWORD *)(a1 + 16);
    v23[0] = *(_OWORD *)a1;
    v23[1] = v19;
    v20 = *(_OWORD *)(a1 + 48);
    v23[2] = *(_OWORD *)(a1 + 32);
    v23[3] = v20;
    v18(v9, v23);
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(double *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v21 = *(_OWORD *)(a1 + 16);
  *a4 = *(_OWORD *)a1;
  a4[1] = v21;
  v22 = *(_OWORD *)(a1 + 48);
  a4[2] = *(_OWORD *)(a1 + 32);
  a4[3] = v22;

}

uint64_t MeasureUnitsGetSystemDefault()
{
  void *v0;
  unsigned int v1;

  objc_msgSend(MEMORY[0x24BDBCEA0], "currentLocale");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "usesMetricSystem");

  return v1;
}

__n128 computeTriangulation(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  float64x2_t v9;
  unsigned int v10;
  float64x2_t v11;
  float32x4_t v13;
  void *v14;
  void *__src;
  uint64_t v16;
  void *v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  unsigned int v21;
  int v22;

  v4 = a2 >> 2;
  v20[0] = 0;
  v20[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v20, a2 & 0xFFFFFFFC);
  v21 = v4;
  v22 = 4;
  if (a2 >= 1)
  {
    v5 = 0;
    v6 = 1;
    v7 = v20[0];
    do
    {
      if (v4 <= (v6 - 1) >> 2)
        __assert_rtn("assert_in_bounds", "matrixmixin.h", 2269, "((row < mixed().rows()) && (col < mixed().columns())) || cva::detail::assertMessage(\"Index out of bounds!\")");
      v7[((v6 - 1) >> 2) + ((v6 - 1) & 3) * v4] = *(_QWORD *)(a1 + 8 * v5);
      v5 = v6++;
    }
    while (v5 < a2);
  }
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::SVD<cva::Matrix<double,0u,0u,false>>((uint64_t)&v14, v20, 3, 0);
  v8 = (HIDWORD(v16) * v16);
  v18[0] = 0;
  v18[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v18, v8);
  if ((_DWORD)v8)
    memcpy(v18[0], __src, 8 * v8);
  v19 = v16;
  free(v17);
  free(__src);
  free(v14);
  if (v19 < 4 || HIDWORD(v19) < 4)
    __assert_rtn("assert_in_bounds", "matrixmixin.h", 2269, "((row < mixed().rows()) && (col < mixed().columns())) || cva::detail::assertMessage(\"Index out of bounds!\")");
  v9.f64[0] = *((float64_t *)v18[0] + 3);
  v10 = 2 * v19 + 3;
  v11.f64[0] = *((float64_t *)v18[0] + v10);
  v11.f64[1] = *((float64_t *)v18[0] + v10 + v19);
  v9.f64[1] = *((float64_t *)v18[0] + (v19 + 3));
  v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v11);
  free(v18[0]);
  free(v20[0]);
  return (__n128)v13;
}

void sub_2215B5B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 - 80));
  free(*(void **)(v1 - 56));
  _Unwind_Resume(a1);
}

void **cva::SVD<cva::Matrix<double,0u,0u,false>,true>::~SVD(void **a1)
{
  free(a1[6]);
  free(a1[3]);
  free(*a1);
  return a1;
}

uint64_t cva::MatrixData<double,0ul,0ul,false>::allocate(void **a1, uint64_t a2)
{
  size_t v3;
  uint64_t result;
  void *v5;
  void *memptr;

  if (*a1)
    cva::MatrixData<double,0ul,0ul,false>::allocate();
  v3 = (8 * a2 + 31) & 0xFFFFFFFFFFFFFFE0;
  a1[1] = (void *)(v3 >> 3);
  memptr = 0;
  result = malloc_type_posix_memalign(&memptr, 0x20uLL, v3, 0x49090899uLL);
  v5 = memptr;
  *a1 = memptr;
  if (!v5)
    cva::MatrixData<double,0ul,0ul,false>::allocate();
  return result;
}

uint64_t cva::SVD<cva::Matrix<double,0u,0u,false>,true>::SVD<cva::Matrix<double,0u,0u,false>>(uint64_t a1, _DWORD *a2, char a3, int a4)
{
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decompose<cva::Matrix<double,0u,0u,false> const&>(a1, a2, a3, a4);
  return a1;
}

void sub_2215B5C50(_Unwind_Exception *a1)
{
  void **v1;

  free(v1[6]);
  free(v1[3]);
  free(*v1);
  _Unwind_Resume(a1);
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decompose<cva::Matrix<double,0u,0u,false> const&>(uint64_t a1, _DWORD *a2, char a3, int a4)
{
  int v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 76) = v6;
  if (!(v5 | v6))
  {
    *(_BYTE *)(a1 + 80) = 1;
LABEL_8:
    v7 = *(void **)(a1 + 48);
    *(_DWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    free(v7);
    v8 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v8);
    v9 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    free(v9);
    return;
  }
  if (a4 && fabsf((float)(v5 - v6)) >= (float)((float)(v6 + v5) * 0.1))
    cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(a1, a2, a3);
  else
    cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::Matrix<double,0u,0u,false>>(a1, (uint64_t)a2, a3);
  if (!*(_BYTE *)(a1 + 80))
    goto LABEL_8;
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::Matrix<double,0u,0u,false>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  void *__dst[3];

  v6 = (*(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16));
  __dst[0] = 0;
  __dst[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(__dst, v6);
  if ((_DWORD)v6)
    memcpy(__dst[0], *(const void **)a2, 8 * v6);
  __dst[2] = *(void **)(a2 + 16);
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)__dst, a3);
  free(__dst[0]);
}

void sub_2215B5DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(uint64_t a1, _DWORD *a2, int a3)
{
  char v3;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  void **v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;

  v3 = a3;
  v57 = *MEMORY[0x24BDAC8D0];
  if (a2[5] >= a2[4])
  {
    v50 = a2;
    v53 = (void **)a2;
    v54 = &v50;
    cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>>(a1, &v53, a3 != 0);
    if (!*(_BYTE *)(a1 + 80))
      return;
    v13 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v13)
    {
      v14 = *(double **)(a1 + 48);
      v15 = 8 * v13;
      do
      {
        *v14 = sqrt(*v14);
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    if ((v3 & 2) == 0)
      return;
    v16 = cva::SVD<cva::Matrix<double,0u,0u,false>,true>::S((_DWORD *)a1);
    v43 = v16;
    v44 = v17;
    v45 = &v43;
    v46 = 0x3E112E0BE826D695;
    v47 = a1;
    if (*(_DWORD *)(a1 + 20) != (_DWORD)v16)
      cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(v16, (uint64_t)v17, v18);
    v48 = (uint64_t *)&v45;
    v49 = &v47;
    if (*(_DWORD *)(a1 + 16) != a2[4])
      cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(v16, (uint64_t)v17, v18);
    v19 = (uint64_t *)(a1 + 24);
    v20 = HIDWORD(v43);
    if (__PAIR64__(a2[5], HIDWORD(v43)) == *(_QWORD *)(a1 + 40))
    {
      v54 = (void **)&v48;
      v55 = (uint64_t **)a2;
LABEL_30:
      v56 = 0x3FF0000000000000;
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>,cva::Matrix<double,0u,0u,false>>(a1 + 24, (uint64_t)&v53);
      return;
    }
    v27 = *v19;
    if (*v17 == *v19)
    {
      v28 = a2[5];
    }
    else
    {
      v28 = a2[5];
      if (*(_QWORD *)a1 != v27 && *(_QWORD *)a2 != v27)
      {
        *(_DWORD *)(a1 + 40) = HIDWORD(v43);
        *(_DWORD *)(a1 + 44) = v28;
        cva::MatrixData<double,0ul,0ul,false>::reserve(a1 + 24, (v28 * v20));
        v32 = a2[4];
        v33 = *(_DWORD *)(*v49 + 16);
        v54 = (void **)&v48;
        v55 = (uint64_t **)a2;
        if (v33 != v32)
          cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(v29, v30, v31);
        goto LABEL_30;
      }
    }
    v50 = 0;
    v51 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v50, (v28 * HIDWORD(v43)));
    v40 = a2[4];
    v39 = a2[5];
    LODWORD(v52) = *(_DWORD *)(*v48 + 4);
    HIDWORD(v52) = v39;
    v54 = (void **)&v48;
    v55 = (uint64_t **)a2;
    if (*(_DWORD *)(*v49 + 16) != v40)
      __assert_rtn("MatrixMultExpr", "matrixmultexpr.h", 100, "((lhs.ref().columns() == rhs.ref().rows())) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
    v56 = 0x3FF0000000000000;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>,cva::Matrix<double,0u,0u,false>>((uint64_t)&v50, (uint64_t)&v53);
    v36 = *(void **)(a1 + 24);
    v41 = *(_QWORD *)(a1 + 32);
    v42 = v51;
    *(_QWORD *)(a1 + 24) = v50;
    *(_QWORD *)(a1 + 32) = v42;
    v50 = v36;
    v51 = v41;
    *(_QWORD *)(a1 + 40) = v52;
LABEL_36:
    v52 = 0;
    free(v36);
    return;
  }
  v50 = a2;
  v53 = &v50;
  v54 = (void **)a2;
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>>(a1, (uint64_t **)&v53, 2 * (a3 != 0));
  if (*(_BYTE *)(a1 + 80))
  {
    v6 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v6)
    {
      v7 = *(double **)(a1 + 48);
      v8 = 8 * v6;
      do
      {
        *v7 = sqrt(*v7);
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    if ((v3 & 1) != 0)
    {
      v47 = a1 + 24;
      v9 = cva::SVD<cva::Matrix<double,0u,0u,false>,true>::S((_DWORD *)a1);
      v43 = v9;
      v44 = v10;
      v45 = &v43;
      v46 = 0x3E112E0BE826D695;
      if (*(_DWORD *)(a1 + 40) != HIDWORD(v9))
        cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(v9, (uint64_t)v10, v11);
      v48 = &v47;
      v49 = (uint64_t *)&v45;
      if (a2[5] != *(_DWORD *)(a1 + 44))
        cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(v9, (uint64_t)v10, v11);
      v12 = a2[4];
      if (v12 == *(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 20) == (_DWORD)v9)
      {
        v54 = (void **)a2;
        v55 = &v48;
LABEL_25:
        v56 = 0x3FF0000000000000;
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>>(a1, (uint64_t)&v53);
        return;
      }
      v21 = *(void **)a1;
      if (*(_QWORD *)a2 != *(_QWORD *)a1 && *(void **)(a1 + 24) != v21 && (void *)*v10 != v21)
      {
        *(_DWORD *)(a1 + 16) = v12;
        *(_DWORD *)(a1 + 20) = v9;
        cva::MatrixData<double,0ul,0ul,false>::reserve(a1, (v12 * v9));
        v25 = a2[5];
        v26 = *(_DWORD *)(*v48 + 20);
        v54 = (void **)a2;
        v55 = &v48;
        if (v25 != v26)
          cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(v22, v23, v24);
        goto LABEL_25;
      }
      v50 = 0;
      v51 = 0;
      cva::MatrixData<double,0ul,0ul,false>::allocate(&v50, (v12 * v9));
      v34 = *(_DWORD *)*v49;
      v35 = a2[5];
      LODWORD(v52) = a2[4];
      HIDWORD(v52) = v34;
      v54 = (void **)a2;
      v55 = &v48;
      if (v35 != *(_DWORD *)(*v48 + 20))
        __assert_rtn("MatrixMultExpr", "matrixmultexpr.h", 100, "((lhs.ref().columns() == rhs.ref().rows())) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
      v56 = 0x3FF0000000000000;
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>>((uint64_t)&v50, (uint64_t)&v53);
      v36 = *(void **)a1;
      v37 = *(_QWORD *)(a1 + 8);
      v38 = v51;
      *(_QWORD *)a1 = v50;
      *(_QWORD *)(a1 + 8) = v38;
      v50 = v36;
      v51 = v37;
      *(_QWORD *)(a1 + 16) = v52;
      goto LABEL_36;
    }
  }
}

void sub_2215B620C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  free(a17);
  _Unwind_Resume(a1);
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<0u,0u>(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  void *v8;
  void **v9;
  void *v10;
  cva::Logger *v11;
  void *v12[2];
  unsigned int v13;
  int v14;
  uint64_t v15;

  v6 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  if ((int)v5 >= (int)v6)
    v7 = v6;
  else
    v7 = v5;
  *(_DWORD *)(a1 + 64) = v7;
  cva::MatrixData<double,0ul,0ul,false>::reserve(a1 + 48, v7);
  if ((a3 & 1) != 0)
  {
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v7;
    cva::MatrixData<double,0ul,0ul,false>::reserve(a1, v7 * v6);
  }
  else
  {
    v8 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v8);
  }
  v9 = (void **)(a1 + 24);
  if ((a3 & 2) != 0)
  {
    *(_DWORD *)(a1 + 40) = v7;
    *(_DWORD *)(a1 + 44) = v5;
    cva::MatrixData<double,0ul,0ul,false>::reserve(a1 + 24, v7 * v5);
  }
  else
  {
    v10 = *v9;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *v9 = 0;
    free(v10);
  }
  v15 = 0;
  v14 = 0;
  cva::vecLib::gesvd<double>();
  v12[0] = 0;
  v12[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v12, 0.0);
  v13 = 0.0;
  v11 = (cva::Logger *)cva::vecLib::gesvd<double>();
  if (v14 < 0)
    __assert_rtn("decomposeDirect", "matrixsvd.h", 439, "(info >= 0) || cva::detail::assertMessage(\"gesvd() compute SVD failed!\")");
  if (v14)
  {
    cva::Logger::instance(v11);
    cva::Logger::logInCategory();
  }
  free(v12[0]);
  *(_BYTE *)(a1 + 80) = v14 == 0;
}

void sub_2215B6490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  free(a18);
  _Unwind_Resume(a1);
}

void cva::MatrixData<double,0ul,0ul,false>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
      cva::MatrixData<double,0ul,0ul,false>::allocate((void **)a1, a2);
    }
  }
  else
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>>(uint64_t a1, uint64_t **a2, char a3)
{
  _QWORD **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  void *v12[2];
  int v13;
  int v14;
  char v15[8];
  uint64_t *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 1;
  v7 = (*((_DWORD *)a2[1] + 5) * *(_DWORD *)(**a2 + 20));
  v12[0] = 0;
  v12[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v12, v7);
  v8 = *a2;
  v9 = **a2;
  v10 = *v6;
  v11 = *((_DWORD *)*v6 + 5);
  v13 = *(_DWORD *)(v9 + 20);
  v14 = v11;
  v16 = v8;
  v17 = v10;
  if (*(_DWORD *)(v9 + 16) != v10[4])
    __assert_rtn("MatrixMultExpr", "matrixmultexpr.h", 100, "((lhs.ref().columns() == rhs.ref().rows())) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
  v18 = 0x3FF0000000000000;
  cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>((uint64_t)v12, (uint64_t)v15);
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)v12, a3);
  free(v12[0]);
}

void sub_2215B6604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

uint64_t cva::SVD<cva::Matrix<double,0u,0u,false>,true>::S(_DWORD *a1)
{
  uint64_t v1;
  unsigned int v2;

  v2 = a1[18];
  LODWORD(v1) = a1[19];
  if (v1 >= v2)
    v1 = v2;
  else
    v1 = v1;
  if (v1 > a1[16])
    cva::SVD<cva::Matrix<double,0u,0u,false>,true>::S();
  return v1 | (v1 << 32);
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>>(uint64_t a1, _QWORD **a2, char a3)
{
  uint64_t **v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  void *v12[2];
  int v13;
  int v14;
  char v15[8];
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 1;
  v7 = (*(_DWORD *)(*a2[1] + 16) * *((_DWORD *)*a2 + 4));
  v12[0] = 0;
  v12[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v12, v7);
  v8 = *a2;
  v9 = *v6;
  v10 = **v6;
  v11 = *(_DWORD *)(v10 + 16);
  v13 = *((_DWORD *)*a2 + 4);
  v14 = v11;
  v16 = v8;
  v17 = v9;
  if (v8[5] != *(_DWORD *)(v10 + 20))
    __assert_rtn("MatrixMultExpr", "matrixmultexpr.h", 100, "((lhs.ref().columns() == rhs.ref().rows())) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
  v18 = 0x3FF0000000000000;
  cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>((uint64_t)v12, (uint64_t)v15);
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)v12, a3);
  free(v12[0]);
}

void sub_2215B675C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v5 == *(_QWORD *)a1 || *(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v10 = (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v5 + 20));
    v15 = 0;
    v16 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v15, v10);
    v11 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v17) = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 20);
    HIDWORD(v17) = v11;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(&v15, a2);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v16;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    v15 = v12;
    v16 = v13;
    *(_QWORD *)(a1 + 16) = v17;
    v17 = 0;
    free(v12);
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(a1 + 16);
    if ((_DWORD)v6 != *(_DWORD *)(v5 + 20) || (v7 = *(_DWORD *)(a1 + 20), v7 != *(_DWORD *)(v4 + 20)))
    {
      cva::Logger::instance((cva::Logger *)a1);
      v8 = cva::Logger::logInCategory();
      v6 = *(unsigned int *)(a1 + 16);
      v5 = **(_QWORD **)(a2 + 8);
      if ((_DWORD)v6 != *(_DWORD *)(v5 + 20)
        || (v4 = *(_QWORD *)(a2 + 16), v7 = *(_DWORD *)(v4 + 20), *(_DWORD *)(a1 + 20) != v7))
      {
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(v8, v9, v6);
      }
    }
    if (*(_DWORD *)(v5 + 16) * (_DWORD)v6 && v7 * *(_DWORD *)(v4 + 16))
    {
      cva::VecLib<double>::gemm();
    }
    else if ((_DWORD)v6 * v7)
    {
      bzero(*(void **)a1, 8 * (v6 * v7));
    }
  }
}

void sub_2215B6918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v16 = (***(_DWORD ***)(*(_QWORD *)(a2 + 16) + 8) * *(_DWORD *)(v4 + 16));
    v20 = 0;
    v21 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v20, v16);
    v17 = ***(_DWORD ***)(*(_QWORD *)(a2 + 16) + 8);
    LODWORD(v22) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v22) = v17;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>>(&v20, a2);
    v14 = *(void **)a1;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = v21;
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v19;
    v20 = v14;
    v21 = v18;
    *(_QWORD *)(a1 + 16) = v22;
    v22 = 0;
    goto LABEL_12;
  }
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 != *(_DWORD *)(v4 + 16) || (v6 = *(_DWORD *)(a1 + 20), v7 = *(uint64_t ***)(a2 + 16), v6 != *(_DWORD *)*v7[1]))
  {
    cva::Logger::instance((cva::Logger *)a1);
    v8 = cva::Logger::logInCategory();
    v5 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a2 + 8);
    if (v5 != *(_DWORD *)(v4 + 16)
      || (v7 = *(uint64_t ***)(a2 + 16), v6 = *(_DWORD *)*v7[1], *(_DWORD *)(a1 + 20) != v6))
    {
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(v8, v9, v10);
    }
  }
  if (*(_DWORD *)(v4 + 20) * v5)
  {
    v11 = (v6 * *(_DWORD *)(**v7 + 20));
    if ((_DWORD)v11)
    {
      v20 = 0;
      v21 = 0;
      cva::MatrixData<double,0ul,0ul,false>::allocate(&v20, v11);
      v12 = *(_DWORD *)*v7[1];
      LODWORD(v22) = *(_DWORD *)(**v7 + 20);
      HIDWORD(v22) = v12;
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>((cva::Logger *)&v20, v7, v13);
      cva::VecLib<double>::gemm();
      v14 = v20;
LABEL_12:
      free(v14);
      return;
    }
  }
  v15 = v5 * v6;
  if (v15)
    bzero(*(void **)a1, 8 * v15);
}

void sub_2215B6B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>(cva::Logger *a1, uint64_t **a2, uint64_t a3)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int **v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24[2];
  uint64_t v25;
  int v26;
  int v27;
  unsigned int ***v28;
  char v29;
  int v30;
  unsigned int v31;
  unsigned int ****v32;
  _DWORD v33[2];
  uint64_t *v34;
  uint64_t v35;
  _QWORD v36[3];
  unsigned int **v37;

  v5 = *((_DWORD *)a1 + 4);
  v6 = *a2;
  v7 = **a2;
  if (v5 != *(_DWORD *)(v7 + 20) || (v8 = *((_DWORD *)a1 + 5), v9 = (unsigned int **)a2[1], v10 = *v9, v8 != **v9))
  {
    cva::Logger::instance(a1);
    v11 = cva::Logger::logInCategory();
    v5 = *((_DWORD *)a1 + 4);
    v6 = *a2;
    v7 = **a2;
    if (v5 != *(_DWORD *)(v7 + 20) || (v9 = (unsigned int **)a2[1], v10 = *v9, v8 = **v9, *((_DWORD *)a1 + 5) != v8))
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(v11, v12, a3);
  }
  v37 = v9;
  if (v8 >= v10[1])
    v8 = v10[1];
  if (v8 > *(_DWORD *)(v7 + 16))
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>();
  v33[0] = v5;
  v33[1] = v8;
  v34 = v6;
  v35 = 0;
  v28 = &v37;
  v30 = v5;
  v31 = v8;
  v32 = &v28;
  v36[0] = v33;
  v36[1] = &v29;
  v13 = *(_QWORD *)a1;
  v24[0] = v5;
  v24[1] = v8;
  v25 = v13;
  v26 = v5;
  v27 = 0;
  cva::MatrixRef<double,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(v24, v36, a3);
  v14 = *(_DWORD *)(*v6 + 16);
  v15 = *((_DWORD *)a1 + 5);
  v16 = v15 >= v14;
  v17 = v15 - v14;
  if (v17 != 0 && v16)
  {
    v18 = *((_DWORD *)a1 + 4);
    v19 = *(_QWORD *)a1 + 8 * v18 * v14;
    v20 = v18 * v17;
    v21 = v20 == 0;
    if (v20)
      v22 = (_BYTE *)v19;
    else
      v22 = 0;
    v23 = (_BYTE *)(v19 + 8 * v20);
    if (v21)
      v23 = 0;
    if (v22 != v23)
      bzero(v22, ((v23 - v22 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
}

int *cva::MatrixRef<double,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(int *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  cva::Logger *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  void *v23[2];
  int v24;
  int v25;

  v5 = *((_QWORD *)a1 + 1) - 8 * a1[5];
  if (***(_QWORD ***)(*a2 + 8) == v5 || **(_QWORD **)(****(_QWORD ****)(a2[1] + 16) + 8) == v5)
  {
    v6 = *a1;
    v7 = a1[1];
    v23[0] = 0;
    v23[1] = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(v23, (v7 * v6));
    v24 = v6;
    v25 = v7;
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((cva::Logger *)v23, a2, v8);
    v10 = *a1;
    if (*a1 != v24 || (v11 = a1[1], v11 != v25))
    {
      cva::Logger::instance(v9);
      cva::Logger::logInCategory();
      v10 = *a1;
      if (*a1 != v24 || (v11 = a1[1], v11 != v25))
        __assert_rtn("assert_equal_size", "matrixfun.h", 163, "(lhs.rows() == rhs.rows() && lhs.columns() == rhs.columns()) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
    }
    v12 = a1[4];
    v13 = v10 * v11 == 0;
    if (v10 * v11)
      v14 = (_QWORD *)*((_QWORD *)a1 + 1);
    else
      v14 = 0;
    v15 = *((_QWORD *)a1 + 1) + 8 * (v12 * v11);
    if (v13)
      v15 = 0;
    v16 = v23[0];
    if (v14 != (_QWORD *)v15)
    {
      v17 = 0;
      v18 = v12 - v10;
      v19 = (uint64_t *)v23[0];
      do
      {
        v20 = *v19++;
        *v14 = v20;
        if (v17 + 1 >= v10)
          v21 = v18;
        else
          v21 = 0;
        v14 += v21 + 1;
        if (v17 + 1 < v10)
          ++v17;
        else
          v17 = 0;
      }
      while (v14 != (_QWORD *)v15);
    }
    free(v16);
  }
  else
  {
    cva::detail::assignNoAlias<cva::MatrixRef<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((cva::Logger *)a1, a2, a3);
  }
  return a1;
}

void sub_2215B6E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  _Unwind_Resume(a1);
}

void cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(cva::Logger *a1, _QWORD *a2, uint64_t a3)
{
  cva::Logger *v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = (_DWORD *)*a2;
  if (v5 != *(_DWORD *)*a2 || (v7 = *((_DWORD *)a1 + 5), v7 != v6[1]))
  {
    cva::Logger::instance(a1);
    a1 = (cva::Logger *)cva::Logger::logInCategory();
    v5 = *((_DWORD *)v4 + 4);
    v6 = (_DWORD *)*a2;
    if (v5 != *(_DWORD *)*a2 || (v7 = *((_DWORD *)v4 + 5), v7 != v6[1]))
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>((uint64_t)a1, (uint64_t)a2, a3);
  }
  v8 = v7 * v5;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = a2[1];
    v12 = *(double **)v4;
    v13 = 8 * v8;
    do
    {
      if (v5 <= v10 || v6[1] <= HIDWORD(v10))
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)a1, (uint64_t)a2, a3);
      v14 = v6[5] + HIDWORD(v10);
      v15 = **((_QWORD **)v6 + 1);
      v16 = *(_DWORD *)(v15 + 16);
      if (v16 <= v14 || (v17 = v6[4] + v10, v17 >= *(_DWORD *)(v15 + 20)))
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)a1, (uint64_t)a2, a3);
      v18 = *(double *)(*(_QWORD *)v15 + 8 * (v14 + v16 * v17));
      *v12++ = v18
             * cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>::operator()(v11, v9, HIDWORD(v9));
      v19 = (v10 + 1);
      v5 = *v6;
      if (*v6 <= (int)v19)
        v10 = (v10 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v10 = v10 & 0xFFFFFFFF00000000 | v19;
      v20 = (v9 + 1);
      if (*(_DWORD *)(v11 + 4) <= (int)v20)
        v9 = (v9 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v9 = v9 & 0xFFFFFFFF00000000 | v20;
      v13 -= 8;
    }
    while (v13);
  }
}

void cva::detail::assignNoAlias<cva::MatrixRef<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(cva::Logger *a1, _QWORD *a2, uint64_t a3)
{
  cva::Logger *v4;
  signed int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  double *v10;
  uint64_t v11;
  double *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v4 = a1;
  v5 = *(_DWORD *)a1;
  v6 = (_DWORD *)*a2;
  if (*(_DWORD *)a1 != *(_DWORD *)*a2 || (v7 = *((_DWORD *)a1 + 1), v7 != v6[1]))
  {
    cva::Logger::instance(a1);
    a1 = (cva::Logger *)cva::Logger::logInCategory();
    v5 = *(_DWORD *)v4;
    v6 = (_DWORD *)*a2;
    if (*(_DWORD *)v4 != *(_DWORD *)*a2 || (v7 = *((_DWORD *)v4 + 1), v7 != v6[1]))
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>((uint64_t)a1, (uint64_t)a2, a3);
  }
  v8 = v7 * v5;
  v9 = *((_DWORD *)v4 + 4);
  if (v7 * v5)
    v10 = (double *)*((_QWORD *)v4 + 1);
  else
    v10 = 0;
  v11 = *((_QWORD *)v4 + 1) + 8 * (v9 * v7);
  if (v8)
    v12 = (double *)v11;
  else
    v12 = 0;
  if (v10 != v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = a2[1];
    v17 = v9 - v5;
    v18 = v5;
    do
    {
      if (v18 <= v14 || v6[1] <= HIDWORD(v14))
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)a1, (uint64_t)a2, a3);
      v19 = v6[5] + HIDWORD(v14);
      v20 = **((_QWORD **)v6 + 1);
      v21 = *(_DWORD *)(v20 + 16);
      if (v21 <= v19 || (v22 = v6[4] + v14, v22 >= *(_DWORD *)(v20 + 20)))
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)a1, (uint64_t)a2, a3);
      v23 = *(double *)(*(_QWORD *)v20 + 8 * (v19 + v21 * v22));
      *v10 = v23
           * cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>::operator()(v16, v13, HIDWORD(v13));
      v24 = (v14 + 1);
      v18 = *v6;
      if (*v6 <= (int)v24)
        v14 = (v14 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v14 = v14 & 0xFFFFFFFF00000000 | v24;
      v25 = (v13 + 1);
      if (*(_DWORD *)(v16 + 4) <= (int)v25)
        v13 = (v13 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v13 = v13 & 0xFFFFFFFF00000000 | v25;
      if (v15 + 1 >= v5)
        v26 = v17;
      else
        v26 = 0;
      v10 += v26 + 1;
      if (v15 + 1 < v5)
        ++v15;
      else
        v15 = 0;
    }
    while (v10 != v12);
  }
}

double cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  double v7;
  double v8;
  double result;

  if (*(_DWORD *)(a1 + 4) <= a2 || *(_DWORD *)(a1 + 8) <= a3)
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(a1, a2, a3);
  v3 = ***(double ****)(a1 + 16);
  v4 = *(_DWORD *)(*(_QWORD *)v3 + 4);
  if (**(_DWORD **)v3 < v4)
    v4 = **(_DWORD **)v3;
  v5 = a3 % v4;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  if (*(_DWORD *)(v6 + 16) <= v5)
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(a1, a2, a3);
  v7 = *(double *)(*(_QWORD *)v6 + 8 * v5);
  v8 = fabs(v7);
  result = 1.0 / v7;
  if (v8 < v3[1])
    return 0.0;
  return result;
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = **(_QWORD **)(a2 + 16);
  if (*(_QWORD *)v4 == *(_QWORD *)a1 || *(_QWORD *)v5 == *(_QWORD *)a1)
  {
    v10 = (*(_DWORD *)(v5 + 16) * *(_DWORD *)(v4 + 16));
    v15 = 0;
    v16 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v15, v10);
    v11 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 16);
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    HIDWORD(v17) = v11;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>(&v15, a2);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v16;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    v15 = v12;
    v16 = v13;
    *(_QWORD *)(a1 + 16) = v17;
    v17 = 0;
    free(v12);
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(a1 + 16);
    if ((_DWORD)v6 != *(_DWORD *)(v4 + 16) || (v7 = *(_DWORD *)(a1 + 20), v7 != *(_DWORD *)(v5 + 16)))
    {
      cva::Logger::instance((cva::Logger *)a1);
      v8 = cva::Logger::logInCategory();
      v6 = *(unsigned int *)(a1 + 16);
      v4 = *(_QWORD *)(a2 + 8);
      if ((_DWORD)v6 != *(_DWORD *)(v4 + 16)
        || (v5 = **(_QWORD **)(a2 + 16), v7 = *(_DWORD *)(v5 + 16), *(_DWORD *)(a1 + 20) != v7))
      {
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(v8, v9, v6);
      }
    }
    if (*(_DWORD *)(v4 + 20) * (_DWORD)v6 && v7 * *(_DWORD *)(v5 + 20))
    {
      cva::VecLib<double>::gemm();
    }
    else if ((_DWORD)v6 * v7)
    {
      bzero(*(void **)a1, 8 * (v6 * v7));
    }
  }
}

void sub_2215B7444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  _Unwind_Resume(a1);
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>,cva::Matrix<double,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v16 = (*(_DWORD *)(v4 + 20) * *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 4));
    v20 = 0;
    v21 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v20, v16);
    v17 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v22) = *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 4);
    HIDWORD(v22) = v17;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>,cva::Matrix<double,0u,0u,false>>(&v20, a2);
    v14 = *(void **)a1;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = v21;
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v19;
    v20 = v14;
    v21 = v18;
    *(_QWORD *)(a1 + 16) = v22;
    v22 = 0;
    goto LABEL_12;
  }
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD ***)(a2 + 8);
  if (v5 != *(_DWORD *)(**v6 + 4) || (v7 = *(_DWORD *)(a1 + 20), v7 != *(_DWORD *)(v4 + 20)))
  {
    cva::Logger::instance((cva::Logger *)a1);
    v8 = cva::Logger::logInCategory();
    v5 = *(_DWORD *)(a1 + 16);
    v6 = *(_QWORD ***)(a2 + 8);
    if (v5 != *(_DWORD *)(**v6 + 4)
      || (v4 = *(_QWORD *)(a2 + 16), v7 = *(_DWORD *)(v4 + 20), *(_DWORD *)(a1 + 20) != v7))
    {
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(v8, v9, v10);
    }
  }
  v11 = (*(_DWORD *)(*v6[1] + 16) * v5);
  if ((_DWORD)v11 && v7 * *(_DWORD *)(v4 + 16))
  {
    v20 = 0;
    v21 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v20, v11);
    v12 = *(_DWORD *)(*v6[1] + 16);
    LODWORD(v22) = *(_DWORD *)(**v6 + 4);
    HIDWORD(v22) = v12;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>((cva::Logger *)&v20, (uint64_t)v6, v13);
    cva::VecLib<double>::gemm();
    v14 = v20;
LABEL_12:
    free(v14);
    return;
  }
  v15 = v5 * v7;
  if (v15)
    bzero(*(void **)a1, 8 * v15);
}

void sub_2215B7670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  _Unwind_Resume(a1);
}

int *cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>(cva::Logger *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int **v6;
  unsigned int *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int *result;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26[2];
  uint64_t v27;
  unsigned int v28;
  int v29;
  char v30;
  unsigned int v31;
  int v32;
  unsigned int ***v33;
  _DWORD v34[2];
  uint64_t *v35;
  uint64_t v36;
  _QWORD v37[3];
  unsigned int **v38;

  v5 = *((_DWORD *)a1 + 4);
  v6 = *(unsigned int ***)a2;
  v7 = **(unsigned int ***)a2;
  if (v5 != v7[1] || (v8 = *((_DWORD *)a1 + 5), v9 = *(uint64_t **)(a2 + 8), v10 = *v9, v8 != *(_DWORD *)(*v9 + 16)))
  {
    cva::Logger::instance(a1);
    v11 = cva::Logger::logInCategory();
    v5 = *((_DWORD *)a1 + 4);
    v6 = *(unsigned int ***)a2;
    v7 = **(unsigned int ***)a2;
    if (v5 != v7[1] || (v9 = *(uint64_t **)(a2 + 8), v10 = *v9, v8 = *(_DWORD *)(*v9 + 16), *((_DWORD *)a1 + 5) != v8))
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(v11, v12, a3);
  }
  v38 = v6;
  v13 = *v7;
  if (*v7 >= v5)
    v13 = v5;
  if (v13 > *(_DWORD *)(v10 + 20))
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>();
  v34[0] = v13;
  v34[1] = v8;
  v35 = v9;
  v36 = 0;
  v31 = v13;
  v32 = v8;
  v33 = &v38;
  v37[0] = v34;
  v37[1] = &v30;
  v14 = *(_QWORD *)a1;
  v26[0] = v13;
  v26[1] = v8;
  v27 = v14;
  v28 = v5;
  v29 = 0;
  result = cva::MatrixRef<double,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(v26, v37, a3);
  v16 = *(unsigned int *)(*v9 + 20);
  v17 = *((_DWORD *)a1 + 4);
  if (v17 > v16)
  {
    v18 = v17 - v16;
    v19 = *((_DWORD *)a1 + 5);
    v20 = v19 * (v17 - v16);
    v21 = v20 == 0;
    if (v20)
      v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v16);
    else
      v22 = 0;
    v23 = *(_QWORD *)a1 + 8 * v16 + 8 * v19 * v17;
    if (v21)
      v23 = 0;
    if (v22 != (_QWORD *)v23)
    {
      v24 = 0;
      do
      {
        *v22 = 0;
        if (v24 + 1 >= v18)
          v25 = v16;
        else
          v25 = 0;
        v22 += v25 + 1;
        if (v24 + 1 < v18)
          ++v24;
        else
          v24 = 0;
      }
      while (v22 != (_QWORD *)v23);
    }
  }
  return result;
}

int *cva::MatrixRef<double,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(int *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  cva::Logger *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  void *v23[2];
  int v24;
  int v25;

  v5 = *((_QWORD *)a1 + 1) - 8 * a1[5];
  if (***(_QWORD ***)(*a2 + 8) == v5 || **(_QWORD **)(***(_QWORD ***)(a2[1] + 16) + 8) == v5)
  {
    v6 = *a1;
    v7 = a1[1];
    v23[0] = 0;
    v23[1] = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(v23, (v7 * v6));
    v24 = v6;
    v25 = v7;
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>((cva::Logger *)v23, a2, v8);
    v10 = *a1;
    if (*a1 != v24 || (v11 = a1[1], v11 != v25))
    {
      cva::Logger::instance(v9);
      cva::Logger::logInCategory();
      v10 = *a1;
      if (*a1 != v24 || (v11 = a1[1], v11 != v25))
        __assert_rtn("assert_equal_size", "matrixfun.h", 163, "(lhs.rows() == rhs.rows() && lhs.columns() == rhs.columns()) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
    }
    v12 = a1[4];
    v13 = v10 * v11 == 0;
    if (v10 * v11)
      v14 = (_QWORD *)*((_QWORD *)a1 + 1);
    else
      v14 = 0;
    v15 = *((_QWORD *)a1 + 1) + 8 * (v12 * v11);
    if (v13)
      v15 = 0;
    v16 = v23[0];
    if (v14 != (_QWORD *)v15)
    {
      v17 = 0;
      v18 = v12 - v10;
      v19 = (uint64_t *)v23[0];
      do
      {
        v20 = *v19++;
        *v14 = v20;
        if (v17 + 1 >= v10)
          v21 = v18;
        else
          v21 = 0;
        v14 += v21 + 1;
        if (v17 + 1 < v10)
          ++v17;
        else
          v17 = 0;
      }
      while (v14 != (_QWORD *)v15);
    }
    free(v16);
  }
  else
  {
    cva::detail::assignNoAlias<cva::MatrixRef<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>((cva::Logger *)a1, a2, a3);
  }
  return a1;
}

void sub_2215B79CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  _Unwind_Resume(a1);
}

void cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(cva::Logger *a1, _QWORD *a2, uint64_t a3)
{
  cva::Logger *v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = (_DWORD *)*a2;
  if (v5 != *(_DWORD *)*a2 || (v7 = *((_DWORD *)a1 + 5), v7 != v6[1]))
  {
    cva::Logger::instance(a1);
    a1 = (cva::Logger *)cva::Logger::logInCategory();
    v5 = *((_DWORD *)v4 + 4);
    v6 = (_DWORD *)*a2;
    if (v5 != *(_DWORD *)*a2 || (v7 = *((_DWORD *)v4 + 5), v7 != v6[1]))
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>((uint64_t)a1, (uint64_t)a2, a3);
  }
  v8 = v7 * v5;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = a2[1];
    v12 = *(double **)v4;
    v13 = 8 * v8;
    do
    {
      if (v5 <= v10 || v6[1] <= HIDWORD(v10))
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)a1, (uint64_t)a2, a3);
      v14 = v6[5] + HIDWORD(v10);
      v15 = **((_QWORD **)v6 + 1);
      v16 = *(_DWORD *)(v15 + 16);
      if (v16 <= v14 || (v17 = v6[4] + v10, v17 >= *(_DWORD *)(v15 + 20)))
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)a1, (uint64_t)a2, a3);
      v18 = *(double *)(*(_QWORD *)v15 + 8 * (v14 + v16 * v17));
      *v12++ = v18
             * cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>::operator()(v11, v9, HIDWORD(v9));
      v19 = (v10 + 1);
      v5 = *v6;
      if (*v6 <= (int)v19)
        v10 = (v10 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v10 = v10 & 0xFFFFFFFF00000000 | v19;
      v20 = (v9 + 1);
      if (*(_DWORD *)(v11 + 4) <= (int)v20)
        v9 = (v9 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v9 = v9 & 0xFFFFFFFF00000000 | v20;
      v13 -= 8;
    }
    while (v13);
  }
}

void cva::detail::assignNoAlias<cva::MatrixRef<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(cva::Logger *a1, _QWORD *a2, uint64_t a3)
{
  cva::Logger *v4;
  signed int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  double *v10;
  uint64_t v11;
  double *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v4 = a1;
  v5 = *(_DWORD *)a1;
  v6 = (_DWORD *)*a2;
  if (*(_DWORD *)a1 != *(_DWORD *)*a2 || (v7 = *((_DWORD *)a1 + 1), v7 != v6[1]))
  {
    cva::Logger::instance(a1);
    a1 = (cva::Logger *)cva::Logger::logInCategory();
    v5 = *(_DWORD *)v4;
    v6 = (_DWORD *)*a2;
    if (*(_DWORD *)v4 != *(_DWORD *)*a2 || (v7 = *((_DWORD *)v4 + 1), v7 != v6[1]))
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>((uint64_t)a1, (uint64_t)a2, a3);
  }
  v8 = v7 * v5;
  v9 = *((_DWORD *)v4 + 4);
  if (v7 * v5)
    v10 = (double *)*((_QWORD *)v4 + 1);
  else
    v10 = 0;
  v11 = *((_QWORD *)v4 + 1) + 8 * (v9 * v7);
  if (v8)
    v12 = (double *)v11;
  else
    v12 = 0;
  if (v10 != v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = a2[1];
    v17 = v9 - v5;
    v18 = v5;
    do
    {
      if (v18 <= v14 || v6[1] <= HIDWORD(v14))
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)a1, (uint64_t)a2, a3);
      v19 = v6[5] + HIDWORD(v14);
      v20 = **((_QWORD **)v6 + 1);
      v21 = *(_DWORD *)(v20 + 16);
      if (v21 <= v19 || (v22 = v6[4] + v14, v22 >= *(_DWORD *)(v20 + 20)))
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)a1, (uint64_t)a2, a3);
      v23 = *(double *)(*(_QWORD *)v20 + 8 * (v19 + v21 * v22));
      *v10 = v23
           * cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>::operator()(v16, v13, HIDWORD(v13));
      v24 = (v14 + 1);
      v18 = *v6;
      if (*v6 <= (int)v24)
        v14 = (v14 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v14 = v14 & 0xFFFFFFFF00000000 | v24;
      v25 = (v13 + 1);
      if (*(_DWORD *)(v16 + 4) <= (int)v25)
        v13 = (v13 & 0xFFFFFFFF00000000) + 0x100000000;
      else
        v13 = v13 & 0xFFFFFFFF00000000 | v25;
      if (v15 + 1 >= v5)
        v26 = v17;
      else
        v26 = 0;
      v10 += v26 + 1;
      if (v15 + 1 < v5)
        ++v15;
      else
        v15 = 0;
    }
    while (v10 != v12);
  }
}

double cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  double v7;
  double v8;
  double result;

  if (*(_DWORD *)(a1 + 4) <= a2 || *(_DWORD *)(a1 + 8) <= a3)
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(a1, a2, a3);
  v3 = **(double ***)(a1 + 16);
  v4 = *(_DWORD *)(*(_QWORD *)v3 + 4);
  if (**(_DWORD **)v3 < v4)
    v4 = **(_DWORD **)v3;
  v5 = a2 % v4;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  if (*(_DWORD *)(v6 + 16) <= v5)
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(a1, a2, a3);
  v7 = *(double *)(*(_QWORD *)v6 + 8 * v5);
  v8 = fabs(v7);
  result = 1.0 / v7;
  if (v8 < v3[1])
    return 0.0;
  return result;
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 163, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 2269, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 100, a4);
}

void OUTLINED_FUNCTION_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 192, a4);
}

void zip<A, B, C, D>(_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[27];
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v36[12] = a7;
  v36[25] = a4;
  v36[26] = a9;
  v36[21] = a2;
  v36[19] = a1;
  v39 = a8;
  v40 = a13;
  v16 = *(_QWORD *)(a8 - 8);
  v36[23] = a3;
  v36[24] = v16;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v36[22] = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v36[20] = (char *)v36 - v19;
  v36[18] = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v36[17] = (char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[6] = a12;
  v37 = swift_getAssociatedTypeWitness();
  v21 = MEMORY[0x24BDAC7A8](v37);
  v36[16] = (char *)v36 - v22;
  v36[15] = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v36[14] = (char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[4] = a11;
  v36[1] = a6;
  v24 = swift_getAssociatedTypeWitness();
  v25 = MEMORY[0x24BDAC7A8](v24);
  v36[13] = (char *)v36 - v26;
  v36[9] = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v36[8] = (char *)v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[2] = a10;
  v28 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v28);
  v36[3] = (char *)v36 - v29;
  v36[10] = v28;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v36[7] = AssociatedConformanceWitness;
  v36[11] = v24;
  v31 = swift_getAssociatedConformanceWitness();
  v36[5] = v31;
  v32 = v37;
  v33 = swift_getAssociatedConformanceWitness();
  v34 = AssociatedTypeWitness;
  v35 = swift_getAssociatedConformanceWitness();
  v41 = v28;
  v42 = v24;
  v43 = v32;
  v44 = v34;
  v45 = AssociatedConformanceWitness;
  v46 = v31;
  v47 = v33;
  v48 = v35;
  type metadata accessor for Zip4Generator();
}

void sub_2215B8150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v3 - 328) + 16))(*(_QWORD *)(v3 - 336), *(_QWORD *)(v3 - 248), v1);
  sub_221653288();
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 - 280) + 16))(*(_QWORD *)(v3 - 288), *(_QWORD *)(v3 - 232), *(_QWORD *)(v3 - 392));
  sub_221653288();
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v3 - 256) + 16))(*(_QWORD *)(v3 - 264), *(_QWORD *)(v3 - 216), v2);
  sub_221653288();
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 - 208) + 16))(*(_QWORD *)(v3 - 224), *(_QWORD *)(v3 - 200), *(_QWORD *)(v3 - 168));
  sub_221653288();
  Zip4Generator.init(_:_:_:_:)();
}

uint64_t sub_2215B82BC()
{
  uint64_t v0;

  MEMORY[0x22766FA4C](&protocol conformance descriptor for Zip4Generator<A, B, C, D>, v0);
  return sub_22165396C();
}

void type metadata accessor for Zip4Generator()
{
  JUMPOUT(0x22766F9C8);
}

void Zip4Generator.init(_:_:_:_:)()
{
  type metadata accessor for Zip4Generator();
}

uint64_t sub_2215B8378(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + a1[24]) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v9, v8, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v9 + a1[21], v7, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v9 + a1[22], v6, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v9 + a1[23], v2, v1);
}

uint64_t variable initialization expression of Zip4Generator.index()
{
  return 0;
}

uint64_t Zip4Generator.next()@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  int *TupleTypeMetadata;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v77 = a2;
  v3 = a1[5];
  v60 = a1[9];
  v59 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v55 = sub_221653714();
  v54 = *(_QWORD *)(v55 - 8);
  v5 = MEMORY[0x24BDAC7A8](v55);
  v61 = (char *)&v53 - v6;
  v78 = AssociatedTypeWitness;
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v53 - v7;
  v8 = a1[8];
  v66 = a1[4];
  v67 = v8;
  v9 = swift_getAssociatedTypeWitness();
  v57 = sub_221653714();
  v56 = *(_QWORD *)(v57 - 8);
  v10 = MEMORY[0x24BDAC7A8](v57);
  v68 = (char *)&v53 - v11;
  v76 = v9;
  v69 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v63 = (char *)&v53 - v12;
  v13 = a1[7];
  v71 = (char *)a1[3];
  v72 = v13;
  v14 = swift_getAssociatedTypeWitness();
  v15 = sub_221653714();
  v64 = *(_QWORD *)(v15 - 8);
  v65 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v73 = (char *)&v53 - v17;
  v74 = *(_QWORD *)(v14 - 8);
  v75 = v14;
  MEMORY[0x24BDAC7A8](v16);
  v70 = (char *)&v53 - v18;
  v19 = swift_getAssociatedTypeWitness();
  v20 = sub_221653714();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v53 - v23;
  v25 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v53 - v26;
  sub_221653720();
  v28 = v19;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, v19) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    v29 = v78;
    v31 = v75;
    v30 = v76;
  }
  else
  {
    v32 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v32(v27, v24, v19);
    v33 = v19;
    v34 = v73;
    sub_221653720();
    v35 = v74;
    v31 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v34, 1, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v33);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v34, v65);
      v29 = v78;
      v30 = v76;
      v28 = v33;
    }
    else
    {
      v65 = v25;
      v71 = v27;
      v72 = v33;
      v36 = v70;
      v73 = *(char **)(v35 + 32);
      ((void (*)(char *, char *, uint64_t))v73)(v70, v34, v31);
      v37 = v68;
      sub_221653720();
      v38 = v69;
      v30 = v76;
      v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48))(v37, 1, v76);
      v40 = v35;
      v29 = v78;
      if (v39 == 1)
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v31);
        v28 = v72;
        (*(void (**)(char *, uint64_t))(v65 + 8))(v71, v72);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v57);
      }
      else
      {
        v41 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
        v42 = v63;
        v41(v63, v37, v30);
        v43 = v61;
        sub_221653720();
        v44 = v58;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v43, 1, v29) != 1)
        {
          v47 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
          v47(v62, v43, v29);
          v48 = v72;
          v80 = v72;
          v81 = v31;
          v82 = v30;
          v83 = v29;
          TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
          v50 = v77;
          v51 = &v77[TupleTypeMetadata[12]];
          v52 = &v77[TupleTypeMetadata[16]];
          v79 = &v77[TupleTypeMetadata[20]];
          v32(v77, v71, v48);
          ((void (*)(char *, char *, uint64_t))v73)(v51, v70, v31);
          v41(v52, v63, v30);
          v47(v79, v62, v78);
          return (*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)TupleTypeMetadata - 1) + 56))(v50, 0, 1, TupleTypeMetadata);
        }
        (*(void (**)(char *, uint64_t))(v38 + 8))(v42, v30);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v70, v31);
        v28 = v72;
        (*(void (**)(char *, uint64_t))(v65 + 8))(v71, v72);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v55);
      }
    }
  }
  v80 = v28;
  v81 = v31;
  v82 = v30;
  v83 = v29;
  v45 = swift_getTupleTypeMetadata();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v77, 1, 1, v45);
}

void *variable initialization expression of ADTransformer.texCoordsPortrait()
{
  return &unk_24E722608;
}

void *variable initialization expression of ADTransformer.texCoordsLandscape()
{
  return &unk_24E722648;
}

uint64_t variable initialization expression of ADTransformer.$__lazy_storage_$_cameraToADScale()
{
  return 0;
}

uint64_t variable initialization expression of KernelSimpleSobel.textureCache()
{
  return 0;
}

uint64_t variable initialization expression of Clamped.value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t variable initialization expression of MetalNode.children()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of MetalNode.shouldUpdate()
{
  return 1;
}

uint64_t variable initialization expression of MetalNode.shouldDraw()
{
  return 1;
}

uint64_t variable initialization expression of MetalNode.isActive()
{
  return 1;
}

uint64_t variable initialization expression of DebugLocalNode.pointCloudSize()
{
  return 0;
}

uint64_t variable initialization expression of EdgePlanesMetrics.bestPlaneType()
{
  return 7;
}

uint64_t variable initialization expression of EdgePlanesMetrics.otherPlaneType()
{
  return 7;
}

uint64_t variable initialization expression of WorldEdge.p1()
{
  return 0;
}

uint64_t variable initialization expression of WorldEdge.p2()
{
  return 0;
}

uint64_t variable initialization expression of WorldEdge.type()
{
  return 4;
}

float variable initialization expression of WorldEdge.typeConfidence()
{
  return 0.0;
}

uint64_t variable initialization expression of WorldEdge.connectedSurfaces()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of WorldEdge.edgePlanesMetrics()
{
  return 196608;
}

uint64_t variable initialization expression of WorldPerson.timeSuggested@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_221652F94();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of UncertainValue._confidence@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v22 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v20 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v19 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v19 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v19 - v15;
  sub_221653720();
  sub_221653720();
  swift_getAssociatedConformanceWitness();
  sub_221653B40();
  sub_221653AE0();
  sub_22165399C();
  v17 = *(void (**)(char *, uint64_t))(v20 + 8);
  v17(v8, a1);
  v17(v11, a1);
  return Clamped.init(min:max:)((uint64_t)v16, (uint64_t)v14, a1, v22, v21);
}

_DWORD *variable initialization expression of Synchronized.lock()
{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc();
  *result = 0;
  return result;
}

uint64_t variable initialization expression of OverlayMetalView.blendingEnabled()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.depthProcessor()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.adProcessor()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.adWindow()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.scene()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.demoModes()
{
  return 7;
}

uint64_t variable initialization expression of OverlayMetalView.currentDemoMode()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.swipeUpRecognizer()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.swipeDownRecognizer()
{
  return 0;
}

uint64_t variable initialization expression of Histogram.data()
{
  return sub_22165306C();
}

uint64_t _s17MeasureFoundation9HistogramV3maxx3key_Sf5valuetSgvpfi_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a1, 1, 1, TupleTypeMetadata2);
}

float variable initialization expression of Histogram.sumOfValues()
{
  return 0.0;
}

double variable initialization expression of Transformer.cameraDepthUnprojection()
{
  return -7.7031728e-27;
}

double variable initialization expression of Transformer.$__lazy_storage_$_clipToView@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t variable initialization expression of ImageProcessor.bytesPerPixel()
{
  return 4;
}

uint64_t variable initialization expression of ImageProcessor.bitsPerComponent()
{
  return 8;
}

uint64_t variable initialization expression of ImageProcessor.concurrentSlices()
{
  return 4;
}

uint64_t variable initialization expression of ImageProcessor.bitmapInfo()
{
  return 8194;
}

unint64_t variable initialization expression of ImageProcessor.bufferOptions()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D8F70);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_221655520;
  *(_QWORD *)(inited + 32) = sub_2216531B0();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, 1);
  *(_QWORD *)(inited + 56) = sub_2216531B0();
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, 1);
  return sub_2215C2AC8(inited);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22766FA34]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of ImageProcessor.lockFlags()
{
  return 0;
}

uint64_t variable initialization expression of ImageProcessor.$__lazy_storage_$_viewportSize()
{
  return 0;
}

uint64_t variable initialization expression of ImageProcessor.$__lazy_storage_$_viewportCenter()
{
  return 0;
}

uint64_t variable initialization expression of ImageProcessor.outputBuffer()
{
  return 0;
}

uint64_t variable initialization expression of ImageProcessor.$__lazy_storage_$_scaledPixels()
{
  return 0;
}

float variable initialization expression of LocalPlaneDetector.defaultPlaneRadius()
{
  return 0.05;
}

uint64_t variable initialization expression of LocalPlaneDetector.$__lazy_storage_$_defaultPlaneExtent()
{
  return 0;
}

float variable initialization expression of LocalPlaneDetector.worldSnapAngleRange()
{
  return 0.087266;
}

uint64_t variable initialization expression of LocalPlaneDetector.$__lazy_storage_$_screenCenter()
{
  return 0;
}

uint64_t variable initialization expression of LocalPlaneDetector.planeSolver()
{
  type metadata accessor for PlaneSolver();
  swift_allocObject();
  return sub_221608FA4();
}

uint64_t variable initialization expression of LocalPlaneDetector.pointCloud()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of LocalPlaneDetector.bestPointCloud()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of LocalPlaneDetector.vergenceAngleCosines()
{
  return MEMORY[0x24BEE4AF8];
}

float variable initialization expression of LocalPlaneDetector.minJasperConfidence()
{
  return 0.7;
}

float variable initialization expression of LocalPlaneDetector.lerpingRate()
{
  return 0.3;
}

float variable initialization expression of LocalPlaneDetector.centerCorrectionThreshold()
{
  return 0.0001;
}

float variable initialization expression of LocalPlaneDetector.angleThreshold()
{
  return 0.087266;
}

float variable initialization expression of LocalPlaneDetector.cameraTranslationThreshold()
{
  return 0.04;
}

float variable initialization expression of LocalPlaneDetector.cameraRotationThreshold()
{
  return 0.98481;
}

double variable initialization expression of LocalPlaneDetector.localPlane@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 112) = 1;
  return result;
}

uint64_t variable initialization expression of LocalPlaneDetector.isLocalPlaneInvalidated()
{
  return 1;
}

uint64_t variable initialization expression of LocalPlaneDetector.$__lazy_storage_$_debugOptions()
{
  return 0;
}

double variable initialization expression of LocalPlaneDetector.debugger@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of DebugADNode.kShowRGBTexture()
{
  return 0;
}

uint64_t variable initialization expression of DebugADNode.$__lazy_storage_$_imagePlaneVertexBuffer()
{
  return 1;
}

float variable initialization expression of DebugWorldNode.kCameraRotationThreshold()
{
  return 0.99939;
}

uint64_t variable initialization expression of DebugWorldNode.capturedImageTextureY()
{
  return 0;
}

uint64_t variable initialization expression of DebugWorldNode.capturedImageTextureCbCr()
{
  return 0;
}

uint64_t variable initialization expression of DebugWorldNode.worldPointsCurrentIndex()
{
  return 0;
}

uint64_t variable initialization expression of DebugWorldNode.worldPointsNum()
{
  return 0;
}

uint64_t variable initialization expression of MeanShiftPointFilter.minInliners()
{
  return 3;
}

float variable initialization expression of MeanShiftPointFilter.errorPerMeterSquared()
{
  return 0.0001;
}

uint64_t variable initialization expression of MeanShiftPointFilter.weightsEnabled()
{
  return 1;
}

uint64_t variable initialization expression of MeanShiftPointFilter.matlabDebugEnabled()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.id()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_221652FD0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s17MeasureFoundation11WorldAnchorC10identifier0B04UUIDVvpfi_0();
  v4 = sub_221652FA0();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t variable initialization expression of MeasureObject._state()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_suggest()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_isConfirmable()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_canHandleTouch()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_confirm()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_prepareToclear()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_reconfirm()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_clear()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_percentVisible()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_distanceFromReticle()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_distanceFromCameraPlane()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_importanceWeight()
{
  return 0;
}

float variable initialization expression of DepthProcessor.minConfidence()
{
  return 0.9;
}

float variable initialization expression of DepthProcessor.longRange()
{
  return 200.0;
}

float variable initialization expression of DepthProcessor.shortRange()
{
  return 300.0;
}

float variable initialization expression of DepthProcessor.quadTreeCellSize()
{
  return 50.0;
}

uint64_t variable initialization expression of DepthProcessor.orientation()
{
  return 1;
}

uint64_t variable initialization expression of DepthProcessor.allJasperPoints()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of DepthProcessor.numPointsInMap()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.lastPointCloud()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.$__lazy_storage_$_transformer()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.adProcessor()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.lock()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.numKeyframes()
{
  return 5;
}

float variable initialization expression of DepthProcessor.minCameraTranslation()
{
  return 0.000025;
}

uint64_t variable initialization expression of DepthProcessor.debugOptions()
{
  if (qword_2556D8E40 != -1)
    swift_once();
  return qword_2556E4500;
}

uint64_t variable initialization expression of OverlayMetalScene.kLocalPointCloudSize()
{
  return 1152;
}

uint64_t variable initialization expression of OverlayMetalScene.kWorldPointCloudSize()
{
  return 100000;
}

uint64_t variable initialization expression of OverlayMetalScene.$__lazy_storage_$_localNode()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalScene.$__lazy_storage_$_worldNode()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalScene.$__lazy_storage_$_adNode()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalScene.orientation()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalScene.uniformsBuffer()
{
  return 0;
}

uint64_t variable initialization expression of ObjectPool.lock()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.imageScaleFlags()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_viewportSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_scaledImageSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_imageScaleTempBuffer()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_frameImageBufferPool()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.patchSizeInPixels()
{
  return 11;
}

uint64_t variable initialization expression of PatchTracker.minMatchingPatches()
{
  return 5;
}

uint64_t variable initialization expression of PatchTracker.maxMatchingPatches()
{
  return 8;
}

uint64_t variable initialization expression of PatchTracker.precomputePatchWeights()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.patchPlainDetection()
{
  return 1;
}

float variable initialization expression of PatchTracker.patchPlainWeightThreshold()
{
  return 4.0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_patchSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_patchHalfSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_patchUnscaledSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_patchKernel()
{
  return 0;
}

double variable initialization expression of PatchTracker.$__lazy_storage_$_embossBuffer@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_convolveTempBuffer()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_embossTempBuffer()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.numKeyframes()
{
  return 20;
}

uint64_t variable initialization expression of PatchTracker.cameraAnchorEnabled()
{
  return 0;
}

float variable initialization expression of PatchTracker.minCameraTranslation()
{
  return 0.0001;
}

double variable initialization expression of PatchTracker.maxCameraFramerate()
{
  return 60.0;
}

float variable initialization expression of PatchTracker.camerasConsiderAlignedCos()
{
  return 0.96593;
}

float variable initialization expression of PatchTracker.minMatchingThreshold()
{
  return 0.8;
}

float variable initialization expression of PatchTracker.maxMatchingThreshold()
{
  return 0.99;
}

uint64_t variable initialization expression of PatchTracker.maxMatchingSimilarities()
{
  return 3;
}

float variable initialization expression of PatchTracker.bestTriangulatedAngle()
{
  return 0.17453;
}

float variable initialization expression of PatchTracker.minTriangulatedAngleCos()
{
  return 0.99939;
}

float variable initialization expression of PatchTracker.maxTriangulatedAngleCos()
{
  return 0.70711;
}

float variable initialization expression of PatchTracker.maxTriangulatedRaysErrorCos()
{
  return 0.99966;
}

float variable initialization expression of PatchTracker.rayRange()
{
  return 0.15;
}

uint64_t variable initialization expression of PatchTracker.rangeEstimationEnabled()
{
  return 1;
}

float variable initialization expression of PatchTracker.rangeEstimationBiases()
{
  return -0.025;
}

uint64_t variable initialization expression of PatchTracker.checkCameraMotion()
{
  return 1;
}

float variable initialization expression of PatchTracker.maxMotionAcceleration()
{
  return 0.1;
}

uint64_t variable initialization expression of PatchTracker.pointFilterEnabled()
{
  return 1;
}

float variable initialization expression of PatchTracker.pointFilterErrorThreshold()
{
  return 0.5;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_pointFilter()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.interpolationEnabled()
{
  return 1;
}

float variable initialization expression of PatchTracker.interpolationCameraMaxTranslation()
{
  return 0.0001;
}

float variable initialization expression of PatchTracker.interpolationCameraMaxRotation()
{
  return 0.17453;
}

float variable initialization expression of PatchTracker.deltaRateToConsiderNoise()
{
  return 0.5;
}

uint64_t variable initialization expression of PatchTracker.extrapolationEnabled()
{
  return 1;
}

uint64_t variable initialization expression of PatchTracker.depthMap()
{
  return MEMORY[0x24BEE4B00];
}

double variable initialization expression of PatchTracker.depthCellExpiration()
{
  return 0.25;
}

uint64_t variable initialization expression of PatchTracker.depthMinAccumulation()
{
  return 3;
}

uint64_t variable initialization expression of PatchTracker.threePointMatching()
{
  return 0;
}

double variable initialization expression of PatchTracker.threePointOffsets()
{
  _OWORD *v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D8F78);
  v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_221655530;
  v0[2] = xmmword_221655540;
  result = -15.0;
  __asm { FMOV            V1.2D, #15.0 }
  v0[3] = xmmword_221655550;
  v0[4] = _Q1;
  return result;
}

uint64_t variable initialization expression of PatchTracker.lastKeyframes()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PatchTracker.currentKeyframe()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.frameIndex()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.linePoints()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PatchTracker.orientation()
{
  return 1;
}

uint64_t variable initialization expression of PatchTracker.debugOptions()
{
  if (qword_2556D8E58 != -1)
    swift_once();
  swift_beginAccess();
  return static PatchTracker.DebugOptions.default;
}

double variable initialization expression of PatchTracker.debugger@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of PatchTracker.Keyframe.patchTracker()
{
  return 0;
}

double variable initialization expression of PatchTracker.Keyframe.$__lazy_storage_$_weightedImage@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

uint64_t variable initialization expression of PatchTracker.Patch.$__lazy_storage_$_triangulationMatrix()
{
  return 0;
}

float variable initialization expression of PlaneSelector.planeSelectionDistanceMargin()
{
  return 0.03;
}

float variable initialization expression of PlaneSelector.localPlaneMaxUncertaintyThreshold()
{
  return 0.015;
}

float variable initialization expression of PlaneSelector.hitTestEpsilonSquared()
{
  return 0.000001;
}

float variable initialization expression of PlaneSelector.hitTestEpsilonThreshold()
{
  return 0.0005;
}

float variable initialization expression of PlaneSelector.mlNormalEquivalenceThreshold()
{
  return 0.866;
}

uint64_t variable initialization expression of PlaneSelector.mlLabelKernelRadius()
{
  return 5;
}

uint64_t variable initialization expression of PlaneSelector.adConfidenceToBeFirstChoice()
{
  return 2;
}

uint64_t variable initialization expression of PlaneSelector.adMinConfidence()
{
  return 1;
}

float variable initialization expression of PlaneSelector.edgeHitTestDistanceSquaredThreshold()
{
  return 0.02;
}

float variable initialization expression of PlaneSelector.edgeHitTestCosAngleThreshold()
{
  return 0.95;
}

float variable initialization expression of PlaneSelector.previousPlaneConfidenceDropPerMeter()
{
  return 1.0;
}

float variable initialization expression of PlaneSelector.maxSpeculativeDistanceFromLabeledPlane()
{
  return 0.25;
}

float variable initialization expression of PlaneSelector.maxSpeculativeHitTestDistance()
{
  return 30.0;
}

unint64_t variable initialization expression of PlaneSelector.patchTrackingMode()
{
  id v0;
  void *v1;
  id v2;
  unint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)sub_22165318C();
  v2 = objc_msgSend(v0, sel_integerForKey_, v1);

  result = _s17MeasureFoundation18RecordReplayOptionO8rawValueACSgSi_tcfC_0((unint64_t)v2);
  if (result == 5)
    __break(1u);
  return result;
}

unint64_t variable initialization expression of PlaneSelector.adTestMode()
{
  id v0;
  void *v1;
  id v2;
  unint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)sub_22165318C();
  v2 = objc_msgSend(v0, sel_integerForKey_, v1);

  result = _s17MeasureFoundation0A12UnitDetailedO8rawValueACSgSi_tcfC_0((unint64_t)v2);
  if (result == 4)
    __break(1u);
  return result;
}

float variable initialization expression of PlaneSelector.planeSwitchingThreshold()
{
  return 0.0001;
}

uint64_t variable initialization expression of PlaneSelector.lastLabel()
{
  return 33;
}

float variable initialization expression of PlaneSelector.kernelRadius()
{
  return 20.0;
}

float variable initialization expression of PlaneSelector.kernelAngleStep()
{
  return 0.7854;
}

float variable initialization expression of PlaneSelector.kernelHitsDistanceThreshold()
{
  return 0.000625;
}

uint64_t variable initialization expression of PlaneSelector.$__lazy_storage_$_kernelSamples()
{
  return 0;
}

uint64_t variable initialization expression of PlaneSelector.$__lazy_storage_$_debugOptions()
{
  return 0;
}

double variable initialization expression of PlaneSelector.debugger@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double variable initialization expression of PlaneSelector._planeSelectionStats@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of Extremities.top@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t variable initialization expression of PlaneSolver.minInliners()
{
  return 4;
}

uint64_t variable initialization expression of PlaneSolver.maxInliners()
{
  return 50;
}

uint64_t variable initialization expression of PlaneSolver.considerUncertainties()
{
  return 1;
}

uint64_t variable initialization expression of PlaneSolver.minQualifiedInliners()
{
  return 3;
}

uint64_t variable initialization expression of PlaneSolver.maxQualifiedInliners()
{
  return 15;
}

float variable initialization expression of PlaneSolver.errorThreshold()
{
  return 0.000025;
}

float variable initialization expression of PlaneSolver.maxAngleFromCameraForward()
{
  return 1.309;
}

uint64_t variable initialization expression of PlaneSolver.iterationRange()
{
  return 50;
}

float variable initialization expression of PlaneSolver.disparityErrorEstimate()
{
  return 3.0;
}

uint64_t variable initialization expression of PlaneSolver.numPoints()
{
  return 0;
}

_QWORD *variable initialization expression of PlaneSolver.indices()
{
  _QWORD *result;

  result = (_QWORD *)sub_221653390();
  result[2] = 3;
  result[5] = 0;
  result[6] = 0;
  result[4] = 0;
  return result;
}

uint64_t variable initialization expression of PlaneSolver.cameraPosition()
{
  return 0;
}

uint64_t variable initialization expression of PlaneSolver.cameraForward()
{
  return 0;
}

uint64_t variable initialization expression of PlaneSolver.cameraUp()
{
  return 0;
}

uint64_t variable initialization expression of PlaneSolver.pointCloudWithNoise()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PlaneSolver.$__lazy_storage_$_ransac()
{
  return 0;
}

uint64_t variable initialization expression of Ransac.solver()
{
  return 0;
}

uint64_t variable initialization expression of Ransac.randomInliners()
{
  swift_getAssociatedTypeWitness();
  return sub_221653384();
}

uint64_t variable initialization expression of Ransac.randomInlinerIndices()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of RingBuffer.indexOffset()
{
  return 0;
}

uint64_t variable initialization expression of MetalScene.rootNode()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for MetalNode();
  result = swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(result + 32) = 257;
  *(_BYTE *)(result + 34) = 1;
  v2 = qword_2556D9998;
  *(_QWORD *)(result + 16) = qword_2556D9998;
  *(_QWORD *)(result + 24) = v1;
  if (v2 == -1)
    __break(1u);
  else
    qword_2556D9998 = v2 + 1;
  return result;
}

uint64_t variable initialization expression of MetalScene.currentRenderPassDescriptor()
{
  return 0;
}

uint64_t variable initialization expression of MetalScene.isUpdatedOnce()
{
  return 0;
}

float variable initialization expression of MeasureCore.labelingIdealCoverage()
{
  return 0.3;
}

float variable initialization expression of MeasureCore.localPlaneMaxExtrapolatedSize()
{
  return 0.8;
}

float variable initialization expression of MeasureCore.distanceThresholdForNormalInference()
{
  return 0.0064;
}

unint64_t variable initialization expression of MeasureCore.anchorLabels()
{
  return sub_2215C2444(MEMORY[0x24BEE4AF8]);
}

unint64_t variable initialization expression of MeasureCore.labelAnchors()
{
  return sub_2215C39BC(MEMORY[0x24BEE4AF8]);
}

_DWORD *variable initialization expression of MeasureCore.allPlanesLock()
{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc();
  *result = 0;
  return result;
}

unint64_t variable initialization expression of MeasureCore._allPlaneAnchors()
{
  return sub_2215C25E8(MEMORY[0x24BEE4AF8]);
}

id variable initialization expression of MeasureCore.drawDebugPlanes()
{
  return sub_2215B9D0C();
}

uint64_t variable initialization expression of MeasureCore.segmentationProcessor()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.localPlaneDetector()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.patchTracker()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.planeSelector()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.depthProcessor()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.sceneView()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.isPlaneSelectionEnabled()
{
  return 1;
}

uint64_t variable initialization expression of MeasureCore.shouldUpdateSemantics()
{
  return 1;
}

uint64_t variable initialization expression of SegmentationProcessor.delegate()
{
  return 0;
}

uint64_t variable initialization expression of SegmentationProcessor.labelingSampleCount()
{
  return 200;
}

uint64_t variable initialization expression of SegmentationProcessor.$__lazy_storage_$_debugOptions()
{
  return 0;
}

id variable initialization expression of SegmentationProcessor.lock()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1788]), sel_init);
}

uint64_t variable initialization expression of SegmentationProcessor.lastResult()
{
  return 0;
}

uint64_t variable initialization expression of SegmentationProcessor.$__lazy_storage_$_sampleScreenPoints()
{
  return 0;
}

uint64_t variable initialization expression of SegmentationProcessor.lastPlaneLabelHistogram()
{
  return 0;
}

uint64_t variable initialization expression of SegmentationProcessor.isLastPlaneLabelHistogramInvalidated()
{
  return 1;
}

double variable initialization expression of SegmentationProcessor.debugger@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of SegmentationProcessor.lastAcceleration()
{
  return 0;
}

float variable initialization expression of SegmentationProcessor.lastSinOffsetAngle()
{
  return 0.0;
}

float variable initialization expression of SegmentationProcessor.lastCosOffsetAngle()
{
  return 1.0;
}

uint64_t variable initialization expression of SegmentationResult.lockFlags()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.shouldUse128BitInput()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_adInputTextureFormat()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_adInputPixelFormat()
{
  return 0x100000000;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_adConfig()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_transformer()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_textureCache()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_mpsYCbCrToRGB()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_capturedTexture()
{
  return 1;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_capturedPixelBuffer()
{
  return 1;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_outputDepthTexture()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_outputConfidenceTexture()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_outputPersonTexture()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastDepthOutput()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastConfidenceOutput()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastPersonOutput()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastDepthAddress()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastConfidenceAddress()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastPersonAddress()
{
  return 0;
}

double variable initialization expression of ADProcessor.cameraToWorld@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

uint64_t variable initialization expression of ADProcessor.isPreProcessed()
{
  return 0;
}

id variable initialization expression of ADProcessor.isGuidedFilterEnabled()
{
  return sub_2215B9D0C();
}

id sub_2215B9D0C()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)sub_22165318C();
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

uint64_t variable initialization expression of ADProcessor.isNoiseReductionEnabled()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_guidedFilter()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.guidedDepthTexture()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.device()
{
  if (qword_2556D8D88 != -1)
    swift_once();
  return swift_unknownObjectRetain();
}

uint64_t variable initialization expression of ADProcessor.lock()
{
  return 0;
}

uint64_t variable initialization expression of OptionalSmoothedValue.nilCount()
{
  return 0;
}

uint64_t variable initialization expression of Zip3Generator.index()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.pixelFormat()
{
  return 80;
}

uint64_t variable initialization expression of SurfaceTexture.bitsPerComponent()
{
  return 8;
}

uint64_t variable initialization expression of SurfaceTexture.width()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.height()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.texture()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.isLocking()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.backgroundColor()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of SurfaceTexture.color()
{
  return 4278190335;
}

uint64_t variable initialization expression of SurfaceTexture.cursorX()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.cursorY()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.bytesPerRow()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.pixelsPerRow()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.pixel32s()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.pixelBytes()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.bytesPerPixel()
{
  return 4;
}

uint64_t variable initialization expression of SurfaceTexture.pixelsNum()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.ioSurface()
{
  return 0;
}

uint64_t variable initialization expression of WeakRef.value()
{
  return 0;
}

uint64_t variable initialization expression of HashableWeakRef.value()
{
  return 0;
}

uint64_t variable initialization expression of WorldAnchor._plane()
{
  return 0;
}

float variable initialization expression of WorldAnchor.maxTranslationForPlaneUpgrade()
{
  return 0.003;
}

float variable initialization expression of WorldAnchor.minDotForPlaneUpgrade()
{
  return 0.99619;
}

uint64_t variable initialization expression of WorldAnchor._viewAnchor()
{
  return 0;
}

uint64_t variable initialization expression of WorldAnchor.updateHandler()
{
  return 0;
}

uint64_t variable initialization expression of WorldLine.lineType()
{
  return 1;
}

uint64_t variable initialization expression of WorldLine.isOnVerticalGuide()
{
  return 0;
}

uint64_t variable initialization expression of WorldLine.identifiersOfObjectsComposedInto()
{
  return 0;
}

uint64_t variable initialization expression of WorldLine.isALineMeasurement()
{
  return 0;
}

double variable initialization expression of WorldLine.meanFPSDuringPlacement()
{
  return -1.0;
}

double variable initialization expression of GuideSegments.primary@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of WorldLineGuide.backingPlanes()
{
  return 0;
}

uint64_t variable initialization expression of WorldLineGuide.anchorState()
{
  return 0;
}

double variable initialization expression of WorldLineGuide.segments@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

float variable initialization expression of WorldPlane.planeOrientationEquivalenceThreshold()
{
  return 0.996;
}

float variable initialization expression of WorldPlane.planeTranslationEquivalenceThreshold()
{
  return 0.025;
}

float variable initialization expression of WorldPlane.fallbackPlaneConfidence()
{
  return 0.8;
}

float variable initialization expression of WorldPlane.previousPlaneConfidence()
{
  return 0.9;
}

float variable initialization expression of WorldPlane.maxDistanceForPlaneAnchorUpdate()
{
  return 2.0;
}

float variable initialization expression of WorldPlane.minViewpointCosAngleForPlaneAnchorUpdate()
{
  return 0.866;
}

float variable initialization expression of WorldPlaneHitTestResult.defaultHitConfidenceMultiplier()
{
  return 0.5;
}

float variable initialization expression of WorldPlaneHitTestResult.inferredPlaneHitConfidenceMultiplier()
{
  return 0.75;
}

float variable initialization expression of WorldPlaneHitTestResult.planeEdgeUncertaintyThreshold()
{
  return 0.06;
}

float variable initialization expression of WorldPlaneHitTestResult.planeEdgeMinimumFactor()
{
  return 0.2;
}

uint64_t variable initialization expression of WorldPlaneHitTestResult.$__lazy_storage_$_localPosition()
{
  return 0;
}

float variable initialization expression of WorldPlaneHitTestResult.confidence()
{
  return 0.0;
}

uint64_t variable initialization expression of WorldPlaneContext.isFirstPoint()
{
  return 0;
}

uint64_t variable initialization expression of WorldPlaneContext.isMovingPoint()
{
  return 0;
}

double variable initialization expression of WorldPlaneContext.lastHitTestResult@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t variable initialization expression of WorldPlaneContext.fallbackPlane()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.lines()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of WorldPoint.parentLine()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.snapLine()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.partOfRectangleId()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.delegate()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.triangulationAnchor()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.points()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.rawPoints()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.anchors()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.baseVectors()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.forward()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.size()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.timestamp()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangle.edges()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of WorldRectangle.splitters()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of WorldRectangle.data@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[304];

  sub_2215BA950((uint64_t)v3);
  return sub_2215BA9A8((uint64_t)v3, a1);
}

uint64_t variable initialization expression of WorldRectangle.rectangleDataBuffer()
{
  sub_2215D7B74(0, 10, 0, MEMORY[0x24BEE4AF8]);
  return 10;
}

double variable initialization expression of WorldRectangle.expirationTime()
{
  return 2.0;
}

uint64_t variable initialization expression of WorldRectangle.expirationTimer()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangle.expirationAction()
{
  return 0;
}

uint64_t variable initialization expression of NSUserDefaults._DefaultsStore.actions()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of WorldRectangleGuide.secondEdge()
{
  return 0;
}

uint64_t sub_2215BA154(uint64_t a1, uint64_t a2)
{
  return sub_2215BA378(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

_QWORD *sub_2215BA174@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_2215BA188(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_2215BA1B8(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_2215BA1CC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_2215BA1E0(uint64_t a1)
{
  MEMORY[0x22766FA4C](&unk_221655878, a1);
  return sub_221653000();
}

uint64_t sub_2215BA21C()
{
  MEMORY[0x22766FA4C](&unk_221655878);
  return sub_221652FF4();
}

uint64_t sub_2215BA264(uint64_t a1, uint64_t a2)
{
  sub_221653B88();
  MEMORY[0x22766FA4C](&unk_221655878, a2);
  sub_221652FF4();
  return sub_221653BAC();
}

uint64_t sub_2215BA2BC(uint64_t a1, uint64_t a2)
{
  return sub_2215BA378(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_2215BA2C8()
{
  sub_2216531B0();
  sub_2216531F8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2215BA308()
{
  uint64_t v0;

  sub_2216531B0();
  sub_221653B88();
  sub_2216531F8();
  v0 = sub_221653BAC();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2215BA378(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_2216531B0();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2215BA3B4(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_221653198();
  *a2 = 0;
  return result;
}

uint64_t sub_2215BA428(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_2216531A4();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_2215BA4A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_2216531B0();
  v2 = sub_22165318C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_2215BA4E4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_2215BA4F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2215BA500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22766FA4C](&unk_221655878, a3);
  return sub_221652FE8();
}

_QWORD *sub_2215BA54C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_2215BA55C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_2215BA564@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_2215BA578@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_2215BA58C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_2215BA5B8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_2215BA5DC(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_2215BA5F0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_2215BA604(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_2215BA618(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_2215BA62C(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_2215BA640()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_2215BA650()
{
  return sub_221653798();
}

_QWORD *sub_2215BA668(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_2215BA67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_2216531B0();
  v2 = v1;
  if (v0 == sub_2216531B0() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_221653B04();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_2215BA708()
{
  sub_2215BB99C((unint64_t *)&qword_2556D91A0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_221655E80);
  sub_2215BB99C(&qword_2556D91A8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_221655DD4);
  return sub_221653A2C();
}

uint64_t sub_2215BA78C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2215F1624();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_2215BA7C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2216531B0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2215BA7F0()
{
  sub_2215BB99C(&qword_2556D9150, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_221655978);
  sub_2215BB99C(&qword_2556D9158, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_221655918);
  return sub_221653A2C();
}

uint64_t sub_2215BA874@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_22165318C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_2215BA8B8()
{
  sub_2215BB99C(&qword_2556D91B0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_221655EC4);
  sub_2215BB99C(&qword_2556D91B8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_221655CC0);
  return sub_221653A2C();
}

BOOL sub_2215BA93C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2215BA950(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  result = a1 + 8;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  return result;
}

uint64_t sub_2215BA9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2556D8F80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2215BA9F0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2215BA9F8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_2215BAAD0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v4 + 64) + v6;
  v8 = *(_QWORD *)(a3[4] - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v5 + 64) + v9;
  v11 = *(_QWORD *)(a3[5] - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v8 + 64) + v12;
  v14 = *(_QWORD *)(v11 + 64) + 7;
  v15 = v6 | *(_DWORD *)(v4 + 80) & 0xF8 | v9 | v12;
  if (v15 > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || ((v14 + ((v13 + ((v10 + (v7 & ~v6)) & ~v9)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    v24 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain();
  }
  else
  {
    v19 = ~v6;
    v30 = a3[4];
    v31 = ~v9;
    v32 = ~v12;
    v33 = a3[5];
    v29 = a3[3];
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    v34 = a1;
    v21 = ((unint64_t)a1 + v7) & v19;
    v22 = ((unint64_t)a2 + v7) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v21, v22, v29);
    v23 = v21 + v10;
    v24 = v34;
    v25 = v23 & v31;
    v26 = (v22 + v10) & v31;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v23 & v31, v26, v30);
    v27 = (v26 + v13) & v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))((v25 + v13) & v32, v27, v33);
    *(_QWORD *)((v14 + ((v25 + v13) & v32)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v14 + v27) & 0xFFFFFFFFFFFFF8);
  }
  return v24;
}

uint64_t sub_2215BAC98(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2[4] - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[5] - 8) + 8))((v10
                                                                                       + *(_QWORD *)(v9 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[5] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[5] - 8) + 80));
}

uint64_t sub_2215BAD40(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v22) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2215BAE44(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v22) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2215BAF48(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v22, v23);
  *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v22) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2215BB04C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v22, v23);
  *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v22) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2215BB150(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  v12 = a3[4];
  v13 = a3[5];
  v14 = *(_QWORD *)(v12 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  if (v15 > v11)
    v11 = *(_DWORD *)(v14 + 84);
  v16 = *(_QWORD *)(v13 - 8);
  v17 = *(unsigned int *)(v16 + 84);
  if (v17 > v11)
    v11 = *(_DWORD *)(v16 + 84);
  if (!a2)
    return 0;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = *(_QWORD *)(v7 + 64) + v18;
  v20 = *(_QWORD *)(v9 + 64);
  v21 = *(unsigned __int8 *)(v14 + 80);
  v22 = *(_QWORD *)(v14 + 64);
  v23 = *(unsigned __int8 *)(v16 + 80);
  if (v11 < a2)
  {
    if (((((*(_QWORD *)(v16 + 64) + ((v22 + v23 + ((v20 + v21 + (v19 & ~v18)) & ~v21)) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v24 = 2;
    else
      v24 = a2 - v11 + 1;
    if (v24 >= 0x10000)
      v25 = 4;
    else
      v25 = 2;
    if (v24 < 0x100)
      v25 = 1;
    if (v24 >= 2)
      v26 = v25;
    else
      v26 = 0;
    __asm { BR              X25 }
  }
  if (!v11)
    return 0;
  if (v8 == v11)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
  v28 = (v19 + a1) & ~v18;
  if (v10 == v11)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(v28, *(unsigned int *)(v9 + 84), v5);
  v29 = (v28 + v20 + v21) & ~v21;
  if ((_DWORD)v15 == v11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v29, v15, v12);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))((v29 + v22 + v23) & ~v23, v17, v13);
}

void sub_2215BB33C(unsigned int *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(a4[5] - 8);
  if (*(_DWORD *)(v10 + 84) > v9)
    v9 = *(_DWORD *)(v10 + 84);
  if (v9 >= a3)
  {
    v12 = 0;
    if (a2 <= v9)
      goto LABEL_21;
  }
  else
  {
    if (((*(_DWORD *)(v10 + 64)
         + ((*(_DWORD *)(v8 + 64)
           + *(unsigned __int8 *)(v10 + 80)
           + ((*(_DWORD *)(v6 + 64)
             + *(unsigned __int8 *)(v8 + 80)
             + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v8 + 80))) & ~*(unsigned __int8 *)(v10 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v11 = a3 - v9 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 < 2)
      v12 = 0;
    if (a2 <= v9)
LABEL_21:
      __asm { BR              X27 }
  }
  if (((*(_DWORD *)(v10 + 64)
       + ((*(_DWORD *)(v8 + 64)
         + *(unsigned __int8 *)(v10 + 80)
         + ((*(_DWORD *)(v6 + 64)
           + *(unsigned __int8 *)(v8 + 80)
           + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v8 + 80))) & ~*(unsigned __int8 *)(v10 + 80))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v13 = ~v9 + a2;
    bzero(a1, ((*(_QWORD *)(v10 + 64)+ ((*(_QWORD *)(v8 + 64)+ *(unsigned __int8 *)(v10 + 80)+ ((*(_QWORD *)(v6 + 64)+ *(unsigned __int8 *)(v8 + 80)+ ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_2215BB4B0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2215BB4B8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2215BB4C0);
}

void sub_2215BB4F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_2215BB500()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

void sub_2215BB508(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    JUMPOUT(0x2215BB510);
  if (v5 != a5 && a3 != a5)
    JUMPOUT(0x2215BB52CLL);
  JUMPOUT(0x2215BB564);
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9068);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_2215BB5B0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2215BB5D0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMAcceleration(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9070);
}

void type metadata accessor for ARConfidenceLevel(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9078);
}

void type metadata accessor for CVPixelBufferLockFlags(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9080);
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9088);
}

uint64_t initializeBufferWithCopyOfBuffer for ConnectedSurface(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_2215BB690(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2215BB6B0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9090);
}

void type metadata accessor for VTPixelTransferSession(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9098);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90A0);
}

void type metadata accessor for CVMetalTextureCache(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90A8);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90B0);
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90B8);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_2215BB780(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2215BB7A0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90C0);
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PlaneSelector.PlaneSelectionStats(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlaneSelector.PlaneSelectionStats(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90C8);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90D0);
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90D8);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90E0);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90E8);
}

uint64_t getEnumTagSinglePayload for Segment(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Segment(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for vImage_Buffer(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90F0);
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D90F8);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9100);
}

uint64_t sub_2215BB944()
{
  return sub_2215BB99C((unint64_t *)&qword_2556D9108, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_221655BC0);
}

uint64_t sub_2215BB970()
{
  return sub_2215BB99C(&qword_2556D9110, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_2216558DC);
}

uint64_t sub_2215BB99C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22766FA4C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2215BB9DC()
{
  return sub_2215BB99C(&qword_2556D9118, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_2216558B0);
}

uint64_t sub_2215BBA08()
{
  return sub_2215BB99C(&qword_2556D9120, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_22165594C);
}

uint64_t sub_2215BBA34()
{
  return sub_2215BB99C(&qword_2556D9128, (uint64_t (*)(uint64_t))type metadata accessor for CVPixelBufferLockFlags, (uint64_t)&unk_221655A38);
}

uint64_t sub_2215BBA60()
{
  return sub_2215BB99C(&qword_2556D9130, (uint64_t (*)(uint64_t))type metadata accessor for CVPixelBufferLockFlags, (uint64_t)&unk_221655A08);
}

uint64_t sub_2215BBA8C()
{
  return sub_2215BB99C(&qword_2556D9138, (uint64_t (*)(uint64_t))type metadata accessor for CVPixelBufferLockFlags, (uint64_t)&unk_221655A60);
}

uint64_t sub_2215BBAB8()
{
  return sub_2215BB99C(&qword_2556D9140, (uint64_t (*)(uint64_t))type metadata accessor for CVPixelBufferLockFlags, (uint64_t)&unk_221655A98);
}

uint64_t sub_2215BBAE4()
{
  return sub_2215BB99C(&qword_2556D9148, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_22165584C);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9160);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_2215BBB38(a1, &qword_2556D9168);
}

void sub_2215BBB38(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_2215BBB7C()
{
  return sub_2215BB99C(&qword_2556D9170, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_221655C84);
}

uint64_t sub_2215BBBA8()
{
  return sub_2215BB99C(&qword_2556D9178, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_221655C58);
}

uint64_t sub_2215BBBD4()
{
  return sub_2215BB99C(&qword_2556D9180, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_221655D98);
}

uint64_t sub_2215BBC00()
{
  return sub_2215BB99C(&qword_2556D9188, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_221655D6C);
}

uint64_t sub_2215BBC2C()
{
  return sub_2215BB99C(&qword_2556D9190, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_221655E08);
}

uint64_t sub_2215BBC58()
{
  return sub_2215BB99C(&qword_2556D9198, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_221655CF4);
}

void MetalNode.children.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

id sub_2215BBDA8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_221652F40();
  __swift_allocate_value_buffer(v0, qword_2556E43E0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2556E43E0);
  return sub_2215BBE48(v1);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

id sub_2215BBE48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t inited;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id result;
  id v16;
  id v17;
  _QWORD v18[16];

  v18[15] = *MEMORY[0x24BDAC8D0];
  v2 = sub_221652F40();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_221652EF8();
  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v7 = (void *)sub_221652F1C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D92E0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_221655520;
  v9 = (void *)*MEMORY[0x24BDD0CB0];
  v10 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDD0CB0];
  *(_QWORD *)(inited + 40) = 0x656C69626F6DLL;
  *(_QWORD *)(inited + 48) = 0xE600000000000000;
  v11 = (void *)*MEMORY[0x24BDD0C78];
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 72) = v11;
  *(_QWORD *)(inited + 104) = v10;
  *(_QWORD *)(inited + 80) = 0x656C69626F6DLL;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  v12 = v9;
  v13 = v11;
  sub_2215C2318(inited);
  type metadata accessor for FileAttributeKey(0);
  sub_2215BC088();
  v14 = (void *)sub_22165309C();
  swift_bridgeObjectRelease();
  v18[0] = 0;
  LODWORD(inited) = objc_msgSend(v6, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v7, 1, v14, v18);

  v17 = (id)v18[0];
  if ((_DWORD)inited)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    return v17;
  }
  else
  {
    v16 = v17;
    sub_221652ED4();

    swift_willThrow();
    result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

unint64_t sub_2215BC088()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2556D91A0;
  if (!qword_2556D91A0)
  {
    type metadata accessor for FileAttributeKey(255);
    result = MEMORY[0x22766FA4C](&unk_221655E80, v1);
    atomic_store(result, (unint64_t *)&qword_2556D91A0);
  }
  return result;
}

float ARCamera.gravityOffsetAngle.getter()
{
  void *v0;
  id v1;
  id v2;
  float v3;
  float result;
  float v5;

  v1 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v2 = objc_msgSend(v1, sel_orientation);

  objc_msgSend(v0, sel_eulerAngles);
  result = v3;
  switch((unint64_t)v2)
  {
    case 1uLL:
    case 5uLL:
      v5 = 1.5708;
      goto LABEL_5;
    case 2uLL:
      v5 = -1.5708;
      goto LABEL_5;
    case 3uLL:
      v5 = 3.1416;
LABEL_5:
      result = v3 + v5;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Float __swiftcall ARCamera.gravityOffsetAngle(for:)(UIDeviceOrientation a1)
{
  void *v1;
  float v3;
  Swift::Float result;
  float v5;

  objc_msgSend(v1, sel_eulerAngles);
  result = v3;
  switch(a1)
  {
    case UIDeviceOrientationPortrait:
    case UIDeviceOrientationFaceUp:
      v5 = 1.5708;
      goto LABEL_5;
    case UIDeviceOrientationPortraitUpsideDown:
      v5 = -1.5708;
      goto LABEL_5;
    case UIDeviceOrientationLandscapeLeft:
      v5 = 3.1416;
LABEL_5:
      result = v3 + v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ARCamera.TrackingState.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;

  v1 = v0;
  v2 = sub_2216536C0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = sub_2216536CC();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2215BC4A0(v1, (uint64_t)v11);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 2, v2);
  if (v12)
  {
    if (v12 == 1)
      return 0x6961764120746F4ELL;
    else
      return 0x6C616D726F4ELL;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v14 == *MEMORY[0x24BEDF330])
    goto LABEL_12;
  if (v14 == *MEMORY[0x24BEDF340])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0xD000000000000021;
  }
  if (v14 == *MEMORY[0x24BEDF348])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0xD000000000000026;
  }
  if (v14 == *MEMORY[0x24BEDF338])
  {
LABEL_12:
    v13 = 0xD00000000000001DLL;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return v13;
  }
  result = sub_221653984();
  __break(1u);
  return result;
}

uint64_t sub_2215BC4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2216536CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ARCamera.TrackingState.analyticsDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = sub_2216536C0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = sub_2216536CC();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2215BC4A0(v1, (uint64_t)v11);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 2, v2);
  if (!v12)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
    if (v14 == *MEMORY[0x24BEDF330])
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v15 = 0x616974696E69;
    }
    else
    {
      if (v14 == *MEMORY[0x24BEDF340])
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
        return 0x7669737365637865;
      }
      if (v14 == *MEMORY[0x24BEDF348])
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
        return 0xD000000000000014;
      }
      if (v14 != *MEMORY[0x24BEDF338])
      {
        result = sub_221653984();
        __break(1u);
        return result;
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v15 = 0x61636F6C6572;
    }
    return v15 & 0xFFFFFFFFFFFFLL | 0x696C000000000000;
  }
  if (v12 == 1)
    return 0x6C69617641746F6ELL;
  else
    return 0x6C616D726F6ELL;
}

void sub_2215BC778()
{
  uint64_t v0;

  sub_2215BC794();
  static ADTransformer.adImagePlaneVertexDescriptor = v0;
}

void sub_2215BC794()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD770]), sel_init);
  v1 = objc_msgSend(v0, sel_attributes);
  v2 = objc_msgSend(v1, sel_objectAtIndexedSubscript_, 0);

  if (!v2)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v2, sel_setFormat_, 29);

  v3 = objc_msgSend(v0, sel_attributes);
  v4 = objc_msgSend(v3, sel_objectAtIndexedSubscript_, 0);

  if (!v4)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v4, sel_setOffset_, 0);

  v5 = objc_msgSend(v0, sel_attributes);
  v6 = objc_msgSend(v5, sel_objectAtIndexedSubscript_, 0);

  if (!v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v6, sel_setBufferIndex_, 0);

  v7 = objc_msgSend(v0, sel_attributes);
  v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, 1);

  if (!v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v8, sel_setFormat_, 29);

  v9 = objc_msgSend(v0, sel_attributes);
  v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 1);

  if (!v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v10, sel_setOffset_, 8);

  v11 = objc_msgSend(v0, sel_attributes);
  v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 1);

  if (!v12)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v12, sel_setBufferIndex_, 0);

  v13 = objc_msgSend(v0, sel_layouts);
  v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v14, sel_setStride_, 16);

  v15 = objc_msgSend(v0, sel_layouts);
  v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v16, sel_setStepRate_, 1);

  v17 = objc_msgSend(v0, sel_layouts);
  v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 0);

  if (v18)
  {
    objc_msgSend(v18, sel_setStepFunction_, 1);

    return;
  }
LABEL_19:
  __break(1u);
}

uint64_t *ADTransformer.adImagePlaneVertexDescriptor.unsafeMutableAddressor()
{
  if (qword_2556D8D58 != -1)
    swift_once();
  return &static ADTransformer.adImagePlaneVertexDescriptor;
}

id static ADTransformer.adImagePlaneVertexDescriptor.getter()
{
  if (qword_2556D8D58 != -1)
    swift_once();
  return (id)static ADTransformer.adImagePlaneVertexDescriptor;
}

uint64_t ADTransformer.adConfig.getter()
{
  return swift_retain();
}

double ADTransformer.viewCropRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 1024);
}

double ADTransformer.adSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 1056);
}

uint64_t ADTransformer.adOrientation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1072);
}

uint64_t ADTransformer.adImagePlane.getter()
{
  return swift_bridgeObjectRetain();
}

CGAffineTransform *ADTransformer.viewToPortraitCamera.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat v3;
  CGFloat v4;
  CGFloat tx;
  CGFloat ty;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CGFloat v10;
  CGFloat v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v20;
  CGFloat v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGAffineTransform v26;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if ((*(_BYTE *)(v1 + 1136) & 1) != 0)
  {
    v4 = *(double *)(v1 + 40);
    v3 = *(double *)(v1 + 48);
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 16), 1.0 / *(double *)(v1 + 24));
    v22 = *(_OWORD *)&t1.c;
    v24 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    ARViewToCameraImageTransform();
    v7 = *(_OWORD *)&t1.a;
    v8 = *(_OWORD *)&t1.c;
    v9 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v24;
    *(_OWORD *)&t1.c = v22;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v7;
    *(_OWORD *)&t2.c = v8;
    *(_OWORD *)&t2.tx = v9;
    CGAffineTransformConcat(&v26, &t1, &t2);
    v23 = *(_OWORD *)&v26.c;
    v25 = *(_OWORD *)&v26.a;
    v10 = v26.tx;
    v11 = v26.ty;
    CGAffineTransformMakeScale(&t1, v3, v4);
    v12 = *(_OWORD *)&t1.a;
    v13 = *(_OWORD *)&t1.c;
    v14 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v25;
    *(_OWORD *)&t1.c = v23;
    t1.tx = v10;
    t1.ty = v11;
    *(_OWORD *)&t2.a = v12;
    *(_OWORD *)&t2.c = v13;
    *(_OWORD *)&t2.tx = v14;
    result = CGAffineTransformConcat(&v26, &t1, &t2);
    a = v26.a;
    b = v26.b;
    c = v26.c;
    d = v26.d;
    v21 = v26.tx;
    v20 = v26.ty;
    *(CGFloat *)(v1 + 1088) = v26.a;
    *(CGFloat *)(v1 + 1096) = b;
    *(CGFloat *)(v1 + 1104) = c;
    *(CGFloat *)(v1 + 1112) = d;
    *(CGFloat *)(v1 + 1120) = v21;
    *(CGFloat *)(v1 + 1128) = v20;
    *(_BYTE *)(v1 + 1136) = 0;
  }
  else
  {
    v20 = *(double *)(v1 + 1128);
    v21 = *(double *)(v1 + 1120);
    d = *(double *)(v1 + 1112);
    c = *(double *)(v1 + 1104);
    b = *(double *)(v1 + 1096);
    a = *(double *)(v1 + 1088);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

double ADTransformer.cameraCropRect.getter()
{
  uint64_t v0;
  double result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(v0 + 1176) & 1) == 0)
    return *(double *)(v0 + 1144);
  sub_2215BCD4C((double *)v0);
  *(double *)(v0 + 1144) = result;
  *(_QWORD *)(v0 + 1152) = v2;
  *(_QWORD *)(v0 + 1160) = v3;
  *(_QWORD *)(v0 + 1168) = v4;
  *(_BYTE *)(v0 + 1176) = 0;
  return result;
}

void sub_2215BCD4C(double *a1)
{
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  _BOOL4 IsPortrait;
  uint64_t v7;
  uint64_t v8;
  CGAffineTransform v9;
  CGAffineTransform v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  v2 = a1[128];
  v3 = a1[129];
  v4 = a1[130];
  v5 = a1[131];
  IsPortrait = UIInterfaceOrientationIsPortrait(*((_QWORD *)a1 + 134));
  if (IsPortrait)
    ADTransformer.viewToPortraitCamera.getter(&v10.a);
  else
    Transformer.viewToCamera.getter(&v10.a);
  v9 = v10;
  v11.origin.x = v2;
  v11.origin.y = v3;
  v11.size.width = v4;
  v11.size.height = v5;
  v12 = CGRectApplyAffineTransform(v11, &v9);
  v13 = CGRectIntegral(v12);
  v7 = 5;
  if (IsPortrait)
    v8 = 6;
  else
    v8 = 5;
  if (!IsPortrait)
    v7 = 6;
  v14.size.height = a1[v7];
  v14.size.width = a1[v8];
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  CGRectIntersection(v13, v14);
}

void ADTransformer.cameraToADScale.getter()
{
  uint64_t v0;
  double v1;
  CGFloat Width;
  double v3;
  double v4;
  double v5;
  CGRect v6;

  if ((*(_BYTE *)(v0 + 1200) & 1) != 0)
  {
    v1 = *(double *)(v0 + 1056);
    v6.origin.x = ADTransformer.cameraCropRect.getter();
    Width = CGRectGetWidth(v6);
    v3 = *(double *)(v0 + 1064);
    v4 = v1 / Width;
    v5 = v3 / CGRectGetHeight(*(CGRect *)(v0 + 1144));
    if (vabdd_f64(v4, v5) >= 0.0001)
    {
      __break(1u);
    }
    else
    {
      *(double *)(v0 + 1184) = v4;
      *(double *)(v0 + 1192) = v5;
      *(_BYTE *)(v0 + 1200) = 0;
    }
  }
}

void ADTransformer.viewToAD.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(v1 + 1256) & 1) != 0)
  {
    sub_2215BCF28(&v9);
    v3 = *((_QWORD *)&v9 + 1);
    v4 = v9;
    v6 = v10;
    v5 = v11;
    v8 = v12;
    v7 = v13;
    *(_QWORD *)(v1 + 1208) = v9;
    *(_QWORD *)(v1 + 1216) = v3;
    *(_QWORD *)(v1 + 1224) = v6;
    *(_QWORD *)(v1 + 1232) = v5;
    *(_QWORD *)(v1 + 1240) = v8;
    *(_QWORD *)(v1 + 1248) = v7;
    *(_BYTE *)(v1 + 1256) = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 1248);
    v8 = *(_QWORD *)(v1 + 1240);
    v5 = *(_QWORD *)(v1 + 1232);
    v6 = *(_QWORD *)(v1 + 1224);
    v3 = *(_QWORD *)(v1 + 1216);
    v4 = *(_QWORD *)(v1 + 1208);
  }
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = v8;
  a1[5] = v7;
}

CGFloat sub_2215BCF28@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGFloat tx;
  CGFloat ty;
  CGFloat v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CGFloat result;
  __int128 v20;
  __int128 v21;
  CGFloat v22;
  __int128 v23;
  __int128 v24;
  CGAffineTransform v25;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGFloat v28[6];

  if (UIInterfaceOrientationIsPortrait(*(_QWORD *)(v1 + 1072)))
    ADTransformer.viewToPortraitCamera.getter(v28);
  else
    Transformer.viewToCamera.getter(v28);
  v4 = v28[2];
  v3 = v28[3];
  v6 = v28[4];
  v5 = v28[5];
  v8 = v28[0];
  v7 = v28[1];
  if ((COERCE_UNSIGNED_INT64(ADTransformer.cameraCropRect.getter()) & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v9 = *(double *)(v1 + 1152);
  }
  else
  {
    if ((*(_QWORD *)(v1 + 1152) & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      ADTransformer.cameraToADScale.getter();
      CGAffineTransformMakeScale(&t1, v22, *(CGFloat *)(v1 + 1192));
      v16 = *(_OWORD *)&t1.a;
      v17 = *(_OWORD *)&t1.c;
      v18 = *(_OWORD *)&t1.tx;
      t1.a = v8;
      t1.b = v7;
      t1.c = v4;
      t1.d = v3;
      t1.tx = v6;
      t1.ty = v5;
      goto LABEL_9;
    }
    v9 = *(double *)(v1 + 1152);
  }
  CGAffineTransformMakeTranslation(&t1, -*(double *)(v1 + 1144), -v9);
  v10 = *(_OWORD *)&t1.a;
  v11 = *(_OWORD *)&t1.c;
  v12 = *(_OWORD *)&t1.tx;
  t1.a = v8;
  t1.b = v7;
  t1.c = v4;
  t1.d = v3;
  t1.tx = v6;
  t1.ty = v5;
  *(_OWORD *)&t2.a = v10;
  *(_OWORD *)&t2.c = v11;
  *(_OWORD *)&t2.tx = v12;
  CGAffineTransformConcat(&v25, &t1, &t2);
  v23 = *(_OWORD *)&v25.c;
  v24 = *(_OWORD *)&v25.a;
  tx = v25.tx;
  ty = v25.ty;
  ADTransformer.cameraToADScale.getter();
  CGAffineTransformMakeScale(&t1, v15, *(CGFloat *)(v1 + 1192));
  v16 = *(_OWORD *)&t1.a;
  v17 = *(_OWORD *)&t1.c;
  v18 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v24;
  *(_OWORD *)&t1.c = v23;
  t1.tx = tx;
  t1.ty = ty;
LABEL_9:
  *(_OWORD *)&t2.a = v16;
  *(_OWORD *)&t2.c = v17;
  *(_OWORD *)&t2.tx = v18;
  CGAffineTransformConcat(&v25, &t1, &t2);
  result = v25.a;
  v20 = *(_OWORD *)&v25.c;
  v21 = *(_OWORD *)&v25.tx;
  *a1 = *(_OWORD *)&v25.a;
  a1[1] = v20;
  a1[2] = v21;
  return result;
}

CGAffineTransform *ADTransformer.adToView.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;

  if ((*(_BYTE *)(v1 + 1312) & 1) != 0)
  {
    ADTransformer.viewToAD.getter(&v12);
    v11 = v12;
    result = CGAffineTransformInvert(&v10, &v11);
    a = v10.a;
    b = v10.b;
    c = v10.c;
    d = v10.d;
    tx = v10.tx;
    ty = v10.ty;
    *(CGFloat *)(v1 + 1264) = v10.a;
    *(CGFloat *)(v1 + 1272) = b;
    *(CGFloat *)(v1 + 1280) = c;
    *(CGFloat *)(v1 + 1288) = d;
    *(CGFloat *)(v1 + 1296) = tx;
    *(CGFloat *)(v1 + 1304) = ty;
    *(_BYTE *)(v1 + 1312) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 1304);
    tx = *(double *)(v1 + 1296);
    d = *(double *)(v1 + 1288);
    c = *(double *)(v1 + 1280);
    b = *(double *)(v1 + 1272);
    a = *(double *)(v1 + 1264);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *ADTransformer.adToClip.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat v3;
  CGFloat v4;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  __int128 v12;
  __int128 v13;
  CGAffineTransform v14;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v17[2];
  double v18;
  double v19;
  CGAffineTransform v20;

  if ((*(_BYTE *)(v1 + 1368) & 1) != 0)
  {
    ADTransformer.adToView.getter((CGFloat *)v17);
    v12 = v17[1];
    v13 = v17[0];
    v3 = v18;
    v4 = v19;
    Transformer.viewToClip.getter(&v20.a);
    *(_OWORD *)&t1.a = v13;
    *(_OWORD *)&t1.c = v12;
    t1.tx = v3;
    t1.ty = v4;
    t2 = v20;
    result = CGAffineTransformConcat(&v14, &t1, &t2);
    a = v14.a;
    b = v14.b;
    c = v14.c;
    d = v14.d;
    tx = v14.tx;
    ty = v14.ty;
    *(CGFloat *)(v1 + 1320) = v14.a;
    *(CGFloat *)(v1 + 1328) = b;
    *(CGFloat *)(v1 + 1336) = c;
    *(CGFloat *)(v1 + 1344) = d;
    *(CGFloat *)(v1 + 1352) = tx;
    *(CGFloat *)(v1 + 1360) = ty;
    *(_BYTE *)(v1 + 1368) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 1360);
    tx = *(double *)(v1 + 1352);
    d = *(double *)(v1 + 1344);
    c = *(double *)(v1 + 1336);
    b = *(double *)(v1 + 1328);
    a = *(double *)(v1 + 1320);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *ADTransformer.clipToAD.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;

  if ((*(_BYTE *)(v1 + 1424) & 1) != 0)
  {
    ADTransformer.adToClip.getter(&v12.a);
    v11 = v12;
    result = CGAffineTransformInvert(&v10, &v11);
    a = v10.a;
    b = v10.b;
    c = v10.c;
    d = v10.d;
    tx = v10.tx;
    ty = v10.ty;
    *(CGFloat *)(v1 + 1376) = v10.a;
    *(CGFloat *)(v1 + 1384) = b;
    *(CGFloat *)(v1 + 1392) = c;
    *(CGFloat *)(v1 + 1400) = d;
    *(CGFloat *)(v1 + 1408) = tx;
    *(CGFloat *)(v1 + 1416) = ty;
    *(_BYTE *)(v1 + 1424) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 1416);
    tx = *(double *)(v1 + 1408);
    d = *(double *)(v1 + 1400);
    c = *(double *)(v1 + 1392);
    b = *(double *)(v1 + 1384);
    a = *(double *)(v1 + 1376);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *ADTransformer.adToCamera.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat v3;
  CGFloat v4;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  __int128 v12;
  __int128 v13;
  CGAffineTransform v14;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v17[2];
  double v18;
  double v19;
  CGAffineTransform v20;

  if ((*(_BYTE *)(v1 + 1480) & 1) != 0)
  {
    ADTransformer.adToView.getter((CGFloat *)v17);
    v12 = v17[1];
    v13 = v17[0];
    v3 = v18;
    v4 = v19;
    Transformer.viewToCamera.getter(&v20.a);
    *(_OWORD *)&t1.a = v13;
    *(_OWORD *)&t1.c = v12;
    t1.tx = v3;
    t1.ty = v4;
    t2 = v20;
    result = CGAffineTransformConcat(&v14, &t1, &t2);
    a = v14.a;
    b = v14.b;
    c = v14.c;
    d = v14.d;
    tx = v14.tx;
    ty = v14.ty;
    *(CGFloat *)(v1 + 1432) = v14.a;
    *(CGFloat *)(v1 + 1440) = b;
    *(CGFloat *)(v1 + 1448) = c;
    *(CGFloat *)(v1 + 1456) = d;
    *(CGFloat *)(v1 + 1464) = tx;
    *(CGFloat *)(v1 + 1472) = ty;
    *(_BYTE *)(v1 + 1480) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 1472);
    tx = *(double *)(v1 + 1464);
    d = *(double *)(v1 + 1456);
    c = *(double *)(v1 + 1448);
    b = *(double *)(v1 + 1440);
    a = *(double *)(v1 + 1432);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *ADTransformer.cameraToAD.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;

  if ((*(_BYTE *)(v1 + 1536) & 1) != 0)
  {
    ADTransformer.adToCamera.getter(&v12.a);
    v11 = v12;
    result = CGAffineTransformInvert(&v10, &v11);
    a = v10.a;
    b = v10.b;
    c = v10.c;
    d = v10.d;
    tx = v10.tx;
    ty = v10.ty;
    *(CGFloat *)(v1 + 1488) = v10.a;
    *(CGFloat *)(v1 + 1496) = b;
    *(CGFloat *)(v1 + 1504) = c;
    *(CGFloat *)(v1 + 1512) = d;
    *(CGFloat *)(v1 + 1520) = tx;
    *(CGFloat *)(v1 + 1528) = ty;
    *(_BYTE *)(v1 + 1536) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 1528);
    tx = *(double *)(v1 + 1520);
    d = *(double *)(v1 + 1512);
    c = *(double *)(v1 + 1504);
    b = *(double *)(v1 + 1496);
    a = *(double *)(v1 + 1488);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

uint64_t sub_2215BD44C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t ADTransformer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ADTransformer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_2215BD4E8@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ADTransformer.viewToPortraitCamera.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215BD528(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 1088) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 1104) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 1120) = result;
  *(_BYTE *)(v2 + 1136) = 0;
  return result;
}

void sub_2215BD548(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = ADTransformer.cameraCropRect.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

__n128 sub_2215BD574(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _OWORD *v3;
  __n128 result;
  __int128 v5;

  v2 = *a2;
  v3 = (_OWORD *)(*a2 + 1144);
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *v3 = *(_OWORD *)a1;
  v3[1] = v5;
  *(_BYTE *)(v2 + 1176) = 0;
  return result;
}

void sub_2215BD58C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  ADTransformer.cameraToADScale.getter();
  *a1 = v2;
  a1[1] = v3;
}

__n128 sub_2215BD5B4(__n128 *a1, __n128 **a2)
{
  __n128 *v2;
  __n128 result;

  v2 = *a2;
  result = *a1;
  v2[74] = *a1;
  v2[75].n128_u8[0] = 0;
  return result;
}

double sub_2215BD5C8@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ADTransformer.viewToAD.getter(v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215BD608(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = *a2 + 1208;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(_BYTE *)(v2 + 1256) = 0;
  return result;
}

double sub_2215BD628@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ADTransformer.adToView.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215BD668(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 1264) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 1280) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 1296) = result;
  *(_BYTE *)(v2 + 1312) = 0;
  return result;
}

double sub_2215BD688@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ADTransformer.adToClip.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215BD6C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = *a2 + 1320;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(_BYTE *)(v2 + 1368) = 0;
  return result;
}

double sub_2215BD6E8@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ADTransformer.clipToAD.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215BD728(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 1376) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 1392) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 1408) = result;
  *(_BYTE *)(v2 + 1424) = 0;
  return result;
}

double sub_2215BD748@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ADTransformer.adToCamera.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215BD788(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = *a2 + 1432;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(_BYTE *)(v2 + 1480) = 0;
  return result;
}

double sub_2215BD7A8@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ADTransformer.cameraToAD.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215BD7E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 1488) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 1504) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 1520) = result;
  *(_BYTE *)(v2 + 1536) = 0;
  return result;
}

uint64_t type metadata accessor for ADTransformer()
{
  return objc_opt_self();
}

uint64_t sub_2215BD828(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v12;
  double v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  CGRect v21;
  CGRect v22;

  v4 = v3;
  *(_QWORD *)(v4 + 1000) = &unk_24E722688;
  *(_QWORD *)(v4 + 1008) = &unk_24E7226C8;
  *(_OWORD *)(v4 + 1088) = 0u;
  *(_OWORD *)(v4 + 1104) = 0u;
  *(_OWORD *)(v4 + 1120) = 0u;
  *(_BYTE *)(v4 + 1136) = 1;
  *(_OWORD *)(v4 + 1144) = 0u;
  *(_OWORD *)(v4 + 1160) = 0u;
  *(_BYTE *)(v4 + 1176) = 1;
  *(_OWORD *)(v4 + 1184) = 0u;
  *(_BYTE *)(v4 + 1200) = 1;
  *(_OWORD *)(v4 + 1208) = 0u;
  *(_OWORD *)(v4 + 1224) = 0u;
  *(_OWORD *)(v4 + 1240) = 0u;
  *(_BYTE *)(v4 + 1256) = 1;
  *(_OWORD *)(v4 + 1296) = 0u;
  *(_OWORD *)(v4 + 1280) = 0u;
  *(_OWORD *)(v4 + 1264) = 0u;
  *(_BYTE *)(v4 + 1312) = 1;
  *(_OWORD *)(v4 + 1320) = 0u;
  *(_OWORD *)(v4 + 1336) = 0u;
  *(_OWORD *)(v4 + 1352) = 0u;
  *(_BYTE *)(v4 + 1368) = 1;
  *(_OWORD *)(v4 + 1376) = 0u;
  *(_OWORD *)(v4 + 1392) = 0u;
  *(_OWORD *)(v4 + 1408) = 0u;
  *(_BYTE *)(v4 + 1424) = 1;
  *(_OWORD *)(v4 + 1432) = 0u;
  *(_OWORD *)(v4 + 1448) = 0u;
  *(_OWORD *)(v4 + 1464) = 0u;
  *(_BYTE *)(v4 + 1480) = 1;
  *(_OWORD *)(v4 + 1488) = 0u;
  *(_OWORD *)(v4 + 1504) = 0u;
  *(_OWORD *)(v4 + 1520) = 0u;
  *(_BYTE *)(v4 + 1536) = 1;
  *(_QWORD *)(v4 + 1016) = a3;
  swift_retain();
  swift_retain();
  v21.origin.x = _s17MeasureFoundation15ADConfigurationC12viewCropRectSo6CGRectVvg_0();
  x = v21.origin.x;
  y = v21.origin.y;
  width = v21.size.width;
  height = v21.size.height;
  *(CGRect *)(v4 + 1024) = v21;
  *(_OWORD *)(v4 + 1056) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(v4 + 1072) = 3;
  v12 = *(double *)(a3 + 48);
  v13 = *(double *)(a3 + 56);
  v14 = CGRectGetWidth(v21);
  v15 = v12;
  v16 = v14 / v15;
  v22.origin.x = x;
  v22.origin.y = y;
  v22.size.width = width;
  v22.size.height = height;
  v17 = CGRectGetHeight(v22);
  v18 = v13;
  *(float *)&x = v17 / v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9610);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_221655F50;
  *(float *)(v19 + 32) = -v16;
  *(float *)(v19 + 36) = -*(float *)&x;
  *(_DWORD *)(v19 + 40) = 1065353216;
  *(_DWORD *)(v19 + 44) = 1065353216;
  *(float *)(v19 + 48) = v16;
  *(float *)(v19 + 52) = -*(float *)&x;
  *(_DWORD *)(v19 + 56) = 1065353216;
  *(_DWORD *)(v19 + 60) = 0;
  *(float *)(v19 + 64) = -v16;
  *(_DWORD *)(v19 + 68) = LODWORD(x);
  *(_DWORD *)(v19 + 72) = 0;
  *(_DWORD *)(v19 + 76) = 1065353216;
  *(float *)(v19 + 80) = v16;
  *(_DWORD *)(v19 + 84) = LODWORD(x);
  *(_DWORD *)(v19 + 88) = 0;
  *(_DWORD *)(v19 + 92) = 0;
  *(_QWORD *)(v4 + 1080) = v19;
  swift_release();
  *(_OWORD *)(v4 + 880) = 0u;
  *(_OWORD *)(v4 + 896) = 0u;
  *(_OWORD *)(v4 + 848) = 0u;
  *(_OWORD *)(v4 + 864) = 0u;
  *(_BYTE *)(v4 + 912) = 1;
  *(_OWORD *)(v4 + 928) = 0u;
  *(_OWORD *)(v4 + 944) = 0u;
  *(_OWORD *)(v4 + 960) = 0u;
  *(_OWORD *)(v4 + 976) = 0u;
  *(_BYTE *)(v4 + 992) = 1;
  return sub_2215E1100(a1, a2, v12, v13);
}

BOOL UIInterfaceOrientationIsPortrait(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__n128 ARFrame.getHitRay(cameraPoint:)()
{
  void *v0;
  id v1;
  __n128 v3;
  _OWORD v4[4];
  char v5;

  v1 = objc_msgSend(v0, sel_camera);
  memset(v4, 0, sizeof(v4));
  v5 = 1;
  v3 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v1, (uint64_t)v4);

  return v3;
}

__n128 ARFrame.getHitRay()()
{
  void *v0;
  id v1;
  __n128 v3;
  _OWORD v4[4];
  char v5;

  v1 = objc_msgSend(v0, sel_camera);
  memset(v4, 0, sizeof(v4));
  v5 = 1;
  v3 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v1, (uint64_t)v4);

  return v3;
}

double ARFrame.viewToCamera(screenPoint:sceneView:orientation:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v8;
  uint64_t ObjectType;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGAffineTransform v15;
  CGPoint v16;

  v8 = objc_msgSend(v4, sel_camera);
  ObjectType = swift_getObjectType();
  v10 = (*(double (**)(uint64_t, uint64_t, double, double))(a4 + 24))(ObjectType, a4, a1, a2);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  objc_msgSend(v8, sel_imageResolution);
  ARViewToCameraImageTransform();
  v16.x = v10;
  v16.y = v12;
  *(_QWORD *)&v13 = *(_OWORD *)&CGPointApplyAffineTransform(v16, &v15);

  return v13;
}

void static ARFrame.viewToCamera(screenPoint:sceneView:camera:orientation:)(double a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t ObjectType;
  CGFloat v10;
  double v11;
  CGFloat v12;
  CGAffineTransform v13;
  CGPoint v14;

  ObjectType = swift_getObjectType();
  v10 = (*(double (**)(uint64_t, uint64_t, double, double))(a4 + 24))(ObjectType, a4, a1, a2);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  objc_msgSend(a5, sel_imageResolution);
  ARViewToCameraImageTransform();
  v14.x = v10;
  v14.y = v12;
  CGPointApplyAffineTransform(v14, &v13);
}

Swift::Bool __swiftcall ARFrame.isVIOTrackingUnacceptable()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, sel_worldTrackingState);
  if (!v1)
    return 1;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_vioTrackingState);

  return v3 != 0;
}

__n128 _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  __int128 v10;
  __int128 v11;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  __int128 v17;
  _QWORD v18[10];
  _BYTE v19[80];
  simd_float4x4 v20;

  sub_2215BDFCC(a2, (uint64_t)v18);
  v5 = v18[6];
  v4 = v18[7];
  objc_msgSend(a1, sel_projectionMatrix);
  v15 = v7;
  v16 = v6;
  v13 = v9;
  v14 = v8;
  sub_2215BDFCC(a2, (uint64_t)v19);
  if ((v19[64] & 1) != 0)
  {
    objc_msgSend(a1, sel_transform);
    v17 = v10;
  }
  else
  {
    *(_QWORD *)&v11 = v5;
    *((_QWORD *)&v11 + 1) = v4;
    v17 = v11;
  }
  v20.columns[1] = v15;
  v20.columns[0] = v16;
  v20.columns[3] = v13;
  v20.columns[2] = v14;
  __invert_f4(v20);
  return (__n128)v17;
}

uint64_t sub_2215BDFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall simd_float3x3.copy(from:)(CGAffineTransform *from)
{
  _OWORD *v1;
  float a;
  __int128 v3;
  float c;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;

  a = from->a;
  *(float *)&v3 = a;
  c = from->c;
  *((float *)&v3 + 1) = c;
  *(float *)&v5 = from->tx;
  *((_QWORD *)&v3 + 1) = v5;
  *(float *)&v6 = from->b;
  *(float *)&v7 = from->d;
  *(float *)&v8 = from->ty;
  *(_QWORD *)&v9 = __PAIR64__(v7, v6);
  *((_QWORD *)&v9 + 1) = v8;
  *v1 = v3;
  v1[1] = v9;
  v1[2] = xmmword_221656010;
}

uint64_t ARKeyFrame.interfaceOrientation.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n64 convertToDisplayCoordinates(_:forKeyFrame:viewSize:)(void *a1, uint64_t a2, CGFloat a3, double a4, double a5, double a6)
{
  CGFloat v9;
  CGPoint v10;
  float v11;
  __n64 result;
  CGAffineTransform v13;
  CGPoint v14;

  v9 = 1.0 - a4;
  objc_msgSend(a1, sel_displayTransformForOrientation_viewportSize_, a2, a5, a6);
  v14.x = a3;
  v14.y = v9;
  v10 = CGPointApplyAffineTransform(v14, &v13);
  result.n64_f32[0] = v10.x * a5;
  v11 = v10.y * a6;
  result.n64_f32[1] = v11;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ARKeyFrame(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

void destroy for ARKeyFrame(id *a1)
{

}

uint64_t assignWithCopy for ARKeyFrame(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ARKeyFrame(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ARKeyFrame(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARKeyFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARKeyFrame()
{
  return &type metadata for ARKeyFrame;
}

uint64_t DepthTransformer.deinit()
{
  uint64_t v0;

  return v0;
}

double DepthTransformer.jasperToARKitCamera.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;

  if ((*(_BYTE *)(v0 + 912) & 1) != 0)
  {
    *(double *)&v1 = sub_2215BE5A0();
    *(_OWORD *)(v0 + 848) = v1;
    *(_OWORD *)(v0 + 864) = v2;
    *(_OWORD *)(v0 + 880) = v3;
    *(_OWORD *)(v0 + 896) = v4;
    *(_BYTE *)(v0 + 912) = 0;
  }
  else
  {
    *(_QWORD *)&v1 = *(_QWORD *)(v0 + 848);
  }
  return *(double *)&v1;
}

double DepthTransformer.arkitToJasperCamera.getter()
{
  uint64_t v0;
  simd_float4x4 v2;
  simd_float4x4 v3;

  if ((*(_BYTE *)(v0 + 992) & 1) != 0)
  {
    *(double *)v2.columns[0].i64 = DepthTransformer.jasperToARKitCamera.getter();
    v3 = __invert_f4(v2);
    *(simd_float4x4 *)(v0 + 928) = v3;
    *(_BYTE *)(v0 + 992) = 0;
  }
  else
  {
    v3.columns[0].i64[0] = *(_QWORD *)(v0 + 928);
  }
  return *(double *)v3.columns[0].i64;
}

float32x2_t sub_2215BE338(uint64_t a1, CGFloat a2, CGFloat a3, float a4)
{
  float32x4_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float y;
  float x;
  CGAffineTransform v22;
  _QWORD v23[8];
  CGAffineTransform v24;
  char v25;
  CGPoint v26;

  sub_2215BE798(a1, (uint64_t)v23);
  v9 = v23[0];
  v8 = v23[1];
  v11 = v23[2];
  v10 = v23[3];
  v13 = v23[4];
  v12 = v23[5];
  Transformer.viewToCamera.getter(&v22.a);
  v24 = v22;
  v26.x = a2;
  v26.y = a3;
  v14 = CGPointApplyAffineTransform(v26, &v24);
  sub_2215BE798(a1, (uint64_t)&v24);
  if ((v25 & 1) != 0)
  {
    v15 = v4[7];
    v16 = v4[8];
    v17 = v4[9];
  }
  else
  {
    v15.i64[0] = v9;
    v15.i64[1] = v8;
    v16.i64[0] = v11;
    v16.i64[1] = v10;
    v17.i64[0] = v13;
    v17.i64[1] = v12;
  }
  y = v14.y;
  x = v14.x;
  return vmul_n_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v17, vmlaq_n_f32(vmulq_n_f32(v15, x), v16, y)), a4);
}

float32x2_t DepthTransformer.worldPoint(screenPoint:depth:cameraToWorld:cameraIntrinsicsInversed:)(uint64_t a1, CGFloat a2, CGFloat a3, float a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x4_t v16;

  *(float32x2_t *)v8.f32 = sub_2215BE338(a1, a2, a3, a4);
  v16 = v8;
  *(double *)v9.i64 = DepthTransformer.jasperToARKitCamera.getter();
  v13 = vaddq_f32(v12, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v16.f32[0]), v10, *(float32x2_t *)v16.f32, 1), v11, v16, 2));
  v14 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, v13.f32[0]), a6, *(float32x2_t *)v13.f32, 1), a7, v13, 2), a8, v13, 3);
  return vdiv_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 3));
}

float32x2_t DepthTransformer.worldPoint(localPoint:cameraToWorld:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;

  *(double *)v5.i64 = DepthTransformer.jasperToARKitCamera.getter();
  v9 = vaddq_f32(v8, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, a1.f32[0]), v6, *(float32x2_t *)a1.f32, 1), v7, a1, 2));
  v10 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v9.f32[0]), a3, *(float32x2_t *)v9.f32, 1), a4, v9, 2), a5, v9, 3);
  return vdiv_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 3));
}

float32x2_t DepthTransformer.worldPoint(jasperPoint:cameraToWorld:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float v12;
  float v13;
  float v14;

  v12 = 0.001 * a1.f32[0];
  v13 = vmuls_lane_f32(0.001, *(float32x2_t *)a1.f32, 1);
  v14 = vmuls_lane_f32(0.001, a1, 2);
  *(double *)v5.i64 = DepthTransformer.jasperToARKitCamera.getter();
  v9 = vaddq_f32(v8, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v5, v12), v6, v13), v7, v14));
  v10 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v9.f32[0]), a3, *(float32x2_t *)v9.f32, 1), a4, v9, 2), a5, v9, 3);
  return vdiv_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 3));
}

double sub_2215BE5A0()
{
  float32x4_t v0;
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  uint64_t v4;
  __float2 v5;
  __n128 v6;
  float32x4_t v7;
  double result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;

  sub_221649DC0((uint64_t)&unk_24E722708);
  v13 = v0;
  sub_221649DC0((uint64_t)&unk_24E722738);
  v12 = v1;
  sub_221649DC0((uint64_t)&unk_24E722768);
  v11 = v2;
  sub_221649DC0((uint64_t)&unk_24E722798);
  v10 = v3;
  v4 = ARCameraToDisplayRotation();
  if (qword_2556D8DD8 != -1)
    swift_once();
  v9 = (float32x4_t)static SIMD3<>.forward;
  v5 = __sincosf_stret((float)((float)v4 * 0.017453) * 0.5);
  v6 = (__n128)vmulq_n_f32(v9, v5.__sinval);
  v6.n128_u32[3] = LODWORD(v5.__cosval);
  *(double *)v7.i64 = MEMORY[0x22766EAC8](v6);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v7.f32[0]), v12, *(float32x2_t *)v7.f32, 1), v11, v7, 2), v10, v7, 3).u64[0];
  return result;
}

uint64_t DepthTransformer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_2215BE6E4(_OWORD *a1@<X8>)
{
  keypath_getTm(DepthTransformer.jasperToARKitCamera.getter, a1);
}

__n128 sub_2215BE6F0(uint64_t a1, uint64_t *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *a2;
  *(_OWORD *)(v7 + 848) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 864) = v3;
  *(_OWORD *)(v7 + 880) = v4;
  *(_QWORD *)(v7 + 896) = v6;
  *(_QWORD *)(v7 + 904) = v5;
  *(_BYTE *)(v7 + 912) = 0;
  return result;
}

void sub_2215BE718(_OWORD *a1@<X8>)
{
  keypath_getTm(DepthTransformer.arkitToJasperCamera.getter, a1);
}

void keypath_getTm(double (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(double *)&v3 = a1();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

__n128 sub_2215BE750(uint64_t a1, uint64_t *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *a2;
  *(_OWORD *)(v7 + 928) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 944) = v3;
  *(_OWORD *)(v7 + 960) = v4;
  *(_QWORD *)(v7 + 976) = v6;
  *(_QWORD *)(v7 + 984) = v5;
  *(_BYTE *)(v7 + 992) = 0;
  return result;
}

uint64_t type metadata accessor for DepthTransformer()
{
  return objc_opt_self();
}

uint64_t sub_2215BE798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2556D98C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id KernelSimpleSobel.__allocating_init(coder:device:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithCoder_device_, a1, a2);

  swift_unknownObjectRelease();
  return v4;
}

void KernelSimpleSobel.init(coder:device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KernelSimpleSobel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for KernelSimpleSobel()
{
  return objc_opt_self();
}

id sub_2215BE9C8(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id result;
  id v14;
  objc_super v15;
  id v16[2];

  v2 = v1;
  v16[1] = *(id *)MEMORY[0x24BDAC8D0];
  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v2[OBJC_IVAR____TtC17MeasureFoundation17KernelSimpleSobel_textureCache] = 0;
  v5 = qword_2556D8D90;
  v6 = v2;
  if (v5 != -1)
    swift_once();
  v7 = (void *)static MetalBundle.library;
  v8 = (void *)sub_22165318C();
  v9 = objc_msgSend(v7, sel_newFunctionWithName_, v8);

  if (!v9)
    __break(1u);
  v16[0] = 0;
  v10 = objc_msgSend(a1, sel_newComputePipelineStateWithFunction_error_, v9, v16);
  swift_unknownObjectRelease();
  v11 = v16[0];
  if (v10)
  {
    *(_QWORD *)&v6[OBJC_IVAR____TtC17MeasureFoundation17KernelSimpleSobel_computePipeline] = v10;
    v12 = v11;

    v15.receiver = v6;
    v15.super_class = ObjectType;
    return objc_msgSendSuper2(&v15, sel_initWithDevice_, a1);
  }
  else
  {
    v14 = v16[0];
    sub_221652ED4();

    swift_willThrow();
    result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t Clamped.min.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Clamped.max.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t Clamped.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_221653714();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v12 - v7, v2 + *(int *)(a1 + 40));
  v10 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, v5);
  __break(1u);
  return result;
}

uint64_t Clamped.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_2215BEF4C(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*Clamped.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  Clamped.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_2215BED08;
}

void sub_2215BED08(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_2215BEF4C((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_2215BEF4C((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Clamped.init(min:max:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v9 = type metadata accessor for Clamped(0, a3, a4, a4);
  v10 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a5 + *(int *)(v9 + 40), 1, 1, a3);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v12(a5, a1, a3);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(a5 + *(int *)(v9 + 36), a2, a3);
}

uint64_t Clamped.init(wrappedValue:min:max:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = type metadata accessor for Clamped(0, a4, a5, a4);
  v12 = a6 + *(int *)(v11 + 40);
  v13 = *(_QWORD *)(a4 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v17(v12, 1, 1, a4);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v14(a6, a2, a4);
  v14(a6 + *(int *)(v11 + 36), a3, a4);
  v15 = sub_221653714();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v12, v15);
  v14(v12, a1, a4);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v17)(v12, 0, 1, a4);
}

uint64_t sub_2215BEF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = sub_221653714();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  clamp<A>(_:min:max:)(a1, v2, v2 + *(int *)(a2 + 36), v5, (uint64_t)&v11 - v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v9, 0, 1, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(v2 + *(int *)(a2 + 40), v9, v6);
}

uint64_t type metadata accessor for Clamped(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Clamped);
}

uint64_t sub_2215BF02C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2215BF034()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = sub_221653714();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_2215BF0CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = ~(unint64_t)v8;
  v11 = v7 + v8;
  if (*(_DWORD *)(v6 + 84))
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = v7 + 1;
  v13 = ((v7 + v8 + ((v7 + v8) & ~(unint64_t)v8)) & ~(unint64_t)v8)
      + v12;
  v14 = v8 & 0x100000;
  if (v9 > 7 || v14 != 0 || v13 > 0x18)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v9 + 16) & v10));
    swift_retain();
  }
  else
  {
    v18 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v18(a1, a2, *(_QWORD *)(a3 + 16));
    v19 = ((unint64_t)a2 + v11) & v10;
    v18((uint64_t *)(((unint64_t)v4 + v11) & v10), (uint64_t *)v19, v5);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((v11 + v19) & v10, 1, v5))
    {
      memcpy((void *)((v11 + (((unint64_t)v4 + v11) & v10)) & v10), (const void *)((v11 + v19) & v10), v12);
    }
    else
    {
      v18((uint64_t *)((v11 + (((unint64_t)v4 + v11) & v10)) & v10), (uint64_t *)((v11 + v19) & v10), v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))((v11 + (((unint64_t)v4 + v11) & v10)) & v10, 0, 1, v5);
    }
  }
  return v4;
}

uint64_t sub_2215BF20C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + v5;
  v7 = (v6 + a1) & ~v5;
  v10(v7, v3);
  v8 = (v6 + v7) & ~v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v3);
  return result;
}

uint64_t sub_2215BF2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  size_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = v8 + v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v11, v5);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v6 + 48))((v8 + v9 + v11) & ~v9, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v12 = v8;
    else
      v12 = v8 + 1;
    memcpy((void *)((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9), (const void *)((v10 + v11) & ~v9), v12);
  }
  else
  {
    v7((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9, (v10 + v11) & ~v9, v5);
    (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v6 + 56))((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_2215BF3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  size_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  size_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (void *)((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9);
  v12 = (void *)((v8 + v9 + v10) & ~v9);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v10) = v13(v11, 1, v5);
  v14 = v13(v12, 1, v5);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v11, v12, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v14)
    {
      v7((uint64_t)v11, (uint64_t)v12, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v11, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v15 = v8;
  else
    v15 = v8 + 1;
  memcpy(v11, v12, v15);
  return a1;
}

uint64_t sub_2215BF4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  size_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = v8 + v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v11, v5);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v6 + 48))((v8 + v9 + v11) & ~v9, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v12 = v8;
    else
      v12 = v8 + 1;
    memcpy((void *)((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9), (const void *)((v10 + v11) & ~v9), v12);
  }
  else
  {
    v7((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9, (v10 + v11) & ~v9, v5);
    (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v6 + 56))((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_2215BF5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  size_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  size_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (void *)((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9);
  v12 = (void *)((v8 + v9 + v10) & ~v9);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v10) = v13(v11, 1, v5);
  v14 = v13(v12, 1, v5);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v11, v12, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v14)
    {
      v7((uint64_t)v11, (uint64_t)v12, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v11, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v15 = v8;
  else
    v15 = v8 + 1;
  memcpy(v11, v12, v15);
  return a1;
}

uint64_t sub_2215BF710(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5)
    v7 = *(_QWORD *)(v4 + 64);
  else
    v7 = v6 + 1;
  if (!a2)
    return 0;
  v8 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_21;
  v9 = v7
     + ((v6
       + *(unsigned __int8 *)(v4 + 80)
       + ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 < 2)
    {
LABEL_21:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_21;
LABEL_14:
  v13 = (v11 - 1) << v10;
  if (v9 > 3)
    v13 = 0;
  if (!(_DWORD)v9)
    return v5 + v13 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2215BF7E0 + 4 * byte_221656090[(v9 - 1)]))();
}

void sub_2215BF830(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = (v8
      + *(unsigned __int8 *)(v6 + 80)
      + ((v8 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!v7)
    ++v8;
  v10 = v8 + v9;
  v11 = a3 >= v7;
  v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      v15 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v15))
      {
        v13 = 4u;
      }
      else if (v15 >= 0x100)
      {
        v13 = 2;
      }
      else
      {
        v13 = v15 > 1;
      }
    }
    else
    {
      v13 = 1u;
    }
  }
  else
  {
    v13 = 0;
  }
  if (v7 < a2)
  {
    v14 = ~v7 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v16;
          *((_BYTE *)a1 + 2) = BYTE2(v16);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v16;
        }
        else
        {
          *(_BYTE *)a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x22766F9C8](a1, v6, a5);
}

uint64_t benchmarkResult<A>(block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v20 = a1;
  v7 = sub_221653714();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - v9;
  v11 = swift_allocBox();
  v13 = v12;
  v14 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, a4);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a4;
  v15[3] = v11;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_2215BFCDC;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2215BFCE8;
  aBlock[3] = &block_descriptor;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  v17 = benchmarkBlock();
  _Block_release(v16);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, v7);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, a4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20, v10, a4);
    swift_release();
    return v17;
  }
  return result;
}

uint64_t sub_2215BFBD8(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = sub_221653714();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - v8;
  v10 = swift_projectBox();
  a2();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v9, 0, 1, a4);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(v10, v9, v6);
}

uint64_t sub_2215BFCB0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2215BFCDC()
{
  uint64_t v0;

  return sub_2215BFBD8(*(_QWORD *)(v0 + 24), *(void (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16));
}

uint64_t sub_2215BFCE8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

Swift::String __swiftcall benchmarkFormat(seconds:)(Swift::Double seconds)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String result;

  if (seconds >= 1.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9988);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_2216560E0;
    v5 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v4 + 64) = v5;
    if (seconds >= 60.0)
      *(Swift::Double *)(v4 + 32) = seconds / 60.0;
    else
      *(Swift::Double *)(v4 + 32) = seconds;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9988);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_2216560E0;
    v3 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v2 + 56) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v2 + 64) = v3;
    *(Swift::Double *)(v2 + 32) = seconds * 1000.0;
  }
  v6 = sub_2216531BC();
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

Swift::Void __swiftcall BenchmarkStats.prettyPrint(_:)(Swift::String a1)
{
  Swift::Double *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  Swift::Double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_2556D8F50 != -1)
    swift_once();
  v4 = qword_2556E4728;
  v5 = unk_2556E4730;
  sub_221653894();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_221653210();
  v6 = v1[5];
  benchmarkFormat(seconds:)(v6);
  sub_221653210();
  swift_bridgeObjectRelease();
  v7 = sub_221653618();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v7, 0, v4, v5);
  swift_bridgeObjectRelease();
  v8 = qword_2556E4728;
  v9 = unk_2556E4730;
  swift_bridgeObjectRetain();
  sub_221653210();
  benchmarkFormat(seconds:)(v1[4]);
  sub_221653210();
  swift_bridgeObjectRelease();
  v10 = sub_221653618();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v10, 0, v8, v9);
  swift_bridgeObjectRelease();
  v11 = qword_2556E4728;
  v12 = unk_2556E4730;
  sub_221653894();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_221653210();
  benchmarkFormat(seconds:)(v6);
  sub_221653210();
  swift_bridgeObjectRelease();
  v13 = sub_221653618();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v13, 0, v11, v12);
  swift_bridgeObjectRelease();
  v14 = qword_2556E4728;
  v15 = unk_2556E4730;
  sub_221653894();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_221653210();
  benchmarkFormat(seconds:)(v1[6]);
  sub_221653210();
  swift_bridgeObjectRelease();
  v16 = sub_221653618();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v16, 0, v14, v15);
  swift_bridgeObjectRelease();
  v17 = qword_2556E4728;
  v18 = unk_2556E4730;
  sub_221653894();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_221653210();
  sub_2215C01B8();
  sub_22165375C();
  sub_221653210();
  swift_bridgeObjectRelease();
  v19 = sub_221653618();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v19, 0, v17, v18);
  swift_bridgeObjectRelease();
}

unint64_t sub_2215C01B8()
{
  unint64_t result;

  result = qword_2556D9990;
  if (!qword_2556D9990)
  {
    result = MEMORY[0x22766FA4C](MEMORY[0x24BEE3FC8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&qword_2556D9990);
  }
  return result;
}

uint64_t MetalNode.id.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t MetalNode.shouldUpdate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t MetalNode.shouldUpdate.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 32) = a1;
  return result;
}

uint64_t (*MetalNode.shouldUpdate.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t MetalNode.shouldDraw.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t MetalNode.shouldDraw.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 33) = a1;
  return result;
}

uint64_t (*MetalNode.shouldDraw.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t MetalNode.__allocating_init()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(result + 32) = 257;
  *(_BYTE *)(result + 34) = 1;
  v2 = qword_2556D9998;
  *(_QWORD *)(result + 16) = qword_2556D9998;
  *(_QWORD *)(result + 24) = v1;
  if (v2 == -1)
    __break(1u);
  else
    qword_2556D9998 = v2 + 1;
  return result;
}

uint64_t MetalNode.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v0 + 32) = 257;
  *(_BYTE *)(v0 + 34) = 1;
  v2 = qword_2556D9998;
  *(_QWORD *)(v0 + 16) = qword_2556D9998;
  *(_QWORD *)(v0 + 24) = v1;
  if (v2 == -1)
  {
    __break(1u);
  }
  else
  {
    qword_2556D9998 = v2 + 1;
    return v0;
  }
  return result;
}

uint64_t MetalNode.isActive.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t MetalNode.isActive.setter(char a1)
{
  _BYTE *v1;
  uint64_t result;

  swift_beginAccess();
  v1[32] = a1;
  swift_beginAccess();
  v1[33] = a1;
  result = swift_beginAccess();
  v1[34] = a1;
  return result;
}

void (*MetalNode.isActive.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[15] = v1;
  swift_beginAccess();
  *((_BYTE *)v3 + 128) = *(_BYTE *)(v1 + 34);
  return sub_2215C050C;
}

void sub_2215C050C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 128);
  swift_beginAccess();
  *(_BYTE *)(v2 + 32) = v3;
  swift_beginAccess();
  *(_BYTE *)(v2 + 33) = v3;
  *(_BYTE *)(v1[15] + 34) = v3;
  free(v1);
}

uint64_t MetalNode.addChild(_:at:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (_QWORD *)(v3 + 24);
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 24);
  if (v6 >> 62)
    goto LABEL_25;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v7; v7 = sub_2216539F0())
  {
    v8 = (uint64_t *)(a1 + 16);
    if ((v6 & 0xC000000000000001) != 0)
    {
      swift_beginAccess();
      v9 = 0;
      while (1)
      {
        v10 = MEMORY[0x22766ED44](v9, v6);
        v11 = v9 + 1;
        if (__OFADD__(v9, 1))
          break;
        v12 = v10;
        swift_beginAccess();
        v13 = *(_QWORD *)(v12 + 16);
        v14 = *v8;
        swift_unknownObjectRelease();
        if (v13 == v14)
          goto LABEL_22;
        ++v9;
        if (v11 == v7)
          goto LABEL_13;
      }
      __break(1u);
    }
    else
    {
      swift_beginAccess();
      v15 = 0;
      while (1)
      {
        v16 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        v17 = *(_QWORD *)(v6 + 8 * v15 + 32);
        swift_beginAccess();
        if (*(_QWORD *)(v17 + 16) == *v8)
        {
LABEL_22:
          swift_bridgeObjectRelease_n();
          return 0;
        }
        ++v15;
        if (v16 == v7)
          goto LABEL_13;
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
  }
LABEL_13:
  swift_bridgeObjectRelease_n();
  if ((a3 & 1) != 0)
  {
    swift_beginAccess();
    v19 = swift_retain();
    MEMORY[0x22766E798](v19);
    if (*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_20:
      sub_2216533A8();
      sub_22165333C();
      goto LABEL_21;
    }
LABEL_30:
    sub_22165336C();
    goto LABEL_20;
  }
  swift_beginAccess();
  if (*v5 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v18 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  if (v18 < a2)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (a2 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  sub_2215C0E0C(a2, a2, a1);
LABEL_21:
  swift_endAccess();
  return 1;
}

uint64_t MetalNode.removeChild(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  if (v3 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_2216539F0())
  {
    swift_beginAccess();
    v5 = 0;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x22766ED44](v5, v3);
      }
      else
      {
        v6 = *(_QWORD *)(v3 + 8 * v5 + 32);
        swift_retain();
      }
      swift_beginAccess();
      v7 = *(_QWORD *)(v6 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      swift_release();
      if (v7 == v8)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_beginAccess();
        sub_2215C0A5C(v5, (uint64_t (*)(uint64_t))sub_22163D6A0);
        swift_endAccess();
        swift_release();
        return 1;
      }
      v9 = v5 + 1;
      if (__OFADD__(v5, 1))
        break;
      ++v5;
      if (v9 == v4)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    swift_retain();
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

BOOL static MetalNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  return v4 == *(_QWORD *)(a2 + 16);
}

uint64_t sub_2215C0A50(unint64_t a1)
{
  return sub_2215C0A5C(a1, (uint64_t (*)(uint64_t))sub_22163D6A0);
}

uint64_t sub_2215C0A5C(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  if (!(_DWORD)result || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    result = a2(v5);
    v5 = result;
    *v2 = result;
  }
  v7 = v5 & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v7 + 8 * a1;
    v11 = *(_QWORD *)(v10 + 32);
    memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * (v8 - 1 - a1));
    *(_QWORD *)(v7 + 16) = v9;
    sub_22165333C();
    return v11;
  }
  return result;
}

Swift::Void __swiftcall MetalNode.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  _BYTE *v6;

  swift_beginAccess();
  if (*(_BYTE *)(v1 + 32) == 1)
  {
    swift_beginAccess();
    v3 = *(_QWORD *)(v1 + 24);
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v4 = sub_2216539F0();
      if (v4)
        goto LABEL_4;
    }
    else
    {
      v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v4)
      {
LABEL_4:
        if (v4 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v4; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0)
          {
            v6 = (_BYTE *)MEMORY[0x22766ED44](i, v3);
          }
          else
          {
            v6 = *(_BYTE **)(v3 + 8 * i + 32);
            swift_retain();
          }
          swift_beginAccess();
          if (v6[32] == 1)
            (*(void (**)(Class))(*(_QWORD *)v6 + 264))(frame.super.isa);
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t MetalNode.draw(commandBuffer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  _BYTE *v7;

  result = swift_beginAccess();
  if (*(_BYTE *)(v1 + 33) == 1)
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(v1 + 24);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_2216539F0();
      v5 = result;
      if (result)
        goto LABEL_4;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return result;
        }
        for (i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
          {
            v7 = (_BYTE *)MEMORY[0x22766ED44](i, v4);
          }
          else
          {
            v7 = *(_BYTE **)(v4 + 8 * i + 32);
            swift_retain();
          }
          swift_beginAccess();
          if (v7[33] == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 272))(a1);
          swift_release();
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MetalNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

BOOL sub_2215C0DAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 16);
  swift_beginAccess();
  return v4 == *(_QWORD *)(v3 + 16);
}

char *sub_2215C0E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
  v22 = sub_2216539F0();
  swift_bridgeObjectRelease();
  if (v22 < v5)
    goto LABEL_30;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    v10 = sub_2216539F0();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    v14 = sub_2216539F0();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_33;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_35;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_36;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x22766ED50](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  type metadata accessor for MetalNode();
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_27:
    *v15 = v3;
    return (char *)sub_22165333C();
  }
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = sub_2216539F0();
    swift_bridgeObjectRelease();
    v17 = v23 - v5;
    if (!__OFSUB__(v23, v5))
      goto LABEL_21;
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v17 = v16 - v5;
  if (__OFSUB__(v16, v5))
    goto LABEL_39;
LABEL_21:
  result = (char *)(v15 + 1);
  v19 = (char *)(v13 + 32 + 8 * v5);
  if (v15 + 1 != (_QWORD *)v19 || result >= &v19[8 * v17])
    result = (char *)memmove(result, v19, 8 * v17);
  if (v7 >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    v24 = sub_2216539F0();
    result = (char *)swift_bridgeObjectRelease();
    v21 = v24 + v8;
    if (!__OFADD__(v24, v8))
      goto LABEL_26;
    goto LABEL_42;
  }
  v20 = *(_QWORD *)(v13 + 16);
  v21 = v20 + v8;
  if (!__OFADD__(v20, v8))
  {
LABEL_26:
    *(_QWORD *)(v13 + 16) = v21;
    goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_2215C108C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return result;
}

uint64_t sub_2215C10D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  return result;
}

uint64_t type metadata accessor for MetalNode()
{
  return objc_opt_self();
}

unint64_t sub_2215C1130(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_2215D6C00((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 16 * v6;
  v14 = (const void *)(v4 + 32 + 16 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 16 * v13)
    result = (unint64_t)memmove((void *)result, v14, 16 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_2215C1234(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_2215D7110((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 16 * v6;
  v14 = (const void *)(v4 + 32 + 16 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 16 * v13)
    result = (unint64_t)memmove((void *)result, v14, 16 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_2215C1338(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_2215D711C((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 4 * v6;
  v14 = (const void *)(v4 + 32 + 4 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 4 * v13)
    result = (unint64_t)memmove((void *)result, v14, 4 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_2215C143C(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_2215D6E18((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 8 * v6;
  v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13)
    result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2215C1540(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
  v19 = sub_2216539F0();
  swift_bridgeObjectRelease();
  if (v19 < v2)
    goto LABEL_30;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    v8 = sub_2216539F0();
    swift_bridgeObjectRelease();
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    v12 = sub_2216539F0();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v5 = *v3;
  if (*v3 >> 62)
    goto LABEL_33;
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v8 - v7;
  if (__OFADD__(v8, v6))
    goto LABEL_35;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if (v5 >> 62)
    goto LABEL_36;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x22766ED50](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for PatchTracker.Keyframe();
  result = swift_arrayDestroy();
  if (!v6)
    return sub_22165333C();
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_2216539F0();
    result = swift_bridgeObjectRelease();
    v15 = v20 - v2;
    if (!__OFSUB__(v20, v2))
      goto LABEL_21;
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v14 = *(_QWORD *)(v11 + 16);
  v15 = v14 - v2;
  if (__OFSUB__(v14, v2))
    goto LABEL_39;
LABEL_21:
  v16 = (const void *)(v11 + 32 + 8 * v2);
  if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v16 + 8 * v15)
    result = (uint64_t)memmove((void *)(v11 + 32 + 8 * v4), v16, 8 * v15);
  if (v5 >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    v21 = sub_2216539F0();
    result = swift_bridgeObjectRelease();
    v18 = v21 + v6;
    if (!__OFADD__(v21, v6))
      goto LABEL_26;
    goto LABEL_42;
  }
  v17 = *(_QWORD *)(v11 + 16);
  v18 = v17 + v6;
  if (!__OFADD__(v17, v6))
  {
LABEL_26:
    *(_QWORD *)(v11 + 16) = v18;
    return sub_22165333C();
  }
LABEL_42:
  __break(1u);
  return result;
}

Swift::Void __swiftcall CALayer.pauseAnimations()()
{
  void *v0;
  float v1;
  double v2;
  double v3;

  objc_msgSend(v0, sel_speed);
  if (v1 != 0.0)
  {
    objc_msgSend(v0, sel_convertTime_fromLayer_, 0, CACurrentMediaTime());
    v3 = v2;
    LODWORD(v2) = 0;
    objc_msgSend(v0, sel_setSpeed_, v2);
    objc_msgSend(v0, sel_setTimeOffset_, v3);
  }
}

Swift::Bool __swiftcall CALayer.areAnimationsPaused()()
{
  void *v0;
  float v1;

  objc_msgSend(v0, sel_speed);
  return v1 == 0.0;
}

Swift::Void __swiftcall CALayer.resumeAnimations()()
{
  void *v0;
  float v1;
  double v2;
  double v3;
  double v4;

  objc_msgSend(v0, sel_speed);
  if (v1 == 0.0)
  {
    objc_msgSend(v0, sel_timeOffset);
    v3 = v2;
    LODWORD(v2) = 1.0;
    objc_msgSend(v0, sel_setSpeed_, v2);
    objc_msgSend(v0, sel_setTimeOffset_, 0.0);
    objc_msgSend(v0, sel_setBeginTime_, 0.0);
    objc_msgSend(v0, sel_convertTime_fromLayer_, 0, CACurrentMediaTime());
    objc_msgSend(v0, sel_setBeginTime_, v4 - v3);
  }
}

void sub_2215C191C()
{
  static CGFloat.pi2 = 0x401921FB54442D18;
}

uint64_t *CGFloat.pi2.unsafeMutableAddressor()
{
  if (qword_2556D8D60 != -1)
    swift_once();
  return &static CGFloat.pi2;
}

double static CGFloat.pi2.getter()
{
  return sub_2215C1A9C(&qword_2556D8D60, (uint64_t)&static CGFloat.pi2);
}

void *CGFloat.piDiv2.unsafeMutableAddressor()
{
  return &static CGFloat.piDiv2;
}

double static CGFloat.piDiv2.getter()
{
  return 1.57079633;
}

void sub_2215C19AC()
{
  static CGFloat.degree2Radian = 0x3F91DF46A2529D39;
}

uint64_t *CGFloat.degree2Radian.unsafeMutableAddressor()
{
  if (qword_2556D8D68 != -1)
    swift_once();
  return &static CGFloat.degree2Radian;
}

double static CGFloat.degree2Radian.getter()
{
  return sub_2215C1A9C(&qword_2556D8D68, (uint64_t)&static CGFloat.degree2Radian);
}

void sub_2215C1A24()
{
  static CGFloat.radian2Degree = 0x404CA5DC1A63C1F8;
}

uint64_t *CGFloat.radian2Degree.unsafeMutableAddressor()
{
  if (qword_2556D8D70 != -1)
    swift_once();
  return &static CGFloat.radian2Degree;
}

double static CGFloat.radian2Degree.getter()
{
  return sub_2215C1A9C(&qword_2556D8D70, (uint64_t)&static CGFloat.radian2Degree);
}

double sub_2215C1A9C(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

float CGFloat.float.getter(double a1)
{
  return a1;
}

float64_t CGPoint.floats.getter(float64x2_t a1, float64_t a2)
{
  a1.f64[1] = a2;
  *(float32x2_t *)&a1.f64[0] = vcvt_f32_f64(a1);
  return a1.f64[0];
}

double CGPoint.init(xz:)(float a1)
{
  return a1;
}

double CGPoint.init(xy:)(float32x2_t a1)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vcvtq_f64_f32(a1);
  return result;
}

CGPoint __swiftcall CGPoint.add(_:)(CGPoint a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGPoint result;

  v3 = a1.x + v1;
  v4 = a1.y + v2;
  result.y = v4;
  result.x = v3;
  return result;
}

CGPoint __swiftcall CGPoint.subtract(_:)(CGPoint a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGPoint result;

  v3 = v1 - a1.x;
  v4 = v2 - a1.y;
  result.y = v4;
  result.x = v3;
  return result;
}

CGPoint __swiftcall CGPoint.multiply(by:)(Swift::Float by)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  CGPoint result;

  v3 = by;
  v4 = by * v1;
  v5 = v3 * v2;
  result.y = v5;
  result.x = v4;
  return result;
}

CGPoint __swiftcall CGPoint.divide(by:)(Swift::Float by)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  CGPoint result;

  v3 = by;
  v4 = v1 / by;
  v5 = v2 / v3;
  result.y = v5;
  result.x = v4;
  return result;
}

double static CGPoint.- prefix(_:)(double a1)
{
  return -a1;
}

double static CGPoint.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 + a2;
  v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

float static CGPoint.dot(_:_:)(double a1, double a2, double a3, double a4)
{
  float v4;
  float v5;

  v4 = a1 * a3;
  v5 = a2 * a4;
  return v4 + v5;
}

float static CGPoint.distanceSq(_:_:)(double a1, double a2, double a3, double a4)
{
  float v4;
  float v5;

  v4 = (a3 - a1) * (a3 - a1);
  v5 = (a4 - a2) * (a4 - a2);
  return v4 + v5;
}

float static CGPoint.distance(_:_:)(double a1, double a2, double a3, double a4)
{
  float v4;
  float v5;

  v4 = (a3 - a1) * (a3 - a1);
  v5 = (a4 - a2) * (a4 - a2);
  return sqrtf(v4 + v5);
}

Swift::Float __swiftcall CGPoint.length()()
{
  double v0;
  double v1;
  float v2;
  float v3;

  v2 = v0 * v0;
  v3 = v1 * v1;
  return sqrtf(v2 + v3);
}

double static CGPoint.rotatePoint(target:aroundOrigin:byRadians:)(double a1, double a2, double a3, double a4, double a5)
{
  long double v7;
  double v8;
  long double v9;

  v7 = a1 - a3;
  v8 = sqrt(v7 * v7 + (a2 - a4) * (a2 - a4));
  v9 = atan2(a2 - a4, v7);
  return v8 * __sincos_stret(v9 + a5).__cosval + a3;
}

CGPoint __swiftcall CGPoint.normalized()()
{
  double v0;
  double v1;
  float v2;
  float v3;
  float v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGPoint result;

  v2 = v0 * v0;
  v3 = v1 * v1;
  v4 = sqrtf(v2 + v3);
  v5 = 0.0;
  v6 = 0.0;
  if (v4 > 0.0)
  {
    v5 = v0 / v4;
    v6 = v1 / v4;
  }
  v7 = v5;
  v8 = v6;
  result.y = v8;
  result.x = v7;
  return result;
}

Swift::Float __swiftcall CGPoint.lengthSq()()
{
  double v0;
  double v1;
  float v2;
  float v3;

  v2 = v0 * v0;
  v3 = v1 * v1;
  return v2 + v3;
}

double CGPoint.elementSum()(double a1, double a2)
{
  return a1 + a2;
}

CGPoint __swiftcall CGPoint.round()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  CGPoint result;

  v2 = round(v0);
  v3 = round(v1);
  result.y = v3;
  result.x = v2;
  return result;
}

CGPoint __swiftcall CGPoint.ceil()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  CGPoint result;

  v2 = ceil(v0);
  v3 = ceil(v1);
  result.y = v3;
  result.x = v2;
  return result;
}

CGPoint __swiftcall CGPoint.floor()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  CGPoint result;

  v2 = floor(v0);
  v3 = floor(v1);
  result.y = v3;
  result.x = v2;
  return result;
}

double CGPoint.init(_:)(float32x2_t a1)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vcvtq_f64_f32(a1);
  return result;
}

double CGPoint.init(_:)(float a1)
{
  return (double)SLODWORD(a1);
}

double CGPoint.init(_:)(int64x2_t a1)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vcvtq_f64_s64(a1);
  return result;
}

double CGPoint.lerped<A>(newValue:t:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v18;
  float v19;
  float v20;

  v18 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v18 - v15, a1, a2);
  sub_2215C1F0C();
  sub_221653090();
  v16 = v20 * a3;
  swift_getAssociatedConformanceWitness();
  sub_221653B34();
  sub_221653AE0();
  sub_2216539A8();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  sub_221653090();
  return v16 + v19 * a5;
}

unint64_t sub_2215C1F0C()
{
  unint64_t result;

  result = qword_2556D9AF8;
  if (!qword_2556D9AF8)
  {
    result = MEMORY[0x22766FA4C](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&qword_2556D9AF8);
  }
  return result;
}

void sub_2215C1F50(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double *v4;
  uint64_t v6;

  *(double *)a4 = CGPoint.lerped<A>(newValue:t:)(a2, a3, *a1, a1[1], *v4);
  *(_QWORD *)(a4 + 8) = v6;
}

__C::CGRect __swiftcall CGRect.init(centerPoint:size:)(CGPoint centerPoint, CGSize size)
{
  double v2;
  double v3;
  __C::CGRect result;

  v2 = centerPoint.x - size.width * 0.5;
  v3 = centerPoint.y - size.height * 0.5;
  result.size.height = size.height;
  result.size.width = size.width;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

__C::CGRect __swiftcall CGRect.init(p1:p2:)(CGPoint p1, CGPoint p2)
{
  double x;
  double y;
  double v4;
  double v5;
  double v6;
  double v7;
  __C::CGRect result;

  if (p2.x >= p1.x)
    x = p1.x;
  else
    x = p2.x;
  if (p2.y >= p1.y)
    y = p1.y;
  else
    y = p2.y;
  v4 = vabdd_f64(p1.x, p2.x);
  v5 = vabdd_f64(p1.y, p2.y);
  v6 = x;
  v7 = y;
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v7;
  result.origin.x = v6;
  return result;
}

double CGRect.centerPoint.getter(double a1, double a2, double a3)
{
  return a3 * 0.5 + a1;
}

void CGRect.ints.getter(double a1, double a2, CGFloat a3, CGFloat a4)
{
  double v4;
  double v7;
  double v10;
  double v11;
  CGRect v12;

  v4 = round(a1);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = round(a2);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v10 = round(CGRectGetWidth(*(CGRect *)&a1));
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  v11 = round(CGRectGetHeight(v12));
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v11 >= 9.22337204e18)
LABEL_25:
    __break(1u);
}

double CGRect.floats.getter(float64x2_t a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat Height;
  float64x2_t v7;
  double result;
  CGFloat v9;
  CGFloat Width;
  int32x2_t v12;
  CGRect v13;

  v9 = a1.f64[0];
  a1.f64[1] = a2;
  v12 = (int32x2_t)vcvt_f32_f64(a1);
  Width = CGRectGetWidth(*(CGRect *)a1.f64);
  v13.origin.x = v9;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  Height = CGRectGetHeight(v13);
  v7.f64[0] = Width;
  v7.f64[1] = Height;
  *(_QWORD *)&result = vcvt_hight_f32_f64(v12, v7).u64[0];
  return result;
}

__C::CGRect __swiftcall CGRect.round()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  __C::CGRect result;

  v4 = round(v0);
  v5 = round(v1);
  v6 = round(v2);
  v7 = round(v3);
  result.size.height = v7;
  result.size.width = v6;
  result.origin.y = v5;
  result.origin.x = v4;
  return result;
}

__C::CGRect __swiftcall CGRect.ceil()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  __C::CGRect result;

  v4 = ceil(v0);
  v5 = ceil(v1);
  v6 = ceil(v2);
  v7 = ceil(v3);
  result.size.height = v7;
  result.size.width = v6;
  result.origin.y = v5;
  result.origin.x = v4;
  return result;
}

void CGRect.rotated(byRadians:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double MidX;
  double MidY;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  v14.origin.x = a2;
  v14.origin.y = a3;
  v14.size.width = a4;
  v14.size.height = a5;
  MidX = CGRectGetMidX(v14);
  v15.origin.x = a2;
  v15.origin.y = a3;
  v15.size.width = a4;
  v15.size.height = a5;
  MidY = CGRectGetMidY(v15);
  CGAffineTransformMakeTranslation(&v13, MidX, MidY);
  CGAffineTransformRotate(&v12, &v13, a1);
  v13 = v12;
  CGAffineTransformTranslate(&v12, &v13, -MidX, -MidY);
  v13 = v12;
  v16.origin.x = a2;
  v16.origin.y = a3;
  v16.size.width = a4;
  v16.size.height = a5;
  CGRectApplyAffineTransform(v16, &v13);
}

double CGRect.withWidth(_:)(double a1, double a2)
{
  return a2;
}

double CGRect.withHeight(_:)(double a1, double a2)
{
  return a2;
}

unint64_t sub_2215C2318(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B88);
  v2 = sub_221653A14();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2215C3ABC(v6, (uint64_t)&v13, &qword_2556D9B90);
    v7 = v13;
    result = sub_2215CA2D4(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_2215C39AC(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2215C2444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B38);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B40);
  v6 = sub_221653A14();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2215C3ABC(v12, (uint64_t)v5, &qword_2556D9B38);
    result = sub_2215CA2D8((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_221652FD0();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = v7[7] + 8 * v16;
    v20 = *((_DWORD *)v9 + 1);
    *(_BYTE *)v19 = *v9;
    *(_DWORD *)(v19 + 4) = v20;
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2215C25E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B20);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B28);
  v6 = sub_221653A14();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2215C3ABC(v12, (uint64_t)v5, &qword_2556D9B20);
    result = sub_2215CA2D8((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_221652FD0();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2215C277C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B98);
  v2 = (_QWORD *)sub_221653A14();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = sub_2215CA400((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2215C2878(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B78);
  v2 = sub_221653A14();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2215C3ABC(v6, (uint64_t)&v15, &qword_2556D9B80);
    v7 = v15;
    v8 = v16;
    result = sub_2215CA39C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_2215C39AC(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2215C29AC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B60);
  v2 = (_QWORD *)sub_221653A14();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_2215CA39C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2215C2ABC(uint64_t a1)
{
  return sub_2215C2C10(a1, &qword_2556D9B58);
}

unint64_t sub_2215C2AC8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B70);
  v2 = (_QWORD *)sub_221653A14();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_2215CA39C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2215C2BE0(uint64_t a1)
{
  return sub_2215C2C10(a1, &qword_2556D9B68);
}

unint64_t sub_2215C2BEC(uint64_t a1)
{
  return sub_2215C2C10(a1, &qword_2556D9B50);
}

unint64_t sub_2215C2BF8(uint64_t a1)
{
  return sub_2215C2C10(a1, &qword_2556D9B48);
}

unint64_t sub_2215C2C04(uint64_t a1)
{
  return sub_2215C2C10(a1, &qword_2556D9B18);
}

unint64_t sub_2215C2C10(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)sub_221653A14();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    result = sub_2215CA39C(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2215C2D1C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B08);
  v2 = sub_221653A14();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2215C3ABC(v6, (uint64_t)&v13, &qword_2556D9B10);
    v7 = v13;
    result = sub_2215CA400(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_2215C39AC(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t AlignedBytesPerRow;
  void *v17;
  void *v18;
  void *v19;
  void **v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  const __CFDictionary *v30;
  IOSurfaceRef v31;
  IOSurfaceRef v32;
  id v33;

  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
  objc_msgSend(v12, sel_setTextureType_, 2);
  objc_msgSend(v12, sel_setPixelFormat_, a4);
  objc_msgSend(v12, sel_setWidth_, a2);
  objc_msgSend(v12, sel_setHeight_, a3);
  if ((a6 & 1) != 0)
    v13 = 3;
  else
    v13 = a5;
  objc_msgSend(v12, sel_setUsage_, v13);
  objc_msgSend(v12, sel_setSampleCount_, 1);
  v14 = bytesPerPixel(of:)(a4);
  result = a2 * v14;
  if ((unsigned __int128)(a2 * (__int128)v14) >> 64 != (a2 * v14) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B00);
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_221656190;
  v17 = (void *)*MEMORY[0x24BDD8FD0];
  *(_QWORD *)(result + 32) = *MEMORY[0x24BDD8FD0];
  *(_QWORD *)(result + 40) = a2;
  v18 = (void *)*MEMORY[0x24BDD8EB0];
  *(_QWORD *)(result + 48) = *MEMORY[0x24BDD8EB0];
  *(_QWORD *)(result + 56) = a3;
  v19 = (void *)*MEMORY[0x24BDD8E38];
  v20 = (void **)MEMORY[0x24BDD8E18];
  *(_QWORD *)(result + 64) = *MEMORY[0x24BDD8E38];
  *(_QWORD *)(result + 72) = AlignedBytesPerRow;
  v21 = *v20;
  *(_QWORD *)(result + 80) = *v20;
  v22 = AlignedBytesPerRow * a3;
  if ((unsigned __int128)(AlignedBytesPerRow * (__int128)a3) >> 64 != (AlignedBytesPerRow * a3) >> 63)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v23 = result;
  v24 = (void *)*MEMORY[0x24BDD8E30];
  *(_QWORD *)(result + 88) = v22;
  *(_QWORD *)(result + 96) = v24;
  *(_QWORD *)(result + 104) = v14;
  v25 = v17;
  v26 = v18;
  v27 = v19;
  v28 = v21;
  v29 = v24;
  sub_2215C277C(v23);
  type metadata accessor for CFString(0);
  sub_2215C3964();
  v30 = (const __CFDictionary *)sub_22165309C();
  swift_bridgeObjectRelease();
  v31 = IOSurfaceCreate(v30);
  if (v31)
  {
    v32 = v31;
    v33 = objc_msgSend(a1, sel_newTextureWithDescriptor_iosurface_plane_, v12, v31, 0);

  }
  else
  {

    return 0;
  }
  return (uint64_t)v33;
}

uint64_t bytesPerPixel(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  if (a1 > 104)
  {
    if (a1 == 125)
    {
      return 16;
    }
    else if (a1 == 115 || a1 == 105)
    {
      return 8;
    }
    else
    {
LABEL_10:
      sub_221653894();
      sub_221653210();
      type metadata accessor for MTLPixelFormat(0);
      sub_221653960();
      result = sub_221653984();
      __break(1u);
    }
  }
  else
  {
    v1 = 4;
    switch(a1)
    {
      case 1:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        result = 1;
        break;
      case 55:
      case 80:
        return v1;
      default:
        goto LABEL_10;
    }
  }
  return result;
}

id makeIOSurfaceTexture(device:width:height:pixelFormat:iosurface:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  id v11;

  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
  objc_msgSend(v10, sel_setTextureType_, 2);
  objc_msgSend(v10, sel_setPixelFormat_, a4);
  objc_msgSend(v10, sel_setWidth_, a2);
  objc_msgSend(v10, sel_setHeight_, a3);
  objc_msgSend(v10, sel_setUsage_, 3);
  objc_msgSend(v10, sel_setSampleCount_, 1);
  v11 = objc_msgSend(a1, sel_newTextureWithDescriptor_iosurface_plane_, v10, a5, 0);

  return v11;
}

uint64_t makeCacheTexture(cache:pixelBuffer:pixelFormat:planeIndex:)(__CVMetalTextureCache *a1, CVPixelBufferRef pixelBuffer, MTLPixelFormat a3, size_t planeIndex)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  uint64_t result;
  CVMetalTextureRef v11;
  id v12;
  CVMetalTextureRef image[2];

  image[1] = *(CVMetalTextureRef *)MEMORY[0x24BDAC8D0];
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, planeIndex);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, planeIndex);
  image[0] = 0;
  result = CVMetalTextureCacheCreateTextureFromImage(0, a1, pixelBuffer, 0, a3, WidthOfPlane, HeightOfPlane, planeIndex, image);
  v11 = image[0];
  if ((_DWORD)result)
  {

    return 0;
  }
  if (image[0])
  {
    v12 = CVMetalTextureGetTexture(image[0]);

    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

CVBufferRef_optional __swiftcall makePixelBuffer(width:height:pixelFormat:)(Swift::Int width, Swift::Int height, Swift::UInt32 pixelFormat)
{
  CVPixelBufferRef v4[2];

  v4[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v4[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], width, height, pixelFormat, 0, v4);
  return (CVBufferRef_optional)v4[0];
}

CVBufferRef_optional __swiftcall makePixelBuffer(from:)(IOSurface from)
{
  CVPixelBufferRef v2[2];

  v2[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v2[0] = 0;
  CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x24BDBD240], from.super.isa, 0, v2);
  return (CVBufferRef_optional)v2[0];
}

IOSurface_optional __swiftcall makeIOSurfaceOfFirstPlane(from:)(CVBufferRef from)
{
  size_t WidthOfPlane;
  int64_t HeightOfPlane;
  int64_t BytesPerRowOfPlane;
  size_t inited;
  void *v6;
  Swift::Bool v7;
  uint64_t v8;
  int64_t BytesPerRow;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  void *v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  const __CFDictionary *v23;
  IOSurfaceRef v24;
  IOSurface_optional result;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(from, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(from, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(from, 0);
  inited = CVPixelBufferGetWidthOfPlane(from, 0);
  if (!inited)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = inited;
  if (BytesPerRowOfPlane == 0x8000000000000000 && inited == -1)
    goto LABEL_8;
  BytesPerRow = CVPixelBufferGetBytesPerRow(from);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B00);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_221656190;
  v10 = (void *)*MEMORY[0x24BDD8FD0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDD8FD0];
  *(_QWORD *)(inited + 40) = WidthOfPlane;
  v11 = (void *)*MEMORY[0x24BDD8EB0];
  *(_QWORD *)(inited + 48) = *MEMORY[0x24BDD8EB0];
  *(_QWORD *)(inited + 56) = HeightOfPlane;
  v12 = (void *)*MEMORY[0x24BDD8E38];
  v13 = (void **)MEMORY[0x24BDD8E18];
  *(_QWORD *)(inited + 64) = *MEMORY[0x24BDD8E38];
  *(_QWORD *)(inited + 72) = BytesPerRow;
  v14 = *v13;
  *(_QWORD *)(inited + 80) = *v13;
  v15 = BytesPerRow * HeightOfPlane;
  if ((unsigned __int128)(BytesPerRow * (__int128)HeightOfPlane) >> 64 != (BytesPerRow * HeightOfPlane) >> 63)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = inited;
  v17 = (void *)*MEMORY[0x24BDD8E30];
  *(_QWORD *)(inited + 88) = v15;
  *(_QWORD *)(inited + 96) = v17;
  *(_QWORD *)(inited + 104) = BytesPerRowOfPlane / v8;
  v18 = v10;
  v19 = v11;
  v20 = v12;
  v21 = v14;
  v22 = v17;
  sub_2215C277C(v16);
  type metadata accessor for CFString(0);
  sub_2215C3964();
  v23 = (const __CFDictionary *)sub_22165309C();
  swift_bridgeObjectRelease();
  v24 = IOSurfaceCreate(v23);

  inited = (size_t)v24;
LABEL_9:
  result.value._impl = v6;
  result.value.super.isa = (Class)inited;
  result.is_nil = v7;
  return result;
}

CGContextRef_optional __swiftcall makeCGContext(ioSurface:bitsPerComponent:)(IOSurface ioSurface, Swift::Int bitsPerComponent)
{
  void *impl;
  __IOSurface *isa;
  size_t BytesPerRow;
  void *BaseAddress;
  id v6;
  id v7;
  CGColorSpace *DeviceRGB;
  CGContextRef v9;

  impl = ioSurface._impl;
  isa = ioSurface.super.isa;
  BytesPerRow = IOSurfaceGetBytesPerRow(ioSurface.super.isa);
  BaseAddress = IOSurfaceGetBaseAddress(isa);
  v6 = -[__IOSurface width](isa, sel_width);
  v7 = -[__IOSurface height](isa, sel_height);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v9 = CGBitmapContextCreate(BaseAddress, (size_t)v6, (size_t)v7, (size_t)impl, BytesPerRow, DeviceRGB, 0x2002u);

  return (CGContextRef_optional)v9;
}

Swift::Int __swiftcall fillIOSurface(_:with:at:)(IOSurface _, CVBufferRef with, Swift::Int at)
{
  __CVBuffer *impl;
  __IOSurface *isa;
  void *BaseAddress;
  int64_t BytesPerRow;
  Swift::Int result;
  Swift::Int v9;
  Swift::Int v10;
  int64_t v11;
  char *v12;

  impl = (__CVBuffer *)_._impl;
  isa = _.super.isa;
  CVPixelBufferLockBaseAddress((CVPixelBufferRef)_._impl, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(impl);
  BytesPerRow = CVPixelBufferGetBytesPerRow(impl);
  result = CVPixelBufferGetHeight(impl);
  v9 = BytesPerRow * result;
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 != (BytesPerRow * result) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  result = IOSurfaceGetBytesPerElement(isa);
  v10 = result * (_QWORD)with;
  if ((unsigned __int128)(result * (__int128)(uint64_t)with) >> 64 != (result * (uint64_t)with) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = IOSurfaceGetBytesPerRow(isa);
  result = IOSurfaceGetHeight(isa);
  if ((unsigned __int128)(v11 * (__int128)result) >> 64 != (v11 * result) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v10, v9))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (v11 * result >= v10 + v9)
  {
    v12 = (char *)IOSurfaceGetBaseAddress(isa);
    memcpy(&v12[v10], BaseAddress, v9);
  }
  else
  {
    v9 = 0;
  }
  CVPixelBufferUnlockBaseAddress(impl, 1uLL);
  return v9;
}

Swift::Int __swiftcall fillIOSurface(_:with:fromPlaneIndex:)(IOSurface _, CVBufferRef with, Swift::Int fromPlaneIndex)
{
  __CVBuffer *impl;
  __IOSurface *isa;
  void *BaseAddress;
  int64_t BytesPerRowOfPlane;
  Swift::Int result;
  Swift::Int v9;
  int64_t BytesPerRow;
  void *v11;

  impl = (__CVBuffer *)_._impl;
  isa = _.super.isa;
  CVPixelBufferLockBaseAddress((CVPixelBufferRef)_._impl, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(impl);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(impl, (size_t)with);
  result = CVPixelBufferGetHeight(impl);
  v9 = BytesPerRowOfPlane * result;
  if ((unsigned __int128)(BytesPerRowOfPlane * (__int128)result) >> 64 != (BytesPerRowOfPlane * result) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  BytesPerRow = IOSurfaceGetBytesPerRow(isa);
  result = IOSurfaceGetHeight(isa);
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 != (BytesPerRow * result) >> 63)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (BytesPerRow * result >= v9)
  {
    v11 = IOSurfaceGetBaseAddress(isa);
    memcpy(v11, BaseAddress, v9);
  }
  else
  {
    v9 = 0;
  }
  CVPixelBufferUnlockBaseAddress(impl, 1uLL);
  return v9;
}

Swift::Int __swiftcall fillIOSurface(_:with:at:)(IOSurface _, IOSurface with, Swift::Int at)
{
  Class isa;
  __IOSurface *impl;
  __IOSurface *v5;
  void *BaseAddress;
  int64_t BytesPerRow;
  Swift::Int result;
  Swift::Int v9;
  Swift::Int v10;
  int64_t v11;
  char *v12;

  isa = with.super.isa;
  impl = (__IOSurface *)_._impl;
  v5 = _.super.isa;
  BaseAddress = IOSurfaceGetBaseAddress((IOSurfaceRef)_._impl);
  BytesPerRow = IOSurfaceGetBytesPerRow(impl);
  result = IOSurfaceGetHeight(impl);
  v9 = BytesPerRow * result;
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 != (BytesPerRow * result) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  result = IOSurfaceGetBytesPerElement(v5);
  v10 = result * (_QWORD)isa;
  if ((unsigned __int128)(result * (__int128)(uint64_t)isa) >> 64 != (result * (uint64_t)isa) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = IOSurfaceGetBytesPerRow(v5);
  result = IOSurfaceGetHeight(v5);
  if ((unsigned __int128)(v11 * (__int128)result) >> 64 != (v11 * result) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v10, v9))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (v11 * result < v10 + v9)
    return 0;
  v12 = (char *)IOSurfaceGetBaseAddress(v5);
  memcpy(&v12[v10], BaseAddress, v9);
  return v9;
}

unint64_t sub_2215C3964()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2556D9108;
  if (!qword_2556D9108)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x22766FA4C](&unk_221655BC0, v1);
    atomic_store(result, (unint64_t *)&qword_2556D9108);
  }
  return result;
}

_OWORD *sub_2215C39AC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_2215C39BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B30);
  v3 = (_QWORD *)sub_221653A14();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_2215CA344(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = sub_2215CA344(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215C3ABC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

double CGSize.multiply(by:)(double a1, double a2)
{
  return a1 * a2;
}

CGSize __swiftcall CGSize.round()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  CGSize result;

  v2 = round(v0);
  v3 = round(v1);
  result.height = v3;
  result.width = v2;
  return result;
}

CGSize __swiftcall CGSize.ceil()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  CGSize result;

  v2 = ceil(v0);
  v3 = ceil(v1);
  result.height = v3;
  result.width = v2;
  return result;
}

__n128 sub_2215C3B2C()
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  static CGSize.one = (__int128)result;
  return result;
}

__int128 *CGSize.one.unsafeMutableAddressor()
{
  if (qword_2556D8D78 != -1)
    swift_once();
  return &static CGSize.one;
}

double static CGSize.one.getter()
{
  if (qword_2556D8D78 != -1)
    swift_once();
  return *(double *)&static CGSize.one;
}

CGSize __swiftcall CGSize.multiply(by:)(CGSize by)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGSize result;

  v3 = by.width * v1;
  v4 = by.height * v2;
  result.height = v4;
  result.width = v3;
  return result;
}

float64x2_t static CGSize.*= infix(_:_:)(float64x2_t *a1, float64x2_t a2, float64_t a3)
{
  float64x2_t result;

  a2.f64[1] = a3;
  result = vmulq_f64(*a1, a2);
  *a1 = result;
  return result;
}

double CGSize.divide(by:)(double a1, double a2)
{
  return a2 / a1;
}

CGSize __swiftcall CGSize.divide(by:)(CGSize by)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGSize result;

  v3 = v1 / by.width;
  v4 = v2 / by.height;
  result.height = v4;
  result.width = v3;
  return result;
}

CGSize __swiftcall CGSize.divide(by:)(Swift::Int by)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGSize result;

  v3 = v1 / (double)by;
  v4 = v2 / (double)by;
  result.height = v4;
  result.width = v3;
  return result;
}

float64x2_t static CGSize./= infix(_:_:)(float64x2_t *a1, double a2)
{
  float64x2_t result;

  result = vdivq_f64(*a1, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  *a1 = result;
  return result;
}

CGSize __swiftcall CGSize.add(_:)(CGSize a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGSize result;

  v3 = a1.width + v1;
  v4 = a1.height + v2;
  result.height = v4;
  result.width = v3;
  return result;
}

double static CGSize.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 + a2;
  v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

CGSize __swiftcall CGSize.subtract(_:)(CGSize a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGSize result;

  v3 = v1 - a1.width;
  v4 = v2 - a1.height;
  result.height = v4;
  result.width = v3;
  return result;
}

double static CGSize.-= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 - a2;
  v4 = a1[1] - a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL Optional.exists.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 48))(v4, 1);
  if (v5 != 1)
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5 != 1;
}

BOOL Optional.doesNotExist.getter(uint64_t a1)
{
  return !Optional.exists.getter(a1);
}

id KernelReprojection.__allocating_init(coder:device:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithCoder_device_, a1, a2);

  swift_unknownObjectRelease();
  return v4;
}

void KernelReprojection.init(coder:device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KernelReprojection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for KernelReprojection()
{
  return objc_opt_self();
}

id sub_2215C3F18(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id result;
  id v19;
  id v20;
  objc_super v21;
  id v22[2];

  v2 = v1;
  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = qword_2556D8D90;
  v6 = v2;
  if (v5 != -1)
    swift_once();
  v7 = (id)static MetalBundle.library;
  v8 = (void *)sub_22165318C();
  v9 = objc_msgSend(v7, sel_newFunctionWithName_, v8);

  if (!v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  v22[0] = 0;
  v10 = objc_msgSend(a1, sel_newComputePipelineStateWithFunction_error_, v9, v22);
  swift_unknownObjectRelease();
  v11 = v22[0];
  if (!v10)
  {
    v19 = v22[0];
    sub_221652ED4();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)&v6[OBJC_IVAR____TtC17MeasureFoundation18KernelReprojection_preprojectionPipeline] = v10;
  v12 = v11;
  v13 = (void *)sub_22165318C();
  v14 = objc_msgSend(v7, sel_newFunctionWithName_, v13);

  if (!v14)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v22[0] = 0;
  v15 = objc_msgSend(a1, sel_newComputePipelineStateWithFunction_error_, v14, v22);
  swift_unknownObjectRelease();
  v7 = v22[0];
  if (v15)
  {
    *(_QWORD *)&v6[OBJC_IVAR____TtC17MeasureFoundation18KernelReprojection_reprojectionPipeline] = v15;
    v16 = v7;
    v17 = objc_msgSend(a1, sel_newBufferWithLength_options_, 352, 0);
    if (v17)
    {
      *(_QWORD *)&v6[OBJC_IVAR____TtC17MeasureFoundation18KernelReprojection_uniformsBuffer] = v17;

      v21.receiver = v6;
      v21.super_class = ObjectType;
      return objc_msgSendSuper2(&v21, sel_initWithDevice_, a1);
    }
LABEL_11:
    __break(1u);
  }
LABEL_13:
  v20 = v7;
  sub_221652ED4();

  swift_willThrow();
  result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CVBufferRef.copy(from:)(IOSurface from)
{
  __CVBuffer *v1;
  __IOSurface *isa;
  BOOL v3;
  void *BaseAddress;
  void *v5;
  void *v6;
  int64_t BytesPerRow;
  int64_t Height;

  isa = from.super.isa;
  if (CVPixelBufferLockBaseAddress(v1, 1uLL))
  {
    v3 = 0;
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(v1);
    v3 = BaseAddress != 0;
    if (BaseAddress)
    {
      v5 = BaseAddress;
      v6 = IOSurfaceGetBaseAddress(isa);
      BytesPerRow = IOSurfaceGetBytesPerRow(isa);
      Height = IOSurfaceGetHeight(isa);
      if ((unsigned __int128)(BytesPerRow * (__int128)Height) >> 64 != (BytesPerRow * Height) >> 63)
      {
        __break(1u);
        return Height;
      }
      memcpy(v5, v6, BytesPerRow * Height);
    }
    CVPixelBufferUnlockBaseAddress(v1, 1uLL);
  }
  LOBYTE(Height) = v3;
  return Height;
}

Swift::Bool __swiftcall CVBufferRef.copy(to:)(IOSurface to)
{
  __CVBuffer *v1;
  __IOSurface *isa;
  BOOL v3;
  void *BaseAddress;
  const void *v5;
  void *v6;
  int64_t BytesPerRow;
  int64_t Height;

  isa = to.super.isa;
  if (CVPixelBufferLockBaseAddress(v1, 1uLL))
  {
    v3 = 0;
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(v1);
    v3 = BaseAddress != 0;
    if (BaseAddress)
    {
      v5 = BaseAddress;
      v6 = IOSurfaceGetBaseAddress(isa);
      BytesPerRow = IOSurfaceGetBytesPerRow(isa);
      Height = IOSurfaceGetHeight(isa);
      if ((unsigned __int128)(BytesPerRow * (__int128)Height) >> 64 != (BytesPerRow * Height) >> 63)
      {
        __break(1u);
        return Height;
      }
      memcpy(v6, v5, BytesPerRow * Height);
    }
    CVPixelBufferUnlockBaseAddress(v1, 1uLL);
  }
  LOBYTE(Height) = v3;
  return Height;
}

CVBufferRef_optional __swiftcall CVBufferRef.clone()()
{
  __CVBuffer *v0;
  size_t Width;
  int64_t Height;
  OSType PixelFormatType;
  CVPixelBufferRef v4;
  __CVBuffer *v5;
  int64_t PlaneCount;
  int64_t v7;
  size_t v8;
  void *BaseAddressOfPlane;
  void *v10;
  int64_t HeightOfPlane;
  int64_t BytesPerRowOfPlane;
  void *BaseAddress;
  void *v14;
  int64_t BytesPerRow;
  __CVBuffer *v16;
  CVPixelBufferRef v18[2];

  v18[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  Width = CVPixelBufferGetWidth(v0);
  Height = CVPixelBufferGetHeight(v0);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v0);
  v18[0] = 0;
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, 0, v18);
  v4 = v18[0];
  if (v18[0])
  {
    v5 = v18[0];
    CVPixelBufferLockBaseAddress(v0, 1uLL);
    CVPixelBufferLockBaseAddress(v5, 0);
    PlaneCount = CVPixelBufferGetPlaneCount(v0);
    if (PlaneCount >= 1)
    {
      v7 = PlaneCount;
      v8 = 0;
      while (1)
      {
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v0, v8);
        v10 = CVPixelBufferGetBaseAddressOfPlane(v5, v8);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(v0, v8);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v0, v8);
        if ((unsigned __int128)(HeightOfPlane * (__int128)BytesPerRowOfPlane) >> 64 != (HeightOfPlane
                                                                                       * BytesPerRowOfPlane) >> 63)
          break;
        ++v8;
        memcpy(v10, BaseAddressOfPlane, HeightOfPlane * BytesPerRowOfPlane);
        if (v7 == v8)
          goto LABEL_9;
      }
      __break(1u);
LABEL_12:
      __break(1u);
    }
    BaseAddress = CVPixelBufferGetBaseAddress(v0);
    v14 = CVPixelBufferGetBaseAddress(v5);
    BytesPerRow = CVPixelBufferGetBytesPerRow(v0);
    if ((unsigned __int128)(Height * (__int128)BytesPerRow) >> 64 != (Height * BytesPerRow) >> 63)
      goto LABEL_12;
    memcpy(v14, BaseAddress, Height * BytesPerRow);
LABEL_9:
    v16 = v5;
    CVPixelBufferUnlockBaseAddress(v0, 1uLL);
    CVPixelBufferUnlockBaseAddress(v16, 0);

  }
  return (CVBufferRef_optional)v4;
}

CVBufferRef_optional __swiftcall CVBufferRef.copiedPlane(_:with:format:)(Swift::Int _, Swift::tuple_width_Int_height_Int with, Swift::UInt32 format)
{
  __CVBuffer *v3;
  Swift::Int height;
  Swift::Int width;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  BOOL v10;
  size_t v11;
  size_t v12;
  __CVBuffer *v13;
  int64_t BytesPerRowOfPlane;
  int64_t BytesPerRow;
  void *BaseAddressOfPlane;
  void *v17;
  char *BaseAddress;
  int64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  int64_t v23;
  int64_t v24;
  __CVBuffer *v25;
  CVBufferRef_optional v26;
  CVPixelBufferRef v28[2];

  height = with.height;
  width = with.width;
  v28[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(v3, _);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(v3, _);
  if (width + 0x4000000000000000 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = __OFSUB__(WidthOfPlane, 2 * width);
  v11 = WidthOfPlane - 2 * width;
  if (v10)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (height + 0x4000000000000000 < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v12 = HeightOfPlane - 2 * height;
  if (__OFSUB__(HeightOfPlane, 2 * height))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v28[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, v12, format, 0, v28);
  v13 = v28[0];
  if (!v28[0])
    return 0;
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v3, _);
  BytesPerRow = CVPixelBufferGetBytesPerRow(v13);
  CVPixelBufferLockBaseAddress(v3, 1uLL);
  CVPixelBufferLockBaseAddress(v13, 0);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v3, _);
  if (BaseAddressOfPlane && (v17 = BaseAddressOfPlane, (BaseAddress = (char *)CVPixelBufferGetBaseAddress(v13)) != 0))
  {
    v19 = BytesPerRowOfPlane * height;
    if ((unsigned __int128)(BytesPerRowOfPlane * (__int128)height) >> 64 != (BytesPerRowOfPlane * height) >> 63)
    {
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_27;
    if (v12)
    {
      v20 = BaseAddress;
      v21 = 0;
      v22 = (Swift::Int)v17 + v19 + width;
      while (1)
      {
        v23 = v21 * BytesPerRow;
        if ((unsigned __int128)(v21 * (__int128)BytesPerRow) >> 64 != (v21 * BytesPerRow) >> 63)
          break;
        v24 = BytesPerRowOfPlane * v21;
        if ((unsigned __int128)(BytesPerRowOfPlane * (__int128)v21) >> 64 != (BytesPerRowOfPlane * v21) >> 63)
          goto LABEL_21;
        ++v21;
        memcpy(&v20[v23], (const void *)(v22 + v24), v11);
        if (v12 == v21)
          goto LABEL_15;
      }
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_15:
    v25 = v13;
    v26.value = v13;
  }
  else
  {
    v26.value = 0;
  }
  CVPixelBufferUnlockBaseAddress(v3, 1uLL);
  CVPixelBufferUnlockBaseAddress(v13, 0);

  return v26;
}

Swift::Void __swiftcall logCVError(_:label:)(Swift::Int32 _, Swift::String label)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (_)
  {
    object = label._object;
    countAndFlagsBits = label._countAndFlagsBits;
    if (qword_2556D8F38 != -1)
      swift_once();
    v4 = qword_2556E46E0;
    v5 = *(_QWORD *)algn_2556E46E8;
    sub_221653894();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_221653210();
    sub_221653ABC();
    sub_221653210();
    swift_bridgeObjectRelease();
    v6 = sub_221653618();
    _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v6, 0, v4, v5);
    swift_bridgeObjectRelease();
  }
}

Swift::Bool __swiftcall checkCVSuccess(_:label:)(Swift::Int32 _, Swift::String label)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (_)
  {
    object = label._object;
    countAndFlagsBits = label._countAndFlagsBits;
    if (qword_2556D8F38 != -1)
      swift_once();
    v5 = qword_2556E46E0;
    v6 = *(_QWORD *)algn_2556E46E8;
    sub_221653894();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_221653210();
    sub_221653ABC();
    sub_221653210();
    swift_bridgeObjectRelease();
    v7 = sub_221653618();
    _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v7, 0, v5, v6);
    swift_bridgeObjectRelease();
  }
  return _ == 0;
}

uint64_t *MetalBundle.library.unsafeMutableAddressor()
{
  if (qword_2556D8D90 != -1)
    swift_once();
  return &static MetalBundle.library;
}

id sub_2215C4924()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for MetalBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_2556D9CA0 = (uint64_t)result;
  return result;
}

id sub_2215C4974()
{
  id result;

  result = MTLCreateSystemDefaultDevice();
  if (result)
    static MetalBundle.device = (uint64_t)result;
  else
    __break(1u);
  return result;
}

uint64_t *MetalBundle.device.unsafeMutableAddressor()
{
  if (qword_2556D8D88 != -1)
    swift_once();
  return &static MetalBundle.device;
}

uint64_t static MetalBundle.device.getter()
{
  return sub_2215C4B34(&qword_2556D8D88);
}

id sub_2215C49F4()
{
  void *v0;
  id v1;
  id result;
  id v3;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (qword_2556D8D88 != -1)
    swift_once();
  v0 = (void *)static MetalBundle.device;
  if (qword_2556D8D80 != -1)
    swift_once();
  v4[0] = 0;
  v1 = objc_msgSend(v0, sel_newDefaultLibraryWithBundle_error_, qword_2556D9CA0, v4);
  if (v1)
  {
    static MetalBundle.library = (uint64_t)v1;
    return v4[0];
  }
  else
  {
    v3 = v4[0];
    sub_221652ED4();

    swift_willThrow();
    result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t static MetalBundle.library.getter()
{
  return sub_2215C4B34(&qword_2556D8D90);
}

uint64_t sub_2215C4B34(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_unknownObjectRetain();
}

uint64_t MetalBundle.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MetalBundle.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MetalBundle()
{
  return objc_opt_self();
}

id sub_2215C4BA4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *Strong;
  void *v5;
  id v6;
  id result;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v1 + 88) = a1;
  *(_QWORD *)(v1 + 96) = 0;
  v3 = *(void **)(a1 + 32);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v5 = *(void **)(a1 + 40);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6 = sub_2215C51A8(Strong, v5);

  swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 48) = v6;
  result = objc_msgSend(v3, sel_newBufferWithLength_options_, 9216, 0);
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)(v1 + 40) = result;
  result = objc_msgSend(v3, sel_newBufferWithLength_options_, 18432, 0);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = result;
  *(_QWORD *)(v1 + 56) = result;
  v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v10 = v8;
  *(_QWORD *)(v1 + 64) = v9;
  result = objc_msgSend(v3, sel_newBufferWithLength_options_, 4608, 0);
  if (result)
  {
    v11 = result;
    *(_QWORD *)(v1 + 72) = result;
    v12 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v13 = v11;
    *(_QWORD *)(v1 + 80) = v12;
    result = (id)swift_release();
    v14 = MEMORY[0x24BEE4AF8];
    *(_WORD *)(v1 + 32) = 257;
    *(_BYTE *)(v1 + 34) = 1;
    v15 = qword_2556D9998;
    *(_QWORD *)(v1 + 16) = qword_2556D9998;
    *(_QWORD *)(v1 + 24) = v14;
    if (v15 != -1)
    {
      qword_2556D9998 = v15 + 1;
      swift_unknownObjectRelease();
      swift_release();
      return (id)v1;
    }
    __break(1u);
    goto LABEL_7;
  }
LABEL_9:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DebugLocalNode.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  float64x2_t *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v2 = v1;
  v3 = -[objc_class capturedPointCloudData](frame.super.isa, sel_capturedPointCloudData);
  if (v3)
  {
    v15 = v3;
    v4 = objc_msgSend(v3, sel_depthPointCloud);
    if (!v4)
      goto LABEL_9;
    v5 = v4;
    v6 = (float64x2_t *)objc_msgSend(v4, sel_cameraPixels);

    if (!v6)
      goto LABEL_9;
    v7 = objc_msgSend(v15, sel_depthPointCloud);
    if (!v7)
      goto LABEL_9;
    v8 = v7;
    v9 = objc_msgSend(v7, sel_confidences);

    if (!v9)
      goto LABEL_9;
    v10 = *(_QWORD *)(sub_221653600() + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 96) = v10;
    sub_2215C5118(v6, v10, *(void **)(v2 + 40));
    v11 = *(void **)(v2 + 64);
    v12 = sub_221653600();
    v13 = *(_QWORD *)(v2 + 96);
    if ((unint64_t)(v13 - 0x800000000000000) >> 60 == 15)
    {
      memcpy(v11, (const void *)(v12 + 32), 16 * v13);
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v2 + 96);
      if ((unint64_t)(v14 - 0x2000000000000000) >> 62 == 3)
      {
        memcpy(*(void **)(v2 + 80), v9, 4 * v14);
LABEL_9:

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void DebugLocalNode.draw(commandBuffer:)(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;

  v2 = v1[6];
  if (v2)
  {
    v3 = v1;
    v5 = v1[11];
    swift_unknownObjectRetain();
    v6 = (unint64_t)MetalScene.makeDefaultRenderPassDescriptor()();
    if (v6)
    {
      v9 = (id)v6;
      v7 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_);
      if (v7)
      {
        v8 = v7;
        objc_msgSend(v7, sel_setRenderPipelineState_, v2);
        swift_beginAccess();
        objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v5 + 192), 0, 0);
        objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, v3[5], 0, 1);
        objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, v3[7], 0, 2);
        objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, v3[9], 0, 3);
        objc_msgSend(v8, sel_drawPrimitives_vertexStart_vertexCount_, 0, 0, v3[12]);
        objc_msgSend(v8, sel_endEncoding);
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();

      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void DebugLocalNode.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DebugLocalNode.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_2215C5054()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t DebugLocalNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t DebugLocalNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

id sub_2215C5118(float64x2_t *a1, uint64_t a2, void *a3)
{
  float32x2_t *v6;
  id result;
  float64x2_t v8;

  swift_unknownObjectRetain();
  v6 = (float32x2_t *)objc_msgSend(a3, sel_contents);
  result = a3;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
    {
      v8 = *a1++;
      *v6++ = vcvt_f32_f64(v8);
    }
  }
  return result;
}

uint64_t type metadata accessor for DebugLocalNode()
{
  return objc_opt_self();
}

id sub_2215C51A8(void *a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v23[2];

  v23[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD6B8]), sel_init);
  objc_msgSend(v4, sel_setAlphaToCoverageEnabled_, 1);
  v5 = (void *)sub_22165318C();
  v6 = objc_msgSend(a2, sel_newFunctionWithName_, v5);

  if (!v6)
  {
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v4, sel_setVertexFunction_, v6);
  swift_unknownObjectRelease();
  v7 = (void *)sub_22165318C();
  v8 = objc_msgSend(a2, sel_newFunctionWithName_, v7);

  if (!v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v4, sel_setFragmentFunction_, v8);
  swift_unknownObjectRelease();
  objc_msgSend(v4, sel_setDepthAttachmentPixelFormat_, objc_msgSend(a1, sel_depthStencilPixelFormat));
  v9 = objc_msgSend(v4, sel_colorAttachments);
  v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

  if (!v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v10, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  v11 = objc_msgSend(v4, sel_colorAttachments);
  v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 0);

  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v12, sel_setBlendingEnabled_, 0);

  v13 = objc_msgSend(v4, sel_colorAttachments);
  v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  objc_msgSend(v14, sel_setDestinationRGBBlendFactor_, 5);

  v15 = objc_msgSend(v4, sel_colorAttachments);
  v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
    goto LABEL_19;
  objc_msgSend(v16, sel_setDestinationAlphaBlendFactor_, 5);

  objc_msgSend(v4, sel_setDepthAttachmentPixelFormat_, objc_msgSend(a1, sel_depthStencilPixelFormat));
  v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {

    return 0;
  }
  v23[0] = 0;
  v18 = objc_msgSend(v17, sel_newRenderPipelineStateWithDescriptor_error_, v4, v23);
  swift_unknownObjectRelease();
  v19 = v23[0];
  if (!v18)
  {
    v20 = v19;
    v21 = (void *)sub_221652ED4();

    swift_willThrow();
    return 0;
  }

  return v18;
}

void sub_2215C5534()
{
  static CVUtil.edgeKernel = (uint64_t)&unk_24E7227C8;
}

uint64_t *CVUtil.edgeKernel.unsafeMutableAddressor()
{
  if (qword_2556D8D98 != -1)
    swift_once();
  return &static CVUtil.edgeKernel;
}

uint64_t static CVUtil.edgeKernel.getter()
{
  return sub_2215C5614(&qword_2556D8D98);
}

void sub_2215C55A4()
{
  static CVUtil.embossKernel = (uint64_t)&unk_24E722800;
}

uint64_t *CVUtil.embossKernel.unsafeMutableAddressor()
{
  if (qword_2556D8DA0 != -1)
    swift_once();
  return &static CVUtil.embossKernel;
}

uint64_t static CVUtil.embossKernel.getter()
{
  return sub_2215C5614(&qword_2556D8DA0);
}

uint64_t sub_2215C5614(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static CVUtil.makeWeights(srcBuffer:dstBuffer:tempBuffer:kernel:kernelWidth:kernelHeight:)@<X0>(void *a1@<X0>, int64_t a2@<X1>, vImagePixelCount a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  void *v18;
  unint64_t divisor;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  int64_t v27;
  vImagePixelCount v28;
  int64_t v29;
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD v35[5];
  unint64_t v36;
  unint64_t v37;
  char v38;
  _BYTE v39[40];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  sub_2215C6540(a5, (uint64_t)v35, &qword_2556D9F40);
  v18 = (void *)v35[0];
  v28 = v35[2];
  v29 = v35[1];
  v27 = v35[3];
  if ((a11 & 1) != 0)
    a10 = a8;
  src.data = a1;
  src.height = a2;
  src.width = a3;
  src.rowBytes = a4;
  sub_2215C6540(a5, (uint64_t)v39, &qword_2556D9F40);
  if (v39[32] == 1)
  {
    if (a2 < 0)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }
    if ((unsigned __int128)(a2 * (__int128)a4) >> 64 != (a2 * a4) >> 63)
      goto LABEL_24;
    v18 = malloc(a2 * a4);
  }
  else
  {
    a3 = v28;
    a2 = v29;
    a4 = v27;
  }
  dest.data = v18;
  dest.height = a2;
  dest.width = a3;
  dest.rowBytes = a4;
  if (a10 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((a10 | a8) < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a8 > 0xFFFFFFFFLL)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  divisor = *(_QWORD *)(a7 + 16);
  if (divisor >> 31)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = vImageConvolve_Planar8(&src, &dest, a6, 0, 0, (const int16_t *)(a7 + 32), a10, a8, divisor, 0, 4u);
  v21 = result;
  if (!result)
  {
    v25 = *(_OWORD *)&dest.data;
    v26 = *(_OWORD *)&dest.width;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_2216560E0;
  v36 = 0;
  v37 = 0xE000000000000000;
  sub_221653894();
  swift_bridgeObjectRelease();
  v36 = 0xD00000000000001ELL;
  v37 = 0x800000022165D140;
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  v23 = v36;
  v24 = v37;
  *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v24;
  sub_221653B70();
  swift_bridgeObjectRelease();
  result = sub_2215C6540(a5, (uint64_t)&v36, &qword_2556D9F40);
  v25 = 0uLL;
  if (v38 != 1)
  {
    v26 = 0uLL;
    goto LABEL_18;
  }
  result = (uint64_t)dest.data;
  if (dest.data)
  {
    result = MEMORY[0x22766FAF4](dest.data, -1, -1);
    v26 = 0uLL;
    v25 = 0uLL;
LABEL_18:
    *(_OWORD *)a9 = v25;
    *(_OWORD *)(a9 + 16) = v26;
    *(_BYTE *)(a9 + 32) = v21 != 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t static CVUtil.emboss(srcBuffer:dstBuffer:tempBuffer:flags:)@<X0>(void *a1@<X0>, int64_t a2@<X1>, vImagePixelCount a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _BYTE v10[40];

  sub_2215C59F8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v10);
  return sub_2215C6540((uint64_t)v10, a8, &qword_2556D9F40);
}

uint64_t static CVUtil.getImageWeight(image:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_2215C5CB0(a1, a2, a3, a5, a6, a7);
}

uint64_t static CVUtil.matchTemplate(image:template:templateWeight:along:linePoints:minMatchingThreshold:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>, float a13@<S4>, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t *a19)
{
  _BYTE v21[40];

  sub_2215C5F3C(a1, a2, a3, a4, a5, a6, a7, a14, (uint64_t)v21, a9, a10, a11, a12, a13, a16, a17, a18 | ((HIDWORD(a18) & 1) << 32), a19);
  return sub_2215C6540((uint64_t)v21, a8, &qword_2556D9F50);
}

uint64_t CVUtil.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t CVUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_2215C59F8@<X0>(void *a1@<X0>, int64_t a2@<X1>, vImagePixelCount a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int64_t v13;
  void *v14;
  vImagePixelCount v15;
  int64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD v29[5];
  unint64_t v30;
  unint64_t v31;
  char v32;
  _BYTE v33[40];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_2215C6540(a5, (uint64_t)v29, &qword_2556D9F40);
  v14 = (void *)v29[0];
  v13 = v29[1];
  v15 = v29[2];
  v16 = v29[3];
  src.data = a1;
  src.height = a2;
  src.width = a3;
  src.rowBytes = a4;
  sub_2215C6540(a5, (uint64_t)v33, &qword_2556D9F40);
  if (v33[32] == 1)
  {
    if (a2 < 0)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
    if ((unsigned __int128)(a2 * (__int128)a4) >> 64 != (a2 * a4) >> 63)
      goto LABEL_20;
    v14 = malloc(a2 * a4);
  }
  else
  {
    a2 = v13;
    a3 = v15;
    a4 = v16;
  }
  dest.data = v14;
  dest.height = a2;
  dest.width = a3;
  dest.rowBytes = a4;
  if (qword_2556D8DA0 == -1)
  {
    if ((a7 & 0x8000000000000000) == 0)
      goto LABEL_8;
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_once();
  if ((a7 & 0x8000000000000000) != 0)
    goto LABEL_17;
LABEL_8:
  if (HIDWORD(a7))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = vImageConvolve_Planar8(&src, &dest, a6, 0, 0, (const int16_t *)(static CVUtil.embossKernel + 32), 3u, 3u, 1, 0, a7);
  v18 = result;
  if (!result)
  {
    v22 = *(_OWORD *)&dest.data;
    v23 = *(_OWORD *)&dest.width;
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2216560E0;
  v30 = 0;
  v31 = 0xE000000000000000;
  sub_221653894();
  swift_bridgeObjectRelease();
  v30 = 0xD00000000000001ELL;
  v31 = 0x800000022165D140;
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  v20 = v30;
  v21 = v31;
  *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 40) = v21;
  sub_221653B70();
  swift_bridgeObjectRelease();
  result = sub_2215C6540(a5, (uint64_t)&v30, &qword_2556D9F40);
  v22 = 0uLL;
  if (v32 != 1)
  {
    v23 = 0uLL;
    goto LABEL_15;
  }
  result = (uint64_t)dest.data;
  if (dest.data)
  {
    result = MEMORY[0x22766FAF4](dest.data, -1, -1);
    v23 = 0uLL;
    v22 = 0uLL;
LABEL_15:
    *(_OWORD *)a8 = v22;
    *(_OWORD *)(a8 + 16) = v23;
    *(_BYTE *)(a8 + 32) = v18 != 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215C5CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[5];
  _QWORD v33[4];
  char v34;
  _BYTE v35[40];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[4];
  char v42;

  sub_2215C6540(a6, (uint64_t)v32, &qword_2556D9FF0);
  v11 = v32[0];
  v12 = v32[1];
  v14 = v32[2];
  v13 = v32[3];
  result = sub_2215C6540(a4, (uint64_t)v41, &qword_2556D9F40);
  if ((v42 & 1) != 0 || (v16 = v41[2], result = sub_2215C6540(a6, (uint64_t)&v36, &qword_2556D9FF0), (v40 & 1) != 0))
  {
    if ((a3 | a2) < 0)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((unsigned __int128)(a3 * (__int128)a2) >> 64 != (a3 * a2) >> 63)
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v17 = a3 - 1;
    v18 = a2 - 1;
    result = sub_2215C6540(a6, (uint64_t)v35, &qword_2556D9FF0);
    if (v35[32] == 1)
    {
      result = sub_2215C6540(a5, (uint64_t)v33, &qword_2556D9FF0);
      if ((v34 & 1) != 0)
      {
        v20 = 0;
        v21 = 0;
LABEL_25:
        if (v18 < v20 || v17 < v21)
          goto LABEL_46;
        v28 = 0.0;
        while (1)
        {
          v29 = v20 * a3;
          if ((unsigned __int128)(v20 * (__int128)a3) >> 64 != (v20 * a3) >> 63)
            break;
          if (__OFADD__(v29, v21))
            goto LABEL_42;
          LOBYTE(v19) = *(_BYTE *)(a1 + v29 + v21);
          v19 = (float)LODWORD(v19);
          v28 = v28 + v19;
          if (v21 != v17)
          {
            if (v21 >= v17)
              goto LABEL_43;
            v30 = v21;
            while (!__OFADD__(v29, ++v30))
            {
              LOBYTE(v19) = *(_BYTE *)(a1 + v29 + v30);
              v19 = (float)LODWORD(v19);
              v28 = v28 + v19;
              if (v17 == v30)
                goto LABEL_35;
            }
            __break(1u);
            break;
          }
LABEL_35:
          if (v20 == v18)
            return result;
          v24 = __OFADD__(v20++, 1);
          if (v24)
          {
            __break(1u);
            return result;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v11 = v33[0];
      v12 = v33[1];
      v14 = v33[2];
      v13 = v33[3];
    }
    v23 = v11 + v14;
    if (__OFADD__(v11, v14))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v24)
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v25 < v17)
      v17 = v25;
    v26 = v12 + v13;
    if (__OFADD__(v12, v13))
      goto LABEL_49;
    v24 = __OFSUB__(v26, 1);
    v27 = v26 - 1;
    if (v24)
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v27 < v18)
      v18 = v27;
    if ((unsigned __int128)(v14 * (__int128)v13) >> 64 != (v14 * v13) >> 63)
      goto LABEL_51;
    v20 = v12 & ~(v12 >> 63);
    v21 = v11 & ~(v11 >> 63);
    goto LABEL_25;
  }
  if (__OFADD__(v36, v38 / 2))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v22 = v37 + v39 / 2;
  if (__OFADD__(v37, v39 / 2))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v16 < 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if ((unsigned __int128)(v22 * (__int128)v16) >> 64 != (v22 * v16) >> 63)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (__OFADD__(v22 * v16, v36 + v38 / 2))
LABEL_56:
    __break(1u);
  return result;
}

uint64_t sub_2215C5F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, float a14@<S4>, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  float v38;
  float v39;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v84[40];
  _QWORD v85[5];
  char v86[16];
  uint64_t v87;
  uint64_t v88;
  char v89;
  _QWORD v90[4];
  char v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  _OWORD v96[2];
  char v97;

  sub_2215C6540(a16, (uint64_t)v85, &qword_2556D9FF0);
  v29 = v85[1];
  v80 = v85[0];
  v30 = v85[2];
  v31 = v85[3];
  sub_2215E4074((uint64_t)v84, a10, a11, a12, a13);
  result = sub_2215C6540((uint64_t)v84, (uint64_t)v90, &qword_2556D9FF8);
  if ((v91 & 1) != 0
    || (v76 = v90[0],
        v77 = v90[1],
        v78 = v90[2],
        v73 = v90[3],
        result = sub_2215C6540(a16, (uint64_t)v86, &qword_2556D9FF0),
        (v89 & 1) != 0))
  {
    v33 = 0;
    goto LABEL_4;
  }
  if ((a3 | a2) < 0)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    return result;
  }
  v71 = a5;
  v72 = v87;
  v75 = v88;
  if ((a17 & 0x100000000) != 0)
  {
    memset(v96, 0, sizeof(v96));
    v97 = 1;
    sub_2215C5CB0(a6, a7, a8, a15, a16, (uint64_t)v96);
    v38 = v39;
  }
  else
  {
    v38 = *(float *)&a17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v41 = *a18;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_2215C1130(0, *(_QWORD *)(v41 + 16));
  }
  else
  {
    *a18 = (uint64_t)sub_2215E6EE0(0, *(_QWORD *)(v41 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  sub_2215E429C(v76, v77, v78, v73, a18);
  result = *a18;
  v33 = *(_QWORD *)(*a18 + 16);
  if (!v33)
  {
LABEL_4:
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 1;
    goto LABEL_5;
  }
  v42 = result + 32;
  v74 = *a18;
  v70 = *(_QWORD *)(*a18 + 16);
  swift_bridgeObjectRetain();
  v43 = v70;
  v44 = v72;
  result = v74;
  v69 = 0;
  v45 = 0;
  v46 = -1.0;
  v79 = v42;
  do
  {
    if (v45 >= *(_QWORD *)(result + 16))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    v47 = *(_OWORD *)(v42 + 16 * v45);
    v48 = *(_QWORD *)(v42 + 16 * v45);
    if ((v48 & 0x8000000000000000) == 0)
    {
      if (__OFADD__(v48, v44))
        goto LABEL_75;
      if (v48 + v44 < a3)
      {
        v49 = *(_QWORD *)(v42 + 16 * v45 + 8);
        if ((*((_QWORD *)&v47 + 1) & 0x8000000000000000) != 0)
          goto LABEL_15;
        if (__OFADD__(*((_QWORD *)&v47 + 1), v75))
          goto LABEL_76;
        if (*((_QWORD *)&v47 + 1) + v75 >= a2)
        {
LABEL_15:
          v42 = v79;
          goto LABEL_16;
        }
        if (a8 < 0)
          goto LABEL_77;
        v92 = v47;
        v93 = v30;
        v94 = v31;
        v95 = 0;
        result = sub_2215C5CB0(a1, a2, a3, a4, v71, (uint64_t)&v92);
        if (v31 < 0)
          goto LABEL_78;
        if (v31)
        {
          if (v30 < 0)
            goto LABEL_80;
          v53 = 0;
          v54 = 0.0;
          v55 = 0.0;
          v56 = 0.0;
          do
          {
            if (v53 == v31)
              goto LABEL_67;
            v57 = v29 + v53;
            if (__OFADD__(v29, v53))
              goto LABEL_68;
            v58 = v57 * a8;
            if ((unsigned __int128)(v57 * (__int128)a8) >> 64 != (v57 * a8) >> 63)
              goto LABEL_69;
            v59 = __OFADD__(v58, v80);
            v60 = v58 + v80;
            if (v59)
              goto LABEL_70;
            v61 = v49 + v53;
            if (__OFADD__(v49, v53))
              goto LABEL_71;
            v62 = v61 * a3;
            if ((unsigned __int128)(v61 * (__int128)a3) >> 64 != (v61 * a3) >> 63)
              goto LABEL_72;
            if (v30)
            {
              v59 = __OFADD__(v62, v48);
              v63 = v62 + v48;
              if (!v59)
              {
                v64 = 0;
                while (1)
                {
                  v65 = v60 + v64;
                  if (__OFADD__(v60, v64))
                    break;
                  v66 = v63 + v64;
                  if (__OFADD__(v63, v64))
                    goto LABEL_66;
                  ++v64;
                  LOBYTE(v51) = *(_BYTE *)(a6 + v65);
                  v67 = (float)LODWORD(v51) - v38;
                  LOBYTE(v52) = *(_BYTE *)(a1 + v66);
                  v52 = (float)LODWORD(v52) - v50;
                  v56 = v56 + (float)(v67 * v52);
                  v55 = v55 + (float)(v67 * v67);
                  v51 = v52 * v52;
                  v54 = v54 + (float)(v52 * v52);
                  if (v30 == v64)
                    goto LABEL_29;
                }
                __break(1u);
LABEL_66:
                __break(1u);
LABEL_67:
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
              }
              __break(1u);
              goto LABEL_74;
            }
LABEL_29:
            ++v53;
          }
          while (v53 != v31);
          if (v56 <= 0.0)
            goto LABEL_48;
          v44 = v72;
          result = v74;
          v43 = v70;
          if (v55 != 0.0 && v54 != 0.0)
          {
            v68 = v56 / sqrtf(v54 * v55);
            if (v46 < v68)
              goto LABEL_49;
LABEL_50:
            if (v68 < a14)
              goto LABEL_15;
LABEL_53:
            v59 = __OFADD__(v69++, 1);
            v42 = v79;
            if (v59)
              goto LABEL_81;
            goto LABEL_16;
          }
          v68 = 0.0;
          if (v46 >= 0.0)
            goto LABEL_52;
        }
        else
        {
LABEL_48:
          v68 = 0.0;
          v44 = v72;
          result = v74;
          v43 = v70;
          if (v46 >= 0.0)
          {
LABEL_52:
            if (a14 > 0.0)
              goto LABEL_15;
            goto LABEL_53;
          }
        }
LABEL_49:
        v76 = v48;
        v77 = v49;
        v46 = v68;
        goto LABEL_50;
      }
    }
LABEL_16:
    ++v45;
  }
  while (v45 != v43);
  result = swift_bridgeObjectRelease();
  v33 = v76;
  v34 = v77;
  if (v46 <= 0.0)
    v33 = 0;
  v35 = LODWORD(v46);
  if (v46 <= 0.0)
  {
    v34 = 0;
    v35 = 0;
  }
  v36 = v69;
  if (v46 > 0.0)
  {
    v37 = 0;
  }
  else
  {
    v36 = 0;
    v37 = 1;
  }
LABEL_5:
  *(_QWORD *)a9 = v33;
  *(_QWORD *)(a9 + 8) = v34;
  *(_QWORD *)(a9 + 16) = v35;
  *(_QWORD *)(a9 + 24) = v36;
  *(_BYTE *)(a9 + 32) = v37;
  return result;
}

uint64_t _s17MeasureFoundation6CVUtilC14signedDistance5point7contour12CoreGraphics7CGFloatVSo7CGPointV_SayAKGtFZ_0(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    goto LABEL_25;
  v4 = 0;
  v5 = result + 16 * v3;
  v6 = *(double *)(v5 + 16);
  v7 = *(double *)(v5 + 24);
  v8 = (double *)(result + 40);
  v9 = 1.0;
  v10 = INFINITY;
  while (1)
  {
    v14 = v6;
    v15 = v7;
    v6 = *(v8 - 1);
    v7 = *v8;
    v16 = v6 - v14;
    v17 = *v8 - v15;
    v18 = a2 - v14;
    v19 = a3 - v15;
    if ((a2 - v14) * (v6 - v14) + (a3 - v15) * v17 <= 0.0)
    {
      v20 = v19 * v19 + v18 * v18;
LABEL_13:
      v21 = 1.0;
      goto LABEL_14;
    }
    if ((a2 - v6) * v16 + (a3 - v7) * v17 >= 0.0)
    {
      v20 = (a2 - v6) * (a2 - v6) + (a3 - v7) * (a3 - v7);
      goto LABEL_13;
    }
    v20 = (v19 * v16 - v18 * v17) * (v19 * v16 - v18 * v17);
    v21 = v16 * v16 + v17 * v17;
LABEL_14:
    if (v9 * v20 < v10 * v21)
    {
      v9 = v21;
      v10 = v20;
      if (v20 == 0.0)
        return result;
    }
    if ((v15 > a3 || v7 > a3) && (v15 <= a3 || v7 <= a3) && (v14 >= a2 || v6 >= a2))
    {
      v11 = v17 >= 0.0 ? v19 * v16 - v18 * v17 : -(v19 * v16 - v18 * v17);
      v12 = v11 > 0.0;
      v13 = __OFADD__(v4, v12);
      v4 += v12;
      if (v13)
        break;
    }
    v8 += 2;
    if (!--v3)
      return result;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CVUtil()
{
  return objc_opt_self();
}

uint64_t sub_2215C6540(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id _s17MeasureFoundation8ViewportC8portView33_7C22ACC4716B0FDE2A507783D80F08CBLLSo6UIViewCvpfi_0()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBDB00]), sel_init);
  v1 = objc_msgSend(v0, sel_layer);
  v2 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v3 = objc_msgSend(v2, sel_CGColor);

  objc_msgSend(v1, sel_setBorderColor_, v3);
  v4 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v4, sel_setBorderWidth_, 1.0);

  v5 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v5, sel_setCornerRadius_, 5.0);

  objc_msgSend(v0, sel_setAlpha_, 0.25);
  return v0;
}

void sub_2215C66AC()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  double *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  objc_msgSend(v0, sel_setUserInteractionEnabled_, 0);
  v1 = *(void **)&v0[OBJC_IVAR____TtC17MeasureFoundation8Viewport_portView];
  objc_msgSend(v0, sel_addSubview_, v1);
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v2 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB3A0);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2216562C0;
  v4 = objc_msgSend(v1, sel_widthAnchor);
  v5 = (double *)&v0[OBJC_IVAR____TtC17MeasureFoundation8Viewport_portSize];
  v6 = objc_msgSend(v4, sel_constraintEqualToConstant_, *(double *)&v0[OBJC_IVAR____TtC17MeasureFoundation8Viewport_portSize]);

  *(_QWORD *)(v3 + 32) = v6;
  v7 = objc_msgSend(v1, sel_heightAnchor);
  v8 = objc_msgSend(v7, sel_constraintEqualToConstant_, v5[1]);

  *(_QWORD *)(v3 + 40) = v8;
  v9 = objc_msgSend(v1, sel_centerXAnchor);
  v10 = objc_msgSend(v0, sel_centerXAnchor);
  v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(_QWORD *)(v3 + 48) = v11;
  v12 = objc_msgSend(v1, sel_centerYAnchor);
  v13 = objc_msgSend(v0, sel_centerYAnchor);
  v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_constant_, v13, 0.0);

  *(_QWORD *)(v3 + 56) = v14;
  sub_22165333C();
  sub_2215C6A7C();
  v15 = (id)sub_221653318();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, v15);

}

id Viewport.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void Viewport.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id Viewport.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for Viewport()
{
  return objc_opt_self();
}

unint64_t sub_2215C6A7C()
{
  unint64_t result;

  result = qword_2556DA038;
  if (!qword_2556DA038)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2556DA038);
  }
  return result;
}

char *RecordReplayOption.default.unsafeMutableAddressor()
{
  return &static RecordReplayOption.default;
}

uint64_t static RecordReplayOption.default.getter()
{
  swift_beginAccess();
  return static RecordReplayOption.default;
}

uint64_t static RecordReplayOption.default.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static RecordReplayOption.default = a1;
  return result;
}

uint64_t (*static RecordReplayOption.default.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_2215C6B88()
{
  uint64_t v0;

  v0 = sub_221652F40();
  __swift_allocate_value_buffer(v0, static RecordReplayOption.defaultSessionFile);
  __swift_project_value_buffer(v0, (uint64_t)static RecordReplayOption.defaultSessionFile);
  if (qword_2556D8D50 != -1)
    swift_once();
  __swift_project_value_buffer(v0, (uint64_t)qword_2556E43E0);
  return sub_221652F28();
}

uint64_t RecordReplayOption.defaultSessionFile.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_2556D8DA8 != -1)
    swift_once();
  v0 = sub_221652F40();
  return __swift_project_value_buffer(v0, (uint64_t)static RecordReplayOption.defaultSessionFile);
}

uint64_t static RecordReplayOption.defaultSessionFile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2556D8DA8 != -1)
    swift_once();
  v2 = sub_221652F40();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static RecordReplayOption.defaultSessionFile);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

Swift::Bool __swiftcall RecordReplayOption.isRecording()()
{
  unsigned __int8 v0;

  return v0 - 1 < 2;
}

Swift::Bool __swiftcall RecordReplayOption.isReplaying()()
{
  unsigned __int8 v0;

  return v0 - 3 < 2;
}

uint64_t RecordReplayOption.recordFile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v2 = sub_221652EB0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v7 = (void *)sub_22165318C();
  v8 = objc_msgSend(v6, sel_stringForKey_, v7);

  if (v8)
  {
    v9 = sub_2216531B0();
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0xE000000000000000;
  }
  v19[0] = v9;
  v19[1] = v11;
  sub_221652EA4();
  sub_2215C7D84();
  v12 = sub_22165372C();
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = v12 & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    sub_221652F04();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_2556D8DA8 != -1)
      swift_once();
    v17 = sub_221652F40();
    v18 = __swift_project_value_buffer(v17, (uint64_t)static RecordReplayOption.defaultSessionFile);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, v18, v17);
  }
}

void *Defaults.recordCustomFile.unsafeMutableAddressor()
{
  return &static Defaults.recordCustomFile;
}

uint64_t RecordReplayOption.replayFile.getter@<X0>(unsigned __int8 a1@<W0>, unint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  char *v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t inited;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  id v81;
  void *v82;
  id v83;
  uint64_t result;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  void (*v92)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  id v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108[7];

  v3 = a1;
  v108[6] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA058);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (unint64_t)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA068);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v103 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v85 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA070);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v105 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA078);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v85 - v22;
  v24 = sub_221652F40();
  v101 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v107 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v104 = (char *)&v85 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v89 = (char *)&v85 - v29;
  if (v3 == 3)
  {
    v93 = (uint64_t)v23;
    v99 = v16;
    v100 = v15;
    v88 = v21;
    v30 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    if (qword_2556D8D50 != -1)
      goto LABEL_44;
    while (1)
    {
      __swift_project_value_buffer(v24, (uint64_t)qword_2556E43E0);
      v31 = (void *)sub_221652F1C();
      v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA080);
      v32 = swift_allocObject();
      v97 = xmmword_2216560E0;
      *(_OWORD *)(v32 + 16) = xmmword_2216560E0;
      v33 = (void *)*MEMORY[0x24BDBCBE0];
      *(_QWORD *)(v32 + 32) = *MEMORY[0x24BDBCBE0];
      type metadata accessor for URLResourceKey(0);
      v35 = v34;
      v95 = v33;
      v96 = v35;
      v36 = (void *)sub_221653318();
      swift_bridgeObjectRelease();
      v108[0] = 0;
      v37 = objc_msgSend(v30, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v31, v36, 4, v108);

      v38 = v108[0];
      if (!v37)
      {
        v49 = v38;
        v50 = (void *)sub_221652ED4();

        swift_willThrow();
        goto LABEL_40;
      }
      v86 = (char *)v6;
      v87 = a2;
      v39 = sub_221653324();

      v108[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
      v40 = *(char **)(v39 + 16);
      v94 = v9;
      v102 = v14;
      v41 = v93;
      v91 = v40;
      v106 = v24;
      if (!v40)
        break;
      v6 = 0;
      v42 = v101;
      v9 = v103;
      v43 = v89;
      v90 = v39;
      while (v6 < *(_QWORD *)(v39 + 16))
      {
        a2 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
        v30 = *(id *)(v42 + 72);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v42 + 16))(v41, v39 + a2 + (_QWORD)v30 * v6, v24);
        v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
        v92(v41, 0, 1, v24);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v41, 1, v24) == 1)
          goto LABEL_19;
        v44 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 32);
        v44(v43, v41, v24);
        sub_221652F10();
        sub_2216531E0();
        swift_bridgeObjectRelease();
        v45 = sub_221653258();
        swift_bridgeObjectRelease();
        if ((v45 & 1) != 0)
        {
          v44(v104, (uint64_t)v43, v24);
          v46 = (char *)v108[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_2215CBF84(0, *((_QWORD *)v46 + 2) + 1, 1);
            v43 = v89;
            v46 = (char *)v108[0];
          }
          v9 = v103;
          v48 = *((_QWORD *)v46 + 2);
          v47 = *((_QWORD *)v46 + 3);
          v24 = v106;
          if (v48 >= v47 >> 1)
          {
            sub_2215CBF84(v47 > 1, v48 + 1, 1);
            v43 = v89;
            v46 = (char *)v108[0];
          }
          *((_QWORD *)v46 + 2) = v48 + 1;
          v44(&v46[a2 + v48 * (_QWORD)v30], (uint64_t)v104, v24);
          v108[0] = v46;
          v42 = v101;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v24);
          v9 = v103;
        }
        ++v6;
        v14 = v102;
        v41 = v93;
        v39 = v90;
        if (v91 == (char *)v6)
          goto LABEL_18;
      }
      __break(1u);
LABEL_44:
      swift_once();
    }
    v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56);
    v9 = v103;
LABEL_18:
    v92(v41, 1, 1, v24);
LABEL_19:
    swift_bridgeObjectRelease();
    sub_2215D2098(v41, &qword_2556DA078);
    v51 = (char *)v108[0];
    v52 = v108[0][2];
    if (v52)
    {
      v108[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
      sub_2215CBF68(0, v52, 0);
      v53 = (*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
      v91 = v51;
      v54 = &v51[v53];
      v93 = *(_QWORD *)(v101 + 72);
      v104 = *(char **)(v101 + 16);
      while (1)
      {
        ((void (*)(char *, char *, uint64_t))v104)(v107, v54, v106);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v97;
        v56 = v95;
        *(_QWORD *)(inited + 32) = v95;
        v57 = v56;
        sub_2215D18A0(inited);
        swift_setDeallocating();
        swift_arrayDestroy();
        sub_221652EEC();
        swift_bridgeObjectRelease();
        v58 = sub_221652EC8();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v14, 0, 1, v58);
        v59 = v106;
        v60 = v105 + *(int *)(v100 + 48);
        ((void (*)(void))v104)();
        sub_2215C3ABC((uint64_t)v14, (uint64_t)v9, &qword_2556DA068);
        sub_221652EC8();
        v61 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v9, 1, v58) == 1)
        {
          sub_2215D2098((uint64_t)v9, &qword_2556DA068);
          v62 = sub_221652F94();
          v63 = (uint64_t)v94;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v94, 1, 1, v62);
        }
        else
        {
          v64 = (uint64_t)v94;
          sub_221652EBC();
          v65 = *(void (**)(char *, uint64_t))(v61 + 8);
          v63 = v64;
          v9 = v103;
          v65(v103, v58);
          v66 = sub_221652F94();
          v67 = *(_QWORD *)(v66 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v63, 1, v66) != 1)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v60, v63, v66);
            goto LABEL_26;
          }
        }
        _s17MeasureFoundation16MeasurementEventV4time0B04DateVvpfi_0();
        sub_2215D2098(v63, &qword_2556DA060);
LABEL_26:
        v14 = v102;
        sub_2215D2098((uint64_t)v102, &qword_2556DA068);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v107, v59);
        v68 = v108[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2215CBF68(0, v68[2] + 1, 1);
          v68 = v108[0];
        }
        v70 = v68[2];
        v69 = v68[3];
        if (v70 >= v69 >> 1)
        {
          sub_2215CBF68(v69 > 1, v70 + 1, 1);
          v68 = v108[0];
        }
        v68[2] = v70 + 1;
        sub_2215C6540(v105, (uint64_t)v68+ ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))+ *(_QWORD *)(v99 + 72) * v70, &qword_2556DA070);
        v54 += v93;
        if (!--v52)
        {
          swift_release();
          v24 = v106;
          goto LABEL_33;
        }
      }
    }
    swift_release();
    v68 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_33:
    v108[0] = v68;
    swift_bridgeObjectRetain();
    sub_2215CA250(v108);
    v71 = v87;
    v72 = (uint64_t)v86;
    v74 = v99;
    v73 = v100;
    swift_bridgeObjectRelease();
    if (v108[0][2])
    {
      sub_2215C3ABC((uint64_t)v108[0] + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80)), v72, &qword_2556DA070);
      v75 = 0;
    }
    else
    {
      v75 = 1;
    }
    v76 = (uint64_t)v88;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v72, v75, 1, v73);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73) == 1)
    {
      sub_2215D2098(v72, &qword_2556DA058);
      v92(v76, 1, 1, v24);
    }
    else
    {
      v77 = v72 + *(int *)(v73 + 48);
      v78 = v101;
      v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 32);
      v79(v76, v72, v24);
      v92(v76, 0, 1, v24);
      v80 = sub_221652F94();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v77, v80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v76, 1, v24) != 1)
        return ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v79)(v71, v76, v24);
    }
    sub_2215D2098(v76, &qword_2556DA078);
  }
LABEL_40:
  v81 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v82 = (void *)sub_22165318C();
  v83 = objc_msgSend(v81, sel_stringForKey_, v82);

  if (v83)
  {
    sub_2216531B0();

    sub_221652F04();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  return result;
}

void *Defaults.replayCustomFile.unsafeMutableAddressor()
{
  return &static Defaults.replayCustomFile;
}

uint64_t static RecordReplayOption.insertTimestamp(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];

  v0 = sub_221652F94();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  v5 = (void *)sub_22165318C();
  objc_msgSend(v4, sel_setDateFormat_, v5);

  _s17MeasureFoundation16MeasurementEventV4time0B04DateVvpfi_0();
  v6 = (void *)sub_221652F58();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = objc_msgSend(v4, sel_stringFromDate_, v6);

  v8 = sub_2216531B0();
  v10 = v9;

  v13[4] = sub_221652F34();
  v13[5] = v11;
  v13[2] = 2104718459;
  v13[3] = 0xE400000000000000;
  v13[0] = v8;
  v13[1] = v10;
  sub_2215C7D84();
  sub_221653738();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_221652F04();

  return swift_bridgeObjectRelease();
}

uint64_t RecordReplayOption.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL sub_2215C7C90(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2215C7CA4()
{
  sub_221653B88();
  sub_221653B94();
  return sub_221653BAC();
}

uint64_t sub_2215C7CE8()
{
  return sub_221653B94();
}

uint64_t sub_2215C7D10()
{
  sub_221653B88();
  sub_221653B94();
  return sub_221653BAC();
}

unint64_t sub_2215C7D50@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s17MeasureFoundation18RecordReplayOptionO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_2215C7D78(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

unint64_t sub_2215C7D84()
{
  unint64_t result;

  result = qword_2556DB570;
  if (!qword_2556DB570)
  {
    result = MEMORY[0x22766FA4C](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2556DB570);
  }
  return result;
}

unint64_t sub_2215C7DC8()
{
  unint64_t result;

  result = sub_2215C7DE4();
  qword_2556DA040 = result;
  return result;
}

unint64_t sub_2215C7DE4()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA140);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2216562E0;
  strcpy((char *)(inited + 32), "kADDemoEnabled");
  *(_BYTE *)(inited + 47) = -18;
  v1 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 48) = 0;
  *(_QWORD *)(inited + 72) = v1;
  *(_QWORD *)(inited + 80) = 0xD000000000000013;
  *(_QWORD *)(inited + 88) = 0x800000022165C6B0;
  *(_BYTE *)(inited + 96) = 0;
  *(_QWORD *)(inited + 120) = v1;
  strcpy((char *)(inited + 128), "kADVGAEnabled");
  *(_WORD *)(inited + 142) = -4864;
  *(_BYTE *)(inited + 144) = 0;
  *(_QWORD *)(inited + 168) = v1;
  *(_QWORD *)(inited + 176) = 0xD000000000000013;
  *(_QWORD *)(inited + 184) = 0x800000022165C6D0;
  *(_BYTE *)(inited + 192) = 0;
  *(_QWORD *)(inited + 216) = v1;
  *(_QWORD *)(inited + 224) = 0xD000000000000012;
  *(_QWORD *)(inited + 232) = 0x800000022165C6F0;
  *(_BYTE *)(inited + 240) = 0;
  *(_QWORD *)(inited + 264) = v1;
  strcpy((char *)(inited + 272), "kADShowDepth");
  *(_BYTE *)(inited + 285) = 0;
  *(_WORD *)(inited + 286) = -5120;
  *(_BYTE *)(inited + 288) = 0;
  *(_QWORD *)(inited + 312) = v1;
  *(_QWORD *)(inited + 320) = 0xD000000000000011;
  *(_QWORD *)(inited + 328) = 0x800000022165C710;
  *(_BYTE *)(inited + 336) = 0;
  *(_QWORD *)(inited + 360) = v1;
  strcpy((char *)(inited + 368), "kADShowNormal");
  *(_WORD *)(inited + 382) = -4864;
  *(_BYTE *)(inited + 384) = 0;
  *(_QWORD *)(inited + 408) = v1;
  strcpy((char *)(inited + 416), "kADShowWindow");
  *(_WORD *)(inited + 430) = -4864;
  *(_BYTE *)(inited + 432) = 0;
  *(_QWORD *)(inited + 456) = v1;
  strcpy((char *)(inited + 464), "kADBlackMode");
  *(_BYTE *)(inited + 477) = 0;
  *(_WORD *)(inited + 478) = -5120;
  *(_BYTE *)(inited + 480) = 0;
  *(_QWORD *)(inited + 504) = v1;
  *(_QWORD *)(inited + 512) = 0xD000000000000016;
  *(_QWORD *)(inited + 520) = 0x800000022165C730;
  *(_QWORD *)(inited + 552) = v1;
  *(_BYTE *)(inited + 528) = 0;
  *(_QWORD *)(inited + 560) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 568) = 0x800000022165D660;
  *(_QWORD *)(inited + 600) = v1;
  *(_BYTE *)(inited + 576) = 0;
  *(_QWORD *)(inited + 608) = 0xD000000000000011;
  *(_QWORD *)(inited + 616) = 0x800000022165D680;
  *(_QWORD *)(inited + 648) = v1;
  *(_BYTE *)(inited + 624) = 1;
  *(_QWORD *)(inited + 656) = 0xD000000000000017;
  *(_QWORD *)(inited + 664) = 0x800000022165D4F0;
  *(_QWORD *)(inited + 696) = v1;
  strcpy((char *)(inited + 704), "kPEADTestMode");
  *(_WORD *)(inited + 718) = -4864;
  v2 = MEMORY[0x24BEE1768];
  *(_BYTE *)(inited + 672) = 0;
  *(_QWORD *)(inited + 744) = v2;
  *(_QWORD *)(inited + 720) = 1;
  *(_QWORD *)(inited + 752) = 0xD000000000000012;
  *(_QWORD *)(inited + 760) = 0x800000022165D5D0;
  *(_QWORD *)(inited + 792) = v1;
  *(_BYTE *)(inited + 768) = 0;
  *(_QWORD *)(inited + 800) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 808) = 0x800000022165D6A0;
  *(_QWORD *)(inited + 840) = v1;
  *(_BYTE *)(inited + 816) = 0;
  *(_QWORD *)(inited + 848) = 0xD000000000000023;
  *(_QWORD *)(inited + 856) = 0x800000022165D6C0;
  *(_QWORD *)(inited + 888) = v1;
  *(_BYTE *)(inited + 864) = 0;
  return sub_2215C2878(inited);
}

const char *Defaults.adDemoEnabled.unsafeMutableAddressor()
{
  return "kADDemoEnabled";
}

void *Defaults.adDirectAPIEnabled.unsafeMutableAddressor()
{
  return &static Defaults.adDirectAPIEnabled;
}

const char *Defaults.adVGAEnabled.unsafeMutableAddressor()
{
  return "kADVGAEnabled";
}

void *Defaults.adShowJasperPoints.unsafeMutableAddressor()
{
  return &static Defaults.adShowJasperPoints;
}

void *Defaults.adShowWorldPoints.unsafeMutableAddressor()
{
  return &static Defaults.adShowWorldPoints;
}

const char *Defaults.adShowDepth.unsafeMutableAddressor()
{
  return "kADShowDepth";
}

void *Defaults.adShowConfidence.unsafeMutableAddressor()
{
  return &static Defaults.adShowConfidence;
}

const char *Defaults.adShowNormal.unsafeMutableAddressor()
{
  return "kADShowNormal";
}

const char *Defaults.adShowWindow.unsafeMutableAddressor()
{
  return "kADShowWindow";
}

const char *Defaults.adBlackMode.unsafeMutableAddressor()
{
  return "kADBlackMode";
}

void *Defaults.adGuidedFilterEnabled.unsafeMutableAddressor()
{
  return &static Defaults.adGuidedFilterEnabled;
}

void *Defaults.personHeightDebugViewEnabled.unsafeMutableAddressor()
{
  return &static Defaults.personHeightDebugViewEnabled;
}

void *Defaults.divisionsEnabled.unsafeMutableAddressor()
{
  return &static Defaults.divisionsEnabled;
}

void *Defaults.adEdgeDetectionEnabled.unsafeMutableAddressor()
{
  return &static Defaults.adEdgeDetectionEnabled;
}

const char *Defaults.peADTestMode.unsafeMutableAddressor()
{
  return "kPEADTestMode";
}

void *Defaults.peShowADIndicator.unsafeMutableAddressor()
{
  return &static Defaults.peShowADIndicator;
}

void *Defaults.semanticMeasurementsEnabled.unsafeMutableAddressor()
{
  return &static Defaults.semanticMeasurementsEnabled;
}

void *Defaults.semanticMeasurementsDebuggerEnabled.unsafeMutableAddressor()
{
  return &static Defaults.semanticMeasurementsDebuggerEnabled;
}

unint64_t sub_2215C81B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA140);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2216562F0;
  *(_QWORD *)(v0 + 32) = 0xD000000000000010;
  *(_QWORD *)(v0 + 40) = 0x800000022165C870;
  v1 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 72) = v1;
  *(_QWORD *)(v0 + 80) = 0x617453776F68536BLL;
  *(_QWORD *)(v0 + 88) = 0xEF73636974736974;
  *(_BYTE *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 120) = v1;
  *(_QWORD *)(v0 + 128) = 0xD000000000000012;
  *(_QWORD *)(v0 + 136) = 0x800000022165D280;
  *(_BYTE *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 168) = v1;
  *(_QWORD *)(v0 + 176) = 0xD000000000000019;
  *(_QWORD *)(v0 + 184) = 0x800000022165D2C0;
  *(_BYTE *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 216) = v1;
  *(_QWORD *)(v0 + 224) = 0xD000000000000017;
  *(_QWORD *)(v0 + 232) = 0x800000022165D2E0;
  *(_BYTE *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 264) = v1;
  *(_QWORD *)(v0 + 272) = 0x706154656469486BLL;
  *(_QWORD *)(v0 + 280) = 0xEF72616461526F54;
  *(_BYTE *)(v0 + 288) = 0;
  *(_QWORD *)(v0 + 312) = v1;
  *(_QWORD *)(v0 + 320) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 328) = 0x800000022165D340;
  *(_BYTE *)(v0 + 336) = 0;
  *(_QWORD *)(v0 + 360) = v1;
  *(_QWORD *)(v0 + 368) = 0xD000000000000019;
  *(_QWORD *)(v0 + 376) = 0x800000022165D380;
  *(_BYTE *)(v0 + 384) = 1;
  *(_QWORD *)(v0 + 408) = v1;
  *(_QWORD *)(v0 + 416) = 0xD000000000000013;
  *(_QWORD *)(v0 + 424) = 0x800000022165D360;
  *(_BYTE *)(v0 + 432) = 0;
  *(_QWORD *)(v0 + 456) = v1;
  *(_QWORD *)(v0 + 464) = 0xD000000000000016;
  v2 = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v0 + 472) = 0x800000022165D3A0;
  *(_QWORD *)(v0 + 480) = 0x3FE0000000000000;
  *(_QWORD *)(v0 + 504) = v2;
  *(_QWORD *)(v0 + 512) = 0xD000000000000012;
  *(_QWORD *)(v0 + 520) = 0x800000022165D3C0;
  *(_QWORD *)(v0 + 552) = v2;
  *(_QWORD *)(v0 + 528) = 0x4010000000000000;
  *(_QWORD *)(v0 + 560) = 0xD000000000000010;
  *(_QWORD *)(v0 + 568) = 0x800000022165D3E0;
  *(_QWORD *)(v0 + 600) = v2;
  *(_QWORD *)(v0 + 576) = 0;
  *(_QWORD *)(v0 + 608) = 0xD000000000000019;
  *(_QWORD *)(v0 + 616) = 0x800000022165D300;
  *(_QWORD *)(v0 + 648) = v1;
  *(_BYTE *)(v0 + 624) = 1;
  *(_QWORD *)(v0 + 656) = 0xD000000000000019;
  *(_QWORD *)(v0 + 664) = 0x800000022165D320;
  *(_QWORD *)(v0 + 696) = v1;
  *(_BYTE *)(v0 + 672) = 0;
  strcpy((char *)(v0 + 704), "kRecordARKit");
  *(_BYTE *)(v0 + 717) = 0;
  *(_WORD *)(v0 + 718) = -5120;
  swift_beginAccess();
  v3 = static RecordReplayOption.default;
  *(_QWORD *)(v0 + 744) = MEMORY[0x24BEE1E88];
  *(_QWORD *)(v0 + 720) = v3;
  *(_QWORD *)(v0 + 752) = 0xD000000000000013;
  *(_QWORD *)(v0 + 760) = 0x800000022165D440;
  *(_QWORD *)(v0 + 792) = v1;
  *(_BYTE *)(v0 + 768) = 1;
  *(_QWORD *)(v0 + 800) = 0xD000000000000015;
  *(_QWORD *)(v0 + 808) = 0x800000022165D460;
  *(_QWORD *)(v0 + 840) = v1;
  *(_BYTE *)(v0 + 816) = 1;
  *(_QWORD *)(v0 + 848) = 0xD000000000000019;
  *(_QWORD *)(v0 + 856) = 0x800000022165D480;
  v4 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v0 + 888) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v0 + 864) = 50;
  *(_QWORD *)(v0 + 896) = 0xD000000000000021;
  *(_QWORD *)(v0 + 904) = 0x800000022165D4A0;
  *(_QWORD *)(v0 + 936) = v1;
  *(_BYTE *)(v0 + 912) = 0;
  *(_QWORD *)(v0 + 944) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 952) = 0x800000022165D4D0;
  *(_QWORD *)(v0 + 984) = v1;
  *(_BYTE *)(v0 + 960) = 0;
  *(_QWORD *)(v0 + 992) = 0xD000000000000012;
  *(_QWORD *)(v0 + 1000) = 0x800000022165D510;
  *(_QWORD *)(v0 + 1032) = v1;
  *(_BYTE *)(v0 + 1008) = 0;
  *(_QWORD *)(v0 + 1040) = 0x676445776F68536BLL;
  *(_QWORD *)(v0 + 1048) = 0xEA00000000007365;
  *(_QWORD *)(v0 + 1080) = v1;
  *(_BYTE *)(v0 + 1056) = 0;
  *(_QWORD *)(v0 + 1088) = 0x6E694C776F68536BLL;
  *(_QWORD *)(v0 + 1096) = 0xEA00000000007365;
  *(_QWORD *)(v0 + 1128) = v1;
  *(_BYTE *)(v0 + 1104) = 0;
  *(_QWORD *)(v0 + 1136) = 0xD000000000000012;
  *(_QWORD *)(v0 + 1144) = 0x800000022165D530;
  *(_QWORD *)(v0 + 1176) = v1;
  *(_BYTE *)(v0 + 1152) = 0;
  *(_QWORD *)(v0 + 1184) = 0xD000000000000010;
  *(_QWORD *)(v0 + 1192) = 0x800000022165D550;
  *(_QWORD *)(v0 + 1224) = v1;
  *(_BYTE *)(v0 + 1200) = 0;
  *(_QWORD *)(v0 + 1232) = 0xD000000000000017;
  *(_QWORD *)(v0 + 1240) = 0x800000022165D570;
  *(_QWORD *)(v0 + 1272) = v1;
  *(_BYTE *)(v0 + 1248) = 0;
  *(_QWORD *)(v0 + 1280) = 0xD000000000000012;
  *(_QWORD *)(v0 + 1288) = 0x800000022165D590;
  *(_QWORD *)(v0 + 1320) = v1;
  *(_BYTE *)(v0 + 1296) = 0;
  *(_QWORD *)(v0 + 1328) = 0xD000000000000011;
  *(_QWORD *)(v0 + 1336) = 0x800000022165D400;
  if (qword_2556D8DA8 != -1)
    swift_once();
  v5 = sub_221652F40();
  __swift_project_value_buffer(v5, (uint64_t)static RecordReplayOption.defaultSessionFile);
  v6 = sub_221652F34();
  v7 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v0 + 1368) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v0 + 1344) = v6;
  *(_QWORD *)(v0 + 1352) = v8;
  *(_QWORD *)(v0 + 1376) = 0xD000000000000011;
  *(_QWORD *)(v0 + 1384) = 0x800000022165D420;
  v9 = sub_221652F34();
  *(_QWORD *)(v0 + 1416) = v7;
  *(_QWORD *)(v0 + 1392) = v9;
  *(_QWORD *)(v0 + 1400) = v10;
  strcpy((char *)(v0 + 1424), "kLPShowPlane");
  *(_BYTE *)(v0 + 1437) = 0;
  *(_WORD *)(v0 + 1438) = -5120;
  *(_QWORD *)(v0 + 1464) = v1;
  *(_BYTE *)(v0 + 1440) = 0;
  strcpy((char *)(v0 + 1472), "kLPShowPoints");
  *(_WORD *)(v0 + 1486) = -4864;
  *(_QWORD *)(v0 + 1512) = v1;
  *(_BYTE *)(v0 + 1488) = 0;
  *(_QWORD *)(v0 + 1520) = 0xD000000000000017;
  *(_QWORD *)(v0 + 1528) = 0x800000022165C790;
  *(_QWORD *)(v0 + 1560) = v1;
  *(_BYTE *)(v0 + 1536) = 0;
  *(_QWORD *)(v0 + 1568) = 0xD000000000000014;
  *(_QWORD *)(v0 + 1576) = 0x800000022165C770;
  *(_QWORD *)(v0 + 1608) = v1;
  *(_BYTE *)(v0 + 1584) = 0;
  *(_QWORD *)(v0 + 1616) = 0xD00000000000001ALL;
  *(_QWORD *)(v0 + 1624) = 0x800000022165C7B0;
  *(_QWORD *)(v0 + 1656) = v1;
  *(_BYTE *)(v0 + 1632) = 0;
  *(_QWORD *)(v0 + 1664) = 0xD000000000000018;
  *(_QWORD *)(v0 + 1672) = 0x800000022165C7D0;
  *(_QWORD *)(v0 + 1704) = v1;
  *(_BYTE *)(v0 + 1680) = 0;
  strcpy((char *)(v0 + 1712), "kPTShowPoints");
  *(_WORD *)(v0 + 1726) = -4864;
  *(_QWORD *)(v0 + 1752) = v1;
  *(_BYTE *)(v0 + 1728) = 0;
  strcpy((char *)(v0 + 1760), "kPTPaintMode");
  *(_BYTE *)(v0 + 1773) = 0;
  *(_WORD *)(v0 + 1774) = -5120;
  *(_QWORD *)(v0 + 1800) = v1;
  *(_BYTE *)(v0 + 1776) = 0;
  strcpy((char *)(v0 + 1808), "kPTDrawPatches");
  *(_BYTE *)(v0 + 1823) = -18;
  *(_QWORD *)(v0 + 1848) = v1;
  *(_BYTE *)(v0 + 1824) = 0;
  *(_QWORD *)(v0 + 1856) = 0xD000000000000010;
  *(_QWORD *)(v0 + 1864) = 0x800000022165C750;
  *(_QWORD *)(v0 + 1896) = v1;
  *(_BYTE *)(v0 + 1872) = 0;
  strcpy((char *)(v0 + 1904), "kPEShowHitRay");
  *(_WORD *)(v0 + 1918) = -4864;
  *(_QWORD *)(v0 + 1944) = v1;
  *(_BYTE *)(v0 + 1920) = 0;
  *(_QWORD *)(v0 + 1952) = 0xD000000000000014;
  *(_QWORD *)(v0 + 1960) = 0x800000022165C850;
  *(_QWORD *)(v0 + 1992) = v4;
  *(_QWORD *)(v0 + 1968) = 2;
  *(_QWORD *)(v0 + 2000) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 2008) = 0x800000022165D5B0;
  *(_QWORD *)(v0 + 2040) = v1;
  *(_BYTE *)(v0 + 2016) = 0;
  *(_QWORD *)(v0 + 2048) = 0xD000000000000018;
  *(_QWORD *)(v0 + 2056) = 0x800000022165D5F0;
  *(_QWORD *)(v0 + 2088) = v4;
  *(_QWORD *)(v0 + 2064) = 3;
  strcpy((char *)(v0 + 2096), "kHapticEnabled");
  *(_BYTE *)(v0 + 2111) = -18;
  *(_QWORD *)(v0 + 2136) = v1;
  *(_BYTE *)(v0 + 2112) = 1;
  *(_QWORD *)(v0 + 2144) = 0xD000000000000018;
  *(_QWORD *)(v0 + 2152) = 0x800000022165D610;
  *(_QWORD *)(v0 + 2184) = v1;
  *(_BYTE *)(v0 + 2160) = 0;
  *(_QWORD *)(v0 + 2192) = 0xD000000000000022;
  *(_QWORD *)(v0 + 2200) = 0x800000022165D630;
  *(_QWORD *)(v0 + 2232) = v1;
  *(_BYTE *)(v0 + 2208) = 1;
  result = sub_2215C2878(v0);
  qword_2556DA048 = result;
  return result;
}

void *Defaults.drawDebugPlanes.unsafeMutableAddressor()
{
  return &static Defaults.drawDebugPlanes;
}

void *Defaults.showStatistics.unsafeMutableAddressor()
{
  return &static Defaults.showStatistics;
}

void *Defaults.showFeaturePoints.unsafeMutableAddressor()
{
  return &static Defaults.showFeaturePoints;
}

void *Defaults.showWorldAnchorDebugInfo.unsafeMutableAddressor()
{
  return &static Defaults.showWorldAnchorDebugInfo;
}

void *Defaults.showRectangleDebugInfo.unsafeMutableAddressor()
{
  return &static Defaults.showRectangleDebugInfo;
}

void *Defaults.hideTapToRadar.unsafeMutableAddressor()
{
  return &static Defaults.hideTapToRadar;
}

void *Defaults.showLightIntensityDebugInfo.unsafeMutableAddressor()
{
  return &static Defaults.showLightIntensityDebugInfo;
}

void *Defaults.coachingCalloutEnabled.unsafeMutableAddressor()
{
  return &static Defaults.coachingCalloutEnabled;
}

void *Defaults.disableAllCoaching.unsafeMutableAddressor()
{
  return &static Defaults.disableAllCoaching;
}

void *Defaults.maxDeviceAcceleration.unsafeMutableAddressor()
{
  return &static Defaults.maxDeviceAcceleration;
}

void *Defaults.maxDeviceRotation.unsafeMutableAddressor()
{
  return &static Defaults.maxDeviceRotation;
}

void *Defaults.measurementBias.unsafeMutableAddressor()
{
  return &static Defaults.measurementBias;
}

void *Defaults.enableRectangleDetection.unsafeMutableAddressor()
{
  return &static Defaults.enableRectangleDetection;
}

void *Defaults.hideRectangleSuggestions.unsafeMutableAddressor()
{
  return &static Defaults.hideRectangleSuggestions;
}

const char *Defaults.recordARKit.unsafeMutableAddressor()
{
  return "kRecordARKit";
}

void *Defaults.snapReticleToEdges.unsafeMutableAddressor()
{
  return &static Defaults.snapReticleToEdges;
}

void *Defaults.edgeDetectionEnabled.unsafeMutableAddressor()
{
  return &static Defaults.edgeDetectionEnabled;
}

void *Defaults.edgeDetectionReticleSize.unsafeMutableAddressor()
{
  return &static Defaults.edgeDetectionReticleSize;
}

void *Defaults.edgeDetectionDebugReticleEnabled.unsafeMutableAddressor()
{
  return &static Defaults.edgeDetectionDebugReticleEnabled;
}

void *Defaults.edgeDetectionUniqueContours.unsafeMutableAddressor()
{
  return &static Defaults.edgeDetectionUniqueContours;
}

void *Defaults.showEdgeDebugView.unsafeMutableAddressor()
{
  return &static Defaults.showEdgeDebugView;
}

const char *Defaults.showEdges.unsafeMutableAddressor()
{
  return "kShowEdges";
}

const char *Defaults.showLines.unsafeMutableAddressor()
{
  return "kShowLines";
}

void *Defaults.showSmoothedLines.unsafeMutableAddressor()
{
  return &static Defaults.showSmoothedLines;
}

void *Defaults.showClosestEdge.unsafeMutableAddressor()
{
  return &static Defaults.showClosestEdge;
}

void *Defaults.showPreciseMeasurement.unsafeMutableAddressor()
{
  return &static Defaults.showPreciseMeasurement;
}

void *Defaults.showOppositeUnits.unsafeMutableAddressor()
{
  return &static Defaults.showOppositeUnits;
}

const char *Defaults.lpShowPlane.unsafeMutableAddressor()
{
  return "kLPShowPlane";
}

const char *Defaults.lpShowPoints.unsafeMutableAddressor()
{
  return "kLPShowPoints";
}

void *Defaults.mlShowUnprojectedTrail.unsafeMutableAddressor()
{
  return &static Defaults.mlShowUnprojectedTrail;
}

void *Defaults.mlShowSampledPoints.unsafeMutableAddressor()
{
  return &static Defaults.mlShowSampledPoints;
}

void *Defaults.mlShowSegmentedBackground.unsafeMutableAddressor()
{
  return &static Defaults.mlShowSegmentedBackground;
}

void *Defaults.mlShowNormalsBackground.unsafeMutableAddressor()
{
  return &static Defaults.mlShowNormalsBackground;
}

const char *Defaults.ptShowPoints.unsafeMutableAddressor()
{
  return "kPTShowPoints";
}

const char *Defaults.ptPaintMode.unsafeMutableAddressor()
{
  return "kPTPaintMode";
}

const char *Defaults.ptDrawPatches.unsafeMutableAddressor()
{
  return "kPTDrawPatches";
}

void *Defaults.peShowHitPoints.unsafeMutableAddressor()
{
  return &static Defaults.peShowHitPoints;
}

const char *Defaults.peShowHitRay.unsafeMutableAddressor()
{
  return "kPEShowHitRay";
}

void *Defaults.pePatchTrackingMode.unsafeMutableAddressor()
{
  return &static Defaults.pePatchTrackingMode;
}

void *Defaults.peShowPatchTrackingIndicator.unsafeMutableAddressor()
{
  return &static Defaults.peShowPatchTrackingIndicator;
}

void *Defaults.peFirstPointMaxDistance.unsafeMutableAddressor()
{
  return &static Defaults.peFirstPointMaxDistance;
}

const char *Defaults.hapticEnabled.unsafeMutableAddressor()
{
  return "kHapticEnabled";
}

void *Defaults.enableRectangleTracking.unsafeMutableAddressor()
{
  return &static Defaults.enableRectangleTracking;
}

void *Defaults.enableRectangleTrackingWorkaround.unsafeMutableAddressor()
{
  return &static Defaults.enableRectangleTrackingWorkaround;
}

void *sub_2215C8B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *result;

  if (qword_2556D8DB8 != -1)
    swift_once();
  v0 = qword_2556DA048;
  v1 = qword_2556D8DB0;
  swift_bridgeObjectRetain();
  if (v1 != -1)
    swift_once();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_2215C8C48(v2, v0);
  v4 = objc_msgSend((id)objc_opt_self(), sel_getDefaultValues);
  v5 = sub_2216530A8();

  result = (void *)sub_2215C8C48(v5, v3);
  off_2556DA050 = result;
  return result;
}

uint64_t sub_2215C8C48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_2215CCDC8(a1, (uint64_t)sub_2215CCD88, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t static DefaultsManager.registerDefaults()()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _OWORD *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t result;
  id v41;
  char *v42;
  int64_t v43;
  _QWORD *v44;
  _OWORD v45[2];
  __int128 v46;
  _OWORD v47[2];
  uint64_t v48;
  unint64_t v49;
  __int128 v50;

  v41 = (id)objc_opt_self();
  v0 = objc_msgSend(v41, sel_standardUserDefaults);
  v1 = objc_msgSend(v0, sel_dictionaryRepresentation);

  v2 = sub_2216530A8();
  if (qword_2556D8DC0 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    v42 = (char *)off_2556DA050 + 64;
    v3 = 1 << *((_BYTE *)off_2556DA050 + 32);
    v4 = -1;
    if (v3 < 64)
      v4 = ~(-1 << v3);
    v5 = v4 & *((_QWORD *)off_2556DA050 + 8);
    v43 = (unint64_t)(v3 + 63) >> 6;
    v44 = off_2556DA050;
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (v5)
    {
      while (1)
      {
        v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v9 = v8 | (v6 << 6);
LABEL_8:
        v10 = v44[7];
        v11 = (_QWORD *)(v44[6] + 16 * v9);
        v12 = v11[1];
        *(_QWORD *)&v46 = *v11;
        *((_QWORD *)&v46 + 1) = v12;
        sub_2215D1ADC(v10 + 32 * v9, (uint64_t)v47);
        swift_bridgeObjectRetain();
LABEL_27:
        sub_2215C6540((uint64_t)&v46, (uint64_t)&v48, &qword_2556DA088);
        v16 = v49;
        if (!v49)
        {
          swift_bridgeObjectRelease();
          swift_release();
          if (v7[2])
          {
            v33 = objc_msgSend(v41, sel_standardUserDefaults);
            swift_bridgeObjectRetain();
            v34 = (void *)sub_22165309C();
            swift_bridgeObjectRelease();
            objc_msgSend(v33, sel_setValuesForKeysWithDictionary_, v34);

          }
          v35 = objc_msgSend(v41, sel_standardUserDefaults);
          v36 = (void *)sub_22165309C();
          objc_msgSend(v35, sel_registerDefaults_, v36);

          v48 = 0;
          v49 = 0xE000000000000000;
          v37 = swift_bridgeObjectRetain();
          sub_2215C929C(v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v46 = 0;
          *((_QWORD *)&v46 + 1) = 0xE000000000000000;
          sub_221653894();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v46 = 0xD00000000000002BLL;
          *((_QWORD *)&v46 + 1) = 0x800000022165D710;
          swift_bridgeObjectRetain();
          sub_221653210();
          swift_bridgeObjectRelease();
          v38 = v46;
          v39 = sub_221653618();
          _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(v38, *((uint64_t *)&v38 + 1), v39, 0, 0xD000000000000010, 0x800000022165D6F0);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        v17 = v48;
        sub_2215C39AC(&v50, &v46);
        if (!*(_QWORD *)(v2 + 16))
          break;
        sub_2215CA39C(v17, v16);
        if ((v18 & 1) == 0)
          break;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
        swift_bridgeObjectRelease();
        if (!v5)
          goto LABEL_9;
      }
      sub_2215D1ADC((uint64_t)&v46, (uint64_t)v45);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v21 = sub_2215CA39C(v17, v16);
      v22 = v7[2];
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
      {
        __break(1u);
        goto LABEL_47;
      }
      v25 = v20;
      if (v7[3] >= v24)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v20 & 1) == 0)
            goto LABEL_34;
        }
        else
        {
          sub_2215CF820();
          if ((v25 & 1) == 0)
            goto LABEL_34;
        }
      }
      else
      {
        sub_2215CD334(v24, isUniquelyReferenced_nonNull_native);
        v26 = sub_2215CA39C(v17, v16);
        if ((v25 & 1) != (v27 & 1))
          goto LABEL_51;
        v21 = v26;
        if ((v25 & 1) == 0)
        {
LABEL_34:
          v7[(v21 >> 6) + 8] |= 1 << v21;
          v28 = (uint64_t *)(v7[6] + 16 * v21);
          *v28 = v17;
          v28[1] = v16;
          sub_2215C39AC(v45, (_OWORD *)(v7[7] + 32 * v21));
          v29 = v7[2];
          v30 = __OFADD__(v29, 1);
          v31 = v29 + 1;
          if (v30)
            goto LABEL_48;
          v7[2] = v31;
          swift_bridgeObjectRetain();
          goto LABEL_39;
        }
      }
      v32 = (_OWORD *)(v7[7] + 32 * v21);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
      sub_2215C39AC(v45, v32);
LABEL_39:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
    }
LABEL_9:
    v13 = v6 + 1;
    if (!__OFADD__(v6, 1))
      break;
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  if (v13 >= v43)
    goto LABEL_26;
  v14 = *(_QWORD *)&v42[8 * v13];
  if (v14)
  {
LABEL_12:
    v5 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v13 << 6);
    v6 = v13;
    goto LABEL_8;
  }
  v15 = v6 + 2;
  ++v6;
  if (v13 + 1 >= v43)
    goto LABEL_26;
  v14 = *(_QWORD *)&v42[8 * v15];
  if (v14)
  {
LABEL_15:
    v13 = v15;
    goto LABEL_12;
  }
  v6 = v13 + 1;
  if (v13 + 2 >= v43)
    goto LABEL_26;
  v14 = *(_QWORD *)&v42[8 * v13 + 16];
  if (v14)
  {
    v13 += 2;
    goto LABEL_12;
  }
  v15 = v13 + 3;
  v6 = v13 + 2;
  if (v13 + 3 >= v43)
  {
LABEL_26:
    v5 = 0;
    memset(v47, 0, sizeof(v47));
    v46 = 0u;
    goto LABEL_27;
  }
  v14 = *(_QWORD *)&v42[8 * v15];
  if (v14)
    goto LABEL_15;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v43)
    {
      v6 = v43 - 1;
      goto LABEL_26;
    }
    v14 = *(_QWORD *)&v42[8 * v13];
    ++v15;
    if (v14)
      goto LABEL_12;
  }
  __break(1u);
LABEL_51:
  result = sub_221653B64();
  __break(1u);
  return result;
}

uint64_t sub_2215C929C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  _OWORD v16[3];
  __int128 v17;
  _OWORD v18[2];
  int64_t v19;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v19 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v8 = v7 | (v6 << 6);
      goto LABEL_5;
    }
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v19)
      return swift_release();
    v13 = *(_QWORD *)(v15 + 8 * v12);
    ++v6;
    if (!v13)
    {
      v6 = v12 + 1;
      if (v12 + 1 >= v19)
        return swift_release();
      v13 = *(_QWORD *)(v15 + 8 * v6);
      if (!v13)
      {
        v6 = v12 + 2;
        if (v12 + 2 >= v19)
          return swift_release();
        v13 = *(_QWORD *)(v15 + 8 * v6);
        if (!v13)
        {
          v6 = v12 + 3;
          if (v12 + 3 >= v19)
            return swift_release();
          v13 = *(_QWORD *)(v15 + 8 * v6);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v13 - 1) & v13;
    v8 = __clz(__rbit64(v13)) + (v6 << 6);
LABEL_5:
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v11 = *v9;
    v10 = v9[1];
    sub_2215D1ADC(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)v18);
    *(_QWORD *)&v17 = v11;
    *((_QWORD *)&v17 + 1) = v10;
    v16[0] = v17;
    v16[1] = v18[0];
    v16[2] = v18[1];
    swift_bridgeObjectRetain();
    sub_221653210();
    sub_221653210();
    sub_221653210();
    sub_221653960();
    sub_221653210();
    sub_221653210();
    swift_bridgeObjectRelease();
    result = sub_2215D2098((uint64_t)v16, &qword_2556DA138);
  }
  v14 = v12 + 4;
  if (v14 >= v19)
    return swift_release();
  v13 = *(_QWORD *)(v15 + 8 * v14);
  if (v13)
  {
    v6 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v6 >= v19)
      return swift_release();
    v13 = *(_QWORD *)(v15 + 8 * v6);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void static DefaultsManager.reset()()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_2556D8DC0 != -1)
    swift_once();
  v1 = (id)sub_22165309C();
  objc_msgSend(v0, sel_setValuesForKeysWithDictionary_, v1);

}

void static DefaultsManager.resetForKeys(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  __objc2_class_ro **p_info;
  uint64_t *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __objc2_class_ro *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  __objc2_class_ro **v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  char v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  id v35;
  void *v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;

  v2 = (_QWORD *)sub_2215C2878(MEMORY[0x24BEE4AF8]);
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_39:
    v35 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v36 = (void *)sub_22165309C();
    swift_bridgeObjectRelease();
    objc_msgSend(v35, sel_setValuesForKeysWithDictionary_, v36);

    return;
  }
  swift_bridgeObjectRetain();
  v4 = (uint64_t *)(a1 + 40);
  p_info = _TtC17MeasureFoundation14WorldLineGuide.info;
  v6 = &OBJC_IVAR____TtC17MeasureFoundation8Viewport_portSize;
  while (1)
  {
    v9 = *(v4 - 1);
    v8 = *v4;
    v10 = p_info[440];
    swift_bridgeObjectRetain();
    if (v10 != (__objc2_class_ro *)-1)
      swift_once();
    v11 = v6[10];
    if (*(_QWORD *)(v11 + 16))
      break;
    v38 = 0u;
    v39 = 0u;
LABEL_4:
    swift_bridgeObjectRelease();
    v7 = &v38;
LABEL_5:
    sub_2215D2098((uint64_t)v7, &qword_2556DA090);
LABEL_6:
    v4 += 2;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
  }
  swift_bridgeObjectRetain();
  v12 = sub_2215CA39C(v9, v8);
  if ((v13 & 1) != 0)
  {
    sub_2215D1ADC(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v39 + 1))
    goto LABEL_4;
  sub_2215D2098((uint64_t)&v38, &qword_2556DA090);
  v14 = v6[10];
  if (!*(_QWORD *)(v14 + 16))
  {
    v38 = 0u;
    v39 = 0u;
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  v15 = sub_2215CA39C(v9, v8);
  if ((v16 & 1) != 0)
  {
    sub_2215D1ADC(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v39 + 1))
  {
LABEL_25:
    sub_2215D2098((uint64_t)&v38, &qword_2556DA090);
    swift_bridgeObjectRetain();
    v27 = sub_2215CA39C(v9, v8);
    v29 = v28;
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_2215CF820();
      swift_bridgeObjectRelease();
      sub_2215C39AC((_OWORD *)(v2[7] + 32 * v27), v37);
      sub_2215D0D10(v27, (uint64_t)v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v37, 0, sizeof(v37));
    }
    swift_bridgeObjectRelease();
    v7 = v37;
    goto LABEL_5;
  }
  v17 = p_info;
  sub_2215C39AC(&v38, v37);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20 = sub_2215CA39C(v9, v8);
  v21 = v2[2];
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (!__OFADD__(v21, v22))
  {
    v24 = v19;
    if (v2[3] >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v19 & 1) == 0)
          goto LABEL_35;
      }
      else
      {
        sub_2215CF820();
        if ((v24 & 1) == 0)
          goto LABEL_35;
      }
    }
    else
    {
      sub_2215CD334(v23, isUniquelyReferenced_nonNull_native);
      v25 = sub_2215CA39C(v9, v8);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_42;
      v20 = v25;
      if ((v24 & 1) == 0)
      {
LABEL_35:
        v2[(v20 >> 6) + 8] |= 1 << v20;
        v31 = (uint64_t *)(v2[6] + 16 * v20);
        *v31 = v9;
        v31[1] = v8;
        sub_2215C39AC(v37, (_OWORD *)(v2[7] + 32 * v20));
        v32 = v2[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_41;
        v2[2] = v34;
        swift_bridgeObjectRetain();
        goto LABEL_37;
      }
    }
    v30 = (_OWORD *)(v2[7] + 32 * v20);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
    sub_2215C39AC(v37, v30);
LABEL_37:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    p_info = v17;
    v6 = &OBJC_IVAR____TtC17MeasureFoundation8Viewport_portSize;
    goto LABEL_6;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  sub_221653B64();
  __break(1u);
}

void *Defaults.resetDefaultSettingsOnStart.unsafeMutableAddressor()
{
  return &static Defaults.resetDefaultSettingsOnStart;
}

unint64_t static Defaults.resetDefaultSettingsOnStart.getter()
{
  return 0xD000000000000014;
}

const char *Defaults.dateLastUse.unsafeMutableAddressor()
{
  return "kDateLastUse";
}

uint64_t static Defaults.dateLastUse.getter()
{
  return 0x73614C657461446BLL;
}

unint64_t static Defaults.drawDebugPlanes.getter()
{
  return 0xD000000000000010;
}

uint64_t static Defaults.showStatistics.getter()
{
  return 0x617453776F68536BLL;
}

unint64_t static Defaults.showFeaturePoints.getter()
{
  return 0xD000000000000012;
}

uint64_t static Defaults.hideTapToRadar.getter()
{
  return 0x706154656469486BLL;
}

void *Defaults.exportSceneFilePath.unsafeMutableAddressor()
{
  return &static Defaults.exportSceneFilePath;
}

unint64_t static Defaults.exportSceneFilePath.getter()
{
  return 0xD000000000000014;
}

unint64_t static Defaults.showWorldAnchorDebugInfo.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.showRectangleDebugInfo.getter()
{
  return 0xD000000000000017;
}

unint64_t static Defaults.enableRectangleDetection.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.hideRectangleSuggestions.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.showLightIntensityDebugInfo.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static Defaults.disableAllCoaching.getter()
{
  return 0xD000000000000013;
}

unint64_t static Defaults.coachingCalloutEnabled.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.maxDeviceAcceleration.getter()
{
  return 0xD000000000000016;
}

unint64_t static Defaults.maxDeviceRotation.getter()
{
  return 0xD000000000000012;
}

unint64_t static Defaults.measurementBias.getter()
{
  return 0xD000000000000010;
}

uint64_t static Defaults.recordARKit.getter()
{
  return 0x4164726F6365526BLL;
}

unint64_t static Defaults.recordCustomFile.getter()
{
  return 0xD000000000000011;
}

unint64_t static Defaults.replayCustomFile.getter()
{
  return 0xD000000000000011;
}

unint64_t static Defaults.snapReticleToEdges.getter()
{
  return 0xD000000000000013;
}

unint64_t static Defaults.edgeDetectionEnabled.getter()
{
  return 0xD000000000000015;
}

unint64_t static Defaults.edgeDetectionReticleSize.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.edgeDetectionDebugReticleEnabled.getter()
{
  return 0xD000000000000021;
}

unint64_t static Defaults.edgeDetectionUniqueContours.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static Defaults.adEdgeDetectionEnabled.getter()
{
  return 0xD000000000000017;
}

unint64_t static Defaults.showEdgeDebugView.getter()
{
  return 0xD000000000000012;
}

uint64_t static Defaults.showEdges.getter()
{
  return 0x676445776F68536BLL;
}

uint64_t static Defaults.showLines.getter()
{
  return 0x6E694C776F68536BLL;
}

unint64_t static Defaults.showSmoothedLines.getter()
{
  return 0xD000000000000012;
}

unint64_t static Defaults.showClosestEdge.getter()
{
  return 0xD000000000000010;
}

unint64_t static Defaults.showPreciseMeasurement.getter()
{
  return 0xD000000000000017;
}

unint64_t static Defaults.showOppositeUnits.getter()
{
  return 0xD000000000000012;
}

uint64_t static Defaults.lpShowPlane.getter()
{
  return 0x50776F6853504C6BLL;
}

uint64_t static Defaults.lpShowPoints.getter()
{
  return 0x50776F6853504C6BLL;
}

unint64_t static Defaults.mlShowUnprojectedTrail.getter()
{
  return 0xD000000000000017;
}

unint64_t static Defaults.mlShowSampledPoints.getter()
{
  return 0xD000000000000014;
}

unint64_t static Defaults.mlShowSegmentedBackground.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static Defaults.mlShowNormalsBackground.getter()
{
  return 0xD000000000000018;
}

uint64_t static Defaults.ptShowPoints.getter()
{
  return 0x50776F685354506BLL;
}

uint64_t static Defaults.ptPaintMode.getter()
{
  return 0x746E69615054506BLL;
}

uint64_t static Defaults.ptDrawPatches.getter()
{
  return 0x507761724454506BLL;
}

unint64_t static Defaults.peShowHitPoints.getter()
{
  return 0xD000000000000010;
}

uint64_t static Defaults.peShowHitRay.getter()
{
  return 0x48776F685345506BLL;
}

unint64_t static Defaults.pePatchTrackingMode.getter()
{
  return 0xD000000000000014;
}

unint64_t static Defaults.peShowPatchTrackingIndicator.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static Defaults.peADTestMode.getter()
{
  return 0x736554444145506BLL;
}

unint64_t static Defaults.peShowADIndicator.getter()
{
  return 0xD000000000000012;
}

unint64_t static Defaults.peFirstPointMaxDistance.getter()
{
  return 0xD000000000000018;
}

uint64_t static Defaults.hapticEnabled.getter()
{
  return 0x456369747061486BLL;
}

unint64_t static Defaults.enableRectangleTracking.getter()
{
  return 0xD000000000000018;
}

unint64_t static Defaults.enableRectangleTrackingWorkaround.getter()
{
  return 0xD000000000000022;
}

uint64_t static Defaults.adDemoEnabled.getter()
{
  return 0x456F6D654444416BLL;
}

unint64_t static Defaults.adDirectAPIEnabled.getter()
{
  return 0xD000000000000013;
}

uint64_t static Defaults.adVGAEnabled.getter()
{
  return 0x6E4541475644416BLL;
}

unint64_t static Defaults.adShowJasperPoints.getter()
{
  return 0xD000000000000013;
}

unint64_t static Defaults.adShowWorldPoints.getter()
{
  return 0xD000000000000012;
}

uint64_t static Defaults.adShowDepth.getter()
{
  return 0x44776F685344416BLL;
}

unint64_t static Defaults.adShowConfidence.getter()
{
  return 0xD000000000000011;
}

uint64_t static Defaults.adShowNormal.getter()
{
  return 0x4E776F685344416BLL;
}

const char *Defaults.adShowPerson.unsafeMutableAddressor()
{
  return "kADShowPerson";
}

uint64_t static Defaults.adShowPerson.getter()
{
  return 0x50776F685344416BLL;
}

const char *Defaults.adShowSpatial.unsafeMutableAddressor()
{
  return "kADShowSpatial";
}

uint64_t static Defaults.adShowSpatial.getter()
{
  return 0x53776F685344416BLL;
}

uint64_t static Defaults.adShowWindow.getter()
{
  return 0x57776F685344416BLL;
}

uint64_t static Defaults.adBlackMode.getter()
{
  return 0x6B63616C4244416BLL;
}

const char *Defaults.adPCDFilePath.unsafeMutableAddressor()
{
  return "kADPCDFilePath";
}

uint64_t static Defaults.adPCDFilePath.getter()
{
  return 0x694644435044416BLL;
}

unint64_t static Defaults.adGuidedFilterEnabled.getter()
{
  return 0xD000000000000016;
}

unint64_t static Defaults.personHeightDebugViewEnabled.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static Defaults.divisionsEnabled.getter()
{
  return 0xD000000000000011;
}

unint64_t static Defaults.semanticMeasurementsEnabled.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static Defaults.semanticMeasurementsDebuggerEnabled.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_2215CA250(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2556DA070) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_2215D16A8(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_2215CAD58(v6);
  *a1 = v3;
  return result;
}

unint64_t sub_2215CA2D8(uint64_t a1)
{
  uint64_t v2;

  sub_221652FD0();
  sub_2215BB99C((unint64_t *)&qword_2556DA0C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = sub_221653108();
  return sub_2215CA5A8(a1, v2);
}

unint64_t sub_2215CA344(unsigned __int8 a1)
{
  uint64_t v2;

  sub_221653B88();
  sub_221653BA0();
  v2 = sub_221653BAC();
  return sub_2215CA6E8(a1, v2);
}

unint64_t sub_2215CA39C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_221653B88();
  sub_2216531F8();
  v4 = sub_221653BAC();
  return sub_2215CA788(a1, a2, v4);
}

unint64_t sub_2215CA400(uint64_t a1)
{
  uint64_t v2;

  sub_221653B88();
  type metadata accessor for CFString(0);
  sub_2215BB99C(&qword_2556DA0E0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_221655878);
  sub_221652FF4();
  v2 = sub_221653BAC();
  return sub_2215CA868(a1, v2);
}

unint64_t sub_2215CA488(double a1)
{
  uint64_t v2;

  v2 = sub_221653B7C();
  return sub_2215CA9A8(v2, a1);
}

unint64_t sub_2215CA4BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_221653B7C();
  return sub_2215CAA40(a1, v2);
}

unint64_t sub_2215CA4EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2216536E4();
  return sub_2215CAADC(a1, v2);
}

unint64_t sub_2215CA51C(uint64_t a1)
{
  uint64_t v2;

  sub_2216531B0();
  sub_221653B88();
  sub_2216531F8();
  v2 = sub_221653BAC();
  swift_bridgeObjectRelease();
  return sub_2215CABE4(a1, v2);
}

unint64_t sub_2215CA5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_221652FD0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_2215BB99C(&qword_2556DA0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = sub_221653168();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_2215CA6E8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_2215CA788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_221653B04() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_221653B04() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_2215CA868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFString(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_2215BB99C(&qword_2556DA0E0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_221655878);
    v7 = v6;
    v8 = sub_221652FE8();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = sub_221652FE8();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_2215CA9A8(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_2215CAA40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_2215CAADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_2215D1D1C();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_2216536F0();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_2216536F0();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_2215CABE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_2216531B0();
    v8 = v7;
    if (v6 == sub_2216531B0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_221653B04();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_2216531B0();
          v15 = v14;
          if (v13 == sub_2216531B0() && v15 == v16)
            break;
          v18 = sub_221653B04();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_2215CAD58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  char v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v132 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA070);
  v125 = *(_QWORD *)(v132 - 8);
  v3 = MEMORY[0x24BDAC7A8](v132);
  v122 = (uint64_t)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v133 = (uint64_t)&v118 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v130 = (uint64_t)&v118 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v129 = (uint64_t)&v118 - v9;
  v10 = a1[1];
  result = sub_221653AB0();
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_140;
    if (v10)
      return sub_2215CB70C(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_139;
  v131 = a1;
  v120 = result;
  v126 = v1;
  if (v10 <= 1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    v124 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80));
    v119 = MEMORY[0x24BEE4AF8];
    if (v10 != 1)
    {
      v17 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_105:
      v110 = v15;
      if (v17 >= 2)
      {
        v111 = *v131;
        do
        {
          v112 = v17 - 2;
          if (v17 < 2)
            goto LABEL_134;
          if (!v111)
            goto LABEL_147;
          v113 = *(_QWORD *)(v110 + 32 + 16 * v112);
          v114 = *(_QWORD *)(v110 + 32 + 16 * (v17 - 1) + 8);
          v115 = v126;
          result = sub_2215CB94C(v111 + *(_QWORD *)(v125 + 72) * v113, v111 + *(_QWORD *)(v125 + 72) * *(_QWORD *)(v110 + 32 + 16 * (v17 - 1)), v111 + *(_QWORD *)(v125 + 72) * v114, v124);
          v126 = v115;
          if (v115)
            break;
          if (v114 < v113)
            goto LABEL_135;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_2215CBF54(v110);
            v110 = result;
          }
          if (v112 >= *(_QWORD *)(v110 + 16))
            goto LABEL_136;
          v116 = (_QWORD *)(v110 + 32 + 16 * v112);
          *v116 = v113;
          v116[1] = v114;
          v117 = *(_QWORD *)(v110 + 16);
          if (v17 > v117)
            goto LABEL_137;
          result = (uint64_t)memmove((void *)(v110 + 32 + 16 * (v17 - 1)), (const void *)(v110 + 32 + 16 * v17), 16 * (v117 - v17));
          *(_QWORD *)(v110 + 16) = v117 - 1;
          v17 = v117 - 1;
        }
        while (v117 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v119 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = v12 >> 1;
    result = sub_221653390();
    *(_QWORD *)(result + 16) = v13;
    v14 = *(unsigned __int8 *)(v125 + 80);
    v119 = result;
    v124 = result + ((v14 + 32) & ~v14);
  }
  v16 = 0;
  v15 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v18 = v16;
    v19 = v16 + 1;
    if (v16 + 1 >= v10)
    {
      ++v16;
      goto LABEL_24;
    }
    v20 = *v131;
    v21 = *(_QWORD *)(v125 + 72);
    v22 = v129;
    sub_2215C3ABC(*v131 + v21 * v19, v129, &qword_2556DA070);
    v23 = v20 + v21 * v16;
    v24 = v130;
    sub_2215C3ABC(v23, v130, &qword_2556DA070);
    LODWORD(v128) = sub_221652F64();
    sub_2215D2098(v24, &qword_2556DA070);
    result = sub_2215D2098(v22, &qword_2556DA070);
    v16 = v18 + 2;
    v127 = v20;
    v134 = v21;
    if (v18 + 2 >= v10)
      goto LABEL_21;
    v123 = v18;
    v25 = v15;
    v26 = v21 * v19;
    v27 = v20;
    v28 = v18 + 2;
    v29 = v21 * v28;
    do
    {
      v30 = v10;
      v31 = v129;
      sub_2215C3ABC(v27 + v29, v129, &qword_2556DA070);
      v32 = v130;
      sub_2215C3ABC(v27 + v26, v130, &qword_2556DA070);
      v33 = sub_221652F64();
      sub_2215D2098(v32, &qword_2556DA070);
      result = sub_2215D2098(v31, &qword_2556DA070);
      if (((v128 ^ v33) & 1) != 0)
      {
        v15 = v25;
        v16 = v28;
        v18 = v123;
        v10 = v30;
        if ((v128 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v27 += v134;
      ++v28;
      v10 = v30;
    }
    while (v30 != v28);
    v15 = v25;
    v16 = v30;
    v18 = v123;
LABEL_21:
    if ((v128 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v49 = v134;
    if (v16 < v18)
      goto LABEL_141;
    if (v18 < v16)
      break;
LABEL_24:
    v34 = v131;
    if (v16 < v10)
      goto LABEL_25;
LABEL_57:
    if (v16 < v18)
      goto LABEL_133;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_2215CBDA8(0, *(_QWORD *)(v15 + 16) + 1, 1, (char *)v15);
      v15 = result;
    }
    v59 = *(_QWORD *)(v15 + 16);
    v58 = *(_QWORD *)(v15 + 24);
    v17 = v59 + 1;
    if (v59 >= v58 >> 1)
    {
      result = (uint64_t)sub_2215CBDA8((char *)(v58 > 1), v59 + 1, 1, (char *)v15);
      v15 = result;
    }
    *(_QWORD *)(v15 + 16) = v17;
    v60 = v15 + 32;
    v61 = (uint64_t *)(v15 + 32 + 16 * v59);
    *v61 = v18;
    v61[1] = v16;
    if (v59)
    {
      while (1)
      {
        v62 = v17 - 1;
        if (v17 >= 4)
        {
          v67 = v60 + 16 * v17;
          v68 = *(_QWORD *)(v67 - 64);
          v69 = *(_QWORD *)(v67 - 56);
          v73 = __OFSUB__(v69, v68);
          v70 = v69 - v68;
          if (v73)
            goto LABEL_122;
          v72 = *(_QWORD *)(v67 - 48);
          v71 = *(_QWORD *)(v67 - 40);
          v73 = __OFSUB__(v71, v72);
          v65 = v71 - v72;
          v66 = v73;
          if (v73)
            goto LABEL_123;
          v74 = v17 - 2;
          v75 = (uint64_t *)(v60 + 16 * (v17 - 2));
          v77 = *v75;
          v76 = v75[1];
          v73 = __OFSUB__(v76, v77);
          v78 = v76 - v77;
          if (v73)
            goto LABEL_124;
          v73 = __OFADD__(v65, v78);
          v79 = v65 + v78;
          if (v73)
            goto LABEL_126;
          if (v79 >= v70)
          {
            v97 = (uint64_t *)(v60 + 16 * v62);
            v99 = *v97;
            v98 = v97[1];
            v73 = __OFSUB__(v98, v99);
            v100 = v98 - v99;
            if (v73)
              goto LABEL_132;
            v90 = v65 < v100;
            goto LABEL_94;
          }
        }
        else
        {
          if (v17 != 3)
          {
            v91 = *(_QWORD *)(v15 + 32);
            v92 = *(_QWORD *)(v15 + 40);
            v73 = __OFSUB__(v92, v91);
            v84 = v92 - v91;
            v85 = v73;
            goto LABEL_88;
          }
          v64 = *(_QWORD *)(v15 + 32);
          v63 = *(_QWORD *)(v15 + 40);
          v73 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          v66 = v73;
        }
        if ((v66 & 1) != 0)
          goto LABEL_125;
        v74 = v17 - 2;
        v80 = (uint64_t *)(v60 + 16 * (v17 - 2));
        v82 = *v80;
        v81 = v80[1];
        v83 = __OFSUB__(v81, v82);
        v84 = v81 - v82;
        v85 = v83;
        if (v83)
          goto LABEL_127;
        v86 = (uint64_t *)(v60 + 16 * v62);
        v88 = *v86;
        v87 = v86[1];
        v73 = __OFSUB__(v87, v88);
        v89 = v87 - v88;
        if (v73)
          goto LABEL_129;
        if (__OFADD__(v84, v89))
          goto LABEL_131;
        if (v84 + v89 >= v65)
        {
          v90 = v65 < v89;
LABEL_94:
          if (v90)
            v62 = v74;
          goto LABEL_96;
        }
LABEL_88:
        if ((v85 & 1) != 0)
          goto LABEL_128;
        v93 = (uint64_t *)(v60 + 16 * v62);
        v95 = *v93;
        v94 = v93[1];
        v73 = __OFSUB__(v94, v95);
        v96 = v94 - v95;
        if (v73)
          goto LABEL_130;
        if (v96 < v84)
          goto LABEL_14;
LABEL_96:
        v101 = v16;
        v102 = v62 - 1;
        if (v62 - 1 >= v17)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (!*v131)
          goto LABEL_145;
        v103 = v15;
        v104 = (uint64_t *)(v60 + 16 * v102);
        v105 = *v104;
        v106 = (_QWORD *)(v60 + 16 * v62);
        v107 = v106[1];
        v108 = v126;
        result = sub_2215CB94C(*v131 + *(_QWORD *)(v125 + 72) * *v104, *v131 + *(_QWORD *)(v125 + 72) * *v106, *v131 + *(_QWORD *)(v125 + 72) * v107, v124);
        v126 = v108;
        if (v108)
          goto LABEL_116;
        if (v107 < v105)
          goto LABEL_119;
        if (v62 > *(_QWORD *)(v103 + 16))
          goto LABEL_120;
        *v104 = v105;
        *(_QWORD *)(v60 + 16 * v102 + 8) = v107;
        v109 = *(_QWORD *)(v103 + 16);
        if (v62 >= v109)
          goto LABEL_121;
        v15 = v103;
        v17 = v109 - 1;
        result = (uint64_t)memmove((void *)(v60 + 16 * v62), v106 + 2, 16 * (v109 - 1 - v62));
        *(_QWORD *)(v103 + 16) = v109 - 1;
        v90 = v109 > 2;
        v16 = v101;
        if (!v90)
          goto LABEL_14;
      }
    }
    v17 = 1;
LABEL_14:
    v10 = v131[1];
    if (v16 >= v10)
      goto LABEL_105;
  }
  v128 = v10;
  v118 = v15;
  v50 = 0;
  v51 = v134 * (v16 - 1);
  v52 = v16 * v134;
  v53 = v18;
  v54 = v18 * v134;
  v34 = v131;
  v123 = v18;
  do
  {
    if (v53 != v16 + v50 - 1)
    {
      v55 = v127;
      if (!v127)
        goto LABEL_146;
      v56 = v127 + v54;
      v57 = v127 + v51;
      sub_2215C6540(v127 + v54, v122, &qword_2556DA070);
      if (v54 < v51 || v56 >= v55 + v52)
      {
        swift_arrayInitWithTakeFrontToBack();
        v49 = v134;
      }
      else
      {
        v49 = v134;
        if (v54 != v51)
          swift_arrayInitWithTakeBackToFront();
      }
      result = sub_2215C6540(v122, v57, &qword_2556DA070);
      v34 = v131;
      v18 = v123;
    }
    ++v53;
    --v50;
    v51 -= v49;
    v52 -= v49;
    v54 += v49;
  }
  while (v53 < v16 + v50);
  v15 = v118;
  v10 = v128;
  if (v16 >= v128)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v16, v18))
    goto LABEL_138;
  if (v16 - v18 >= v120)
    goto LABEL_57;
  if (__OFADD__(v18, v120))
    goto LABEL_142;
  if (v18 + v120 >= v10)
    v35 = v10;
  else
    v35 = v18 + v120;
  if (v35 >= v18)
  {
    if (v16 != v35)
    {
      v118 = v15;
      v36 = *(_QWORD *)(v125 + 72);
      v134 = v36 * (v16 - 1);
      v127 = v36;
      v37 = v16 * v36;
      v123 = v18;
      v121 = v35;
      do
      {
        v39 = 0;
        v40 = v18;
        v128 = v16;
        while (1)
        {
          v41 = *v34;
          v42 = v37;
          v43 = v37 + v39 + *v34;
          v44 = v129;
          v45 = v34;
          sub_2215C3ABC(v43, v129, &qword_2556DA070);
          v46 = v130;
          sub_2215C3ABC(v134 + v39 + v41, v130, &qword_2556DA070);
          LOBYTE(v41) = sub_221652F64();
          sub_2215D2098(v46, &qword_2556DA070);
          result = sub_2215D2098(v44, &qword_2556DA070);
          if ((v41 & 1) == 0)
            break;
          v47 = *v45;
          if (!*v45)
            goto LABEL_144;
          v37 = v42;
          v48 = v47 + v134 + v39;
          sub_2215C6540(v47 + v42 + v39, v133, &qword_2556DA070);
          swift_arrayInitWithTakeFrontToBack();
          result = sub_2215C6540(v133, v48, &qword_2556DA070);
          v38 = v128;
          v39 -= v127;
          ++v40;
          v34 = v131;
          if (v128 == v40)
            goto LABEL_35;
        }
        v38 = v128;
        v37 = v42;
        v34 = v45;
LABEL_35:
        v16 = v38 + 1;
        v134 += v127;
        v37 += v127;
        v18 = v123;
      }
      while (v16 != v121);
      v16 = v121;
      v15 = v118;
    }
    goto LABEL_57;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
  return result;
}

uint64_t sub_2215CB70C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a1;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA070);
  v7 = MEMORY[0x24BDAC7A8](v29);
  v30 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v26 = (uint64_t)&v23 - v10;
  result = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v28 = a3;
  v24 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v32 = v15 * (v28 - 1);
    v27 = v15;
    v31 = v15 * v28;
LABEL_5:
    v16 = 0;
    v17 = v25;
    while (1)
    {
      v18 = *a4;
      sub_2215C3ABC(v31 + v16 + *a4, (uint64_t)v14, &qword_2556DA070);
      v19 = v26;
      sub_2215C3ABC(v32 + v16 + v18, v26, &qword_2556DA070);
      LOBYTE(v18) = sub_221652F64();
      sub_2215D2098(v19, &qword_2556DA070);
      result = sub_2215D2098((uint64_t)v14, &qword_2556DA070);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v24)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      sub_2215C6540(v20 + v31 + v16, v30, &qword_2556DA070);
      swift_arrayInitWithTakeFrontToBack();
      result = sub_2215C6540(v30, v22, &qword_2556DA070);
      v16 -= v27;
      ++v17;
      a4 = v21;
      if (v28 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2215CB94C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA070);
  v8 = MEMORY[0x24BDAC7A8](v43);
  v42 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v39 - v11;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    return result;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_60;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_61;
  v16 = (uint64_t)(a2 - a1) / v14;
  v46 = a1;
  v45 = a4;
  if (v16 >= v15 / v14)
  {
    v18 = v15 / v14 * v14;
    if (a4 < a2 || a2 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v25 = a4 + v18;
    v44 = a4 + v18;
    v46 = a2;
    if (v18 >= 1 && a1 < a2)
    {
      v27 = -v14;
      v40 = a4;
      v41 = a1;
      do
      {
        v28 = a3 + v27;
        sub_2215C3ABC(v25 + v27, (uint64_t)v12, &qword_2556DA070);
        v29 = a2 + v27;
        v30 = a3;
        v31 = (uint64_t)v12;
        v32 = v42;
        sub_2215C3ABC(a2 + v27, v42, &qword_2556DA070);
        v33 = sub_221652F64();
        v34 = v32;
        v12 = (char *)v31;
        sub_2215D2098(v34, &qword_2556DA070);
        sub_2215D2098(v31, &qword_2556DA070);
        if ((v33 & 1) != 0)
        {
          if (v30 < a2 || v28 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            v37 = v40;
            v36 = v41;
          }
          else
          {
            v35 = v30 == a2;
            v37 = v40;
            v36 = v41;
            if (!v35)
              swift_arrayInitWithTakeBackToFront();
          }
          v46 += v27;
        }
        else
        {
          v38 = v44;
          v44 += v27;
          if (v30 < v38 || v28 >= v38)
          {
            swift_arrayInitWithTakeFrontToBack();
            v29 = a2;
            v37 = v40;
            v36 = v41;
          }
          else
          {
            v35 = v30 == v38;
            v37 = v40;
            v36 = v41;
            if (!v35)
              swift_arrayInitWithTakeBackToFront();
            v29 = a2;
          }
        }
        v25 = v44;
        if (v44 <= v37)
          break;
        a2 = v29;
        a3 = v28;
      }
      while (v29 > v36);
    }
  }
  else
  {
    v17 = v16 * v14;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v41 = a4 + v17;
    v44 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v42;
      do
      {
        sub_2215C3ABC(a2, (uint64_t)v12, &qword_2556DA070);
        sub_2215C3ABC(a4, v20, &qword_2556DA070);
        v21 = sub_221652F64();
        sub_2215D2098(v20, &qword_2556DA070);
        sub_2215D2098((uint64_t)v12, &qword_2556DA070);
        v22 = v46;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v14;
          if (v46 < a2 || v46 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v46 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v24 = v45 + v14;
          if (v46 < v45 || v46 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v46 != v45)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v45 = v24;
          v23 = a2;
        }
        v46 = v22 + v14;
        a4 = v45;
        if (v45 >= v41)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
  }
  sub_2215CBEA0(&v46, &v45, (uint64_t *)&v44);
  return 1;
}

char *sub_2215CBDA8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA150);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_2215CBEA0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA070);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_13;
  if (v3 < v4 || v3 >= v4 + (uint64_t)(v5 - v4) / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_2215CBF54(uint64_t a1)
{
  return sub_2215CBDA8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_2215CBF68(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2215CC0B8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_2215CBF84(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2215CC234(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

char *sub_2215CBFA0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CC3A8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CBFBC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CC4A8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CBFD8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CC5A0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CBFF4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CC6A8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CC010(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CC7A0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CC02C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CC8A8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CC048(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CC99C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CC064(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CCAA0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CC080(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CCB98(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2215CC09C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2215CCC90(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_2215CC0B8(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA158);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2556DA070) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2556DA070) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

size_t sub_2215CC234(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA148);
  v10 = *(_QWORD *)(sub_221652F40() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(sub_221652F40() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_2215CC3A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA130);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2215CC4A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA120);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2215CC5A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA118);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 48 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

char *sub_2215CC6A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9610);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2215CC7A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA110);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

char *sub_2215CC8A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA108);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 32 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v10;
}

char *sub_2215CC99C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 80 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

char *sub_2215CCAA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D8F78);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2215CCB98(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2215CCC90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8 << 6);
  }
  swift_release();
  return v10;
}

uint64_t sub_2215CCD88@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_2215D1ADC((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2215CCDC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  _BYTE v31[32];
  _OWORD v32[2];
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v36 = a1;
  v37 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v38 = v8;
  v39 = 0;
  v40 = v11 & v9;
  v41 = a2;
  v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2215D16BC(&v34);
  v12 = *((_QWORD *)&v34 + 1);
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_2215D2090();
    return swift_release();
  }
  while (1)
  {
    v15 = v34;
    sub_2215C39AC(&v35, v33);
    v16 = *a5;
    v18 = sub_2215CA39C(v15, v12);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (*(_QWORD *)(v16 + 24) >= v21)
    {
      if ((a4 & 1) != 0)
      {
        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_2215CF820();
        if ((v22 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_2215CD334(v21, a4 & 1);
      v23 = sub_2215CA39C(v15, v12);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_22;
      v18 = v23;
      if ((v22 & 1) != 0)
      {
LABEL_6:
        v13 = 32 * v18;
        sub_2215D1ADC(*(_QWORD *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_2215D1ADC((uint64_t)v31, (uint64_t)v32);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
        swift_bridgeObjectRelease();
        v14 = (_OWORD *)(*(_QWORD *)(*a5 + 56) + v13);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
        sub_2215C39AC(v32, v14);
        goto LABEL_7;
      }
    }
    v25 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    v26 = (uint64_t *)(v25[6] + 16 * v18);
    *v26 = v15;
    v26[1] = v12;
    sub_2215C39AC(v33, (_OWORD *)(v25[7] + 32 * v18));
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_21;
    v25[2] = v29;
LABEL_7:
    sub_2215D16BC(&v34);
    v12 = *((_QWORD *)&v34 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v34 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_221653B64();
  __break(1u);
  return result;
}

uint64_t sub_2215CD028(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA168);
  v38 = a2;
  v6 = sub_221653A08();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_221653B88();
    sub_2216531F8();
    result = sub_221653BAC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2215CD334(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B78);
  v6 = sub_221653A08();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_2215C39AC(v24, v35);
      }
      else
      {
        sub_2215D1ADC((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_221653B88();
      sub_2216531F8();
      result = sub_221653BAC();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_2215C39AC(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2215CD630(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B60);
  v37 = a2;
  v6 = sub_221653A08();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_221653B88();
    sub_2216531F8();
    result = sub_221653BAC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2215CD938(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA128);
  v36 = a2;
  v6 = sub_221653A08();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_221653B88();
    sub_2216531F8();
    result = sub_221653BAC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2215CDC4C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_221652FD0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0C8);
  v42 = a2;
  v10 = sub_221653A08();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
    }
    sub_2215BB99C((unint64_t *)&qword_2556DA0C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_221653108();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_2215CDFE0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  int64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA100);
  result = sub_221653A08();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v51 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v52 = 1 << *(_BYTE *)(v5 + 32);
    v53 = v3;
    v54 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v22 = v21 | (v8 << 6);
        if ((a2 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v31 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v31 >= v54)
          goto LABEL_33;
        v32 = v9[v31];
        ++v8;
        if (!v32)
        {
          v8 = v31 + 1;
          if (v31 + 1 >= v54)
            goto LABEL_33;
          v32 = v9[v8];
          if (!v32)
          {
            v33 = v31 + 2;
            if (v33 >= v54)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v53;
                goto LABEL_40;
              }
              if (v52 >= 64)
                bzero((void *)(v5 + 64), 8 * v54);
              else
                *v9 = v51;
              v3 = v53;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v32 = v9[v33];
            if (!v32)
            {
              while (1)
              {
                v8 = v33 + 1;
                if (__OFADD__(v33, 1))
                  goto LABEL_42;
                if (v8 >= v54)
                  goto LABEL_33;
                v32 = v9[v8];
                ++v33;
                if (v32)
                  goto LABEL_22;
              }
            }
            v8 = v33;
          }
        }
LABEL_22:
        v12 = (v32 - 1) & v32;
        v22 = __clz(__rbit64(v32)) + (v8 << 6);
        if ((a2 & 1) != 0)
        {
LABEL_10:
          v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v22);
          v24 = *(_QWORD *)(v5 + 56) + 192 * v22;
          v25 = *(_OWORD *)(v24 + 144);
          v75 = *(_OWORD *)(v24 + 128);
          v76 = v25;
          v77 = *(_OWORD *)(v24 + 160);
          v78 = *(_QWORD *)(v24 + 176);
          v26 = *(_OWORD *)(v24 + 80);
          v71 = *(_OWORD *)(v24 + 64);
          v72 = v26;
          v27 = *(_OWORD *)(v24 + 112);
          v73 = *(_OWORD *)(v24 + 96);
          v74 = v27;
          v28 = *(_OWORD *)(v24 + 16);
          v67 = *(_OWORD *)v24;
          v68 = v28;
          v29 = *(_OWORD *)(v24 + 32);
          v30 = *(_OWORD *)(v24 + 48);
          goto LABEL_24;
        }
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v22);
      v34 = *(_QWORD *)(v5 + 56) + 192 * v22;
      v36 = *(_OWORD *)(v34 + 32);
      v35 = *(_OWORD *)(v34 + 48);
      v37 = *(_OWORD *)v34;
      v56 = *(_OWORD *)(v34 + 16);
      v57 = v36;
      v55 = v37;
      v38 = *(_OWORD *)(v34 + 112);
      v40 = *(_OWORD *)(v34 + 64);
      v39 = *(_OWORD *)(v34 + 80);
      v61 = *(_OWORD *)(v34 + 96);
      v62 = v38;
      v59 = v40;
      v60 = v39;
      v42 = *(_OWORD *)(v34 + 144);
      v41 = *(_OWORD *)(v34 + 160);
      v43 = *(_OWORD *)(v34 + 128);
      v66 = *(_QWORD *)(v34 + 176);
      v64 = v42;
      v65 = v41;
      v63 = v43;
      v58 = v35;
      sub_2215D205C((uint64_t)&v55);
      v75 = v63;
      v76 = v64;
      v77 = v65;
      v78 = v66;
      v71 = v59;
      v72 = v60;
      v73 = v61;
      v74 = v62;
      v67 = v55;
      v68 = v56;
      v29 = v57;
      v30 = v58;
LABEL_24:
      v69 = v29;
      v70 = v30;
      result = sub_221653B7C();
      v44 = -1 << *(_BYTE *)(v7 + 32);
      v45 = result & ~v44;
      v46 = v45 >> 6;
      if (((-1 << v45) & ~*(_QWORD *)(v13 + 8 * (v45 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v45) & ~*(_QWORD *)(v13 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v47 = 0;
        v48 = (unint64_t)(63 - v44) >> 6;
        do
        {
          if (++v46 == v48 && (v47 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v49 = v46 == v48;
          if (v46 == v48)
            v46 = 0;
          v47 |= v49;
          v50 = *(_QWORD *)(v13 + 8 * v46);
        }
        while (v50 == -1);
        v14 = __clz(__rbit64(~v50)) + (v46 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v23;
      v15 = *(_QWORD *)(v7 + 56) + 192 * v14;
      v16 = v76;
      *(_OWORD *)(v15 + 128) = v75;
      *(_OWORD *)(v15 + 144) = v16;
      *(_OWORD *)(v15 + 160) = v77;
      *(_QWORD *)(v15 + 176) = v78;
      v17 = v72;
      *(_OWORD *)(v15 + 64) = v71;
      *(_OWORD *)(v15 + 80) = v17;
      v18 = v74;
      *(_OWORD *)(v15 + 96) = v73;
      *(_OWORD *)(v15 + 112) = v18;
      v19 = v68;
      *(_OWORD *)v15 = v67;
      *(_OWORD *)(v15 + 16) = v19;
      v20 = v70;
      *(_OWORD *)(v15 + 32) = v69;
      *(_OWORD *)(v15 + 48) = v20;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_2215CE37C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0A8);
  result = sub_221653A08();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v17);
      sub_221653B88();
      sub_221653BA0();
      result = sub_221653BAC();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_2215CE644(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0A0);
  v40 = a2;
  v6 = sub_221653A08();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v2;
  v39 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v39 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v39 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v40 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v39 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_QWORD *)(v5 + 56) + (v21 << 6);
    v32 = *(_QWORD *)v31;
    v33 = *(_DWORD *)(v31 + 24);
    v34 = *(_QWORD *)(v31 + 32);
    v41 = *(_OWORD *)(v31 + 40);
    v42 = *(_OWORD *)(v31 + 8);
    v35 = *(_DWORD *)(v31 + 56);
    if ((v40 & 1) == 0)
    {
      v36 = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    result = sub_2216536E4();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v30;
    v19 = *(_QWORD *)(v7 + 56) + (v18 << 6);
    *(_QWORD *)v19 = v32;
    *(_OWORD *)(v19 + 8) = v42;
    *(_DWORD *)(v19 + 24) = v33;
    *(_QWORD *)(v19 + 32) = v34;
    *(_OWORD *)(v19 + 40) = v41;
    *(_DWORD *)(v19 + 56) = v35;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2215CE96C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B30);
  result = sub_221653A08();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_221653B88();
      sub_221653BA0();
      result = sub_221653BAC();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_2215CEC3C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  v4 = sub_221652FD0();
  v45 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v2;
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B40);
  v8 = sub_221653A08();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    v38 = v41;
LABEL_42:
    *v38 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v43 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v42 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  HIDWORD(v40) = a2;
  v17 = 16;
  if ((a2 & 1) != 0)
    v17 = 32;
  v44 = v17;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v21 = v20 | (v16 << 6);
      goto LABEL_24;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v22 >= v42)
    {
      swift_release();
      v38 = v41;
      v23 = v43;
      if ((v40 & 0x100000000) != 0)
      {
LABEL_37:
        v39 = 1 << *(_BYTE *)(v7 + 32);
        if (v39 >= 64)
          bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v39;
        *(_QWORD *)(v7 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v23 = v43;
    v24 = v43[v22];
    ++v16;
    if (!v24)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_34;
      v24 = v43[v16];
      if (!v24)
        break;
    }
LABEL_23:
    v13 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v16 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + v44))(v6, *(_QWORD *)(v7 + 48) + v26 * v21, v4);
    v27 = v7;
    v28 = *(_QWORD *)(v7 + 56) + 8 * v21;
    v29 = *(_DWORD *)(v28 + 4);
    v30 = *(_BYTE *)v28;
    sub_2215BB99C((unint64_t *)&qword_2556DA0C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_221653108();
    v31 = -1 << *(_BYTE *)(v9 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v14 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v9 + 48) + v26 * v18, v6, v4);
    v19 = *(_QWORD *)(v9 + 56) + 8 * v18;
    *(_BYTE *)v19 = v30;
    *(_DWORD *)(v19 + 4) = v29;
    ++*(_QWORD *)(v9 + 16);
    v7 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v42)
  {
LABEL_34:
    swift_release();
    v38 = v41;
    if ((v40 & 0x100000000) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v24 = v43[v25];
  if (v24)
  {
    v16 = v25;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v16 >= v42)
      goto LABEL_34;
    v24 = v43[v16];
    ++v25;
    if (v24)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_2215CEFF0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _BYTE __dst[496];
  _BYTE __src[496];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0F0);
  result = sub_221653A08();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v29 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v30 = 1 << *(_BYTE *)(v5 + 32);
    v31 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v8 << 6);
        if ((a2 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v31)
          goto LABEL_33;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v31)
            goto LABEL_33;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v30 >= 64)
                  bzero((void *)(v5 + 64), 8 * v31);
                else
                  *v9 = v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v8 >= v31)
                  goto LABEL_33;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_22;
              }
            }
            v8 = v21;
          }
        }
LABEL_22:
        v12 = (v20 - 1) & v20;
        v16 = __clz(__rbit64(v20)) + (v8 << 6);
        if ((a2 & 1) != 0)
        {
LABEL_10:
          v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
          v18 = (_BYTE *)(*(_QWORD *)(v5 + 56) + 496 * v16);
          goto LABEL_24;
        }
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 56) + 496 * v16), sizeof(__dst));
      sub_2215D2034((uint64_t)__dst);
      v18 = __dst;
LABEL_24:
      memcpy(__src, v18, sizeof(__src));
      result = sub_221653B7C();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v17;
      result = (uint64_t)memcpy((void *)(*(_QWORD *)(v7 + 56) + 496 * v14), __src, 0x1F0uLL);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2215CF2DC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_221652FD0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B28);
  v42 = a2;
  v10 = sub_221653A08();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    sub_2215BB99C((unint64_t *)&qword_2556DA0C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_221653108();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

id sub_2215CF670()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA168);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215CF820()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B78);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_2215D1ADC(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_2215C39AC(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2215CFA04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B60);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215CFBB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA128);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215CFD64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_221652FD0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0C8);
  v24 = v0;
  v5 = *v0;
  v6 = sub_2216539FC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215CFF94()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA100);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v39 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v39 >= v13)
      goto LABEL_26;
    v40 = *(_QWORD *)(v6 + 8 * v39);
    ++v9;
    if (!v40)
    {
      v9 = v39 + 1;
      if (v39 + 1 >= v13)
        goto LABEL_26;
      v40 = *(_QWORD *)(v6 + 8 * v9);
      if (!v40)
        break;
    }
LABEL_25:
    v12 = (v40 - 1) & v40;
    v15 = __clz(__rbit64(v40)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 192 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_OWORD *)(v19 + 112);
    v22 = *(_OWORD *)(v19 + 64);
    v21 = *(_OWORD *)(v19 + 80);
    v48 = *(_OWORD *)(v19 + 96);
    v49 = v20;
    v46 = v22;
    v47 = v21;
    v24 = *(_OWORD *)(v19 + 144);
    v23 = *(_OWORD *)(v19 + 160);
    v25 = *(_OWORD *)(v19 + 128);
    v53 = *(_QWORD *)(v19 + 176);
    v51 = v24;
    v52 = v23;
    v50 = v25;
    v27 = *(_OWORD *)v19;
    v26 = *(_OWORD *)(v19 + 16);
    v28 = *(_OWORD *)(v19 + 48);
    v44 = *(_OWORD *)(v19 + 32);
    v45 = v28;
    v42 = v27;
    v43 = v26;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v29 = *(_QWORD *)(v4 + 56) + v18;
    v30 = v42;
    v31 = v43;
    v32 = v45;
    *(_OWORD *)(v29 + 32) = v44;
    *(_OWORD *)(v29 + 48) = v32;
    *(_OWORD *)v29 = v30;
    *(_OWORD *)(v29 + 16) = v31;
    v33 = v46;
    v34 = v47;
    v35 = v49;
    *(_OWORD *)(v29 + 96) = v48;
    *(_OWORD *)(v29 + 112) = v35;
    *(_OWORD *)(v29 + 64) = v33;
    *(_OWORD *)(v29 + 80) = v34;
    v36 = v50;
    v37 = v51;
    v38 = v52;
    *(_QWORD *)(v29 + 176) = v53;
    *(_OWORD *)(v29 + 144) = v37;
    *(_OWORD *)(v29 + 160) = v38;
    *(_OWORD *)(v29 + 128) = v36;
    result = (void *)sub_2215D205C((uint64_t)&v42);
  }
  v41 = v39 + 2;
  if (v41 >= v13)
    goto LABEL_26;
  v40 = *(_QWORD *)(v6 + 8 * v41);
  if (v40)
  {
    v9 = v41;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v40 = *(_QWORD *)(v6 + 8 * v9);
    ++v41;
    if (v40)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215D01B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0A8);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + 4 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + 4 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215D0344()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0A0);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = v15 << 6;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_DWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v19 + 32);
    v23 = *(_DWORD *)(v19 + 56);
    v24 = *(_OWORD *)(v19 + 8);
    v25 = *(_OWORD *)(v19 + 40);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v26 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v26 = v20;
    *(_OWORD *)(v26 + 8) = v24;
    *(_DWORD *)(v26 + 24) = v21;
    *(_QWORD *)(v26 + 32) = v22;
    *(_OWORD *)(v26 + 40) = v25;
    *(_DWORD *)(v26 + 56) = v23;
    v27 = v17;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215D0530()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B30);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215D06D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v1 = sub_221652FD0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B40);
  v27 = v0;
  v5 = *v0;
  v6 = sub_2216539FC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = v5 + 64;
  v29 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(v5 + 56) + v18;
    v20 = *(_BYTE *)v19;
    v21 = *(_DWORD *)(v19 + 4);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    v22 = *(_QWORD *)(v7 + 56) + v18;
    *(_BYTE *)v22 = v20;
    *(_DWORD *)(v22 + 4) = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2215D090C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[496];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0F0);
  v2 = *v0;
  v3 = sub_2216539FC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 496 * v15;
    memcpy(v22, (const void *)(*(_QWORD *)(v2 + 56) + 496 * v15), sizeof(v22));
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    memcpy((void *)(*(_QWORD *)(v4 + 56) + v18), v22, 0x1F0uLL);
    result = (void *)sub_2215D2034((uint64_t)v22);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_2215D0AE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_221652FD0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9B28);
  v24 = v0;
  v5 = *v0;
  v6 = sub_2216539FC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_2215D0D10(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2216537B0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_221653B88();
        swift_bridgeObjectRetain();
        sub_2216531F8();
        v10 = sub_221653BAC();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2215D0EE4(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_221652FD0();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_2216537B0();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_2215BB99C((unint64_t *)&qword_2556DA0C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = sub_221653108();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2215D1184(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2216537B0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_221653B7C();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            result = v15 + 192 * v3;
            v16 = (const void *)(v15 + 192 * v6);
            if (192 * v3 < (uint64_t)(192 * v6)
              || result >= (unint64_t)v16 + 192
              || (v17 = v3 == v6, v3 = v6, !v17))
            {
              result = (unint64_t)memmove((void *)result, v16, 0xC0uLL);
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_2215D1330(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = sub_2216537B0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v13 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v14 = sub_2216536E4();

        v15 = v14 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v3 >= (uint64_t)v15)
          {
LABEL_16:
            v18 = *(_QWORD *)(a2 + 48);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || v19 >= v20 + 1)
              *v19 = *v20;
            v21 = *(_QWORD *)(a2 + 56);
            v22 = (__int128 *)(v21 + (v3 << 6));
            v23 = (__int128 *)(v21 + (v6 << 6));
            if (v3 << 6 != v6 << 6 || (v3 = v6, v22 >= v23 + 4))
            {
              v10 = *v23;
              v11 = v23[1];
              v12 = v23[3];
              v22[2] = v23[2];
              v22[3] = v12;
              *v22 = v10;
              v22[1] = v11;
              v3 = v6;
            }
          }
        }
        else if (v15 >= v9 || v3 >= (uint64_t)v15)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_2215D14F0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2216537B0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_221653B88();
        sub_221653BA0();
        result = sub_221653BAC();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

size_t sub_2215D16A8(_QWORD *a1)
{
  return sub_2215CC0B8(0, a1[2], 0, a1);
}

uint64_t sub_2215D16BC@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_2215D1ADC(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_2215C6540((uint64_t)&v23, (uint64_t)v22, &qword_2556DA088);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_2215D2098((uint64_t)v21, &qword_2556DA138);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_2215D18A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA160);
    v3 = sub_221653888();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      sub_2216531B0();
      sub_221653B88();
      v7 = v6;
      sub_2216531F8();
      v8 = sub_221653BAC();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = sub_2216531B0();
        v17 = v16;
        if (v15 == sub_2216531B0() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = sub_221653B04();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = sub_2216531B0();
          v24 = v23;
          if (v22 == sub_2216531B0() && v24 == v25)
            goto LABEL_3;
          v27 = sub_221653B04();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

unint64_t _s17MeasureFoundation18RecordReplayOptionO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t sub_2215D1ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_2215D1B3C()
{
  unint64_t result;

  result = qword_2556DA098;
  if (!qword_2556DA098)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for RecordReplayOption, &type metadata for RecordReplayOption);
    atomic_store(result, (unint64_t *)&qword_2556DA098);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RecordReplayOption(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordReplayOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2215D1C68 + 4 * byte_221656305[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2215D1C9C + 4 * byte_221656300[v4]))();
}

uint64_t sub_2215D1C9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215D1CA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2215D1CACLL);
  return result;
}

uint64_t sub_2215D1CB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2215D1CC0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2215D1CC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215D1CCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215D1CD8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_2215D1CE4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RecordReplayOption()
{
  return &type metadata for RecordReplayOption;
}

ValueMetadata *type metadata accessor for DefaultsManager()
{
  return &type metadata for DefaultsManager;
}

ValueMetadata *type metadata accessor for Defaults()
{
  return &type metadata for Defaults;
}

unint64_t sub_2215D1D1C()
{
  unint64_t result;

  result = qword_2556DA0B0;
  if (!qword_2556DA0B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2556DA0B0);
  }
  return result;
}

unint64_t sub_2215D1D5C(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_2216539F0();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0B8);
      result = sub_221653888();
      v3 = result;
      v20 = v1;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = sub_2216539F0();
      result = swift_bridgeObjectRelease();
      if (!v4)
        return v3;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  v20 = v1;
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return v3;
LABEL_9:
  v6 = 0;
  v7 = v3 + 56;
  while ((v20 & 0xC000000000000001) != 0)
  {
    result = MEMORY[0x22766ED44](v6, v20);
    v8 = result;
    v9 = __OFADD__(v6++, 1);
    if (v9)
      goto LABEL_27;
LABEL_18:
    sub_221653B88();
    sub_221652FD0();
    sub_2215BB99C((unint64_t *)&qword_2556DA0C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_221653114();
    result = sub_221653BAC();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      swift_retain();
      v15 = sub_221652FAC();
      result = swift_release();
      if ((v15 & 1) != 0)
      {
LABEL_10:
        result = swift_release();
        goto LABEL_11;
      }
      v16 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v16;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
          break;
        swift_retain();
        v17 = sub_221652FAC();
        result = swift_release();
        if ((v17 & 1) != 0)
          goto LABEL_10;
      }
    }
    *(_QWORD *)(v7 + 8 * v12) = v14 | v13;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v8;
    v18 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v18, 1);
    v19 = v18 + 1;
    if (v9)
      goto LABEL_28;
    *(_QWORD *)(v3 + 16) = v19;
LABEL_11:
    if (v6 == v4)
      return v3;
  }
  if (v6 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_29;
  v8 = *(_QWORD *)(v20 + 32 + 8 * v6);
  result = swift_retain();
  v9 = __OFADD__(v6++, 1);
  if (!v9)
    goto LABEL_18;
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2215D2034(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_2215D205C(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_2215D2090()
{
  return swift_release();
}

uint64_t sub_2215D2098(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void static NSThread.prettyPrintCallStack(toDepth:)(unint64_t a1, char a2)
{
  id v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;

  v4 = objc_msgSend((id)objc_opt_self(), sel_callStackSymbols);
  v5 = sub_221653324();

  if ((a2 & 1) != 0)
  {
    v6 = &qword_2556DA170;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA170);
    v7 = (unint64_t *)&unk_2556DA178;
    v8 = MEMORY[0x24BEE12B0];
    goto LABEL_6;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v5 + 16) >= a1)
  {
    v6 = &qword_2556DA180;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA180);
    v7 = (unint64_t *)&unk_2556DA188;
    v8 = MEMORY[0x24BEE2170];
LABEL_6:
    sub_2215D2238(v7, v6, v8);
    sub_22165312C();
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22766FA40](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2215D2238(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22766FA4C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void *Float.piDiv2.unsafeMutableAddressor()
{
  return &static Float.piDiv2;
}

void *Float.degreesToRadians.unsafeMutableAddressor()
{
  return &static Float.degreesToRadians;
}

void *Float.pi2.unsafeMutableAddressor()
{
  return &static Float.pi2;
}

float static Float.pi2.getter()
{
  return 6.2832;
}

float static Float.piDiv2.getter()
{
  return 1.5708;
}

float static Float.degreesToRadians.getter()
{
  return 0.017453;
}

void *Float.radiansToDegrees.unsafeMutableAddressor()
{
  return &static Float.radiansToDegrees;
}

float static Float.radiansToDegrees.getter()
{
  return 57.296;
}

void *Float.completeAngle.unsafeMutableAddressor()
{
  return &static Float.completeAngle;
}

float static Float.completeAngle.getter()
{
  return 360.0;
}

void *Float.zero.unsafeMutableAddressor()
{
  return &static Float.zero;
}

float static Float.zero.getter()
{
  return 0.0;
}

float static Float.radians(fromDegrees:)(float a1)
{
  return a1 * 0.017453;
}

float static Float.degrees(fromRadians:)(float a1)
{
  return a1 * 57.296;
}

float static Float.normalize(degrees:)(float a1)
{
  return a1 / 360.0;
}

float static Float.lerp(value1:value2:t:)(float a1, float a2, float a3)
{
  return (float)((float)(a2 - a1) * a3) + a1;
}

float static Float.random()()
{
  return (float)arc4random() * 2.3283e-10;
}

Swift::Void __swiftcall Float.lerp(to:t:)(Swift::Float to, Swift::Float t)
{
  float *v2;

  *v2 = *v2 + (float)((float)(to - *v2) * t);
}

float64_t SIMD2<>.init(_:)(float64x2_t a1, float64_t a2)
{
  a1.f64[1] = a2;
  *(float32x2_t *)&a1.f64[0] = vcvt_f32_f64(a1);
  return a1.f64[0];
}

float32x2_t sub_2215D23AC(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  float32x2_t *v4;
  float32x2_t v5;
  uint64_t v6;
  float32x2_t v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (float32x2_t *)(a1 + 32);
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 16);
    do
    {
      v7 = *v4++;
      HIDWORD(a3) = v7.i32[1];
      v5 = vadd_f32(v5, v7);
      --v6;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  *(float *)&a3 = (float)v3;
  return vdiv_f32(v5, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
}

__int128 *SIMD3<>.forward.unsafeMutableAddressor()
{
  if (qword_2556D8DD8 != -1)
    swift_once();
  return &static SIMD3<>.forward;
}

float32x2_t static SIMD3<>.* infix(_:_:)(float32x2_t a1, float a2)
{
  return vmul_n_f32(a1, a2);
}

float32x2_t static SIMD3<>./ infix(_:_:)(float32x2_t a1, int32x2_t a2)
{
  return vdiv_f32(a1, (float32x2_t)vdup_lane_s32(a2, 0));
}

double sub_2215D2464()
{
  double result;

  result = 0.00781250185;
  static SIMD3<>.one = xmmword_221656580;
  return result;
}

__int128 *SIMD3<>.one.unsafeMutableAddressor()
{
  if (qword_2556D8DC8 != -1)
    swift_once();
  return &static SIMD3<>.one;
}

double static SIMD3<>.one.getter()
{
  double result;

  *(_QWORD *)&result = sub_2215D2650(&qword_2556D8DC8, (uint64_t)&static SIMD3<>.one).n128_u64[0];
  return result;
}

void sub_2215D24D4()
{
  static SIMD3<>.zero = 0uLL;
}

__int128 *SIMD3<>.zero.unsafeMutableAddressor()
{
  if (qword_2556D8DD0 != -1)
    swift_once();
  return &static SIMD3<>.zero;
}

double static SIMD3<>.zero.getter()
{
  double result;

  *(_QWORD *)&result = sub_2215D2650(&qword_2556D8DD0, (uint64_t)&static SIMD3<>.zero).n128_u64[0];
  return result;
}

double sub_2215D2540()
{
  double result;

  result = 0.0;
  static SIMD3<>.forward = xmmword_221656010;
  return result;
}

double static SIMD3<>.forward.getter()
{
  double result;

  *(_QWORD *)&result = sub_2215D2650(&qword_2556D8DD8, (uint64_t)&static SIMD3<>.forward).n128_u64[0];
  return result;
}

double sub_2215D2570()
{
  double result;

  result = 0.0078125;
  static SIMD3<>.up = xmmword_221656590;
  return result;
}

__int128 *SIMD3<>.up.unsafeMutableAddressor()
{
  if (qword_2556D8DE0 != -1)
    swift_once();
  return &static SIMD3<>.up;
}

double static SIMD3<>.up.getter()
{
  double result;

  *(_QWORD *)&result = sub_2215D2650(&qword_2556D8DE0, (uint64_t)&static SIMD3<>.up).n128_u64[0];
  return result;
}

double sub_2215D25E0()
{
  double result;

  *(_QWORD *)&result = 1065353216;
  static SIMD3<>.right = xmmword_2216565A0;
  return result;
}

__int128 *SIMD3<>.right.unsafeMutableAddressor()
{
  if (qword_2556D8DE8 != -1)
    swift_once();
  return &static SIMD3<>.right;
}

double static SIMD3<>.right.getter()
{
  double result;

  *(_QWORD *)&result = sub_2215D2650(&qword_2556D8DE8, (uint64_t)&static SIMD3<>.right).n128_u64[0];
  return result;
}

__n128 sub_2215D2650(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(__n128 *)a2;
}

double SIMD3<>.init(x:z:)(double result)
{
  *(_QWORD *)&result = LODWORD(result);
  return result;
}

double SIMD3<>.init(xz:)(int32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vtrn2q_s32(vzip1q_s32((int32x4_t)0, a1), (int32x4_t)0).u64[0];
  return result;
}

float SIMD3<>.lerp(to:t:)(float32x4_t a1, float a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float result;

  v3 = vsubq_f32(a1, *v2);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v2->f32, vmul_n_f32(*(float32x2_t *)v3.f32, a2));
  result = COERCE_FLOAT(v2->i64[1]) + vmuls_lane_f32(a2, v3, 2);
  v4.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL).u32[1], LODWORD(result));
  *v2 = v4;
  return result;
}

int32x2_t SIMD3<>.xz.getter(int8x16_t a1)
{
  return vzip1_s32(*(int32x2_t *)a1.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL));
}

float SIMD3<>.lengthXZ.getter(float32x4_t a1)
{
  float32x4_t v1;

  v1 = vmulq_f32(a1, a1);
  return sqrtf(vaddq_f32(v1, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2)).f32[0]);
}

double SIMD3<>.lengthXZSquared.getter(float32x4_t a1)
{
  float32x4_t v1;
  double result;

  v1 = vmulq_f32(a1, a1);
  *(_QWORD *)&result = vaddq_f32(v1, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2)).u64[0];
  return result;
}

double SIMD3<>.applying(_:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, a5.f32[0]), a2, *(float32x2_t *)a5.f32, 1), a3, a5, 2), a4).u64[0];
  return result;
}

float static SIMD3<>.*= infix(_:_:)(float32x2_t *a1, float32x4_t a2)
{
  __int128 v2;
  float result;

  *(float32x2_t *)&v2 = vmul_f32(*(float32x2_t *)a2.f32, *a1);
  result = vmuls_lane_f32(a1[1].f32[0], a2, 2);
  *((_QWORD *)&v2 + 1) = LODWORD(result);
  *(_OWORD *)a1->f32 = v2;
  return result;
}

float32x2_t static SIMD3<>./ infix(_:_:)(uint64_t a1, float32x2_t a2, double a3, double a4)
{
  *(float *)&a4 = (float)a1;
  return vdiv_f32(a2, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0));
}

float static SIMD3<>./= infix(_:_:)(float32x2_t *a1, double a2)
{
  __int128 v2;
  float result;

  *(float32x2_t *)&v2 = vdiv_f32(*a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
  result = a1[1].f32[0] / *(float *)&a2;
  *((_QWORD *)&v2 + 1) = LODWORD(result);
  *(_OWORD *)a1->f32 = v2;
  return result;
}

double static SIMD3<>.rotateAboutY(_:center:sin:cos:)(float32x4_t a1, float32x4_t a2, float a3, float a4)
{
  float32x4_t v4;
  double v5;

  v4 = vsubq_f32(a1, a2);
  *(float *)&v5 = a2.f32[0] + (float)((float)(a4 * v4.f32[0]) - vmuls_lane_f32(a3, v4, 2));
  HIDWORD(v5) = a1.i32[1];
  return v5;
}

__n64 static SIMD3<>.rotateAboutY(_:center:angle:)(float32x4_t a1, float32x4_t a2, float a3)
{
  __float2 v3;
  __n64 result;
  float32x4_t v5;
  float v6;
  unsigned __int32 v7;

  v6 = a2.f32[0];
  v7 = a1.u32[1];
  v5 = vsubq_f32(a1, a2);
  v3 = __sincosf_stret(a3);
  result.n64_f32[0] = v6 + (float)((float)(v3.__cosval * v5.f32[0]) - vmuls_lane_f32(v3.__sinval, v5, 2));
  result.n64_u32[1] = v7;
  return result;
}

float32x2_t static SIMD3<>.dotXZ(_:_:)(float32x4_t a1, float32x4_t a2)
{
  int8x16_t v2;

  v2 = (int8x16_t)vmulq_f32(a1, a2);
  return vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
}

float32x2_t static SIMD3<>.crossXZ(_:_:)(int8x16_t a1, int8x16_t a2)
{
  float32x2_t v2;
  float32x2_t v3;

  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v2.i32[1] = a2.i32[0];
  v3 = vmul_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a1.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL)), v2);
  return vsub_f32(v3, (float32x2_t)vdup_lane_s32((int32x2_t)v3, 1));
}

float static SIMD3<>.lengthXZ(_:)(float32x4_t a1)
{
  float32x4_t v1;

  v1 = vmulq_f32(a1, a1);
  return sqrtf(vaddq_f32(v1, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2)).f32[0]);
}

double static SIMD3<>.lengthXZSquared(_:)(float32x4_t a1)
{
  float32x4_t v1;
  double result;

  v1 = vmulq_f32(a1, a1);
  *(_QWORD *)&result = vaddq_f32(v1, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2)).u64[0];
  return result;
}

float static SIMD3<>.distanceXZ(_:_:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int8x16_t v3;

  v2 = vsubq_f32(a2, a1);
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  return sqrtf(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)).f32[0]);
}

float32x2_t static SIMD3<>.distanceXZSquared(_:_:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int8x16_t v3;

  v2 = vsubq_f32(a2, a1);
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  return vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
}

float static SIMD3<>.cosXZ(_:_:)(float32x4_t a1, float32x4_t a2)
{
  return (float)(vmulq_f32(a1, a2).f32[0] + vmuls_lane_f32(a1.f32[2], a2, 2))
       / (float)(sqrtf(vmulq_f32(a1, a1).f32[0] + vmuls_lane_f32(a1.f32[2], a1, 2))
               * sqrtf(vmulq_f32(a2, a2).f32[0] + vmuls_lane_f32(a2.f32[2], a2, 2)));
}

uint64_t static SIMD3<>.== infix(_:_:)(float32x4_t a1, float32x4_t a2)
{
  int16x4_t v2;

  v2 = vmovn_s32(vceqq_f32(a1, a2));
  if ((v2.i16[0] & v2.i16[1] & 1) != 0)
    return v2.i8[4] & 1;
  else
    return 0;
}

float32x2_t static SIMD3<>.lerp(value1:value2:t:)(float32x4_t a1, float32x4_t a2, float a3)
{
  return vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(a2, a1), a3));
}

BOOL SIMD3<>.isAlmostVertical(withinDegrees:)(float a1, float32x4_t a2)
{
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t v6;

  v3 = (int32x4_t)vmulq_f32(a2, a2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  v6 = vmulq_f32(vmulq_n_f32(a2, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]), (float32x4_t)xmmword_221656590);
  return (float)(acosf(fminf(fmaxf(fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]), 0.0), 1.0))* 57.296) <= a1;
}

BOOL SIMD3<>.isAlmostHorizontal(withinDegrees:)(float a1, float32x4_t a2)
{
  int32x4_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;

  v2 = (int32x4_t)vmulq_f32(a2, a2);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v5 = vmulq_f32(vmulq_n_f32(a2, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]), (float32x4_t)xmmword_221656590);
  return fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]) <= cosf((float)(90.0 - a1)* 0.017453);
}

float32x2_t _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  float *v5;
  __int128 v6;
  uint64_t v7;
  float v8;
  __int128 v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (float *)(a1 + 40);
    *(_QWORD *)&v6 = 0;
    DWORD2(v6) = 0;
    v7 = *(_QWORD *)(a1 + 16);
    do
    {
      *(float32x2_t *)&v9 = vadd_f32(*(float32x2_t *)&v6, *(float32x2_t *)(v5 - 2));
      v8 = *v5;
      v5 += 4;
      *((float *)&v9 + 2) = *((float *)&v6 + 2) + v8;
      HIDWORD(v9) = 0;
      v6 = v9;
      --v7;
    }
    while (v7);
  }
  else
  {
    *(_QWORD *)&v9 = 0;
  }
  *(float *)&a4 = (float)v4;
  return vdiv_f32(*(float32x2_t *)&v9, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0));
}

uint64_t static Double.multiArrayDataType.getter()
{
  return 65600;
}

uint64_t Double.toUInt8.getter(double a1)
{
  uint64_t result;

  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 256.0)
    return (int)a1;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_2215D2B5C()
{
  return 65600;
}

double sub_2215D2B68@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 + *a2;
  *a3 = result;
  return result;
}

double sub_2215D2B7C@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 - *a2;
  *a3 = result;
  return result;
}

double sub_2215D2B90@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 * *a2;
  *a3 = result;
  return result;
}

double sub_2215D2BA4@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 / *a2;
  *a3 = result;
  return result;
}

double sub_2215D2BB8@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1;
  *a2 = (double)a1;
  return result;
}

uint64_t sub_2215D2BC4()
{
  double *v0;
  double v1;
  uint64_t result;

  v1 = *v0;
  if ((~*(_QWORD *)v0 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 256.0)
    return (int)v1;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static Float.multiArrayDataType.getter()
{
  return 65568;
}

uint64_t Float.toUInt8.getter(float a1)
{
  uint64_t result;

  if ((~LODWORD(a1) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 256.0)
    return (int)a1;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_2215D2C54()
{
  return 65568;
}

float sub_2215D2C60@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 + *a2;
  *a3 = result;
  return result;
}

float sub_2215D2C74@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 - *a2;
  *a3 = result;
  return result;
}

float sub_2215D2C88@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 * *a2;
  *a3 = result;
  return result;
}

float sub_2215D2C9C@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result;

  result = *a1 / *a2;
  *a3 = result;
  return result;
}

float sub_2215D2CB0@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = (float)a1;
  *a2 = (float)a1;
  return result;
}

uint64_t sub_2215D2CBC()
{
  float *v0;
  float v1;
  uint64_t result;

  v1 = *v0;
  if ((~*(_DWORD *)v0 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 256.0)
    return (int)v1;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static Int32.multiArrayDataType.getter()
{
  return 131104;
}

uint64_t Int32.toUInt8.getter(uint64_t result)
{
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > 0xFF)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_2215D2D24()
{
  return 131104;
}

_DWORD *sub_2215D2D30@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (__OFADD__(*result, *a2))
    __break(1u);
  else
    *a3 = *result + *a2;
  return result;
}

_DWORD *sub_2215D2D4C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (__OFSUB__(*result, *a2))
    __break(1u);
  else
    *a3 = *result - *a2;
  return result;
}

int *sub_2215D2D68@<X0>(int *result@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *result * (uint64_t)*a2;
  if (v3 == (int)v3)
    *a3 = v3;
  else
    __break(1u);
  return result;
}

_DWORD *sub_2215D2D88@<X0>(_DWORD *result@<X0>, int *a2@<X1>, int *a3@<X8>)
{
  int v3;

  v3 = *a2;
  if (*a2)
  {
    if (*result != 0x80000000 || v3 != -1)
    {
      *a3 = *result / v3;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2215D2DB8@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *a2 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215D2DE0()
{
  unsigned int *v0;
  uint64_t result;

  result = *v0;
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > 0xFF)
LABEL_5:
    __break(1u);
  return result;
}

CGImageRef_optional __swiftcall MLMultiArray.cgImage(min:max:channel:axes:clip:)(Swift::Double min, Swift::Double max, Swift::Int_optional channel, Swift::tuple_Int_Int_Int_optional axes, Swift::Double_optional clip)
{
  return (CGImageRef_optional)sub_2215D7F84(channel.value, channel.is_nil, axes.value._0, axes.value._1, axes.value._2, axes.is_nil, min, max);
}

unint64_t sub_2215D2E08(int a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  id v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t p_attr;
  id v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t result;
  id v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  uint64_t v68;
  size_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  int v73;
  _BOOL4 v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  int64_t v94;
  unint64_t v95;
  unint64_t v96;

  v11 = (uint64_t)v10;
  LOBYTE(v12) = a8;
  LOBYTE(v91) = a4;
  v18 = objc_msgSend(v10, sel_shape);
  v19 = sub_2215D81F0();
  v20 = sub_221653324();

  if (v20 >> 62)
    goto LABEL_145;
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  swift_bridgeObjectRelease();
  if (v21 <= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_2216560E0;
    sub_221653894();
    swift_bridgeObjectRelease();
    v95 = 0xD000000000000025;
    v96 = 0x800000022165D7B0;
    v23 = objc_msgSend((id)v11, sel_shape);
    v24 = sub_221653324();

    MEMORY[0x22766E7BC](v24, v19);
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_221653210();
LABEL_5:
    v25 = v95;
    v26 = v96;
LABEL_20:
    *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v22 + 32) = v25;
    *(_QWORD *)(v22 + 40) = v26;
    sub_221653B70();
    swift_bridgeObjectRelease();
    return 0;
  }
  p_attr = (uint64_t)&stru_24E72FFF8.attr;
  if ((v12 & 1) == 0)
  {
    if ((a5 & 0x8000000000000000) == 0)
    {
      v28 = objc_msgSend((id)v11, sel_shape);
      v29 = sub_221653324();

      if (v29 >> 62)
      {
LABEL_163:
        swift_bridgeObjectRetain();
        v30 = sub_2216539F0();
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v30 > (uint64_t)a5 && (a6 & 0x8000000000000000) == 0)
      {
        v31 = objc_msgSend((id)v11, *(SEL *)(p_attr + 2496));
        v32 = sub_221653324();

        if (v32 >> 62)
        {
LABEL_170:
          swift_bridgeObjectRetain();
          v33 = sub_2216539F0();
          swift_bridgeObjectRelease();
        }
        else
        {
          v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v33 > a6 && (a7 & 0x8000000000000000) == 0)
        {
          v34 = objc_msgSend((id)v11, *(SEL *)(p_attr + 2496));
          v35 = sub_221653324();

          if (v35 >> 62)
          {
            swift_bridgeObjectRetain();
            v36 = sub_2216539F0();
            swift_bridgeObjectRelease();
          }
          else
          {
            v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (v36 > a7)
            goto LABEL_30;
        }
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_2216560E0;
    sub_221653894();
    sub_221653210();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA190);
    sub_221653960();
    sub_221653210();
    v37 = objc_msgSend((id)v11, *(SEL *)(p_attr + 2496));
    v38 = sub_221653324();

    MEMORY[0x22766E7BC](v38, v19);
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = 0;
    v26 = 0xE000000000000000;
    goto LABEL_20;
  }
  v40 = objc_msgSend((id)v11, sel_shape);
  v41 = sub_221653324();

  if (!(v41 >> 62))
  {
    v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_24;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    v42 = sub_2216539F0();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    a6 = v42 != 2;
    a7 = v42 == 2 ? 1 : 2;
    a5 = v42 == 2 ? -1 : 0;
LABEL_30:
    v43 = objc_msgSend((id)v11, *(SEL *)(p_attr + 2496), v89);
    v12 = sub_221653324();

    if ((v12 & 0xC000000000000001) != 0)
    {
LABEL_147:
      v48 = (id)MEMORY[0x22766ED44](a6, v12, v44, v45, v46, v47);
    }
    else
    {
      if ((unint64_t)a6 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_149:
        v12 = a2;
        v51 = (id)MEMORY[0x22766ED44](a7, p_attr);
        goto LABEL_36;
      }
      v48 = *(id *)(v12 + 8 * a6 + 32);
    }
    v49 = v48;
    swift_bridgeObjectRelease();
    v94 = (int64_t)objc_msgSend(v49, sel_integerValue);

    v50 = objc_msgSend((id)v11, *(SEL *)(p_attr + 2496));
    p_attr = sub_221653324();

    if ((p_attr & 0xC000000000000001) != 0)
      goto LABEL_149;
    if ((unint64_t)a7 >= *(_QWORD *)((p_attr & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_151:
      v54 = (id)MEMORY[0x22766ED44](a6, a2);
      goto LABEL_39;
    }
    v12 = a2;
    v51 = *(id *)(p_attr + 8 * a7 + 32);
LABEL_36:
    v52 = v51;
    swift_bridgeObjectRelease();
    p_attr = (uint64_t)objc_msgSend(v52, sel_integerValue);

    v53 = objc_msgSend((id)v11, sel_strides);
    a2 = sub_221653324();

    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_151;
    if ((unint64_t)a6 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_153:
      v57 = (id)MEMORY[0x22766ED44](a7, a6);
      a2 = a3;
      goto LABEL_42;
    }
    v54 = *(id *)(a2 + 8 * a6 + 32);
LABEL_39:
    v55 = v54;
    swift_bridgeObjectRelease();
    v93 = (uint64_t)objc_msgSend(v55, sel_integerValue);

    v56 = objc_msgSend((id)v11, sel_strides);
    a6 = sub_221653324();

    if ((a6 & 0xC000000000000001) != 0)
      goto LABEL_153;
    a2 = a3;
    if ((unint64_t)a7 >= *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_155;
    }
    v57 = *(id *)(a6 + 8 * a7 + 32);
LABEL_42:
    swift_bridgeObjectRelease();
    a7 = (uint64_t)objc_msgSend(v57, sel_integerValue);

    v58 = objc_msgSend((id)v11, sel_shape);
    v59 = sub_221653324();

    if (!(v59 >> 62))
    {
      v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_44;
    }
LABEL_155:
    swift_bridgeObjectRetain();
    v60 = sub_2216539F0();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    if (v60 == 2)
    {
      a2 = 0;
      a6 = 1;
      v89 = 1;
      v91 = 0;
      goto LABEL_65;
    }
    v61 = objc_msgSend((id)v11, sel_shape);
    a6 = sub_221653324();

    if ((a6 & 0xC000000000000001) != 0)
    {
      v62 = (id)MEMORY[0x22766ED44](a5, a6);
    }
    else
    {
      if ((a5 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_166:
        __break(1u);
        goto LABEL_167;
      }
      if (a5 >= *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_166;
      v62 = *(id *)(a6 + 8 * a5 + 32);
    }
    v63 = v62;
    swift_bridgeObjectRelease();
    a6 = (uint64_t)objc_msgSend(v63, sel_integerValue);

    if ((v91 & 1) == 0)
      break;
    if ((unint64_t)(a6 - 3) >= 2)
    {
      if (a6 != 1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
        v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_2216560E0;
        v95 = 0;
        v96 = 0xE000000000000000;
        sub_221653894();
        sub_221653210();
LABEL_121:
        sub_221653ABC();
        sub_221653210();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      a2 = 0;
      v64 = objc_msgSend((id)v11, sel_strides, 1);
    }
    else
    {
      v90 = a6;
      a2 = 0;
      a6 = 4;
      v64 = objc_msgSend((id)v11, sel_strides, v90);
    }
LABEL_60:
    v65 = v64;
    v19 = sub_221653324();

    if ((v19 & 0xC000000000000001) == 0)
    {
      if ((a5 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_169:
        __break(1u);
        goto LABEL_170;
      }
      if (a5 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_169;
      v66 = *(id *)(v19 + 8 * a5 + 32);
      goto LABEL_64;
    }
LABEL_167:
    v66 = (id)MEMORY[0x22766ED44](a5, v19);
LABEL_64:
    v67 = v66;
    swift_bridgeObjectRelease();
    v91 = (uint64_t)objc_msgSend(v67, sel_integerValue);

LABEL_65:
    v19 = v94;
    v68 = v94 * p_attr;
    if ((unsigned __int128)(v94 * (__int128)p_attr) >> 64 != (v94 * p_attr) >> 63)
    {
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }
    v69 = v68 * a6;
    if ((unsigned __int128)(v68 * (__int128)a6) >> 64 != (v68 * a6) >> 63)
      goto LABEL_159;
    if ((v69 & 0x8000000000000000) != 0)
      goto LABEL_160;
    if (v69)
    {
      a5 = sub_221653390();
      *(_QWORD *)(a5 + 16) = v69;
      memset((void *)(a5 + 32), 255, v69);
    }
    else
    {
      a5 = MEMORY[0x24BEE4AF8];
    }
    v70 = (char *)objc_msgSend(objc_retainAutorelease((id)v11), sel_dataPointer);
    if ((unsigned __int128)(a2 * (__int128)v91) >> 64 != (a2 * v91) >> 63)
      goto LABEL_161;
    if (v94 < 0)
      goto LABEL_162;
    v71 = 0;
    v72 = &v70[4 * a2 * v91];
    v73 = v12 - a1;
    v74 = __OFSUB__((_DWORD)v12, a1);
    LODWORD(a3) = v74;
    v75 = *(double *)&a9 * 100.0;
    v76 = (uint64_t)(*(double *)&a9 * 100.0);
    v44 = 0xFFFFFFFF80000000;
    v45 = 0x7FFFFFFFLL;
    v46 = 0x80000000;
    v47 = 255;
    v77 = v89;
    while (1)
    {
      if (v71 == v77)
      {
        __break(1u);
        goto LABEL_147;
      }
      if (v19)
        break;
LABEL_118:
      ++v71;
      v77 = v89;
      if (v71 == v89)
        return a5;
    }
    if ((p_attr & 0x8000000000000000) == 0)
    {
      v78 = 0;
      v79 = v71 * v91;
      while (v78 != v19)
      {
        if (p_attr)
        {
          if ((unsigned __int128)(v71 * (__int128)v91) >> 64 != (v71 * v91) >> 63)
            goto LABEL_139;
          v80 = v78 * v93;
          v11 = (unsigned __int128)(v78 * (__int128)v93) >> 64;
          if (v11 != (v78 * v93) >> 63)
            goto LABEL_140;
          v11 = v79 + v80;
          if (__OFADD__(v79, v80))
            goto LABEL_141;
          v81 = v78 * p_attr;
          if ((unsigned __int128)(v78 * (__int128)p_attr) >> 64 != (v78 * p_attr) >> 63)
            goto LABEL_142;
          if (v74)
            goto LABEL_143;
          if (!v73)
            goto LABEL_144;
          v19 = 0;
          while (1)
          {
            v82 = v19 * a7;
            v12 = (unsigned __int128)(v19 * (__int128)a7) >> 64;
            if (v12 != (v19 * a7) >> 63)
              break;
            v83 = __OFADD__(v11, v82);
            v84 = v11 + v82;
            if (v83)
              goto LABEL_123;
            a2 = *(unsigned int *)&v72[4 * v84];
            if ((a10 & 1) == 0)
            {
              v85 = 100 * (int)a2;
              if (v85 != (int)v85)
                goto LABEL_131;
              if ((COERCE_UNSIGNED_INT64(*(double *)&a9 * 100.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
                goto LABEL_132;
              if (v75 <= -9.22337204e18)
                goto LABEL_133;
              if (v75 >= 9.22337204e18)
                goto LABEL_134;
              if (v76 < (uint64_t)0xFFFFFFFF80000000)
                goto LABEL_135;
              if (v76 > 0x7FFFFFFF)
                goto LABEL_136;
              if ((int)v85 >= (int)v76)
                a2 = a2;
              else
                a2 = 0;
            }
            if (__OFSUB__((_DWORD)a2, a1))
              goto LABEL_124;
            LOBYTE(v12) = a2 - a1;
            v86 = 255 * ((int)a2 - a1);
            if (v86 != (int)v86)
              goto LABEL_125;
            if ((_DWORD)v86 == 0x80000000 && v73 == -1)
              goto LABEL_137;
            v88 = (int)v86 / v73;
            if (v88 >= 255)
              v88 = 255;
            v12 = v81 + v19;
            if (__OFADD__(v81, v19))
              goto LABEL_126;
            a2 = v12 * a6;
            v12 = (unsigned __int128)((uint64_t)v12 * (__int128)a6) >> 64;
            if (v12 != a2 >> 63)
              goto LABEL_127;
            v83 = __OFADD__(a2, v71);
            a2 += v71;
            if (v83)
              goto LABEL_128;
            if (a2 < 0)
              goto LABEL_129;
            v12 = *(_QWORD *)(a5 + 16);
            if (a2 >= v12)
              goto LABEL_130;
            ++v19;
            *(_BYTE *)(a5 + 32 + a2) = v88 & ~(v88 >> 31);
            if (p_attr == v19)
              goto LABEL_81;
          }
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          break;
        }
LABEL_81:
        ++v78;
        v19 = v94;
        if (v78 == v94)
          goto LABEL_118;
      }
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      swift_bridgeObjectRetain();
      v21 = sub_2216539F0();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    __break(1u);
  }
  if ((a2 & 0x8000000000000000) == 0 && a6 > a2)
  {
    a6 = 1;
    v64 = objc_msgSend((id)v11, sel_strides, 1);
    goto LABEL_60;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_2216560E0;
  sub_221653894();
  result = swift_bridgeObjectRelease();
  v95 = 0xD000000000000025;
  v96 = 0x800000022165D780;
  if (!__OFSUB__(a6, 1))
    goto LABEL_121;
  __break(1u);
  return result;
}

uint64_t sub_2215D3B44(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, float a9, float a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v14;
  id v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t result;
  id v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  __n128 v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  size_t v67;
  float *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  BOOL v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  double v87;
  id v88;
  unint64_t v91;
  unint64_t v92;

  v11 = (uint64_t)v10;
  LOBYTE(v14) = a6;
  v20 = objc_msgSend(v10, sel_shape);
  v21 = sub_2215D81F0();
  v22 = sub_221653324();

  if ((unint64_t)v22 >> 62)
  {
LABEL_131:
    swift_bridgeObjectRetain();
    v23 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v23 <= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2216560E0;
    sub_221653894();
    swift_bridgeObjectRelease();
    v91 = 0xD000000000000025;
    v92 = 0x800000022165D7B0;
    v25 = objc_msgSend((id)v11, sel_shape);
    v26 = sub_221653324();

    MEMORY[0x22766E7BC](v26, v21);
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_221653210();
LABEL_5:
    v27 = v91;
    v28 = v92;
    goto LABEL_20;
  }
  if ((v14 & 1) != 0)
  {
    v41 = objc_msgSend((id)v11, sel_shape);
    v42 = sub_221653324();

    if (!(v42 >> 62))
    {
      v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_24;
    }
    goto LABEL_143;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_19;
  v29 = objc_msgSend((id)v11, sel_shape);
  v30 = sub_221653324();

  if (v30 >> 62)
  {
LABEL_149:
    swift_bridgeObjectRetain();
    v31 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v31 <= (uint64_t)a3 || a4 < 0)
    goto LABEL_19;
  v32 = objc_msgSend((id)v11, sel_shape);
  v33 = sub_221653324();

  if (v33 >> 62)
  {
LABEL_156:
    swift_bridgeObjectRetain();
    v34 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v34 <= a4 || a5 < 0)
    goto LABEL_19;
  v35 = objc_msgSend((id)v11, sel_shape);
  v36 = sub_221653324();

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    v37 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v37 <= a5)
  {
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2216560E0;
    sub_221653894();
    sub_221653210();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA190);
    sub_221653960();
    sub_221653210();
    v38 = objc_msgSend((id)v11, sel_shape);
    v39 = sub_221653324();

    MEMORY[0x22766E7BC](v39, v21);
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = 0;
    v28 = 0xE000000000000000;
LABEL_20:
    *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v24 + 32) = v27;
    *(_QWORD *)(v24 + 40) = v28;
    sub_221653B70();
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    v44 = objc_msgSend((id)v11, sel_shape);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
    {
LABEL_133:
      v46 = (id)MEMORY[0x22766ED44](a4, v14, v45);
    }
    else
    {
      if ((unint64_t)a4 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_135:
        v49 = (id)MEMORY[0x22766ED44](a5, v14);
        goto LABEL_36;
      }
      v46 = *(id *)(v14 + 8 * a4 + 32);
    }
    v47 = v46;
    swift_bridgeObjectRelease();
    v22 = (uint64_t)objc_msgSend(v47, sel_integerValue);

    v48 = objc_msgSend((id)v11, sel_shape);
    v14 = sub_221653324();

    v87 = *(double *)&a7;
    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_135;
    if ((unint64_t)a5 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_137:
      v52 = (id)MEMORY[0x22766ED44](a4, v14);
      goto LABEL_39;
    }
    v49 = *(id *)(v14 + 8 * a5 + 32);
LABEL_36:
    v50 = v49;
    swift_bridgeObjectRelease();
    a7 = (uint64_t)objc_msgSend(v50, sel_integerValue);

    v51 = objc_msgSend((id)v11, sel_strides);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_137;
    if ((unint64_t)a4 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_139:
      v55 = (id)MEMORY[0x22766ED44](a5, v14);
      goto LABEL_42;
    }
    v52 = *(id *)(v14 + 8 * a4 + 32);
LABEL_39:
    v53 = v52;
    swift_bridgeObjectRelease();
    a4 = (uint64_t)objc_msgSend(v53, sel_integerValue);

    v54 = objc_msgSend((id)v11, sel_strides);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_139;
    if ((unint64_t)a5 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_141;
    }
    v55 = *(id *)(v14 + 8 * a5 + 32);
LABEL_42:
    v56 = v55;
    swift_bridgeObjectRelease();
    a5 = (uint64_t)objc_msgSend(v56, sel_integerValue);

    v57 = objc_msgSend((id)v11, sel_shape);
    v58 = sub_221653324();

    if (!(v58 >> 62))
    {
      v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_44;
    }
LABEL_141:
    swift_bridgeObjectRetain();
    v59 = sub_2216539F0();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    v88 = (id)v11;
    if (v59 == 2)
    {
      a1 = 0;
      v21 = 0;
      v14 = 1;
      v11 = 1;
      goto LABEL_65;
    }
    v60 = objc_msgSend((id)v11, sel_shape);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
    {
      v61 = (id)MEMORY[0x22766ED44](a3, v14);
    }
    else
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
      if (a3 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_152;
      v61 = *(id *)(v14 + 8 * a3 + 32);
    }
    v62 = v61;
    swift_bridgeObjectRelease();
    v11 = (uint64_t)objc_msgSend(v62, sel_integerValue);

    if ((a2 & 1) == 0)
      break;
    if ((unint64_t)(v11 - 3) >= 2)
    {
      if (v11 != 1)
      {
LABEL_121:
        __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = xmmword_2216560E0;
        v91 = 0;
        v92 = 0xE000000000000000;
        sub_221653894();
        sub_221653210();
LABEL_122:
        sub_221653ABC();
        sub_221653210();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      a1 = 0;
      v14 = 1;
    }
    else
    {
      a1 = 0;
      v14 = 4;
    }
LABEL_60:
    v63 = objc_msgSend(v88, sel_strides);
    v21 = sub_221653324();

    if ((v21 & 0xC000000000000001) == 0)
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }
      if (a3 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_155;
      v64 = *(id *)(v21 + 8 * a3 + 32);
      goto LABEL_64;
    }
LABEL_153:
    v64 = (id)MEMORY[0x22766ED44](a3, v21);
LABEL_64:
    v65 = v64;
    swift_bridgeObjectRelease();
    v21 = (int64_t)objc_msgSend(v65, sel_integerValue);

LABEL_65:
    v66 = v22 * a7;
    if ((unsigned __int128)(v22 * (__int128)a7) >> 64 != (v22 * a7) >> 63)
    {
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    v67 = v66 * v14;
    if ((unsigned __int128)(v66 * (__int128)v14) >> 64 != (v66 * v14) >> 63)
      goto LABEL_145;
    if ((v67 & 0x8000000000000000) != 0)
      goto LABEL_146;
    if (v67)
    {
      a3 = sub_221653390();
      *(_QWORD *)(a3 + 16) = v67;
      memset((void *)(a3 + 32), 255, v67);
    }
    else
    {
      a3 = MEMORY[0x24BEE4AF8];
    }
    v68 = (float *)objc_msgSend(objc_retainAutorelease(v88), sel_dataPointer);
    if ((unsigned __int128)(a1 * (__int128)v21) >> 64 != (a1 * v21) >> 63)
      goto LABEL_147;
    if (v22 < 0)
      goto LABEL_148;
    v69 = 0;
    v45.n128_f32[0] = a10 - a9;
    v70 = v87 * 100.0;
    while (1)
    {
      if (v69 == v11)
      {
        __break(1u);
        goto LABEL_133;
      }
      if (v22)
        break;
LABEL_109:
      if (++v69 == v11)
        return a3;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      v71 = 0;
      v72 = v69 * v21;
      while (1)
      {
        if (v71 == v22)
          goto LABEL_126;
        if (a7)
          break;
LABEL_78:
        if (++v71 == v22)
          goto LABEL_109;
      }
      if ((unsigned __int128)(v69 * (__int128)v21) >> 64 != (v69 * v21) >> 63)
        goto LABEL_127;
      v73 = v71 * a4;
      if ((unsigned __int128)(v71 * (__int128)a4) >> 64 == (v71 * a4) >> 63)
      {
        v74 = __OFADD__(v72, v73);
        v75 = v72 + v73;
        if (!v74)
        {
          v76 = v71 * a7;
          if ((unsigned __int128)(v71 * (__int128)a7) >> 64 == (v71 * a7) >> 63)
          {
            v77 = 0;
            while (1)
            {
              v78 = v77 * a5;
              if ((unsigned __int128)(v77 * (__int128)a5) >> 64 != (v77 * a5) >> 63)
              {
                __break(1u);
LABEL_112:
                __break(1u);
LABEL_113:
                __break(1u);
LABEL_114:
                __break(1u);
LABEL_115:
                __break(1u);
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
LABEL_119:
                __break(1u);
LABEL_120:
                __break(1u);
                goto LABEL_121;
              }
              v74 = __OFADD__(v75, v78);
              v79 = v75 + v78;
              if (v74)
                goto LABEL_112;
              v80 = v68[a1 * v21 + v79];
              if ((a8 & 1) == 0)
              {
                if ((COERCE_UNSIGNED_INT64(v87 * 100.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
                {
                  __break(1u);
LABEL_124:
                  __break(1u);
LABEL_125:
                  __break(1u);
LABEL_126:
                  __break(1u);
LABEL_127:
                  __break(1u);
                  goto LABEL_128;
                }
                if (v70 <= -9.22337204e18)
                  goto LABEL_124;
                if (v70 >= 9.22337204e18)
                  goto LABEL_125;
                if ((float)(v80 * 100.0) < (float)(uint64_t)(v87 * 100.0))
                  v80 = 0.0;
              }
              v81 = 255.0;
              v82 = (float)((float)(v80 - a9) * 255.0) / v45.n128_f32[0];
              if (v82 <= 255.0)
                v81 = v82;
              if (v82 >= 0.0)
                v83 = v81;
              else
                v83 = 0.0;
              if ((~LODWORD(v83) & 0x7F800000) == 0)
                goto LABEL_113;
              if (v83 <= -1.0)
                goto LABEL_114;
              if (v83 >= 256.0)
                goto LABEL_115;
              v84 = v76 + v77;
              if (__OFADD__(v76, v77))
                goto LABEL_116;
              v85 = v84 * v14;
              if ((unsigned __int128)(v84 * (__int128)v14) >> 64 != (v84 * v14) >> 63)
                goto LABEL_117;
              v74 = __OFADD__(v85, v69);
              v86 = v85 + v69;
              if (v74)
                goto LABEL_118;
              if ((v86 & 0x8000000000000000) != 0)
                goto LABEL_119;
              if (v86 >= *(_QWORD *)(a3 + 16))
                goto LABEL_120;
              ++v77;
              *(_BYTE *)(a3 + 32 + v86) = (int)v83;
              if (a7 == v77)
                goto LABEL_78;
            }
          }
          goto LABEL_130;
        }
      }
      else
      {
LABEL_128:
        __break(1u);
      }
      __break(1u);
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    __break(1u);
LABEL_143:
    swift_bridgeObjectRetain();
    v43 = sub_2216539F0();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    a4 = v43 != 2;
    if (v43 == 2)
      a5 = 1;
    else
      a5 = 2;
    if (v43 == 2)
      a3 = -1;
    else
      a3 = 0;
  }
  if ((a1 & 0x8000000000000000) == 0 && v11 > a1)
  {
    v14 = 1;
    v11 = 1;
    goto LABEL_60;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2216560E0;
  sub_221653894();
  result = swift_bridgeObjectRelease();
  v91 = 0xD000000000000025;
  v92 = 0x800000022165D780;
  if (!__OFSUB__(v11, 1))
    goto LABEL_122;
  __break(1u);
  return result;
}

uint64_t sub_2215D4850(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, double a9, double a10)
{
  void *v10;
  uint64_t v11;
  uint64_t v14;
  id v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t result;
  id v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  size_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  BOOL v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  double v91;
  id v92;
  unint64_t v95;
  unint64_t v96;

  v11 = (uint64_t)v10;
  LOBYTE(v14) = a6;
  v20 = objc_msgSend(v10, sel_shape);
  v21 = sub_2215D81F0();
  v22 = sub_221653324();

  if ((unint64_t)v22 >> 62)
  {
LABEL_131:
    swift_bridgeObjectRetain();
    v23 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v23 <= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2216560E0;
    sub_221653894();
    swift_bridgeObjectRelease();
    v95 = 0xD000000000000025;
    v96 = 0x800000022165D7B0;
    v25 = objc_msgSend((id)v11, sel_shape);
    v26 = sub_221653324();

    MEMORY[0x22766E7BC](v26, v21);
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_221653210();
LABEL_5:
    v27 = v95;
    v28 = v96;
    goto LABEL_20;
  }
  if ((v14 & 1) != 0)
  {
    v41 = objc_msgSend((id)v11, sel_shape);
    v42 = sub_221653324();

    if (!(v42 >> 62))
    {
      v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_24;
    }
    goto LABEL_143;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_19;
  v29 = objc_msgSend((id)v11, sel_shape);
  v30 = sub_221653324();

  if (v30 >> 62)
  {
LABEL_149:
    swift_bridgeObjectRetain();
    v31 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v31 <= (uint64_t)a3 || a4 < 0)
    goto LABEL_19;
  v32 = objc_msgSend((id)v11, sel_shape);
  v33 = sub_221653324();

  if (v33 >> 62)
  {
LABEL_156:
    swift_bridgeObjectRetain();
    v34 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v34 <= a4 || a5 < 0)
    goto LABEL_19;
  v35 = objc_msgSend((id)v11, sel_shape);
  v36 = sub_221653324();

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    v37 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v37 <= a5)
  {
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2216560E0;
    sub_221653894();
    sub_221653210();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA190);
    sub_221653960();
    sub_221653210();
    v38 = objc_msgSend((id)v11, sel_shape);
    v39 = sub_221653324();

    MEMORY[0x22766E7BC](v39, v21);
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = 0;
    v28 = 0xE000000000000000;
LABEL_20:
    *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v24 + 32) = v27;
    *(_QWORD *)(v24 + 40) = v28;
    sub_221653B70();
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    v44 = objc_msgSend((id)v11, sel_shape);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
    {
LABEL_133:
      v50 = (id)MEMORY[0x22766ED44](a4, v14, v45, v46, v47, v48, v49);
    }
    else
    {
      if ((unint64_t)a4 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_135:
        v53 = (id)MEMORY[0x22766ED44](a5, v14);
        goto LABEL_36;
      }
      v50 = *(id *)(v14 + 8 * a4 + 32);
    }
    v51 = v50;
    swift_bridgeObjectRelease();
    v22 = (uint64_t)objc_msgSend(v51, sel_integerValue);

    v52 = objc_msgSend((id)v11, sel_shape);
    v14 = sub_221653324();

    v91 = *(double *)&a7;
    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_135;
    if ((unint64_t)a5 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_137:
      v56 = (id)MEMORY[0x22766ED44](a4, v14);
      goto LABEL_39;
    }
    v53 = *(id *)(v14 + 8 * a5 + 32);
LABEL_36:
    v54 = v53;
    swift_bridgeObjectRelease();
    a7 = (uint64_t)objc_msgSend(v54, sel_integerValue);

    v55 = objc_msgSend((id)v11, sel_strides);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_137;
    if ((unint64_t)a4 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_139:
      v59 = (id)MEMORY[0x22766ED44](a5, v14);
      goto LABEL_42;
    }
    v56 = *(id *)(v14 + 8 * a4 + 32);
LABEL_39:
    v57 = v56;
    swift_bridgeObjectRelease();
    a4 = (uint64_t)objc_msgSend(v57, sel_integerValue);

    v58 = objc_msgSend((id)v11, sel_strides);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_139;
    if ((unint64_t)a5 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_141;
    }
    v59 = *(id *)(v14 + 8 * a5 + 32);
LABEL_42:
    v60 = v59;
    swift_bridgeObjectRelease();
    a5 = (uint64_t)objc_msgSend(v60, sel_integerValue);

    v61 = objc_msgSend((id)v11, sel_shape);
    v62 = sub_221653324();

    if (!(v62 >> 62))
    {
      v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_44;
    }
LABEL_141:
    swift_bridgeObjectRetain();
    v63 = sub_2216539F0();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    v92 = (id)v11;
    if (v63 == 2)
    {
      a1 = 0;
      v21 = 0;
      v14 = 1;
      v11 = 1;
      goto LABEL_65;
    }
    v64 = objc_msgSend((id)v11, sel_shape);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
    {
      v65 = (id)MEMORY[0x22766ED44](a3, v14);
    }
    else
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
      if (a3 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_152;
      v65 = *(id *)(v14 + 8 * a3 + 32);
    }
    v66 = v65;
    swift_bridgeObjectRelease();
    v11 = (uint64_t)objc_msgSend(v66, sel_integerValue);

    if ((a2 & 1) == 0)
      break;
    if ((unint64_t)(v11 - 3) >= 2)
    {
      if (v11 != 1)
      {
LABEL_121:
        __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = xmmword_2216560E0;
        v95 = 0;
        v96 = 0xE000000000000000;
        sub_221653894();
        sub_221653210();
LABEL_122:
        sub_221653ABC();
        sub_221653210();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      a1 = 0;
      v14 = 1;
    }
    else
    {
      a1 = 0;
      v14 = 4;
    }
LABEL_60:
    v67 = objc_msgSend(v92, sel_strides);
    v21 = sub_221653324();

    if ((v21 & 0xC000000000000001) == 0)
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }
      if (a3 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_155;
      v68 = *(id *)(v21 + 8 * a3 + 32);
      goto LABEL_64;
    }
LABEL_153:
    v68 = (id)MEMORY[0x22766ED44](a3, v21);
LABEL_64:
    v69 = v68;
    swift_bridgeObjectRelease();
    v21 = (int64_t)objc_msgSend(v69, sel_integerValue);

LABEL_65:
    v70 = v22 * a7;
    if ((unsigned __int128)(v22 * (__int128)a7) >> 64 != (v22 * a7) >> 63)
    {
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    v71 = v70 * v14;
    if ((unsigned __int128)(v70 * (__int128)v14) >> 64 != (v70 * v14) >> 63)
      goto LABEL_145;
    if ((v71 & 0x8000000000000000) != 0)
      goto LABEL_146;
    if (v71)
    {
      a3 = sub_221653390();
      *(_QWORD *)(a3 + 16) = v71;
      memset((void *)(a3 + 32), 255, v71);
    }
    else
    {
      a3 = MEMORY[0x24BEE4AF8];
    }
    v72 = (char *)objc_msgSend(objc_retainAutorelease(v92), sel_dataPointer);
    if ((unsigned __int128)(a1 * (__int128)v21) >> 64 != (a1 * v21) >> 63)
      goto LABEL_147;
    if (v22 < 0)
      goto LABEL_148;
    v73 = 0;
    v74 = &v72[8 * a1 * v21];
    v45.n128_f64[0] = a10 - a9;
    v46.n128_f64[0] = v91 * 100.0;
    v47.n128_f64[0] = (double)(uint64_t)(v91 * 100.0);
    v48.n128_u64[0] = 0;
    v49.n128_u64[0] = -1.0;
    while (1)
    {
      if (v73 == v11)
      {
        __break(1u);
        goto LABEL_133;
      }
      if (v22)
        break;
LABEL_109:
      if (++v73 == v11)
        return a3;
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      v75 = 0;
      v76 = v73 * v21;
      while (1)
      {
        if (v75 == v22)
          goto LABEL_126;
        if (a7)
          break;
LABEL_78:
        if (++v75 == v22)
          goto LABEL_109;
      }
      if ((unsigned __int128)(v73 * (__int128)v21) >> 64 != (v73 * v21) >> 63)
        goto LABEL_127;
      v77 = v75 * a4;
      if ((unsigned __int128)(v75 * (__int128)a4) >> 64 == (v75 * a4) >> 63)
      {
        v78 = __OFADD__(v76, v77);
        v79 = v76 + v77;
        if (!v78)
        {
          v80 = v75 * a7;
          if ((unsigned __int128)(v75 * (__int128)a7) >> 64 == (v75 * a7) >> 63)
          {
            v81 = 0;
            while (1)
            {
              v82 = v81 * a5;
              if ((unsigned __int128)(v81 * (__int128)a5) >> 64 != (v81 * a5) >> 63)
              {
                __break(1u);
LABEL_112:
                __break(1u);
LABEL_113:
                __break(1u);
LABEL_114:
                __break(1u);
LABEL_115:
                __break(1u);
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
LABEL_119:
                __break(1u);
LABEL_120:
                __break(1u);
                goto LABEL_121;
              }
              v78 = __OFADD__(v79, v82);
              v83 = v79 + v82;
              if (v78)
                goto LABEL_112;
              v84 = *(double *)&v74[8 * v83];
              if ((a8 & 1) == 0)
              {
                if ((COERCE_UNSIGNED_INT64(v91 * 100.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
                {
                  __break(1u);
LABEL_124:
                  __break(1u);
LABEL_125:
                  __break(1u);
LABEL_126:
                  __break(1u);
LABEL_127:
                  __break(1u);
                  goto LABEL_128;
                }
                if (v46.n128_f64[0] <= -9.22337204e18)
                  goto LABEL_124;
                if (v46.n128_f64[0] >= 9.22337204e18)
                  goto LABEL_125;
                if (v84 * 100.0 < v47.n128_f64[0])
                  v84 = 0.0;
              }
              v85 = 255.0;
              v86 = (v84 - a9) * 255.0 / v45.n128_f64[0];
              if (v86 <= 255.0)
                v85 = v86;
              if (v86 >= 0.0)
                v87 = v85;
              else
                v87 = 0.0;
              if ((~*(_QWORD *)&v87 & 0x7FF0000000000000) == 0)
                goto LABEL_113;
              if (v87 <= -1.0)
                goto LABEL_114;
              if (v87 >= 256.0)
                goto LABEL_115;
              v88 = v80 + v81;
              if (__OFADD__(v80, v81))
                goto LABEL_116;
              v89 = v88 * v14;
              if ((unsigned __int128)(v88 * (__int128)v14) >> 64 != (v88 * v14) >> 63)
                goto LABEL_117;
              v78 = __OFADD__(v89, v73);
              v90 = v89 + v73;
              if (v78)
                goto LABEL_118;
              if ((v90 & 0x8000000000000000) != 0)
                goto LABEL_119;
              if (v90 >= *(_QWORD *)(a3 + 16))
                goto LABEL_120;
              ++v81;
              *(_BYTE *)(a3 + 32 + v90) = (int)v87;
              if (a7 == v81)
                goto LABEL_78;
            }
          }
          goto LABEL_130;
        }
      }
      else
      {
LABEL_128:
        __break(1u);
      }
      __break(1u);
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    __break(1u);
LABEL_143:
    swift_bridgeObjectRetain();
    v43 = sub_2216539F0();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    a4 = v43 != 2;
    if (v43 == 2)
      a5 = 1;
    else
      a5 = 2;
    if (v43 == 2)
      a3 = -1;
    else
      a3 = 0;
  }
  if ((a1 & 0x8000000000000000) == 0 && v11 > a1)
  {
    v14 = 1;
    v11 = 1;
    goto LABEL_60;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2216560E0;
  sub_221653894();
  result = swift_bridgeObjectRelease();
  v95 = 0xD000000000000025;
  v96 = 0x800000022165D780;
  if (!__OFSUB__(v11, 1))
    goto LABEL_122;
  __break(1u);
  return result;
}

uint64_t MLMultiArray.toRawBytes<A>(min:max:channel:axes:clip:)(uint64_t a1, uint64_t a2, int64_t a3, int a4, void (*a5)(void), uint64_t a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, unsigned __int8 a18, uint64_t a19, _QWORD *a20)
{
  void *v12;
  void *v13;
  int64_t v14;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t result;
  id v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t, uint64_t);
  int64_t v88;
  BOOL v89;
  int64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t);
  void (*v140)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v141)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  int64_t v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int64_t v152;
  unint64_t v153;

  v13 = v12;
  LOBYTE(v14) = a8;
  v145 = (unint64_t)a5;
  LODWORD(v144) = a4;
  v143 = a3;
  v137 = a1;
  v138 = a2;
  v148 = a19;
  v17 = *(_QWORD *)(a19 - 8);
  v18 = MEMORY[0x24BDAC7A8](a1);
  v136 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v135 = (char *)&v115 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v147 = (char *)&v115 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v115 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v115 - v27;
  v29 = objc_msgSend(v12, sel_shape);
  v146 = sub_2215D81F0();
  v30 = sub_221653324();

  if (v30 >> 62)
  {
LABEL_120:
    swift_bridgeObjectRetain();
    v31 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v31 <= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_2216560E0;
    v149 = 0;
    v150 = 0xE000000000000000;
    sub_221653894();
    swift_bridgeObjectRelease();
    v149 = 0xD000000000000025;
    v150 = 0x800000022165D7B0;
    v33 = objc_msgSend(v13, sel_shape);
    v34 = v146;
    v35 = sub_221653324();

    MEMORY[0x22766E7BC](v35, v34);
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_221653210();
LABEL_5:
    v36 = v149;
    v37 = v150;
    *(_QWORD *)(v32 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v32 + 32) = v36;
    *(_QWORD *)(v32 + 40) = v37;
    sub_221653B70();
    goto LABEL_20;
  }
  v38 = v146;
  if ((v14 & 1) == 0)
  {
    if ((v145 & 0x8000000000000000) == 0)
    {
      v39 = objc_msgSend(v13, sel_shape);
      v40 = sub_221653324();

      if (!(v40 >> 62))
      {
        v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_10;
      }
      goto LABEL_138;
    }
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_2216560E0;
    v149 = 0;
    v150 = 0xE000000000000000;
    sub_221653894();
    v152 = v149;
    v153 = v150;
    sub_221653210();
    v149 = v145;
    v150 = a6;
    v151 = a7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA190);
    sub_221653960();
    sub_221653210();
    v49 = objc_msgSend(v13, sel_shape);
    v50 = sub_221653324();

    MEMORY[0x22766E7BC](v50, v38);
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = v152;
    v52 = v153;
    *(_QWORD *)(v48 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v48 + 32) = v51;
    *(_QWORD *)(v48 + 40) = v52;
    sub_221653B70();
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  v54 = objc_msgSend(v13, sel_shape);
  v55 = sub_221653324();

  if (v55 >> 62)
  {
    swift_bridgeObjectRetain();
    v56 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  a6 = v56 != 2;
  if (v56 == 2)
    a7 = 1;
  else
    a7 = 2;
  if (v56 == 2)
    v57 = -1;
  else
    v57 = 0;
  v145 = v57;
LABEL_31:
  v58 = objc_msgSend(v13, sel_shape, v115);
  v14 = sub_221653324();

  if ((v14 & 0xC000000000000001) == 0)
  {
    if ((unint64_t)a6 < *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v59 = *(id *)(v14 + 8 * a6 + 32);
      goto LABEL_34;
    }
    __break(1u);
LABEL_125:
    v61 = (id)MEMORY[0x22766ED44](a7, v14);
    goto LABEL_37;
  }
  while (1)
  {
    v59 = (id)MEMORY[0x22766ED44](a6, v14);
LABEL_34:
    v38 = (uint64_t)v59;
    swift_bridgeObjectRelease();
    v120 = objc_msgSend((id)v38, sel_integerValue);

    v60 = objc_msgSend(v13, sel_shape);
    v14 = sub_221653324();

    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_125;
    if ((unint64_t)a7 < *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v61 = *(id *)(v14 + 8 * a7 + 32);
LABEL_37:
      v62 = v61;
      swift_bridgeObjectRelease();
      v132 = (uint64_t)objc_msgSend(v62, sel_integerValue);

      v63 = objc_msgSend(v13, sel_strides);
      v38 = v146;
      v14 = sub_221653324();

      if ((v14 & 0xC000000000000001) != 0)
        goto LABEL_127;
      if ((unint64_t)a6 < *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v64 = *(id *)(v14 + 8 * a6 + 32);
        goto LABEL_40;
      }
      __break(1u);
LABEL_129:
      v67 = (id)MEMORY[0x22766ED44](a7, a6);
LABEL_43:
      v68 = v67;
      swift_bridgeObjectRelease();
      v131 = (uint64_t)objc_msgSend(v68, sel_integerValue);

      v69 = objc_msgSend(v13, sel_shape);
      v70 = sub_221653324();

      if (!(v70 >> 62))
      {
        v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_45;
      }
      goto LABEL_131;
    }
    __break(1u);
LABEL_127:
    v64 = (id)MEMORY[0x22766ED44](a6, v14);
LABEL_40:
    v65 = v64;
    swift_bridgeObjectRelease();
    v117 = (uint64_t)objc_msgSend(v65, sel_integerValue);

    v66 = objc_msgSend(v13, sel_strides);
    a6 = sub_221653324();

    if ((a6 & 0xC000000000000001) != 0)
      goto LABEL_129;
    if ((unint64_t)a7 < *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v67 = *(id *)(a6 + 8 * a7 + 32);
      goto LABEL_43;
    }
    __break(1u);
LABEL_131:
    swift_bridgeObjectRetain();
    v71 = sub_2216539F0();
    swift_bridgeObjectRelease();
LABEL_45:
    a6 = (uint64_t)v120;
    swift_bridgeObjectRelease();
    if (v71 == 2)
    {
      a7 = 0;
      v116 = 0;
      v133 = 1;
      v38 = 1;
      goto LABEL_66;
    }
    v72 = objc_msgSend(v13, sel_shape);
    v73 = sub_221653324();

    if ((v73 & 0xC000000000000001) != 0)
    {
      v74 = (id)MEMORY[0x22766ED44](v145, v73);
    }
    else
    {
      if ((v145 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
      if (v145 >= *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_141;
      v74 = *(id *)(v73 + 8 * v145 + 32);
    }
    v75 = v74;
    swift_bridgeObjectRelease();
    v14 = (int64_t)objc_msgSend(v75, sel_integerValue);

    if ((v144 & 1) == 0)
      break;
    if ((unint64_t)(v14 - 3) >= 2)
    {
      if (v14 != 1)
      {
LABEL_110:
        __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
        v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_2216560E0;
        v149 = 0;
        v150 = 0xE000000000000000;
        sub_221653894();
        sub_221653210();
        v152 = v14;
LABEL_111:
        sub_221653ABC();
        sub_221653210();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      a7 = 0;
      v38 = 1;
      v133 = 1;
    }
    else
    {
      v38 = v14;
      a7 = 0;
      v133 = 4;
    }
LABEL_61:
    v76 = objc_msgSend(v13, sel_strides, v115);
    v73 = sub_221653324();

    if ((v73 & 0xC000000000000001) == 0)
    {
      a6 = (uint64_t)v120;
      if ((v145 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      if (v145 >= *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_144;
      v77 = *(id *)(v73 + 8 * v145 + 32);
      goto LABEL_65;
    }
LABEL_142:
    v77 = (id)MEMORY[0x22766ED44](v145, v73);
    a6 = (uint64_t)v120;
LABEL_65:
    swift_bridgeObjectRelease();
    v116 = (uint64_t)objc_msgSend(v77, sel_integerValue);

LABEL_66:
    v115 = v38;
    v78 = v132;
    v79 = a6 * v132;
    if ((unsigned __int128)(a6 * (__int128)v132) >> 64 != (a6 * v132) >> 63)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      swift_bridgeObjectRetain();
      v41 = sub_2216539F0();
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      if (v41 <= (uint64_t)v145 || a6 < 0)
        goto LABEL_19;
      v42 = objc_msgSend(v13, sel_shape);
      v43 = sub_221653324();

      if (!(v43 >> 62))
      {
        v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_14;
      }
LABEL_145:
      swift_bridgeObjectRetain();
      v44 = sub_2216539F0();
      swift_bridgeObjectRelease();
LABEL_14:
      swift_bridgeObjectRelease();
      if (v44 <= a6 || a7 < 0)
        goto LABEL_19;
      v45 = objc_msgSend(v13, sel_shape);
      v46 = sub_221653324();

      if (v46 >> 62)
      {
        swift_bridgeObjectRetain();
        v47 = sub_2216539F0();
        swift_bridgeObjectRelease();
      }
      else
      {
        v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v47 <= a7)
        goto LABEL_19;
      goto LABEL_31;
    }
    v14 = v79 * v133;
    if ((unsigned __int128)(v79 * (__int128)v133) >> 64 != (v79 * v133) >> 63)
      goto LABEL_134;
    if (v14 < 0)
      goto LABEL_135;
    if (v14)
    {
      v38 = sub_221653390();
      *(_QWORD *)(v38 + 16) = v14;
      memset((void *)(v38 + 32), 255, v14);
    }
    else
    {
      v38 = MEMORY[0x24BEE4AF8];
    }
    v80 = (char *)objc_msgSend(objc_retainAutorelease(v13), sel_dataPointer);
    v81 = a7 * v116;
    if ((unsigned __int128)(a7 * (__int128)v116) >> 64 != (a7 * v116) >> 63)
      goto LABEL_136;
    if (a6 < 0)
      goto LABEL_137;
    a7 = v17;
    v82 = 0;
    v130 = a18;
    v129 = *(_QWORD *)(v17 + 72);
    v128 = &v80[v129 * v81];
    v83 = a17 * 100.0;
    v123 = COERCE_UNSIGNED_INT64(a17 * 100.0) & 0x7FF0000000000000;
    v122 = (uint64_t)(a17 * 100.0);
    v125 = v38 + 32;
    v84 = v115;
    v126 = v28;
    v127 = v38;
    v124 = v17;
    v144 = a20;
    while (1)
    {
      v134 = v82;
      if (v82 == v84)
      {
        __break(1u);
        goto LABEL_122;
      }
      if (a6)
        break;
LABEL_75:
      v82 = v134 + 1;
      v84 = v115;
      if (v134 + 1 == v115)
        return v38;
    }
    if ((v78 & 0x8000000000000000) == 0)
    {
      v85 = 0;
      v118 = v134 * v116;
      v119 = (unsigned __int128)(v134 * (__int128)v116) >> 64 != (v134 * v116) >> 63;
      while (1)
      {
        if (v85 == a6)
          goto LABEL_115;
        v121 = v85;
        if (v78)
          break;
LABEL_80:
        v85 = v121 + 1;
        a6 = (uint64_t)v120;
        if ((id)(v121 + 1) == v120)
          goto LABEL_75;
      }
      if (v119)
        goto LABEL_116;
      v86 = v121 * v117;
      if ((unsigned __int128)(v121 * (__int128)v117) >> 64 == (v121 * v117) >> 63)
      {
        v143 = v118 + v86;
        if (!__OFADD__(v118, v86))
        {
          v142 = v121 * v78;
          if ((unsigned __int128)(v121 * (__int128)v78) >> 64 == (v121 * v78) >> 63)
          {
            v17 = 0;
            v87 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v144[4];
            v145 = v144[5];
            v14 = v144[7];
            v140 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v144[6];
            v141 = v87;
            v139 = (uint64_t (*)(uint64_t, uint64_t))v144[8];
            while (1)
            {
              v88 = v17 * v131;
              if ((unsigned __int128)(v17 * (__int128)v131) >> 64 != (v17 * v131) >> 63)
              {
                __break(1u);
LABEL_104:
                __break(1u);
LABEL_105:
                __break(1u);
LABEL_106:
                __break(1u);
LABEL_107:
                __break(1u);
LABEL_108:
                __break(1u);
LABEL_109:
                __break(1u);
                goto LABEL_110;
              }
              v89 = __OFADD__(v143, v88);
              v90 = v143 + v88;
              if (v89)
                goto LABEL_104;
              v146 = v17;
              (*(void (**)(char *, char *, uint64_t))(a7 + 16))(v28, &v128[v90 * v129], v148);
              a6 = (uint64_t)v144;
              if ((v130 & 1) == 0)
              {
                v91 = (char *)a7;
                a7 = (uint64_t)v147;
                v92 = v148;
                ((void (*)(uint64_t, uint64_t, _QWORD *))v14)(100, v148, v144);
                v93 = v28;
                v28 = v26;
                v94 = v93;
                ((void (*)(void))v145)();
                v26 = v91;
                v13 = (void *)*((_QWORD *)v91 + 1);
                ((void (*)(uint64_t, uint64_t))v13)(a7, v92);
                if (v123 == 0x7FF0000000000000)
                {
                  __break(1u);
LABEL_113:
                  __break(1u);
LABEL_114:
                  __break(1u);
LABEL_115:
                  __break(1u);
LABEL_116:
                  __break(1u);
                  goto LABEL_117;
                }
                if (v83 <= -9.22337204e18)
                  goto LABEL_113;
                if (v83 >= 9.22337204e18)
                  goto LABEL_114;
                v96 = v147;
                v95 = v148;
                ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v122, v148, a6);
                v97 = sub_221653144();
                ((void (*)(char *, uint64_t))v13)(v96, v95);
                ((void (*)(char *, uint64_t))v13)(v28, v95);
                a7 = (uint64_t)v26;
                v26 = v28;
                v28 = v94;
                if ((v97 & 1) != 0)
                {
                  v98 = v148;
                  ((void (*)(_QWORD, uint64_t, uint64_t))v14)(0, v148, a6);
                  ((void (*)(char *, uint64_t))v13)(v94, v98);
                  (*(void (**)(char *, char *, uint64_t))(a7 + 32))(v94, v26, v98);
                }
              }
              v99 = (uint64_t)v135;
              v100 = a7;
              v101 = v137;
              v102 = v148;
              v103 = v141;
              v141((uint64_t)v28, v137, v148, a6);
              v104 = v26;
              v105 = (uint64_t)v136;
              ((void (*)(uint64_t, uint64_t, uint64_t))v14)(255, v102, a6);
              v106 = (uint64_t)v147;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v145)(v99, v105, v102, a6);
              v13 = *(void **)(v100 + 8);
              ((void (*)(uint64_t, uint64_t))v13)(v105, v102);
              ((void (*)(uint64_t, uint64_t))v13)(v99, v102);
              v103(v138, v101, v102, a6);
              v140(v106, v99, v102, a6);
              ((void (*)(uint64_t, uint64_t))v13)(v99, v102);
              ((void (*)(uint64_t, uint64_t))v13)(v106, v102);
              ((void (*)(_QWORD, uint64_t, uint64_t))v14)(0, v102, a6);
              ((void (*)(uint64_t, uint64_t, uint64_t))v14)(255, v102, a6);
              v107 = v104;
              v108 = (uint64_t)v104;
              v109 = v102;
              clamp<A>(_:min:max:)(v108, v99, v105, v102, v106);
              ((void (*)(uint64_t, uint64_t))v13)(v105, v102);
              ((void (*)(uint64_t, uint64_t))v13)(v99, v102);
              v110 = v139(v102, a6);
              ((void (*)(uint64_t, uint64_t))v13)(v106, v109);
              v111 = v142 + v146;
              if (__OFADD__(v142, v146))
                goto LABEL_105;
              v112 = v111 * v133;
              if ((unsigned __int128)((uint64_t)v111 * (__int128)v133) >> 64 != (uint64_t)(v111 * v133) >> 63)
                goto LABEL_106;
              v89 = __OFADD__(v112, v134);
              v113 = v112 + v134;
              if (v89)
                goto LABEL_107;
              if ((v113 & 0x8000000000000000) != 0)
                goto LABEL_108;
              v38 = v127;
              if (v113 >= *(_QWORD *)(v127 + 16))
                goto LABEL_109;
              v17 = v146 + 1;
              *(_BYTE *)(v125 + v113) = v110;
              v26 = v107;
              v114 = v148;
              ((void (*)(char *, uint64_t))v13)(v107, v148);
              v28 = v126;
              ((void (*)(char *, uint64_t))v13)(v126, v114);
              v78 = v132;
              a7 = v124;
              if (v132 == v17)
                goto LABEL_80;
            }
          }
          goto LABEL_119;
        }
      }
      else
      {
LABEL_117:
        __break(1u);
      }
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
LABEL_122:
    __break(1u);
  }
  a7 = v143;
  if ((v143 & 0x8000000000000000) == 0 && v14 > v143)
  {
    v133 = 1;
    v38 = 1;
    goto LABEL_61;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_2216560E0;
  v149 = 0;
  v150 = 0xE000000000000000;
  sub_221653894();
  result = swift_bridgeObjectRelease();
  v149 = 0xD000000000000025;
  v150 = 0x800000022165D780;
  if (!__OFSUB__(v14, 1))
  {
    v152 = v14 - 1;
    goto LABEL_111;
  }
  __break(1u);
  return result;
}

CGImageRef_optional __swiftcall createCGImage(fromFloatArray:min:max:)(MLMultiArray fromFloatArray, Swift::Float min, Swift::Float max)
{
  char **p_attr;
  char **v4;
  uint64_t v7;
  char *v8;
  vImagePixelCount v9;
  int64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CGImageRef Image;
  CGColorSpace *DeviceRGB;
  CGContext *v27;
  CGContext *v28;
  float v30[4];
  float v31[4];
  vImage_Buffer dest;
  vImage_Buffer red;
  vImage_Buffer green;
  vImage_Buffer blue;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = objc_retainAutorelease(fromFloatArray.super.isa);
  v8 = (char *)objc_msgSend((id)v7, sel_dataPointer);
  v9 = (vImagePixelCount)objc_msgSend((id)v7, sel_shape);
  sub_2215D81F0();
  v10 = sub_221653324();

  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x22766ED44](1, v10);
  }
  else
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
      goto LABEL_31;
    }
    v11 = *(id *)(v10 + 40);
  }
  v12 = v11;
  swift_bridgeObjectRelease();
  p_attr = &stru_24E72FFF8.attr;
  v10 = (int64_t)objc_msgSend(v12, sel_integerValue);

  v13 = (uint64_t)objc_msgSend((id)v7, sel_shape);
  v9 = sub_221653324();

  if ((v9 & 0xC000000000000001) != 0)
  {
LABEL_31:
    v14 = (id)MEMORY[0x22766ED44](2, v9);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
  {
    __break(1u);
    goto LABEL_33;
  }
  v14 = *(id *)(v9 + 48);
LABEL_7:
  v15 = v14;
  swift_bridgeObjectRelease();
  v9 = (vImagePixelCount)objc_msgSend(v15, p_attr[186]);

  v4 = &stru_24E72FFF8.attr;
  v16 = objc_msgSend((id)v7, sel_strides);
  v13 = sub_221653324();

  if ((v13 & 0xC000000000000001) != 0)
  {
LABEL_33:
    v17 = (id)MEMORY[0x22766ED44](0, v13);
    goto LABEL_10;
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_35;
  }
  v17 = *(id *)(v13 + 32);
LABEL_10:
  v18 = v17;
  swift_bridgeObjectRelease();
  v13 = (uint64_t)objc_msgSend(v18, p_attr[186]);

  v19 = objc_msgSend((id)v7, v4[313]);
  v7 = sub_221653324();

  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_35:
    v20 = (id)MEMORY[0x22766ED44](1, v7);
    goto LABEL_13;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_37;
  }
  v20 = *(id *)(v7 + 40);
LABEL_13:
  v21 = v20;
  swift_bridgeObjectRelease();
  v22 = (unint64_t)objc_msgSend(v21, p_attr[186]);

  if ((v22 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (((v9 | v10) & 0x8000000000000000) != 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  blue.data = v8;
  blue.height = v10;
  blue.width = v9;
  blue.rowBytes = 4 * v22;
  green.data = &v8[4 * v13];
  green.height = v10;
  green.width = v9;
  green.rowBytes = 4 * v22;
  if (v13 + 0x4000000000000000 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  red.data = &v8[8 * v13];
  red.height = v10;
  red.width = v9;
  red.rowBytes = 4 * v22;
  if ((v9 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v23 = v10 * 4 * v9;
  if ((unsigned __int128)(v10 * (__int128)(uint64_t)(4 * v9)) >> 64 != v23 >> 63)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
  if (v23 < 0)
    goto LABEL_42;
  if (v23)
  {
    v24 = sub_221653390();
    *(_QWORD *)(v24 + 16) = v23;
    bzero((void *)(v24 + 32), v10 * 4 * v9);
  }
  else
  {
    v24 = MEMORY[0x24BEE4AF8];
  }
  dest.data = (void *)(v24 + 32);
  dest.height = v10;
  dest.width = v9;
  dest.rowBytes = 4 * v9;
  v31[0] = max;
  v31[1] = max;
  v31[2] = max;
  v30[0] = min;
  v30[1] = min;
  v30[2] = min;
  if (vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, v31, v30, 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v27 = CGBitmapContextCreate((void *)(v24 + 32), v9, v10, 8uLL, 4 * v9, DeviceRGB, 1u);
    if (v27)
    {
      v28 = v27;
      Image = CGBitmapContextCreateImage(v27);

    }
    else
    {
      Image = 0;
    }
    swift_bridgeObjectRelease();

  }
  return (CGImageRef_optional)Image;
}

UIImage_optional __swiftcall MLMultiArray.image(min:max:channel:axes:orientation:clip:)(Swift::Double min, Swift::Double max, Swift::Int_optional channel, Swift::tuple_Int_Int_Int_optional axes, UIImageOrientation orientation, Swift::Double_optional clip)
{
  unint64_t v7;
  Swift::Bool v8;
  void *v9;
  objc_class *v10;
  objc_class *v11;
  UIImage_optional result;

  v7 = sub_2215D7F84(channel.value, channel.is_nil, axes.value._0, axes.value._1, axes.value._2, axes.is_nil, min, max);
  if (v7)
  {
    v9 = (void *)v7;
    v10 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD640]), sel_initWithCGImage_scale_orientation_, v7, orientation, 1.0);

  }
  else
  {
    v10 = 0;
  }
  v11 = v10;
  result.value.super.isa = v11;
  result.is_nil = v8;
  return result;
}

UIImage_optional __swiftcall createUIImage(fromFloatArray:min:max:)(MLMultiArray fromFloatArray, Swift::Float min, Swift::Float max)
{
  CGImageRef_optional v3;
  Swift::Bool v4;
  CGImageRef value;
  objc_class *v6;
  objc_class *v7;
  UIImage_optional result;

  v3.value = createCGImage(fromFloatArray:min:max:)(fromFloatArray, min, max).value;
  if (v3.value)
  {
    value = v3.value;
    v6 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD640]), sel_initWithCGImage_, v3.value);

  }
  else
  {
    v6 = 0;
  }
  v7 = v6;
  result.value.super.isa = v7;
  result.is_nil = v4;
  return result;
}

char *sub_2215D6C00(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA200);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_2215D6CF8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA208);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA210);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D6E18(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA120);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D6F10(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D8F78);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D7008(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 48 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D7110(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_2215D7860(a1, a2, a3, a4, &qword_2556DA0D0);
}

char *sub_2215D711C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9610);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D7214(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_2215D730C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1A0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 176);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[22 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 176 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1A8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D7444(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1E0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D7544(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA198);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D763C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_2215D7734(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1D0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1D8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D7854(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_2215D7860(a1, a2, a3, a4, &qword_2556DA1C8);
}

char *sub_2215D7860(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_2215D7954(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1B8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1C0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D7A74(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA130);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2215D7B74(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1B0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 304);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[304 * v8])
      memmove(v12, v13, 304 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_2215D7C90(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t result;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  CGColorSpace *DeviceGray;
  CGContext *v16;
  CGContext *v17;
  CGImageRef Image;

  result = sub_2215D4850(a1, a2 & 1, a3, a4, a5, a6 & 1, 0, 1, a7, a8);
  if (!result)
    return 0;
  v12 = result;
  v13 = v9;
  v14 = v10;
  if (v11 == 1)
  {
    DeviceGray = CGColorSpaceCreateDeviceGray();
    v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, v13, DeviceGray, 0);
    if (v16)
    {
LABEL_4:
      v17 = v16;
      Image = CGBitmapContextCreateImage(v16);

LABEL_9:
      swift_bridgeObjectRelease();

      return (uint64_t)Image;
    }
LABEL_8:
    Image = 0;
    goto LABEL_9;
  }
  if ((v9 - 0x2000000000000000) >> 62 == 3)
  {
    DeviceGray = CGColorSpaceCreateDeviceRGB();
    v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, 4 * v13, DeviceGray, 1u);
    if (v16)
      goto LABEL_4;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215D7D88(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, float a7, float a8)
{
  uint64_t result;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  CGColorSpace *DeviceGray;
  CGContext *v16;
  CGContext *v17;
  CGImageRef Image;

  result = sub_2215D3B44(a1, a2 & 1, a3, a4, a5, a6 & 1, 0, 1, a7, a8);
  if (!result)
    return 0;
  v12 = result;
  v13 = v9;
  v14 = v10;
  if (v11 == 1)
  {
    DeviceGray = CGColorSpaceCreateDeviceGray();
    v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, v13, DeviceGray, 0);
    if (v16)
    {
LABEL_4:
      v17 = v16;
      Image = CGBitmapContextCreateImage(v16);

LABEL_9:
      swift_bridgeObjectRelease();

      return (uint64_t)Image;
    }
LABEL_8:
    Image = 0;
    goto LABEL_9;
  }
  if ((v9 - 0x2000000000000000) >> 62 == 3)
  {
    DeviceGray = CGColorSpaceCreateDeviceRGB();
    v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, 4 * v13, DeviceGray, 1u);
    if (v16)
      goto LABEL_4;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_2215D7E80(int a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unint64_t result;
  size_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  size_t v14;
  CGColorSpace *DeviceGray;
  CGContext *v16;
  CGContext *v17;
  CGImageRef Image;

  result = sub_2215D2E08(a1, a2, a3, a4 & 1, a5, a6, a7, a8 & 1, 0, 1);
  if (!result)
    return 0;
  v12 = result;
  v13 = v9;
  v14 = v10;
  if (v11 == 1)
  {
    DeviceGray = CGColorSpaceCreateDeviceGray();
    v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, v13, DeviceGray, 0);
    if (v16)
    {
LABEL_4:
      v17 = v16;
      Image = CGBitmapContextCreateImage(v16);

LABEL_9:
      swift_bridgeObjectRelease();

      return (unint64_t)Image;
    }
LABEL_8:
    Image = 0;
    goto LABEL_9;
  }
  if ((v9 - 0x2000000000000000) >> 62 == 3)
  {
    DeviceGray = CGColorSpaceCreateDeviceRGB();
    v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, 4 * v13, DeviceGray, 1u);
    if (v16)
      goto LABEL_4;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_2215D7F84(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  void *v8;
  void *v9;
  char v16;
  char v17;
  id v18;
  unint64_t result;
  float v20;
  float v21;

  v9 = v8;
  v16 = a2 & 1;
  v17 = a6 & 1;
  v18 = objc_msgSend(v9, sel_dataType);
  if (v18 == (id)65568)
  {
    v20 = a7;
    v21 = a8;
    return sub_2215D7D88(a1, v16, a3, a4, a5, v17, v20, v21);
  }
  if (v18 == (id)131104)
  {
    if (a7 <= -2147483650.0)
    {
      __break(1u);
    }
    else if (a7 < 2147483650.0)
    {
      if ((*(_QWORD *)&a7 & 0x7FF0000000000000) != 0x7FF0000000000000
        && (*(_QWORD *)&a8 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        if (a8 > -2147483650.0)
        {
          if (a8 < 2147483650.0)
            return sub_2215D7E80((int)a7, (int)a8, a1, v16, a3, a4, a5, v17);
          goto LABEL_17;
        }
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (v18 == (id)65600)
    return sub_2215D7C90(a1, v16, a3, a4, a5, v17, a7, a8);
LABEL_18:
  sub_221653894();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_dataType);
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  result = sub_221653984();
  __break(1u);
  return result;
}

unint64_t sub_2215D81F0()
{
  unint64_t result;

  result = qword_2556DA4E0;
  if (!qword_2556DA4E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2556DA4E0);
  }
  return result;
}

uint64_t EdgeType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2215D825C
                                                            + 4 * asc_221656620[a1]))(0x6666696C63, 0xE500000000000000);
}

uint64_t sub_2215D825C()
{
  return 1684828006;
}

uint64_t sub_2215D826C()
{
  return 0x72616E616C70;
}

uint64_t sub_2215D8280()
{
  return 30323;
}

uint64_t sub_2215D8298()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2215D82C4 + 4 * byte_221656624[*v0]))(0x6666696C63, 0xE500000000000000);
}

uint64_t sub_2215D82C4()
{
  return 1684828006;
}

uint64_t sub_2215D82D4()
{
  return 0x72616E616C70;
}

uint64_t sub_2215D82E8()
{
  return 30323;
}

double ConnectedSurface.backingPlane.getter(double a1, double a2)
{
  return a2;
}

uint64_t ConnectedSurface.endpointKnown.getter(char a1)
{
  return a1 & 1;
}

uint64_t ConnectedSurface.init(edgeOrthogonalSurfaceVector:endpointKnown:plane:)(char a1)
{
  return a1 & 1;
}

uint64_t EdgePlanesMetrics.bestPlaneType.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*EdgePlanesMetrics.bestPlaneType.modify())()
{
  return nullsub_1;
}

uint64_t EdgePlanesMetrics.otherPlaneType.getter(unsigned int a1)
{
  return a1 >> 8;
}

uint64_t EdgePlanesMetrics.otherPlaneType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*EdgePlanesMetrics.otherPlaneType.modify())()
{
  return nullsub_1;
}

uint64_t EdgePlanesMetrics.bestPlaneOrientation.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t EdgePlanesMetrics.bestPlaneOrientation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*EdgePlanesMetrics.bestPlaneOrientation.modify())()
{
  return nullsub_1;
}

uint64_t EdgePlanesMetrics.otherPlaneOrientation.getter(unsigned int a1)
{
  return HIBYTE(a1);
}

uint64_t EdgePlanesMetrics.otherPlaneOrientation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*EdgePlanesMetrics.otherPlaneOrientation.modify())()
{
  return nullsub_1;
}

void EdgePlanesMetrics.bestPlaneConfidence.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*EdgePlanesMetrics.bestPlaneConfidence.modify())()
{
  return nullsub_1;
}

float EdgePlanesMetrics.otherPlaneConfidence.getter(double a1, float a2)
{
  return a2;
}

void EdgePlanesMetrics.otherPlaneConfidence.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*EdgePlanesMetrics.otherPlaneConfidence.modify())()
{
  return nullsub_1;
}

uint64_t EdgePlanesMetrics.EdgePlaneOrientation.description.getter(char a1)
{
  if (!a1)
    return 0x746E6F7A69726F48;
  if (a1 == 1)
    return 0x6C61636974726556;
  return 0;
}

BOOL static EdgePlanesMetrics.EdgePlaneOrientation.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t EdgePlanesMetrics.EdgePlaneOrientation.hash(into:)()
{
  return sub_221653B94();
}

uint64_t _s17MeasureFoundation8EdgeTypeO9hashValueSivg_0()
{
  sub_221653B88();
  sub_221653B94();
  return sub_221653BAC();
}

MeasureFoundation::EdgePlanesMetrics __swiftcall EdgePlanesMetrics.init(bestPlaneType:otherPlaneType:bestPlaneOrientation:otherPlaneOrientation:bestPlaneConfidence:otherPlaneConfidence:)(MeasureFoundation::WorldPlaneType_optional bestPlaneType, MeasureFoundation::WorldPlaneType_optional otherPlaneType, MeasureFoundation::EdgePlanesMetrics::EdgePlaneOrientation bestPlaneOrientation, MeasureFoundation::EdgePlanesMetrics::EdgePlaneOrientation otherPlaneOrientation, Swift::Float bestPlaneConfidence, Swift::Float otherPlaneConfidence)
{
  int v6;
  MeasureFoundation::EdgePlanesMetrics result;

  v6 = bestPlaneType.value | (unsigned __int16)(otherPlaneType.value << 8) | (bestPlaneOrientation << 16) | (otherPlaneOrientation << 24);
  result.otherPlaneConfidence = otherPlaneConfidence;
  result.bestPlaneConfidence = bestPlaneConfidence;
  result.bestPlaneType = (MeasureFoundation::WorldPlaneType_optional)v6;
  result.otherPlaneType = (MeasureFoundation::WorldPlaneType_optional)SBYTE1(v6);
  result.bestPlaneOrientation = BYTE2(v6);
  result.otherPlaneOrientation = HIBYTE(v6);
  return result;
}

Swift::String __swiftcall EdgePlanesMetrics.metricDescriptionForBestPlaneType()()
{
  Swift::String result;

  __asm { BR              X12 }
  return result;
}

uint64_t sub_2215D84F4()
{
  swift_bridgeObjectRetain();
  sub_221653210();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x6465727265666E69;
}

Swift::String __swiftcall EdgePlanesMetrics.metricDescriptionForOtherPlaneType()()
{
  Swift::String result;

  __asm { BR              X12 }
  return result;
}

uint64_t sub_2215D8658()
{
  swift_bridgeObjectRetain();
  sub_221653210();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x6465727265666E69;
}

__n128 WorldEdge.transform.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_transform;
  swift_beginAccess();
  return *(__n128 *)v1;
}

__n128 WorldEdge.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  __n128 *v5;
  __n128 result;

  v5 = (__n128 *)(v4 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_transform);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  result = a4;
  v5[2] = a3;
  v5[3] = a4;
  return result;
}

uint64_t (*WorldEdge.transform.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.p1.getter()
{
  return sub_2215D88C4(&OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1);
}

uint64_t WorldEdge.p1.setter(uint64_t a1, uint64_t a2, char a3)
{
  return sub_2215D8914(a1, a2, a3, &OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1);
}

uint64_t (*WorldEdge.p1.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.p2.getter()
{
  return sub_2215D88C4(&OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2);
}

uint64_t sub_2215D88C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *a1;
  swift_beginAccess();
  return *(_QWORD *)v2;
}

uint64_t WorldEdge.p2.setter(uint64_t a1, uint64_t a2, char a3)
{
  return sub_2215D8914(a1, a2, a3, &OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2);
}

uint64_t sub_2215D8914(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;

  v8 = v4 + *a4;
  result = swift_beginAccess();
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*WorldEdge.p2.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.type.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_type);
  swift_beginAccess();
  return *v1;
}

uint64_t WorldEdge.type.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_type);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*WorldEdge.type.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float WorldEdge.typeConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_typeConfidence;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t WorldEdge.typeConfidence.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_typeConfidence);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*WorldEdge.typeConfidence.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.backingPlanes.getter()
{
  return sub_2215D8BC4();
}

uint64_t WorldEdge.backingPlanes.setter(uint64_t a1)
{
  return sub_2215D8C14(a1, &OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_backingPlanes);
}

uint64_t (*WorldEdge.backingPlanes.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.connectedSurfaces.getter()
{
  return sub_2215D8BC4();
}

uint64_t sub_2215D8BC4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t WorldEdge.connectedSurfaces.setter(uint64_t a1)
{
  return sub_2215D8C14(a1, &OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_connectedSurfaces);
}

uint64_t sub_2215D8C14(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*WorldEdge.connectedSurfaces.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.edgePlanesMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_edgePlanesMetrics;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t WorldEdge.edgePlanesMetrics.setter(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_edgePlanesMetrics;
  result = swift_beginAccess();
  *(_QWORD *)v5 = a1;
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*WorldEdge.edgePlanesMetrics.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float WorldEdge.adVariance.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_adVariance;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t WorldEdge.adVariance.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_adVariance);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*WorldEdge.adVariance.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id WorldEdge.__allocating_init(transform:p1:p2:type:adVariance:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, float a12)
{
  objc_class *v12;
  char v19;
  char v20;
  id v21;

  v19 = a3 & 1;
  v20 = a6 & 1;
  v21 = objc_allocWithZone(v12);
  return WorldEdge.init(transform:p1:p2:type:adVariance:)(a1, a2, v19, a4, a5, v20, a7, a8, a9, a10, a11, a12);
}

id WorldEdge.init(transform:p1:p2:type:adVariance:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, float a12)
{
  _BYTE *v12;
  char *v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  __n128 *v24;
  objc_class *ObjectType;
  objc_super v33;

  ObjectType = (objc_class *)swift_getObjectType();
  v19 = &v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 1;
  v20 = &v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v21 = &v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_type];
  v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_type] = 4;
  *(_DWORD *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_typeConfidence] = 0;
  v22 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_connectedSurfaces] = MEMORY[0x24BEE4AF8];
  v23 = &v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_edgePlanesMetrics];
  *(_QWORD *)v23 = 196608;
  *((_DWORD *)v23 + 2) = 0;
  v24 = (__n128 *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_transform];
  *v24 = a8;
  v24[1] = a9;
  v24[2] = a10;
  v24[3] = a11;
  swift_beginAccess();
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  v19[16] = a3 & 1;
  swift_beginAccess();
  *(_QWORD *)v20 = a4;
  *((_QWORD *)v20 + 1) = a5;
  v20[16] = a6 & 1;
  swift_beginAccess();
  *v21 = a7;
  *(_QWORD *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_backingPlanes] = v22;
  *(float *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_adVariance] = a12;
  v33.receiver = v12;
  v33.super_class = ObjectType;
  return objc_msgSendSuper2(&v33, sel_init);
}

double WorldEdge.projected(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  int64x2_t v10;
  int64x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int64x2_t v21;
  float32x4_t v22;
  char v23[144];
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28[60];
  char v29[144];
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34[60];

  v3 = v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1;
  swift_beginAccess();
  result = 0.0;
  if ((*(_BYTE *)(v3 + 16) & 1) == 0)
  {
    v7 = v3;
    v5 = *(_QWORD *)v3;
    v6 = *(_QWORD *)(v7 + 8);
    v8 = (float32x4_t *)(v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2);
    swift_beginAccess();
    if ((v8[1].i8[0] & 1) != 0)
    {
      return 0.0;
    }
    else
    {
      v9.i64[0] = v5;
      v9.i64[1] = v6;
      v20 = v9;
      v22 = *v8;
      sub_221622ADC(a1, (uint64_t)v23);
      v16 = v25;
      v18 = v24;
      v12 = v27;
      v14 = v26;
      sub_221622ADC(a1, (uint64_t)v28);
      *(float32x2_t *)v10.i8 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v20, v18, v16, v14, v12, v28[0]);
      v21 = v10;
      sub_221622ADC(a1, (uint64_t)v29);
      v17 = v31;
      v19 = v30;
      v13 = v33;
      v15 = v32;
      sub_221622ADC(a1, (uint64_t)v34);
      *(float32x2_t *)v11.i8 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v22, v19, v17, v15, v13, v34[0]);
      *(_QWORD *)&result = vzip1q_s64(v21, v11).u64[0];
    }
  }
  return result;
}

uint64_t WorldEdge.getClosestScreenSpacePoint(from:for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>)
{
  uint64_t v4;
  uint64_t v7;
  float64x2_t v8;
  uint64_t result;
  uint64_t v10;
  float v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float64x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x2_t v32;
  float32x4_t *v34;
  char v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v54;
  float32x2_t v56;
  char v57[144];
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62[60];
  char v63[144];
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x2_t v68[60];
  char v69[208];
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  double v74[60];

  v7 = v4 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1;
  swift_beginAccess();
  v8 = 0uLL;
  if ((*(_BYTE *)(v7 + 16) & 1) != 0)
  {
    result = 0;
    v10 = 0;
    v11 = 0.0;
    v12 = 1;
  }
  else
  {
    v14 = *(_QWORD *)v7;
    v13 = *(_QWORD *)(v7 + 8);
    v15 = (float32x4_t *)(v4 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2);
    swift_beginAccess();
    if ((v15[1].i8[0] & 1) != 0)
      goto LABEL_11;
    v16.i64[0] = v14;
    v16.i64[1] = v13;
    v48 = v16;
    v51 = *v15;
    sub_221622ADC(a1, (uint64_t)v57);
    v42 = v59;
    v45 = v58;
    v36 = v61;
    v39 = v60;
    sub_221622ADC(a1, (uint64_t)v62);
    *(float32x2_t *)v17.f32 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v48, v45, v42, v39, v36, v62[0]);
    v49 = v17;
    v18 = v17.f32[1];
    sub_221622ADC(a1, (uint64_t)v63);
    v43 = v65;
    v46 = v64;
    v37 = v67;
    v40 = v66;
    sub_221622ADC(a1, (uint64_t)v68);
    *(float32x2_t *)v19.f32 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v51, v46, v43, v40, v37, v68[0]);
    v20.f64[0] = a3;
    v20.f64[1] = a4;
    *(float32x2_t *)&v20.f64[0] = vcvt_f32_f64(v20);
    *(float32x2_t *)v21.f32 = vsub_f32(*(float32x2_t *)&v20.f64[0], *(float32x2_t *)v49.f32);
    v21.i32[2] = 0;
    v22 = vsubq_f32(v19, v49);
    v23 = vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
    v22.i32[2] = 0;
    v24 = vmlaq_f32(vmulq_f32(v22, (float32x4_t)xmmword_2216567C0), (float32x4_t)xmmword_221656010, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
    v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL);
    v26 = (int32x4_t)vmulq_f32(v24, v24);
    v26.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), *(float32x2_t *)v26.i8)).u32[0];
    v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
    v29 = vmulq_n_f32(v25, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]);
    v30 = vmulq_f32(v21, v29);
    LODWORD(v31) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u32[0];
    v56 = vsub_f32(*(float32x2_t *)&v20.f64[0], vmul_n_f32(*(float32x2_t *)v29.f32, v31));
    *(int32x2_t *)v30.f32 = vdup_lane_s32((int32x2_t)v23, 0);
    v30.f32[0] = (float)(v19.f32[0] - v56.f32[0]) * (float)(v19.f32[0] - v56.f32[0]);
    v23.f32[0] = (float)(v19.f32[1] - v56.f32[1]) * (float)(v19.f32[1] - v56.f32[1]);
    v32 = vadd_f32(*(float32x2_t *)v30.f32, v23);
    if ((float)((float)((float)(v49.f32[0] - v56.f32[0]) * (float)(v49.f32[0] - v56.f32[0]))
               + (float)((float)(v18 - v56.f32[1]) * (float)(v18 - v56.f32[1]))) >= v32.f32[1]
      || v32.f32[0] >= v32.f32[1])
    {
      goto LABEL_11;
    }
    v38 = v31;
    v34 = (float32x4_t *)(v4 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_transform);
    swift_beginAccess();
    v52 = v34[3];
    v54 = v34[1];
    sub_221622ADC(a1, (uint64_t)v69);
    v47 = v71;
    v50 = v70;
    v41 = v73;
    v44 = v72;
    sub_221622ADC(a1, (uint64_t)v74);
    result = sub_2215ECF18(*(double *)&v56, v54, v52, v50, v47, v44, v41, v74[0]);
    if ((v35 & 1) != 0)
    {
LABEL_11:
      result = 0;
      v10 = 0;
      v11 = 0.0;
      v12 = 1;
      v8 = 0uLL;
    }
    else
    {
      v12 = 0;
      v8 = vcvtq_f64_f32(v56);
      v11 = v38;
    }
  }
  *(float64x2_t *)a2 = v8;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = v10;
  *(float *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 36) = v12;
  return result;
}

id WorldEdge.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void WorldEdge.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_2215D9590()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id WorldEdge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_2215D962C()
{
  unint64_t result;

  result = qword_2556DA260;
  if (!qword_2556DA260)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for EdgeType, &type metadata for EdgeType);
    atomic_store(result, (unint64_t *)&qword_2556DA260);
  }
  return result;
}

unint64_t sub_2215D9674()
{
  unint64_t result;

  result = qword_2556DA268;
  if (!qword_2556DA268)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for EdgePlanesMetrics.EdgePlaneOrientation, &type metadata for EdgePlanesMetrics.EdgePlaneOrientation);
    atomic_store(result, (unint64_t *)&qword_2556DA268);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EdgeType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2215D9794 + 4 * byte_22165663D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2215D97C8 + 4 * byte_221656638[v4]))();
}

uint64_t sub_2215D97C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215D97D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2215D97D8);
  return result;
}

uint64_t sub_2215D97E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2215D97ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2215D97F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215D97F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EdgeType()
{
  return &type metadata for EdgeType;
}

__n128 __swift_memcpy49_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectedSurface(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectedSurface(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectedSurface()
{
  return &type metadata for ConnectedSurface;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EdgePlanesMetrics(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 2);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgePlanesMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 2) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgePlanesMetrics()
{
  return &type metadata for EdgePlanesMetrics;
}

uint64_t getEnumTagSinglePayload for EdgePlanesMetrics.EdgePlaneOrientation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgePlanesMetrics.EdgePlaneOrientation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2215D9A70 + 4 * byte_221656647[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2215D9AA4 + 4 * byte_221656642[v4]))();
}

uint64_t sub_2215D9AA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215D9AAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2215D9AB4);
  return result;
}

uint64_t sub_2215D9AC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2215D9AC8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2215D9ACC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215D9AD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EdgePlanesMetrics.EdgePlaneOrientation()
{
  return &type metadata for EdgePlanesMetrics.EdgePlaneOrientation;
}

uint64_t type metadata accessor for WorldEdge()
{
  return objc_opt_self();
}

__n128 WorldPerson.face.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face;
  swift_beginAccess();
  return *(__n128 *)v1;
}

unint64_t WorldPerson.height.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height);
  swift_beginAccess();
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t WorldPerson.timeSuggested.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested;
  swift_beginAccess();
  return sub_2215D9C14(v3, a1);
}

uint64_t sub_2215D9C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t WorldPerson.timeSuggested.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested;
  swift_beginAccess();
  sub_2215D9CB4(a1, v3);
  return swift_endAccess();
}

uint64_t sub_2215D9CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*WorldPerson.timeSuggested.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

char *WorldPerson.__allocating_init(_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  objc_class *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  __n128 *v9;
  char *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  char *v13;
  objc_super v19;

  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = &v5[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested];
  v8 = sub_221652F94();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (__n128 *)&v5[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face];
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  v19.receiver = v5;
  v19.super_class = v4;
  v10 = (char *)objc_msgSendSuper2(&v19, sel_init);
  v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state];
  v12 = *(os_unfair_lock_s **)(v11 + 24);
  v13 = v10;
  swift_retain();
  os_unfair_lock_lock(v12);
  swift_beginAccess();
  *(_QWORD *)(v11 + 16) = 0;
  os_unfair_lock_unlock(v12);

  swift_release();
  return v13;
}

char *WorldPerson.init(_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  __n128 *v8;
  char *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  char *v12;
  objc_super v18;

  v5 = &v4[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = &v4[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested];
  v7 = sub_221652F94();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (__n128 *)&v4[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face];
  *v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  v18.receiver = v4;
  v18.super_class = (Class)type metadata accessor for WorldPerson();
  v9 = (char *)objc_msgSendSuper2(&v18, sel_init);
  v10 = *(_QWORD *)&v9[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state];
  v11 = *(os_unfair_lock_s **)(v10 + 24);
  v12 = v9;
  swift_retain();
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = 0;
  os_unfair_lock_unlock(v11);

  swift_release();
  return v12;
}

id WorldPerson.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void WorldPerson.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_2215D9FDC()
{
  uint64_t v0;

  return sub_2215DA2C8(v0 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested);
}

id WorldPerson.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorldPerson();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for WorldPerson()
{
  uint64_t result;

  result = qword_2556DA2D0;
  if (!qword_2556DA2D0)
    return swift_getSingletonMetadata();
  return result;
}

__n128 sub_2215DA06C@<Q0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *a1 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face;
  swift_beginAccess();
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  v6 = *(_OWORD *)(v3 + 32);
  v7 = *(_OWORD *)(v3 + 48);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

__n128 sub_2215DA0C4(__n128 *a1, _QWORD *a2)
{
  __n128 *v2;
  __n128 result;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;

  v6 = a1[1];
  v7 = *a1;
  v4 = a1[3];
  v5 = a1[2];
  v2 = (__n128 *)(*a2 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face);
  swift_beginAccess();
  *v2 = v7;
  v2[1] = v6;
  result = v4;
  v2[2] = v5;
  v2[3] = v4;
  return result;
}

uint64_t sub_2215DA138@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 4);
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(_BYTE *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_2215DA190(int *a1, _QWORD *a2)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 4);
  v4 = *a2 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height;
  result = swift_beginAccess();
  *(_DWORD *)v4 = v2;
  *(_BYTE *)(v4 + 4) = v3;
  return result;
}

uint64_t sub_2215DA1EC()
{
  return type metadata accessor for WorldPerson();
}

void sub_2215DA1F4()
{
  unint64_t v0;

  sub_2215DA274();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_2215DA274()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2556DA2E0[0])
  {
    sub_221652F94();
    v0 = sub_221653714();
    if (!v1)
      atomic_store(v0, qword_2556DA2E0);
  }
}

uint64_t sub_2215DA2C8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t UncertainValue.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t UncertainValue.confidence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Clamped(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a2);
  return Clamped.wrappedValue.getter(v4, a3);
}

uint64_t UncertainValue.init(value:confidence:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v40 = a2;
  v41 = a6;
  v9 = *(_QWORD *)(a5 + 16);
  v35 = a5;
  v36 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 16);
  v37 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v32 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v33 = (char *)&v32 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v32 - v20;
  v22 = type metadata accessor for UncertainValue(0, a3, a4, a5);
  v34 = v41 + *(int *)(v22 + 44);
  sub_221653720();
  sub_221653720();
  swift_getAssociatedConformanceWitness();
  sub_221653B40();
  sub_221653AE0();
  v23 = (uint64_t)v33;
  sub_22165399C();
  v24 = *(void (**)(char *, uint64_t))(v38 + 8);
  v24(v14, a4);
  v24(v17, a4);
  Clamped.init(min:max:)((uint64_t)v21, v23, a4, v35, v34);
  v25 = v37;
  v26 = *(_QWORD *)(v37 - 8);
  v27 = v39;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v41, v39, v37);
  v29 = type metadata accessor for Clamped(0, *(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 32), v28);
  v30 = v40;
  sub_2215BEF4C(v40, v29);
  v24((char *)v30, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v27, v25);
}

uint64_t type metadata accessor for UncertainValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncertainValue);
}

uint64_t sub_2215DA5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for Clamped(0, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), a4);
  return sub_2215BEF4C(a1, v5);
}

uint64_t sub_2215DA63C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UncertainValue(0, *(_QWORD *)(a2 + a1 - 24), *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  return UncertainValue.confidence.getter(v4, v5, a3);
}

uint64_t sub_2215DA678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for UncertainValue(0, *(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return sub_2215DA5FC(a1, v5, v6, v7);
}

uint64_t sub_2215DA6B8()
{
  return 24;
}

__n128 sub_2215DA6C4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_2215DA6D8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    result = type metadata accessor for Clamped(319, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v3);
    if (v5 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2215DA764(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(unint64_t, unint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  void *v22;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v10 + v8;
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = v10 + 1;
  v13 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v13 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v12 + (v9 & ~v8) + ((v10 + v8 + ((v10 + v8) & ~v8)) & ~v8) > 0x18)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  else
  {
    v17 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v18 = ((unint64_t)a2 + v9) & v17;
    v19 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    v19(((unint64_t)v4 + v9) & v17, v18, v5);
    v20 = (v11 + (((unint64_t)v4 + v9) & v17)) & v17;
    v21 = (v11 + v18) & v17;
    v19(v20, v21, v5);
    v22 = (void *)((v11 + v20) & v17);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v11 + v21) & v17, 1, v5))
    {
      memcpy(v22, (const void *)((v11 + v21) & v17), v12);
    }
    else
    {
      v19((unint64_t)v22, (v11 + v21) & v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, v5);
    }
  }
  return v4;
}

uint64_t sub_2215DA8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void (*v14)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v14(v9, v6);
  v10 = *(_QWORD *)(v7 + 64) + v8;
  v11 = (v10 + v9) & ~v8;
  v14(v11, v6);
  v12 = (v10 + v11) & ~v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v12, v6);
  return result;
}

uint64_t sub_2215DA9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  void *v18;
  size_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = v14 + v9;
  v16 = (v14 + v9 + v11) & ~v9;
  v17 = (v14 + v9 + v12) & ~v9;
  v13(v16, v17, v7);
  v18 = (void *)((v14 + v9 + v16) & ~v9);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v8 + 48))((v14 + v9 + v17) & ~v9, 1, v7))
  {
    if (*(_DWORD *)(v8 + 84))
      v19 = v14;
    else
      v19 = v14 + 1;
    memcpy(v18, (const void *)((v15 + v17) & ~v9), v19);
  }
  else
  {
    v13((uint64_t)v18, (v15 + v17) & ~v9, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_2215DAAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  size_t v14;
  size_t v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  size_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (void *)((v14 + v9 + v15) & ~v9);
  v18 = (void *)((v14 + v9 + v16) & ~v9);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v16) = v19(v17, 1, v7);
  v20 = v19(v18, 1, v7);
  if ((_DWORD)v16)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v17, v18, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
      return a1;
    }
  }
  else
  {
    if (!v20)
    {
      v13((uint64_t)v17, (uint64_t)v18, v7);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v17, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v21 = v14;
  else
    v21 = v14 + 1;
  memcpy(v17, v18, v21);
  return a1;
}

uint64_t sub_2215DAC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  void *v18;
  size_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = v14 + v9;
  v16 = (v14 + v9 + v11) & ~v9;
  v17 = (v14 + v9 + v12) & ~v9;
  v13(v16, v17, v7);
  v18 = (void *)((v14 + v9 + v16) & ~v9);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v8 + 48))((v14 + v9 + v17) & ~v9, 1, v7))
  {
    if (*(_DWORD *)(v8 + 84))
      v19 = v14;
    else
      v19 = v14 + 1;
    memcpy(v18, (const void *)((v15 + v17) & ~v9), v19);
  }
  else
  {
    v13((uint64_t)v18, (v15 + v17) & ~v9, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_2215DAD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  size_t v14;
  size_t v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  size_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v13(v11, v12, v7);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (v14 + v9 + v11) & ~v9;
  v16 = (v14 + v9 + v12) & ~v9;
  v13(v15, v16, v7);
  v17 = (void *)((v14 + v9 + v15) & ~v9);
  v18 = (void *)((v14 + v9 + v16) & ~v9);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v16) = v19(v17, 1, v7);
  v20 = v19(v18, 1, v7);
  if ((_DWORD)v16)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v17, v18, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
      return a1;
    }
  }
  else
  {
    if (!v20)
    {
      v13((uint64_t)v17, (uint64_t)v18, v7);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v17, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v21 = v14;
  else
    v21 = v14 + 1;
  memcpy(v17, v18, v21);
  return a1;
}

uint64_t sub_2215DAEE4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  if (v7)
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = v9 + 1;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_26;
  v14 = v10 + (v12 & ~v11) + ((v9 + v11 + ((v9 + v11) & ~v11)) & ~v11);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_26:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v12 + a1) & ~v11);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_26;
LABEL_17:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if (!(_DWORD)v14)
    return v8 + v18 + 1;
  if (v14 <= 3)
    v19 = v14;
  else
    v19 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2215DAFDC + 4 * byte_221656820[v19 - 1]))();
}

void sub_2215DB058(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= *(_DWORD *)(v6 + 84))
    v9 = *(_DWORD *)(v6 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (v11 + v10 + ((v11 + v10) & ~v10)) & ~v10;
  if (!v8)
    ++v11;
  v13 = v11 + v12 + ((*(_QWORD *)(v6 + 64) + v10) & ~v10);
  v14 = a3 >= v9;
  v15 = a3 - v9;
  if (v15 != 0 && v14)
  {
    if (v13 <= 3)
    {
      v18 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v18))
      {
        v16 = 4u;
      }
      else if (v18 >= 0x100)
      {
        v16 = 2;
      }
      else
      {
        v16 = v18 > 1;
      }
    }
    else
    {
      v16 = 1u;
    }
  }
  else
  {
    v16 = 0;
  }
  if (v9 < a2)
  {
    v17 = ~v9 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *a1 = v19;
          *((_BYTE *)a1 + 2) = BYTE2(v19);
        }
        else if ((_DWORD)v13 == 2)
        {
          *a1 = v19;
        }
        else
        {
          *(_BYTE *)a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void sub_2215DB2D4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x2215DB2C0);
}

void sub_2215DB2E4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x2215DB2C0);
}

void sub_2215DB2EC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x2215DB2C0);
}

void Synchronized.wrappedValue.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(*v1 + 96)));
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(*v1 + 96)));
}

uint64_t Synchronized.wrappedValue.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_2215DB658(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void (*Synchronized.wrappedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  Synchronized.wrappedValue.getter((uint64_t)v7);
  return sub_2215DB438;
}

void sub_2215DB438(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    sub_2215DB658((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_2215DB658(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Synchronized.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  v5 = (_DWORD *)swift_slowAlloc();
  *v5 = 0;
  *(_QWORD *)(v2 + v4) = v5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  return v2;
}

uint64_t *Synchronized.init(wrappedValue:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = (_DWORD *)swift_slowAlloc();
  *v5 = 0;
  *(uint64_t *)((char *)v1 + v4) = (uint64_t)v5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 88), a1);
  return v1;
}

uint64_t *Synchronized.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x22766FAF4](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 96)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 88));
  return v0;
}

uint64_t Synchronized.__deallocating_deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  MEMORY[0x22766FAF4](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 96)), -1, -1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 88));
  return swift_deallocClassInstance();
}

void sub_2215DB658(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(*v1 + 96)));
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 24))(v4, a1);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(_QWORD *)(*v1 + 96)));
}

uint64_t sub_2215DB6E8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Synchronized(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Synchronized);
}

uint64_t OverlayMetalView.scene.getter()
{
  swift_beginAccess();
  return swift_retain();
}

id sub_2215DB7DC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  objc_class *ObjectType;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_blendingEnabled] = 0;
  swift_weakInit();
  swift_weakInit();
  *(_QWORD *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_demoModes] = 7;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer] = 0;
  if (a1)
  {
    v12 = a1;
  }
  else
  {
    if (qword_2556D8D88 != -1)
      swift_once();
    v12 = static MetalBundle.device;
    swift_unknownObjectRetain();
  }
  v17.receiver = v5;
  v17.super_class = ObjectType;
  swift_unknownObjectRetain();
  v13 = objc_msgSendSuper2(&v17, sel_initWithFrame_device_, v12, a2, a3, a4, a5);
  swift_unknownObjectRelease();
  v14 = v13;
  objc_msgSend(v14, sel_setOpaque_, 0, v17.receiver, v17.super_class);
  v15 = v14;
  objc_msgSend(v15, sel_setUserInteractionEnabled_, 0);

  swift_unknownObjectRelease();
  return v15;
}

void OverlayMetalView.populateScene(depthProcessor:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id *v4;
  uint64_t v5;
  void *v6;
  char **v7;
  id v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t KeyPath;
  uint64_t v23;
  void *v24;

  v2 = v1;
  v4 = (id *)&v2[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
  swift_beginAccess();
  if (*v4)
  {
    sub_221653984();
    __break(1u);
  }
  else
  {
    objc_msgSend(v2, sel_setFrame_, *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
    swift_weakAssign();
    swift_beginAccess();
    swift_weakAssign();
    swift_beginAccess();
    v5 = *(_QWORD *)(a1 + 240);
    v6 = (void *)objc_opt_self();
    v7 = &selRef_clearColor;
    if ((v5 & 0x80) != 0)
      v7 = &selRef_blackColor;
    v8 = objc_msgSend(v6, *v7);
    objc_msgSend(v2, sel_setBackgroundColor_, v8);

    objc_msgSend(v2, sel_setDepthStencilPixelFormat_, 252);
    type metadata accessor for OverlayMetalScene();
    swift_allocObject();
    v9 = v2;
    swift_retain();
    *v4 = sub_2215F2B20(v9, a1);
    swift_release();
    v10 = *v4;
    if (*v4)
    {
      swift_beginAccess();
      v11 = v10[2];
      swift_beginAccess();
      v12 = *(_QWORD *)(v11 + 24);
      if (v12 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        v13 = sub_2216539F0();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v14 = v13 < 1;
    }
    else
    {
      v14 = 1;
    }
    objc_msgSend(v9, sel_setHidden_, v14);
    objc_msgSend(v9, sel_setDelegate_, v9);
    if (qword_2556D8E38 != -1)
      swift_once();
    v15 = qword_2556E44F8;
    v16 = *(_QWORD *)(qword_2556E44F8 + 16);
    if (v16)
    {
      v17 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v18 = v15 + 40;
      do
      {
        swift_bridgeObjectRetain();
        v19 = objc_msgSend(v17, sel_standardUserDefaults);
        v20 = (void *)sub_22165318C();
        swift_bridgeObjectRelease();
        objc_msgSend(v19, sel_addObserver_forKeyPath_options_context_, v9, v20, 1, 0);

        v18 += 16;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    v21 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    KeyPath = swift_getKeyPath();
    v23 = swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_2215DDC80(0, &qword_2556DA408);
    v24 = (void *)sub_22165366C();
    if (qword_2556D8F60 != -1)
      swift_once();
    sub_2215DCC98(KeyPath, v24, v21, (uint64_t)sub_2215DCC90, v23);

    swift_release();
    swift_release();

  }
}

id sub_2215DBE1C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_kADDemoEnabled);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2215DBE4C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setKADDemoEnabled_, *a1);
}

void sub_2215DBE60(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess();
  v4 = (char *)MEMORY[0x22766FB84](v3);
  if (v4)
  {
    v5 = v4;
    v6 = (char *)objc_msgSend(v4, sel_superview);
    if (!v6)
    {
      v7 = v5;
LABEL_11:

      return;
    }
    v7 = v6;
    if (v2)
    {
      v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD9B0]), sel_initWithTarget_action_, v5, sel_didSwipeWithSender_);
      objc_msgSend(v8, sel_setNumberOfTouchesRequired_, 2);
      objc_msgSend(v8, sel_setDirection_, 4);
      v9 = *(void **)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer];
      *(_QWORD *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer] = v8;
      v10 = v8;

      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD9B0]), sel_initWithTarget_action_, v5, sel_didSwipeWithSender_);
      objc_msgSend(v11, sel_setNumberOfTouchesRequired_, 2);
      objc_msgSend(v11, sel_setDirection_, 8);
      v12 = *(void **)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer];
      *(_QWORD *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer] = v11;
      v13 = v11;

      objc_msgSend(v7, sel_addGestureRecognizer_, v10);
      objc_msgSend(v7, sel_addGestureRecognizer_, v13);
    }
    else
    {
      v14 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer;
      v15 = *(void **)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer];
      if (!v15)
        goto LABEL_10;
      v16 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer;
      v17 = *(void **)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer];
      if (!v17)
        goto LABEL_10;
      v10 = v15;
      v13 = v17;
      objc_msgSend(v7, sel_removeGestureRecognizer_, v10);
      objc_msgSend(v7, sel_removeGestureRecognizer_, v13);
      v18 = *(void **)&v5[v16];
      *(_QWORD *)&v5[v16] = 0;

      v19 = *(void **)&v5[v14];
      *(_QWORD *)&v5[v14] = 0;

      sub_2215DD32C();
    }

LABEL_10:
    goto LABEL_11;
  }
}

Swift::Void __swiftcall OverlayMetalView.didUpdate(frame:)(ARFrame frame)
{
  char *v1;
  char *v2;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  objc_class *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  objc_super v37;

  v2 = v1;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = Strong;
    if (!swift_weakLoadStrong())
    {
      swift_release();
      return;
    }
    v6 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow;
    if (!*(_QWORD *)&v1[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow])
    {
      swift_beginAccess();
      if ((*(_BYTE *)(v5 + 240) & 0x40) != 0)
      {
        v7 = ADProcessor.transformer.getter();
        v8 = *(_QWORD *)(v7 + 1040);
        v9 = *(_QWORD *)(v7 + 1048);
        swift_release();
        objc_msgSend(v1, sel_bounds);
        v11 = v10;
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v18 = (objc_class *)type metadata accessor for Viewport();
        v19 = (char *)objc_allocWithZone(v18);
        v20 = OBJC_IVAR____TtC17MeasureFoundation8Viewport_portView;
        v21 = v19;
        *(_QWORD *)&v19[v20] = _s17MeasureFoundation8ViewportC8portView33_7C22ACC4716B0FDE2A507783D80F08CBLLSo6UIViewCvpfi_0();
        v22 = &v21[OBJC_IVAR____TtC17MeasureFoundation8Viewport_portSize];
        *(_QWORD *)v22 = v8;
        *((_QWORD *)v22 + 1) = v9;

        v37.receiver = v21;
        v37.super_class = v18;
        v23 = objc_msgSendSuper2(&v37, sel_initWithFrame_, v11, v13, v15, v17);
        sub_2215C66AC();

        v24 = *(void **)&v2[v6];
        *(_QWORD *)&v2[v6] = v23;

        v25 = objc_msgSend(v2, sel_superview);
        if (v25)
        {
          if (!*(_QWORD *)&v2[v6])
          {
            __break(1u);
            return;
          }
          v26 = v25;
          objc_msgSend(v25, sel_addSubview_);

        }
      }
    }
    v27 = &v2[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
    swift_beginAccess();
    v28 = *(_QWORD *)v27;
    if (*(_QWORD *)v27)
    {
      swift_beginAccess();
      v29 = *(_QWORD *)(v28 + 16);
      swift_beginAccess();
      v30 = *(_QWORD *)(v29 + 24);
      if (v30 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        v31 = sub_2216539F0();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v32 = v31 < 1;
    }
    else
    {
      v32 = 1;
    }
    objc_msgSend(v2, sel_setHidden_, v32);
    v33 = *(_QWORD *)v27;
    if (!*(_QWORD *)v27)
      goto LABEL_19;
    swift_beginAccess();
    v34 = *(_QWORD *)(v33 + 16);
    swift_beginAccess();
    v35 = *(_QWORD *)(v34 + 24);
    if (v35 >> 62)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v36 = sub_2216539F0();
      swift_bridgeObjectRelease();
      swift_release();
      if (v36 > 0)
      {
LABEL_17:
        if (*(_QWORD *)v27)
        {
          swift_retain();
          sub_2215F20D4(frame.super.isa);
          swift_release();
        }
      }
    }
    else if (*(uint64_t *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10) > 0)
    {
      goto LABEL_17;
    }
LABEL_19:
    swift_release();
    swift_release();
  }
}

id OverlayMetalView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall OverlayMetalView.draw(in:)(MTKView *in)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    v5 = *(_QWORD *)(v4 + 16);
    swift_beginAccess();
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 >> 62)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v17 = sub_2216539F0();
      swift_bridgeObjectRelease();
      swift_release();
      if (v17 < 1)
        return;
    }
    else if (*(uint64_t *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
    {
      return;
    }
    v7 = -[MTKView superview](in, sel_superview);
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v7, sel_frame);
      v10 = v9;
      v12 = v11;
      v14 = v13;
      v16 = v15;

      -[MTKView setFrame:](in, sel_setFrame_, v10, v12, v14, v16);
    }
    if (*v3)
    {
      swift_retain();
      sub_22160FFDC();
      swift_release();
    }
  }
}

void sub_2215DC640(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;

  if (objc_msgSend(a1, sel_state) == (id)3)
  {
    v3 = objc_msgSend(a1, sel_direction);
    if (v3 == (id)8)
    {
      v4 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode;
      v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode);
      v10 = v9 - 1;
      v11 = v9 <= 0;
      v8 = 6;
      if (!v11)
        v8 = v10;
    }
    else
    {
      if (v3 != (id)4)
        return;
      v4 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode;
      v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode);
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
        JUMPOUT(0x2215DC9D8);
      }
      v8 = v7 % 7;
    }
    *(_QWORD *)(v1 + v4) = v8;
    sub_2215DD32C();
    switch(*(_QWORD *)(v1 + OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode))
    {
      case 1:
      case 3:
      case 4:
      case 6:
        v15 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
        goto LABEL_12;
      case 2:
      case 5:
        v12 = (void *)objc_opt_self();
        v13 = objc_msgSend(v12, sel_standardUserDefaults);
        v14 = (void *)sub_22165318C();
        objc_msgSend(v13, sel_setBool_forKey_, 1, v14);

        v15 = objc_msgSend(v12, sel_standardUserDefaults);
LABEL_12:
        v16 = (id)sub_22165318C();
        objc_msgSend(v15, sel_setBool_forKey_, 1);

        break;
      default:
        return;
    }
  }
}

id sub_2215DCA48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v7 = (void *)sub_22165318C();
  v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  v9 = *a1;
  v10 = *a1 & a4;
  if ((_DWORD)v8)
  {
    if (v10 != a4)
    {
      v11 = v9 | a4;
LABEL_6:
      *a1 = v11;
    }
  }
  else if (v10)
  {
    v11 = v9 & ~a4;
    goto LABEL_6;
  }
  return v8;
}

char *keypath_get_selector_kADDemoEnabled()
{
  return sel_kADDemoEnabled;
}

id sub_2215DCC28@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_kADDemoEnabled);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2215DCC58(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setKADDemoEnabled_, *a1);
}

uint64_t sub_2215DCC6C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_2215DCC90(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_2215DBE60(a1, v1);
}

uint64_t sub_2215DCC98(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  id v30;
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33;
  uint64_t v34;

  v6 = v5;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a4;
  v11[4] = a5;
  swift_retain();
  v12 = a2;
  result = sub_221653774();
  if (v14)
  {
    v15 = result;
    v16 = v14;
    v31 = (uint64_t)v12;
    v17 = (uint64_t *)(v6 + OBJC_IVAR____TtCE17MeasureFoundationCSo14NSUserDefaults14_DefaultsStore_actions);
    swift_beginAccess();
    v18 = *v17;
    if (*(_QWORD *)(*v17 + 16) && (v19 = sub_2215CA39C(v15, v16), (v20 & 1) != 0))
    {
      v21 = *(_QWORD **)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_endAccess();
      v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = sub_2215DDB88;
    *(_QWORD *)(v22 + 24) = v11;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = sub_2215D6CF8(0, v21[2] + 1, 1, v21);
    v24 = v21[2];
    v23 = v21[3];
    if (v24 >= v23 >> 1)
      v21 = sub_2215D6CF8((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
    v21[2] = v24 + 1;
    v25 = &v21[2 * v24];
    v25[4] = sub_2215DDBB8;
    v25[5] = v22;
    result = sub_221653774();
    if (v26)
    {
      v27 = result;
      v28 = v26;
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = *v17;
      *v17 = 0x8000000000000000;
      sub_22161C08C((uint64_t)v21, v27, v28, isUniquelyReferenced_nonNull_native);
      *v17 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      v34 = (uint64_t)a3;
      v33 = MEMORY[0x24BEE1328];
      v30 = a3;
      swift_getAtKeyPath();

      sub_2215DCF24((uint64_t)v32, v31, a4, a5);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2215DCF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  _QWORD aBlock[6];
  _OWORD v21[2];

  v19[0] = a2;
  v7 = sub_221653030();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_221653048();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2215D1ADC(a1, (uint64_t)v21);
  v16 = swift_allocObject();
  sub_2215C39AC(v21, (_OWORD *)(v16 + 16));
  *(_QWORD *)(v16 + 48) = a3;
  *(_QWORD *)(v16 + 56) = a4;
  aBlock[4] = sub_2215DDBEC;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2215BFCE8;
  aBlock[3] = &block_descriptor_0;
  v17 = _Block_copy(aBlock);
  swift_retain();
  sub_22165303C();
  v19[1] = MEMORY[0x24BEE4AF8];
  sub_2215BB99C(&qword_2556DA4C8, v8, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA4D0);
  sub_2215DDC10();
  sub_2216537A4();
  MEMORY[0x22766EB04](0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_2215DD118(_QWORD *a1, uint64_t (*a2)(id *))
{
  unsigned __int8 v4;
  id *v5;
  unsigned __int8 v7;
  id v8;
  _BYTE v9[32];

  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  swift_getDynamicType();
  sub_2215DDC80(0, (unint64_t *)&qword_2556DA4E0);
  if (swift_dynamicCastMetatype() || (sub_2215DDC80(0, &qword_2556DA4E8), swift_dynamicCastMetatype()))
  {
    sub_2215D1ADC((uint64_t)a1, (uint64_t)v9);
    swift_dynamicCast();
    v4 = objc_msgSend(v8, sel_BOOLValue);

    v7 = v4;
    v5 = (id *)&v7;
  }
  else
  {
    sub_2215D1ADC((uint64_t)a1, (uint64_t)v9);
    swift_dynamicCast();
    v5 = &v8;
  }
  return a2(v5);
}

void sub_2215DD250()
{
  _BYTE *v0;

  v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_blendingEnabled] = 0;
  swift_weakInit();
  swift_weakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_demoModes] = 7;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer] = 0;

  sub_221653984();
  __break(1u);
}

void sub_2215DD32C()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_standardUserDefaults);
  v2 = (void *)sub_22165318C();
  objc_msgSend(v1, sel_setBool_forKey_, 0, v2);

  v3 = objc_msgSend(v0, sel_standardUserDefaults);
  v4 = (void *)sub_22165318C();
  objc_msgSend(v3, sel_setBool_forKey_, 0, v4);

  v5 = objc_msgSend(v0, sel_standardUserDefaults);
  v6 = (void *)sub_22165318C();
  objc_msgSend(v5, sel_setBool_forKey_, 0, v6);

  v7 = objc_msgSend(v0, sel_standardUserDefaults);
  v8 = (void *)sub_22165318C();
  objc_msgSend(v7, sel_setBool_forKey_, 0, v8);

  v9 = objc_msgSend(v0, sel_standardUserDefaults);
  v10 = (void *)sub_22165318C();
  objc_msgSend(v9, sel_setBool_forKey_, 0, v10);

  v11 = objc_msgSend(v0, sel_standardUserDefaults);
  v12 = (void *)sub_22165318C();
  objc_msgSend(v11, sel_setBool_forKey_, 0, v12);

  v13 = objc_msgSend(v0, sel_standardUserDefaults);
  v14 = (void *)sub_22165318C();
  objc_msgSend(v13, sel_setBool_forKey_, 0, v14);

  v15 = objc_msgSend(v0, sel_standardUserDefaults);
  v16 = (id)sub_22165318C();
  objc_msgSend(v15, sel_setBool_forKey_, 0, v16);

}

uint64_t _s17MeasureFoundation16OverlayMetalViewC12observeValue10forKeyPath2of6change7contextySSSg_ypSgSDySo05NSKeyg6ChangeI0aypGSgSvSgtF_0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t result;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  void *v23;
  void *v24;
  char **v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;

  v3 = v2;
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v7 = result;
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return swift_release();
  v9 = Strong;
  if (!a2)
    goto LABEL_12;
  if (qword_2556D8E30 != -1)
    swift_once();
  v10 = qword_2556E44F0;
  if (!*(_QWORD *)(qword_2556E44F0 + 16))
  {
LABEL_12:
    swift_release();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  v11 = sub_2215CA39C(a1, a2);
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v14 = sub_2215DCA48((uint64_t *)(v7 + 240), a1, a2, v13);
    swift_endAccess();
    if (v13 > 63)
    {
      switch(v13)
      {
        case 64:
          v23 = *(void **)&v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow];
          if (v23)
            objc_msgSend(v23, sel_setHidden_, (v14 & 1) == 0);
          break;
        case 128:
          v24 = (void *)objc_opt_self();
          v25 = &selRef_blackColor;
          if ((v14 & 1) == 0)
            v25 = &selRef_clearColor;
          v26 = objc_msgSend(v24, *v25);
          objc_msgSend(v3, sel_setBackgroundColor_, v26);

          break;
        case 4096:
          swift_beginAccess();
          *(_BYTE *)(v9 + 242) = v14 & 1;
          break;
      }
    }
    else
    {
      switch(v13)
      {
        case 2:
          v19 = &v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
          swift_beginAccess();
          if (*(_QWORD *)v19)
          {
            swift_retain();
            v20 = (uint64_t)sub_2215F2930();
            goto LABEL_23;
          }
          break;
        case 4:
          v21 = &v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
          swift_beginAccess();
          if (*(_QWORD *)v21)
          {
            swift_retain();
            v20 = sub_2215F2874();
LABEL_23:
            v22 = (_BYTE *)v20;
            swift_release();
            swift_beginAccess();
            v22[32] = v14 & 1;
            swift_beginAccess();
            v22[33] = v14 & 1;
            swift_beginAccess();
            v22[34] = v14 & 1;
            swift_release();
          }
          break;
        case 8:
        case 16:
          v15 = *(_QWORD *)(v7 + 240);
          v16 = &v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
          swift_beginAccess();
          if (*(_QWORD *)v16)
          {
            swift_retain();
            v17 = sub_2215F29EC();
            swift_release();
            v18 = (v15 & 0x18) != 0;
            swift_beginAccess();
            v17[32] = v18;
            swift_beginAccess();
            v17[33] = v18;
            swift_beginAccess();
            v17[34] = v18;
            swift_release();
          }
          break;
        default:
          break;
      }
    }
    v27 = &v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
    swift_beginAccess();
    v28 = *(_QWORD *)v27;
    if (v28)
    {
      swift_beginAccess();
      v29 = *(_QWORD *)(v28 + 16);
      swift_beginAccess();
      v30 = *(_QWORD *)(v29 + 24);
      if (v30 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        v31 = sub_2216539F0();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v32 = v31 < 1;
    }
    else
    {
      v32 = 1;
    }
    objc_msgSend(v3, sel_setHidden_, v32);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for OverlayMetalView()
{
  return objc_opt_self();
}

uint64_t sub_2215DDB1C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA090);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2215DDB5C()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2215DDB88(uint64_t a1)
{
  uint64_t *v1;

  return sub_2215DCF24(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_2215DDB94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2215DDBB8(uint64_t a1)
{
  uint64_t v1;

  return sub_22164BEC4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_2215DDBC0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2215DDBEC()
{
  uint64_t v0;

  return sub_2215DD118((_QWORD *)(v0 + 16), *(uint64_t (**)(id *))(v0 + 48));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t sub_2215DDC10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2556DA4D8;
  if (!qword_2556DA4D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2556DA4D0);
    result = MEMORY[0x22766FA4C](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2556DA4D8);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_2215DDC80(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

int32x2_t SIMD4<>.xz.getter(int8x16_t a1)
{
  return vzip1_s32(*(int32x2_t *)a1.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL));
}

uint64_t SIMD4<>.rgba.getter(float32x4_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t result;

  v1 = 255.0 * a1.f32[0];
  if ((float)(255.0 * a1.f32[0]) <= -1.0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v1 >= 4295000000.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = vmuls_lane_f32(255.0, *(float32x2_t *)a1.f32, 1);
  if (v2 <= -1.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v2 >= 4295000000.0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3 = vmuls_lane_f32(255.0, a1, 2);
  if (v3 <= -1.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v3 >= 4295000000.0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v4 = vmuls_lane_f32(255.0, a1, 3);
  if ((~LODWORD(v4) & 0x7F800000) == 0
    || (LODWORD(v3) & 0x7F800000) == 0x7F800000
    || (LODWORD(v1) & 0x7F800000) == 0x7F800000
    || (LODWORD(v2) & 0x7F800000) == 0x7F800000)
  {
    goto LABEL_20;
  }
  if (v4 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v4 < 4295000000.0)
    return v4 | (v2 << 16) | (v1 << 24) | (v3 << 8);
LABEL_22:
  __break(1u);
  return result;
}

unint64_t static Graphics.blendARGB(srcColor:dstColor:)(unint64_t result, unsigned int a2)
{
  float v2;
  float v3;
  float v4;
  unsigned int v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (float)a2 / 255.0;
  v3 = (float)result / 255.0;
  if ((float)(v3 + v2) <= 1.0)
    v4 = (float)(v3 + v2) * 255.0;
  else
    v4 = 255.0;
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 <= -9.2234e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v4 >= 9.2234e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  v7 = v3 * (float)(1.0 - v2);
  v8 = lroundf(v7 * (float)BYTE1(result));
  result = lroundf(v2 * (float)BYTE1(a2));
  v9 = v8 + result;
  if (__OFADD__(v8, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = lroundf(v7 * (float)BYTE2(v6));
  result = lroundf(v2 * (float)BYTE2(a2));
  v11 = __OFADD__(v10, result);
  v12 = v10 + result;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = lroundf(v7 * (float)HIBYTE(v6));
  result = lroundf(v2 * (float)HIBYTE(a2));
  if (__OFADD__(v13, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = (uint64_t)v4 | (v9 << 8) | (v12 << 16) | ((v13 + result) << 24);
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (HIDWORD(result))
LABEL_20:
    __break(1u);
  return result;
}

uint64_t Graphics.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t Graphics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t _s17MeasureFoundation8GraphicsC9blendBGRA8srcColor03dstG0s6UInt32VAH_AHtFZ_0(unint64_t result, unsigned int a2)
{
  float v2;
  float v3;
  float v4;
  __int16 v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (float)HIBYTE(a2) / 255.0;
  v3 = (float)BYTE3(result) / 255.0;
  if ((float)(v3 + v2) <= 1.0)
    v4 = (float)(v3 + v2) * 255.0;
  else
    v4 = 255.0;
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 <= -9.2234e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v4 >= 9.2234e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  v7 = v3 * (float)(1.0 - v2);
  v8 = lroundf(v7 * (float)BYTE2(result));
  result = lroundf(v2 * (float)BYTE2(a2));
  v9 = v8 + result;
  if (__OFADD__(v8, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = lroundf(v7 * (float)HIBYTE(v6));
  result = lroundf(v2 * (float)BYTE1(a2));
  v11 = __OFADD__(v10, result);
  v12 = v10 + result;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = lroundf(v7 * (float)v6);
  result = lroundf(v2 * (float)a2);
  if (__OFADD__(v13, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = (v9 << 16) | ((uint64_t)v4 << 24) | (v12 << 8) | (v13 + result);
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (HIDWORD(result))
LABEL_20:
    __break(1u);
  return result;
}

unint64_t _s17MeasureFoundation8GraphicsC8multiply5color6normals6UInt32VAH_s5SIMD4VySfGtFZ_0(unsigned int a1, float32x4_t a2)
{
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  unint64_t result;

  if ((float)((float)HIBYTE(a1) * a2.f32[0]) <= 255.0)
    v3 = (float)HIBYTE(a1) * a2.f32[0];
  else
    v3 = 255.0;
  v4 = lroundf(v3);
  v5 = vmuls_lane_f32((float)BYTE2(a1), *(float32x2_t *)a2.f32, 1);
  if (v5 > 255.0)
    v5 = 255.0;
  v6 = lroundf(v5);
  v7 = vmuls_lane_f32((float)BYTE1(a1), a2, 2);
  if (v7 > 255.0)
    v7 = 255.0;
  v8 = lroundf(v7);
  v9 = vmuls_lane_f32((float)a1, a2, 3);
  if (v9 > 255.0)
    v9 = 255.0;
  result = (v6 << 16) | (v4 << 24) | (v8 << 8) | lroundf(v9);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (HIDWORD(result))
LABEL_14:
    __break(1u);
  return result;
}

uint64_t type metadata accessor for Graphics()
{
  return objc_opt_self();
}

uint64_t Histogram.data.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Histogram.max.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  swift_getTupleTypeMetadata2();
  v5 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t Histogram.min.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  swift_getTupleTypeMetadata2();
  v5 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

float Histogram.sumOfValues.getter(uint64_t a1)
{
  uint64_t v1;

  return *(float *)(v1 + *(int *)(a1 + 44));
}

float Histogram.getValue(of:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  float result;
  uint64_t v4;

  MEMORY[0x22766E57C](&v4, a1, *v2, *(_QWORD *)(a2 + 16), MEMORY[0x24BEE14E8], *(_QWORD *)(a2 + 24));
  result = *(float *)&v4;
  if (BYTE4(v4))
    return 0.0;
  return result;
}

uint64_t sub_2215DE308()
{
  uint64_t result;
  unint64_t v1;

  swift_getTupleTypeMetadata2();
  result = sub_221653714();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2215DE3B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  _BYTE *v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(unsigned int *)(v5 + 84);
  v8 = v6 & 0xFC | 3;
  v9 = *(_QWORD *)(v5 + 64) + 3;
  v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 5;
  if ((_DWORD)v7)
    v11 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  else
    v11 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 5;
  v12 = ((v11 + 3 + ((v11 + v8 + (((v6 & 0xFC) + 11) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  v13 = v6 & 0x100000;
  v14 = *a2;
  *a1 = *a2;
  if (v8 <= 7 && v13 == 0 && v12 <= 0x18)
  {
    v34 = v9;
    v36 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v37 = v4;
    v18 = ~v8;
    v35 = a1;
    v19 = (uint64_t)a1 + v8 + 8;
    v20 = v19 & ~v8;
    v21 = (uint64_t)a2 + v8 + 8;
    v22 = (_DWORD *)(v21 & ~v8);
    swift_bridgeObjectRetain();
    if ((_DWORD)v7)
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v21 & ~v8, v7, v37))
      {
LABEL_23:
        v30 = v21 & ~v8;
        v28 = v37;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v19 & ~v8, v30, v37);
        *(_DWORD *)((v34 + v20) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v22 + v34) & 0xFFFFFFFFFFFFFCLL);
        if ((_DWORD)v7)
        {
          v17 = v35;
          v27 = v36;
          v25 = (_BYTE *)((v36 + v8 + v20) & v18);
          v26 = (int *)(((unint64_t)v22 + v36 + v8) & v18);
LABEL_25:
          if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(v26, v7, v28))
          {
LABEL_33:
            (*(void (**)(_BYTE *, int *, uint64_t))(v5 + 16))(v25, v26, v28);
            *(_DWORD *)((unint64_t)&v25[v34] & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v26 + v34) & 0xFFFFFFFFFFFFFCLL);
            if (!(_DWORD)v7)
              v25[v27] = 0;
            goto LABEL_35;
          }
LABEL_32:
          memcpy(v25, v26, v11);
LABEL_35:
          *(_DWORD *)((unint64_t)&v25[v11 + 3] & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v26
                                                                                         + v11
                                                                                         + 3) & 0xFFFFFFFFFFFFFCLL);
          return v17;
        }
        v17 = v35;
        *(_BYTE *)(v20 + v36) = 0;
        v25 = (_BYTE *)((v10 + v8 + v20) & v18);
        v26 = (int *)(((unint64_t)v22 + v10 + v8) & v18);
        v27 = v36;
        v29 = *((unsigned __int8 *)v26 + v36);
        if (!*((_BYTE *)v26 + v36))
          goto LABEL_33;
LABEL_28:
        v31 = v29 - 1;
        if ((_DWORD)v27)
        {
          v31 = 0;
          v32 = *v26;
        }
        else
        {
          v32 = 0;
        }
        if ((v32 | v31) == 0xFFFFFFFF)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    else
    {
      if (!*((_BYTE *)v22 + v36))
        goto LABEL_23;
      v23 = *((unsigned __int8 *)v22 + v36) - 1;
      v24 = v36;
      if ((_DWORD)v36)
      {
        v23 = 0;
        v24 = *v22;
      }
      if ((v24 | v23) == 0xFFFFFFFF)
        goto LABEL_23;
    }
    memcpy((void *)(v19 & ~v8), (const void *)(v21 & ~v8), v11);
    v25 = (_BYTE *)(((v19 | v8) + v11) & v18);
    v26 = (int *)(((v21 | v8) + v11) & v18);
    v17 = v35;
    v27 = v36;
    v28 = v37;
    if ((_DWORD)v7)
      goto LABEL_25;
    v29 = *((unsigned __int8 *)v26 + v36);
    if (!*((_BYTE *)v26 + v36))
      goto LABEL_33;
    goto LABEL_28;
  }
  v17 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  swift_retain();
  return v17;
}

uint64_t sub_2215DE668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t result;
  int v17;
  int v18;
  int v19;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_DWORD *)(v5 + 80) & 0xFCLL | 3;
  v8 = a1 + v7 + 8;
  v9 = (_DWORD *)(v8 & ~v7);
  v10 = (*(_QWORD *)(v5 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = v10 + 4;
  if ((_DWORD)v6)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(v8 & ~v7, *(unsigned int *)(v5 + 84), v4))
      goto LABEL_10;
    goto LABEL_9;
  }
  if (!*((_BYTE *)v9 + v11)
    || ((v12 = *((unsigned __int8 *)v9 + v11) - 1, (_DWORD)v10 == -4) ? (v13 = 0) : (v12 = 0, v13 = *v9),
        (v13 | v12) == 0xFFFFFFFF))
  {
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8 & ~v7, v4);
  }
LABEL_10:
  v14 = v10 + 5;
  if ((_DWORD)v6)
    v14 = v10 + 4;
  v15 = (_DWORD *)(((v8 | v7) + v14) & ~v7);
  if ((_DWORD)v6)
  {
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(v15, v6, v4);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v5 + 8))(v15, v4);
  }
  else
  {
    if (!*((_BYTE *)v15 + v11))
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v5 + 8))(v15, v4);
    v17 = *((unsigned __int8 *)v15 + v11) - 1;
    if ((_DWORD)v10 == -4)
    {
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = *v15;
    }
    v19 = v18 | v17;
    result = (v19 + 1);
    if (v19 == -1)
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v5 + 8))(v15, v4);
  }
  return result;
}

_QWORD *sub_2215DE7D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v27;

  *a1 = *a2;
  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = *(_DWORD *)(v4 + 80) & 0xFCLL;
  v7 = v6 | 3;
  v6 += 11;
  v8 = (unint64_t)a1 + v6;
  v9 = ((unint64_t)a1 + v6) & ~v7;
  v10 = (unint64_t)a2 + v6;
  v11 = (int *)(((unint64_t)a2 + v6) & ~v7);
  v25 = *(_QWORD *)(v4 + 64) + 3;
  v12 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  swift_bridgeObjectRetain();
  v27 = v3;
  if ((_DWORD)v5)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v4 + 48))(v11, v5, v3))
      goto LABEL_13;
LABEL_9:
    if ((_DWORD)v5)
      v16 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    else
      v16 = v12 + 5;
    memcpy((void *)(v8 & ~v7), v11, v16);
    v17 = ~v7;
    goto LABEL_15;
  }
  if (*((_BYTE *)v11 + v13))
  {
    v14 = *((unsigned __int8 *)v11 + v13) - 1;
    if ((v25 & 0xFFFFFFFC) == 0xFFFFFFFC)
    {
      v15 = 0;
    }
    else
    {
      v14 = 0;
      v15 = *v11;
    }
    if ((v15 | v14) != 0xFFFFFFFF)
      goto LABEL_9;
  }
LABEL_13:
  (*(void (**)(unint64_t, int *, uint64_t))(v4 + 16))(v8 & ~v7, v11, v3);
  *(_DWORD *)((v25 + v9) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v11 + v25) & 0xFFFFFFFFFFFFFCLL);
  v17 = ~v7;
  if (!(_DWORD)v5)
    *(_BYTE *)(v9 + v13) = 0;
LABEL_15:
  if ((_DWORD)v5)
    v18 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  else
    v18 = v12 + 5;
  v19 = (void *)(((v8 | v7) + v18) & v17);
  v20 = (_DWORD *)(((v10 | v7) + v18) & v17);
  if (!(_DWORD)v5)
  {
    v21 = v27;
    if (!*((_BYTE *)v20 + v13))
      goto LABEL_27;
    v22 = *((unsigned __int8 *)v20 + v13) - 1;
    if ((v25 & 0xFFFFFFFC) == 0xFFFFFFFC)
    {
      v23 = 0;
    }
    else
    {
      v22 = 0;
      v23 = *v20;
    }
    if ((v23 | v22) == 0xFFFFFFFF)
      goto LABEL_27;
LABEL_26:
    memcpy(v19, v20, v18);
    result = a1;
    goto LABEL_29;
  }
  v21 = v27;
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48))(v20, v5, v27))
    goto LABEL_26;
LABEL_27:
  (*(void (**)(void *, _DWORD *, uint64_t))(v4 + 16))(v19, v20, v21);
  *(_DWORD *)(((unint64_t)v19 + v25) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v20 + v25) & 0xFFFFFFFFFFFFFCLL);
  result = a1;
  if (!(_DWORD)v5)
    *((_BYTE *)v19 + v13) = 0;
LABEL_29:
  *(_DWORD *)(((unint64_t)v19 + v18 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v20 + v18 + 3) & 0xFFFFFFFFFFFFFCLL);
  return result;
}

float sub_2215DEA04(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(int *, uint64_t, uint64_t);
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  size_t v26;
  void *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _DWORD *v34;
  _DWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  uint64_t (*v42)(size_t, uint64_t, uint64_t);
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  float *v51;
  float result;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  int *__src;
  unsigned int v58;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_DWORD *)(v7 + 80) & 0xFCLL;
  v10 = v9 | 3;
  v9 += 11;
  v11 = (unint64_t)a1 + v9;
  v12 = ~v10;
  v13 = (_DWORD *)(((unint64_t)a1 + v9) & ~v10);
  v14 = (unint64_t)a2 + v9;
  v15 = (int *)(((unint64_t)a2 + v9) & ~v10);
  v16 = *(_QWORD *)(v7 + 64) + 3;
  v56 = v16;
  v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  v18 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  v58 = v8;
  __src = v15;
  if ((_DWORD)v8)
  {
    v54 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v55 = (char *)v11;
    v53 = (char *)v14;
    v19 = ~v10;
    v20 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    v21 = v15;
    v22 = v10;
    v23 = v13;
    v24 = v20(v13, v8, v6);
    v25 = v20(v21, v8, v6);
    v13 = v23;
    v10 = v22;
    v12 = v19;
    v14 = (unint64_t)v53;
    v18 = v54;
    if (v24)
    {
      v11 = (unint64_t)v55;
      if (v25)
      {
LABEL_4:
        v8 = v8;
        if ((_DWORD)v8)
          v26 = v18;
        else
          v26 = v17 + 5;
        v27 = v13;
LABEL_28:
        memcpy(v27, __src, v26);
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  if (!*((_BYTE *)v13 + v18)
    || ((v28 = *((unsigned __int8 *)v13 + v18) - 1, !(_DWORD)v18) ? (v29 = 0) : (v28 = 0, v29 = *v13),
        (v29 | v28) == 0xFFFFFFFF))
  {
    if (!*((_BYTE *)v15 + v18))
    {
LABEL_29:
      v35 = v13;
      (*(void (**)(_DWORD *, int *, uint64_t))(v7 + 24))(v13, __src, v6);
      v36 = (unint64_t)v35 + v56;
      v8 = v58;
      *(_DWORD *)(v36 & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)__src + v56) & 0xFFFFFFFFFFFFFCLL);
      goto LABEL_34;
    }
    v32 = *((unsigned __int8 *)v15 + v18) - 1;
    if ((_DWORD)v18)
      v32 = 0;
    v55 = (char *)v11;
    if ((_DWORD)v18)
      v33 = *v15;
    else
      v33 = 0;
    v25 = (v33 | v32) + 1;
LABEL_23:
    v11 = (unint64_t)v55;
    v8 = v8;
    if (v25)
    {
      v34 = v13;
      (*(void (**)(_DWORD *, uint64_t))(v7 + 8))(v13, v6);
      if ((_DWORD)v8)
        v26 = v18;
      else
        v26 = v17 + 5;
      v27 = v34;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (*((_BYTE *)v15 + v18))
  {
    v30 = *((unsigned __int8 *)v15 + v18) - 1;
    if ((_DWORD)v18)
    {
      v30 = 0;
      v31 = *v15;
    }
    else
    {
      v31 = 0;
    }
    if ((v31 | v30) != 0xFFFFFFFF)
      goto LABEL_4;
  }
LABEL_32:
  v37 = v13;
  (*(void (**)(_DWORD *, int *, uint64_t))(v7 + 16))(v13, __src, v6);
  v38 = v37;
  *(_DWORD *)(((unint64_t)v37 + v56) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)__src + v56) & 0xFFFFFFFFFFFFFCLL);
  v8 = v58;
  if (!v58)
    *((_BYTE *)v38 + v18) = 0;
LABEL_34:
  if ((_DWORD)v8)
    v39 = v18;
  else
    v39 = v17 + 5;
  v40 = ((v11 | v10) + v39) & v12;
  v41 = ((v14 | v10) + v39) & v12;
  if (!(_DWORD)v8)
  {
    if (*(_BYTE *)(v40 + v18))
    {
      v45 = *(unsigned __int8 *)(v40 + v18) - 1;
      if ((_DWORD)v18)
      {
        v45 = 0;
        v46 = *(_DWORD *)v40;
      }
      else
      {
        v46 = 0;
      }
      if ((v46 | v45) != 0xFFFFFFFF)
      {
        if (!*(_BYTE *)(v41 + v18))
          goto LABEL_61;
        v47 = *(unsigned __int8 *)(v41 + v18) - 1;
        if ((_DWORD)v18)
        {
          v47 = 0;
          v48 = *(_DWORD *)v41;
        }
        else
        {
          v48 = 0;
        }
        if ((v48 | v47) == 0xFFFFFFFF)
          goto LABEL_61;
LABEL_59:
        memcpy((void *)v40, (const void *)v41, v39);
        goto LABEL_60;
      }
    }
    if (!*(_BYTE *)(v41 + v18))
    {
LABEL_56:
      (*(void (**)(size_t, size_t, uint64_t))(v7 + 24))(v40, v41, v6);
      *(_DWORD *)((v56 + v40) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v56 + v41) & 0xFFFFFFFFFFFFFCLL);
      goto LABEL_60;
    }
    v49 = *(unsigned __int8 *)(v41 + v18) - 1;
    if ((_DWORD)v18)
    {
      v49 = 0;
      v50 = *(_DWORD *)v41;
    }
    else
    {
      v50 = 0;
    }
    v44 = (v50 | v49) + 1;
LABEL_54:
    if (v44)
    {
      (*(void (**)(size_t, uint64_t))(v7 + 8))(v40, v6);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v42 = *(uint64_t (**)(size_t, uint64_t, uint64_t))(v7 + 48);
  v43 = v42(v40, v8, v6);
  v44 = v42(v41, v8, v6);
  if (!v43)
    goto LABEL_54;
  if (v44)
    goto LABEL_59;
LABEL_61:
  (*(void (**)(size_t, size_t, uint64_t))(v7 + 16))(v40, v41, v6);
  *(_DWORD *)((v56 + v40) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v56 + v41) & 0xFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v8)
    *(_BYTE *)(v40 + v18) = 0;
LABEL_60:
  v51 = (float *)(((v41 | 3) + v39) & 0xFFFFFFFFFFFFFCLL);
  result = *v51;
  *(float *)(((v40 | 3) + v39) & 0xFFFFFFFFFFFFFCLL) = *v51;
  return result;
}

_QWORD *sub_2215DEE34(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  size_t v17;
  size_t v18;
  void *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v27;

  *a1 = *a2;
  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = *(_DWORD *)(v4 + 80) & 0xFCLL;
  v7 = v6 | 3;
  v6 += 11;
  v8 = (unint64_t)a1 + v6;
  v9 = ~v7;
  v10 = (void *)(((unint64_t)a1 + v6) & ~v7);
  v11 = (unint64_t)a2 + v6;
  v12 = (int *)(((unint64_t)a2 + v6) & ~v7);
  v25 = *(_QWORD *)(v4 + 64) + 3;
  v13 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  v14 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  v27 = v3;
  if ((_DWORD)v5)
  {
    if (!(*(unsigned int (**)(int *, uint64_t))(v4 + 48))(v12, v5))
      goto LABEL_13;
LABEL_9:
    if ((_DWORD)v5)
      v17 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    else
      v17 = v13 + 5;
    memcpy(v10, v12, v17);
    goto LABEL_15;
  }
  if (*((_BYTE *)v12 + v14))
  {
    v15 = *((unsigned __int8 *)v12 + v14) - 1;
    if ((v25 & 0xFFFFFFFC) == 0xFFFFFFFC)
    {
      v16 = 0;
    }
    else
    {
      v15 = 0;
      v16 = *v12;
    }
    if ((v16 | v15) != 0xFFFFFFFF)
      goto LABEL_9;
  }
LABEL_13:
  (*(void (**)(void *, int *, uint64_t))(v4 + 32))(v10, v12, v27);
  *(_DWORD *)(((unint64_t)v10 + v25) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v12 + v25) & 0xFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v5)
    *((_BYTE *)v10 + v14) = 0;
LABEL_15:
  if ((_DWORD)v5)
    v18 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  else
    v18 = v13 + 5;
  v19 = (void *)(((v8 | v7) + v18) & v9);
  v20 = (_DWORD *)(((v11 | v7) + v18) & v9);
  if (!(_DWORD)v5)
  {
    v21 = v27;
    if (!*((_BYTE *)v20 + v14))
      goto LABEL_27;
    v22 = *((unsigned __int8 *)v20 + v14) - 1;
    if ((v25 & 0xFFFFFFFC) == 0xFFFFFFFC)
    {
      v23 = 0;
    }
    else
    {
      v22 = 0;
      v23 = *v20;
    }
    if ((v23 | v22) == 0xFFFFFFFF)
      goto LABEL_27;
LABEL_26:
    memcpy(v19, v20, v18);
    result = a1;
    goto LABEL_29;
  }
  v21 = v27;
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48))(v20, v5, v27))
    goto LABEL_26;
LABEL_27:
  (*(void (**)(void *, _DWORD *, uint64_t))(v4 + 32))(v19, v20, v21);
  result = a1;
  *(_DWORD *)(((unint64_t)v19 + v25) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v20 + v25) & 0xFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v5)
    *((_BYTE *)v19 + v14) = 0;
LABEL_29:
  *(_DWORD *)(((unint64_t)v19 + v18 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v20 + v18 + 3) & 0xFFFFFFFFFFFFFCLL);
  return result;
}

float sub_2215DF048(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(int *, uint64_t, uint64_t);
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  size_t v26;
  void *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _DWORD *v34;
  _DWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  uint64_t (*v42)(size_t, uint64_t, uint64_t);
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  float *v51;
  float result;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  int *__src;
  unsigned int v58;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_DWORD *)(v7 + 80) & 0xFCLL;
  v10 = v9 | 3;
  v9 += 11;
  v11 = (unint64_t)a1 + v9;
  v12 = ~v10;
  v13 = (_DWORD *)(((unint64_t)a1 + v9) & ~v10);
  v14 = (unint64_t)a2 + v9;
  v15 = (int *)(((unint64_t)a2 + v9) & ~v10);
  v16 = *(_QWORD *)(v7 + 64) + 3;
  v56 = v16;
  v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  v18 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  v58 = v8;
  __src = v15;
  if ((_DWORD)v8)
  {
    v54 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v55 = (char *)v11;
    v53 = (char *)v14;
    v19 = ~v10;
    v20 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    v21 = v15;
    v22 = v10;
    v23 = v13;
    v24 = v20(v13, v8, v6);
    v25 = v20(v21, v8, v6);
    v13 = v23;
    v10 = v22;
    v12 = v19;
    v14 = (unint64_t)v53;
    v18 = v54;
    if (v24)
    {
      v11 = (unint64_t)v55;
      if (v25)
      {
LABEL_4:
        v8 = v8;
        if ((_DWORD)v8)
          v26 = v18;
        else
          v26 = v17 + 5;
        v27 = v13;
LABEL_28:
        memcpy(v27, __src, v26);
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  if (!*((_BYTE *)v13 + v18)
    || ((v28 = *((unsigned __int8 *)v13 + v18) - 1, !(_DWORD)v18) ? (v29 = 0) : (v28 = 0, v29 = *v13),
        (v29 | v28) == 0xFFFFFFFF))
  {
    if (!*((_BYTE *)v15 + v18))
    {
LABEL_29:
      v35 = v13;
      (*(void (**)(_DWORD *, int *, uint64_t))(v7 + 40))(v13, __src, v6);
      v36 = (unint64_t)v35 + v56;
      v8 = v58;
      *(_DWORD *)(v36 & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)__src + v56) & 0xFFFFFFFFFFFFFCLL);
      goto LABEL_34;
    }
    v32 = *((unsigned __int8 *)v15 + v18) - 1;
    if ((_DWORD)v18)
      v32 = 0;
    v55 = (char *)v11;
    if ((_DWORD)v18)
      v33 = *v15;
    else
      v33 = 0;
    v25 = (v33 | v32) + 1;
LABEL_23:
    v11 = (unint64_t)v55;
    v8 = v8;
    if (v25)
    {
      v34 = v13;
      (*(void (**)(_DWORD *, uint64_t))(v7 + 8))(v13, v6);
      if ((_DWORD)v8)
        v26 = v18;
      else
        v26 = v17 + 5;
      v27 = v34;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (*((_BYTE *)v15 + v18))
  {
    v30 = *((unsigned __int8 *)v15 + v18) - 1;
    if ((_DWORD)v18)
    {
      v30 = 0;
      v31 = *v15;
    }
    else
    {
      v31 = 0;
    }
    if ((v31 | v30) != 0xFFFFFFFF)
      goto LABEL_4;
  }
LABEL_32:
  v37 = v13;
  (*(void (**)(_DWORD *, int *, uint64_t))(v7 + 32))(v13, __src, v6);
  v38 = v37;
  *(_DWORD *)(((unint64_t)v37 + v56) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)__src + v56) & 0xFFFFFFFFFFFFFCLL);
  v8 = v58;
  if (!v58)
    *((_BYTE *)v38 + v18) = 0;
LABEL_34:
  if ((_DWORD)v8)
    v39 = v18;
  else
    v39 = v17 + 5;
  v40 = ((v11 | v10) + v39) & v12;
  v41 = ((v14 | v10) + v39) & v12;
  if (!(_DWORD)v8)
  {
    if (*(_BYTE *)(v40 + v18))
    {
      v45 = *(unsigned __int8 *)(v40 + v18) - 1;
      if ((_DWORD)v18)
      {
        v45 = 0;
        v46 = *(_DWORD *)v40;
      }
      else
      {
        v46 = 0;
      }
      if ((v46 | v45) != 0xFFFFFFFF)
      {
        if (!*(_BYTE *)(v41 + v18))
          goto LABEL_61;
        v47 = *(unsigned __int8 *)(v41 + v18) - 1;
        if ((_DWORD)v18)
        {
          v47 = 0;
          v48 = *(_DWORD *)v41;
        }
        else
        {
          v48 = 0;
        }
        if ((v48 | v47) == 0xFFFFFFFF)
          goto LABEL_61;
LABEL_59:
        memcpy((void *)v40, (const void *)v41, v39);
        goto LABEL_60;
      }
    }
    if (!*(_BYTE *)(v41 + v18))
    {
LABEL_56:
      (*(void (**)(size_t, size_t, uint64_t))(v7 + 40))(v40, v41, v6);
      *(_DWORD *)((v56 + v40) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v56 + v41) & 0xFFFFFFFFFFFFFCLL);
      goto LABEL_60;
    }
    v49 = *(unsigned __int8 *)(v41 + v18) - 1;
    if ((_DWORD)v18)
    {
      v49 = 0;
      v50 = *(_DWORD *)v41;
    }
    else
    {
      v50 = 0;
    }
    v44 = (v50 | v49) + 1;
LABEL_54:
    if (v44)
    {
      (*(void (**)(size_t, uint64_t))(v7 + 8))(v40, v6);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  v42 = *(uint64_t (**)(size_t, uint64_t, uint64_t))(v7 + 48);
  v43 = v42(v40, v8, v6);
  v44 = v42(v41, v8, v6);
  if (!v43)
    goto LABEL_54;
  if (v44)
    goto LABEL_59;
LABEL_61:
  (*(void (**)(size_t, size_t, uint64_t))(v7 + 32))(v40, v41, v6);
  *(_DWORD *)((v56 + v40) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v56 + v41) & 0xFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v8)
    *(_BYTE *)(v40 + v18) = 0;
LABEL_60:
  v51 = (float *)(((v41 | 3) + v39) & 0xFFFFFFFFFFFFFCLL);
  result = *v51;
  *(float *)(((v40 | 3) + v39) & 0xFFFFFFFFFFFFFCLL) = *v51;
  return result;
}

uint64_t sub_2215DF470(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  BOOL v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 4;
  else
    v8 = 5;
  if (!a2)
    return 0;
  v9 = *(_DWORD *)(v4 + 80) & 0xFC | 3;
  if (v7 < a2)
  {
    v10 = ((*(_QWORD *)(v4 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + v8;
    if ((((((_DWORD)v10
           + (((_DWORD)v10 + (_DWORD)v9 + (((*(_DWORD *)(v4 + 80) & 0xFC) + 11) & ~(_DWORD)v9)) & ~(_DWORD)v9)
           + 3) & 0xFFFFFFFC)
         + 4) & 0xFFFFFFFC) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X16 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    if (v5)
    {
      v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
      v17 = v16 != 0;
      result = (v16 - 1);
      if ((_DWORD)result != 0 && v17)
        return result;
    }
    return 0;
  }
  v14 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

void sub_2215DF5D0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_DWORD *)(v7 + 80) & 0xFCLL;
  v12 = v11 | 3;
  v13 = (v11 + 11) & ~(v11 | 3);
  v14 = (*(_QWORD *)(v7 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 + 4;
  v16 = v14 + 5;
  if (v8)
    v17 = v15;
  else
    v17 = v16;
  v18 = ((v17 + ((v17 + v12 + v13) & ~v12) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v10 < a3)
  {
    v19 = a3 - v10;
    if ((((_DWORD)v17 + (((_DWORD)v17 + (_DWORD)v12 + (_DWORD)v13) & ~(_DWORD)v12) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v20 = v19 + 1;
    else
      v20 = 2;
    if (v20 >= 0x10000)
      v21 = 4;
    else
      v21 = 2;
    if (v20 < 0x100)
      v21 = 1;
    if (v20 >= 2)
      v6 = v21;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((_DWORD)v18)
    {
      v22 = ~v10 + a2;
      bzero(a1, v18);
      *a1 = v22;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

void sub_2215DF6FC(unsigned int a1@<W1>, unsigned int a2@<W2>, size_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  unsigned int v22;

  *((_BYTE *)v15 + v17) = 0;
  if (a1)
  {
    if ((v13 & 0x80000000) != 0)
    {
      v19 = (_DWORD *)(((unint64_t)v15 + v14 + 8) & v11);
      if (v13 >= a1)
      {
        if (a1 + 1 <= a2)
        {
          if (a1 != -1)
            (*(void (**)(_DWORD *, _QWORD))(v12 + 56))(v19, a1 + 1);
        }
        else if ((_DWORD)a3)
        {
          v22 = a1 - a2;
          bzero(v19, a3);
          *v19 = v22;
        }
      }
      else
      {
        if (v16 < 4)
          v20 = ~(-1 << (8 * v16));
        else
          v20 = -1;
        if ((_DWORD)v16)
        {
          v21 = v20 & (~v13 + a1);
          bzero(v19, v16);
          if ((_DWORD)v16 == 1)
            *(_BYTE *)v19 = v21;
          else
            *v19 = v21;
        }
      }
    }
    else
    {
      if ((a1 & 0x80000000) != 0)
        v18 = a1 ^ 0x80000000;
      else
        v18 = a1 - 1;
      *v15 = v18;
    }
  }
}

uint64_t type metadata accessor for Histogram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Histogram);
}

uint64_t sub_2215DF810()
{
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DepthAccumulator()
{
  return objc_opt_self();
}

uint64_t sub_2215DF85C()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DepthAccumulator.PointCloud()
{
  return objc_opt_self();
}

uint64_t sub_2215DF8A0()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 40) != 1)
    return *(_QWORD *)(v0 + 32);
  result = 80;
  *(_QWORD *)(v0 + 32) = 80;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_2215DF8C4()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 48) != 1)
    return *(unsigned int *)(v0 + 44);
  result = 1111970369;
  strcpy((char *)(v0 + 44), "ARGB");
  return result;
}

id sub_2215DF8EC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = *(id *)(v0 + 56);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDE3E8]), sel_initWithDevice_kernelDiameter_, *(_QWORD *)(v0 + 128), 3);
    v4 = *(void **)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

id sub_2215DF960()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 64);
  if (v1)
  {
    v2 = *(id *)(v0 + 64);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDE3D0]), sel_initWithDevice_kernelDiameter_, *(_QWORD *)(v0 + 128), 9);
    v4 = *(void **)(v0 + 64);
    *(_QWORD *)(v0 + 64) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_2215DF9D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t result;

  if (*(_QWORD *)(v0 + 72))
  {
    v1 = *(_QWORD *)(v0 + 72);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  v2 = *(void **)(v0 + 128);
  v3 = sub_2215DF8A0();
  result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 256, 192, v3, 0, 1);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 72) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

__CVBuffer *sub_2215DFA54()
{
  uint64_t v0;
  void *v1;
  __CVBuffer *v2;
  OSType v3;
  __CVBuffer *result;
  CVPixelBufferRef v5;
  void *v6;
  id v7;
  CVPixelBufferRef v8[2];

  v8[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(__CVBuffer **)(v0 + 80);
LABEL_5:
    v7 = v1;
    return v2;
  }
  v3 = sub_2215DF8C4();
  v8[0] = 0;
  result = (__CVBuffer *)CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x100uLL, 0xC0uLL, v3, 0, v8);
  v5 = v8[0];
  if (v8[0])
  {
    v6 = *(void **)(v0 + 80);
    *(CVPixelBufferRef *)(v0 + 80) = v8[0];
    v2 = v5;

    v1 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215DFB10()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t result;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 88);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  v2 = *(void **)(v0 + 128);
  v3 = sub_2215DF8A0();
  result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 512, 384, v3, 0, 1);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 88) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215DFB90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t result;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD *)(v0 + 96);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  v2 = *(void **)(v0 + 128);
  v3 = sub_2215DF8A0();
  result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 512, 384, v3, 0, 1);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 96) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

__CVBuffer *sub_2215DFC10()
{
  uint64_t v0;
  void *v1;
  __CVBuffer *v2;
  OSType v3;
  __CVBuffer *result;
  CVPixelBufferRef v5;
  void *v6;
  id v7;
  CVPixelBufferRef v8[2];

  v8[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 104);
  if (v1)
  {
    v2 = *(__CVBuffer **)(v0 + 104);
LABEL_5:
    v7 = v1;
    return v2;
  }
  v3 = sub_2215DF8C4();
  v8[0] = 0;
  result = (__CVBuffer *)CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0x200uLL, 0x180uLL, v3, 0, v8);
  v5 = v8[0];
  if (v8[0])
  {
    v6 = *(void **)(v0 + 104);
    *(CVPixelBufferRef *)(v0 + 104) = v8[0];
    v2 = v5;

    v1 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215DFCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 112);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(*(void **)(v0 + 128), 256, 192, 125, 0, 1);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 112) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215DFD44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = *(_QWORD *)(v0 + 120);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(*(void **)(v0 + 128), 512, 384, 55, 0, 1);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 120) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

VTPixelTransferSessionRef sub_2215DFDBC()
{
  uint64_t v0;
  OpaqueVTPixelTransferSession *v1;
  VTPixelTransferSessionRef v2;
  void *v3;
  OpaqueVTPixelTransferSession *v4;
  VTPixelTransferSessionRef v6[2];

  v6[1] = *(VTPixelTransferSessionRef *)MEMORY[0x24BDAC8D0];
  v1 = *(OpaqueVTPixelTransferSession **)(v0 + 152);
  v2 = v1;
  if (v1 == (OpaqueVTPixelTransferSession *)1)
  {
    v6[0] = 0;
    VTPixelTransferSessionCreate(0, v6);
    v2 = v6[0];
    v3 = *(void **)(v0 + 152);
    *(VTPixelTransferSessionRef *)(v0 + 152) = v6[0];
    v4 = v2;
    sub_2215E0368(v3);
  }
  sub_2215E0378(v1);
  return v2;
}

int64_t sub_2215DFE54(uint64_t a1, uint64_t a2, __CVBuffer *a3, char a4)
{
  uint64_t v4;
  VTPixelTransferSessionRef v9;
  OpaqueVTPixelTransferSession *v10;
  __CVBuffer *v11;
  __CVBuffer *v12;
  __CVBuffer *v13;
  id v14;
  __CVBuffer *v15;
  id v16;
  void *BaseAddress;
  const void *v18;
  void *v19;
  int64_t BytesPerRow;
  int64_t result;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  __CVBuffer *v34;
  id v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  void *v39;
  int64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;

  v9 = sub_2215DFDBC();
  if (!v9)
    return 0;
  v10 = v9;
  v11 = sub_2215DFC10();
  VTPixelTransferSessionTransferImage(v10, a3, v11);

  v12 = sub_2215DFC10();
  v13 = sub_2215DFA54();
  VTPixelTransferSessionTransferImage(v10, v12, v13);

  v14 = objc_msgSend((id)sub_2215DF9D4(), sel_iosurface);
  swift_unknownObjectRelease();
  if (!v14)
    goto LABEL_16;
  v15 = sub_2215DFA54();
  v16 = v14;
  if (CVPixelBufferLockBaseAddress(v15, 1uLL))
  {
LABEL_4:

    return 0;
  }
  BaseAddress = CVPixelBufferGetBaseAddress(v15);
  if (!BaseAddress)
  {
    CVPixelBufferUnlockBaseAddress(v15, 1uLL);
    goto LABEL_4;
  }
  v18 = BaseAddress;
  v19 = IOSurfaceGetBaseAddress((IOSurfaceRef)v16);
  BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)v16);
  result = IOSurfaceGetHeight((IOSurfaceRef)v16);
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 != (BytesPerRow * result) >> 63)
  {
    __break(1u);
    goto LABEL_27;
  }
  memcpy(v19, v18, BytesPerRow * result);
  CVPixelBufferUnlockBaseAddress(v15, 1uLL);

  v22 = *(void **)(v4 + 136);
  v23 = objc_msgSend(v22, sel_commandBuffer);
  if (!v23)
  {

    goto LABEL_16;
  }
  v24 = v23;
  v45 = v22;
  v25 = sub_2215DF960();
  v26 = sub_2215DF9D4();
  objc_msgSend(v25, sel_encodeRegressionToCommandBuffer_sourceTexture_guidanceTexture_weightsTexture_destinationCoefficientsTexture_, v24, a1, v26, a2, sub_2215DFCCC());

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  objc_msgSend(v24, sel_commit);
  objc_msgSend(v24, sel_waitUntilCompleted);

  swift_unknownObjectRelease();
  v27 = sub_2215DFB10();
  if ((a4 & 1) != 0)
  {
    v28 = objc_msgSend(v22, sel_commandBuffer);
    if (!v28)
    {
LABEL_25:

      swift_unknownObjectRelease();
      return 0;
    }
    v29 = v28;
    v30 = sub_2215DF8EC();
    v31 = sub_2215DFB10();
    objc_msgSend(v30, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, v29, v31, sub_2215DFB90());

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    objc_msgSend(v29, sel_commit);
    objc_msgSend(v29, sel_waitUntilCompleted);
    v32 = sub_2215DFB90();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v27 = v32;
  }
  v33 = objc_msgSend((id)sub_2215DFB10(), sel_iosurface);
  swift_unknownObjectRelease();
  if (!v33)
    goto LABEL_25;
  v34 = sub_2215DFC10();
  v35 = v33;
  if (CVPixelBufferLockBaseAddress(v34, 1uLL))
  {
LABEL_13:
    swift_unknownObjectRelease();

LABEL_16:
    return 0;
  }
  v37 = CVPixelBufferGetBaseAddress(v34);
  if (!v37)
  {
    CVPixelBufferUnlockBaseAddress(v34, 1uLL);
    goto LABEL_13;
  }
  v38 = v37;
  v39 = IOSurfaceGetBaseAddress((IOSurfaceRef)v35);
  v40 = IOSurfaceGetBytesPerRow((IOSurfaceRef)v35);
  result = IOSurfaceGetHeight((IOSurfaceRef)v35);
  if ((unsigned __int128)(v40 * (__int128)result) >> 64 == (v40 * result) >> 63)
  {
    memcpy(v39, v38, v40 * result);
    CVPixelBufferUnlockBaseAddress(v34, 1uLL);

    v41 = objc_msgSend(v45, sel_commandBuffer);
    if (v41)
    {
      v42 = v41;
      v43 = sub_2215DF960();
      v44 = sub_2215DFCCC();
      objc_msgSend(v43, sel_encodeReconstructionToCommandBuffer_guidanceTexture_coefficientsTexture_destinationTexture_, v42, v27, v44, sub_2215DFD44());

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      objc_msgSend(v42, sel_commit);

      swift_unknownObjectRelease();
      v36 = sub_2215DFD44();

      swift_unknownObjectRelease();
      return v36;
    }

    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
  return result;
}

id *sub_2215E02AC()
{
  id *v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  sub_2215E0368(v0[19]);
  return v0;
}

uint64_t sub_2215E0328()
{
  sub_2215E02AC();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ADGuidedFilter()
{
  return objc_opt_self();
}

void sub_2215E0368(id a1)
{
  if (a1 != (id)1)

}

id sub_2215E0378(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

id sub_2215E0388(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id result;

  *(_QWORD *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_DWORD *)(v1 + 44) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)(v1 + 120) = 0;
  if (qword_2556D8D88 != -1)
    swift_once();
  v3 = (void *)static MetalBundle.device;
  *(_QWORD *)(v1 + 128) = static MetalBundle.device;
  *(_QWORD *)(v1 + 144) = a1;
  *(_QWORD *)(v1 + 152) = 1;
  swift_unknownObjectRetain();
  swift_retain();
  result = objc_msgSend(v3, sel_newCommandQueue);
  if (result)
  {
    *(_QWORD *)(v1 + 136) = result;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CGAffineTransform *Transformer.cameraToView.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat tx;
  CGFloat ty;
  CGFloat v5;
  CGFloat v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CGFloat v10;
  CGFloat v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v20;
  CGFloat v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGAffineTransform v26;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if ((*(_BYTE *)(v1 + 360) & 1) != 0)
  {
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 40), 1.0 / *(double *)(v1 + 48));
    v22 = *(_OWORD *)&t1.c;
    v24 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    v5 = *(double *)(v1 + 16);
    v6 = *(double *)(v1 + 24);
    ARCameraImageToViewTransform();
    v7 = *(_OWORD *)&t1.a;
    v8 = *(_OWORD *)&t1.c;
    v9 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v24;
    *(_OWORD *)&t1.c = v22;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v7;
    *(_OWORD *)&t2.c = v8;
    *(_OWORD *)&t2.tx = v9;
    CGAffineTransformConcat(&v26, &t1, &t2);
    v23 = *(_OWORD *)&v26.c;
    v25 = *(_OWORD *)&v26.a;
    v10 = v26.tx;
    v11 = v26.ty;
    CGAffineTransformMakeScale(&t1, v5, v6);
    v12 = *(_OWORD *)&t1.a;
    v13 = *(_OWORD *)&t1.c;
    v14 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v25;
    *(_OWORD *)&t1.c = v23;
    t1.tx = v10;
    t1.ty = v11;
    *(_OWORD *)&t2.a = v12;
    *(_OWORD *)&t2.c = v13;
    *(_OWORD *)&t2.tx = v14;
    result = CGAffineTransformConcat(&v26, &t1, &t2);
    a = v26.a;
    b = v26.b;
    c = v26.c;
    d = v26.d;
    v21 = v26.tx;
    v20 = v26.ty;
    *(CGFloat *)(v1 + 312) = v26.a;
    *(CGFloat *)(v1 + 320) = b;
    *(CGFloat *)(v1 + 328) = c;
    *(CGFloat *)(v1 + 336) = d;
    *(CGFloat *)(v1 + 344) = v21;
    *(CGFloat *)(v1 + 352) = v20;
    *(_BYTE *)(v1 + 360) = 0;
  }
  else
  {
    v21 = *(double *)(v1 + 344);
    v20 = *(double *)(v1 + 352);
    c = *(double *)(v1 + 328);
    d = *(double *)(v1 + 336);
    a = *(double *)(v1 + 312);
    b = *(double *)(v1 + 320);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

CGAffineTransform *Transformer.viewToCamera.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat tx;
  CGFloat ty;
  CGFloat v5;
  CGFloat v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CGFloat v10;
  CGFloat v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v20;
  CGFloat v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGAffineTransform v26;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if ((*(_BYTE *)(v1 + 416) & 1) != 0)
  {
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 16), 1.0 / *(double *)(v1 + 24));
    v22 = *(_OWORD *)&t1.c;
    v24 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    v5 = *(double *)(v1 + 40);
    v6 = *(double *)(v1 + 48);
    ARViewToCameraImageTransform();
    v7 = *(_OWORD *)&t1.a;
    v8 = *(_OWORD *)&t1.c;
    v9 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v24;
    *(_OWORD *)&t1.c = v22;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v7;
    *(_OWORD *)&t2.c = v8;
    *(_OWORD *)&t2.tx = v9;
    CGAffineTransformConcat(&v26, &t1, &t2);
    v23 = *(_OWORD *)&v26.c;
    v25 = *(_OWORD *)&v26.a;
    v10 = v26.tx;
    v11 = v26.ty;
    CGAffineTransformMakeScale(&t1, v5, v6);
    v12 = *(_OWORD *)&t1.a;
    v13 = *(_OWORD *)&t1.c;
    v14 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v25;
    *(_OWORD *)&t1.c = v23;
    t1.tx = v10;
    t1.ty = v11;
    *(_OWORD *)&t2.a = v12;
    *(_OWORD *)&t2.c = v13;
    *(_OWORD *)&t2.tx = v14;
    result = CGAffineTransformConcat(&v26, &t1, &t2);
    a = v26.a;
    b = v26.b;
    c = v26.c;
    d = v26.d;
    v21 = v26.tx;
    v20 = v26.ty;
    *(CGFloat *)(v1 + 368) = v26.a;
    *(CGFloat *)(v1 + 376) = b;
    *(CGFloat *)(v1 + 384) = c;
    *(CGFloat *)(v1 + 392) = d;
    *(CGFloat *)(v1 + 400) = v21;
    *(CGFloat *)(v1 + 408) = v20;
    *(_BYTE *)(v1 + 416) = 0;
  }
  else
  {
    v21 = *(double *)(v1 + 400);
    v20 = *(double *)(v1 + 408);
    c = *(double *)(v1 + 384);
    d = *(double *)(v1 + 392);
    a = *(double *)(v1 + 368);
    b = *(double *)(v1 + 376);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

CGAffineTransform *Transformer.viewToCameraNormalized.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat tx;
  CGFloat ty;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v13;
  CGFloat v14;
  __int128 v15;
  __int128 v16;
  CGAffineTransform v17;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if ((*(_BYTE *)(v1 + 472) & 1) != 0)
  {
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 16), 1.0 / *(double *)(v1 + 24));
    v15 = *(_OWORD *)&t1.c;
    v16 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    ARViewToCameraImageTransform();
    v5 = *(_OWORD *)&t1.a;
    v6 = *(_OWORD *)&t1.c;
    v7 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v16;
    *(_OWORD *)&t1.c = v15;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v5;
    *(_OWORD *)&t2.c = v6;
    *(_OWORD *)&t2.tx = v7;
    result = CGAffineTransformConcat(&v17, &t1, &t2);
    a = v17.a;
    b = v17.b;
    c = v17.c;
    d = v17.d;
    v14 = v17.tx;
    v13 = v17.ty;
    *(CGFloat *)(v1 + 424) = v17.a;
    *(CGFloat *)(v1 + 432) = b;
    *(CGFloat *)(v1 + 440) = c;
    *(CGFloat *)(v1 + 448) = d;
    *(CGFloat *)(v1 + 456) = v14;
    *(CGFloat *)(v1 + 464) = v13;
    *(_BYTE *)(v1 + 472) = 0;
  }
  else
  {
    v14 = *(double *)(v1 + 456);
    v13 = *(double *)(v1 + 464);
    c = *(double *)(v1 + 440);
    d = *(double *)(v1 + 448);
    a = *(double *)(v1 + 424);
    b = *(double *)(v1 + 432);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v14;
  a1[5] = v13;
  return result;
}

CGAffineTransform *Transformer.viewToClip.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat tx;
  CGFloat ty;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CGFloat v8;
  CGFloat v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v18;
  CGFloat v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CGAffineTransform v24;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if ((*(_BYTE *)(v1 + 528) & 1) != 0)
  {
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 16), 1.0 / *(double *)(v1 + 24));
    v20 = *(_OWORD *)&t1.c;
    v22 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    CGAffineTransformMakeTranslation(&t1, -0.5, -0.5);
    v5 = *(_OWORD *)&t1.a;
    v6 = *(_OWORD *)&t1.c;
    v7 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v22;
    *(_OWORD *)&t1.c = v20;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v5;
    *(_OWORD *)&t2.c = v6;
    *(_OWORD *)&t2.tx = v7;
    CGAffineTransformConcat(&v24, &t1, &t2);
    v21 = *(_OWORD *)&v24.c;
    v23 = *(_OWORD *)&v24.a;
    v8 = v24.tx;
    v9 = v24.ty;
    CGAffineTransformMakeScale(&t1, 2.0, -2.0);
    v10 = *(_OWORD *)&t1.a;
    v11 = *(_OWORD *)&t1.c;
    v12 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v23;
    *(_OWORD *)&t1.c = v21;
    t1.tx = v8;
    t1.ty = v9;
    *(_OWORD *)&t2.a = v10;
    *(_OWORD *)&t2.c = v11;
    *(_OWORD *)&t2.tx = v12;
    result = CGAffineTransformConcat(&v24, &t1, &t2);
    a = v24.a;
    b = v24.b;
    c = v24.c;
    d = v24.d;
    v19 = v24.tx;
    v18 = v24.ty;
    *(CGFloat *)(v1 + 480) = v24.a;
    *(CGFloat *)(v1 + 488) = b;
    *(CGFloat *)(v1 + 496) = c;
    *(CGFloat *)(v1 + 504) = d;
    *(CGFloat *)(v1 + 512) = v19;
    *(CGFloat *)(v1 + 520) = v18;
    *(_BYTE *)(v1 + 528) = 0;
  }
  else
  {
    v18 = *(double *)(v1 + 520);
    d = *(double *)(v1 + 504);
    v19 = *(double *)(v1 + 512);
    b = *(double *)(v1 + 488);
    c = *(double *)(v1 + 496);
    a = *(double *)(v1 + 480);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v19;
  a1[5] = v18;
  return result;
}

CGAffineTransform *Transformer.clipToView.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;

  if ((*(_BYTE *)(v1 + 584) & 1) != 0)
  {
    Transformer.viewToClip.getter(&v12.a);
    v11 = v12;
    result = CGAffineTransformInvert(&v10, &v11);
    a = v10.a;
    b = v10.b;
    c = v10.c;
    d = v10.d;
    tx = v10.tx;
    ty = v10.ty;
    *(CGFloat *)(v1 + 536) = v10.a;
    *(CGFloat *)(v1 + 544) = b;
    *(CGFloat *)(v1 + 552) = c;
    *(CGFloat *)(v1 + 560) = d;
    *(CGFloat *)(v1 + 568) = tx;
    *(CGFloat *)(v1 + 576) = ty;
    *(_BYTE *)(v1 + 584) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 576);
    tx = *(double *)(v1 + 568);
    d = *(double *)(v1 + 560);
    c = *(double *)(v1 + 552);
    b = *(double *)(v1 + 544);
    a = *(double *)(v1 + 536);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *Transformer.cameraToClip.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat v3;
  CGFloat v4;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  __int128 v12;
  __int128 v13;
  CGAffineTransform v14;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v17[2];
  double v18;
  double v19;
  CGAffineTransform v20;

  if ((*(_BYTE *)(v1 + 640) & 1) != 0)
  {
    Transformer.cameraToView.getter((CGFloat *)v17);
    v12 = v17[1];
    v13 = v17[0];
    v3 = v18;
    v4 = v19;
    Transformer.viewToClip.getter(&v20.a);
    *(_OWORD *)&t1.a = v13;
    *(_OWORD *)&t1.c = v12;
    t1.tx = v3;
    t1.ty = v4;
    t2 = v20;
    result = CGAffineTransformConcat(&v14, &t1, &t2);
    a = v14.a;
    b = v14.b;
    c = v14.c;
    d = v14.d;
    tx = v14.tx;
    ty = v14.ty;
    *(CGFloat *)(v1 + 592) = v14.a;
    *(CGFloat *)(v1 + 600) = b;
    *(CGFloat *)(v1 + 608) = c;
    *(CGFloat *)(v1 + 616) = d;
    *(CGFloat *)(v1 + 624) = tx;
    *(CGFloat *)(v1 + 632) = ty;
    *(_BYTE *)(v1 + 640) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 632);
    tx = *(double *)(v1 + 624);
    d = *(double *)(v1 + 616);
    c = *(double *)(v1 + 608);
    b = *(double *)(v1 + 600);
    a = *(double *)(v1 + 592);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *Transformer.clipToCamera.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;

  if ((*(_BYTE *)(v1 + 696) & 1) != 0)
  {
    Transformer.cameraToClip.getter(&v12.a);
    v11 = v12;
    result = CGAffineTransformInvert(&v10, &v11);
    a = v10.a;
    b = v10.b;
    c = v10.c;
    d = v10.d;
    tx = v10.tx;
    ty = v10.ty;
    *(CGFloat *)(v1 + 648) = v10.a;
    *(CGFloat *)(v1 + 656) = b;
    *(CGFloat *)(v1 + 664) = c;
    *(CGFloat *)(v1 + 672) = d;
    *(CGFloat *)(v1 + 680) = tx;
    *(CGFloat *)(v1 + 688) = ty;
    *(_BYTE *)(v1 + 696) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 688);
    tx = *(double *)(v1 + 680);
    d = *(double *)(v1 + 672);
    c = *(double *)(v1 + 664);
    b = *(double *)(v1 + 656);
    a = *(double *)(v1 + 648);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *Transformer.clipToCameraNormalized.getter@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  CGFloat v3;
  CGFloat v4;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  __int128 v12;
  __int128 v13;
  CGAffineTransform v14;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v17[2];
  double v18;
  double v19;
  CGAffineTransform v20;

  if ((*(_BYTE *)(v1 + 752) & 1) != 0)
  {
    Transformer.clipToView.getter((CGFloat *)v17);
    v12 = v17[1];
    v13 = v17[0];
    v3 = v18;
    v4 = v19;
    Transformer.viewToCameraNormalized.getter(&v20.a);
    *(_OWORD *)&t1.a = v13;
    *(_OWORD *)&t1.c = v12;
    t1.tx = v3;
    t1.ty = v4;
    t2 = v20;
    result = CGAffineTransformConcat(&v14, &t1, &t2);
    a = v14.a;
    b = v14.b;
    c = v14.c;
    d = v14.d;
    tx = v14.tx;
    ty = v14.ty;
    *(CGFloat *)(v1 + 704) = v14.a;
    *(CGFloat *)(v1 + 712) = b;
    *(CGFloat *)(v1 + 720) = c;
    *(CGFloat *)(v1 + 728) = d;
    *(CGFloat *)(v1 + 736) = tx;
    *(CGFloat *)(v1 + 744) = ty;
    *(_BYTE *)(v1 + 752) = 0;
  }
  else
  {
    ty = *(double *)(v1 + 744);
    tx = *(double *)(v1 + 736);
    d = *(double *)(v1 + 728);
    c = *(double *)(v1 + 720);
    b = *(double *)(v1 + 712);
    a = *(double *)(v1 + 704);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

void Transformer.cameraToViewRotation.getter()
{
  uint64_t v0;
  float v1;
  __float2 v2;
  __n128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  float32x4_t v8;

  if ((*(_BYTE *)(v0 + 832) & 1) != 0)
  {
    v1 = (float)ARCameraToDisplayRotation() * 0.017453;
    if (qword_2556D8DD8 != -1)
      swift_once();
    v8 = (float32x4_t)static SIMD3<>.forward;
    v2 = __sincosf_stret(v1 * 0.5);
    v3 = (__n128)vmulq_n_f32(v8, v2.__sinval);
    v3.n128_u32[3] = LODWORD(v2.__cosval);
    *(double *)&v4 = MEMORY[0x22766EAC8](v3);
    *(_OWORD *)(v0 + 768) = v4;
    *(_OWORD *)(v0 + 784) = v5;
    *(_OWORD *)(v0 + 800) = v6;
    *(_OWORD *)(v0 + 816) = v7;
    *(_BYTE *)(v0 + 832) = 0;
  }
}

void __swiftcall Transformer.viewMatrix(of:)(simd_float4x4 *__return_ptr retstr, ARCamera of)
{
  uint64_t v2;

  -[objc_class viewMatrixForOrientation:](of.super.isa, sel_viewMatrixForOrientation_, *(_QWORD *)(v2 + 304));
}

void __swiftcall Transformer.cameraToWorld(of:)(simd_float4x4 *__return_ptr retstr, ARCamera of)
{
  uint64_t v2;
  simd_float4x4 v3;

  -[objc_class viewMatrixForOrientation:](of.super.isa, sel_viewMatrixForOrientation_, *(_QWORD *)(v2 + 304));
  __invert_f4(v3);
}

uint64_t Transformer.deinit()
{
  uint64_t v0;

  return v0;
}

double Transformer.viewportSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double Transformer.viewportRatio.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double Transformer.cameraResolution.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

__n128 Transformer.cameraIntrinsics.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 80);
  v4 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 Transformer.cameraIntrinsicsInversed.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 112);
  v3 = *(_OWORD *)(v1 + 128);
  v4 = *(_OWORD *)(v1 + 144);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 Transformer.projectionMatrix.getter()
{
  __n128 *v0;

  return v0[10];
}

__n128 Transformer.projectionMatrixInversed.getter()
{
  __n128 *v0;

  return v0[14];
}

double Transformer.cameraFoV.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 288);
}

double Transformer.cameraDepthUnprojection.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 296);
}

uint64_t Transformer.orientation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 304);
}

uint64_t Transformer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

double sub_2215E0DDC@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  Transformer.cameraToView.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215E0E1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = *a2 + 312;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(_BYTE *)(v2 + 360) = 0;
  return result;
}

double sub_2215E0E3C@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  Transformer.viewToCamera.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215E0E7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 368) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 384) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 400) = result;
  *(_BYTE *)(v2 + 416) = 0;
  return result;
}

double sub_2215E0E98@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  Transformer.viewToCameraNormalized.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215E0ED8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = *a2 + 424;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(_BYTE *)(v2 + 472) = 0;
  return result;
}

CGAffineTransform *sub_2215E0EF8@<X0>(CGFloat *a1@<X8>)
{
  return Transformer.viewToClip.getter(a1);
}

__n128 sub_2215E0F18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 480) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 496) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 512) = result;
  *(_BYTE *)(v2 + 528) = 0;
  return result;
}

CGAffineTransform *sub_2215E0F34@<X0>(CGFloat *a1@<X8>)
{
  return Transformer.clipToView.getter(a1);
}

__n128 sub_2215E0F54(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = *a2 + 536;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(_BYTE *)(v2 + 584) = 0;
  return result;
}

double sub_2215E0F74@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  Transformer.cameraToClip.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215E0FB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 592) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 608) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 624) = result;
  *(_BYTE *)(v2 + 640) = 0;
  return result;
}

double sub_2215E0FD0@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  Transformer.clipToCamera.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215E1010(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = *a2 + 648;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(_BYTE *)(v2 + 696) = 0;
  return result;
}

double sub_2215E1030@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  Transformer.clipToCameraNormalized.getter((CGFloat *)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_2215E1070(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 704) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 720) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 736) = result;
  *(_BYTE *)(v2 + 752) = 0;
  return result;
}

void sub_2215E108C(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  Transformer.cameraToViewRotation.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
}

__n128 sub_2215E10B8(uint64_t a1, uint64_t *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *a2;
  *(_OWORD *)(v7 + 768) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 784) = v3;
  *(_OWORD *)(v7 + 800) = v4;
  *(_QWORD *)(v7 + 816) = v6;
  *(_QWORD *)(v7 + 824) = v5;
  *(_BYTE *)(v7 + 832) = 0;
  return result;
}

uint64_t type metadata accessor for Transformer()
{
  return objc_opt_self();
}

uint64_t sub_2215E1100(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  simd_float3x3 v13;
  simd_float4x4 v14;

  *(_QWORD *)(v4 + 296) = 0xBA8312773F800008;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_BYTE *)(v4 + 360) = 1;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_BYTE *)(v4 + 416) = 1;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_BYTE *)(v4 + 472) = 1;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 512) = 0u;
  *(_BYTE *)(v4 + 528) = 1;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_BYTE *)(v4 + 584) = 1;
  *(_OWORD *)(v4 + 592) = 0u;
  *(_OWORD *)(v4 + 608) = 0u;
  *(_OWORD *)(v4 + 624) = 0u;
  *(_BYTE *)(v4 + 640) = 1;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_BYTE *)(v4 + 696) = 1;
  *(_OWORD *)(v4 + 704) = 0u;
  *(_OWORD *)(v4 + 720) = 0u;
  *(_OWORD *)(v4 + 736) = 0u;
  *(_BYTE *)(v4 + 752) = 1;
  *(_OWORD *)(v4 + 768) = 0u;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_OWORD *)(v4 + 800) = 0u;
  *(_OWORD *)(v4 + 816) = 0u;
  *(_BYTE *)(v4 + 832) = 1;
  *(double *)(v4 + 16) = a3;
  *(double *)(v4 + 24) = a4;
  objc_msgSend(a1, sel_imageResolution);
  *(_QWORD *)(v4 + 40) = v9;
  *(_QWORD *)(v4 + 48) = v10;
  objc_msgSend(a1, sel_intrinsics);
  *(simd_float3x3 *)(v4 + 64) = v13;
  *(simd_float3x3 *)(v4 + 112) = __invert_f3(v13);
  objc_msgSend(a1, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, a2, a3, a4, 0.00100000005, 0.0);
  *(simd_float4x4 *)(v4 + 160) = v14;
  *(simd_float4x4 *)(v4 + 224) = __invert_f4(v14);
  ARCameraFieldOfViewFromIntrinsics();
  *(_QWORD *)(v4 + 288) = v11;
  *(_QWORD *)(v4 + 304) = a2;
  *(double *)(v4 + 32) = a3 / a4;
  return v4;
}

MLMultiArray __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.reshaped(to:)(Swift::OpaquePointer to)
{
  void *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v29[2];

  v29[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)to._rawValue + 2);
  if (!v2)
  {
LABEL_26:
    if (objc_msgSend(v1, sel_count) == (id)1)
      __break(1u);
    goto LABEL_28;
  }
  v4 = 0;
  v5 = (uint64_t *)((char *)to._rawValue + 32);
  v6 = 1;
  do
  {
    v7 = v5[v4];
    v8 = v6 * v7;
    if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    {
      __break(1u);
      goto LABEL_23;
    }
    ++v4;
    v6 *= v7;
  }
  while (v2 != v4);
  if ((id)v8 != objc_msgSend(v1, sel_count))
LABEL_28:
    __break(1u);
  v9 = sub_221653390();
  *(_QWORD *)(v9 + 16) = v2;
  v10 = (uint64_t *)(v9 + 16);
  bzero((void *)(v9 + 32), 8 * v2);
  *(_QWORD *)(8 * v2 + v9 + 32 - 8) = 1;
  if (v2 >= 2)
  {
    v11 = 1;
    v12 = v2;
    while (1)
    {
      v13 = v12 - 1;
      if (v12 - 1 >= *v10)
        break;
      v14 = *((_QWORD *)to._rawValue + v12 + 3);
      if ((unsigned __int128)(v11 * (__int128)v14) >> 64 != (v11 * v14) >> 63)
        goto LABEL_24;
      if (v12 - 2 >= *v10)
        goto LABEL_25;
      v10[v12--] = v11 * v14;
      v11 *= v14;
      if (v13 <= 1)
        goto LABEL_12;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_12:
  v29[0] = (id)MEMORY[0x24BEE4AF8];
  sub_22165390C();
  do
  {
    v15 = *v5++;
    objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v15);
    sub_2216538E8();
    sub_221653918();
    sub_221653924();
    sub_2216538F4();
    --v2;
  }
  while (v2);
  v16 = *v10;
  if (*v10)
  {
    v29[0] = (id)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_22165390C();
    v17 = 0;
    do
    {
      v18 = v17 + 1;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v9 + 8 * v17 + 32));
      sub_2216538E8();
      sub_221653918();
      sub_221653924();
      sub_2216538F4();
      v17 = v18;
    }
    while (v16 != v18);
    swift_bridgeObjectRelease();
  }
  v19 = objc_retainAutorelease(v1);
  v20 = objc_msgSend(v19, sel_dataPointer);
  v21 = objc_msgSend(v19, sel_dataType);
  v22 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  sub_2215D81F0();
  v23 = (void *)sub_221653318();
  swift_bridgeObjectRelease();
  v24 = (void *)sub_221653318();
  swift_bridgeObjectRelease();
  v29[0] = 0;
  v25 = objc_msgSend(v22, sel_initWithDataPointer_shape_dataType_strides_deallocator_error_, v20, v23, v21, v24, 0, v29);

  if (v25)
  {
    v26 = v29[0];
  }
  else
  {
    v27 = v29[0];
    sub_221652ED4();

    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  return (MLMultiArray)v25;
}

MLMultiArray __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.transposed(to:)(Swift::OpaquePointer to)
{
  void *v1;
  uint64_t v2;
  unint64_t v3;
  char **p_attr;
  uint64_t v5;
  unint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  MLMultiArray result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  objc_class *v43;
  unint64_t v44;
  uint64_t v45;
  objc_class *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  _QWORD *rawValue;
  _QWORD *v63;
  _QWORD *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;

  v5 = v2;
  v7 = *((_QWORD *)to._rawValue + 2);
  if (objc_msgSend(v1, sel_dataType) == (id)65600)
  {
    v8 = objc_msgSend(v1, sel_strides);
    sub_2215D81F0();
    v3 = sub_221653324();

    if (!(v3 >> 62))
    {
      v9 = *(id *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v9 = (id)sub_2216539F0();
  swift_bridgeObjectRelease();
LABEL_4:
  swift_bridgeObjectRelease();
  if ((id)v7 == v9)
  {
    p_attr = &stru_24E72FFF8.attr;
    v9 = objc_msgSend(v1, sel_shape);
    v3 = sub_221653324();

    if (!(v3 >> 62))
    {
      v10 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v10 = sub_2216539F0();
  swift_bridgeObjectRelease_n();
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
LABEL_7:
  v11 = v1;
  swift_bridgeObjectRetain();
  sub_2215E1DFC(0, v10, v11, (uint64_t)to._rawValue);
  v13 = v12;

  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v11, sel_dataType);
  v15 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v16 = sub_2215E1D14(v13, (uint64_t)v14);
  if (v2)
    return (MLMultiArray)v16;
  v17 = objc_retainAutorelease(v11);
  v64 = objc_msgSend(v17, sel_dataPointer);
  v66 = v16;
  v9 = objc_retainAutorelease(v16);
  v63 = objc_msgSend(v9, sel_dataPointer);
  v65 = v17;
  v18 = objc_msgSend(v17, p_attr[312]);
  v3 = sub_221653324();

  v5 = MEMORY[0x24BEE4AF8];
  rawValue = to._rawValue;
  if (v3 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v19 = sub_2216539F0();
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_10;
LABEL_25:
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x24BEE4AF8];
    goto LABEL_26;
  }
  v19 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
    goto LABEL_25;
LABEL_10:
  v61 = v9;
  result.super.isa = (Class)sub_2215CBFBC(0, v19 & ~(v19 >> 63), 0);
  v67 = v19;
  if (v19 < 0)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v21 = 0;
  v22 = v5;
  v23 = v3 & 0xC000000000000001;
  v24 = v3;
  do
  {
    if (v23)
      v25 = (id)MEMORY[0x22766ED44](v21, v3);
    else
      v25 = *(id *)(v3 + 8 * v21 + 32);
    v26 = v25;
    v27 = objc_msgSend(v25, sel_integerValue, v61);

    v29 = *(_QWORD *)(v22 + 16);
    v28 = *(_QWORD *)(v22 + 24);
    if (v29 >= v28 >> 1)
      sub_2215CBFBC((char *)(v28 > 1), v29 + 1, 1);
    ++v21;
    *(_QWORD *)(v22 + 16) = v29 + 1;
    *(_QWORD *)(v22 + 8 * v29 + 32) = v27;
    v3 = v24;
  }
  while (v67 != v21);
  swift_bridgeObjectRelease();
  v5 = MEMORY[0x24BEE4AF8];
  v9 = v61;
LABEL_26:
  v30 = objc_msgSend(v9, sel_strides);
  v31 = sub_221653324();

  v16 = v66;
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = sub_2216539F0();
    swift_bridgeObjectRelease();
    if (v32)
    {
LABEL_28:
      result.super.isa = (Class)sub_2215CBFBC(0, v32 & ~(v32 >> 63), 0);
      v68 = v32;
      if (v32 < 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      v33 = 0;
      v34 = v5;
      v35 = v31 & 0xC000000000000001;
      v36 = v31;
      do
      {
        if (v35)
          v37 = (id)MEMORY[0x22766ED44](v33, v31);
        else
          v37 = *(id *)(v31 + 8 * v33 + 32);
        v38 = v37;
        v39 = objc_msgSend(v37, sel_integerValue);

        v41 = *(_QWORD *)(v34 + 16);
        v40 = *(_QWORD *)(v34 + 24);
        if (v41 >= v40 >> 1)
          sub_2215CBFBC((char *)(v40 > 1), v41 + 1, 1);
        ++v33;
        *(_QWORD *)(v34 + 16) = v41 + 1;
        *(_QWORD *)(v34 + 8 * v41 + 32) = v39;
        v31 = v36;
      }
      while (v68 != v33);
      swift_bridgeObjectRelease();
      v16 = v66;
      if (v7)
        goto LABEL_37;
      goto LABEL_40;
    }
  }
  else
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32)
      goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  v34 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
LABEL_37:
    v42 = sub_221653390();
    *(_QWORD *)(v42 + 16) = v7;
    bzero((void *)(v42 + 32), 8 * v7);
    goto LABEL_41;
  }
LABEL_40:
  v42 = MEMORY[0x24BEE4AF8];
LABEL_41:
  result.super.isa = (Class)objc_msgSend(v65, sel_count);
  if (((unint64_t)result.super.isa & 0x8000000000000000) != 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (!result.super.isa)
  {
LABEL_67:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (MLMultiArray)v16;
  }
  if (v7)
  {
    v43 = 0;
    v44 = v7 - 1;
    v45 = v42 + 32;
    while (v43 != result.super.isa)
    {
      v46 = v43;
      if (v7 > *(_QWORD *)(v34 + 16))
        goto LABEL_78;
      v47 = 0;
      v48 = 0;
      v43 = (objc_class *)((char *)v43 + 1);
      do
      {
        v49 = rawValue[v48 + 4];
        if (v49 >= *(_QWORD *)(v42 + 16))
        {
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
          goto LABEL_77;
        }
        v50 = *(_QWORD *)(v45 + 8 * v49);
        v51 = *(_QWORD *)(v34 + 32 + 8 * v48);
        v52 = v50 * v51;
        if ((unsigned __int128)(v50 * (__int128)v51) >> 64 != (v50 * v51) >> 63)
          goto LABEL_70;
        v53 = __OFADD__(v47, v52);
        v47 += v52;
        if (v53)
          goto LABEL_71;
        ++v48;
      }
      while (v7 != v48);
      v63[v47] = v64[(_QWORD)v46];
      if (v7 > *(_QWORD *)(v42 + 16))
        goto LABEL_79;
      v54 = *(_QWORD *)(v45 + 8 * v44);
      v55 = v54 + 1;
      if (__OFADD__(v54, 1))
        goto LABEL_80;
      *(_QWORD *)(v45 + 8 * v44) = v55;
      if (v7 >= 2)
      {
        v56 = *(_QWORD *)(v42 + 16);
        if (v7 > v56)
          goto LABEL_81;
        if (v7 > *(_QWORD *)(v22 + 16))
          goto LABEL_82;
        v57 = v7 + 2;
        v58 = (uint64_t *)(v42 + 8 * v7 + 16);
        if (v55 >= *(_QWORD *)(v22 + 32 + 8 * v44))
        {
          while (v57 - 3 < v56)
          {
            v58[1] = 0;
            if (v57 - 4 >= *(_QWORD *)(v42 + 16))
              goto LABEL_73;
            v59 = *v58 + 1;
            if (__OFADD__(*v58, 1))
              goto LABEL_74;
            *v58 = v59;
            if (v57 - 3 < 2)
              goto LABEL_45;
            v56 = *(_QWORD *)(v42 + 16);
            if (v57 - 4 >= v56)
              goto LABEL_75;
            if (v57 - 4 >= *(_QWORD *)(v22 + 16))
              goto LABEL_76;
            v60 = *(_QWORD *)(v22 + 8 * v57);
            --v58;
            --v57;
            if (v59 < v60)
              goto LABEL_45;
          }
          goto LABEL_72;
        }
      }
LABEL_45:
      if (v43 == result.super.isa)
        goto LABEL_67;
    }
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
LABEL_86:
  __break(1u);
  return result;
}

id sub_2215E1D14(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  sub_2215D81F0();
  v4 = (void *)sub_221653318();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, v4, a2, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    sub_221652ED4();

    swift_willThrow();
  }
  return v5;
}

void sub_2215E1DFC(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *i;
  id v14;
  uint64_t v15;
  unint64_t v16;
  id v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_21;
  if (v4)
  {
    sub_22165390C();
    if (a2 < (uint64_t)a1 || v4 < 0)
      goto LABEL_22;
    v9 = *(_QWORD *)(a4 + 16);
    v10 = v9 >= a1;
    v11 = v9 - a1;
    if (v10)
      v12 = v11;
    else
      v12 = 0;
    for (i = (unint64_t *)(a4 + 8 * a1 + 32); ; ++i)
    {
      v14 = objc_msgSend(a3, sel_shape);
      sub_2215D81F0();
      v15 = sub_221653324();

      if (!v12)
        break;
      v16 = *i;
      if ((v15 & 0xC000000000000001) != 0)
      {
        MEMORY[0x22766ED44](v16, v15);
      }
      else
      {
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v16 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v17 = *(id *)(v15 + 8 * v16 + 32);
      }
      swift_bridgeObjectRelease();
      sub_2216538E8();
      sub_221653918();
      sub_221653924();
      sub_2216538F4();
      --v12;
      if (!--v4)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

void *ImageProcessor.sceneView.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 72);
  v2 = v1;
  return v1;
}

double ImageProcessor.viewportSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  double v3;
  double result;
  uint64_t v5;

  if ((*(_BYTE *)(v0 + 104) & 1) == 0)
    return *(double *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 80);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  result = v3;
  *(double *)(v0 + 88) = v3;
  *(_QWORD *)(v0 + 96) = v5;
  *(_BYTE *)(v0 + 104) = 0;
  return result;
}

void ImageProcessor.viewportSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 88) = a1;
  *(double *)(v2 + 96) = a2;
  *(_BYTE *)(v2 + 104) = 0;
}

__n128 (*ImageProcessor.viewportSize.modify(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(double *)a1 = ImageProcessor.viewportSize.getter();
  *(_QWORD *)(a1 + 8) = v3;
  return sub_2215E203C;
}

__n128 sub_2215E203C(__n128 *a1)
{
  unint64_t v1;
  __n128 result;

  v1 = a1[1].n128_u64[0];
  result = *a1;
  *(__n128 *)(v1 + 88) = *a1;
  *(_BYTE *)(v1 + 104) = 0;
  return result;
}

double ImageProcessor.viewportCenter.getter()
{
  uint64_t v0;
  double result;
  double v2;

  if ((*(_BYTE *)(v0 + 128) & 1) == 0)
    return *(double *)(v0 + 112);
  result = ImageProcessor.viewportSize.getter() * 0.5;
  v2 = *(double *)(v0 + 96) * 0.5;
  *(double *)(v0 + 112) = result;
  *(double *)(v0 + 120) = v2;
  *(_BYTE *)(v0 + 128) = 0;
  return result;
}

void ImageProcessor.viewportCenter.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 112) = a1;
  *(double *)(v2 + 120) = a2;
  *(_BYTE *)(v2 + 128) = 0;
}

__n128 (*ImageProcessor.viewportCenter.modify(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(double *)a1 = ImageProcessor.viewportCenter.getter();
  *(_QWORD *)(a1 + 8) = v3;
  return sub_2215E20D0;
}

__n128 sub_2215E20D0(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  v1 = (__n128 *)a1[1].n128_u64[0];
  result = *a1;
  v1[7] = *a1;
  v1[8].n128_u8[0] = 0;
  return result;
}

double ImageProcessor.outputSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

void sub_2215E20EC(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 152);
  *(_QWORD *)(v3 + 152) = v2;
  v5 = v2;

}

void *ImageProcessor.outputBuffer.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 152);
  v2 = v1;
  return v1;
}

__CVBuffer *ImageProcessor.scaledPixels.getter()
{
  uint64_t v0;
  void *BaseAddress;
  __CVBuffer **v2;
  __CVBuffer *result;

  BaseAddress = *(void **)(v0 + 160);
  if (BaseAddress)
    return (__CVBuffer *)BaseAddress;
  v2 = (__CVBuffer **)(v0 + 152);
  swift_beginAccess();
  result = *(__CVBuffer **)(v0 + 152);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  CVPixelBufferLockBaseAddress(result, 0);
  result = *v2;
  if (!*v2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  BaseAddress = CVPixelBufferGetBaseAddress(result);
  result = *v2;
  if (*v2)
  {
    CVPixelBufferUnlockBaseAddress(result, 0);
    *(_QWORD *)(v0 + 160) = BaseAddress;
    return (__CVBuffer *)BaseAddress;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t ImageProcessor.scaledPixels.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = result;
  return result;
}

_QWORD *(*ImageProcessor.scaledPixels.modify(__CVBuffer **a1))(_QWORD *result)
{
  __CVBuffer *v1;

  a1[1] = v1;
  *a1 = ImageProcessor.scaledPixels.getter();
  return sub_2215E2248;
}

_QWORD *sub_2215E2248(_QWORD *result)
{
  *(_QWORD *)(result[1] + 160) = *result;
  return result;
}

uint64_t sub_2215E2254@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[56];
  _QWORD v11[6];
  char v12;

  if ((*(_BYTE *)(v1 + 232) & 1) == 0)
  {
    v9 = *(_QWORD *)(v1 + 216);
    v8 = *(_QWORD *)(v1 + 224);
    v7 = *(_QWORD *)(v1 + 200);
    v6 = *(_QWORD *)(v1 + 208);
    v5 = *(_QWORD *)(v1 + 184);
    v4 = *(_QWORD *)(v1 + 192);
    goto LABEL_5;
  }
  sub_2215E28B4((uint64_t)v10);
  result = sub_2215E36FC((uint64_t)v10, (uint64_t)v11);
  if ((v12 & 1) == 0)
  {
    v5 = v11[0];
    v4 = v11[1];
    v7 = v11[2];
    v6 = v11[3];
    v9 = v11[4];
    v8 = v11[5];
    result = sub_2215E36FC((uint64_t)v10, v1 + 184);
LABEL_5:
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v7;
    a1[3] = v6;
    a1[4] = v9;
    a1[5] = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t ImageProcessor.__allocating_init(sceneView:outputSize:)(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  ImageProcessor.init(sceneView:outputSize:)(a1, a2, a3, a4);
  return v8;
}

unint64_t ImageProcessor.init(sceneView:outputSize:)(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  double v13;
  id v14;
  id v15;
  const __CFDictionary *v16;
  CVBufferRef value;
  void *v18;

  *(_QWORD *)(v4 + 16) = CGColorSpaceCreateDeviceRGB();
  *(_OWORD *)(v4 + 24) = xmmword_221656B50;
  *(_QWORD *)(v4 + 40) = 4;
  *(_DWORD *)(v4 + 48) = 8194;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D8F70);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_221655520;
  *(_QWORD *)(inited + 32) = sub_2216531B0();
  *(_QWORD *)(inited + 40) = v10;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, 1);
  *(_QWORD *)(inited + 56) = sub_2216531B0();
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, 1);
  result = sub_2215C2AC8(inited);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 56) = result;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_BYTE *)(v4 + 104) = 1;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_BYTE *)(v4 + 128) = 1;
  *(_QWORD *)(v4 + 160) = 0;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_BYTE *)(v4 + 232) = 1;
  *(_QWORD *)(v4 + 72) = a1;
  *(_QWORD *)(v4 + 80) = a2;
  v13 = a3 * a4;
  *(double *)(v4 + 136) = a3;
  *(double *)(v4 + 144) = a4;
  if ((~COERCE__INT64(a3 * a4) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(_QWORD *)(v4 + 168) = (uint64_t)v13;
  v14 = a1;
  result = (unint64_t)MTLCreateSystemDefaultDevice();
  if (result)
  {
    v15 = objc_msgSend((id)objc_opt_self(), sel_contextWithMTLDevice_, result);
    swift_unknownObjectRelease();
    *(_QWORD *)(v4 + 176) = v15;
    sub_2215DDC80(0, (unint64_t *)&qword_2556DA4E0);
    v16 = (const __CFDictionary *)sub_22165309C();
    value = ImageProcessor.createPixelBuffer(pixelFormat:options:)(0x42475241u, v16).value;

    swift_beginAccess();
    v18 = *(void **)(v4 + 152);
    *(_QWORD *)(v4 + 152) = value;

    return v4;
  }
LABEL_9:
  __break(1u);
  return result;
}

CVBufferRef_optional __swiftcall ImageProcessor.createPixelBuffer(pixelFormat:options:)(Swift::UInt32 pixelFormat, CFDictionaryRef options)
{
  uint64_t v2;
  double v3;
  double v4;
  CVPixelBufferRef v6[2];

  v6[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v6[0] = 0;
  v3 = *(double *)(v2 + 136);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v4 = *(double *)(v2 + 144);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (v4 >= 9.22337204e18)
    goto LABEL_13;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (uint64_t)v3, (uint64_t)v4, pixelFormat, options, v6);
  return (CVBufferRef_optional)v6[0];
}

CVPixelBufferRef ImageProcessor.createPixelBuffer(pixelFormat:options:baseAddress:)(OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, void *baseAddress)
{
  uint64_t v3;
  double v4;
  double v5;
  CVPixelBufferRef v7[2];

  v7[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v7[0] = 0;
  v4 = *(double *)(v3 + 136);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v5 = *(double *)(v3 + 144);
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if ((unint64_t)((uint64_t)v4 - 0x2000000000000000) >> 62 != 3)
    goto LABEL_15;
  CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], (uint64_t)v4, (uint64_t)v5, pixelFormatType, baseAddress, 4 * (uint64_t)v4, 0, 0, pixelBufferAttributes, v7);
  return v7[0];
}

CVBufferRef_optional __swiftcall ImageProcessor.renderInput(frame:)(ARFrame frame)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id *v6;
  CVBufferRef_optional result;
  void *v8;
  id v9;
  id v10;
  id v11;
  _OWORD v12[3];
  _OWORD v13[3];

  v2 = -[objc_class capturedImage](frame.super.isa, sel_capturedImage);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCVPixelBuffer_, v2);
  sub_2215E2254(v13);
  v12[0] = v13[0];
  v12[1] = v13[1];
  v12[2] = v13[2];
  v4 = objc_msgSend(v3, sel_imageByApplyingTransform_, v12);

  v5 = *(void **)(v1 + 176);
  v6 = (id *)(v1 + 152);
  result.value = (CVBufferRef)swift_beginAccess();
  v8 = *(void **)(v1 + 152);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v5, sel_render_toCVPixelBuffer_, v4, v9);

    v10 = *v6;
    v11 = *v6;
    return (CVBufferRef_optional)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_2215E28B4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;
  void *v6;
  id v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat tx;
  CGFloat ty;
  CGFloat v15;
  CGFloat v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGFloat c;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double Width;
  CGFloat Height;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat d;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  CGFloat b;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  CGFloat a;
  __int128 v50;
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 80);
  ObjectType = swift_getObjectType();
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  v7 = objc_msgSend(v6, sel_currentFrame);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_camera);
    objc_msgSend(v8, sel_imageResolution);
    v10 = v9;
    objc_msgSend(v8, sel_imageResolution);
    v12 = v11;
    objc_msgSend(v7, sel_displayTransformForOrientation_viewportSize_, 2, ImageProcessor.viewportSize.getter());
    v43 = *(_OWORD *)&t1.c;
    v47 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    CGAffineTransformMakeTranslation(&t1, v10 * -0.5, v12 * -0.5);
    *(_OWORD *)&t2.a = v47;
    *(_OWORD *)&t2.c = v43;
    t2.tx = tx;
    t2.ty = ty;
    CGAffineTransformConcat(&v51, &t1, &t2);
    v44 = *(_OWORD *)&v51.c;
    v48 = *(_OWORD *)&v51.a;
    v15 = v51.tx;
    v16 = v51.ty;
    CGAffineTransformMakeTranslation(&t1, v12 * 0.5, v10 * 0.5);
    v17 = *(_OWORD *)&t1.a;
    v18 = *(_OWORD *)&t1.c;
    v19 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v48;
    *(_OWORD *)&t1.c = v44;
    t1.tx = v15;
    t1.ty = v16;
    *(_OWORD *)&t2.a = v17;
    *(_OWORD *)&t2.c = v18;
    *(_OWORD *)&t2.tx = v19;
    CGAffineTransformConcat(&v51, &t1, &t2);
    a = v51.a;
    c = v51.c;
    b = v51.b;
    v40 = v51.tx;
    d = v51.d;
    v39 = v51.ty;
    v21 = *(double *)(v2 + 136);
    v22 = *(double *)(v2 + 144);
    v23 = v12 - v10 * (v21 / v22);
    v24 = v23 * 0.5;
    v25 = v12 - v23;
    v26 = v10 - v12 / (v21 / v22);
    v27 = v26 * 0.5;
    v28 = v10 - v26;
    if (v12 / v10 <= v21 / v22)
      v29 = 0.0;
    else
      v29 = v24;
    if (v12 / v10 <= v21 / v22)
      v30 = v27;
    else
      v30 = 0.0;
    if (v12 / v10 <= v21 / v22)
      v10 = v28;
    else
      v12 = v25;
    v54.origin.x = v29;
    v54.origin.y = v30;
    v54.size.width = v12;
    v54.size.height = v10;
    Width = CGRectGetWidth(v54);
    v55.origin.x = v29;
    v55.origin.y = v30;
    v55.size.width = v12;
    v55.size.height = v10;
    Height = CGRectGetHeight(v55);
    CGAffineTransformMakeScale(&t1, v21 / Width, v22 / Height);
    v33 = *(_OWORD *)&t1.a;
    v34 = *(_OWORD *)&t1.c;
    v35 = *(_OWORD *)&t1.tx;
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = v40;
    t1.ty = v39;
    *(_OWORD *)&t2.a = v33;
    *(_OWORD *)&t2.c = v34;
    *(_OWORD *)&t2.tx = v35;
    CGAffineTransformConcat(&v51, &t1, &t2);
    v46 = *(_OWORD *)&v51.c;
    v50 = *(_OWORD *)&v51.a;
    v42 = *(_OWORD *)&v51.tx;

    v37 = v42;
    v36 = v46;
    v38 = v50;
  }
  else
  {
    v38 = 0uLL;
    v36 = 0uLL;
    v37 = 0uLL;
  }
  *(_OWORD *)a1 = v38;
  *(_OWORD *)(a1 + 16) = v36;
  *(_OWORD *)(a1 + 32) = v37;
  *(_BYTE *)(a1 + 48) = v7 == 0;
}

void ImageProcessor.makeSamplePoints(numberOfPoints:)(uint64_t a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;

  v3 = ImageProcessor.viewportSize.getter();
  v4 = *(double *)(v1 + 96);
  v5 = sqrt(v3 * v4 / (double)a1);
  v6 = round(*(double *)(v1 + 88) / v5);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v7 = round(v4 / v5);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = (uint64_t)v7;
  if ((uint64_t)v7 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v8)
  {
    v9 = (uint64_t)v6;
    if ((uint64_t)v6 < 0)
    {
LABEL_30:
      __break(1u);
      return;
    }
    v10 = 0;
    v11 = (char *)MEMORY[0x24BEE4AF8];
    while (v10 != v8)
    {
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_2215D6F10(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
        v12 = 0;
        v13 = *((_QWORD *)v11 + 2);
        v14 = 16 * v13;
        do
        {
          v15 = *((_QWORD *)v11 + 3);
          if (v13 + v12 >= v15 >> 1)
            v11 = sub_2215D6F10((char *)(v15 > 1), v13 + v12 + 1, 1, v11);
          *((_QWORD *)v11 + 2) = v13 + v12 + 1;
          v16 = &v11[v14];
          *((double *)v16 + 4) = v5 * (double)(v10 & 1) * 0.5 + v5 * ((double)v12 + 0.5);
          *((double *)v16 + 5) = v5 * ((double)v10 + 0.5);
          v14 += 16;
          ++v12;
        }
        while (v9 != v12);
      }
      if (++v10 == v8)
        return;
    }
    __break(1u);
    goto LABEL_23;
  }
}

id ImageProcessor.createDebugImage(featureProvider:inputBuffer:pixelRenderer:cameraTransform:gravity:)(id result, __CVBuffer *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  id v7;
  void *v8;
  CGContext *v9;
  CGContext *v10;
  CGContext *v11;
  CGContext *v12;
  uint64_t v13;
  void *v14;
  double v15;
  double v16;
  id v17;
  id v18;
  uint64_t v19;

  v3 = *(double *)(v2 + 136);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v4 = *(double *)(v2 + 144);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v5 = (uint64_t)v3;
  if ((unint64_t)((uint64_t)v3 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  sub_2215DDC80(0, &qword_2556DABF8);
  v7 = objc_msgSend((id)objc_opt_self(), sel_redColor);
  result = (id)UIImage.init(color:size:)((UIColor)v7, (CGSize)__PAIR128__(*(unint64_t *)&v4, *(unint64_t *)&v3));
  if (!result)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = result;
  v9 = (CGContext *)objc_msgSend(result, sel_CGImage);
  if (!v9)
  {
LABEL_18:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2216560E0;
    *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v19 + 32) = 0xD000000000000029;
    *(_QWORD *)(v19 + 40) = 0x800000022165E1C0;
    sub_221653B70();

    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = v9;
  v11 = CGBitmapContextCreate(0, (uint64_t)v3, (uint64_t)v4, 8uLL, 4 * v5, *(CGColorSpaceRef *)(v2 + 16), *(_DWORD *)(v2 + 48));
  if (!v11)
  {
    v12 = v10;
LABEL_17:

    goto LABEL_18;
  }
  v12 = v11;
  if (!CGBitmapContextGetData(v11))
  {

    goto LABEL_17;
  }
  result = (id)sub_22165360C();
  if ((unsigned __int128)(v5 * (__int128)(uint64_t)v4) >> 64 != (v5 * (uint64_t)v4) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferGetBaseAddress(a2);
  v13 = sub_2215DDC80(0, &qword_2556DA408);
  MEMORY[0x24BDAC7A8](v13);
  sub_221653660();
  CVPixelBufferUnlockBaseAddress(a2, 0);
  result = CGBitmapContextCreateImage(v12);
  if (result)
  {
    v14 = result;
    objc_msgSend(v8, sel_scale);
    v16 = v15;
    v17 = objc_msgSend(v8, sel_imageOrientation);
    v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD640]), sel_initWithCGImage_scale_orientation_, v14, v17, v16);

    return v18;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t ImageProcessor.renderPixelBuffer(featureProvider:inputBuffer:pixelRenderer:cameraTransform:gravity:outputBuffer:)(uint64_t a1, __CVBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CVPixelBufferRef *a10)
{
  uint64_t v10;
  double v11;
  double v12;
  __CVBuffer *v14;
  uint64_t v15;
  uint64_t result;

  v11 = *(double *)(v10 + 136);
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = *(double *)(v10 + 144);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v12 < 9.22337204e18)
  {
    v14 = *a10;
    CVPixelBufferLockBaseAddress(*a10, 0);
    CVPixelBufferGetBaseAddress(v14);
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferGetBaseAddress(a2);
    v15 = sub_2215DDC80(0, &qword_2556DA408);
    MEMORY[0x24BDAC7A8](v15);
    sub_221653660();
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return CVPixelBufferUnlockBaseAddress(*a10, 0);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_2215E3314(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 != (result * a2) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  v9 = v8 + a2;
  if (__OFADD__(v8, a2))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v11 = v8 * a3;
  if ((unsigned __int128)(v8 * (__int128)a3) >> 64 != v11 >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v12 = v9 * a3;
  if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v12 < v11)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 == v12)
    return result;
  if (v11 >= v12)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v17 = a3 * a2;
  do
  {
    v18 = v11 + 1;
    v19 = 4 * v11;
    result = a5(*(unsigned int *)(a7 + 4 * v11), a8);
    *(_DWORD *)(a4 + v19) = result;
    v11 = v18;
    --v17;
  }
  while (v17);
  return result;
}

void *ImageProcessor.getPixelBufferAddress(pixelBuffer:)(__CVBuffer *a1)
{
  void *BaseAddress;

  CVPixelBufferLockBaseAddress(a1, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return BaseAddress;
}

Swift::UInt32_optional __swiftcall ImageProcessor.getPixel(imageX:imageY:invertY:)(Swift::Int imageX, Swift::Int imageY, Swift::Bool invertY)
{
  uint64_t v3;
  double v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  double v9;
  Swift::Int v10;
  Swift::Int v11;
  BOOL v12;
  Swift::Int v13;

  if (imageX < 0)
    goto LABEL_17;
  v4 = *(double *)(v3 + 136);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v5 = imageX;
  v6 = 0;
  v7 = (uint64_t)v4;
  v8 = 1;
  if ((uint64_t)v4 <= imageX || imageY < 0)
    return (Swift::UInt32_optional)(v6 | ((unint64_t)v8 << 32));
  v9 = *(double *)(v3 + 144);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
    goto LABEL_22;
  if (v9 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((uint64_t)v9 <= imageY)
  {
LABEL_17:
    v6 = 0;
    v8 = 1;
    return (Swift::UInt32_optional)(v6 | ((unint64_t)v8 << 32));
  }
  if (invertY)
    v10 = (uint64_t)v9 + ~imageY;
  else
    v10 = imageY;
  imageX = (Swift::Int)ImageProcessor.scaledPixels.getter();
  v11 = v10 * v7;
  if ((unsigned __int128)(v10 * (__int128)v7) >> 64 != (v10 * v7) >> 63)
    goto LABEL_25;
  v12 = __OFADD__(v11, v5);
  v13 = v11 + v5;
  if (v12)
  {
LABEL_26:
    __break(1u);
    return (Swift::UInt32_optional)imageX;
  }
  v8 = 0;
  v6 = *(unsigned int *)(imageX + 4 * v13);
  return (Swift::UInt32_optional)(v6 | ((unint64_t)v8 << 32));
}

CGPoint __swiftcall ImageProcessor.frameNormalize(screenPoint:)(CGPoint screenPoint)
{
  uint64_t v1;
  double y;
  double v3;
  double v4;
  CGPoint result;

  y = screenPoint.y;
  v3 = screenPoint.x / ImageProcessor.viewportSize.getter();
  v4 = y / *(double *)(v1 + 96);
  result.y = v4;
  result.x = v3;
  return result;
}

id *ImageProcessor.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ImageProcessor.__deallocating_deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2215E3650(uint64_t a1)
{
  uint64_t v1;

  return sub_2215E3314(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(_QWORD, uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

id sub_2215E3694@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 152);
  *a2 = v4;
  return v4;
}

uint64_t type metadata accessor for ImageProcessor()
{
  return objc_opt_self();
}

uint64_t sub_2215E36FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DADE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static LineUtil.line2i(of:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  _BYTE v7[40];

  sub_2215E4074((uint64_t)v7, a2, a3, a4, a5);
  return sub_2215C6540((uint64_t)v7, a1, &qword_2556D9FF8);
}

uint64_t static LineUtil.getLinePoints(line:points:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_2215E429C(a1, a2, a3, a4, a5);
  return swift_bridgeObjectRetain();
}

double static LineUtil.getIntersection(line1:line2:)(double result, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v8 = a3 - result;
  v9 = a8 - a6;
  v10 = a4 - a2;
  v11 = a7 - a5;
  v12 = v8 * v9 - v10 * v11;
  if (v12 != 0.0)
  {
    v13 = a5 - result;
    v14 = a6 - a2;
    v15 = (v10 * v13 - v8 * v14) / v12;
    if (v15 <= 1.0 && v15 >= 0.0)
    {
      v16 = (v13 * v9 - v14 * v11) / v12;
      if (v16 >= 0.0 && v16 <= 1.0)
        return v8 * v16 + result;
    }
  }
  return result;
}

uint64_t static LineUtil.getIntersection(line:rect:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  _BYTE v11[40];

  sub_2215E4360((uint64_t)v11, a2, a3, a4, a5, a6, a7, a8, a9);
  return sub_2215C6540((uint64_t)v11, a1, &qword_2556DADF0);
}

uint64_t static LineUtil.drawLine(x0:y0:x1:y1:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a2;
  v7 = result;
  if (v5 < 0)
  {
    v8 = __OFSUB__(0, v5);
    v5 = a2 - a4;
    if (v8)
      goto LABEL_18;
  }
  v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (v9 < 0)
  {
    v8 = __OFSUB__(0, v9);
    v9 = result - a3;
    if (v8)
      goto LABEL_19;
  }
  if (v5 >= v9)
  {
    if (a4 < a2)
    {
      result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    return sub_2215E47D4(result, a2, a3, a4, a5);
  }
  else
  {
    if (a3 < result)
    {
      result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    return sub_2215E46C4(result, a2, a3, a4, a5);
  }
}

uint64_t static LineUtil.drawLine(p1:p2:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a2;
  v7 = result;
  if (v5 < 0)
  {
    v8 = __OFSUB__(0, v5);
    v5 = a2 - a4;
    if (v8)
      goto LABEL_18;
  }
  v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (v9 < 0)
  {
    v8 = __OFSUB__(0, v9);
    v9 = result - a3;
    if (v8)
      goto LABEL_19;
  }
  if (v5 >= v9)
  {
    if (a4 < a2)
    {
      result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    return sub_2215E47D4(result, a2, a3, a4, a5);
  }
  else
  {
    if (a3 < result)
    {
      result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    return sub_2215E46C4(result, a2, a3, a4, a5);
  }
}

uint64_t static LineUtil.getLinePoints(p1:p2:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = result;
  v9 = a4 - a2;
  if (v4 < 0)
  {
    v9 = a2 - a4;
    if (__OFSUB__(0, v4))
      goto LABEL_116;
  }
  v10 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  v11 = a3 - result;
  if (v10 < 0)
  {
    v11 = result - a3;
    if (__OFSUB__(0, v10))
      goto LABEL_117;
  }
  if (v9 >= v11)
  {
    if (a4 < a2)
    {
      if (result >= a3)
      {
        if (__OFSUB__(result, a3))
        {
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }
        v13 = a2 - a4;
        if (__OFSUB__(a2, a4))
        {
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
        v47 = 1;
        v10 = result - a3;
      }
      else
      {
        v13 = a2 - a4;
        if (__OFSUB__(a2, a4))
        {
LABEL_127:
          __break(1u);
          goto LABEL_128;
        }
        v47 = -1;
      }
      if (v10 + 0x4000000000000000 >= 0)
      {
        v16 = 2 * v10;
        v17 = 2 * v10 - v13;
        if (!__OFSUB__(2 * v10, v13))
        {
          v18 = v13 + 0x4000000000000000;
          v19 = 2 * v13;
          v20 = MEMORY[0x24BEE4AF8];
          while (1)
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_2215D6C00(0, *(_QWORD *)(v20 + 16) + 1, 1, (char *)v20);
              v20 = result;
            }
            v22 = *(_QWORD *)(v20 + 16);
            v21 = *(_QWORD *)(v20 + 24);
            if (v22 >= v21 >> 1)
            {
              result = (uint64_t)sub_2215D6C00((char *)(v21 > 1), v22 + 1, 1, (char *)v20);
              v20 = result;
            }
            *(_QWORD *)(v20 + 16) = v22 + 1;
            v23 = v20 + 16 * v22;
            *(_QWORD *)(v23 + 32) = v6;
            *(_QWORD *)(v23 + 40) = v5;
            if (v17 >= 1)
            {
              v24 = __OFADD__(v6, v47);
              v6 += v47;
              if (v24)
                goto LABEL_102;
              if (v18 < 0)
                goto LABEL_103;
              v24 = __OFSUB__(v17, v19);
              v17 -= v19;
              if (v24)
                goto LABEL_104;
            }
            v24 = __OFADD__(v17, v16);
            v17 += v16;
            if (v24)
              goto LABEL_96;
            if (v7 == v5)
              return v20;
            v24 = __OFADD__(v5++, 1);
            if (v24)
              goto LABEL_98;
          }
        }
        goto LABEL_122;
      }
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (a3 >= result)
    {
      v15 = 1;
    }
    else
    {
      v10 = result - a3;
      if (__OFSUB__(result, a3))
      {
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      v15 = -1;
    }
    v49 = v15;
    if (v10 + 0x4000000000000000 >= 0)
    {
      v32 = 2 * v10;
      v33 = 2 * v10 - v4;
      if (!__OFSUB__(2 * v10, v4))
      {
        v34 = v4 + 0x4000000000000000;
        v35 = 2 * v4;
        v20 = MEMORY[0x24BEE4AF8];
        while (1)
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_2215D6C00(0, *(_QWORD *)(v20 + 16) + 1, 1, (char *)v20);
            v20 = result;
          }
          v37 = *(_QWORD *)(v20 + 16);
          v36 = *(_QWORD *)(v20 + 24);
          if (v37 >= v36 >> 1)
          {
            result = (uint64_t)sub_2215D6C00((char *)(v36 > 1), v37 + 1, 1, (char *)v20);
            v20 = result;
          }
          *(_QWORD *)(v20 + 16) = v37 + 1;
          v38 = v20 + 16 * v37;
          *(_QWORD *)(v38 + 32) = v8;
          *(_QWORD *)(v38 + 40) = v7;
          if (v33 >= 1)
          {
            v24 = __OFADD__(v8, v49);
            v8 += v49;
            if (v24)
              goto LABEL_108;
            if (v34 < 0)
              goto LABEL_109;
            v24 = __OFSUB__(v33, v35);
            v33 -= v35;
            if (v24)
              goto LABEL_110;
          }
          v24 = __OFADD__(v33, v32);
          v33 += v32;
          if (v24)
            goto LABEL_95;
          if (v5 == v7)
            return v20;
          v24 = __OFADD__(v7++, 1);
          if (v24)
            goto LABEL_100;
        }
      }
      goto LABEL_124;
    }
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  if (a3 >= result)
  {
    if (a4 >= a2)
    {
      v14 = 1;
    }
    else
    {
      v4 = a2 - a4;
      if (__OFSUB__(a2, a4))
      {
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
      v14 = -1;
    }
    v48 = v14;
    if (v4 + 0x4000000000000000 < 0)
      goto LABEL_119;
    v25 = 2 * v4;
    v26 = 2 * v4 - v10;
    if (__OFSUB__(2 * v4, v10))
    {
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    v27 = v10 + 0x4000000000000000;
    v28 = 2 * v10;
    v20 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_2215D6C00(0, *(_QWORD *)(v20 + 16) + 1, 1, (char *)v20);
        v20 = result;
      }
      v30 = *(_QWORD *)(v20 + 16);
      v29 = *(_QWORD *)(v20 + 24);
      if (v30 >= v29 >> 1)
      {
        result = (uint64_t)sub_2215D6C00((char *)(v29 > 1), v30 + 1, 1, (char *)v20);
        v20 = result;
      }
      *(_QWORD *)(v20 + 16) = v30 + 1;
      v31 = v20 + 16 * v30;
      *(_QWORD *)(v31 + 32) = v8;
      *(_QWORD *)(v31 + 40) = v7;
      if (v26 >= 1)
      {
        v24 = __OFADD__(v7, v48);
        v7 += v48;
        if (v24)
          goto LABEL_105;
        if (v27 < 0)
          goto LABEL_106;
        v24 = __OFSUB__(v26, v28);
        v26 -= v28;
        if (v24)
          goto LABEL_107;
      }
      v24 = __OFADD__(v26, v25);
      v26 += v25;
      if (v24)
        break;
      if (v6 == v8)
        return v20;
      v24 = __OFADD__(v8++, 1);
      if (v24)
        goto LABEL_99;
    }
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  v12 = result - a3;
  if (__OFSUB__(result, a3))
  {
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  if (a2 < a4)
  {
    v46 = -1;
    goto LABEL_77;
  }
  if (!__OFSUB__(a2, a4))
  {
    v46 = 1;
    v4 = a2 - a4;
LABEL_77:
    if (v4 + 0x4000000000000000 >= 0)
    {
      v39 = 2 * v4;
      v40 = 2 * v4 - v12;
      if (!__OFSUB__(2 * v4, v12))
      {
        v41 = v12 + 0x4000000000000000;
        v42 = 2 * v12;
        v20 = MEMORY[0x24BEE4AF8];
        while (1)
        {
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_2215D6C00(0, *(_QWORD *)(v20 + 16) + 1, 1, (char *)v20);
            v20 = result;
          }
          v44 = *(_QWORD *)(v20 + 16);
          v43 = *(_QWORD *)(v20 + 24);
          if (v44 >= v43 >> 1)
          {
            result = (uint64_t)sub_2215D6C00((char *)(v43 > 1), v44 + 1, 1, (char *)v20);
            v20 = result;
          }
          *(_QWORD *)(v20 + 16) = v44 + 1;
          v45 = v20 + 16 * v44;
          *(_QWORD *)(v45 + 32) = v6;
          *(_QWORD *)(v45 + 40) = v5;
          if (v40 >= 1)
          {
            v24 = __OFADD__(v5, v46);
            v5 += v46;
            if (v24)
              goto LABEL_111;
            if (v41 < 0)
              goto LABEL_112;
            v24 = __OFSUB__(v40, v42);
            v40 -= v42;
            if (v24)
              goto LABEL_113;
          }
          v24 = __OFADD__(v40, v39);
          v40 += v39;
          if (v24)
            goto LABEL_97;
          if (v8 == v6)
            return v20;
          v24 = __OFADD__(v6++, 1);
          if (v24)
            goto LABEL_101;
        }
      }
      goto LABEL_126;
    }
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
LABEL_132:
  __break(1u);
  return result;
}

uint64_t static LineUtil.getLinePoints(p1:p2:points:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
    __break(1u);
    goto LABEL_16;
  }
  v6 = a2;
  v7 = result;
  if (v5 < 0)
  {
    v8 = __OFSUB__(0, v5);
    v5 = a2 - a4;
    if (v8)
      goto LABEL_17;
  }
  v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v9 < 0)
  {
    v8 = __OFSUB__(0, v9);
    v9 = result - a3;
    if (v8)
      goto LABEL_18;
  }
  if (v5 >= v9)
  {
    if (a4 < a2)
    {
      result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    sub_2215E4A84(result, a2, a3, a4, a5);
  }
  else
  {
    if (a3 < result)
    {
      result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    sub_2215E48F0(result, a2, a3, a4, a5);
  }
  return swift_bridgeObjectRetain();
}

uint64_t static LineUtil.isParallel(_:_:)(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float v10;
  uint64_t v11;

  v2 = (int32x4_t)vmulq_f32(a1, a1);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v5 = vmulq_n_f32(a1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  v6 = (int32x4_t)vmulq_f32(a2, a2);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  v9 = vmulq_f32(v5, vmulq_n_f32(a2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]));
  v9.f32[0] = v9.f32[2] + vaddv_f32(*(float32x2_t *)v9.f32);
  v10 = fabsf(v9.f32[0]);
  if ((float)(v9.f32[0] + 1.0) >= 0.001)
    v11 = 0;
  else
    v11 = -1;
  if (v10 > 0.999)
    return 1;
  else
    return v11;
}

uint64_t LineUtil.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LineUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_2215E4074(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v5;
  BOOL v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double v14;
  double v15;

  if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0)
    goto LABEL_12;
  v5 = round(a2);
  v6 = v5 < -9.22337204e18 || v5 > 9.22337204e18;
  if (v6 || (~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0)
    goto LABEL_12;
  v7 = round(a3);
  v8 = v7 < -9.22337204e18 || v7 > 9.22337204e18;
  if (v8 || (~*(_QWORD *)&a4 & 0x7FF0000000000000) == 0)
    goto LABEL_12;
  v9 = 0;
  v14 = round(a4);
  v13 = 1;
  if (v14 < -9.22337204e18)
    goto LABEL_32;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (v14 > 9.22337204e18)
    goto LABEL_13;
  if ((~*(_QWORD *)&a5 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 1;
LABEL_13:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = v13;
    return;
  }
  v9 = 0;
  v15 = round(a5);
  v13 = 1;
  if (v15 < -9.22337204e18)
  {
LABEL_32:
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_13;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (v15 > 9.22337204e18)
    goto LABEL_13;
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v15 < 9.22337204e18)
  {
    v13 = 0;
    v9 = (uint64_t)v5;
    v10 = (uint64_t)v7;
    v11 = (uint64_t)v14;
    v12 = (uint64_t)v15;
    goto LABEL_13;
  }
LABEL_44:
  __break(1u);
}

uint64_t sub_2215E429C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
    __break(1u);
    goto LABEL_16;
  }
  v7 = a2;
  v8 = result;
  if (v5 < 0)
  {
    v9 = __OFSUB__(0, v5);
    v5 = a2 - a4;
    if (v9)
      goto LABEL_17;
  }
  v10 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v10 < 0)
  {
    v9 = __OFSUB__(0, v10);
    v10 = result - a3;
    if (v9)
      goto LABEL_18;
  }
  if (v5 >= v10)
  {
    if (a4 < a2)
    {
      result = a3;
      a2 = a4;
      a3 = v8;
      a4 = v7;
    }
    sub_2215E4A84(result, a2, a3, a4, a5);
  }
  else
  {
    if (a3 < result)
    {
      result = a3;
      a2 = a4;
      a3 = v8;
      a4 = v7;
    }
    sub_2215E48F0(result, a2, a3, a4, a5);
  }
  return *a5;
}

uint64_t sub_2215E4360@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  _BOOL4 v16;
  uint64_t result;
  int v18;
  char v19;
  __int128 v20;
  double Width;
  double v22;
  CGFloat v23;
  CGFloat v24;
  uint64_t inited;
  uint64_t v26;
  double v27;
  double v28;
  char *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v40;
  double v42;
  double v43;
  uint64_t v44;
  float v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  CGFloat v52;
  __int128 v55;
  CGPoint v56;
  CGPoint v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v58.origin.x = a6;
  v58.origin.y = a7;
  v58.size.width = a8;
  v58.size.height = a9;
  v56.x = a2;
  v56.y = a3;
  v16 = CGRectContainsPoint(v58, v56);
  v59.origin.x = a6;
  v59.origin.y = a7;
  v59.size.width = a8;
  v59.size.height = a9;
  v57.y = a5;
  v57.x = a4;
  result = CGRectContainsPoint(v59, v57);
  v18 = result;
  if (!v16 || !(_DWORD)result)
  {
    v60.origin.x = a6;
    v60.origin.y = a7;
    v60.size.width = a8;
    v60.size.height = a9;
    v52 = CGRectGetWidth(v60) + a6;
    v61.origin.x = a6;
    v61.origin.y = a7;
    v61.size.width = a8;
    v61.size.height = a9;
    Width = CGRectGetWidth(v61);
    v62.origin.x = a6;
    v62.origin.y = a7;
    v62.size.width = a8;
    v62.size.height = a9;
    v22 = Width + a6;
    v23 = CGRectGetHeight(v62) + a7;
    v63.origin.x = a6;
    v63.origin.y = a7;
    v63.size.width = a8;
    v63.size.height = a9;
    v24 = CGRectGetHeight(v63) + a7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DAE90);
    inited = swift_initStackObject();
    v26 = 0;
    *(_OWORD *)(inited + 16) = xmmword_221656B50;
    *(CGFloat *)(inited + 32) = a6;
    *(CGFloat *)(inited + 40) = a7;
    *(CGFloat *)(inited + 48) = v52;
    *(CGFloat *)(inited + 56) = a7 + 0.0;
    *(CGFloat *)(inited + 64) = v52;
    *(CGFloat *)(inited + 72) = a7 + 0.0;
    *(double *)(inited + 80) = v22;
    *(CGFloat *)(inited + 88) = v23;
    *(double *)(inited + 96) = v22;
    *(CGFloat *)(inited + 104) = v23;
    *(CGFloat *)(inited + 112) = a6 + 0.0;
    *(CGFloat *)(inited + 120) = v24;
    *(CGFloat *)(inited + 128) = a6 + 0.0;
    *(CGFloat *)(inited + 136) = v24;
    v27 = a4 - a2;
    v28 = a5 - a3;
    *(CGFloat *)(inited + 144) = a6;
    *(CGFloat *)(inited + 152) = a7;
    v29 = (char *)MEMORY[0x24BEE4AF8];
    do
    {
      v31 = *(double *)(inited + v26 + 32);
      v30 = *(double *)(inited + v26 + 40);
      v32 = *(double *)(inited + v26 + 56) - v30;
      v33 = *(double *)(inited + v26 + 48) - v31;
      v34 = v27 * v32 - v28 * v33;
      if (v34 != 0.0)
      {
        v35 = v31 - a2;
        v36 = v35 * v32;
        v37 = v30 - a3;
        v38 = (v36 - (v30 - a3) * v33) / v34;
        if (v38 >= 0.0 && v38 <= 1.0)
        {
          v40 = (v28 * v35 - v27 * v37) / v34;
          if (v40 >= 0.0 && v40 <= 1.0)
          {
            v42 = v27 * v38 + a2;
            v43 = v28 * v38 + a3;
            v44 = *((_QWORD *)v29 + 2);
            if (!v44
              || (v45 = (*((double *)v29 + 4) - v42) * (*((double *)v29 + 4) - v42),
                  v46 = (*((double *)v29 + 5) - v43) * (*((double *)v29 + 5) - v43),
                  (float)(v45 + v46) > 0.00000011921))
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v29 = sub_2215D6F10(0, v44 + 1, 1, v29);
              v48 = *((_QWORD *)v29 + 2);
              v47 = *((_QWORD *)v29 + 3);
              if (v48 >= v47 >> 1)
                v29 = sub_2215D6F10((char *)(v47 > 1), v48 + 1, 1, v29);
              *((_QWORD *)v29 + 2) = v48 + 1;
              v49 = &v29[16 * v48];
              *((double *)v49 + 4) = v42;
              *((double *)v49 + 5) = v43;
              if (v48 == 1)
                break;
            }
          }
        }
      }
      v26 += 32;
    }
    while (v26 != 128);
    swift_bridgeObjectRelease();
    v50 = *((_QWORD *)v29 + 2);
    if (v50 == 1)
    {
      if (((v16 | v18) & 1) != 0)
      {
        if (!v16)
        {
          a3 = a5;
          a2 = a4;
        }
        v51 = *((_OWORD *)v29 + 2);
        goto LABEL_31;
      }
    }
    else if (v50 == 2)
    {
      a2 = *((double *)v29 + 4);
      a3 = *((double *)v29 + 5);
      v51 = *((_OWORD *)v29 + 3);
LABEL_31:
      v55 = v51;
      result = swift_bridgeObjectRelease();
      v20 = v55;
      v19 = 0;
      goto LABEL_33;
    }
    result = swift_bridgeObjectRelease();
    v20 = 0uLL;
    v19 = 1;
    a2 = 0.0;
    a3 = 0.0;
    goto LABEL_33;
  }
  v19 = 0;
  *(CGFloat *)&v20 = a4;
  *((CGFloat *)&v20 + 1) = a5;
LABEL_33:
  *(CGFloat *)a1 = a2;
  *(CGFloat *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = v20;
  *(_BYTE *)(a1 + 32) = v19;
  return result;
}

uint64_t sub_2215E46C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v5 = a3 - result;
  if (__OFSUB__(a3, result))
    goto LABEL_25;
  v8 = a2;
  v9 = result;
  v10 = a4 - a2;
  if (a4 < a2)
  {
    v10 = a2 - a4;
    if (__OFSUB__(a2, a4))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v11 = -1;
    goto LABEL_7;
  }
  if (!__OFSUB__(a4, a2))
  {
    v11 = 1;
LABEL_7:
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v12 = 2 * v10;
    v13 = 2 * v10 - v5;
    if (__OFSUB__(2 * v10, v5))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (a3 < result)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v14 = v5 + 0x4000000000000000;
    v15 = 2 * v5;
    while (1)
    {
      result = a5(v9, v8);
      if (v13 >= 1)
      {
        v16 = __OFADD__(v8, v11);
        v8 += v11;
        if (v16)
          goto LABEL_22;
        if (v14 < 0)
          goto LABEL_23;
        v16 = __OFSUB__(v13, v15);
        v13 -= v15;
        if (v16)
          goto LABEL_24;
      }
      v16 = __OFADD__(v13, v12);
      v13 += v12;
      if (v16)
        break;
      if (a3 == v9)
        return result;
      v16 = __OFADD__(v9++, 1);
      if (v16)
      {
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2215E47D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v7 = a2;
  v8 = result;
  v9 = a3 - result;
  if (a3 < result)
  {
    v9 = result - a3;
    if (__OFSUB__(result, a3))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v10 = a4 - a2;
    if (__OFSUB__(a4, a2))
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v11 = -1;
LABEL_8:
    if (v9 + 0x4000000000000000 >= 0)
    {
      v12 = 2 * v9;
      v13 = 2 * v9 - v10;
      if (__OFSUB__(2 * v9, v10))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (a4 < a2)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v14 = v10 + 0x4000000000000000;
      v15 = 2 * v10;
      while (1)
      {
        result = a5(v8, v7);
        if (v13 >= 1)
        {
          v16 = __OFADD__(v8, v11);
          v8 += v11;
          if (v16)
            goto LABEL_23;
          if (v14 < 0)
            goto LABEL_24;
          v16 = __OFSUB__(v13, v15);
          v13 -= v15;
          if (v16)
            goto LABEL_25;
        }
        v16 = __OFADD__(v13, v12);
        v13 += v12;
        if (v16)
          break;
        if (a4 == v7)
          return result;
        v16 = __OFADD__(v7++, 1);
        if (v16)
        {
          __break(1u);
          return result;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
  if (__OFSUB__(a3, result))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = a4 - a2;
  if (!__OFSUB__(a4, a2))
  {
    v11 = 1;
    goto LABEL_8;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_2215E48F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a3 - result;
  if (__OFSUB__(a3, result))
    goto LABEL_30;
  v8 = a2;
  v9 = result;
  v10 = a4 - a2;
  if (a4 < a2)
  {
    v10 = a2 - a4;
    if (__OFSUB__(a2, a4))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v11 = -1;
    goto LABEL_7;
  }
  if (!__OFSUB__(a4, a2))
  {
    v11 = 1;
LABEL_7:
    v21 = v11;
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v12 = 2 * v10;
    v13 = 2 * v10 - v5;
    if (__OFSUB__(2 * v10, v5))
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (a3 < result)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v20 = v5 + 0x4000000000000000;
    v14 = 2 * v5;
    v15 = *a5;
    while (1)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v15;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_2215D6C00(0, *(_QWORD *)(v15 + 16) + 1, 1, (char *)v15);
        v15 = result;
        *a5 = result;
      }
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_2215D6C00((char *)(v16 > 1), v17 + 1, 1, (char *)v15);
        v15 = result;
      }
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v18 = v15 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v9;
      *(_QWORD *)(v18 + 40) = v8;
      *a5 = v15;
      if (v13 >= 1)
      {
        v19 = __OFADD__(v8, v21);
        v8 += v21;
        if (v19)
          goto LABEL_27;
        if (v20 < 0)
          goto LABEL_28;
        v19 = __OFSUB__(v13, v14);
        v13 -= v14;
        if (v19)
          goto LABEL_29;
      }
      v19 = __OFADD__(v13, v12);
      v13 += v12;
      if (v19)
        break;
      if (a3 == v9)
        return result;
      v19 = __OFADD__(v9++, 1);
      if (v19)
        goto LABEL_26;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_2215E4A84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v7 = a2;
  v8 = result;
  v9 = a3 - result;
  if (a3 < result)
  {
    v9 = result - a3;
    if (__OFSUB__(result, a3))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v10 = a4 - a2;
    if (__OFSUB__(a4, a2))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    v11 = -1;
LABEL_8:
    v21 = v11;
    if (v9 + 0x4000000000000000 >= 0)
    {
      v12 = 2 * v9;
      v13 = 2 * v9 - v10;
      if (__OFSUB__(2 * v9, v10))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if (a4 < a2)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      v20 = v10 + 0x4000000000000000;
      v14 = 2 * v10;
      v15 = *a5;
      while (1)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        *a5 = v15;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_2215D6C00(0, *(_QWORD *)(v15 + 16) + 1, 1, (char *)v15);
          v15 = result;
          *a5 = result;
        }
        v17 = *(_QWORD *)(v15 + 16);
        v16 = *(_QWORD *)(v15 + 24);
        if (v17 >= v16 >> 1)
        {
          result = (uint64_t)sub_2215D6C00((char *)(v16 > 1), v17 + 1, 1, (char *)v15);
          v15 = result;
        }
        *(_QWORD *)(v15 + 16) = v17 + 1;
        v18 = v15 + 16 * v17;
        *(_QWORD *)(v18 + 32) = v8;
        *(_QWORD *)(v18 + 40) = v7;
        *a5 = v15;
        if (v13 >= 1)
        {
          v19 = __OFADD__(v8, v21);
          v8 += v21;
          if (v19)
            goto LABEL_28;
          if (v20 < 0)
            goto LABEL_29;
          v19 = __OFSUB__(v13, v14);
          v13 -= v14;
          if (v19)
            goto LABEL_30;
        }
        v19 = __OFADD__(v13, v12);
        v13 += v12;
        if (v19)
          break;
        if (a4 == v7)
          return result;
        v19 = __OFADD__(v7++, 1);
        if (v19)
          goto LABEL_27;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
    __break(1u);
    goto LABEL_32;
  }
  if (__OFSUB__(a3, result))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v10 = a4 - a2;
  if (!__OFSUB__(a4, a2))
  {
    v11 = 1;
    goto LABEL_8;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LineUtil()
{
  return objc_opt_self();
}

uint64_t *LocalPlaneDetector.DebuggerClass.unsafeMutableAddressor()
{
  return &static LocalPlaneDetector.DebuggerClass;
}

uint64_t static LocalPlaneDetector.DebuggerClass.getter()
{
  swift_beginAccess();
  return static LocalPlaneDetector.DebuggerClass;
}

uint64_t static LocalPlaneDetector.DebuggerClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_beginAccess();
  static LocalPlaneDetector.DebuggerClass = a1;
  qword_2556E44D0 = a2;
  return result;
}

uint64_t (*static LocalPlaneDetector.DebuggerClass.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float LocalPlaneDetector.defaultPlaneRadius.getter()
{
  return 0.05;
}

double LocalPlaneDetector.defaultPlaneExtent.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
    return *(double *)(v0 + 32);
  *(int64x2_t *)(v0 + 32) = vdupq_n_s64(0x3FB99999A0000000uLL);
  *(_BYTE *)(v0 + 48) = 0;
  return 0.100000001;
}

float sub_2215E4D68()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 64) & 1) == 0)
    return *(float *)(v0 + 60);
  *(_DWORD *)(v0 + 60) = 1060439283;
  *(_BYTE *)(v0 + 64) = 0;
  return 0.70711;
}

double sub_2215E4D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  double v3;
  double result;
  double v5;

  if ((*(_BYTE *)(v0 + 88) & 1) == 0)
    return *(double *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 104);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  result = v3 * 0.5;
  *(double *)(v0 + 72) = v3 * 0.5;
  *(double *)(v0 + 80) = v5 * 0.5;
  *(_BYTE *)(v0 + 88) = 0;
  return result;
}

float sub_2215E4DF0()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 176) & 1) == 0)
    return *(float *)(v0 + 172);
  *(_DWORD *)(v0 + 172) = 1065289374;
  *(_BYTE *)(v0 + 176) = 0;
  return 0.99619;
}

__n128 sub_2215E4E18@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v3 = *a1;
  v4 = *a1 + 320;
  swift_beginAccess();
  v5 = *(_BYTE *)(v4 + 112);
  v6 = *(_OWORD *)(v3 + 336);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 320);
  *(_OWORD *)(a2 + 16) = v6;
  v7 = *(_OWORD *)(v3 + 368);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 352);
  *(_OWORD *)(a2 + 48) = v7;
  v8 = *(_OWORD *)(v3 + 400);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 384);
  *(_OWORD *)(a2 + 80) = v8;
  result = *(__n128 *)(v3 + 416);
  *(__n128 *)(a2 + 96) = result;
  *(_BYTE *)(a2 + 112) = v5;
  return result;
}

__n128 sub_2215E4E88(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v11 = a1[1];
  v12 = *a1;
  v9 = a1[3];
  v10 = a1[2];
  v7 = (__n128)a1[5];
  v8 = a1[4];
  v2 = *((_QWORD *)a1 + 12);
  v3 = *((_QWORD *)a1 + 13);
  v4 = *((_BYTE *)a1 + 112);
  v5 = *a2;
  swift_beginAccess();
  *(_OWORD *)(v5 + 320) = v12;
  *(_OWORD *)(v5 + 336) = v11;
  *(_OWORD *)(v5 + 352) = v10;
  *(_OWORD *)(v5 + 368) = v9;
  result = v7;
  *(_OWORD *)(v5 + 384) = v8;
  *(__n128 *)(v5 + 400) = v7;
  *(_QWORD *)(v5 + 416) = v2;
  *(_QWORD *)(v5 + 424) = v3;
  *(_BYTE *)(v5 + 432) = v4;
  return result;
}

__n128 LocalPlaneDetector.localPlane.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 432);
  v4 = *(_OWORD *)(v1 + 336);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 320);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(v1 + 368);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 352);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(v1 + 400);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 384);
  *(_OWORD *)(a1 + 80) = v6;
  result = *(__n128 *)(v1 + 416);
  *(__n128 *)(a1 + 96) = result;
  *(_BYTE *)(a1 + 112) = v3;
  return result;
}

uint64_t LocalPlaneDetector.debugOptions.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 448) != 1)
    return *(_QWORD *)(v0 + 440);
  if (qword_2556D8E00 != -1)
    swift_once();
  swift_beginAccess();
  result = static LocalPlaneDetector.DebugOptions.default;
  *(_QWORD *)(v0 + 440) = static LocalPlaneDetector.DebugOptions.default;
  *(_BYTE *)(v0 + 448) = 0;
  return result;
}

uint64_t *LocalPlaneDetector.DebugOptions.default.unsafeMutableAddressor()
{
  if (qword_2556D8E00 != -1)
    swift_once();
  return &static LocalPlaneDetector.DebugOptions.default;
}

uint64_t LocalPlaneDetector.debugOptions.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 440) = result;
  *(_BYTE *)(v1 + 448) = 0;
  return result;
}

_QWORD *(*LocalPlaneDetector.debugOptions.modify(uint64_t *a1))(_QWORD *result)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = LocalPlaneDetector.debugOptions.getter();
  return sub_2215E50A0;
}

_QWORD *sub_2215E50A0(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 440) = *result;
  *(_BYTE *)(v1 + 448) = 0;
  return result;
}

uint64_t LocalPlaneDetector.__allocating_init(sceneView:)(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  LocalPlaneDetector.init(sceneView:)(a1, a2);
  return v4;
}

uint64_t LocalPlaneDetector.init(sceneView:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  double (*v9)(uint64_t, uint64_t);
  id v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(id, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  CGRect v27;

  v3 = v2;
  *(_DWORD *)(v2 + 24) = 1028443341;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 1;
  *(_QWORD *)(v2 + 52) = 0x3F490FDB3DB2B8C2;
  *(_DWORD *)(v2 + 60) = 0;
  *(_BYTE *)(v2 + 64) = 1;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  type metadata accessor for PlaneSolver();
  swift_allocObject();
  v6 = sub_221608FA4();
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 112) = v6;
  *(_QWORD *)(v2 + 120) = v7;
  *(_QWORD *)(v2 + 128) = v7;
  *(_QWORD *)(v2 + 136) = v7;
  *(_OWORD *)(v2 + 144) = xmmword_221656C30;
  *(_QWORD *)(v2 + 160) = 0x38D1B7173F000000;
  *(_QWORD *)(v2 + 168) = 1035122882;
  *(_BYTE *)(v2 + 176) = 1;
  *(_QWORD *)(v2 + 180) = 0x3F7C1C5C3D23D70BLL;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_BYTE *)(v2 + 224) = 1;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_BYTE *)(v2 + 304) = 1;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_WORD *)(v2 + 432) = 257;
  *(_QWORD *)(v2 + 440) = 0;
  *(_BYTE *)(v2 + 448) = 1;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  ObjectType = swift_getObjectType();
  v9 = *(double (**)(uint64_t, uint64_t))(a2 + 8);
  v10 = a1;
  v27.origin.x = v9(ObjectType, a2);
  v11 = CGRectGetWidth(v27) * 0.25;
  *(float *)(v2 + 16) = v11;
  *(float *)(v2 + 20) = v11 * v11;
  swift_beginAccess();
  v12 = static LocalPlaneDetector.DebuggerClass;
  if (static LocalPlaneDetector.DebuggerClass)
  {
    v13 = qword_2556E44D0;
    v14 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(qword_2556E44D0 + 8);
    v15 = sub_221653714();
    v23[1] = v23;
    v16 = *(_QWORD *)(v15 - 8);
    MEMORY[0x24BDAC7A8](v15);
    v18 = (char *)v23 - v17;
    v19 = v10;
    swift_retain();
    v14(v19, a2, v3, v12, v13);
    v20 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v12) != 1)
    {
      *((_QWORD *)&v25 + 1) = v12;
      v26 = v13;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
      (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 32))(boxed_opaque_existential_1, v18, v12);

      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  else
  {

  }
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
LABEL_7:
  swift_beginAccess();
  sub_2215E6E5C((uint64_t)&v24, v3 + 456);
  swift_endAccess();
  return v3;
}

void LocalPlaneDetector.detectPlane(with:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  __int128 v7;
  float32x4_t v8;
  float32x4_t v9;
  __n128 v10;
  char **v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  CGFloat v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float *i;
  float64x2_t v28;
  float v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  id v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char **p_attr;
  double v48;
  double v49;
  _QWORD *v50;
  unint64_t v51;
  char v52;
  const void *v53;
  const void *v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t *v58;
  double v59;
  double v60;
  _QWORD *v61;
  unint64_t v62;
  char v63;
  const void *v64;
  const void *v65;
  int v66;
  float32x2_t v67;
  float32x2_t v68;
  float v69;
  BOOL v70;
  float64x2_t v71;
  char *v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  char *v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  float v84;
  uint64_t v85;
  float v86;
  double v87;
  double v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x2_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float v98;
  float v99;
  __int128 v100;
  float32x4_t v101;
  float32x4_t v102;
  __int128 v103;
  float v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  _DWORD *v124;
  __n128 v125;
  float32x4_t v126;
  __int128 v127;
  float32x4_t v128;
  char **v129;
  uint64_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  _BYTE v141[496];
  float32x4_t v142;
  float32x2_t v143;
  _OWORD __dst[31];
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE v152[24];
  uint64_t v153;
  __C::CGRect v154;

  v3 = v2;
  v6 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v6, sel_transform);
  v126 = v8;
  v127 = v7;
  v128 = v9;
  v125 = v10;
  v11 = (char **)(v2 + 120);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *(_QWORD *)(v2 + 120);
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_2215C1234(0, *(_QWORD *)(v13 + 16));
  }
  else
  {
    *v11 = (char *)sub_2215E6F00(0, *(_QWORD *)(v13 + 24) >> 1, &qword_2556DA0D0);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  v14 = (_QWORD *)(v2 + 136);
  swift_beginAccess();
  v15 = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v3 + 136);
  v129 = (char **)(v3 + 136);
  if (v15)
  {
    sub_2215C1338(0, *(_QWORD *)(v16 + 16));
  }
  else
  {
    *v14 = sub_2215E6FF0(0, *(_QWORD *)(v16 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  v17 = sub_2215E4D90();
  v19 = v18;
  v20 = *(float *)(v3 + 16);
  if (objc_msgSend((id)objc_opt_self(), sel_jasperAvailable))
  {
    if (qword_2556D8EB0 != -1)
      swift_once();
    v21 = static MeasureCore.shared;
    swift_beginAccess();
    if (*(_QWORD *)(v21 + 112))
    {
      v22 = v20;
      swift_retain();
      v154.origin.x = v17 - v22 * 0.5;
      v154.origin.y = v19 - v22 * 0.5;
      v154.size.width = v22;
      v154.size.height = v22;
      v23 = (unint64_t)DepthProcessor.getJasperPointsInQuad(searchArea:requestedMinConfidence:in:)(v154, 0.7, (ARFrame)a1);
      swift_release();
      if (v23)
      {
        v122 = v6;
        v24 = *(_QWORD *)(v23 + 16);
        if (v24)
        {
          v25 = *(float *)(v3 + 20);
          v26 = v24 - 1;
          for (i = (float *)(v23 + 64); ; i += 12)
          {
            v28 = vsubq_f64(*(float64x2_t *)(i - 4), *(float64x2_t *)(v3 + 72));
            if (vaddv_f32(vcvt_f32_f64(vmulq_f64(v28, v28))) > v25)
            {
              if (!v26)
                break;
            }
            else
            {
              v137 = *(int32x4_t *)(i - 8);
              v29 = *i;
              v30 = *v11;
              v31 = swift_isUniquelyReferenced_nonNull_native();
              *v11 = v30;
              if ((v31 & 1) == 0)
              {
                v30 = sub_2215D7110(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
                *v11 = v30;
              }
              v33 = *((_QWORD *)v30 + 2);
              v32 = *((_QWORD *)v30 + 3);
              if (v33 >= v32 >> 1)
              {
                v30 = sub_2215D7110((char *)(v32 > 1), v33 + 1, 1, v30);
                *v11 = v30;
              }
              *((_QWORD *)v30 + 2) = v33 + 1;
              *(int32x4_t *)&v30[16 * v33 + 32] = v137;
              v34 = *v129;
              v35 = swift_isUniquelyReferenced_nonNull_native();
              *v129 = v34;
              if ((v35 & 1) == 0)
              {
                v34 = sub_2215D711C(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
                *v129 = v34;
              }
              v37 = *((_QWORD *)v34 + 2);
              v36 = *((_QWORD *)v34 + 3);
              if (v37 >= v36 >> 1)
              {
                v34 = sub_2215D711C((char *)(v36 > 1), v37 + 1, 1, v34);
                *v129 = v34;
              }
              *((_QWORD *)v34 + 2) = v37 + 1;
              *(float *)&v34[4 * v37 + 32] = 1.0 - v29;
              if (*((_QWORD *)*v11 + 2) == 50 || v26 == 0)
                break;
            }
            --v26;
          }
        }
        swift_bridgeObjectRelease();
        v6 = v122;
      }
    }
  }
  v39 = objc_msgSend(a1, sel_rawFeaturePoints);
  if (v39)
  {
    v40 = v39;
    v41 = sub_221653600();

    v42 = objc_msgSend(a1, sel_rawFeaturePoints);
    if (v42
      && (v43 = v42, v44 = objc_msgSend(v42, sel_vergenceAngleCosines), v43, (v124 = v44) != 0)
      && (v45 = *(_QWORD *)(v41 + 16)) != 0)
    {
      v121 = a2;
      v46 = 0;
      v130 = v45 - 1;
      p_attr = &stru_24E72FFF8.attr;
      v123 = v41;
      while (1)
      {
        v138 = *(float32x4_t *)(v41 + 16 * v46 + 32);
        swift_beginAccess();
        os_unfair_lock_lock((os_unfair_lock_t)&unk_2556DD830);
        swift_endAccess();
        if (qword_2556D8EE0 != -1)
          swift_once();
        objc_msgSend(a1, p_attr[371], v121);
        v49 = v48;
        swift_beginAccess();
        v50 = off_2556DD838;
        if (*((_QWORD *)off_2556DD838 + 2) && (v51 = sub_2215CA488(v49), (v52 & 1) != 0))
        {
          v53 = (const void *)(v50[7] + 496 * v51);
          memcpy(__dst, v53, sizeof(__dst));
          v54 = v53;
          p_attr = (char **)(&stru_24E72FFF8 + 8);
          memmove(&v145, v54, 0x1F0uLL);
          nullsub_1(&v145);
          sub_2215D2034((uint64_t)__dst);
        }
        else
        {
          sub_2215E731C(&v145);
        }
        sub_2215C6540((uint64_t)&v145, (uint64_t)v152, &qword_2556DAEA8);
        swift_endAccess();
        swift_beginAccess();
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_2556DD830);
        swift_endAccess();
        sub_2215C6540((uint64_t)v152, (uint64_t)&v145, &qword_2556DAEA8);
        if (sub_2215E7364((uint64_t *)&v145) == 1)
        {
          v55 = (float32x4_t *)MEMORY[0x24BDAEE00];
          v56 = (float32x4_t *)(MEMORY[0x24BDAEE00] + 48);
          v57 = (float32x4_t *)(MEMORY[0x24BDAEE00] + 32);
          v58 = (float32x4_t *)(MEMORY[0x24BDAEE00] + 16);
        }
        else
        {
          sub_2215E737C((uint64_t)v152);
          v58 = (float32x4_t *)&v149;
          v55 = (float32x4_t *)&v148;
          v56 = (float32x4_t *)&v151;
          v57 = (float32x4_t *)&v150;
        }
        v133 = *v57;
        v134 = *v56;
        v131 = *v55;
        v132 = *v58;
        swift_beginAccess();
        os_unfair_lock_lock((os_unfair_lock_t)&unk_2556DD830);
        swift_endAccess();
        objc_msgSend(a1, p_attr[371]);
        v60 = v59;
        swift_beginAccess();
        v61 = off_2556DD838;
        if (*((_QWORD *)off_2556DD838 + 2) && (v62 = sub_2215CA488(v60), (v63 & 1) != 0))
        {
          v64 = (const void *)(v61[7] + 496 * v62);
          memcpy(v141, v64, sizeof(v141));
          v65 = v64;
          p_attr = (char **)(&stru_24E72FFF8 + 8);
          memmove(&v142, v65, 0x1F0uLL);
          nullsub_1(&v142);
          sub_2215D2034((uint64_t)v141);
        }
        else
        {
          sub_2215E731C(&v142);
        }
        sub_2215C6540((uint64_t)&v142, (uint64_t)__dst, &qword_2556DAEA8);
        swift_endAccess();
        swift_beginAccess();
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_2556DD830);
        swift_endAccess();
        sub_2215C6540((uint64_t)__dst, (uint64_t)&v142, &qword_2556DAEA8);
        v66 = sub_2215E7364((uint64_t *)&v142);
        v67 = 0;
        if (v66 != 1)
        {
          sub_2215E737C((uint64_t)__dst);
          v67 = v143;
        }
        v68 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v138, v131, v132, v133, v134, v67);
        v70 = (LODWORD(v69) & 0x7FFFFF) != 0 && (~LODWORD(v69) & 0x7F800000) == 0;
        if (v69 >= 0.0 && v69 <= 1.0 && !v70)
        {
          v71 = vsubq_f64(vcvtq_f64_f32(v68), *(float64x2_t *)(v3 + 72));
          if (vaddv_f32(vcvt_f32_f64(vmulq_f64(v71, v71))) <= *(float *)(v3 + 20))
          {
            v72 = *v11;
            v73 = swift_isUniquelyReferenced_nonNull_native();
            *v11 = v72;
            if ((v73 & 1) == 0)
            {
              v72 = sub_2215D7110(0, *((_QWORD *)v72 + 2) + 1, 1, v72);
              *v11 = v72;
            }
            v75 = *((_QWORD *)v72 + 2);
            v74 = *((_QWORD *)v72 + 3);
            if (v75 >= v74 >> 1)
            {
              v72 = sub_2215D7110((char *)(v74 > 1), v75 + 1, 1, v72);
              *v11 = v72;
            }
            *((_QWORD *)v72 + 2) = v75 + 1;
            *(float32x4_t *)&v72[16 * v75 + 32] = v138;
            v76 = v124[v46];
            v77 = *v129;
            v78 = swift_isUniquelyReferenced_nonNull_native();
            *v129 = v77;
            if ((v78 & 1) == 0)
            {
              v77 = sub_2215D711C(0, *((_QWORD *)v77 + 2) + 1, 1, v77);
              *v129 = v77;
            }
            v80 = *((_QWORD *)v77 + 2);
            v79 = *((_QWORD *)v77 + 3);
            if (v80 >= v79 >> 1)
            {
              v77 = sub_2215D711C((char *)(v79 > 1), v80 + 1, 1, v77);
              *v129 = v77;
            }
            *((_QWORD *)v77 + 2) = v80 + 1;
            *(_DWORD *)&v77[4 * v80 + 32] = v76;
            v41 = v123;
            p_attr = (char **)(&stru_24E72FFF8 + 8);
            if (*((_QWORD *)*v11 + 2) == 50)
              break;
          }
        }
        if (v130 == v46)
          break;
        ++v46;
      }
      swift_bridgeObjectRelease();
      a2 = v121;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v81 = (uint64_t)*v11;
  if (*((_QWORD *)*v11 + 2) < 4uLL)
    goto LABEL_75;
  v82 = *(_QWORD *)(v3 + 136);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PlaneSolver.detectPlane(data:vergenceAngleCosines:pointOfView:camera:bestData:)(v81, v82, v6, (uint64_t *)(v3 + 128), &v142, v126, v128, v125);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2215C6540((uint64_t)&v142, (uint64_t)__dst, &qword_2556DAEA0);
  if ((BYTE4(__dst[2]) & 1) != 0)
  {
LABEL_75:
    if ((*(_BYTE *)(v3 + 433) & 1) != 0
      || (v83 = sub_2215E60A8(a1), (*(_BYTE *)(v3 + 433) = v83) == 0)
      || (LocalPlaneDetector.debugOptions.getter() & 2) == 0)
    {

LABEL_91:
      swift_beginAccess();
      v117 = *(_BYTE *)(v3 + 432);
      v118 = *(_OWORD *)(v3 + 336);
      *(_OWORD *)a2 = *(_OWORD *)(v3 + 320);
      *(_OWORD *)(a2 + 16) = v118;
      v119 = *(_OWORD *)(v3 + 368);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 352);
      *(_OWORD *)(a2 + 48) = v119;
      v120 = *(_OWORD *)(v3 + 400);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 384);
      *(_OWORD *)(a2 + 80) = v120;
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 416);
      *(_BYTE *)(a2 + 112) = v117;
      return;
    }
    swift_beginAccess();
    sub_2215E7064(v3 + 456, (uint64_t)v152);
    if (v153)
    {
      sub_2215E70EC((uint64_t)v152, (uint64_t)&v145);
      sub_2215E70AC((uint64_t)v152);
      v115 = v146;
      v116 = v147;
      __swift_project_boxed_opaque_existential_0(&v145, v146);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v116 + 24))(0, v115, v116);
      goto LABEL_89;
    }
LABEL_90:

    sub_2215E70AC((uint64_t)v152);
    goto LABEL_91;
  }
  v135 = (float32x4_t)__dst[1];
  v139 = (float32x4_t)__dst[0];
  v84 = *(float *)&__dst[2];
  v85 = swift_bridgeObjectRetain();
  v86 = sub_2215E71A8(v85, (int32x4_t)v139);
  swift_bridgeObjectRelease();
  if (v86 <= 0.05)
    v86 = 0.05;
  sub_2215E629C(v139, v135, v84, v87, v88, v128);
  v136 = v90;
  v140 = v89;
  *(float32x4_t *)(v3 + 192) = v89;
  *(float32x4_t *)(v3 + 208) = v90;
  *(_BYTE *)(v3 + 224) = 0;
  *(_OWORD *)(v3 + 240) = v127;
  *(float32x4_t *)(v3 + 256) = v126;
  *(float32x4_t *)(v3 + 272) = v128;
  *(__n128 *)(v3 + 288) = v125;
  *(_BYTE *)(v3 + 304) = 0;
  *(_BYTE *)(v3 + 433) = 0;
  swift_beginAccess();
  if ((*(_BYTE *)(v3 + 432) & 1) != 0
    || (v91 = *(_QWORD *)(v3 + 352),
        v92 = *(float32x4_t *)(v3 + 320),
        v93.i32[1] = v92.i32[1],
        v94 = vsubq_f32(v140, v92),
        v93.i32[0] = *(_QWORD *)(v3 + 320),
        v95 = vsub_f32(*(float32x2_t *)v140.f32, v93),
        (float)(COERCE_FLOAT(vmulq_f32(v94, v94).i32[2]) + vaddv_f32(vmul_f32(v95, v95))) >= (float)((float)(v86 + *(float *)&v91) * (float)(v86 + *(float *)&v91))))
  {
    *(double *)&v109 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(*(double *)v140.i64, v136);
    *(float32x4_t *)(v3 + 320) = v140;
    *(float32x4_t *)(v3 + 336) = v136;
    *(_QWORD *)(v3 + 352) = LODWORD(v86) | ((unint64_t)LODWORD(v84) << 32);
    *(_QWORD *)(v3 + 360) = 0;
    *(_OWORD *)(v3 + 368) = v109;
    *(_OWORD *)(v3 + 384) = v110;
    *(_OWORD *)(v3 + 400) = v111;
    *(_OWORD *)(v3 + 416) = v112;
    *(_BYTE *)(v3 + 432) = 0;
  }
  else
  {
    v96 = *(int8x16_t *)(v3 + 320);
    v97 = *(float32x4_t *)(v3 + 336);
    v98 = *(float *)(v3 + 148);
    v99 = *(float *)(v3 + 152);
    *(float32x2_t *)&v100 = vadd_f32(*(float32x2_t *)v96.i8, vmul_n_f32(vsub_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v96.i8), v98));
    HIDWORD(v100) = vextq_s8(v96, v96, 8uLL).i32[1];
    *((float *)&v100 + 2) = COERCE_FLOAT(*(_QWORD *)(v3 + 328))
                          + (float)(v98 * (float)(v140.f32[2] - COERCE_FLOAT(*(_QWORD *)(v3 + 328))));
    v101 = vsubq_f32(v136, v97);
    *(float32x2_t *)v102.f32 = vadd_f32(*(float32x2_t *)v97.f32, vmul_n_f32(*(float32x2_t *)v101.f32, v99));
    *(_QWORD *)&v103 = v102.i64[0];
    HIDWORD(v103) = vextq_s8(*(int8x16_t *)&v97, *(int8x16_t *)&v97, 8uLL).i32[1];
    *((float *)&v103 + 2) = COERCE_FLOAT(*(_QWORD *)(v3 + 344)) + vmuls_lane_f32(v99, v101, 2);
    *(_OWORD *)(v3 + 320) = v100;
    *(_OWORD *)(v3 + 336) = v103;
    v104 = *(float *)(v3 + 160);
    *(float *)(v3 + 352) = (float)(*(float *)(v3 + 156) * (float)(v86 - *(float *)&v91)) + *(float *)&v91;
    *(float *)(v3 + 356) = (float)(v104 * (float)(v84 - *((float *)&v91 + 1))) + *((float *)&v91 + 1);
    v102.i64[1] = *((_QWORD *)&v103 + 1);
    *(double *)&v105 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(*(double *)&v100, v102);
    if ((*(_BYTE *)(v3 + 432) & 1) != 0)
      goto LABEL_93;
    *(_OWORD *)(v3 + 368) = v105;
    *(_OWORD *)(v3 + 384) = v106;
    *(_OWORD *)(v3 + 400) = v107;
    *(_OWORD *)(v3 + 416) = v108;
  }
  swift_beginAccess();
  sub_2215E7064(v3 + 456, (uint64_t)v152);
  if (!v153)
    goto LABEL_90;
  sub_2215E70EC((uint64_t)v152, (uint64_t)&v145);
  sub_2215E70AC((uint64_t)v152);
  v113 = v146;
  v114 = v147;
  __swift_project_boxed_opaque_existential_0(&v145, v146);
  if ((*(_BYTE *)(v3 + 432) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, float, float, __n128, __n128, __n128, __n128))(v114 + 16))(v113, v114, *(__n128 *)(v3 + 320), *(__n128 *)(v3 + 336), *(float *)(v3 + 352), *(float *)(v3 + 356), *(__n128 *)(v3 + 368), *(__n128 *)(v3 + 384), *(__n128 *)(v3 + 400), *(__n128 *)(v3 + 416));
LABEL_89:

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v145);
    goto LABEL_91;
  }
  __break(1u);
LABEL_93:
  __break(1u);
}

void *LocalPlaneDetector.DebugOptions.showPlane.unsafeMutableAddressor()
{
  return &static LocalPlaneDetector.DebugOptions.showPlane;
}

BOOL sub_2215E60A8(void *a1)
{
  float32x4_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float32x4_t v8;
  id v9;
  __n128 v10;
  float32x4_t v11;
  float32x4_t v12;
  id v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  _BYTE v31[80];
  _BYTE v32[80];
  _BYTE v33[80];

  swift_beginAccess();
  if ((v1[27].i8[0] & 1) != 0)
    return 1;
  v3 = 1;
  if ((v1[19].i8[0] & 1) == 0)
  {
    v5 = v1[17].i64[1];
    v4 = v1[18].i64[0];
    v6 = v1[17].i64[0];
    v29 = v1[21];
    v27 = v1[20];
    v7 = v1[22].f32[0];
    v8.i64[0] = v4;
    v8.i64[1] = v1[18].i64[1];
    v23 = v8;
    v9 = objc_msgSend(a1, sel_camera);
    memset(v33, 0, 64);
    v33[64] = 1;
    v10 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v9, (uint64_t)v33);
    v24 = v11;
    v25 = (float32x4_t)v10;

    sub_2215E677C((uint64_t)v31, v27, v29, v7, v25, v24);
    sub_2215C6540((uint64_t)v31, (uint64_t)v32, &qword_2556DB1C8);
    if (v32[68] == 1)
    {
      v12.i64[0] = v6;
      v12.i64[1] = v5;
      v30 = v12;
      v13 = objc_msgSend(a1, sel_camera);
      objc_msgSend(v13, sel_transform);
      v26 = v15;
      v28 = v14;

      v16 = vmulq_f32(v28, v30);
      if ((float)(v16.f32[2] + (float)((float)(*(float *)&v6 * v28.f32[0]) + v16.f32[1])) >= v1[11].f32[2])
      {
        v17 = vsubq_f32(v26, v23);
        v18.i32[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
        v18.i32[1] = v26.i32[0];
        v19.i32[0] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
        v19.i32[1] = v4;
        v20 = vsub_f32(v18, v19);
        v21 = vmul_f32(v20, v20);
        return (float)(v21.f32[0] + (float)(v21.f32[1] + COERCE_FLOAT(vmulq_f32(v17, v17).i32[1]))) > 0.04;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_2215E629C(float32x4_t a1, float32x4_t a2, float a3, double a4, double a5, float32x4_t a6)
{
  float32x4_t *v6;
  float32x4_t v8;
  double v9;
  double v10;
  double v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x2_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int32x2_t v31;
  float32x4_t v33;

  v8 = vmulq_f32(a2, a6);
  if ((float)(v8.f32[2] + vaddv_f32(*(float32x2_t *)v8.f32)) < 0.0)
  {
    *(float32x2_t *)a2.f32 = vsub_f32(0, *(float32x2_t *)a2.f32);
    a2.f32[2] = 0.0 - a2.f32[2];
    a2.i32[3] = 0;
  }
  v33 = a2;
  swift_beginAccess();
  *(float32x2_t *)v12.f32 = _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0(v6[7].i64[1], v9, v10, v11);
  v13 = v12;
  v29 = (int8x16_t)v12;
  v14 = vsubq_f32(a1, v12);
  v15 = vmulq_f32(v14, v14);
  v15.f32[0] = v15.f32[2] + vaddv_f32(*(float32x2_t *)v15.f32);
  v13.i32[0] = 953267991;
  v16 = (int32x2_t)vcgeq_f32(v13, v15).u64[0];
  if (qword_2556D8DE0 != -1)
  {
    v31 = v16;
    swift_once();
    v16 = v31;
  }
  v28 = (int8x16_t)vdupq_lane_s32(v16, 0);
  v27 = (int8x16_t)static SIMD3<>.up;
  v17 = vmulq_f32(v33, (float32x4_t)static SIMD3<>.up);
  v17.f32[0] = fabsf(v17.f32[2] + vaddv_f32(*(float32x2_t *)v17.f32));
  v30 = v17;
  v18 = sub_2215E4D68();
  v19 = (float)((float)((float)((float)(1.0 - a3) + (float)(1.0 - a3)) - (float)((float)(1.0 - a3) * (float)(1.0 - a3)))
              * 0.69813)
      + 0.087266;
  if (v18 >= v30.f32[0])
  {
    v22 = cosf(1.5708 - v19);
    v21 = v33;
    if (v30.f32[0] < v22)
    {
      v21.i32[1] = 0;
      v23 = (int32x4_t)vmulq_f32(v21, v21);
      v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
      v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
      v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
      v21 = vmulq_n_f32(v21, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
    }
  }
  else
  {
    v20.f32[0] = cosf(v19);
    v21 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v30, v20), 0), v27, (int8x16_t)v33);
  }
  v26 = (float32x4_t)vbslq_s8(v28, v29, (int8x16_t)a1);
  if ((v6[14].i8[0] & 1) == 0)
    sub_2215E64E4(v26, v21, v6[12], v6[13]);
}

BOOL sub_2215E64E4(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v7;

  v4 = vsubq_f32(a1, a3);
  v5 = vmulq_f32(v4, v4);
  if ((float)(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32)) > 0.0001)
    return 1;
  v7 = vmulq_f32(a2, a4);
  return fabsf(v7.f32[2] + vaddv_f32(*(float32x2_t *)v7.f32)) < sub_2215E4DF0();
}

void __swiftcall LocalPlaneDetector.hitTest(screenPoint:for:)(Swift::tuple_transform_simd_float4x4_distanceFromCenter_Float_optional *__return_ptr retstr, CGPoint screenPoint, ARFrame a3)
{
  float32x4_t *v3;
  double y;
  double x;
  simd_float4 v8;
  Swift::Float v9;
  Swift::Bool v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _BYTE v21[144];
  simd_float4x4 v22;
  double v23[60];
  float32x4_t v24[3];
  simd_float4 v25[4];
  float v26;
  Swift::Bool v27;
  float32x4_t v28[2];
  char v29;
  simd_float4x4 v30;

  y = screenPoint.y;
  x = screenPoint.x;
  swift_beginAccess();
  v8 = 0uLL;
  if ((v3[27].i8[0] & 1) != 0 || (v3[27].i8[1] & 1) != 0)
  {
    v9 = 0.0;
    v10 = 1;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
  }
  else
  {
    v16 = v3[20];
    v15 = v3[21];
    v14 = v3[22].f32[0];
    sub_221622ADC(a3.super.isa, (uint64_t)v21);
    v30 = __invert_f4(v22);
    v19 = (float32x4_t)v30.columns[1];
    v20 = (float32x4_t)v30.columns[0];
    v17 = (float32x4_t)v30.columns[3];
    v18 = (float32x4_t)v30.columns[2];
    sub_221622ADC(a3.super.isa, (uint64_t)v23);
    sub_2215ED0B4(v24, x, y, v20, v19, v18, v17, v23[0]);
    sub_2215C6540((uint64_t)v24, (uint64_t)v28, &qword_2556DAEB0);
    if ((v29 & 1) != 0)
    {
      v9 = 0.0;
      v10 = 1;
      v11 = 0uLL;
      v12 = 0uLL;
      v13 = 0uLL;
      v8 = 0uLL;
    }
    else
    {
      sub_2215E677C((uint64_t)v25, v16, v15, v14, v28[0], v28[1]);
      v8 = v25[0];
      v11 = v25[1];
      v12 = v25[2];
      v13 = v25[3];
      v9 = v26;
      v10 = v27;
    }
  }
  retstr->value.transform.columns[0] = v8;
  retstr->value.transform.columns[1] = v11;
  retstr->value.transform.columns[2] = v12;
  retstr->value.transform.columns[3] = v13;
  retstr->value.distanceFromCenter = v9;
  retstr->is_nil = v10;
}

void LocalPlaneDetector.hitTest(maxDistanceFromCenter:withRay:)(uint64_t a1@<X8>, float a2@<S0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>)
{
  float32x4_t *v4;
  int v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v15[4];
  int v16;
  char v17;

  swift_beginAccess();
  if ((v4[27].i8[0] & 1) != 0)
  {
    v7 = 0;
    v8 = 0uLL;
    v9 = 1;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  else
  {
    sub_2215E677C((uint64_t)v15, v4[20], v4[21], a2, a3, a4);
    v8 = v15[0];
    v10 = v15[1];
    v11 = v15[2];
    v12 = v15[3];
    v7 = v16;
    v9 = v17;
  }
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 68) = v9;
}

void sub_2215E677C(uint64_t a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float a4@<S2>, float32x4_t a5@<Q3>, float32x4_t a6@<Q4>)
{
  uint64_t v6;
  char v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v33;
  __int128 v35;
  __int128 v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  _OWORD v49[4];
  char v50;

  v9 = LocalPlaneDetector.debugOptions.getter();
  v10 = a3;
  if ((v9 & 1) != 0)
  {
    swift_beginAccess();
    sub_2215E7064(v6 + 456, (uint64_t)&v44);
    if (*((_QWORD *)&v45 + 1))
    {
      sub_2215E70EC((uint64_t)&v44, (uint64_t)v41);
      sub_2215E70AC((uint64_t)&v44);
      v11 = v42;
      v12 = v43;
      __swift_project_boxed_opaque_existential_0(v41, v42);
      memset(v49, 0, sizeof(v49));
      v50 = 1;
      (*(void (**)(_QWORD, _OWORD *, uint64_t, uint64_t))(v12 + 32))(0, v49, v11, v12);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    }
    else
    {
      sub_2215E70AC((uint64_t)&v44);
    }
    v10 = a3;
  }
  sub_22160A740(a5, a6, a2, v10);
  v15 = 0uLL;
  if ((v16 & 1) != 0)
    goto LABEL_8;
  *(double *)v17.i64 = v13;
  v17.i64[1] = v14;
  v18 = vsubq_f32(a2, v17);
  v19.i32[0] = vextq_s8((int8x16_t)a2, (int8x16_t)a2, 8uLL).u32[0];
  v19.i32[1] = a2.i32[0];
  v20 = vsub_f32(v19, (float32x2_t)__PAIR64__(LODWORD(v13), v14));
  v21 = vmul_f32(v20, v20);
  v22 = sqrtf(v21.f32[0] + (float)(v21.f32[1] + COERCE_FLOAT(vmulq_f32(v18, v18).i32[1])));
  if (v22 > a4)
  {
LABEL_8:
    v23 = 1;
    v22 = 0.0;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
  }
  else
  {
    *(double *)&v27 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v13, a3);
    v15 = v27;
    if ((*(_BYTE *)(v6 + 440) & 1) != 0)
    {
      v31 = v26;
      v33 = v25;
      v35 = v24;
      v37 = v27;
      swift_beginAccess();
      sub_2215E7064(v6 + 456, (uint64_t)v41);
      if (v42)
      {
        sub_2215E70EC((uint64_t)v41, (uint64_t)v38);
        sub_2215E70AC((uint64_t)v41);
        v28 = v39;
        v29 = v40;
        __swift_project_boxed_opaque_existential_0(v38, v39);
        v44 = v37;
        v45 = v35;
        v46 = v33;
        v47 = v31;
        v48 = 0;
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v29 + 32))(1, &v44, v28, v29);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
        v26 = v31;
        v25 = v33;
        v24 = v35;
        v15 = v37;
      }
      else
      {
        sub_2215E70AC((uint64_t)v41);
        v24 = v35;
        v15 = v37;
        v26 = v31;
        v25 = v33;
      }
    }
    v23 = 0;
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v24;
  *(_OWORD *)(a1 + 32) = v25;
  *(_OWORD *)(a1 + 48) = v26;
  *(float *)(a1 + 64) = v22;
  *(_BYTE *)(a1 + 68) = v23;
}

void *LocalPlaneDetector.DebugOptions.showPoints.unsafeMutableAddressor()
{
  return &static LocalPlaneDetector.DebugOptions.showPoints;
}

uint64_t LocalPlaneDetector.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2215E70AC(v0 + 456);
  return v0;
}

uint64_t LocalPlaneDetector.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2215E70AC(v0 + 456);
  return swift_deallocClassInstance();
}

uint64_t static LocalPlaneDetector.DebugOptions.showPoints.getter()
{
  return 1;
}

uint64_t static LocalPlaneDetector.DebugOptions.showPlane.getter()
{
  return 2;
}

unint64_t sub_2215E6A74()
{
  unint64_t result;

  result = sub_2215C2BE0((uint64_t)&unk_24E722960);
  static LocalPlaneDetector.DebugOptions.keyForFeature = result;
  return result;
}

uint64_t *LocalPlaneDetector.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  if (qword_2556D8DF0 != -1)
    swift_once();
  return &static LocalPlaneDetector.DebugOptions.keyForFeature;
}

uint64_t static LocalPlaneDetector.DebugOptions.keyForFeature.getter()
{
  return sub_2215C5614(&qword_2556D8DF0);
}

uint64_t sub_2215E6AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (qword_2556D8DF0 != -1)
    swift_once();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_22161BCF8(v0);
  result = swift_bridgeObjectRelease();
  static LocalPlaneDetector.DebugOptions.keys = v1;
  return result;
}

uint64_t *LocalPlaneDetector.DebugOptions.keys.unsafeMutableAddressor()
{
  if (qword_2556D8DF8 != -1)
    swift_once();
  return &static LocalPlaneDetector.DebugOptions.keys;
}

uint64_t static LocalPlaneDetector.DebugOptions.keys.getter()
{
  return sub_2215C5614(&qword_2556D8DF8);
}

uint64_t sub_2215E6BB8()
{
  uint64_t result;

  if (qword_2556D8DF0 != -1)
    swift_once();
  result = sub_221617FA8(static LocalPlaneDetector.DebugOptions.keyForFeature);
  static LocalPlaneDetector.DebugOptions.default = result;
  return result;
}

uint64_t static LocalPlaneDetector.DebugOptions.default.getter()
{
  if (qword_2556D8E00 != -1)
    swift_once();
  swift_beginAccess();
  return static LocalPlaneDetector.DebugOptions.default;
}

uint64_t static LocalPlaneDetector.DebugOptions.default.setter(uint64_t a1)
{
  uint64_t result;

  if (qword_2556D8E00 != -1)
    swift_once();
  result = swift_beginAccess();
  static LocalPlaneDetector.DebugOptions.default = a1;
  return result;
}

uint64_t (*static LocalPlaneDetector.DebugOptions.default.modify())()
{
  if (qword_2556D8E00 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_2215E6D44()
{
  sub_221653B88();
  sub_221653B94();
  return sub_221653BAC();
}

uint64_t sub_2215E6D88()
{
  return sub_221653B94();
}

uint64_t sub_2215E6DB0()
{
  sub_221653B88();
  sub_221653B94();
  return sub_221653BAC();
}

Swift::tuple_actualPoints_OpaquePointer_bestPoints_OpaquePointer __swiftcall LocalPlaneDetector.getPointsForDebug()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  Swift::tuple_actualPoints_OpaquePointer_bestPoints_OpaquePointer result;

  v1 = *(_QWORD *)(v0 + 112);
  swift_beginAccess();
  v2 = *(void **)(v1 + 200);
  swift_beginAccess();
  v3 = *(void **)(v0 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = v2;
  v5 = v3;
  result.bestPoints._rawValue = v5;
  result.actualPoints._rawValue = v4;
  return result;
}

uint64_t sub_2215E6E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DAE98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_QWORD *sub_2215E6EE0(uint64_t a1, uint64_t a2)
{
  return sub_2215E6F00(a1, a2, &qword_2556DA200);
}

_QWORD *sub_2215E6EF0(uint64_t a1, uint64_t a2)
{
  return sub_2215E6F00(a1, a2, &qword_2556DA0D0);
}

_QWORD *sub_2215E6F00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (a2 <= a1)
    v3 = a1;
  else
    v3 = a2;
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v5 = (_QWORD *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 17;
  v5[2] = a1;
  v5[3] = 2 * (v7 >> 4);
  return v5;
}

_QWORD *sub_2215E6F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA120);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 3);
  return v4;
}

_QWORD *sub_2215E6FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9610);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 29;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 2);
  return v4;
}

uint64_t sub_2215E7064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DAE98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2215E70AC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DAE98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2215E70EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_2215E7130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB3A0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = a1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  return v4;
}

float sub_2215E71A8(uint64_t a1, int32x4_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  int32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  const float *v11;
  uint64_t v12;
  const float *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float32x4x4_t v25;
  float32x4x4_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = swift_bridgeObjectRetain();
    if ((unint64_t)v2 >= 9)
    {
      v7 = v2 & 7;
      if ((v2 & 7) == 0)
        v7 = 8;
      v6 = a2;
      v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2.i8, 0);
      v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2.i8, 1);
      v4 = v2 - v7;
      v10 = (float32x4_t)vdupq_laneq_s32(a2, 2);
      v11 = (const float *)(v3 + 96);
      v5 = 0.0;
      v12 = v4;
      do
      {
        v13 = v11 - 16;
        v25 = vld4q_f32(v13);
        v26 = vld4q_f32(v11);
        v14 = vsubq_f32(v8, v25.val[0]);
        v15 = vsubq_f32(v8, v26.val[0]);
        v16 = vsubq_f32(v9, v25.val[1]);
        v17 = vsubq_f32(v9, v26.val[1]);
        v25.val[0] = vsubq_f32(v10, v25.val[2]);
        v25.val[1] = vsubq_f32(v10, v26.val[2]);
        v25.val[0] = vsqrtq_f32(vaddq_f32(vmulq_f32(v25.val[0], v25.val[0]), vaddq_f32(vmulq_f32(v14, v14), vmulq_f32(v16, v16))));
        v25.val[1] = vsqrtq_f32(vaddq_f32(vmulq_f32(v25.val[1], v25.val[1]), vaddq_f32(vmulq_f32(v15, v15), vmulq_f32(v17, v17))));
        v5 = (float)((float)((float)((float)((float)((float)((float)(v5 + v25.val[0].f32[0]) + v25.val[0].f32[1])
                                                   + v25.val[0].f32[2])
                                           + v25.val[0].f32[3])
                                   + v25.val[1].f32[0])
                           + v25.val[1].f32[1])
                   + v25.val[1].f32[2])
           + v25.val[1].f32[3];
        v11 += 32;
        v12 -= 8;
      }
      while (v12);
    }
    else
    {
      v4 = 0;
      v5 = 0.0;
      v6 = a2;
    }
    v18 = v2 - v4;
    v19 = (float *)(v3 + 16 * v4 + 40);
    do
    {
      v20 = *(float *)v6.i32 - *(v19 - 2);
      v21 = *(float *)&v6.i32[1] - *(v19 - 1);
      v22 = *v19;
      v19 += 4;
      v5 = v5
         + sqrtf((float)((float)(*(float *)&v6.i32[2] - v22) * (float)(*(float *)&v6.i32[2] - v22))+ (float)((float)(v20 * v20) + (float)(v21 * v21)));
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0.0;
  }
  return v5 / (float)v2;
}

double sub_2215E731C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[29] = 0u;
  a1[30] = 0u;
  a1[27] = 0u;
  a1[28] = 0u;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_2215E7364(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_2215E737C(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t sub_2215E73A8()
{
  unint64_t result;

  result = qword_2556DAEB8;
  if (!qword_2556DAEB8)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for LocalPlaneDetector.DebugOptions, &type metadata for LocalPlaneDetector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DAEB8);
  }
  return result;
}

unint64_t sub_2215E73F0()
{
  unint64_t result;

  result = qword_2556DAEC0;
  if (!qword_2556DAEC0)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for LocalPlaneDetector.DebugOptions, &type metadata for LocalPlaneDetector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DAEC0);
  }
  return result;
}

unint64_t sub_2215E7438()
{
  unint64_t result;

  result = qword_2556DAEC8;
  if (!qword_2556DAEC8)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for LocalPlaneDetector.DebugOptions, &type metadata for LocalPlaneDetector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DAEC8);
  }
  return result;
}

unint64_t sub_2215E7480()
{
  unint64_t result;

  result = qword_2556DAED0;
  if (!qword_2556DAED0)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for LocalPlaneDetector.DebugOptions, &type metadata for LocalPlaneDetector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DAED0);
  }
  return result;
}

void sub_2215E74C4(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = LocalPlaneDetector.defaultPlaneExtent.getter();
  *(_QWORD *)(a1 + 8) = v2;
}

__n128 sub_2215E74EC(__n128 *a1, __n128 **a2)
{
  __n128 *v2;
  __n128 result;

  v2 = *a2;
  result = *a1;
  v2[2] = *a1;
  v2[3].n128_u8[0] = 0;
  return result;
}

uint64_t type metadata accessor for LocalPlaneDetector()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for LocalPlaneDetector.DebugOptions()
{
  return &type metadata for LocalPlaneDetector.DebugOptions;
}

Swift::Void __swiftcall Log.debug(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_2215E7660(_._countAndFlagsBits, (uint64_t)_._object, isPrivate, v2, v3, v4, MEMORY[0x24BEE7908]);
}

uint64_t Log.category.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t Log.enabledInDebugKey.getter()
{
  return swift_retain();
}

void sub_2215E7580()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    v2 = sub_2216531B0();
    v4 = v3;

    qword_2556DB1D0 = v2;
    *(_QWORD *)algn_2556DB1D8 = v4;
  }
  else
  {
    __break(1u);
  }
}

_DWORD *sub_2215E7608()
{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc();
  *result = 0;
  qword_2556DB1E0 = (uint64_t)result;
  return result;
}

void sub_2215E7630()
{
  off_2556DB1E8 = (_UNKNOWN *)MEMORY[0x24BEE4B00];
}

Swift::Void __swiftcall Log.default(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_2215E7660(_._countAndFlagsBits, (uint64_t)_._object, isPrivate, v2, v3, v4, MEMORY[0x24BEE7928]);
}

Swift::Void __swiftcall Log.error(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_2215E7660(_._countAndFlagsBits, (uint64_t)_._object, isPrivate, v2, v3, v4, MEMORY[0x24BEE7910]);
}

uint64_t sub_2215E7660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v12;

  v12 = a7();
  return _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(a1, a2, v12, a3, a4, a5);
}

uint64_t _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  void *v14;
  id v15;
  void *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  void *v20;

  v10 = qword_2556D8E10;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)qword_2556DB1E0);
  if (qword_2556D8E18 != -1)
    swift_once();
  swift_beginAccess();
  v11 = off_2556DB1E8;
  if (*((_QWORD *)off_2556DB1E8 + 2))
  {
    swift_bridgeObjectRetain();
    v12 = sub_2215CA39C(a5, a6);
    if ((v13 & 1) != 0)
    {
      v14 = *(void **)(v11[7] + 8 * v12);
      swift_endAccess();
      v15 = v14;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  sub_2215E7B28();
  if (qword_2556D8E08 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = (void *)sub_221653708();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v15 = v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20 = off_2556DB1E8;
  off_2556DB1E8 = (_UNKNOWN *)0x8000000000000000;
  sub_22161BDE0((uint64_t)v15, a5, a6, isUniquelyReferenced_nonNull_native);
  off_2556DB1E8 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_12:
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock((os_unfair_lock_t)qword_2556DB1E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9988);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2216560E0;
  *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v18 + 64) = sub_2215E7B64();
  *(_QWORD *)(v18 + 32) = a1;
  *(_QWORD *)(v18 + 40) = a2;
  swift_bridgeObjectRetain();
  sub_22165300C();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for Log()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *_s17MeasureFoundation3LogVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Log(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Log(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Log(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Log(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

unint64_t sub_2215E7B28()
{
  unint64_t result;

  result = qword_2556DB1F0;
  if (!qword_2556DB1F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2556DB1F0);
  }
  return result;
}

unint64_t sub_2215E7B64()
{
  unint64_t result;

  result = qword_2556DB1F8;
  if (!qword_2556DB1F8)
  {
    result = MEMORY[0x22766FA4C](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2556DB1F8);
  }
  return result;
}

uint64_t sub_2215E7BA8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = (id)v1;
  if (v1 != 1)
    goto LABEL_5;
  v3 = v0;
  v4 = *(_QWORD *)(v0 + 40);
  swift_unownedRetainStrong();
  v5 = *(_QWORD *)(v4 + 160);
  swift_unownedRetainStrong();
  swift_release();
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 208);
  swift_retain();
  result = swift_release();
  if (v6)
  {
    v8 = ADProcessor.transformer.getter();
    swift_release();
    v9 = *(_QWORD *)(v8 + 1080);
    swift_bridgeObjectRetain();
    result = swift_release();
    v10 = *(_QWORD *)(v9 + 16);
    if (!(v10 >> 61))
    {
      v11 = 4 * v10;
      swift_unownedRetainStrong();
      v12 = *(void **)(v4 + 32);
      swift_unknownObjectRetain();
      swift_release();
      v2 = objc_msgSend(v12, sel_newBufferWithBytes_length_options_, v9 + 32, v11, 0);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v13 = *(_QWORD *)(v3 + 88);
      *(_QWORD *)(v3 + 88) = v2;
      swift_unknownObjectRetain();
      sub_2215E86B8(v13);
LABEL_5:
      sub_2215E86E8(v1);
      return (uint64_t)v2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_2215E7CE4(uint64_t a1)
{
  swift_allocObject();
  return sub_2215E7D1C(a1);
}

id sub_2215E7D1C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *Strong;
  void *v5;
  uint64_t v6;
  id v7;
  id result;
  id v9;
  uint64_t v10;

  *(_BYTE *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 88) = 1;
  v3 = *(void **)(a1 + 32);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v5 = *(void **)(a1 + 40);
  v6 = qword_2556D8D58;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = sub_2215E7E80(Strong, v5, static ADTransformer.adImagePlaneVertexDescriptor);

  result = (id)swift_unknownObjectRelease();
  if (v7)
  {
    *(_QWORD *)(v1 + 72) = v7;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD590]), sel_init);
    objc_msgSend(v9, sel_setDepthCompareFunction_, 7);
    objc_msgSend(v9, sel_setDepthWriteEnabled_, 0);
    result = objc_msgSend(v3, sel_newDepthStencilStateWithDescriptor_, v9);
    if (result)
    {
      *(_QWORD *)(v1 + 80) = result;
      swift_release();
      v10 = sub_221617CBC(a1);
      swift_unknownObjectRelease();

      swift_release();
      return (id)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_2215E7E80(void *a1, void *a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v23[2];

  v23[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD6B8]), sel_init);
  objc_msgSend(v6, sel_setAlphaToCoverageEnabled_, 1);
  v7 = (void *)sub_22165318C();
  v8 = objc_msgSend(a2, sel_newFunctionWithName_, v7);

  if (!v8)
  {
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v6, sel_setVertexFunction_, v8);
  swift_unknownObjectRelease();
  v9 = (void *)sub_22165318C();
  v10 = objc_msgSend(a2, sel_newFunctionWithName_, v9);

  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v6, sel_setFragmentFunction_, v10);
  swift_unknownObjectRelease();
  objc_msgSend(v6, sel_setVertexDescriptor_, a3);
  objc_msgSend(v6, sel_setDepthAttachmentPixelFormat_, objc_msgSend(a1, sel_depthStencilPixelFormat));
  v11 = objc_msgSend(v6, sel_colorAttachments);
  v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 0);

  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v12, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  v13 = objc_msgSend(v6, sel_colorAttachments);
  v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  objc_msgSend(v14, sel_setDestinationRGBBlendFactor_, 5);

  v15 = objc_msgSend(v6, sel_colorAttachments);
  v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
    goto LABEL_17;
  objc_msgSend(v16, sel_setDestinationAlphaBlendFactor_, 5);

  v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {

    return 0;
  }
  v23[0] = 0;
  v18 = objc_msgSend(v17, sel_newRenderPipelineStateWithDescriptor_error_, v6, v23);
  swift_unknownObjectRelease();
  v19 = v23[0];
  if (!v18)
  {
    v20 = v19;
    v21 = (void *)sub_221652ED4();

    swift_willThrow();
    return 0;
  }

  return v18;
}

void DebugADNode.draw(commandBuffer:)(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  char v24[8];

  v2 = v1[9];
  if (v2)
  {
    v3 = v1;
    swift_unknownObjectRetain();
    v5 = sub_2215E7BA8();
    if (v5)
    {
      v6 = v5;
      v7 = v1[5];
      swift_unownedRetainStrong();
      v22 = (id)MetalScene.makeDefaultRenderPassDescriptor()();
      swift_release();
      if (v22)
      {
        v8 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_);
        if (!v8)
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          return;
        }
        v9 = v8;
        v10 = v1[6];
        swift_unownedRetainStrong();
        swift_beginAccess();
        v11 = *(_QWORD *)(v10 + 240);
        swift_release();
        if ((v11 & 0x10) != 0)
        {
          swift_unownedRetainStrong();
          v14 = ADProcessor.outputConfidenceTexture.getter();
          swift_release();
          v15 = 7;
          goto LABEL_21;
        }
        swift_unownedRetainStrong();
        swift_beginAccess();
        v12 = *(_QWORD *)(v10 + 240);
        swift_release();
        if ((v12 & 8) == 0)
        {
          swift_unownedRetainStrong();
          swift_beginAccess();
          v13 = *(_QWORD *)(v10 + 240);
          swift_release();
          if ((v13 & 0x8000) == 0)
          {
            objc_msgSend(v9, sel_endEncoding);
            swift_unknownObjectRelease();

            swift_unknownObjectRelease();
LABEL_22:
            swift_unknownObjectRelease();
            return;
          }
          swift_unownedRetainStrong();
          v14 = ADProcessor.outputPersonTexture.getter();
          swift_release();
          v15 = 8;
LABEL_21:
          v24[0] = v15;
          objc_msgSend(v9, sel_setCullMode_, 0, v22);
          objc_msgSend(v9, sel_setRenderPipelineState_, v2);
          objc_msgSend(v9, sel_setDepthStencilState_, v3[10]);
          objc_msgSend(v9, sel_setVertexBuffer_offset_atIndex_, v6, 0, 0);
          swift_unownedRetainStrong();
          swift_beginAccess();
          v19 = *(_QWORD *)(v7 + 192);
          swift_unknownObjectRetain();
          swift_release();
          objc_msgSend(v9, sel_setFragmentBuffer_offset_atIndex_, v19, 0, 0);
          swift_unknownObjectRelease();
          objc_msgSend(v9, sel_setFragmentBytes_length_atIndex_, v24, 1, 1);
          objc_msgSend(v9, sel_setFragmentTexture_atIndex_, v14, 0);
          swift_unownedRetainStrong();
          v20 = ADProcessor.outputConfidenceTexture.getter();
          swift_release();
          objc_msgSend(v9, sel_setFragmentTexture_atIndex_, v20, 1);
          swift_unknownObjectRelease();
          swift_unownedRetainStrong();
          v21 = ADProcessor.outputPersonTexture.getter();
          swift_release();
          objc_msgSend(v9, sel_setFragmentTexture_atIndex_, v21, 2);
          swift_unknownObjectRelease();
          objc_msgSend(v9, sel_drawPrimitives_vertexStart_vertexCount_, 4, 0, 4);
          objc_msgSend(v9, sel_endEncoding);
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_22;
        }
        v16 = v3[7];
        swift_unownedRetainStrong();
        swift_beginAccess();
        v17 = *(unsigned __int8 *)(v16 + 242);
        swift_release();
        if (v17 == 1)
        {
          swift_unownedRetainStrong();
          swift_beginAccess();
          v18 = *(_QWORD *)(v16 + 256);
          swift_release();
          if (v18)
          {
            swift_unownedRetainStrong();
            swift_beginAccess();
            v14 = *(_QWORD *)(v16 + 256);
            swift_unknownObjectRetain();
            swift_release();
            if (v14)
            {
LABEL_19:
              v15 = 2;
              goto LABEL_21;
            }
            __break(1u);
          }
        }
        swift_unownedRetainStrong();
        v14 = ADProcessor.outputDepthTexture.getter();
        swift_release();
        goto LABEL_19;
      }
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
}

uint64_t sub_2215E8628()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return sub_2215E86B8(*(_QWORD *)(v0 + 88));
}

uint64_t DebugADNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_2215E86B8(*(_QWORD *)(v0 + 88));
  return v0;
}

uint64_t DebugADNode.__deallocating_deinit()
{
  DebugADNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2215E86B8(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t type metadata accessor for DebugADNode()
{
  return objc_opt_self();
}

uint64_t sub_2215E86E8(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t sub_2215E86F8(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *Strong;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  CVMetalTextureCacheRef v15;
  __CVMetalTextureCache *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  CVMetalTextureCacheRef v23[2];

  v23[1] = *(CVMetalTextureCacheRef *)MEMORY[0x24BDAC8D0];
  *(_DWORD *)(v1 + 36) = 1065342996;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_BYTE *)(v1 + 192) = 1;
  *(_QWORD *)(v1 + 120) = a1;
  v3 = *(void **)(a1 + 32);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v5 = *(void **)(a1 + 40);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6 = sub_2215E9C9C(Strong, v5);

  swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 40) = v6;
  v7 = objc_msgSend(v3, sel_newBufferWithLength_options_, 1600000, 0);
  if (!v7)
    goto LABEL_7;
  v8 = v7;
  *(_QWORD *)(v1 + 72) = v7;
  v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v10 = v8;
  *(_QWORD *)(v1 + 80) = v9;
  v11 = objc_msgSend(v3, sel_newBufferWithLength_options_, 1600000, 0);
  if (!v11)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  v12 = v11;
  *(_QWORD *)(v1 + 88) = v11;
  v13 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v14 = v12;
  *(_QWORD *)(v1 + 96) = v13;
  v23[0] = 0;
  CVMetalTextureCacheCreate(0, 0, v3, 0, v23);
  v15 = v23[0];
  if (!v23[0])
    goto LABEL_9;
  *(CVMetalTextureCacheRef *)(v1 + 64) = v23[0];
  v16 = v15;
  swift_release();
  v17 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v1 + 32) = 257;
  *(_BYTE *)(v1 + 34) = 1;
  v18 = qword_2556D9998;
  *(_QWORD *)(v1 + 16) = qword_2556D9998;
  *(_QWORD *)(v1 + 24) = v17;
  if (v18 == -1)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  qword_2556D9998 = v18 + 1;
  v19 = (void *)objc_opt_self();
  swift_retain();
  v20 = objc_msgSend(v19, sel_defaultCenter);
  v21 = *MEMORY[0x24BEBDF98];
  swift_retain();
  objc_msgSend(v20, sel_addObserver_selector_name_object_, v1, sel_appDidEnterBackground, v21, 0);

  swift_unknownObjectRelease();
  swift_release_n();
  swift_release();
  return v1;
}

Swift::Void __swiftcall DebugWorldNode.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  id v11;
  __int128 v12;
  __int128 v13;
  float32x4_t v14;
  __int128 v15;
  float32x4_t v16;
  uint64_t v17;
  int v18;
  unint64_t i;
  id v20;
  void *v21;
  float *v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _DWORD *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  simd_float4x4 v47;
  simd_float4x4 v48;

  v2 = v1;
  v4 = -[objc_class capturedPointCloudData](frame.super.isa, sel_capturedPointCloudData);
  if (v4)
  {
    v5 = v4;
    v6 = -[objc_class camera](frame.super.isa, sel_camera);
    v7 = *(_QWORD *)(sub_221653600() + 16);
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v1 + 120);
    swift_beginAccess();
    v9 = *(void **)(v8 + 192);
    if (v9)
    {
      v10 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v11 = v9;
      objc_msgSend(v6, sel_transform);
      if ((*(_BYTE *)(v2 + 192) & 1) == 0)
      {
        v16 = vmulq_f32(v14, *(float32x4_t *)(v2 + 160));
        if ((float)(v16.f32[2] + (float)((float)(COERCE_FLOAT(*(_QWORD *)(v2 + 160)) * v14.f32[0]) + v16.f32[1])) > *(float *)(v2 + 36))
        {
LABEL_23:
          sub_2215E8D04(frame.super.isa);

          return;
        }
      }
      *(_OWORD *)(v2 + 128) = v12;
      *(_OWORD *)(v2 + 144) = v13;
      *(float32x4_t *)(v2 + 160) = v14;
      *(_OWORD *)(v2 + 176) = v15;
      *(_BYTE *)(v2 + 192) = 0;
      swift_beginAccess();
      if ((*(_BYTE *)(v8 + 184) & 1) != 0)
      {
LABEL_31:
        __break(1u);
        return;
      }
      objc_msgSend(v6, sel_viewMatrixForOrientation_, *(_QWORD *)(v8 + 176));
      v48 = __invert_f4(v47);
      v40 = (float32x4_t)v48.columns[1];
      v41 = (float32x4_t)v48.columns[0];
      v38 = (float32x4_t)v48.columns[3];
      v39 = (float32x4_t)v48.columns[2];
      v17 = *(_QWORD *)(v2 + 104);
      if (v17 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_28;
      if (v17 <= 0x7FFFFFFF)
      {
        v37 = v10;
        v10[184] = v17;
        v18 = 0;
        if (v7)
        {
          for (i = 0; v7 != i; ++i)
          {
            v20 = objc_msgSend(v5, sel_depthPointCloud);
            if (v20)
            {
              v21 = v20;
              v22 = (float *)objc_msgSend(v20, sel_confidences);

              if (v22)
              {
                v23 = v22[i];
                swift_unownedRetainStrong();
                swift_release();
                if (v23 >= 0.9)
                {
                  swift_unownedRetainStrong();
                  DepthProcessor.transformer.getter();
                  swift_release();
                  v24 = sub_221653600();
                  if (i >= *(_QWORD *)(v24 + 16))
                  {
                    __break(1u);
LABEL_26:
                    __break(1u);
LABEL_27:
                    __break(1u);
LABEL_28:
                    __break(1u);
                    goto LABEL_29;
                  }
                  v46 = *(float32x4_t *)(v24 + 16 * i + 32);
                  swift_bridgeObjectRelease();
                  *(double *)v25.i64 = DepthTransformer.jasperToARKitCamera.getter();
                  v42 = v25;
                  v43 = v26;
                  v44 = v28;
                  v45 = v27;
                  swift_release();
                  v29 = vaddq_f32(v44, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v42, 0.001 * v46.f32[0]), v43, vmuls_lane_f32(0.001, *(float32x2_t *)v46.f32, 1)), v45, vmuls_lane_f32(0.001, v46, 2)));
                  v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, v29.f32[0]), v40, *(float32x2_t *)v29.f32, 1), v39, v29, 2), v38, v29, 3);
                  v31 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3);
                  *(float32x2_t *)&v32 = vdiv_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v31.f32);
                  *((_QWORD *)&v32 + 1) = vdivq_f32(v30, v31).u32[2];
                  v33 = *(_QWORD *)(v2 + 104);
                  *(_OWORD *)(*(_QWORD *)(v2 + 80) + 16 * v33) = v32;
                  if (__OFADD__(v33, 1))
                    goto LABEL_26;
                  *(_QWORD *)(v2 + 104) = (v33 + 1) % 100000;
                  v34 = *(_QWORD *)(v2 + 112);
                  v35 = __OFADD__(v34, 1);
                  v36 = v34 + 1;
                  if (v35)
                    goto LABEL_27;
                  if (v36 >= 100000)
                    v36 = 100000;
                  *(_QWORD *)(v2 + 112) = v36;
                  v35 = __OFADD__(v18++, 1);
                  if (v35)
                  {
                    __break(1u);
                    break;
                  }
                }
              }
            }
          }
        }
        v37[185] = v18;
        goto LABEL_23;
      }
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
}

void sub_2215E8D04(void *a1)
{
  _QWORD *v1;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  __CVMetalTextureCache *v4;
  CVReturn TextureFromImage;
  CVMetalTextureRef v6;
  void *v7;
  size_t v8;
  size_t v9;
  CVReturn v10;
  CVMetalTextureRef v11;
  void *v12;
  __CVBuffer *pixelBuffer;
  CVMetalTextureRef textureOut[2];

  textureOut[1] = *(CVMetalTextureRef *)MEMORY[0x24BDAC8D0];
  pixelBuffer = (__CVBuffer *)objc_msgSend(a1, sel_capturedImage);
  if ((uint64_t)CVPixelBufferGetPlaneCount(pixelBuffer) > 1)
  {
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    textureOut[0] = 0;
    v4 = (__CVMetalTextureCache *)v1[8];
    TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v4, pixelBuffer, 0, MTLPixelFormatR8Unorm, WidthOfPlane, HeightOfPlane, 0, textureOut);
    v6 = textureOut[0];
    if (TextureFromImage)
    {

      v6 = 0;
    }
    v7 = (void *)v1[6];
    v1[6] = v6;

    v8 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
    v9 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
    textureOut[0] = 0;
    v10 = CVMetalTextureCacheCreateTextureFromImage(0, v4, pixelBuffer, 0, MTLPixelFormatRG8Unorm, v8, v9, 1uLL, textureOut);
    v11 = textureOut[0];

    if (v10)
    {

      v11 = 0;
    }
    v12 = (void *)v1[7];
    v1[7] = v11;

  }
  else
  {

  }
}

void DebugWorldNode.draw(commandBuffer:)(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v7;
  id v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __CVBuffer *v15;
  __CVBuffer *v16;
  id v17;
  id v18;
  _QWORD aBlock[6];

  v2 = v1[5];
  if (v2)
  {
    v3 = v1;
    v4 = (void *)v1[6];
    if (v4)
    {
      v5 = (void *)v1[7];
      if (v5)
      {
        v7 = v3[15];
        swift_unknownObjectRetain();
        v8 = v4;
        v18 = v5;
        v9 = (unint64_t)MetalScene.makeDefaultRenderPassDescriptor()();
        if (v9)
        {
          v17 = (id)v9;
          v10 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_);
          if (v10)
          {
            v11 = v10;
            v12 = swift_allocObject();
            __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB3A0);
            v13 = swift_allocObject();
            *(_OWORD *)(v13 + 16) = xmmword_221656F90;
            *(_QWORD *)(v13 + 32) = v8;
            *(_QWORD *)(v13 + 40) = v18;
            aBlock[0] = v13;
            sub_22165333C();
            *(_QWORD *)(v12 + 16) = aBlock[0];
            aBlock[4] = sub_2215E9A04;
            aBlock[5] = v12;
            aBlock[0] = MEMORY[0x24BDAC760];
            aBlock[1] = 1107296256;
            aBlock[2] = sub_2215E918C;
            aBlock[3] = &block_descriptor_1;
            v14 = _Block_copy(aBlock);
            v15 = (__CVBuffer *)v8;
            v16 = (__CVBuffer *)v18;
            swift_retain();
            swift_release();
            objc_msgSend(a1, sel_addCompletedHandler_, v14);
            _Block_release(v14);
            objc_msgSend(v11, sel_setRenderPipelineState_, v2);
            swift_beginAccess();
            objc_msgSend(v11, sel_setVertexBuffer_offset_atIndex_, *(_QWORD *)(v7 + 192), 0, 0);
            objc_msgSend(v11, sel_setVertexBuffer_offset_atIndex_, v3[9], 0, 1);
            objc_msgSend(v11, sel_setVertexBuffer_offset_atIndex_, v3[11], 0, 2);
            objc_msgSend(v11, sel_setVertexTexture_atIndex_, CVMetalTextureGetTexture(v15), 0);
            swift_unknownObjectRelease();
            objc_msgSend(v11, sel_setVertexTexture_atIndex_, CVMetalTextureGetTexture(v16), 1);
            swift_unknownObjectRelease();
            objc_msgSend(v11, sel_drawPrimitives_vertexStart_vertexCount_, 0, 0, v3[14]);
            objc_msgSend(v11, sel_endEncoding);
            swift_unknownObjectRelease();

            swift_unknownObjectRelease();
            swift_release();
          }
          else
          {
            swift_unknownObjectRelease();

          }
        }
        else
        {
          swift_unknownObjectRelease();

        }
      }
    }
  }
}

uint64_t sub_2215E918C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_2215E91D4()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v2 = (void *)sub_22165318C();
  v3 = objc_msgSend(v1, sel_stringForKey_, v2);

  if (v3)
  {
    v4 = sub_2216531B0();
    v6 = v5;

    if (*(uint64_t *)(v0 + 112) >= 1)
      sub_2215E92A4(v4, v6);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 112) = 0;
}

uint64_t sub_2215E92A4(uint64_t a1, uint64_t a2)
{
  simd_float4x4 *v2;
  simd_float4x4 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  float32x4_t *v19;
  float32x4_t v20;
  float v21;
  float v22;
  float v23;
  __int128 v24;
  unsigned int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v3 = v2;
  v6 = sub_2216531D4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_221652F40();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  if ((v3[3].columns[0].i8[0] & 1) != 0)
    return 0;
  v32 = a1;
  v33 = a2;
  v34 = v9;
  v35 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = v7;
  v31 = v6;
  *(double *)&v14 = simd_quaternion(v3[2]);
  v36 = v14;
  v38 = 0;
  v39 = 0xE000000000000000;
  sub_221653894();
  sub_221653210();
  v37 = v3[1].columns[3].i64[0];
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653210();
  sub_22165342C();
  sub_221653210();
  sub_22165342C();
  sub_221653210();
  sub_22165342C();
  sub_221653210();
  sub_22165342C();
  sub_221653210();
  sub_22165342C();
  sub_221653210();
  sub_22165342C();
  sub_221653210();
  sub_22165342C();
  sub_221653210();
  v37 = v3[1].columns[3].i64[0];
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  result = sub_221653210();
  v15 = v38;
  v16 = v39;
  v40 = v38;
  v41 = v39;
  v17 = v3[1].columns[3].i64[0];
  if ((v17 & 0x8000000000000000) == 0)
  {
    if (!v17)
    {
LABEL_17:
      v26 = v35;
      sub_221652F04();
      v38 = v15;
      v39 = v16;
      swift_bridgeObjectRetain();
      v27 = v34;
      sub_2216531C8();
      sub_2215C7D84();
      sub_221653744();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v31);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v26, v10);
      swift_bridgeObjectRelease();
      return 1;
    }
    v28 = v11;
    v29 = v10;
    v18 = (__int128 *)v3[1].columns[1].i64[0];
    v19 = (float32x4_t *)v3[1].columns[2].i64[0];
    while (1)
    {
      v20 = *v19;
      v21 = roundf(vmuls_lane_f32(255.0, *v19, 2));
      if ((~LODWORD(v21) & 0x7F800000) == 0)
        break;
      if (v21 <= -1.0)
        goto LABEL_19;
      if (v21 >= 4295000000.0)
        goto LABEL_20;
      v22 = roundf(vmuls_lane_f32(255.0, *(float32x2_t *)v20.f32, 1));
      if ((~LODWORD(v22) & 0x7F800000) == 0)
        goto LABEL_21;
      if (v22 <= -1.0)
        goto LABEL_22;
      if (v22 >= 4295000000.0)
        goto LABEL_23;
      v23 = roundf(255.0 * v20.f32[0]);
      if ((~LODWORD(v23) & 0x7F800000) == 0)
        goto LABEL_24;
      if (v23 <= -1.0)
        goto LABEL_25;
      if (v23 >= 4295000000.0)
        goto LABEL_26;
      v24 = *v18++;
      v36 = v24;
      v25 = v21 | (v22 << 8) | (v23 << 16);
      v38 = 0;
      v39 = 0xE000000000000000;
      sub_22165342C();
      sub_221653210();
      sub_22165342C();
      sub_221653210();
      sub_22165342C();
      sub_221653210();
      LODWORD(v37) = v25;
      sub_221653ABC();
      sub_221653210();
      swift_bridgeObjectRelease();
      sub_221653210();
      sub_221653210();
      result = swift_bridgeObjectRelease();
      ++v19;
      if (!--v17)
      {
        v15 = v40;
        v16 = v41;
        v11 = v28;
        v10 = v29;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
  return result;
}

void DebugWorldNode.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DebugWorldNode.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_2215E9928()
{
  id *v0;

  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

id *DebugWorldNode.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t DebugWorldNode.__deallocating_deinit()
{
  DebugWorldNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2215E99E0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2215E9A04()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t type metadata accessor for DebugWorldNode()
{
  return objc_opt_self();
}

double simd_quaternion(simd_float4x4 a1)
{
  float v1;
  float v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  unsigned __int32 v11;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;

  v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    a1.columns[3].f32[0] = sqrtf(v1 + 1.0);
    v5 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]));
    v6 = vmul_f32(v5, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v5));
    *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v6, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v6)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      a1.columns[3].f32[0] = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      a1.columns[3].f32[0] = a1.columns[3].f32[0] + a1.columns[3].f32[0];
      v16 = vrecpe_f32((float32x2_t)a1.columns[3].u32[0]);
      v17 = vmul_f32(v16, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v16));
      v18.i32[0] = vmul_f32(v17, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v17)).u32[0];
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v17.i32[1] = a1.columns[3].i32[0];
      v18.i32[1] = 0.25;
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v17, v18);
    }
    else
    {
      v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      *(float32x2_t *)a1.columns[3].f32 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32));
      *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    *(int32x2_t *)a1.columns[3].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    v7 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, *(float32x2_t *)a1.columns[3].f32);
    a1.columns[3].i32[0] = 2.0;
    v8.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), *(float32x2_t *)a1.columns[3].f32).u32[0];
    v8.i32[1] = v7.i32[1];
    v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
    v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
    v11 = vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v11;
    *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v8, _D5);
  }
  return *(double *)a1.columns[3].i64;
}

unint64_t sub_2215E9C60()
{
  unint64_t result;

  result = qword_2556DB580;
  if (!qword_2556DB580)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2556DB580);
  }
  return result;
}

id sub_2215E9C9C(void *a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v23[2];

  v23[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD6B8]), sel_init);
  objc_msgSend(v4, sel_setAlphaToCoverageEnabled_, 1);
  v5 = (void *)sub_22165318C();
  v6 = objc_msgSend(a2, sel_newFunctionWithName_, v5);

  if (!v6)
  {
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v4, sel_setVertexFunction_, v6);
  swift_unknownObjectRelease();
  v7 = (void *)sub_22165318C();
  v8 = objc_msgSend(a2, sel_newFunctionWithName_, v7);

  if (!v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v4, sel_setFragmentFunction_, v8);
  swift_unknownObjectRelease();
  objc_msgSend(v4, sel_setDepthAttachmentPixelFormat_, objc_msgSend(a1, sel_depthStencilPixelFormat));
  v9 = objc_msgSend(v4, sel_colorAttachments);
  v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

  if (!v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v10, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  v11 = objc_msgSend(v4, sel_colorAttachments);
  v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 0);

  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v12, sel_setBlendingEnabled_, 1);

  v13 = objc_msgSend(v4, sel_colorAttachments);
  v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  objc_msgSend(v14, sel_setDestinationRGBBlendFactor_, 5);

  v15 = objc_msgSend(v4, sel_colorAttachments);
  v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
    goto LABEL_19;
  objc_msgSend(v16, sel_setDestinationAlphaBlendFactor_, 5);

  v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {

    return 0;
  }
  v23[0] = 0;
  v18 = objc_msgSend(v17, sel_newRenderPipelineStateWithDescriptor_error_, v4, v23);
  swift_unknownObjectRelease();
  v19 = v23[0];
  if (!v18)
  {
    v20 = v19;
    v21 = (void *)sub_221652ED4();

    swift_willThrow();
    return 0;
  }

  return v18;
}

uint64_t clamp<A>(_:min:max:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char v13;

  if ((sub_221653144() & 1) != 0)
  {
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16);
    v11 = a5;
    v12 = a2;
  }
  else
  {
    v13 = sub_221653138();
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16);
    if ((v13 & 1) != 0)
    {
      v11 = a5;
      v12 = a3;
    }
    else
    {
      v11 = a5;
      v12 = a1;
    }
  }
  return v10(v11, v12, a4);
}

double closestPointOnLine(lineP1:lineP2:point:)(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x2_t v4;
  int8x16_t v5;
  float v6;
  float32x2_t v7;
  float v8;

  v3 = vsubq_f32(a2, a1);
  v4 = vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v3.f32);
  v4.f32[0] = sqrtf(vmuls_lane_f32(v3.f32[2], v3, 2) + vaddv_f32(v4));
  if (v4.f32[0] != 0.0)
  {
    *(float32x2_t *)v3.f32 = vdiv_f32(*(float32x2_t *)v3.f32, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 0));
    v5 = (int8x16_t)vsubq_f32(a3, a1);
    v6 = *(float *)&v5.i32[1];
    v7.i32[0] = vextq_s8(v5, v5, 8uLL).u32[0];
    v7.i32[1] = v5.i32[0];
    *(int32x2_t *)v5.i8 = vdup_lane_s32(*(int32x2_t *)v3.f32, 0);
    *(float *)v5.i32 = v3.f32[2] / v4.f32[0];
    *(float32x2_t *)v5.i8 = vmul_f32(v7, *(float32x2_t *)v5.i8);
    v8 = *(float *)v5.i32 + (float)(*(float *)&v5.i32[1] + vmuls_lane_f32(v6, *(float32x2_t *)v3.f32, 1));
    if (v4.f32[0] >= v8)
    {
      a2.i64[0] = a1.i64[0];
      if (v8 >= 0.0)
        *(float32x2_t *)a2.f32 = vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32(*(float32x2_t *)v3.f32, v8));
    }
    a1.i64[0] = a2.i64[0];
  }
  return *(double *)a1.i64;
}

double closestPointOnLine(lineP1:lineP2:point:)(double a1, double a2, double a3)
{
  return closestPointOnLine(lineP1:lineP2:point:)((float32x4_t)*(unint64_t *)&a1, (float32x4_t)*(unint64_t *)&a2, (float32x4_t)*(unint64_t *)&a3);
}

float lineIntersection(line1P1:line1P2:line2P1:line2P2:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  float v7;
  float v8;

  v4 = vsubq_f32(a2, a1);
  v5 = vsubq_f32(a4, a3);
  a1.i64[0] = vsubq_f32(a1, a3).u64[0];
  v6 = vmuls_lane_f32(v4.f32[2], v5, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v5.f32));
  v7 = vmuls_lane_f32(v5.f32[2], v5, 2)
     + (float)(vmulq_f32(v5, v5).f32[0] + vmuls_lane_f32(v5.f32[1], *(float32x2_t *)v5.f32, 1));
  a3.f32[0] = (float)((float)(vmuls_lane_f32(v4.f32[2], v4, 2)
                            + (float)(vmulq_f32(v4, v4).f32[0] + vmuls_lane_f32(v4.f32[1], *(float32x2_t *)v4.f32, 1)))
                    * v7)
            - (float)(v6 * v6);
  v8 = (float)((float)(v6
                     * (float)(vmuls_lane_f32(a1.f32[2] - a3.f32[2], v5, 2)
                             + (float)(vmuls_n_f32(a1.f32[0], v5.f32[0])
                                     + vmuls_lane_f32(a1.f32[1], *(float32x2_t *)v5.f32, 1))))
             - (float)((float)(vmuls_lane_f32(a1.f32[2] - a3.f32[2], v4, 2)
                             + (float)(vmuls_n_f32(v4.f32[0], a1.f32[0])
                                     + vmuls_lane_f32(v4.f32[1], *(float32x2_t *)a1.f32, 1)))
                     * v7))
     / a3.f32[0];
  if (a3.f32[0] < 0.00000011921)
    return 0.0;
  else
    return v8;
}

uint64_t lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float v4;
  float v5;
  float32x4_t v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  int32x2_t v12;
  float v13;
  float32x2_t v14;
  int8x16_t v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;

  v4 = lineIntersection(line1P1:line1P2:line2P1:line2P2:)(a1, a2, a3, a4);
  v6 = vsubq_f32(a2, a1);
  v7 = 1.0;
  if (v4 <= 1.0)
    v8 = v4;
  else
    v8 = 1.0;
  v9 = v4 < 0.0;
  v10 = 0.0;
  if (v9)
    v8 = 0.0;
  v11 = vmuls_lane_f32(v8, v6, 2);
  v12 = (int32x2_t)vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32(*(float32x2_t *)v6.f32, v8));
  v13 = a1.f32[2] + v11;
  v14 = (float32x2_t)vdup_lane_s32(v12, 0);
  v15 = (int8x16_t)vsubq_f32(a4, a3);
  if (v5 <= 1.0)
    v7 = v5;
  if (v5 >= 0.0)
    v10 = v7;
  v16 = vmuls_lane_f32(v10, *(float32x2_t *)v15.i8, 1);
  v17.i32[0] = vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL).u32[0];
  v17.i32[1] = a3.i32[0];
  v18.i32[0] = vextq_s8(v15, v15, 8uLL).u32[0];
  v18.i32[1] = v15.i32[0];
  v14.f32[0] = v13;
  v19 = vsub_f32(vadd_f32(v17, vmul_n_f32(v18, v10)), v14);
  v20 = vmul_f32(v19, v19);
  if ((float)(v20.f32[0]
             + (float)(v20.f32[1]
                     + (float)((float)((float)(a3.f32[1] + v16) - *(float *)&v12.i32[1])
                             * (float)((float)(a3.f32[1] + v16) - *(float *)&v12.i32[1])))) < 0.0001)
    return (uint64_t)v12;
  else
    return 0;
}

uint64_t lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)(double a1, double a2, double a3, double a4)
{
  uint64_t result;
  char v5;

  result = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)((float32x4_t)*(unint64_t *)&a1, (float32x4_t)*(unint64_t *)&a2, (float32x4_t)*(unint64_t *)&a3, (float32x4_t)*(unint64_t *)&a4);
  if ((v5 & 1) != 0)
    return 0;
  return result;
}

BOOL lineInRect(rectOrigin:rectSize:lineP1:lineP2:)(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  _BOOL8 result;
  float32x2_t v6;

  if ((vcgt_f32(a1, a3).u8[0] & 1) != 0 && (vcgt_f32(a1, a4).u8[0] & 1) != 0)
    return 0;
  result = 0;
  if (a4.f32[1] >= a1.f32[1] || a3.f32[1] >= a1.f32[1])
  {
    v6 = vadd_f32(a1, a2);
    if ((vcgt_f32(a3, v6).u32[0] & vcgt_f32(a4, v6).u32[0] & 1) == 0)
      return v6.f32[1] >= a4.f32[1] || v6.f32[1] >= a3.f32[1];
  }
  return result;
}

uint64_t clipLineToRect(rectOrigin:rectSize:lineP1:lineP2:)(double a1, float32x2_t a2, double a3, double a4)
{
  float32x2_t v4;
  float32x2_t v5;
  uint64_t v6;
  char v7;
  float32x2_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  float32x2_t v31;
  int32x2_t v32;
  float32x2_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  unint64_t v53;
  uint64_t v54;

  v4 = vadd_f32(*(float32x2_t *)&a1, a2);
  v5 = v4;
  v43 = v4;
  v4.i32[1] = HIDWORD(a1);
  v49 = v5;
  v53 = __PAIR64__(v5.u32[1], LODWORD(a1));
  v45 = (float32x4_t)(unint64_t)v4;
  v46 = (float32x4_t)*(unint64_t *)&a1;
  v51 = (float32x4_t)*(unint64_t *)&a4;
  v52 = (float32x4_t)*(unint64_t *)&a3;
  v6 = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)((float32x4_t)*(unint64_t *)&a1, (float32x4_t)(unint64_t)v4, (float32x4_t)*(unint64_t *)&a3, (float32x4_t)*(unint64_t *)&a4);
  if ((v7 & 1) != 0)
  {
    v8 = (float32x2_t *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v41 = v6;
    v8 = (float32x2_t *)sub_2215D7214(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v10 = (unint64_t)v8[2];
    v9 = (unint64_t)v8[3];
    if (v10 >= v9 >> 1)
      v8 = (float32x2_t *)sub_2215D7214((char *)(v9 > 1), v10 + 1, 1, (char *)v8);
    v8[2] = (float32x2_t)(v10 + 1);
    v8[v10 + 4] = (float32x2_t)v41;
  }
  v11 = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)((float32x4_t)v53, (float32x4_t)(unint64_t)v49, v52, v51);
  if ((v12 & 1) == 0)
  {
    v42 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = (float32x2_t *)sub_2215D7214(0, *(_QWORD *)&v8[2] + 1, 1, (char *)v8);
    v14 = (unint64_t)v8[2];
    v13 = (unint64_t)v8[3];
    if (v14 >= v13 >> 1)
      v8 = (float32x2_t *)sub_2215D7214((char *)(v13 > 1), v14 + 1, 1, (char *)v8);
    v8[2] = (float32x2_t)(v14 + 1);
    v8[v14 + 4] = (float32x2_t)v42;
  }
  v15 = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)(v45, (float32x4_t)(unint64_t)v49, v52, v51);
  if ((v16 & 1) == 0)
  {
    v50 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = (float32x2_t *)sub_2215D7214(0, *(_QWORD *)&v8[2] + 1, 1, (char *)v8);
    v18 = (unint64_t)v8[2];
    v17 = (unint64_t)v8[3];
    if (v18 >= v17 >> 1)
      v8 = (float32x2_t *)sub_2215D7214((char *)(v17 > 1), v18 + 1, 1, (char *)v8);
    v8[2] = (float32x2_t)(v18 + 1);
    v8[v18 + 4] = (float32x2_t)v50;
  }
  v19 = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)(v46, (float32x4_t)v53, v52, v51);
  if ((v20 & 1) != 0)
  {
    v23 = (unint64_t)v8[2];
    v25 = *(float32x2_t *)&a3;
    v24 = *(float32x2_t *)&a4;
    if (v23 > 1)
      goto LABEL_37;
  }
  else
  {
    v54 = v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = (float32x2_t *)sub_2215D7214(0, *(_QWORD *)&v8[2] + 1, 1, (char *)v8);
    v22 = (unint64_t)v8[2];
    v21 = (unint64_t)v8[3];
    v23 = v22 + 1;
    v25 = *(float32x2_t *)&a3;
    v24 = *(float32x2_t *)&a4;
    if (v22 >= v21 >> 1)
    {
      v38 = sub_2215D7214((char *)(v21 > 1), v22 + 1, 1, (char *)v8);
      v25 = *(float32x2_t *)&a3;
      v24 = *(float32x2_t *)&a4;
      v8 = (float32x2_t *)v38;
    }
    v8[2] = (float32x2_t)v23;
    v8[v22 + 4] = (float32x2_t)v54;
    if (v23 > 1)
    {
LABEL_37:
      if (v23 == 2)
      {
LABEL_38:
        v31 = v8[4];
        goto LABEL_52;
      }
LABEL_51:
      v31 = 0;
      goto LABEL_52;
    }
  }
  if ((vcgt_f32(*(float32x2_t *)&a1, v25).u8[0] & 1) == 0)
  {
    v26 = vcgt_f32(v25, v43);
    if ((v26.i8[0] & 1) == 0 && v25.f32[1] >= *((float *)&a1 + 1) && (v26.i8[4] & 1) == 0)
    {
      if (!v23 || (v27 = vsub_f32(v25, v8[4]), vaddv_f32(vmul_f32(v27, v27)) > 0.00000011921))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = (float32x2_t *)sub_2215D7214(0, v23 + 1, 1, (char *)v8);
        v29 = (unint64_t)v8[2];
        v28 = (unint64_t)v8[3];
        v23 = v29 + 1;
        v30 = a3;
        v24 = *(float32x2_t *)&a4;
        if (v29 >= v28 >> 1)
        {
          v39 = sub_2215D7214((char *)(v28 > 1), v29 + 1, 1, (char *)v8);
          v30 = a3;
          v24 = *(float32x2_t *)&a4;
          v8 = (float32x2_t *)v39;
        }
        v8[2] = (float32x2_t)v23;
        *(double *)&v8[v29 + 4] = v30;
        if (v29)
          goto LABEL_37;
      }
      v23 = 1;
    }
  }
  v31 = 0;
  if ((vcgt_f32(*(float32x2_t *)&a1, v24).u8[0] & 1) == 0)
  {
    v32 = vcgt_f32(v24, v43);
    if ((v32.i8[0] & 1) == 0)
    {
      v31 = 0;
      if (v24.f32[1] >= *((float *)&a1 + 1) && (v32.i8[4] & 1) == 0)
      {
        if (v23)
        {
          v33 = vsub_f32(v24, v8[4]);
          if (vaddv_f32(vmul_f32(v33, v33)) <= 0.00000011921)
          {
            v31 = 0;
            goto LABEL_52;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = (float32x2_t *)sub_2215D7214(0, v23 + 1, 1, (char *)v8);
        v35 = (unint64_t)v8[2];
        v34 = (unint64_t)v8[3];
        v36 = a4;
        if (v35 >= v34 >> 1)
        {
          v40 = sub_2215D7214((char *)(v34 > 1), v35 + 1, 1, (char *)v8);
          v36 = a4;
          v8 = (float32x2_t *)v40;
        }
        v8[2] = (float32x2_t)(v35 + 1);
        *(double *)&v8[v35 + 4] = v36;
        if (v35 == 1)
          goto LABEL_38;
        goto LABEL_51;
      }
    }
  }
LABEL_52:
  swift_bridgeObjectRelease();
  return (uint64_t)v31;
}

uint64_t pointInRect(rectOrigin:rectSize:point:)(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  uint64_t result;
  int8x8_t v4;

  result = 0;
  if ((vcgt_f32(a1, a3).u8[0] & 1) == 0)
  {
    v4 = (int8x8_t)vcgt_f32(a3, vadd_f32(a1, a2));
    if ((v4.i8[0] & 1) == 0)
      return (a3.f32[1] >= a1.f32[1]) & vmvn_s8(v4).u32[1];
  }
  return result;
}

void __swiftcall slerp(transform1:transform2:percent:)(simd_float4x4 *__return_ptr retstr, simd_float4x4 *transform1, simd_float4x4 *transform2, Swift::Float percent)
{
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_quatf v8;
  float32x4_t v9;
  simd_quatf v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  float v15;
  simd_float4x4 v16;

  v11 = v7;
  v14 = v6;
  v12 = v4;
  v13 = v5;
  *(double *)v8.vector.i64 = simd_quaternion(*(simd_float4x4 *)&percent);
  v10 = v8;
  v16.columns[0] = v12;
  v16.columns[1] = v13;
  v16.columns[2] = v14;
  v16.columns[3] = v11;
  *(double *)v9.i64 = simd_quaternion(v16);
  simd_slerp((float32x4_t)v10, v9, v15);
  MEMORY[0x22766EAC8]();
}

double createTransform(forward:normal:position:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  double result;

  v3 = vmulq_f32(a1, a2);
  v4 = vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1));
  v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), v4);
  v4.i32[0] = 1065353214;
  v6 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v5, v4)), 0), (int8x16_t)a2, vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL));
  v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL), vnegq_f32(v6)), a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmulq_f32(v7, v7);
  v9.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), *(float32x2_t *)v9.i8)).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  *(_QWORD *)&result = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]).u64[0];
  return result;
}

double createTransform(normal:forward:position:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  double result;

  v3 = vmulq_f32(a1, a2);
  v4 = vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1));
  v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), v4);
  v4.i32[0] = 1065353214;
  v6 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v5, v4)), 0), (int8x16_t)a2, vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL));
  v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), vnegq_f32(a1)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmulq_f32(v7, v7);
  v9.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), *(float32x2_t *)v9.i8)).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  *(_QWORD *)&result = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]).u64[0];
  return result;
}

Swift::Float __swiftcall tan(cosine:)(Swift::Float cosine)
{
  return sqrtf(1.0 - (float)(cosine * cosine)) / cosine;
}

Swift::Int __swiftcall random(upperBound:)(Swift::Int upperBound)
{
  Swift::Int v1;
  double v2;

  if (__OFSUB__(upperBound, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  v1 = upperBound - 1;
  v2 = round(drand48() * (double)v1);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 9.22337204e18)
    return (uint64_t)v2;
LABEL_9:
  __break(1u);
  return upperBound;
}

Swift::tuple_index_Int_value_Float_optional __swiftcall min(_:)(Swift::OpaquePointer a1)
{
  float v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  float v7;
  float v8;
  Swift::Int v9;
  char v10;
  Swift::Bool v11;
  Swift::tuple_index_Int_value_Float_optional result;

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v7 = *((float *)a1._rawValue + 8);
    v6 = (char *)a1._rawValue + 32;
    v1 = v7;
    do
    {
      v8 = *(float *)&v6[4 * v5];
      if (v8 < v1)
        v4 = v5;
      v9 = v5 + 1;
      if (v8 < v1)
        v1 = *(float *)&v6[4 * v5];
      ++v5;
    }
    while (v2 != v9);
    v10 = LOBYTE(v1);
  }
  else
  {
    v4 = 0;
    v10 = 0;
  }
  v11 = v10;
  result.value.index = v4;
  result.value.value = v1;
  result.is_nil = v11;
  return result;
}

Swift::tuple_index_Int_value_Float_optional __swiftcall max(_:)(Swift::OpaquePointer a1)
{
  float v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  float v7;
  float v8;
  Swift::Int v9;
  char v10;
  Swift::Bool v11;
  Swift::tuple_index_Int_value_Float_optional result;

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v7 = *((float *)a1._rawValue + 8);
    v6 = (char *)a1._rawValue + 32;
    v1 = v7;
    do
    {
      v8 = *(float *)&v6[4 * v5];
      if (v1 < v8)
        v4 = v5;
      v9 = v5 + 1;
      if (v1 < v8)
        v1 = *(float *)&v6[4 * v5];
      ++v5;
    }
    while (v2 != v9);
    v10 = LOBYTE(v1);
  }
  else
  {
    v4 = 0;
    v10 = 0;
  }
  v11 = v10;
  result.value.index = v4;
  result.value.value = v1;
  result.is_nil = v11;
  return result;
}

uint64_t pointClosestToOrigin(_:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  float32x2_t v6;
  unint64_t v7;
  unint64_t index;
  uint64_t v9;
  uint64_t result;
  Swift::OpaquePointer v11;
  Swift::tuple_index_Int_value_Float_optional v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v11._rawValue = (void *)MEMORY[0x24BEE4AF8];
  sub_2215CBFF4(0, v1, 0);
  v3 = 0;
  v4 = a1 + 32;
  v5 = *((_QWORD *)v11._rawValue + 2);
  do
  {
    v6 = *(float32x2_t *)(v4 + 8 * v3);
    v7 = *((_QWORD *)v11._rawValue + 3);
    if (v5 >= v7 >> 1)
      sub_2215CBFF4((char *)(v7 > 1), v5 + 1, 1);
    ++v3;
    *((_QWORD *)v11._rawValue + 2) = v5 + 1;
    *((float *)v11._rawValue + v5++ + 8) = sqrtf(vaddv_f32(vmul_f32(v6, v6)));
  }
  while (v1 != v3);
  v12 = min(_:)(v11);
  index = v12.value.index;
  v9 = *(_QWORD *)&v12.is_nil;
  result = swift_release();
  if ((v9 & 0x100000000) == 0)
  {
    if (index < v1)
      return *(_QWORD *)(v4 + 8 * index);
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::tuple_index1_Int_index2_Int_smallestDistance_Float __swiftcall closestPointsBetween(_:_:)(Swift::OpaquePointer a1, Swift::OpaquePointer a2)
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  float v11;
  Swift::Int v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  Swift::Int v16;
  Swift::tuple_index1_Int_index2_Int_smallestDistance_Float result;

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (v2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *((_QWORD *)a2._rawValue + 2);
    v9 = (char *)a1._rawValue + 32;
    v10 = (char *)a2._rawValue + 32;
    v11 = 3.4028e38;
    do
    {
      if (v8)
      {
        v12 = 0;
        do
        {
          v13 = vsubq_f32(*(float32x4_t *)&v9[16 * v7], *(float32x4_t *)&v10[16 * v12]);
          v14 = vmulq_f32(v13, v13);
          v15 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
          if (v15 < v11)
            v5 = v12;
          v16 = v12 + 1;
          if (v15 < v11)
          {
            v11 = v15;
            v6 = v7;
          }
          ++v12;
        }
        while (v8 != v16);
      }
      ++v7;
    }
    while (v7 != v2);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v11 = 3.4028e38;
  }
  result.index2 = v5;
  result.index1 = v6;
  result.smallestDistance = v11;
  return result;
}

Swift::Float __swiftcall orientationSimilarity(between:and:)(simd_float3x3 *between, simd_float3x3 *and)
{
  float32x4_t v2;
  uint64_t inited;
  uint64_t v4;
  Swift::Float result;
  int32x4_t v6;
  int32x4_t v7;
  unsigned __int32 v8;
  Swift::tuple_index_Int_value_Float_optional v9;

  v7 = (int32x4_t)vmulq_f32((float32x4_t)between->columns[0], (float32x4_t)and->columns[0]);
  v6 = (int32x4_t)vmulq_f32((float32x4_t)between->columns[1], (float32x4_t)and->columns[1]);
  v2 = vmulq_f32((float32x4_t)between->columns[2], (float32x4_t)and->columns[2]);
  v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).u32[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9610);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_221655530;
  *(int32x2_t *)(inited + 32) = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))));
  *(_DWORD *)(inited + 40) = v8;
  v9 = min(_:)((Swift::OpaquePointer)inited);
  v4 = *(_QWORD *)&v9.is_nil;
  swift_setDeallocating();
  result = *(float *)&v4;
  if ((v4 & 0x100000000) != 0)
    return 0.0;
  return result;
}

Swift::Float __swiftcall triangleArea2D(forPoints:)(Swift::OpaquePointer forPoints)
{
  unint64_t v1;
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  unsigned __int32 v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  Swift::Float result;

  v1 = *((_QWORD *)forPoints._rawValue + 2);
  if (v1 < 2)
  {
    __break(1u);
  }
  else if (v1 != 2)
  {
    v2 = *(float32x2_t *)((char *)forPoints._rawValue + 32);
    v3 = vsub_f32(*(float32x2_t *)((char *)forPoints._rawValue + 40), v2);
    v4 = vmul_f32(v3, v3);
    v5 = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
    v6 = vrsqrte_f32((float32x2_t)v5);
    v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5, vmul_f32(v6, v6)));
    v8 = vmul_n_f32(v3, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5, vmul_f32(v7, v7))).f32[0]);
    v9 = *(float32x2_t *)((char *)forPoints._rawValue + 48);
    v10 = vmul_f32(vsub_f32(v9, v2), v8);
    v11 = vsub_f32(vadd_f32(v2, vmul_n_f32(v8, vadd_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).f32[0])), v9);
    return (float)(sqrtf(vaddv_f32(v4)) * sqrtf(vaddv_f32(vmul_f32(v11, v11)))) * 0.5;
  }
  __break(1u);
  return result;
}

Swift::Float __swiftcall rectangleArea2D(forPoints:)(Swift::OpaquePointer forPoints)
{
  double v1;
  double v2;
  float32x2_t v4;
  uint64_t inited;
  Swift::Float result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;

  v4 = sub_2215D23AC((uint64_t)forPoints._rawValue, v1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA1F0);
  inited = swift_initStackObject();
  LODWORD(result) = 3;
  *(_OWORD *)(inited + 16) = xmmword_221655530;
  v7 = *((_QWORD *)forPoints._rawValue + 2);
  if (!v7)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = *((_QWORD *)forPoints._rawValue + 4);
  *(_QWORD *)(inited + 32) = v8;
  if (v7 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v9 = *((_QWORD *)forPoints._rawValue + 5);
  *(_QWORD *)(inited + 40) = v9;
  *(float32x2_t *)(inited + 48) = v4;
  v10 = triangleArea2D(forPoints:)((Swift::OpaquePointer)inited);
  swift_setDeallocating();
  v11 = swift_initStackObject();
  LODWORD(result) = 3;
  *(_OWORD *)(v11 + 16) = xmmword_221655530;
  *(_QWORD *)(v11 + 32) = v9;
  if (v7 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = *((_QWORD *)forPoints._rawValue + 6);
  *(_QWORD *)(v11 + 40) = v12;
  *(float32x2_t *)(v11 + 48) = v4;
  v13 = triangleArea2D(forPoints:)((Swift::OpaquePointer)v11);
  swift_setDeallocating();
  v14 = swift_initStackObject();
  LODWORD(result) = 3;
  *(_OWORD *)(v14 + 16) = xmmword_221655530;
  *(_QWORD *)(v14 + 32) = v12;
  if (v7 != 3)
  {
    v15 = v10 + v13;
    v16 = *((_QWORD *)forPoints._rawValue + 7);
    *(_QWORD *)(v14 + 40) = v16;
    *(float32x2_t *)(v14 + 48) = v4;
    v17 = triangleArea2D(forPoints:)((Swift::OpaquePointer)v14);
    swift_setDeallocating();
    v18 = swift_initStackObject();
    *(_OWORD *)(v18 + 16) = xmmword_221655530;
    *(_QWORD *)(v18 + 32) = v16;
    *(_QWORD *)(v18 + 40) = v8;
    *(float32x2_t *)(v18 + 48) = v4;
    v19 = triangleArea2D(forPoints:)((Swift::OpaquePointer)v18);
    swift_setDeallocating();
    return (float)(v15 + v17) + v19;
  }
LABEL_9:
  __break(1u);
  return result;
}

double mix(_:_:_:)(double a1, double a2, double a3)
{
  return (a2 - a1) * a3 + a1;
}

double mix(_:_:_:)(double a1, double a2, double a3, double a4, double a5)
{
  float v5;

  v5 = a5;
  return (a3 - a1) * v5 + a1;
}

id mix(_:_:_:)(double a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v2 = UIColor.rgba.getter();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v2 + (UIColor.rgba.getter() - v2) * a1;
  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithDisplayP3Red_green_blue_alpha_, v9, v4 + (v10 - v4) * a1, v6 + (v11 - v6) * a1, v8 + (v12 - v8) * a1);
}

Swift::Double __swiftcall spring(tension:friction:velocity:elapsed:)(Swift::Double tension, Swift::Double friction, Swift::Double velocity, Swift::Double elapsed)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  __double2 v10;
  double v11;
  Swift::Double result;

  v5 = sqrt(tension);
  v6 = friction / (v5 + v5);
  if (v6 >= 1.0)
  {
    if (v6 != 1.0)
    {
      sub_221653984();
      __break(1u);
      return result;
    }
    v11 = (v5 * velocity * elapsed + 1.0) * pow(2.71828183, -(v5 * elapsed));
  }
  else
  {
    v7 = v5 * sqrt(1.0 - v6 * v6);
    v8 = (v5 * v6 + velocity) / v7;
    v9 = pow(2.71828183, -(v6 * v5) * elapsed);
    v10 = __sincos_stret(v7 * elapsed);
    v11 = v9 * (v10.__cosval + v8 * v10.__sinval);
  }
  return 1.0 - v11;
}

void simd_slerp(float32x4_t a1, float32x4_t a2, float a3)
{
  float32x4_t v3;
  float32x4_t v4;

  v3 = vmulq_f32(a1, a2);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i32[0] = 0;
  _simd_slerp_internal(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;

  v5 = 1.0 - a3;
  v6 = vsubq_f32(a1, a2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vaddq_f32(a1, a2);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0)
    sinf(v11);
  if ((float)(v5 * v11) != 0.0)
    sinf(v5 * v11);
  v12 = v11 * a3;
  if (v12 != 0.0)
    sinf(v12);
}

double simd_float4x4.position.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

double simd_float4x4.forward.getter(double a1, double a2, double a3)
{
  return a3;
}

double simd_float4x4.up.getter(double a1, double a2)
{
  return a2;
}

int32x2_t simd_float4x4.arrayOf9.getter(int8x16_t a1, int8x16_t a2, __n128 a3)
{
  uint64_t v3;
  int32x2_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9610);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_221657050;
  *(int32x2_t *)(v3 + 32) = vzip1_s32(*(int32x2_t *)a1.i8, *(int32x2_t *)a2.i8);
  *(_QWORD *)(v3 + 40) = __PAIR64__(a1.u32[1], a3.n128_u32[0]);
  result = vzip2_s32(*(int32x2_t *)a2.i8, (int32x2_t)a3.n128_u64[0]);
  *(int32x2_t *)(v3 + 48) = result;
  *(int32x2_t *)(v3 + 56) = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL));
  *(_DWORD *)(v3 + 64) = a3.n128_u32[2];
  return result;
}

int32x2_t simd_float4x4.arrayOf12.getter(int8x16_t a1, int8x16_t a2, int8x16_t a3, __n128 a4)
{
  uint64_t v4;
  int32x2_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9610);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_221657060;
  *(int32x2_t *)(v4 + 32) = vzip1_s32(*(int32x2_t *)a1.i8, *(int32x2_t *)a2.i8);
  *(_DWORD *)(v4 + 40) = a3.i32[0];
  *(_QWORD *)(v4 + 44) = __PAIR64__(a1.u32[1], a4.n128_u32[0]);
  *(int32x2_t *)(v4 + 52) = vzip2_s32(*(int32x2_t *)a2.i8, *(int32x2_t *)a3.i8);
  *(int8x8_t *)(v4 + 60) = vext_s8((int8x8_t)a4.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL);
  result = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL));
  *(int32x2_t *)(v4 + 68) = result;
  *(_DWORD *)(v4 + 76) = a4.n128_u32[2];
  return result;
}

double static simd_float4x4.makeRotation(_:_:_:_:)(float a1, float a2, float a3, float a4)
{
  double v5[2];

  GLKMatrix4MakeRotation((uint64_t)v5, a1, a2, a3, a4);
  return v5[0];
}

__n128 simd_float4x4.init(position:)()
{
  return *(__n128 *)MEMORY[0x24BDAEE00];
}

float32x2_t simd_float4x4.apply(to:)(float32x4_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  return vadd_f32(a5, vadd_f32(vadd_f32(vmul_n_f32(a2, a1.f32[0]), vmul_lane_f32(a3, *(float32x2_t *)a1.f32, 1)), vmul_laneq_f32(a4, a1, 2)));
}

double simd_float4x4.translated(to:)(double a1, double a2)
{
  return a2;
}

void __swiftcall simd_float4x4.getCATransform3D()(CATransform3D *__return_ptr retstr)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;

  *(float64x2_t *)&retstr->m11 = vcvtq_f64_f32(*(float32x2_t *)v1.f32);
  *(float64x2_t *)&retstr->m13 = vcvt_hight_f64_f32(v1);
  *(float64x2_t *)&retstr->m21 = vcvtq_f64_f32(*(float32x2_t *)v2.f32);
  *(float64x2_t *)&retstr->m23 = vcvt_hight_f64_f32(v2);
  *(float64x2_t *)&retstr->m31 = vcvtq_f64_f32(*(float32x2_t *)v3.f32);
  *(float64x2_t *)&retstr->m33 = vcvt_hight_f64_f32(v3);
  *(float64x2_t *)&retstr->m41 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  *(float64x2_t *)&retstr->m43 = vcvt_hight_f64_f32(v4);
}

Swift::Bool __swiftcall simd_float4x4.isAlmostHorizontal(marginInDegrees:)(Swift::Float marginInDegrees)
{
  float32x4_t v1;
  float v3;
  float32x4_t v4;
  float32x4_t v6;

  v6 = v1;
  if (qword_2556D8DE0 != -1)
    swift_once();
  v3 = cosf(marginInDegrees * 0.017453);
  v4 = vmulq_f32((float32x4_t)static SIMD3<>.up, v6);
  return fabsf(v3) < fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
}

double _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(double a1, float32x4_t a2)
{
  float32x4_t v2;
  float v3;
  float v5;
  float32x4_t v7;
  float32x4_t v8;
  double v9;

  if (qword_2556D8DD8 != -1)
  {
    v8 = a2;
    swift_once();
    a2 = v8;
  }
  v2 = vmulq_f32((float32x4_t)static SIMD3<>.forward, a2);
  v3 = v2.f32[2] + vaddv_f32(*(float32x2_t *)v2.f32);
  if (v3 > 1.0)
    return *MEMORY[0x24BDAEE00];
  v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), (int8x16_t)a2, 0xCuLL), vnegq_f32((float32x4_t)static SIMD3<>.forward)), a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)static SIMD3<>.forward, (int32x4_t)static SIMD3<>.forward), (int8x16_t)static SIMD3<>.forward, 0xCuLL));
  v5 = acosf(v3);
  GLKMatrix4MakeRotation((uint64_t)&v9, v5, v7.f32[2], v7.f32[0], v7.f32[1]);
  return v9;
}

float GLKMatrix4MakeRotation@<S0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  __float2 v10;
  float v11;
  float v12;
  float result;

  v6 = 1.0 / sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
  v7 = v6 * a3;
  v8 = v6 * a4;
  v9 = v6 * a5;
  v10 = __sincosf_stret(a2);
  v11 = (float)(1.0 - v10.__cosval) * v7;
  *(float *)a1 = v10.__cosval + (float)(v11 * v7);
  *(float *)(a1 + 4) = (float)(v10.__sinval * v9) + (float)(v11 * v8);
  *(float *)(a1 + 8) = -(float)((float)(v10.__sinval * v8) - (float)(v11 * v9));
  *(_DWORD *)(a1 + 12) = 0;
  v12 = (float)(1.0 - v10.__cosval) * v8;
  *(float *)(a1 + 16) = -(float)((float)(v10.__sinval * v9) - (float)(v11 * v8));
  *(float *)(a1 + 20) = v10.__cosval + (float)(v12 * v8);
  *(float *)(a1 + 24) = (float)(v10.__sinval * v7) + (float)(v12 * v9);
  *(_DWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 32) = (float)(v10.__sinval * v8) + (float)(v11 * v9);
  *(float *)(a1 + 36) = -(float)((float)(v10.__sinval * v7) - (float)(v12 * v9));
  result = v10.__cosval + (float)((float)((float)(1.0 - v10.__cosval) * v9) * v9);
  *(float *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

uint64_t MeanShiftPointFilter.minInliners.getter()
{
  return 3;
}

float MeanShiftPointFilter.errorPerMeterSquared.getter()
{
  return 0.0001;
}

uint64_t MeanShiftPointFilter.weightsEnabled.getter()
{
  return 1;
}

uint64_t MeanShiftPointFilter.matlabDebugEnabled.getter()
{
  return 0;
}

uint64_t MeanShiftPointFilter.filter(candidates:iterations:errorThreshold:)@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, int32x2_t a4@<D2>)
{
  _BYTE v6[176];

  sub_2215EBBE0(a1, (uint64_t)v6, a3, a4);
  return sub_2215C6540((uint64_t)v6, a2, &qword_2556DB590);
}

uint64_t MeanShiftPointFilter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MeanShiftPointFilter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

float32x2_t sub_2215EBA84(float32x4_t *a1, float32x4_t a2, float a3, int32x2_t a4)
{
  uint64_t v6;
  __int128 v7;
  float32x4_t *v8;
  __int128 v9;
  __int128 v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v17;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  double v21;
  __int128 v22;

  if (qword_2556D8DD0 != -1)
    swift_once();
  v22 = static SIMD3<>.zero;
  v6 = a1[1].i64[0];
  if (v6)
  {
    swift_bridgeObjectRetain();
    v8 = a1 + 12;
    LODWORD(v9) = 0;
    do
    {
      v11 = v8[-10];
      v12 = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
      if (a3 < 0.0
        || (v13 = vsubq_f32(a2, v11),
            v14 = vmulq_f32(v13, v13),
            (float)(v14.f32[2] + vaddv_f32(*(float32x2_t *)v14.f32)) <= a3))
      {
        LODWORD(v7) = v8->i32[0];
        v19 = v7;
        v20 = v9;
        v18 = v8[-10];
        v11.i32[0] = v12;
        v17 = v11.i64[0];
        swift_retain();
        swift_release();
        v7 = v19;
        *(float32x2_t *)&v10 = vadd_f32(*(float32x2_t *)&v22, vmul_n_f32((float32x2_t)__PAIR64__(HIDWORD(v17), v18.u32[0]), *(float *)&v19));
        *((float *)&v10 + 2) = *((float *)&v22 + 2) + (float)(*(float *)&v19 * *(float *)&v17);
        HIDWORD(v10) = 0;
        v9 = v20;
        *(float *)&v9 = *(float *)&v20 + *(float *)&v19;
        v22 = v10;
      }
      v8 += 11;
      --v6;
    }
    while (v6);
    v21 = *(double *)&v9;
    swift_bridgeObjectRelease();
    *(double *)&a4 = v21;
  }
  else
  {
    a4.i32[0] = 0;
  }
  return vdiv_f32(*(float32x2_t *)&v22, (float32x2_t)vdup_lane_s32(a4, 0));
}

void sub_2215EBBE0(float32x4_t *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, int32x2_t a4@<D2>)
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  float i;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  __int8 v38;
  uint64_t v39;
  uint64_t v40;
  __int32 v41;
  __int32 v42;
  __int32 v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  unsigned __int32 v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  float32x4_t v96;
  float32x4_t v97;
  uint64_t v98;
  float v99;
  unsigned __int32 v100;
  int v101;
  _QWORD *v102;
  _BYTE v103[16];
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  float32x4_t v108;
  uint64_t v109;
  int v110;
  _BYTE v111[176];
  _BYTE v112[176];
  float32x4_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  _BYTE v127[176];

  if (qword_2556D8DD0 != -1)
    swift_once();
  *(float32x2_t *)v7.f32 = sub_2215EBA84(a1, (float32x4_t)static SIMD3<>.zero, -1.0, a4);
  v8 = a1[1].i64[0];
  if (!v8)
  {
    __break(1u);
    return;
  }
  v73 = a1[6];
  v9 = a1[8].i64[0];
  v86 = v7;
  swift_retain();
  v10 = *(_QWORD *)(v9 + 128);
  swift_retain();
  swift_release();
  v11 = *(id *)(v10 + 24);
  swift_release();
  objc_msgSend(v11, sel_transform);
  v83 = v12;

  v13 = v86;
  v14 = vsubq_f32(v83, v86);
  v15 = vmulq_f32(v14, v14);
  v16 = vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1));
  v19 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2);
  LODWORD(v17) = vaddq_f32(v19, v16).u32[0];
  v18 = 0.0;
  v19.i32[0] = 2139095040;
  v20 = 46;
  v21 = v8;
  do
  {
    v22 = a1->f32[v20];
    if (v22 < v19.f32[0])
      v19.i32[0] = a1->i32[v20];
    if (v18 <= v22)
      v18 = a1->f32[v20];
    v20 += 44;
    --v21;
  }
  while (v21);
  v74 = a2;
  v23 = v18 - v19.f32[0];
  v19.i32[0] = 0.5;
  v24 = (float)((float)((float)(v23 * 0.5) * (float)(v23 * 0.5)) * a3) * a3;
  if (v24 > (float)(v17 * 0.0001))
    v25 = v24;
  else
    v25 = v17 * 0.0001;
  do
  {
    v87 = v13;
    *(float32x2_t *)v13.f32 = sub_2215EBA84(a1, v13, v25, *(int32x2_t *)v19.f32);
    v26 = vsubq_f32(v87, v13);
    v27 = vmulq_f32(v26, v26);
  }
  while ((float)(v27.f32[2] + vaddv_f32(*(float32x2_t *)v27.f32)) > 0.0);
  sub_2215EC200((uint64_t)v127);
  swift_bridgeObjectRetain();
  sub_2215C6540((uint64_t)v127, (uint64_t)v112, &qword_2556DB668);
  v28 = 0;
  v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v30 = v8 - 1;
  for (i = INFINITY; ; i = v35)
  {
    v32 = &a1[v28];
    v33 = vsubq_f32(v87, a1[v28 + 2]);
    v34 = vmulq_f32(v33, v33);
    v35 = v34.f32[2] + vaddv_f32(*(float32x2_t *)v34.f32);
    if (v35 >= v25)
      break;
    v37 = v32[3].i64[0];
    v36 = v32[3].i64[1];
    v38 = v32[4].i8[0];
    v81 = v32[5];
    v84 = a1[v28 + 2];
    v77 = v32[7];
    v79 = v32[6];
    v39 = v32[8].i64[0];
    v75 = v32[10];
    v76 = v32[9];
    v40 = v32[11].i64[0];
    v41 = v32[11].i32[2];
    v42 = v32[11].i32[3];
    v43 = v32[12].i32[0];
    swift_retain_n();
    swift_retain_n();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v29 = sub_2215D730C(0, v29[2] + 1, 1, v29);
    v45 = v29[2];
    v44 = v29[3];
    v46 = v29;
    v48 = v81;
    v47 = v84;
    v50 = v77;
    v49 = v79;
    v52 = v75;
    v51 = v76;
    if (v45 >= v44 >> 1)
    {
      v54 = sub_2215D730C((_QWORD *)(v44 > 1), v45 + 1, 1, v29);
      v52 = v75;
      v51 = v76;
      v50 = v77;
      v49 = v79;
      v48 = v81;
      v47 = v84;
      v46 = v54;
    }
    v46[2] = v45 + 1;
    v29 = v46;
    v53 = (float32x4_t *)&v46[22 * v45];
    v53[2] = v47;
    v53[3].i64[0] = v37;
    v53[3].i64[1] = v36;
    v53[4].i8[0] = v38;
    v53[5] = v48;
    v53[6] = v49;
    v53[7] = v50;
    v53[8].i64[0] = v39;
    v53[9] = v51;
    v53[10] = v52;
    v53[11].i64[0] = v40;
    v53[11].i32[2] = v41;
    v53[11].i32[3] = v42;
    v53[12].i32[0] = v43;
    if (v35 >= i)
    {
      swift_release();
      swift_release();
      break;
    }
    sub_2215EC290((uint64_t)v112, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
    v113 = v84;
    v114 = v37;
    v115 = v36;
    v116 = v38;
    v117 = v81;
    v118 = v79;
    v119 = v77;
    v120 = v39;
    v121 = v76;
    v122 = v75;
    v123 = v40;
    v124 = v41;
    v125 = v42;
    v126 = v43;
    nullsub_1(&v113);
    sub_2215C6540((uint64_t)&v113, (uint64_t)v111, &qword_2556DB668);
    if (!v30)
      goto LABEL_27;
LABEL_26:
    sub_2215C6540((uint64_t)v111, (uint64_t)v112, &qword_2556DB668);
    --v30;
    v28 += 11;
  }
  sub_2215C6540((uint64_t)v112, (uint64_t)v111, &qword_2556DB668);
  v35 = i;
  if (v30)
    goto LABEL_26;
LABEL_27:
  swift_bridgeObjectRelease();
  sub_2215C6540((uint64_t)v111, (uint64_t)v103, &qword_2556DB668);
  if (sub_2215EC220((uint64_t)v103) == 1)
  {
    swift_bridgeObjectRelease();
    sub_2215EC238(&v88);
  }
  else
  {
    v55 = v104;
    v56 = v105;
    v57 = v106;
    v58 = v107;
    v85 = v108;
    v59 = v109;
    v60 = v110;
    swift_retain();
    swift_retain();
    sub_2215EC290((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC258);
    swift_release();
    swift_release();
    v61 = vsubq_f32(v87, v73);
    v61.i32[3] = 0;
    v62 = (int32x4_t)vmulq_f32(v61, v61);
    v62.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v62, 2), vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1))).u32[0];
    v63 = vrsqrte_f32((float32x2_t)v62.u32[0]);
    v64 = vmul_f32(v63, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v63, v63)));
    v78 = vmulq_n_f32(v61, vmul_f32(v64, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v64, v64))).f32[0]);
    v65 = vsubq_f32(v73, v87);
    v66 = vmulq_f32(v65, v65);
    v67 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0]);
    v68 = vsubq_f32(v87, v85);
    v68.i32[3] = 0;
    v69 = (int32x4_t)vmulq_f32(v68, v68);
    v69.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2), vadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1))).u32[0];
    v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
    v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
    v80 = vmulq_n_f32(v68, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
    v72 = vmulq_f32(v78, v80);
    v82 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).u32[0];
    sub_2215EC290((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
    v88 = v87;
    v89 = v55;
    v90 = v56;
    v91 = v57;
    v92 = v87;
    v93 = v73;
    v94 = v78;
    v95 = v58;
    v96 = v85;
    v97 = v80;
    v98 = v59;
    v99 = v67;
    v100 = v82;
    v101 = v60;
    v102 = v29;
    nullsub_1(&v88);
  }
  sub_2215C6540((uint64_t)&v88, (uint64_t)&v113, &qword_2556DB590);
  sub_2215C6540((uint64_t)&v113, v74, &qword_2556DB590);
}

uint64_t type metadata accessor for MeanShiftPointFilter()
{
  return objc_opt_self();
}

double sub_2215EC200(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_2215EC220(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_2215EC238(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_2215EC258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  result = a13;
  if (a13)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_2215EC290(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_DWORD *)(a1 + 160));
  return a1;
}

uint64_t sub_2215EC2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  result = a13;
  if (a13)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

id VNCoreMLRequest.features(for:)(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  id v8;
  void *v9;
  unint64_t v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB3A0);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2216570D0;
  *(_QWORD *)(v3 + 32) = v1;
  sub_22165333C();
  sub_2215DDC80(0, &qword_2556DB670);
  v4 = v1;
  v5 = (void *)sub_221653318();
  swift_bridgeObjectRelease();
  v12[0] = 0;
  v6 = objc_msgSend(a1, sel_performRequests_error_, v5, v12);

  if (!v6)
  {
    v4 = v12[0];
    sub_221652ED4();

    goto LABEL_6;
  }
  v7 = v12[0];
  v8 = objc_msgSend(v4, sel_results);
  if (!v8
    || (v9 = v8,
        sub_2215DDC80(0, &qword_2556DB678),
        v10 = sub_221653324(),
        v9,
        v4 = (id)sub_2215EC4EC(v10),
        swift_bridgeObjectRelease(),
        !v4))
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1540]), sel_init);
LABEL_6:
    swift_willThrow();
  }
  return v4;
}

uint64_t sub_2215EC4EC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v12;

  v1 = a1;
  v12 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_18;
  sub_22165390C();
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x22766ED44](i, v1);
        v4 = i + 1;
        if (__OFADD__(i, 1))
          break;
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        sub_2216538E8();
        sub_221653918();
        sub_221653924();
        sub_2216538F4();
        if (v4 == v2)
          return v12;
      }
      __break(1u);
    }
    else
    {
      v5 = 0;
      v6 = v1 + 32;
      while (1)
      {
        v7 = v5 + 1;
        if (__OFADD__(v5, 1))
          break;
        v8 = *(void **)(v6 + 8 * v5);
        objc_opt_self();
        v9 = swift_dynamicCastObjCClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        v1 = v9;
        v10 = v8;
        sub_2216538E8();
        sub_221653918();
        sub_221653924();
        sub_2216538F4();
        ++v5;
        if (v7 == v2)
          return v12;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_2216539F0();
    swift_bridgeObjectRelease();
    sub_22165390C();
    swift_bridgeObjectRetain();
    v2 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t static MeasureCamera.unprojectPoint(_:planeTransform:viewProjectionInv:viewportSize:)(double a1, double a2, float32x4_t a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17, double a18)
{
  return sub_2215ECF18(a1, a3, a5, a6, a7, a8, a17, a18);
}

uint64_t static MeasureCamera.getHitRay(screenPoint:viewProjectionInv:viewportSize:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>, float32x4_t a6@<Q4>, float32x4_t a7@<Q5>, double a8@<D6>)
{
  float32x4_t v10[3];

  sub_2215ED0B4(v10, a2, a3, a4, a5, a6, a7, a8);
  return sub_2215ED1FC((uint64_t)v10, a1);
}

double static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5).u64[0];
  return result;
}

float32x2_t static MeasureCamera.worldSpacePoint(fromViewSpace:inverseView:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  int32x4_t v5;

  v5 = (int32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5);
  return vdiv_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 3));
}

CGFloat static MeasureCamera.getLayerTransform(for:view:)@<D0>(_OWORD *a1@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CGFloat result;
  __int128 v11;
  CATransform3D v12;

  __asm { FMOV            V22.4S, #-1.0 }
  simd_float4x4.getCATransform3D()(&v12);
  v7 = *(_OWORD *)&v12.m33;
  a1[4] = *(_OWORD *)&v12.m31;
  a1[5] = v7;
  v8 = *(_OWORD *)&v12.m43;
  a1[6] = *(_OWORD *)&v12.m41;
  a1[7] = v8;
  v9 = *(_OWORD *)&v12.m13;
  *a1 = *(_OWORD *)&v12.m11;
  a1[1] = v9;
  result = v12.m21;
  v11 = *(_OWORD *)&v12.m23;
  a1[2] = *(_OWORD *)&v12.m21;
  a1[3] = v11;
  return result;
}

BOOL static MeasureCamera.isOnScreen(screenPoint:viewRect:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGPoint v9;
  CGRect v10;

  v10.origin.x = a3;
  v10.origin.y = a4;
  v10.size.width = a5;
  v10.size.height = a6;
  v9.x = a1;
  v9.y = a2;
  return CGRectContainsPoint(v10, v9);
}

BOOL static MeasureCamera.planeTooClose(for:transform:)(uint64_t a1, double a2, double a3, double a4, float32x4_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  id v16;
  int v17;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC17MeasureFoundation10WorldPoint__anchor);
  swift_beginAccess();
  v6 = *v5;
  v7 = *(os_unfair_lock_s **)(*v5 + 24);
  swift_retain();
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 16);
  swift_retain();
  os_unfair_lock_unlock(v7);
  swift_release();
  v9 = (uint64_t *)(v8 + OBJC_IVAR____TtC17MeasureFoundation11WorldAnchor__plane);
  swift_beginAccess();
  v10 = *v9;
  v11 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 16);
  swift_retain();
  os_unfair_lock_unlock(v11);
  swift_release();
  swift_release();
  if (!v12)
    return 0;
  v13 = qword_2556D8EB0;
  swift_retain();
  if (v13 != -1)
    swift_once();
  swift_beginAccess();
  v14 = *(_QWORD *)(v12 + 16);
  v15 = *(os_unfair_lock_s **)(v14 + 24);
  swift_retain();
  os_unfair_lock_lock(v15);
  swift_beginAccess();
  v16 = *(id *)(v14 + 16);
  os_unfair_lock_unlock(v15);
  swift_release();
  v17 = sub_221615B38(v16);
  swift_release();

  if (v17 == 1)
  {
    swift_release();
    return 0;
  }
  v19 = *v5;
  v20 = *(os_unfair_lock_s **)(v19 + 24);
  swift_retain();
  os_unfair_lock_lock(v20);
  swift_beginAccess();
  v21 = *(_QWORD *)(v19 + 16);
  swift_retain();
  os_unfair_lock_unlock(v20);
  swift_release();
  v24 = *(float32x4_t *)(v21 + OBJC_IVAR____TtC17MeasureFoundation11WorldAnchor_lastTransform + 48);
  swift_release();
  swift_release();
  v22 = vsubq_f32(v24, a5);
  v23 = vmulq_f32(v22, v22);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]) < 0.1;
}

BOOL static MeasureCamera.planeTooFar(for:transform:)(uint64_t a1, double a2, double a3, double a4, float32x4_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  id v15;
  int v16;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  float32x4_t v25;

  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC17MeasureFoundation10WorldPoint__anchor);
  swift_beginAccess();
  v6 = *v5;
  v7 = *(os_unfair_lock_s **)(*v5 + 24);
  swift_retain();
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 16);
  swift_retain();
  os_unfair_lock_unlock(v7);
  swift_release();
  v9 = (uint64_t *)(v8 + OBJC_IVAR____TtC17MeasureFoundation11WorldAnchor__plane);
  swift_beginAccess();
  v10 = *v9;
  v11 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 16);
  swift_retain();
  os_unfair_lock_unlock(v11);
  swift_release();
  swift_release();
  if (!v12)
    return 0;
  if (qword_2556D8EB0 != -1)
    swift_once();
  swift_beginAccess();
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(os_unfair_lock_s **)(v13 + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  swift_beginAccess();
  v15 = *(id *)(v13 + 16);
  os_unfair_lock_unlock(v14);
  swift_release();
  v16 = sub_221615B38(v15);

  if (v16 == 1)
  {
    swift_release();
    return 0;
  }
  v18 = *v5;
  v19 = *(os_unfair_lock_s **)(v18 + 24);
  swift_retain();
  os_unfair_lock_lock(v19);
  swift_beginAccess();
  v20 = *(_QWORD *)(v18 + 16);
  swift_retain();
  os_unfair_lock_unlock(v19);
  swift_release();
  v25 = *(float32x4_t *)(v20 + OBJC_IVAR____TtC17MeasureFoundation11WorldAnchor_lastTransform + 48);
  swift_release();
  v21 = vsubq_f32(v25, a5);
  v22 = vmulq_f32(v21, v21);
  v22.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]);
  v23 = v22.f32[0] * v22.f32[0];
  if (qword_2556D8E60 != -1)
    swift_once();
  v24 = *(float *)&static PlaneSelector.firstPointMaxDistanceSquared;
  swift_release();
  return v24 < v23;
}

uint64_t MeasureCamera.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MeasureCamera.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

float32x2_t _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x2_t a6)
{
  int32x4_t v6;
  float32x2_t v8;
  float32x2_t v14;

  v6 = (int32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5);
  if (fabsf(*(float *)&v6.i32[3]) >= 0.00000011921)
  {
    v8 = vdiv_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_laneq_s32(v6, 3));
    __asm { FMOV            V3.2S, #1.0 }
    v14.i32[0] = vadd_f32(v8, _D3).u32[0];
    v14.i32[1] = vsub_f32(_D3, v8).i32[1];
    return vmul_f32(vmul_f32(v14, a6), (float32x2_t)0x3F0000003F000000);
  }
  else
  {
    return (float32x2_t)0x7FC000007FC00000;
  }
}

float32x2_t _s17MeasureFoundation0A6CameraC14unprojectPoint_17viewProjectionInv12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(__n128 a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6)
{
  float32x4_t v6;

  a1.n128_f32[0] = (float)((float)(a1.n128_f32[0] + a1.n128_f32[0]) / *(float *)&a6) + -1.0;
  *(float *)&a6 = (float)((float)(a1.n128_f32[1] + a1.n128_f32[1]) / *((float *)&a6 + 1)) + -1.0;
  v6 = vaddq_f32(vmlaq_n_f32(vmlsq_lane_f32(vmulq_n_f32(a2, a1.n128_f32[0]), a3, *(float32x2_t *)&a6, 0), a4, (float)(a1.n128_f32[2] + a1.n128_f32[2]) + -1.0), a5);
  if (fabsf(v6.f32[3]) >= 0.00000011921)
    return vmul_n_f32(*(float32x2_t *)v6.f32, 1.0 / v6.f32[3]);
  else
    return (float32x2_t)0x7FC000007FC00000;
}

uint64_t sub_2215ECF18(double a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, double a8)
{
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float v30;
  float v31;

  v8.f32[0] = (float)((float)(*((float *)&a1 + 1) + *((float *)&a1 + 1)) / *((float *)&a8 + 1)) + -1.0;
  v9 = vmlsq_lane_f32(vmulq_n_f32(a4, (float)((float)(*(float *)&a1 + *(float *)&a1) / *(float *)&a8) + -1.0), a5, v8, 0);
  v10 = vaddq_f32(vaddq_f32(v9, a6), a7);
  v11 = (float32x4_t)xmmword_2216570E0;
  v12 = (float32x4_t)xmmword_2216570E0;
  if (fabsf(v10.f32[3]) >= 0.00000011921)
  {
    *(float32x2_t *)v12.f32 = vmul_n_f32(*(float32x2_t *)v10.f32, 1.0 / v10.f32[3]);
    v12.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / v10.f32[3], v10, 2));
  }
  __asm { FMOV            V4.4S, #-1.0 }
  v18 = vaddq_f32(vmlaq_f32(v9, _Q4, a6), a7);
  if (fabsf(v18.f32[3]) >= 0.00000011921)
  {
    *(float32x2_t *)v11.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, 1.0 / v18.f32[3]);
    v11.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / v18.f32[3], v18, 2));
  }
  v19 = vsubq_f32(v11, v12);
  v20 = (int32x4_t)vmulq_f32(v19, v19);
  v20.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2), vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1))).u32[0];
  v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
  v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
  v23 = vmulq_n_f32(v19, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22))).f32[0]);
  a2.i32[3] = 0;
  v24 = vmulq_f32(a2, v23);
  v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)));
  if (fabsf(v25.f32[0]) < 0.00000011921)
    return 0;
  v26 = vmulq_f32(a2, vsubq_f32(a3, v12));
  v28 = vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1));
  v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), v28);
  v28.i32[0] = 1.0;
  v29.i64[0] = 0x8000000080000000;
  v29.i64[1] = 0x8000000080000000;
  LODWORD(v30) = vbslq_s8(v29, (int8x16_t)v28, (int8x16_t)v27).u32[0];
  if (v27.f32[0] == 0.0)
    v30 = 0.0;
  LODWORD(v31) = vbslq_s8(v29, (int8x16_t)v28, (int8x16_t)v25).u32[0];
  if (v25.f32[0] == 0.0)
    v31 = 0.0;
  if ((float)(v30 - v31) == 0.0)
    return (uint64_t)vadd_f32(*(float32x2_t *)v12.f32, vmul_n_f32(*(float32x2_t *)v23.f32, vdivq_f32(v27, v25).f32[0]));
  else
    return 0;
}

void sub_2215ED0B4(float32x4_t *a1@<X8>, double a2@<D0>, double a3@<D1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>, float32x4_t a6@<Q4>, float32x4_t a7@<Q5>, double a8@<D6>)
{
  float v8;
  float32x4_t v9;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  char v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;

  v8 = a2;
  *(float *)&a3 = a3;
  *(float *)&a3 = (float)((float)(*(float *)&a3 + *(float *)&a3) / *((float *)&a8 + 1)) + -1.0;
  v9 = vmlsq_lane_f32(vmulq_n_f32(a4, (float)((float)(v8 + v8) / *(float *)&a8) + -1.0), a5, *(float32x2_t *)&a3, 0);
  __asm { FMOV            V0.4S, #-1.0 }
  v15 = vaddq_f32(vmlaq_f32(v9, _Q0, a6), a7);
  v16 = (float32x4_t)xmmword_2216570E0;
  v17 = (float32x4_t)xmmword_2216570E0;
  if (fabsf(v15.f32[3]) >= 0.00000011921)
  {
    *(float32x2_t *)v17.f32 = vmul_n_f32(*(float32x2_t *)v15.f32, 1.0 / v15.f32[3]);
    v17.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / v15.f32[3], v15, 2));
  }
  v18 = vaddq_f32(vaddq_f32(v9, a6), a7);
  if (fabsf(v18.f32[3]) >= 0.00000011921)
  {
    *(float32x2_t *)v16.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, 1.0 / v18.f32[3]);
    v16.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / v18.f32[3], v18, 2));
  }
  v19 = 0uLL;
  if (((~v17.i32[2] & 0x7F800000) != 0 || (v17.i32[2] & 0x7FFFFF) == 0)
    && ((v20 = v16.f32[2], (~v16.i32[2] & 0x7F800000) != 0) || (v16.i32[2] & 0x7FFFFF) == 0))
  {
    v21 = 0;
    v23 = vsubq_f32(v16, v17);
    v23.f32[2] = v20 - v17.f32[2];
    v24 = (int32x4_t)vmulq_f32(v23, v23);
    v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
    v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
    v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
    v22 = vmulq_n_f32(v23, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
    v19 = v17;
  }
  else
  {
    v21 = 1;
    v22 = 0uLL;
  }
  *a1 = v19;
  a1[1] = v22;
  a1[2].i8[0] = v21;
}

uint64_t sub_2215ED1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DAEB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MeasureCamera()
{
  return objc_opt_self();
}

uint64_t MeasureObject.id.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MeasureObject.state.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state);
  v2 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain();
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_unlock(v2);
  swift_release();
  return v3;
}

uint64_t MeasureObject.state.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state);
  v4 = *(os_unfair_lock_s **)(v3 + 24);
  swift_retain();
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = a1;
  os_unfair_lock_unlock(v4);
  return swift_release();
}

void (*MeasureObject.state.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state);
  v3[4] = v4;
  v5 = *(os_unfair_lock_s **)(v4 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  v6 = *(_QWORD *)(v4 + 16);
  os_unfair_lock_unlock(v5);
  v3[3] = v6;
  return sub_2215ED428;
}

void sub_2215ED428(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(os_unfair_lock_s **)(v2 + 24);
  os_unfair_lock_lock(v4);
  *(_QWORD *)(v2 + 16) = v3;
  os_unfair_lock_unlock(v4);
  swift_release();
  free(v1);
}

void (*MeasureObject.suggest.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE3A4;
    *v1 = sub_2215EE3A4;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.suggest.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

uint64_t (*MeasureObject.suggest.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.suggest.getter();
  a1[1] = v3;
  return sub_2215ED558;
}

uint64_t sub_2215ED558(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

void (*MeasureObject.isConfirmable.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE4A4;
    *v1 = sub_2215EE4A4;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.isConfirmable.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

uint64_t (*MeasureObject.isConfirmable.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.isConfirmable.getter();
  a1[1] = v3;
  return sub_2215ED650;
}

uint64_t sub_2215ED650(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

void (*MeasureObject.canHandleTouch.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE554;
    *v1 = sub_2215EE554;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.canHandleTouch.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

uint64_t (*MeasureObject.canHandleTouch.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.canHandleTouch.getter();
  a1[1] = v3;
  return sub_2215ED748;
}

uint64_t sub_2215ED748(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

void (*MeasureObject.confirm.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE55C;
    *v1 = sub_2215EE55C;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.confirm.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

uint64_t (*MeasureObject.confirm.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.confirm.getter();
  a1[1] = v3;
  return sub_2215ED840;
}

uint64_t sub_2215ED840(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

void (*MeasureObject.prepareToclear.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE594;
    *v1 = sub_2215EE594;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.prepareToclear.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

uint64_t (*MeasureObject.prepareToclear.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.prepareToclear.getter();
  a1[1] = v3;
  return sub_2215ED938;
}

uint64_t sub_2215ED938(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

void (*MeasureObject.reconfirm.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE5CC;
    *v1 = sub_2215EE5CC;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.reconfirm.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

uint64_t (*MeasureObject.reconfirm.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.reconfirm.getter();
  a1[1] = v3;
  return sub_2215EDA30;
}

uint64_t sub_2215EDA30(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

void (*MeasureObject.clear.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE6A4;
    *v1 = sub_2215EE6A4;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.clear.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

uint64_t (*MeasureObject.clear.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.clear.getter();
  a1[1] = v3;
  return sub_2215EDB28;
}

uint64_t sub_2215EDB28(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear, (uint64_t (*)(uint64_t, uint64_t))sub_2215EE3DC);
}

void (*MeasureObject.percentVisible.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE6DC;
    *v1 = sub_2215EE6DC;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.percentVisible.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

uint64_t (*MeasureObject.percentVisible.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.percentVisible.getter();
  a1[1] = v3;
  return sub_2215EDC20;
}

uint64_t sub_2215EDC20(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

void (*MeasureObject.distanceFromReticle.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE6F8;
    *v1 = sub_2215EE6F8;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.distanceFromReticle.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

uint64_t (*MeasureObject.distanceFromReticle.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.distanceFromReticle.getter();
  a1[1] = v3;
  return sub_2215EDD18;
}

uint64_t sub_2215EDD18(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

void (*MeasureObject.distanceFromCameraPlane.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE714;
    *v1 = sub_2215EE714;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.distanceFromCameraPlane.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

uint64_t (*MeasureObject.distanceFromCameraPlane.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.distanceFromCameraPlane.getter();
  a1[1] = v3;
  return sub_2215EDE10;
}

uint64_t sub_2215EDE10(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

void (*MeasureObject.importanceWeight.getter())()
{
  char *v0;
  void (**v1)();
  uint64_t v2;
  void (*v3)();
  uint64_t v4;
  char *v5;

  v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight];
  if (v2)
  {
    v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight];
  }
  else
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v0;
    v3 = sub_2215EE7DC;
    *v1 = sub_2215EE7DC;
    v1[1] = (void (*)())v4;
    v5 = v0;
    swift_retain();
    sub_2215EE3DC(0);
  }
  sub_2215EE3EC(v2);
  return v3;
}

uint64_t MeasureObject.importanceWeight.setter(uint64_t a1, uint64_t a2)
{
  return sub_2215EDED4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

uint64_t sub_2215EDED4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (uint64_t *)(v4 + *a3);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

uint64_t (*MeasureObject.importanceWeight.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  void (*v1)();
  void (*v3)();

  a1[2] = v1;
  *a1 = MeasureObject.importanceWeight.getter();
  a1[1] = v3;
  return sub_2215EDF24;
}

uint64_t sub_2215EDF24(uint64_t *a1, char a2)
{
  return sub_2215EDF38(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight, (uint64_t (*)(uint64_t, uint64_t))sub_2215EF350);
}

uint64_t sub_2215EDF38(uint64_t *a1, char a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = (uint64_t *)(a1[2] + *a3);
  v6 = *v5;
  v7 = v5[1];
  *v5 = *a1;
  v5[1] = v4;
  if ((a2 & 1) == 0)
    return a4(v6, v7);
  swift_retain();
  a4(v6, v7);
  return swift_release();
}

uint64_t MeasureObject.incrementCount(by:)(uint64_t a1)
{
  objc_class *ObjCClassFromMetadata;
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  NSString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  void *v19;

  if (qword_2556D8E28 != -1)
    swift_once();
  os_unfair_lock_lock((os_unfair_lock_t)qword_2556DB720);
  if (qword_2556D8E20 != -1)
    swift_once();
  swift_getObjectType();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v3 = NSStringFromClass(ObjCClassFromMetadata);
  v4 = sub_2216531B0();
  v6 = v5;

  swift_beginAccess();
  v7 = off_2556DB718;
  if (*((_QWORD *)off_2556DB718 + 2) && (v8 = sub_2215CA39C(v4, v6), (v9 & 1) != 0))
    v10 = *(_QWORD *)(v7[7] + 8 * v8);
  else
    v10 = 0;
  swift_bridgeObjectRelease();
  result = swift_endAccess();
  v12 = __OFADD__(v10, a1);
  v13 = v10 + a1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    v14 = NSStringFromClass(ObjCClassFromMetadata);
    v15 = sub_2216531B0();
    v17 = v16;

    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = off_2556DB718;
    off_2556DB718 = (_UNKNOWN *)0x8000000000000000;
    sub_22161BF3C(v13, v15, v17, isUniquelyReferenced_nonNull_native);
    off_2556DB718 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)qword_2556DB720);
    return v13;
  }
  return result;
}

uint64_t sub_2215EE17C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void *sub_2215EE1E4()
{
  void *result;

  result = (void *)sub_2215C29AC(MEMORY[0x24BEE4AF8]);
  off_2556DB718 = result;
  return result;
}

_DWORD *sub_2215EE208()
{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc();
  *result = 0;
  qword_2556DB720 = (uint64_t)result;
  return result;
}

uint64_t property wrapper backing initializer of MeasureObject.state(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB790);
  v2 = swift_allocObject();
  v3 = (_DWORD *)swift_slowAlloc();
  *v3 = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return v2;
}

uint64_t sub_2215EE380()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_2215EE3A4()
{
  sub_2215EE604();
}

uint64_t sub_2215EE3DC(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_2215EE3EC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void sub_2215EE3FC()
{
  sub_221653894();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  sub_221653C0C();
  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653984();
  __break(1u);
}

void sub_2215EE4A4()
{
  sub_2215EE3FC();
}

void sub_2215EE4AC()
{
  sub_221653894();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  sub_221653C0C();
  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653984();
  __break(1u);
}

void sub_2215EE554()
{
  sub_2215EE4AC();
}

void sub_2215EE55C()
{
  sub_2215EE604();
}

void sub_2215EE594()
{
  sub_2215EE604();
}

void sub_2215EE5CC()
{
  sub_2215EE604();
}

void sub_2215EE604()
{
  sub_221653894();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  sub_221653C0C();
  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653984();
  __break(1u);
}

void sub_2215EE6A4()
{
  sub_2215EE604();
}

void sub_2215EE6DC()
{
  sub_2215EE730();
}

void sub_2215EE6F8()
{
  sub_2215EE730();
}

void sub_2215EE714()
{
  sub_2215EE730();
}

void sub_2215EE730()
{
  sub_221653894();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  sub_221653C0C();
  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653984();
  __break(1u);
}

void sub_2215EE7DC()
{
  sub_2215EE730();
}

id MeasureObject.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MeasureObject.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  objc_class *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *ObjCClassFromMetadata;
  NSString *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[4];
  uint64_t v36;
  unint64_t v37;
  objc_super v38;

  v1 = sub_221652FD0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id];
  v6 = v0;
  _s17MeasureFoundation11WorldAnchorC10identifier0B04UUIDVvpfi_0();
  v7 = sub_221652FA0();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  *v5 = v7;
  v5[1] = v9;
  v10 = OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB790);
  v11 = swift_allocObject();
  v12 = (_DWORD *)swift_slowAlloc();
  *v12 = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v12;
  *(_QWORD *)&v6[v10] = v11;
  v13 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v16 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v18 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v19 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v20 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v21 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v22 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v23 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;

  v24 = (objc_class *)type metadata accessor for MeasureObject();
  v38.receiver = v6;
  v38.super_class = v24;
  v25 = objc_msgSendSuper2(&v38, sel_init);
  v26 = MeasureObject.incrementCount(by:)(1);
  if (qword_2556D8F40 != -1)
    swift_once();
  v27 = qword_2556E46F8;
  v28 = unk_2556E4700;
  v35[1] = 0;
  v35[2] = 0xE000000000000000;
  sub_221653894();
  swift_bridgeObjectRelease();
  v36 = 0x20676E69646441;
  v37 = 0xE700000000000000;
  swift_getObjectType();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v30 = NSStringFromClass(ObjCClassFromMetadata);
  sub_2216531B0();

  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653210();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653210();
  v35[0] = v26;
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  v31 = v36;
  v32 = v37;
  v33 = sub_221653618();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(v31, v32, v33, 0, v27, v28);

  swift_bridgeObjectRelease();
  return v25;
}

uint64_t type metadata accessor for MeasureObject()
{
  return objc_opt_self();
}

id MeasureObject.__deallocating_deinit()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *ObjCClassFromMetadata;
  NSString *v6;
  uint64_t v7;
  objc_super v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v1 = v0;
  v2 = MeasureObject.incrementCount(by:)(-1);
  if (qword_2556D8F40 != -1)
    swift_once();
  v3 = qword_2556E46F8;
  v4 = unk_2556E4700;
  v11 = 0;
  v12 = 0xE000000000000000;
  sub_221653894();
  swift_bridgeObjectRelease();
  v13 = 0x676E69766F6D6552;
  v14 = 0xE900000000000020;
  swift_getObjectType();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v6 = NSStringFromClass(ObjCClassFromMetadata);
  sub_2216531B0();

  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653210();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_221653210();
  swift_bridgeObjectRelease();
  sub_221653210();
  v10 = v2;
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  v7 = sub_221653618();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(0x676E69766F6D6552, 0xE900000000000020, v7, 0, v3, v4);
  swift_bridgeObjectRelease();
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for MeasureObject();
  return objc_msgSendSuper2(&v9, sel_dealloc);
}

uint64_t MeasureObject.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v7;
  char *v9;
  _BYTE v10[24];
  uint64_t v11;

  sub_2215EF298(a1, (uint64_t)v10);
  if (v11)
  {
    type metadata accessor for MeasureObject();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = &v9[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id];
      swift_beginAccess();
      v4 = *(_QWORD *)v2;
      v3 = *((_QWORD *)v2 + 1);
      swift_bridgeObjectRetain();

      goto LABEL_6;
    }
  }
  else
  {
    sub_2215DDB1C((uint64_t)v10);
  }
  v4 = 0;
  v3 = 0;
LABEL_6:
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  if (v3)
  {
    if (v4 == *v5 && v3 == v5[1])
      v7 = 1;
    else
      v7 = sub_221653B04();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t static MeasureObject.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v8;

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = (_QWORD *)(a2 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  if (v4 == *v6 && v5 == v6[1])
    v8 = 1;
  else
    v8 = sub_221653B04();
  return v8 & 1;
}

uint64_t RangeReplaceableCollection<>.idToObjectMap.getter()
{
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_221653384();
  sub_2216530C0();
  sub_2216530D8();
  sub_2216532D0();
  return v1;
}

uint64_t sub_2215EF1D0(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v4 = *a2;
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & **a2) + 0xB8))();
  swift_getAssociatedTypeWitness();
  sub_2216530D8();
  v2 = v4;
  return sub_2216530FC();
}

uint64_t sub_2215EF298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2215EF2E0(uint64_t a1, _QWORD **a2)
{
  return sub_2215EF1D0(a1, a2);
}

uint64_t sub_2215EF2F8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t *MeasureObjectState.default.unsafeMutableAddressor()
{
  return &static MeasureObjectState.default;
}

uint64_t static MeasureObjectState.default.getter()
{
  swift_beginAccess();
  return static MeasureObjectState.default;
}

uint64_t static MeasureObjectState.default.setter(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static MeasureObjectState.default = a1;
  return result;
}

uint64_t (*static MeasureObjectState.default.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

Swift::Bool __swiftcall MeasureObjectState.isMoving()()
{
  unint64_t v0;

  return (v0 < 8) & (0x98u >> v0);
}

Swift::Bool __swiftcall MeasureObjectState.isPlacing()()
{
  uint64_t v0;

  return (unint64_t)(v0 - 3) < 2;
}

Swift::Bool __swiftcall MeasureObjectState.isMovable()()
{
  unint64_t v0;

  return (v0 > 7) | (5u >> v0) & 1;
}

Swift::Bool __swiftcall MeasureObjectState.isSelectable()()
{
  unint64_t v0;

  return (v0 > 7) | (0x25u >> v0) & 1;
}

Swift::Bool __swiftcall MeasureObjectState.isCapturable()()
{
  uint64_t v0;
  uint64_t v3;

  if ((unint64_t)(v0 - 3) < 2 || v0 == 6)
    return 0;
  v3 = v0;
  return (v0 != 8 || (objc_msgSend((id)objc_opt_self(), sel_jasperAvailable) & 1) == 0) && v3 != 9;
}

Swift::Bool __swiftcall MeasureObjectState.isChevronDisplayable()()
{
  unint64_t v0;

  return (v0 < 6) & (0x25u >> v0);
}

Swift::Bool __swiftcall MeasureObjectState.isValidRectangleState()()
{
  unint64_t v0;

  return (v0 < 0xA) & (0x262u >> v0);
}

unint64_t MeasureObjectState.init(rawValue:)(unint64_t a1)
{
  return sub_2215EF6F8(a1);
}

void *static MeasureObjectState.allCases.getter()
{
  return &unk_24E7229D8;
}

unint64_t sub_2215EF56C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_2215EF6F8(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_2215EF59C(_QWORD *a1@<X8>)
{
  *a1 = &unk_24E7229D8;
}

uint64_t MeasureObjectState.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 1701602409;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x64656C6261736964;
      break;
    case 2:
      result = 0x6867696C68676968;
      break;
    case 3:
      result = 0x676E6963616C70;
      break;
    case 4:
      result = 0x49676E6963616C70;
      break;
    case 5:
      result = 0x656D7269666E6F63;
      break;
    case 6:
      result = 0x6574736567677573;
      break;
    case 7:
      result = 0x676E69766F6DLL;
      break;
    case 8:
      result = 0x6564697567;
      break;
    case 9:
      result = 0x676E697261656C63;
      break;
    default:
      result = sub_221653B28();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_2215EF6F0()
{
  uint64_t *v0;

  return MeasureObjectState.description.getter(*v0);
}

unint64_t sub_2215EF6F8(unint64_t result)
{
  if (result > 9)
    return 0;
  return result;
}

unint64_t sub_2215EF70C()
{
  unint64_t result;

  result = qword_2556DB7C8;
  if (!qword_2556DB7C8)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for MeasureObjectState, &type metadata for MeasureObjectState);
    atomic_store(result, (unint64_t *)&qword_2556DB7C8);
  }
  return result;
}

unint64_t sub_2215EF754()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2556DB7D0;
  if (!qword_2556DB7D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2556DB7D8);
    result = MEMORY[0x22766FA4C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2556DB7D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasureObjectState()
{
  return &type metadata for MeasureObjectState;
}

uint64_t DepthProcessor.transformer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (*(_QWORD *)(v0 + 200))
  {
    v1 = *(_QWORD *)(v0 + 200);
LABEL_5:
    swift_retain();
    return v1;
  }
  v2 = v0;
  v3 = *(double *)(v0 + 64);
  v4 = *(double *)(v0 + 72);
  v5 = objc_msgSend(*(id *)(v0 + 88), sel_currentFrame);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, sel_camera);

    v8 = *(_QWORD *)(v2 + 80);
    type metadata accessor for DepthTransformer();
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 848) = 0u;
    *(_OWORD *)(v9 + 864) = 0u;
    *(_OWORD *)(v9 + 880) = 0u;
    *(_OWORD *)(v9 + 896) = 0u;
    *(_BYTE *)(v9 + 912) = 1;
    *(_OWORD *)(v9 + 928) = 0u;
    *(_OWORD *)(v9 + 944) = 0u;
    *(_OWORD *)(v9 + 960) = 0u;
    *(_OWORD *)(v9 + 976) = 0u;
    *(_BYTE *)(v9 + 992) = 1;
    v1 = sub_2215E1100(v7, v8, v3, v4);

    *(_QWORD *)(v2 + 200) = v1;
    swift_retain();
    swift_release();
    goto LABEL_5;
  }
  result = sub_221653984();
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall DepthProcessor.getJasperPointsInQuad(searchArea:requestedMinConfidence:in:)(__C::CGRect searchArea, Swift::Float requestedMinConfidence, ARFrame in)
{
  uint64_t v3;
  uint64_t v4;
  CGFloat height;
  CGFloat width;
  float64_t y;
  CGFloat x;
  os_unfair_lock_s *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  float *v18;
  CGFloat MinY;
  float64x2_t v20;
  double v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat MaxY;
  float64x2_t v26;
  id v27;
  unint64_t v28;
  void *v29;
  Swift::Bool v30;
  uint64_t v31;
  uint64_t i;
  char *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  objc_class *v37;
  char *v38;
  CGFloat MinX;
  CGFloat MaxX;
  unint64_t v41;
  Swift::OpaquePointer_optional result;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;

  v4 = v3;
  height = searchArea.size.height;
  width = searchArea.size.width;
  y = searchArea.origin.y;
  x = searchArea.origin.x;
  v11 = (os_unfair_lock_s *)(v3 + 216);
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 216));
  swift_endAccess();
  v12 = *(void **)(v3 + 120);
  if (v12)
  {
    v13 = v12;
    v14 = sub_221653600();

    v15 = *(void **)(v4 + 120);
    if (v15)
    {
      v16 = objc_msgSend(v15, sel_depthPointCloud);
      if (v16)
      {
        v17 = v16;
        v18 = (float *)objc_msgSend(v16, sel_confidences);

        if (v18)
        {
          v43.origin.x = x;
          v43.origin.y = y;
          v43.size.width = width;
          v43.size.height = height;
          MinX = CGRectGetMinX(v43);
          v44.origin.x = x;
          v44.origin.y = y;
          v44.size.width = width;
          v44.size.height = height;
          MinY = CGRectGetMinY(v44);
          v20.f64[0] = MinX;
          v20.f64[1] = MinY;
          v21 = COERCE_DOUBLE(vcvt_f32_f64(v20));
          v22 = x;
          v20.f64[0] = y;
          v23 = width;
          v24 = height;
          MaxX = CGRectGetMaxX(*(CGRect *)((char *)&v20 - 8));
          v45.origin.x = x;
          v45.origin.y = y;
          v45.size.width = width;
          v45.size.height = height;
          MaxY = CGRectGetMaxY(v45);
          v26.f64[0] = MaxX;
          v26.f64[1] = MaxY;
          v27 = objc_msgSend(*(id *)(v4 + 96), sel_elementsInQuad_, v21, COERCE_DOUBLE(vcvt_f32_f64(v26)));
          type metadata accessor for DepthProcessor.JasperPoint();
          v28 = sub_221653324();

          v41 = MEMORY[0x24BEE4AF8];
          if (v28 >> 62)
          {
            swift_bridgeObjectRetain();
            v31 = sub_2216539F0();
            v29 = (void *)swift_bridgeObjectRelease();
            if (v31)
              goto LABEL_7;
          }
          else
          {
            v31 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v31)
            {
LABEL_7:
              if (v31 < 1)
              {
                __break(1u);
                goto LABEL_25;
              }
              for (i = 0; i != v31; ++i)
              {
                if ((v28 & 0xC000000000000001) != 0)
                  v33 = (char *)MEMORY[0x22766ED44](i, v28);
                else
                  v33 = (char *)*(id *)(v28 + 8 * i + 32);
                v34 = v33;
                if (v18[*(_QWORD *)&v33[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index]] >= requestedMinConfidence
                  && (v46.origin.x = x,
                      v46.origin.y = y,
                      v46.size.width = width,
                      v46.size.height = height,
                      CGRectContainsPoint(v46, *(CGPoint *)&v33[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_screenPoint])))
                {
                  sub_2216538E8();
                  sub_221653918();
                  sub_221653924();
                  sub_2216538F4();
                }
                else
                {

                }
              }
              swift_bridgeObjectRelease();
              v36 = v41;
              goto LABEL_23;
            }
          }
          swift_bridgeObjectRelease();
          v36 = MEMORY[0x24BEE4AF8];
LABEL_23:
          swift_bridgeObjectRetain();
          swift_retain();
          v37 = in.super.isa;
          v38 = sub_2215F1660(v36, v14, v4, v37, (uint64_t)v18);
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();

          v35 = sub_2215F0B20((uint64_t)v38);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          os_unfair_lock_unlock(v11);
          swift_endAccess();
          goto LABEL_19;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  os_unfair_lock_unlock(v11);
  swift_endAccess();
  v35 = 0;
LABEL_19:
  v29 = (void *)v35;
LABEL_25:
  result.value._rawValue = v29;
  result.is_nil = v30;
  return result;
}

float DepthProcessor.minConfidence.getter()
{
  return 0.9;
}

uint64_t DepthProcessor.numPointsInMap.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 112);
}

__n128 DepthProcessor.cameraToWorld.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 192);
  v4 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 160);
  v6 = *(_OWORD *)(v1 + 176);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 64) = v3;
  return result;
}

uint64_t DepthProcessor.sampleCamera.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t result;

  v1 = objc_msgSend(*(id *)(v0 + 88), sel_currentFrame);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_camera);

    return (uint64_t)v3;
  }
  else
  {
    result = sub_221653984();
    __break(1u);
  }
  return result;
}

uint64_t DepthProcessor.adProcessor.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_2215EFE18(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  CGFloat Height;
  float64x2_t v15;
  double v16;
  id v17;
  double v18;
  uint64_t v19;
  id v20;
  CGFloat Width;
  CGRect v23;
  CGRect v24;

  v3 = v2;
  *(_OWORD *)(v2 + 16) = xmmword_221657250;
  *(_QWORD *)(v2 + 32) = 0x42480000447A0000;
  *(_QWORD *)(v2 + 80) = 1;
  *(_QWORD *)(v2 + 104) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_BYTE *)(v2 + 192) = 1;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 5;
  *(_DWORD *)(v2 + 232) = 936490775;
  if (qword_2556D8E40 != -1)
    swift_once();
  *(_QWORD *)(v2 + 240) = qword_2556E4500;
  ObjectType = swift_getObjectType();
  v7 = (*(double (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  *(CGFloat *)(v2 + 48) = v7;
  *(double *)(v2 + 56) = v8;
  *(double *)(v2 + 64) = v10;
  *(double *)(v2 + 72) = v12;
  *(_QWORD *)(v2 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(v2 + 20);
  v23.origin.x = v7;
  v23.origin.y = v9;
  v23.size.width = v11;
  v23.size.height = v13;
  Width = CGRectGetWidth(v23);
  v24.origin.x = v7;
  v24.origin.y = v9;
  v24.size.width = v11;
  v24.size.height = v13;
  Height = CGRectGetHeight(v24);
  v15.f64[0] = Width;
  v15.f64[1] = Height;
  v16 = COERCE_DOUBLE(vcvt_f32_f64(v15));
  v17 = objc_allocWithZone(MEMORY[0x24BDD1B78]);
  LODWORD(v18) = 1112014848;
  *(_QWORD *)(v2 + 96) = objc_msgSend(v17, sel_initWithBoundingQuad_minimumCellSize_, 0.0, v16, v18);
  v19 = *(_QWORD *)(v2 + 80);
  type metadata accessor for ADProcessor();
  swift_allocObject();
  v20 = sub_2216214B0(a1, a2, v19);

  swift_beginAccess();
  *(_QWORD *)(v3 + 208) = v20;
  swift_release();
  return v3;
}

uint64_t sub_2215F000C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 216));
  swift_endAccess();
  result = swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 208);
  if (v6)
  {
    swift_beginAccess();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 304));
    swift_endAccess();
    v7 = *(_QWORD *)(v6 + 144);
    if (v7 && (v8 = *(_QWORD *)(v6 + 152)) != 0)
    {
      swift_retain();
      v9 = sub_221621280(a1, v6, v8, v7);
      v10 = swift_release();
      MEMORY[0x24BDAC7A8](v10);
      v11 = sub_221621608(v9, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_2215F1EA4);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 304));
      swift_endAccess();
      swift_release();
      swift_retain();
      swift_bridgeObjectRetain();
      v12 = a2;
      sub_2215F18EC(v11, v2, a1, v12);
      v14 = v13;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();

      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 216));
      swift_endAccess();
    }
    else
    {
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 304));
      swift_endAccess();
      swift_release();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 216));
      swift_endAccess();
      return 0;
    }
    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2215F0254(void *a1, float32x4_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  id v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  float32x4_t v48;
  float32x4_t v49;
  int v50;
  float32x4_t v51;
  int8x16_t v52;
  unsigned int v53;
  int v54;
  float32x4_t v55;
  unsigned int v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  uint64_t v64;
  float32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint64_t v68;
  int8x16_t v69;
  uint64_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;

  v5 = v4;
  v8 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v8, sel_transform);
  v73 = v9;
  objc_msgSend(v8, sel_transform);
  v11 = vsubq_f32(v10, a2);
  v12 = vmulq_f32(v11, v11);
  v13 = fmax(8.0 / sqrtf(v12.f32[2] + vaddv_f32(*(float32x2_t *)v12.f32)), 2.0);
  v77 = MEMORY[0x24BEE4AF8];
  sub_2215CC064(0, 4, 0);
  v14 = v77;
  v16 = *(_QWORD *)(v77 + 16);
  v15 = *(_QWORD *)(v77 + 24);
  v17 = v15 >> 1;
  v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    sub_2215CC064((char *)(v15 > 1), v16 + 1, 1);
    v14 = v77;
    v15 = *(_QWORD *)(v77 + 24);
    v17 = v15 >> 1;
  }
  *(_QWORD *)(v14 + 16) = v18;
  v19 = v14 + 16 * v16;
  *(double *)(v19 + 32) = a3 - v13;
  *(double *)(v19 + 40) = a4 + 0.0;
  v20 = v16 + 2;
  if (v17 <= v18)
  {
    sub_2215CC064((char *)(v15 > 1), v20, 1);
    v14 = v77;
  }
  *(_QWORD *)(v14 + 16) = v20;
  v21 = v14 + 16 * v18;
  *(double *)(v21 + 32) = v13 + a3;
  *(double *)(v21 + 40) = a4 + 0.0;
  v23 = *(_QWORD *)(v14 + 16);
  v22 = *(_QWORD *)(v14 + 24);
  v24 = v23 + 1;
  if (v23 >= v22 >> 1)
    sub_2215CC064((char *)(v22 > 1), v23 + 1, 1);
  v25 = a3 + 0.0;
  v26 = v77;
  *(_QWORD *)(v77 + 16) = v24;
  v27 = v77 + 16 * v23;
  *(double *)(v27 + 32) = v25;
  *(double *)(v27 + 40) = a4 - v13;
  v28 = *(_QWORD *)(v77 + 24);
  v29 = v23 + 2;
  if (v24 >= v28 >> 1)
  {
    sub_2215CC064((char *)(v28 > 1), v29, 1);
    v26 = v77;
  }
  *(_QWORD *)(v26 + 16) = v29;
  v30 = v26 + 16 * v24;
  *(double *)(v30 + 32) = v25;
  *(double *)(v30 + 40) = v13 + a4;
  result = swift_beginAccess();
  v32 = *(_QWORD *)(v5 + 208);
  if (!v32)
    goto LABEL_50;
  swift_beginAccess();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 304));
  swift_endAccess();
  v33 = *(_QWORD *)(v32 + 144);
  if (!v33 || (v34 = *(_QWORD *)(v32 + 152)) == 0)
  {
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 304));
    swift_endAccess();

    swift_release();
    swift_release();
    return 0;
  }
  swift_retain();
  v35 = sub_221621280(v26, v32, v34, v33);
  v36 = swift_release();
  MEMORY[0x24BDAC7A8](v36);
  v37 = sub_221621608(v35, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_2215F1EA4);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 304));
  swift_endAccess();
  swift_release();
  result = swift_release();
  v38 = *(_QWORD *)(v37 + 16);
  if (!v38)
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v38 == 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v38 < 3)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v38 == 3)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return result;
  }
  v39 = v8;
  v40 = *(_QWORD *)(v37 + 32);
  v41 = *(_QWORD *)(v37 + 40);
  v42 = *(_BYTE *)(v37 + 56);
  v44 = *(_QWORD *)(v37 + 64);
  v43 = *(_QWORD *)(v37 + 72);
  v45 = *(_BYTE *)(v37 + 88);
  v68 = *(_QWORD *)(v37 + 96);
  v70 = *(_QWORD *)(v37 + 104);
  v46 = *(_BYTE *)(v37 + 120);
  v67 = *(int8x16_t *)(v37 + 128);
  v47 = *(_BYTE *)(v37 + 152);
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
  {
    v48 = a2;
    if ((v45 & 1) != 0)
    {
      v49 = 0uLL;
      v50 = 1;
      goto LABEL_29;
    }
    v51.i64[0] = v44;
    v51.i64[1] = v43;
  }
  else
  {
    v51.i64[0] = v40;
    v51.i64[1] = v41;
    if ((v45 & 1) == 0)
    {
      v52.i64[0] = v44;
      v52.i64[1] = v43;
      v66 = v52;
      v71 = (int8x16_t)v51;
      v50 = 0;
      if ((sub_221653654() & 1) != 0)
        v53 = -1;
      else
        v53 = 0;
      v49 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v53), v71, v66), a2);
      v48 = a2;
      goto LABEL_28;
    }
    v48 = a2;
  }
  v50 = 0;
  v49 = vsubq_f32(v51, v48);
LABEL_28:
  v49.i32[3] = 0;
LABEL_29:
  v72 = v49;
  if ((v46 & 1) == 0)
  {
    v55.i64[0] = v68;
    v55.i64[1] = v70;
    if ((v47 & 1) == 0)
    {
      v69 = (int8x16_t)v55;
      v54 = 0;
      if ((sub_221653654() & 1) != 0)
        v56 = -1;
      else
        v56 = 0;
      v57 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v56), v69, v67), a2);
      goto LABEL_39;
    }
LABEL_38:
    v54 = 0;
    v57 = vsubq_f32(v55, v48);
LABEL_39:
    v57.i32[3] = 0;
    v75 = v57;
    goto LABEL_40;
  }
  if ((v47 & 1) == 0)
  {
    v55 = (float32x4_t)v67;
    goto LABEL_38;
  }
  v75 = 0u;
  v54 = 1;
LABEL_40:
  objc_msgSend(v39, sel_transform, *(_OWORD *)&v66);
  if (((v50 | v54) & 1) != 0)
  {
    v58.i32[3] = 0;
    v76 = v58;
  }
  else
  {
    v59 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL), vnegq_f32(v72)), v75, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL));
    v60 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL);
    v61 = (int32x4_t)vmulq_f32(v59, v59);
    v61.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), *(float32x2_t *)v61.i8)).u32[0];
    v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
    v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
    v76 = vmulq_n_f32(v60, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
  }

  v64 = v76.i64[0];
  v65 = vmulq_f32(v73, v76);
  if ((float)(v65.f32[2] + vaddv_f32(*(float32x2_t *)v65.f32)) < 0.0)
    return (uint64_t)vsub_f32(0, *(float32x2_t *)v76.f32);
  return v64;
}

uint64_t sub_2215F086C(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = (os_unfair_lock_s *)(v1 + 216);
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 216));
  swift_endAccess();
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 208);
  if (v5)
  {
    swift_beginAccess();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 304));
    swift_endAccess();
    v6 = *(_QWORD *)(v5 + 144);
    if (v6 && (v7 = *(_QWORD *)(v5 + 152)) != 0)
    {
      swift_retain();
      v8 = sub_221621280(a1, v5, v7, v6);
      v9 = swift_release();
      MEMORY[0x24BDAC7A8](v9);
      v10 = sub_221621608(v8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_2215F1E94);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 304));
      swift_endAccess();
      swift_release();
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = v10 + 32;
        swift_bridgeObjectRetain();
        v13 = (char *)MEMORY[0x24BEE4AF8];
        do
        {
          if ((*(_BYTE *)(v12 + 24) & 1) == 0)
          {
            v15 = *(_QWORD *)v12;
            v16 = *(_QWORD *)(v12 + 8);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v13 = sub_2215D7110(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
            v18 = *((_QWORD *)v13 + 2);
            v17 = *((_QWORD *)v13 + 3);
            if (v18 >= v17 >> 1)
              v13 = sub_2215D7110((char *)(v17 > 1), v18 + 1, 1, v13);
            *((_QWORD *)v13 + 2) = v18 + 1;
            v14 = &v13[16 * v18];
            *((_QWORD *)v14 + 4) = v15;
            *((_QWORD *)v14 + 5) = v16;
          }
          v12 += 32;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = (char *)MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      os_unfair_lock_unlock(v3);
      swift_endAccess();
    }
    else
    {
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 304));
      swift_endAccess();
      swift_release();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 216));
      swift_endAccess();
      return 0;
    }
    return (uint64_t)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2215F0B20(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_2215CBFD8(0, v1, 0);
    v2 = v13;
    v4 = a1 + 64;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB970);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB978);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2215CBFD8(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v13;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_2215CBFD8((char *)(v5 > 1), v6 + 1, 1);
        v2 = v13;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 48 * v6;
      *(_OWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 48) = v10;
      *(_QWORD *)(v7 + 56) = v11;
      *(_DWORD *)(v7 + 64) = v12;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::OpaquePointer_optional __swiftcall DepthProcessor.getJasperPointsPosition(requestedMinConfidence:currentFrame:)(Swift::Float requestedMinConfidence, ARFrame currentFrame)
{
  uint64_t v2;
  float32x4_t *v3;
  os_unfair_lock_s *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  float *v12;
  Swift::Bool v13;
  char *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  char *v19;
  unint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  Swift::OpaquePointer_optional result;

  v3 = (float32x4_t *)v2;
  v5 = (os_unfair_lock_s *)(v2 + 216);
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 216));
  swift_endAccess();
  v6 = *(void **)(v2 + 120);
  if (!v6)
    goto LABEL_7;
  v7 = v6;
  v8 = sub_221653600();

  v9 = (void *)v3[7].i64[1];
  if (v9)
  {
    v10 = objc_msgSend(v9, sel_depthPointCloud);
    if (v10)
    {
      v11 = v10;
      v12 = (float *)objc_msgSend(v10, sel_confidences);

      if (v12)
      {
        swift_beginAccess();
        if ((v3[12].i8[0] & 1) == 0)
        {
          v24 = v3[8];
          v23 = v3[9];
          v22 = v3[10];
          v21 = v3[11];
          swift_beginAccess();
          v16 = v3[6].u64[1];
          v25 = MEMORY[0x24BEE4AF8];
          if (v16 >> 62)
          {
            swift_bridgeObjectRetain();
            v15 = (void *)sub_2216539F0();
            v17 = (uint64_t)v15;
            if (v15)
              goto LABEL_11;
          }
          else
          {
            v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
            v15 = (void *)swift_bridgeObjectRetain();
            if (v17)
            {
LABEL_11:
              if (v17 < 1)
              {
                __break(1u);
                goto LABEL_25;
              }
              for (i = 0; i != v17; ++i)
              {
                if ((v16 & 0xC000000000000001) != 0)
                  v19 = (char *)MEMORY[0x22766ED44](i, v16);
                else
                  v19 = (char *)*(id *)(v16 + 8 * i + 32);
                if (v12[*(_QWORD *)&v19[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index]] >= requestedMinConfidence)
                {
                  sub_2216538E8();
                  sub_221653918();
                  sub_221653924();
                  sub_2216538F4();
                }
                else
                {

                }
              }
              swift_bridgeObjectRelease();
              v20 = v25;
              goto LABEL_23;
            }
          }
          swift_bridgeObjectRelease();
          v20 = MEMORY[0x24BEE4AF8];
LABEL_23:
          swift_bridgeObjectRetain();
          swift_retain();
          v14 = sub_2215F1ABC(v20, v8, v24, v23, v22, v21);
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_beginAccess();
          os_unfair_lock_unlock(v5);
          swift_endAccess();
          goto LABEL_8;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_7:
  swift_beginAccess();
  os_unfair_lock_unlock(v5);
  swift_endAccess();
  v14 = 0;
LABEL_8:
  v15 = v14;
LABEL_25:
  result.value._rawValue = v15;
  result.is_nil = v13;
  return result;
}

uint64_t sub_2215F0F9C(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t result;
  id v9;
  void *v10;
  id v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4x4 v16;
  simd_float4x4 v17;

  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 216));
  swift_endAccess();
  v3 = objc_msgSend(a1, sel_capturedPointCloudData);
  if (!v3)
  {
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 216));
    return swift_endAccess();
  }
  v4 = *(void **)(v1 + 120);
  *(_QWORD *)(v1 + 120) = v3;
  v5 = v3;

  v6 = DepthProcessor.transformer.getter();
  v7 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v7, sel_viewMatrixForOrientation_, *(_QWORD *)(v6 + 304));
  v17 = __invert_f4(v16);
  v14 = v17.columns[1];
  v15 = v17.columns[0];
  v12 = v17.columns[3];
  v13 = v17.columns[2];
  swift_release();

  swift_beginAccess();
  *(simd_float4 *)(v1 + 128) = v15;
  *(simd_float4 *)(v1 + 144) = v14;
  *(simd_float4 *)(v1 + 160) = v13;
  *(simd_float4 *)(v1 + 176) = v12;
  *(_BYTE *)(v1 + 192) = 0;
  swift_beginAccess();
  if (!*(_QWORD *)(v1 + 112))
  {
    v9 = objc_msgSend(a1, sel_worldTrackingState);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(v9, sel_vioTrackingState);

      if (!v11)
        sub_2215F1188(a1);
    }
  }
  result = swift_beginAccess();
  if (*(_QWORD *)(v1 + 208))
  {
    swift_retain();
    ADProcessor.didUpdate(frame:)((ARFrame)a1);

    swift_release();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 216));
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

void sub_2215F1188(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGPoint v14;
  objc_class *v15;
  char *v16;
  CGFloat *v17;
  id v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  objc_super v23;
  CGAffineTransform v24;
  _OWORD v25[2];
  double v26;
  double v27;
  CGPoint v28;

  v2 = v1;
  v3 = objc_msgSend(a1, sel_capturedPointCloudData);
  if (v3)
  {
    v20 = v3;
    v4 = objc_msgSend(v3, sel_depthPointCloud);
    if (v4 && (v5 = v4, v6 = (char *)objc_msgSend(v4, sel_cameraPixels), v5, v6))
    {
      v7 = *(_QWORD *)(sub_221653600() + 16);
      swift_bridgeObjectRelease();
      if (v7)
      {
        v8 = 0;
        v9 = (CGFloat *)(v6 + 8);
        do
        {
          v10 = *(v9 - 1);
          v11 = *v9;
          DepthProcessor.transformer.getter();
          Transformer.cameraToView.getter((CGFloat *)v25);
          v21 = v25[1];
          v22 = v25[0];
          v12 = v26;
          v13 = v27;
          swift_release();
          *(_OWORD *)&v24.a = v22;
          *(_OWORD *)&v24.c = v21;
          v24.tx = v12;
          v24.ty = v13;
          v28.x = v10;
          v28.y = v11;
          v14 = CGPointApplyAffineTransform(v28, &v24);
          v15 = (objc_class *)type metadata accessor for DepthProcessor.JasperPoint();
          v16 = (char *)objc_allocWithZone(v15);
          *(_QWORD *)&v16[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index] = v8;
          *(CGPoint *)&v16[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_screenPoint] = v14;
          v17 = (CGFloat *)&v16[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_cameraPixel];
          *v17 = v10;
          v17[1] = v11;
          v23.receiver = v16;
          v23.super_class = v15;
          v18 = objc_msgSendSuper2(&v23, sel_init);

          swift_beginAccess();
          v19 = v18;
          MEMORY[0x22766E798]();
          if (*(_QWORD *)((*(_QWORD *)(v2 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v2 + 104) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
            sub_22165336C();
          ++v8;
          sub_2216533A8();
          sub_22165333C();
          swift_endAccess();

          v9 += 2;
        }
        while (v7 != v8);
      }

      swift_beginAccess();
      *(_QWORD *)(v2 + 112) = v7;
    }
    else
    {

    }
  }
}

id *DepthProcessor.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t DepthProcessor.__deallocating_deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

id sub_2215F14BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_2215F14F0()
{
  unint64_t result;

  result = sub_2215C2ABC((uint64_t)&unk_24E722838);
  qword_2556E44F0 = result;
  return result;
}

uint64_t sub_2215F1514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (qword_2556D8E30 != -1)
    swift_once();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_22161BCF8(v0);
  result = swift_bridgeObjectRelease();
  qword_2556E44F8 = v1;
  return result;
}

void sub_2215F157C()
{
  uint64_t v0;

  if (qword_2556D8E30 != -1)
    swift_once();
  sub_221617FAC(qword_2556E44F0);
  qword_2556E4500 = v0;
}

uint64_t sub_2215F15C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_2215F1628(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for DepthProcessor.JasperPoint()
{
  return objc_opt_self();
}

uint64_t sub_2215F1628(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

char *sub_2215F1660(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 v26;
  char *v27;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _BYTE v41[80];
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;

  if (a1 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = sub_2216539F0())
  {
    v7 = (char *)MEMORY[0x24BEE4AF8];
    v8 = 4;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x22766ED44](v8 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v12 = OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index;
      v13 = *(_QWORD *)&v9[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index];
      if ((v13 & 0x8000000000000000) != 0 || v13 >= *(_QWORD *)(a2 + 16))
      {

      }
      else
      {
        v37 = *(float32x4_t *)(a2 + 32 + 16 * v13);
        DepthProcessor.transformer.getter();
        sub_221622ADC(a4, (uint64_t)v41);
        v35 = v42;
        v36 = v43;
        v38 = v44;
        v39 = v45;
        *(double *)v14.i64 = DepthTransformer.jasperToARKitCamera.getter();
        v31 = v14;
        v32 = v15;
        v33 = v17;
        v34 = v16;
        swift_release();
        v18 = *(_QWORD *)&v10[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_screenPoint];
        v19 = *(_QWORD *)&v10[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_screenPoint
                            + 8];
        v20 = *(_DWORD *)(a5 + 4 * *(_QWORD *)&v10[v12]);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_2215D7008(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v22 = *((_QWORD *)v7 + 2);
        v21 = *((_QWORD *)v7 + 3);
        if (v22 >= v21 >> 1)
          v7 = sub_2215D7008((char *)(v21 > 1), v22 + 1, 1, v7);
        v23 = vaddq_f32(v33, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v31, 0.001 * v37.f32[0]), v32, vmuls_lane_f32(0.001, *(float32x2_t *)v37.f32, 1)), v34, vmuls_lane_f32(0.001, v37, 2)));
        v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v23.f32[0]), v36, *(float32x2_t *)v23.f32, 1), v38, v23, 2), v39, v23, 3);
        v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
        *(float32x2_t *)&v26 = vdiv_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.f32);
        *((_QWORD *)&v26 + 1) = vdivq_f32(v24, v25).u32[2];
        *((_QWORD *)v7 + 2) = v22 + 1;
        v27 = &v7[48 * v22];
        *((_OWORD *)v27 + 2) = v26;
        *((_QWORD *)v27 + 6) = v18;
        *((_QWORD *)v27 + 7) = v19;
        *((_DWORD *)v27 + 16) = v20;
      }
      ++v8;
      if (v11 == v6)
        goto LABEL_20;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  v7 = (char *)MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v7;
}

void sub_2215F18EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  double *v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  float32x4_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  double v30;
  __int128 v31;
  uint64_t v32;

  v32 = MEMORY[0x24BEE4AF8];
  sub_2215CC048(0, 0, 0);
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  v7 = 0;
  v8 = (_BYTE *)(a1 + 56);
  v27 = a3;
  v28 = v6;
  v9 = (double *)(a3 + 40);
  while (1)
  {
    v10 = 0uLL;
    if ((*v8 & 1) != 0)
    {
      v11 = 0;
      v12 = 1;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      goto LABEL_9;
    }
    if (v7 >= *(_QWORD *)(v27 + 16))
      break;
    v11 = *((_QWORD *)v8 - 1);
    v16 = *(float32x4_t *)(v8 - 24);
    v30 = *(double *)v16.i64;
    v17 = sub_2215F0254(a4, v16, *(v9 - 1), *v9);
    if ((v19 & 1) != 0)
    {
      v11 = 0;
      v12 = 1;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v6 = v28;
      v10 = 0uLL;
    }
    else
    {
      v20.i64[0] = v17;
      v20.i64[1] = v18;
      *(double *)&v10 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v30, v20);
      v12 = 0;
      v6 = v28;
    }
LABEL_9:
    v22 = *(_QWORD *)(v32 + 16);
    v21 = *(_QWORD *)(v32 + 24);
    if (v22 >= v21 >> 1)
    {
      v31 = v10;
      v25 = v14;
      v26 = v13;
      v24 = v15;
      sub_2215CC048((char *)(v21 > 1), v22 + 1, 1);
      v15 = v24;
      v14 = v25;
      v13 = v26;
      v10 = v31;
      v6 = v28;
    }
    ++v7;
    *(_QWORD *)(v32 + 16) = v22 + 1;
    v23 = v32 + 80 * v22;
    *(_OWORD *)(v23 + 32) = v10;
    *(_OWORD *)(v23 + 48) = v13;
    *(_OWORD *)(v23 + 64) = v14;
    *(_OWORD *)(v23 + 80) = v15;
    *(_QWORD *)(v23 + 96) = v11;
    *(_BYTE *)(v23 + 104) = v12;
    v8 += 32;
    v9 += 2;
    if (v6 == v7)
      goto LABEL_12;
  }
  __break(1u);
}

char *sub_2215F1ABC(unint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;

  if (a1 >> 62)
    goto LABEL_18;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; v8 = sub_2216539F0())
  {
    v9 = (char *)MEMORY[0x24BEE4AF8];
    v10 = 4;
    while (1)
    {
      v11 = (a1 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x22766ED44](v10 - 4, a1)
          : (char *)*(id *)(a1 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      v14 = *(_QWORD *)&v11[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index];
      if ((v14 & 0x8000000000000000) != 0 || v14 >= *(_QWORD *)(a2 + 16))
      {

      }
      else
      {
        v34 = *(float32x4_t *)(a2 + 32 + 16 * v14);
        DepthProcessor.transformer.getter();
        *(double *)v15.i64 = DepthTransformer.jasperToARKitCamera.getter();
        v30 = v15;
        v31 = v16;
        v32 = v18;
        v33 = v17;

        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_2215D7110(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v20 = *((_QWORD *)v9 + 2);
        v19 = *((_QWORD *)v9 + 3);
        if (v20 >= v19 >> 1)
          v9 = sub_2215D7110((char *)(v19 > 1), v20 + 1, 1, v9);
        v21 = vaddq_f32(v32, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v30, 0.001 * v34.f32[0]), v31, vmuls_lane_f32(0.001, *(float32x2_t *)v34.f32, 1)), v33, vmuls_lane_f32(0.001, v34, 2)));
        v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, v21.f32[0]), a4, *(float32x2_t *)v21.f32, 1), a5, v21, 2), a6, v21, 3);
        v23 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3);
        *(float32x2_t *)&v24 = vdiv_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v23.f32);
        *((_QWORD *)&v24 + 1) = vdivq_f32(v22, v23).u32[2];
        *((_QWORD *)v9 + 2) = v20 + 1;
        *(_OWORD *)&v9[16 * v20 + 32] = v24;
      }
      ++v10;
      if (v13 == v8)
        goto LABEL_20;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  v9 = (char *)MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_2215F1CEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = DepthProcessor.transformer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2215F1D14(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 200) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for DepthProcessor()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for DepthProcessor.DebugOptions()
{
  return &type metadata for DepthProcessor.DebugOptions;
}

unint64_t sub_2215F1D78()
{
  unint64_t result;

  result = qword_2556DB950;
  if (!qword_2556DB950)
  {
    result = MEMORY[0x22766FA4C](&unk_22165736C, &type metadata for DepthProcessor.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DB950);
  }
  return result;
}

unint64_t sub_2215F1DC0()
{
  unint64_t result;

  result = qword_2556DB958;
  if (!qword_2556DB958)
  {
    result = MEMORY[0x22766FA4C](&unk_22165733C, &type metadata for DepthProcessor.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DB958);
  }
  return result;
}

unint64_t sub_2215F1E08()
{
  unint64_t result;

  result = qword_2556DB960;
  if (!qword_2556DB960)
  {
    result = MEMORY[0x22766FA4C](&unk_221657394, &type metadata for DepthProcessor.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DB960);
  }
  return result;
}

unint64_t sub_2215F1E50()
{
  unint64_t result;

  result = qword_2556DB968;
  if (!qword_2556DB968)
  {
    result = MEMORY[0x22766FA4C](&unk_2216573CC, &type metadata for DepthProcessor.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DB968);
  }
  return result;
}

uint64_t sub_2215F1E94(unint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return sub_221621124(a1, a2, a3, a4 & 1, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

char *MeasureUnitDetailed.default.unsafeMutableAddressor()
{
  return &static MeasureUnitDetailed.default;
}

uint64_t static MeasureUnitDetailed.default.getter()
{
  swift_beginAccess();
  return static MeasureUnitDetailed.default;
}

uint64_t static MeasureUnitDetailed.default.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static MeasureUnitDetailed.default = a1;
  return result;
}

uint64_t (*static MeasureUnitDetailed.default.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t MeasureUnitDetailed.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_2215F1F88@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s17MeasureFoundation0A12UnitDetailedO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t _s17MeasureFoundation0A12UnitDetailedO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

unint64_t sub_2215F1FC4()
{
  unint64_t result;

  result = qword_2556DB988;
  if (!qword_2556DB988)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for MeasureUnitDetailed, &type metadata for MeasureUnitDetailed);
    atomic_store(result, (unint64_t *)&qword_2556DB988);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MeasureUnitDetailed(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2215F2054 + 4 * byte_221657525[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2215F2088 + 4 * byte_221657520[v4]))();
}

uint64_t sub_2215F2088(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215F2090(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2215F2098);
  return result;
}

uint64_t sub_2215F20A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2215F20ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2215F20B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2215F20B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeasureUnitDetailed()
{
  return &type metadata for MeasureUnitDetailed;
}

void sub_2215F20D4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  void *v12;
  simd_float3x3 *v13;
  id v14;
  _BYTE *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  char v20;
  void *Strong;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  simd_float3 v39;
  simd_float3 v40;
  simd_float3 v41;
  simd_float3 v42;
  simd_float3 v43;
  simd_float3 v44;
  simd_float3 v45;
  simd_float3 v46;
  simd_float3 v47;
  simd_float3 v48;
  simd_float3 v49;
  float v50;
  simd_float3 v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  simd_float3 v57;
  unsigned int v58;
  unsigned int v59;
  simd_float3 v60;
  unsigned int v61;
  float v62;
  simd_float3 v63;
  float v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  simd_float3 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  simd_float3 v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  simd_float3 v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  simd_float3 v81;
  CGFloat Height;
  float64x2_t v83;
  unsigned int v84;
  unsigned int v85;
  simd_float3 v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  simd_float3 v90;
  unsigned int v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  simd_float3 v96;
  simd_float3 v97;
  simd_float3 v98;
  simd_float3 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  void (*v108)(void *);
  simd_float3 v109;
  simd_float3 v110;
  simd_float3 v111;
  CGFloat Width;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  void *v119;
  simd_float3 v120;
  void *v121;
  id v122;
  CGFloat v123[6];
  CGFloat v124[6];
  CGFloat v125[6];
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  simd_float3x3 v132;
  CGRect v133;
  CGRect v134;

  v2 = v1;
  v4 = objc_msgSend(a1, sel_capturedPointCloudData);
  if (v4)
  {
    v122 = v4;
    v5 = *(_QWORD *)(sub_221653600() + 16);
    swift_bridgeObjectRelease();
    if (!v5 || (v6 = *(_QWORD *)(sub_221653600() + 16), swift_bridgeObjectRelease(), v6 > 0x480))
    {

      return;
    }
    v7 = objc_msgSend(a1, sel_camera);
    swift_beginAccess();
    if ((*(_BYTE *)(v2 + 184) & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      objc_msgSend(v7, sel_viewMatrixForOrientation_, *(_QWORD *)(v2 + 176));
      v113 = v8;
      v114 = v9;
      v116 = v10;
      v118 = v11;
      swift_beginAccess();
      v12 = *(void **)(v2 + 192);
      if (v12)
      {
        v13 = (simd_float3x3 *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
        v14 = v12;
        v15 = (_BYTE *)(v2 + 272);
        if ((*(_BYTE *)(v2 + 272) & 1) != 0)
          goto LABEL_10;
        v16 = *(double *)(v2 + 120);
        v17 = *(double *)(v2 + 128);
        v18 = *(double *)(v2 + 136);
        v19 = *(double *)(v2 + 144);
        v20 = *(_BYTE *)(v2 + 152);
        Strong = (void *)swift_unknownObjectUnownedLoadStrong();
        type metadata accessor for OverlayMetalView();
        objc_msgSend((id)swift_dynamicCastClassUnconditional(), sel_frame);
        v23 = v22;
        v25 = v24;
        v27 = v26;
        v29 = v28;

        if ((v20 & 1) != 0)
          goto LABEL_10;
        v133.origin.x = v16;
        v133.origin.y = v17;
        v133.size.width = v18;
        v133.size.height = v19;
        v134.origin.x = v23;
        v134.origin.y = v25;
        v134.size.width = v27;
        v134.size.height = v29;
        if (!CGRectEqualToRect(v133, v134))
        {
LABEL_10:
          v30 = (void *)swift_unknownObjectUnownedLoadStrong();
          type metadata accessor for OverlayMetalView();
          objc_msgSend((id)swift_dynamicCastClassUnconditional(), sel_frame);
          v32 = v31;
          v34 = v33;
          v36 = v35;
          v38 = v37;

          *(_QWORD *)(v2 + 120) = v32;
          *(_QWORD *)(v2 + 128) = v34;
          *(double *)(v2 + 136) = v36;
          *(double *)(v2 + 144) = v38;
          *(_BYTE *)(v2 + 152) = 0;
          if ((*(_BYTE *)(v2 + 184) & 1) != 0)
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
          objc_msgSend(v7, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, *(_QWORD *)(v2 + 176), v36, v38, 0.00100000005, 0.0);
          *(simd_float3 *)(v2 + 208) = v39;
          *(simd_float3 *)(v2 + 224) = v40;
          *(simd_float3 *)(v2 + 240) = v41;
          *(simd_float3 *)(v2 + 256) = v42;
          *v15 = 0;
          v13->columns[0] = v39;
          v13->columns[1] = v40;
          v13->columns[2] = v41;
          v13[1].columns[0] = v42;
          objc_msgSend(v7, sel_intrinsics);
          v13[13].columns[0] = v43;
          v13[13].columns[1] = v44;
          v13[13].columns[2] = v45;
          objc_msgSend(v7, sel_intrinsics);
          v13[14] = __invert_f3(v132);
          swift_unownedRetainStrong();
          DepthProcessor.transformer.getter();
          swift_release();
          *(double *)v46.i64 = DepthTransformer.jasperToARKitCamera.getter();
          v120 = v46;
          v110 = v48;
          v111 = v47;
          v109 = v49;
          swift_release();
          v13[6].columns[2] = v120;
          v13[7].columns[0] = v111;
          v13[7].columns[1] = v110;
          v13[7].columns[2] = v109;
          swift_unownedRetainStrong();
          DepthProcessor.transformer.getter();
          swift_release();
          Transformer.cameraToClip.getter(v123);
          swift_release();
          v50 = v123[0];
          v51.f32[0] = v50;
          v52 = v123[2];
          v51.f32[1] = v52;
          *(float *)&v53 = v123[4];
          v51.i64[1] = v53;
          *(float *)&v54 = v123[1];
          *(float *)&v55 = v123[3];
          *(float *)&v56 = v123[5];
          v57.i64[0] = __PAIR64__(v55, v54);
          v57.i64[1] = v56;
          v13[8].columns[0] = v51;
          v13[8].columns[1] = v57;
          v13[8].columns[2] = (simd_float3)xmmword_221656010;
          swift_unownedRetainStrong();
          DepthProcessor.transformer.getter();
          swift_release();
          Transformer.clipToCamera.getter(v124);
          swift_release();
          *(float *)&v58 = v124[0];
          *(float *)&v59 = v124[2];
          v60.i64[0] = __PAIR64__(v59, v58);
          *(float *)&v61 = v124[4];
          v60.i64[1] = v61;
          v62 = v124[1];
          v63.f32[0] = v62;
          v64 = v124[3];
          v63.f32[1] = v64;
          *(float *)&v65 = v124[5];
          v63.i64[1] = v65;
          v13[9].columns[0] = v60;
          v13[9].columns[1] = v63;
          v13[9].columns[2] = (simd_float3)xmmword_221656010;
          swift_unownedRetainStrong();
          DepthProcessor.transformer.getter();
          swift_release();
          Transformer.clipToCameraNormalized.getter(v125);
          swift_release();
          *(float *)&v66 = v125[0];
          *(float *)&v67 = v125[2];
          v68.i64[0] = __PAIR64__(v67, v66);
          *(float *)&v69 = v125[4];
          v68.i64[1] = v69;
          *(float *)&v70 = v125[1];
          *(float *)&v71 = v125[3];
          *(float *)&v72 = v125[5];
          v73.i64[0] = __PAIR64__(v71, v70);
          v73.i64[1] = v72;
          v13[10].columns[0] = v68;
          v13[10].columns[1] = v73;
          v13[10].columns[2] = (simd_float3)xmmword_221656010;
          if ((*(_BYTE *)(v2 + 152) & 1) != 0)
          {
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
          if ((*(_BYTE *)(v2 + 184) & 1) != 0)
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
          objc_msgSend(v7, sel_imageResolution);
          ARViewToCameraImageTransform();
          *(float *)&v74 = v126;
          *(float *)&v75 = v128;
          *(float *)&v76 = v130;
          v77.i64[0] = __PAIR64__(v75, v74);
          v77.i64[1] = v76;
          *(float *)&v78 = v127;
          *(float *)&v79 = v129;
          *(float *)&v80 = v131;
          v81.i64[0] = __PAIR64__(v79, v78);
          v81.i64[1] = v80;
          v13[11].columns[0] = v77;
          v13[11].columns[1] = v81;
          v13[11].columns[2] = (simd_float3)xmmword_221656010;
          v13[15].columns[0].i32[3] = 100000;
          if ((*(_BYTE *)(v2 + 152) & 1) != 0)
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
          Width = CGRectGetWidth(*(CGRect *)(v2 + 120));
          if ((*(_BYTE *)(v2 + 152) & 1) != 0)
          {
LABEL_28:
            __break(1u);
            return;
          }
          Height = CGRectGetHeight(*(CGRect *)(v2 + 120));
          v83.f64[0] = Width;
          v83.f64[1] = Height;
          *(float32x2_t *)v13[15].columns[0].f32 = vcvt_f32_f64(v83);
          swift_unownedRetainStrong();
          ADProcessor.adConfig.getter();
          swift_release();
          swift_release();
          v13[15].columns[0].i32[2] = 1065353216;
          swift_unownedRetainStrong();
          ADProcessor.transformer.getter();
          swift_release();
          ADTransformer.adToCamera.getter(&v126);
          swift_release();
          *(float *)&v84 = v126;
          *(float *)&v85 = v128;
          v86.i64[0] = __PAIR64__(v85, v84);
          *(float *)&v87 = v130;
          v86.i64[1] = v87;
          *(float *)&v88 = v127;
          *(float *)&v89 = v129;
          v90.i64[0] = __PAIR64__(v89, v88);
          *(float *)&v91 = v131;
          v90.i64[1] = v91;
          v13[12].columns[0] = v86;
          v13[12].columns[1] = v90;
          v13[12].columns[2] = (simd_float3)xmmword_221656010;
        }
        v121 = a1;
        v13[1].columns[1] = (simd_float3)v113;
        v13[1].columns[2] = (simd_float3)v114;
        v13[2].columns[0] = (simd_float3)v116;
        v13[2].columns[1] = (simd_float3)v118;
        if ((*v15 & 1) == 0)
        {
          v92 = *(float32x4_t *)(v2 + 208);
          v93 = *(float32x4_t *)(v2 + 224);
          v94 = *(float32x4_t *)(v2 + 240);
          v95 = *(float32x4_t *)(v2 + 256);
          v13[2].columns[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v113.f32[0]), v93, *(float32x2_t *)v113.f32, 1), v94, v113, 2), v95, v113, 3);
          v13[3].columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v114.f32[0]), v93, *(float32x2_t *)v114.f32, 1), v94, v114, 2), v95, v114, 3);
          v13[3].columns[1] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v116.f32[0]), v93, *(float32x2_t *)v116.f32, 1), v94, v116, 2), v95, v116, 3);
          v13[3].columns[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v118.f32[0]), v93, *(float32x2_t *)v118.f32, 1), v94, v118, 2), v95, v118, 3);
          objc_msgSend(v7, sel_transform);
          v13[4].columns[0] = v96;
          v13[4].columns[1] = v97;
          v13[4].columns[2] = v98;
          v13[5].columns[0] = v99;
          v100 = *(_QWORD *)(v2 + 160);
          swift_unownedRetainStrong();
          swift_beginAccess();
          v119 = v7;
          v102 = *(_QWORD *)(v100 + 128);
          v101 = *(_QWORD *)(v100 + 136);
          v104 = *(_QWORD *)(v100 + 144);
          v103 = *(_QWORD *)(v100 + 152);
          v106 = *(_QWORD *)(v100 + 160);
          v105 = *(_QWORD *)(v100 + 168);
          v117 = *(_QWORD *)(v100 + 176);
          v115 = *(_QWORD *)(v100 + 184);
          v107 = *(_BYTE *)(v100 + 192);
          swift_release();
          if ((v107 & 1) == 0)
          {
            v13[5].columns[1].i64[0] = v102;
            v13[5].columns[1].i64[1] = v101;
            v13[5].columns[2].i64[0] = v104;
            v13[5].columns[2].i64[1] = v103;
            v13[6].columns[0].i64[0] = v106;
            v13[6].columns[0].i64[1] = v105;
            v13[6].columns[1].i64[0] = v117;
            v13[6].columns[1].i64[1] = v115;
            swift_beginAccess();
            v108 = *(void (**)(void *))(**(_QWORD **)(v2 + 16) + 264);
            swift_retain();
            v108(v121);
            swift_release();
            *(_BYTE *)(v2 + 72) = 1;

            return;
          }
          goto LABEL_23;
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
}

uint64_t sub_2215F2874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 104))
  {
    v1 = *(_QWORD *)(v0 + 104);
  }
  else
  {
    type metadata accessor for DebugWorldNode();
    swift_allocObject();
    v2 = swift_retain();
    v1 = sub_2215E86F8(v2);
    swift_beginAccess();
    swift_retain();
    MetalNode.addChild(_:at:)(v1, 0, 1);
    swift_release();
    *(_QWORD *)(v0 + 104) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id sub_2215F2930()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(id *)(v0 + 96);
  }
  else
  {
    type metadata accessor for DebugLocalNode();
    swift_allocObject();
    v2 = swift_retain();
    v1 = sub_2215C4BA4(v2);
    swift_beginAccess();
    swift_retain();
    MetalNode.addChild(_:at:)((uint64_t)v1, 0, 1);
    swift_release();
    *(_QWORD *)(v0 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id sub_2215F29EC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(id *)(v0 + 112);
  }
  else
  {
    type metadata accessor for DebugADNode();
    swift_allocObject();
    v2 = swift_retain();
    v1 = sub_2215E7D1C(v2);
    swift_beginAccess();
    swift_retain();
    MetalNode.addChild(_:at:)((uint64_t)v1, 0, 0);
    swift_release();
    *(_QWORD *)(v0 + 112) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t OverlayMetalScene.depthProcessor.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t OverlayMetalScene.adProcessor.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t OverlayMetalScene.orientation.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 176);
}

uint64_t OverlayMetalScene.uniformsBuffer.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

id sub_2215F2B20(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  id result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;

  *(_OWORD *)(v2 + 80) = xmmword_2216575F0;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_QWORD *)(v2 + 144) = 0;
  *(_BYTE *)(v2 + 152) = 1;
  *(_QWORD *)(v2 + 176) = 0;
  *(_BYTE *)(v2 + 184) = 1;
  *(_QWORD *)(v2 + 192) = 0;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_BYTE *)(v2 + 272) = 1;
  *(_QWORD *)(v2 + 160) = a2;
  swift_unownedRetainStrong();
  swift_beginAccess();
  v5 = *(_QWORD *)(a2 + 208);
  swift_retain();
  swift_unownedRetain();
  swift_retain();
  result = (id)swift_release();
  if (!v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v2 + 168) = v5;
  swift_unownedRetain();
  swift_release();
  objc_msgSend(a1, sel_bounds);
  *(_QWORD *)(v2 + 120) = v7;
  *(_QWORD *)(v2 + 128) = v8;
  *(_QWORD *)(v2 + 136) = v9;
  *(_QWORD *)(v2 + 144) = v10;
  *(_BYTE *)(v2 + 152) = 0;
  swift_release();
  v11 = a1;
  v12 = sub_221610450((uint64_t)v11, 1);

  v13 = *((_QWORD *)v12 + 20);
  swift_unownedRetainStrong();
  v14 = *(_QWORD *)(v13 + 80);
  swift_retain();
  swift_release();
  swift_beginAccess();
  *((_QWORD *)v12 + 22) = v14;
  *((_BYTE *)v12 + 184) = 0;
  result = objc_msgSend(*((id *)v12 + 4), sel_newBufferWithLength_options_, 752, 0);
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v15 = result;
  swift_beginAccess();
  *((_QWORD *)v12 + 24) = v15;
  swift_unknownObjectRelease();
  v16 = *((_QWORD *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  v17 = *(_QWORD *)(v16 + 240);
  swift_release();
  if ((v17 & 8) != 0)
    goto LABEL_7;
  v18 = *((_QWORD *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  v19 = *(_QWORD *)(v18 + 240);
  swift_release();
  if ((v19 & 0x10) != 0)
    goto LABEL_7;
  v20 = *((_QWORD *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  v21 = *(_QWORD *)(v20 + 240);
  swift_release();
  if ((v21 & 0x2000) != 0
    || (v22 = *((_QWORD *)v12 + 20),
        swift_unownedRetainStrong(),
        swift_beginAccess(),
        v23 = *(_QWORD *)(v22 + 240),
        swift_release(),
        (v23 & 0x8000) != 0))
  {
LABEL_7:
    v24 = sub_2215F29EC();
    swift_beginAccess();
    v24[32] = 1;
    swift_beginAccess();
    v24[33] = 1;
    swift_beginAccess();
    v24[34] = 1;
    swift_release();
  }
  v25 = *((_QWORD *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  v26 = *(_QWORD *)(v25 + 240);
  swift_release();
  if ((v26 & 2) != 0)
  {
    v27 = sub_2215F2930();
    swift_beginAccess();
    v27[32] = 1;
    swift_beginAccess();
    v27[33] = 1;
    swift_beginAccess();
    v27[34] = 1;
    swift_release();
  }
  v28 = *((_QWORD *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  v29 = *(_QWORD *)(v28 + 240);
  swift_release();
  if ((v29 & 4) != 0)
  {
    v30 = (_BYTE *)sub_2215F2874();
    swift_release();
    swift_release();

    swift_beginAccess();
    v30[32] = 1;
    swift_beginAccess();
    v30[33] = 1;
    swift_beginAccess();
    v30[34] = 1;
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();

  }
  return v12;
}

uint64_t sub_2215F2F14()
{
  swift_release();
  swift_release();
  swift_release();
  swift_unownedRelease();
  swift_unownedRelease();
  return swift_unknownObjectRelease();
}

uint64_t OverlayMetalScene.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectUnownedDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t OverlayMetalScene.__deallocating_deinit()
{
  OverlayMetalScene.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OverlayMetalScene()
{
  return objc_opt_self();
}

uint64_t Numeric.squared()()
{
  return sub_221653498();
}

uint64_t ObjectPool.count.getter()
{
  uint64_t v0;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v0 = sub_22165345C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ObjectPool.__allocating_init(allocator:deallocator:synchronized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = swift_allocObject();
  v11 = _s17MeasureFoundation10ObjectPoolC7objects33_8B01F5F47CB49D64DA54EB87E4B4A93DLLShyxGvpfi_0();
  *(_DWORD *)(v10 + 60) = 0;
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)(v10 + 32) = a2;
  *(_QWORD *)(v10 + 40) = a3;
  *(_QWORD *)(v10 + 48) = a4;
  *(_BYTE *)(v10 + 56) = a5;
  return v10;
}

uint64_t ObjectPool.init(allocator:deallocator:synchronized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = _s17MeasureFoundation10ObjectPoolC7objects33_8B01F5F47CB49D64DA54EB87E4B4A93DLLShyxGvpfi_0();
  *(_DWORD *)(v5 + 60) = 0;
  *(_QWORD *)(v5 + 16) = v11;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  *(_BYTE *)(v5 + 56) = a5;
  return v5;
}

uint64_t ObjectPool.deinit()
{
  uint64_t v0;

  ObjectPool.clear()();
  swift_bridgeObjectRelease();
  swift_release();
  sub_2215EE3DC(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t ObjectPool.__deallocating_deinit()
{
  ObjectPool.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjectPool.acquire()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v0 + 60));
    swift_endAccess();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v1 = sub_22165345C();
  v2 = swift_bridgeObjectRelease();
  if (v1 < 1)
  {
    (*(void (**)(uint64_t))(v0 + 24))(v2);
  }
  else
  {
    swift_beginAccess();
    sub_22165348C();
    sub_221653438();
    swift_endAccess();
  }
  return sub_2215F350C(v0);
}

uint64_t ObjectPool.release(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v13;

  v2 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v13 - v9;
  if (*(_BYTE *)(v2 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 60));
    swift_endAccess();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  swift_beginAccess();
  sub_22165348C();
  v11 = sub_221653468();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  swift_endAccess();
  sub_2215F350C(v2);
  return v11 & 1;
}

Swift::Int __swiftcall ObjectPool.release(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 60));
    a1._rawValue = (void *)swift_endAccess();
  }
  MEMORY[0x24BDAC7A8](a1._rawValue);
  v2 = sub_2216533FC();
  MEMORY[0x22766FA4C](MEMORY[0x24BEE12C8], v2);
  sub_2216532E8();
  sub_2215F350C(v1);
  return 0;
}

uint64_t sub_2215F350C(uint64_t result)
{
  os_unfair_lock_s *v1;

  if (*(_BYTE *)(result + 56) == 1)
  {
    v1 = (os_unfair_lock_s *)(result + 60);
    swift_beginAccess();
    os_unfair_lock_unlock(v1);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_2215F3560(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t result;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *))(v5 + 16))(v8);
  swift_beginAccess();
  sub_22165348C();
  v11 = sub_221653468();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  result = swift_endAccess();
  if ((v11 & 1) != 0)
  {
    if (__OFADD__(*a3, 1))
      __break(1u);
    else
      ++*a3;
  }
  return result;
}

Swift::Void __swiftcall ObjectPool.clear()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0 + 56);
  if (v1 == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v0 + 60));
    swift_endAccess();
  }
  v2 = *(_QWORD *)(v0 + 40);
  if (v2)
  {
    swift_beginAccess();
    sub_2215EE3EC(v2);
    v3 = sub_22165348C();
    swift_bridgeObjectRetain();
    MEMORY[0x22766FA4C](MEMORY[0x24BEE1718], v3);
    sub_2216532E8();
    swift_bridgeObjectRelease();
    sub_2215EE3DC(v2);
  }
  swift_beginAccess();
  sub_22165348C();
  sub_221653480();
  swift_endAccess();
  if (v1)
  {
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v0 + 60));
    swift_endAccess();
  }
}

uint64_t sub_2215F37D8(uint64_t a1)
{
  uint64_t v1;

  return sub_2215F3560(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t sub_2215F37F0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObjectPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectPool);
}

BOOL static PatchTracker.Patch.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t sub_2215F3884()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v1 = v0;
  v2 = *(unsigned __int8 *)(v0 + 56);
  if (v2 == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v0 + 60));
    swift_endAccess();
  }
  v3 = (uint64_t *)(v0 + 16);
  v4 = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v1 + 24))(v14, v4);
    if (!v2)
      return v14[0];
    goto LABEL_6;
  }
  swift_beginAccess();
  result = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    v6 = sub_2215FB368(result);
    v8 = v7;
    v10 = v9 & 1;
    v14[0] = sub_2215FB408(v6, v7);
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    swift_endAccess();
    sub_2215FF374(v6, v8, v10);
    if (!v2)
      return v14[0];
LABEL_6:
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 60));
    swift_endAccess();
    return v14[0];
  }
  __break(1u);
  return result;
}

uint64_t *PatchTracker.DebuggerClass.unsafeMutableAddressor()
{
  return &static PatchTracker.DebuggerClass;
}

uint64_t static PatchTracker.DebuggerClass.getter()
{
  swift_beginAccess();
  return static PatchTracker.DebuggerClass;
}

uint64_t static PatchTracker.DebuggerClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_beginAccess();
  static PatchTracker.DebuggerClass = a1;
  qword_2556E4510 = a2;
  return result;
}

uint64_t (*static PatchTracker.DebuggerClass.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_2215F3A90()
{
  uint64_t v0;
  float result;

  if ((*(_BYTE *)(v0 + 20) & 1) == 0)
    return *(float *)(v0 + 16);
  sub_2215F3AC4(v0);
  *(float *)(v0 + 16) = result;
  *(_BYTE *)(v0 + 20) = 0;
  return result;
}

void sub_2215F3AC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  void *v3;
  id v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 808);
  ObjectType = swift_getObjectType();
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  v4 = objc_msgSend(v3, sel_currentFrame);

  if (v4)
  {
    v5 = objc_msgSend(v4, sel_camera);

    objc_msgSend(v5, sel_imageResolution);
  }
  else
  {
    sub_221653984();
    __break(1u);
  }
}

double PatchTracker.viewportSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  double v3;
  double result;
  uint64_t v5;

  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
    return *(double *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 808);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  result = v3;
  *(double *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = v5;
  *(_BYTE *)(v0 + 48) = 0;
  return result;
}

void sub_2215F3C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  void *v4;
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v1 = v0;
  if ((*(_BYTE *)(v0 + 88) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 808);
    ObjectType = swift_getObjectType();
    v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
    v5 = objc_msgSend(v4, sel_currentFrame);

    if (v5)
    {
      v6 = objc_msgSend(v5, sel_camera);

      objc_msgSend(v6, sel_imageResolution);
      v8 = v7;
      objc_msgSend(v6, sel_imageResolution);
      v10 = v9;
      v11 = v9 / v8;
      v12 = PatchTracker.viewportSize.getter();
      v13 = *(double *)(v1 + 40);

      if (v12 / v13 >= v11)
        v14 = v10;
      else
        v14 = v8 * (v12 / v13);
      if (v12 / v13 >= v11)
        v15 = v10 / (v12 / v13);
      else
        v15 = v8;
      *(double *)(v1 + 56) = (v8 - v15) * 0.5;
      *(double *)(v1 + 64) = (v10 - v14) * 0.5;
      *(double *)(v1 + 72) = v15;
      *(double *)(v1 + 80) = v14;
      *(_BYTE *)(v1 + 88) = 0;
    }
    else
    {
      sub_221653984();
      __break(1u);
    }
  }
}

double sub_2215F3D98()
{
  uint64_t v0;
  double v1;
  double result;
  double v3;
  double v4;
  double v5;

  if ((*(_BYTE *)(v0 + 128) & 1) == 0)
    return *(double *)(v0 + 96);
  sub_2215F3C20();
  result = round(v1);
  *(double *)(v0 + 96) = result;
  *(double *)(v0 + 104) = round(v3);
  *(double *)(v0 + 112) = round(v4);
  *(double *)(v0 + 120) = round(v5);
  *(_BYTE *)(v0 + 128) = 0;
  return result;
}

void sub_2215F3DE0()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  if ((*(_BYTE *)(v0 + 152) & 1) != 0)
  {
    sub_2215F3C20();
    v2 = v1;
    v4 = v3;
    v5 = sub_2215F3A90();
    *(double *)(v0 + 136) = round(v2 * v5);
    *(double *)(v0 + 144) = round(v4 * v5);
    *(_BYTE *)(v0 + 152) = 0;
  }
}

double sub_2215F3E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  if ((*(_BYTE *)(v0 + 192) & 1) == 0)
    return *(double *)(v0 + 160);
  sub_2215F3DE0();
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 176) = v1;
  *(_QWORD *)(v0 + 184) = v2;
  result = 0.0;
  *(_BYTE *)(v0 + 192) = 0;
  return result;
}

uint64_t sub_2215F3E84()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 208) != 1)
    return *(_QWORD *)(v0 + 200);
  result = sub_2215F3EBC(v0);
  *(_QWORD *)(v0 + 200) = result;
  *(_BYTE *)(v0 + 208) = 0;
  return result;
}

uint64_t sub_2215F3EBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  void *v3;
  id v4;
  __CVBuffer *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  vImagePixelCount v11;
  int64_t v12;
  int64_t v13;
  float v14;
  uint64_t result;
  _BYTE v16[40];
  _QWORD v17[4];
  char v18;
  _QWORD v19[4];
  char v20;

  v1 = *(_QWORD *)(a1 + 808);
  ObjectType = swift_getObjectType();
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  v4 = objc_msgSend(v3, sel_currentFrame);

  if (v4)
  {
    v5 = (__CVBuffer *)objc_msgSend(v4, sel_capturedImage);
    v19[0] = sub_2215F3D98();
    v19[1] = v6;
    v19[2] = v7;
    v19[3] = v8;
    v20 = 0;
    sub_221630A78(v5, 0, (uint64_t)v19, (uint64_t)v16);

    sub_2215C6540((uint64_t)v16, (uint64_t)v17, &qword_2556D9F40);
    v9 = 0;
    if ((v18 & 1) == 0)
    {
      v10 = (void *)v17[0];
      v11 = v17[1];
      v12 = v17[2];
      v13 = v17[3];
      v14 = sub_2215F3A90();
      v9 = _sSo13vImage_BufferV17MeasureFoundationE08makeTempB15ForScalePlanar803srcaB011scaleFactor5flagsSvSgAB_SfSitFZ_0(v10, v11, v12, v13, 0, v14);
    }

    return (uint64_t)v9;
  }
  else
  {
    result = sub_221653984();
    __break(1u);
  }
  return result;
}

uint64_t sub_2215F4020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 216))
  {
    v1 = *(_QWORD *)(v0 + 216);
  }
  else
  {
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_release();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4F0);
    v1 = swift_allocObject();
    v3 = MEMORY[0x24BEE4B08];
    *(_DWORD *)(v1 + 60) = 0;
    *(_QWORD *)(v1 + 16) = v3;
    *(_QWORD *)(v1 + 24) = sub_2215FF4E8;
    *(_QWORD *)(v1 + 32) = v2;
    *(_QWORD *)(v1 + 40) = sub_2215F41FC;
    *(_QWORD *)(v1 + 48) = 0;
    *(_BYTE *)(v1 + 56) = 1;
    *(_QWORD *)(v0 + 216) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

size_t sub_2215F40E8@<X0>(size_t *a1@<X8>)
{
  double v2;
  double v3;
  size_t result;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  swift_unownedRetainStrong();
  sub_2215F3DE0();
  v3 = v2;
  result = swift_release();
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  swift_unownedRetainStrong();
  sub_2215F3DE0();
  v6 = v5;
  result = swift_release();
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = (uint64_t)v3;
  if ((uint64_t)v3 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)v6;
  if ((uint64_t)v6 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = v8 * v7;
  if ((unsigned __int128)(v8 * (__int128)v7) >> 64 == (v8 * v7) >> 63)
  {
    result = (size_t)malloc(result);
    *a1 = result;
    a1[1] = v8;
    a1[2] = v7;
    a1[3] = v7;
    return result;
  }
LABEL_19:
  __break(1u);
  return result;
}

void sub_2215F41FC(_QWORD *a1)
{
  if (!*a1)
    __break(1u);
  JUMPOUT(0x22766FAF4);
}

uint64_t PatchTracker.patchSizeInPixels.getter()
{
  return 11;
}

uint64_t PatchTracker.minMatchingPatches.getter()
{
  return 5;
}

uint64_t PatchTracker.maxMatchingPatches.getter()
{
  return 8;
}

double sub_2215F422C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 272) & 1) == 0)
    return *(double *)(v0 + 256);
  __asm { FMOV            V0.2D, #11.0 }
  *(_OWORD *)(v0 + 256) = _Q0;
  *(_BYTE *)(v0 + 272) = 0;
  return 11.0;
}

double sub_2215F4258()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    return *(double *)(v0 + 280);
  __asm { FMOV            V0.2D, #5.0 }
  *(_OWORD *)(v0 + 280) = _Q0;
  *(_BYTE *)(v0 + 296) = 0;
  return 5.0;
}

double sub_2215F4284()
{
  uint64_t v0;
  double result;
  double v2;

  if ((*(_BYTE *)(v0 + 320) & 1) == 0)
    return *(double *)(v0 + 304);
  result = round(11.0 / sub_2215F3A90());
  v2 = round(11.0 / *(float *)(v0 + 16));
  *(double *)(v0 + 304) = result;
  *(double *)(v0 + 312) = v2;
  *(_BYTE *)(v0 + 320) = 0;
  return result;
}

uint64_t sub_2215F42DC()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 328))
  {
    v1 = *(_QWORD *)(v0 + 328);
  }
  else
  {
    v1 = sub_221653390();
    *(_QWORD *)(v1 + 16) = 121;
    memset_pattern16((void *)(v1 + 32), &unk_221657720, 0xF2uLL);
    *(_QWORD *)(v0 + 328) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_2215F4360()
{
  uint64_t v0;
  void *result;

  if (*(_BYTE *)(v0 + 368) != 1)
    return *(void **)(v0 + 336);
  result = malloc(0x79uLL);
  *(_QWORD *)(v0 + 336) = result;
  *(int64x2_t *)(v0 + 344) = vdupq_n_s64(0xBuLL);
  *(_QWORD *)(v0 + 360) = 11;
  *(_BYTE *)(v0 + 368) = 0;
  return result;
}

void *sub_2215F43BC()
{
  uint64_t v0;
  void *result;

  if (*(_BYTE *)(v0 + 384) != 1)
    return *(void **)(v0 + 376);
  result = sub_2215F4400();
  *(_QWORD *)(v0 + 376) = result;
  *(_BYTE *)(v0 + 384) = 0;
  return result;
}

void *sub_2215F4400()
{
  void *v0;
  vImagePixelCount v1;
  vImagePixelCount v2;
  vImagePixelCount v3;
  vImagePixelCount v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  unint64_t divisor;
  vImage_Error v9;
  void *v10;
  uint64_t v11;
  vImage_Buffer dest;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_2215F4020();
  v0 = (void *)sub_2215F3884();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  swift_release();
  v7 = sub_2215F42DC();
  divisor = *(_QWORD *)(sub_2215F42DC() + 16);
  swift_bridgeObjectRelease();
  if (divisor >> 31)
    __break(1u);
  dest.data = v0;
  dest.height = v2;
  dest.width = v4;
  dest.rowBytes = v6;
  v9 = vImageConvolve_Planar8(&dest, &dest, 0, 0, 0, (const int16_t *)(v7 + 32), 0xBu, 0xBu, divisor, 0, 0x84u);
  if (v9 < 1)
  {
    swift_bridgeObjectRelease();
    v10 = 0;
  }
  else
  {
    v10 = malloc(v9);
    swift_bridgeObjectRelease();
  }
  v11 = sub_2215F4020();
  if (*(_BYTE *)(v11 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 60));
    swift_endAccess();
    swift_beginAccess();
    sub_2215FDC8C((uint64_t *)&dest, (uint64_t)v0, v2, v4, v6);
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 60));
  }
  else
  {
    swift_beginAccess();
    sub_2215FDC8C((uint64_t *)&dest, (uint64_t)v0, v2, v4, v6);
  }
  swift_endAccess();
  swift_release();
  return v10;
}

void *sub_2215F45F8()
{
  uint64_t v0;
  void *v1;
  vImagePixelCount v2;
  vImagePixelCount v3;
  vImagePixelCount v4;
  vImagePixelCount v5;
  size_t v6;
  size_t v7;
  vImage_Error v8;
  void *result;
  vImage_Buffer dest;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 400) != 1)
    return *(void **)(v0 + 392);
  v1 = sub_2215F4360();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  if (qword_2556D8DA0 != -1)
    swift_once();
  dest.data = v1;
  dest.height = v3;
  dest.width = v5;
  dest.rowBytes = v7;
  v8 = vImageConvolve_Planar8(&dest, &dest, 0, 0, 0, (const int16_t *)(static CVUtil.embossKernel + 32), 3u, 3u, 1, 0, 0x84u);
  if (v8 < 1)
    result = 0;
  else
    result = malloc(v8);
  *(_QWORD *)(v0 + 392) = result;
  *(_BYTE *)(v0 + 400) = 0;
  return result;
}

uint64_t sub_2215F4714()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 512))
  {
    v1 = *(_QWORD *)(v0 + 512);
  }
  else
  {
    type metadata accessor for MeanShiftPointFilter();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = 3;
    *(_DWORD *)(v1 + 24) = 953267991;
    *(_WORD *)(v1 + 28) = 1;
    *(_QWORD *)(v0 + 512) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

CGAffineTransform *sub_2215F4780@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat tx;
  CGFloat ty;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGFloat v13;
  CGFloat v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v23;
  CGFloat v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  CGAffineTransform v29;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if ((*(_BYTE *)(v1 + 680) & 1) != 0)
  {
    sub_2215F3DE0();
    v4 = v3;
    v6 = v5;
    v7 = PatchTracker.viewportSize.getter();
    CGAffineTransformMakeScale(&t1, 1.0 / v7, 1.0 / *(double *)(v1 + 40));
    v25 = *(_OWORD *)&t1.c;
    v27 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    ARViewToCameraImageTransform();
    v10 = *(_OWORD *)&t1.a;
    v11 = *(_OWORD *)&t1.c;
    v12 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v27;
    *(_OWORD *)&t1.c = v25;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v10;
    *(_OWORD *)&t2.c = v11;
    *(_OWORD *)&t2.tx = v12;
    CGAffineTransformConcat(&v29, &t1, &t2);
    v26 = *(_OWORD *)&v29.c;
    v28 = *(_OWORD *)&v29.a;
    v13 = v29.tx;
    v14 = v29.ty;
    CGAffineTransformMakeScale(&t1, v4, v6);
    v15 = *(_OWORD *)&t1.a;
    v16 = *(_OWORD *)&t1.c;
    v17 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v28;
    *(_OWORD *)&t1.c = v26;
    t1.tx = v13;
    t1.ty = v14;
    *(_OWORD *)&t2.a = v15;
    *(_OWORD *)&t2.c = v16;
    *(_OWORD *)&t2.tx = v17;
    result = CGAffineTransformConcat(&v29, &t1, &t2);
    a = v29.a;
    b = v29.b;
    c = v29.c;
    d = v29.d;
    v24 = v29.tx;
    v23 = v29.ty;
    *(CGFloat *)(v1 + 632) = v29.a;
    *(CGFloat *)(v1 + 640) = b;
    *(CGFloat *)(v1 + 648) = c;
    *(CGFloat *)(v1 + 656) = d;
    *(CGFloat *)(v1 + 664) = v24;
    *(CGFloat *)(v1 + 672) = v23;
    *(_BYTE *)(v1 + 680) = 0;
  }
  else
  {
    v23 = *(double *)(v1 + 672);
    v24 = *(double *)(v1 + 664);
    d = *(double *)(v1 + 656);
    c = *(double *)(v1 + 648);
    b = *(double *)(v1 + 640);
    a = *(double *)(v1 + 632);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v24;
  a1[5] = v23;
  return result;
}

CGAffineTransform *sub_2215F48FC@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  double v3;
  double v4;
  CGFloat tx;
  CGFloat ty;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CGFloat v10;
  CGFloat v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v20;
  CGFloat v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGAffineTransform v26;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if ((*(_BYTE *)(v1 + 736) & 1) != 0)
  {
    sub_2215F3DE0();
    CGAffineTransformMakeScale(&t1, 1.0 / v3, 1.0 / v4);
    v22 = *(_OWORD *)&t1.c;
    v24 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    PatchTracker.viewportSize.getter();
    ARCameraImageToViewTransform();
    v7 = *(_OWORD *)&t1.a;
    v8 = *(_OWORD *)&t1.c;
    v9 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v24;
    *(_OWORD *)&t1.c = v22;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v7;
    *(_OWORD *)&t2.c = v8;
    *(_OWORD *)&t2.tx = v9;
    CGAffineTransformConcat(&v26, &t1, &t2);
    v23 = *(_OWORD *)&v26.c;
    v25 = *(_OWORD *)&v26.a;
    v10 = v26.tx;
    v11 = v26.ty;
    CGAffineTransformMakeScale(&t1, *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40));
    v12 = *(_OWORD *)&t1.a;
    v13 = *(_OWORD *)&t1.c;
    v14 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v25;
    *(_OWORD *)&t1.c = v23;
    t1.tx = v10;
    t1.ty = v11;
    *(_OWORD *)&t2.a = v12;
    *(_OWORD *)&t2.c = v13;
    *(_OWORD *)&t2.tx = v14;
    result = CGAffineTransformConcat(&v26, &t1, &t2);
    a = v26.a;
    b = v26.b;
    c = v26.c;
    d = v26.d;
    v21 = v26.tx;
    v20 = v26.ty;
    *(CGFloat *)(v1 + 688) = v26.a;
    *(CGFloat *)(v1 + 696) = b;
    *(CGFloat *)(v1 + 704) = c;
    *(CGFloat *)(v1 + 712) = d;
    *(CGFloat *)(v1 + 720) = v21;
    *(CGFloat *)(v1 + 728) = v20;
    *(_BYTE *)(v1 + 736) = 0;
  }
  else
  {
    v20 = *(double *)(v1 + 728);
    v21 = *(double *)(v1 + 720);
    d = *(double *)(v1 + 712);
    c = *(double *)(v1 + 704);
    b = *(double *)(v1 + 696);
    a = *(double *)(v1 + 688);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

CGAffineTransform *sub_2215F4A68@<X0>(CGFloat *a1@<X8>)
{
  uint64_t v1;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat tx;
  CGFloat ty;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGFloat v13;
  CGFloat v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGFloat v18;
  CGFloat v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CGAffineTransform *result;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v28;
  CGFloat v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CGAffineTransform v36;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if ((*(_BYTE *)(v1 + 792) & 1) != 0)
  {
    sub_2215F3D98();
    v4 = v3;
    v6 = v5;
    v7 = PatchTracker.viewportSize.getter();
    CGAffineTransformMakeScale(&t1, 1.0 / v7, 1.0 / *(double *)(v1 + 40));
    v30 = *(_OWORD *)&t1.c;
    v33 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    ARViewToCameraImageTransform();
    v10 = *(_OWORD *)&t1.a;
    v11 = *(_OWORD *)&t1.c;
    v12 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v33;
    *(_OWORD *)&t1.c = v30;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v10;
    *(_OWORD *)&t2.c = v11;
    *(_OWORD *)&t2.tx = v12;
    CGAffineTransformConcat(&v36, &t1, &t2);
    v31 = *(_OWORD *)&v36.c;
    v34 = *(_OWORD *)&v36.a;
    v13 = v36.tx;
    v14 = v36.ty;
    CGAffineTransformMakeScale(&t1, v4, v6);
    v15 = *(_OWORD *)&t1.a;
    v16 = *(_OWORD *)&t1.c;
    v17 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v34;
    *(_OWORD *)&t1.c = v31;
    t1.tx = v13;
    t1.ty = v14;
    *(_OWORD *)&t2.a = v15;
    *(_OWORD *)&t2.c = v16;
    *(_OWORD *)&t2.tx = v17;
    CGAffineTransformConcat(&v36, &t1, &t2);
    v32 = *(_OWORD *)&v36.c;
    v35 = *(_OWORD *)&v36.a;
    v18 = v36.tx;
    v19 = v36.ty;
    CGAffineTransformMakeTranslation(&t1, *(CGFloat *)(v1 + 96), *(CGFloat *)(v1 + 104));
    v20 = *(_OWORD *)&t1.a;
    v21 = *(_OWORD *)&t1.c;
    v22 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v35;
    *(_OWORD *)&t1.c = v32;
    t1.tx = v18;
    t1.ty = v19;
    *(_OWORD *)&t2.a = v20;
    *(_OWORD *)&t2.c = v21;
    *(_OWORD *)&t2.tx = v22;
    result = CGAffineTransformConcat(&v36, &t1, &t2);
    a = v36.a;
    b = v36.b;
    c = v36.c;
    d = v36.d;
    v29 = v36.tx;
    v28 = v36.ty;
    *(CGFloat *)(v1 + 744) = v36.a;
    *(CGFloat *)(v1 + 752) = b;
    *(CGFloat *)(v1 + 760) = c;
    *(CGFloat *)(v1 + 768) = d;
    *(CGFloat *)(v1 + 776) = v29;
    *(CGFloat *)(v1 + 784) = v28;
    *(_BYTE *)(v1 + 792) = 0;
  }
  else
  {
    v28 = *(double *)(v1 + 784);
    v29 = *(double *)(v1 + 776);
    d = *(double *)(v1 + 768);
    c = *(double *)(v1 + 760);
    b = *(double *)(v1 + 752);
    a = *(double *)(v1 + 744);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v29;
  a1[5] = v28;
  return result;
}

uint64_t *PatchTracker.DebugOptions.default.unsafeMutableAddressor()
{
  if (qword_2556D8E58 != -1)
    swift_once();
  return &static PatchTracker.DebugOptions.default;
}

uint64_t PatchTracker.debugOptions.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 824);
}

uint64_t PatchTracker.debugOptions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 824) = a1;
  return result;
}

uint64_t (*PatchTracker.debugOptions.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t PatchTracker.__allocating_init(sceneView:motion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  PatchTracker.init(sceneView:motion:)(a1, a2, a3);
  return v6;
}

uint64_t PatchTracker.init(sceneView:motion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _OWORD *v9;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(id, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v4 = v3;
  *(_DWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 20) = 1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_BYTE *)(v4 + 48) = 1;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_BYTE *)(v4 + 88) = 1;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_BYTE *)(v4 + 128) = 1;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_BYTE *)(v4 + 152) = 1;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_BYTE *)(v4 + 192) = 1;
  *(_QWORD *)(v4 + 200) = 0;
  *(_BYTE *)(v4 + 208) = 1;
  *(_OWORD *)(v4 + 216) = xmmword_2216576F0;
  *(_OWORD *)(v4 + 232) = xmmword_221657700;
  *(_WORD *)(v4 + 248) = 256;
  *(_DWORD *)(v4 + 252) = 1082130432;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_BYTE *)(v4 + 272) = 1;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_BYTE *)(v4 + 296) = 1;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_BYTE *)(v4 + 320) = 1;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_QWORD *)(v4 + 360) = 0;
  *(_BYTE *)(v4 + 368) = 1;
  *(_QWORD *)(v4 + 376) = 0;
  *(_BYTE *)(v4 + 384) = 1;
  *(_QWORD *)(v4 + 392) = 0;
  *(_BYTE *)(v4 + 400) = 1;
  *(_QWORD *)(v4 + 408) = 20;
  *(_BYTE *)(v4 + 416) = 0;
  *(_DWORD *)(v4 + 420) = 953267991;
  *(_QWORD *)(v4 + 424) = 0x404E000000000000;
  *(_QWORD *)(v4 + 432) = 0x3F4CCCCD3F7746EALL;
  *(_DWORD *)(v4 + 440) = 1065185444;
  *(_QWORD *)(v4 + 448) = 3;
  *(_OWORD *)(v4 + 456) = xmmword_221657710;
  *(_QWORD *)(v4 + 472) = 0x400000003E19999ALL;
  *(_BYTE *)(v4 + 480) = 1;
  *(_QWORD *)(v4 + 484) = 0x3D4CCCCDBCCCCCCDLL;
  *(_BYTE *)(v4 + 492) = 1;
  *(_DWORD *)(v4 + 496) = 1036831949;
  *(_BYTE *)(v4 + 500) = 1;
  *(_DWORD *)(v4 + 504) = 1056964608;
  *(_QWORD *)(v4 + 512) = 0;
  *(_BYTE *)(v4 + 520) = 1;
  *(_DWORD *)(v4 + 524) = 953267991;
  *(_QWORD *)(v4 + 528) = 0x3F0000003E32B8C2;
  v8 = MEMORY[0x24BEE4B00];
  *(_BYTE *)(v4 + 536) = 1;
  *(_QWORD *)(v4 + 544) = v8;
  *(_QWORD *)(v4 + 552) = 0x3FD0000000000000;
  *(_QWORD *)(v4 + 560) = 3;
  *(_BYTE *)(v4 + 568) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D8F78);
  v9 = (_OWORD *)swift_allocObject();
  v9[1] = xmmword_221655530;
  v9[2] = xmmword_221655540;
  __asm { FMOV            V1.2D, #15.0 }
  v9[3] = xmmword_221655550;
  v9[4] = _Q1;
  *(_QWORD *)(v4 + 576) = v9;
  v15 = (_DWORD *)swift_slowAlloc();
  *v15 = 0;
  *(_QWORD *)(v4 + 584) = v15;
  v16 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 592) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v4 + 600) = 0u;
  *(_QWORD *)(v4 + 616) = v16;
  *(_QWORD *)(v4 + 624) = 1;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_BYTE *)(v4 + 680) = 1;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_OWORD *)(v4 + 704) = 0u;
  *(_OWORD *)(v4 + 720) = 0u;
  *(_BYTE *)(v4 + 736) = 1;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_BYTE *)(v4 + 792) = 1;
  if (qword_2556D8E58 != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v4 + 824) = static PatchTracker.DebugOptions.default;
  v17 = v4 + 832;
  *(_OWORD *)(v4 + 832) = 0u;
  *(_OWORD *)(v4 + 848) = 0u;
  *(_QWORD *)(v4 + 864) = 0;
  *(_QWORD *)(v4 + 800) = a1;
  *(_QWORD *)(v4 + 808) = a2;
  *(_QWORD *)(v4 + 816) = a3;
  swift_beginAccess();
  v18 = static PatchTracker.DebuggerClass;
  if (static PatchTracker.DebuggerClass)
  {
    v30 = v4 + 832;
    v19 = qword_2556E4510;
    v20 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(qword_2556E4510 + 8);
    v21 = sub_221653714();
    v29 = (uint64_t)&v29;
    v22 = *(_QWORD *)(v21 - 8);
    MEMORY[0x24BDAC7A8](v21);
    v24 = (char *)&v29 - v23;
    v25 = a1;
    swift_retain();
    swift_retain();
    v20(v25, a2, v4, v18, v19);
    v26 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v18) == 1)
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
    }
    else
    {
      *((_QWORD *)&v32 + 1) = v18;
      v33 = v19;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
      (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 32))(boxed_opaque_existential_1, v24, v18);

      swift_release();
    }
    v17 = v30;
  }
  else
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
  }
  swift_beginAccess();
  sub_2215FB1DC((uint64_t)&v31, v17);
  swift_endAccess();
  return v4;
}

uint64_t PatchTracker.deinit()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(uint64_t, uint64_t);
  id v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37[4];
  _BYTE v38[40];
  _QWORD v39[4];
  char v40;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 592);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    result = sub_2216539F0();
    v3 = result;
    if (!result)
      goto LABEL_20;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
    if (!v3)
      goto LABEL_20;
  }
  if (v3 < 1)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    return result;
  }
  v5 = 0;
  v34 = v2 & 0xC000000000000001;
  v35 = v3;
  v36 = v2;
  do
  {
    if (v34)
    {
      v6 = (_QWORD *)MEMORY[0x22766ED44](v5, v2);
    }
    else
    {
      v6 = *(_QWORD **)(v2 + 8 * v5 + 32);
      swift_retain();
    }
    v7 = sub_2215F4020();
    v8 = v6[4];
    v9 = v6[5];
    v10 = v6[6];
    v11 = v6[7];
    if (*(_BYTE *)(v7 + 56) == 1)
    {
      swift_beginAccess();
      os_unfair_lock_lock((os_unfair_lock_t)(v7 + 60));
      swift_endAccess();
      swift_beginAccess();
      sub_2215FDC8C(v37, v8, v9, v10, v11);
      swift_endAccess();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 60));
    }
    else
    {
      swift_beginAccess();
      sub_2215FDC8C(v37, v8, v9, v10, v11);
    }
    swift_endAccess();
    swift_release();
    sub_2215FA118((uint64_t)v38);
    sub_2215C6540((uint64_t)v38, (uint64_t)v39, &qword_2556D9F40);
    if ((v40 & 1) == 0)
    {
      v12 = v39[0];
      v13 = v39[1];
      v15 = v39[2];
      v14 = v39[3];
      v16 = sub_2215F4020();
      if (*(_BYTE *)(v16 + 56) == 1)
      {
        swift_beginAccess();
        os_unfair_lock_lock((os_unfair_lock_t)(v16 + 60));
        swift_endAccess();
        swift_beginAccess();
        sub_2215FDC8C(v37, v12, v13, v15, v14);
        swift_endAccess();
        swift_beginAccess();
        os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 60));
      }
      else
      {
        swift_beginAccess();
        sub_2215FDC8C(v37, v12, v13, v15, v14);
      }
      swift_endAccess();
      swift_release();
    }
    v17 = (void *)v6[11];
    if (v17)
    {
      v18 = *(_QWORD *)(v1 + 808);
      ObjectType = swift_getObjectType();
      v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16);
      v21 = v17;
      v22 = (void *)v20(ObjectType, v18);
      objc_msgSend(v22, sel_removeAnchor_, v21);

    }
    ++v5;
    swift_weakAssign();
    swift_release();
    v2 = v36;
  }
  while (v35 != v5);
LABEL_20:
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v1 + 592) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 600))
  {
    v23 = (_QWORD *)swift_retain();
    sub_2215F5654(v23);
    swift_release();
    *(_QWORD *)(v1 + 600) = 0;
    swift_release();
  }
  result = (uint64_t)sub_2215F4360();
  if (!result)
    goto LABEL_31;
  v27 = result;
  v28 = v24;
  v29 = v25;
  v30 = v26;
  MEMORY[0x22766FAF4](result, -1, -1);
  *(_QWORD *)(v1 + 336) = v27;
  *(_QWORD *)(v1 + 344) = v28;
  *(_QWORD *)(v1 + 352) = v29;
  *(_QWORD *)(v1 + 360) = v30;
  *(_BYTE *)(v1 + 368) = 0;
  v31 = sub_2215F3E84();
  if (v31)
    MEMORY[0x22766FAF4](v31, -1, -1);
  v32 = sub_2215F43BC();
  if (v32)
    MEMORY[0x22766FAF4](v32, -1, -1);
  v33 = sub_2215F45F8();
  if (v33)
    MEMORY[0x22766FAF4](v33, -1, -1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  sub_2215FDE00(v1 + 832);
  return v1;
}

uint64_t PatchTracker.__deallocating_deinit()
{
  PatchTracker.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2215F5654(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  id v18;
  void *v19;
  uint64_t v21[4];
  _BYTE v22[40];
  uint64_t v23[4];
  char v24;

  v2 = v1;
  v4 = sub_2215F4020();
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  if (*(_BYTE *)(v4 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 60));
    swift_endAccess();
    swift_beginAccess();
    sub_2215FDC8C(v23, v5, v6, v7, v8);
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 60));
  }
  else
  {
    swift_beginAccess();
    sub_2215FDC8C(v23, v5, v6, v7, v8);
  }
  swift_endAccess();
  swift_release();
  sub_2215FA118((uint64_t)v22);
  sub_2215C6540((uint64_t)v22, (uint64_t)v23, &qword_2556D9F40);
  if ((v24 & 1) == 0)
  {
    v9 = v23[0];
    v10 = v23[1];
    v11 = v23[2];
    v12 = v23[3];
    v13 = sub_2215F4020();
    if (*(_BYTE *)(v13 + 56) == 1)
    {
      swift_beginAccess();
      os_unfair_lock_lock((os_unfair_lock_t)(v13 + 60));
      swift_endAccess();
      swift_beginAccess();
      sub_2215FDC8C(v21, v9, v10, v11, v12);
      swift_endAccess();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 60));
    }
    else
    {
      swift_beginAccess();
      sub_2215FDC8C(v21, v9, v10, v11, v12);
    }
    swift_endAccess();
    swift_release();
  }
  v14 = (void *)a1[11];
  if (v14)
  {
    v15 = *(_QWORD *)(v2 + 808);
    ObjectType = swift_getObjectType();
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 16);
    v18 = v14;
    v19 = (void *)v17(ObjectType, v15);
    objc_msgSend(v19, sel_removeAnchor_, v18);

  }
  return swift_weakAssign();
}

Swift::Void __swiftcall PatchTracker.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  unint64_t *v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 584));
  v4 = -[objc_class worldTrackingState](frame.super.isa, sel_worldTrackingState);
  if (v4 && (v5 = v4, v6 = objc_msgSend(v4, sel_vioTrackingState), v5, !v6))
  {
    isa = frame.super.isa;
    v7 = (unint64_t *)v2;
    sub_2215F7134(isa);
    v16 = *(_QWORD *)(v2 + 608);
    v13 = __CFADD__(v16, 1);
    v14 = v16 + 1;
    if (!v13)
    {
LABEL_13:
      *(_QWORD *)(v2 + 608) = v14;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 584));
      return;
    }
LABEL_21:
    __break(1u);
  }
  else
  {
    v7 = (unint64_t *)(v2 + 592);
    swift_beginAccess();
    v8 = *(_QWORD *)(v2 + 592);
    if ((v8 & 0x8000000000000000) != 0
      || (v8 & 0x4000000000000000) != 0
      || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
          v8 = *v7,
          (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
    {
      if (v8 >> 62)
        goto LABEL_17;
      v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
      goto LABEL_11;
    }
    if (!(v8 >> 62))
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRetain();
  v10 = sub_2216539F0();
  swift_bridgeObjectRelease();
  if ((v10 & 0x8000000000000000) == 0)
  {
LABEL_8:
    sub_2215C1540(0, v10);
    while (1)
    {
      swift_endAccess();
      v12 = *(_QWORD *)(v2 + 608);
      v13 = __CFADD__(v12, 1);
      v14 = v12 + 1;
      if (!v13)
        goto LABEL_13;
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      v11 = sub_2216539F0();
      if (sub_2216539F0() < 0)
        goto LABEL_24;
      v17 = sub_2216539F0();
      swift_bridgeObjectRelease();
      if (v11 < 0 || v17 < v11)
      {
        __break(1u);
        goto LABEL_21;
      }
LABEL_11:
      *v7 = (unint64_t)sub_2215E7130(0, v11);
      swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t PatchTracker.hitTest(frame:screenPoint:context:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4@<D0>, uint64_t a5@<D1>)
{
  uint64_t v5;
  uint64_t v6;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  unint64_t *v16;
  __n128 *v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;
  float v28;
  float v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, float, float, double);
  double v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  float64x2_t v50;
  unsigned int v51;
  float64_t v52;
  uint64_t v53;
  float64_t v54;
  __n128 v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  char v59[96];
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE v63[176];
  _BYTE v64[176];
  __n128 v65[9];
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  uint64_t v73;
  __n128 v74;
  __n128 v75;
  uint64_t v76;
  float v77;
  float v78;
  int v79;
  id v80[24];

  v6 = v5;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 584));
  swift_retain();
  sub_221653018();
  swift_release();
  if (!v80[0])
    goto LABEL_6;
  objc_msgSend(v80[0], sel_userAcceleration);
  v54 = v12;
  objc_msgSend(v80[0], sel_userAcceleration);
  v52 = v13;
  objc_msgSend(v80[0], sel_userAcceleration);
  v50 = v14;

  v15.f64[0] = v54;
  v15.f64[1] = v52;
  *(float *)v15.f64 = sqrt(vmulq_f64(v50, v50).f64[0] + vaddvq_f64(vmulq_f64(v15, v15)));
  if (*(float *)v15.f64 <= 0.1)
  {
LABEL_6:
    v18 = sub_2215EC200((uint64_t)v63);
    v19 = *(_QWORD *)(v5 + 600);
    if (v19 && (v20 = *(double *)(v19 + 80), objc_msgSend(a1, sel_timestamp, v18), v20 == v21))
    {
      if (*(_QWORD *)(v5 + 600))
        goto LABEL_9;
    }
    else
    {
      *(_QWORD *)(v5 + 600) = sub_2215F77B8(a1, a4, a5, 0);
      swift_release();
      if (*(_QWORD *)(v5 + 600))
      {
LABEL_9:
        v22 = swift_retain();
        sub_2215F6294(v22, a2, (uint64_t)v64, *(CGFloat *)&a4, *(CGFloat *)&a5);
        sub_2215C6540((uint64_t)v64, (uint64_t)v80, &qword_2556DB668);
        sub_2215C6540((uint64_t)v64, (uint64_t)&v66, &qword_2556DB668);
        if (sub_2215EC220((uint64_t)&v66) == 1)
        {
          if (qword_2556D8F28 != -1)
            swift_once();
          v23 = qword_2556E46B0;
          v24 = *(_QWORD *)algn_2556E46B8;
          v25 = sub_221653618();
          _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(0xD000000000000023, 0x800000022165F030, v25, 0, v23, v24);
        }
        else
        {
          v55 = v66;
          v43 = v68;
          v44 = v67;
          v51 = v69;
          v48 = v71;
          v49 = v70;
          v46 = v74;
          v47 = v72;
          v45 = v75;
          v53 = v73;
          v27 = v76;
          v28 = v77;
          v29 = v78;
          v30 = v79;
          sub_2215C6540((uint64_t)v80, (uint64_t)v59, &qword_2556DB668);
          v31 = qword_2556D8F28;
          swift_retain();
          swift_retain();
          if (v31 != -1)
            swift_once();
          v32 = qword_2556E46B0;
          v33 = *(_QWORD *)algn_2556E46B8;
          v60 = 0;
          v61 = 0xE000000000000000;
          sub_221653894();
          sub_221653210();
          v65[0] = v55;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2556DBBC8);
          sub_2215D2238(&qword_2556DBBD0, &qword_2556DBBC8, MEMORY[0x24BEE4120]);
          sub_221653B4C();
          sub_221653210();
          swift_bridgeObjectRelease();
          sub_221653210();
          sub_22165342C();
          sub_221653210();
          sub_22165342C();
          v34 = v60;
          v35 = v61;
          v36 = sub_221653618();
          _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(v34, v35, v36, 0, v32, v33);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          v37 = *(_QWORD *)(v6 + 824);
          sub_2215C6540(a2, (uint64_t)v65, &qword_2556DBBD8);
          if (sub_2215FF094((uint64_t)v65) != 1 && (v65[0].n128_u8[0] & 1) == 0 && (v37 & 2) != 0)
          {
            swift_beginAccess();
            sub_2215FF0B8(v6 + 832, (uint64_t)&v60);
            if (v62)
            {
              sub_2215E70EC((uint64_t)&v60, (uint64_t)v56);
              sub_2215FDE00((uint64_t)&v60);
              v39 = v57;
              v40 = v58;
              __swift_project_boxed_opaque_existential_0(v56, v57);
              v41 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, float, float, double))(v40 + 24);
              swift_retain();
              swift_retain();
              LODWORD(v42) = v30;
              v41(v44, v43, v51, v53, v27, v39, v40, v55, v49, v48, v47, v46, v45, v28, v29, v42);
              sub_2215EC290((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
              swift_release();
              swift_release();
              swift_release();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
            }
            else
            {
              sub_2215EC290((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
              swift_release();
              sub_2215FDE00((uint64_t)&v60);
            }
            goto LABEL_22;
          }
          sub_2215EC290((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
        }
        swift_release();
LABEL_22:
        v26 = v80;
        goto LABEL_23;
      }
    }
    v26 = (id *)v63;
LABEL_23:
    sub_2215C6540((uint64_t)v26, (uint64_t)&v60, &qword_2556DB668);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 584));
    v17 = (__n128 *)&v60;
    goto LABEL_24;
  }
  v16 = (unint64_t *)(v5 + 544);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v5 + 544) + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v66.n128_u64[0] = *v16;
    *v16 = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DBBE0);
    sub_221653978();
    *v16 = v66.n128_u64[0];
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  sub_2215EC200((uint64_t)&v66);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 584));
  v17 = &v66;
LABEL_24:
  sub_2215C6540((uint64_t)v17, (uint64_t)v80, &qword_2556DB668);
  return sub_2215C6540((uint64_t)v80, a3, &qword_2556DB668);
}

void *PatchTracker.DebugOptions.paintMode.unsafeMutableAddressor()
{
  return &static PatchTracker.DebugOptions.paintMode;
}

BOOL PatchTracker.DebugOptions.shouldDo(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[144];

  sub_2215C6540(a2, (uint64_t)v6, &qword_2556DBBD8);
  if (sub_2215FF094((uint64_t)v6) == 1)
    return 0;
  if ((v6[0] & 1) != 0)
    return 0;
  return (a1 & ~a3) == 0;
}

void sub_2215F61A8(double a1, double a2)
{
  uint64_t v2;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;

  v5 = PatchTracker.viewportSize.getter() / 7.0;
  v6 = *(double *)(v2 + 40);
  v7 = floor(v6 / v5);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v8 = (uint64_t)v7;
  v9 = (double)(uint64_t)v7;
  if ((v8 & 1) == 0)
    v9 = v9 + 1.0;
  v10 = floor(a1 / v5) + floor(a2 / (v6 / v9)) * 7.0;
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
    goto LABEL_13;
  if (v10 <= -1.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 >= 1.84467441e19)
LABEL_15:
    __break(1u);
}

uint64_t sub_2215F6294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  uint64_t v5;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t result;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  double v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD v114[11];
  uint64_t v115;
  uint64_t v116[12];
  _OWORD v117[10];
  __int128 v118;
  uint64_t v119;
  _BYTE v120[192];
  _OWORD v121[11];
  uint64_t v122;
  _BYTE __dst[176];
  uint64_t v124;
  _BYTE v125[176];
  _BYTE v126[176];
  _BYTE v127[176];
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _BYTE v141[176];

  v10 = (double *)sub_2215F7B48(a1, a2, a4, a5);
  if (!v10)
  {
    sub_2215EC200((uint64_t)__dst);
    sub_2215C6540((uint64_t)__dst, (uint64_t)v117, &qword_2556DB668);
    return sub_2215C6540((uint64_t)v117, a3, &qword_2556DB668);
  }
  v11 = (uint64_t)v10;
  v85 = a3;
  sub_2215F7FB0(v10, a2, (uint64_t)v126);
  sub_2215F69B8(v11, (uint64_t)v126, (uint64_t)v127);
  sub_2215C6540((uint64_t)v127, (uint64_t)v125, &qword_2556DB668);
  sub_2215EC290((uint64_t)v126, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
  sub_2215F61A8(a4, a5);
  v13 = v12;
  v14 = (uint64_t *)(v5 + 544);
  swift_beginAccess();
  v15 = *(_QWORD *)(v5 + 544);
  if (*(_QWORD *)(v15 + 16) && (v16 = sub_2215CA4BC(v13), (v17 & 1) != 0))
  {
    v18 = (_OWORD *)(*(_QWORD *)(v15 + 56) + 192 * v16);
    v20 = v18[2];
    v19 = v18[3];
    v21 = v18[1];
    v121[0] = *v18;
    v121[1] = v21;
    v121[2] = v20;
    v121[3] = v19;
    v22 = v18[4];
    v23 = v18[5];
    v24 = v18[6];
    v121[7] = v18[7];
    v121[6] = v24;
    v121[5] = v23;
    v121[4] = v22;
    v25 = v18[8];
    v26 = v18[9];
    v27 = v18[10];
    v122 = *((_QWORD *)v18 + 22);
    v121[10] = v27;
    v121[9] = v26;
    v121[8] = v25;
    memmove(__dst, v18, 0xB8uLL);
    nullsub_1(__dst);
    sub_2215D205C((uint64_t)v121);
  }
  else
  {
    sub_2215FF438((uint64_t)v121);
    sub_2215C6540((uint64_t)v121, (uint64_t)__dst, &qword_2556DC4E8);
  }
  sub_2215C6540((uint64_t)__dst, (uint64_t)v120, &qword_2556DC4E8);
  sub_2215C6540((uint64_t)v120, (uint64_t)v121, &qword_2556DC4E8);
  if (sub_2215EC220((uint64_t)v121) == 1)
  {
    sub_2215C6540((uint64_t)v126, (uint64_t)v141, &qword_2556DB668);
    v28 = 0;
    if (sub_2215EC220((uint64_t)v141) == 1)
      goto LABEL_14;
LABEL_11:
    sub_2215C6540((uint64_t)v127, (uint64_t)&v128, &qword_2556DB668);
    result = sub_2215EC220((uint64_t)&v128);
    if ((_DWORD)result != 1)
    {
      if (__OFADD__(v28++, 1))
      {
LABEL_54:
        __break(1u);
        return result;
      }
      v31 = v140;
      v84 = v138;
      v82 = v136;
      v83 = v137;
      v32 = v135;
      v80 = v133;
      v81 = v134;
      v33 = v131;
      v34 = v130;
      v35 = v129;
      v78 = v128;
      v79 = v132;
      v36 = v139;
      sub_2215C6540((uint64_t)v125, (uint64_t)v116, &qword_2556DB668);
      sub_2215C6540((uint64_t)v125, (uint64_t)v117, &qword_2556DB668);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_221652F4C();
      v38 = v37;
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v101 = *v14;
      *v14 = 0x8000000000000000;
      v86 = v78;
      v87 = v35;
      v88 = v34;
      v89 = v33;
      v90 = v79;
      v91 = v80;
      v92 = v81;
      v93 = v32;
      v94 = v82;
      v95 = v83;
      v96 = v84;
      v97 = v36;
      v98 = v31;
      v99 = v38;
      v100 = v28;
      sub_22161C1E8(&v86, v13, isUniquelyReferenced_nonNull_native);
      *v14 = v101;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_2215EC290((uint64_t)v127, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
    }
    goto LABEL_14;
  }
  v28 = v124;
  sub_2215C6540((uint64_t)__dst, (uint64_t)v117, &qword_2556DC4E8);
  sub_2215FF45C((uint64_t *)v117);
  sub_2215C6540((uint64_t)v126, (uint64_t)v141, &qword_2556DB668);
  if (sub_2215EC220((uint64_t)v141) != 1)
    goto LABEL_11;
LABEL_14:
  v40 = *v14;
  v41 = *v14 + 64;
  v42 = 1 << *(_BYTE *)(*v14 + 32);
  v43 = -1;
  if (v42 < 64)
    v43 = ~(-1 << v42);
  v44 = v43 & *(_QWORD *)(*v14 + 64);
  v45 = (unint64_t)(v42 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v46 = 0;
  while (1)
  {
    if (v44)
    {
      v47 = __clz(__rbit64(v44));
      v44 &= v44 - 1;
      v48 = v47 | (v46 << 6);
      goto LABEL_38;
    }
    v49 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v49 >= v45)
      goto LABEL_47;
    v50 = *(_QWORD *)(v41 + 8 * v49);
    ++v46;
    if (!v50)
    {
      v46 = v49 + 1;
      if (v49 + 1 >= v45)
        goto LABEL_47;
      v50 = *(_QWORD *)(v41 + 8 * v46);
      if (!v50)
      {
        v46 = v49 + 2;
        if (v49 + 2 >= v45)
          goto LABEL_47;
        v50 = *(_QWORD *)(v41 + 8 * v46);
        if (!v50)
        {
          v46 = v49 + 3;
          if (v49 + 3 >= v45)
            goto LABEL_47;
          v50 = *(_QWORD *)(v41 + 8 * v46);
          if (!v50)
          {
            v46 = v49 + 4;
            if (v49 + 4 >= v45)
              goto LABEL_47;
            v50 = *(_QWORD *)(v41 + 8 * v46);
            if (!v50)
              break;
          }
        }
      }
    }
LABEL_37:
    v44 = (v50 - 1) & v50;
    v48 = __clz(__rbit64(v50)) + (v46 << 6);
LABEL_38:
    v52 = *v14;
    if (*(_QWORD *)(*v14 + 16))
    {
      v53 = *(_QWORD *)(*(_QWORD *)(v40 + 48) + 8 * v48);
      result = sub_2215CA4BC(v53);
      if ((v54 & 1) != 0)
      {
        v55 = *(_QWORD *)(v52 + 56) + 192 * result;
        v57 = *(_OWORD *)(v55 + 32);
        v56 = *(_OWORD *)(v55 + 48);
        v58 = *(_OWORD *)(v55 + 16);
        v117[0] = *(_OWORD *)v55;
        v117[1] = v58;
        v117[2] = v57;
        v117[3] = v56;
        v59 = *(_OWORD *)(v55 + 64);
        v60 = *(_OWORD *)(v55 + 80);
        v61 = *(_OWORD *)(v55 + 112);
        v117[6] = *(_OWORD *)(v55 + 96);
        v117[7] = v61;
        v117[4] = v59;
        v117[5] = v60;
        v62 = *(_OWORD *)(v55 + 128);
        v63 = *(_OWORD *)(v55 + 144);
        v64 = *(_OWORD *)(v55 + 160);
        v119 = *(_QWORD *)(v55 + 176);
        v118 = v64;
        v117[9] = v63;
        v117[8] = v62;
        sub_2215D205C((uint64_t)v117);
        sub_221652F4C();
        if (v65 - *((double *)&v118 + 1) <= 0.25)
        {
          result = sub_2215FF380((uint64_t)v117);
        }
        else
        {
          swift_beginAccess();
          v66 = sub_2215CA4BC(v53);
          if ((v67 & 1) != 0)
          {
            v68 = v66;
            v69 = swift_isUniquelyReferenced_nonNull_native();
            v70 = *v14;
            v113 = *v14;
            *v14 = 0x8000000000000000;
            if ((v69 & 1) == 0)
            {
              sub_2215CFF94();
              v70 = v113;
            }
            v71 = *(_QWORD *)(v70 + 56) + 192 * v68;
            v72 = *(_OWORD *)(v71 + 144);
            v109 = *(_OWORD *)(v71 + 128);
            v110 = v72;
            v111 = *(_OWORD *)(v71 + 160);
            v112 = *(_QWORD *)(v71 + 176);
            v73 = *(_OWORD *)(v71 + 80);
            v105 = *(_OWORD *)(v71 + 64);
            v106 = v73;
            v74 = *(_OWORD *)(v71 + 112);
            v107 = *(_OWORD *)(v71 + 96);
            v108 = v74;
            v75 = *(_OWORD *)(v71 + 16);
            v101 = *(_OWORD *)v71;
            v102 = v75;
            v76 = *(_OWORD *)(v71 + 48);
            v103 = *(_OWORD *)(v71 + 32);
            v104 = v76;
            sub_2215D1184(v68, v70);
            *v14 = v70;
            swift_bridgeObjectRelease();
            v114[8] = v109;
            v114[9] = v110;
            v114[10] = v111;
            v115 = v112;
            v114[4] = v105;
            v114[5] = v106;
            v114[6] = v107;
            v114[7] = v108;
            v114[0] = v101;
            v114[1] = v102;
            v114[2] = v103;
            v114[3] = v104;
            nullsub_1(v114);
          }
          else
          {
            sub_2215FF438((uint64_t)v114);
          }
          sub_2215C6540((uint64_t)v114, (uint64_t)v116, &qword_2556DC4E8);
          swift_endAccess();
          sub_2215FF380((uint64_t)v117);
          result = (uint64_t)sub_2215FF45C(v116);
        }
      }
    }
  }
  v51 = v49 + 5;
  if (v51 < v45)
  {
    v50 = *(_QWORD *)(v41 + 8 * v51);
    if (!v50)
    {
      while (1)
      {
        v46 = v51 + 1;
        if (__OFADD__(v51, 1))
          goto LABEL_53;
        if (v46 >= v45)
          goto LABEL_47;
        v50 = *(_QWORD *)(v41 + 8 * v46);
        ++v51;
        if (v50)
          goto LABEL_37;
      }
    }
    v46 = v51;
    goto LABEL_37;
  }
LABEL_47:
  swift_release();
  swift_release();
  if (v28 >= 3)
  {
    v77 = (uint64_t *)v125;
  }
  else
  {
    sub_2215EC290((uint64_t)v127, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
    sub_2215EC200((uint64_t)v116);
    v77 = v116;
  }
  sub_2215C6540((uint64_t)v77, (uint64_t)v117, &qword_2556DB668);
  a3 = v85;
  return sub_2215C6540((uint64_t)v117, a3, &qword_2556DB668);
}

uint64_t sub_2215F69B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  _BYTE *v23;
  uint64_t result;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float32x4_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x4_t v35;
  float v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  float v50;
  _BYTE v51[176];
  _BYTE v52[176];
  _BYTE v53[176];
  _BYTE v54[176];
  _BYTE v55[176];
  _BYTE v56[176];
  _BYTE v57[176];
  _BYTE v58[176];
  _OWORD v59[2];
  char v60;
  __int128 v61;
  __int128 v62;
  float32x4_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  _BYTE v70[176];
  _OWORD v71[4];
  __int128 v72;
  float32x4_t v73;
  uint64_t v74;
  float v75;
  float v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  float32x4_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _BYTE v89[176];
  _BYTE v90[176];
  _BYTE v91[176];
  _BYTE v92[176];

  sub_2215C6540(a2, (uint64_t)v89, &qword_2556DB668);
  sub_2215C6540((uint64_t)v89, (uint64_t)v92, &qword_2556DB668);
  sub_2215F61A8(*(double *)(a1 + 56), *(double *)(a1 + 64));
  v8 = v7;
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 544);
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_5;
  v10 = sub_2215CA4BC(v8);
  if ((v11 & 1) == 0)
    goto LABEL_5;
  v12 = *(_QWORD *)(v9 + 56) + 192 * v10;
  v14 = *(_OWORD *)(v12 + 32);
  v13 = *(_OWORD *)(v12 + 48);
  v15 = *(_OWORD *)(v12 + 16);
  v77 = *(_OWORD *)v12;
  v78 = v15;
  v79 = v14;
  v80 = v13;
  v16 = *(_OWORD *)(v12 + 64);
  v17 = *(float32x4_t *)(v12 + 80);
  v18 = *(_OWORD *)(v12 + 96);
  v84 = *(_OWORD *)(v12 + 112);
  v83 = v18;
  v82 = v17;
  v81 = v16;
  v19 = *(_OWORD *)(v12 + 128);
  v20 = *(_OWORD *)(v12 + 144);
  v21 = *(_OWORD *)(v12 + 160);
  v88 = *(_QWORD *)(v12 + 176);
  v87 = v21;
  v86 = v20;
  v85 = v19;
  sub_2215D205C((uint64_t)&v77);
  sub_221652F4C();
  if (v22 - *((double *)&v87 + 1) > 0.25)
  {
    sub_2215FF380((uint64_t)&v77);
LABEL_5:
    sub_2215EC290(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC258);
    v23 = v92;
LABEL_6:
    sub_2215C6540((uint64_t)v23, (uint64_t)v91, &qword_2556DB668);
    return sub_2215C6540((uint64_t)v91, a3, &qword_2556DB668);
  }
  sub_2215C6540(a2, (uint64_t)v71, &qword_2556DB668);
  v25 = v78;
  v26 = v79;
  v41 = v80;
  v43 = v77;
  v27 = v83;
  v39 = v84;
  v40 = v81;
  v38 = v85;
  v28 = v86;
  v45 = v82;
  v47 = *((_QWORD *)&v86 + 1);
  v29 = *(float *)&v87;
  sub_2215D205C((uint64_t)&v77);
  sub_2215D205C((uint64_t)&v77);
  sub_2215EC290(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC258);
  swift_release();
  swift_release();
  sub_2215C6540(a2, (uint64_t)v90, &qword_2556DB668);
  if (sub_2215EC220((uint64_t)v90) == 1)
  {
    v59[0] = v43;
    v59[1] = v25;
    v60 = v26;
    v61 = v41;
    v62 = v40;
    v63 = v45;
    v64 = v27;
    v65 = v39;
    v66 = v38;
    v67 = v28;
    v68 = v47;
    v69 = v29;
    nullsub_1(v59);
    sub_2215C6540((uint64_t)v59, (uint64_t)v71, &qword_2556DB668);
    v30 = *(float32x4_t *)(a1 + 96);
    v31 = *(float *)&v47;
    v32 = vmuls_lane_f32(*(float *)&v47, v30, 2);
    v46 = v30;
    v48 = *(_OWORD *)(a1 + 80);
    *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)&v48, vmul_n_f32(*(float32x2_t *)v30.f32, v31));
    v30.i64[1] = COERCE_UNSIGNED_INT(*((float *)&v48 + 2) + v32);
    v71[0] = v30;
    sub_2215C6540((uint64_t)v71, (uint64_t)v70, &qword_2556DB668);
    sub_2215C6540((uint64_t)v70, (uint64_t)v91, &qword_2556DB668);
    result = sub_2215EC220((uint64_t)v91);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v76 = -fabsf(v29);
      sub_2215C6540((uint64_t)v71, (uint64_t)v57, &qword_2556DB668);
      sub_2215C6540((uint64_t)v57, (uint64_t)v58, &qword_2556DB668);
      result = sub_2215EC220((uint64_t)v58);
      if ((_DWORD)result != 1)
      {
        sub_2215D205C((uint64_t)&v77);
        swift_retain();
        swift_release();
        v74 = a1;
        sub_2215C6540((uint64_t)v71, (uint64_t)v55, &qword_2556DB668);
        sub_2215C6540((uint64_t)v55, (uint64_t)v56, &qword_2556DB668);
        result = sub_2215EC220((uint64_t)v56);
        if ((_DWORD)result != 1)
        {
          v72 = v48;
          v73 = v46;
          sub_2215C6540((uint64_t)v71, (uint64_t)v53, &qword_2556DB668);
          sub_2215C6540((uint64_t)v53, (uint64_t)v54, &qword_2556DB668);
          result = sub_2215EC220((uint64_t)v54);
          if ((_DWORD)result != 1)
          {
            v49 = v71[0];
            sub_2215C6540((uint64_t)v71, (uint64_t)v51, &qword_2556DB668);
            sub_2215C6540((uint64_t)v51, (uint64_t)v52, &qword_2556DB668);
            result = sub_2215EC220((uint64_t)v52);
            if ((_DWORD)result != 1)
            {
              sub_2215FF380((uint64_t)&v77);
              sub_2215FF380((uint64_t)&v77);
              v71[3] = v49;
LABEL_22:
              sub_2215C6540((uint64_t)v71, (uint64_t)v70, &qword_2556DB668);
              v23 = v70;
              goto LABEL_6;
            }
            goto LABEL_27;
          }
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  v42 = v72;
  v44 = v73;
  v33 = v75;
  swift_retain();
  swift_retain();
  if (fabsf((float)(v33 / *(float *)&v47) + -1.0) <= 0.5)
  {
    v35 = vmulq_f32(v45, v44);
    v36 = fabsf(acosf(fminf(v35.f32[2] + vaddv_f32(*(float32x2_t *)v35.f32), 1.0))) / 0.17453;
    if (v36 >= 1.0)
      v34 = 1.0;
    else
      v34 = (float)(v36 * 0.5) + 0.5;
  }
  else
  {
    v34 = 0.1;
  }
  sub_2215C6540((uint64_t)v71, (uint64_t)v70, &qword_2556DB668);
  sub_2215C6540((uint64_t)v70, (uint64_t)v91, &qword_2556DB668);
  result = sub_2215EC220((uint64_t)v91);
  if ((_DWORD)result == 1)
    goto LABEL_28;
  v50 = *(float *)&v47 + (float)((float)(v33 - *(float *)&v47) * v34);
  *(float32x2_t *)&v37 = vadd_f32(*(float32x2_t *)&v42, vmul_n_f32(*(float32x2_t *)v44.f32, v50));
  *((_QWORD *)&v37 + 1) = COERCE_UNSIGNED_INT(*((float *)&v42 + 2) + vmuls_lane_f32(v50, v44, 2));
  v71[0] = v37;
  sub_2215C6540((uint64_t)v71, (uint64_t)v58, &qword_2556DB668);
  sub_2215C6540((uint64_t)v58, (uint64_t)v59, &qword_2556DB668);
  result = sub_2215EC220((uint64_t)v59);
  if ((_DWORD)result != 1)
  {
    sub_2215FF380((uint64_t)&v77);
    swift_release();
    swift_release();
    sub_2215FF380((uint64_t)&v77);
    v75 = v50;
    goto LABEL_22;
  }
LABEL_29:
  __break(1u);
  return result;
}

BOOL sub_2215F6F78(void *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  id v16;
  float32x4_t v17;
  void *v18;
  float32x4_t v20;
  float32x4_t v21;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 592);
  if (v3 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v4 = sub_2216539F0();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v5 = 4;
      while (1)
      {
        v11 = v5 - 4;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v12 = MEMORY[0x22766ED44](v5 - 4, v3);
          v13 = __OFADD__(v11, 1);
          v14 = v5 - 3;
          if (v13)
            goto LABEL_17;
        }
        else
        {
          v12 = *(_QWORD *)(v3 + 8 * v5);
          swift_retain();
          v13 = __OFADD__(v11, 1);
          v14 = v5 - 3;
          if (v13)
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        objc_msgSend(a1, sel_timestamp, *(_OWORD *)&v20);
        if (v15 - *(double *)(v12 + 80) <= 0.0166666667)
        {
          swift_release();
          v9 = 0;
          goto LABEL_20;
        }
        v16 = objc_msgSend(a1, sel_camera);
        objc_msgSend(v16, sel_transform);
        v21 = v17;

        v18 = *(void **)(v12 + 88);
        if (!v18)
          v18 = *(void **)(v12 + 24);
        objc_msgSend(v18, sel_transform);
        v20 = v6;
        swift_release();
        v7 = vsubq_f32(v21, v20);
        v8 = vmulq_f32(v7, v7);
        v8.f32[0] = v8.f32[2] + vaddv_f32(*(float32x2_t *)v8.f32);
        v9 = v8.f32[0] > 0.0001;
        ++v5;
        if (v8.f32[0] <= 0.0001 || v14 == v4)
          goto LABEL_20;
      }
    }
  }
  v9 = 1;
LABEL_20:
  swift_bridgeObjectRelease();
  return v9;
}

void sub_2215F7134(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  double v5;
  float64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  float64_t v17;
  float64_t v18;
  id v19;

  v2 = v1;
  swift_retain();
  sub_221653018();
  swift_release();
  if (!v19)
    goto LABEL_33;
  objc_msgSend(v19, sel_userAcceleration);
  v18 = v4;
  objc_msgSend(v19, sel_userAcceleration);
  v17 = v5;
  objc_msgSend(v19, sel_userAcceleration);
  v16 = v6;

  v7.f64[0] = v18;
  v7.f64[1] = v17;
  *(float *)v7.f64 = sqrt(vmulq_f64(v16, v16).f64[0] + vaddvq_f64(vmulq_f64(v7, v7)));
  if (*(float *)v7.f64 <= 0.1)
  {
LABEL_33:
    if (sub_2215F6F78(a1))
    {
      v8 = sub_2215F77B8(a1, 0, 0, 1);
      if (v8)
      {
        *(_QWORD *)(v1 + 600) = v8;
        swift_retain();
        swift_release();
        v9 = (uint64_t *)(v1 + 592);
        swift_beginAccess();
        v10 = swift_retain();
        MEMORY[0x22766E798](v10);
        if (*(_QWORD *)((*(_QWORD *)(v2 + 592) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v2 + 592) & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
          sub_22165336C();
        sub_2216533A8();
        sub_22165333C();
        swift_endAccess();
        if ((unint64_t)*v9 >> 62)
        {
          swift_bridgeObjectRetain();
          v12 = sub_2216539F0();
          swift_bridgeObjectRelease();
          if (v12 < 21)
            goto LABEL_19;
        }
        else if (*(uint64_t *)((*v9 & 0xFFFFFFFFFFFFF8) + 0x10) < 21)
        {
LABEL_19:
          swift_release();
          return;
        }
        swift_beginAccess();
        v11 = *v9;
        if ((unint64_t)*v9 >> 62)
        {
          swift_bridgeObjectRetain();
          v13 = sub_2216539F0();
          swift_bridgeObjectRelease();
          if (v13)
          {
LABEL_11:
            v11 = *v9;
            if (!((unint64_t)*v9 >> 62))
            {
              if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_13;
              goto LABEL_26;
            }
LABEL_25:
            swift_bridgeObjectRetain();
            v14 = sub_2216539F0();
            swift_bridgeObjectRelease();
            if (v14)
            {
LABEL_13:
              if ((v11 & 0xC000000000000001) == 0)
              {
                if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_29;
                }
                swift_retain();
LABEL_16:
                if (!((unint64_t)*v9 >> 62))
                {
                  if (*(_QWORD *)((*v9 & 0xFFFFFFFFFFFFF8) + 0x10))
                  {
LABEL_18:
                    sub_2215C1540(0, 1);
                    swift_endAccess();
                    swift_release();
                    goto LABEL_19;
                  }
LABEL_30:
                  __break(1u);
                  return;
                }
LABEL_29:
                swift_bridgeObjectRetain();
                v15 = sub_2216539F0();
                swift_bridgeObjectRelease();
                if (v15)
                  goto LABEL_18;
                goto LABEL_30;
              }
LABEL_27:
              MEMORY[0x22766ED44](0, v11);
              goto LABEL_16;
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        else if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_11;
        }
        __break(1u);
        goto LABEL_25;
      }
    }
  }
}

uint64_t sub_2215F7444@<X0>(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  CGRect *v4;
  CGPoint v9;
  CGPoint v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat y;
  CGFloat height;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t result;
  __CVBuffer *v37;
  vImagePixelCount v38;
  vImagePixelCount v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  size_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  double v54;
  double v55;
  CGFloat v56;
  CGFloat width;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat x;
  CGFloat rect2;
  void *rect2a;
  double v66;
  CGAffineTransform v67;
  CGAffineTransform v68;
  CGAffineTransform v69;
  _BYTE v70[40];
  _QWORD v71[4];
  char v72;
  _BYTE v73[40];
  _QWORD v74[4];
  char v75;
  CGPoint v76;
  CGPoint v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;

  sub_2215F4780(&v68.a);
  v69 = v68;
  v76.x = a3;
  v76.y = a4;
  v9 = CGPointApplyAffineTransform(v76, &v69);
  sub_2215F4A68(&v69.a);
  v67 = v69;
  v77.x = a3;
  v77.y = a4;
  v10 = CGPointApplyAffineTransform(v77, &v67);
  v11 = sub_2215F4284();
  v13 = v12;
  v14 = round(v10.x) + v11 * -0.5;
  v15 = round(v10.y) + v12 * -0.5;
  v66 = round(v9.x - sub_2215F4258());
  v17 = round(v9.y - v16);
  v18 = sub_2215F422C();
  v20 = v19;
  v78.origin.x = v14;
  v78.origin.y = v15;
  v78.size.width = v11;
  v78.size.height = v13;
  v21 = CGRectGetWidth(v78) * -0.5;
  v79.origin.x = v14;
  v79.origin.y = v15;
  v79.size.width = v11;
  v79.size.height = v13;
  v22 = CGRectGetHeight(v79) * -0.5;
  v58 = v15;
  v59 = v14;
  v80.origin.x = v14;
  v80.origin.y = v15;
  v60 = v11;
  v61 = v13;
  v80.size.width = v11;
  v80.size.height = v13;
  v81 = CGRectInset(v80, v21, v22);
  x = v81.origin.x;
  rect2 = v81.size.width;
  y = v81.origin.y;
  height = v81.size.height;
  v81.origin.x = v66;
  v81.origin.y = v17;
  v81.size.width = v18;
  v81.size.height = v20;
  v25 = CGRectGetWidth(v81) * -0.5;
  v82.origin.x = v66;
  v82.origin.y = v17;
  v82.size.width = v18;
  v82.size.height = v20;
  v26 = CGRectGetHeight(v82) * -0.5;
  v83.origin.x = v66;
  v62 = v17;
  v83.origin.y = v17;
  v54 = v20;
  v55 = v18;
  v83.size.width = v18;
  v83.size.height = v20;
  v84 = CGRectInset(v83, v25, v26);
  v27 = v84.origin.x;
  v56 = v84.origin.y;
  width = v84.size.width;
  v28 = v84.size.height;
  v85.origin.x = sub_2215F3D98();
  v86.origin.x = x;
  v86.origin.y = y;
  v86.size.width = rect2;
  v29 = rect2;
  v30 = height;
  v86.size.height = height;
  if (CGRectContainsRect(v85, v86))
  {
    v31 = v27;
    v32 = v28;
    v66 = v31;
    v62 = v56;
    v33 = x;
    v34 = y;
    v35 = width;
  }
  else
  {
    v34 = v58;
    v33 = v59;
    v87.origin.x = v59;
    v87.origin.y = v58;
    v87.size.width = v60;
    v87.size.height = v61;
    result = CGRectContainsRect(v4[3], v87);
    if (!(_DWORD)result)
    {
LABEL_7:
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 1;
      goto LABEL_8;
    }
    v32 = v54;
    v35 = v55;
    v29 = v60;
    v30 = v61;
  }
  v37 = (__CVBuffer *)objc_msgSend(a1, sel_capturedImage);
  v67.a = v33;
  v67.b = v34;
  v67.c = v29;
  v67.d = v30;
  LOBYTE(v67.tx) = 0;
  sub_221630A78(v37, 0, (uint64_t)&v67, (uint64_t)v70);

  result = sub_2215C6540((uint64_t)v70, (uint64_t)v74, &qword_2556D9F40);
  if ((v75 & 1) != 0)
    goto LABEL_7;
  v38 = v74[1];
  rect2a = (void *)v74[0];
  v39 = v74[2];
  v40 = v74[3];
  sub_2215F4020();
  v41 = sub_2215F3884();
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release();
  v48 = (void *)sub_2215F3E84();
  sub_221630E94(rect2a, v38, v39, v40, v41, v43, v45, v47, (uint64_t)v71, v66, v62, v35, v32, 8uLL, v48);
  v49 = v71[0];
  v50 = v71[1];
  v51 = v71[2];
  v52 = v71[3];
  v53 = v72;
  result = sub_2215C6540((uint64_t)v71, (uint64_t)v73, &qword_2556D9F40);
  if ((v73[32] & 1) != 0)
    goto LABEL_7;
LABEL_8:
  *(_QWORD *)a2 = v49;
  *(_QWORD *)(a2 + 8) = v50;
  *(_QWORD *)(a2 + 16) = v51;
  *(_QWORD *)(a2 + 24) = v52;
  *(_BYTE *)(a2 + 32) = v53;
  return result;
}

uint64_t sub_2215F77B8(id a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __CVBuffer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  vImagePixelCount v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  double v36;
  double v37;
  void *v39;
  _BYTE v40[40];
  _QWORD v41[5];
  _BYTE v42[40];
  _QWORD v43[4];
  char v44;
  _QWORD v45[4];
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v5 = v4;
  if ((a4 & 1) != 0)
  {
    v8 = (__CVBuffer *)objc_msgSend(a1, sel_capturedImage);
    v47 = sub_2215F3D98();
    v48 = v9;
    v49 = v10;
    v50 = v11;
    v51 = 0;
    sub_221630A78(v8, 0, (uint64_t)&v47, (uint64_t)v40);

    sub_2215C6540((uint64_t)v40, (uint64_t)v43, &qword_2556D9F40);
    v7 = 0;
    if ((v44 & 1) != 0)
      return v7;
    v12 = v43[1];
    v39 = (void *)v43[0];
    v13 = v43[2];
    v14 = v43[3];
    sub_2215F4020();
    v15 = sub_2215F3884();
    v17 = v16;
    v19 = v18;
    v21 = v20;
    swift_release();
    v45[0] = v15;
    v45[1] = v17;
    v45[2] = v19;
    v45[3] = v21;
    v46 = 0;
    v22 = sub_2215F3A90();
    v23 = (void *)sub_2215F3E84();
    sub_221631194(v39, v12, v13, v14, (uint64_t)v45, 0, v23, (uint64_t)v41, v22);
    v24 = v41[0];
    v25 = v41[1];
    v26 = v41[2];
    v27 = v41[3];
    sub_2215C6540((uint64_t)v41, (uint64_t)v42, &qword_2556D9F40);
    v7 = 0;
    if ((v42[32] & 1) != 0)
      return v7;
  }
  else
  {
    sub_2215F7444(a1, (uint64_t)v45, *(CGFloat *)&a2, *(CGFloat *)&a3);
    sub_2215C6540((uint64_t)v45, (uint64_t)&v47, &qword_2556D9F40);
    if ((v51 & 1) != 0)
      return 0;
    v24 = *(_QWORD *)&v47;
    v25 = v48;
    v26 = v49;
    v27 = v50;
  }
  v28 = objc_msgSend(a1, sel_camera, v39);
  v29 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v30 = objc_msgSend(v29, sel_orientation);

  objc_msgSend(v28, sel_eulerAngles);
  v32 = v31;
  switch((unint64_t)v30)
  {
    case 1uLL:
    case 5uLL:
      v33 = 1.5708;
      goto LABEL_12;
    case 2uLL:
      v33 = -1.5708;
      goto LABEL_12;
    case 3uLL:
      v33 = 3.1416;
LABEL_12:
      v32 = v31 + v33;
      break;
    default:
      break;
  }
  v34 = *(_QWORD *)(v5 + 624);
  v35 = v32 * 57.296;
  swift_retain();
  objc_msgSend(a1, sel_timestamp);
  v37 = v36;
  type metadata accessor for PatchTracker.Keyframe();
  v7 = swift_allocObject();
  PatchTracker.Keyframe.init(_:camera:scaledImage:orientation:gravityOffsetAngle:timestamp:anchor:)(v5, v28, v24, v25, v26, v27, v34, 0, v35, v37);
  return v7;
}

uint64_t PatchTracker.Keyframe.__allocating_init(_:camera:scaledImage:orientation:gravityOffsetAngle:timestamp:anchor:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, float a9, double a10)
{
  uint64_t v20;

  v20 = swift_allocObject();
  PatchTracker.Keyframe.init(_:camera:scaledImage:orientation:gravityOffsetAngle:timestamp:anchor:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return v20;
}

uint64_t sub_2215F7B48(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  uint64_t v5;
  CGPoint v10;
  double v11;
  double v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int64_t v19;
  int64_t v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;
  CGAffineTransform v42;
  _BYTE v43[40];
  uint64_t v44[4];
  char v45;
  CGAffineTransform v46;
  _OWORD v47[2];
  char v48;
  _OWORD v49[2];
  char v50;
  _QWORD v51[4];
  char v52;
  CGPoint v53;
  CGRect v54;
  CGRect v55;

  v5 = v4;
  sub_2215F4780(&v42.a);
  v46 = v42;
  v53.x = a3;
  v53.y = a4;
  v10 = CGPointApplyAffineTransform(v53, &v46);
  v11 = v10.x - sub_2215F4258();
  v12 = v10.y - *(double *)(v4 + 288);
  v54.origin.x = sub_2215F3E34();
  v55.size.width = 11.0;
  v55.size.height = 11.0;
  v55.origin.x = v11;
  v55.origin.y = v12;
  if (CGRectContainsRect(v54, v55))
  {
    v13 = *(void **)(v4 + 800);
    v14 = *(_QWORD *)(v4 + 808);
    type metadata accessor for PatchTracker.Patch();
    swift_allocObject();
    swift_retain();
    v15 = v13;
    v16 = sub_2215FF100(a1, (uint64_t)v15, v14, 0, v11, v12, 11.0, 11.0, a3, a4, 0.0);
    swift_release();

    sub_2216314B4(*(_QWORD *)(*(_QWORD *)(v16 + 128) + 32), *(_QWORD *)(*(_QWORD *)(v16 + 128) + 56), 1, *(CGFloat *)(v16 + 24), *(CGFloat *)(v16 + 32), *(CGFloat *)(v16 + 40), *(CGFloat *)(v16 + 48));
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v24 = v23;
    v51[0] = sub_2215F4360();
    v51[1] = v25;
    v51[2] = v26;
    v51[3] = v27;
    v52 = 0;
    v28 = sub_2215F45F8();
    sub_2215C59F8(v18, v20, v22, v24, (uint64_t)v51, v28, 8uLL, (uint64_t)v43);
    sub_2215C6540((uint64_t)v43, (uint64_t)v44, &qword_2556D9F40);
    if ((v45 & 1) == 0)
    {
      memset(v47, 0, sizeof(v47));
      v48 = 1;
      memset(v49, 0, sizeof(v49));
      v50 = 1;
      sub_2215C5CB0(v44[0], v44[1], v44[2], (uint64_t)v47, (uint64_t)v49, (uint64_t)v49);
      if (v29 < 4.0)
      {
        swift_beginAccess();
        v30 = *(_QWORD *)(v5 + 824);
        sub_2215C6540(a2, (uint64_t)&v46, &qword_2556DBBD8);
        if (sub_2215FF094((uint64_t)&v46) == 1 || (LOBYTE(v46.a) & 1) != 0 || (v30 & 4) == 0)
        {
          swift_release();
          return 0;
        }
        swift_beginAccess();
        sub_2215FF0B8(v5 + 832, (uint64_t)v40);
        if (v41)
        {
          sub_2215E70EC((uint64_t)v40, (uint64_t)v37);
          sub_2215FDE00((uint64_t)v40);
          v34 = v38;
          v35 = v39;
          __swift_project_boxed_opaque_existential_0(v37, v38);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40))(v16, v34, v35);
          swift_release();
          goto LABEL_13;
        }
        swift_release();
        goto LABEL_17;
      }
    }
  }
  else
  {
    swift_beginAccess();
    v31 = *(_QWORD *)(v4 + 824);
    sub_2215C6540(a2, (uint64_t)&v46, &qword_2556DBBD8);
    v16 = 0;
    if (sub_2215FF094((uint64_t)&v46) != 1)
    {
      v16 = 0;
      if ((LOBYTE(v46.a) & 1) == 0 && (v31 & 4) != 0)
      {
        swift_beginAccess();
        sub_2215FF0B8(v5 + 832, (uint64_t)v40);
        if (v41)
        {
          sub_2215E70EC((uint64_t)v40, (uint64_t)v37);
          sub_2215FDE00((uint64_t)v40);
          v32 = v38;
          v33 = v39;
          __swift_project_boxed_opaque_existential_0(v37, v38);
          (*(void (**)(uint64_t, uint64_t))(v33 + 32))(v32, v33);
LABEL_13:
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
          return 0;
        }
LABEL_17:
        sub_2215FDE00((uint64_t)v40);
        return 0;
      }
    }
  }
  return v16;
}

void *PatchTracker.DebugOptions.drawPatches.unsafeMutableAddressor()
{
  return &static PatchTracker.DebugOptions.drawPatches;
}

uint64_t PatchTracker.Patch.__allocating_init(imageRect:keyframe:sceneView:screenPoint:matchingScore:matchingSimilarities:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  uint64_t v22;

  swift_allocObject();
  v22 = sub_2215FF100(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();

  return v22;
}

uint64_t sub_2215F7FB0@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CGAffineTransform *v3;
  CGAffineTransform *v4;
  uint64_t v8;
  unint64_t p_b;
  CGFloat b;
  uint64_t v11;
  uint64_t *p_c;
  CGFloat c;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::Bool v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  CGFloat v50;
  CGFloat v51;
  CGPoint v52;
  CGFloat tx;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  CGAffineTransform *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(unint64_t, uint64_t, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t *p_ty;
  uint64_t *v85;
  uint64_t v86;
  double *v87;
  CGAffineTransform *v88;
  _QWORD v89[3];
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[24];
  uint64_t v93;
  _BYTE v94[176];
  _BYTE v95[176];
  uint64_t v96;
  unint64_t v97;
  _BYTE v98[72];
  _BYTE v99[40];
  _BYTE v100[40];
  _BYTE v101[40];
  CGAffineTransform v102;
  _BYTE v103[176];
  _BYTE v104[144];
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  char v109;
  _QWORD v110[8];
  char v111;
  _BYTE v112[144];
  CGAffineTransform v113;
  _BYTE v114[40];
  _QWORD v115[4];
  char v116;
  CGPoint v117;

  v4 = v3;
  v97 = MEMORY[0x24BEE4AF8];
  v8 = swift_retain();
  MEMORY[0x22766E798](v8);
  if (*(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_50:
    sub_22165336C();
  sub_2216533A8();
  sub_22165333C();
  p_b = (unint64_t)&v4[17].b;
  swift_beginAccess();
  b = v4[17].b;
  sub_2215C6540(a2, (uint64_t)v112, &qword_2556DBBD8);
  if (sub_2215FF094((uint64_t)v112) == 1 || (v112[0] & 1) != 0 || (LOBYTE(b) & 4) == 0)
    v11 = 0;
  else
    v11 = MEMORY[0x24BEE4AF8];
  v96 = v11;
  p_c = (uint64_t *)&v4[12].c;
  swift_beginAccess();
  c = v4[12].c;
  if (*(_QWORD *)&c >> 62)
  {
    swift_bridgeObjectRetain();
    v68 = sub_2216539F0();
    swift_bridgeObjectRelease();
    v15 = v68 - 1;
    if (!__OFSUB__(v68, 1))
      goto LABEL_9;
LABEL_53:
    __break(1u);
LABEL_54:
    swift_bridgeObjectRetain();
    v69 = sub_2216539F0();
    swift_bridgeObjectRelease();
    if (v69 < 5)
      goto LABEL_48;
    goto LABEL_55;
  }
  v14 = *(_QWORD *)((*(_QWORD *)&c & 0xFFFFFFFFFFFFF8) + 0x10);
  v15 = v14 - 1;
  if (__OFSUB__(v14, 1))
    goto LABEL_53;
LABEL_9:
  v85 = (uint64_t *)&v4[17].b;
  v86 = a2;
  v87 = (double *)a3;
  v88 = v4;
  a3 = 0;
  a2 = 0;
  p_ty = (uint64_t *)&v4[12].ty;
  while (1)
  {
    v16 = v15;
    if (v15 > 0)
    {
      if (a3 > 2)
        break;
      --v15;
      goto LABEL_17;
    }
    if ((v15 != 0) | a2 & 1 || a3 > 2)
      break;
    v15 = 0;
    a2 = 1;
LABEL_17:
    v17 = *p_c;
    if ((*p_c & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v18 = MEMORY[0x22766ED44](v16, v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v16 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_50;
      }
      v18 = *(_QWORD *)(v17 + 8 * v16 + 32);
      swift_retain();
    }
    v19 = *((_QWORD *)a1 + 16);
    if (*(double *)(v18 + 80) == *(double *)(v19 + 80)
      || (v20 = *(id *)(v19 + 24),
          v21 = PatchTracker.Keyframe.isCameraAligned(with:)((ARCamera)v20),
          v20,
          v4 = &v102,
          v21))
    {
      swift_release();
    }
    else
    {
      PatchTracker.Keyframe.getEpipolarLine(patch:)((uint64_t)a1, (uint64_t)v98);
      sub_2215C6540((uint64_t)v98, (uint64_t)v110, &qword_2556DC4B8);
      if ((v111 & 1) != 0)
        goto LABEL_42;
      v22 = *(double *)v110;
      v23 = *(double *)&v110[1];
      v24 = *(double *)&v110[2];
      v25 = *(double *)&v110[3];
      v26 = sub_2215F4258();
      v27 = v22 - v26;
      v29 = v23 - v28;
      v30 = v24 - v26;
      v31 = v25 - v28;
      v82 = *(_QWORD *)(v18 + 32);
      v79 = *(_QWORD *)(v18 + 48);
      v80 = *(_QWORD *)(v18 + 40);
      sub_2215FA118((uint64_t)v99);
      memset(v114, 0, 32);
      v114[32] = 1;
      v32 = a1[3];
      v33 = a1[4];
      v34 = a1[5];
      v35 = a1[6];
      v77 = *(_QWORD *)(v19 + 40);
      v78 = *(_QWORD *)(v19 + 32);
      v76 = *(_QWORD *)(v19 + 48);
      sub_2215FA118((uint64_t)v100);
      CGRect.ints.getter(v32, v33, v34, v35);
      v37 = v36;
      v39 = v38;
      v115[0] = v40;
      v115[1] = v41;
      v115[2] = v36;
      v115[3] = v38;
      v116 = 0;
      sub_2215FAD14();
      v43 = v42;
      v4 = (CGAffineTransform *)p_ty;
      swift_beginAccess();
      v103[0] = 0;
      sub_2215C5F3C(v82, v80, v79, (uint64_t)v99, (uint64_t)v114, v78, v77, v76, (uint64_t)v101, v27, v29, v30, v31, 0.8, (uint64_t)v100, (uint64_t)v115, v43, p_ty);
      swift_endAccess();
      sub_2215C6540((uint64_t)v101, (uint64_t)&v105, &qword_2556D9F50);
      if ((v109 & 1) != 0)
        goto LABEL_42;
      v44 = v107;
      v45 = v108;
      v46 = (double)v105;
      v47 = (double)v106;
      v48 = (double)v37;
      v49 = (double)v39;
      v50 = (double)v37 * 0.5 + (double)v105;
      v51 = (double)v39 * 0.5 + (double)v106;
      sub_2215F48FC(&v102.a);
      v113 = v102;
      v117.x = v50;
      v117.y = v51;
      v52 = CGPointApplyAffineTransform(v117, &v113);
      tx = v88[16].tx;
      v54 = *(_QWORD *)&v88[16].ty;
      type metadata accessor for PatchTracker.Patch();
      result = swift_allocObject();
      *(_QWORD *)(result + 136) = 0;
      *(_DWORD *)(result + 144) = 0;
      *(_BYTE *)(result + 148) = 1;
      v56 = qword_2556DBBB8;
      *(_QWORD *)(result + 16) = qword_2556DBBB8;
      v57 = __OFADD__(v56, 1);
      v58 = v56 + 1;
      if (v57)
      {
        __break(1u);
        return result;
      }
      v59 = result;
      qword_2556DBBB8 = v58;
      *(double *)(result + 24) = v46;
      *(double *)(result + 32) = v47;
      *(double *)(result + 40) = v48;
      *(double *)(result + 48) = v49;
      *(CGPoint *)(result + 56) = v52;
      *(_QWORD *)(result + 128) = v18;
      *(_DWORD *)(result + 120) = v44;
      *(_QWORD *)(result + 112) = v45;
      swift_retain();
      v4 = (CGAffineTransform *)*(id *)&tx;
      PatchTracker.Keyframe.getRay(screenPoint:sceneView:)(v52.x, v52.y, (uint64_t)v4, v54);
      v81 = v61;
      v83 = v60;

      *(_OWORD *)(v59 + 80) = v83;
      *(_OWORD *)(v59 + 96) = v81;
      if (!swift_weakLoadStrong())
        goto LABEL_37;
      v62 = *(float *)(v59 + 120);
      if (v62 < 0.8 || v62 > 0.99)
      {
        swift_release();
        goto LABEL_37;
      }
      v63 = *(_QWORD *)(v59 + 112);
      swift_release();
      if (v63 <= 3)
      {
        v64 = swift_retain();
        MEMORY[0x22766E798](v64);
        v4 = *(CGAffineTransform **)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if ((unint64_t)v4 >= *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_22165336C();
        sub_2216533A8();
        sub_22165333C();
        p_b = v97;
        if (v97 >> 62)
        {
          swift_bridgeObjectRetain();
          v65 = sub_2216539F0();
        }
        else
        {
          v65 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        a3 = 0;
        if (v65 >= 8)
          goto LABEL_46;
      }
      else
      {
LABEL_37:
        if (v96)
        {
          v66 = swift_retain();
          MEMORY[0x22766E798](v66);
          v4 = *(CGAffineTransform **)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if ((unint64_t)v4 >= *(_QWORD *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_22165336C();
          sub_2216533A8();
          sub_22165333C();
        }
        swift_release();
LABEL_42:
        swift_release();
        ++a3;
      }
    }
  }
  p_b = v97;
LABEL_46:
  sub_2215EC200((uint64_t)v95);
  a3 = v86;
  a1 = v87;
  if (p_b >> 62)
    goto LABEL_54;
  if (*(uint64_t *)((p_b & 0xFFFFFFFFFFFFF8) + 0x10) < 5)
  {
LABEL_48:
    v67 = (CGAffineTransform *)v95;
    goto LABEL_56;
  }
LABEL_55:
  v70 = swift_bridgeObjectRetain();
  sub_2215F8824(v70, a3, (uint64_t)v103);
  sub_2215C6540((uint64_t)v103, (uint64_t)&v113, &qword_2556DB668);
  swift_bridgeObjectRelease();
  v67 = &v113;
LABEL_56:
  sub_2215C6540((uint64_t)v67, (uint64_t)v94, &qword_2556DB668);
  sub_2215C6540((uint64_t)v94, (uint64_t)&v113, &qword_2556DB668);
  v71 = *v85;
  sub_2215C6540(a3, (uint64_t)v104, &qword_2556DBBD8);
  if (sub_2215FF094((uint64_t)v104) == 1 || (v104[0] & 1) != 0 || (v71 & 4) == 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_beginAccess();
    sub_2215FF0B8((uint64_t)&v88[17].c, (uint64_t)v92);
    if (v93)
    {
      sub_2215E70EC((uint64_t)v92, (uint64_t)v89);
      sub_2215FDE00((uint64_t)v92);
      v72 = v90;
      v73 = v91;
      __swift_project_boxed_opaque_existential_0(v89, v90);
      v74 = v96;
      v75 = *(void (**)(unint64_t, uint64_t, CGAffineTransform *, uint64_t, uint64_t))(v73 + 48);
      swift_bridgeObjectRetain();
      v75(p_b, v74, &v113, v72, v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v89);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_2215FDE00((uint64_t)v92);
    }
  }
  swift_bridgeObjectRelease();
  return sub_2215C6540((uint64_t)v94, (uint64_t)a1, &qword_2556DB668);
}

BOOL static PatchTracker.Keyframe.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 80) == *(double *)(a2 + 80);
}

uint64_t sub_2215F8824@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  float32x4_t *v45;
  int32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  __n128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[96];
  unint64_t v87[22];
  _BYTE v88[176];
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102[21];
  uint64_t v103;
  _BYTE v104[96];
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  float v117;
  float v118;
  _QWORD *v119;
  uint64_t v120[22];
  _BYTE v121[176];
  _BYTE v122[176];
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  int v148;
  float v149;
  float v150;
  _BYTE v151[176];

  v4 = v3;
  sub_2215EC200((uint64_t)v151);
  sub_2215C6540((uint64_t)v151, (uint64_t)v120, &qword_2556DB668);
  v119 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v8 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_67;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_68;
LABEL_3:
  v80 = a1 & 0xC000000000000001;
  v61 = a2;
  v62 = a3;
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_69;
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(_QWORD *)(a1 + 32);
    swift_retain();
    while (1)
    {
      result = swift_bridgeObjectRelease();
      if (v8)
      {
        swift_bridgeObjectRetain();
        v12 = sub_2216539F0();
        result = swift_bridgeObjectRelease();
      }
      else
      {
        v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v12 < 1)
        goto LABEL_71;
      v82 = v4;
      if (v12 == 1)
      {
        sub_2215C6540((uint64_t)v151, (uint64_t)&v105, &qword_2556DB668);
        v13 = MEMORY[0x24BEE4AF8];
LABEL_49:
        v103 = v13;
        sub_2215C6540((uint64_t)&v105, (uint64_t)v102, &qword_2556DB668);
        v44 = *(_QWORD *)(v13 + 16);
        swift_bridgeObjectRetain();
        sub_2215EC290((uint64_t)&v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC258);
        sub_2215F4714();
        swift_release();
        if (v44 < 4
          || (sub_2215F4714(),
              v45 = (float32x4_t *)swift_bridgeObjectRetain(),
              sub_2215EBBE0(v45, (uint64_t)v122, 0.5, v46),
              sub_2215C6540((uint64_t)v122, (uint64_t)v87, &qword_2556DB590),
              swift_release(),
              swift_bridgeObjectRelease(),
              sub_2215C6540((uint64_t)v122, (uint64_t)&v123, &qword_2556DB590),
              sub_2215EC220((uint64_t)&v123) == 1))
        {
          sub_2215C6540((uint64_t)&v105, (uint64_t)v104, &qword_2556DB668);
          v47 = v13;
        }
        else
        {
          v85 = v123;
          v48 = v124;
          v49 = v125;
          v50 = v126;
          v79 = v128;
          v81 = v127;
          v51 = v130;
          v75 = v131;
          v77 = v129;
          v73 = v132;
          v52 = v133;
          v53 = v135;
          v47 = v136;
          v54 = v134;
          sub_2215EC290((uint64_t)&v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
          swift_bridgeObjectRelease();
          sub_2215C6540((uint64_t)v87, (uint64_t)v86, &qword_2556DB590);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v103 = v47;
          v89 = v85;
          v90 = v48;
          v91 = v49;
          v4 = v82;
          v92 = v50;
          v93 = v81;
          v94 = v79;
          v95 = v77;
          v96 = v51;
          v97 = v75;
          v98 = v73;
          v99 = v52;
          v100 = v54;
          v101 = v53;
          nullsub_1(&v89);
          sub_2215C6540((uint64_t)&v89, (uint64_t)v102, &qword_2556DB668);
          sub_2215C6540((uint64_t)&v89, (uint64_t)v104, &qword_2556DB668);
        }
        if (*(_QWORD *)(v47 + 16) < 2uLL)
          goto LABEL_60;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2556DB3A0);
        v55 = swift_allocObject();
        *(_OWORD *)(v55 + 16) = xmmword_2216570D0;
        *(_QWORD *)(v55 + 32) = v11;
        v87[0] = v55;
        sub_22165333C();
        v56 = v87[0];
        v57 = *(_QWORD *)(v47 + 16);
        if (v57)
        {
          v87[0] = MEMORY[0x24BEE4AF8];
          swift_retain();
          swift_bridgeObjectRetain();
          sub_22165390C();
          v58 = 176;
          do
          {
            swift_retain();
            sub_2216538E8();
            sub_221653918();
            sub_221653924();
            sub_2216538F4();
            v58 += 176;
            --v57;
          }
          while (v57);
          v59 = v87[0];
          swift_bridgeObjectRelease();
          v4 = v82;
        }
        else
        {
          swift_retain();
          v59 = MEMORY[0x24BEE4AF8];
        }
        v87[0] = v56;
        sub_2215F9980(v59);
        sub_2215F9514(v87[0], (uint64_t)v86);
        sub_2215C6540((uint64_t)v86, (uint64_t)v88, &qword_2556DB668);
        swift_bridgeObjectRelease();
        sub_2215C6540((uint64_t)v86, (uint64_t)v87, &qword_2556DB668);
        if (sub_2215EC220((uint64_t)v87) == 1)
        {
LABEL_60:
          v60 = v104;
        }
        else
        {
          sub_2215EC290((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
          sub_2215C6540((uint64_t)v86, (uint64_t)v102, &qword_2556DB668);
          v60 = v88;
        }
        sub_2215C6540((uint64_t)v60, (uint64_t)&v89, &qword_2556DB668);
        sub_2215EC290((uint64_t)&v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC258);
        sub_2215F9260(v4, v61, (uint64_t *)&v119, &v103, v120, v102);
        swift_release();
        sub_2215EC290((uint64_t)&v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2215EC290((uint64_t)&v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
        return sub_2215C6540((uint64_t)&v89, v62, &qword_2556DB668);
      }
      if (!v80)
      {
        v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v14 < 2 || v12 - 1 >= v14)
          goto LABEL_72;
      }
      sub_2215C6540((uint64_t)v151, (uint64_t)&v123, &qword_2556DB668);
      a3 = 0;
      v78 = v12 - 2;
      v76 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = 0.0;
      v63 = a1;
      v64 = v11;
      if (v80)
      {
LABEL_16:
        v16 = MEMORY[0x22766ED44](a3 + 1, a1);
        goto LABEL_18;
      }
      while (1)
      {
        v16 = *(_QWORD *)(a1 + 8 * a3 + 40);
        swift_retain();
LABEL_18:
        v17 = sub_2215FACB0();
        v8 = v16;
        v18 = sub_2215FACB0();
        a2 = *(_QWORD *)(v18 + 16);
        v19 = *(_QWORD *)(v17 + 16);
        v4 = v19 + a2;
        if (__OFADD__(v19, a2))
          break;
        v8 = v18;
        isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (!(_DWORD)isUniquelyReferenced_nonNull_native || v4 > *(_QWORD *)(v17 + 24) >> 1)
        {
          if (v19 <= v4)
            v21 = v19 + a2;
          else
            v21 = v19;
          v17 = (uint64_t)sub_2215D7544(isUniquelyReferenced_nonNull_native, v21, 1, (char *)v17);
        }
        v4 = v82;
        if (*(_QWORD *)(v8 + 16))
        {
          v22 = *(_QWORD *)(v17 + 16);
          if ((*(_QWORD *)(v17 + 24) >> 1) - v22 < a2)
            goto LABEL_65;
          memcpy((void *)(v17 + 8 * v22 + 32), (const void *)(v8 + 32), 8 * a2);
          if (a2)
          {
            v23 = *(_QWORD *)(v17 + 16);
            v24 = __OFADD__(v23, a2);
            v25 = v23 + a2;
            if (v24)
              goto LABEL_66;
            *(_QWORD *)(v17 + 16) = v25;
          }
        }
        else if (a2)
        {
          goto LABEL_64;
        }
        swift_bridgeObjectRelease();
        v83 = computeTriangulation(v17 + 32, *(_QWORD *)(v17 + 16));
        swift_bridgeObjectRelease();
        sub_2215F9CB8(v11, v16, (uint64_t)v121, (int32x4_t)v83);
        sub_2215C6540((uint64_t)v121, (uint64_t)v122, &qword_2556DB668);
        sub_2215C6540((uint64_t)v121, (uint64_t)&v137, &qword_2556DB668);
        if (sub_2215EC220((uint64_t)&v137) == 1)
        {
          swift_release();
LABEL_36:
          sub_2215C6540((uint64_t)&v123, (uint64_t)v87, &qword_2556DB668);
          goto LABEL_37;
        }
        v26 = v149;
        if (v149 < *(float *)(v82 + 464) || *(float *)(v82 + 460) < v149)
        {
          swift_release();
          sub_2215EC290((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
          goto LABEL_36;
        }
        v27 = v138;
        v28 = v139;
        v29 = v140;
        v30 = v144;
        v31 = v148;
        v32 = v150;
        v33 = v147;
        v84 = v137;
        v72 = v142;
        v74 = v141;
        v70 = v145;
        v71 = v143;
        v69 = v146;
        v67 = v147;
        v68 = v144;
        v66 = v138;
        v65 = v140;
        if (v15 >= v150)
        {
          sub_2215C6540((uint64_t)&v123, (uint64_t)v86, &qword_2556DB668);
        }
        else
        {
          sub_2215EC290((uint64_t)&v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
          sub_2215C6540((uint64_t)v122, (uint64_t)v104, &qword_2556DB668);
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          v105 = v84;
          v106 = v27;
          v107 = v28;
          v108 = v29;
          v109 = v74;
          v110 = v72;
          v111 = v71;
          v112 = v30;
          v113 = v70;
          v114 = v69;
          v115 = v33;
          v116 = v31;
          v117 = v26;
          v118 = v32;
          nullsub_1(&v105);
          sub_2215C6540((uint64_t)&v105, (uint64_t)v120, &qword_2556DB668);
          swift_retain();
          swift_retain();
          sub_2215C6540((uint64_t)&v105, (uint64_t)v86, &qword_2556DB668);
          v15 = v32;
        }
        sub_2215C6540((uint64_t)v122, (uint64_t)&v105, &qword_2556DB668);
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v76 = sub_2215D730C(0, v76[2] + 1, 1, v76);
        v35 = v76[2];
        v34 = v76[3];
        v36 = v84;
        v38 = v72;
        v37 = v74;
        v40 = v70;
        v39 = v71;
        v41 = v69;
        if (v35 >= v34 >> 1)
        {
          v43 = sub_2215D730C((_QWORD *)(v34 > 1), v35 + 1, 1, v76);
          v41 = v69;
          v40 = v70;
          v39 = v71;
          v38 = v72;
          v37 = v74;
          v36 = v84;
          v76 = v43;
        }
        v76[2] = v35 + 1;
        v42 = &v76[22 * v35];
        *((_OWORD *)v42 + 2) = v36;
        v42[6] = v66;
        v42[7] = v28;
        *((_BYTE *)v42 + 64) = v65;
        *((_OWORD *)v42 + 5) = v37;
        *((_OWORD *)v42 + 6) = v38;
        *((_OWORD *)v42 + 7) = v39;
        v42[16] = v68;
        *((_OWORD *)v42 + 9) = v40;
        *((_OWORD *)v42 + 10) = v41;
        v42[22] = v67;
        *((_DWORD *)v42 + 46) = v31;
        *((float *)v42 + 47) = v26;
        *((float *)v42 + 48) = v32;
        sub_2215EC290((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_2215EC2FC);
        swift_release();
        v119 = v76;
        sub_2215C6540((uint64_t)v86, (uint64_t)v87, &qword_2556DB668);
        a1 = v63;
        v11 = v64;
LABEL_37:
        if (v78 == a3)
        {
          sub_2215C6540((uint64_t)v87, (uint64_t)&v105, &qword_2556DB668);
          v13 = (uint64_t)v76;
          goto LABEL_49;
        }
        sub_2215C6540((uint64_t)v87, (uint64_t)&v123, &qword_2556DB668);
        ++a3;
        if (v80)
          goto LABEL_16;
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      swift_bridgeObjectRetain();
      result = sub_2216539F0();
      if (result)
        goto LABEL_3;
LABEL_68:
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_69:
      v11 = MEMORY[0x22766ED44](0, a1);
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

uint64_t sub_2215F9260(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t);
  uint64_t v26;
  _BYTE v27[176];
  _BYTE v28[168];
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[176];
  _BYTE v33[168];
  _BYTE v34[24];
  uint64_t v35;
  _BYTE v36[160];

  swift_beginAccess();
  v12 = *(_QWORD *)(a1 + 824);
  sub_2215C6540(a2, (uint64_t)v36, &qword_2556DBBD8);
  result = sub_2215FF094((uint64_t)v36);
  if ((_DWORD)result != 1 && (v36[0] & 1) == 0 && (v12 & 1) != 0)
  {
    swift_beginAccess();
    sub_2215FF0B8(a1 + 832, (uint64_t)v34);
    if (v35)
    {
      sub_2215E70EC((uint64_t)v34, (uint64_t)v29);
      sub_2215FDE00((uint64_t)v34);
      v15 = v30;
      v14 = v31;
      __swift_project_boxed_opaque_existential_0(v29, v30);
      v16 = *a3;
      v17 = *a4;
      sub_2215C6540((uint64_t)a5, (uint64_t)v32, &qword_2556DB668);
      sub_2215C6540((uint64_t)v32, (uint64_t)v33, &qword_2556DB668);
      v18 = sub_2215EC220((uint64_t)v33);
      if (v18 == 1)
      {
        v26 = 0;
        v19 = 0;
      }
      else
      {
        v20 = *a5;
        v19 = a5[1];
        v26 = v20;
      }
      sub_2215C6540((uint64_t)a6, (uint64_t)v27, &qword_2556DB668);
      sub_2215C6540((uint64_t)v27, (uint64_t)v28, &qword_2556DB668);
      v21 = sub_2215EC220((uint64_t)v28);
      if (v21 == 1)
      {
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v22 = *a6;
        v23 = a6[1];
      }
      v24 = v21 == 1;
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, _BOOL8, uint64_t, uint64_t))(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25(v16, v17, v26, v19, v18 == 1, v22, v23, v24, v15, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
    }
    else
    {
      return sub_2215FDE00((uint64_t)v34);
    }
  }
  return result;
}

uint64_t PatchTracker.triangulatePatches(sourcePatch:destPatch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v9;
  _QWORD v10[22];

  v6 = sub_2215FACB0();
  v7 = sub_2215FACB0();
  v10[0] = v6;
  sub_2215F98A0(v7);
  v9 = computeTriangulation(v10[0] + 32, *(_QWORD *)(v10[0] + 16));
  swift_bridgeObjectRelease();
  sub_2215F9CB8(a1, a2, (uint64_t)v10, (int32x4_t)v9);
  return sub_2215C6540((uint64_t)v10, a3, &qword_2556DB668);
}

void sub_2215F9514(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE v25[176];

  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRelease();
    computeTriangulation(MEMORY[0x24BEE4AF8] + 32, *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16));
    __break(1u);
    goto LABEL_35;
  }
LABEL_33:
  swift_bridgeObjectRetain();
  v4 = sub_2216539F0();
  if (!v4)
    goto LABEL_34;
LABEL_3:
  if (v4 >= 1)
  {
    v24 = a2;
    v5 = 0;
    v6 = a1 & 0xC000000000000001;
    v23 = (uint64_t *)(a1 + 32);
    v7 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (v6)
        MEMORY[0x22766ED44](v5, a1);
      else
        swift_retain();
      v8 = sub_2215FACB0();
      a2 = *(_QWORD *)(v8 + 16);
      v9 = *((_QWORD *)v7 + 2);
      v10 = v9 + a2;
      if (__OFADD__(v9, a2))
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v11 = v8;
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v10 <= *((_QWORD *)v7 + 3) >> 1)
      {
        if (*(_QWORD *)(v11 + 16))
          goto LABEL_19;
      }
      else
      {
        if (v9 <= v10)
          v13 = v9 + a2;
        else
          v13 = v9;
        v7 = sub_2215D7544(isUniquelyReferenced_nonNull_native, v13, 1, v7);
        if (*(_QWORD *)(v11 + 16))
        {
LABEL_19:
          v14 = *((_QWORD *)v7 + 2);
          if ((*((_QWORD *)v7 + 3) >> 1) - v14 < a2)
            goto LABEL_31;
          memcpy(&v7[8 * v14 + 32], (const void *)(v11 + 32), 8 * a2);
          if (a2)
          {
            v15 = *((_QWORD *)v7 + 2);
            v16 = __OFADD__(v15, a2);
            v17 = v15 + a2;
            if (v16)
              goto LABEL_32;
            *((_QWORD *)v7 + 2) = v17;
          }
          goto LABEL_6;
        }
      }
      if (a2)
        goto LABEL_30;
LABEL_6:
      ++v5;
      swift_bridgeObjectRelease();
      swift_release();
      if (v4 == v5)
      {
        swift_bridgeObjectRelease();
        v22 = computeTriangulation((uint64_t)(v7 + 32), *((_QWORD *)v7 + 2));
        if (v6)
          goto LABEL_36;
        v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v18)
        {
          v19 = v4 - 1;
          if (!__OFSUB__(v4, 1))
          {
            if (v19 < v18)
            {
              v20 = *v23;
              v21 = v23[v19];
              swift_retain();
              swift_retain();
              goto LABEL_28;
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_40;
      }
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  swift_bridgeObjectRetain();
  v20 = MEMORY[0x22766ED44](0, a1);
  if (__OFSUB__(v4, 1))
    goto LABEL_41;
  v21 = MEMORY[0x22766ED44](v4 - 1, a1);
  swift_bridgeObjectRelease();
LABEL_28:
  swift_bridgeObjectRelease();
  sub_2215F9CB8(v20, v21, (uint64_t)v25, (int32x4_t)v22);
  swift_release();
  swift_release();
  sub_2215C6540((uint64_t)v25, v24, &qword_2556DB668);
}

uint64_t sub_2215F97C0(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_2215D7110((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 16 * v7 + 32), (const void *)(v6 + 32), 16 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2215F98A0(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_2215D7544((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2215F9980(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_2216539F0();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x22766ED50](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_2215FEDFC(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_22165333C();
  }
  __break(1u);
  return result;
}

float sub_2215F9B38(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float v20;
  uint64_t v22[24];
  _BYTE v23[192];
  _OWORD v24[11];
  uint64_t v25;
  _BYTE __dst[152];
  float v27;

  v3 = v2;
  v4 = *(float *)(v2 + 472);
  sub_2215F61A8(a1, a2);
  v6 = v5;
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 544);
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_2215CA4BC(v6), (v9 & 1) != 0))
  {
    v10 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 192 * v8);
    v12 = v10[2];
    v11 = v10[3];
    v13 = v10[1];
    v24[0] = *v10;
    v24[1] = v13;
    v24[2] = v12;
    v24[3] = v11;
    v14 = v10[4];
    v15 = v10[5];
    v16 = v10[7];
    v24[6] = v10[6];
    v24[7] = v16;
    v24[4] = v14;
    v24[5] = v15;
    v17 = v10[8];
    v18 = v10[9];
    v19 = v10[10];
    v25 = *((_QWORD *)v10 + 22);
    v24[9] = v18;
    v24[10] = v19;
    v24[8] = v17;
    memmove(__dst, v10, 0xB8uLL);
    nullsub_1(__dst);
    sub_2215D205C((uint64_t)v24);
  }
  else
  {
    sub_2215FF438((uint64_t)v24);
    sub_2215C6540((uint64_t)v24, (uint64_t)__dst, &qword_2556DC4E8);
  }
  sub_2215C6540((uint64_t)__dst, (uint64_t)v23, &qword_2556DC4E8);
  sub_2215C6540((uint64_t)v23, (uint64_t)v24, &qword_2556DC4E8);
  if (sub_2215EC220((uint64_t)v24) != 1)
  {
    v20 = v27;
    sub_2215C6540((uint64_t)__dst, (uint64_t)v22, &qword_2556DC4E8);
    sub_2215FF45C(v22);
    if (v4 <= (float)(v20 + (float)(v20 * *(float *)(v3 + 484))))
      return v20 + (float)(v20 * *(float *)(v3 + 484));
  }
  return v4;
}

uint64_t sub_2215F9CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  uint64_t v4;
  int v6;
  unsigned __int32 v7;
  BOOL v8;
  int v9;
  uint64_t v13;
  void *v14;
  __int128 v15;
  float32x4_t v16;
  float32x2_t v17;
  float v18;
  __int128 v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  __int128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  __int128 v53;
  __int128 v54;
  float32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  __int128 v58;
  float v59;
  float32x2_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  float32x4_t v66;
  __int128 v67;
  float32x4_t v68;
  uint64_t v69;
  __int128 v70;
  float32x4_t v71;
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  _BYTE v76[176];

  v6 = ((unsigned __int32)a4.i32[3] >> 23);
  v7 = a4.i32[3] & 0x7FFFFF;
  v8 = v6 != 255 || v7 == 0;
  v9 = v6 | v7;
  if (!v8 || v9 == 0)
    goto LABEL_20;
  v13 = *(_QWORD *)(a1 + 128);
  v14 = *(void **)(v13 + 88);
  v59 = *(float *)&a4.i32[2] / *(float *)&a4.i32[3];
  v60 = vdiv_f32(*(float32x2_t *)a4.i8, (float32x2_t)vdup_laneq_s32(a4, 3));
  if (v14)
  {
    objc_msgSend(v14, sel_transform);
    v57 = v15;
    objc_msgSend(v14, sel_transform);
  }
  else
  {
    objc_msgSend(*(id *)(v13 + 24), sel_transform);
    v57 = v19;
    objc_msgSend(*(id *)(v13 + 24), sel_transform);
  }
  *(float32x2_t *)v20.f32 = v60;
  *(float32x2_t *)v16.f32 = vsub_f32(v60, v17);
  v16.f32[2] = v59 - v18;
  v21 = v16;
  v21.i32[3] = 0;
  v22 = (int32x4_t)vmulq_f32(v21, v21);
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  v25 = vmulq_n_f32(v16, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  if ((float)(vmuls_lane_f32(*(float *)(a1 + 104), v25, 2)
             + (float)((float)(*(float *)(a1 + 96) * v25.f32[0])
                     + vmuls_lane_f32(*(float *)(a1 + 100), *(float32x2_t *)v25.f32, 1))) < *(float *)(v4 + 468))
    goto LABEL_20;
  v20.i64[1] = LODWORD(v59);
  v55 = v25;
  v56 = v20;
  v26 = sub_2215F9B38(*(double *)(a1 + 56), *(double *)(a1 + 64));
  v28 = v27;
  if (v14)
    objc_msgSend(v14, sel_transform);
  else
    objc_msgSend(*(id *)(v13 + 24), sel_transform);
  v30 = vsubq_f32(v29, v56);
  v31 = vmulq_f32(v30, v30);
  v32 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
  if (v32 < v26 || v28 < v32)
  {
LABEL_20:
    sub_2215EC200((uint64_t)&v62);
  }
  else
  {
    v35 = v57;
    HIDWORD(v35) = 0;
    v36 = *(_QWORD *)(a2 + 128);
    v37 = *(void **)(v36 + 88);
    v58 = v35;
    if (v37)
    {
      objc_msgSend(v37, sel_transform);
      objc_msgSend(v37, sel_transform, v38, v39);
    }
    else
    {
      objc_msgSend(*(id *)(v36 + 24), sel_transform);
      objc_msgSend(*(id *)(v36 + 24), sel_transform, v42, v43);
    }
    v44 = v53;
    HIDWORD(v44) = 0;
    v54 = v44;
    *(float32x2_t *)v45.f32 = vsub_f32(v60, v40);
    v45.f32[2] = v59 - v41;
    v45.i32[3] = 0;
    v46 = (int32x4_t)vmulq_f32(v45, v45);
    v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1))).u32[0];
    v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
    v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
    v61 = vmulq_n_f32(v45, vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).f32[0]);
    v49 = vmulq_f32(v55, v61);
    v50 = v49.f32[2] + vaddv_f32(*(float32x2_t *)v49.f32);
    v51 = acosf(v50);
    v52 = *(float *)(a2 + 120);
    v62 = v56;
    v63 = 0;
    v64 = 0;
    v65 = 1;
    v66 = v56;
    v67 = v58;
    v68 = v55;
    v69 = a1;
    v70 = v54;
    v71 = v61;
    v72 = a2;
    v73 = v32;
    v74 = v50;
    v75 = v52 * fminf(fabsf(v51) / 0.17453, 1.0);
    nullsub_1(&v62);
    swift_retain();
    swift_retain();
  }
  sub_2215C6540((uint64_t)&v62, (uint64_t)v76, &qword_2556DB668);
  return sub_2215C6540((uint64_t)v76, a3, &qword_2556DB668);
}

double sub_2215F9FFC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;

  if ((*(_BYTE *)(v0 + 192) & 1) != 0)
  {
    v1 = *(void **)(v0 + 24);
    v2 = *(_QWORD *)(v0 + 64);
    objc_msgSend(v1, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, v2, *(double *)(v0 + 112), *(double *)(v0 + 120), 0.00100000005, 1000.0);
    v13 = v3;
    v14 = v4;
    v15 = v5;
    v16 = v6;
    objc_msgSend(v1, sel_viewMatrixForOrientation_, v2);
    v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v7.f32[0]), v14, *(float32x2_t *)v7.f32, 1), v15, v7, 2), v16, v7, 3);
    *(float32x4_t *)(v0 + 128) = v8;
    *(float32x4_t *)(v0 + 144) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v9.f32[0]), v14, *(float32x2_t *)v9.f32, 1), v15, v9, 2), v16, v9, 3);
    *(float32x4_t *)(v0 + 160) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v10.f32[0]), v14, *(float32x2_t *)v10.f32, 1), v15, v10, 2), v16, v10, 3);
    *(float32x4_t *)(v0 + 176) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v11.f32[0]), v14, *(float32x2_t *)v11.f32, 1), v15, v11, 2), v16, v11, 3);
    *(_BYTE *)(v0 + 192) = 0;
  }
  else
  {
    v8.i64[0] = *(_QWORD *)(v0 + 128);
  }
  return *(double *)v8.i64;
}

uint64_t sub_2215FA118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4;
  char v5;
  __int128 v6;

  if ((*(_BYTE *)(v1 + 233) & 1) != 0)
  {
    swift_weakLoadStrong();
    result = swift_release();
    v4 = 0uLL;
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 216) = 0u;
    v5 = 1;
    *(_WORD *)(v1 + 232) = 1;
    v6 = 0uLL;
  }
  else
  {
    v6 = *(_OWORD *)(v1 + 216);
    v4 = *(_OWORD *)(v1 + 200);
    v5 = *(_BYTE *)(v1 + 232) & 1;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t PatchTracker.Keyframe.init(_:camera:scaledImage:orientation:gravityOffsetAngle:timestamp:anchor:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, float a9, double a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v22;
  uint64_t v23;
  uint64_t ObjectType;
  double (*v25)(uint64_t, uint64_t);
  id v26;
  id v27;
  id v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v11 = v10;
  swift_weakInit();
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_BYTE *)(v11 + 192) = 1;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_WORD *)(v11 + 232) = 256;
  swift_weakAssign();
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  *(_QWORD *)(v11 + 48) = a5;
  *(_QWORD *)(v11 + 56) = a6;
  *(_QWORD *)(v11 + 64) = a7;
  *(float *)(v11 + 72) = a9;
  *(double *)(v11 + 80) = a10;
  *(_QWORD *)(v11 + 88) = a8;
  v22 = *(void **)(a1 + 800);
  v23 = *(_QWORD *)(a1 + 808);
  ObjectType = swift_getObjectType();
  v25 = *(double (**)(uint64_t, uint64_t))(v23 + 8);
  v26 = a8;
  v27 = v22;
  v28 = a2;
  v29 = v25(ObjectType, v23);
  v31 = v30;
  v33 = v32;
  v35 = v34;

  swift_release();
  *(double *)(v11 + 96) = v29;
  *(_QWORD *)(v11 + 104) = v31;
  *(_QWORD *)(v11 + 112) = v33;
  *(_QWORD *)(v11 + 120) = v35;
  return v11;
}

uint64_t PatchTracker.Keyframe.deinit()
{
  uint64_t v0;

  if (swift_weakLoadStrong())
  {
    sub_2215F5654((_QWORD *)v0);
    swift_release();
  }
  swift_weakDestroy();

  return v0;
}

uint64_t PatchTracker.Keyframe.__deallocating_deinit()
{
  uint64_t v0;

  if (swift_weakLoadStrong())
  {
    sub_2215F5654((_QWORD *)v0);
    swift_release();
  }
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t PatchTracker.Keyframe.getEpipolarLine(patch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  CGFloat x;
  float v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  void *v15;
  float32x2_t v16;
  float v17;
  float32x4_t v18;
  float32x2_t v19;
  float v20;
  float32x4_t v21;
  double v22;
  unsigned int v23;
  char v24;
  float32x2_t v25;
  double v26;
  void *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat y;
  char v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat width;
  CGFloat height;
  CGFloat v45;
  CGFloat v46;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGPoint v53;
  CGFloat v54;
  double v55;
  CGPoint v56;
  double v57;
  double v58;
  float32x2_t v59;
  float v60;
  float v61;
  float32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float point;
  unint64_t pointa;
  CGFloat pointb;
  double v70;
  CGFloat v71;
  CGAffineTransform v72;
  _BYTE v73[40];
  CGAffineTransform v74;
  _QWORD v75[4];
  char v76;
  CGPoint v77;
  CGPoint v78;
  CGRect v79;

  result = swift_weakLoadStrong();
  x = 0.0;
  if (!result)
    goto LABEL_14;
  v7 = sub_2215F9B38(*(double *)(a1 + 56), *(double *)(a1 + 64));
  v10 = *(int8x16_t *)(a1 + 80);
  v9 = *(int8x16_t *)(a1 + 96);
  *(float *)&v11 = *(float *)v10.i32 + (float)(v7 * *(float *)v9.i32);
  v12.i32[1] = v9.i32[1];
  v12.i32[0] = vextq_s8(v9, v9, 8uLL).u32[0];
  v13.i32[1] = v10.i32[1];
  v13.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0];
  v66 = vadd_f32(v13, vmul_n_f32(v12, v7));
  point = *(float *)&v11;
  v15 = *(void **)(v2 + 88);
  v70 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v10.i8, vmul_n_f32(*(float32x2_t *)v9.i8, v14)));
  v64 = (float32x4_t)v10;
  v65 = (float32x4_t)v9;
  if (v15)
    objc_msgSend(v15, sel_transform, *(_QWORD *)&v12, v9.i64[1], v11, v8);
  else
    objc_msgSend(*(id *)(v2 + 24), sel_transform, *(_QWORD *)&v12, v9.i64[1], v11, v8);
  *(float32x2_t *)v18.f32 = vsub_f32(0, v16);
  v18.f32[2] = 0.0 - v17;
  v18.i32[3] = 0;
  *(double *)&pointa = COERCE_DOUBLE(__PAIR64__(v66.u32[1], LODWORD(point)));
  v62 = *(float32x2_t *)v18.f32;
  v63 = v18;
  v61 = 0.0 - v17;
  if (v15)
    objc_msgSend(v15, sel_transform);
  else
    objc_msgSend(*(id *)(v2 + 24), sel_transform);
  *(float32x2_t *)v21.f32 = vadd_f32(vmul_f32(v62, (float32x2_t)vdup_n_s32(0x3A83126Fu)), v19);
  v21.f32[2] = (float)(v61 * 0.001) + v20;
  v21.i32[3] = 0;
  sub_22160A740(v64, v65, v21, v63);
  if ((v24 & 1) != 0
    || (v25 = vmul_f32(v59, vsub_f32((float32x2_t)__PAIR64__(HIDWORD(v22), v23), v66)),
        (float)(v25.f32[0] + (float)((float)(v65.f32[0] * (float)(*(float *)&v22 - v60)) + v25.f32[1])) <= 0.0))
  {
    v26 = *(double *)&pointa;
  }
  else
  {
    v26 = v22;
  }
  v27 = *(void **)(v2 + 24);
  v28 = *(_QWORD *)(v2 + 64);
  v29 = *(double *)(v2 + 112);
  v30 = *(double *)(v2 + 120);
  objc_msgSend(v27, sel_projectPoint_orientation_viewportSize_, v28, v26, v29, v30);
  v32 = v31;
  v34 = v33;
  objc_msgSend(v27, sel_projectPoint_orientation_viewportSize_, v28, v70, v29, v30);
  sub_2215E4360((uint64_t)v73, v32, v34, v35, v36, *(CGFloat *)(v2 + 96), *(CGFloat *)(v2 + 104), v29, v30);
  sub_2215C6540((uint64_t)v73, (uint64_t)v75, &qword_2556DADF0);
  if ((v76 & 1) != 0)
  {
    result = swift_release();
LABEL_14:
    y = 0.0;
    v38 = 1;
    v39 = 0.0;
    v40 = 0.0;
    v41 = 0.0;
    v42 = 0.0;
    width = 0.0;
    height = 0.0;
    goto LABEL_20;
  }
  v45 = *(double *)v75;
  v46 = *(double *)&v75[1];
  v71 = *(double *)&v75[2];
  pointb = *(double *)&v75[3];
  sub_2215F4780(&v74.a);
  a = v74.a;
  b = v74.b;
  c = v74.c;
  d = v74.d;
  tx = v74.tx;
  ty = v74.ty;
  v72 = v74;
  v77.x = v45;
  v77.y = v46;
  v53 = CGPointApplyAffineTransform(v77, &v72);
  x = v53.x;
  y = v53.y;
  v72.a = a;
  v72.b = b;
  v72.c = c;
  v72.d = d;
  v72.tx = tx;
  v72.ty = ty;
  v78.x = v71;
  v78.y = pointb;
  v56 = CGPointApplyAffineTransform(v78, &v72);
  v55 = v56.y;
  v54 = v56.x;
  v39 = v56.x;
  v40 = v56.y;
  if (v56.x >= v53.x)
    v54 = v53.x;
  if (v56.y >= v53.y)
    v55 = v53.y;
  v57 = vabdd_f64(v53.x, v56.x);
  v58 = vabdd_f64(v53.y, v56.y);
  v79 = CGRectInset(*(CGRect *)&v54, *(double *)(a1 + 40) * -0.5, *(double *)(a1 + 48) * -0.5);
  v41 = v79.origin.x;
  v42 = v79.origin.y;
  width = v79.size.width;
  height = v79.size.height;
  result = swift_release();
  v38 = 0;
LABEL_20:
  *(CGFloat *)a2 = x;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = v39;
  *(CGFloat *)(a2 + 24) = v40;
  *(CGFloat *)(a2 + 32) = v41;
  *(CGFloat *)(a2 + 40) = v42;
  *(CGFloat *)(a2 + 48) = width;
  *(CGFloat *)(a2 + 56) = height;
  *(_BYTE *)(a2 + 64) = v38;
  return result;
}

uint64_t PatchTracker.Keyframe.computeTriangulationMatrix(screenPoint:triangulationWith3Rows:)(char a1, double a2, double a3)
{
  uint64_t v3;
  double v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a2 / *(double *)(v3 + 112) + a2 / *(double *)(v3 + 112);
  v6 = a3 / *(double *)(v3 + 120) + a3 / *(double *)(v3 + 120);
  *(double *)&v7 = sub_2215F9FFC();
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  if ((a1 & 1) != 0)
    v11 = 12;
  else
    v11 = 8;
  v12 = sub_221653390();
  *(_QWORD *)(v12 + 16) = v11;
  bzero((void *)(v12 + 32), 8 * v11);
  v13 = v5 + -1.0;
  v14 = 1.0 - v6;
  *(double *)(v12 + 32) = (v5 + -1.0) * *((float *)&v16 + 2) - *(float *)&v16;
  *(double *)(v12 + 40) = (v5 + -1.0) * *((float *)&v17 + 2) - *(float *)&v17;
  *(double *)(v12 + 48) = (v5 + -1.0) * *((float *)&v18 + 2) - *(float *)&v18;
  *(double *)(v12 + 56) = (v5 + -1.0) * *((float *)&v19 + 2) - *(float *)&v19;
  *(double *)(v12 + 64) = (1.0 - v6) * *((float *)&v16 + 2) - *((float *)&v16 + 1);
  *(double *)(v12 + 72) = (1.0 - v6) * *((float *)&v17 + 2) - *((float *)&v17 + 1);
  *(double *)(v12 + 80) = (1.0 - v6) * *((float *)&v18 + 2) - *((float *)&v18 + 1);
  *(double *)(v12 + 88) = (1.0 - v6) * *((float *)&v19 + 2) - *((float *)&v19 + 1);
  if ((a1 & 1) != 0)
  {
    *(double *)(v12 + 96) = v13 * *((float *)&v16 + 1) - v14 * *(float *)&v16;
    *(double *)(v12 + 104) = v13 * *((float *)&v17 + 1) - v14 * *(float *)&v17;
    *(double *)(v12 + 112) = v13 * *((float *)&v18 + 1) - v14 * *(float *)&v18;
    *(double *)(v12 + 120) = v13 * *((float *)&v19 + 1) - v14 * *(float *)&v19;
  }
  return v12;
}

void PatchTracker.Keyframe.getRay(screenPoint:sceneView:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  uint64_t ObjectType;
  CGFloat v11;
  double v12;
  CGFloat v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CGAffineTransform v19;
  __int128 v20;
  BOOL v21;
  CGPoint v22;

  v5 = v4;
  v9 = *(void **)(v4 + 24);
  ObjectType = swift_getObjectType();
  v11 = (*(double (**)(uint64_t, uint64_t, double, double))(a4 + 24))(ObjectType, a4, a1, a2);
  v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  objc_msgSend(v9, sel_imageResolution);
  ARViewToCameraImageTransform();
  v22.x = v11;
  v22.y = v13;
  CGPointApplyAffineTransform(v22, &v19);
  v14 = *(_QWORD *)(v4 + 88);
  if (v14)
  {
    objc_msgSend(*(id *)(v5 + 88), sel_transform);
  }
  else
  {
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  *(_OWORD *)&v19.a = v15;
  *(_OWORD *)&v19.c = v16;
  *(_OWORD *)&v19.tx = v17;
  v20 = v18;
  v21 = v14 == 0;
  _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v9, (uint64_t)&v19);
}

Swift::Bool __swiftcall PatchTracker.Keyframe.isCameraAligned(with:)(ARCamera with)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  void *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x16_t v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x2_t v19;
  int8x16_t v21;
  float32x2_t v22;
  float32x4_t v23;
  int8x16_t v24;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v4 = Strong;
    -[objc_class transform](with.super.isa, sel_transform);
    v5 = *(void **)(v1 + 88);
    v23 = v6;
    if (v5)
      objc_msgSend(v5, sel_transform);
    else
      objc_msgSend(*(id *)(v1 + 24), sel_transform);
    v8 = vsubq_f32(v23, v7);
    if ((float)(vmuls_lane_f32(v8.f32[2], v8, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32))) < 0.0001)
      goto LABEL_10;
    v8.i32[3] = 0;
    v9 = (int32x4_t)vmulq_f32(v8, v8);
    v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
    v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
    v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
    v24 = (int8x16_t)vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
    if (v5)
      objc_msgSend(v5, sel_transform);
    else
      objc_msgSend(*(id *)(v1 + 24), sel_transform);
    v13 = vmuls_n_f32(*(float *)v24.i32, *(float *)v12.i32);
    v14.i32[1] = v24.i32[1];
    v14.i32[0] = vextq_s8(v24, v24, 8uLL).u32[0];
    v12.i32[0] = vextq_s8(v12, v12, 8uLL).u32[0];
    v15 = vmul_f32(v14, *(float32x2_t *)v12.i8);
    v16 = *(float *)(v4 + 432);
    if (v16 >= fabsf(v15.f32[0] + (float)(v13 + v15.f32[1])))
    {
      v22 = v14;
      -[objc_class transform](with.super.isa, sel_transform);
      v21 = v17;
      swift_release();
      v18 = v21;
      v18.i32[0] = vextq_s8(v18, v18, 8uLL).u32[0];
      v19 = vmul_f32(v22, *(float32x2_t *)v18.i8);
      LOBYTE(Strong) = v16 < fabsf(v19.f32[0] + (float)((float)(*(float *)v24.i32 * *(float *)v21.i32) + v19.f32[1]));
    }
    else
    {
LABEL_10:
      swift_release();
      LOBYTE(Strong) = 1;
    }
  }
  return Strong;
}

void PatchTracker.Keyframe.getImagePack(rect:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  char v20;
  double v21[4];
  char v22;

  v5 = v2[5];
  v18 = v2[4];
  v6 = v2[6];
  v7 = v2[7];
  sub_2215FA118((uint64_t)v19);
  v8 = v19[0];
  v9 = v19[1];
  v10 = v19[2];
  v11 = v19[3];
  v12 = v20;
  sub_2215C6540(a1, (uint64_t)v21, &qword_2556DBBE8);
  v13 = v22;
  if ((v22 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    CGRect.ints.getter(v21[0], v21[1], v21[2], v21[3]);
  }
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 56) = v11;
  *(_BYTE *)(a2 + 64) = v12;
  *(_QWORD *)(a2 + 72) = v14;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 88) = v16;
  *(_QWORD *)(a2 + 96) = v17;
  *(_BYTE *)(a2 + 104) = v13;
}

BOOL sub_2215FAC60(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(_QWORD *)a1 + 80) == *(double *)(*(_QWORD *)a2 + 80);
}

uint64_t PatchTracker.Patch.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

double PatchTracker.Patch.imageRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double PatchTracker.Patch.screenPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

__n128 PatchTracker.Patch.ray.getter()
{
  __n128 *v0;

  return v0[5];
}

uint64_t PatchTracker.Patch.matchingSimilarities.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

float PatchTracker.Patch.matchingScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 120);
}

uint64_t sub_2215FACB0()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 136))
  {
    v1 = *(_QWORD *)(v0 + 136);
  }
  else
  {
    v1 = PatchTracker.Keyframe.computeTriangulationMatrix(screenPoint:triangulationWith3Rows:)(0, *(double *)(v0 + 56), *(double *)(v0 + 64));
    *(_QWORD *)(v0 + 136) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_2215FAD14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  double v3;
  double v4;
  CGFloat v5;
  CGFloat v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE v15[40];
  _QWORD v16[4];
  char v17;
  _OWORD v18[2];
  char v19;

  v1 = v0;
  if ((*(_BYTE *)(v0 + 148) & 1) != 0)
  {
    v2 = *(_QWORD **)(v0 + 128);
    v3 = *(double *)(v1 + 24);
    v4 = *(double *)(v1 + 32);
    v5 = *(double *)(v1 + 40);
    v6 = *(double *)(v1 + 48);
    v7 = v2[4];
    v8 = v2[5];
    v9 = v2[6];
    sub_2215FA118((uint64_t)v15);
    CGRect.ints.getter(v3, v4, v5, v6);
    v16[0] = v10;
    v16[1] = v11;
    v16[2] = v12;
    v16[3] = v13;
    v17 = 0;
    memset(v18, 0, sizeof(v18));
    v19 = 1;
    sub_2215C5CB0(v7, v8, v9, (uint64_t)v15, (uint64_t)v16, (uint64_t)v18);
    *(_DWORD *)(v1 + 144) = v14;
    *(_BYTE *)(v1 + 148) = 0;
  }
}

uint64_t PatchTracker.Patch.init(imageRect:keyframe:sceneView:screenPoint:matchingScore:matchingSimilarities:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  uint64_t v12;

  v12 = sub_2215FF100(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();

  return v12;
}

Swift::Bool __swiftcall PatchTracker.Patch.isGoodMatch()()
{
  uint64_t v0;
  uint64_t Strong;
  float v2;
  uint64_t v3;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v2 = *(float *)(v0 + 120);
    if (v2 >= 0.8 && v2 <= 0.99)
    {
      v3 = *(_QWORD *)(v0 + 112);
      swift_release();
      LOBYTE(Strong) = v3 < 4;
    }
    else
    {
      swift_release();
      LOBYTE(Strong) = 0;
    }
  }
  return Strong;
}

Swift::Bool __swiftcall PatchTracker.Patch.isFalsePositive()()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(float *)(v0 + 120) <= 0.99)
    {
      v2 = *(_QWORD *)(v0 + 112);
      swift_release();
      LOBYTE(Strong) = v2 > 3;
    }
    else
    {
      swift_release();
      LOBYTE(Strong) = 1;
    }
  }
  return Strong;
}

__n128 PatchTracker.Patch.getImagePack()@<Q0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v3;
  double v4;
  double v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __n128 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __int128 v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = *((_QWORD *)v1 + 16);
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v19 = *(_OWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 48);
  v9 = *(_QWORD *)(v3 + 56);
  sub_2215FA118((uint64_t)&v20);
  v18 = v20;
  v10 = v21;
  v11 = v22;
  v12 = v23;
  CGRect.ints.getter(v4, v5, v6, v7);
  *(_OWORD *)a1 = v19;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  result = v18;
  *(__n128 *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  *(_BYTE *)(a1 + 104) = 0;
  return result;
}

void PatchTracker.Patch.getImageBuffer()()
{
  uint64_t v0;

  sub_2216314B4(*(_QWORD *)(*(_QWORD *)(v0 + 128) + 32), *(_QWORD *)(*(_QWORD *)(v0 + 128) + 56), 1, *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

uint64_t PatchTracker.Patch.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PatchTracker.Patch.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

BOOL sub_2215FB004(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16);
}

void *PatchTracker.DebugOptions.showPoints.unsafeMutableAddressor()
{
  return &static PatchTracker.DebugOptions.showPoints;
}

uint64_t static PatchTracker.DebugOptions.showPoints.getter()
{
  return 1;
}

uint64_t static PatchTracker.DebugOptions.paintMode.getter()
{
  return 2;
}

uint64_t static PatchTracker.DebugOptions.drawPatches.getter()
{
  return 4;
}

unint64_t sub_2215FB04C()
{
  unint64_t result;

  result = sub_2215C2BEC((uint64_t)&unk_24E722A48);
  static PatchTracker.DebugOptions.keyForFeature = result;
  return result;
}

uint64_t *PatchTracker.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  if (qword_2556D8E48 != -1)
    swift_once();
  return &static PatchTracker.DebugOptions.keyForFeature;
}

uint64_t static PatchTracker.DebugOptions.keyForFeature.getter()
{
  return sub_2215C5614(&qword_2556D8E48);
}

uint64_t sub_2215FB0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (qword_2556D8E48 != -1)
    swift_once();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_22161BCF8(v0);
  result = swift_bridgeObjectRelease();
  static PatchTracker.DebugOptions.keys = v1;
  return result;
}

uint64_t *PatchTracker.DebugOptions.keys.unsafeMutableAddressor()
{
  if (qword_2556D8E50 != -1)
    swift_once();
  return &static PatchTracker.DebugOptions.keys;
}

uint64_t static PatchTracker.DebugOptions.keys.getter()
{
  return sub_2215C5614(&qword_2556D8E50);
}

uint64_t sub_2215FB190()
{
  uint64_t result;

  if (qword_2556D8E48 != -1)
    swift_once();
  result = sub_221617FA8(static PatchTracker.DebugOptions.keyForFeature);
  static PatchTracker.DebugOptions.default = result;
  return result;
}

uint64_t sub_2215FB1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DBBC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static PatchTracker.DebugOptions.default.getter()
{
  if (qword_2556D8E58 != -1)
    swift_once();
  swift_beginAccess();
  return static PatchTracker.DebugOptions.default;
}

uint64_t static PatchTracker.DebugOptions.default.setter(uint64_t a1)
{
  uint64_t result;

  if (qword_2556D8E58 != -1)
    swift_once();
  result = swift_beginAccess();
  static PatchTracker.DebugOptions.default = a1;
  return result;
}

uint64_t (*static PatchTracker.DebugOptions.default.modify())()
{
  if (qword_2556D8E58 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_2215FB368(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_2215FB408(unint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a1 & 0x8000000000000000) != 0 || (v7 = *v3, 1 << *(_BYTE *)(*v3 + 32) <= (uint64_t)a1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (((*(_QWORD *)(v7 + ((a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) == 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*(_DWORD *)(v7 + 36) != a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
LABEL_10:
    sub_2215FB4FC();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 32 * a1);
  sub_2215FCF94(a1);
  *v3 = v10;
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_2215FB4FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4C0);
  v2 = *v0;
  v3 = sub_221653864();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = (_OWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v19 = v17[1];
    *v18 = *v17;
    v18[1] = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2215FB698()
{
  return sub_2215FB84C(&qword_2556DC4C8);
}

id sub_2215FB6A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4E0);
  v2 = *v0;
  v3 = sub_221653864();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2215FB84C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_221653864();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = (void *)swift_retain();
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2215FB9EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4C0);
  result = sub_221653870();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_37:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v5 << 6);
      goto LABEL_24;
    }
    v16 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v10)
      goto LABEL_35;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v5;
    if (!v17)
    {
      v5 = v16 + 1;
      if (v16 + 1 >= v10)
        goto LABEL_35;
      v17 = *(_QWORD *)(v6 + 8 * v5);
      if (!v17)
      {
        v5 = v16 + 2;
        if (v16 + 2 >= v10)
          goto LABEL_35;
        v17 = *(_QWORD *)(v6 + 8 * v5);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v5 << 6);
LABEL_24:
    v19 = (__int128 *)(*(_QWORD *)(v2 + 48) + 32 * v15);
    v27 = v19[1];
    v28 = *v19;
    sub_221653B88();
    sub_221653BA0();
    if ((_QWORD)v28)
      sub_221653B94();
    result = sub_221653BAC();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_OWORD *)(*(_QWORD *)(v4 + 48) + 32 * v12);
    *v13 = v28;
    v13[1] = v27;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v10)
  {
LABEL_35:
    result = swift_release();
    v1 = v0;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v5 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v5 >= v10)
      goto LABEL_35;
    v17 = *(_QWORD *)(v6 + 8 * v5);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_2215FBCA0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4C8);
  result = sub_221653870();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_221653B88();
    sub_221653B94();
    result = sub_221653BAC();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
    result = swift_retain();
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2215FBF20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4E0);
  v3 = sub_221653870();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_2216536E4();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2215FC198()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0B8);
  v3 = sub_221653870();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v25 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v26 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26)
      goto LABEL_33;
    v15 = *(_QWORD *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v26)
        goto LABEL_33;
      v15 = *(_QWORD *)(v25 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v26)
          goto LABEL_33;
        v15 = *(_QWORD *)(v25 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
    sub_221653B88();
    sub_221652FD0();
    sub_2215FF3B4();
    swift_retain();
    sub_221653114();
    result = sub_221653BAC();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v25 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v26)
      goto LABEL_33;
    v15 = *(_QWORD *)(v25 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2215FC478()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4C0);
  result = sub_221653870();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v5 << 6);
      }
      else
      {
        v16 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v16 >= v10)
          goto LABEL_35;
        v17 = v6[v16];
        ++v5;
        if (!v17)
        {
          v5 = v16 + 1;
          if (v16 + 1 >= v10)
            goto LABEL_35;
          v17 = v6[v5];
          if (!v17)
          {
            v5 = v16 + 2;
            if (v16 + 2 >= v10)
              goto LABEL_35;
            v17 = v6[v5];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v10)
              {
LABEL_35:
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v5 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_41;
                  if (v5 >= v10)
                    goto LABEL_35;
                  v17 = v6[v5];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v5 = v18;
            }
          }
        }
LABEL_23:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v5 << 6);
      }
      v19 = (__int128 *)(*(_QWORD *)(v2 + 48) + 32 * v15);
      v28 = v19[1];
      v29 = *v19;
      sub_221653B88();
      sub_221653BA0();
      if ((_QWORD)v29)
        sub_221653B94();
      result = sub_221653BAC();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v11 + 8 * v22);
        }
        while (v26 == -1);
        v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_OWORD *)(*(_QWORD *)(v4 + 48) + 32 * v12);
      *v13 = v29;
      v13[1] = v28;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_2215FC75C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4C8);
  result = sub_221653870();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      sub_221653B88();
      sub_221653B94();
      result = sub_221653BAC();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_2215FCA04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4E0);
  v3 = sub_221653870();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = sub_2216536E4();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_2215FCCA0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0B8);
  v3 = sub_221653870();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v27 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v27[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v27[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v27 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v27[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      sub_221653B88();
      sub_221652FD0();
      sub_2215FF3B4();
      sub_221653114();
      result = sub_221653BAC();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_2215FCF94(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_2216537B0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 32 * v6);
        sub_221653B88();
        sub_221653BA0();
        if (v11)
          sub_221653B94();
        v12 = sub_221653BAC() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 < v9)
            goto LABEL_5;
        }
        else if (v12 >= v9)
        {
          goto LABEL_13;
        }
        if (v2 >= (uint64_t)v12)
        {
LABEL_13:
          v13 = *(_QWORD *)(v3 + 48);
          v14 = (_OWORD *)(v13 + 32 * v2);
          v15 = (_OWORD *)(v13 + 32 * v6);
          if (v2 != v6 || (v2 = v6, v14 >= v15 + 2))
          {
            v10 = v15[1];
            *v14 = *v15;
            v14[1] = v10;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_2215FD15C(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_2216537B0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        sub_221653B88();
        sub_221653B94();
        v10 = sub_221653BAC() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 < v9)
            goto LABEL_5;
        }
        else if (v10 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(v3 + 48);
          v12 = (_QWORD *)(v11 + 8 * v2);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v12 >= v13 + 1))
          {
            *v12 = *v13;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v14 = *(_QWORD *)(v3 + 16);
  v15 = __OFSUB__(v14, 1);
  v16 = v14 - 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v16;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_2215FD304(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_2216537B0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v11 = sub_2216536E4();

        v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_2215FD4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4C8);
    v2 = sub_22165387C();
    v14 = v2;
    sub_2216537D4();
    for (; sub_221653834(); ++*(_QWORD *)(v2 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4D0);
      swift_dynamicCast();
      if (*(_QWORD *)(v2 + 24) <= *(_QWORD *)(v2 + 16))
      {
        sub_2215FC75C();
        v2 = v14;
      }
      sub_221653B88();
      sub_221653B94();
      result = sub_221653BAC();
      v4 = v2 + 56;
      v5 = -1 << *(_BYTE *)(v2 + 32);
      v6 = result & ~v5;
      v7 = v6 >> 6;
      if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
      {
        v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v9 = 0;
        v10 = (unint64_t)(63 - v5) >> 6;
        do
        {
          if (++v7 == v10 && (v9 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          v11 = v7 == v10;
          if (v7 == v10)
            v7 = 0;
          v9 |= v11;
          v12 = *(_QWORD *)(v4 + 8 * v7);
        }
        while (v12 == -1);
        v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      }
      *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t sub_2215FD69C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4E0);
    v2 = sub_22165387C();
    v14 = v2;
    sub_2216537D4();
    if (sub_221653834())
    {
      sub_2215FF3FC();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_2215FCA04();
          v2 = v14;
        }
        result = sub_2216536E4();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_221653834());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t sub_2215FD880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0B8);
    v2 = sub_22165387C();
    v14 = v2;
    sub_2216537D4();
    if (sub_221653834())
    {
      type metadata accessor for WorldAnchor();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_2215FCCA0();
          v2 = v14;
        }
        sub_221653B88();
        sub_221652FD0();
        sub_2215FF3B4();
        sub_221653114();
        result = sub_221653BAC();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_221653834());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

unint64_t sub_2215FDAA8(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_221653B88();
  sub_221653B94();
  sub_221653BAC();
  result = sub_2216537BC();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_2215FDB48(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_2216536E4();
  result = sub_2216537BC();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_2215FDBC8(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_221653B88();
  sub_221652FD0();
  sub_2215FF3B4();
  sub_221653114();
  sub_221653BAC();
  result = sub_2216537BC();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_2215FDC8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;

  v11 = *v5;
  sub_221653B88();
  sub_221653BA0();
  if (a2)
    sub_221653B94();
  v12 = sub_221653BAC();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v5;
    *v5 = 0x8000000000000000;
    sub_2215FE6E8(a2, a3, a4, a5, v14, isUniquelyReferenced_nonNull_native);
    *v5 = v20;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_12;
  }
  v15 = ~v13;
  while (1)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 32 * v14);
    if (v16)
      break;
    if (!a2)
      goto LABEL_10;
LABEL_6:
    v14 = (v14 + 1) & v15;
    if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      goto LABEL_11;
  }
  if (!a2 || v16 != a2)
    goto LABEL_6;
LABEL_10:
  result = 0;
  v18 = (uint64_t *)(*(_QWORD *)(*v5 + 48) + 32 * v14);
  a2 = *v18;
  a3 = v18[1];
  a4 = v18[2];
  a5 = v18[3];
LABEL_12:
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t sub_2215FDE00(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DBBC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2215FDE40(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_22165381C();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_2215FF3FC();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_221653810();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_2215FD69C(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_2215FCA04();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_2215FDB48((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_2216536E4();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      sub_2215FF3FC();
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_2216536F0();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_2216536F0();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_2215FE874((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_2215FE0BC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    sub_221653B88();
    sub_221653B94();
    v10 = sub_221653BAC();
    v11 = -1 << *(_BYTE *)(v6 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_23;
    v22 = v2;
    v23 = a1;
    v13 = ~v11;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12);
      swift_beginAccess();
      if (!swift_weakLoadStrong())
        break;
      if (!swift_weakLoadStrong())
      {
        swift_retain();
        swift_release();
        goto LABEL_15;
      }
      swift_retain();
      v14 = sub_221652FAC();
      swift_release();
      swift_release();
      swift_release();
      if ((v14 & 1) != 0)
        goto LABEL_16;
LABEL_10:
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v22;
        a1 = v23;
LABEL_23:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v24 = *v3;
        *v3 = 0x8000000000000000;
        v21 = swift_retain();
        sub_2215FE9E8(v21, v12, isUniquelyReferenced_nonNull_native);
        *v3 = v24;
LABEL_24:
        swift_bridgeObjectRelease();
        *a1 = a2;
        return 1;
      }
    }
    swift_retain();
LABEL_15:
    v16 = *(_QWORD *)(v15 + 24);
    v17 = *(_QWORD *)(a2 + 24);
    swift_release();
    if (v16 == v17)
    {
LABEL_16:
      swift_release();
      swift_bridgeObjectRelease();
      *v23 = *(_QWORD *)(*(_QWORD *)(*v22 + 48) + 8 * v12);
      swift_retain();
      return 0;
    }
    goto LABEL_10;
  }
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = sub_22165381C();
  swift_release();
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4D0);
    swift_dynamicCast();
    *a1 = v25;
    swift_unknownObjectRelease();
    return 0;
  }
  else
  {
    result = sub_221653810();
    if (!__OFADD__(result, 1))
    {
      v18 = sub_2215FD4A4(v7, result + 1);
      v26 = v18;
      if (*(_QWORD *)(v18 + 24) <= *(_QWORD *)(v18 + 16))
      {
        swift_retain();
        sub_2215FC75C();
        v19 = v26;
      }
      else
      {
        v19 = v18;
        swift_retain();
      }
      sub_2215FDAA8(a2, v19);
      *v3 = v19;
      goto LABEL_24;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2215FE3F4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = sub_22165381C();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for WorldAnchor();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_221653810();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v16 = sub_2215FD880(v7, result + 1);
    v22 = v16;
    if (*(_QWORD *)(v16 + 24) <= *(_QWORD *)(v16 + 16))
    {
      swift_retain();
      sub_2215FCCA0();
      v17 = v22;
    }
    else
    {
      v17 = v16;
      swift_retain();
    }
    sub_2215FDBC8(a2, v17);
    *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    sub_221653B88();
    sub_221652FD0();
    sub_2215FF3B4();
    swift_bridgeObjectRetain();
    sub_221653114();
    v10 = sub_221653BAC();
    v11 = -1 << *(_BYTE *)(v6 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    {
      swift_retain();
      v13 = sub_221652FAC();
      swift_release();
      if ((v13 & 1) != 0)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      v14 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v14;
        if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        swift_retain();
        v15 = sub_221652FAC();
        swift_release();
        if ((v15 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v2;
    *v2 = 0x8000000000000000;
    v19 = swift_retain();
    sub_2215FEC14(v19, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v23;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_2215FE6E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v11 = result;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_18;
  if ((a6 & 1) != 0)
  {
    sub_2215FC478();
  }
  else
  {
    if (v13 > v12)
    {
      result = (uint64_t)sub_2215FB4FC();
      goto LABEL_18;
    }
    sub_2215FB9EC();
  }
  v14 = *v6;
  sub_221653B88();
  sub_221653BA0();
  if (v11)
    sub_221653B94();
  result = sub_221653BAC();
  v15 = -1 << *(_BYTE *)(v14 + 32);
  a5 = result & ~v15;
  if (((*(_QWORD *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v16 = ~v15;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 32 * a5);
      if (v17)
      {
        if (v11 && v17 == v11)
        {
LABEL_17:
          type metadata accessor for vImage_Buffer(0);
          result = sub_221653B58();
          __break(1u);
          break;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      a5 = (a5 + 1) & v16;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0);
  }
LABEL_18:
  v18 = *v6;
  *(_QWORD *)(*v6 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v19 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 32 * a5);
  *v19 = v11;
  v19[1] = a2;
  v19[2] = a3;
  v19[3] = a4;
  v20 = *(_QWORD *)(v18 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v22;
  return result;
}

void sub_2215FE874(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_2215FCA04();
  }
  else
  {
    if (v7 > v6)
    {
      sub_2215FB6A4();
      goto LABEL_14;
    }
    sub_2215FBF20();
  }
  v8 = *v3;
  v9 = sub_2216536E4();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_2215FF3FC();
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_2216536F0();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_221653B58();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_2216536F0();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

uint64_t sub_2215FE9E8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_18;
  if ((a3 & 1) != 0)
  {
    sub_2215FC75C();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_2215FB84C(&qword_2556DC4C8);
      goto LABEL_18;
    }
    sub_2215FBCA0();
  }
  v8 = *v3;
  sub_221653B88();
  sub_221653B94();
  result = sub_221653BAC();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    swift_beginAccess();
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * a2);
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        if (swift_weakLoadStrong())
        {
          swift_retain();
          v11 = sub_221652FAC();
          swift_release();
          swift_release();
          result = swift_release();
          if ((v11 & 1) != 0)
            goto LABEL_17;
          goto LABEL_11;
        }
        swift_retain();
        swift_release();
      }
      else
      {
        swift_retain();
      }
      v13 = *(_QWORD *)(v12 + 24);
      v14 = *(_QWORD *)(v5 + 24);
      result = swift_release();
      if (v13 == v14)
      {
LABEL_17:
        __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4D0);
        result = sub_221653B58();
        __break(1u);
        break;
      }
LABEL_11:
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_18:
  v15 = *v19;
  *(_QWORD *)(*v19 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v5;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

uint64_t sub_2215FEC14(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_2215FCCA0();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_2215FB84C(&qword_2556DA0B8);
      goto LABEL_14;
    }
    sub_2215FC198();
  }
  v9 = *v3;
  sub_221653B88();
  sub_221652FD0();
  sub_2215FF3B4();
  sub_221653114();
  result = sub_221653BAC();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for WorldAnchor();
    swift_retain();
    v11 = sub_221652FAC();
    result = swift_release();
    if ((v11 & 1) != 0)
    {
LABEL_13:
      result = sub_221653B58();
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        swift_retain();
        v13 = sub_221652FAC();
        result = swift_release();
        if ((v13 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = v6;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

uint64_t sub_2215FEDFC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void (*v10)(_QWORD *);
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_2216539F0();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = sub_2216539F0();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_2215D2238(&qword_2556DC4B0, &qword_2556DC4A8, MEMORY[0x24BEE12E0]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4A8);
            v10 = sub_2215FEFA0(v13, i, a3);
            v12 = *v11;
            swift_retain();
            ((void (*)(uint64_t (**)(), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for PatchTracker.Patch();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*sub_2215FEFA0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_2215FF020(v6, a2, a3);
  return sub_2215FEFF4;
}

void sub_2215FEFF4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_2215FF020(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x22766ED44](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_2215FF08C;
  }
  __break(1u);
  return result;
}

uint64_t sub_2215FF08C()
{
  return swift_release();
}

uint64_t sub_2215FF094(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_2215FF0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DBBC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2215FF100(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v20;
  __int128 v21;

  v12 = v11;
  *(_QWORD *)(v11 + 136) = 0;
  *(_DWORD *)(v11 + 144) = 0;
  *(_BYTE *)(v11 + 148) = 1;
  v13 = qword_2556DBBB8;
  *(_QWORD *)(v11 + 16) = qword_2556DBBB8;
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    qword_2556DBBB8 = v15;
    *(double *)(v12 + 24) = a5;
    *(double *)(v12 + 32) = a6;
    *(double *)(v12 + 40) = a7;
    *(double *)(v12 + 48) = a8;
    *(double *)(v12 + 56) = a9;
    *(double *)(v12 + 64) = a10;
    *(_QWORD *)(v12 + 128) = result;
    *(float *)(v12 + 120) = a11;
    *(_QWORD *)(v12 + 112) = a4;
    swift_retain();
    PatchTracker.Keyframe.getRay(screenPoint:sceneView:)(a9, a10, a2, a3);
    *(_OWORD *)(v12 + 80) = v20;
    *(_OWORD *)(v12 + 96) = v21;
    return v12;
  }
  return result;
}

unint64_t sub_2215FF1AC()
{
  unint64_t result;

  result = qword_2556DBBF0;
  if (!qword_2556DBBF0)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PatchTracker.DebugOptions, &type metadata for PatchTracker.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DBBF0);
  }
  return result;
}

unint64_t sub_2215FF1F4()
{
  unint64_t result;

  result = qword_2556DBBF8;
  if (!qword_2556DBBF8)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PatchTracker.DebugOptions, &type metadata for PatchTracker.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DBBF8);
  }
  return result;
}

unint64_t sub_2215FF23C()
{
  unint64_t result;

  result = qword_2556DBC00;
  if (!qword_2556DBC00)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PatchTracker.DebugOptions, &type metadata for PatchTracker.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DBC00);
  }
  return result;
}

unint64_t sub_2215FF284()
{
  unint64_t result;

  result = qword_2556DBC08;
  if (!qword_2556DBC08)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PatchTracker.DebugOptions, &type metadata for PatchTracker.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DBC08);
  }
  return result;
}

void sub_2215FF2C8(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = PatchTracker.viewportSize.getter();
  *(_QWORD *)(a1 + 8) = v2;
}

__n128 sub_2215FF2F0(__n128 *a1, __n128 **a2)
{
  __n128 *v2;
  __n128 result;

  v2 = *a2;
  result = *a1;
  v2[2] = *a1;
  v2[3].n128_u8[0] = 0;
  return result;
}

uint64_t type metadata accessor for PatchTracker()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PatchTracker.Keyframe()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PatchTracker.Patch()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PatchTracker.DebugOptions()
{
  return &type metadata for PatchTracker.DebugOptions;
}

uint64_t sub_2215FF374(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2215FF380(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

unint64_t sub_2215FF3B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2556DA0C0;
  if (!qword_2556DA0C0)
  {
    v1 = sub_221652FD0();
    result = MEMORY[0x22766FA4C](MEMORY[0x24BDCEA88], v1);
    atomic_store(result, (unint64_t *)&qword_2556DA0C0);
  }
  return result;
}

unint64_t sub_2215FF3FC()
{
  unint64_t result;

  result = qword_2556DC4D8;
  if (!qword_2556DC4D8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2556DC4D8);
  }
  return result;
}

double sub_2215FF438(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t *sub_2215FF45C(uint64_t *a1)
{
  sub_2215EC2FC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return a1;
}

uint64_t sub_2215FF4C4()
{
  swift_unownedRelease();
  return swift_deallocObject();
}

size_t sub_2215FF4E8@<X0>(size_t *a1@<X8>)
{
  return sub_2215F40E8(a1);
}

CGImageRef static CGImageRef.fromByteArrayGray(_:width:height:)(uint64_t a1, size_t a2, size_t a3)
{
  CGColorSpace *DeviceGray;
  CGContext *v7;
  CGContext *v8;
  CGImageRef Image;

  DeviceGray = CGColorSpaceCreateDeviceGray();
  v7 = CGBitmapContextCreate((void *)(a1 + 32), a2, a3, 8uLL, a2, DeviceGray, 0);
  if (v7)
  {
    v8 = v7;
    Image = CGBitmapContextCreateImage(v7);

  }
  else
  {
    Image = 0;
  }

  return Image;
}

CGImageRef static CGImageRef.fromByteArrayRGBA(_:width:height:)(CGImageRef result, size_t a2, size_t a3)
{
  CGImageRef v5;
  size_t v6;
  CGColorSpace *DeviceRGB;
  CGContext *v8;
  CGContext *v9;
  CGImageRef Image;

  if ((a2 - 0x2000000000000000) >> 62 == 3)
  {
    v5 = result;
    v6 = 4 * a2;
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v8 = CGBitmapContextCreate((char *)v5 + 32, a2, a3, 8uLL, v6, DeviceRGB, 1u);
    if (v8)
    {
      v9 = v8;
      Image = CGBitmapContextCreateImage(v8);

    }
    else
    {
      Image = 0;
    }

    return Image;
  }
  else
  {
    __break(1u);
  }
  return result;
}

int64_t CGImageRef.toByteArrayRGBA()()
{
  CGImage *v0;
  int64_t Width;
  int64_t result;
  int64_t v3;
  size_t v4;
  uint64_t v5;
  CGColorSpace *v6;
  CGColorSpace *v7;
  size_t v8;
  size_t Height;
  size_t BitsPerComponent;
  size_t BytesPerRow;
  CGContextRef v12;
  CGColorSpace *v13;

  Width = CGImageGetWidth(v0);
  result = CGImageGetHeight(v0);
  v3 = Width * result;
  if ((unsigned __int128)(Width * (__int128)result) >> 64 != (Width * result) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((unint64_t)(v3 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v4 = 4 * v3;
  if (4 * v3 < 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v4)
  {
    v5 = sub_221653390();
    *(_QWORD *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), v4);
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  v6 = CGImageGetColorSpace(v0);
  if (v6)
  {
    v7 = v6;
    v8 = CGImageGetWidth(v0);
    Height = CGImageGetHeight(v0);
    BitsPerComponent = CGImageGetBitsPerComponent(v0);
    BytesPerRow = CGImageGetBytesPerRow(v0);
    v12 = CGBitmapContextCreate((void *)(v5 + 32), v8, Height, BitsPerComponent, BytesPerRow, v7, 1u);
    if (v12)
    {
      v13 = v12;
      CGImageGetWidth(v0);
      CGImageGetHeight(v0);
      sub_22165360C();

      v7 = v13;
    }

  }
  return v5;
}

BOOL sub_2215FF768(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t PlaneSelector.ADTestMode.rawValue.getter(uint64_t result)
{
  return result;
}

int *PlaneSelector.firstPointMaxDistanceSquared.unsafeMutableAddressor()
{
  if (qword_2556D8E60 != -1)
    swift_once();
  return &static PlaneSelector.firstPointMaxDistanceSquared;
}

uint64_t *PlaneSelector.DebuggerClass.unsafeMutableAddressor()
{
  return &static PlaneSelector.DebuggerClass;
}

uint64_t static PlaneSelector.DebuggerClass.getter()
{
  swift_beginAccess();
  return static PlaneSelector.DebuggerClass;
}

uint64_t static PlaneSelector.DebuggerClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_beginAccess();
  static PlaneSelector.DebuggerClass = a1;
  qword_2556E4538 = a2;
  return result;
}

uint64_t (*static PlaneSelector.DebuggerClass.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_2215FF8EC()
{
  id v0;
  void *v1;
  float v2;
  float v3;
  float v4;

  if (objc_msgSend((id)objc_opt_self(), sel_jasperAvailable))
  {
    v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v1 = (void *)sub_22165318C();
    objc_msgSend(v0, sel_floatForKey_, v1);
    v3 = v2;

    v4 = v3 * v3;
  }
  else
  {
    if (qword_2556D8EA8 != -1)
      swift_once();
    v4 = 1.0;
    if (static MeasureCore.isTrackingVGAEnabled)
      v4 = 4.0;
  }
  static PlaneSelector.firstPointMaxDistanceSquared = LODWORD(v4);
}

float static PlaneSelector.firstPointMaxDistanceSquared.getter()
{
  if (qword_2556D8E60 != -1)
    swift_once();
  return *(float *)&static PlaneSelector.firstPointMaxDistanceSquared;
}

uint64_t PlaneSelector.PatchTrackingMode.debugDescription.getter(uint64_t a1)
{
  return sub_2215FFA44(a1, 21584);
}

uint64_t sub_2215FFA2C(uint64_t a1, uint64_t a2)
{
  return sub_2215FFABC(a1, a2, 21584);
}

uint64_t PlaneSelector.patchTrackingMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t PlaneSelector.ADTestMode.debugDescription.getter(uint64_t a1)
{
  return sub_2215FFA44(a1, 17473);
}

uint64_t sub_2215FFA44(uint64_t a1, uint64_t a2)
{
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_2215FFAB4(uint64_t a1, uint64_t a2)
{
  return sub_2215FFABC(a1, a2, 17473);
}

uint64_t sub_2215FFABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_221653ABC();
  sub_221653210();
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t PlaneSelector.adTestMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 85);
}

char *sub_2215FFB30()
{
  uint64_t v0;
  char *v1;

  if (*(_QWORD *)(v0 + 160))
  {
    v1 = *(char **)(v0 + 160);
  }
  else
  {
    v1 = sub_221606EB8();
    *(_QWORD *)(v0 + 160) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlaneSelector.debugOptions.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 176) != 1)
    return *(_QWORD *)(v0 + 168);
  if (qword_2556D8E78 != -1)
    swift_once();
  swift_beginAccess();
  result = static PlaneSelector.DebugOptions.default;
  *(_QWORD *)(v0 + 168) = static PlaneSelector.DebugOptions.default;
  *(_BYTE *)(v0 + 176) = 0;
  return result;
}

uint64_t *PlaneSelector.DebugOptions.default.unsafeMutableAddressor()
{
  if (qword_2556D8E78 != -1)
    swift_once();
  return &static PlaneSelector.DebugOptions.default;
}

uint64_t PlaneSelector.debugOptions.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = result;
  *(_BYTE *)(v1 + 176) = 0;
  return result;
}

_QWORD *(*PlaneSelector.debugOptions.modify(uint64_t *a1))(_QWORD *result)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = PlaneSelector.debugOptions.getter();
  return sub_2215FFC8C;
}

_QWORD *sub_2215FFC8C(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 168) = *result;
  *(_BYTE *)(v1 + 176) = 0;
  return result;
}

uint64_t property wrapper backing initializer of PlaneSelector.planeSelectionStats(_OWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  __int128 v4;
  __int128 v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4F8);
  v2 = swift_allocObject();
  v3 = (_DWORD *)swift_slowAlloc();
  *v3 = 0;
  *(_QWORD *)(v2 + 80) = v3;
  v4 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v4;
  v5 = a1[3];
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 64) = v5;
  return v2;
}

__n128 PlaneSelector.planeSelectionStats.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;

  v3 = *(_QWORD *)(v1 + 224);
  v4 = *(os_unfair_lock_s **)(v3 + 80);
  swift_retain();
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  v9 = *(_OWORD *)(v3 + 32);
  v10 = *(_OWORD *)(v3 + 16);
  v8 = *(__n128 *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(v3 + 72);
  os_unfair_lock_unlock(v4);
  swift_release();
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v9;
  result = v8;
  *(__n128 *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  return result;
}

__n128 sub_2215FFD9C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v4 = *(os_unfair_lock_s **)(v3 + 80);
  swift_retain();
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  v9 = *(_OWORD *)(v3 + 32);
  v10 = *(_OWORD *)(v3 + 16);
  v8 = *(__n128 *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(v3 + 72);
  os_unfair_lock_unlock(v4);
  swift_release();
  *(_OWORD *)a2 = v10;
  *(_OWORD *)(a2 + 16) = v9;
  result = v8;
  *(__n128 *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t sub_2215FFE40(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = a1[1];
  v9 = *a1;
  v7 = a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 224);
  v5 = *(os_unfair_lock_s **)(v4 + 80);
  swift_retain();
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  *(_OWORD *)(v4 + 16) = v9;
  *(_OWORD *)(v4 + 32) = v8;
  *(_OWORD *)(v4 + 48) = v7;
  *(_QWORD *)(v4 + 64) = v2;
  *(_QWORD *)(v4 + 72) = v3;
  os_unfair_lock_unlock(v5);
  return swift_release();
}

void __swiftcall PlaneSelector.PlaneSelectionStats.init()(MeasureFoundation::PlaneSelector::PlaneSelectionStats *__return_ptr retstr)
{
  *(_OWORD *)&retstr->inferredCount = 0u;
  *(_OWORD *)&retstr->prevCount = 0u;
  *(_OWORD *)&retstr->adCount = 0u;
  *(_OWORD *)&retstr->localPlaneCount = 0u;
}

void sub_2215FFEE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(id, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v7 = v6;
  v41 = a4;
  v42 = a6;
  v40 = a1;
  *(_OWORD *)(v7 + 16) = xmmword_221657C80;
  *(_DWORD *)(v7 + 32) = 1063105069;
  *(_OWORD *)(v7 + 40) = xmmword_221657C90;
  *(_QWORD *)(v7 + 56) = 1;
  *(_OWORD *)(v7 + 64) = xmmword_221657CA0;
  *(_DWORD *)(v7 + 80) = 1106247680;
  v11 = (void *)objc_opt_self();
  v12 = objc_msgSend(v11, sel_standardUserDefaults);
  v13 = (void *)sub_22165318C();
  v14 = objc_msgSend(v12, sel_integerForKey_, v13);

  if ((unint64_t)v14 > 4)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(_BYTE *)(v7 + 84) = (_BYTE)v14;
  v15 = objc_msgSend(v11, sel_standardUserDefaults);
  v16 = (void *)sub_22165318C();
  v17 = objc_msgSend(v15, sel_integerForKey_, v16);

  if ((unint64_t)v17 > 3)
  {
LABEL_13:
    __break(1u);
    return;
  }
  *(_OWORD *)(v7 + 184) = 0u;
  *(_BYTE *)(v7 + 85) = (_BYTE)v17;
  *(_DWORD *)(v7 + 136) = 953267991;
  *(_BYTE *)(v7 + 140) = 33;
  *(_QWORD *)(v7 + 144) = 0x3F490FDB41A00000;
  *(_DWORD *)(v7 + 152) = 975427339;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 168) = 0;
  *(_BYTE *)(v7 + 176) = 1;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_QWORD *)(v7 + 216) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC4F8);
  v18 = swift_allocObject();
  v19 = (_DWORD *)swift_slowAlloc();
  *v19 = 0;
  *(_QWORD *)(v18 + 80) = v19;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_QWORD *)(v7 + 224) = v18;
  v21 = v40;
  v20 = v41;
  *(_QWORD *)(v7 + 88) = v40;
  *(_QWORD *)(v7 + 96) = a2;
  *(_QWORD *)(v7 + 104) = a3;
  *(_QWORD *)(v7 + 112) = v20;
  v22 = v42;
  *(_QWORD *)(v7 + 120) = a5;
  *(_QWORD *)(v7 + 128) = v22;
  swift_beginAccess();
  v23 = static PlaneSelector.DebuggerClass;
  if (static PlaneSelector.DebuggerClass)
  {
    v24 = qword_2556E4538;
    v38 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(qword_2556E4538 + 8);
    v39 = &v37;
    v37 = sub_221653714();
    v25 = *(_QWORD *)(v37 - 8);
    MEMORY[0x24BDAC7A8](v37);
    v26 = v21;
    v28 = (char *)&v37 - v27;
    v29 = v26;
    swift_retain();
    swift_retain();
    swift_retain();
    v38(v29, a2, v7, v23, v24);
    v30 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v23) == 1)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v37);
      v46 = 0;
      v44 = 0u;
      v45 = 0u;
    }
    else
    {
      *((_QWORD *)&v45 + 1) = v23;
      v46 = v24;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
      (*(void (**)(uint64_t *, char *, uint64_t))(v30 + 32))(boxed_opaque_existential_1, v28, v23);
    }
    v21 = v40;
  }
  else
  {
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    v31 = v21;
    swift_retain();
    swift_retain();
  }
  swift_beginAccess();
  sub_2216071A0((uint64_t)&v44, v7 + 184);
  swift_endAccess();
  if (qword_2556D8F28 != -1)
    swift_once();
  v33 = qword_2556E46B0;
  v34 = *(_QWORD *)algn_2556E46B8;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = 0xE000000000000000;
  sub_221653894();
  sub_221653210();
  v43 = *(_BYTE *)(v7 + 84);
  sub_221653960();
  v35 = v44;
  v36 = sub_221653618();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(v35, *((uint64_t *)&v35 + 1), v36, 0, v33, v34);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
}

void sub_221600364(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  double v8;
  double v9;
  uint64_t v10;
  id v11;
  id ObjectType;
  double (*v13)(id, uint64_t, double, double);
  CGFloat v14;
  double v15;
  CGFloat v16;
  unsigned int v17;
  unsigned int v18;
  CGPoint v19;
  int x_low;
  id v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  id v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  id v44;
  double v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  float v53;
  float v54;
  float32x4_t v55;
  id v56;
  void *v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  id v65;
  float32x4_t v66;
  uint64_t v67;
  float32x4_t v68;
  double v69;
  simd_float4x4 *v70;
  simd_float4x4 *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  float32x4_t v75;
  id v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(id, uint64_t);
  double v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  float32x4_t v92;
  double (*v93)(id, uint64_t, double, double);
  double v94;
  float32x4_t v95;
  id v96;
  float32x4_t v97;
  _BYTE v98[128];
  _QWORD v99[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _DWORD v109[2];
  unsigned int v110;
  unsigned int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  float32x4_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t v119;
  int v120;
  CGAffineTransform v121;
  __int128 v122;
  float32x4_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  int v128;
  _OWORD v129[4];
  char v130;
  CGAffineTransform v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  int v138;
  CGPoint v139;
  CGPoint v140;

  v8 = *(float *)&a3;
  v9 = *((float *)&a3 + 1);
  v10 = *(_QWORD *)(v3 + 96);
  v11 = objc_msgSend(a1, sel_camera);
  ObjectType = (id)swift_getObjectType();
  v13 = *(double (**)(id, uint64_t, double, double))(v10 + 24);
  v14 = v13(ObjectType, v10, v8, v9);
  v16 = v15;
  v83 = *(void (**)(id, uint64_t))(v10 + 8);
  v83(ObjectType, v10);
  v18 = v17;
  objc_msgSend(v11, sel_imageResolution);
  ARViewToCameraImageTransform();
  v139.x = v14;
  v139.y = v16;
  v19 = CGPointApplyAffineTransform(v139, &v131);
  x_low = LODWORD(v19.x);

  sub_221600C7C(a1, (uint64_t)v98, v8, v9);
  v21 = objc_msgSend(a1, sel_hitTest_types_, 32, v19.x, v19.y);
  sub_2215DDC80(0, &qword_2556DC6A8);
  v22 = sub_221653324();

  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = sub_2216539F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v87 = a2;
  v96 = ObjectType;
  v93 = v13;
  if (v23)
  {
    if ((v22 & 0xC000000000000001) != 0)
    {
      v24 = (id)MEMORY[0x22766ED44](0, v22);
    }
    else
    {
      if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_33;
      }
      v24 = *(id *)(v22 + 32);
    }
    v25 = v24;
    swift_bridgeObjectRelease();
    v26 = objc_msgSend(v25, sel_anchor);
    if (!v26)
      goto LABEL_39;
    v27 = v26;
    type metadata accessor for WorldPlane();
    swift_allocObject();
    v28 = sub_22164164C(v27, 0, 0.0, 1.0);

    objc_msgSend(v25, sel_worldTransform);
    *(_OWORD *)&v131.a = xmmword_221657CB0;
    *(_OWORD *)&v131.c = v29;
    *(_OWORD *)&v131.tx = v30;
    v132 = v31;
    v133 = v32;
    v135 = 0;
    v134 = 0;
    v136 = 1;
    v137 = v28;
    v138 = 0;
    swift_retain_n();
    sub_221641268();
    v88 = v28;
    swift_release_n();

  }
  else
  {
    swift_bridgeObjectRelease();
    v88 = 0;
  }
  sub_22160159C(a1, (uint64_t)v99, v8, v9);
  v33 = v99[0];
  v34 = v99[1];
  v90 = v101;
  v91 = v100;
  v89 = v102;
  v92 = v103;
  v36 = v104;
  v35 = v105;
  v38 = v106;
  v37 = v107;
  x_low = v108;
  sub_2215C6540((uint64_t)v99, (uint64_t)v109, &qword_2556DC6B0);
  if (!v119)
  {
    swift_release();
    sub_221606E68((uint64_t)v98);
    v67 = v36;
LABEL_37:
    *(_QWORD *)v87 = v33;
    *(_QWORD *)(v87 + 8) = v34;
    *(_OWORD *)(v87 + 16) = v91;
    *(_OWORD *)(v87 + 32) = v90;
    *(_OWORD *)(v87 + 48) = v89;
    *(float32x4_t *)(v87 + 64) = v92;
    *(_QWORD *)(v87 + 80) = v67;
    *(_QWORD *)(v87 + 88) = v35;
    *(_QWORD *)(v87 + 96) = v38;
    *(_QWORD *)(v87 + 104) = v37;
    *(_DWORD *)(v87 + 112) = x_low;
    return;
  }
  v86 = v119;
  v18 = v109[0];
  v5 = v109[1];
  v39 = v110;
  v4 = v111;
  v90 = v113;
  v91 = v112;
  v89 = v114;
  v92 = v115;
  v80 = v117;
  v81 = v116;
  v82 = v118;
  x_low = v120;
  if (!v88)
  {
    sub_221606E68((uint64_t)v98);
    v33 = v18 | ((unint64_t)v5 << 32);
    v34 = v39 | ((unint64_t)v4 << 32);
    v38 = v82;
LABEL_36:
    v37 = v86;
    v35 = v80;
    v67 = v81;
    goto LABEL_37;
  }
  v79 = v110;
  swift_retain();
  v40 = objc_msgSend(a1, sel_camera);
  v41 = v93(v96, v10, v8, v9);
  v43 = v42;
  v83(v96, v10);
  objc_msgSend(v40, sel_imageResolution);
  ARViewToCameraImageTransform();
  v140.x = v41;
  v140.y = v43;
  CGPointApplyAffineTransform(v140, &v121);

  v44 = objc_msgSend(a1, sel_camera);
  memset(v129, 0, sizeof(v129));
  v130 = 1;
  *(_QWORD *)&v94 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v44, (uint64_t)v129).n128_u64[0];
  v84 = v45;

  ObjectType = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD988]), sel_initWithOrigin_direction_allowingTarget_alignment_, 0, 2, v94, v84);
  v46 = (void *)(*(uint64_t (**)(id, uint64_t))(v10 + 16))(v96, v10);
  v47 = objc_msgSend(v46, sel_raycast_, ObjectType);

  sub_2215DDC80(0, &qword_2556DC6B8);
  v22 = sub_221653324();

  if (v22 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    v48 = sub_2216539F0();
    swift_bridgeObjectRelease();
    v49 = v86;
    if (v48)
      goto LABEL_14;
LABEL_34:
    swift_bridgeObjectRelease();
    v52 = 0;
    v38 = v82;
LABEL_35:
    sub_221606E68((uint64_t)v99);

    swift_release();
    sub_221606E68((uint64_t)v98);

    v33 = v18 | ((unint64_t)v5 << 32);
    v34 = v79 | ((unint64_t)v4 << 32);
    goto LABEL_36;
  }
  v48 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  v49 = v86;
  if (!v48)
    goto LABEL_34;
LABEL_14:
  v85 = ObjectType;
  if (v48 >= 1)
  {
    v50 = (uint64_t *)(v49 + 16);
    swift_beginAccess();
    v51 = 0;
    v52 = 0;
    v53 = INFINITY;
    v54 = INFINITY;
    do
    {
      if ((v22 & 0xC000000000000001) != 0)
        v56 = (id)MEMORY[0x22766ED44](v51, v22);
      else
        v56 = *(id *)(v22 + 8 * v51 + 32);
      v57 = v56;
      objc_msgSend(v56, sel_worldTransform);
      v97 = v58;
      v60 = vsubq_f32(v92, v59);
      v61 = vmulq_f32(v60, v60);
      v62 = v61.f32[2] + vaddv_f32(*(float32x2_t *)v61.f32);
      v63 = *v50;
      v64 = *(os_unfair_lock_s **)(*v50 + 24);
      sub_221606E90((uint64_t)v99);
      swift_retain();
      os_unfair_lock_lock(v64);
      swift_beginAccess();
      v65 = *(id *)(v63 + 16);
      os_unfair_lock_unlock(v64);
      swift_release();
      sub_221606E68((uint64_t)v99);
      objc_msgSend(v65, sel_transform);
      v95 = v66;

      if (v62 < v54)
      {
        v55 = vmulq_f32(v97, v95);
        v53 = fabsf(v55.f32[2] + vaddv_f32(*(float32x2_t *)v55.f32));

        v54 = v62;
        v52 = v57;
      }
      else
      {

      }
      ++v51;
    }
    while (v48 != v51);
    swift_bridgeObjectRelease();
    if (v52)
    {
      objc_msgSend(v52, sel_worldTransform);
      v38 = v82;
      ObjectType = v85;
      if (v53 > 0.76604 && v54 < 72.25)
      {
        v68.i32[3] = 0;
        _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v69, v68);
        sceneKitToARKit(_:)(v71, v70);
        v90 = v73;
        v91 = v72;
        v89 = v74;
        v92 = v75;
        v76 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD910]), sel_initWithTransform_, *(double *)&v72, *(double *)&v73, *(double *)&v74, *(double *)v75.i64);
        type metadata accessor for WorldPlane();
        swift_allocObject();
        v77 = sub_22164164C(v76, 3, 0.0, 1.0);

        *(_OWORD *)&v121.a = xmmword_221657CB0;
        *(_OWORD *)&v121.c = v91;
        *(_OWORD *)&v121.tx = v90;
        v122 = v89;
        v123 = v92;
        v125 = 0;
        v124 = 0;
        v38 = 1;
        v126 = 1;
        v127 = v77;
        v128 = 0;
        swift_retain();
        sub_221641268();
        x_low = v78;
        swift_release();
        sub_221606E68((uint64_t)v99);

        swift_release();
        sub_221606E68((uint64_t)v98);
        sub_221606E68((uint64_t)v99);

        v37 = v77;
        v67 = 0;
        v35 = 0;
        v34 = 0x3E4CCCCD3D75C28FLL;
        v33 = 0x3F4000003F000000;
        goto LABEL_37;
      }
    }
    else
    {
      v38 = v82;
      ObjectType = v85;
    }
    goto LABEL_35;
  }
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_221600C7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double v15;
  double v16;
  id v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  CGPoint v21;
  id v22;
  unint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _DWORD *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t ObjectType;
  double (*v38)(uint64_t, uint64_t, double, double);
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  CGAffineTransform v41;
  _OWORD v42[4];
  char v43;
  CGPoint v44;

  v9 = *((_QWORD *)sub_2215FFB30() + 2);
  result = swift_bridgeObjectRelease();
  v40 = v9;
  if (v9)
  {
    v36 = a2;
    v11 = *(_QWORD *)(v4 + 96);
    ObjectType = swift_getObjectType();
    v12 = 0;
    v13 = 0;
    v38 = *(double (**)(uint64_t, uint64_t, double, double))(v11 + 24);
    v39 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    do
    {
      v14 = sub_2215FFB30();
      if (v13 >= *((_QWORD *)v14 + 2))
      {
        __break(1u);
        goto LABEL_21;
      }
      v15 = *(double *)&v14[v12 + 32];
      v16 = *(double *)&v14[v12 + 40];
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(a1, sel_camera);
      v18 = v38(ObjectType, v11, v15 + a3, v16 + a4);
      v20 = v19;
      v39(ObjectType, v11);
      objc_msgSend(v17, sel_imageResolution);
      ARViewToCameraImageTransform();
      v44.x = v18;
      v44.y = v20;
      v21 = CGPointApplyAffineTransform(v44, &v41);

      v22 = objc_msgSend(a1, sel_hitTest_types_, 32, v21.x, v21.y);
      sub_2215DDC80(0, &qword_2556DC6A8);
      v23 = sub_221653324();

      if (v23 >> 62)
      {
        swift_bridgeObjectRetain();
        v32 = sub_2216539F0();
        swift_bridgeObjectRelease();
        if (v32)
        {
LABEL_7:
          if ((v23 & 0xC000000000000001) != 0)
          {
            v24 = (id)MEMORY[0x22766ED44](0, v23);
            goto LABEL_10;
          }
          if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v24 = *(id *)(v23 + 32);
LABEL_10:
            v25 = v24;
            swift_bridgeObjectRelease();
            v26 = objc_msgSend(v25, sel_anchor);
            if (v26)
            {
              v27 = v26;
              type metadata accessor for WorldPlane();
              v28 = swift_allocObject();
              *(_OWORD *)(v28 + 24) = xmmword_221657CC0;
              *(_QWORD *)(v28 + 40) = 0x3F5DB22D40000000;
              swift_beginAccess();
              __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC6C0);
              v29 = swift_allocObject();
              v30 = v27;
              v31 = (_DWORD *)swift_slowAlloc();
              *v31 = 0;
              *(_QWORD *)(v29 + 16) = v30;
              *(_QWORD *)(v29 + 24) = v31;
              *(_QWORD *)(v28 + 16) = v29;
              swift_endAccess();
              *(_BYTE *)(v28 + 48) = 0;
              *(_QWORD *)(v28 + 52) = 0x3F80000000000000;
              memset(v42, 0, sizeof(v42));
              v43 = 1;
              if (qword_2556D8DD0 != -1)
                swift_once();
              WorldPlane.refresh(anchor:camera:uncertaintyPoint:)(v30, (uint64_t)v42, (float32x4_t)static SIMD3<>.zero);

              objc_msgSend(v25, sel_worldTransform);
              __asm { BR              X9 }
            }
LABEL_22:
            __break(1u);
            JUMPOUT(0x221601580);
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
      }
      else if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_7;
      }
      swift_bridgeObjectRelease();
      ++v13;
      v12 += 16;
    }
    while (v40 != v13);
    result = swift_release();
    v33 = vdupq_laneq_s64((int64x2_t)0, 1).u64[0];
    v9 = 0;
    a2 = v36;
    v35 = 0u;
    v34 = 0u;
  }
  else
  {
    v33 = 0uLL;
    v34 = 0uLL;
    v35 = 0uLL;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = v34;
  *(_OWORD *)(a2 + 32) = v35;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 72) = v33;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  return result;
}

id sub_22160159C@<X0>(void *a1@<X0>, uint64_t a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>)
{
  id result;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  float32x4_t v21;
  __int128 v22;
  float v23;
  double v24;
  float32x4_t v25;
  double v26;
  double v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _DWORD *v32;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  _BYTE v38[96];

  result = objc_msgSend((id)objc_opt_self(), sel_jasperAvailable);
  if (!(_DWORD)result)
    goto LABEL_21;
  v7 = sub_2215FFB30();
  v8 = *((_QWORD *)v7 + 2);
  if (v8)
  {
    v37 = MEMORY[0x24BEE4AF8];
    sub_2215CC064(0, v8, 0);
    v9 = 0;
    v10 = v37;
    v11 = *(_QWORD *)(v37 + 16);
    v12.f64[0] = a3;
    v12.f64[1] = a4;
    do
    {
      v13 = *(float64x2_t *)&v7[16 * v9 + 32];
      v14 = *(_QWORD *)(v37 + 24);
      if (v11 >= v14 >> 1)
      {
        v35 = *(float64x2_t *)&v7[16 * v9 + 32];
        v36 = v12;
        sub_2215CC064((char *)(v14 > 1), v11 + 1, 1);
        v13 = v35;
        v12 = v36;
      }
      ++v9;
      *(_QWORD *)(v37 + 16) = v11 + 1;
      *(float64x2_t *)(v37 + 16 * v11++ + 32) = vaddq_f64(v13, v12);
    }
    while (v8 != v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  if (qword_2556D8EB0 != -1)
    swift_once();
  v15 = static MeasureCore.shared;
  swift_beginAccess();
  if (!*(_QWORD *)(v15 + 112))
  {
    result = (id)swift_bridgeObjectRelease();
LABEL_21:
    v16 = 0;
    goto LABEL_22;
  }
  swift_retain();
  v16 = sub_2215F000C(v10, a1);
  swift_bridgeObjectRelease();
  result = (id)swift_release();
  if (!v16)
  {
LABEL_22:
    v17 = 0;
    goto LABEL_23;
  }
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = 0;
    do
    {
      v19 = v16 + v18;
      if ((*(_BYTE *)(v16 + v18 + 104) & 1) == 0)
      {
        v20 = *(double *)(v19 + 80);
        v22 = *(_OWORD *)(v19 + 64);
        v21.i64[1] = DWORD2(v22);
        v21.i64[0] = v22;
        v23 = (float)*(uint64_t *)(v19 + 96) * -0.5;
        v24 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v20, v21);
        v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD910]), sel_initWithTransform_, v24, v26, *(double *)vsubq_f32((float32x4_t)0, v25).i64, v27);
        type metadata accessor for WorldPlane();
        v29 = swift_allocObject();
        *(_OWORD *)(v29 + 24) = xmmword_221657CC0;
        *(_QWORD *)(v29 + 40) = 0x3F5DB22D40000000;
        swift_beginAccess();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC6C0);
        v30 = swift_allocObject();
        v31 = v28;
        v32 = (_DWORD *)swift_slowAlloc();
        *v32 = 0;
        *(_QWORD *)(v30 + 16) = v31;
        *(_QWORD *)(v30 + 24) = v32;
        *(_QWORD *)(v29 + 16) = v30;
        swift_endAccess();
        *(_BYTE *)(v29 + 48) = 6;
        *(float *)(v29 + 52) = v23 + 1.0;
        *(_DWORD *)(v29 + 56) = 1065353216;
        memset(v38, 0, 64);
        v38[64] = 1;
        if (qword_2556D8DD0 != -1)
          swift_once();
        WorldPlane.refresh(anchor:camera:uncertaintyPoint:)(v31, (uint64_t)v38, (float32x4_t)static SIMD3<>.zero);

        __asm { BR              X9 }
      }
      v18 += 80;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    result = (id)swift_release();
    v17 = 0;
    v16 = 0;
  }
  else
  {
    result = (id)swift_bridgeObjectRelease();
    v16 = 0;
  }
LABEL_23:
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  return result;
}

uint64_t sub_221602024@<X0>(void *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t ObjectType;
  CGFloat v14;
  double v15;
  CGFloat v16;
  __n128 v17;
  __n128 v18;
  CGPoint v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  int8x16_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  simd_float4x4 *v51;
  simd_float4x4 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  float32x4_t v56;
  id v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  uint64_t *v94;
  id v95;
  uint64_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float32x2_t v101;
  __n128 v102;
  float32x4_t v103;
  uint64_t v104;
  unsigned int v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  os_unfair_lock_s *v110;
  id v111;
  int v112;
  uint64_t v113;
  os_unfair_lock_s *v114;
  id v115;
  os_unfair_lock_s *v116;
  unsigned __int8 v117;
  int v118;
  float32x4_t v119;
  unint64_t v120;
  uint64_t result;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float32x4_t v133;
  int v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float32x2_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  float32x2_t v147;
  float32x2_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float32x2_t v156;
  float32x2_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float32x2_t v161;
  float32x2_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int8x16_t v166;
  int8x16_t v167;
  __int128 v168;
  uint64_t v169;
  float32x2_t v170;
  float32x2_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  float32x2_t v176;
  float32x2_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x4_t v184;
  uint64_t v185;
  uint64_t v186;
  float32x4_t v187;
  uint64_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float32x4_t v191;
  uint64_t v192;
  id v194;
  __n128 v195;
  __n128 v196;
  uint64_t v197;
  uint64_t v198;
  float32x4_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  float32x4_t v204;
  __int128 v205;
  __int128 v206;
  float v207;
  _BYTE v208[112];
  int v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  float v217;
  _QWORD v218[13];
  uint64_t v219;
  int v220;
  _QWORD v221[14];
  int v222;
  _OWORD v223[6];
  uint64_t v224;
  uint64_t v225;
  int v226;
  _QWORD v227[14];
  float v228;
  _QWORD v229[14];
  float v230;
  float32x2_t v231[14];
  float v232;
  _BYTE v233[128];
  char v234[104];
  uint64_t v235;
  CGAffineTransform v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  CGAffineTransform v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  char v250[64];
  int8x16_t v251;
  uint64_t v252;
  float v253;
  char v254[8];
  _QWORD v255[14];
  int v256;
  _QWORD v257[14];
  int v258;
  _OWORD v259[6];
  uint64_t v260;
  uint64_t v261;
  int v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  char v269;
  float32x2_t v270;
  float v271;
  _BYTE v272[80];
  _QWORD v273[14];
  float v274;
  _QWORD v275[14];
  float v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  float32x4_t v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  uint64_t v285;
  int v286;
  uint64_t v287[3];
  CGPoint v288;

  *(double *)&v9 = *(float *)&a5;
  *(double *)&v10 = *((float *)&a5 + 1);
  v11 = *(_QWORD *)(v5 + 96);
  v12 = objc_msgSend(a1, sel_camera);
  ObjectType = swift_getObjectType();
  v14 = (*(double (**)(uint64_t, uint64_t, double, double))(v11 + 24))(ObjectType, v11, *(double *)&v9, *(double *)&v10);
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(ObjectType, v11);
  objc_msgSend(v12, sel_imageResolution);
  ARViewToCameraImageTransform();
  v288.x = v14;
  v288.y = v16;
  v19 = CGPointApplyAffineTransform(v288, &v243);
  v18.n128_f64[0] = v19.y;
  v17.n128_f64[0] = v19.x;
  v195 = v17;
  v196 = v18;

  v209 = 0;
  memset(v208, 0, sizeof(v208));
  v198 = v5;
  v194 = a1;
  if (a3 && !sub_2215FF768(0, a3))
  {
    v185 = 0;
    v178 = 0;
    v172 = 0;
    v165 = 0;
    v158 = 0;
    v163 = 0;
    v151 = 0;
    v153 = 0;
    v144 = 0;
    v149 = 0;
    v137 = 0;
    v140 = 0;
    v135 = 0;
    v20 = 0;
    v134 = 0;
  }
  else
  {
    sub_221600C7C(a1, (uint64_t)v218, *(double *)&v9, *(double *)&v10);
    v20 = v219;
    v185 = v218[0];
    v178 = v218[1];
    v172 = v218[2];
    v165 = v218[3];
    v158 = v218[5];
    v163 = v218[4];
    v151 = v218[7];
    v153 = v218[6];
    v144 = v218[9];
    v149 = v218[8];
    v137 = v218[11];
    v140 = v218[10];
    v135 = v218[12];
    v134 = v220;
    if (!a3)
    {
      v197 = v219;
      goto LABEL_7;
    }
  }
  v197 = v20;
  if (!sub_2215FF768(3, a3))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v131 = 0;
    v132 = 0;
    v129 = 0;
    v130 = 0;
    v127 = 0;
    v128 = 0;
    v192 = 0;
    v126 = 0;
    goto LABEL_10;
  }
LABEL_7:
  sub_221603398(a1, (uint64_t)v221, *(double *)&v9, *(double *)&v10);
  v21 = v221[0];
  v22 = v221[1];
  v23 = v221[2];
  v24 = v221[3];
  v25 = v221[4];
  v26 = v221[5];
  v27 = v221[6];
  v131 = v221[8];
  v132 = v221[7];
  v127 = v221[11];
  v128 = v221[10];
  v129 = v221[12];
  v130 = v221[9];
  v192 = v221[13];
  v126 = v222;
  if (!a3)
    goto LABEL_11;
LABEL_10:
  if (sub_2215FF768(1, a3))
  {
LABEL_11:
    sub_221603860(v194, (uint64_t)a2, (uint64_t)v223, *(double *)&v9, *(double *)&v10);
    v28 = v223[0];
    v29 = v223[1];
    v30 = v223[2];
    v31 = v223[3];
    v32 = v223[4];
    v33 = v223[5];
    v34 = v224;
    v35 = v225;
    v36 = v226;
    goto LABEL_13;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v28 = 0uLL;
  v29 = 0uLL;
  v30 = 0uLL;
  v31 = 0uLL;
  v32 = 0uLL;
  v33 = 0uLL;
LABEL_13:
  v262 = v36;
  v257[0] = v185;
  v257[1] = v178;
  v257[2] = v172;
  v257[3] = v165;
  v257[4] = v163;
  v257[5] = v158;
  v257[6] = v153;
  v257[7] = v151;
  v257[8] = v149;
  v257[9] = v144;
  v257[10] = v140;
  v257[11] = v137;
  v257[12] = v135;
  v258 = v134;
  v255[0] = v21;
  v255[1] = v22;
  v255[2] = v23;
  v255[3] = v24;
  v255[4] = v25;
  v255[5] = v26;
  v255[6] = v27;
  v255[7] = v132;
  v255[8] = v131;
  v255[9] = v130;
  v255[10] = v128;
  v255[11] = v127;
  v260 = v34;
  v259[0] = v28;
  v259[1] = v29;
  v259[2] = v30;
  v259[3] = v31;
  v259[4] = v32;
  v259[5] = v33;
  v152 = v35;
  v261 = v35;
  v257[13] = v197;
  v256 = v126;
  v255[12] = v129;
  v255[13] = v192;
  v125 = a4;
  if (a3 && !sub_2215FF768(6, a3)
    || !objc_msgSend((id)objc_opt_self(), sel_jasperAvailable)
    || !*(_BYTE *)(v198 + 85))
  {
    v37 = 0;
    v69 = 0;
    v62 = 0;
    v64 = 0;
    v63 = 0;
    v67 = 0;
    v65 = 0;
    v68 = 0;
    v66 = 0;
    v70 = 0;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    v41 = 0;
    v207 = 0.0;
    v205 = 0u;
    v206 = 0u;
    v204 = 0u;
    v202 = 0u;
    v203 = 0u;
    v200 = 0u;
    v201 = 0u;
    v42 = 0.0;
    goto LABEL_26;
  }
  sub_22160159C(v194, (uint64_t)v227, *(float64_t *)&v9, *(float64_t *)&v10);
  v37 = v227[0];
  v186 = v227[2];
  v173 = v227[4];
  v179 = v227[5];
  v154 = v227[6];
  v159 = v227[3];
  v145 = v227[1];
  v150 = v227[7];
  v138 = v227[9];
  v141 = v227[8];
  v38 = v227[10];
  v39 = v227[11];
  v40 = v227[12];
  v41 = v227[13];
  v42 = v228;
  sub_2215C6540((uint64_t)v227, (uint64_t)&v200, &qword_2556DC6B0);
  sub_2215C6540((uint64_t)v227, (uint64_t)v250, &qword_2556DC6B0);
  v43 = v252;
  if (!v252)
  {
    a4 = v125;
LABEL_25:
    v62 = v186;
    v65 = v154;
    v64 = v159;
    v69 = v145;
    v68 = v150;
    v59 = v40;
    v63 = v173;
    v60 = v38;
    v67 = v179;
    v61 = v39;
    v70 = v138;
    v66 = v141;
    goto LABEL_26;
  }
  v166 = v251;
  v44 = v253;
  v45 = qword_2556D8EB0;
  swift_retain();
  if (v45 != -1)
    swift_once();
  v46 = v166;
  v46.i32[3] = 0;
  v167 = v46;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC6D0);
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_221655530;
  sub_2215C6540((uint64_t)v255, v47 + 32, &qword_2556DC6B0);
  sub_2215C6540((uint64_t)v257, v47 + 160, &qword_2556DC6B0);
  sub_2215C6540((uint64_t)v259, v47 + 288, &qword_2556DC6B0);
  v133.i64[0] = sub_221616C90(v47, v167);
  v133.i64[1] = v48;
  v136 = v49;
  swift_setDeallocating();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC6B0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if ((v136 & 1) != 0)
  {
    sub_221606E68((uint64_t)v227);
    a4 = v125;
    goto LABEL_25;
  }
  v50 = *(_BYTE *)(v43 + 48);
  _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(*(double *)v167.i64, v133);
  sceneKitToARKit(_:)(v52, v51);
  v168 = v53;
  v174 = v54;
  v180 = v55;
  v187 = v56;
  v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD910]), sel_initWithTransform_, *(double *)&v53, *(double *)&v55, *(double *)&v54, *(double *)v56.i64);
  type metadata accessor for WorldPlane();
  swift_allocObject();
  v41 = sub_22164164C(v57, v50, 1.0 - v44, 1.0);

  v277 = xmmword_221657CB0;
  v278 = v168;
  v279 = v180;
  v280 = v174;
  v281 = v187;
  v283 = 0;
  v282 = 0;
  v284 = 1;
  v285 = v41;
  v286 = 0;
  swift_retain();
  sub_221641268();
  v42 = v58;
  swift_release();
  sub_221606E68((uint64_t)v227);
  sub_221606E68((uint64_t)v227);
  v59 = 1;
  v60 = 0;
  v61 = 0;
  v200 = xmmword_221657CB0;
  v201 = v168;
  v202 = v180;
  v203 = v174;
  v204 = v187;
  v205 = 0uLL;
  *(_QWORD *)&v206 = 1;
  *((_QWORD *)&v206 + 1) = v41;
  v62 = v168;
  v63 = v180;
  v207 = v42;
  v64 = *((_QWORD *)&v168 + 1);
  v65 = v174;
  v66 = v187.i64[0];
  v67 = *((_QWORD *)&v180 + 1);
  v68 = *((_QWORD *)&v174 + 1);
  v69 = 0x3E4CCCCD3D75C28FLL;
  v37 = 0x3F4000003F000000;
  v70 = v187.i64[1];
  a4 = v125;
LABEL_26:
  v164 = v41;
  v169 = v37;
  v275[0] = v37;
  v142 = v66;
  v146 = v69;
  v275[1] = v69;
  v188 = v62;
  v275[2] = v62;
  v71 = v64;
  v275[3] = v64;
  v175 = v63;
  v275[4] = v63;
  v181 = v67;
  v275[5] = v67;
  v72 = v65;
  v275[6] = v65;
  v73 = v68;
  v275[7] = v68;
  v275[8] = v66;
  v74 = v70;
  v275[9] = v70;
  v75 = v60;
  v275[10] = v60;
  v139 = v61;
  v275[11] = v61;
  v76 = v59;
  v275[12] = v59;
  v275[13] = v41;
  v276 = v42;
  if (objc_msgSend((id)objc_opt_self(), sel_jasperAvailable))
  {
    v77 = *(unsigned __int8 *)(v198 + 85);
    if (v77 == 3)
    {
      sub_2215C6540((uint64_t)v275, (uint64_t)&v210, &qword_2556DC6B0);
      swift_retain_n();
      v78 = v41;
      sub_221603DF4(a2, v198, (uint64_t)v255, (uint64_t)v257, (uint64_t)v259, (uint64_t)v208, (uint64_t)&v200, (uint64_t)&v210, v195, v196, (uint64_t)v194);
      swift_release_n();
      v155 = v72;
      v160 = v71;
      v79 = v142;
      v80 = v75;
      v81 = v146;
      v82 = v139;
LABEL_82:
      swift_release();
      swift_release();
      result = swift_release();
      *(_QWORD *)a4 = v169;
      *(_QWORD *)(a4 + 8) = v81;
      *(_QWORD *)(a4 + 16) = v188;
      *(_QWORD *)(a4 + 24) = v160;
      *(_QWORD *)(a4 + 32) = v175;
      *(_QWORD *)(a4 + 40) = v181;
      *(_QWORD *)(a4 + 48) = v155;
      *(_QWORD *)(a4 + 56) = v73;
      *(_QWORD *)(a4 + 64) = v79;
      *(_QWORD *)(a4 + 72) = v74;
      *(_QWORD *)(a4 + 80) = v80;
      *(_QWORD *)(a4 + 88) = v82;
      *(_QWORD *)(a4 + 96) = v76;
      *(_QWORD *)(a4 + 104) = v78;
      *(float *)(a4 + 112) = v42;
      return result;
    }
    v78 = v41;
    if (v41)
    {
      if (v77 == 1)
      {
        v83 = *(_QWORD *)(v198 + 48);
      }
      else
      {
        if (v77 != 2)
          goto LABEL_35;
        v83 = *(_QWORD *)(v198 + 56);
      }
      if ((float)((float)v83 * 0.5) <= v42)
      {
        v76 &= 1u;
        *(_QWORD *)&v210 = v169;
        *((_QWORD *)&v210 + 1) = v146;
        *(_QWORD *)&v211 = v188;
        v155 = v72;
        v160 = v71;
        *((_QWORD *)&v211 + 1) = v71;
        *(_QWORD *)&v212 = v175;
        *((_QWORD *)&v212 + 1) = v181;
        *(_QWORD *)&v213 = v72;
        *((_QWORD *)&v213 + 1) = v73;
        v82 = v139;
        v79 = v142;
        *(_QWORD *)&v214 = v142;
        *((_QWORD *)&v214 + 1) = v74;
        v80 = v75;
        v81 = v146;
        *(_QWORD *)&v215 = v80;
        *((_QWORD *)&v215 + 1) = v139;
        *(_QWORD *)&v216 = v76;
        *((_QWORD *)&v216 + 1) = v164;
        v217 = v42;
        swift_retain_n();
        sub_221603DF4(a2, v198, (uint64_t)v255, (uint64_t)v257, (uint64_t)v259, (uint64_t)v208, (uint64_t)&v200, (uint64_t)&v210, v195, v196, (uint64_t)v194);
        swift_release_n();
        goto LABEL_82;
      }
    }
  }
LABEL_35:
  v84 = *(unsigned __int8 *)(v198 + 84);
  if (!*(_BYTE *)(v198 + 84) || a3 && !sub_2215FF768(5, a3))
    goto LABEL_44;
  v85 = v197;
  if (!v197)
  {
    v85 = v192;
    if (!v192)
    {
      v85 = v152;
      swift_retain();
    }
    swift_retain();
  }
  swift_retain();
  swift_release();
  if (v84 == 1 && v85)
  {
LABEL_44:
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0.0;
  }
  else
  {
    if (qword_2556D8EB0 != -1)
      swift_once();
    sub_221616D40((uint64_t)v194, (uint64_t)v257, (uint64_t)v255, (uint64_t)v259, (uint64_t)a2, (uint64_t)v229, v9, v10);
    v86 = v229[0];
    v189 = (float32x2_t)v229[1];
    v182 = (float32x2_t)v229[2];
    v176 = (float32x2_t)v229[3];
    v170 = (float32x2_t)v229[4];
    v156 = (float32x2_t)v229[6];
    v161 = (float32x2_t)v229[5];
    v147 = (float32x2_t)v229[7];
    v94 = (uint64_t *)v229[8];
    v95 = (id)v229[9];
    v96 = v229[10];
    v97 = (float32x2_t)v229[11];
    v98 = (float32x2_t)v229[12];
    v99 = (float32x2_t)v229[13];
    v100 = v230;
    sub_2215C6540((uint64_t)v229, (uint64_t)v208, &qword_2556DC6B0);
    v93 = v147;
    v92 = v156;
    v91 = v161;
    v90 = v170;
    v89 = v176;
    v88 = v182;
    v87 = v189;
  }
  v273[0] = v86;
  v273[1] = v87;
  v273[2] = v88;
  v273[3] = v89;
  v273[4] = v90;
  v273[5] = v91;
  v273[6] = v92;
  v273[7] = v93;
  v273[8] = v94;
  v273[9] = v95;
  v273[10] = v96;
  v273[11] = v97;
  v273[12] = v98;
  v273[13] = v99;
  v274 = v100;
  if (v84 == 4)
    goto LABEL_59;
  if (v84 == 3 && *(_QWORD *)&v99)
  {
    v148 = v93;
    v157 = v92;
    v162 = v91;
    v171 = v90;
    v177 = v89;
    v183 = v88;
    v190 = v87;
    swift_retain();
    v101 = v99;
  }
  else
  {
    swift_retain();
    swift_retain();
    sub_221604364((objc_class *)v194, (uint64_t)v255, (int32x2_t)v257, (uint64_t)v259, (uint64_t)v273, (uint64_t)v275, (uint64_t)a2, v231);
    v190 = v231[1];
    v183 = v231[2];
    v177 = v231[3];
    v171 = v231[4];
    v157 = v231[6];
    v162 = v231[5];
    v143 = v231[0];
    v148 = v231[7];
    v94 = (uint64_t *)v231[8];
    v95 = (id)v231[9];
    v96 = (uint64_t)v231[10];
    v97 = v231[11];
    v98 = v231[12];
    v101 = v231[13];
    v100 = v232;
    swift_release();
    swift_release();
    if (!*(_QWORD *)&v101)
      goto LABEL_60;
LABEL_54:
    v86 = (uint64_t)v143;
  }
  *(_QWORD *)&v210 = v86;
  *((float32x2_t *)&v210 + 1) = v190;
  *(float32x2_t *)&v211 = v183;
  *((float32x2_t *)&v211 + 1) = v177;
  *(float32x2_t *)&v212 = v171;
  *((float32x2_t *)&v212 + 1) = v162;
  *(float32x2_t *)&v213 = v157;
  *((float32x2_t *)&v213 + 1) = v148;
  *(_QWORD *)&v214 = v94;
  *((_QWORD *)&v214 + 1) = v95;
  *(_QWORD *)&v215 = v96;
  *((float32x2_t *)&v215 + 1) = v97;
  *(float32x2_t *)&v216 = v98;
  *((float32x2_t *)&v216 + 1) = v101;
  v217 = v100;
  v86 = v198;
  v96 = (uint64_t)v194;
  while (1)
  {
    v87 = (float32x2_t)*(unsigned __int8 *)(*(_QWORD *)&v101 + 48);
    if (v87.i32[0] != 2)
      goto LABEL_67;
    if (v101)
      goto LABEL_69;
    __break(1u);
LABEL_59:
    v143 = (float32x2_t)v86;
    v148 = v93;
    v157 = v92;
    v162 = v91;
    v171 = v90;
    v177 = v89;
    v183 = v88;
    v190 = v87;
    swift_retain();
    v101 = v99;
    if (v99)
      goto LABEL_54;
LABEL_60:
    sub_2215C6540((uint64_t)a2, (uint64_t)&v236, &qword_2556DBBD8);
    if (sub_2215FF094((uint64_t)&v236) == 1)
      goto LABEL_64;
    v246 = v239;
    v247 = v240;
    v248 = v241;
    v249 = v242;
    v243 = v236;
    v244 = v237;
    v245 = v238;
    sub_2215C6540((uint64_t)&v249 + 8, (uint64_t)v254, &qword_2556DC6C8);
    sub_2215C6540((uint64_t)v254, (uint64_t)v287, &qword_2556DC6C8);
    if (!v287[0])
    {
LABEL_64:
      v217 = 0.0;
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v210 = 0u;
      v86 = v198;
      v96 = (uint64_t)v194;
      goto LABEL_80;
    }
    v96 = (uint64_t)v194;
    v95 = objc_msgSend(v194, sel_camera);
    memset(v272, 0, 64);
    v272[64] = 1;
    v102 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v95, (uint64_t)v272);
    v184 = v103;
    v191 = (float32x4_t)v102;

    WorldPlane.hitTest(hitRay:withPlaneType:)(2, (uint64_t)v233, v191, v184);
    v94 = &qword_2556DC6B0;
    sub_2215C6540((uint64_t)v233, (uint64_t)&v210, &qword_2556DC6B0);
    sub_2215C6540((uint64_t)v233, (uint64_t)v234, &qword_2556DC6B0);
    v86 = v198;
    if (!v235)
      break;
    v101 = *(float32x2_t *)((char *)&v216 + 8);
  }
  v101 = *(float32x2_t *)((char *)&v216 + 8);
LABEL_67:
  if (!*(_QWORD *)&v101 || *(_BYTE *)(*(_QWORD *)&v101 + 48) != 4)
    goto LABEL_80;
LABEL_69:
  v104 = v214;
  v105 = DWORD2(v214);
  v263 = v210;
  v264 = v211;
  v265 = v212;
  v266 = v213;
  v267 = v214;
  v268 = v215;
  v269 = v216 & 1;
  v270 = v101;
  v271 = v217;
  swift_retain();
  v106 = WorldPlaneHitTestResult.distanceToCamera(in:)((ARFrame)v96);
  swift_release();
  if (v106 > 30.0)
    goto LABEL_70;
  if (!*(_BYTE *)(v86 + 140) || *(_BYTE *)(v86 + 140) == 33)
    goto LABEL_80;
  v107 = v96;
  v108 = qword_2556D8EB0;
  swift_retain();
  if (v108 != -1)
    swift_once();
  swift_beginAccess();
  v109 = *(_QWORD *)(*(_QWORD *)&v101 + 16);
  v110 = *(os_unfair_lock_s **)(v109 + 24);
  swift_retain();
  os_unfair_lock_lock(v110);
  swift_beginAccess();
  v111 = *(id *)(v109 + 16);
  os_unfair_lock_unlock(v110);
  swift_release();
  v112 = sub_221615B38(v111);
  swift_release();

  v96 = v107;
  if (!v112)
    goto LABEL_80;
  v113 = *(_QWORD *)(*(_QWORD *)&v101 + 16);
  v114 = *(os_unfair_lock_s **)(v113 + 24);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v114);
  swift_beginAccess();
  v115 = *(id *)(v113 + 16);
  v116 = v114;
  v96 = v107;
  os_unfair_lock_unlock(v116);
  swift_release();
  v117 = sub_221615B38(v115);
  swift_release();

  v118 = *(unsigned __int8 *)(v86 + 140);
  if (v118 != 33 && v118 == v117)
  {
LABEL_80:
    v122 = *((_QWORD *)&v210 + 1);
    v169 = v210;
    v188 = v211;
    v181 = *((_QWORD *)&v212 + 1);
    v175 = v212;
    v155 = v213;
    v160 = *((_QWORD *)&v211 + 1);
    v73 = *((_QWORD *)&v213 + 1);
    v74 = *((_QWORD *)&v214 + 1);
    v79 = v214;
    v82 = *((_QWORD *)&v215 + 1);
    v80 = v215;
    v123 = v96;
    v78 = *((_QWORD *)&v216 + 1);
    v76 = v216;
    v42 = v217;
    swift_retain();
    v124 = v123;
    v81 = v122;
    sub_221603DF4(a2, v86, (uint64_t)v255, (uint64_t)v257, (uint64_t)v259, (uint64_t)v208, (uint64_t)&v200, (uint64_t)&v210, v195, v196, v124);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_81;
  }
  v119.i64[1] = v105;
  v119.i64[0] = v104;
  v199 = v119;
  swift_retain();
  v120 = WorldPlane.distanceToEdge(point:)(v199);
  result = swift_release();
  if ((v120 & 0x100000000) == 0)
  {
    if (*(float *)&v120 > 0.25)
    {
LABEL_70:
      sub_221603DF4(a2, v86, (uint64_t)v255, (uint64_t)v257, (uint64_t)v259, (uint64_t)v208, (uint64_t)&v200, (uint64_t)&v210, v195, v196, v96);
      swift_release();
      swift_release();
      swift_release();
      v169 = 0;
      v81 = 0;
      v188 = 0;
      v155 = 0;
      v160 = 0;
      v175 = 0;
      v181 = 0;
      v73 = 0;
      v79 = 0;
      v74 = 0;
      v80 = 0;
      v82 = 0;
      v76 = 0;
      v42 = 0.0;
      v78 = 0;
LABEL_81:
      a4 = v125;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  __break(1u);
  return result;
}

uint64_t sub_221603398@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  float v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  id v27;
  uint64_t v28;
  simd_float4x4 *v29;
  simd_float4x4 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  id v36;
  __n128 v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  double v48;
  __int128 v49;
  __int128 v50;
  double v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  double v56;
  __int128 v57;
  float32x4_t v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  __int128 v62;
  char v63[144];
  simd_float4x4 v64;
  double v65[60];
  float32x4_t v66[3];
  _BYTE v67[80];
  _OWORD v68[6];
  uint64_t v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  char v73;
  float32x4_t v74[2];
  char v75;
  _OWORD v76[4];
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  int v87;
  simd_float4x4 v88;

  v7 = *((_QWORD *)sub_2215FFB30() + 2);
  result = swift_bridgeObjectRelease();
  v9 = 0uLL;
  v10 = 0;
  if (v7)
  {
    v40 = a2;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      result = (uint64_t)sub_2215FFB30();
      if (v12 >= *(_QWORD *)(result + 16))
      {
        __break(1u);
LABEL_22:
        __break(1u);
        return result;
      }
      v13 = *(double *)(result + v11 + 32);
      v14 = *(double *)(result + v11 + 40);
      result = swift_bridgeObjectRelease();
      if (qword_2556D8EB0 != -1)
        result = swift_once();
      v15 = *(_QWORD *)(static MeasureCore.shared + 88);
      if (!v15)
        goto LABEL_22;
      result = swift_beginAccess();
      if ((*(_BYTE *)(v15 + 432) & 1) == 0)
      {
        v56 = *(double *)(v15 + 416);
        v51 = *(double *)(v15 + 400);
        v48 = *(double *)(v15 + 384);
        v16 = *(double *)(v15 + 368);
        v17 = *(_QWORD *)(v15 + 352);
        result = swift_beginAccess();
        if ((*(_BYTE *)(v15 + 432) & 1) == 0 && *(_BYTE *)(v15 + 433) != 1)
        {
          v18 = v13 + a3;
          v43 = *(float32x4_t *)(v15 + 320);
          v42 = *(float32x4_t *)(v15 + 336);
          v19 = *(float *)(v15 + 352);
          swift_retain();
          sub_221622ADC(a1, (uint64_t)v63);
          v88 = __invert_f4(v64);
          v46 = (float32x4_t)v88.columns[1];
          v47 = (float32x4_t)v88.columns[0];
          v44 = (float32x4_t)v88.columns[3];
          v45 = (float32x4_t)v88.columns[2];
          sub_221622ADC(a1, (uint64_t)v65);
          sub_2215ED0B4(v66, v18, v14 + a4, v47, v46, v45, v44, v65[0]);
          sub_2215C6540((uint64_t)v66, (uint64_t)v74, &qword_2556DAEB0);
          if ((v75 & 1) != 0)
          {
            result = swift_release();
          }
          else
          {
            sub_2215E677C((uint64_t)v67, v43, v42, v19, v74[0], v74[1]);
            swift_release();
            result = sub_2215C6540((uint64_t)v67, (uint64_t)&v72, &qword_2556DB1C8);
            if ((v73 & 1) == 0)
            {
              v26 = v56;
              v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD910]), sel_initWithTransform_, v16, v48, v51, v26);
              type metadata accessor for WorldPlane();
              swift_allocObject();
              v28 = sub_22164164C(v27, 3, 1.0 - *((float *)&v17 + 1), 1.0);

              sceneKitToARKit(_:)(v30, v29);
              v52 = v31;
              v78 = xmmword_221657CB0;
              v79 = v32;
              v57 = v33;
              v60 = v32;
              v80 = v33;
              v81 = v34;
              v54 = v34;
              v82 = v31;
              v83 = 0;
              v84 = 0;
              v85 = 1;
              v86 = v28;
              v87 = 0;
              swift_retain();
              sub_221641268();
              v10 = v35;
              result = swift_release();
              if (v12)
              {
                v36 = objc_msgSend(a1, sel_camera);
                memset(v76, 0, sizeof(v76));
                v77 = 1;
                v37 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v36, (uint64_t)v76);
                v58 = v38;
                v61 = (float32x4_t)v37;

                sub_221612468((uint64_t)v68, v61, v58);
                v59 = v68[2];
                v62 = v68[1];
                v55 = v68[3];
                v50 = v68[0];
                v53 = v68[4];
                v49 = v68[5];
                v20 = v69;
                v39 = v70;
                v10 = v71;
                result = swift_release();
                v25 = v53;
                v24 = v55;
                v23 = v59;
                v22 = v62;
                v9 = v49;
                v21 = v50;
                v28 = v39;
                a2 = v40;
              }
              else
              {
                v20 = 1;
                a2 = v40;
                v9 = 0uLL;
                v23 = v57;
                v22 = v60;
                v21 = xmmword_221657CB0;
                v25 = v52;
                v24 = v54;
              }
              goto LABEL_17;
            }
          }
        }
      }
      ++v12;
      v11 += 16;
      if (v7 == v12)
      {
        v20 = 0;
        v28 = 0;
        v21 = 0uLL;
        v22 = 0uLL;
        v23 = 0uLL;
        v24 = 0uLL;
        v25 = 0uLL;
        a2 = v40;
        v9 = 0uLL;
        goto LABEL_17;
      }
    }
  }
  v20 = 0;
  v28 = 0;
  v21 = 0uLL;
  v22 = 0uLL;
  v23 = 0uLL;
  v24 = 0uLL;
  v25 = 0uLL;
LABEL_17:
  *(_OWORD *)a2 = v21;
  *(_OWORD *)(a2 + 16) = v22;
  *(_OWORD *)(a2 + 32) = v23;
  *(_OWORD *)(a2 + 48) = v24;
  *(_OWORD *)(a2 + 64) = v25;
  *(_OWORD *)(a2 + 80) = v9;
  *(_QWORD *)(a2 + 96) = v20;
  *(_QWORD *)(a2 + 104) = v28;
  *(_DWORD *)(a2 + 112) = v10;
  return result;
}

uint64_t sub_221603860@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  __n128 v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  float32x4_t v21;
  __int128 v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  unsigned int v30;
  unsigned int v31;
  __n128 v32;
  uint64_t v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  id v38;
  unsigned __int8 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  id v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  float32x4_t v47;
  void *v48;
  uint64_t v49;
  CGFloat v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  id v57;
  __n128 v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  id v69[2];
  id v70[2];
  void *v71;
  id v72[2];
  float32x4_t v73;
  __int128 v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  __n128 v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  _BYTE v85[128];
  char v86[144];
  __int128 v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91[60];
  char v92[208];
  float32x4_t v93;
  __int128 v94;
  float32x4_t v95;
  float32x4_t v96;
  double v97[60];
  _OWORD v98[7];
  int v99;
  char v100[64];
  float32x4_t v101;
  uint64_t v102;
  _BYTE v103[80];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[96];

  v6 = v5;
  sub_2215C6540(a2, (uint64_t)v103, &qword_2556DBBD8);
  result = sub_2215FF094((uint64_t)v103);
  v12 = 0uLL;
  if ((_DWORD)result != 1)
  {
    v13 = v106;
    if (v106)
    {
      v14 = v105;
      v15 = v104;
      swift_retain_n();
      v16 = objc_msgSend(a1, sel_camera);
      memset(v107, 0, 64);
      v107[64] = 1;
      v17 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v16, (uint64_t)v107);
      v73 = v18;
      v77 = (float32x4_t)v17;

      WorldPlane.hitTest(hitRay:withPlaneType:)(7, (uint64_t)v85, v77, v73);
      swift_release();
      sub_2215C6540((uint64_t)v85, (uint64_t)v100, &qword_2556DC6B0);
      if (v102)
      {
        v78 = v101;
        sub_221606E68((uint64_t)v85);
        v19 = v78;
        v19.i32[3] = 0;
      }
      else
      {
        v27.i64[1] = v14;
        v27.i64[0] = v15;
        v74 = 0u;
        v79 = v27;
        sub_221622ADC(a1, (uint64_t)v86);
        v66 = v88;
        *(_OWORD *)v69 = v87;
        v61 = v90;
        v63 = v89;
        sub_221622ADC(a1, (uint64_t)v91);
        _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v79, *(float32x4_t *)v69, v66, v63, v61, v91[0]);
        if (v28 < 0.0 || v28 > 1.0)
        {
LABEL_29:
          v20 = 0;
          v34 = 0uLL;
          goto LABEL_30;
        }
        *(float *)&v30 = a4;
        *(float *)&v31 = a5;
        v32.n128_u64[0] = __PAIR64__(v31, v30);
        v32.n128_u64[1] = LODWORD(v28);
        v80 = v32;
        sub_221622ADC(a1, (uint64_t)v92);
        *(_OWORD *)v70 = v94;
        v75 = v93;
        v64 = v96;
        v67 = v95;
        sub_221622ADC(a1, (uint64_t)v97);
        *(float32x2_t *)v19.f32 = _s17MeasureFoundation0A6CameraC14unprojectPoint_17viewProjectionInv12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v80, v75, *(float32x4_t *)v70, v67, v64, v97[0]);
      }
      v81 = v19;
      if (qword_2556D8EB0 != -1)
      {
        swift_once();
        v19 = v81;
      }
      v33 = MeasureCore.mlLabel(of:kernelRadius:)(0, v19);
      v20 = 0;
      v34 = 0uLL;
      if ((_BYTE)v33)
      {
        v74 = 0uLL;
        if (v33 != 33)
        {
          v35 = v33;
          swift_beginAccess();
          v36 = *(_QWORD *)(v13 + 16);
          v37 = *(os_unfair_lock_s **)(v36 + 24);
          swift_retain();
          swift_retain();
          os_unfair_lock_lock(v37);
          swift_beginAccess();
          v38 = *(id *)(v36 + 16);
          os_unfair_lock_unlock(v37);
          swift_release();
          v39 = sub_221615B38(v38);
          swift_release();

          if (v35 == v39)
          {
            v40 = v81.i64[1];
          }
          else
          {
            v40 = v81.i64[1];
            v41 = MeasureCore.mlLabel(of:kernelRadius:)(5, v81);
            if (v41 == 33 || v35 != v41)
            {
              v42 = *(_QWORD *)(v13 + 16);
              v43 = *(os_unfair_lock_s **)(v42 + 24);
              swift_retain();
              swift_retain();
              os_unfair_lock_lock(v43);
              swift_beginAccess();
              v44 = *(id *)(v42 + 16);
              v45 = v43;
              v40 = v81.i64[1];
              os_unfair_lock_unlock(v45);
              swift_release();
              v35 = sub_221615B38(v44);
              swift_release();

            }
          }
          *(_BYTE *)(v6 + 140) = v35;
          v46 = *(_QWORD *)(static MeasureCore.shared + 80);
          if (v46)
          {
            v47.i64[0] = v81.i64[0];
            v47.i64[1] = v40;
            v82 = v47;
            v48 = *(void **)(v46 + 272);
            swift_retain();
            v71 = v48;
            objc_msgSend(v48, sel_lock);
            v49 = SegmentationProcessor.projectPoint(_:)(v82);
            if ((v51 & 1) != 0)
            {
              v52 = 0;
              v54 = 0;
              v56 = 1;
            }
            else
            {
              v52 = SegmentationProcessor.normal(at:)(*(CGFloat *)&v49, v50);
              v54 = v53;
              v56 = v55 & 1;
            }
            objc_msgSend(v71, sel_unlock);
            swift_release();
          }
          else
          {
            v52 = 0;
            v54 = 0;
            v56 = 1;
          }
          if (sub_221605E4C(a1, 0, v35, v52, v54, v56))
          {
            swift_retain();
            v57 = objc_msgSend(a1, sel_camera);
            v58 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v57, (uint64_t)v107);
            v76 = v59;
            v83 = (float32x4_t)v58;

            WorldPlane.hitTest(hitRay:withPlaneType:)(1, (uint64_t)v98, v83, v76);
            v74 = v98[0];
            v84 = (float32x4_t)v98[1];
            v68 = (float32x4_t)v98[3];
            *(_OWORD *)v72 = v98[2];
            v62 = (float32x4_t)v98[5];
            v65 = (float32x4_t)v98[4];
            v60 = (float32x4_t)v98[6];
            v20 = v99;
            swift_release();
            swift_release();
LABEL_31:
            result = swift_release();
            v12 = v74;
            v21 = v84;
            v23 = v68;
            v22 = *(_OWORD *)v72;
            v25 = v62;
            v24 = v65;
            v26 = v60;
            goto LABEL_32;
          }
          goto LABEL_29;
        }
      }
      else
      {
        v74 = 0uLL;
      }
LABEL_30:
      v84 = v34;
      v68 = v34;
      *(float32x4_t *)v72 = v34;
      v62 = v34;
      v65 = v34;
      v60 = v34;
      goto LABEL_31;
    }
  }
  v20 = 0;
  v21 = 0uLL;
  v22 = 0uLL;
  v23 = 0uLL;
  v24 = 0uLL;
  v25 = 0uLL;
  v26 = 0uLL;
LABEL_32:
  *(_OWORD *)a3 = v12;
  *(float32x4_t *)(a3 + 16) = v21;
  *(_OWORD *)(a3 + 32) = v22;
  *(float32x4_t *)(a3 + 48) = v23;
  *(float32x4_t *)(a3 + 64) = v24;
  *(float32x4_t *)(a3 + 80) = v25;
  *(float32x4_t *)(a3 + 96) = v26;
  *(_DWORD *)(a3 + 112) = v20;
  return result;
}

void sub_221603DF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, uint64_t a11)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  id v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __n128 v46;
  void *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __n128 v55;
  __n128 v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[18];
  _BYTE v67[144];
  _BYTE v68[144];
  char v69;
  _QWORD v70[3];
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[128];
  _BYTE v74[128];
  _BYTE v75[160];

  v55 = a9;
  v56 = a10;
  sub_2215C6540((uint64_t)a1, (uint64_t)v67, &qword_2556DBBD8);
  sub_2215C6540((uint64_t)v67, (uint64_t)v75, &qword_2556DBBD8);
  v19 = sub_221653030();
  v61 = *(_QWORD *)(v19 - 8);
  v62 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v60 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_221653048();
  v58 = *(_QWORD *)(v21 - 8);
  v59 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v57 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2215C6540((uint64_t)a1, (uint64_t)v68, &qword_2556DBBD8);
  if (sub_2215FF094((uint64_t)v68) != 1 && (v68[0] & 1) == 0)
  {
    sub_2215C6540((uint64_t)v75, (uint64_t)v66, &qword_2556DBBD8);
    sub_221607090((uint64_t)v66);
    if ((PlaneSelector.debugOptions.getter() & 1) != 0)
    {
      swift_beginAccess();
      if (*(_QWORD *)(a2 + 208))
      {
        sub_2215E70EC(a2 + 184, (uint64_t)v70);
        *(_QWORD *)&v54 = v71;
        v23 = v72;
        *(_QWORD *)&v53 = __swift_project_boxed_opaque_existential_0(v70, v71);
        sub_2215C6540(a6, (uint64_t)v73, &qword_2556DC6B0);
        sub_2215C6540(a7, (uint64_t)v74, &qword_2556DC6B0);
        v24 = *(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t))(v23 + 16);
        sub_221606E90((uint64_t)v73);
        sub_221606E90((uint64_t)v74);
        v24(a3, a4, a5, v73, v74, v54, v23);
        sub_221606E68((uint64_t)v74);
        sub_221606E68((uint64_t)v73);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v70);
      }
    }
    if ((*(_BYTE *)(a2 + 168) & 1) != 0)
    {
      swift_beginAccess();
      if (*(_QWORD *)(a2 + 208))
      {
        sub_2215E70EC(a2 + 184, (uint64_t)v63);
        v25 = v64;
        v26 = v65;
        __swift_project_boxed_opaque_existential_0(v63, v64);
        sub_2215C6540(a8, (uint64_t)v70, &qword_2556DC6B0);
        v27 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v26 + 24);
        sub_221606E90((uint64_t)v70);
        v27(v70, v25, v26);
        sub_221606E68((uint64_t)v70);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v63);
      }
    }
    if ((*(_BYTE *)(a2 + 168) & 2) != 0 && (swift_beginAccess(), *(_QWORD *)(a2 + 208)))
    {
      sub_2215E70EC(a2 + 184, (uint64_t)v63);
      v28 = v64;
      v29 = v65;
      __swift_project_boxed_opaque_existential_0(v63, v64);
      *(_QWORD *)&v30.f64[0] = v55.n128_u64[0];
      *(_QWORD *)&v30.f64[1] = v56.n128_u64[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v29 + 32))(a11, v28, v29, COERCE_DOUBLE(vcvt_f32_f64(v30)));
      sub_2216070C4(a1);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v63);
    }
    else
    {
      sub_2216070C4(a1);
    }
  }
  v31 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v32 = objc_msgSend(v31, sel_kPEShowStats);

  if (v32)
  {
    v33 = *(_QWORD *)(a8 + 104);
    if (v33)
    {
      v34 = *(_DWORD *)(a8 + 112);
      v35 = *(_DWORD *)(a8 + 96);
      v37 = *(_QWORD *)(a8 + 80);
      v36 = *(_QWORD *)(a8 + 88);
      v38 = *(__n128 *)(a8 + 64);
      v54 = *(_OWORD *)(a8 + 48);
      v55 = v38;
      v39 = *(_OWORD *)(a8 + 32);
      v52 = *(_OWORD *)(a8 + 16);
      v53 = v39;
      v40 = *(_QWORD *)a8;
      v41 = *(_QWORD *)(a8 + 8);
      v42 = HIDWORD(*(_QWORD *)a8);
      v69 = v35 & 1;
      sub_2215DDC80(0, &qword_2556DA408);
      swift_retain();
      v56.n128_u64[0] = sub_22165366C();
      v43 = swift_allocObject();
      swift_weakInit();
      v44 = swift_allocObject();
      *(_QWORD *)(v44 + 16) = v43;
      *(_DWORD *)(v44 + 32) = v40;
      *(_DWORD *)(v44 + 36) = v42;
      *(_QWORD *)(v44 + 40) = v41;
      v45 = v53;
      *(_OWORD *)(v44 + 48) = v52;
      *(_OWORD *)(v44 + 64) = v45;
      v46 = v55;
      *(_OWORD *)(v44 + 80) = v54;
      *(__n128 *)(v44 + 96) = v46;
      *(_QWORD *)(v44 + 112) = v37;
      *(_QWORD *)(v44 + 120) = v36;
      *(_BYTE *)(v44 + 128) = v69;
      *(_DWORD *)(v44 + 129) = v63[0];
      *(_DWORD *)(v44 + 132) = *(_DWORD *)((char *)v63 + 3);
      *(_QWORD *)(v44 + 136) = v33;
      *(_DWORD *)(v44 + 144) = v34;
      v66[4] = sub_22160706C;
      v66[5] = v44;
      v66[0] = MEMORY[0x24BDAC760];
      v66[1] = 1107296256;
      v66[2] = sub_2215BFCE8;
      v66[3] = &block_descriptor_2;
      v47 = _Block_copy(v66);
      swift_retain();
      swift_release();
      v48 = v57;
      sub_22165303C();
      v66[0] = MEMORY[0x24BEE4AF8];
      sub_2215BB99C(&qword_2556DA4C8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA4D0);
      sub_2215DDC10();
      v49 = v60;
      v50 = v62;
      sub_2216537A4();
      v51 = (void *)v56.n128_u64[0];
      MEMORY[0x22766EB04](0, v48, v49, v47);
      _Block_release(v47);
      swift_release();

      (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v50);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v59);
    }
  }
}

uint64_t sub_221604364@<X0>(objc_class *a1@<X0>, uint64_t a2@<X1>, int32x2_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, float32x2_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  float32x2_t v13;
  uint64_t v14;
  float32x2_t v15;
  unint64_t v16;
  float32x2_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD, _QWORD);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD, _QWORD);
  float32x2_t v54;
  void (*v55)(_QWORD, _QWORD, _QWORD);
  unint64_t v56;
  float32x2_t v57;
  float32x2_t v58;
  uint64_t v59;
  void (*v60)(_QWORD, _QWORD, _QWORD);
  __int128 v61;
  int64x2_t v62;
  float v63;
  float32x2_t v64;
  int32x2_t v65;
  uint64_t v66;
  int32x2_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, _QWORD);
  Class v70;
  float v71;
  float v72;
  __int128 v73;
  uint64_t v74;
  void (*v75)(_QWORD, _QWORD, _QWORD);
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float v81;
  void (*v82)(_QWORD, _QWORD, _QWORD);
  float32x2_t v83;
  uint64_t result;
  float32x2_t v85;
  float32x2_t v86;
  void (*v87)(_QWORD, _QWORD, _QWORD);
  float32x2_t v88;
  float32x2_t v89;
  uint64_t v90;
  uint64_t v91;
  float32x2_t v92;
  __int128 v93;
  uint64_t v94;
  float32x2_t v95;
  float32x2_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  float v101;
  float v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  uint64_t v106;
  uint64_t v107;
  os_unfair_lock_s *v108;
  id v109;
  id v110;
  char *v111;
  int32x2_t *v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  os_unfair_lock_s *v124;
  id v125;
  os_unfair_lock_s *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD, _QWORD);
  float32x2_t v132;
  void (*v133)(_QWORD, _QWORD, _QWORD);
  float v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float v138;
  float v139;
  uint64_t v140;
  int32x2_t v141;
  float32x2_t v142;
  int32x2_t v143;
  float32x2_t v144;
  int32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(_QWORD, _QWORD, _QWORD);
  void (*v152)(_QWORD, _QWORD, _QWORD);
  uint64_t v153;
  float32x2_t v154;
  float32x2_t v155;
  uint64_t v156;
  int32x2_t v157;
  void (*v158)(_QWORD, _QWORD, _QWORD);
  void (*v159)(_QWORD, _QWORD, _QWORD);
  uint64_t v160;
  float32x2_t v161;
  Class isa;
  float v163;
  Class v164;
  __int128 v165;
  float v166;
  float v167;
  float v168;
  float v169;
  int v170;
  float32x2_t *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  void (*v175)(uint64_t, char *, uint64_t);
  void (*v176)(char *, uint64_t);
  char **p_attr;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  os_unfair_lock_s *v186;
  id v187;
  id v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  os_unfair_lock_s *v203;
  id v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  void (*v208)(char *, uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  __int128 v231;
  float v232;
  uint64_t v233;
  float32x2_t v234;
  int32x2_t v235;
  float32x2_t v236;
  uint64_t v237;
  float32x2_t v238;
  int32x2_t v239;
  uint64_t v240;
  uint64_t v241;
  float32x2_t v242;
  __int128 v243;
  float v244;
  void (*v245)(_QWORD, _QWORD, _QWORD);
  int32x2_t v246;
  uint64_t v247;
  float32x2_t v248;
  float32x2_t v249;
  uint64_t v250;
  void (*v251)(_QWORD, _QWORD, _QWORD);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(_QWORD, _QWORD, _QWORD);
  uint64_t v256;
  char *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  float32x2_t v265;
  int32x2_t v266;
  float32x2_t v267;
  uint64_t v268;
  float32x2_t v269;
  int32x2_t v270;
  uint64_t v271;
  float32x2_t v272;
  float32x2_t v273;
  uint64_t v274;
  void (*v275)(_QWORD, _QWORD, _QWORD);
  float32x2_t v276;
  void (*v277)(char *, char *, uint64_t);
  uint64_t v278;
  void (*v279)(_QWORD, _QWORD, _QWORD);
  float32x2_t v280;
  float32x2_t *v281;
  ARFrame v282;
  __int128 v283;
  float32x2_t v284;
  __int128 v285;
  uint64_t v286;
  void (*v287)(_QWORD, _QWORD, _QWORD);
  int32x2_t v288;
  float v289;
  int32x2_t v290;
  uint64_t v291;
  float32x2_t v292;
  float32x2_t v293;
  uint64_t v294;
  float32x2_t v295;
  void (*v296)(_QWORD, _QWORD, _QWORD);
  float32x2_t v297;
  void (*v298)(_QWORD, _QWORD, _QWORD);
  __int128 v299;
  __int128 v300;
  __int128 v301;
  float32x4_t v302;
  __int128 v303;
  int32x2_t v304;
  void (*v305)(_QWORD, _QWORD, _QWORD);
  float v306;
  _QWORD v307[10];
  __int128 v308;
  float32x2_t v309;
  void (*v310)(_QWORD, _QWORD, _QWORD);
  float v311;
  _QWORD v312[14];
  int v313;
  _QWORD v314[14];
  float v315;
  _QWORD v316[14];
  float v317;
  _QWORD v318[16];
  _OWORD v319[6];
  __int128 v320;
  int v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD v332[14];
  float v333;
  _QWORD v334[16];
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  float v342;
  _OWORD v343[4];
  __int128 v344;
  __int128 v345;
  __int128 v346;
  float v347;
  _QWORD v348[16];
  _QWORD v349[18];
  _QWORD v350[12];
  unsigned __int8 v351;
  void (*v352)(_QWORD, _QWORD, _QWORD);
  float v353;
  __int128 v354;
  float32x2_t v355;
  float32x2_t v356;
  uint64_t v357;
  int32x2_t v358;
  float32x2_t v359;
  uint64_t v360;
  float32x2_t v361;
  int32x2_t v362;
  __int128 v363;
  char v364;
  void (*v365)(_QWORD, _QWORD, _QWORD);
  float v366;
  float32x2_t v367;
  void (*v368)(_QWORD, _QWORD, _QWORD);
  __int128 v369;
  __int128 v370;
  __int128 v371;
  float32x4_t v372;
  __int128 v373;
  char v374;
  void (*v375)(_QWORD, _QWORD, _QWORD);
  float v376;
  _QWORD v377[2];
  __int128 v378;
  __int128 v379;
  __int128 v380;
  float32x4_t v381;
  __int128 v382;
  char v383;
  _QWORD *v384;
  float v385;
  _QWORD v386[12];
  char v387;
  void (*v388)(_QWORD, _QWORD, _QWORD);
  float v389;

  v9 = v8;
  v294 = a7;
  v288 = a3;
  v282.super.isa = a1;
  v281 = a8;
  v286 = a4;
  sub_2215C6540(a4, (uint64_t)v316, &qword_2556DC6B0);
  v255 = (void (*)(_QWORD, _QWORD, _QWORD))v316[1];
  v256 = v316[0];
  v253 = v316[3];
  v254 = v316[2];
  v251 = (void (*)(_QWORD, _QWORD, _QWORD))v316[5];
  v252 = v316[4];
  v249 = (float32x2_t)v316[7];
  v250 = v316[6];
  v275 = (void (*)(_QWORD, _QWORD, _QWORD))v316[9];
  v276 = (float32x2_t)v316[8];
  v247 = v316[11];
  v248 = (float32x2_t)v316[10];
  v245 = (void (*)(_QWORD, _QWORD, _QWORD))v316[13];
  v246 = (int32x2_t)v316[12];
  v244 = v317;
  v280 = (float32x2_t)a2;
  sub_2215C6540(a2, (uint64_t)v314, &qword_2556DC6B0);
  v13 = (float32x2_t)v314[0];
  v279 = (void (*)(_QWORD, _QWORD, _QWORD))v314[1];
  v284 = (float32x2_t)v314[2];
  v292 = (float32x2_t)v314[3];
  v291 = v314[4];
  v290 = (int32x2_t)v314[5];
  v295 = (float32x2_t)v314[6];
  v14 = v314[7];
  v15 = (float32x2_t)v314[8];
  v16 = v314[9];
  v17 = (float32x2_t)v314[10];
  *(_QWORD *)&v283 = v314[11];
  v293 = (float32x2_t)v314[12];
  v296 = (void (*)(_QWORD, _QWORD, _QWORD))v314[13];
  v289 = v315;
  sub_2215C6540(a5, (uint64_t)v312, &qword_2556DC6B0);
  *(_QWORD *)&v18 = v312[0];
  v285 = v18;
  v272 = (float32x2_t)v312[3];
  v273 = (float32x2_t)v312[2];
  v270 = (int32x2_t)v312[5];
  v271 = v312[4];
  v268 = v312[7];
  v269 = (float32x2_t)v312[6];
  v266 = (int32x2_t)v312[9];
  v267 = (float32x2_t)v312[8];
  v261 = v312[10];
  v262 = v312[1];
  v263 = v312[11];
  v265 = (float32x2_t)v312[12];
  v287 = (void (*)(_QWORD, _QWORD, _QWORD))v312[13];
  LODWORD(v264) = v313;
  sub_2215C6540(a6, (uint64_t)v307, &qword_2556DC6B0);
  *(_QWORD *)&v19 = v307[0];
  v243 = v19;
  v233 = v307[1];
  v241 = v307[3];
  v242 = (float32x2_t)v307[2];
  v239 = (int32x2_t)v307[5];
  v240 = v307[4];
  v237 = v307[7];
  v238 = (float32x2_t)v307[6];
  v235 = (int32x2_t)v307[9];
  v236 = (float32x2_t)v307[8];
  v231 = v308;
  v234 = v309;
  v277 = v310;
  v232 = v311;
  v230 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC6D8);
  v20 = MEMORY[0x24BDAC7A8](v230);
  v221 = (char *)&v216 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v224 = (uint64_t)&v216 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v223 = (char *)&v216 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(qword_2556DC6E0);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v217 = (uint64_t)&v216 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v220 = (char *)&v216 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v228 = (uint64_t)&v216 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v218 = (uint64_t)&v216 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v222 = (uint64_t)&v216 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v226 = (uint64_t)&v216 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v219 = (uint64_t)&v216 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v227 = (uint64_t)&v216 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v225 = (uint64_t)&v216 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v258 = (char *)&v216 - v44;
  v274 = sub_221652FD0();
  v260 = *(_QWORD *)(v274 - 8);
  v45 = MEMORY[0x24BDAC7A8](v274);
  v229 = (char *)&v216 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x24BDAC7A8](v45);
  v257 = (char *)&v216 - v48;
  MEMORY[0x24BDAC7A8](v47);
  v259 = (char *)&v216 - v49;
  sub_2215C6540(a6, (uint64_t)v350, &qword_2556DC6B0);
  v50 = v352;
  if (v352 && (float)((float)*(uint64_t *)(v9 + 48) * 0.5) <= v353)
  {
    v293 = (float32x2_t)v351;
    *(_QWORD *)&v283 = v350[11];
    v76 = (float32x2_t)v350[10];
    v280 = (float32x2_t)v350[8];
    v288 = (int32x2_t)v350[9];
    v295 = (float32x2_t)v350[6];
    v294 = v350[7];
    v77 = (float32x2_t)v350[4];
    v78 = (float32x2_t)v350[5];
    v79 = (float32x2_t)v350[2];
    v80 = (float32x2_t)v350[3];
    v81 = v353;
    v82 = (void (*)(_QWORD, _QWORD, _QWORD))v350[1];
    v83 = (float32x2_t)v350[0];
    result = swift_retain();
    v85 = v79;
    v86 = (float32x2_t)v283;
    v87 = v82;
    v88 = v293;
    v89 = v295;
    v15 = v280;
    v90 = (uint64_t)v288;
    v91 = v294;
    v92 = v78;
  }
  else
  {
    sub_2215C6540(v294, (uint64_t)v349, &qword_2556DBBD8);
    if (sub_2215FF094((uint64_t)v349) == 1)
    {
      v278 = 0;
    }
    else
    {
      v278 = v349[15];
      swift_retain();
    }
    v51 = (uint64_t)v288;
    sub_2215C6540(*(_QWORD *)&v288, (uint64_t)&v297, &qword_2556DC6B0);
    sub_2215C6540(*(_QWORD *)&v280, (uint64_t)v348, &qword_2556DC6B0);
    if (!v348[13])
    {
      sub_2215C6540(a5, (uint64_t)v386, &qword_2556DC6B0);
      if (v388)
      {
        sub_221606E90(a5);
        sub_221606E90(v51);
        sub_221606E90(a5);
        *(_QWORD *)&v93 = v285;
        *((_QWORD *)&v93 + 1) = v262;
        v285 = v93;
        *(_QWORD *)&v93 = v261;
        v66 = (uint64_t)v272;
        v284 = v273;
        v291 = v271;
        v290 = v270;
        v74 = v268;
        v295 = v269;
        v65 = v266;
        v15 = v267;
        *((_QWORD *)&v93 + 1) = v263;
        v283 = v93;
        v293 = v265;
        v75 = v287;
        v289 = *(float *)&v264;
      }
      else
      {
        sub_221606E90(a6);
        sub_221606E90(v51);
        *(_QWORD *)&v99 = v243;
        *((_QWORD *)&v99 + 1) = v233;
        v66 = v241;
        v284 = v242;
        v291 = v240;
        v290 = v239;
        v283 = v231;
        v74 = v237;
        v295 = v238;
        v65 = v235;
        v15 = v236;
        v293 = v234;
        v75 = v277;
        v289 = v232;
        v285 = v99;
      }
      goto LABEL_18;
    }
    v386[0] = v13;
    v52 = v14;
    v53 = v279;
    v386[1] = v279;
    v54 = v292;
    v386[2] = v284;
    v386[3] = v292;
    v386[4] = v291;
    v386[5] = v290;
    v294 = v52;
    v386[6] = v295;
    v386[7] = v52;
    v386[8] = v15;
    v386[9] = v16;
    v386[10] = v17;
    v55 = (void (*)(_QWORD, _QWORD, _QWORD))a5;
    v56 = v16;
    v57 = v17;
    v58 = v13;
    v59 = v283;
    v386[11] = v283;
    v387 = v293.i8[0] & 1;
    v60 = v296;
    v388 = v296;
    v389 = v289;
    v277 = v55;
    sub_2215C6540((uint64_t)v55, (uint64_t)&v335, &qword_2556DC6B0);
    v287 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)&v341 + 1);
    if (!*((_QWORD *)&v341 + 1))
    {
      v288 = (int32x2_t)v56;
      v66 = (uint64_t)v54;
      v94 = v51;
      v95 = v15;
      v96 = v280;
      sub_221606E90(*(_QWORD *)&v280);
      v97 = (uint64_t)v96;
      v15 = v95;
      v51 = v94;
      sub_221606E90(v97);
      sub_221606E90(v94);
      *(float32x2_t *)&v98 = v57;
      *((_QWORD *)&v98 + 1) = v59;
      v283 = v98;
      *(float32x2_t *)&v98 = v58;
      *((_QWORD *)&v98 + 1) = v53;
      v285 = v98;
      v287 = v60;
      v75 = v60;
      v74 = v294;
      v65 = v288;
LABEL_18:
      v296 = v75;
      v280 = v15;
      sub_2215C6540(v51, (uint64_t)v334, &qword_2556DC6B0);
      v101 = 0.0;
      if (v334[13])
        v102 = v306;
      else
        v102 = 0.0;
      sub_2215C6540(v286, (uint64_t)v332, &qword_2556DC6B0);
      v292 = (float32x2_t)v66;
      v294 = v74;
      v288 = v65;
      if (!v332[13]
        || (v101 = v333, !v305)
        || (*(float32x2_t *)v103.f32 = v276,
            v103.i64[1] = (uint64_t)v275,
            v104 = vsubq_f32(v103, v302),
            v105 = vsub_f32(v276, *(float32x2_t *)v302.f32),
            (float)(COERCE_FLOAT(vmulq_f32(v104, v104).i32[2]) + vaddv_f32(vmul_f32(v105, v105))) >= 0.000001))
      {
LABEL_30:
        v130 = (uint64_t)v297;
        v131 = v298;
        v132 = *(float32x2_t *)v302.f32;
        v133 = v305;
        v134 = v306;
        v277 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)&v300 + 1);
        v273 = *(float32x2_t *)((char *)&v301 + 8);
        v274 = v301;
        v271 = *((_QWORD *)&v303 + 1);
        v272 = (float32x2_t)v303;
        v270 = v304;
        v279 = (void (*)(_QWORD, _QWORD, _QWORD))v302.i64[1];
        if (v305)
        {
          v377[0] = v297;
          v377[1] = v298;
          v135 = *((_QWORD *)&v299 + 1);
          v136 = v299;
          v378 = v299;
          v137 = v300;
          v379 = v300;
          v380 = v301;
          v381 = v302;
          v382 = v303;
          v383 = v304.i8[0] & 1;
          v384 = v305;
          v385 = v306;
          swift_retain();
          v138 = WorldPlaneHitTestResult.distanceToCamera(in:)(v282);
          swift_release();
        }
        else
        {
          v137 = v300;
          v135 = *((_QWORD *)&v299 + 1);
          v136 = v299;
          v138 = INFINITY;
        }
        sub_2215C6540(v286, (uint64_t)v319, &qword_2556DC6B0);
        if (*((_QWORD *)&v320 + 1))
        {
          v326 = v319[4];
          v327 = v319[5];
          v328 = v320;
          v329 = v321;
          v322 = v319[0];
          v323 = v319[1];
          v324 = v319[2];
          v325 = v319[3];
          v139 = WorldPlaneHitTestResult.distanceToCamera(in:)(v282);
        }
        else
        {
          v139 = INFINITY;
        }
        v140 = v137;
        if ((float)(v138 - v139) > 0.03)
        {
          if (v296)
          {
            if (v133)
            {
              sub_2215C6540(v286, (uint64_t)v318, &qword_2556DC6B0);
              if (v318[13])
              {
                v141 = v288;
                v142 = vsub_f32(v132, v280);
                v143 = (int32x2_t)vmul_f32(v142, v142);
                v144 = vsub_f32(v276, v280);
                v145 = (int32x2_t)vmul_f32(v144, v144);
                v146 = vsub_f32((float32x2_t)vzip1_s32((int32x2_t)v275, (int32x2_t)v279), (float32x2_t)vdup_lane_s32(v288, 0));
                v147 = vadd_f32(vmul_f32(v146, v146), vadd_f32((float32x2_t)vzip1_s32(v145, v143), (float32x2_t)vzip2_s32(v145, v143)));
                v148 = v284;
                if (v147.f32[0] < 0.0009
                  && (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v147, 1), v147).u8[0] & 1) != 0)
                {
                  v149 = v286;
                  sub_221606E90(v286);
                  swift_release();
                  sub_2215C6540(v149, (uint64_t)&v297, &qword_2556DC6B0);
                }
                v150 = v294;
                v151 = v296;
                goto LABEL_50;
              }
            }
          }
          if (v101 <= v102)
          {
            v158 = v279;
            v152 = v277;
            v154 = v273;
            v153 = v274;
            v156 = v271;
            v155 = v272;
            v157 = v270;
          }
          else
          {
            sub_221606E90(v286);
            swift_release();
            v131 = v255;
            v130 = v256;
            v135 = v253;
            v136 = v254;
            v152 = v251;
            v140 = v252;
            v154 = v249;
            v153 = v250;
            v156 = v247;
            v155 = v248;
            v133 = v245;
            v157 = v246;
            v134 = v244;
            v158 = v275;
            v132 = v276;
          }
          v297 = (float32x2_t)v130;
          v298 = v131;
          *(_QWORD *)&v299 = v136;
          *((_QWORD *)&v299 + 1) = v135;
          *(_QWORD *)&v300 = v140;
          *((_QWORD *)&v300 + 1) = v152;
          *(_QWORD *)&v301 = v153;
          *((float32x2_t *)&v301 + 1) = v154;
          *(float32x2_t *)v302.f32 = v132;
          v302.i64[1] = (uint64_t)v158;
          *(float32x2_t *)&v303 = v155;
          *((_QWORD *)&v303 + 1) = v156;
          v304 = v157;
          v305 = v133;
          v306 = v134;
        }
        goto LABEL_48;
      }
      v106 = v278;
      if (v278)
      {
        swift_beginAccess();
        v107 = *(_QWORD *)(v106 + 16);
        v108 = *(os_unfair_lock_s **)(v107 + 24);
        swift_retain();
        swift_retain();
        os_unfair_lock_lock(v108);
        swift_beginAccess();
        v109 = *(id *)(v107 + 16);
        os_unfair_lock_unlock(v108);
        swift_release();
        swift_release();
        v110 = objc_msgSend(v109, sel_identifier);

        v111 = v257;
        sub_221652FB8();

        v112 = (int32x2_t *)v260;
        v113 = *(void (**)(char *, char *, uint64_t))(v260 + 32);
        v114 = (uint64_t)v258;
        v115 = v274;
        v113(v258, v111, v274);
        v116 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v112[7];
        v116(v114, 0, 1, v115);
        v117 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v112[6];
        if (v117(v114, 1, v115) != 1)
        {
          v118 = v114;
          v119 = v259;
          v277 = (void (*)(_QWORD, _QWORD, _QWORD))v113;
          v113(v259, (char *)v118, v115);
          v120 = v225;
          v279 = (void (*)(_QWORD, _QWORD, _QWORD))v112[2];
          v279(v225, v119, v115);
          v121 = 1;
          v116(v120, 0, 1, v115);
          v122 = v305;
          if (v305)
          {
            swift_beginAccess();
            v123 = v122[2];
            v124 = *(os_unfair_lock_s **)(v123 + 24);
            swift_retain();
            swift_retain();
            os_unfair_lock_lock(v124);
            swift_beginAccess();
            v125 = *(id *)(v123 + 16);
            v126 = v124;
            v115 = v274;
            os_unfair_lock_unlock(v126);
            swift_release();
            swift_release();
            v127 = objc_msgSend(v125, sel_identifier);

            v128 = v227;
            sub_221652FB8();

            v121 = 0;
            v129 = v226;
          }
          else
          {
            v129 = v226;
            v128 = v227;
          }
          v172 = (uint64_t)v223;
          v116(v128, v121, 1, v115);
          v173 = v172 + *(int *)(v230 + 48);
          sub_221607158(v120, v172);
          sub_221607158(v128, v173);
          if (v117(v172, 1, v115) == 1)
          {
            sub_2215D2098(v128, qword_2556DC6E0);
            sub_2215D2098(v120, qword_2556DC6E0);
            if (v117(v173, 1, v115) == 1)
            {
              sub_2215D2098(v172, qword_2556DC6E0);
              v174 = v229;
              v175 = (void (*)(uint64_t, char *, uint64_t))v279;
              v279(v229, v259, v115);
              v176 = *(void (**)(char *, uint64_t))(v260 + 8);
              p_attr = (char **)(&stru_24E72FFF8 + 8);
              v176(v174, v115);
LABEL_85:
              v199 = v228;
              v175(v228, v259, v115);
              v200 = 1;
              v116(v199, 0, 1, v115);
              sub_2215C6540(v286, (uint64_t)v377, &qword_2556DC6B0);
              v201 = v384;
              if (v384)
              {
                swift_beginAccess();
                v202 = v201[2];
                v203 = *(os_unfair_lock_s **)(v202 + 24);
                swift_retain();
                os_unfair_lock_lock(v203);
                swift_beginAccess();
                v204 = *(id *)(v202 + 16);
                os_unfair_lock_unlock(v203);
                swift_release();
                v205 = objc_msgSend(v204, p_attr[405]);

                v206 = (uint64_t)v220;
                sub_221652FB8();

                v200 = 0;
              }
              else
              {
                v206 = (uint64_t)v220;
              }
              v207 = (uint64_t)v221;
              v208 = (void (*)(char *, uint64_t, uint64_t))v277;
              v209 = v274;
              v116(v206, v200, 1, v274);
              v210 = v207 + *(int *)(v230 + 48);
              v211 = v228;
              sub_221607158(v228, v207);
              sub_221607158(v206, v210);
              if (v117(v207, 1, v209) == 1)
              {
                sub_2215D2098(v206, qword_2556DC6E0);
                sub_2215D2098(v211, qword_2556DC6E0);
                v176(v259, v209);
                if (v117(v210, 1, v209) == 1)
                {
                  sub_2215D2098(v207, qword_2556DC6E0);
LABEL_96:
                  v215 = v286;
                  sub_221606E90(v286);
                  swift_release();
                  sub_2215C6540(v215, (uint64_t)&v297, &qword_2556DC6B0);
                  goto LABEL_48;
                }
                goto LABEL_94;
              }
              v212 = v217;
              sub_221607158(v207, v217);
              if (v117(v210, 1, v209) == 1)
              {
                sub_2215D2098(v206, qword_2556DC6E0);
                sub_2215D2098(v228, qword_2556DC6E0);
                v176(v259, v209);
                v176((char *)v212, v209);
LABEL_94:
                sub_2215D2098(v207, &qword_2556DC6D8);
                goto LABEL_48;
              }
              v213 = v257;
              v208(v257, v210, v209);
              sub_2215BB99C(&qword_2556DA0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
              v214 = sub_221653168();
              v176(v213, v209);
              sub_2215D2098(v206, qword_2556DC6E0);
              sub_2215D2098(v228, qword_2556DC6E0);
              v176(v259, v209);
              v176((char *)v212, v209);
              sub_2215D2098(v207, qword_2556DC6E0);
              if ((v214 & 1) != 0)
                goto LABEL_96;
LABEL_48:
              v151 = v296;
              if (!v296)
                goto LABEL_61;
              v148 = v284;
              v150 = v294;
              v141 = v288;
LABEL_50:
              v159 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)&v285 + 1);
              v160 = v293.i8[0] & 1;
              v161 = (float32x2_t)v285;
              v354 = v285;
              v355 = v148;
              v356 = v292;
              v357 = v291;
              v358 = v290;
              v359 = v295;
              v294 = v150;
              v360 = v150;
              v361 = v280;
              v362 = v141;
              v363 = v283;
              v364 = v293.i8[0] & 1;
              v365 = v151;
              v366 = v289;
              v288 = v141;
              if (v305)
              {
                v367 = v297;
                v368 = v298;
                v369 = v299;
                v370 = v300;
                v371 = v301;
                v372 = v302;
                v373 = v303;
                v374 = v304.i8[0] & 1;
                v375 = v305;
                v376 = v306;
                swift_retain();
                swift_retain();
                isa = v282.super.isa;
                v163 = WorldPlaneHitTestResult.distanceToCamera(in:)(v282);
                swift_release();
                v164 = isa;
              }
              else
              {
                swift_retain();
                v163 = INFINITY;
                v164 = v282.super.isa;
              }
              v165 = v283;
              v166 = WorldPlaneHitTestResult.distanceToCamera(in:)((ARFrame)v164);
              swift_retain();
              WorldPlane.confidence.getter();
              v168 = v167;
              swift_release_n();
              swift_release();
              v169 = (float)(1.0 - v168) * (float)((float)(1.0 - v168) * 0.015);
              if (v169 < (float)(v163 - v166))
              {
                swift_release();
                result = swift_release();
                v297 = v161;
                v298 = v159;
                *(float32x2_t *)&v299 = v148;
                *((float32x2_t *)&v299 + 1) = v292;
                *(_QWORD *)&v300 = v291;
                *((int32x2_t *)&v300 + 1) = v290;
                *(float32x2_t *)&v301 = v295;
                *((_QWORD *)&v301 + 1) = v294;
                *(float32x2_t *)v302.f32 = v280;
                *(int32x2_t *)&v302.u32[2] = v288;
                v303 = v165;
                v304 = (int32x2_t)v160;
                v305 = v151;
LABEL_56:
                v306 = v289;
LABEL_63:
                v83 = v297;
                v87 = v298;
                v80 = *(float32x2_t *)((char *)&v299 + 8);
                v85 = (float32x2_t)v299;
                v92 = *(float32x2_t *)((char *)&v300 + 8);
                v77 = (float32x2_t)v300;
                v91 = *((_QWORD *)&v301 + 1);
                v89 = (float32x2_t)v301;
                v90 = v302.i64[1];
                v15 = *(float32x2_t *)v302.f32;
                v86 = *(float32x2_t *)((char *)&v303 + 8);
                v76 = (float32x2_t)v303;
                v88 = (float32x2_t)v304;
                v50 = v305;
                v81 = v306;
                goto LABEL_64;
              }
              if ((float)(v166 + -0.0005) < (float)(v163 - v169))
              {
                if (v278)
                {
                  v170 = *(unsigned __int8 *)(v278 + 48);
                  swift_release();
                  if (v170 == 3)
                  {
                    result = swift_release();
                    v297 = v161;
                    v298 = v159;
                    *(float32x2_t *)&v299 = v148;
                    *((float32x2_t *)&v299 + 1) = v292;
                    *(_QWORD *)&v300 = v291;
                    *((int32x2_t *)&v300 + 1) = v290;
                    *(float32x2_t *)&v301 = v295;
                    *((_QWORD *)&v301 + 1) = v294;
                    *(float32x2_t *)v302.f32 = v280;
                    *(int32x2_t *)&v302.u32[2] = v288;
                    v303 = v165;
                    v304 = (int32x2_t)v160;
                    v305 = v296;
                    goto LABEL_56;
                  }
                }
LABEL_62:
                result = swift_release();
                goto LABEL_63;
              }
LABEL_61:
              swift_release();
              goto LABEL_62;
            }
          }
          else
          {
            v178 = v219;
            sub_221607158(v172, v219);
            v179 = v117(v173, 1, v115);
            v180 = v172;
            v181 = v260;
            if (v179 != 1)
            {
              v192 = v178;
              v193 = v257;
              v277(v257, v173, v115);
              sub_2215BB99C(&qword_2556DA0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
              v194 = sub_221653168();
              v176 = *(void (**)(char *, uint64_t))(v181 + 8);
              v176(v193, v115);
              sub_2215D2098(v227, qword_2556DC6E0);
              sub_2215D2098(v225, qword_2556DC6E0);
              v176((char *)v192, v115);
              sub_2215D2098(v180, qword_2556DC6E0);
              v182 = v229;
              v175 = (void (*)(uint64_t, char *, uint64_t))v279;
              v279(v229, v259, v115);
              p_attr = (char **)(&stru_24E72FFF8 + 8);
              if ((v194 & 1) != 0)
              {
                v176(v182, v115);
                goto LABEL_85;
              }
LABEL_73:
              v175(v129, v182, v115);
              v183 = 1;
              v116(v129, 0, 1, v115);
              sub_2215C6540(v286, (uint64_t)&v330, &qword_2556DC6B0);
              v184 = v331;
              if (v331)
              {
                swift_beginAccess();
                v185 = *(_QWORD *)(v184 + 16);
                v186 = *(os_unfair_lock_s **)(v185 + 24);
                swift_retain();
                os_unfair_lock_lock(v186);
                swift_beginAccess();
                v187 = *(id *)(v185 + 16);
                os_unfair_lock_unlock(v186);
                swift_release();
                v188 = objc_msgSend(v187, p_attr[405]);

                v115 = v274;
                v189 = v222;
                sub_221652FB8();

                v183 = 0;
                v190 = v257;
                v191 = v224;
              }
              else
              {
                v190 = v257;
                v191 = v224;
                v189 = v222;
              }
              v116(v189, v183, 1, v115);
              v195 = v191 + *(int *)(v230 + 48);
              sub_221607158(v129, v191);
              sub_221607158(v189, v195);
              if (v117(v191, 1, v115) == 1)
              {
                sub_2215D2098(v189, qword_2556DC6E0);
                sub_2215D2098(v129, qword_2556DC6E0);
                v176 = *(void (**)(char *, uint64_t))(v260 + 8);
                v176(v229, v115);
                if (v117(v195, 1, v115) == 1)
                {
                  sub_2215D2098(v224, qword_2556DC6E0);
                  p_attr = (char **)(&stru_24E72FFF8 + 8);
                  goto LABEL_85;
                }
              }
              else
              {
                v196 = v218;
                sub_221607158(v191, v218);
                p_attr = &stru_24E72FFF8.attr;
                if (v117(v195, 1, v115) != 1)
                {
                  v197 = v191;
                  v277(v190, v195, v115);
                  sub_2215BB99C(&qword_2556DA0E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
                  v198 = sub_221653168();
                  v176 = *(void (**)(char *, uint64_t))(v260 + 8);
                  v176(v190, v115);
                  sub_2215D2098(v222, qword_2556DC6E0);
                  sub_2215D2098(v226, qword_2556DC6E0);
                  v176(v229, v115);
                  v176((char *)v196, v115);
                  sub_2215D2098(v197, qword_2556DC6E0);
                  v175 = (void (*)(uint64_t, char *, uint64_t))v279;
                  if ((v198 & 1) != 0)
                    goto LABEL_85;
                  goto LABEL_87;
                }
                sub_2215D2098(v222, qword_2556DC6E0);
                sub_2215D2098(v226, qword_2556DC6E0);
                v176 = *(void (**)(char *, uint64_t))(v260 + 8);
                v176(v229, v115);
                v176((char *)v196, v115);
              }
              sub_2215D2098(v224, &qword_2556DC6D8);
LABEL_87:
              v176(v259, v115);
              goto LABEL_30;
            }
            sub_2215D2098(v227, qword_2556DC6E0);
            sub_2215D2098(v120, qword_2556DC6E0);
            (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v178, v115);
            v172 = v180;
          }
          sub_2215D2098(v172, &qword_2556DC6D8);
          v182 = v229;
          v175 = (void (*)(uint64_t, char *, uint64_t))v279;
          v279(v229, v259, v115);
          p_attr = &stru_24E72FFF8.attr;
          goto LABEL_73;
        }
      }
      else
      {
        v114 = (uint64_t)v258;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v260 + 56))(v258, 1, 1, v274);
      }
      sub_2215D2098(v114, qword_2556DC6E0);
      goto LABEL_30;
    }
    v272 = v57;
    v273 = v58;
    v62 = vdupq_n_s64(v56);
    v344 = v339;
    v345 = v340;
    v346 = v341;
    v63 = v342;
    v347 = v342;
    v343[0] = v335;
    v343[1] = v336;
    v343[2] = v337;
    v343[3] = v338;
    v64 = vsub_f32(v15, *(float32x2_t *)&v339);
    v65 = (int32x2_t)v56;
    if ((float)((float)((float)(*(float *)&v62.i32[2] - *((float *)&v344 + 2))
                       * (float)(*(float *)&v62.i32[2] - *((float *)&v344 + 2)))
               + vaddv_f32(vmul_f32(v64, v64))) > 0.0009)
    {
      *(_QWORD *)&v61 = v335;
      v285 = v61;
      v66 = *((_QWORD *)&v336 + 1);
      v268 = v337;
      v269 = (float32x2_t)v336;
      v67 = *(int32x2_t *)((char *)&v337 + 8);
      v266 = (int32x2_t)v339;
      v267 = (float32x2_t)v338;
      v270 = *(int32x2_t *)((char *)&v339 + 8);
      v271 = *((_QWORD *)&v338 + 1);
      v262 = v340;
      v263 = *((_QWORD *)&v335 + 1);
      v264 = *((_QWORD *)&v340 + 1);
      v265 = (float32x2_t)v341;
      v68 = (uint64_t)v280;
      sub_221606E90(*(_QWORD *)&v280);
      sub_221606E90(v68);
      sub_221606E90(v51);
      v69 = v277;
      sub_221606E90((uint64_t)v277);
      v70 = v282.super.isa;
      v71 = WorldPlaneHitTestResult.distanceSquaredToCamera(in:)(v282);
      v72 = WorldPlaneHitTestResult.distanceSquaredToCamera(in:)((ARFrame)v70);
      sub_221606E68(v68);
      if (v71 >= v72)
      {
        sub_221606E68((uint64_t)v69);
        v75 = (void (*)(_QWORD, _QWORD, _QWORD))swift_retain();
        *(float32x2_t *)&v100 = v272;
        *((_QWORD *)&v100 + 1) = v283;
        v283 = v100;
        *(float32x2_t *)&v100 = v273;
        *((_QWORD *)&v100 + 1) = v279;
        v285 = v100;
        v287 = v75;
        v66 = (uint64_t)v292;
        v51 = (uint64_t)v288;
        v74 = v294;
      }
      else
      {
        sub_221606E68(v68);
        sub_221606E90((uint64_t)v343);
        *(_QWORD *)&v73 = v285;
        *((_QWORD *)&v73 + 1) = v263;
        v285 = v73;
        *(_QWORD *)&v73 = v262;
        v284 = v269;
        v291 = v268;
        v290 = v67;
        v15 = (float32x2_t)v266;
        v295 = v267;
        v65 = v270;
        v74 = v271;
        *((_QWORD *)&v73 + 1) = v264;
        v283 = v73;
        v293 = v265;
        v75 = v287;
        v289 = v63;
        v51 = (uint64_t)v288;
      }
      goto LABEL_18;
    }
    v50 = v296;
    swift_retain();
    result = swift_release();
    v80 = v292;
    v77 = (float32x2_t)v291;
    v92 = (float32x2_t)v290;
    v89 = v295;
    v81 = v289;
    v88 = v293;
    v87 = v279;
    v91 = v294;
    v86 = (float32x2_t)v283;
    v90 = v56;
    v76 = v272;
    v83 = v273;
    v85 = v284;
  }
LABEL_64:
  v171 = v281;
  *v281 = v83;
  v171[1] = (float32x2_t)v87;
  v171[2] = v85;
  v171[3] = v80;
  v171[4] = v77;
  v171[5] = v92;
  v171[6] = v89;
  v171[7] = (float32x2_t)v91;
  v171[8] = v15;
  v171[9] = (float32x2_t)v90;
  v171[10] = v76;
  v171[11] = v86;
  v171[12] = v88;
  v171[13] = (float32x2_t)v50;
  v171[14].f32[0] = v81;
  return result;
}

unint64_t sub_221605E4C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  unint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float v16;
  float v17;
  id v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  id v25;
  __n128 v26;
  float32x4_t v27;
  float32x4_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  _BYTE v35[128];
  char v36[64];
  float32x4_t v37;
  uint64_t v38;
  _BYTE v39[96];

  HIDWORD(v30) = a2;
  if (a3 == 33)
  {
    result = (*(uint64_t (**)(void))(v6 + 120))();
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(v6 + 104))(a3);
    if (!result)
      return result;
  }
  v12 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_2216539F0();
    result = swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_6;
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v13)
    goto LABEL_27;
LABEL_6:
  if (v13 >= 1)
  {
    v31 = 0;
    LODWORD(v30) = 0;
    v14 = 0;
    v15.i64[0] = a4;
    v15.i64[1] = a5;
    v32 = v15;
    v16 = *(float *)&a4;
    v17 = 3.4028e38;
    while (1)
    {
      if ((v12 & 0xC000000000000001) != 0)
      {
        v18 = (id)MEMORY[0x22766ED44](v14, v12);
        if ((a6 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        v18 = *(id *)(v12 + 8 * v14 + 32);
        if ((a6 & 1) == 0)
        {
LABEL_14:
          objc_msgSend(v18, sel_transform, v30);
          v20 = v16 * v19.f32[0];
          v21 = vmulq_f32(v19, v32);
          if (fabsf(v21.f32[2] + (float)(v20 + v21.f32[1])) < 0.866)
            goto LABEL_24;
        }
      }
      type metadata accessor for WorldPlane();
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 24) = xmmword_221657CC0;
      *(_QWORD *)(v22 + 40) = 0x3F5DB22D40000000;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC6C0);
      v23 = swift_allocObject();
      v18 = v18;
      v24 = (_DWORD *)swift_slowAlloc();
      *v24 = 0;
      *(_QWORD *)(v23 + 16) = v18;
      *(_QWORD *)(v23 + 24) = v24;
      *(_QWORD *)(v22 + 16) = v23;
      swift_endAccess();
      *(_BYTE *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 52) = 0x3F80000000000000;
      memset(v39, 0, 64);
      v39[64] = 1;
      if (qword_2556D8DD0 != -1)
        swift_once();
      WorldPlane.refresh(anchor:camera:uncertaintyPoint:)(v18, (uint64_t)v39, (float32x4_t)static SIMD3<>.zero);
      v25 = objc_msgSend(a1, sel_camera);
      v26 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v25, (uint64_t)v39);
      v33 = v27;
      v34 = (float32x4_t)v26;

      WorldPlane.hitTest(hitRay:withPlaneType:)(7, (uint64_t)v35, v34, v33);
      sub_2215C6540((uint64_t)v35, (uint64_t)v36, &qword_2556DC6B0);
      if (v38)
      {
        v28 = v37;
        v28.i32[3] = 0;
        v29 = WorldPlane.distanceToEdge(point:)(v28);
        sub_221606E68((uint64_t)v35);

        if ((v29 & 0x100000000) != 0 || v17 <= *(float *)&v29 || *(float *)&v29 < 0.0 && (v30 & 0x100000000) != 0)
        {
          swift_release();
        }
        else
        {
          swift_release();
          v17 = *(float *)&v29;
          v31 = v22;
          LODWORD(v30) = v29;
        }
        goto LABEL_9;
      }
      swift_release();
LABEL_24:

LABEL_9:
      if (v13 == ++v14)
      {
        swift_bridgeObjectRelease();
        return v31;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t PlaneSelector.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_2215D2098(v0 + 184, &qword_2556DC500);
  swift_release();
  return v0;
}

uint64_t PlaneSelector.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_2215D2098(v0 + 184, &qword_2556DC500);
  swift_release();
  return swift_deallocClassInstance();
}

void *PlaneSelector.DebugOptions.showHitPoints.unsafeMutableAddressor()
{
  return &static PlaneSelector.DebugOptions.showHitPoints;
}

uint64_t static PlaneSelector.DebugOptions.showHitPoints.getter()
{
  return 1;
}

void *PlaneSelector.DebugOptions.showHitRay.unsafeMutableAddressor()
{
  return &static PlaneSelector.DebugOptions.showHitRay;
}

uint64_t static PlaneSelector.DebugOptions.showHitRay.getter()
{
  return 2;
}

unint64_t sub_221606298()
{
  unint64_t result;

  result = sub_2215C2BF8((uint64_t)&unk_24E722AB0);
  static PlaneSelector.DebugOptions.keyForFeature = result;
  return result;
}

uint64_t *PlaneSelector.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  if (qword_2556D8E68 != -1)
    swift_once();
  return &static PlaneSelector.DebugOptions.keyForFeature;
}

uint64_t static PlaneSelector.DebugOptions.keyForFeature.getter()
{
  return sub_2215C5614(&qword_2556D8E68);
}

uint64_t sub_221606318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (qword_2556D8E68 != -1)
    swift_once();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_22161BCF8(v0);
  result = swift_bridgeObjectRelease();
  static PlaneSelector.DebugOptions.keys = v1;
  return result;
}

uint64_t *PlaneSelector.DebugOptions.keys.unsafeMutableAddressor()
{
  if (qword_2556D8E70 != -1)
    swift_once();
  return &static PlaneSelector.DebugOptions.keys;
}

uint64_t static PlaneSelector.DebugOptions.keys.getter()
{
  return sub_2215C5614(&qword_2556D8E70);
}

uint64_t sub_2216063DC()
{
  uint64_t result;

  if (qword_2556D8E68 != -1)
    swift_once();
  result = sub_221617FA8(static PlaneSelector.DebugOptions.keyForFeature);
  static PlaneSelector.DebugOptions.default = result;
  return result;
}

uint64_t static PlaneSelector.DebugOptions.default.getter()
{
  if (qword_2556D8E78 != -1)
    swift_once();
  swift_beginAccess();
  return static PlaneSelector.DebugOptions.default;
}

uint64_t static PlaneSelector.DebugOptions.default.setter(uint64_t a1)
{
  uint64_t result;

  if (qword_2556D8E78 != -1)
    swift_once();
  result = swift_beginAccess();
  static PlaneSelector.DebugOptions.default = a1;
  return result;
}

uint64_t (*static PlaneSelector.DebugOptions.default.modify())()
{
  if (qword_2556D8E78 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t PlaneSelector.PlaneSelectionStats.adCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PlaneSelector.PlaneSelectionStats.adCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.adCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.arkitCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PlaneSelector.PlaneSelectionStats.arkitCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.arkitCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.localPlaneCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PlaneSelector.PlaneSelectionStats.localPlaneCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.localPlaneCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.patchCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PlaneSelector.PlaneSelectionStats.patchCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.patchCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.inferredCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t PlaneSelector.PlaneSelectionStats.inferredCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.inferredCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.fallbackCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t PlaneSelector.PlaneSelectionStats.fallbackCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.fallbackCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.prevCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t PlaneSelector.PlaneSelectionStats.prevCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.prevCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.totalCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t PlaneSelector.PlaneSelectionStats.totalCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.totalCount.modify())()
{
  return nullsub_1;
}

void sub_221606668(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD **)(v1 + 224);
  v3 = (os_unfair_lock_s *)v2[10];
  swift_retain();
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[6];
  v9 = v2[7];
  v11 = v2[8];
  v10 = v2[9];
  os_unfair_lock_unlock(v3);
  v12 = __OFADD__(v10, 1);
  v13 = v10 + 1;
  if (!v12)
  {
    os_unfair_lock_lock(v3);
    v2[2] = v4;
    v2[3] = v5;
    v2[4] = v6;
    v2[5] = v7;
    v2[6] = v8;
    v2[7] = v9;
    v2[8] = v11;
    v2[9] = v13;
    os_unfair_lock_unlock(v3);
    swift_release();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x221606A30);
}

uint64_t sub_221606A68(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_221606668(a2);
    return swift_release();
  }
  return result;
}

unint64_t sub_221606AC8()
{
  unint64_t result;

  result = qword_2556DC508;
  if (!qword_2556DC508)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PlaneSelector.PatchTrackingMode, &type metadata for PlaneSelector.PatchTrackingMode);
    atomic_store(result, (unint64_t *)&qword_2556DC508);
  }
  return result;
}

unint64_t sub_221606B10()
{
  unint64_t result;

  result = qword_2556DC510;
  if (!qword_2556DC510)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PlaneSelector.ADTestMode, &type metadata for PlaneSelector.ADTestMode);
    atomic_store(result, (unint64_t *)&qword_2556DC510);
  }
  return result;
}

unint64_t sub_221606B58()
{
  unint64_t result;

  result = qword_2556DC518;
  if (!qword_2556DC518)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PlaneSelector.DebugOptions, &type metadata for PlaneSelector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DC518);
  }
  return result;
}

unint64_t sub_221606BA0()
{
  unint64_t result;

  result = qword_2556DC520;
  if (!qword_2556DC520)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PlaneSelector.DebugOptions, &type metadata for PlaneSelector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DC520);
  }
  return result;
}

unint64_t sub_221606BE8()
{
  unint64_t result;

  result = qword_2556DC528;
  if (!qword_2556DC528)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PlaneSelector.DebugOptions, &type metadata for PlaneSelector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DC528);
  }
  return result;
}

unint64_t sub_221606C30()
{
  unint64_t result;

  result = qword_2556DC530;
  if (!qword_2556DC530)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for PlaneSelector.DebugOptions, &type metadata for PlaneSelector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DC530);
  }
  return result;
}

uint64_t type metadata accessor for PlaneSelector()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for PlaneSelector.PatchTrackingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_221606CE8 + 4 * byte_221657CF5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_221606D1C + 4 * byte_221657CF0[v4]))();
}

uint64_t sub_221606D1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_221606D24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x221606D2CLL);
  return result;
}

uint64_t sub_221606D38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x221606D40);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_221606D44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_221606D4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaneSelector.PatchTrackingMode()
{
  return &type metadata for PlaneSelector.PatchTrackingMode;
}

uint64_t storeEnumTagSinglePayload for PlaneSelector.ADTestMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_221606DB4 + 4 * byte_221657CFF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_221606DE8 + 4 * byte_221657CFA[v4]))();
}

uint64_t sub_221606DE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_221606DF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x221606DF8);
  return result;
}

uint64_t sub_221606E04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x221606E0CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_221606E10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_221606E18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaneSelector.ADTestMode()
{
  return &type metadata for PlaneSelector.ADTestMode;
}

ValueMetadata *type metadata accessor for PlaneSelector.DebugOptions()
{
  return &type metadata for PlaneSelector.DebugOptions;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PlaneSelector.PlaneSelectionStats()
{
  return &type metadata for PlaneSelector.PlaneSelectionStats;
}

uint64_t sub_221606E68(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_221606E90(uint64_t a1)
{
  swift_retain();
  return a1;
}

char *sub_221606EB8()
{
  char *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  __float2 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  char *v12;
  unint64_t v13;
  int64_t v14;

  v0 = sub_2215D6F10(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = *((_QWORD *)v0 + 2);
  v1 = *((_QWORD *)v0 + 3);
  if (v2 >= v1 >> 1)
    v0 = sub_2215D6F10((char *)(v1 > 1), v2 + 1, 1, v0);
  v3 = 0;
  *((_QWORD *)v0 + 2) = v2 + 1;
  v4 = &v0[16 * v2];
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0;
  do
  {
    v6 = __sincosf_stret((float)v3 * 0.7854);
    v8 = *((_QWORD *)v0 + 2);
    v7 = *((_QWORD *)v0 + 3);
    v9 = v8 + 1;
    if (v8 >= v7 >> 1)
      v0 = sub_2215D6F10((char *)(v7 > 1), v8 + 1, 1, v0);
    v10 = (float)(v6.__cosval * 20.0);
    v11 = (float)(v6.__sinval * 20.0);
    *((_QWORD *)v0 + 2) = v9;
    v12 = &v0[16 * v8];
    *((double *)v12 + 4) = v10;
    *((double *)v12 + 5) = v11;
    if ((v3 & 1) == 0)
    {
      v13 = *((_QWORD *)v0 + 3);
      v14 = v8 + 2;
      if (v14 > (uint64_t)(v13 >> 1))
        v0 = sub_2215D6F10((char *)(v13 > 1), v14, 1, v0);
      *((_QWORD *)v0 + 2) = v14;
      v5 = &v0[16 * v9];
      *((double *)v5 + 4) = v10 * 0.5;
      *((double *)v5 + 5) = v11 * 0.5;
    }
    ++v3;
  }
  while (v3 != 8);
  return v0;
}

uint64_t sub_22160701C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_221607040()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22160706C()
{
  uint64_t v0;

  return sub_221606A68(*(_QWORD *)(v0 + 16), v0 + 32);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_221607090(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *sub_2216070C4(uint64_t *a1)
{
  sub_22160711C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t sub_22160711C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t result;

  result = a16;
  if (a16 != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_221607158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2556DC6E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2216071A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static Extremities.empty.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = sub_221653714();
  sub_221653AC8();
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 72);
  swift_allocObject();
  sub_221653348();
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
  v8(v6, 1, 1, a1);
  v8(v7 + v5, 1, 1, a1);
  v8(v7 + 2 * v5, 1, 1, a1);
  v8(v7 + 3 * v5, 1, 1, a1);
  v9 = sub_2216533FC();
  nullsub_1(v9);
  return Extremities.init(sortedPoints:)(a1, a2);
}

uint64_t Extremities.init(sortedPoints:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, char *, uint64_t);
  uint64_t v17;

  v4 = sub_221653714();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
  v8(a2, 1, 1, a1);
  v11 = (int *)type metadata accessor for Extremities(0, a1, v9, v10);
  v12 = a2 + v11[7];
  v8(v12, 1, 1, a1);
  v13 = a2 + v11[8];
  v8(v13, 1, 1, a1);
  v14 = a2 + v11[9];
  v8(v14, 1, 1, a1);
  sub_221653420();
  v15 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 40);
  v15(a2, v7, v4);
  sub_221653420();
  v15(v12, v7, v4);
  sub_221653420();
  v15(v13, v7, v4);
  sub_221653420();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v15)(v14, v7, v4);
}

uint64_t Extremities.top.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t Extremities.top.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*Extremities.top.modify())()
{
  return nullsub_1;
}

uint64_t Extremities.left.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t Extremities.left.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*Extremities.left.modify())()
{
  return nullsub_1;
}

uint64_t Extremities.bottom.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t Extremities.bottom.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*Extremities.bottom.modify())()
{
  return nullsub_1;
}

uint64_t Extremities.right.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t Extremities.right.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*Extremities.right.modify())()
{
  return nullsub_1;
}

BOOL Extremities.hasAllExtremities.getter(int *a1)
{
  uint64_t v1;

  Extremities.allPoints.getter(a1);
  v1 = MEMORY[0x22766E840]();
  swift_bridgeObjectRelease();
  return v1 == 4;
}

uint64_t Extremities.allPoints.getter(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = sub_221653714();
  sub_221653AC8();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  swift_allocObject();
  sub_221653348();
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v6, v1, v3);
  v8(v7 + v5, v1 + a1[7], v3);
  v8(v7 + 2 * v5, v1 + a1[8], v3);
  v8(v7 + 3 * v5, v1 + a1[9], v3);
  v9 = sub_2216533FC();
  nullsub_1(v9);
  MEMORY[0x22766FA4C](MEMORY[0x24BEE12C8], v9);
  v10 = sub_221653294();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t type metadata accessor for Extremities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Extremities);
}

uint64_t sub_221607898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_221653714();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_2216078EC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2216078F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_221653714();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_221607964(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v13;
  unsigned int (*v14)(uint64_t *, uint64_t, uint64_t);
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v10 + ((v10 + (v10 & v9)) & v9)) & v9) + v7 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v14 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48);
    if (v14(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v15 = (_QWORD *)(((unint64_t)a2 + v10) & v9);
    if (v14(v15, 1, v5))
    {
      memcpy((void *)(((unint64_t)a1 + v10) & v9), v15, v7);
    }
    else
    {
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v6 + 16))(((unint64_t)a1 + v10) & v9, v15, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)a1 + v10) & v9, 0, 1, v5);
    }
    v16 = (void *)((v10 + (((unint64_t)a1 + v10) & v9)) & v9);
    v17 = (_QWORD *)(((unint64_t)v15 + v10) & v9);
    if (v14(v17, 1, v5))
    {
      memcpy(v16, v17, v7);
    }
    else
    {
      (*(void (**)(void *, _QWORD *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
    }
    v18 = (void *)(((unint64_t)v16 + v10) & v9);
    v19 = (_QWORD *)(((unint64_t)v17 + v10) & v9);
    if (v14(v19, 1, v5))
    {
      memcpy(v18, v19, v7);
    }
    else
    {
      (*(void (**)(void *, _QWORD *, uint64_t))(v6 + 16))(v18, v19, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
    }
  }
  return a1;
}

uint64_t sub_221607B98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v5(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v6 + v7;
  v9 = ~v7;
  v10 = (v6 + v7 + a1) & ~v7;
  if (!v5(v10, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v3);
  v11 = (v8 + v10) & v9;
  if (!v5(v11, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v3);
  v12 = (v8 + v11) & v9;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v12, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v12, v3);
  return result;
}

void *sub_221607CA0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  void *v19;
  const void *v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = (void *)(((unint64_t)v15 + v13) & v14);
  v18 = (const void *)(((unint64_t)v16 + v13) & v14);
  if (v7(v18, 1, v5))
  {
    memcpy(v17, v18, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  v19 = (void *)(((unint64_t)v17 + v13) & v14);
  v20 = (const void *)(((unint64_t)v18 + v13) & v14);
  if (v7(v20, 1, v5))
  {
    memcpy(v19, v20, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v19, v20, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  }
  return a1;
}

void *sub_221607E98(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  void *v23;
  void *v24;
  int v25;
  int v26;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  v17 = v7(v15, 1, v5);
  v18 = v7(v16, 1, v5);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v15, v16, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
LABEL_18:
    memcpy(v15, v16, v11);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v15, v16, v5);
LABEL_19:
  v19 = (void *)(((unint64_t)v15 + v13) & v14);
  v20 = (void *)(((unint64_t)v16 + v13) & v14);
  v21 = v7(v19, 1, v5);
  v22 = v7(v20, 1, v5);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v19, v20, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v19, v5);
LABEL_24:
    memcpy(v19, v20, v11);
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v19, v20, v5);
LABEL_25:
  v23 = (void *)(((unint64_t)v19 + v13) & v14);
  v24 = (void *)(((unint64_t)v20 + v13) & v14);
  v25 = v7(v23, 1, v5);
  v26 = v7(v24, 1, v5);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v23, v24, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v23, v5);
    goto LABEL_30;
  }
  if (v26)
  {
LABEL_30:
    memcpy(v23, v24, v11);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v23, v24, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
  return a1;
}

void *sub_22160819C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(const void *, uint64_t, uint64_t);
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  void *v19;
  const void *v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
    if (v8)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v8 = *(_DWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = (void *)(((unint64_t)v15 + v13) & v14);
  v18 = (const void *)(((unint64_t)v16 + v13) & v14);
  if (v7(v18, 1, v5))
  {
    memcpy(v17, v18, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  v19 = (void *)(((unint64_t)v17 + v13) & v14);
  v20 = (const void *)(((unint64_t)v18 + v13) & v14);
  if (v7(v20, 1, v5))
  {
    memcpy(v19, v20, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v19, v20, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  }
  return a1;
}

void *sub_221608394(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  void *v23;
  void *v24;
  int v25;
  int v26;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v11 + v12;
  v14 = ~v12;
  v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  v16 = (void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  v17 = v7(v15, 1, v5);
  v18 = v7(v16, 1, v5);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v15, v16, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
LABEL_18:
    memcpy(v15, v16, v11);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v15, v16, v5);
LABEL_19:
  v19 = (void *)(((unint64_t)v15 + v13) & v14);
  v20 = (void *)(((unint64_t)v16 + v13) & v14);
  v21 = v7(v19, 1, v5);
  v22 = v7(v20, 1, v5);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v19, v20, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v19, v5);
LABEL_24:
    memcpy(v19, v20, v11);
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v19, v20, v5);
LABEL_25:
  v23 = (void *)(((unint64_t)v19 + v13) & v14);
  v24 = (void *)(((unint64_t)v20 + v13) & v14);
  v25 = v7(v23, 1, v5);
  v26 = v7(v24, 1, v5);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v23, v24, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v23, v5);
    goto LABEL_30;
  }
  if (v26)
  {
LABEL_30:
    memcpy(v23, v24, v11);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v23, v24, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
  return a1;
}

uint64_t sub_221608698(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = *(unsigned __int8 *)(v4 + 80);
    v10 = ((v7 + v9 + ((v7 + v9 + ((v7 + v9) & ~v9)) & ~v9)) & ~v9) + v7;
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_8;
    v13 = ((v8 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (v12)
        goto LABEL_15;
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2)
          goto LABEL_22;
LABEL_8:
        v12 = *(unsigned __int8 *)(a1 + v10);
        if (!*(_BYTE *)(a1 + v10))
          goto LABEL_22;
LABEL_15:
        v14 = (v12 - 1) << v11;
        if (v10 > 3)
          v14 = 0;
        if ((_DWORD)v10)
        {
          if (v10 > 3)
            LODWORD(v10) = 4;
          __asm { BR              X12 }
        }
        return v6 + v14 + 1;
      }
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (*(_WORD *)(a1 + v10))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v5 < 2)
    return 0;
  v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void sub_2216087F0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = ((v10 + v11 + ((v10 + v11 + ((v10 + v11) & ~v11)) & ~v11)) & ~v11) + v10;
  v13 = a3 >= v9;
  v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_15;
      goto LABEL_22;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_15:
        v16 = ~v9 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_22:
      __asm { BR              X11 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v9 < a2)
    goto LABEL_15;
  goto LABEL_22;
}

void sub_2216089B8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2216089C0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void *effectiveStatusBarOrientation.unsafeMutableAddressor()
{
  return &effectiveStatusBarOrientation;
}

uint64_t PlaneSolver.minInliners.getter()
{
  return 4;
}

uint64_t PlaneSolver.maxInliners.getter()
{
  return 50;
}

uint64_t PlaneSolver.considerUncertainties.getter()
{
  return 1;
}

float sub_221608A08()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 88) & 1) == 0)
    return *(float *)(v0 + 84);
  *(_DWORD *)(v0 + 84) = 1048871919;
  *(_BYTE *)(v0 + 88) = 0;
  return 0.25882;
}

uint64_t sub_221608A30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 200) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PlaneSolver.pointCloudWithNoise.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

_QWORD *sub_221608AC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 208))
  {
    v1 = *(_QWORD **)(v0 + 208);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC9C0);
    v1 = (_QWORD *)swift_allocObject();
    swift_weakInit();
    v2 = MEMORY[0x24BEE4AF8];
    v1[3] = MEMORY[0x24BEE4AF8];
    v1[4] = v2;
    v1[5] = v2;
    swift_weakAssign();
    *(_QWORD *)(v0 + 208) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t PlaneSolver.solve(data:iteration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  _BYTE v7[48];

  sub_221609BE4(a1, (uint64_t)v7, a3, a4, a5);
  return sub_221609EE4((uint64_t)v7, a2);
}

float PlaneSolver.getError(model:sample:)(int8x16_t a1, float32x4_t a2, int8x16_t a3)
{
  float v3;

  v3 = _s17MeasureFoundation9PlaneUtilC8distance5point5planeSfs5SIMD3VySfG_AI6center_AI6normalttFZ_0(a3, a1, a2);
  return v3 * v3;
}

void PlaneSolver.getError(model:samples:)(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t *v3;
  float32x4_t v5;
  float v6;
  float32x4_t v7;

  if ((v3[10].i8[0] & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = v3[9];
    v6 = v5.f32[0] * a3.f32[0];
    v7 = vmulq_f32(v5, a3);
    if (fabsf(v7.f32[2] + (float)(v6 + v7.f32[1])) >= sub_221608A08())
      sub_221609F2C(a1, a2, a3);
  }
}

void PlaneSolver.detectPlane(data:vergenceAngleCosines:pointOfView:camera:bestData:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, float32x4_t *a5@<X8>, float32x4_t a6@<Q1>, float32x4_t a7@<Q2>, __n128 a8@<Q3>)
{
  uint64_t v8;
  unint64_t v10;
  float32x4_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  __n128 v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v8 + 96) = v10;
  v11 = 0uLL;
  v12 = 0.0;
  if (v10 < 4)
  {
    v13 = 0;
    v14 = 0;
    v15 = 1;
LABEL_16:
    *a5 = v11;
    a5[1].i64[0] = v13;
    a5[1].i64[1] = v14;
    a5[2].f32[0] = v12;
    a5[2].i8[4] = v15;
    return;
  }
  v17 = sub_2216096B0(a1, a2, a3, 3.0);
  v18 = a8;
  v18.n128_u32[3] = 0;
  *(__n128 *)(v8 + 112) = v18;
  *(_BYTE *)(v8 + 128) = 0;
  v19 = (int32x4_t)vmulq_f32(a7, a7);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
  *(float32x4_t *)(v8 + 144) = vmulq_n_f32(a7, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
  v22 = (int32x4_t)vmulq_f32(a6, a6);
  *(_BYTE *)(v8 + 160) = 0;
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  *(float32x4_t *)(v8 + 176) = vmulq_n_f32(a6, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  *(_BYTE *)(v8 + 192) = 0;
  v25 = *(_QWORD *)(v8 + 96);
  v26 = (float)v25 * 0.8;
  if ((~LODWORD(v26) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v26 <= -9.2234e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v26 < 9.2234e18)
  {
    v27 = (uint64_t)v26;
    if ((uint64_t)v26 >= 15)
      v27 = 15;
    if (v27 <= 3)
      v28 = 3;
    else
      v28 = v27;
    v29 = sub_221608EBC(v25);
    swift_bridgeObjectRetain();
    sub_221608AC0();
    sub_2216090BC(&v43, v17, 4, v29, v28, a4, 0.000025);
    v31 = v30;
    swift_release();
    swift_bridgeObjectRelease();
    if ((v46 & 1) != 0)
    {
      v13 = 0;
      v14 = 0;
      v15 = 1;
      v11 = 0uLL;
    }
    else
    {
      v13 = v44;
      v14 = v45;
      v35 = *a4;
      *(float32x2_t *)v36.f32 = _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0(*a4, v32, v33, v34);
      v11 = v36;
      if (v31 < INFINITY)
      {
        v37.i64[0] = v13;
        v37.i64[1] = v14;
        v42 = v36;
        v38 = sub_221609F2C(v35, v36, v37);
        v11 = v42;
        v12 = (float)(v31 / (float)(v38 * -50.0)) + 1.0;
      }
      v15 = 0;
    }
    goto LABEL_16;
  }
LABEL_19:
  __break(1u);
}

uint64_t sub_221608EBC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = (float)((float)result / 50.0) * (float)((float)result / 50.0);
  if ((~LODWORD(v6) & 0x7F800000) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 <= -9.2234e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v6 >= 9.2234e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v7 = v5 * (uint64_t)v6;
  if ((unsigned __int128)(v5 * (__int128)(uint64_t)v6) >> 64 != v7 >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = v2 + v7;
  if (__OFADD__(v2, v7))
LABEL_13:
    __break(1u);
  return result;
}

uint64_t PlaneSolver.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PlaneSolver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_221608FA4()
{
  uint64_t v0;
  _QWORD *v1;

  *(_OWORD *)(v0 + 16) = xmmword_221658230;
  *(_BYTE *)(v0 + 32) = 1;
  *(_OWORD *)(v0 + 40) = xmmword_221658240;
  *(_QWORD *)(v0 + 56) = 0x3FA78D3637D1B717;
  *(_OWORD *)(v0 + 64) = xmmword_221658250;
  *(_QWORD *)(v0 + 80) = 1077936128;
  *(_BYTE *)(v0 + 88) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  v1 = (_QWORD *)sub_221653390();
  v1[2] = 3;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
  *(_QWORD *)(v0 + 104) = v1;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 128) = 1;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_BYTE *)(v0 + 160) = 1;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_BYTE *)(v0 + 192) = 1;
  *(_QWORD *)(v0 + 200) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 208) = 0;
  return v0;
}

uint64_t sub_221609058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  _BYTE v7[48];

  sub_221609BE4(a1, (uint64_t)v7, a3, a4, a5);
  return sub_221609EE4((uint64_t)v7, a2);
}

float sub_221609090(uint64_t a1, int8x16_t *a2)
{
  float v2;

  v2 = _s17MeasureFoundation9PlaneUtilC8distance5point5planeSfs5SIMD3VySfG_AI6center_AI6normalttFZ_0(*a2, *(int8x16_t *)a1, *(float32x4_t *)(a1 + 16));
  return v2 * v2;
}

void sub_2216090B0(float32x4_t *a1, uint64_t a2)
{
  PlaneSolver.getError(model:samples:)(a2, *a1, a1[1]);
}

void sub_2216090BC(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, float a7)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  uint64_t *v16;
  float v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  float32x4_t v34;
  float v35;
  char *v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  char *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  float32x4_t v64;
  float v65;
  float v66;
  float v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  float32x4_t v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  float32x4_t *v84;
  float32x4_t v87;
  char **v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _QWORD v94[6];
  _QWORD v95[6];
  _BYTE v96[48];
  _BYTE v97[48];

  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    *a1 = 0u;
    a1[1] = 0u;
    a1[2].i8[0] = 1;
    return;
  }
  if (a4 < 0)
    goto LABEL_61;
  if (!a4)
  {
    swift_release();
    v75 = 0uLL;
    v74 = 1;
    v76 = 0uLL;
    goto LABEL_56;
  }
  v81 = a6;
  v82 = a4;
  v77 = a1;
  v13 = 0;
  v14 = *(_QWORD *)(a2 + 16);
  v15 = (char **)(v7 + 32);
  v88 = (char **)(v7 + 24);
  v16 = (uint64_t *)(v7 + 40);
  v93 = a2 + 32;
  v78 = 0u;
  v79 = 0u;
  v80 = 1;
  v17 = INFINITY;
  v84 = (float32x4_t *)Strong;
  while (1)
  {
    if (v13 == a4)
      goto LABEL_59;
    swift_beginAccess();
    swift_beginAccess();
    sub_221609914(a2, a3, v15, v88);
    swift_endAccess();
    swift_endAccess();
    v18 = swift_bridgeObjectRetain();
    sub_221609BE4(v18, (uint64_t)v94, v19, v20, v21);
    v23 = v94[0];
    v22 = v94[1];
    v25 = v94[2];
    v24 = v94[3];
    swift_bridgeObjectRelease();
    sub_221609EE4((uint64_t)v94, (uint64_t)v97);
    if ((v97[32] & 1) == 0)
      break;
LABEL_6:
    if (++v13 == a4)
    {
      swift_release();
      a1 = v77;
      v74 = v80;
      v76 = v78;
      v75 = v79;
LABEL_56:
      *a1 = v75;
      a1[1] = v76;
      a1[2].i8[0] = v74 & 1;
      return;
    }
  }
  v91 = v24;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v27 = *v16;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_2215C1234(0, *(_QWORD *)(v27 + 16));
  }
  else
  {
    v28 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(v27 + 24) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0D0);
      v28 = (_QWORD *)swift_allocObject();
      v29 = _swift_stdlib_malloc_size(v28);
      v30 = v29 - 32;
      if (v29 < 32)
        v30 = v29 - 17;
      v28[2] = 0;
      v28[3] = 2 * (v30 >> 4);
    }
    *v16 = (uint64_t)v28;
    swift_bridgeObjectRelease();
  }
  v31.i64[0] = v23;
  v31.i64[1] = v22;
  v87 = v31;
  v31.i64[0] = v25;
  v31.i64[1] = v91;
  v89 = v31;
  swift_endAccess();
  v32 = v89;
  if (!v14)
  {
LABEL_37:
    v48 = *(_QWORD *)(*v16 + 16);
    v49 = *((_QWORD *)*v88 + 2);
    v50 = __OFADD__(v48, v49);
    v51 = v48 + v49;
    if (v50)
      goto LABEL_60;
    if (v51 < a5)
    {
      a4 = v82;
    }
    else
    {
      v52 = swift_bridgeObjectRetain();
      sub_2215F97C0(v52);
      v53 = swift_bridgeObjectRetain();
      sub_221609BE4(v53, (uint64_t)v95, v54, v55, v56);
      v58 = v95[0];
      v57 = v95[1];
      v60 = v95[2];
      v59 = v95[3];
      swift_bridgeObjectRelease();
      sub_221609EE4((uint64_t)v95, (uint64_t)v96);
      v61 = v89;
      if ((v96[32] & 1) == 0)
      {
        v62.i64[0] = v58;
        v62.i64[1] = v57;
        v87 = v62;
        v61.i64[0] = v60;
        v61.i64[1] = v59;
      }
      if ((v84[10].i8[0] & 1) != 0)
        goto LABEL_62;
      v63 = *v16;
      v64 = vmulq_f32(v61, v84[9]);
      v65 = fabsf(v64.f32[2] + (float)((float)(COERCE_FLOAT(v84[9].i64[0]) * v61.f32[0]) + v64.f32[1]));
      v90 = v61;
      a4 = v82;
      if (v65 >= sub_221608A08())
      {
        v66 = (float)*(uint64_t *)(v63 + 16);
        v67 = sub_221609F2C(v63, v87, v90) * (float)(50.0 / v66);
        if (v67 < v17)
        {
          v68 = swift_isUniquelyReferenced_nonNull_native();
          v69 = *v81;
          if (v68)
          {
            sub_2215C1234(0, *(_QWORD *)(v69 + 16));
          }
          else
          {
            v70 = (_QWORD *)MEMORY[0x24BEE4AF8];
            if (*(_QWORD *)(v69 + 24) >= 2uLL)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0D0);
              v70 = (_QWORD *)swift_allocObject();
              v71 = _swift_stdlib_malloc_size(v70);
              v72 = v71 - 32;
              if (v71 < 32)
                v72 = v71 - 17;
              v70[2] = 0;
              v70[3] = 2 * (v72 >> 4);
            }
            *v81 = (uint64_t)v70;
            swift_bridgeObjectRelease();
            a4 = v82;
          }
          v73 = swift_bridgeObjectRetain();
          sub_2215F97C0(v73);
          if (v67 == 0.0)
          {
            swift_release();
            *v77 = v87;
            v77[1] = v90;
            v77[2].i8[0] = 0;
            return;
          }
          v80 = 0;
          v17 = v67;
          v78 = v90;
          v79 = v87;
        }
      }
    }
    goto LABEL_6;
  }
  v33 = 0;
  v34 = vmulq_f32(v87, v89);
  v35 = v34.f32[2] + (float)((float)(*(float *)&v23 * *(float *)&v25) + v34.f32[1]);
  while (1)
  {
    v36 = *v15;
    v37 = *((_QWORD *)*v15 + 2);
    if (!v37)
      goto LABEL_23;
    if (*((_QWORD *)v36 + 4) != v33)
    {
      if (v37 == 1)
        goto LABEL_23;
      if (*((_QWORD *)v36 + 5) != v33)
      {
        if (v37 == 2)
          goto LABEL_23;
        if (*((_QWORD *)v36 + 6) != v33)
          break;
      }
    }
LABEL_19:
    if (++v33 == v14)
      goto LABEL_37;
  }
  if (v37 == 3)
  {
LABEL_23:
    v38 = *(float32x4_t *)(v93 + 16 * v33);
    v39 = vmulq_f32(v38, v32);
    if ((float)((float)((float)(v39.f32[2] + (float)((float)(*(float *)&v25 * v38.f32[0]) + v39.f32[1])) - v35)
               * (float)((float)(v39.f32[2] + (float)((float)(*(float *)&v25 * v38.f32[0]) + v39.f32[1])) - v35)) <= a7)
    {
      v92 = *(_OWORD *)(v93 + 16 * v33);
      v40 = (char *)*v16;
      v41 = swift_isUniquelyReferenced_nonNull_native();
      *v16 = (uint64_t)v40;
      if ((v41 & 1) == 0)
      {
        v40 = sub_2215D7110(0, *((_QWORD *)v40 + 2) + 1, 1, v40);
        *v16 = (uint64_t)v40;
      }
      v43 = *((_QWORD *)v40 + 2);
      v42 = *((_QWORD *)v40 + 3);
      v32 = v89;
      v44 = v92;
      if (v43 >= v42 >> 1)
      {
        v45 = sub_2215D7110((char *)(v42 > 1), v43 + 1, 1, v40);
        v32 = v89;
        v44 = v92;
        v40 = v45;
        *v16 = (uint64_t)v45;
      }
      *((_QWORD *)v40 + 2) = v43 + 1;
      *(_OWORD *)&v40[16 * v43 + 32] = v44;
    }
    goto LABEL_19;
  }
  v46 = 7;
  while (1)
  {
    v47 = v46 - 3;
    if (__OFADD__(v46 - 4, 1))
      break;
    if (*(_QWORD *)&v36[8 * v46] == v33)
      goto LABEL_19;
    ++v46;
    if (v47 == v37)
      goto LABEL_23;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
}

uint64_t sub_2216096B0(uint64_t a1, uint64_t a2, id a3, float a4)
{
  uint64_t v4;
  float v9;
  float v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t *v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  __int128 v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;

  objc_msgSend(a3, sel_intrinsics);
  v39 = v9;
  objc_msgSend(a3, sel_intrinsics);
  if (v10 >= v39)
    v11 = v39;
  else
    v11 = v10;
  objc_msgSend(a3, sel_viewMatrixForOrientation_, 1);
  v37 = v13;
  v38 = v12;
  v35 = v15;
  v36 = v14;
  v16 = (uint64_t *)(v4 + 200);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v4 + 200);
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_2215C1234(0, *(_QWORD *)(v18 + 16));
  }
  else
  {
    *v16 = (uint64_t)sub_2215E6EF0(0, *(_QWORD *)(v18 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  result = swift_endAccess();
  v20 = *(_QWORD *)(a1 + 16);
  if (!v20)
    return *v16;
  v21 = 0;
  v22 = a1 + 32;
  v23 = a4 / v11;
  while (1)
  {
    v40 = *(float32x4_t *)(v22 + 16 * v21);
    v24 = 1.0;
    if (a2)
      break;
LABEL_12:
    v25 = *v16;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v16 = v25;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_2215D7110(0, *(_QWORD *)(v25 + 16) + 1, 1, (char *)v25);
      v25 = result;
      *v16 = result;
    }
    v27 = *(_QWORD *)(v25 + 16);
    v26 = *(_QWORD *)(v25 + 24);
    if (v27 >= v26 >> 1)
    {
      result = (uint64_t)sub_2215D7110((char *)(v26 > 1), v27 + 1, 1, (char *)v25);
      v25 = result;
      *v16 = result;
    }
    ++v21;
    v28 = vaddq_f32(v35, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v40.f32[0]), v37, *(float32x2_t *)v40.f32, 1), v36, v40, 2));
    v29 = (int8x16_t)vmulq_f32(v28, v28);
    *(float32x2_t *)v29.i8 = vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
    v30 = vmuls_lane_f32(v23, v28, 2) / v24;
    v29.i32[0] = vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1)).u32[0];
    v31 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31)));
    v33 = vmulq_n_f32(v28, vmul_f32(v32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v32, v32))).f32[0]);
    *(float32x2_t *)v29.i8 = vmul_n_f32(*(float32x2_t *)v33.f32, v30);
    v33.f32[0] = vmuls_lane_f32(v30, v33, 2);
    *(float32x2_t *)&v34 = vadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v29.i8);
    *((float *)&v34 + 2) = v40.f32[2] + v33.f32[0];
    HIDWORD(v34) = 0;
    *(_QWORD *)(v25 + 16) = v27 + 1;
    *(_OWORD *)(v25 + 16 * v27 + 32) = v34;
    if (v20 == v21)
      return *v16;
  }
  if (v21 < *(_QWORD *)(a2 + 16))
  {
    v24 = sqrtf(1.0 - (float)(*(float *)(a2 + 32 + 4 * v21) * *(float *)(a2 + 32 + 4 * v21)))
        / *(float *)(a2 + 32 + 4 * v21);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_221609914(uint64_t a1, uint64_t a2, char **a3, char **a4)
{
  int isUniquelyReferenced_nonNull_native;
  char *v9;
  int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *a3;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_2215C143C(0, *((_QWORD *)v9 + 2));
  }
  else
  {
    *a3 = (char *)sub_2215E6F7C(0, *((_QWORD *)v9 + 3) >> 1);
    swift_bridgeObjectRelease();
  }
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v11 = *a4;
  if (v10)
  {
    sub_2215C1234(0, *((_QWORD *)v11 + 2));
  }
  else
  {
    *a4 = (char *)sub_2215E6EF0(0, *((_QWORD *)v11 + 3) >> 1);
    swift_bridgeObjectRelease();
  }
  if (*((_QWORD *)*a3 + 2) >= a2)
    return;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = a1 + 32;
  while (1)
  {
    v15 = round(drand48() * (double)(uint64_t)(v12 - 1));
    if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v15 <= -9.22337204e18)
      goto LABEL_36;
    if (v15 >= 9.22337204e18)
      goto LABEL_37;
    v16 = (uint64_t)v15;
    v17 = *a3;
    v14 = *((_QWORD *)*a3 + 2);
    if (v14)
    {
      if (*((_QWORD *)v17 + 4) == v16)
        goto LABEL_10;
      if (v14 != 1)
      {
        if (*((_QWORD *)v17 + 5) == v16)
          goto LABEL_10;
        if (v14 != 2)
        {
          if (*((_QWORD *)v17 + 6) == v16)
            goto LABEL_10;
          if (v14 != 3)
            break;
        }
      }
    }
LABEL_25:
    v20 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v17;
    if ((v20 & 1) == 0)
    {
      v17 = sub_2215D6E18(0, v14 + 1, 1, v17);
      *a3 = v17;
    }
    v22 = *((_QWORD *)v17 + 2);
    v21 = *((_QWORD *)v17 + 3);
    if (v22 >= v21 >> 1)
      v17 = sub_2215D6E18((char *)(v21 > 1), v22 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v22 + 1;
    *(_QWORD *)&v17[8 * v22 + 32] = v16;
    *a3 = v17;
    if (v12 <= v16)
      goto LABEL_38;
    v27 = *(_OWORD *)(v13 + 16 * v16);
    v23 = *a4;
    v24 = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v23;
    if ((v24 & 1) == 0)
    {
      v23 = sub_2215D7110(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
      *a4 = v23;
    }
    v26 = *((_QWORD *)v23 + 2);
    v25 = *((_QWORD *)v23 + 3);
    if (v26 >= v25 >> 1)
      v23 = sub_2215D7110((char *)(v25 > 1), v26 + 1, 1, v23);
    *((_QWORD *)v23 + 2) = v26 + 1;
    *(_OWORD *)&v23[16 * v26 + 32] = v27;
    *a4 = v23;
    v14 = *((_QWORD *)*a3 + 2);
LABEL_10:
    if (v14 >= a2)
      return;
  }
  v18 = 7;
  while (1)
  {
    v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
      break;
    if (*(_QWORD *)&v17[8 * v18] == v16)
      goto LABEL_10;
    ++v18;
    if (v19 == v14)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

void sub_221609BE4(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v5;
  __int128 v8;
  char **v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  float32x4_t v12;
  char *v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float32x4_t v26;
  float32x2_t *v27;
  float32x2_t *v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  __int128 v32;

  *(float32x2_t *)&v8 = _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0(a1, a3, a4, a5);
  v32 = v8;
  v9 = (char **)(v5 + 104);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(v5 + 104);
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_2215C143C(0, *(_QWORD *)(v11 + 16));
  }
  else
  {
    *v9 = (char *)sub_2215E6F7C(0, *(_QWORD *)(v11 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  v13 = *v9;
  if (*((_QWORD *)*v9 + 2) <= 2uLL)
  {
    while (1)
    {
      v15 = round(drand48() * (double)(*(_QWORD *)(a1 + 16) - 1));
      if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      if (v15 <= -9.22337204e18)
        goto LABEL_32;
      if (v15 >= 9.22337204e18)
        goto LABEL_33;
      v16 = (uint64_t)v15;
      v13 = *v9;
      v14 = *((_QWORD *)*v9 + 2);
      if (!v14)
        goto LABEL_22;
      if (*((_QWORD *)v13 + 4) != v16)
      {
        if (v14 == 1)
          goto LABEL_22;
        if (*((_QWORD *)v13 + 5) != v16)
          break;
      }
LABEL_7:
      if (v14 >= 3)
        goto LABEL_26;
    }
    if (v14 != 2)
    {
      if (*((_QWORD *)v13 + 6) == v16)
        goto LABEL_26;
      if (v14 != 3)
      {
        v17 = 7;
        while (1)
        {
          v18 = v17 - 3;
          if (__OFADD__(v17 - 4, 1))
            break;
          if (*(_QWORD *)&v13[8 * v17] == v16)
            goto LABEL_7;
          ++v17;
          if (v18 == v14)
            goto LABEL_22;
        }
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
LABEL_22:
    v19 = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v13;
    if ((v19 & 1) == 0)
    {
      v13 = sub_2215D6E18(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      *v9 = v13;
    }
    v21 = *((_QWORD *)v13 + 2);
    v20 = *((_QWORD *)v13 + 3);
    if (v21 >= v20 >> 1)
    {
      v13 = sub_2215D6E18((char *)(v20 > 1), v21 + 1, 1, v13);
      *v9 = v13;
    }
    *((_QWORD *)v13 + 2) = v21 + 1;
    *(_QWORD *)&v13[8 * v21 + 32] = v16;
    v13 = *v9;
    v14 = *((_QWORD *)*v9 + 2);
    goto LABEL_7;
  }
LABEL_26:
  v22 = *((_QWORD *)v13 + 4);
  if ((v22 & 0x8000000000000000) != 0)
    goto LABEL_35;
  v23 = *(_QWORD *)(a1 + 16);
  if (v22 >= v23)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v24 = *((_QWORD *)v13 + 5);
  if (v24 >= v23)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v25 = *((_QWORD *)v13 + 6);
  if (v25 < v23)
  {
    v26 = *(float32x4_t *)(a1 + 32 + 16 * v22);
    v27 = (float32x2_t *)(a1 + 32 + 16 * v24);
    v28 = (float32x2_t *)(a1 + 32 + 16 * v25);
    *(float32x2_t *)v12.f32 = vsub_f32(*v27, *(float32x2_t *)v26.f32);
    v12.f32[2] = v27[1].f32[0] - v26.f32[2];
    *(float32x2_t *)v26.f32 = vsub_f32(*v28, *(float32x2_t *)v26.f32);
    v26.f32[2] = v28[1].f32[0] - v26.f32[2];
    v29 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v12)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
    v30 = (int32x4_t)vmulq_f32(v29, v29);
    v30.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), *(float32x2_t *)v30.i8)).u32[0];
    v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL);
    *(float32x2_t *)v29.f32 = vrsqrte_f32((float32x2_t)v30.u32[0]);
    *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32)));
    *(_OWORD *)a2 = v32;
    *(float32x4_t *)(a2 + 16) = vmulq_n_f32(v31, vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32))).f32[0]);
    *(_BYTE *)(a2 + 32) = 0;
    return;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_221609EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

float sub_221609F2C(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v3;
  float32x4_t v4;
  int32x2_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float32x4_t v9;
  const float *v10;
  uint64_t v11;
  const float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float32x4x4_t v18;
  float32x4x4_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = vmulq_f32(a2, a3);
    v5 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).u64[0];
    if ((unint64_t)v3 >= 9)
    {
      v8 = *(_QWORD *)(a1 + 16) & 7;
      if ((v3 & 7) == 0)
        v8 = 8;
      v6 = v3 - v8;
      v9 = (float32x4_t)vdupq_lane_s32(v5, 0);
      v10 = (const float *)(a1 + 96);
      v7 = 0.0;
      v11 = v6;
      do
      {
        v12 = v10 - 16;
        v18 = vld4q_f32(v12);
        v19 = vld4q_f32(v10);
        v18.val[0] = vsubq_f32(vaddq_f32(vmulq_laneq_f32(v18.val[2], a3, 2), vaddq_f32(vmulq_n_f32(v18.val[0], a3.f32[0]), vmulq_lane_f32(v18.val[1], *(float32x2_t *)a3.f32, 1))), v9);
        v18.val[1] = vsubq_f32(vaddq_f32(vmulq_laneq_f32(v19.val[2], a3, 2), vaddq_f32(vmulq_n_f32(v19.val[0], a3.f32[0]), vmulq_lane_f32(v19.val[1], *(float32x2_t *)a3.f32, 1))), v9);
        v18.val[0] = vmulq_f32(v18.val[0], v18.val[0]);
        v18.val[1] = vmulq_f32(v18.val[1], v18.val[1]);
        v7 = (float)((float)((float)((float)((float)((float)((float)(v7 + v18.val[0].f32[0]) + v18.val[0].f32[1])
                                                   + v18.val[0].f32[2])
                                           + v18.val[0].f32[3])
                                   + v18.val[1].f32[0])
                           + v18.val[1].f32[1])
                   + v18.val[1].f32[2])
           + v18.val[1].f32[3];
        v10 += 32;
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v6 = 0;
      v7 = 0.0;
    }
    v13 = v3 - v6;
    v14 = (float *)(a1 + 16 * v6 + 40);
    do
    {
      v15 = (float)(a3.f32[0] * *(v14 - 2)) + (float)(a3.f32[1] * *(v14 - 1));
      v16 = *v14;
      v14 += 4;
      v7 = v7
         + (float)((float)((float)((float)(a3.f32[2] * v16) + v15) - *(float *)v5.i32)
                 * (float)((float)((float)(a3.f32[2] * v16) + v15) - *(float *)v5.i32));
      --v13;
    }
    while (v13);
  }
  else
  {
    v7 = 0.0;
  }
  return v7 / (float)v3;
}

uint64_t sub_22160A05C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 200);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PlaneSolver()
{
  return objc_opt_self();
}

double static PlaneUtil.getIntersection(ray:plane:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  return sub_22160A740(a1, a2, a3, a4);
}

void static PlaneUtil.getIntersection(sourceRay:destRay:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;

  v4 = vmulq_f32(a2, a4);
  if (fabsf(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32)) < 1.0)
  {
    v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a4, (int32x4_t)a4), (int8x16_t)a4, 0xCuLL);
    v6 = (int32x4_t)vmlaq_f32(vmulq_f32(v5, vnegq_f32(a2)), a4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), (int8x16_t)a2, 0xCuLL));
    v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
    v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(a4)), v7, v5);
    sub_22160A740(a1, a2, a3, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL));
  }
}

void static PlaneUtil.findBestPlane(points:facing:)(float32x2_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>, __n128 a6@<Q3>)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  double v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int8x16_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x2_t *v19;
  unint64_t v20;
  uint64_t v21;
  float32x2_t *v23;
  unint64_t v24;
  _OWORD *v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x2_t v29;
  uint64_t v31;
  unint64_t v32;
  float32x2_t *v33;
  float32x2_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64x2_t v38;
  __n128 v40;
  __n128 v41;
  __int128 v42;
  __int128 v43;
  float32x4_t v44;
  __n128 v45;
  float32x4_t v46;
  __int128 v47;
  _QWORD v48[6];
  int8x16_t v49;
  float32x4_t v50;
  char v51;

  v6 = (unint64_t)a1[2];
  if (v6 < 3)
  {
    v37 = 0;
    v7 = 0;
    v38 = 0u;
    v8 = 1;
LABEL_6:
    *(_QWORD *)a2 = v37;
    *(int64x2_t *)(a2 + 8) = v38;
    *(_QWORD *)(a2 + 24) = v7;
    *(_BYTE *)(a2 + 32) = v8 & 1;
    return;
  }
  if (v6 == 3)
  {
    a4.n128_u32[0] = a1[5].u32[0];
    a5.n128_u64[0] = (unint64_t)a1[4];
    a6.n128_u64[0] = (unint64_t)vsub_f32(a1[6], (float32x2_t)a5.n128_u64[0]);
    a6.n128_f32[2] = a1[7].f32[0] - a4.n128_f32[0];
    v46 = (float32x4_t)a6;
    v9 = *(double *)&a1[8];
    a5.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)&v9, (float32x2_t)a5.n128_u64[0]);
    *(float *)&v9 = a1[9].f32[0] - a4.n128_f32[0];
    a5.n128_f32[2] = *(float *)&v9;
    v44 = (float32x4_t)a5;
    *(float32x2_t *)v10.i8 = _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0((uint64_t)a1, v9, a4.n128_f64[0], a5.n128_f64[0]);
    v8 = 0;
    v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), vnegq_f32(v46)), v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL));
    v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
    v13 = (int32x4_t)vmulq_f32(v11, v11);
    v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
    v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
    v16 = (int8x16_t)vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
    v38 = (int64x2_t)vextq_s8(v10, v16, 8uLL);
    v37 = v10.i64[0];
    v7 = v16.i64[1];
    goto LABEL_6;
  }
  v37 = 0;
  v7 = 0;
  v17 = 0;
  v18 = v6 - 2;
  v34 = a1 + 4;
  v19 = a1 + 8;
  v38 = 0u;
  v8 = 1;
  v20 = v6 - 2;
  v40 = a4;
  v41 = a6;
  v45 = a5;
  v35 = v6 - 2;
  v36 = (unint64_t)a1[2];
  while (v17 != v18)
  {
    if (v17 == v6)
      goto LABEL_23;
    v21 = v17 + 1;
    v42 = *(_OWORD *)v34[2 * v17].f32;
    v32 = v20;
    v33 = v19;
    v31 = v17 + 1;
    do
    {
      if (v21 + 1 != v6)
      {
        if (v21 + 1 >= v6)
        {
          __break(1u);
          goto LABEL_22;
        }
        v43 = *(_OWORD *)v34[2 * v21].f32;
        v23 = v19;
        v24 = v20;
        do
        {
          v47 = *(_OWORD *)v23->f32;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA0D0);
          v25 = (_OWORD *)swift_allocObject();
          v25[1] = xmmword_221655530;
          v25[2] = v42;
          v25[3] = v43;
          v25[4] = v47;
          static PlaneUtil.findBestPlane(points:facing:)(v48, a3, v40, v45, v41);
          swift_setDeallocating();
          swift_deallocClassInstance();
          sub_221609EE4((uint64_t)v48, (uint64_t)&v49);
          if ((v51 & 1) == 0)
          {
            if ((v8 & 1) != 0)
              goto LABEL_15;
            v26.i64[0] = vdupq_laneq_s64(v38, 1).u64[0];
            v26.i64[1] = v7;
            v27 = (int8x16_t)vmulq_f32(v50, (float32x4_t)v45);
            v27.i32[0] = vextq_s8(v27, v27, 8uLL).u32[0];
            v28 = (int8x16_t)vmulq_f32(v26, (float32x4_t)v45);
            v28.i32[0] = vextq_s8(v28, v28, 8uLL).u32[0];
            v29 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0);
            v29.i32[0] = v38.i32[2];
            *(float32x2_t *)v28.i8 = vabs_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v28.i8, *(int32x2_t *)v27.i8), vadd_f32(vmul_n_f32(v29, v45.n128_f32[0]), (float32x2_t)vzip2_s32(*(int32x2_t *)v28.i8, *(int32x2_t *)v27.i8))));
            if ((vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8).u8[0] & 1) != 0)
            {
LABEL_15:
              v8 = 0;
              v37 = v49.i64[0];
              v7 = v50.i64[1];
              v38 = (int64x2_t)vextq_s8(v49, (int8x16_t)v50, 8uLL);
            }
            else
            {
              v8 = 0;
            }
          }
          v23 += 2;
          --v24;
        }
        while (v24);
      }
      --v20;
      v19 += 2;
      v18 = v35;
      v6 = v36;
    }
    while (v21++ != v35);
    v20 = v32 - 1;
    v19 = v33 + 2;
    v17 = v31;
    if (v31 == v35)
      goto LABEL_6;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
}

uint64_t static PlaneUtil.findPossiblePlanes(points:)(uint64_t result, __n128 a2, double a3, int32x4_t a4, double a5, double a6, double a7, float32x4_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  __int128 v22;
  float v23;
  float32x4_t v24;
  float32x2_t v25;
  float v26;
  float *v27;
  unint64_t v28;
  unsigned __int32 v29;
  float v30;
  float32x2_t v31;
  unint64_t v32;
  unint64_t v33;
  int32x4_t v34;
  __int128 v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  float *v42;
  uint64_t v43;
  unint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  __int128 v47;
  unsigned __int32 v48;

  v8 = *(_QWORD *)(result + 16);
  if (v8 >= 3)
  {
    v10 = 0;
    v11 = v8 - 2;
    v43 = result + 32;
    v12 = (float *)(result + 72);
    v9 = MEMORY[0x24BEE4AF8];
    __asm { FMOV            V8.2S, #3.0 }
    v18 = v8 - 2;
    v44 = *(_QWORD *)(result + 16);
    v19 = v8 - 2;
    while (v10 != v11)
    {
      if (v10 == v8)
        goto LABEL_21;
      v20 = v10 + 1;
      v47 = *(_OWORD *)(v43 + 16 * v10);
      LODWORD(v21) = *(_QWORD *)(v43 + 16 * v10 + 8);
      v41 = v18;
      v42 = v12;
      v40 = v10 + 1;
      do
      {
        if (v20 + 1 != v8)
        {
          if (v20 + 1 >= v8)
          {
            __break(1u);
            goto LABEL_20;
          }
          v22 = *(_OWORD *)(v43 + 16 * v20);
          *(float32x2_t *)a4.i8 = vsub_f32(*(float32x2_t *)&v22, *(float32x2_t *)&v47);
          v23 = COERCE_FLOAT(*(_QWORD *)(v43 + 16 * v20 + 8));
          a8.f32[0] = v23 - v21;
          v24 = (float32x4_t)a4;
          v24.f32[2] = v23 - v21;
          v25 = vadd_f32(*(float32x2_t *)&v47, *(float32x2_t *)&v22);
          v26 = v21 + v23;
          *(uint64_t *)((char *)a8.i64 + 4) = a4.i64[0];
          v45 = vnegq_f32(v24);
          v46 = a8;
          v27 = v12;
          v28 = v18;
          v29 = a2.n128_u32[3];
          do
          {
            v48 = v29;
            v30 = *v27;
            v31 = *(float32x2_t *)(v27 - 2);
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_2215D763C(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
              v9 = result;
            }
            v33 = *(_QWORD *)(v9 + 16);
            v32 = *(_QWORD *)(v9 + 24);
            if (v33 >= v32 >> 1)
            {
              result = (uint64_t)sub_2215D763C((char *)(v32 > 1), v33 + 1, 1, (char *)v9);
              v9 = result;
            }
            v34.i32[3] = HIDWORD(v47);
            *(float32x2_t *)v34.i8 = vsub_f32(v31, *(float32x2_t *)&v47);
            *(float *)&v34.i32[2] = v30 - v21;
            *(float32x2_t *)&v35 = vdiv_f32(vadd_f32(v25, v31), _D8);
            *((float *)&v35 + 2) = (float)(v26 + v30) / 3.0;
            HIDWORD(v35) = 0;
            v36 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL), v45), (float32x4_t)v34, v46);
            a4 = (int32x4_t)vmulq_f32(v36, v36);
            a4.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a4.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(a4, 2), *(float32x2_t *)a4.i8)).u32[0];
            v37 = vrsqrte_f32((float32x2_t)a4.u32[0]);
            v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)a4.u32[0], vmul_f32(v37, v37)));
            a2 = (__n128)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), vmul_f32(v38, vrsqrts_f32((float32x2_t)a4.u32[0], vmul_f32(v38, v38))).f32[0]);
            a2.n128_u32[3] = v48;
            *(_QWORD *)(v9 + 16) = v33 + 1;
            v39 = v9 + 32 * v33;
            *(_OWORD *)(v39 + 32) = v35;
            *(__n128 *)(v39 + 48) = a2;
            v27 += 4;
            v29 = v48;
            --v28;
          }
          while (v28);
        }
        --v18;
        v12 += 4;
        _ZF = v20++ == v19;
        v8 = v44;
      }
      while (!_ZF);
      v11 = v19;
      v18 = v41 - 1;
      v12 = v42 + 4;
      v10 = v40;
      if (v40 == v19)
        return v9;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t PlaneUtil.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PlaneUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

double sub_22160A740(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  int32x4_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  v4 = (int32x4_t)vmulq_f32(a2, a2);
  v4.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  v7 = vmulq_n_f32(a2, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  v8 = vmulq_f32(v7, a4);
  v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
  if (v9.f32[0] != 0.0)
  {
    v10 = vmulq_f32(vsubq_f32(a3, a1), a4);
    *(float32x2_t *)a1.f32 = vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32(*(float32x2_t *)v7.f32, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))), v9).f32[0]));
  }
  return *(double *)a1.i64;
}

float _s17MeasureFoundation9PlaneUtilC8distance5point5planeSfs5SIMD3VySfG_AI6center_AI6normalttFZ_0(int8x16_t a1, int8x16_t a2, float32x4_t a3)
{
  float32x2_t v3;
  int32x2_t v4;

  v3 = (float32x2_t)vext_s8(*(int8x8_t *)a1.i8, *(int8x8_t *)a2.i8, 4uLL);
  v4 = (int32x2_t)vextq_s8(a1, a1, 8uLL).u64[0];
  a1.i32[1] = a2.i32[1];
  *(float32x2_t *)a1.i8 = vadd_f32(vmul_laneq_f32((float32x2_t)vzip1_s32(v4, (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL)), a3, 2), vadd_f32(vmul_f32(v3, (float32x2_t)vrev64_s32(*(int32x2_t *)a3.f32)), vmul_f32(*(float32x2_t *)a1.i8, *(float32x2_t *)a3.f32)));
  *(float *)a1.i32 = fabsf(vsub_f32(*(float32x2_t *)a1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1.i8, 1)).f32[0]);
  return *(float *)a1.i32;
}

uint64_t type metadata accessor for PlaneUtil()
{
  return objc_opt_self();
}

uint64_t sub_22160A848(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_2216534F8();
  if (!v18)
    return sub_221653384();
  v19 = v18;
  v25 = v15;
  v39 = sub_221653078();
  v32 = sub_221653948();
  sub_221653900();
  v36 = v17;
  result = sub_2216534EC();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_22165357C();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_221653930();
      sub_22165351C();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t OrderedDictionary.dict.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OrderedDictionary.init()()
{
  uint64_t v0;

  v0 = sub_221653384();
  swift_getTupleTypeMetadata2();
  sub_221653384();
  sub_2216530C0();
  sub_221652F94();
  swift_getTupleTypeMetadata2();
  sub_221653384();
  sub_2216530C0();
  return v0;
}

void OrderedDictionary.subscript.getter()
{
  JUMPOUT(0x22766E57CLL);
}

uint64_t OrderedDictionary.subscript.setter(char *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  char *v23;

  v6 = a3[3];
  v7 = sub_221653714();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v23 = a1;
  v18(v14, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v6) == 1)
  {
    v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v14, v7);
    OrderedDictionary.removeValue(forKey:)(a2, a3, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(a3[2] - 8) + 8))(a2);
    v19(v23, v7);
    return ((uint64_t (*)(char *, uint64_t))v19)(v11, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v6);
    OrderedDictionary.updateValue(_:forKey:)((uint64_t)v17, a2, (uint64_t)a3, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(a3[2] - 8) + 8))(a2);
    v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v23, v7);
    v21(v11, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v6);
  }
}

uint64_t OrderedDictionary.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v8 = sub_221652F94();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s17MeasureFoundation16MeasurementEventV4time0B04DateVvpfi_0();
  sub_22160B6CC(a1, a2, (uint64_t)v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t OrderedDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v38 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2[2];
  v40 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v34 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v36 = (char *)&v33 - v12;
  v13 = a2[3];
  v14 = sub_221653714();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v33 - v20;
  v22 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v39 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v3;
  v24 = v3[1];
  v25 = a2[4];
  v41 = a1;
  MEMORY[0x22766E57C](a1, v24, v9, v13, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v38, 1, 1, v13);
  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v27(v39, v21, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v36, v41, v9);
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    v28(v18, 1, 1, v13);
    sub_2216530D8();
    sub_2216530FC();
    v42 = *v37;
    v29 = sub_2216533FC();
    MEMORY[0x22766FA4C](MEMORY[0x24BEE12E0], v29);
    result = sub_221653564();
    if ((v43 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v30 = v34;
      sub_2216533D8();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v9);
      sub_221652F94();
      sub_2216530D8();
      v31 = (uint64_t)v35;
      sub_2216530B4();
      sub_2215DA2C8(v31);
      v32 = v38;
      v27(v38, v39, v13);
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v28)(v32, 0, 1, v13);
    }
  }
  return result;
}

void (*OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = a3[3];
  v9 = sub_221653714();
  v7[2] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[4] = malloc(v11);
  v12 = malloc(v11);
  v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[7] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v7[8] = malloc(v15);
  v7[9] = malloc(v15);
  (*(void (**)(void))(v14 + 16))();
  MEMORY[0x22766E57C](a2, *(_QWORD *)(v3 + 8), v13, v8, a3[4]);
  return sub_22160B2A8;
}

void sub_22160B2A8(uint64_t a1, char a2)
{
  _QWORD **v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = *(_QWORD ***)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  v4 = *(void **)(*(_QWORD *)a1 + 72);
  if ((a2 & 1) != 0)
  {
    v5 = v2[7];
    v11 = v2[6];
    v7 = (char *)v2[4];
    v6 = (char *)v2[5];
    v8 = v2[2];
    v9 = v2[3];
    v10 = *v2;
    ((void (*)(char *, char *, _QWORD *))v9[2])(v7, v6, v8);
    ((void (*)(void *, void *, _QWORD *))v5[4])(v3, v4, v11);
    OrderedDictionary.subscript.setter(v7, (uint64_t)v3, v10);
    ((void (*)(char *, _QWORD *))v9[1])(v6, v8);
  }
  else
  {
    v7 = (char *)v2[4];
    v6 = (char *)v2[5];
    OrderedDictionary.subscript.setter(v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  void (*v19)(void);

  v19 = a2;
  v12 = sub_221653714();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  MEMORY[0x22766E57C](a1, a3, a4, a5, a7);
  v16 = *(_QWORD *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a5) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v15, a5);
  v19();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22160D1E8(a1, a2, a5);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 16) - 8) + 8))(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 24) - 8) + 8))(a1);
}

void (*OrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, void (*a3)(void), uint64_t a4, _QWORD *a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v10 = malloc(0x48uLL);
  *a1 = v10;
  *v10 = a5;
  v10[1] = v5;
  v11 = a5[3];
  v10[2] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v10[3] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v10[4] = malloc(v13);
  v14 = malloc(v13);
  v15 = a5[2];
  v10[5] = v14;
  v10[6] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v10[7] = v16;
  v10[8] = malloc(*(_QWORD *)(v16 + 64));
  (*(void (**)(void))(v16 + 16))();
  OrderedDictionary.subscript.getter(a2, a3, *(_QWORD *)(v5 + 8), v15, v11, (uint64_t)v14, a5[4]);
  return sub_22160B5E4;
}

void sub_22160B5E4(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);

  v2 = *a1;
  v4 = (*a1)[7];
  v3 = (void *)(*a1)[8];
  v5 = (void *)(*a1)[5];
  v6 = (*a1)[6];
  v8 = (*a1)[3];
  v7 = (void *)(*a1)[4];
  v9 = (*a1)[2];
  v10 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[4], v5, v9);
    sub_22160D1E8((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v7, v9);
  }
  else
  {
    sub_22160D1E8((*a1)[5], (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v11(v5, v9);
  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t sub_22160B6CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD v32[2];
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a3;
  v32[0] = a1;
  v34 = a5;
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v33 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 24);
  v13 = sub_221653714();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v32 - v18;
  v35 = v5;
  v20 = *(_QWORD *)(v5 + 8);
  v21 = *(_QWORD *)(a4 + 32);
  v22 = a2;
  v32[1] = v21;
  MEMORY[0x22766E57C](a2, v20, v8, v12);
  v23 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v25 = v33;
    v24(v33, v22, v8);
    (*(void (**)(char *, _QWORD, uint64_t))(v23 + 16))(v17, v32[0], v12);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
    v26(v17, 0, 1, v12);
    sub_2216530D8();
    sub_2216530FC();
    v24(v25, v22, v8);
    sub_2216533FC();
    v27 = v35;
    sub_2216533CC();
    v26(v34, 1, 1, v12);
    v28 = v27;
  }
  else
  {
    v29 = v34;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v34, v19, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v33, v22, v8);
    (*(void (**)(char *, _QWORD, uint64_t))(v23 + 16))(v17, v32[0], v12);
    v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
    v30(v17, 0, 1, v12);
    sub_2216530D8();
    sub_2216530FC();
    v30(v29, 0, 1, v12);
    v28 = v35;
  }
  return sub_22160B970(v28, v22, v36, v8);
}

uint64_t sub_22160B970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a4);
  v13 = sub_221652F94();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v10, a3, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
  sub_2216530D8();
  return sub_2216530FC();
}

uint64_t OrderedDictionary.values.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[10];

  v12[9] = a1;
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  v7 = sub_2216533FC();
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x22766FA4C](MEMORY[0x24BEE12E0], v7);
  v10 = sub_22160A848((void (*)(char *, char *))sub_22160D2FC, (uint64_t)v12, v7, a5, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_22160BB40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v12 = sub_221653714();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v17 - v13;
  MEMORY[0x22766E57C](a1, a2, a3, a4, a5);
  v15 = *(_QWORD *)(a4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a4);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v14, a4);
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeAll()()
{
  sub_2216533FC();
  sub_2216533F0();
  sub_2216530D8();
  sub_2216530CC();
}

uint64_t OrderedDictionary.merge(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>, a4);
  sub_2216532E8();
  return sub_22160BE80();
}

uint64_t sub_22160BD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24[2];

  v24[0] = a2;
  v24[1] = a3;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_221653714();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v24 - v18;
  v20 = sub_221652F94();
  MEMORY[0x22766E57C](a1, a6, a7, v20, a9);
  v21 = *(_QWORD *)(v20 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v23 = type metadata accessor for OrderedDictionary(0, a7, a8, a9);
    sub_22160B6CC(v24[0], a1, (uint64_t)v15, v23, v19);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v20);
  }
  return result;
}

uint64_t sub_22160BE80()
{
  uint64_t v0;

  v0 = sub_2216533FC();
  MEMORY[0x22766FA4C](MEMORY[0x24BEE12B8], v0);
  MEMORY[0x22766FA4C](MEMORY[0x24BEE12D8], v0);
  return sub_22165315C();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> static OrderedDictionary.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;

  v12 = type metadata accessor for OrderedDictionary(0, a7, a8, a9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OrderedDictionary.merge(with:)(a4, a5, a6, v12);
}

uint64_t OrderedDictionary.filter(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *v3;
  v4 = a3[3];
  v15 = a3[2];
  v16 = v4;
  v17 = a3[4];
  v18 = v3;
  v5 = sub_2216533FC();
  swift_bridgeObjectRetain();
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x22766FA4C](MEMORY[0x24BEE12E0], v5);
  v9 = sub_22160A848((void (*)(char *, char *))sub_22160D3B4, (uint64_t)v14, v5, TupleTypeMetadata2, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  swift_bridgeObjectRelease();
  v23 = v9;
  v10 = sub_2216533FC();
  MEMORY[0x22766FA4C](MEMORY[0x24BEE12F0], v10);
  v22 = sub_2216538DC();
  v19 = OrderedDictionary.init()();
  v20 = v11;
  v21 = v12;
  MEMORY[0x22766FA4C](MEMORY[0x24BEE12C8], v10);
  sub_2216532D0();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_22160C158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;

  v12 = sub_221653714();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a6, a1, a3);
  MEMORY[0x22766E57C](a1, *(_QWORD *)(a2 + 8), a3, a4, a5);
  v15 = *(_QWORD *)(a4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6 + *(int *)(TupleTypeMetadata2 + 48), v14, a4);
  }
  return result;
}

uint64_t sub_22160C268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v36 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v29 - v14;
  v33 = sub_221653714();
  v30 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v17 = (char *)&v29 - v16;
  v18 = *(int *)(TupleTypeMetadata2 + 48);
  v19 = a2 + v18;
  v20 = &v15[v18];
  v32 = *(_QWORD *)(a4 - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v34 = a2;
  v21(v15, a2, a4);
  v29 = *(_QWORD *)(a5 - 8);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v31 = v20;
  v22(v20, v19, a5);
  v23 = *(_QWORD *)(a3 + 16);
  v24 = sub_221652F94();
  v25 = v36;
  MEMORY[0x22766E57C](v15, v23, a4, v24);
  v26 = *(_QWORD *)(v24 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v12, 1, v24);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v28 = type metadata accessor for OrderedDictionary(0, a4, a5, v25);
    sub_22160B6CC(v19, v34, (uint64_t)v12, v28, v17);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v33);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v24);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, a4);
  }
  return result;
}

uint64_t sub_22160C494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t result;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA060);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  v17 = *(_QWORD *)(a3 + 16);
  v18 = sub_221652F94();
  MEMORY[0x22766E57C](a1, v17, a4, v18, a6);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  result = v20(v16, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x22766E57C](a2, *(_QWORD *)(a3 + 16), a4, v18, a6);
    result = v20(v14, 1, v18);
    if ((_DWORD)result != 1)
    {
      v22 = sub_221652F70();
      v23 = *(void (**)(char *, uint64_t))(v19 + 8);
      v23(v14, v18);
      v23(v16, v18);
      return v22 & 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_22160D448(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_22160C640@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_22160D448(a1, a2[2], a2[3], a2[4]);
  v6 = v5;
  v8 = v7;
  result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  a3[2] = v8;
  return result;
}

uint64_t OrderedDictionary.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v28 = a2;
  v29 = a6;
  v9 = sub_221653714();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - v11;
  v33 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = sub_221653714();
  v31 = *(_QWORD *)(v16 - 8);
  v32 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v26 - v20;
  v38 = 91;
  v39 = 0xE100000000000000;
  v27 = a1;
  v37 = a1;
  v22 = sub_2216533FC();
  MEMORY[0x22766FA4C](MEMORY[0x24BEE12C8], v22);
  sub_2216532A0();
  v36 = v34;
  sub_2216539E4();
  sub_2216539C0();
  v30 = sub_2216539D8();
  while (1)
  {
    sub_2216539CC();
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v21, v19, v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v21, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      sub_221653210();
      return v38;
    }
    v23 = *(_QWORD *)v21;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v14, &v21[*(int *)(TupleTypeMetadata2 + 48)], a4);
    v34 = 0;
    v35 = 0xE000000000000000;
    sub_221653AEC();
    sub_221653210();
    MEMORY[0x22766E57C](v14, v28, a4, a5, v29);
    v24 = *(_QWORD *)(a5 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1, a5);
    if ((_DWORD)result == 1)
      break;
    sub_221653AEC();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, a5);
    sub_221653210();
    swift_bridgeObjectRelease();
    result = MEMORY[0x22766E840](v27, a4);
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      break;
    }
    if (v23 != result - 1)
      sub_221653210();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v14, a4);
  }
  __break(1u);
  return result;
}

uint64_t sub_22160C9AC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return OrderedDictionary.description.getter(*v3, v3[1], a3, a1[2], a1[3], a1[4]);
}

uint64_t OrderedDictionary.startIndex.getter()
{
  return 0;
}

void OrderedDictionary.endIndex.getter()
{
  JUMPOUT(0x22766E870);
}

uint64_t OrderedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v14 = sub_221653714();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v19 - v15;
  sub_221653420();
  MEMORY[0x22766E57C](a1, a5, a7, a8, a9);
  v17 = *(_QWORD *)(a8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a8);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v16, a8);
  __break(1u);
  return result;
}

uint64_t sub_22160CAC8()
{
  return sub_2216534C8();
}

uint64_t sub_22160CAD8()
{
  return sub_2216534E0();
}

uint64_t sub_22160CAE4()
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>);
  return sub_2216534BC();
}

_QWORD *sub_22160CB34(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_22160CFA0(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t sub_22160CB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>, a3);
  return sub_2216534C8();
}

uint64_t sub_22160CBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>, a4);
  return sub_2216534A4();
}

uint64_t sub_22160CC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>, a3);
  return sub_2216534E0();
}

void sub_22160CC5C()
{
  OrderedDictionary.endIndex.getter();
}

uint64_t sub_22160CC7C(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_22160CC8C(uint64_t **a1, uint64_t *a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  void (*v13)(_QWORD *);
  uint64_t v14;
  uint64_t v15;

  v7 = (uint64_t *)malloc(0x40uLL);
  *a1 = v7;
  v8 = a3[2];
  v9 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[4] = TupleTypeMetadata2;
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7[5] = v11;
  v12 = (char *)malloc(*(_QWORD *)(v11 + 64));
  v7[6] = (uint64_t)v12;
  v13 = sub_22160CDD0(v7, *a2, *v3, v3[1], v3[2], v8, v9, a3[4]);
  v15 = v14;
  v7[7] = (uint64_t)v13;
  (*(void (**)(char *))(*(_QWORD *)(v8 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v15, v9);
  return sub_22160CD7C;
}

void sub_22160CD7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_22160CDD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v16 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v16;
  v17 = malloc(*(_QWORD *)(v16 + 64));
  a1[2] = (uint64_t)v17;
  OrderedDictionary.subscript.getter((uint64_t)v17, (uint64_t)v17 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, a4, v18, a6, a7, a8);
  return sub_22160CEA0;
}

void sub_22160CEA0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_22160CED4(uint64_t a1)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>, a1);
  return sub_2216534D4();
}

void sub_22160CF28(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_22160CF44()
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>);
  return sub_2216534B0();
}

_QWORD *sub_22160CF94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_22160CFA0(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *sub_22160CFA0(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

__n128 sub_22160D004@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

uint64_t sub_22160D018(uint64_t a1)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>, a1);
  return sub_221653528();
}

uint64_t sub_22160D04C()
{
  return 2;
}

uint64_t sub_22160D054(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>, a1);
  v1 = sub_22160F728();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_22160D0B4()
{
  return sub_2216532B8();
}

uint64_t static OrderedDictionary<>.__derived_struct_equals(_:_:)()
{
  if ((sub_221653408() & 1) == 0 || (sub_2216530E4() & 1) == 0)
    return 0;
  sub_221652F94();
  sub_22160D6F4();
  return sub_2216530E4();
}

uint64_t sub_22160D19C()
{
  return static OrderedDictionary<>.__derived_struct_equals(_:_:)() & 1;
}

uint64_t sub_22160D1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = sub_221653714();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - v9;
  v11 = *(_QWORD *)(a3 + 16);
  MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v11);
  v14 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v10, a1, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v6);
  sub_2216530D8();
  return sub_2216530FC();
}

uint64_t sub_22160D2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_22160BB40(a1, v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_22160D320(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_22160BD20(a1, a2, v2[5], v2[6], v2[7], v2[8], v2[2], v2[3], v2[4]);
}

uint64_t sub_22160D350(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t type metadata accessor for OrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary);
}

uint64_t sub_22160D3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_22160C158(a1, v2[5], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_22160D3D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_22160D42C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_22160C268(a1, a2, v2[5], v2[2], v2[3], v2[4]);
}

uint64_t sub_22160D448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = sub_221653714();
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v33 = (char *)&v29 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - v15;
  v32 = a2;
  v36 = a4;
  v17 = OrderedDictionary.init()();
  v38 = v17;
  v39 = v18;
  v40 = v19;
  if (!MEMORY[0x22766E870](a1, TupleTypeMetadata2))
    return v17;
  v20 = 0;
  v30 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
  v31 = v16;
  while (1)
  {
    v21 = sub_22165339C();
    sub_221653354();
    if ((v21 & 1) != 0)
    {
      v22 = v31;
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v31, a1+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v20, TupleTypeMetadata2);
      v23 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = sub_2216538AC();
    v22 = v31;
    if (v29 != 8)
      break;
    v37 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 16))(v31, &v37, TupleTypeMetadata2);
    swift_unknownObjectRelease();
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_10:
      __break(1u);
      return v38;
    }
LABEL_5:
    v24 = (uint64_t)&v14[*(int *)(TupleTypeMetadata2 + 48)];
    v25 = v32;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v14, v22, v32);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v24, v30, a3);
    v26 = type metadata accessor for OrderedDictionary(0, v25, a3, v36);
    v27 = v33;
    OrderedDictionary.updateValue(_:forKey:)(v24, (uint64_t)v14, v26, v33);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v35);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, TupleTypeMetadata2);
    ++v20;
    if (v23 == MEMORY[0x22766E870](a1, TupleTypeMetadata2))
      return v38;
  }
  __break(1u);
  return result;
}

unint64_t sub_22160D6F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2556DCA60;
  if (!qword_2556DCA60)
  {
    v1 = sub_221652F94();
    result = MEMORY[0x22766FA4C](MEMORY[0x24BDCE958], v1);
    atomic_store(result, (unint64_t *)&qword_2556DCA60);
  }
  return result;
}

void sub_22160D73C()
{
  JUMPOUT(0x22766FA4CLL);
}

uint64_t sub_22160D74C()
{
  return sub_22160D8B8(&qword_2556DCA68, MEMORY[0x24BEE1BD0]);
}

unint64_t sub_22160D770()
{
  unint64_t result;

  result = qword_2556DCA78;
  if (!qword_2556DCA78)
  {
    result = MEMORY[0x22766FA4C](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2556DCA78);
  }
  return result;
}

uint64_t sub_22160D7B4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>);
  return MEMORY[0x22766FA4C](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_22160D7FC()
{
  JUMPOUT(0x22766FA4CLL);
}

uint64_t sub_22160D80C()
{
  return sub_22160D8B8(&qword_2556DCA80, MEMORY[0x24BEE1BA8]);
}

uint64_t sub_22160D830(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x22766FA4C](&protocol conformance descriptor for OrderedDictionary<A, B>);
  return MEMORY[0x22766FA4C](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_22160D878()
{
  JUMPOUT(0x22766FA4CLL);
}

uint64_t sub_22160D888()
{
  return MEMORY[0x24BEE1780];
}

uint64_t sub_22160D894()
{
  return sub_22160D8B8(qword_2556DCA88, MEMORY[0x24BEE1BD8]);
}

uint64_t sub_22160D8B8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2556DCA70);
    v6 = sub_22160D770();
    v7[0] = MEMORY[0x24BEE17A8];
    v7[1] = v6;
    result = MEMORY[0x22766FA4C](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_22160D924()
{
  JUMPOUT(0x22766FA4CLL);
}

void sub_22160D934()
{
  JUMPOUT(0x22766FA4CLL);
}

uint64_t sub_22160D944()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_22160D950()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_22160D980(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_22160D9CC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22160DA40(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22160DA8C(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_22160DAD4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_22160DB14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_22160C494(a1, a2, v2[5], v2[2], v2[3], v2[4]) & 1;
}

double Quadrilateral.topLeft.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Quadrilateral.topLeft.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*Quadrilateral.topLeft.modify())()
{
  return nullsub_1;
}

double Quadrilateral.topRight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void Quadrilateral.topRight.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*Quadrilateral.topRight.modify())()
{
  return nullsub_1;
}

double Quadrilateral.bottomRight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Quadrilateral.bottomRight.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*Quadrilateral.bottomRight.modify())()
{
  return nullsub_1;
}

double Quadrilateral.bottomLeft.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void Quadrilateral.bottomLeft.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*Quadrilateral.bottomLeft.modify())()
{
  return nullsub_1;
}

double sub_22160DBC4()
{
  double result;

  result = 0.0;
  xmmword_2556E4580 = 0u;
  unk_2556E4590 = 0u;
  static Quadrilateral.zero = 0u;
  *(_OWORD *)algn_2556E4570 = 0u;
  return result;
}

__int128 *Quadrilateral.zero.unsafeMutableAddressor()
{
  if (qword_2556D8E80 != -1)
    swift_once();
  return &static Quadrilateral.zero;
}

double static Quadrilateral.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;

  if (qword_2556D8E80 != -1)
    swift_once();
  v2 = *(_OWORD *)algn_2556E4570;
  *a1 = static Quadrilateral.zero;
  a1[1] = v2;
  result = *(double *)&xmmword_2556E4580;
  v4 = unk_2556E4590;
  a1[2] = xmmword_2556E4580;
  a1[3] = v4;
  return result;
}

id VNRectangleObservation.quad.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id result;
  uint64_t v16;
  uint64_t v17;

  objc_msgSend(v1, sel_topLeft);
  v4 = v3;
  v6 = v5;
  objc_msgSend(v1, sel_topRight);
  v8 = v7;
  v10 = v9;
  objc_msgSend(v1, sel_bottomRight);
  v12 = v11;
  v14 = v13;
  result = objc_msgSend(v1, sel_bottomLeft);
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v8;
  a1[3] = v10;
  a1[4] = v12;
  a1[5] = v14;
  a1[6] = v16;
  a1[7] = v17;
  return result;
}

ValueMetadata *type metadata accessor for Quadrilateral()
{
  return &type metadata for Quadrilateral;
}

_QWORD *Ransac.__allocating_init(solver:)()
{
  _QWORD *v0;

  swift_allocObject();
  v0 = sub_22160E6D8();
  swift_unknownObjectRelease();
  return v0;
}

_QWORD *Ransac.init(solver:)()
{
  _QWORD *v0;

  v0 = sub_22160E6D8();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Ransac.fit(data:minInliners:iterations:errorThreshold:qualifiedInliners:bestData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char **v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  float (*v62)(char *, uint64_t, uint64_t, uint64_t);
  float v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  void (*v87)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v73 = a6;
  v79 = a5;
  v85 = a4;
  v84 = a3;
  v72 = a1;
  v10 = v7 + 16;
  v11 = *(_QWORD *)(*(_QWORD *)v7 + 80);
  v12 = *(_QWORD *)(*(_QWORD *)v7 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v98 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v92 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v70 - v16;
  v96 = v11;
  v18 = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v75 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v70 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v95 = (char *)&v70 - v25;
  v83 = sub_221653714();
  v82 = *(_QWORD *)(v83 - 8);
  v26 = MEMORY[0x24BDAC7A8](v83);
  v78 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v91 = (char *)&v70 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v70 - v30;
  v32 = MEMORY[0x22766FB84](v10);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v97 = v32;
  if (!v32)
    return v33(v72, 1, 1, v18);
  v89 = v18;
  v33((uint64_t)v31, 1, 1, v18);
  v34 = a2;
  result = MEMORY[0x22766E840](a2, AssociatedTypeWitness);
  v36 = v85;
  if (v85 < 0)
    goto LABEL_45;
  v74 = v31;
  if (!v85)
  {
LABEL_38:
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v82 + 32))(v72, v74, v83);
  }
  v37 = result;
  v71 = v33;
  v81 = v24;
  v94 = v34;
  v38 = 0;
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24);
  v39 = (char **)(v93 + 4);
  v88 = v93 + 3;
  v40 = INFINITY;
  v90 = v19;
  v93 += 5;
  while (1)
  {
    if (v38 == v36)
      goto LABEL_42;
    swift_beginAccess();
    swift_beginAccess();
    v41 = v96;
    sub_22160E768(v94, v84, v39);
    swift_endAccess();
    swift_endAccess();
    v42 = swift_bridgeObjectRetain();
    v43 = v41;
    v44 = v90;
    v87(v42, v38, v43, v12);
    v45 = v91;
    v46 = v89;
    swift_bridgeObjectRelease();
    v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    if (v86(v45, 1, v46) == 1)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v45, v83);
LABEL_6:
      v36 = v85;
      goto LABEL_7;
    }
    v80 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    v80(v95, v45, v46);
    swift_beginAccess();
    v47 = sub_2216533FC();
    sub_2216533F0();
    result = swift_endAccess();
    if (v37 < 0)
      goto LABEL_43;
    if (v37)
      break;
LABEL_27:
    v53 = swift_bridgeObjectRetain();
    v54 = MEMORY[0x22766E840](v53, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    v55 = swift_bridgeObjectRetain();
    v56 = MEMORY[0x22766E840](v55, AssociatedTypeWitness);
    result = swift_bridgeObjectRelease();
    if (__OFADD__(v54, v56))
      goto LABEL_44;
    if (v54 + v56 < v79)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v95, v89);
      goto LABEL_6;
    }
    v99 = *v88;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v77 = MEMORY[0x22766FA4C](MEMORY[0x24BEE12C8], v47);
    sub_2216533C0();
    swift_endAccess();
    v57 = swift_bridgeObjectRetain();
    v58 = v78;
    v87(v57, v38, v96, v12);
    swift_bridgeObjectRelease();
    v59 = v89;
    v60 = v75;
    v76 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
    v76(v75, v95, v89);
    if (v86(v58, 1, v59) == 1)
    {
      v80(v81, v60, v59);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v78, v83);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v90 + 8))(v60, v59);
      v80(v81, v78, v59);
    }
    v61 = *v93;
    v62 = *(float (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 40);
    swift_bridgeObjectRetain();
    v63 = v62(v81, v61, v96, v12);
    swift_bridgeObjectRelease();
    if (v63 >= v40)
    {
      v68 = v89;
      v69 = *(void (**)(char *, uint64_t))(v90 + 8);
      v69(v81, v89);
      result = ((uint64_t (*)(char *, uint64_t))v69)(v95, v68);
      goto LABEL_6;
    }
    v64 = v74;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v74, v83);
    v65 = v81;
    v66 = v89;
    v76(v64, v81, v89);
    v71((uint64_t)v64, 0, 1, v66);
    sub_2216533F0();
    v100 = *v93;
    swift_bridgeObjectRetain();
    sub_2216533C0();
    v67 = *(void (**)(char *, uint64_t))(v90 + 8);
    v67(v65, v66);
    result = ((uint64_t (*)(char *, uint64_t))v67)(v95, v66);
    v36 = v85;
    if (v63 == 0.0)
      goto LABEL_38;
    v40 = v63;
LABEL_7:
    if (++v38 == v36)
      goto LABEL_38;
  }
  v48 = 0;
  while (1)
  {
    if (v48 == v37)
    {
      __break(1u);
      goto LABEL_38;
    }
    v49 = *v39;
    v50 = *((_QWORD *)*v39 + 2);
    if (!v50)
      goto LABEL_25;
    if (*((_QWORD *)v49 + 4) != v48)
    {
      if (v50 == 1)
        goto LABEL_25;
      if (*((_QWORD *)v49 + 5) != v48)
        break;
    }
LABEL_14:
    if (++v48 == v37)
      goto LABEL_27;
  }
  if (v50 == 2)
  {
LABEL_25:
    sub_221653420();
    if ((*(float (**)(char *, char *, uint64_t, uint64_t))(v12 + 32))(v95, v17, v96, v12) <= a7)
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v92, v17, AssociatedTypeWitness);
      swift_beginAccess();
      sub_2216533CC();
      swift_endAccess();
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v17, AssociatedTypeWitness);
    goto LABEL_14;
  }
  v51 = 6;
  while (1)
  {
    v52 = v51 - 3;
    if (__OFADD__(v51 - 4, 1))
      break;
    if (*(_QWORD *)&v49[8 * v51] == v48)
      goto LABEL_14;
    ++v51;
    if (v52 == v50)
      goto LABEL_25;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

Swift::Void __swiftcall Ransac.getRandomItems(data:num:indices:values:)(Swift::OpaquePointer data, Swift::Int num, Swift::OpaquePointer *indices, Swift::OpaquePointer *values)
{
  sub_22160E768((uint64_t)data._rawValue, num, (char **)indices);
}

uint64_t Ransac.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Ransac.__deallocating_deinit()
{
  Ransac.deinit();
  return swift_deallocClassInstance();
}

_QWORD *sub_22160E6D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectWeakInit();
  swift_getAssociatedTypeWitness();
  v1 = sub_221653384();
  v2 = MEMORY[0x24BEE4AF8];
  v0[3] = v1;
  v0[4] = v2;
  v0[5] = sub_221653384();
  swift_unknownObjectWeakAssign();
  return v0;
}

void sub_22160E768(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t AssociatedTypeWitness;
  int isUniquelyReferenced_nonNull_native;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *a3;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_2215C143C(0, *((_QWORD *)v7 + 2));
  }
  else
  {
    *a3 = (char *)sub_2215E6F7C(0, *((_QWORD *)v7 + 3) >> 1);
    swift_bridgeObjectRelease();
  }
  sub_2216533FC();
  sub_2216533F0();
  if (*((_QWORD *)*a3 + 2) >= a2)
    return;
  v8 = MEMORY[0x22766E840](a1, AssociatedTypeWitness);
  if (__OFSUB__(v8, 1))
    goto LABEL_30;
  v9 = (double)(v8 - 1);
  while (1)
  {
    v11 = round(drand48() * v9);
    if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v11 <= -9.22337204e18)
      goto LABEL_27;
    if (v11 >= 9.22337204e18)
      goto LABEL_28;
    v12 = (uint64_t)v11;
    v13 = *a3;
    v10 = *((_QWORD *)*a3 + 2);
    if (!v10)
      goto LABEL_21;
    if (*((_QWORD *)v13 + 4) != v12)
    {
      if (v10 == 1)
        goto LABEL_21;
      if (*((_QWORD *)v13 + 5) != v12)
        break;
    }
LABEL_8:
    if (v10 >= a2)
      return;
  }
  if (v10 == 2)
  {
LABEL_21:
    v16 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v13;
    if ((v16 & 1) == 0)
    {
      v13 = sub_2215D6E18(0, v10 + 1, 1, v13);
      *a3 = v13;
    }
    v18 = *((_QWORD *)v13 + 2);
    v17 = *((_QWORD *)v13 + 3);
    if (v18 >= v17 >> 1)
      v13 = sub_2215D6E18((char *)(v17 > 1), v18 + 1, 1, v13);
    *((_QWORD *)v13 + 2) = v18 + 1;
    *(_QWORD *)&v13[8 * v18 + 32] = v12;
    *a3 = v13;
    sub_221653420();
    sub_2216533CC();
    v10 = *((_QWORD *)*a3 + 2);
    goto LABEL_8;
  }
  v14 = 6;
  while (1)
  {
    v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1))
      break;
    if (*(_QWORD *)&v13[8 * v14] == v12)
      goto LABEL_8;
    ++v14;
    if (v15 == v10)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_22160E9F0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Ransac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Ransac);
}

uint64_t RingBuffer.init(capacity:)(uint64_t a1)
{
  sub_221653078();
  sub_2216533FC();
  sub_221653360();
  return a1;
}

uint64_t RingBuffer.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (__OFADD__(a3, result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a3 + result != 0x8000000000000000 || a2 != -1)
    return sub_221653420();
LABEL_8:
  __break(1u);
  return result;
}

uint64_t RingBuffer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22160F8B4(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

void (*RingBuffer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  RingBuffer.subscript.getter(a2, *v3, v3[1]);
  return sub_22160EBCC;
}

void sub_22160EBCC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v7 = (*a1)[1];
  v8 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    sub_22160F8B4((uint64_t)v3, v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
  }
  else
  {
    sub_22160F8B4((*a1)[6], v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t RingBuffer.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char isClassOrObjCExistentialType;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v2[1];
  v11 = v2[2];
  v21 = *v2;
  v10 = v21;
  v22 = v9;
  v23 = v11;
  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>);
  if (sub_221653534() < v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    sub_2216533FC();
    return sub_2216533CC();
  }
  sub_2216533FC();
  sub_221653378();
  v13 = v2[2];
  sub_22160F504(v9, v3[2]);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v15 = v13 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v15 = v13;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 24))(v15+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v9, a1, v5);
  v16 = v3[1];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
  {
    __break(1u);
    goto LABEL_12;
  }
  v19 = *v3;
  if (!*v3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v18 == 0x8000000000000000 && v19 == -1)
    goto LABEL_13;
  v3[1] = v18 % v19;
  return result;
}

Swift::Void __swiftcall RingBuffer.clear()()
{
  uint64_t v0;

  sub_2216533FC();
  sub_2216533F0();
  *(_QWORD *)(v0 + 8) = 0;
}

uint64_t RingBuffer.startIndex.getter()
{
  return 0;
}

void RingBuffer.endIndex.getter()
{
  JUMPOUT(0x22766E840);
}

Swift::Int __swiftcall RingBuffer.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t sub_22160EE70()
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>);
  return sub_2216534BC();
}

uint64_t sub_22160EEC0(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>);
  result = sub_2216534BC();
  *a1 = v3;
  return result;
}

uint64_t sub_22160EF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>, a3);
  return sub_2216534C8();
}

uint64_t sub_22160EF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>, a4);
  return sub_2216534A4();
}

uint64_t sub_22160EFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>, a3);
  return sub_2216534E0();
}

void sub_22160F03C()
{
  RingBuffer.endIndex.getter();
}

uint64_t sub_22160F058(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_22160F068(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = sub_22160F0CC(v7, *a2, *v3, v3[1], v3[2], *(_QWORD *)(a3 + 16));
  return sub_2215FEFF4;
}

void (*sub_22160F0CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(_QWORD *a1)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a6 - 8);
  *a1 = a6;
  a1[1] = v9;
  a1[2] = malloc(*(_QWORD *)(v9 + 64));
  RingBuffer.subscript.getter(a2, a3, a4);
  return sub_22160CEA0;
}

uint64_t sub_22160F154(uint64_t a1)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>, a1);
  return sub_2216534D4();
}

uint64_t sub_22160F1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22160F57C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_22160F1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22160F57C(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

_QWORD *sub_22160F1E8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_22160F200(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t sub_22160F218(uint64_t a1)
{
  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>, a1);
  return sub_221653528();
}

uint64_t sub_22160F24C(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>, a1);
  v1 = sub_22160F728();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t RingBuffer<A>.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v7 = type metadata accessor for RingBuffer(0, (uint64_t)a4, a3, (uint64_t)a4);
  MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>, v7);
  sub_2216532A0();
  v16 = v18;
  v17 = v19;
  v14[2] = a4;
  v14[3] = a5;
  v8 = sub_2216538A0();
  v15 = MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>, v7);
  v9 = MEMORY[0x22766FA4C](MEMORY[0x24BEE25A8], v8, &v15);
  v11 = sub_22160A848((void (*)(char *, char *))sub_22160F994, (uint64_t)v14, v8, a4, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  swift_bridgeObjectRelease();
  v12 = MEMORY[0x22766E7BC](v11, a4);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_22160F3C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return RingBuffer<A>.description.getter(*v2, v2[1], v2[2], *(char **)(a1 + 16), *(_QWORD *)(a2 - 8));
}

float RingBuffer<A>.average()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
  {
    v5 = 0.0;
    return v5 / (float)v3;
  }
  if (v3 == 1)
  {
    v4 = 0;
    v5 = 0.0;
LABEL_8:
    v8 = v3 - v4;
    v9 = (float *)(a3 + 4 * v4 + 32);
    do
    {
      v10 = *v9++;
      v5 = v5 + v10;
      --v8;
    }
    while (v8);
    return v5 / (float)v3;
  }
  v4 = v3 & 0x7FFFFFFFFFFFFFFELL;
  v6 = (float *)(a3 + 36);
  v5 = 0.0;
  v7 = v3 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v5 = (float)(v5 + *(v6 - 1)) + *v6;
    v6 += 2;
    v7 -= 2;
  }
  while (v7);
  if (v3 != v4)
    goto LABEL_8;
  return v5 / (float)v3;
}

float32x2_t RingBuffer<A>.average()(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  __int128 v12;

  if (qword_2556D8DD0 != -1)
    swift_once();
  v7 = static SIMD3<>.zero;
  v8 = *(_QWORD *)(a6 + 16);
  if (v8)
  {
    v9 = (float *)(a6 + 40);
    v10 = *(_QWORD *)(a6 + 16);
    do
    {
      *(float32x2_t *)&v12 = vadd_f32(*(float32x2_t *)&v7, *(float32x2_t *)(v9 - 2));
      v11 = *v9;
      v9 += 4;
      *((float *)&v12 + 2) = *((float *)&v7 + 2) + v11;
      HIDWORD(v12) = 0;
      v7 = v12;
      --v10;
    }
    while (v10);
  }
  else
  {
    *(_QWORD *)&v12 = static SIMD3<>.zero;
  }
  *(float *)&a3 = (float)v8;
  return vdiv_f32(*(float32x2_t *)&v12, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
}

uint64_t sub_22160F504(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_22160F554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22160F57C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_22160F568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22160F57C(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_22160F57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v22 - v17;
  v19 = sub_221653150();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_22160F72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_2216535B8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_221653150();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_221653150();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_22160F8B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char isClassOrObjCExistentialType;
  uint64_t v15;

  v4 = v3[1];
  v5 = __OFADD__(v4, a2);
  v6 = v4 + a2;
  if (v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = v3;
  v8 = *v3;
  if (!*v3)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if (v6 == 0x8000000000000000 && v8 == -1)
    goto LABEL_12;
  v10 = result;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = v6 % v8;
  sub_2216533FC();
  sub_221653378();
  v13 = v3[2];
  sub_22160F504(v12, v7[2]);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v15 = v13 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v15 = v13;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v15+ ((*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v12, v10, v11);
}

uint64_t type metadata accessor for RingBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RingBuffer);
}

uint64_t sub_22160F994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

void sub_22160F9CC()
{
  JUMPOUT(0x22766FA4CLL);
}

uint64_t sub_22160F9DC(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>);
  return MEMORY[0x22766FA4C](MEMORY[0x24BEE4230], a1, &v3);
}

void sub_22160FA24()
{
  JUMPOUT(0x22766FA4CLL);
}

uint64_t sub_22160FA34(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x22766FA4C](&protocol conformance descriptor for RingBuffer<A>);
  return MEMORY[0x22766FA4C](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_22160FA7C()
{
  JUMPOUT(0x22766FA4CLL);
}

uint64_t sub_22160FA8C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_22160FAC0()
{
  return swift_bridgeObjectRelease();
}

_QWORD *sub_22160FAC8(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22160FB10(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22160FB48(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_22160FB90(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t MetalScene.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectUnownedDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return v0;
}

uint64_t MetalScene.rootNode.getter()
{
  swift_beginAccess();
  return swift_retain();
}

MTLRenderPassDescriptor_optional __swiftcall MetalScene.makeDefaultRenderPassDescriptor()()
{
  uint64_t v0;
  void *v1;
  Swift::Bool v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  MTLRenderPassDescriptor_optional result;

  v1 = *(void **)(v0 + 48);
  if (!v1
    || (objc_msgSend(v1, sel_copy),
        sub_221653768(),
        swift_unknownObjectRelease(),
        sub_22160FE70(),
        (swift_dynamicCast() & 1) == 0))
  {
    v3 = 0;
    goto LABEL_10;
  }
  v3 = v13;
  v4 = objc_msgSend(v13, sel_colorAttachments);
  v5 = objc_msgSend(v4, sel_objectAtIndexedSubscript_, 0);

  if (!v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v5, sel_setLoadAction_, 1);

  v7 = objc_msgSend(v13, sel_colorAttachments);
  v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, 0);

  if (!v8)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v8, sel_setStoreAction_, 1);

  v9 = objc_msgSend(v13, sel_colorAttachments);
  v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

  if (!v10)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v10, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);

  v6 = objc_msgSend(v13, sel_depthAttachment);
  if (!v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = v6;
  objc_msgSend(v6, sel_setLoadAction_, 1);

  v6 = objc_msgSend(v13, sel_depthAttachment);
  if (!v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v12 = v6;
  objc_msgSend(v6, sel_setStoreAction_, 1);

LABEL_10:
  v6 = v3;
LABEL_16:
  result.value.super.isa = (Class)v6;
  result.is_nil = v2;
  return result;
}

unint64_t sub_22160FE70()
{
  unint64_t result;

  result = qword_2556DCC10;
  if (!qword_2556DCC10)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2556DCC10);
  }
  return result;
}

void sub_22160FEAC(void *a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v7 = (id)MetalScene.makeDefaultRenderPassDescriptor()();
  if (v7)
  {
    v2 = objc_msgSend(v7, sel_colorAttachments);
    v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, 0);

    if (v3)
    {
      objc_msgSend(v3, sel_setLoadAction_, 2);

      v4 = objc_msgSend(v7, sel_depthAttachment);
      if (v4)
      {
        v5 = v4;
        objc_msgSend(v4, sel_setLoadAction_, 2);

        v6 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_, v7);
        if (v6)
        {
          objc_msgSend(v6, sel_endEncoding);

          swift_unknownObjectRelease();
        }
        else
        {

        }
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_22160FFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *Strong;
  id v7;
  int v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void (*v15)(void *);
  void *v16;
  id v17;
  _QWORD aBlock[7];

  v1 = v0;
  v2 = sub_221653060();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 72) == 1)
  {
    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v7 = objc_msgSend(Strong, sel_currentRenderPassDescriptor);

    if (v7)
    {
      objc_msgSend(v7, sel_copy);
      sub_221653768();
      swift_unknownObjectRelease();
      sub_22160FE70();
      v8 = swift_dynamicCast();
      v9 = aBlock[6];
      if (!v8)
        v9 = 0;
      v10 = *(void **)(v1 + 48);
      *(_QWORD *)(v1 + 48) = v9;

      v11 = objc_msgSend(*(id *)(v1 + 56), sel_commandBuffer);
      if (v11)
      {
        v12 = v11;
        sub_221653054();
        sub_221653690();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        v13 = swift_allocObject();
        swift_weakInit();
        aBlock[4] = sub_221610430;
        aBlock[5] = v13;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_2215E918C;
        aBlock[3] = &block_descriptor_3;
        v14 = _Block_copy(aBlock);
        swift_release();
        objc_msgSend(v12, sel_addCompletedHandler_, v14);
        _Block_release(v14);
        sub_22160FEAC(v12);
        swift_beginAccess();
        v15 = *(void (**)(void *))(**(_QWORD **)(v1 + 16) + 272);
        swift_retain();
        v15(v12);
        swift_release();
        v16 = (void *)swift_unknownObjectUnownedLoadStrong();
        v17 = objc_msgSend(v16, sel_currentDrawable);

        if (v17)
        {
          objc_msgSend(v12, sel_presentDrawable_, v17);
          swift_unknownObjectRelease();
          objc_msgSend(v12, sel_commit);

          swift_unknownObjectRelease();
        }
        else
        {
          __break(1u);
        }
      }
      else
      {

      }
    }
  }
}

uint64_t sub_221610274(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  swift_retain();
  return swift_release();
}

uint64_t MetalScene.view.getter()
{
  return swift_unknownObjectUnownedLoadStrong();
}

uint64_t MetalScene.device.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t MetalScene.library.getter()
{
  return swift_unknownObjectRetain();
}

void sub_2216102E8()
{
  uint64_t Strong;
  id v1;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v1 = *(id *)(Strong + 64);
    sub_22165369C();
    swift_release();

  }
}

uint64_t MetalScene.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectUnownedDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_2216103A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_retain();
}

uint64_t type metadata accessor for MetalScene()
{
  return objc_opt_self();
}

uint64_t sub_22161040C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_221610430()
{
  sub_2216102E8();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

id sub_221610450(uint64_t a1, intptr_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id result;

  type metadata accessor for MetalNode();
  v4 = swift_allocObject();
  v5 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v4 + 32) = 257;
  *(_BYTE *)(v4 + 34) = 1;
  v6 = qword_2556D9998;
  *(_QWORD *)(v4 + 16) = qword_2556D9998;
  *(_QWORD *)(v4 + 24) = v5;
  if (v6 == -1)
  {
    __break(1u);
  }
  else
  {
    qword_2556D9998 = v6 + 1;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 72) = 0;
    swift_unknownObjectUnownedInit();
    if (qword_2556D8D88 == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v7 = (void *)static MetalBundle.device;
  *(_QWORD *)(v2 + 32) = static MetalBundle.device;
  v8 = qword_2556D8D90;
  swift_unknownObjectRetain();
  if (v8 != -1)
  {
    swift_once();
    v7 = *(void **)(v2 + 32);
  }
  *(_QWORD *)(v2 + 40) = static MetalBundle.library;
  swift_unknownObjectRetain();
  result = objc_msgSend(v7, sel_newCommandQueue);
  if (result)
  {
    *(_QWORD *)(v2 + 56) = result;
    *(_QWORD *)(v2 + 64) = dispatch_semaphore_create(a2);
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_DWORD *UnsafeMutablePointer<A>.init()()
{
  _DWORD *result;

  result = (_DWORD *)swift_slowAlloc();
  *result = 0;
  return result;
}

void UnsafeMutablePointer<A>.cleanupLock()()
{
  JUMPOUT(0x22766FAF4);
}

BOOL UnsafeMutablePointer<A>.tryLock()(os_unfair_lock_s *a1)
{
  return os_unfair_lock_trylock(a1);
}

__n64 SCNMatrix4.position.getter()
{
  uint64_t v0;
  __n64 result;

  result.n64_u32[0] = *(_DWORD *)(v0 + 12);
  result.n64_u32[1] = *(_DWORD *)(v0 + 28);
  return result;
}

__n64 SCNMatrix4.forward.getter()
{
  uint64_t v0;
  __n64 result;

  result.n64_u32[0] = *(_DWORD *)(v0 + 8);
  result.n64_u32[1] = *(_DWORD *)(v0 + 24);
  return result;
}

__n64 SCNMatrix4.up.getter()
{
  uint64_t v0;
  __n64 result;

  result.n64_u32[0] = *(_DWORD *)(v0 + 4);
  result.n64_u32[1] = *(_DWORD *)(v0 + 20);
  return result;
}

__n64 SCNMatrix4.right.getter()
{
  unsigned __int32 *v0;
  __n64 result;

  result.n64_u32[0] = *v0;
  result.n64_u32[1] = v0[4];
  return result;
}

float SCNMatrix4.upAngle.getter()
{
  float *v0;

  if (qword_2556D8DE0 != -1)
    swift_once();
  return acosf((float)((float)(*(float *)&static SIMD3<>.up * v0[1]) + (float)(*((float *)&static SIMD3<>.up + 1) * v0[5]))+ (float)(*((float *)&static SIMD3<>.up + 2) * v0[9]));
}

Swift::Float __swiftcall SCNMatrix4.alignUp()()
{
  uint64_t v0;
  __int128 v1;
  float32x2_t v2;
  float32x2_t v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float32x4_t v21;
  __int128 v22;
  __int128 v23;
  float v24;
  float v25;
  SCNMatrix4 v26;
  SCNMatrix4 b;
  SCNMatrix4 a;

  if (qword_2556D8DE0 != -1)
    swift_once();
  LODWORD(v1) = *(_DWORD *)(v0 + 4);
  v2.i32[0] = *(_DWORD *)(v0 + 20);
  v21 = (float32x4_t)static SIMD3<>.up;
  v23 = v1;
  v24 = v2.f32[0];
  v25 = *(float *)(v0 + 36);
  v2.f32[1] = v25;
  v3 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)&static SIMD3<>.up, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), 4uLL), v2);
  v4 = acosf((float)((float)(*(float *)&v1 * *(float *)&static SIMD3<>.up) + v3.f32[0]) + v3.f32[1]);
  if (fabsf(v4) > 0.001)
  {
    v5 = (float32x4_t)v23;
    v5.f32[1] = v24;
    v5.f32[2] = v25;
    v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), vnegq_f32(v21)), v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
    v7 = *(float *)v0;
    v8 = *(float *)(v0 + 16);
    v9 = *(float *)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 8);
    v11 = *(_QWORD *)(v0 + 24);
    v22 = *(_OWORD *)(v0 + 40);
    v12 = *(_QWORD *)(v0 + 56);
    SCNMatrix4MakeRotation(&a, -v4, v6.f32[2], v6.f32[0], v6.f32[1]);
    v13 = *(_OWORD *)&a.m11;
    v14 = *(_OWORD *)&a.m21;
    v15 = *(_OWORD *)&a.m31;
    v16 = *(_OWORD *)&a.m41;
    a.m11 = v7;
    LODWORD(a.m12) = v23;
    *(_QWORD *)&a.m13 = v10;
    a.m21 = v8;
    a.m22 = v24;
    *(_QWORD *)&a.m23 = v11;
    a.m31 = v9;
    a.m32 = v25;
    *(_OWORD *)&a.m33 = v22;
    *(_QWORD *)&a.m43 = v12;
    *(_OWORD *)&b.m11 = v13;
    *(_OWORD *)&b.m21 = v14;
    *(_OWORD *)&b.m31 = v15;
    *(_OWORD *)&b.m41 = v16;
    SCNMatrix4Mult(&v26, &a, &b);
    v17 = *(_OWORD *)&v26.m21;
    v18 = *(_OWORD *)&v26.m31;
    v19 = *(_OWORD *)&v26.m41;
    *(_OWORD *)v0 = *(_OWORD *)&v26.m11;
    *(_OWORD *)(v0 + 16) = v17;
    *(_OWORD *)(v0 + 32) = v18;
    *(_OWORD *)(v0 + 48) = v19;
  }
  return v4;
}

double * infix(_:_:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  SCNMatrix4 v12;
  SCNMatrix4 b;
  SCNMatrix4 a;

  v4 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m21 = v4;
  v5 = a1[3];
  *(_OWORD *)&a.m31 = a1[2];
  *(_OWORD *)&a.m41 = v5;
  v6 = a2[1];
  *(_OWORD *)&b.m11 = *a2;
  *(_OWORD *)&b.m21 = v6;
  v7 = a2[3];
  *(_OWORD *)&b.m31 = a2[2];
  *(_OWORD *)&b.m41 = v7;
  SCNMatrix4Mult(&v12, &a, &b);
  result = *(double *)&v12.m11;
  v9 = *(_OWORD *)&v12.m21;
  v10 = *(_OWORD *)&v12.m31;
  v11 = *(_OWORD *)&v12.m41;
  *a3 = *(_OWORD *)&v12.m11;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

Swift::Void __swiftcall SCNMatrix4.lerp(to:t:)(SCNMatrix4 *to, Swift::Float t)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;

  v3 = vaddq_f32(v2[1], vmulq_n_f32(vsubq_f32(*(float32x4_t *)&to->m21, v2[1]), t));
  *v2 = vaddq_f32(*v2, vmulq_n_f32(vsubq_f32(*(float32x4_t *)&to->m11, *v2), t));
  v2[1] = v3;
  v4 = vaddq_f32(v2[2], vmulq_n_f32(vsubq_f32(*(float32x4_t *)&to->m31, v2[2]), t));
  v5 = vaddq_f32(v2[3], vmulq_n_f32(vsubq_f32(*(float32x4_t *)&to->m41, v2[3]), t));
  v2[2] = v4;
  v2[3] = v5;
}

double * infix(_:_:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  SCNMatrix4 v10;
  SCNMatrix4 b;
  SCNMatrix4 a;
  SCNMatrix4 v13;

  sub_2216535C4();
  v4 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m21 = v4;
  v5 = a1[3];
  *(_OWORD *)&a.m31 = a1[2];
  *(_OWORD *)&a.m41 = v5;
  b = v13;
  SCNMatrix4Mult(&v10, &a, &b);
  result = *(double *)&v10.m11;
  v7 = *(_OWORD *)&v10.m21;
  v8 = *(_OWORD *)&v10.m31;
  v9 = *(_OWORD *)&v10.m41;
  *a2 = *(_OWORD *)&v10.m11;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  return result;
}

void SCNNode.findTypeInParents<A>(_:)(uint64_t a1@<X1>, char *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  int v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v14[2];

  v5 = sub_221653714();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v14 - v7;
  v9 = v2;
  while (1)
  {
    v14[1] = v9;
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DCDC0);
    v11 = swift_dynamicCast();
    v12 = *(_QWORD *)(a1 - 8);
    v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    if (v11)
      break;
    v13(v8, 1, 1, a1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = objc_msgSend(v10, sel_parentNode);

    if (!v9)
    {
      v13(a2, 1, 1, a1);
      return;
    }
  }
  v13(v8, 0, 1, a1);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(a2, v8, a1);
  v13(a2, 0, 1, a1);

}

Swift::Bool __swiftcall SCNNode.isDecendent(of:)(SCNNode of)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  char v6;

  sub_221610B60();
  v2 = v1;
  if ((sub_2216536F0() & 1) != 0)
  {
    v3 = v2;
LABEL_6:

    return 1;
  }
  else
  {
    v3 = v2;
    while (1)
    {
      v4 = objc_msgSend(v3, sel_parentNode);

      if (!v4)
        return 0;
      v5 = v2;
      v3 = v4;
      v6 = sub_2216536F0();

      if ((v6 & 1) != 0)
        goto LABEL_6;
    }
  }
}

unint64_t sub_221610B60()
{
  unint64_t result;

  result = qword_2556DCDC8;
  if (!qword_2556DCDC8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2556DCDC8);
  }
  return result;
}

Swift::Void __swiftcall SCNNode.removeAllChildren()()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;

  v1 = objc_msgSend(v0, sel_childNodes);
  sub_221610B60();
  v2 = sub_221653324();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v3 = sub_2216539F0();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_10;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x22766ED44](i, v2);
      else
        v5 = *(id *)(v2 + 8 * i + 32);
      v6 = v5;
      objc_msgSend(v5, sel_removeFromParentNode);

    }
    goto LABEL_10;
  }
  __break(1u);
}

float SCNNode.boundingSize.getter()
{
  float v1;
  float v2;

  sub_221610B60();
  sub_221653684();
  sub_221653684();
  return v2 - v1;
}

id SCNNode.setForwardDirection(direction:)(float32x4_t a1)
{
  void *v1;
  float v2;
  id result;
  float32x4_t v5;

  if (qword_2556D8DD8 != -1)
  {
    v5 = a1;
    result = (id)swift_once();
    a1 = v5;
  }
  v2 = sqrtf(vmuls_lane_f32(a1.f32[2], a1, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)a1.f32, *(float32x2_t *)a1.f32)));
  if (v2 > 0.0 && a1.f32[2] < 1.0)
  {
    acosf(a1.f32[2] / v2);
    sub_2216535F4();
    return objc_msgSend(v1, sel_setRotation_);
  }
  return result;
}

float - infix(_:_:)(float a1, double a2, double a3, float a4)
{
  return a1 - a4;
}

uint64_t sub_221610DE4()
{
  uint64_t result;
  int v1;
  int v2;
  int v3;

  result = sub_2216535DC();
  static SCNVector3.one = v1;
  *(_DWORD *)algn_2556E45A4 = v2;
  dword_2556E45A8 = v3;
  return result;
}

int *SCNVector3.one.unsafeMutableAddressor()
{
  if (qword_2556D8E88 != -1)
    swift_once();
  return &static SCNVector3.one;
}

float static SCNVector3.one.getter()
{
  if (qword_2556D8E88 != -1)
    swift_once();
  return *(float *)&static SCNVector3.one;
}

uint64_t sub_221610E9C()
{
  uint64_t result;
  int v1;
  int v2;
  int v3;

  result = sub_2216535DC();
  static SCNVector3.zero = v1;
  unk_2556E45B0 = v2;
  dword_2556E45B4 = v3;
  return result;
}

int *SCNVector3.zero.unsafeMutableAddressor()
{
  if (qword_2556D8E90 != -1)
    swift_once();
  return &static SCNVector3.zero;
}

float static SCNVector3.zero.getter()
{
  if (qword_2556D8E90 != -1)
    swift_once();
  return *(float *)&static SCNVector3.zero;
}

uint64_t sub_221610F54()
{
  uint64_t result;
  int v1;
  int v2;
  int v3;

  result = sub_2216535DC();
  static SCNVector3.forward = v1;
  *(_DWORD *)algn_2556E45BC = v2;
  dword_2556E45C0 = v3;
  return result;
}

int *SCNVector3.forward.unsafeMutableAddressor()
{
  if (qword_2556D8E98 != -1)
    swift_once();
  return &static SCNVector3.forward;
}

float static SCNVector3.forward.getter()
{
  if (qword_2556D8E98 != -1)
    swift_once();
  return *(float *)&static SCNVector3.forward;
}

uint64_t sub_22161100C()
{
  uint64_t result;
  int v1;
  int v2;
  int v3;

  result = sub_2216535DC();
  static SCNVector3.up = v1;
  unk_2556E45C8 = v2;
  dword_2556E45CC = v3;
  return result;
}

int *SCNVector3.up.unsafeMutableAddressor()
{
  if (qword_2556D8EA0 != -1)
    swift_once();
  return &static SCNVector3.up;
}

float static SCNVector3.up.getter()
{
  if (qword_2556D8EA0 != -1)
    swift_once();
  return *(float *)&static SCNVector3.up;
}

SCNVector3 __swiftcall SCNVector3.init(_:)(Swift::Float a1)
{
  float v1;
  float v2;
  float v3;
  SCNVector3 result;

  sub_2216535D0();
  result.z = v3;
  result.y = v2;
  result.x = v1;
  return result;
}

double SCNVector3.floats.getter(float a1, float a2)
{
  return COERCE_DOUBLE(__PAIR64__(LODWORD(a2), LODWORD(a1)));
}

uint64_t SCNVector3.nsArray.getter(float a1, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;

  sub_2215DDC80(0, &qword_2556DCDD0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_221655530;
  v7 = MEMORY[0x24BEE14E8];
  *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE14E8];
  *(float *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 88) = v7;
  *(float *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 120) = v7;
  *(float *)(v6 + 96) = a3;
  return MEMORY[0x22766EB34]();
}

float SCNVector3.magnitudeSquared.getter(float a1, float a2, float a3)
{
  return (float)((float)(a1 * a1) + (float)(a2 * a2)) + (float)(a3 * a3);
}

float SCNVector3.magnitude.getter(float a1, float a2, float a3)
{
  return sqrtf((float)((float)(a1 * a1) + (float)(a2 * a2)) + (float)(a3 * a3));
}

uint64_t SCNVector3.normalized.getter()
{
  return sub_2216535E8();
}

uint64_t / infix(_:_:)()
{
  return sub_2216535E8();
}

void SCNVector3.set(_:)(__n128 a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = a1.n128_u64[0];
  *(_DWORD *)(v1 + 8) = a1.n128_u32[2];
}

void static SCNVector3.make(withNSArray:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  id v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_221652EE0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t)objc_msgSend(a1, sel_count);
  v28 = MEMORY[0x24BEE4AF8];
  sub_2215CBFF4(0, v6 & ~(v6 >> 63), 0);
  v7 = a1;
  sub_2216536B4();

  if (v6 < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v22 = v3;
  if (v6)
  {
    sub_221611748();
    do
    {
      sub_221653720();
      if (!v27)
        goto LABEL_24;
      sub_2215D1ADC((uint64_t)&v26, (uint64_t)&v24);
      sub_2215DDC80(0, (unint64_t *)&qword_2556DA4E0);
      swift_dynamicCast();
      v8 = v23;
      objc_msgSend(v23, sel_floatValue);
      v10 = v9;

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
      v11 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2215CBFF4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v28;
      }
      v13 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2215CBFF4((char *)(v12 > 1), v13 + 1, 1);
        v11 = v28;
      }
      *(_QWORD *)(v11 + 16) = v13 + 1;
      *(_DWORD *)(v11 + 4 * v13 + 32) = v10;
    }
    while (--v6);
  }
  sub_221611748();
  sub_221653720();
  while (v25)
  {
    sub_2215C39AC(&v24, &v26);
    sub_2215D1ADC((uint64_t)&v26, (uint64_t)&v24);
    sub_2215DDC80(0, (unint64_t *)&qword_2556DA4E0);
    swift_dynamicCast();
    v14 = v23;
    objc_msgSend(v23, sel_floatValue);
    v16 = v15;

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    v17 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2215CBFF4(0, *(_QWORD *)(v17 + 16) + 1, 1);
      v17 = v28;
    }
    v19 = *(_QWORD *)(v17 + 16);
    v18 = *(_QWORD *)(v17 + 24);
    if (v19 >= v18 >> 1)
    {
      sub_2215CBFF4((char *)(v18 > 1), v19 + 1, 1);
      v17 = v28;
    }
    *(_QWORD *)(v17 + 16) = v19 + 1;
    *(_DWORD *)(v17 + 4 * v19 + 32) = v16;
    sub_221653720();
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
  sub_2215DDB1C((uint64_t)&v24);
  v20 = *(_QWORD *)(v28 + 16);
  if (!v20)
    goto LABEL_21;
  if (v20 != 1)
  {
    if (v20 >= 3)
    {
      swift_release();
      return;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t * infix(_:_:)()
{
  return sub_2216535E8();
}

{
  return sub_2216535E8();
}

uint64_t SIMD4<>.scnVec3.getter()
{
  return sub_2216535D0();
}

float + infix(_:_:)(float a1, double a2, double a3, float a4)
{
  return a1 + a4;
}

float += infix(_:_:)(float *a1, float a2, float a3, float a4)
{
  float result;
  float v5;
  float v6;

  result = *a1 + a2;
  v5 = a1[1] + a3;
  v6 = a1[2] + a4;
  *a1 = result;
  a1[1] = v5;
  a1[2] = v6;
  return result;
}

float -= infix(_:_:)(float *a1, float a2, float a3, float a4)
{
  float result;
  float v5;
  float v6;

  result = *a1 - a2;
  v5 = a1[1] - a3;
  v6 = a1[2] - a4;
  *a1 = result;
  a1[1] = v5;
  a1[2] = v6;
  return result;
}

float * infix(_:_:)(float a1, double a2, double a3, float a4)
{
  return a1 * a4;
}

float32x2_t *= infix(_:_:)(float32x2_t *a1, float32x2_t a2, float32_t a3, float a4)
{
  float32_t v4;
  float32x2_t result;

  v4 = a1[1].f32[0] * a4;
  a2.f32[1] = a3;
  result = vmul_f32(*a1, a2);
  *a1 = result;
  a1[1].f32[0] = v4;
  return result;
}

uint64_t *= infix(_:_:)(_DWORD *a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;

  result = sub_2216535E8();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

float / infix(_:_:)(float a1, double a2, double a3, float a4)
{
  return a1 / a4;
}

float32x2_t /= infix(_:_:)(float32x2_t *a1, float32x2_t a2, float32_t a3, float a4)
{
  float32_t v4;
  float32x2_t result;

  v4 = a1[1].f32[0] / a4;
  a2.f32[1] = a3;
  result = vdiv_f32(*a1, a2);
  *a1 = result;
  a1[1].f32[0] = v4;
  return result;
}

uint64_t /= infix(_:_:)(_DWORD *a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;

  result = sub_2216535E8();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

BOOL == infix(_:_:)(float a1, float a2, float a3, float a4, float a5, float a6)
{
  _BOOL4 v6;

  v6 = a1 == a4;
  if (a2 != a5)
    v6 = 0;
  return a3 == a6 && v6;
}

unint64_t sub_221611748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2556DCDD8;
  if (!qword_2556DCDD8)
  {
    v1 = sub_221652EE0();
    result = MEMORY[0x22766FA4C](MEMORY[0x24BDCD530], v1);
    atomic_store(result, (unint64_t *)&qword_2556DCDD8);
  }
  return result;
}

__n64 SCNVector4.floats.getter(double a1, float a2)
{
  __n64 result;

  result.n64_f32[1] = a2;
  return result;
}

uint64_t SCNVector4.nsArray.getter(float a1, float a2, float a3, float a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_2215DDC80(0, &qword_2556DCDD0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D9F48);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_221656B50;
  v9 = MEMORY[0x24BEE14E8];
  *(_QWORD *)(v8 + 56) = MEMORY[0x24BEE14E8];
  *(float *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 88) = v9;
  *(float *)(v8 + 64) = a2;
  *(_QWORD *)(v8 + 120) = v9;
  *(float *)(v8 + 96) = a3;
  *(_QWORD *)(v8 + 152) = v9;
  *(float *)(v8 + 128) = a4;
  return MEMORY[0x22766EB34]();
}

void static SCNVector4.make(withNSArray:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  id v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_221652EE0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t)objc_msgSend(a1, sel_count);
  v28 = MEMORY[0x24BEE4AF8];
  sub_2215CBFF4(0, v6 & ~(v6 >> 63), 0);
  v7 = a1;
  sub_2216536B4();

  if (v6 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v22 = v3;
  if (v6)
  {
    sub_221611748();
    do
    {
      sub_221653720();
      if (!v27)
        goto LABEL_26;
      sub_2215D1ADC((uint64_t)&v26, (uint64_t)&v24);
      sub_2215DDC80(0, (unint64_t *)&qword_2556DA4E0);
      swift_dynamicCast();
      v8 = v23;
      objc_msgSend(v23, sel_floatValue);
      v10 = v9;

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
      v11 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2215CBFF4(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v28;
      }
      v13 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2215CBFF4((char *)(v12 > 1), v13 + 1, 1);
        v11 = v28;
      }
      *(_QWORD *)(v11 + 16) = v13 + 1;
      *(_DWORD *)(v11 + 4 * v13 + 32) = v10;
    }
    while (--v6);
  }
  sub_221611748();
  sub_221653720();
  while (v25)
  {
    sub_2215C39AC(&v24, &v26);
    sub_2215D1ADC((uint64_t)&v26, (uint64_t)&v24);
    sub_2215DDC80(0, (unint64_t *)&qword_2556DA4E0);
    swift_dynamicCast();
    v14 = v23;
    objc_msgSend(v23, sel_floatValue);
    v16 = v15;

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    v17 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2215CBFF4(0, *(_QWORD *)(v17 + 16) + 1, 1);
      v17 = v28;
    }
    v19 = *(_QWORD *)(v17 + 16);
    v18 = *(_QWORD *)(v17 + 24);
    if (v19 >= v18 >> 1)
    {
      sub_2215CBFF4((char *)(v18 > 1), v19 + 1, 1);
      v17 = v28;
    }
    *(_QWORD *)(v17 + 16) = v19 + 1;
    *(_DWORD *)(v17 + 4 * v19 + 32) = v16;
    sub_221653720();
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
  sub_2215DDB1C((uint64_t)&v24);
  v20 = *(_QWORD *)(v28 + 16);
  if (!v20)
    goto LABEL_22;
  if (v20 == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v20 >= 3)
  {
    if (v20 != 3)
    {
      swift_release();
      return;
    }
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
}

uint64_t property wrapper backing initializer of ScreenPoint.pos(double a1)
{
  uint64_t v2;
  _DWORD *v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DCDE0);
  v2 = swift_allocObject();
  v3 = (_DWORD *)swift_slowAlloc();
  *v3 = 0;
  *(_QWORD *)(v2 + 24) = v3;
  *(double *)(v2 + 16) = a1;
  return v2;
}

double ScreenPoint.pos.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  double v4;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos);
  swift_beginAccess();
  v2 = *v1;
  v3 = *(os_unfair_lock_s **)(v2 + 24);
  swift_retain();
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  v4 = *(double *)(v2 + 16);
  os_unfair_lock_unlock(v3);
  swift_release();
  return v4;
}

uint64_t ScreenPoint.pos.setter(double a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos);
  swift_beginAccess();
  v4 = *v3;
  v5 = *(os_unfair_lock_s **)(v4 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  *(double *)(v4 + 16) = a1;
  os_unfair_lock_unlock(v5);
  return swift_release();
}

void (*ScreenPoint.pos.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos);
  swift_beginAccess();
  v5 = *v4;
  v3[7] = v5;
  v6 = *(os_unfair_lock_s **)(v5 + 24);
  swift_retain();
  os_unfair_lock_lock(v6);
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 16);
  os_unfair_lock_unlock(v6);
  v3[6] = v7;
  return sub_221611DF4;
}

void sub_221611DF4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v4 = *(os_unfair_lock_s **)(v2 + 24);
  os_unfair_lock_lock(v4);
  *(_QWORD *)(v2 + 16) = v3;
  os_unfair_lock_unlock(v4);
  swift_release();
  free(v1);
}

id ScreenPoint.__allocating_init(_:)(double a1)
{
  objc_class *v1;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  _DWORD *v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = (uint64_t *)&v3[OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos];
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DCDE0);
  v5 = swift_allocObject();
  v6 = v3;
  v7 = (_DWORD *)swift_slowAlloc();
  *v7 = 0;
  *(_QWORD *)(v5 + 24) = v7;
  *(double *)(v5 + 16) = a1;
  *v4 = v5;
  swift_endAccess();

  v9.receiver = v6;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id ScreenPoint.init(_:)(double a1)
{
  char *v1;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  _DWORD *v6;
  objc_super v8;

  v3 = (uint64_t *)&v1[OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos];
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DCDE0);
  v4 = swift_allocObject();
  v5 = v1;
  v6 = (_DWORD *)swift_slowAlloc();
  *v6 = 0;
  *(_QWORD *)(v4 + 24) = v6;
  *(double *)(v4 + 16) = a1;
  *v3 = v4;
  swift_endAccess();

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for ScreenPoint();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for ScreenPoint()
{
  return objc_opt_self();
}

id ScreenPoint.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ScreenPoint.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_22161205C()
{
  return swift_release();
}

id ScreenPoint.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScreenPoint();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2216120AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_22165390C();
    result = sub_221616BF8(a1);
    v4 = result;
    v6 = v5;
    v7 = 0;
    v8 = a1 + 64;
    v17 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v10 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_23;
      v18 = v7;
      v11 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v4);
      sub_2216538E8();
      sub_221653918();
      sub_221653924();
      result = sub_2216538F4();
      v9 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v9)
        goto LABEL_24;
      v12 = *(_QWORD *)(v8 + 8 * v10);
      if ((v12 & (1 << v4)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_26;
      v13 = v12 & (-2 << (v4 & 0x3F));
      if (v13)
      {
        v9 = __clz(__rbit64(v13)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v14 = v10 + 1;
        v15 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v15)
        {
          v16 = *(_QWORD *)(v8 + 8 * v14);
          if (v16)
          {
LABEL_18:
            v9 = __clz(__rbit64(v16)) + (v14 << 6);
          }
          else
          {
            while (v15 - 2 != v10)
            {
              v16 = *(_QWORD *)(a1 + 80 + 8 * v10++);
              if (v16)
              {
                v14 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v7 = v18 + 1;
      v4 = v9;
      if (v18 + 1 == v17)
        return v19;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void (*sub_221612288(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_221652FD0();
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_221615DF8(v2, (uint64_t)v5);
  return sub_221612318;
}

void sub_221612318(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void (*sub_22161236C(_QWORD *a1, unsigned __int8 a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_221615F24(v4, a2);
  return sub_2216123B8;
}

void sub_2216123B8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t *MeasureCore.shared.unsafeMutableAddressor()
{
  if (qword_2556D8EB0 != -1)
    swift_once();
  return &static MeasureCore.shared;
}

char *MeasureCore.isTrackingVGAEnabled.unsafeMutableAddressor()
{
  if (qword_2556D8EA8 != -1)
    swift_once();
  return &static MeasureCore.isTrackingVGAEnabled;
}

void sub_221612468(uint64_t a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float v14;
  id v15;
  simd_float4x4 *v16;
  simd_float4x4 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  float32x4_t v23;
  float32x4_t v24;
  double v25;
  double v26;
  __int128 v27;
  double v28;
  __int128 v29;
  double v30;
  __int128 v31;
  __int128 v33;
  _BYTE v35[80];
  __int128 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;

  v4 = *(_QWORD *)(v3 + 88);
  if (v4)
  {
    swift_beginAccess();
    v6 = 0uLL;
    v7 = 0;
    if ((*(_BYTE *)(v4 + 432) & 1) != 0)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      v13 = 0uLL;
    }
    else
    {
      v14 = *(float *)(v4 + 356);
      v30 = *(double *)(v4 + 368);
      v28 = *(double *)(v4 + 384);
      v26 = *(double *)(v4 + 400);
      v25 = *(double *)(v4 + 416);
      swift_beginAccess();
      if ((*(_BYTE *)(v4 + 432) & 1) != 0
        || (v24 = *(float32x4_t *)(v4 + 320),
            v23 = *(float32x4_t *)(v4 + 336),
            swift_retain(),
            sub_2215E677C((uint64_t)v35, v24, v23, 0.8, a2, a3),
            swift_release(),
            sub_2215C6540((uint64_t)v35, (uint64_t)&v36, &qword_2556DB1C8),
            (v37 & 1) != 0))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0uLL;
        v11 = 0uLL;
        v12 = 0uLL;
        v13 = 0uLL;
        v6 = 0uLL;
      }
      else
      {
        v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD910]), sel_initWithTransform_, v30, v28, v26, v25);
        type metadata accessor for WorldPlane();
        swift_allocObject();
        v9 = sub_22164164C(v15, 3, 1.0 - v14, 1.0);

        sceneKitToARKit(_:)(v17, v16);
        v31 = v19;
        v33 = v18;
        v27 = v21;
        v29 = v20;
        v38 = xmmword_221657CB0;
        v39 = v18;
        v40 = v19;
        v41 = v20;
        v42 = v21;
        v43 = 0;
        v44 = 0;
        v8 = 1;
        v45 = 1;
        v46 = v9;
        v47 = 0;
        swift_retain();
        sub_221641268();
        v7 = v22;
        swift_release();
        v13 = v27;
        v12 = v29;
        v11 = v31;
        v10 = v33;
        v6 = xmmword_221657CB0;
      }
    }
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = v9;
    *(_DWORD *)(a1 + 112) = v7;
  }
  else
  {
    __break(1u);
  }
}

Swift::OpaquePointer_optional __swiftcall MeasureCore.adHitTest(screenPoints:frame:)(Swift::OpaquePointer screenPoints, ARFrame frame)
{
  void *v2;
  Swift::Bool v3;
  Swift::OpaquePointer_optional result;

  v2 = (void *)sub_2216144A0((uint64_t)screenPoints._rawValue, (uint64_t)frame.super.isa, (uint64_t (*)(uint64_t, uint64_t))sub_2215F000C);
  result.value._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t MeasureCore.mlLabel(of:kernelRadius:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  double v7;
  char **p_attr;
  char v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
    return 33;
  v5 = *(void **)(v3 + 272);
  swift_retain();
  objc_msgSend(v5, sel_lock);
  *(double *)&v6 = COERCE_DOUBLE(SegmentationProcessor.projectPoint(_:)(a2));
  p_attr = (char **)(&stru_24E72FFF8 + 8);
  if ((v9 & 1) != 0)
  {
    v17 = 33;
LABEL_41:
    objc_msgSend(v5, p_attr[407]);
    swift_release();
    return v17;
  }
  v10 = *(double *)&v6;
  v11 = v7;
  objc_msgSend(v5, sel_lock);
  sub_22161A0BC(v10, v11);
  v13 = v12;
  v15 = v14;
  result = sub_22161A198(v12, v14);
  v17 = result;
  if (result == 33 || result == 0 || a1 <= 0)
  {
LABEL_40:
    objc_msgSend(v5, p_attr[407], v34, v35, v36);
    goto LABEL_41;
  }
  v20 = -a1;
  v36 = v15;
  v37 = a1;
  v21 = 2 * a1;
  v22 = -a1;
  v34 = 2 * a1;
  v35 = -a1;
  while (2)
  {
    v39 = v22;
    v23 = v15 + v22;
    if (__OFADD__(v15, v22))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    v24 = v20;
    while (1)
    {
      v25 = v13 + v24;
      if (__OFADD__(v13, v24))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v26 = *(_QWORD **)(v3 + 280);
      if (!v26)
        goto LABEL_24;
      v27 = 0;
      if ((v25 & 0x8000000000000000) == 0)
      {
        v28 = v26[9];
        if (v25 < v28 && (v23 & 0x8000000000000000) == 0)
        {
          if (v23 >= v26[10])
          {
LABEL_24:
            v27 = 0;
            goto LABEL_25;
          }
          v29 = v23 * v28;
          if ((unsigned __int128)(v23 * (__int128)v28) >> 64 != (v23 * v28) >> 63)
            goto LABEL_45;
          v30 = __OFADD__(v29, v25);
          v31 = v29 + v25;
          if (v30)
            goto LABEL_46;
          v32 = *(char *)(v26[6] + v31);
          v33 = (void *)objc_opt_self();
          swift_retain();
          if (objc_msgSend(v33, sel_jasperAvailable))
          {
            v27 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v32);
            result = swift_release();
            if (v27 == 33)
              goto LABEL_38;
          }
          else
          {
            result = swift_release();
            if (v32 >= 0xD)
            {
LABEL_38:
              v17 = 0;
              goto LABEL_39;
            }
            v27 = byte_221658A70[v32];
          }
        }
      }
LABEL_25:
      if (v17 != v27)
        goto LABEL_38;
      if (!v21)
        break;
      --v21;
      v30 = __OFADD__(v24++, 1);
      if (v30)
        goto LABEL_44;
    }
    if (v39 == v37)
    {
LABEL_39:
      p_attr = &stru_24E72FFF8.attr;
      goto LABEL_40;
    }
    v22 = v39 + 1;
    v20 = v35;
    v15 = v36;
    v21 = v34;
    if (!__OFADD__(v39, 1))
      continue;
    break;
  }
  __break(1u);
  return 33;
}

unint64_t MeasureCore.mlNormal(of:)(float32x4_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  CGFloat v5;
  char v6;
  unint64_t v7;

  v2 = *(_QWORD *)(v1 + 80);
  if (!v2)
    return 0;
  v3 = *(void **)(v2 + 272);
  swift_retain();
  objc_msgSend(v3, sel_lock);
  v4 = SegmentationProcessor.projectPoint(_:)(a1);
  if ((v6 & 1) != 0)
    v7 = 0;
  else
    v7 = SegmentationProcessor.normal(at:)(*(CGFloat *)&v4, v5);
  objc_msgSend(v3, sel_unlock, *(_OWORD *)&a1);
  swift_release();
  return v7;
}

void sub_2216129F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  if (qword_2556D8EF8 != -1)
    swift_once();
  if (static UIDevice.parsedDeviceIdentifier == 3)
    goto LABEL_11;
  v1 = qword_2556E4630;
  v0 = qword_2556E4638;
  if ((_BYTE)static UIDevice.parsedDeviceIdentifier)
  {
    v2 = sub_221653B04();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0 || v1 < 10)
      goto LABEL_11;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v1 < 10)
      goto LABEL_11;
  }
  if ((v0 & 0x8000000000000000) == 0)
  {
    v3 = 1;
    goto LABEL_17;
  }
LABEL_11:
  if (static UIDevice.parsedDeviceIdentifier == 3)
  {
    v3 = 0;
  }
  else
  {
    if (static UIDevice.parsedDeviceIdentifier == 1)
      v3 = 1;
    else
      v3 = sub_221653B04();
    swift_bridgeObjectRelease();
  }
LABEL_17:
  static MeasureCore.isTrackingVGAEnabled = v3 & 1;
}

uint64_t static MeasureCore.isTrackingVGAEnabled.getter()
{
  if (qword_2556D8EA8 != -1)
    swift_once();
  return static MeasureCore.isTrackingVGAEnabled;
}

uint64_t sub_221612B7C()
{
  uint64_t result;

  type metadata accessor for MeasureCore();
  swift_allocObject();
  result = sub_221612EA4();
  static MeasureCore.shared = result;
  return result;
}

uint64_t static MeasureCore.shared.getter()
{
  if (qword_2556D8EB0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t MeasureCore.allPlaneAnchors.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 56));
  swift_beginAccess();
  v3 = v0 + 56;
  v2 = *(os_unfair_lock_s **)(v0 + 56);
  v1 = *(_QWORD *)(v3 + 8);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  return v1;
}

uint64_t MeasureCore.depthProcessor.getter()
{
  swift_beginAccess();
  return swift_retain();
}

BOOL MeasureCore.isInitialized.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120) != 0;
}

uint64_t MeasureCore.planeSelectionStats.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_QWORD *)(v1 + 104);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 224);
    v5 = *(os_unfair_lock_s **)(v4 + 80);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v5);
    swift_beginAccess();
    v13 = *(_OWORD *)(v4 + 32);
    v14 = *(_OWORD *)(v4 + 16);
    v11 = *(_OWORD *)(v4 + 64);
    v12 = *(_OWORD *)(v4 + 48);
    os_unfair_lock_unlock(v5);
    swift_release();
    result = swift_release();
    v8 = v11;
    v7 = v12;
    v10 = v13;
    v9 = v14;
  }
  else
  {
    v9 = 0uLL;
    v10 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
  }
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 64) = v3 == 0;
  return result;
}

uint64_t MeasureCore.isPlaneSelectionEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t MeasureCore.isPlaneSelectionEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 136) = a1;
  return result;
}

uint64_t (*MeasureCore.isPlaneSelectionEnabled.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t MeasureCore.shouldUpdateSemantics.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t MeasureCore.shouldUpdateSemantics.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 137) = a1;
  return result;
}

uint64_t (*MeasureCore.shouldUpdateSemantics.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_221612EA4()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;

  *(_QWORD *)(v0 + 16) = 0x3F4CCCCD3E99999ALL;
  *(_DWORD *)(v0 + 24) = 1003599639;
  v1 = (_DWORD *)swift_slowAlloc();
  *v1 = 0;
  *(_QWORD *)(v0 + 32) = v1;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 40) = sub_2215C2444(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 48) = sub_2215C39BC(v2);
  v3 = (_DWORD *)swift_slowAlloc();
  *v3 = 0;
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v0 + 64) = sub_2215C25E8(v2);
  v4 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v5 = (void *)sub_22165318C();
  v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  *(_BYTE *)(v0 + 72) = v6;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_QWORD *)(v0 + 128) = 0;
  *(_WORD *)(v0 + 136) = 257;
  return v0;
}

uint64_t MeasureCore.initialize(sceneView:motion:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t result;

  v4 = v3;
  if (v3[15])
  {
    result = sub_221653984();
    __break(1u);
  }
  else
  {
    v4[15] = a1;
    v4[16] = a2;
    v8 = (void *)objc_opt_self();
    swift_retain_n();
    v9 = a1;
    if (objc_msgSend(v8, sel_jasperAvailable))
    {
      type metadata accessor for DepthProcessor();
      swift_allocObject();
      v10 = sub_2215EFE18(v9, a2);
      swift_beginAccess();
      v4[14] = v10;
      swift_release();
    }
    type metadata accessor for SegmentationProcessor();
    swift_allocObject();
    v11 = v9;
    swift_retain();
    v4[10] = sub_2216189F8(v11, a2, a3);
    swift_release();
    type metadata accessor for LocalPlaneDetector();
    swift_allocObject();
    v12 = v11;
    v4[11] = LocalPlaneDetector.init(sceneView:)(v12, a2);
    swift_release();
    type metadata accessor for PatchTracker();
    swift_allocObject();
    v13 = v12;
    swift_retain();
    v4[12] = PatchTracker.init(sceneView:motion:)(v13, a2, a3);
    swift_release();
    type metadata accessor for PlaneSelector();
    swift_allocObject();
    sub_2215FFEE8(v13, a2, (uint64_t)sub_221616C80, (uint64_t)v4, (uint64_t)sub_221616C88, (uint64_t)v4);
    v4[13] = v14;
    return swift_release();
  }
  return result;
}

uint64_t sub_2216131E0(unsigned __int8 a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t result;
  void (*v23)(_BYTE *, _QWORD);
  unint64_t v24;
  _BYTE v25[32];
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v2 = a2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a2 + 32));
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 48);
  if (!*(_QWORD *)(v4 + 16) || (v5 = sub_2215CA344(a1), (v6 & 1) == 0))
  {
LABEL_7:
    swift_endAccess();
    v11 = 0;
LABEL_20:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 32));
    return v11;
  }
  v24 = v2;
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  v2 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v8 = sub_221653810();
    if (v8)
    {
      v9 = v8;
      v29 = MEMORY[0x24BEE4AF8];
      sub_22165390C();
      v26 = sub_2216537C8();
      v27 = v10;
      v28 = 1;
      if ((v9 & 0x8000000000000000) == 0)
        goto LABEL_12;
      __break(1u);
      goto LABEL_7;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
LABEL_19:
    v2 = v24;
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_18;
  v29 = MEMORY[0x24BEE4AF8];
  sub_22165390C();
  v26 = sub_2215FB364(v7);
  v27 = v12;
  v28 = v13 & 1;
  while (1)
  {
LABEL_12:
    while (1)
    {
      v19 = v26;
      v20 = v27;
      v21 = v28;
      sub_221637460(v26, v27, v28, v7);
      sub_2216538E8();
      sub_221653918();
      sub_221653924();
      result = sub_2216538F4();
      if (v2)
        break;
      v14 = sub_221616B14(v19, v20, v21, v7);
      v16 = v15;
      v18 = v17;
      sub_2215FF374(v19, v20, v21);
      v26 = v14;
      v27 = v16;
      v28 = v18 & 1;
      if (!--v9)
        goto LABEL_17;
    }
    if ((v21 & 1) == 0)
      break;
    if (sub_2216537E0())
      swift_isUniquelyReferenced_nonNull_native();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2556DCF40);
    v23 = (void (*)(_BYTE *, _QWORD))sub_221653450();
    sub_221653858();
    v23(v25, 0);
    if (!--v9)
    {
LABEL_17:
      sub_2215FF374(v26, v27, v28);
      v11 = v29;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_221613474(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 32));
  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_2216120AC(v2);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 32));
  if (v3 >> 62)
  {
    sub_2215FF3FC();
    swift_bridgeObjectRetain();
    v4 = sub_221653990();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_221653B10();
    sub_2215FF3FC();
    v4 = v3;
  }
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Void __swiftcall MeasureCore.deinitialize()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  if (*(_QWORD *)(v0 + 120))
  {
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 32));
    swift_beginAccess();
    v1 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v0 + 48) = v1;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 32));
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 56));
    swift_beginAccess();
    *(_QWORD *)(v0 + 64) = v1;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 56));
    MEMORY[0x22766FAF4](*(_QWORD *)(v0 + 32), -1, -1);
    MEMORY[0x22766FAF4](*(_QWORD *)(v0 + 56), -1, -1);
    *(_QWORD *)(v0 + 80) = 0;
    swift_release();
    *(_QWORD *)(v0 + 88) = 0;
    swift_release();
    *(_QWORD *)(v0 + 96) = 0;
    swift_release();
    *(_QWORD *)(v0 + 104) = 0;
    swift_release();
    v2 = *(void **)(v0 + 120);
    *(_QWORD *)(v0 + 120) = 0;
    *(_QWORD *)(v0 + 128) = 0;

  }
  else
  {
    sub_221653984();
    __break(1u);
  }
}

void sub_2216136B8(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  float v22;
  unint64_t v23;
  char v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  float v32;
  char v33;
  id v34;
  _QWORD *v35;

  if (*(_QWORD *)(v1 + 80))
  {
    v3 = (void *)objc_opt_self();
    swift_retain();
    if (objc_msgSend(v3, sel_hasAppleNeuralEngine))
    {
      v4 = sub_22161A4AC(a1);
      if (v4)
      {
        v5 = v4;
        v6 = 0;
        v7 = v4 + 64;
        v8 = 1 << *(_BYTE *)(v4 + 32);
        v9 = -1;
        if (v8 < 64)
          v9 = ~(-1 << v8);
        v10 = v9 & *(_QWORD *)(v4 + 64);
        v11 = (unint64_t)(v8 + 63) >> 6;
        v35 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if (!v10)
          goto LABEL_10;
LABEL_7:
        v12 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        for (i = v12 | (v6 << 6); ; i = __clz(__rbit64(v20)) + (v6 << 6))
        {
          v14 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * i);
          v15 = *(_QWORD *)(v5 + 56) + (i << 6);
          v16 = *(_QWORD *)(v15 + 8);
          v17 = *(_QWORD *)(v15 + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v18 = v14;
          if (v16 == 33)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            if (v10)
              goto LABEL_7;
          }
          else
          {
            v22 = 0.0;
            if (*(_QWORD *)(v17 + 16))
            {
              v23 = sub_2215CA344(v16);
              if ((v24 & 1) != 0)
                v22 = *(float *)(*(_QWORD *)(v17 + 56) + 4 * v23);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v25 = v18;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v35 = sub_2215D7734(0, v35[2] + 1, 1, v35);
            v27 = v35[2];
            v26 = v35[3];
            if (v27 >= v26 >> 1)
              v35 = sub_2215D7734((_QWORD *)(v26 > 1), v27 + 1, 1, v35);
            v35[2] = v27 + 1;
            v28 = &v35[2 * v27];
            v28[4] = v25;
            *((_BYTE *)v28 + 40) = v16;
            *((float *)v28 + 11) = (float)(*((float *)&v16 + 1) / v22)
                                 * (float)(1.0 - fabsf((float)(v22 / 200.0) + -0.3));

            if (v10)
              goto LABEL_7;
          }
LABEL_10:
          v19 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
LABEL_42:
            __break(1u);
            return;
          }
          if (v19 >= v11)
            goto LABEL_35;
          v20 = *(_QWORD *)(v7 + 8 * v19);
          ++v6;
          if (!v20)
          {
            v6 = v19 + 1;
            if (v19 + 1 >= v11)
              goto LABEL_35;
            v20 = *(_QWORD *)(v7 + 8 * v6);
            if (!v20)
            {
              v6 = v19 + 2;
              if (v19 + 2 >= v11)
                goto LABEL_35;
              v20 = *(_QWORD *)(v7 + 8 * v6);
              if (!v20)
              {
                v21 = v19 + 3;
                if (v21 >= v11)
                {
LABEL_35:
                  swift_release();
                  v29 = v35;
                  v30 = v35[2];
                  if (v30)
                    goto LABEL_38;
                  goto LABEL_40;
                }
                v20 = *(_QWORD *)(v7 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    v6 = v21 + 1;
                    if (__OFADD__(v21, 1))
                      goto LABEL_42;
                    if (v6 >= v11)
                      goto LABEL_35;
                    v20 = *(_QWORD *)(v7 + 8 * v6);
                    ++v21;
                    if (v20)
                      goto LABEL_23;
                  }
                }
                v6 = v21;
              }
            }
          }
LABEL_23:
          v10 = (v20 - 1) & v20;
        }
      }
      v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v30 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (v30)
      {
LABEL_38:
        v31 = (_DWORD *)v29 + 11;
        do
        {
          v32 = *(float *)v31;
          v33 = *((_BYTE *)v31 - 4);
          v34 = *(id *)(v31 - 3);
          sub_221613A50(v33, v34, 1, v32);

          v31 += 4;
          --v30;
        }
        while (v30);
      }
LABEL_40:
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
}

void sub_221613A50(char a1, id a2, char a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void *v24;
  id v25;
  void (*v26)(char *, _QWORD **);
  id v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  float *v31;
  float v32;
  void *v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  id v41;
  char v42;
  char v43;
  char v44;
  char v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  int isUniquelyReferenced_nonNull_native;
  int v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;

  v5 = v4;
  v10 = (_QWORD **)sub_221652FD0();
  v11 = (uint64_t)*(v10 - 1);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (unint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (unint64_t)&v56 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v56 - v18;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 56));
  v20 = objc_msgSend(a2, sel_identifier);
  sub_221652FB8();

  swift_beginAccess();
  v21 = *(_QWORD *)(v5 + 64);
  if (*(_QWORD *)(v21 + 16) && (v22 = sub_2215CA2D8((uint64_t)v19), (v23 & 1) != 0))
  {
    v24 = *(void **)(*(_QWORD *)(v21 + 56) + 8 * v22);
    v25 = v24;
  }
  else
  {
    v24 = 0;
  }
  swift_endAccess();
  v26 = *(void (**)(char *, _QWORD **))(v11 + 8);
  v26(v19, v10);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 56));
  if (v24)
  {
    v60 = v24;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 32));
    v27 = objc_msgSend(a2, sel_identifier);
    sub_221652FB8();

    swift_beginAccess();
    v28 = *(_QWORD *)(v5 + 40);
    if (!*(_QWORD *)(v28 + 16) || (v29 = sub_2215CA2D8(v17), (v30 & 1) == 0))
    {
      swift_endAccess();
      v26((char *)v17, v10);
      goto LABEL_16;
    }
    v31 = (float *)(*(_QWORD *)(v28 + 56) + 8 * v29);
    v59 = *(unsigned __int8 *)v31;
    v32 = v31[1];
    swift_endAccess();
    v26((char *)v17, v10);
    v33 = v60;
    if ((a3 & 1) == 0 || v32 < a4)
    {
      v57 = (_QWORD *)(v5 + 48);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v63 = *(_QWORD **)(v5 + 48);
      v34 = v63;
      *(_QWORD *)(v5 + 48) = 0x8000000000000000;
      v17 = sub_2215CA344(v59);
      v36 = v34[2];
      v37 = (v35 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_41;
      a3 = v35;
      if (v34[3] < v38)
      {
        sub_2215CE96C(v38, isUniquelyReferenced_nonNull_native);
        v39 = sub_2215CA344(v59);
        if ((a3 & 1) != (v40 & 1))
        {
LABEL_44:
          sub_221653B64();
          __break(1u);
          return;
        }
        v17 = v39;
        if ((a3 & 1) != 0)
          goto LABEL_34;
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_42;
      if ((v35 & 1) == 0)
        goto LABEL_43;
      while (1)
      {
LABEL_34:
        v54 = v63;
        v62 = *(_QWORD **)(v63[7] + 8 * v17);
        v55 = (void *)sub_221616950(a2);
        if (v62)
          *(_QWORD *)(v54[7] + 8 * v17) = v62;
        else
          sub_2215D14F0(v17, (uint64_t)v54);
        *v57 = v54;
        swift_endAccess();

LABEL_16:
        v41 = objc_msgSend(a2, sel_identifier);
        sub_221652FB8();

        swift_beginAccess();
        v42 = swift_isUniquelyReferenced_nonNull_native();
        v63 = *(_QWORD **)(v5 + 40);
        v43 = 0;
        *(_QWORD *)(v5 + 40) = 0x8000000000000000;
        sub_22161C82C(a1, v14, v42, a4);
        *(_QWORD *)(v5 + 40) = v63;
        swift_bridgeObjectRelease();
        v26((char *)v14, v10);
        swift_endAccess();
        v10 = (_QWORD **)(v5 + 48);
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16) || (sub_2215CA344(a1), (v44 & 1) == 0))
        {
          swift_endAccess();
          swift_beginAccess();
          v45 = swift_isUniquelyReferenced_nonNull_native();
          v63 = *v10;
          *v10 = (_QWORD *)0x8000000000000000;
          sub_22161C6F8(MEMORY[0x24BEE4B08], a1, v45);
          *v10 = v63;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        swift_beginAccess();
        a2 = a2;
        a3 = swift_isUniquelyReferenced_nonNull_native();
        v62 = *v10;
        v46 = v62;
        *v10 = (_QWORD *)0x8000000000000000;
        v14 = sub_2215CA344(a1);
        v48 = v46[2];
        v49 = (v47 & 1) == 0;
        v50 = v48 + v49;
        if (__OFADD__(v48, v49))
          break;
        v43 = v47;
        if (v46[3] >= v50)
        {
          if ((a3 & 1) != 0)
          {
            if ((v47 & 1) != 0)
              goto LABEL_26;
            goto LABEL_40;
          }
          goto LABEL_39;
        }
        sub_2215CE96C(v50, a3);
        v51 = sub_2215CA344(a1);
        if ((v43 & 1) != (v52 & 1))
          goto LABEL_44;
        v14 = v51;
        if ((v43 & 1) != 0)
        {
LABEL_26:
          v53 = (uint64_t)v62;
          v61 = *(_QWORD *)(v62[7] + 8 * v14);
          sub_2215FDE40(&v63, a2);
          if (v61)
            *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v14) = v61;
          else
            sub_2215D14F0(v14, v53);
          v33 = v60;
          *v10 = (_QWORD *)v53;
          swift_endAccess();

          goto LABEL_30;
        }
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        sub_2215D0530();
        if ((a3 & 1) == 0)
          goto LABEL_43;
      }
      __break(1u);
LABEL_39:
      sub_2215D0530();
      if ((v43 & 1) != 0)
        goto LABEL_26;
      goto LABEL_40;
    }
LABEL_30:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 32));

  }
}

Swift::Void __swiftcall MeasureCore.updatePlanes(with:)(ARFrame with)
{
  uint64_t v1;
  _BYTE v3[128];

  if (!*(_QWORD *)(v1 + 120))
    goto LABEL_7;
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 136) != 1)
    return;
  sub_2216136B8(with.super.isa);
  if (!*(_QWORD *)(v1 + 88))
  {
    __break(1u);
LABEL_7:
    sub_221653984();
    __break(1u);
    return;
  }
  swift_retain();
  LocalPlaneDetector.detectPlane(with:)(with.super.isa, (uint64_t)v3);
  swift_release();
}

Swift::Void __swiftcall MeasureCore.didUpdate(with:)(ARFrame with)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  double v9;
  double v10;
  float64x2_t v11;
  uint64_t v12;
  float64_t v13;
  float64_t v14;

  v2 = v1;
  v3 = *(void **)(v1 + 120);
  if (!v3)
    goto LABEL_17;
  v5 = *(_QWORD *)(v2 + 128);
  ObjectType = swift_getObjectType();
  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8 = v3;
  v7(ObjectType, v5);
  v13 = v10;
  v14 = v9;

  v11.f64[0] = v14;
  v11.f64[1] = v13;
  _s17MeasureFoundation24ComputedCameraPropertiesV12updateShared_12viewportSizeySo7ARFrameC_s5SIMD2VySfGtFZ_0(with.super.isa, COERCE_DOUBLE(vcvt_f32_f64(v11)));
  if (objc_msgSend((id)objc_opt_self(), sel_jasperAvailable))
  {
    swift_beginAccess();
    if (*(_QWORD *)(v2 + 112))
    {
      swift_retain();
      sub_2215F0F9C(with.super.isa);
      swift_release();
    }
  }
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 137) & 1) != 0 || (swift_beginAccess(), *(_BYTE *)(v2 + 136) == 1))
  {
    if (*(_QWORD *)(v2 + 80))
    {
      swift_retain();
      SegmentationProcessor.didUpdate(frame:)(with);
      swift_release();
    }
  }
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 136) == 1)
  {
    v12 = *(_QWORD *)(v2 + 104);
    if (v12)
    {
      if (!*(_BYTE *)(v12 + 84))
        return;
      if (*(_QWORD *)(v2 + 96))
      {
        swift_retain();
        PatchTracker.didUpdate(frame:)(with);
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_17:
    sub_221653984();
    __break(1u);
  }
}

uint64_t MeasureCore.hitTest(screenPoint:frame:orientation:context:planeTypes:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  void *v8;
  _BYTE v11[128];

  if (*(_QWORD *)(v5 + 104))
  {
    v8 = (void *)result;
    swift_retain();
    sub_221602024(v8, a2, a3, (uint64_t)v11, a5);
    swift_release();
    return sub_2215C6540((uint64_t)v11, a4, &qword_2556DC6B0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MeasureCore.edgeHitTest(screenPoint:frame:orientation:planeTypes:useHyperLocalStrategy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[144];
  _QWORD v26[14];
  int v27;
  uint64_t v28[14];
  int v29;

  v6 = (void *)result;
  if ((a3 & 1) != 0)
  {
    if (*(_QWORD *)(v5 + 104))
    {
      swift_retain();
      sub_221600364(v6, (uint64_t)v28, a5);
      v23 = v28[1];
      v24 = v28[0];
      v21 = v28[3];
      v22 = v28[2];
      v19 = v28[5];
      v20 = v28[4];
      v9 = v28[7];
      v18 = v28[6];
      v10 = v28[8];
      v11 = v28[9];
      v12 = v28[10];
      v13 = v28[11];
      v14 = v28[12];
      v15 = v28[13];
      v16 = v29;
LABEL_6:
      result = swift_release();
      *(_QWORD *)a4 = v24;
      *(_QWORD *)(a4 + 8) = v23;
      *(_QWORD *)(a4 + 16) = v22;
      *(_QWORD *)(a4 + 24) = v21;
      *(_QWORD *)(a4 + 32) = v20;
      *(_QWORD *)(a4 + 40) = v19;
      *(_QWORD *)(a4 + 48) = v18;
      *(_QWORD *)(a4 + 56) = v9;
      *(_QWORD *)(a4 + 64) = v10;
      *(_QWORD *)(a4 + 72) = v11;
      *(_QWORD *)(a4 + 80) = v12;
      *(_QWORD *)(a4 + 88) = v13;
      *(_QWORD *)(a4 + 96) = v14;
      *(_QWORD *)(a4 + 104) = v15;
      *(_DWORD *)(a4 + 112) = v16;
      return result;
    }
    __break(1u);
  }
  else
  {
    sub_221617104((uint64_t)v25);
    result = sub_2215C6540((uint64_t)v25, (uint64_t)v28, &qword_2556DBBD8);
    if (*(_QWORD *)(v5 + 104))
    {
      swift_retain();
      sub_221602024(v6, v28, a2, (uint64_t)v26, a5);
      v23 = v26[1];
      v24 = v26[0];
      v21 = v26[3];
      v22 = v26[2];
      v19 = v26[5];
      v20 = v26[4];
      v9 = v26[7];
      v18 = v26[6];
      v10 = v26[8];
      v11 = v26[9];
      v12 = v26[10];
      v13 = v26[11];
      v14 = v26[12];
      v15 = v26[13];
      v16 = v27;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall MeasureCore.adHitTestPositionOnly(screenPoints:frame:)(Swift::OpaquePointer screenPoints, ARFrame frame)
{
  void *v2;
  Swift::Bool v3;
  Swift::OpaquePointer_optional result;

  v2 = (void *)sub_2216144A0((uint64_t)screenPoints._rawValue, (uint64_t)frame.super.isa, (uint64_t (*)(uint64_t, uint64_t))sub_2215F086C);
  result.value._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t sub_2216144A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;

  swift_beginAccess();
  if (!*(_QWORD *)(v3 + 112))
    return 0;
  swift_retain();
  v7 = a3(a1, a2);
  swift_release();
  return v7;
}

uint64_t MeasureCore.adHitTest(screenPoint:frame:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char v19;
  float32x4_t v20;
  simd_float4x4 *v21;
  simd_float4x4 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  result = swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 112);
  v11 = 0uLL;
  v12 = 0;
  if (!v10)
  {
    v28 = 0;
    v32 = 0uLL;
    v33 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556D8F78);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2216560E0;
  *(double *)(inited + 32) = a3;
  *(double *)(inited + 40) = a4;
  swift_retain();
  v14 = sub_2215F000C(inited, a1);
  swift_setDeallocating();
  result = swift_release();
  if (!v14)
    goto LABEL_8;
  if (!*(_QWORD *)(v14 + 16))
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v15 = *(_QWORD *)(v14 + 64);
  v16 = *(_QWORD *)(v14 + 72);
  v17 = *(double *)(v14 + 80);
  v18 = *(_QWORD *)(v14 + 96);
  v19 = *(_BYTE *)(v14 + 104);
  result = swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
LABEL_8:
    v28 = 0;
    v10 = 0;
    v32 = 0uLL;
    v33 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v11 = 0uLL;
    goto LABEL_9;
  }
  v20.i64[1] = v16;
  v20.i64[0] = v15;
  _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v17, v20);
  sceneKitToARKit(_:)(v22, v21);
  v36 = v24;
  v37 = v23;
  v34 = v26;
  v35 = v25;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD910]), sel_initWithTransform_, *(double *)&v23, *(double *)&v24, *(double *)&v25, *(double *)&v26);
  type metadata accessor for WorldPlane();
  swift_allocObject();
  v10 = sub_22164164C(v27, 6, (float)((float)v18 * -0.5) + 1.0, 1.0);

  v28 = 1;
  swift_retain();
  sub_221641268();
  v12 = v29;
  result = swift_release();
  v31 = v34;
  v30 = v35;
  v33 = v36;
  v32 = v37;
  v11 = xmmword_221657CB0;
LABEL_9:
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v32;
  *(_OWORD *)(a2 + 32) = v33;
  *(_OWORD *)(a2 + 48) = v30;
  *(_OWORD *)(a2 + 64) = v31;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v28;
  *(_QWORD *)(a2 + 104) = v10;
  *(_DWORD *)(a2 + 112) = v12;
  return result;
}

BOOL MeasureCore.isOccluded(_:in:withTolerance:)(void *a1, float32x4_t a2, float a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  id v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _BYTE v22[144];
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v27[60];
  _BYTE v28[128];
  _OWORD v29[6];
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;

  sub_221622ADC(a1, (uint64_t)v22);
  v18 = v24;
  v19 = v23;
  v16 = v26;
  v17 = v25;
  sub_221622ADC(a1, (uint64_t)v27);
  _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(a2, v19, v18, v17, v16, v27[0]);
  sub_2216535E8();
  v6 = v5;
  v8 = v7;
  if (qword_2556D8EB0 != -1)
    swift_once();
  MeasureCore.adHitTest(screenPoint:frame:)(a1, (uint64_t)v28, v6, v8);
  sub_2215C6540((uint64_t)v28, (uint64_t)v29, &qword_2556DC6B0);
  if (!*((_QWORD *)&v30 + 1))
    return 0;
  v36 = v29[4];
  v37 = v29[5];
  v38 = v30;
  v39 = v31;
  v32 = v29[0];
  v33 = v29[1];
  v34 = v29[2];
  v35 = v29[3];
  v9 = WorldPlaneHitTestResult.distanceToCamera(in:)((ARFrame)a1);
  v10 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v10, sel_transform);
  v20 = v11;

  v12 = vsubq_f32(v20, a2);
  v13 = vmulq_f32(v12, v12);
  v14 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  sub_221606E68((uint64_t)v28);
  return (float)(v9 + a3) < v14;
}

Swift::Void __swiftcall MeasureCore.didAdd(anchors:)(Swift::OpaquePointer anchors)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *rawValue;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v3 = sub_221652FD0();
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 56));
  if ((unint64_t)anchors._rawValue >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    v6 = sub_2216539F0();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)(((unint64_t)anchors._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v32 = v1;
      v33 = v6;
      v37 = (unint64_t)anchors._rawValue & 0xC000000000000001;
      v38 = (_QWORD *)(v1 + 64);
      v7 = 4;
      rawValue = anchors._rawValue;
      while (1)
      {
        if (v37)
          v10 = (id)MEMORY[0x22766ED44](v7 - 4, anchors._rawValue);
        else
          v10 = *((id *)anchors._rawValue + v7);
        v11 = v10;
        v12 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        objc_opt_self();
        v13 = swift_dynamicCastObjCClass();
        if (v13)
          break;
LABEL_6:

        ++v7;
        if (v12 == v6)
        {
          swift_bridgeObjectRelease();
          v1 = v32;
          goto LABEL_28;
        }
      }
      v14 = (void *)v13;
      v15 = v11;
      v16 = objc_msgSend(v14, sel_identifier);
      sub_221652FB8();

      anchors._rawValue = v38;
      swift_beginAccess();
      v17 = v15;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = (uint64_t)v5;
      v5 = (char *)isUniquelyReferenced_nonNull_native;
      v39 = *(_QWORD *)anchors._rawValue;
      v1 = v39;
      *(_QWORD *)anchors._rawValue = 0x8000000000000000;
      v20 = v19;
      v22 = sub_2215CA2D8(v19);
      v23 = *(_QWORD *)(v1 + 16);
      v24 = (v21 & 1) == 0;
      v25 = v23 + v24;
      if (__OFADD__(v23, v24))
        goto LABEL_24;
      anchors._rawValue = v21;
      if (*(_QWORD *)(v1 + 24) >= v25)
      {
        if ((v5 & 1) == 0)
          sub_2215D0AE8();
        v5 = (char *)v20;
        v1 = v39;
        if (((uint64_t)anchors._rawValue & 1) == 0)
        {
LABEL_20:
          *(_QWORD *)(v1 + 8 * (v22 >> 6) + 64) |= 1 << v22;
          (*(void (**)(unint64_t, char *, uint64_t))(v35 + 16))(*(_QWORD *)(v1 + 48) + *(_QWORD *)(v35 + 72) * v22, v5, v36);
          *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v22) = v14;
          v28 = *(_QWORD *)(v1 + 16);
          v29 = __OFADD__(v28, 1);
          v30 = v28 + 1;
          if (v29)
            goto LABEL_25;
          *(_QWORD *)(v1 + 16) = v30;
          goto LABEL_5;
        }
      }
      else
      {
        sub_2215CF2DC(v25, (int)v5);
        v5 = (char *)v20;
        v26 = sub_2215CA2D8(v20);
        if (((uint64_t)anchors._rawValue & 1) != (v27 & 1))
        {
          sub_221653B64();
          __break(1u);
          return;
        }
        v22 = v26;
        v1 = v39;
        if (((uint64_t)anchors._rawValue & 1) == 0)
          goto LABEL_20;
      }
      v8 = *(_QWORD *)(v1 + 56);
      v9 = 8 * v22;

      *(_QWORD *)(v8 + v9) = v14;
LABEL_5:
      *v38 = v1;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v36);
      swift_endAccess();

      v6 = v33;
      anchors._rawValue = rawValue;
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
LABEL_28:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 56));
}

Swift::Void __swiftcall MeasureCore.didRemove(anchors:)(Swift::OpaquePointer anchors)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *rawValue;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  char v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unsigned __int8 v36;
  void (*v37)(char *, uint64_t);
  id v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD *);
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[4];
  uint64_t v60;

  v3 = sub_221652FD0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v55 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v50 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v50 - v10;
  v51 = v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 56));
  if ((unint64_t)anchors._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_2216539F0();
  }
  else
  {
    v12 = *(_QWORD *)(((unint64_t)anchors._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v57 = v12;
  v58 = v3;
  v53 = v9;
  if (v12)
  {
    if (v12 < 1)
    {
      __break(1u);
      goto LABEL_38;
    }
    v13 = 0;
    v14 = (uint64_t *)(v51 + 64);
    v56 = (unint64_t)anchors._rawValue & 0xC000000000000001;
    rawValue = anchors._rawValue;
    do
    {
      if (v56)
        v18 = (id)MEMORY[0x22766ED44](v13, anchors._rawValue);
      else
        v18 = *((id *)anchors._rawValue + v13 + 4);
      v19 = v18;
      v20 = objc_msgSend(v18, sel_identifier);
      sub_221652FB8();

      swift_beginAccess();
      swift_bridgeObjectRetain();
      v21 = sub_2215CA2D8((uint64_t)v11);
      v23 = v22;
      swift_bridgeObjectRelease();
      v17 = 0;
      if ((v23 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v25 = *v14;
        v60 = *v14;
        *v14 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_2215D0AE8();
          v25 = v60;
        }
        (*(void (**)(unint64_t, uint64_t))(v4 + 8))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v4 + 72) * v21, v58);
        v16 = v60;
        v17 = *(void **)(*(_QWORD *)(v60 + 56) + 8 * v21);
        sub_2215D0EE4(v21, v60);
        *v14 = v16;
        swift_bridgeObjectRelease();
      }
      ++v13;
      swift_endAccess();

      v3 = v58;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v58);

      v12 = v57;
      anchors._rawValue = rawValue;
    }
    while (v57 != v13);
    swift_bridgeObjectRelease();
    v9 = v53;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v26 = v51;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v51 + 56));
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 32));
  if (!v12)
  {
LABEL_35:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v51 + 32));
    return;
  }
  if (v12 >= 1)
  {
    v27 = (uint64_t *)(v51 + 40);
    v56 = v51 + 48;
    v28 = (unint64_t)anchors._rawValue & 0xC000000000000001;
    swift_bridgeObjectRetain();
    v29 = 0;
    v54 = v4;
    v52 = (unint64_t)anchors._rawValue & 0xC000000000000001;
    do
    {
      if (v28)
        v30 = (id)MEMORY[0x22766ED44](v29, anchors._rawValue);
      else
        v30 = *((id *)anchors._rawValue + v29 + 4);
      v31 = v30;
      v32 = objc_msgSend(v30, sel_identifier);
      sub_221652FB8();

      swift_beginAccess();
      v33 = *v27;
      if (*(_QWORD *)(*v27 + 16) && (v34 = sub_2215CA2D8((uint64_t)v9), (v35 & 1) != 0))
      {
        v36 = *(_BYTE *)(*(_QWORD *)(v33 + 56) + 8 * v34);
        swift_endAccess();
        v37 = *(void (**)(char *, uint64_t))(v4 + 8);
        v37(v9, v3);
        v38 = objc_msgSend(v31, sel_identifier);
        v39 = (uint64_t)v55;
        sub_221652FB8();

        swift_beginAccess();
        swift_bridgeObjectRetain();
        v40 = sub_2215CA2D8(v39);
        v41 = v3;
        v43 = v42;
        swift_bridgeObjectRelease();
        if ((v43 & 1) != 0)
        {
          v44 = swift_isUniquelyReferenced_nonNull_native();
          v45 = *v27;
          v60 = *v27;
          *v27 = 0x8000000000000000;
          if (!v44)
          {
            sub_2215D06D0();
            v45 = v60;
          }
          v41 = v58;
          v37((char *)(*(_QWORD *)(v45 + 48) + *(_QWORD *)(v54 + 72) * v40), v58);
          v46 = v60;
          sub_2215D0EE4(v40, v60);
          *v27 = v46;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        v37(v55, v41);
        swift_beginAccess();
        v47 = sub_22161236C(v59, v36);
        v3 = v41;
        if (*v48)
        {
          v49 = (void *)sub_221616950(v31);
          ((void (*)(_QWORD *, _QWORD))v47)(v59, 0);
          swift_endAccess();

        }
        else
        {
          ((void (*)(_QWORD *, _QWORD))v47)(v59, 0);
          swift_endAccess();

        }
        v9 = v53;
        v4 = v54;
        v12 = v57;
        v28 = v52;
      }
      else
      {
        swift_endAccess();

        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
      ++v29;
    }
    while (v12 != v29);
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
LABEL_38:
  __break(1u);
}

Swift::Void __swiftcall MeasureCore.didUpdate(anchors:)(Swift::OpaquePointer anchors)
{
  os_unfair_lock_t *v1;
  os_unfair_lock_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  id v40;
  os_unfair_lock_t *v41;
  os_unfair_lock_t v42;
  unint64_t v43;
  char v44;
  int v45;
  os_unfair_lock_t *v46;
  os_unfair_lock_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unsigned __int8 v64;
  char *v65;
  id v66;
  char *v67;
  id v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  void (*v73)(_QWORD *);
  _QWORD *v74;
  void *v75;
  void (*v76)(_QWORD *);
  _QWORD *v77;
  char *v78;
  os_unfair_lock_t *v79;
  unint64_t v80;
  id v81;
  char *v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  os_unfair_lock_t *v86;
  uint64_t v87;
  int64_t v88;
  _QWORD *v89;
  os_unfair_lock_t *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  void *rawValue;
  void (*v97)(unint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[7];
  id v102[6];

  v2 = v1;
  v4 = sub_221652FD0();
  v99 = *(_QWORD *)(v4 - 8);
  v100 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v93 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v92 = (char *)&v79 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (unint64_t)&v79 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v98 = (char *)&v79 - v12;
  os_unfair_lock_lock(v1[7]);
  if ((unint64_t)anchors._rawValue >> 62)
    goto LABEL_91;
  v13 = *(_QWORD *)(((unint64_t)anchors._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v79 = v2;
    v95 = v11;
    rawValue = anchors._rawValue;
    v94 = v13;
    if (!v13)
      break;
    v2 += 8;
    v97 = (void (*)(unint64_t, uint64_t))((unint64_t)anchors._rawValue & 0xC000000000000001);
    v14 = 4;
    while (1)
    {
      v16 = v97 ? (id)MEMORY[0x22766ED44](v14 - 4, anchors._rawValue) : *((id *)anchors._rawValue + v14);
      v11 = (unint64_t)v16;
      v17 = v14 - 3;
      if (__OFADD__(v14 - 4, 1))
        break;
      objc_opt_self();
      v18 = swift_dynamicCastObjCClass();
      if (!v18)
        goto LABEL_7;
      v19 = (void *)v18;
      v20 = (id)v11;
      v21 = objc_msgSend(v19, sel_identifier);
      v22 = (uint64_t)v98;
      sub_221652FB8();

      swift_beginAccess();
      v23 = v20;
      anchors._rawValue = (void *)swift_isUniquelyReferenced_nonNull_native();
      v101[0] = *v2;
      v24 = v101[0];
      *v2 = (os_unfair_lock_t)0x8000000000000000;
      v26 = sub_2215CA2D8(v22);
      v27 = *(_QWORD *)(v24 + 16);
      v28 = (v25 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
        goto LABEL_87;
      v30 = v25;
      if (*(_QWORD *)(v24 + 24) >= v29)
      {
        if (((uint64_t)anchors._rawValue & 1) != 0)
        {
          v33 = (os_unfair_lock_s *)v101[0];
          if ((v25 & 1) == 0)
            goto LABEL_20;
        }
        else
        {
          sub_2215D0AE8();
          v33 = (os_unfair_lock_s *)v101[0];
          if ((v30 & 1) == 0)
            goto LABEL_20;
        }
      }
      else
      {
        sub_2215CF2DC(v29, (int)anchors._rawValue);
        v31 = sub_2215CA2D8((uint64_t)v98);
        if ((v30 & 1) != (v32 & 1))
        {
          sub_221653B64();
          __break(1u);
          return;
        }
        v26 = v31;
        v33 = (os_unfair_lock_s *)v101[0];
        if ((v30 & 1) == 0)
        {
LABEL_20:
          *(_QWORD *)&v33[2 * (v26 >> 6) + 16]._os_unfair_lock_opaque |= 1 << v26;
          (*(void (**)(unint64_t, char *, uint64_t))(v99 + 16))(*(_QWORD *)&v33[12]._os_unfair_lock_opaque + *(_QWORD *)(v99 + 72) * v26, v98, v100);
          *(_QWORD *)(*(_QWORD *)&v33[14]._os_unfair_lock_opaque + 8 * v26) = v19;
          v34 = *(_QWORD *)&v33[4]._os_unfair_lock_opaque;
          v35 = __OFADD__(v34, 1);
          v36 = v34 + 1;
          if (v35)
            goto LABEL_89;
          *(_QWORD *)&v33[4]._os_unfair_lock_opaque = v36;
          goto LABEL_6;
        }
      }
      v15 = *(_QWORD *)&v33[14]._os_unfair_lock_opaque;

      *(_QWORD *)(v15 + 8 * v26) = v19;
LABEL_6:
      *v2 = v33;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v100);
      swift_endAccess();

LABEL_7:
      ++v14;
      v13 = v94;
      v11 = v95;
      anchors._rawValue = rawValue;
      if (v17 == v94)
      {
        swift_bridgeObjectRelease();
        v2 = v79;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    swift_bridgeObjectRetain();
    v13 = sub_2216539F0();
  }
  swift_bridgeObjectRelease();
LABEL_26:
  os_unfair_lock_unlock(v2[7]);
  os_unfair_lock_lock(v2[4]);
  if (!v13)
    goto LABEL_84;
  v90 = v2 + 5;
  v86 = v2 + 6;
  v91 = (unint64_t)anchors._rawValue & 0xC000000000000001;
  v83 = (unint64_t)anchors._rawValue & 0xFFFFFFFFFFFFFF8;
  v82 = (char *)anchors._rawValue + 32;
  swift_bridgeObjectRetain();
  v37 = 0;
  v85 = MEMORY[0x24BEE4AD0] + 8;
  while (2)
  {
    if (v91)
    {
      v38 = (char *)MEMORY[0x22766ED44](v37, anchors._rawValue);
    }
    else
    {
      if (v37 >= *(_QWORD *)(v83 + 16))
        goto LABEL_88;
      v38 = (char *)*(id *)&v82[8 * v37];
    }
    v39 = v38;
    v35 = __OFADD__(v37++, 1);
    if (v35)
      goto LABEL_86;
    v40 = objc_msgSend(v38, sel_identifier);
    sub_221652FB8();

    v41 = v90;
    swift_beginAccess();
    v42 = *v41;
    if (!*(_QWORD *)&v42[4]._os_unfair_lock_opaque || (v43 = sub_2215CA2D8(v11), (v44 & 1) == 0))
    {
      swift_endAccess();

      (*(void (**)(unint64_t, uint64_t))(v99 + 8))(v11, v100);
      goto LABEL_29;
    }
    v45 = *(unsigned __int8 *)(*(_QWORD *)&v42[14]._os_unfair_lock_opaque + 8 * v43);
    swift_endAccess();
    v97 = *(void (**)(unint64_t, uint64_t))(v99 + 8);
    v97(v11, v100);
    v46 = v86;
    swift_beginAccess();
    v47 = *v46;
    if (!*(_QWORD *)&v47[4]._os_unfair_lock_opaque || (v48 = sub_2215CA344(v45), (v49 & 1) == 0))
    {
      swift_endAccess();

      goto LABEL_29;
    }
    v80 = v37;
    v84 = v45;
    v50 = *(_QWORD *)(*(_QWORD *)&v47[14]._os_unfair_lock_opaque + 8 * v48);
    swift_endAccess();
    v98 = v39;
    if ((v50 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      sub_2216537D4();
      sub_2215FF3FC();
      sub_221617128();
      sub_221653474();
      v50 = (unint64_t)v102[1];
      v89 = v102[2];
      v51 = v102[3];
      v2 = (os_unfair_lock_t *)v102[4];
      v11 = (unint64_t)v102[5];
    }
    else
    {
      v52 = -1 << *(_BYTE *)(v50 + 32);
      v53 = *(_QWORD *)(v50 + 56);
      v89 = (_QWORD *)(v50 + 56);
      v54 = ~v52;
      v55 = -v52;
      if (v55 < 64)
        v56 = ~(-1 << v55);
      else
        v56 = -1;
      v11 = v56 & v53;
      swift_bridgeObjectRetain();
      v51 = (id)v54;
      v2 = 0;
    }
    v87 = v50 & 0x7FFFFFFFFFFFFFFFLL;
    v81 = v51;
    v88 = ((unint64_t)v51 + 64) >> 6;
    if ((v50 & 0x8000000000000000) == 0)
      goto LABEL_50;
    while (2)
    {
      v57 = sub_221653834();
      if (!v57)
        goto LABEL_70;
      v101[4] = v57;
      sub_2215FF3FC();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v58 = (id)v101[0];
      swift_unknownObjectRelease();
      anchors._rawValue = v2;
      v59 = v11;
      if (!v58)
      {
LABEL_70:
        v62 = v98;
LABEL_71:
        v64 = v84;
        goto LABEL_72;
      }
LABEL_67:
      v66 = objc_msgSend(v58, sel_identifier, v79);
      v67 = v92;
      sub_221652FB8();

      v68 = objc_msgSend(v98, sel_identifier);
      v69 = v93;
      sub_221652FB8();

      LOBYTE(v68) = sub_221652FAC();
      v70 = v69;
      v71 = v100;
      v72 = (void (*)(char *, uint64_t))v97;
      v97((unint64_t)v70, v100);
      v72(v67, v71);
      if ((v68 & 1) != 0)
      {
        swift_beginAccess();
        v64 = v84;
        v73 = sub_22161236C(v101, v84);
        if (*v74)
        {
          v75 = (void *)sub_221616950(v58);
          ((void (*)(_QWORD *, _QWORD))v73)(v101, 0);
          swift_endAccess();
          sub_2215D2090();

        }
        else
        {
          ((void (*)(_QWORD *, _QWORD))v73)(v101, 0);
          swift_endAccess();

          sub_2215D2090();
        }
        v62 = v98;
        goto LABEL_77;
      }

      v2 = (os_unfair_lock_t *)anchors._rawValue;
      v11 = v59;
      if ((v50 & 0x8000000000000000) != 0)
        continue;
      break;
    }
LABEL_50:
    if (v11)
    {
      v59 = (v11 - 1) & v11;
      v60 = __clz(__rbit64(v11)) | ((_QWORD)v2 << 6);
      anchors._rawValue = v2;
      goto LABEL_66;
    }
    v61 = (uint64_t)v2 + 1;
    v62 = v98;
    if (__OFADD__(v2, 1))
      goto LABEL_90;
    if (v61 >= v88)
      goto LABEL_71;
    v63 = v89[v61];
    anchors._rawValue = (char *)v2 + 1;
    v64 = v84;
    if (v63)
      goto LABEL_65;
    anchors._rawValue = (char *)v2 + 2;
    if ((uint64_t)v2 + 2 >= v88)
      goto LABEL_72;
    v63 = v89[(uint64_t)anchors._rawValue];
    if (v63)
      goto LABEL_65;
    anchors._rawValue = (char *)v2 + 3;
    if ((uint64_t)v2 + 3 >= v88)
      goto LABEL_72;
    v63 = v89[(uint64_t)anchors._rawValue];
    if (v63)
      goto LABEL_65;
    anchors._rawValue = (char *)v2 + 4;
    if ((uint64_t)v2 + 4 >= v88)
      goto LABEL_72;
    v63 = v89[(uint64_t)anchors._rawValue];
    if (v63)
    {
LABEL_65:
      v59 = (v63 - 1) & v63;
      v60 = __clz(__rbit64(v63)) + ((uint64_t)anchors._rawValue << 6);
LABEL_66:
      v58 = *(id *)(*(_QWORD *)(v50 + 48) + 8 * v60);
      if (!v58)
        goto LABEL_70;
      goto LABEL_67;
    }
    v65 = (char *)v2 + 5;
    while ((char *)v88 != v65)
    {
      v63 = v89[(_QWORD)v65++];
      if (v63)
      {
        anchors._rawValue = v65 - 1;
        goto LABEL_65;
      }
    }
LABEL_72:
    sub_2215D2090();
LABEL_77:
    v37 = v80;
    swift_beginAccess();
    v76 = sub_22161236C(v101, v64);
    v11 = v95;
    anchors._rawValue = rawValue;
    v13 = v94;
    if (*v77)
    {
      v78 = v62;
      sub_2215FDE40(v102, v78);
      ((void (*)(_QWORD *, _QWORD))v76)(v101, 0);
      swift_endAccess();

    }
    else
    {
      ((void (*)(_QWORD *, _QWORD))v76)(v101, 0);
      swift_endAccess();

    }
    v2 = v79;
LABEL_29:
    if (v37 != v13)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
LABEL_84:
  os_unfair_lock_unlock(v2[4]);
}

uint64_t sub_221615B38(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = sub_221652FD0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 32));
  v8 = objc_msgSend(a1, sel_identifier);
  sub_221652FB8();

  swift_beginAccess();
  v9 = *(_QWORD *)(v2 + 40);
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_2215CA2D8((uint64_t)v7), (v11 & 1) != 0))
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 56) + 8 * v10);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 32));
    if ((_DWORD)v12 != 33)
      return v12;
  }
  else
  {
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 32));
  }
  return 0;
}

float sub_221615C68(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  float v12;
  uint64_t v14;

  v2 = v1;
  v4 = sub_221652FD0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 32));
  v8 = objc_msgSend(a1, sel_identifier);
  sub_221652FB8();

  swift_beginAccess();
  v9 = *(_QWORD *)(v2 + 40);
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_2215CA2D8((uint64_t)v7), (v11 & 1) != 0))
  {
    v12 = *(float *)(*(_QWORD *)(v9 + 56) + 8 * v10 + 4);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    v12 = 0.0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 32));
  return v12;
}

uint64_t MeasureCore.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t MeasureCore.__deallocating_deinit()
{
  MeasureCore.deinit();
  return swift_deallocClassInstance();
}

void (*sub_221615DF8(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x68uLL);
  *a1 = v4;
  v5 = sub_221652FD0();
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v4[10] = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 16))(v7, a2, v5);
  v4[11] = sub_22161628C(v4);
  v4[12] = sub_221615FDC(v4 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return sub_221615EB8;
}

void sub_221615EB8(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_221615F24(_QWORD *a1, unsigned __int8 a2))(uint64_t a1)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_2216162B8(v4);
  v4[9] = sub_221616134((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_221615FA0;
}

void sub_221615FA0(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*sub_221615FDC(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_2215CA2D8(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_2216160F8;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_2215CFD64();
      goto LABEL_7;
    }
    sub_2215CDC4C(v14, a3 & 1);
    v18 = sub_2215CA2D8(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  sub_221652FD0();
  result = (void (*)(uint64_t **))sub_221653B64();
  __break(1u);
  return result;
}

void sub_2216160F8(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_22161D1FC(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

unint64_t (*sub_221616134(uint64_t a1, unsigned __int8 a2, char a3))(unint64_t result)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t (*result)(unint64_t);

  v4 = v3;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 24) = a2;
  v8 = *v3;
  v10 = sub_2215CA344(a2);
  *(_BYTE *)(a1 + 25) = v9 & 1;
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(a1 + 16) = v10;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v16 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(_QWORD *)a1 = v16;
        return sub_221616244;
      }
LABEL_11:
      v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2215D0530();
      goto LABEL_7;
    }
    sub_2215CE96C(v13, a3 & 1);
    v17 = sub_2215CA344(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      v10 = v17;
      *(_QWORD *)(a1 + 16) = v17;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (unint64_t (*)(unint64_t))sub_221653B64();
  __break(1u);
  return result;
}

unint64_t sub_221616244(unint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v2 = **(_QWORD ***)(result + 8);
    if ((*(_BYTE *)(result + 25) & 1) != 0)
      *(_QWORD *)(v2[7] + 8 * *(_QWORD *)(result + 16)) = v1;
    else
      return sub_22161D02C(*(_QWORD *)(result + 16), *(_BYTE *)(result + 24), v1, v2);
  }
  else if ((*(_BYTE *)(result + 25) & 1) != 0)
  {
    return sub_2215D14F0(*(_QWORD *)(result + 16), **(_QWORD **)(result + 8));
  }
  return result;
}

uint64_t (*sub_22161628C(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_2216162AC;
}

uint64_t sub_2216162AC(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t (*sub_2216162B8(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_2216171F8;
}

uint64_t sub_2216162D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  swift_bridgeObjectRelease();
  v4 = sub_221653810();
  v5 = swift_unknownObjectRetain();
  v6 = sub_2215FD4A4(v5, v4);
  v19 = v6;
  sub_221653B88();
  v18 = *(_QWORD *)(a2 + 24);
  sub_221653B94();
  v7 = sub_221653BAC();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v17 = v2;
    v10 = ~v8;
    swift_retain();
    swift_beginAccess();
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        if (swift_weakLoadStrong())
        {
          swift_retain();
          v11 = sub_221652FAC();
          swift_release();
          swift_release();
          swift_release();
          if ((v11 & 1) != 0)
            goto LABEL_10;
          goto LABEL_4;
        }
        swift_retain();
        swift_release();
      }
      else
      {
        swift_retain();
      }
      v13 = *(_QWORD *)(v12 + 24);
      swift_release();
      if (v13 == v18)
      {
LABEL_10:
        swift_release();
        v14 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
        sub_2215FD15C(v9);
        if (!swift_weakLoadStrong())
          goto LABEL_15;
        swift_beginAccess();
        if (!swift_weakLoadStrong())
          goto LABEL_14;
        v15 = sub_221652FAC();
        swift_release();
        swift_release();
        if ((v15 & 1) == 0)
        {
          do
          {
            __break(1u);
LABEL_14:
            swift_release();
LABEL_15:
            ;
          }
          while (v18 != *(_QWORD *)(v14 + 24));
        }
        *v17 = v19;
        return v14;
      }
LABEL_4:
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_18;
    }
  }
  __break(1u);
LABEL_18:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_221616560()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = sub_221653810();
  v3 = swift_unknownObjectRetain();
  v4 = sub_2215FD69C(v3, v2);
  v15 = v4;
  swift_retain();
  v5 = sub_2216536E4();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    sub_2215FF3FC();
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
    v9 = sub_2216536F0();

    if ((v9 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v13 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v7);
      sub_2215FD304(v7);
      if ((sub_2216536F0() & 1) != 0)
      {
        *v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      v10 = ~v6;
      while (1)
      {
        v7 = (v7 + 1) & v10;
        if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          break;
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
        v12 = sub_2216536F0();

        if ((v12 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_2216166E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = *v1;
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v5 = sub_221653840();
    swift_release();
    if ((v5 & 1) != 0)
    {
      v6 = sub_2216162D8(v4, a1);
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_221653B88();
  v17 = *(_QWORD *)(a1 + 24);
  sub_221653B94();
  v7 = sub_221653BAC();
  v8 = -1 << *(_BYTE *)(v3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    return 0;
  v10 = ~v8;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9);
    swift_beginAccess();
    if (!swift_weakLoadStrong())
      break;
    if (!swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_retain();
    v11 = sub_221652FAC();
    swift_release();
    swift_release();
    swift_release();
    if ((v11 & 1) != 0)
      goto LABEL_16;
LABEL_10:
    v9 = (v9 + 1) & v10;
    if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_19;
  }
  swift_retain();
LABEL_15:
  v13 = *(_QWORD *)(v12 + 24);
  swift_release();
  if (v13 != v17)
    goto LABEL_10;
LABEL_16:
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *v1;
  v18 = *v1;
  *v1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_2215FB698();
    v15 = v18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v9);
  sub_2215FD15C(v9);
  *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_221616950(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = a1;
    v5 = sub_221653840();

    if ((v5 & 1) != 0)
    {
      v6 = sub_221616560();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_2216536E4();
  v8 = -1 << *(_BYTE *)(v3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_12;
  sub_2215FF3FC();
  v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
  v11 = sub_2216536F0();

  if ((v11 & 1) == 0)
  {
    v12 = ~v8;
    do
    {
      v9 = (v9 + 1) & v12;
      if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_12;
      v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
      v14 = sub_2216536F0();

    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v1;
  v18 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_2215FB6A4();
    v16 = v18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v9);
  sub_2215FD304(v9);
  *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

int64_t sub_221616B14(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_221616BF8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_221616C80(unsigned __int8 a1)
{
  unint64_t v1;

  return sub_2216131E0(a1, v1);
}

uint64_t sub_221616C88()
{
  uint64_t v0;

  return sub_221613474(v0);
}

uint64_t sub_221616C90(uint64_t a1, int8x16_t a2)
{
  uint64_t v2;
  float32x2_t v3;
  uint64_t i;
  float32x2_t v5;
  float32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v3.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v3.i32[1] = a2.i32[0];
  for (i = a1 + 72; ; i += 128)
  {
    if (*(_QWORD *)(i + 64))
    {
      v5.i32[0] = *(_QWORD *)(i + 32);
      v6 = vsubq_f32(*(float32x4_t *)(i + 24), (float32x4_t)a2);
      v5.i32[1] = *(_QWORD *)(i + 24);
      v7 = vsub_f32(v5, v3);
      v8 = vmul_f32(v7, v7);
      if ((float)(v8.f32[0] + (float)(v8.f32[1] + COERCE_FLOAT(vmulq_f32(v6, v6).i32[1]))) <= 0.0064)
        break;
    }
    if (!--v2)
      return 0;
  }
  return *(_QWORD *)(i - 8);
}

uint64_t sub_221616D40@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, uint64_t a7@<D0>, uint64_t a8@<D1>)
{
  uint64_t v8;
  void *v13;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float v25;
  id v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  char v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  simd_float4x4 *v36;
  simd_float4x4 *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  id v42;
  int v43;
  __int128 v44;
  __int128 v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  __int128 v49;
  int8x16_t v50;
  __int128 v51;
  uint64_t v52[22];
  _OWORD v53[10];
  _OWORD v54[8];
  _OWORD v55[2];
  char v56;
  float v57;
  _BYTE v58[128];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int v68;

  if (*(_QWORD *)(v8 + 96))
  {
    v13 = (void *)result;
    swift_retain();
    PatchTracker.hitTest(frame:screenPoint:context:)(v13, a5, (uint64_t)v52, a7, a8);
    swift_release();
    sub_2215C6540((uint64_t)v52, (uint64_t)v55, &qword_2556DB668);
    result = sub_2215EC220((uint64_t)v55);
    if ((_DWORD)result == 1)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0uLL;
      v20 = 0;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
    }
    else
    {
      v50 = (int8x16_t)v55[0];
      v25 = v57;
      if ((v56 & 1) != 0)
      {
        v26 = objc_msgSend(v13, sel_camera);
        objc_msgSend(v26, sel_transform);
        v46 = v27;

        v28 = v46;
        v28.i32[3] = 0;
      }
      else
      {
        v28 = (int8x16_t)v55[1];
      }
      v47 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC6D0);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_221656B50;
      sub_2215C6540(a2, v29 + 32, &qword_2556DC6B0);
      sub_2215C6540(a4, v29 + 160, &qword_2556DC6B0);
      sub_2215C6540(a3, v29 + 288, &qword_2556DC6B0);
      sub_2215C6540(a5, (uint64_t)v53, &qword_2556DBBD8);
      if (sub_2215FF094((uint64_t)v53) == 1)
      {
        *(_DWORD *)(v29 + 528) = 0;
        *(_OWORD *)(v29 + 496) = 0u;
        *(_OWORD *)(v29 + 512) = 0u;
        *(_OWORD *)(v29 + 464) = 0u;
        *(_OWORD *)(v29 + 480) = 0u;
        *(_OWORD *)(v29 + 432) = 0u;
        *(_OWORD *)(v29 + 448) = 0u;
        *(_OWORD *)(v29 + 416) = 0u;
      }
      else
      {
        v54[5] = v53[6];
        v54[6] = v53[7];
        v54[7] = v53[8];
        v54[1] = v53[2];
        v54[2] = v53[3];
        v54[3] = v53[4];
        v54[4] = v53[5];
        v53[9] = v53[0];
        v54[0] = v53[1];
        sub_2215C6540((uint64_t)v54, (uint64_t)v58, &qword_2556DC6B0);
        sub_2215C6540((uint64_t)v58, v29 + 416, &qword_2556DC6B0);
        sub_221606E90((uint64_t)v58);
      }
      v30 = sub_221616C90(v29, v50);
      v31.i32[0] = 0;
      v33.i32[0] = v32 & 1;
      v34 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v33, v31), 0);
      v33.i64[0] = v30;
      v33.i64[1] = v35;
      v48 = (float32x4_t)vbslq_s8(v34, v33, v47);
      swift_setDeallocating();
      sub_221606E90(a2);
      sub_221606E90(a4);
      sub_221606E90(a3);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DC6B0);
      swift_arrayDestroy();
      swift_deallocClassInstance();
      _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(*(double *)v50.i64, v48);
      sceneKitToARKit(_:)(v37, v36);
      v49 = v39;
      v51 = v38;
      v44 = v41;
      v45 = v40;
      v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDFD910]), sel_initWithTransform_, *(double *)&v38, *(double *)&v39, *(double *)&v40, *(double *)&v41);
      type metadata accessor for WorldPlane();
      swift_allocObject();
      v18 = sub_22164164C(v42, 5, 1.0 - v25, 1.0);

      v59 = xmmword_221657CB0;
      v60 = v51;
      v61 = v49;
      v62 = v45;
      v63 = v44;
      v64 = 0;
      v65 = 0;
      v17 = 1;
      v66 = 1;
      v67 = v18;
      v68 = 0;
      swift_retain();
      sub_221641268();
      v20 = v43;
      swift_release();
      result = (uint64_t)sub_221617190(v52);
      v19 = xmmword_221657CB0;
      v24 = v44;
      v23 = v45;
      v22 = v49;
      v21 = v51;
    }
    *(_OWORD *)a6 = v19;
    *(_OWORD *)(a6 + 16) = v21;
    *(_OWORD *)(a6 + 32) = v22;
    *(_OWORD *)(a6 + 48) = v23;
    *(_OWORD *)(a6 + 64) = v24;
    *(_QWORD *)(a6 + 80) = 0;
    *(_QWORD *)(a6 + 88) = 0;
    *(_QWORD *)(a6 + 96) = v17;
    *(_QWORD *)(a6 + 104) = v18;
    *(_DWORD *)(a6 + 112) = v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_221617104(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

unint64_t sub_221617128()
{
  unint64_t result;
  unint64_t v1;

  result = qword_2556DCE18;
  if (!qword_2556DCE18)
  {
    v1 = sub_2215FF3FC();
    result = MEMORY[0x22766FA4C](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_2556DCE18);
  }
  return result;
}

uint64_t type metadata accessor for MeasureCore()
{
  return objc_opt_self();
}

uint64_t *sub_221617190(uint64_t *a1)
{
  sub_2215EC2FC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return a1;
}

int64_t MTLTexture.sampleColor(screenPoint:)(double a1, double a2)
{
  void *v2;
  __IOSurface *v5;
  uint64_t v6;
  __IOSurface *v7;
  int64_t Width;
  int64_t result;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  unsigned int v16;
  int32x4_t v17;
  uint32x4_t v18;
  int8x16_t v19;
  uint32x4_t v20;
  uint64_t v21;

  v5 = (__IOSurface *)objc_msgSend(v2, sel_iosurface);
  v6 = 0;
  if (!v5)
    return v6;
  v7 = v5;
  Width = IOSurfaceGetWidth(v5);
  result = IOSurfaceGetHeight(v7);
  v10 = round(a2);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = (uint64_t)v10 * Width;
  if ((unsigned __int128)((uint64_t)v10 * (__int128)Width) >> 64 != v11 >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v12 = round(a1);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v13 = v11 + (uint64_t)v12;
  if (__OFADD__(v11, (uint64_t)v12))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((unsigned __int128)(Width * (__int128)result) >> 64 == (Width * result) >> 63)
  {
    if (v13 < Width * result)
    {
      v14 = objc_msgSend(v2, sel_pixelFormat);
      if (v14 == (id)55)
      {
        LODWORD(v15) = *((_DWORD *)IOSurfaceGetBaseAddress(v7) + v13);
        goto LABEL_19;
      }
      if (v14 == (id)80)
      {
        v16 = *((_DWORD *)IOSurfaceGetBaseAddress(v7) + v13);

        *(uint32x2_t *)v17.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v16), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
        v17.i32[2] = v16;
        v18 = (uint32x4_t)vdupq_laneq_s32(v17, 2);
        v19.i64[0] = 0xFF000000FFLL;
        v19.i64[1] = 0xFF000000FFLL;
        v20 = (uint32x4_t)vandq_s8((int8x16_t)v17, v19);
        v20.i32[3] = vshrq_n_u32(v18, 0x18uLL).i32[3];
        return vdivq_f32(vcvtq_f32_u32(v20), (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
      }
      if (v14 == (id)125)
      {
        v15 = *((_OWORD *)IOSurfaceGetBaseAddress(v7) + v13);
LABEL_19:
        v21 = v15;

        return v21;
      }
    }

    return 0;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall MTLTexture.sampleColors(screenPoints:)(Swift::OpaquePointer screenPoints)
{
  void *v1;
  void *v2;
  __IOSurface *v4;
  Swift::Bool v5;
  __IOSurface *v6;
  int64_t Width;
  int64_t Height;
  int64_t v9;
  float32x4_t *BaseAddress;
  float32x4_t *v11;
  int64_t v12;
  double *v13;
  int32x4_t v14;
  uint32x4_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  id v26;
  unsigned __int32 v27;
  unint64_t v28;
  float32x4_t v29;
  unsigned __int32 v30;
  float32x4_t v31;
  Swift::OpaquePointer_optional result;

  v2 = v1;
  v4 = (__IOSurface *)objc_msgSend(v1, sel_iosurface);
  if (!v4)
  {
    v11 = 0;
LABEL_29:
    BaseAddress = v11;
    goto LABEL_39;
  }
  v6 = v4;
  Width = IOSurfaceGetWidth(v4);
  Height = IOSurfaceGetHeight(v6);
  v9 = *((_QWORD *)screenPoints._rawValue + 2);
  BaseAddress = (float32x4_t *)sub_2215D7854(0, v9, 0, MEMORY[0x24BEE4AF8]);
  v11 = BaseAddress;
  if (!v9)
  {

    goto LABEL_29;
  }
  v12 = Width * Height;
  if ((unsigned __int128)(Width * (__int128)Height) >> 64 == (Width * Height) >> 63)
  {
    BaseAddress = (float32x4_t *)swift_bridgeObjectRetain();
    v13 = (double *)((char *)screenPoints._rawValue + 40);
    v31 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    while (1)
    {
      v22 = round(*v13);
      if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
        break;
      if (v22 <= -9.22337204e18)
        goto LABEL_31;
      if (v22 >= 9.22337204e18)
        goto LABEL_32;
      v23 = (uint64_t)v22 * Width;
      if ((unsigned __int128)((uint64_t)v22 * (__int128)Width) >> 64 != v23 >> 63)
        goto LABEL_33;
      v24 = round(*(v13 - 1));
      if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0)
        goto LABEL_34;
      if (v24 <= -9.22337204e18)
        goto LABEL_35;
      if (v24 >= 9.22337204e18)
        goto LABEL_36;
      v25 = v23 + (uint64_t)v24;
      if (__OFADD__(v23, (uint64_t)v24))
        goto LABEL_37;
      if (v25 >= v12)
      {
LABEL_27:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v11 = 0;
        goto LABEL_29;
      }
      v26 = objc_msgSend(v2, sel_pixelFormat);
      if (v26 == (id)55)
      {
        BaseAddress = (float32x4_t *)IOSurfaceGetBaseAddress(v6);
        v27 = BaseAddress->u32[v25];
        v20 = v11[1].u64[0];
        v28 = v11[1].u64[1];
        v21 = v20 + 1;
        if (v20 >= v28 >> 1)
        {
          v30 = v27;
          BaseAddress = (float32x4_t *)sub_2215D7854((char *)(v28 > 1), v20 + 1, 1, (char *)v11);
          v27 = v30;
          v11 = BaseAddress;
        }
        v18 = (float32x4_t)v27;
      }
      else
      {
        if (v26 == (id)80)
        {
          BaseAddress = (float32x4_t *)IOSurfaceGetBaseAddress(v6);
          *(uint32x2_t *)v14.i8 = vshl_u32((uint32x2_t)vdup_n_s32(BaseAddress->u32[v25]), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
          v14.i32[2] = BaseAddress->i32[v25];
          v15 = (uint32x4_t)vdupq_laneq_s32(v14, 2);
          v16.i64[0] = 0xFF000000FFLL;
          v16.i64[1] = 0xFF000000FFLL;
          v17 = (uint32x4_t)vandq_s8((int8x16_t)v14, v16);
          v17.i32[3] = vshrq_n_u32(v15, 0x18uLL).i32[3];
          v18 = vdivq_f32(vcvtq_f32_u32(v17), v31);
        }
        else
        {
          if (v26 != (id)125)
            goto LABEL_27;
          BaseAddress = (float32x4_t *)IOSurfaceGetBaseAddress(v6);
          v18 = BaseAddress[v25];
        }
        v20 = v11[1].u64[0];
        v19 = v11[1].u64[1];
        v21 = v20 + 1;
        if (v20 >= v19 >> 1)
        {
          v29 = v18;
          BaseAddress = (float32x4_t *)sub_2215D7854((char *)(v19 > 1), v20 + 1, 1, (char *)v11);
          v18 = v29;
          v11 = BaseAddress;
        }
      }
      v11[1].i64[0] = v21;
      v11[v20 + 2] = v18;
      v13 += 2;
      if (!--v9)
      {

        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  __break(1u);
LABEL_39:
  result.value._rawValue = BaseAddress;
  result.is_nil = v5;
  return result;
}

uint64_t MTLTexture.makeSamplePoints(numberOfPoints:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t result;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v3 = (uint64_t)objc_msgSend(v1, sel_width);
  result = (uint64_t)objc_msgSend(v1, sel_height);
  if ((unsigned __int128)(v3 * (__int128)result) >> 64 != (v3 * result) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v5 = sqrt((double)(v3 * result) / (double)a1);
  result = (uint64_t)objc_msgSend(v1, sel_width);
  v6 = round((double)result / v5);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (uint64_t)objc_msgSend(v1, sel_height);
  v7 = round((double)result / v5);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v8 = (uint64_t)v7;
  if ((uint64_t)v7 < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v8)
  {
    v9 = (uint64_t)v6;
    if ((uint64_t)v6 < 0)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
    while (v10 != v8)
    {
      if (v9)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_2215D6F10(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v12 = 0;
        v13 = *(_QWORD *)(v11 + 16);
        v14 = 16 * v13;
        do
        {
          v15 = *(_QWORD *)(v11 + 24);
          if (v13 + v12 >= v15 >> 1)
          {
            result = (uint64_t)sub_2215D6F10((char *)(v15 > 1), v13 + v12 + 1, 1, (char *)v11);
            v11 = result;
          }
          *(_QWORD *)(v11 + 16) = v13 + v12 + 1;
          v16 = v11 + v14;
          *(double *)(v16 + 32) = v5 * (double)(v10 & 1) * 0.5 + v5 * ((double)v12 + 0.5);
          *(double *)(v16 + 40) = v5 * ((double)v10 + 0.5);
          v14 += 16;
          ++v12;
        }
        while (v9 != v12);
      }
      if (++v10 == v8)
        return v11;
    }
    __break(1u);
    goto LABEL_25;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t Publisher.do(on:)()
{
  return sub_221653024();
}

uint64_t Publisher.do(if:on:)(uint64_t (*a1)(void))
{
  a1();
  return sub_221653024();
}

void SearchArea.point.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*SearchArea.point.modify())()
{
  return nullsub_1;
}

float SearchArea.radius.getter(double a1, float a2)
{
  return a2;
}

void SearchArea.radius.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*SearchArea.radius.modify())()
{
  return nullsub_1;
}

double SearchArea.init(radius:)()
{
  return 0.0;
}

uint64_t sub_221617A88(uint64_t a1, uint64_t a2)
{
  return _s17MeasureFoundation10SearchAreaV23__derived_struct_equalsySbAC_ACtFZ_0(*(double *)a1, *(float *)(a1 + 8), *(double *)a2, *(float *)(a2 + 8));
}

uint64_t _s17MeasureFoundation10SearchAreaV23__derived_struct_equalsySbAC_ACtFZ_0(double a1, float a2, double a3, float a4)
{
  int32x2_t v4;

  if ((vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a3).u8[0] & 1) == 0)
    return 0;
  *(float *)&a1 = a2;
  *(float *)&a3 = a4;
  v4 = vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a3);
  return v4.i32[1] & v4.i32[0] & 1;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SearchArea(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SearchArea(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SearchArea()
{
  return &type metadata for SearchArea;
}

uint64_t DepthNode.init(scene:)(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_221617CBC(a1);
  swift_release();
  return v1;
}

uint64_t DepthNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  return v0;
}

void DepthNode.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t DepthNode.scene.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t DepthNode.depthProcessor.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t DepthNode.adProcessor.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t DepthNode.__allocating_init(scene:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_221617CBC(a1);
  swift_release();
  return v2;
}

void DepthNode.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_221617C5C()
{
  swift_unownedRelease();
  swift_unownedRelease();
  return swift_unownedRelease();
}

uint64_t DepthNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_221617CBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v1 + 40) = a1;
  v2 = *(_QWORD *)(a1 + 160);
  swift_unownedRetainStrong();
  *(_QWORD *)(v1 + 48) = v2;
  swift_retain();
  swift_unownedRetain();
  swift_unownedRetain();
  swift_release();
  v3 = *(_QWORD *)(v1 + 48);
  swift_unownedRetainStrong();
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 208);
  swift_retain();
  result = swift_release();
  if (v4)
  {
    *(_QWORD *)(v1 + 56) = v4;
    swift_unownedRetain();
    swift_release();
    result = swift_release();
    v6 = MEMORY[0x24BEE4AF8];
    *(_WORD *)(v1 + 32) = 257;
    *(_BYTE *)(v1 + 34) = 1;
    v7 = qword_2556D9998;
    *(_QWORD *)(v1 + 16) = qword_2556D9998;
    *(_QWORD *)(v1 + 24) = v6;
    if (v7 != -1)
    {
      qword_2556D9998 = v7 + 1;
      return v1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DepthNode()
{
  return objc_opt_self();
}

unint64_t sub_221617DC4(unsigned __int8 a1, float a2)
{
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t result;
  char v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v2;
  if (!*(_QWORD *)(*v2 + 16) || (sub_2215CA344(a1), (v7 & 1) == 0))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v2;
    *v2 = 0x8000000000000000;
    sub_22161C434(a1, isUniquelyReferenced_nonNull_native, 0.0);
    *v2 = v23;
    swift_bridgeObjectRelease();
  }
  v9 = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v2;
  v24 = *v4;
  *v4 = 0x8000000000000000;
  v12 = sub_2215CA344(a1);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_21;
  }
  v3 = v11;
  if (*(_QWORD *)(v10 + 24) < v15)
  {
    sub_2215CE37C(v15, v9);
    v16 = sub_2215CA344(a1);
    if ((v3 & 1) != (v17 & 1))
    {
LABEL_25:
      result = sub_221653B64();
      __break(1u);
      return result;
    }
    v12 = v16;
    if ((v3 & 1) != 0)
      goto LABEL_11;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v9 & 1) == 0)
    goto LABEL_23;
  if ((v11 & 1) == 0)
    goto LABEL_24;
LABEL_11:
  while (1)
  {
    *(float *)(*(_QWORD *)(v24 + 56) + 4 * v12) = *(float *)(*(_QWORD *)(v24 + 56) + 4 * v12) + a2;
    *v4 = v24;
    if (*(_QWORD *)(v24 + 16))
      break;
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    sub_2215D01B8();
    if ((v3 & 1) == 0)
      goto LABEL_24;
  }
  result = sub_2215CA344(a1);
  if ((v19 & 1) == 0)
    goto LABEL_22;
  v20 = *(float *)(*(_QWORD *)(v24 + 56) + 4 * result);
  v21 = v4[1];
  if (v21 == 33 || v20 > *((float *)&v21 + 1))
  {
    *((_BYTE *)v4 + 8) = a1;
    *((float *)v4 + 3) = v20;
  }
  v22 = v4[2];
  if (v22 == 33 || v20 < *((float *)&v22 + 1))
  {
    *((_BYTE *)v4 + 16) = a1;
    *((float *)v4 + 5) = v20;
  }
  *((float *)v4 + 6) = *((float *)v4 + 6) + a2;
  return result;
}

void sub_221617FAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t i;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  for (i = 0; ; i |= v16)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_5;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v6)
      goto LABEL_24;
    v18 = *(_QWORD *)(v2 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v6)
        goto LABEL_24;
      v18 = *(_QWORD *)(v2 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v6)
          goto LABEL_24;
        v18 = *(_QWORD *)(v2 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v5 = (v18 - 1) & v18;
    v10 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_5:
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    v12 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v13 = objc_msgSend(v12, sel_standardUserDefaults);
    v14 = (void *)sub_22165318C();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v13, sel_BOOLForKey_, v14);

    if ((v15 & ((v11 & ~i) != 0)) != 0)
      v16 = v11;
    else
      v16 = 0;
  }
  v19 = v17 + 3;
  if (v19 >= v6)
  {
LABEL_24:
    swift_release();
    return;
  }
  v18 = *(_QWORD *)(v2 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v6)
      goto LABEL_24;
    v18 = *(_QWORD *)(v2 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_26:
  __break(1u);
}

uint64_t *SegmentationProcessor.DebuggerClass.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebuggerClass;
}

uint64_t static SegmentationProcessor.DebuggerClass.getter()
{
  swift_beginAccess();
  return static SegmentationProcessor.DebuggerClass;
}

uint64_t static SegmentationProcessor.DebuggerClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_beginAccess();
  static SegmentationProcessor.DebuggerClass = a1;
  qword_2556E45E8 = a2;
  return result;
}

uint64_t (*static SegmentationProcessor.DebuggerClass.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t SegmentationProcessor.delegate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x22766FB84](v0 + 240);
}

uint64_t SegmentationProcessor.delegate.setter()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*SegmentationProcessor.delegate.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x22766FB84](v1 + 240);
  return sub_22161834C;
}

void sub_22161834C(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t SegmentationProcessor.labelingSampleCount.getter()
{
  return 200;
}

uint64_t SegmentationProcessor.debugOptions.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 264) != 1)
    return *(_QWORD *)(v0 + 256);
  if (qword_2556D8EC8 != -1)
    swift_once();
  swift_beginAccess();
  result = static SegmentationProcessor.DebugOptions.default;
  *(_QWORD *)(v0 + 256) = static SegmentationProcessor.DebugOptions.default;
  *(_BYTE *)(v0 + 264) = 0;
  return result;
}

uint64_t *SegmentationProcessor.DebugOptions.default.unsafeMutableAddressor()
{
  if (qword_2556D8EC8 != -1)
    swift_once();
  return &static SegmentationProcessor.DebugOptions.default;
}

uint64_t SegmentationProcessor.debugOptions.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 256) = result;
  *(_BYTE *)(v1 + 264) = 0;
  return result;
}

_QWORD *(*SegmentationProcessor.debugOptions.modify(uint64_t *a1))(_QWORD *result)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = SegmentationProcessor.debugOptions.getter();
  return sub_2216184D4;
}

_QWORD *sub_2216184D4(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 256) = *result;
  *(_BYTE *)(v1 + 264) = 0;
  return result;
}

void sub_2216184E4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  if ((*(_BYTE *)(v1 + 568) & 1) == 0)
  {
    v13 = *(_QWORD *)(v1 + 560);
    v14 = *(_QWORD *)(v1 + 552);
    v11 = *(_QWORD *)(v1 + 544);
    v12 = *(_QWORD *)(v1 + 536);
    v9 = *(_QWORD *)(v1 + 528);
    v10 = *(_QWORD *)(v1 + 520);
    goto LABEL_5;
  }
  ImageProcessor.viewportSize.getter();
  v4 = *(_QWORD *)(v1 + 80);
  ObjectType = swift_getObjectType();
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  v7 = objc_msgSend(v6, sel_currentFrame);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_camera);

    objc_msgSend(v8, sel_imageResolution);
    ARViewToCameraImageTransform();
    v10 = v15;
    v9 = v16;
    v12 = v17;
    v11 = v18;
    v14 = v19;
    v13 = v20;
    *(_QWORD *)(v2 + 520) = v15;
    *(_QWORD *)(v2 + 528) = v16;
    *(_QWORD *)(v2 + 536) = v17;
    *(_QWORD *)(v2 + 544) = v18;
    *(_QWORD *)(v2 + 552) = v19;
    *(_QWORD *)(v2 + 560) = v20;
    *(_BYTE *)(v2 + 568) = 0;
LABEL_5:
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v12;
    a1[3] = v11;
    a1[4] = v14;
    a1[5] = v13;
    return;
  }
  sub_221653984();
  __break(1u);
}

void sub_22161867C(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;
  void *v6;
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = v1;
  if ((*(_BYTE *)(v1 + 624) & 1) == 0)
  {
    v13 = *(_QWORD *)(v1 + 616);
    v14 = *(_QWORD *)(v1 + 608);
    v11 = *(_QWORD *)(v1 + 600);
    v12 = *(_QWORD *)(v1 + 592);
    v9 = *(_QWORD *)(v1 + 584);
    v10 = *(_QWORD *)(v1 + 576);
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(v1 + 80);
  ObjectType = swift_getObjectType();
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  v7 = objc_msgSend(v6, sel_currentFrame);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_camera);

    sub_2216187E4(v8, &v15);
    v9 = *((_QWORD *)&v15 + 1);
    v10 = v15;
    v12 = v16;
    v11 = v17;
    v14 = v18;
    v13 = v19;

    *(_OWORD *)(v2 + 576) = __PAIR128__(v9, v10);
    *(_QWORD *)(v2 + 592) = v12;
    *(_QWORD *)(v2 + 600) = v11;
    *(_QWORD *)(v2 + 608) = v14;
    *(_QWORD *)(v2 + 616) = v13;
    *(_BYTE *)(v2 + 624) = 0;
LABEL_5:
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v12;
    a1[3] = v11;
    a1[4] = v14;
    a1[5] = v13;
    return;
  }
  sub_221653984();
  __break(1u);
}

CGFloat sub_2216187E4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat tx;
  CGFloat ty;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CGFloat v16;
  CGFloat v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGFloat v21;
  CGFloat v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGFloat result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CGAffineTransform v35;
  CGAffineTransform t2;
  CGAffineTransform t1;

  objc_msgSend(a1, sel_imageResolution);
  v6 = v4 / v5;
  v7 = vabdd_f64(1.33333333, v6) * 0.5;
  if (v6 <= 1.33333333)
    v8 = v7;
  else
    v8 = 0.0;
  if (v6 <= 1.33333333)
    v9 = 0.0;
  else
    v9 = v7;
  v10 = ImageProcessor.viewportSize.getter();
  CGAffineTransformMakeScale(&t1, 1.0 / v10, 1.0 / *(double *)(v2 + 96));
  v29 = *(_OWORD *)&t1.c;
  v32 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  ARViewToCameraImageTransform();
  v13 = *(_OWORD *)&t1.a;
  v14 = *(_OWORD *)&t1.c;
  v15 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v32;
  *(_OWORD *)&t1.c = v29;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v13;
  *(_OWORD *)&t2.c = v14;
  *(_OWORD *)&t2.tx = v15;
  CGAffineTransformConcat(&v35, &t1, &t2);
  v30 = *(_OWORD *)&v35.c;
  v33 = *(_OWORD *)&v35.a;
  v16 = v35.tx;
  v17 = v35.ty;
  CGAffineTransformMakeTranslation(&t1, -v9, -v8);
  v18 = *(_OWORD *)&t1.a;
  v19 = *(_OWORD *)&t1.c;
  v20 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v33;
  *(_OWORD *)&t1.c = v30;
  t1.tx = v16;
  t1.ty = v17;
  *(_OWORD *)&t2.a = v18;
  *(_OWORD *)&t2.c = v19;
  *(_OWORD *)&t2.tx = v20;
  CGAffineTransformConcat(&v35, &t1, &t2);
  v31 = *(_OWORD *)&v35.c;
  v34 = *(_OWORD *)&v35.a;
  v21 = v35.tx;
  v22 = v35.ty;
  CGAffineTransformMakeScale(&t1, 256.0, 192.0);
  v23 = *(_OWORD *)&t1.a;
  v24 = *(_OWORD *)&t1.c;
  v25 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v34;
  *(_OWORD *)&t1.c = v31;
  t1.tx = v21;
  t1.ty = v22;
  *(_OWORD *)&t2.a = v23;
  *(_OWORD *)&t2.c = v24;
  *(_OWORD *)&t2.tx = v25;
  CGAffineTransformConcat(&v35, &t1, &t2);
  result = v35.a;
  v27 = *(_OWORD *)&v35.c;
  v28 = *(_OWORD *)&v35.tx;
  *a2 = *(_OWORD *)&v35.a;
  a2[1] = v27;
  a2[2] = v28;
  return result;
}

uint64_t sub_22161899C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 632))
  {
    v1 = *(_QWORD *)(v0 + 632);
  }
  else
  {
    ImageProcessor.makeSamplePoints(numberOfPoints:)(200);
    v1 = v2;
    *(_QWORD *)(v0 + 632) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_2216189F8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  swift_unknownObjectWeakInit();
  *(_OWORD *)(v3 + 248) = xmmword_221658B10;
  *(_BYTE *)(v3 + 264) = 1;
  v7 = objc_allocWithZone(MEMORY[0x24BDD1788]);
  swift_retain();
  *(_QWORD *)(v3 + 272) = objc_msgSend(v7, sel_init);
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_OWORD *)(v3 + 328) = 0u;
  *(_QWORD *)(v3 + 344) = 0;
  *(_BYTE *)(v3 + 352) = 1;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_BYTE *)(v3 + 432) = 1;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_BYTE *)(v3 + 512) = 1;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 552) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_BYTE *)(v3 + 568) = 1;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_OWORD *)(v3 + 592) = 0u;
  *(_OWORD *)(v3 + 608) = 0u;
  *(_BYTE *)(v3 + 624) = 1;
  *(_OWORD *)(v3 + 632) = 0u;
  *(_BYTE *)(v3 + 648) = 1;
  *(_OWORD *)(v3 + 656) = 0u;
  *(_OWORD *)(v3 + 672) = 0u;
  *(_QWORD *)(v3 + 688) = 0;
  *(_QWORD *)(v3 + 720) = 0;
  *(_OWORD *)(v3 + 704) = 0u;
  *(_BYTE *)(v3 + 728) = 1;
  *(_QWORD *)(v3 + 732) = 0x3F80000000000000;
  *(_QWORD *)(v3 + 696) = a3;
  swift_retain();
  swift_release();
  v8 = qword_2556D8ED0;
  v9 = a1;
  if (v8 != -1)
    swift_once();
  v10 = ImageProcessor.init(sceneView:outputSize:)(v9, a2, *(double *)&static SegmentationResult.outputSize, *((double *)&static SegmentationResult.outputSize + 1));
  swift_beginAccess();
  v11 = static SegmentationProcessor.DebuggerClass;
  if (static SegmentationProcessor.DebuggerClass)
  {
    v12 = qword_2556E45E8;
    v13 = *(void (**)(void))(qword_2556E45E8 + 16);
    v14 = sub_221653714();
    v22[1] = v22;
    v15 = *(_QWORD *)(v14 - 8);
    MEMORY[0x24BDAC7A8](v14);
    v17 = (char *)v22 - v16;
    swift_retain_n();
    v18 = v9;
    v13();
    v19 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v11) != 1)
    {
      *((_QWORD *)&v24 + 1) = v11;
      v25 = v12;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
      (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v17, v11);
      swift_release();

      swift_release();
      goto LABEL_9;
    }
    swift_release();

    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {

    swift_release();
  }
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
LABEL_9:
  swift_beginAccess();
  sub_22161D7FC((uint64_t)&v23, v10 + 656);
  swift_endAccess();
  return v10;
}

Swift::Void __swiftcall SegmentationProcessor.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  CGPoint v11;
  id v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;
  CGAffineTransform v28;
  CGAffineTransform v29;
  __int128 v30;
  BOOL v31;
  CGPoint v32;

  v3 = *(void **)(v1 + 272);
  objc_msgSend(v3, sel_lock);
  if ((sub_221618F94(frame.super.isa) & 1) != 0)
  {
    swift_beginAccess();
    v4 = (void *)MEMORY[0x22766FB84](v1 + 240);
    if (v4)
    {
      v5 = v4;
      if ((objc_msgSend(v4, sel_respondsToSelector_, sel_didProcess) & 1) != 0)
        objc_msgSend(v5, sel_didProcess);
      swift_unknownObjectRelease();
    }
  }
  if ((SegmentationProcessor.debugOptions.getter() & 8) == 0)
    goto LABEL_21;
  v6 = ImageProcessor.viewportCenter.getter();
  v8 = v7;
  v9 = v6 / ImageProcessor.viewportSize.getter();
  v10 = v8 / *(double *)(v1 + 96);
  sub_2216184E4(&v28);
  v29 = v28;
  v32.x = v9;
  v32.y = v10;
  v11 = CGPointApplyAffineTransform(v32, &v29);
  v12 = -[objc_class hitTest:types:](frame.super.isa, sel_hitTest_types_, 32, v11.x, v11.y);
  sub_2215DDC80(0, &qword_2556DC6A8);
  v13 = sub_221653324();

  if (!(v13 >> 62))
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_9;
LABEL_14:
    swift_bridgeObjectRelease();
    v15 = 0;
LABEL_15:
    swift_beginAccess();
    sub_22161B93C(v1 + 656, (uint64_t)v26);
    if (v27)
    {
      sub_2215E70EC((uint64_t)v26, (uint64_t)v23);
      sub_22161B984((uint64_t)v26);
      v17 = v24;
      v18 = v25;
      __swift_project_boxed_opaque_existential_0(v23, v24);
      if (v15)
      {
        objc_msgSend(v15, sel_worldTransform);
      }
      else
      {
        v19 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        v22 = 0uLL;
      }
      *(_OWORD *)&v29.a = v19;
      *(_OWORD *)&v29.c = v20;
      *(_OWORD *)&v29.tx = v21;
      v30 = v22;
      v31 = v15 == 0;
      (*(void (**)(CGAffineTransform *, uint64_t, uint64_t))(v18 + 40))(&v29, v17, v18);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
    }
    else
    {

      sub_22161B984((uint64_t)v26);
    }
LABEL_21:
    objc_msgSend(v3, sel_unlock);
    return;
  }
  swift_bridgeObjectRetain();
  sub_2216539F0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v16 = sub_2216539F0();
  swift_bridgeObjectRelease();
  if (!v16)
    goto LABEL_14;
LABEL_9:
  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (id)MEMORY[0x22766ED44](0, v13);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(v13 + 32);
LABEL_12:
    v15 = v14;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_221618F94(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t ObjectType;
  double v12;
  double v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  float v40;
  float v41;
  float v42;
  __float2 v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  void **v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __CVBuffer *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  __IOSurface *v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  id v85;
  id v86;
  __IOSurface *v87;
  id v88;
  __CVBuffer *v89;
  uint64_t v90;
  char *v91;
  __CVBuffer *v92;
  uint64_t *v93;
  char *v94;
  id v95;
  id v96;
  unsigned int *BaseAddress;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  uint32_t v109;
  _OWORD v110[12];
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;
  __int128 seed;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  simd_float4x4 v121;

  v2 = v1;
  v120 = *MEMORY[0x24BDAC8D0];
  result = (uint64_t)objc_msgSend(a1, sel_rawSceneUnderstandingData);
  if (result)
  {
    v5 = (void *)result;
    v6 = objc_msgSend((id)result, sel_semanticSegmentationBuffer);

    if (v6)
    {
      v7 = objc_msgSend(v5, sel_semanticSegmentationConfidenceBuffer);

      if (v7)
      {
        v8 = objc_msgSend(v5, sel_normalsBuffer);

        if (v8)
        {
          v9 = objc_msgSend(a1, sel_camera);
          v10 = *(_QWORD *)(v2 + 80);
          ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
          objc_msgSend(v9, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, 1, v12, v13, 0.00100000005, 1000.0);
          v105 = v14;
          v106 = v15;
          v107 = v16;
          v108 = v17;
          objc_msgSend(v9, sel_viewMatrixForOrientation_, 1);
          v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105, v18.f32[0]), v106, *(float32x2_t *)v18.f32, 1), v107, v18, 2), v108, v18, 3);
          v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105, v20.f32[0]), v106, *(float32x2_t *)v20.f32, 1), v107, v20, 2), v108, v20, 3);
          v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105, v22.f32[0]), v106, *(float32x2_t *)v22.f32, 1), v107, v22, 2), v108, v22, 3);
          v24 = v108;
          v26 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105, v25.f32[0]), v106, *(float32x2_t *)v25.f32, 1), v107, v25, 2);
          *(float32x4_t *)(v2 + 288) = v19;
          *(float32x4_t *)(v2 + 304) = v21;
          v27 = vmlaq_laneq_f32(v26, v24, v25, 3);
          *(float32x4_t *)(v2 + 320) = v23;
          *(float32x4_t *)(v2 + 336) = v27;
          *(_BYTE *)(v2 + 352) = 0;
          v121.columns[0] = (simd_float4)v19;
          v121.columns[1] = (simd_float4)v21;
          v121.columns[2] = (simd_float4)v23;
          v121.columns[3] = (simd_float4)v27;
          *(simd_float4x4 *)(v2 + 368) = __invert_f4(v121);
          *(_BYTE *)(v2 + 432) = 0;
          objc_msgSend(v9, sel_transform);
          *(_OWORD *)(v2 + 448) = v28;
          *(_OWORD *)(v2 + 464) = v29;
          *(_OWORD *)(v2 + 480) = v30;
          *(_OWORD *)(v2 + 496) = v31;
          *(_BYTE *)(v2 + 512) = 0;
          sub_221653018();
          if ((_QWORD)seed)
          {
            objc_msgSend((id)seed, sel_gravity);
            v33 = v32;
            v35 = v34;
            v37 = v36;

            *(_QWORD *)(v2 + 704) = v33;
            *(_QWORD *)(v2 + 712) = v35;
            *(_QWORD *)(v2 + 720) = v37;
            *(_BYTE *)(v2 + 728) = 0;
          }
          v38 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
          v39 = objc_msgSend(v38, sel_orientation);

          objc_msgSend(v9, sel_eulerAngles);
          v41 = v40;
          switch((unint64_t)v39)
          {
            case 1uLL:
            case 5uLL:
              v42 = 1.5708;
              goto LABEL_13;
            case 2uLL:
              v42 = -1.5708;
              goto LABEL_13;
            case 3uLL:
              v42 = 3.1416;
LABEL_13:
              v41 = v40 + v42;
              break;
            default:
              break;
          }
          v43 = __sincosf_stret(v41);
          *(float *)(v2 + 732) = -v43.__sinval;
          *(float *)(v2 + 736) = v43.__cosval;
          type metadata accessor for SegmentationResult();
          swift_allocObject();
          v44 = v5;
          *(_QWORD *)(v2 + 280) = SegmentationResult.init(_:)(v44);
          swift_release();
          *(_BYTE *)(v2 + 648) = 1;
          if ((SegmentationProcessor.debugOptions.getter() & 0x70) == 0 || (v45 = *(_QWORD *)(v2 + 280)) == 0)
          {

            return 1;
          }
          v95 = v44;
          v96 = v9;
          v108.i64[0] = v45;
          swift_retain();
          v46 = objc_msgSend(a1, sel_capturedImage);
          v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCVPixelBuffer_, v46);
          sub_2215E2254(v110);
          seed = v110[0];
          v115 = v110[1];
          v116 = v110[2];
          v48 = objc_msgSend(v47, sel_imageByApplyingTransform_, &seed);

          v49 = *(void **)(v2 + 176);
          v50 = (void **)(v2 + 152);
          swift_beginAccess();
          v51 = *(void **)(v2 + 152);
          if (v51)
          {
            v52 = v51;
            objc_msgSend(v49, sel_render_toCVPixelBuffer_, v48, v52);

            v53 = *v50;
            if (!*v50 || (v54 = *(_QWORD *)(v2 + 256), (v54 & 0x60) == 0))
            {
              swift_release();

              return 1;
            }
            if ((v54 & 0x40) != 0)
              v55 = sub_22161F7B0;
            else
              v55 = sub_22161F6AC;
            v107.i64[0] = (uint64_t)v55;
            swift_beginAccess();
            sub_22161B93C(v2 + 656, (uint64_t)v111);
            v56 = v112;
            if (!v112)
            {
              swift_release();

              sub_22161B984((uint64_t)v111);
              return 1;
            }
            v57 = v113;
            v58 = __swift_project_boxed_opaque_existential_0(v111, v112);
            v93 = &v90;
            v59 = *(_QWORD *)(v56 - 8);
            MEMORY[0x24BDAC7A8](v58);
            v61 = (char *)&v90 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v59 + 16))(v61);
            v62 = v53;
            sub_22161B984((uint64_t)v111);
            v63 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v56, v57);
            (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v56);
            if ((*(_BYTE *)(v2 + 512) & 1) == 0)
            {
              v106.i64[0] = *(_QWORD *)(v2 + 504);
              v64 = *(_QWORD *)(v2 + 496);
              *((_QWORD *)&v104 + 1) = *(_QWORD *)(v2 + 488);
              v105.i64[0] = v64;
              v65 = *(_QWORD *)(v2 + 480);
              *((_QWORD *)&v103 + 1) = *(_QWORD *)(v2 + 472);
              *(_QWORD *)&v104 = v65;
              v66 = *(_QWORD *)(v2 + 464);
              *((_QWORD *)&v102 + 1) = *(_QWORD *)(v2 + 456);
              *(_QWORD *)&v103 = v66;
              v67 = *(_QWORD *)(v2 + 448);
              v101 = *(_QWORD *)(v2 + 704);
              *(_QWORD *)&v102 = v67;
              v68 = *(_QWORD *)(v2 + 712);
              v99 = *(_QWORD *)(v2 + 720);
              v100 = v68;
              v98 = *(unsigned __int8 *)(v2 + 728);
              CVPixelBufferLockBaseAddress(v62, 0);
              BaseAddress = (unsigned int *)CVPixelBufferGetBaseAddress(v62);
              CVPixelBufferUnlockBaseAddress(v62, 0);
              v69 = &v63[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_isLocking];
              swift_beginAccess();
              if ((*v69 & 1) != 0)
              {
LABEL_27:
                v91 = v69;
                v92 = v62;
                v94 = v63;
                v71 = &v63[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_pixelsNum];
                swift_beginAccess();
                v72 = *(_QWORD *)v71;
                if ((*(_QWORD *)v71 & 0x8000000000000000) != 0)
                  goto LABEL_50;
                if (v72)
                {
                  v73 = (uint64_t *)&v94[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_width];
                  v74 = &v94[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_height];
                  v75 = &v94[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_pixel32s];
                  swift_beginAccess();
                  swift_beginAccess();
                  swift_beginAccess();
                  v76 = 0;
                  while (1)
                  {
                    v77 = *v73;
                    if (!*v73)
                      break;
                    v78 = v76 / v77;
                    v79 = __OFSUB__(v77, v76 % v77);
                    v80 = v77 - v76 % v77;
                    if (v79)
                      goto LABEL_47;
                    v81 = v80 * *(_QWORD *)v74;
                    if ((unsigned __int128)(v80 * (__int128)*(uint64_t *)v74) >> 64 != v81 >> 63)
                      goto LABEL_48;
                    if (__OFADD__(v81, v78))
                      goto LABEL_49;
                    v82 = *(_QWORD *)v75;
                    if (*(_QWORD *)v75)
                    {
                      v83 = BaseAddress[v76];
                      seed = v102;
                      v115 = v103;
                      v116 = v104;
                      v117 = v105.i64[0];
                      v118 = v106.i64[0];
                      v119 = 0;
                      *(_DWORD *)(v82 + 4 * v76) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))v107.i64[0])(v83, v108.i64[0], v81 + v78, &seed, v101, v100, v99, v98);
                    }
                    if (v72 == ++v76)
                      goto LABEL_39;
                  }
                  __break(1u);
LABEL_47:
                  __break(1u);
LABEL_48:
                  __break(1u);
LABEL_49:
                  __break(1u);
LABEL_50:
                  __break(1u);
                }
LABEL_39:
                v84 = v91;
                if (*v91 != 1)
                {

                  swift_release();
                  return 1;
                }
                v109 = 0;
                v86 = v94;
                v85 = v95;
                v87 = *(__IOSurface **)&v94[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_ioSurface];
                v88 = v96;
                v89 = v92;
                if (v87)
                {
                  IOSurfaceUnlock(v87, 2u, &v109);
                  *v84 = 0;

                  swift_release();
                  return 1;
                }
LABEL_54:
                __break(1u);
                JUMPOUT(0x221619808);
              }
              LODWORD(seed) = 0;
              v70 = *(__IOSurface **)&v63[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_ioSurface];
              if (v70)
              {
                IOSurfaceLock(v70, 2u, (uint32_t *)&seed);
                *v69 = 1;
                goto LABEL_27;
              }
LABEL_53:
              __break(1u);
              goto LABEL_54;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          goto LABEL_53;
        }
      }
    }

    return 0;
  }
  return result;
}

void *SegmentationProcessor.DebugOptions.showUnprojectedTrail.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.showUnprojectedTrail;
}

void sub_221619828(void *a1, uint64_t a2, char a3, double a4, double a5)
{
  uint64_t v5;
  void *v6;
  CGFloat v10;
  CGFloat v11;
  CGPoint v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  CGAffineTransform v30;
  CGAffineTransform v31;
  CGPoint v32;

  LOBYTE(v6) = a3;
  v10 = a4 / ImageProcessor.viewportSize.getter();
  v11 = a5 / *(double *)(v5 + 96);
  sub_2216184E4(&v31);
  v30 = v31;
  v32.x = v10;
  v32.y = v11;
  v12 = CGPointApplyAffineTransform(v32, &v30);
  v13 = objc_msgSend(a1, sel_hitTest_types_, a2, v12.x, v12.y);
  sub_2215DDC80(0, &qword_2556DC6A8);
  v14 = sub_221653324();

  v28 = v14 >> 62;
  v29 = v14;
  if (v14 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v15 = sub_2216539F0();
    swift_bridgeObjectRelease();
    if (v15 < 2)
      goto LABEL_20;
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15 < 2)
      goto LABEL_20;
  }
  if (v6 == 1)
  {
    v16 = 0;
    v17 = v15 - 1;
    v18 = v29 & 0xC000000000000001;
    while (1)
    {
      if (v17 <= 0)
      {
        if ((v17 != 0) | v16 & 1)
          break;
        v19 = 0;
        v16 = 1;
        if (v18)
        {
LABEL_17:
          v20 = (id)MEMORY[0x22766ED44]();
          goto LABEL_11;
        }
      }
      else
      {
        v19 = v17 - 1;
        if (v18)
          goto LABEL_17;
      }
      if ((unint64_t)v17 >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_19;
      }
      v20 = *(id *)(v29 + 32 + 8 * v17);
LABEL_11:
      v21 = v20;
      v22 = objc_msgSend(v20, sel_anchor, v28);
      if (v22)
      {
        v6 = v22;
        objc_opt_self();
        v23 = (void *)swift_dynamicCastObjCClass();
        if (v23)
        {
          v24 = objc_msgSend(v23, sel_alignment);

          if (!v24)
            goto LABEL_27;
        }
        else
        {

        }
      }

      v17 = v19;
    }
  }
LABEL_20:
  if (v28)
  {
    v25 = v29;
    swift_bridgeObjectRetain();
    v26 = sub_2216539F0();
    swift_bridgeObjectRelease();
    if (!v26)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v25 = v29;
    if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_27;
  }
  if ((v25 & 0xC000000000000001) != 0)
  {
    MEMORY[0x22766ED44](0, v25);
    goto LABEL_27;
  }
  if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v27 = *(id *)(v25 + 32);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t SegmentationProcessor.projectPoint(_:)(float32x4_t a1)
{
  uint64_t v1;
  void *v2;
  float64x2_t v3;
  float32x2_t v4;
  float v5;
  BOOL v6;
  BOOL v7;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v14;

  v2 = *(void **)(v1 + 272);
  objc_msgSend(v2, sel_lock);
  v14 = 0;
  if ((*(_BYTE *)(v1 + 352) & 1) == 0)
  {
    v12 = *(float32x4_t *)(v1 + 288);
    v11 = *(float32x4_t *)(v1 + 304);
    v10 = *(float32x4_t *)(v1 + 320);
    v9 = *(float32x4_t *)(v1 + 336);
    v3.f64[0] = ImageProcessor.viewportSize.getter();
    v3.f64[1] = *(float64_t *)(v1 + 96);
    v4 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(a1, v12, v11, v10, v9, vcvt_f32_f64(v3));
    v6 = (LODWORD(v5) & 0x7FFFFF) != 0 && (~LODWORD(v5) & 0x7F800000) == 0;
    v7 = v5 >= 0.0 && v5 <= 1.0;
    if (v7 && !v6)
      v14 = *(_OWORD *)&vcvtq_f64_f32(v4);
  }
  objc_msgSend(v2, sel_unlock, *(_OWORD *)&v9, *(_OWORD *)&v10, *(_OWORD *)&v11, *(_OWORD *)&v12);
  return v14;
}

CGPoint_optional __swiftcall SegmentationProcessor.reprojectPoint(screenPoint:depth:)(CGPoint screenPoint, Swift::Float depth)
{
  uint64_t v2;
  double y;
  double x;
  void *v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  __n128 v9;
  float64x2_t v10;
  float32x4_t v11;
  double v12;
  double v13;
  Swift::Bool v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  __n128 v20;
  CGPoint_optional result;

  y = screenPoint.y;
  x = screenPoint.x;
  v5 = *(void **)(v2 + 272);
  objc_msgSend(v5, sel_lock);
  if ((*(_BYTE *)(v2 + 432) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v18 = *(float32x4_t *)(v2 + 368);
    v17 = *(float32x4_t *)(v2 + 384);
    v16 = *(float32x4_t *)(v2 + 400);
    v15 = *(float32x4_t *)(v2 + 416);
    *(float *)&v7 = x;
    *(float *)&v8 = y;
    v9.n128_u64[0] = __PAIR64__(v8, v7);
    v9.n128_u64[1] = LODWORD(depth);
    v20 = v9;
    v10.f64[0] = ImageProcessor.viewportSize.getter();
    v10.f64[1] = *(float64_t *)(v2 + 96);
    *(float32x2_t *)v11.f32 = _s17MeasureFoundation0A6CameraC14unprojectPoint_17viewProjectionInv12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v20, v18, v17, v16, v15, COERCE_DOUBLE(vcvt_f32_f64(v10)));
    v6 = SegmentationProcessor.projectPoint(_:)(v11);
  }
  objc_msgSend(v5, sel_unlock, *(_OWORD *)&v15, *(_OWORD *)&v16, *(_OWORD *)&v17, *(_OWORD *)&v18);
  v14 = v6;
  result.value.y = v13;
  result.value.x = v12;
  result.is_nil = v14;
  return result;
}

CGPoint_optional __swiftcall SegmentationProcessor.reprojectPoint(screenPoint:frame:)(CGPoint screenPoint, ARFrame frame)
{
  uint64_t v2;
  void *v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  CGFloat v9;
  CGPoint v10;
  id v11;
  unint64_t v12;
  char v13;
  double v14;
  double v15;
  id v16;
  void *v17;
  float32x4_t v18;
  float32x4_t v19;
  char v20;
  uint64_t v21;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGPoint v24;
  CGPoint_optional result;

  v4 = *(void **)(v2 + 272);
  objc_msgSend(v4, sel_lock, screenPoint.x, screenPoint.y);
  v5 = ImageProcessor.viewportCenter.getter();
  v7 = v6;
  v8 = v5 / ImageProcessor.viewportSize.getter();
  v9 = v7 / *(double *)(v2 + 96);
  sub_2216184E4(&v23);
  v22 = v23;
  v24.x = v8;
  v24.y = v9;
  v10 = CGPointApplyAffineTransform(v24, &v22);
  v11 = -[objc_class hitTest:types:](frame.super.isa, sel_hitTest_types_, 32, v10.x, v10.y);
  sub_2215DDC80(0, &qword_2556DC6A8);
  v12 = sub_221653324();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2216539F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v21 = sub_2216539F0();
    v13 = swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    v20 = 0;
    goto LABEL_9;
  }
  if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_8;
LABEL_3:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v16 = (id)MEMORY[0x22766ED44](0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_12;
    }
    v16 = *(id *)(v12 + 32);
  }
  v17 = v16;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_worldTransform);
  v19 = v18;
  v19.i32[3] = 0;
  v20 = SegmentationProcessor.projectPoint(_:)(v19);

LABEL_9:
  objc_msgSend(v4, sel_unlock);
  v13 = v20;
LABEL_12:
  result.value.y = v15;
  result.value.x = v14;
  result.is_nil = v13;
  return result;
}

MeasureFoundation::SegmentationResult::Label_optional __swiftcall SegmentationProcessor.label(at:withKernel:)(CGPoint at, Swift::Int withKernel)
{
  uint64_t v2;
  CGFloat y;
  CGFloat x;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  MeasureFoundation::SegmentationResult::Label_optional result;
  MeasureFoundation::SegmentationResult::Label value;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  Swift::Int v23;
  BOOL v24;
  Swift::Int v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::Int v29;
  uint64_t v30;

  y = at.y;
  x = at.x;
  v6 = *(void **)(v2 + 272);
  objc_msgSend(v6, sel_lock);
  sub_22161A0BC(x, y);
  v8 = v7;
  v10 = v9;
  result.value = sub_22161A198(v7, v9);
  value = result.value;
  if (result.value == MeasureFoundation_SegmentationResult_Label_unknownDefault
    || result.value == MeasureFoundation_SegmentationResult_Label_unknown
    || withKernel < 1)
  {
LABEL_35:
    objc_msgSend(v6, sel_unlock);
    return (MeasureFoundation::SegmentationResult::Label_optional)value;
  }
  v30 = v10;
  v15 = -withKernel;
  v16 = 2 * withKernel;
  v17 = -withKernel;
  v28 = v6;
LABEL_9:
  v29 = v17;
  v18 = v30 + v17;
  if (__OFADD__(v30, v17))
    goto LABEL_40;
  while (1)
  {
    v19 = v8 + v15;
    if (__OFADD__(v8, v15))
      break;
    v20 = *(_QWORD **)(v2 + 280);
    if (!v20)
      goto LABEL_21;
    v21 = 0;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v22 = v20[9];
      if (v19 < v22 && (v18 & 0x8000000000000000) == 0)
      {
        if (v18 >= v20[10])
        {
LABEL_21:
          v21 = 0;
          goto LABEL_22;
        }
        v23 = v18 * v22;
        if ((unsigned __int128)(v18 * (__int128)v22) >> 64 != (v18 * v22) >> 63)
          goto LABEL_38;
        v24 = __OFADD__(v23, v19);
        v25 = v23 + v19;
        if (v24)
          goto LABEL_39;
        v26 = *(char *)(v20[6] + v25);
        v27 = (void *)objc_opt_self();
        swift_retain();
        if (objc_msgSend(v27, sel_jasperAvailable))
        {
          v21 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v26);
          result.value = swift_release();
          if (v21 == 33)
            goto LABEL_33;
        }
        else
        {
          result.value = swift_release();
          if (v26 > 0xC)
            goto LABEL_33;
          v21 = byte_221658DD4[v26];
        }
      }
    }
LABEL_22:
    if (value != v21)
      goto LABEL_33;
    if (!v16)
    {
      if (v29 != withKernel)
      {
        v17 = v29 + 1;
        v16 = 2 * withKernel;
        v15 = -withKernel;
        if (!__OFADD__(v29, 1))
          goto LABEL_9;
        __break(1u);
LABEL_33:
        value = MeasureFoundation_SegmentationResult_Label_unknown;
      }
      v6 = v28;
      goto LABEL_35;
    }
    --v16;
    v24 = __OFADD__(v15++, 1);
    if (v24)
      goto LABEL_37;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

void sub_22161A0BC(CGFloat a1, CGFloat a2)
{
  CGPoint v4;
  double v5;
  double v6;
  CGAffineTransform v7;
  CGAffineTransform v8;
  CGPoint v9;

  sub_22161867C((unint64_t *)&v8);
  v7 = v8;
  v9.x = a1;
  v9.y = a2;
  v4 = CGPointApplyAffineTransform(v9, &v7);
  v5 = round(v4.x);
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v6 = round(v4.y);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v6 >= 9.22337204e18)
LABEL_13:
    __break(1u);
}

uint64_t sub_22161A198(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD **)(v2 + 280);
  if (!v3)
    return 0;
  v4 = 0;
  if (result < 0)
    return v4;
  v5 = v3[9];
  if (v5 <= result || a2 < 0)
    return v4;
  if (v3[10] <= a2)
    return 0;
  v6 = a2 * v5;
  if ((unsigned __int128)(a2 * (__int128)v5) >> 64 == (a2 * v5) >> 63)
  {
    if (!__OFADD__(v6, result))
    {
      v7 = *(unsigned __int8 *)(v3[6] + v6 + result);
      v8 = (void *)objc_opt_self();
      swift_retain();
      if (objc_msgSend(v8, sel_jasperAvailable))
      {
        v9 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v7);
      }
      else
      {
        v10 = sub_22161FAC8(v7);
        if (v10 == 13)
        {
          v4 = 33;
LABEL_16:
          swift_release();
          return v4;
        }
        v9 = sub_22161F66C(v10);
      }
      v4 = v9;
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SegmentationProcessor.label(at:withKernel:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  double v6;
  uint64_t p_attr;
  char v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v4 = *(void **)(v2 + 272);
  objc_msgSend(v4, sel_lock);
  *(double *)&v5 = COERCE_DOUBLE(SegmentationProcessor.projectPoint(_:)(a2));
  p_attr = 0x24E730000;
  if ((v8 & 1) != 0)
    goto LABEL_31;
  v9 = *(double *)&v5;
  v10 = v6;
  objc_msgSend(v4, sel_lock);
  sub_22161A0BC(v9, v10);
  v12 = v11;
  v14 = v13;
  result = sub_22161A198(v11, v13);
  v16 = result;
  if (result == 33 || !(_BYTE)result || a1 <= 0)
  {
LABEL_34:
    objc_msgSend(v4, *(SEL *)(p_attr + 3256), v30, v31);
    goto LABEL_35;
  }
  v17 = -a1;
  v18 = 2 * a1;
  v19 = -a1;
  v32 = -a1;
  v33 = a1;
  v30 = 2 * a1;
  v31 = v14;
  while (2)
  {
    v35 = v19;
    p_attr = v14 + v19;
    if (__OFADD__(v14, v19))
      goto LABEL_40;
    v20 = v17;
    while (1)
    {
      v21 = v12 + v20;
      if (__OFADD__(v12, v20))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      v22 = *(_QWORD **)(v2 + 280);
      if (!v22)
        goto LABEL_19;
      v23 = 0;
      if ((v21 & 0x8000000000000000) == 0)
      {
        v24 = v22[9];
        if (v21 < v24 && (p_attr & 0x8000000000000000) == 0)
        {
          if (p_attr >= v22[10])
          {
LABEL_19:
            v23 = 0;
            goto LABEL_20;
          }
          v25 = p_attr * v24;
          if ((unsigned __int128)(p_attr * (__int128)v24) >> 64 != (p_attr * v24) >> 63)
            goto LABEL_38;
          v26 = __OFADD__(v25, v21);
          v27 = v25 + v21;
          if (v26)
            goto LABEL_39;
          v28 = *(char *)(v22[6] + v27);
          v29 = (void *)objc_opt_self();
          swift_retain();
          if (objc_msgSend(v29, sel_jasperAvailable))
          {
            v23 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v28);
            result = swift_release();
            if (v23 == 33)
              goto LABEL_32;
          }
          else
          {
            result = swift_release();
            if (v28 >= 0xD)
            {
LABEL_32:
              v16 = 0;
              goto LABEL_33;
            }
            v23 = byte_221658DD4[v28];
          }
        }
      }
LABEL_20:
      if (v16 != v23)
        goto LABEL_32;
      if (!v18)
        break;
      --v18;
      v26 = __OFADD__(v20++, 1);
      if (v26)
        goto LABEL_37;
    }
    v17 = v32;
    if (v35 == v33)
    {
LABEL_33:
      p_attr = (uint64_t)&stru_24E72FFF8.attr;
      goto LABEL_34;
    }
    v19 = v35 + 1;
    v18 = v30;
    v14 = v31;
    if (!__OFADD__(v35, 1))
      continue;
    break;
  }
  __break(1u);
LABEL_31:
  v16 = 33;
LABEL_35:
  objc_msgSend(v4, *(SEL *)(p_attr + 3256), v30, v31);
  return v16;
}

uint64_t sub_22161A4AC(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *(void **)(v1 + 272);
  objc_msgSend(v3, sel_lock);
  if (*(_BYTE *)(v1 + 648) == 1)
  {
    v4 = sub_22161899C();
    v5 = sub_22161A548(v4, a1);
    swift_bridgeObjectRelease();
    v6 = (uint64_t *)(v1 + 640);
    *(_QWORD *)(v1 + 640) = v5;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v1 + 648) = 0;
  }
  else
  {
    v6 = (uint64_t *)(v1 + 640);
  }
  v7 = *v6;
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel_unlock);
  return v7;
}

uint64_t sub_22161A548(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  double *v10;
  char **p_attr;
  char **v12;
  double v13;
  double v14;
  CGPoint v15;
  double v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  float v33;
  __int128 v34;
  double v35;
  CGPoint v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  uint64_t v47;
  char v48;
  char v49;
  id v50;
  char isUniquelyReferenced_nonNull_native;
  id v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  id v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  unsigned __int8 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t result;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  uint64_t v96;
  int64x2_t v97;
  id v98;
  unsigned __int8 v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v104[3];
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[32];
  _BYTE v108[24];
  int v109;
  uint64_t v110;
  int64x2_t v111;
  int v112;
  uint64_t v113;
  int64x2_t v114;
  int v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  CGPoint v119;

  v3 = v2;
  if ((SegmentationProcessor.debugOptions.getter() & 4) != 0)
  {
    swift_beginAccess();
    sub_22161B93C(v2 + 656, (uint64_t)v107);
    if (*(_QWORD *)&v107[24])
    {
      sub_2215E70EC((uint64_t)v107, (uint64_t)&v116);
      sub_22161B984((uint64_t)v107);
      v5 = *((_QWORD *)&v117 + 1);
      v6 = v118;
      __swift_project_boxed_opaque_existential_0(&v116, *((uint64_t *)&v117 + 1));
      (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v116);
    }
    else
    {
      sub_22161B984((uint64_t)v107);
    }
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return MEMORY[0x24BEE4B00];
  v8 = *(void **)(v2 + 272);
  v9 = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v100 = v9;
  v10 = (double *)(a1 + 40);
  p_attr = &stru_24E72FFF8.attr;
  v12 = &stru_24E72FFF8.attr;
  v97 = vdupq_n_s64(0x21uLL);
  while (1)
  {
    v13 = *(v10 - 1);
    v14 = *v10;
    objc_msgSend(v8, p_attr[406], v88, v89, v90, v91);
    sub_22161867C((unint64_t *)&v116);
    *(_OWORD *)v107 = v116;
    *(_OWORD *)&v107[16] = v117;
    *(_OWORD *)v108 = v118;
    v119.x = v13;
    v119.y = v14;
    v15 = CGPointApplyAffineTransform(v119, (CGAffineTransform *)v107);
    v16 = round(v15.x);
    if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) == 0)
      break;
    if (v16 <= -9.22337204e18)
      goto LABEL_89;
    if (v16 >= 9.22337204e18)
      goto LABEL_90;
    v17 = round(v15.y);
    if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
      goto LABEL_91;
    if (v17 <= -9.22337204e18)
      goto LABEL_92;
    if (v17 >= 9.22337204e18)
      goto LABEL_93;
    v18 = *(_QWORD **)(v3 + 280);
    if (!v18
      || (v19 = (uint64_t)v16, (uint64_t)v16 < 0)
      || (v20 = v18[9], v20 <= v19)
      || (v21 = (uint64_t)v17, (uint64_t)v17 < 0)
      || v18[10] <= v21)
    {
LABEL_47:
      objc_msgSend(v8, v12[407]);
      goto LABEL_48;
    }
    v22 = v21 * v20;
    if ((unsigned __int128)(v21 * (__int128)v20) >> 64 != (v21 * v20) >> 63)
      goto LABEL_94;
    v23 = __OFADD__(v22, v19);
    v24 = v22 + v19;
    if (v23)
      goto LABEL_95;
    v25 = *(unsigned __int8 *)(v18[6] + v24);
    v26 = (void *)objc_opt_self();
    swift_retain();
    if ((objc_msgSend(v26, sel_jasperAvailable) & 1) == 0)
    {
      v28 = sub_22161FAC8(v25);
      swift_release();
      v29 = v28 - 1;
      v30 = (v28 - 1);
      p_attr = &stru_24E72FFF8.attr;
      v12 = &stru_24E72FFF8.attr;
      if (v30 >= 0xB)
        goto LABEL_47;
      v27 = byte_221658DE1[v29];
      objc_msgSend(v8, sel_unlock);
LABEL_26:
      v99 = v27;
      sub_221619828(a2, 32, v27, v13, v14);
      if (!v31)
        goto LABEL_48;
      v98 = v31;
      objc_msgSend(v8, p_attr[406]);
      v32 = *(_QWORD *)(v3 + 280);
      v33 = 0.0;
      if (v32)
      {
        v34 = *(_OWORD *)(v3 + 592);
        *(_OWORD *)v107 = *(_OWORD *)(v3 + 576);
        *(_OWORD *)&v107[16] = v34;
        *(_OWORD *)v108 = *(_OWORD *)(v3 + 608);
        v35 = v13;
        *(double *)&v34 = v14;
        v36 = CGPointApplyAffineTransform(*(CGPoint *)((char *)&v34 - 8), (CGAffineTransform *)v107);
        v37 = round(v36.x);
        if ((~*(_QWORD *)&v37 & 0x7FF0000000000000) == 0)
          goto LABEL_96;
        if (v37 <= -9.22337204e18)
          goto LABEL_97;
        if (v37 >= 9.22337204e18)
          goto LABEL_98;
        v38 = round(v36.y);
        if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
          goto LABEL_99;
        if (v38 <= -9.22337204e18)
          goto LABEL_100;
        if (v38 >= 9.22337204e18)
          goto LABEL_101;
        v39 = (uint64_t)v37;
        if (((uint64_t)v37 & 0x8000000000000000) == 0)
        {
          v40 = *(_QWORD *)(v32 + 72);
          if (v40 > v39)
          {
            v41 = (uint64_t)v38;
            if (((uint64_t)v38 & 0x8000000000000000) == 0 && *(_QWORD *)(v32 + 80) > v41)
            {
              v42 = v41 * v40;
              if ((unsigned __int128)(v41 * (__int128)v40) >> 64 != (v41 * v40) >> 63)
                goto LABEL_106;
              v43 = v42 + v39;
              if (__OFADD__(v42, v39))
                goto LABEL_107;
              swift_retain();
              v33 = sub_22161F3D8(v43);
              swift_release();
              p_attr = (char **)(&stru_24E72FFF8 + 8);
            }
          }
        }
      }
      objc_msgSend(v8, sel_unlock);
      SegmentationProcessor.normal(at:)(v13, v14);
      v44 = objc_msgSend(v98, sel_anchor);
      if (!v44)
      {

        goto LABEL_48;
      }
      v45 = v44;
      objc_opt_self();
      v46 = (void *)swift_dynamicCastObjCClass();
      if (!v46)
      {

        v12 = (char **)(&stru_24E72FFF8 + 8);
        goto LABEL_48;
      }
      v95 = v46;
      if (objc_msgSend(v46, sel_alignment))
      {
        if (v99 == 1 || v99 == 3)
          goto LABEL_56;
      }
      else if (v99 == 2 || v99 == 6 || v99 == 7)
      {
LABEL_56:

        v12 = (char **)(&stru_24E72FFF8 + 8);
        goto LABEL_48;
      }
      v47 = v100;
      if (!*(_QWORD *)(v100 + 16)
        || (v92 = v45, sub_2215CA4EC((uint64_t)v95), v49 = v48, v92, (v49 & 1) == 0))
      {
        v50 = v45;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v107 = v100;
        v110 = MEMORY[0x24BEE4B00];
        v111 = v97;
        v112 = 0;
        v113 = MEMORY[0x24BEE4B00];
        v114 = v97;
        v115 = 0;
        sub_22161C558((uint64_t)&v110, v95, isUniquelyReferenced_nonNull_native);
        v47 = *(_QWORD *)v107;

        swift_bridgeObjectRelease();
      }
      v52 = v45;
      v101 = swift_isUniquelyReferenced_nonNull_native();
      v104[0] = v47;
      v93 = v52;
      v54 = sub_2215CA4EC((uint64_t)v95);
      v55 = *(_QWORD *)(v47 + 16);
      v56 = (v53 & 1) == 0;
      v57 = v55 + v56;
      if (__OFADD__(v55, v56))
        goto LABEL_102;
      v58 = v53;
      if (*(_QWORD *)(v47 + 24) >= v57)
      {
        if ((v101 & 1) != 0)
        {
          if ((v53 & 1) == 0)
            goto LABEL_103;
        }
        else
        {
          sub_2215D0344();
          if ((v58 & 1) == 0)
            goto LABEL_103;
        }
      }
      else
      {
        sub_2215CE644(v57, v101);
        v59 = sub_2215CA4EC((uint64_t)v95);
        if ((v58 & 1) != (v60 & 1))
          goto LABEL_110;
        v54 = v59;
        if ((v58 & 1) == 0)
          goto LABEL_103;
      }
      v61 = *(_QWORD *)(v104[0] + 56) + (v54 << 6);
      v62 = *(unsigned int *)(v61 + 24);
      v63 = *(_QWORD *)(v61 + 32);
      v64 = *(_DWORD *)(v61 + 56);
      *(_QWORD *)v107 = *(_QWORD *)v61;
      *(_OWORD *)&v107[8] = *(_OWORD *)(v61 + 8);
      *(_QWORD *)&v107[24] = v62;
      *(_QWORD *)v108 = v63;
      *(_OWORD *)&v108[8] = *(_OWORD *)(v61 + 40);
      v109 = v64;
      sub_221617DC4(v99, v33);
      sub_22161D2E8((uint64_t)v107, 1, v104, v54, v95);
      sub_22161D7A4(*(uint64_t *)v107);

      v65 = v104[0];
      v66 = v93;
      v102 = swift_isUniquelyReferenced_nonNull_native();
      v104[0] = v65;
      v94 = v66;
      v68 = sub_2215CA4EC((uint64_t)v95);
      v69 = *(_QWORD *)(v65 + 16);
      v70 = (v67 & 1) == 0;
      v71 = v69 + v70;
      if (__OFADD__(v69, v70))
        goto LABEL_104;
      v72 = v67;
      if (*(_QWORD *)(v65 + 24) >= v71)
      {
        v75 = v99;
        if ((v102 & 1) == 0)
        {
          sub_2215D0344();
          goto LABEL_71;
        }
      }
      else
      {
        sub_2215CE644(v71, v102);
        v73 = sub_2215CA4EC((uint64_t)v95);
        if ((v72 & 1) != (v74 & 1))
          goto LABEL_110;
        v68 = v73;
LABEL_71:
        v75 = v99;
      }
      if ((v72 & 1) == 0)
        goto LABEL_105;
      v76 = *(_QWORD *)(v104[0] + 56) + (v68 << 6);
      v77 = *(unsigned int *)(v76 + 24);
      v78 = *(_QWORD *)(v76 + 32);
      v79 = *(_DWORD *)(v76 + 56);
      *(_QWORD *)v107 = *(_QWORD *)v76;
      *(_OWORD *)&v107[8] = *(_OWORD *)(v76 + 8);
      *(_QWORD *)&v107[24] = v77;
      *(_QWORD *)v108 = v78;
      *(_OWORD *)&v108[8] = *(_OWORD *)(v76 + 40);
      v109 = v79;
      sub_221617DC4(v75, 1.0);
      sub_22161D2E8((uint64_t)v107, 1, v104, v68, v95);
      sub_22161D7A4(*(uint64_t *)v107);

      v80 = v104[0];
      v100 = v80;
      if ((*(_BYTE *)(v3 + 256) & 4) != 0)
      {
        SegmentationProcessor.normal(at:)(v13, v14);
        if ((v81 & 1) != 0)
          goto LABEL_109;
        sub_22161B93C(v3 + 656, (uint64_t)v107);
        if (*(_QWORD *)&v107[24])
        {
          sub_2215E70EC((uint64_t)v107, (uint64_t)v104);
          sub_22161B984((uint64_t)v107);
          v82 = v105;
          v96 = v106;
          __swift_project_boxed_opaque_existential_0(v104, v105);
          objc_msgSend(v98, sel_worldTransform);
          if (qword_2556D8ED8 != -1)
          {
            v90 = v84;
            v91 = v83;
            v88 = v86;
            v89 = v85;
            swift_once();
          }
          if (*((_QWORD *)off_2556DD5A8 + 2) <= (unint64_t)v99)
            goto LABEL_108;
          (*(void (**)(_QWORD, uint64_t))(v96 + 32))(*((unsigned int *)off_2556DD5A8 + v99 + 8), v82);

          __swift_destroy_boxed_opaque_existential_0((uint64_t)v104);
        }
        else
        {

          sub_22161B984((uint64_t)v107);
        }
      }
      else
      {

      }
      p_attr = (char **)(&stru_24E72FFF8 + 8);
      v12 = (char **)(&stru_24E72FFF8 + 8);
      goto LABEL_48;
    }
    v27 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v25);
    swift_release();
    v12 = &stru_24E72FFF8.attr;
    objc_msgSend(v8, sel_unlock);
    if (!v27)
    {
      p_attr = (char **)(&stru_24E72FFF8 + 8);
      goto LABEL_48;
    }
    p_attr = (char **)(&stru_24E72FFF8 + 8);
    if (v27 != 33)
      goto LABEL_26;
LABEL_48:
    v10 += 2;
    if (!--v7)
    {
      swift_bridgeObjectRelease();
      return v100;
    }
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  sub_2215DDC80(0, (unint64_t *)&qword_2556DA0B0);
  result = sub_221653B64();
  __break(1u);
  return result;
}

Swift::Float __swiftcall SegmentationProcessor.labelConfidence(at:)(CGPoint at)
{
  uint64_t v1;
  CGFloat y;
  CGFloat x;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Float result;
  float v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  y = at.y;
  x = at.x;
  v4 = *(void **)(v1 + 272);
  objc_msgSend(v4, sel_lock);
  v5 = *(_QWORD *)(v1 + 280);
  if (!v5)
  {
    v9 = 0.0;
    goto LABEL_11;
  }
  swift_retain();
  sub_22161A0BC(x, y);
  v9 = 0.0;
  if (v6 < 0 || (v10 = *(_QWORD *)(v5 + 72), v6 >= v10) || v7 < 0 || v7 >= *(_QWORD *)(v5 + 80))
  {
LABEL_9:
    swift_release();
LABEL_11:
    objc_msgSend(v4, sel_unlock);
    return v9;
  }
  v11 = v7 * v10;
  if ((unsigned __int128)(v7 * (__int128)v10) >> 64 == (v7 * v10) >> 63)
  {
    v12 = __OFADD__(v11, v6);
    v13 = v11 + v6;
    if (!v12)
    {
      v9 = sub_22161F3D8(v13);
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t SegmentationProcessor.normal(at:)(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  void *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x2_t v27;
  unsigned __int32 v28;
  float32x2_t v29;
  float32x2_t v30;
  unint64_t v31;
  int8x16_t v33;

  v5 = *(void **)(v2 + 272);
  objc_msgSend(v5, sel_lock);
  if (!*(_QWORD *)(v2 + 280))
  {
    v31 = 0;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v2 + 512) & 1) != 0)
  {
LABEL_7:
    v31 = 0;
    goto LABEL_8;
  }
  v6 = *(float32x2_t *)(v2 + 496);
  v7 = *(float32x2_t *)(v2 + 504);
  v8 = *(float32x2_t *)(v2 + 480);
  v9 = *(float32x2_t *)(v2 + 464);
  v33.i64[0] = *(_QWORD *)(v2 + 472);
  v10 = *(float32x2_t *)(v2 + 448);
  swift_retain();
  sub_22161A0BC(a1, a2);
  v17 = SegmentationResult.normal(at:)(v11, v12, v13, v14, v15, v16);
  if ((v19 & 1) != 0)
  {
    swift_release();
    goto LABEL_7;
  }
  v20.i64[0] = v17;
  v20.i64[1] = v18;
  v21 = *(float32x2_t *)(v2 + 732);
  v22 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v21, *(float *)&v17));
  v23 = vmul_lane_f32(v21, (float32x2_t)v17, 1);
  v24.i32[0] = vsub_f32(v22, v23).u32[0];
  v24.i32[1] = vadd_f32(v22, v23).i32[1];
  v24.i64[1] = vnegq_f32(v20).u32[2];
  *(float32x2_t *)v25.i8 = simd_float4x4.apply(to:)(v24, v10, v9, v8, v6);
  v33 = v25;
  swift_release();
  *(float32x2_t *)v26.f32 = vsub_f32(*(float32x2_t *)v33.i8, v6);
  v27 = vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  *(float32x2_t *)&v26.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), v7);
  v28 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)vmulq_f32(v26, v26), 2), vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1))).u32[0];
  v29 = vrsqrte_f32((float32x2_t)v28);
  v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28, vmul_f32(v29, v29)));
  v31 = vmulq_n_f32(v26, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28, vmul_f32(v30, v30))).f32[0]).u64[0];
LABEL_8:
  objc_msgSend(v5, sel_unlock, v33.i64[0]);
  return v31;
}

unint64_t SegmentationProcessor.normal(at:)(float32x4_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  CGFloat v4;
  char v5;
  unint64_t v6;

  v2 = *(void **)(v1 + 272);
  objc_msgSend(v2, sel_lock);
  v3 = SegmentationProcessor.projectPoint(_:)(a1);
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = SegmentationProcessor.normal(at:)(*(CGFloat *)&v3, v4);
  objc_msgSend(v2, sel_unlock);
  return v6;
}

uint64_t SegmentationProcessor.averageNormal(of:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  float32x2_t p_attr;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  float64x2_t v8;
  float32x2_t v9;
  float v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  CGFloat v14;
  CGFloat v15;
  char **v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  char **v21;
  float32x4_t v22;
  int32x2_t v23;
  float32x2_t v24;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;

  v3 = *(void **)(v1 + 272);
  p_attr = (float32x2_t)&stru_24E72FFF8.attr;
  objc_msgSend(v3, sel_lock);
  if (qword_2556D8DD0 != -1)
LABEL_25:
    swift_once();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = &stru_24E72FFF8.attr;
  if (v5)
  {
    v27 = (float32x4_t)static SIMD3<>.zero;
    swift_bridgeObjectRetain();
    v28 = 0;
    v7 = 0;
    v26 = v5;
    do
    {
      v33 = *(float32x4_t *)(a1 + 16 * v7 + 32);
      objc_msgSend(v3, *(SEL *)(*(_QWORD *)&p_attr + 3248));
      objc_msgSend(v3, *(SEL *)(*(_QWORD *)&p_attr + 3248));
      if ((*(_BYTE *)(v1 + 352) & 1) != 0)
        goto LABEL_4;
      v32 = *(float32x4_t *)(v1 + 288);
      v31 = *(float32x4_t *)(v1 + 304);
      v30 = *(float32x4_t *)(v1 + 320);
      v29 = *(float32x4_t *)(v1 + 336);
      v8.f64[0] = ImageProcessor.viewportSize.getter();
      v8.f64[1] = *(float64_t *)(v1 + 96);
      v9 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v33, v32, v31, v30, v29, vcvt_f32_f64(v8));
      v11 = (LODWORD(v10) & 0x7FFFFF) != 0 && (~LODWORD(v10) & 0x7F800000) == 0;
      v12 = v10 >= 0.0 && v10 <= 1.0;
      if (!v12 || v11)
      {
LABEL_4:
        objc_msgSend(v3, v6[407]);
        objc_msgSend(v3, v6[407]);
      }
      else
      {
        v13 = a1;
        a1 = (uint64_t)p_attr;
        v14 = v9.f32[0];
        v15 = v9.f32[1];
        objc_msgSend(v3, v6[407]);
        p_attr = (float32x2_t)SegmentationProcessor.normal(at:)(v14, v15);
        v16 = v6;
        v18 = v17;
        v20 = v19;
        v21 = v16;
        objc_msgSend(v3, (SEL)v16 + 1041);
        if ((v20 & 1) == 0)
        {
          if (__OFADD__(v28, 1))
          {
            __break(1u);
            goto LABEL_25;
          }
          ++v28;
          *(float32x2_t *)v22.f32 = vadd_f32(*(float32x2_t *)v27.f32, p_attr);
          v22.i64[1] = vaddq_f32(v27, (float32x4_t)vdupq_n_s64(v18)).u32[2];
          v27 = v22;
        }
        v6 = v21;
        p_attr = (float32x2_t)a1;
        a1 = v13;
        v5 = v26;
      }
      ++v7;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
    if (v28 < 1)
      goto LABEL_22;
    *(float *)v23.i32 = (float)v28;
    v24 = vdiv_f32(*(float32x2_t *)v27.f32, (float32x2_t)vdup_lane_s32(v23, 0));
  }
  else
  {
LABEL_22:
    v24 = 0;
  }
  objc_msgSend(v3, v6[407]);
  return (uint64_t)v24;
}

void SegmentationProcessor.__allocating_init(sceneView:outputSize:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SegmentationProcessor.init(sceneView:outputSize:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_22161B528()
{
  uint64_t v0;

  sub_22161D610(v0 + 240);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22161B984(v0 + 656);
  return swift_release();
}

id *SegmentationProcessor.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  sub_22161D610((uint64_t)(v0 + 30));

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22161B984((uint64_t)(v0 + 82));
  swift_release();
  return v0;
}

uint64_t SegmentationProcessor.__deallocating_deinit()
{
  SegmentationProcessor.deinit();
  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall SegmentationProcessor.DebugOptions.needsRendering()()
{
  char v0;

  return (v0 & 0x70) != 0;
}

void *SegmentationProcessor.DebugOptions.showSegmentedBackground.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.showSegmentedBackground;
}

void *SegmentationProcessor.DebugOptions.showNormalsBackground.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.showNormalsBackground;
}

void *SegmentationProcessor.DebugOptions.showSampledPoints.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.showSampledPoints;
}

uint64_t static SegmentationProcessor.DebugOptions.showSampledPoints.getter()
{
  return 4;
}

uint64_t static SegmentationProcessor.DebugOptions.showUnprojectedTrail.getter()
{
  return 8;
}

void *SegmentationProcessor.DebugOptions.renderSegmentedImage.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.renderSegmentedImage;
}

uint64_t static SegmentationProcessor.DebugOptions.renderSegmentedImage.getter()
{
  return 16;
}

uint64_t static SegmentationProcessor.DebugOptions.showSegmentedBackground.getter()
{
  return 32;
}

uint64_t static SegmentationProcessor.DebugOptions.showNormalsBackground.getter()
{
  return 64;
}

unint64_t sub_22161B66C()
{
  unint64_t result;

  result = sub_2215C2C04((uint64_t)&unk_24E722B00);
  static SegmentationProcessor.DebugOptions.keyForFeature = result;
  return result;
}

uint64_t *SegmentationProcessor.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  if (qword_2556D8EB8 != -1)
    swift_once();
  return &static SegmentationProcessor.DebugOptions.keyForFeature;
}

uint64_t static SegmentationProcessor.DebugOptions.keyForFeature.getter()
{
  return sub_2215C5614(&qword_2556D8EB8);
}

uint64_t sub_22161B6EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  if (qword_2556D8EB8 != -1)
    swift_once();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_22161BCFC(v0);
  result = swift_bridgeObjectRelease();
  static SegmentationProcessor.DebugOptions.keys = (uint64_t)v1;
  return result;
}

uint64_t *SegmentationProcessor.DebugOptions.keys.unsafeMutableAddressor()
{
  if (qword_2556D8EC0 != -1)
    swift_once();
  return &static SegmentationProcessor.DebugOptions.keys;
}

uint64_t static SegmentationProcessor.DebugOptions.keys.getter()
{
  return sub_2215C5614(&qword_2556D8EC0);
}

void sub_22161B7B0()
{
  uint64_t v0;

  if (qword_2556D8EB8 != -1)
    swift_once();
  sub_221617FAC(static SegmentationProcessor.DebugOptions.keyForFeature);
  static SegmentationProcessor.DebugOptions.default = v0;
}

uint64_t static SegmentationProcessor.DebugOptions.default.getter()
{
  if (qword_2556D8EC8 != -1)
    swift_once();
  swift_beginAccess();
  return static SegmentationProcessor.DebugOptions.default;
}

uint64_t static SegmentationProcessor.DebugOptions.default.setter(uint64_t a1)
{
  uint64_t result;

  if (qword_2556D8EC8 != -1)
    swift_once();
  result = swift_beginAccess();
  static SegmentationProcessor.DebugOptions.default = a1;
  return result;
}

uint64_t (*static SegmentationProcessor.DebugOptions.default.modify())()
{
  if (qword_2556D8EC8 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_22161B93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DD0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22161B984(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DD0C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SegmentationProcessor.SegmentedTexture.fill(featureProvider:inputBuffer:pixelRenderer:cameraTransform:gravity:isFeatureRotated:)(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint32_t *, uint64_t, uint64_t, uint64_t, _QWORD), int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, char a13)
{
  uint64_t v13;
  _BYTE *v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int *BaseAddress;
  uint32_t v42;
  uint32_t seed[4];
  __n128 v44;
  __n128 v45;
  __n128 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (unsigned int *)CVPixelBufferGetBaseAddress(pixelBuffer);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v16 = (_BYTE *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_isLocking);
  swift_beginAccess();
  if ((*v16 & 1) == 0)
  {
    seed[0] = 0;
    result = *(_QWORD *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_ioSurface);
    if (!result)
    {
      __break(1u);
      goto LABEL_25;
    }
    IOSurfaceLock((IOSurfaceRef)result, 2u, seed);
    *v16 = 1;
  }
  v18 = (uint64_t *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_pixelsNum);
  result = swift_beginAccess();
  v19 = *v18;
  if (*v18 < 0)
    goto LABEL_23;
  if (v19)
  {
    v20 = (uint64_t *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_height);
    v21 = (uint64_t *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_pixel32s);
    v31 = (uint64_t *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_width);
    swift_beginAccess();
    swift_beginAccess();
    result = swift_beginAccess();
    for (i = 0; v19 != i; ++i)
    {
      v23 = i;
      if ((a13 & 1) != 0)
      {
        v24 = *v31;
        if (!*v31)
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
        }
        v25 = i / v24;
        v26 = __OFSUB__(v24, i % v24);
        v27 = v24 - i % v24;
        if (v26)
          goto LABEL_20;
        v28 = v27 * *v20;
        if ((unsigned __int128)(v27 * (__int128)*v20) >> 64 != v28 >> 63)
          goto LABEL_21;
        v23 = v28 + v25;
        if (__OFADD__(v28, v25))
          goto LABEL_22;
      }
      v29 = *v21;
      if (*v21)
      {
        v30 = BaseAddress[i];
        *(__n128 *)seed = a9;
        v44 = a10;
        v45 = a11;
        v46 = a12;
        v47 = 0;
        result = a3(v30, a1, v23, seed, a5, a6, a7, a8 & 1);
        *(_DWORD *)(v29 + 4 * i) = result;
      }
    }
  }
  if (*v16 == 1)
  {
    v42 = 0;
    result = *(_QWORD *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_ioSurface);
    if (result)
    {
      result = IOSurfaceUnlock((IOSurfaceRef)result, 2u, &v42);
      *v16 = 0;
      return result;
    }
LABEL_25:
    __break(1u);
  }
  return result;
}

__IOSurface *SegmentationProcessor.SegmentedTexture.__allocating_init(width:height:backgroundColor:)(Swift::Int a1, Swift::Int a2, int a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return SurfaceTexture.init(width:height:backgroundColor:)(a1, a2, a3);
}

id SegmentationProcessor.SegmentedTexture.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SegmentationProcessor.SegmentedTexture();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_QWORD *sub_22161BCFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2556DA130);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_22161D414((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_2215D2090();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

void sub_22161BDE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_2215CA39C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_2215CF670();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  sub_2215CD028(v15, a4 & 1);
  v20 = sub_2215CA39C(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_221653B64();
  __break(1u);
}

uint64_t sub_22161BF3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_2215CA39C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_2215CFA04();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_2215CD630(result, a4 & 1);
  result = sub_2215CA39C(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_221653B64();
  __break(1u);
  return result;
}

uint64_t sub_22161C08C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_2215CA39C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_2215CFBB0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_2215CD938(v15, a4 & 1);
  v21 = sub_2215CA39C(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_221653B64();
  __break(1u);
  return result;
}

unint64_t sub_22161C1E8(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t result;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[11];
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  v4 = v3;
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v9 = *((_BYTE *)a1 + 32);
  v37 = *a1;
  v38 = a1[3];
  v39 = a1[4];
  v40 = a1[5];
  v10 = *((_QWORD *)a1 + 12);
  v41 = a1[7];
  v42 = a1[8];
  v12 = *((_DWORD *)a1 + 38);
  v11 = *((_DWORD *)a1 + 39);
  v13 = *((_DWORD *)a1 + 40);
  v14 = *((_QWORD *)a1 + 21);
  v43 = *((_QWORD *)a1 + 18);
  v44 = *((_QWORD *)a1 + 22);
  v63 = v9;
  v15 = *v3;
  v17 = sub_2215CA4BC(a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a3 & 1) != 0)
    {
LABEL_7:
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v23 = *(_QWORD *)(*v4 + 56) + 192 * v17;
        v24 = *(_OWORD *)(v23 + 48);
        v26 = *(_OWORD *)v23;
        v25 = *(_OWORD *)(v23 + 16);
        v45[2] = *(_OWORD *)(v23 + 32);
        v45[3] = v24;
        v45[0] = v26;
        v45[1] = v25;
        v27 = *(_OWORD *)(v23 + 112);
        v29 = *(_OWORD *)(v23 + 64);
        v28 = *(_OWORD *)(v23 + 80);
        v45[6] = *(_OWORD *)(v23 + 96);
        v45[7] = v27;
        v45[4] = v29;
        v45[5] = v28;
        v31 = *(_OWORD *)(v23 + 144);
        v30 = *(_OWORD *)(v23 + 160);
        v32 = *(_OWORD *)(v23 + 128);
        v46 = *(_QWORD *)(v23 + 176);
        v45[9] = v31;
        v45[10] = v30;
        v45[8] = v32;
        result = sub_2215FF380((uint64_t)v45);
        *(_OWORD *)v23 = v37;
        *(_QWORD *)(v23 + 16) = v7;
        *(_QWORD *)(v23 + 24) = v8;
        *(_BYTE *)(v23 + 32) = v63;
        *(_OWORD *)(v23 + 48) = v38;
        *(_OWORD *)(v23 + 64) = v39;
        *(_OWORD *)(v23 + 80) = v40;
        *(_QWORD *)(v23 + 96) = v10;
        *(_OWORD *)(v23 + 112) = v41;
        *(_OWORD *)(v23 + 128) = v42;
        *(_QWORD *)(v23 + 144) = v43;
        *(_DWORD *)(v23 + 152) = v12;
        *(_DWORD *)(v23 + 156) = v11;
        *(_DWORD *)(v23 + 160) = v13;
        *(_QWORD *)(v23 + 168) = v14;
        *(_QWORD *)(v23 + 176) = v44;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      sub_2215CFF94();
      goto LABEL_7;
    }
    sub_2215CDFE0(v20, a3 & 1);
    v34 = sub_2215CA4BC(a2);
    if ((v21 & 1) == (v35 & 1))
    {
      v17 = v34;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v36 = (_QWORD *)*v4;
      v47 = v37;
      v48 = v7;
      v49 = v8;
      v50 = v9;
      v51 = v38;
      v52 = v39;
      v53 = v40;
      v54 = v10;
      v55 = v41;
      v56 = v42;
      v57 = v43;
      v58 = v12;
      v59 = v11;
      v60 = v13;
      v61 = v14;
      v62 = v44;
      return sub_22161CF10(v17, a2, (uint64_t)&v47, v36);
    }
  }
  result = sub_221653B64();
  __break(1u);
  return result;
}

uint64_t sub_22161C434(unsigned __int8 a1, char a2, float a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_2215CA344(a1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_2215D01B8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(float *)(v16[7] + 4 * v10) = a3;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a1;
    *(float *)(v16[7] + 4 * v10) = a3;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_2215CE37C(result, a2 & 1);
  result = sub_2215CA344(a1);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_221653B64();
  __break(1u);
  return result;
}

id sub_22161C558(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  id result;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v28[3];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v4 = (_QWORD **)v3;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v26 = *(_QWORD *)(a1 + 48);
  v12 = *(_DWORD *)(a1 + 56);
  v13 = (_QWORD *)*v3;
  v15 = sub_2215CA4EC((uint64_t)a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = v13[3];
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v4;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = v21[7] + (v15 << 6);
        swift_bridgeObjectRelease();
        result = (id)swift_bridgeObjectRelease();
        *(_QWORD *)v22 = v6;
        *(_QWORD *)(v22 + 8) = v7;
        *(_QWORD *)(v22 + 16) = v8;
        *(_DWORD *)(v22 + 24) = v9;
        *(_QWORD *)(v22 + 32) = v11;
        *(_QWORD *)(v22 + 40) = v10;
        *(_QWORD *)(v22 + 48) = v26;
        *(_DWORD *)(v22 + 56) = v12;
        return result;
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      sub_2215D0344();
      goto LABEL_7;
    }
    sub_2215CE644(v18, a3 & 1);
    v24 = sub_2215CA4EC((uint64_t)a2);
    if ((v19 & 1) == (v25 & 1))
    {
      v15 = v24;
      v21 = *v4;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v28[0] = v6;
      v28[1] = v7;
      v28[2] = v8;
      v29 = v9;
      v30 = v11;
      v31 = v10;
      v32 = v26;
      v33 = v12;
      sub_22161CFB8(v15, (uint64_t)a2, v28, v21);
      return a2;
    }
  }
  sub_2215DDC80(0, (unint64_t *)&qword_2556DA0B0);
  result = (id)sub_221653B64();
  __break(1u);
  return result;
}

uint64_t sub_22161C6F8(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_2215CA344(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2215D0530();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_2215CE96C(result, a3 & 1);
  result = sub_2215CA344(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_221653B64();
  __break(1u);
  return result;
}

uint64_t sub_22161C82C(char a1, uint64_t a2, char a3, float a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v5 = (_QWORD **)v4;
  v10 = sub_221652FD0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v4;
  v16 = sub_2215CA2D8(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v22 = *v5;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7] + 8 * v16;
        *(_BYTE *)v23 = a1;
        *(float *)(v23 + 4) = a4;
        return result;
      }
      goto LABEL_11;
    }
    if (v21 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)sub_2215D06D0();
      goto LABEL_7;
    }
    sub_2215CEC3C(result, a3 & 1);
    result = sub_2215CA2D8(a2);
    if ((v20 & 1) == (v24 & 1))
    {
      v16 = result;
      v22 = *v5;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      return sub_22161D070(v16, (uint64_t)v13, a1, v22, a4);
    }
  }
  result = sub_221653B64();
  __break(1u);
  return result;
}

unint64_t sub_22161C994(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t result;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE __dst[496];
  uint64_t v55[4];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

  v4 = v3;
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 16);
  v28 = *(_OWORD *)(a1 + 32);
  v29 = *(_OWORD *)(a1 + 48);
  v30 = *(_OWORD *)(a1 + 64);
  v31 = *(_OWORD *)(a1 + 80);
  v32 = *(_OWORD *)(a1 + 96);
  v33 = *(_OWORD *)(a1 + 112);
  v34 = *(_OWORD *)(a1 + 128);
  v35 = *(_OWORD *)(a1 + 144);
  v36 = *(_OWORD *)(a1 + 160);
  v37 = *(_OWORD *)(a1 + 176);
  v38 = *(_OWORD *)(a1 + 192);
  v39 = *(_OWORD *)(a1 + 208);
  v40 = *(_OWORD *)(a1 + 224);
  v41 = *(_OWORD *)(a1 + 240);
  v42 = *(_OWORD *)(a1 + 256);
  v43 = *(_OWORD *)(a1 + 272);
  v10 = *(_QWORD *)(a1 + 288);
  v9 = *(_QWORD *)(a1 + 296);
  v12 = *(_QWORD *)(a1 + 304);
  v11 = *(_QWORD *)(a1 + 312);
  v44 = *(_OWORD *)(a1 + 320);
  v45 = *(_OWORD *)(a1 + 336);
  v46 = *(_OWORD *)(a1 + 352);
  v47 = *(_OWORD *)(a1 + 368);
  v13 = *(_DWORD *)(a1 + 384);
  v14 = *(_DWORD *)(a1 + 388);
  v48 = *(_OWORD *)(a1 + 400);
  v49 = *(_OWORD *)(a1 + 416);
  v51 = *(_OWORD *)(a1 + 432);
  v52 = *(_OWORD *)(a1 + 448);
  v15 = *v3;
  v50 = *(_OWORD *)(a1 + 464);
  v53 = *(_OWORD *)(a1 + 480);
  v17 = sub_2215CA488(a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a2 & 1) != 0)
    {
LABEL_7:
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v23 = (uint64_t *)(*(_QWORD *)(*v4 + 56) + 496 * v17);
        memcpy(__dst, v23, sizeof(__dst));
        result = sub_2215E737C((uint64_t)__dst);
        v23[2] = v8;
        *v23 = v7;
        *((_OWORD *)v23 + 2) = v28;
        *((_OWORD *)v23 + 3) = v29;
        *((_OWORD *)v23 + 4) = v30;
        *((_OWORD *)v23 + 5) = v31;
        *((_OWORD *)v23 + 6) = v32;
        *((_OWORD *)v23 + 7) = v33;
        *((_OWORD *)v23 + 8) = v34;
        *((_OWORD *)v23 + 9) = v35;
        *((_OWORD *)v23 + 10) = v36;
        *((_OWORD *)v23 + 11) = v37;
        *((_OWORD *)v23 + 12) = v38;
        *((_OWORD *)v23 + 13) = v39;
        *((_OWORD *)v23 + 14) = v40;
        *((_OWORD *)v23 + 15) = v41;
        *((_OWORD *)v23 + 16) = v42;
        *((_OWORD *)v23 + 17) = v43;
        v23[36] = v10;
        v23[37] = v9;
        v23[38] = v12;
        v23[39] = v11;
        *((_OWORD *)v23 + 20) = v44;
        *((_OWORD *)v23 + 21) = v45;
        *((_OWORD *)v23 + 22) = v46;
        *((_OWORD *)v23 + 23) = v47;
        *((_DWORD *)v23 + 96) = v13;
        *((_DWORD *)v23 + 97) = v14;
        *((_OWORD *)v23 + 25) = v48;
        *((_OWORD *)v23 + 26) = v49;
        *((_OWORD *)v23 + 27) = v51;
        *((_OWORD *)v23 + 28) = v52;
        *((_OWORD *)v23 + 29) = v50;
        *((_OWORD *)v23 + 30) = v53;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a2 & 1) == 0)
    {
      sub_2215D090C();
      goto LABEL_7;
    }
    sub_2215CEFF0(v20, a2 & 1);
    v25 = sub_2215CA488(a3);
    if ((v21 & 1) == (v26 & 1))
    {
      v17 = v25;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v55[2] = v8;
      v27 = (_QWORD *)*v4;
      v55[0] = v7;
      v56 = v28;
      v57 = v29;
      v58 = v30;
      v59 = v31;
      v60 = v32;
      v61 = v33;
      v62 = v34;
      v63 = v35;
      v64 = v36;
      v65 = v37;
      v66 = v38;
      v67 = v39;
      v68 = v40;
      v69 = v41;
      v70 = v42;
      v71 = v43;
      v72 = v10;
      v73 = v9;
      v74 = v12;
      v75 = v11;
      v76 = v44;
      v77 = v45;
      v78 = v46;
      v79 = v47;
      v80 = v13;
      v81 = v14;
      v82 = v48;
      v83 = v49;
      v84 = v51;
      v85 = v52;
      v86 = v50;
      v87 = v53;
      return sub_22161D11C(v17, v55, v27, a3);
    }
  }
  result = sub_221653B64();
  __break(1u);
  return result;
}

uint64_t sub_22161CD1C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_221652FD0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_2215CA2D8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_2215CFD64();
    goto LABEL_7;
  }
  sub_2215CDC4C(v17, a3 & 1);
  v23 = sub_2215CA2D8(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_221653B64();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_22161CE78(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_22161CE78(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_221652FD0();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_22161CF10(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v4 = *(_BYTE *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 64);
  v7 = *(_OWORD *)(a3 + 80);
  v8 = *(_QWORD *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 112);
  v10 = *(_OWORD *)(a3 + 128);
  v11 = *(_QWORD *)(a3 + 144);
  v12 = *(_DWORD *)(a3 + 160);
  v13 = *(_QWORD *)(a3 + 168);
  v14 = *(_QWORD *)(a3 + 176);
  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v15 = a4[7] + 192 * result;
  v16 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v15 = *(_OWORD *)a3;
  *(_OWORD *)(v15 + 16) = v16;
  *(_BYTE *)(v15 + 32) = v4;
  *(_OWORD *)(v15 + 48) = v5;
  *(_OWORD *)(v15 + 64) = v6;
  *(_OWORD *)(v15 + 80) = v7;
  *(_QWORD *)(v15 + 96) = v8;
  *(_OWORD *)(v15 + 112) = v9;
  *(_OWORD *)(v15 + 128) = v10;
  *(_QWORD *)(v15 + 144) = v11;
  *(_QWORD *)(v15 + 152) = *(_QWORD *)(a3 + 152);
  *(_DWORD *)(v15 + 160) = v12;
  *(_QWORD *)(v15 + 168) = v13;
  *(_QWORD *)(v15 + 176) = v14;
  v17 = a4[2];
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    a4[2] = v19;
  return result;
}

unint64_t sub_22161CFB8(unint64_t result, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v4 = *a3;
  v5 = *((_DWORD *)a3 + 6);
  v6 = a3[4];
  v7 = *((_DWORD *)a3 + 14);
  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v8 = a4[7] + (result << 6);
  *(_QWORD *)v8 = v4;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a3 + 1);
  *(_DWORD *)(v8 + 24) = v5;
  *(_QWORD *)(v8 + 32) = v6;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 + 5);
  *(_DWORD *)(v8 + 56) = v7;
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

unint64_t sub_22161D02C(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_22161D070(unint64_t a1, uint64_t a2, char a3, _QWORD *a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = sub_221652FD0();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = a4[7] + 8 * a1;
  *(_BYTE *)v13 = a3;
  *(float *)(v13 + 4) = a5;
  v14 = a4[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a4[2] = v16;
  return result;
}

unint64_t sub_22161D11C(unint64_t result, uint64_t *a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;

  v4 = *a2;
  v5 = a2[2];
  v6 = *((_OWORD *)a2 + 2);
  v7 = *((_OWORD *)a2 + 3);
  v8 = *((_OWORD *)a2 + 4);
  v9 = *((_OWORD *)a2 + 5);
  v10 = *((_OWORD *)a2 + 6);
  v11 = *((_OWORD *)a2 + 7);
  v12 = *((_OWORD *)a2 + 8);
  v13 = *((_OWORD *)a2 + 9);
  v14 = *((_OWORD *)a2 + 10);
  v15 = *((_OWORD *)a2 + 11);
  v16 = *((_OWORD *)a2 + 12);
  v17 = *((_OWORD *)a2 + 13);
  v18 = *((_OWORD *)a2 + 14);
  v19 = *((_OWORD *)a2 + 15);
  v20 = *((_OWORD *)a2 + 16);
  v21 = *((_OWORD *)a2 + 17);
  v22 = *((_OWORD *)a2 + 20);
  v23 = *((_OWORD *)a2 + 21);
  v24 = *((_OWORD *)a2 + 22);
  v25 = *((_OWORD *)a2 + 23);
  v26 = *((_OWORD *)a2 + 25);
  v27 = *((_OWORD *)a2 + 26);
  v28 = *((_OWORD *)a2 + 27);
  v29 = *((_OWORD *)a2 + 28);
  v30 = *((_OWORD *)a2 + 29);
  v31 = *((_OWORD *)a2 + 30);
  a3[(result >> 6) + 8] |= 1 << result;
  *(double *)(a3[6] + 8 * result) = a4;
  v32 = a3[7] + 496 * result;
  *(_QWORD *)v32 = v4;
  *(_QWORD *)(v32 + 16) = v5;
  *(_OWORD *)(v32 + 32) = v6;
  *(_OWORD *)(v32 + 48) = v7;
  *(_OWORD *)(v32 + 64) = v8;
  *(_OWORD *)(v32 + 80) = v9;
  *(_OWORD *)(v32 + 96) = v10;
  *(_OWORD *)(v32 + 112) = v11;
  *(_OWORD *)(v32 + 128) = v12;
  *(_OWORD *)(v32 + 144) = v13;
  *(_OWORD *)(v32 + 160) = v14;
  *(_OWORD *)(v32 + 176) = v15;
  *(_OWORD *)(v32 + 192) = v16;
  *(_OWORD *)(v32 + 208) = v17;
  *(_OWORD *)(v32 + 224) = v18;
  *(_OWORD *)(v32 + 240) = v19;
  *(_OWORD *)(v32 + 256) = v20;
  *(_OWORD *)(v32 + 272) = v21;
  v33 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(v32 + 288) = *((_OWORD *)a2 + 18);
  *(_OWORD *)(v32 + 304) = v33;
  *(_OWORD *)(v32 + 320) = v22;
  *(_OWORD *)(v32 + 336) = v23;
  *(_OWORD *)(v32 + 352) = v24;
  *(_OWORD *)(v32 + 368) = v25;
  *(_QWORD *)(v32 + 384) = a2[48];
  *(_OWORD *)(v32 + 400) = v26;
  *(_OWORD *)(v32 + 416) = v27;
  *(_OWORD *)(v32 + 432) = v28;
  *(_OWORD *)(v32 + 448) = v29;
  *(_OWORD *)(v32 + 464) = v30;
  *(_OWORD *)(v32 + 480) = v31;
  v34 = a3[2];
  v35 = __OFADD__(v34, 1);
  v36 = v34 + 1;
  if (v35)
    __break(1u);
  else
    a3[2] = v36;
  return result;
}

uint64_t sub_22161D1FC(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v10 = sub_221652FD0();
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  if (v14)
  {
    v15 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v15[7] + 8 * a4) = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      sub_22161CE78(a4, (uint64_t)v13, v14, v15);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    sub_2215D0EE4(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_22161D2E8(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  id v19;
  uint64_t v21[3];
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  if (*(_QWORD *)a1)
  {
    v15 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v16 = v15[7] + (a4 << 6);
      *(_QWORD *)v16 = v7;
      *(_QWORD *)(v16 + 8) = v8;
      *(_QWORD *)(v16 + 16) = v10;
      *(_DWORD *)(v16 + 24) = v9;
      *(_QWORD *)(v16 + 32) = v11;
      *(_QWORD *)(v16 + 40) = v12;
      *(_QWORD *)(v16 + 48) = v13;
      *(_DWORD *)(v16 + 56) = v14;
    }
    else
    {
      v21[0] = *(_QWORD *)a1;
      v21[1] = v8;
      v21[2] = v10;
      v22 = v9;
      v23 = v11;
      v24 = v12;
      v25 = v13;
      v26 = v14;
      sub_22161CFB8(a4, (uint64_t)a5, v21, v15);
      v19 = a5;
    }
  }
  else if ((a2 & 1) != 0)
  {
    sub_2215DDC80(0, (unint64_t *)&qword_2556DA0B0);
    swift_arrayDestroy();
    sub_2215D1330(a4, *a3);
  }
  return sub_22161D7D0(v7);
}

uint64_t sub_22161D414(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_22161D610(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t type metadata accessor for SegmentationProcessor.SegmentedTexture()
{
  return objc_opt_self();
}

unint64_t sub_22161D658()
{
  unint64_t result;

  result = qword_2556DD0C8;
  if (!qword_2556DD0C8)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for SegmentationProcessor.DebugOptions, &type metadata for SegmentationProcessor.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DD0C8);
  }
  return result;
}

unint64_t sub_22161D6A0()
{
  unint64_t result;

  result = qword_2556DD0D0;
  if (!qword_2556DD0D0)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for SegmentationProcessor.DebugOptions, &type metadata for SegmentationProcessor.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DD0D0);
  }
  return result;
}

unint64_t sub_22161D6E8()
{
  unint64_t result;

  result = qword_2556DD0D8;
  if (!qword_2556DD0D8)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for SegmentationProcessor.DebugOptions, &type metadata for SegmentationProcessor.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DD0D8);
  }
  return result;
}

unint64_t sub_22161D730()
{
  unint64_t result;

  result = qword_2556DD0E0;
  if (!qword_2556DD0E0)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for SegmentationProcessor.DebugOptions, &type metadata for SegmentationProcessor.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_2556DD0E0);
  }
  return result;
}

uint64_t type metadata accessor for SegmentationProcessor()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SegmentationProcessor.DebugOptions()
{
  return &type metadata for SegmentationProcessor.DebugOptions;
}

uint64_t sub_22161D7A4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_22161D7D0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_22161D7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2556DD0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t RangeReplaceableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v4)(_QWORD *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  _QWORD v11[5];

  if (a1 < 0 || (sub_221653510(), v11[0] <= a1))
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v11[4] = a1;
    v4 = (void (*)(_QWORD *, _QWORD))sub_22165357C();
    v6 = v5;
    v7 = swift_getAssociatedTypeWitness();
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v6, v7);
    v4(v11, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
}

BOOL RangeReplaceableCollection<>.isNotEmpty.getter()
{
  return (sub_221653504() & 1) == 0;
}

uint64_t RangeReplaceableCollection<>.offsetting(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  _QWORD v16[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v16 - v12;
  result = sub_2216534F8();
  if (result)
  {
    if (a1 != 0x8000000000000000 || result != -1)
    {
      v15 = a1 % result;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
      v16[1] = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2556DD558);
      sub_22161DB34();
      sub_221653558();
      sub_221653594();
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      sub_2216535A0();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_22161DB34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2556DD560;
  if (!qword_2556DD560)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2556DD558);
    result = MEMORY[0x22766FA4C](MEMORY[0x24BEE2C68], v1);
    atomic_store(result, (unint64_t *)&qword_2556DD560);
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.dequeueFirst()@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v4 = (char *)&v13 - v3;
  v5 = sub_221653714();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - v7;
  sub_221653540();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = 1;
    v10 = v14;
  }
  else
  {
    v11 = v14;
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v14, v8, AssociatedTypeWitness);
    sub_221653588();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, AssociatedTypeWitness);
    v9 = 0;
    v10 = v11;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, v9, 1, AssociatedTypeWitness);
}

uint64_t RangeReplaceableCollection<>.sum()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = &v11[-v8];
  sub_221653720();
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v15 = AssociatedTypeWitness;
  sub_2216532DC();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_22161DDE8()
{
  swift_getAssociatedTypeWitness();
  return sub_22165399C();
}

uint64_t RangeReplaceableCollection<>.removeFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;

  v16[2] = a1;
  v17 = a3;
  v16[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = sub_221653714();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v16 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v16 - v10;
  sub_221653564();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v12 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v17, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, AssociatedTypeWitness);
    v14 = v17;
    sub_2216535AC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
    v15 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  }
}

uint64_t RangeReplaceableCollection<>.remove(allFrom:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_2216533FC();
  MEMORY[0x22766FA4C](MEMORY[0x24BEE12C8], v0);
  return sub_2216532E8();
}

uint64_t sub_22161E0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  swift_getAssociatedTypeWitness();
  v6 = sub_221653714();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - v8;
  RangeReplaceableCollection<>.removeFirst(_:)(a1, a4, (uint64_t)v11 - v8);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_22161E1A8(uint64_t a1)
{
  uint64_t *v1;

  return sub_22161E0CC(a1, v1[5], v1[2], v1[3]);
}

uint64_t RangeReplaceableCollection<>.removingFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a4;
  v29 = a1;
  v30 = a5;
  v26 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v23 = (char *)&v23 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v9 = sub_221653714();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v23 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = MEMORY[0x24BDAC7A8](v11);
  v17 = (char *)&v23 - v16;
  v18 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v27, a2);
  sub_221653564();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, v8);
    v21 = v23;
    sub_2216535AC();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v25);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v8);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v20, a2);
}

uint64_t Array.init(_:count:)()
{
  uint64_t v0;

  sub_221653174();
  v0 = sub_221653180();
  MEMORY[0x22766FA4C](MEMORY[0x24BEE09D8], v0);
  return sub_221653414();
}

id KernelHeightMap.__allocating_init(device:)(uint64_t a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_msgSend(objc_allocWithZone(v1), sel_initWithDevice_, a1);
  swift_unknownObjectRelease();
  return v2;
}

id KernelHeightMap.init(device:)(void *a1)
{
  id v1;

  v1 = sub_22161E894(a1);
  swift_unknownObjectRelease();
  return v1;
}

BOOL KernelHeightMap.encode(commandBuffer:uniforms:depthTexture:confidenceTexture:colorTexture:inMapTexture:outMapTexture:)(void *a1, _OWORD *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  id v14;
  void *v15;
  _OWORD *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  _QWORD v30[3];

  v14 = objc_msgSend(a1, sel_computeCommandEncoder);
  if (v14)
  {
    v27 = (uint64_t)objc_msgSend(a3, sel_width) / 32;
    v26 = (uint64_t)objc_msgSend(a3, sel_height) / 32;
    v15 = *(void **)(v7 + OBJC_IVAR____TtC17MeasureFoundation15KernelHeightMap_uniformsBuffer);
    v16 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v17 = v15;
    v18 = a2[13];
    v16[12] = a2[12];
    v16[13] = v18;
    v16[14] = a2[14];
    v19 = a2[9];
    v16[8] = a2[8];
    v16[9] = v19;
    v20 = a2[11];
    v16[10] = a2[10];
    v16[11] = v20;
    v21 = a2[5];
    v16[4] = a2[4];
    v16[5] = v21;
    v22 = a2[7];
    v16[6] = a2[6];
    v16[7] = v22;
    v23 = a2[1];
    *v16 = *a2;
    v16[1] = v23;
    v24 = a2[3];
    v16[2] = a2[2];
    v16[3] = v24;
    objc_msgSend(v14, sel_setComputePipelineState_, *(_QWORD *)(v7 + OBJC_IVAR____TtC17MeasureFoundation15KernelHeightMap_computePipeline));
    objc_msgSend(v14, sel_setBuffer_offset_atIndex_, v17, 0, 0);
    objc_msgSend(v14, sel_setTexture_atIndex_, a3, 0);
    objc_msgSend(v14, sel_setTexture_atIndex_, a4, 1);
    objc_msgSend(v14, sel_setTexture_atIndex_, a5, 2);
    objc_msgSend(v14, sel_setTexture_atIndex_, a6, 3);
    objc_msgSend(v14, sel_setTexture_atIndex_, a7, 4);
    v30[0] = v27;
    v30[1] = v26;
    v30[2] = 1;
    v28 = vdupq_n_s64(0x20uLL);
    v29 = 1;
    objc_msgSend(v14, sel_dispatchThreadgroups_threadsPerThreadgroup_, v30, &v28);
    objc_msgSend(v14, sel_endEncoding);
    swift_unknownObjectRelease();
  }
  return v14 != 0;
}

id KernelHeightMap.__allocating_init(coder:device:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithCoder_device_, a1, a2);

  swift_unknownObjectRelease();
  return v4;
}

void KernelHeightMap.init(coder:device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KernelHeightMap.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_22161E894(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id result;
  id v15;
  objc_super v16;
  id v17[2];

  v2 = v1;
  v17[1] = *(id *)MEMORY[0x24BDAC8D0];
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = qword_2556D8D90;
  v6 = v2;
  if (v5 != -1)
    swift_once();
  v7 = (void *)static MetalBundle.library;
  v8 = (void *)sub_22165318C();
  v9 = objc_msgSend(v7, sel_newFunctionWithName_, v8);

  if (!v9)
  {
    __break(1u);
    goto LABEL_8;
  }
  v17[0] = 0;
  v10 = objc_msgSend(a1, sel_newComputePipelineStateWithFunction_error_, v9, v17);
  swift_unknownObjectRelease();
  v11 = v17[0];
  if (v10)
  {
    *(_QWORD *)&v6[OBJC_IVAR____TtC17MeasureFoundation15KernelHeightMap_computePipeline] = v10;
    v12 = v11;
    v13 = objc_msgSend(a1, sel_newBufferWithLength_options_, 240, 0);
    if (v13)
    {
      *(_QWORD *)&v6[OBJC_IVAR____TtC17MeasureFoundation15KernelHeightMap_uniformsBuffer] = v13;

      v16.receiver = v6;
      v16.super_class = ObjectType;
      return objc_msgSendSuper2(&v16, sel_initWithDevice_, a1);
    }
LABEL_8:
    __break(1u);
  }
  v15 = v17[0];
  sub_221652ED4();

  swift_willThrow();
  result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for KernelHeightMap()
{
  return objc_opt_self();
}

__int128 *SegmentationResult.outputSize.unsafeMutableAddressor()
{
  if (qword_2556D8ED0 != -1)
    swift_once();
  return &static SegmentationResult.outputSize;
}

Swift::Float __swiftcall SegmentationResult.confidence(at:)(Swift::tuple_x_Int_y_Int at)
{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  BOOL v4;
  uint64_t v5;
  Swift::Float result;

  if (at.x < 0)
    return 0.0;
  v2 = *(_QWORD *)(v1 + 72);
  if (v2 <= at.x || at.y < 0 || *(_QWORD *)(v1 + 80) <= at.y)
    return 0.0;
  v3 = at.y * v2;
  if ((unsigned __int128)(at.y * (__int128)v2) >> 64 == (at.y * v2) >> 63)
  {
    v4 = __OFADD__(v3, at.x);
    v5 = v3 + at.x;
    if (!v4)
      return sub_22161F3D8(v5);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t SegmentationResult.normal(at:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, __n128 a6)
{
  _QWORD *v6;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  float v15;
  float v16;
  __n128 v17;
  __n128 v18;
  __int128 v19;

  if (a1 < 0)
    return 0;
  result = 0;
  v9 = v6[9];
  if (v9 > a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (v6[10] <= a2)
      return 0;
    v10 = a2 * v9;
    if ((unsigned __int128)(a2 * (__int128)v9) >> 64 == (a2 * v9) >> 63)
    {
      v11 = __OFADD__(v10, a1);
      v12 = v10 + a1;
      if (!v11)
      {
        a6 = *(__n128 *)(v6[8] + 16 * v12);
        if (qword_2556D8DD0 == -1)
        {
LABEL_8:
          v13 = 0;
          a6.n128_u32[3] = 0;
          while (1)
          {
            v18 = a6;
            v15 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
            v19 = static SIMD3<>.zero;
            v16 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
            v14 = v15 == v16;
            if (v13 == 2)
              break;
            while (1)
            {
              ++v13;
              if (v14)
                break;
              if (v13 == 2)
                return a6.n128_u64[0];
              v14 = 0;
            }
          }
          if (v15 != v16)
            return a6.n128_u64[0];
          return 0;
        }
LABEL_15:
        v17 = a6;
        swift_once();
        a6 = v17;
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

double static SegmentationResult.realign(vector:sinAngle:cosAngle:)(int32x2_t a1, float a2, float a3)
{
  float32x2_t v3;
  float32x2_t v4;
  double v5;

  v3 = vmul_n_f32((float32x2_t)vrev64_s32(a1), a2);
  v4 = vmul_n_f32((float32x2_t)a1, a3);
  LODWORD(v5) = vsub_f32(v4, v3).u32[0];
  HIDWORD(v5) = vadd_f32(v4, v3).i32[1];
  return v5;
}

double static SegmentationResult.cameraToWorld(vector:cameraTransform:)(float32x4_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x4_t a5)
{
  float32x4_t v5;
  double result;

  *(float32x2_t *)v5.f32 = simd_float4x4.apply(to:)(a1, a2, a3, a4, *(float32x2_t *)a5.f32);
  *(_QWORD *)&result = vsubq_f32(v5, a5).u64[0];
  return result;
}

CVBufferRef_optional *SegmentationResult.__allocating_init(_:)(void *a1)
{
  swift_allocObject();
  return SegmentationResult.init(_:)(a1);
}

uint64_t (**SegmentationResult.debugNormalRenderer.unsafeMutableAddressor())()
{
  return &static SegmentationResult.debugNormalRenderer;
}

uint64_t (**SegmentationResult.debugSegRenderer.unsafeMutableAddressor())()
{
  return &static SegmentationResult.debugSegRenderer;
}

void *SegmentationResult.isInLandscape.unsafeMutableAddressor()
{
  return &static SegmentationResult.isInLandscape;
}

MeasureFoundation::SegmentationResult::Label_optional __swiftcall SegmentationResult.label(at:)(Swift::tuple_x_Int_y_Int at)
{
  _QWORD *v1;
  char v2;
  Swift::Int v3;
  Swift::Int v4;
  BOOL v5;
  Swift::Int v6;
  uint64_t v7;
  unsigned __int8 v8;

  v2 = 0;
  if (at.x < 0)
    goto LABEL_12;
  v3 = v1[9];
  if (v3 <= at.x || at.y < 0)
    goto LABEL_12;
  if (v1[10] <= at.y)
    goto LABEL_11;
  v4 = at.y * v3;
  if ((unsigned __int128)(at.y * (__int128)v3) >> 64 != (at.y * v3) >> 63)
  {
    __break(1u);
    goto LABEL_14;
  }
  v5 = __OFADD__(v4, at.x);
  v6 = v4 + at.x;
  if (v5)
  {
LABEL_14:
    __break(1u);
    return (MeasureFoundation::SegmentationResult::Label_optional)at.x;
  }
  v7 = *(unsigned __int8 *)(v1[6] + v6);
  if (!objc_msgSend((id)objc_opt_self(), sel_jasperAvailable))
  {
    v8 = sub_22161FAC8(v7) - 1;
    if (v8 <= 0xCu)
    {
      v2 = byte_221658F7C[(char)v8];
LABEL_12:
      LOBYTE(at.x) = v2;
      return (MeasureFoundation::SegmentationResult::Label_optional)at.x;
    }
LABEL_11:
    v2 = 0;
    goto LABEL_12;
  }
  LOBYTE(at.x) = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v7);
  return (MeasureFoundation::SegmentationResult::Label_optional)at.x;
}

Swift::Bool __swiftcall SegmentationResult.Label.sanityCheck(planeAnchor:)(ARPlaneAnchor planeAnchor)
{
  unsigned __int8 v1;
  unsigned int v2;
  id v3;
  _BOOL4 v4;

  v2 = v1;
  v3 = -[objc_class alignment](planeAnchor.super.super.isa, sel_alignment);
  if (v2 >= 8)
    LOBYTE(v4) = 1;
  else
    v4 = (0x3Bu >> v2) & 1;
  if (v3)
    return (v2 & 0xFFFFFFFD) != 1;
  else
    return v4;
}

uint64_t SegmentationResult.Label.debugColor.getter(uint64_t result)
{
  unsigned __int8 v1;

  v1 = result;
  if (qword_2556D8ED8 != -1)
    result = swift_once();
  if (*((_QWORD *)off_2556DD5A8 + 2) > (unint64_t)v1)
    return *((unsigned int *)off_2556DD5A8 + v1 + 8);
  __break(1u);
  return result;
}

void *SegmentationResult.outputHeight.unsafeMutableAddressor()
{
  return &static SegmentationResult.outputHeight;
}

void *SegmentationResult.outputWidth.unsafeMutableAddressor()
{
  return &static SegmentationResult.outputWidth;
}

uint64_t static SegmentationResult.isInLandscape.getter()
{
  return 1;
}

uint64_t static SegmentationResult.outputWidth.getter()
{
  return 192;
}

uint64_t static SegmentationResult.outputHeight.getter()
{
  return 256;
}

double sub_22161EEA0()
{
  double result;

  result = 192.0;
  static SegmentationResult.outputSize = xmmword_221658E10;
  return result;
}

double static SegmentationResult.outputSize.getter()
{
  if (qword_2556D8ED0 != -1)
    swift_once();
  return *(double *)&static SegmentationResult.outputSize;
}

uint64_t sub_22161EF00()
{
  sub_221653B88();
  sub_221653BA0();
  return sub_221653BAC();
}

uint64_t sub_22161EF44()
{
  return sub_221653BA0();
}

uint64_t sub_22161EF6C()
{
  sub_221653B88();
  sub_221653BA0();
  return sub_221653BAC();
}

uint64_t sub_22161EFAC@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_22161EFD4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_22161EFE0()
{
  sub_22161FCA0();
  return sub_221653300();
}

double SegmentationResult.timestamp.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

CVBufferRef_optional *SegmentationResult.init(_:)(void *a1)
{
  CVBufferRef_optional *v1;
  CVBufferRef_optional *v2;
  id v4;
  void *v5;
  CVBufferRef_optional v6;
  id v7;
  void *v8;
  CVBufferRef_optional v9;
  id v10;
  void *v11;
  CVBufferRef_optional v12;
  __CVBuffer *v13;
  __CVBuffer *v14;
  __CVBuffer *v15;
  __CVBuffer *v16;
  size_t Width;
  size_t Height;

  v2 = v1;
  v1[2].value = 0;
  v4 = objc_msgSend(a1, sel_semanticSegmentationBuffer);
  if (!v4)
    goto LABEL_16;
  v5 = v4;
  v6.value = CVBufferRef.clone()().value;

  if (!v6.value)
    goto LABEL_16;
  v7 = objc_msgSend(a1, sel_semanticSegmentationConfidenceBuffer);
  if (!v7 || (v8 = v7, v9.value = CVBufferRef.clone()().value, v8, !v9.value))
  {
    v9.value = v6.value;
LABEL_15:

LABEL_16:
    swift_deallocPartialClassInstance();
    return 0;
  }
  v10 = objc_msgSend(a1, sel_normalsBuffer);
  if (!v10 || (v11 = v10, v12.value = CVBufferRef.clone()().value, v11, !v12.value))
  {

    goto LABEL_15;
  }
  v2[3].value = v6.value;
  v2[4].value = v9.value;
  v2[5].value = v12.value;
  v13 = v6.value;
  v14 = v9.value;
  v15 = v12.value;
  objc_msgSend(a1, sel_timestamp);
  v2[11].value = v16;
  CVPixelBufferLockBaseAddress(v13, 0);
  CVPixelBufferLockBaseAddress(v14, 0);
  CVPixelBufferLockBaseAddress(v15, 0);
  v2[6].value = (CVBufferRef)CVPixelBufferGetBaseAddress(v13);
  v2[7].value = (CVBufferRef)CVPixelBufferGetBaseAddress(v14);
  v2[8].value = (CVBufferRef)CVPixelBufferGetBaseAddress(v15);
  Width = CVPixelBufferGetWidth(v13);
  v2[9].value = (CVBufferRef)Width;
  Height = CVPixelBufferGetHeight(v13);
  v2[10].value = (CVBufferRef)Height;
  if (CVPixelBufferGetPixelFormatType(v13) != 1278226488
    || CVPixelBufferGetPixelFormatType(v14) != 1278226534
    || CVPixelBufferGetPixelFormatType(v15) != 1380410945)
  {
    CVPixelBufferUnlockBaseAddress(v13, 0);
    CVPixelBufferUnlockBaseAddress(v14, 0);
    CVPixelBufferUnlockBaseAddress(v15, 0);

LABEL_20:
    swift_release();
    return 0;
  }
  CVPixelBufferUnlockBaseAddress(v13, 0);
  CVPixelBufferUnlockBaseAddress(v14, 0);
  CVPixelBufferUnlockBaseAddress(v15, 0);

  if (Width != 256 || Height != 192)
    goto LABEL_20;
  return v2;
}

unint64_t SegmentationResult.features(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;

  if (a1 < 0)
    return 33;
  v4 = *(_QWORD *)(v2 + 72);
  result = 33;
  if (v4 > a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(v2 + 80) > a2)
    {
      v6 = a2 * v4;
      if ((unsigned __int128)(a2 * (__int128)v4) >> 64 == (a2 * v4) >> 63)
      {
        result = v6 + a1;
        if (!__OFADD__(v6, a1))
          return sub_22161F320(result);
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
    return 33;
  }
  return result;
}

unint64_t sub_22161F320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + a1);
  if (objc_msgSend((id)objc_opt_self(), sel_jasperAvailable))
  {
    v4 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v3);
    if (v4 == 33)
      v5 = 0;
    else
      v5 = v4;
  }
  else
  {
    v6 = sub_22161FAC8(v3) - 1;
    if (v6 > 0xCu)
      v5 = 0;
    else
      v5 = byte_221658F89[(char)v6];
  }
  return v5 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v1 + 56) + 4 * a1) << 32);
}

float sub_22161F3D8(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(float *)(*(_QWORD *)(v1 + 56) + 4 * a1);
  if ((LODWORD(result) & 0x7FFFFFFF) == 0x7F800000)
  {
    if (qword_2556D8F30 != -1)
      swift_once();
    v3 = qword_2556E46C8;
    v4 = unk_2556E46D0;
    sub_221653ABC();
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_221653210();
    swift_bridgeObjectRelease();
    sub_221653ABC();
    swift_bridgeObjectRetain();
    sub_221653210();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_221653624();
    _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(0xD00000000000005ELL, 0x8000000221660730, v5, 0, v3, v4);
    swift_bridgeObjectRelease();
    return 0.0;
  }
  return result;
}

float static SegmentationResult.getGravityOffsetAngle(gravity:)(long double a1, long double a2)
{
  float v2;

  v2 = atan2(a1, a2);
  return v2 + 3.1416;
}

__n64 static SegmentationResult.realign(vector:gravity:)(float32x2_t a1, long double a2, long double a3)
{
  float v3;
  __float2 v4;
  float32x2_t v5;
  float32x2_t v6;
  __n64 result;

  v3 = atan2(a2, a3);
  v4 = __sincosf_stret(v3 + 3.1416);
  v5 = vmul_n_f32(a1, v4.__cosval);
  v6 = vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)a1), v4.__sinval);
  result.n64_u32[0] = vadd_f32(v5, v6).u32[0];
  result.n64_u32[1] = vsub_f32(v5, v6).u32[1];
  return result;
}

id *SegmentationResult.deinit()
{
  id *v0;

  return v0;
}

uint64_t SegmentationResult.__deallocating_deinit()
{
  id *v0;

  return swift_deallocClassInstance();
}

uint64_t sub_22161F66C(char a1)
{
  if ((a1 - 1) > 0xAu)
    return 0;
  else
    return byte_221658F96[(char)(a1 - 1)];
}

void sub_22161F698()
{
  off_2556DD5A8 = &unk_24E722B80;
}

unint64_t sub_22161F6AC(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  float v6;
  unint64_t v7;

  result = sub_22161F320(a3);
  v5 = result;
  if (result == 33)
    goto LABEL_16;
  v6 = (float)(*((float *)&result + 1) * *((float *)&result + 1)) * 255.0;
  if ((~LODWORD(v6) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v6 <= -1.0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v6 < 4295000000.0)
  {
    if (qword_2556D8ED8 == -1)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  __break(1u);
LABEL_14:
  result = swift_once();
LABEL_6:
  if (v5 >= *((_QWORD *)off_2556DD5A8 + 2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (a1)
    v7 = a1;
  else
    v7 = 4278190080;
  return _s17MeasureFoundation8GraphicsC9blendBGRA8srcColor03dstG0s6UInt32VAH_AHtFZ_0(v7, *((_DWORD *)off_2556DD5A8 + v5 + 8) & ((v6 << 24) | 0xFFFFFF));
}

unint64_t (*static SegmentationResult.debugSegRenderer.getter())(unsigned int a1, uint64_t a2, uint64_t a3)
{
  return sub_22161F6AC;
}

unint64_t sub_22161F7B0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  unint64_t v21;
  float v22;
  float v23;
  float32x2_t v26;
  float v27;
  __float2 v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v43;
  unsigned int v44;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  _BYTE v58[80];

  sub_2215BDFCC(a4, (uint64_t)&v53);
  v15 = v53;
  v16 = v54;
  v17 = v55;
  v18 = v56;
  v19 = v57;
  v20 = *(float32x4_t *)(*(_QWORD *)(a2 + 64) + 16 * a3);
  if (a1)
    v21 = a1;
  else
    v21 = 4278190080;
  v22 = v20.f32[1];
  v23 = v20.f32[2];
  if (qword_2556D8DD0 != -1)
  {
    v48 = v55;
    v46 = v54;
    v51 = v20;
    swift_once();
    v20 = v51;
    v16 = v46;
    v17 = v48;
  }
  if (v20.f32[0] != *(float *)&static SIMD3<>.zero
    || v22 != *((float *)&static SIMD3<>.zero + 1)
    || v23 != *((float *)&static SIMD3<>.zero + 2))
  {
    v26 = v16;
    v47 = v17;
    if ((a8 & 1) != 0)
    {
      v20.i32[3] = 0;
    }
    else
    {
      v49 = v20;
      v27 = atan2(*(long double *)&a5, *(long double *)&a6);
      v28 = __sincosf_stret(v27 + 3.1416);
      v29 = vmul_n_f32(*(float32x2_t *)v49.f32, v28.__cosval);
      v30 = vmul_n_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v49.f32), v28.__sinval);
      v31.i32[0] = vadd_f32(v29, v30).u32[0];
      v31.i32[1] = vsub_f32(v29, v30).i32[1];
      v31.i64[1] = vnegq_f32(v49).u32[2];
      v20 = v31;
    }
    v32 = (int32x4_t)vmulq_f32(v20, v20);
    v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
    v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
    v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
    v50 = vmulq_n_f32(v20, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
    sub_2215BDFCC(a4, (uint64_t)v58);
    if ((v58[64] & 1) != 0)
    {
      v36 = v50;
    }
    else
    {
      *(float32x2_t *)v37.i8 = simd_float4x4.apply(to:)(v50, v15, v26, v47, v18);
      *(float32x2_t *)v38.f32 = vsub_f32(*(float32x2_t *)v37.i8, v18);
      *(float32x2_t *)&v38.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), v19);
      *(float32x2_t *)v37.i8 = vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
      v35 = (int8x16_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v38, v38), 2);
      v37.i32[0] = vadd_f32(*(float32x2_t *)v35.i8, vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
      *(float32x2_t *)v35.i8 = vrsqrte_f32((float32x2_t)v37.u32[0]);
      *(float32x2_t *)v35.i8 = vmul_f32(*(float32x2_t *)v35.i8, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)));
      v36 = vmulq_n_f32(v38, vmul_f32(*(float32x2_t *)v35.i8, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8))).f32[0]);
    }
    if (qword_2556D8DC8 != -1)
    {
      v52 = v36;
      swift_once();
      v36 = v52;
    }
    *(float32x2_t *)v35.i8 = vmul_f32(vadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)&static SIMD3<>.one), (float32x2_t)0x3F0000003F000000);
    __asm { FMOV            V0.4S, #1.0 }
    v43 = (float32x4_t)vextq_s8(vextq_s8(_Q0, _Q0, 4uLL), v35, 0xCuLL);
    v43.f32[3] = (float)(v36.f32[2] + *((float *)&static SIMD3<>.one + 2)) * 0.5;
    v44 = _s17MeasureFoundation8GraphicsC8multiply5color6normals6UInt32VAH_s5SIMD4VySfGtFZ_0(0xFFFFFFFF, v43);
    return _s17MeasureFoundation8GraphicsC9blendBGRA8srcColor03dstG0s6UInt32VAH_AHtFZ_0(v21, v44);
  }
  return v21;
}

unint64_t (*static SegmentationResult.debugNormalRenderer.getter())(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return sub_22161F7B0;
}

uint64_t _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(uint64_t result)
{
  if (result >= 0x21u)
    return 33;
  else
    return result;
}

uint64_t sub_22161FAC8(uint64_t result)
{
  if (result >= 0xDu)
    return 13;
  else
    return result;
}

unint64_t sub_22161FAE0()
{
  unint64_t result;

  result = qword_2556DD5B0;
  if (!qword_2556DD5B0)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for SegmentationResult.Label, &type metadata for SegmentationResult.Label);
    atomic_store(result, (unint64_t *)&qword_2556DD5B0);
  }
  return result;
}

uint64_t type metadata accessor for SegmentationResult()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for SegmentationResult.Label(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE0)
    goto LABEL_17;
  if (a2 + 32 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 32) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 32;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 32;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 32;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x21;
  v8 = v6 - 33;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SegmentationResult.Label(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 32 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 32) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDF)
    return ((uint64_t (*)(void))((char *)&loc_22161FC20 + 4 * byte_221658E25[v4]))();
  *a1 = a2 + 32;
  return ((uint64_t (*)(void))((char *)sub_22161FC54 + 4 * byte_221658E20[v4]))();
}

uint64_t sub_22161FC54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22161FC5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22161FC64);
  return result;
}

uint64_t sub_22161FC70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22161FC78);
  *(_BYTE *)result = a2 + 32;
  return result;
}

uint64_t sub_22161FC7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22161FC84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SegmentationResult.Label()
{
  return &type metadata for SegmentationResult.Label;
}

unint64_t sub_22161FCA0()
{
  unint64_t result;

  result = qword_2556DD6A0;
  if (!qword_2556DD6A0)
  {
    result = MEMORY[0x22766FA4C](&protocol conformance descriptor for SegmentationResult.Label, &type metadata for SegmentationResult.Label);
    atomic_store(result, (unint64_t *)&qword_2556DD6A0);
  }
  return result;
}

uint64_t ADProcessor.transformer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = *(_QWORD *)(v0 + 56);
LABEL_5:
    swift_retain();
    return v1;
  }
  v2 = v0;
  v3 = *(_QWORD *)(v0 + 272);
  ObjectType = swift_getObjectType();
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
  v6 = objc_msgSend(v5, sel_currentFrame);

  if (v6)
  {
    v7 = objc_msgSend(v6, sel_camera);

    v8 = *(_QWORD *)(v2 + 280);
    v9 = ADProcessor.adConfig.getter();
    type metadata accessor for ADTransformer();
    swift_allocObject();
    v1 = sub_2215BD828(v7, v8, v9);

    swift_release();
    *(_QWORD *)(v2 + 56) = v1;
    swift_retain();
    swift_release();
    goto LABEL_5;
  }
  result = sub_221653984();
  __break(1u);
  return result;
}

uint64_t ADProcessor.outputConfidenceTexture.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;

  if (*(_QWORD *)(v0 + 104))
  {
    v1 = *(_QWORD *)(v0 + 104);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  v2 = *(void **)(v0 + 288);
  ADProcessor.adConfig.getter();
  swift_release();
  ADProcessor.adConfig.getter();
  swift_release();
  result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 256, 192, 13, 0, 1);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 104) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t ADProcessor.outputDepthTexture.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD *)(v0 + 96);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  v2 = *(void **)(v0 + 288);
  ADProcessor.adConfig.getter();
  swift_release();
  ADProcessor.adConfig.getter();
  swift_release();
  result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 256, 192, 55, 0, 1);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 96) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t ADProcessor.outputPersonTexture.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;

  if (*(_QWORD *)(v0 + 112))
  {
    v1 = *(_QWORD *)(v0 + 112);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  v2 = *(void **)(v0 + 288);
  ADProcessor.adConfig.getter();
  swift_release();
  ADProcessor.adConfig.getter();
  swift_release();
  result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 256, 192, 13, 0, 1);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(v0 + 112) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void ADProcessor.capturedTexture.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double Width;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double Height;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CGRect v24;
  CGRect v25;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 80);
  if (v2 != 1)
    goto LABEL_9;
  v3 = *(void **)(v0 + 288);
  ADProcessor.transformer.getter();
  v4 = ADTransformer.cameraCropRect.getter();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_release();
  v24.origin.x = v4;
  v24.origin.y = v6;
  v24.size.width = v8;
  v24.size.height = v10;
  Width = CGRectGetWidth(v24);
  if ((~*(_QWORD *)&Width & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  ADProcessor.transformer.getter();
  v12 = ADTransformer.cameraCropRect.getter();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release();
  v25.origin.x = v12;
  v25.origin.y = v14;
  v25.size.width = v16;
  v25.size.height = v18;
  Height = CGRectGetHeight(v25);
  if ((~*(_QWORD *)&Height & 0x7FF0000000000000) == 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (Height <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (Height < 9.22337204e18)
  {
    v20 = (uint64_t)Height;
    v21 = sub_221620718();
    v22 = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v3, (uint64_t)Width, v20, v21, 0, 1);
    v23 = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 80) = v22;
    swift_unknownObjectRetain();
    sub_2215E86B8(v23);
LABEL_9:
    sub_2215E86E8(v2);
    return;
  }
LABEL_15:
  __break(1u);
}

id ADProcessor.__allocating_init(sceneView:orientation:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;

  swift_allocObject();
  v6 = sub_2216214B0(a1, a2, a3);

  return v6;
}

Swift::OpaquePointer_optional __swiftcall ADProcessor.worldPoints(screenPoints:frame:)(Swift::OpaquePointer screenPoints, ARFrame frame)
{
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  void *v11;
  Swift::OpaquePointer_optional result;

  v4 = (os_unfair_lock_s *)(v2 + 304);
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 304));
  swift_endAccess();
  v5 = *(_QWORD *)(v2 + 144);
  if (v5 && (v6 = *(_QWORD *)(v2 + 152)) != 0)
  {
    swift_retain();
    v7 = sub_221621280((uint64_t)screenPoints._rawValue, v2, v6, v5);
    v8 = swift_release();
    MEMORY[0x24BDAC7A8](v8);
    v9 = sub_221621608(v7, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_2215F1E94);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    os_unfair_lock_unlock(v4);
    swift_endAccess();
  }
  else
  {
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 304));
    swift_endAccess();
    v9 = 0;
  }
  v11 = (void *)v9;
  result.value._rawValue = v11;
  result.is_nil = v10;
  return result;
}

Swift::Void __swiftcall ADProcessor.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  __CVBuffer *v15;
  __CVBuffer *v16;
  id v17;
  unsigned int v18;
  void *v19;
  __CVBuffer *v20;
  simd_float4 v21;
  simd_float4 v22;
  simd_float4 v23;
  simd_float4 v24;
  simd_float4x4 v25;
  simd_float4x4 v26;

  kdebug_trace();
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 304));
  swift_endAccess();
  v3 = -[objc_class camera](frame.super.isa, sel_camera);
  objc_msgSend(v3, sel_viewMatrixForOrientation_, *(_QWORD *)(ADProcessor.transformer.getter() + 304));
  v26 = __invert_f4(v25);
  v23 = v26.columns[1];
  v24 = v26.columns[0];
  v21 = v26.columns[3];
  v22 = v26.columns[2];
  swift_release();
  swift_beginAccess();
  *(simd_float4 *)(v1 + 176) = v24;
  *(simd_float4 *)(v1 + 192) = v23;
  *(simd_float4 *)(v1 + 208) = v22;
  *(simd_float4 *)(v1 + 224) = v21;
  *(_BYTE *)(v1 + 240) = 0;
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 242) == 1)
    sub_221620CD4(frame.super.isa);
  v4 = -[objc_class sceneDepth](frame.super.isa, sel_sceneDepth, *(_OWORD *)&v21, *(_OWORD *)&v22, *(_OWORD *)&v23, *(_OWORD *)&v24);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, sel_depthMap);

  }
  else
  {
    v6 = 0;
  }
  v7 = *(void **)(v1 + 120);
  *(_QWORD *)(v1 + 120) = v6;

  v8 = -[objc_class sceneDepth](frame.super.isa, sel_sceneDepth);
  v9 = objc_msgSend(v8, sel_confidenceMap);

  v10 = *(void **)(v1 + 128);
  *(_QWORD *)(v1 + 128) = v9;

  v11 = -[objc_class segmentationBuffer](frame.super.isa, sel_segmentationBuffer);
  v12 = *(void **)(v1 + 136);
  *(_QWORD *)(v1 + 136) = v11;

  v13 = *(void **)(v1 + 120);
  if (v13 && (v14 = *(void **)(v1 + 128)) != 0)
  {
    v15 = v13;
    v16 = v14;
    CVPixelBufferLockBaseAddress(v15, 1uLL);
    CVPixelBufferLockBaseAddress(v16, 1uLL);
    *(_QWORD *)(v1 + 144) = CVPixelBufferGetBaseAddress(v15);
    *(_QWORD *)(v1 + 152) = CVPixelBufferGetBaseAddress(v16);
    CVPixelBufferUnlockBaseAddress(v15, 1uLL);
    CVPixelBufferUnlockBaseAddress(v16, 1uLL);

  }
  else
  {
    *(_QWORD *)(v1 + 144) = 0;
    *(_QWORD *)(v1 + 152) = 0;
  }
  v17 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v18 = objc_msgSend(v17, sel_kADShowPerson);

  if (v18 && (v19 = *(void **)(v1 + 136)) != 0)
  {
    v20 = v19;
    CVPixelBufferLockBaseAddress(v20, 1uLL);
    *(_QWORD *)(v1 + 160) = CVPixelBufferGetBaseAddress(v20);
    CVPixelBufferUnlockBaseAddress(v20, 1uLL);

  }
  else
  {
    *(_QWORD *)(v1 + 160) = 0;
  }
  sub_221621734();

  swift_beginAccess();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 304));
  swift_endAccess();
  kdebug_trace();
}

uint64_t ADProcessor.adConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(v0 + 48))
  {
    v1 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v2 = v0;
    v3 = *(_QWORD *)(v0 + 272);
    ObjectType = swift_getObjectType();
    v5 = (*(double (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    v7 = v6;
    v9 = v8;
    v11 = v10;
    type metadata accessor for ARKitADConfiguration();
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_221658FB0;
    *(double *)(v1 + 32) = v5;
    *(_QWORD *)(v1 + 40) = v7;
    *(_QWORD *)(v1 + 48) = v9;
    *(_QWORD *)(v1 + 56) = v11;
    *(_DWORD *)(v1 + 64) = 1065353216;
    *(_BYTE *)(v1 + 68) = 1;
    *(_OWORD *)(v1 + 72) = xmmword_221658FC0;
    *(_QWORD *)(v2 + 48) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_221620718()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 32) != 1)
    return *(_QWORD *)(v0 + 24);
  result = 80;
  *(_QWORD *)(v0 + 24) = 80;
  *(_BYTE *)(v0 + 32) = 0;
  return result;
}

uint64_t sub_22162073C()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 40) != 1)
    return *(unsigned int *)(v0 + 36);
  result = 1111970369;
  strcpy((char *)(v0 + 36), "ARGB");
  return result;
}

__CVMetalTextureCache *ADProcessor.textureCache.getter()
{
  uint64_t v0;
  void *v1;
  __CVMetalTextureCache *v2;
  __CVMetalTextureCache *result;
  CVMetalTextureCacheRef v4;
  void *v5;
  id v6;
  CVMetalTextureCacheRef v7[2];

  v7[1] = *(CVMetalTextureCacheRef *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 64);
  if (v1)
  {
    v2 = *(__CVMetalTextureCache **)(v0 + 64);
LABEL_5:
    v6 = v1;
    return v2;
  }
  v7[0] = 0;
  result = (__CVMetalTextureCache *)CVMetalTextureCacheCreate(0, 0, *(id *)(v0 + 288), 0, v7);
  v4 = v7[0];
  if (v7[0])
  {
    v5 = *(void **)(v0 + 64);
    *(CVMetalTextureCacheRef *)(v0 + 64) = v7[0];
    v2 = v4;

    v1 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_221620810()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    v2 = *(id *)(v0 + 72);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for KernelYCbCrToRGB()), sel_initWithDevice_, *(_QWORD *)(v0 + 288));
    v4 = *(void **)(v0 + 72);
    *(_QWORD *)(v0 + 72) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void ADProcessor.capturedPixelBuffer.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  OSType v6;
  CVPixelBufferRef v7;
  void *v8;
  __CVBuffer *v9;
  CVPixelBufferRef v10[2];

  v10[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 88);
  if (v1 != (void *)1)
    goto LABEL_5;
  ADProcessor.capturedTexture.getter();
  if (v2)
  {
    v3 = objc_msgSend(v2, sel_width);
    swift_unknownObjectRelease();
    ADProcessor.capturedTexture.getter();
    if (v4)
    {
      v5 = objc_msgSend(v4, sel_height);
      swift_unknownObjectRelease();
      v6 = sub_22162073C();
      v10[0] = 0;
      CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (size_t)v3, (size_t)v5, v6, 0, v10);
      v7 = v10[0];
      v8 = *(void **)(v0 + 88);
      *(CVPixelBufferRef *)(v0 + 88) = v10[0];
      v9 = v7;
      sub_2215E0368(v8);
LABEL_5:
      sub_2215E0378(v1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

__n128 ADProcessor.cameraToWorld.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 240);
  v4 = *(_OWORD *)(v1 + 192);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 208);
  v6 = *(_OWORD *)(v1 + 224);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 64) = v3;
  return result;
}

uint64_t ADProcessor.isGuidedFilterEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 242);
}

uint64_t ADProcessor.isGuidedFilterEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 242) = a1;
  return result;
}

uint64_t (*ADProcessor.isGuidedFilterEnabled.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t ADProcessor.isNoiseReductionEnabled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 243);
}

uint64_t ADProcessor.isNoiseReductionEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 243) = a1;
  return result;
}

uint64_t (*ADProcessor.isNoiseReductionEnabled.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_221620B2C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 248))
  {
    v1 = *(id *)(v0 + 248);
  }
  else
  {
    v2 = v0;
    v3 = ADProcessor.transformer.getter();
    type metadata accessor for ADGuidedFilter();
    swift_allocObject();
    v1 = sub_2215E0388(v3);
    swift_release();
    *(_QWORD *)(v2 + 248) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t ADProcessor.guidedDepthTexture.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

id ADProcessor.init(sceneView:orientation:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = sub_2216214B0(a1, a2, a3);

  return v4;
}

uint64_t ADProcessor.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();

  sub_2215E86B8(*(_QWORD *)(v0 + 80));
  sub_2215E0368(*(id *)(v0 + 88));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ADProcessor.__deallocating_deinit()
{
  ADProcessor.deinit();
  return swift_deallocClassInstance();
}

int64_t sub_221620CD4(void *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t BaseAddress;
  int64_t result;
  void *v10;
  int64_t BytesPerRow;

  if ((sub_221620E2C(a1) & 1) == 0)
    return 0;
  ADProcessor.capturedTexture.getter();
  if (!v2)
    return 0;
  v3 = v2;
  ADProcessor.capturedPixelBuffer.getter();
  if (!v4)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  v5 = v4;
  v6 = objc_msgSend(v3, sel_iosurface);
  if (!v6)
  {
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  v7 = v6;
  if (CVPixelBufferLockBaseAddress((CVPixelBufferRef)v5, 1uLL))
  {
    swift_unknownObjectRelease();

LABEL_9:
    return 0;
  }
  BaseAddress = (uint64_t)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v5);
  if (!BaseAddress)
  {
    CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v5, 1uLL);
    swift_unknownObjectRelease();

    return BaseAddress;
  }
  v10 = IOSurfaceGetBaseAddress((IOSurfaceRef)v7);
  BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)v7);
  result = IOSurfaceGetHeight((IOSurfaceRef)v7);
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 == (BytesPerRow * result) >> 63)
  {
    memcpy((void *)BaseAddress, v10, BytesPerRow * result);
    BaseAddress = 1;
    CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v5, 1uLL);
    swift_unknownObjectRelease();

    *(_BYTE *)(v1 + 241) = 1;
    return BaseAddress;
  }
  __break(1u);
  return result;
}

uint64_t sub_221620E2C(void *a1)
{
  uint64_t v1;
  __CVBuffer *v2;
  __CVMetalTextureCache *v3;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  uint64_t result;
  CVMetalTextureRef v7;
  id v8;
  __CVMetalTextureCache *v9;
  size_t v10;
  size_t v11;
  CVMetalTextureRef v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  double v19;
  double v20;
  float64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  CVMetalTextureRef image[2];
  __int128 v28;
  __int128 v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = (__CVBuffer *)objc_msgSend(a1, sel_capturedImage);
  if ((uint64_t)CVPixelBufferGetPlaneCount(v2) < 2)
    goto LABEL_2;
  v3 = ADProcessor.textureCache.getter();
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(v2, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(v2, 0);
  image[0] = 0;
  result = CVMetalTextureCacheCreateTextureFromImage(0, v3, v2, 0, MTLPixelFormatR8Unorm, WidthOfPlane, HeightOfPlane, 0, image);
  v7 = image[0];
  if ((_DWORD)result)
  {

    return 0;
  }
  if (!image[0])
  {
    __break(1u);
    goto LABEL_22;
  }
  v8 = CVMetalTextureGetTexture(image[0]);

  if (!v8)
  {
LABEL_2:

    return 0;
  }
  v9 = ADProcessor.textureCache.getter();
  v10 = CVPixelBufferGetWidthOfPlane(v2, 1uLL);
  v11 = CVPixelBufferGetHeightOfPlane(v2, 1uLL);
  image[0] = 0;
  result = CVMetalTextureCacheCreateTextureFromImage(0, v9, v2, 0, MTLPixelFormatRG8Unorm, v10, v11, 1uLL, image);
  v12 = image[0];
  if ((_DWORD)result)
  {
    swift_unknownObjectRelease();

    return 0;
  }
  if (!image[0])
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v13 = CVMetalTextureGetTexture(image[0]);

  if (!v13)
    goto LABEL_20;
  v14 = objc_msgSend(*(id *)(v1 + 296), sel_commandBuffer);
  if (!v14)
  {
    swift_unknownObjectRelease();
LABEL_20:
    swift_unknownObjectRelease();
    goto LABEL_2;
  }
  v15 = v14;
  ADProcessor.capturedTexture.getter();
  if (!v16)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_20;
  }
  v17 = v16;
  v18 = sub_221620810();
  ADProcessor.transformer.getter();
  v19 = ADTransformer.cameraCropRect.getter();
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release();
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)image = 0u;
  v30 = 1;
  v26 = sub_2216267D4(v15, v8, (uint64_t)v13, v17, 0, (uint64_t)image, v19, v21, v23, v25);

  if (v26)
  {
    objc_msgSend(v15, sel_commit);
    objc_msgSend(v15, sel_waitUntilCompleted);
  }
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return 1;
}

uint64_t sub_221621124(unint64_t a1, int a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v11;
  CGFloat v12;
  CGFloat v13;
  CGPoint v14;
  float x;
  float y;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  CGAffineTransform v26;
  _BYTE v27[80];
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  CGAffineTransform v35;
  CGPoint v36;

  if ((a4 & 1) != 0)
    return 0;
  sub_221622ADC(a5, (uint64_t)v27);
  result = ADProcessor.transformer.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a7 + 16) > a1)
  {
    v11 = a7 + 16 * a1;
    v12 = *(double *)(v11 + 32);
    v13 = *(double *)(v11 + 40);
    v24 = v29;
    v25 = v28;
    v22 = v31;
    v23 = v30;
    v21 = v33;
    v19 = v32;
    v20 = v34;
    Transformer.viewToCamera.getter(&v35.a);
    v26 = v35;
    v36.x = v12;
    v36.y = v13;
    v14 = CGPointApplyAffineTransform(v36, &v26);
    x = v14.x;
    y = v14.y;
    v17 = vaddq_f32(v20, vmlaq_n_f32(vmulq_n_f32(v19, x), v21, y));
    *(float32x2_t *)v18.f32 = vmul_n_f32(*(float32x2_t *)v17.f32, *(float *)&a2);
    v18.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(*(float *)&a2, v17, 2));
    *(float32x2_t *)v25.f32 = DepthTransformer.worldPoint(localPoint:cameraToWorld:)(v18, v25, v24, v23, v22);
    swift_release();
    return v25.i64[0];
  }
  __break(1u);
  return result;
}

uint64_t sub_221621280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  CGFloat *v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  CGPoint v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t result;
  double v21;
  double v22;
  uint64_t v23;
  CGAffineTransform v26;
  CGAffineTransform v27;
  uint64_t v28;
  CGPoint v29;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v28 = MEMORY[0x24BEE4AF8];
  sub_2215CC010(0, v4, 0);
  v7 = (CGFloat *)(a1 + 40);
  v5 = v28;
  while (1)
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    v10 = ADProcessor.transformer.getter();
    ADTransformer.viewToAD.getter(&v27);
    v26 = v27;
    v29.x = v8;
    v29.y = v9;
    v11 = CGPointApplyAffineTransform(v29, &v26);
    if (v11.x < 0.0 || (v12 = *(double *)(v10 + 1056), v11.x >= v12) || v11.y < 0.0)
    {
      swift_release();
LABEL_7:
      v13 = 0;
      v14 = 0;
      v15 = 1;
      goto LABEL_8;
    }
    v19 = *(double *)(v10 + 1064);
    result = swift_release();
    if (v11.y >= v19)
      goto LABEL_7;
    v21 = round(v11.y) * v12;
    if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
      break;
    if (v21 <= -9.22337204e18)
      goto LABEL_23;
    if (v21 >= 9.22337204e18)
      goto LABEL_24;
    v22 = round(v11.x);
    if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
      goto LABEL_25;
    if (v22 <= -9.22337204e18)
      goto LABEL_26;
    if (v22 >= 9.22337204e18)
      goto LABEL_27;
    v23 = (uint64_t)v21 + (uint64_t)v22;
    if (__OFADD__((uint64_t)v21, (uint64_t)v22))
      goto LABEL_28;
    v14 = *(unsigned __int8 *)(a3 + v23);
    v13 = *(unsigned int *)(a4 + 4 * v23);
    ADProcessor.adConfig.getter();
    swift_release();
    v15 = 0;
LABEL_8:
    v28 = v5;
    v17 = *(_QWORD *)(v5 + 16);
    v16 = *(_QWORD *)(v5 + 24);
    if (v17 >= v16 >> 1)
    {
      sub_2215CC010((char *)(v16 > 1), v17 + 1, 1);
      v5 = v28;
    }
    *(_QWORD *)(v5 + 16) = v17 + 1;
    v18 = v5 + 24 * v17;
    *(_QWORD *)(v18 + 32) = v13;
    *(_QWORD *)(v18 + 40) = v14;
    *(_BYTE *)(v18 + 48) = v15;
    v7 += 2;
    if (!--v4)
      return v5;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

id sub_2216214B0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  id v11;
  id result;

  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 1;
  *(_DWORD *)(v3 + 36) = 0;
  *(_BYTE *)(v3 + 40) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(int64x2_t *)(v3 + 80) = vdupq_n_s64(1uLL);
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_QWORD *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_WORD *)(v3 + 240) = 1;
  v7 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v8 = (void *)sub_22165318C();
  v9 = objc_msgSend(v7, sel_BOOLForKey_, v8);

  *(_BYTE *)(v3 + 242) = v9;
  *(_BYTE *)(v3 + 243) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  if (qword_2556D8D88 != -1)
    swift_once();
  v10 = (void *)static MetalBundle.device;
  *(_DWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 264) = a1;
  *(_QWORD *)(v3 + 272) = a2;
  *(_QWORD *)(v3 + 280) = a3;
  *(_QWORD *)(v3 + 288) = v10;
  swift_unknownObjectRetain();
  v11 = a1;
  result = objc_msgSend(v10, sel_newCommandQueue);
  if (result)
  {
    *(_QWORD *)(v3 + 296) = result;
    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_221621608(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;

  v19 = MEMORY[0x24BEE4AF8];
  sub_2215CC02C(0, 0, 0);
  v3 = v19;
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    v6 = (unsigned __int8 *)(a1 + 48);
    do
    {
      v8 = a2(v5, *((_QWORD *)v6 - 2), *((_QWORD *)v6 - 1), *v6);
      v10 = v9;
      v12 = v11;
      v20 = v3;
      v14 = *(_QWORD *)(v3 + 16);
      v13 = *(_QWORD *)(v3 + 24);
      if (v14 >= v13 >> 1)
      {
        v16 = v7;
        sub_2215CC02C((char *)(v13 > 1), v14 + 1, 1);
        v7 = v16;
        v3 = v20;
      }
      ++v5;
      v6 += 24;
      *(_QWORD *)(v3 + 16) = v14 + 1;
      v15 = v3 + 32 * v14;
      *(_QWORD *)(v15 + 32) = v8;
      *(_QWORD *)(v15 + 40) = v10;
      *(_QWORD *)(v15 + 48) = v7;
      *(_BYTE *)(v15 + 56) = v12 & 1;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v3;
}

void sub_221621734()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  __CVBuffer *v3;
  id v4;
  __IOSurface *v5;
  void *BaseAddress;
  const void *v7;
  void *v8;
  int64_t BytesPerRow;
  int64_t Height;
  __CVBuffer *v11;
  __CVBuffer *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  const void *v21;
  void *v22;
  int64_t v23;
  int64_t v24;
  id v25;
  unsigned int v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  const void *v32;
  void *v33;
  int64_t v34;
  int64_t v35;

  v1 = v0;
  v2 = *(void **)(v0 + 120);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend((id)ADProcessor.outputDepthTexture.getter(), sel_iosurface);
    swift_unknownObjectRelease();
    if (v4)
    {
      v5 = (__IOSurface *)v4;
      if (!CVPixelBufferLockBaseAddress(v3, 1uLL))
      {
        BaseAddress = CVPixelBufferGetBaseAddress(v3);
        if (BaseAddress)
        {
          v7 = BaseAddress;
          v8 = IOSurfaceGetBaseAddress(v5);
          BytesPerRow = IOSurfaceGetBytesPerRow(v5);
          Height = IOSurfaceGetHeight(v5);
          if ((unsigned __int128)(BytesPerRow * (__int128)Height) >> 64 != (BytesPerRow * Height) >> 63)
          {
            __break(1u);
            goto LABEL_37;
          }
          memcpy(v8, v7, BytesPerRow * Height);
        }
        CVPixelBufferUnlockBaseAddress(v3, 1uLL);
      }

      swift_beginAccess();
      if (*(_BYTE *)(v1 + 242) == 1)
      {
        ADProcessor.capturedPixelBuffer.getter();
        if (v11)
        {
          v12 = v11;
          sub_221620B2C();
          v13 = ADProcessor.outputDepthTexture.getter();
          v14 = ADProcessor.outputConfidenceTexture.getter();
          swift_beginAccess();
          v15 = sub_2215DFE54(v13, v14, v12, *(_BYTE *)(v1 + 243));
          swift_release();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          if (v15)
          {
            swift_beginAccess();
            *(_QWORD *)(v1 + 256) = v15;

            swift_unknownObjectRelease();
            goto LABEL_14;
          }
        }
      }

    }
  }
LABEL_14:
  v16 = *(void **)(v1 + 128);
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend((id)ADProcessor.outputConfidenceTexture.getter(), sel_iosurface);
    swift_unknownObjectRelease();
    if (!v18)
    {
      v19 = v17;
      goto LABEL_23;
    }
    v19 = v18;
    if (CVPixelBufferLockBaseAddress((CVPixelBufferRef)v17, 1uLL))
    {
LABEL_21:

LABEL_23:
      goto LABEL_24;
    }
    v20 = CVPixelBufferGetBaseAddress((CVPixelBufferRef)v17);
    if (!v20)
    {
LABEL_20:
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v17, 1uLL);
      goto LABEL_21;
    }
    v21 = v20;
    v22 = IOSurfaceGetBaseAddress((IOSurfaceRef)v19);
    v23 = IOSurfaceGetBytesPerRow((IOSurfaceRef)v19);
    v24 = IOSurfaceGetHeight((IOSurfaceRef)v19);
    if ((unsigned __int128)(v23 * (__int128)v24) >> 64 == (v23 * v24) >> 63)
    {
      memcpy(v22, v21, v23 * v24);
      goto LABEL_20;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_24:
  v25 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v26 = objc_msgSend(v25, sel_kADShowPerson);

  if (v26)
  {
    v27 = *(void **)(v1 + 136);
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend((id)ADProcessor.outputPersonTexture.getter(), sel_iosurface);
      swift_unknownObjectRelease();
      if (!v29)
      {
        v30 = v28;
        goto LABEL_34;
      }
      v30 = v29;
      if (CVPixelBufferLockBaseAddress((CVPixelBufferRef)v28, 1uLL))
      {
LABEL_32:

LABEL_34:
        return;
      }
      v31 = CVPixelBufferGetBaseAddress((CVPixelBufferRef)v28);
      if (!v31)
      {
LABEL_31:
        CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v28, 1uLL);
        goto LABEL_32;
      }
      v32 = v31;
      v33 = IOSurfaceGetBaseAddress((IOSurfaceRef)v30);
      v34 = IOSurfaceGetBytesPerRow((IOSurfaceRef)v30);
      v35 = IOSurfaceGetHeight((IOSurfaceRef)v30);
      if ((unsigned __int128)(v34 * (__int128)v35) >> 64 == (v34 * v35) >> 63)
      {
        memcpy(v33, v32, v34 * v35);
        goto LABEL_31;
      }
LABEL_38:
      __break(1u);
    }
  }
}

uint64_t sub_221621AC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ADProcessor.adConfig.getter();
  *a1 = result;
  return result;
}

uint64_t sub_221621AF0(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 48) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t sub_221621B20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ADProcessor.transformer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_221621B48(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 56) = *a1;
  swift_retain();
  return swift_release();
}

__CVMetalTextureCache *sub_221621B78@<X0>(__CVMetalTextureCache **a1@<X8>)
{
  __CVMetalTextureCache *result;

  result = ADProcessor.textureCache.getter();
  *a1 = result;
  return result;
}

void sub_221621BA0(void **a1, uint64_t a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v4 = *(id *)(*(_QWORD *)a2 + 64);
  *(_QWORD *)(*(_QWORD *)a2 + 64) = *a1;
  v3 = v2;

}

void sub_221621BD4(_QWORD *a1@<X8>)
{
  uint64_t v2;

  ADProcessor.capturedTexture.getter();
  *a1 = v2;
}

uint64_t sub_221621BFC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  *(_QWORD *)(*(_QWORD *)a2 + 80) = *a1;
  swift_unknownObjectRetain();
  return sub_2215E86B8(v2);
}

void sub_221621C2C(_QWORD *a1@<X8>)
{
  uint64_t v2;

  ADProcessor.capturedPixelBuffer.getter();
  *a1 = v2;
}

void sub_221621C54(void **a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *a1;
  v3 = *(void **)(*(_QWORD *)a2 + 88);
  *(_QWORD *)(*(_QWORD *)a2 + 88) = *a1;
  v4 = v2;
  sub_2215E0368(v3);
}

uint64_t sub_221621C84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ADProcessor.outputDepthTexture.getter();
  *a1 = result;
  return result;
}

uint64_t sub_221621CAC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 96) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_221621CDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ADProcessor.outputConfidenceTexture.getter();
  *a1 = result;
  return result;
}

uint64_t sub_221621D04(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 104) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_221621D34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ADProcessor.outputPersonTexture.getter();
  *a1 = result;
  return result;
}

uint64_t sub_221621D5C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 112) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for ADProcessor()
{
  return objc_opt_self();
}

void *static ComputedCameraProperties.shared(for:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  _BYTE v4[480];

  sub_221622ADC(a1, (uint64_t)v4);
  return memcpy(a2, v4, 0x1E0uLL);
}

double ComputedCameraProperties.viewportSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

__n128 ComputedCameraProperties.view.getter()
{
  __n128 *v0;

  return v0[1];
}

__n128 ComputedCameraProperties.inverseView.getter()
{
  __n128 *v0;

  return v0[5];
}

__n128 ComputedCameraProperties.viewProjection.getter()
{
  __n128 *v0;

  return v0[9];
}

__n128 ComputedCameraProperties.viewProjectionInv.getter()
{
  __n128 *v0;

  return v0[13];
}

double ComputedCameraProperties.viewRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 272);
}

__n128 ComputedCameraProperties.transform.getter()
{
  __n128 *v0;

  return v0[19];
}

float ComputedCameraProperties.xFov.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 368);
}

float ComputedCameraProperties.yFov.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 372);
}

__n128 ComputedCameraProperties.cameraIntrinsics.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 384);
  v3 = *(_OWORD *)(v1 + 400);
  v4 = *(_OWORD *)(v1 + 416);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 ComputedCameraProperties.cameraIntrinsicsInversed.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(v1 + 432);
  v3 = *(_OWORD *)(v1 + 448);
  v4 = *(_OWORD *)(v1 + 464);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 ComputedCameraProperties.init()@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = *(__n128 *)MEMORY[0x24BDAEE00];
  v2 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v3 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v4 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v5 = *MEMORY[0x24BDAEDF8];
  v6 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  v7 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
  *(_QWORD *)a1 = 0;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v2;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v4;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v2;
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 192) = v4;
  *(__n128 *)(a1 + 208) = result;
  *(_OWORD *)(a1 + 224) = v2;
  *(_OWORD *)(a1 + 240) = v3;
  *(_OWORD *)(a1 + 256) = v4;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(__n128 *)(a1 + 304) = result;
  *(_OWORD *)(a1 + 320) = v2;
  *(_OWORD *)(a1 + 336) = v3;
  *(_OWORD *)(a1 + 352) = v4;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 384) = v5;
  *(_OWORD *)(a1 + 400) = v6;
  *(_OWORD *)(a1 + 416) = v7;
  *(_OWORD *)(a1 + 432) = v5;
  *(_OWORD *)(a1 + 448) = v6;
  *(_OWORD *)(a1 + 464) = v7;
  return result;
}

void *ComputedCameraProperties.init(camera:viewportSize:orientation:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  _BYTE v7[480];

  sub_221622D7C(a1, a2, (uint64_t)v7, a4);

  return memcpy(a3, v7, 0x1E0uLL);
}

void sub_221621F2C()
{
  off_2556DD838 = (_UNKNOWN *)MEMORY[0x24BEE4B00];
}

void sub_221621F40()
{
  qword_2556DD840 = 0;
}

uint64_t static ComputedCameraProperties.shared.getter@<X0>(uint64_t a1@<X8>)
{
  double v2;
  _QWORD *v3;
  unint64_t v4;
  char v5;
  const void *v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  _BYTE v40[496];
  __int128 __dst;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[496];

  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)&unk_2556DD830);
  swift_endAccess();
  if (qword_2556D8EE0 != -1)
    swift_once();
  if (qword_2556D8EE8 != -1)
    swift_once();
  v2 = *(double *)&qword_2556DD840;
  swift_beginAccess();
  v3 = off_2556DD838;
  if (*((_QWORD *)off_2556DD838 + 2) && (v4 = sub_2215CA488(v2), (v5 & 1) != 0))
  {
    v6 = (const void *)(v3[7] + 496 * v4);
    memcpy(v40, v6, sizeof(v40));
    memmove(&__dst, v6, 0x1F0uLL);
    nullsub_1(&__dst);
    sub_2215D2034((uint64_t)v40);
  }
  else
  {
    sub_2215E731C(&__dst);
  }
  sub_221623394((uint64_t)&__dst, (uint64_t)v74);
  swift_endAccess();
  swift_beginAccess();
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_2556DD830);
  swift_endAccess();
  sub_221623394((uint64_t)v74, (uint64_t)&__dst);
  result = sub_2215E7364((uint64_t *)&__dst);
  if ((_DWORD)result == 1)
  {
    v9 = *MEMORY[0x24BDAEE00];
    v10 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v11 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v12 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v13 = MEMORY[0x24BDAEDF8];
    v14 = *MEMORY[0x24BDAEDF8];
    v15 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
    v16 = *MEMORY[0x24BDAEE00];
    v17 = v10;
    v18 = v11;
    v19 = v12;
    v20 = *MEMORY[0x24BDAEE00];
    v21 = v10;
    v22 = v11;
    v23 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
    v24 = v12;
    v25 = *MEMORY[0x24BDAEE00];
    v26 = v10;
    v27 = v11;
    v28 = 0uLL;
    v29 = 0;
    v30 = v12;
    v31 = *MEMORY[0x24BDAEE00];
    v32 = v10;
    v33 = v11;
    v34 = v12;
    v35 = *MEMORY[0x24BDAEDF8];
    v36 = v15;
    v37 = v23;
    v38 = 0;
    v39 = 0uLL;
  }
  else
  {
    result = sub_2215E737C((uint64_t)v74);
    v29 = v42;
    v13 = v43;
    v9 = v44;
    v10 = v45;
    v11 = v46;
    v12 = v47;
    v16 = v48;
    v17 = v49;
    v18 = v50;
    v19 = v51;
    v20 = v52;
    v21 = v53;
    v22 = v54;
    v24 = v55;
    v25 = v56;
    v26 = v57;
    v27 = v58;
    v30 = v59;
    v28 = v60;
    v39 = v61;
    v31 = v62;
    v32 = v63;
    v33 = v64;
    v34 = v65;
    v38 = v66;
    v8 = v67;
    v14 = v68;
    v15 = v69;
    v23 = v70;
    v35 = v71;
    v36 = v72;
    v37 = v73;
  }
  *(_QWORD *)a1 = v29;
  *(_QWORD *)(a1 + 8) = v13;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 112) = v18;
  *(_OWORD *)(a1 + 128) = v19;
  *(_OWORD *)(a1 + 144) = v20;
  *(_OWORD *)(a1 + 160) = v21;
  *(_OWORD *)(a1 + 176) = v22;
  *(_OWORD *)(a1 + 192) = v24;
  *(_OWORD *)(a1 + 208) = v25;
  *(_OWORD *)(a1 + 224) = v26;
  *(_OWORD *)(a1 + 240) = v27;
  *(_OWORD *)(a1 + 256) = v30;
  *(_OWORD *)(a1 + 272) = v28;
  *(_OWORD *)(a1 + 288) = v39;
  *(_OWORD *)(a1 + 304) = v31;
  *(_OWORD *)(a1 + 320) = v32;
  *(_OWORD *)(a1 + 336) = v33;
  *(_OWORD *)(a1 + 352) = v34;
  *(_QWORD *)(a1 + 368) = v38;
  *(_QWORD *)(a1 + 376) = v8;
  *(_OWORD *)(a1 + 384) = v14;
  *(_OWORD *)(a1 + 400) = v15;
  *(_OWORD *)(a1 + 416) = v23;
  *(_OWORD *)(a1 + 432) = v35;
  *(_OWORD *)(a1 + 448) = v36;
  *(_OWORD *)(a1 + 464) = v37;
  return result;
}

